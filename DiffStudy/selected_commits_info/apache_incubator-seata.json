[
  {
    "oid": "d670e722cea2f2afbfac627fb2e5bcb252d90405",
    "message": "docs: fix typo (#3574)",
    "date": "2021-03-18T13:38:30Z",
    "url": "https://github.com/apache/incubator-seata/commit/d670e722cea2f2afbfac627fb2e5bcb252d90405",
    "details": {
      "sha": "8fb8e7df0fa7c8b4788b6be4eb21bfbf30d9a021",
      "filename": "core/src/main/java/io/seata/core/event/EventBus.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/d670e722cea2f2afbfac627fb2e5bcb252d90405/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fevent%2FEventBus.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/d670e722cea2f2afbfac627fb2e5bcb252d90405/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fevent%2FEventBus.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fevent%2FEventBus.java?ref=d670e722cea2f2afbfac627fb2e5bcb252d90405",
      "patch": "@@ -16,7 +16,7 @@\n package io.seata.core.event;\n \n /**\n- * The interface fot event bus.\n+ * The interface for event bus.\n  *\n  * @author zhengyangyong\n  */",
      "parent_sha": "3f924ea7debf45e2d1c1ae92e7ac0ea4fb981380"
    }
  },
  {
    "oid": "d146d28b455ae988c5bf283f1f1598b05b9104c6",
    "message": "optimize: optimize TccActionInterceptor log print (#2683)",
    "date": "2020-05-13T06:09:13Z",
    "url": "https://github.com/apache/incubator-seata/commit/d146d28b455ae988c5bf283f1f1598b05b9104c6",
    "details": {
      "sha": "745503d8e31d68d9ec951abe041fe94c716028ee",
      "filename": "spring/src/main/java/io/seata/spring/tcc/TccActionInterceptor.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/apache/incubator-seata/blob/d146d28b455ae988c5bf283f1f1598b05b9104c6/spring%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fspring%2Ftcc%2FTccActionInterceptor.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/d146d28b455ae988c5bf283f1f1598b05b9104c6/spring%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fspring%2Ftcc%2FTccActionInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/spring%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fspring%2Ftcc%2FTccActionInterceptor.java?ref=d146d28b455ae988c5bf283f1f1598b05b9104c6",
      "patch": "@@ -104,8 +104,8 @@ public Object invoke(final MethodInvocation invocation) throws Throwable {\n      * @return the action interface method\n      */\n     protected Method getActionInterfaceMethod(MethodInvocation invocation) {\n+        Class<?> interfaceType = null;\n         try {\n-            Class<?> interfaceType;\n             if (remotingDesc == null) {\n                 interfaceType = getProxyInterface(invocation.getThis());\n             } else {\n@@ -120,6 +120,11 @@ protected Method getActionInterfaceMethod(MethodInvocation invocation) {\n             }\n             return interfaceType.getMethod(invocation.getMethod().getName(),\n                 invocation.getMethod().getParameterTypes());\n+        } catch (NoSuchMethodException e) {\n+            if (interfaceType != null && !invocation.getMethod().getName().equals(\"toString\")) {\n+                LOGGER.warn(\"no such method '{}' from interface {}\", invocation.getMethod().getName(), interfaceType.getName());\n+            }\n+            return invocation.getMethod();\n         } catch (Exception e) {\n             LOGGER.warn(\"get Method from interface failed\", e);\n             return invocation.getMethod();",
      "parent_sha": "fd3edf610b95d694658dd4759673f4c42d4324a7"
    }
  },
  {
    "oid": "1dd65b7603eadf5e41b92fa780f33b9b31ea2deb",
    "message": "bugfix: if the connection is autocommit=false will cause fail to delete (#1419)",
    "date": "2019-08-08T03:00:28Z",
    "url": "https://github.com/apache/incubator-seata/commit/1dd65b7603eadf5e41b92fa780f33b9b31ea2deb",
    "details": {
      "sha": "ec667e6be6e9fd6ba0266e766828ff1cb5b2e436",
      "filename": "rm-datasource/src/main/java/io/seata/rm/RMHandlerAT.java",
      "status": "modified",
      "additions": 21,
      "deletions": 10,
      "changes": 31,
      "blob_url": "https://github.com/apache/incubator-seata/blob/1dd65b7603eadf5e41b92fa780f33b9b31ea2deb/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2FRMHandlerAT.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/1dd65b7603eadf5e41b92fa780f33b9b31ea2deb/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2FRMHandlerAT.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2FRMHandlerAT.java?ref=1dd65b7603eadf5e41b92fa780f33b9b31ea2deb",
      "patch": "@@ -15,6 +15,11 @@\n  */\n package io.seata.rm;\n \n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Calendar;\n+import java.util.Date;\n+\n import io.seata.core.model.BranchType;\n import io.seata.core.model.ResourceManager;\n import io.seata.core.protocol.transaction.UndoLogDeleteRequest;\n@@ -24,11 +29,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.sql.Connection;\n-import java.sql.SQLException;\n-import java.util.Calendar;\n-import java.util.Date;\n-\n /**\n  * The type Rm handler at.\n  *\n@@ -42,7 +42,7 @@ public class RMHandlerAT extends AbstractRMHandler {\n \n     @Override\n     public void handle(UndoLogDeleteRequest request) {\n-        DataSourceManager dataSourceManager = (DataSourceManager) getResourceManager();\n+        DataSourceManager dataSourceManager = (DataSourceManager)getResourceManager();\n         DataSourceProxy dataSourceProxy = dataSourceManager.get(request.getResourceId());\n         if (dataSourceProxy == null) {\n             LOGGER.warn(\"Failed to get dataSourceProxy for delete undolog on \" + request.getResourceId());\n@@ -52,12 +52,23 @@ public void handle(UndoLogDeleteRequest request) {\n         Connection conn = null;\n         try {\n             conn = dataSourceProxy.getPlainConnection();\n-            int deleteRows;\n+            int deleteRows = 0;\n             do {\n-                deleteRows = UndoLogManager.deleteUndoLogByLogCreated(logCreatedSave, dataSourceProxy.getDbType(), LIMIT_ROWS, conn);\n+                try {\n+                    deleteRows = UndoLogManager.deleteUndoLogByLogCreated(logCreatedSave, dataSourceProxy.getDbType(),\n+                        LIMIT_ROWS, conn);\n+                    if (deleteRows > 0 && !conn.getAutoCommit()) {\n+                        conn.commit();\n+                    }\n+                } catch (SQLException exx) {\n+                    if (deleteRows > 0 && !conn.getAutoCommit()) {\n+                        conn.rollback();\n+                    }\n+                    throw exx;\n+                }\n             } while (deleteRows == LIMIT_ROWS);\n-        }  catch (Exception e) {\n-            LOGGER.warn(\"Failed to get connection for delete undolog \", e);\n+        } catch (Exception e) {\n+            LOGGER.error(\"Failed to delete expired undo_log\uff0cerror:{}\", e.getMessage(), e);\n         } finally {\n             if (conn != null) {\n                 try {",
      "parent_sha": "4ba7f46e8631686d987cceacadcae79224e002f0"
    }
  },
  {
    "oid": "d5fe866e79b06a4b2c578895f868e8b8f3aa9719",
    "message": "bugfix: oracle database insert value error (#4696)",
    "date": "2022-06-21T09:46:23Z",
    "url": "https://github.com/apache/incubator-seata/commit/d5fe866e79b06a4b2c578895f868e8b8f3aa9719",
    "details": {
      "sha": "b4f25d2833fd7427e83bb4d7dbb50428dc3d7077",
      "filename": "core/src/main/java/io/seata/core/store/db/sql/distributed/lock/BaseDistributedLockSql.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/d5fe866e79b06a4b2c578895f868e8b8f3aa9719/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fstore%2Fdb%2Fsql%2Fdistributed%2Flock%2FBaseDistributedLockSql.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/d5fe866e79b06a4b2c578895f868e8b8f3aa9719/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fstore%2Fdb%2Fsql%2Fdistributed%2Flock%2FBaseDistributedLockSql.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fstore%2Fdb%2Fsql%2Fdistributed%2Flock%2FBaseDistributedLockSql.java?ref=d5fe866e79b06a4b2c578895f868e8b8f3aa9719",
      "patch": "@@ -30,7 +30,7 @@ public class BaseDistributedLockSql implements DistributedLockSql {\n             + \" WHERE \" + ServerTableColumnsName.DISTRIBUTED_LOCK_KEY + \" = ? FOR UPDATE\";\n \n     protected static final String INSERT_DISTRIBUTED_LOCK_SQL = \"INSERT INTO \" + DISTRIBUTED_LOCK_TABLE_PLACE_HOLD + \"(\"\n-            + ALL_COLUMNS + \") VALUE (?, ?, ?)\";\n+            + ALL_COLUMNS + \") VALUES (?, ?, ?)\";\n \n     protected static final String UPDATE_DISTRIBUTED_LOCK_SQL = \"UPDATE \" + DISTRIBUTED_LOCK_TABLE_PLACE_HOLD + \" SET \"\n             + ServerTableColumnsName.DISTRIBUTED_LOCK_VALUE + \"=?, \" + ServerTableColumnsName.DISTRIBUTED_LOCK_EXPIRE + \"=?\"",
      "parent_sha": "95a89d57065ec1cf751e21ee522503dbee18c401"
    }
  },
  {
    "oid": "67f932c0f495202203bbe75246c3f693e17474d3",
    "message": "bugfix: fix xidInterceptorType is null (#1909)",
    "date": "2019-11-18T09:53:01Z",
    "url": "https://github.com/apache/incubator-seata/commit/67f932c0f495202203bbe75246c3f693e17474d3",
    "details": {
      "sha": "33d665cf7cbd6bfb014bd2339ed8337eb321e1ae",
      "filename": "core/src/main/java/io/seata/core/context/RootContext.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/apache/incubator-seata/blob/67f932c0f495202203bbe75246c3f693e17474d3/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fcontext%2FRootContext.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/67f932c0f495202203bbe75246c3f693e17474d3/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fcontext%2FRootContext.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fcontext%2FRootContext.java?ref=67f932c0f495202203bbe75246c3f693e17474d3",
      "patch": "@@ -89,8 +89,14 @@ public static void bind(String xid) {\n      * @param xidType\n      */\n     public static void bindInterceptorType(String xidType) {\n-        String[] xidTypes = xidType.split(\"_\");\n-        bindInterceptorType(xidTypes[0], BranchType.valueOf(xidTypes[1]));\n+        if (StringUtils.isNotBlank(xidType)) {\n+\n+            String[] xidTypes = xidType.split(\"_\");\n+\n+            if(xidTypes.length == 2){\n+                bindInterceptorType(xidTypes[0], BranchType.valueOf(xidTypes[1]));\n+            }\n+        }\n     }\n \n     /**",
      "parent_sha": "de456ac469e1ea816f42e76be90bb024b157d3dc"
    }
  },
  {
    "oid": "23b4a77b231ec977d2df6f4d7ac5a8bf75ed2d75",
    "message": "bugfix:fix seata-spring-boot-starter does not work (#2029)",
    "date": "2019-12-16T02:48:24Z",
    "url": "https://github.com/apache/incubator-seata/commit/23b4a77b231ec977d2df6f4d7ac5a8bf75ed2d75",
    "details": {
      "sha": "771f753cc9446e047cf92e26175853d48613665a",
      "filename": "config/seata-config-core/src/main/java/io/seata/config/FileConfiguration.java",
      "status": "modified",
      "additions": 41,
      "deletions": 8,
      "changes": 49,
      "blob_url": "https://github.com/apache/incubator-seata/blob/23b4a77b231ec977d2df6f4d7ac5a8bf75ed2d75/config%2Fseata-config-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fconfig%2FFileConfiguration.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/23b4a77b231ec977d2df6f4d7ac5a8bf75ed2d75/config%2Fseata-config-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fconfig%2FFileConfiguration.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/config%2Fseata-config-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fconfig%2FFileConfiguration.java?ref=23b4a77b231ec977d2df6f4d7ac5a8bf75ed2d75",
      "patch": "@@ -16,6 +16,7 @@\n package io.seata.config;\n \n import java.io.File;\n+import java.net.URL;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n@@ -70,14 +71,25 @@ public class FileConfiguration extends AbstractConfiguration {\n \n     private final boolean allowDynamicRefresh;\n \n+    /**\n+     * Note that:this constructor is only used to create proxy with CGLIB\n+     * see io.seata.spring.boot.autoconfigure.provider.SpringBootConfigurationProvider#provide\n+     */\n+    public FileConfiguration() {\n+        this.name = null;\n+        this.targetFilePath = null;\n+        this.allowDynamicRefresh = false;\n+    }\n+\n     /**\n      * Instantiates a new File configuration.\n      *\n      * @param name the name\n      */\n     public FileConfiguration(String name) {\n-        this(name,true);\n+        this(name, true);\n     }\n+\n     /**\n      * Instantiates a new File configuration.\n      *\n@@ -89,16 +101,37 @@ public FileConfiguration(String name, boolean allowDynamicRefresh) {\n         if (null == name) {\n             throw new IllegalArgumentException(\"name can't be null\");\n         } else if (name.startsWith(SYS_FILE_RESOURCE_PREFIX)) {\n-            targetFilePath = name.substring(SYS_FILE_RESOURCE_PREFIX.length());\n-            Config appConfig = ConfigFactory.parseFileAnySyntax(new File(targetFilePath));\n-            fileConfig = ConfigFactory.load(appConfig);\n+            File targetFile = new File(name.substring(SYS_FILE_RESOURCE_PREFIX.length()));\n+            if (targetFile.exists()) {\n+                targetFilePath = targetFile.getPath();\n+                Config appConfig = ConfigFactory.parseFileAnySyntax(targetFile);\n+                fileConfig = ConfigFactory.load(appConfig);\n+            } else {\n+                targetFilePath = null;\n+            }\n         } else {\n-            targetFilePath = this.getClass().getClassLoader().getResource(name).getPath();\n-            fileConfig = ConfigFactory.load(name);\n+            URL resource = this.getClass().getClassLoader().getResource(name);\n+            if (null != resource) {\n+                targetFilePath = resource.getPath();\n+                fileConfig = ConfigFactory.load(name);\n+\n+            } else {\n+                targetFilePath = null;\n+            }\n         }\n+        /**\n+         * For seata-server side the conf file should always exists.\n+         * For application(or client) side,conf file may not exists when using seata-spring-boot-starter\n+         */\n+        if (null == targetFilePath) {\n+            fileConfig = ConfigFactory.load();\n+            this.allowDynamicRefresh = false;\n+        } else {\n+            targetFileLastModified = new File(targetFilePath).lastModified();\n+            this.allowDynamicRefresh = allowDynamicRefresh;\n+        }\n+\n         this.name = name;\n-        this.allowDynamicRefresh = allowDynamicRefresh;\n-        targetFileLastModified = new File(targetFilePath).lastModified();\n         configOperateExecutor = new ThreadPoolExecutor(CORE_CONFIG_OPERATE_THREAD, MAX_CONFIG_OPERATE_THREAD,\n             Integer.MAX_VALUE, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(),\n             new NamedThreadFactory(\"configOperate\", MAX_CONFIG_OPERATE_THREAD));",
      "parent_sha": "f078e425bd5ceac529dc7138c88a37216bd6f347"
    }
  },
  {
    "oid": "e84feea59419aa5245ee5f58ad8a790aec6e9055",
    "message": "bugfix: fix wrong status when exception (#3281)\n\n* bugfix: fix wrong status when exception",
    "date": "2020-12-08T05:39:05Z",
    "url": "https://github.com/apache/incubator-seata/commit/e84feea59419aa5245ee5f58ad8a790aec6e9055",
    "details": {
      "sha": "4e4448f52d7ffddb8bc6123f96eb9d3eacc256d7",
      "filename": "saga/seata-saga-engine/src/main/java/io/seata/saga/engine/strategy/impl/DefaultStatusDecisionStrategy.java",
      "status": "modified",
      "additions": 12,
      "deletions": 10,
      "changes": 22,
      "blob_url": "https://github.com/apache/incubator-seata/blob/e84feea59419aa5245ee5f58ad8a790aec6e9055/saga%2Fseata-saga-engine%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fsaga%2Fengine%2Fstrategy%2Fimpl%2FDefaultStatusDecisionStrategy.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/e84feea59419aa5245ee5f58ad8a790aec6e9055/saga%2Fseata-saga-engine%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fsaga%2Fengine%2Fstrategy%2Fimpl%2FDefaultStatusDecisionStrategy.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/saga%2Fseata-saga-engine%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fsaga%2Fengine%2Fstrategy%2Fimpl%2FDefaultStatusDecisionStrategy.java?ref=e84feea59419aa5245ee5f58ad8a790aec6e9055",
      "patch": "@@ -94,11 +94,11 @@ public static void decideMachineCompensateStatus(StateMachineInstance stateMachi\n      * @param stateList\n      * @return\n      */\n-    public static boolean setMachineStatusBasedOnStateList(StateMachineInstance stateMachineInstance,\n-                                                           List<StateInstance> stateList) {\n+    public static void setMachineStatusBasedOnStateListAndException(StateMachineInstance stateMachineInstance,\n+                                                                    List<StateInstance> stateList, Exception exp) {\n         boolean hasSetStatus = false;\n+        boolean hasSuccessUpdateService = false;\n         if (CollectionUtils.isNotEmpty(stateList)) {\n-            boolean hasSuccessUpdateService = false;\n             boolean hasUnsuccessService = false;\n \n             for (int i = stateList.size() - 1; i >= 0; i--) {\n@@ -132,7 +132,10 @@ public static boolean setMachineStatusBasedOnStateList(StateMachineInstance stat\n                 hasSetStatus = true;\n             }\n         }\n-        return hasSetStatus;\n+\n+        if (!hasSetStatus) {\n+            setMachineStatusBasedOnException(stateMachineInstance, exp, hasSuccessUpdateService);\n+        }\n     }\n \n     /**\n@@ -141,12 +144,15 @@ public static boolean setMachineStatusBasedOnStateList(StateMachineInstance stat\n      * @param stateMachineInstance\n      * @param exp\n      */\n-    public static void setMachineStatusBasedOnException(StateMachineInstance stateMachineInstance, Exception exp) {\n+    public static void setMachineStatusBasedOnException(StateMachineInstance stateMachineInstance, Exception exp,\n+                                                        boolean hasSuccessUpdateService) {\n         if (exp == null) {\n             stateMachineInstance.setStatus(ExecutionStatus.SU);\n         } else if (exp instanceof EngineExecutionException\n                 && FrameworkErrorCode.StateMachineExecutionTimeout.equals(((EngineExecutionException)exp).getErrcode())) {\n             stateMachineInstance.setStatus(ExecutionStatus.UN);\n+        } else if (hasSuccessUpdateService) {\n+            stateMachineInstance.setStatus(ExecutionStatus.UN);\n         } else {\n             NetExceptionType t = ExceptionUtils.getNetExceptionType(exp);\n             if (t != null) {\n@@ -217,11 +223,7 @@ public boolean decideMachineForwardExecutionStatus(StateMachineInstance stateMac\n \n             List<StateInstance> stateList = stateMachineInstance.getStateList();\n \n-            boolean hasSetStatus = setMachineStatusBasedOnStateList(stateMachineInstance, stateList);\n-\n-            if (!hasSetStatus) {\n-                setMachineStatusBasedOnException(stateMachineInstance, exp);\n-            }\n+            setMachineStatusBasedOnStateListAndException(stateMachineInstance, stateList, exp);\n \n             if (specialPolicy && ExecutionStatus.SU.equals(stateMachineInstance.getStatus())) {\n                 for (StateInstance stateInstance : stateMachineInstance.getStateList()) {",
      "parent_sha": "465f28b83afdd9a345016622084ade9771b84341"
    }
  },
  {
    "oid": "ceb1fc5383df68eb4d11a1d207f54956a14df7a8",
    "message": "#266 deal exception scenes of retry rollback failure (#270)",
    "date": "2019-01-24T14:41:01Z",
    "url": "https://github.com/apache/incubator-seata/commit/ceb1fc5383df68eb4d11a1d207f54956a14df7a8",
    "details": {
      "sha": "00579788484a6bacda3bb95920941f02bfdd6458",
      "filename": "server/src/main/java/com/alibaba/fescar/server/coordinator/DefaultCore.java",
      "status": "modified",
      "additions": 19,
      "deletions": 7,
      "changes": 26,
      "blob_url": "https://github.com/apache/incubator-seata/blob/ceb1fc5383df68eb4d11a1d207f54956a14df7a8/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2Fcoordinator%2FDefaultCore.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/ceb1fc5383df68eb4d11a1d207f54956a14df7a8/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2Fcoordinator%2FDefaultCore.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2Fcoordinator%2FDefaultCore.java?ref=ceb1fc5383df68eb4d11a1d207f54956a14df7a8",
      "patch": "@@ -265,12 +265,7 @@ public void doGlobalRollback(GlobalSession globalSession, boolean retrying) thro\n                         LOGGER.error(\"Successfully rolled back branch \" + branchSession);\n                         continue;\n                     case PhaseTwo_RollbackFailed_Unretryable:\n-                        GlobalStatus currentStatus = globalSession.getStatus();\n-                        if (currentStatus.name().startsWith(\"Timeout\")) {\n-                            globalSession.changeStatus(GlobalStatus.TimeoutRollbackFailed);\n-                        } else {\n-                            globalSession.changeStatus(GlobalStatus.RollbackFailed);\n-                        }\n+                        changeToRollbackFailedStatus(globalSession);\n                         globalSession.end();\n                         LOGGER.error(\"Failed to rollback global[\" + globalSession.getTransactionId() + \"] since branch[\" + branchSession.getBranchId() + \"] rollback failed\");\n                         return;\n@@ -296,13 +291,30 @@ public void doGlobalRollback(GlobalSession globalSession, boolean retrying) thro\n             }\n \n         }\n+        if (globalSession.hasBranch()) {\n+            changeToRollbackFailedStatus(globalSession);\n+        } else {\n+            changeToRollbackedStatus(globalSession);\n+        }\n+        globalSession.end();\n+    }\n+\n+    private void changeToRollbackedStatus(GlobalSession globalSession) throws TransactionException {\n         GlobalStatus currentStatus = globalSession.getStatus();\n         if (currentStatus.name().startsWith(\"Timeout\")) {\n             globalSession.changeStatus(GlobalStatus.TimeoutRollbacked);\n         } else {\n             globalSession.changeStatus(GlobalStatus.Rollbacked);\n         }\n-        globalSession.end();\n+    }\n+\n+    private void changeToRollbackFailedStatus(GlobalSession globalSession) throws TransactionException {\n+        GlobalStatus currentStatus = globalSession.getStatus();\n+        if (currentStatus.name().startsWith(\"Timeout\")) {\n+            globalSession.changeStatus(GlobalStatus.TimeoutRollbackFailed);\n+        } else {\n+            globalSession.changeStatus(GlobalStatus.RollbackFailed);\n+        }\n     }\n \n     @Override",
      "parent_sha": "c738244cb549e8dcd4045a81794787d596cce9b1"
    }
  },
  {
    "oid": "318605af43f61501c566b918e00e037a7c2bd8ea",
    "message": "optimize: RootContext.java code style (#2211)",
    "date": "2020-01-21T09:44:47Z",
    "url": "https://github.com/apache/incubator-seata/commit/318605af43f61501c566b918e00e037a7c2bd8ea",
    "details": {
      "sha": "97e5fc428c3d53010b0e46a1dd0a95f66f47206a",
      "filename": "core/src/main/java/io/seata/core/context/RootContext.java",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/apache/incubator-seata/blob/318605af43f61501c566b918e00e037a7c2bd8ea/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fcontext%2FRootContext.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/318605af43f61501c566b918e00e037a7c2bd8ea/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fcontext%2FRootContext.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fcontext%2FRootContext.java?ref=318605af43f61501c566b918e00e037a7c2bd8ea",
      "patch": "@@ -16,8 +16,8 @@\n package io.seata.core.context;\n \n import io.seata.common.exception.ShouldNeverHappenException;\n-import io.seata.core.model.BranchType;\n import io.seata.common.util.StringUtils;\n+import io.seata.core.model.BranchType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -30,6 +30,10 @@\n  */\n public class RootContext {\n \n+    private RootContext() {\n+\n+    }\n+\n     private static final Logger LOGGER = LoggerFactory.getLogger(RootContext.class);\n \n     /**\n@@ -55,7 +59,7 @@ public static String getXID() {\n         }\n \n         String xidType = CONTEXT_HOLDER.get(KEY_XID_INTERCEPTOR_TYPE);\n-        if (StringUtils.isNotBlank(xidType) && xidType.indexOf(\"_\") > -1) {\n+        if (StringUtils.isNotBlank(xidType) && xidType.contains(\"_\")) {\n             return xidType.split(\"_\")[0];\n         }\n \n@@ -78,7 +82,7 @@ public static String getXIDInterceptorType() {\n      */\n     public static void bind(String xid) {\n         if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"bind \" + xid);\n+            LOGGER.debug(\"bind {}\", xid);\n         }\n         CONTEXT_HOLDER.put(KEY_XID, xid);\n     }",
      "parent_sha": "16d7030b93d84c04ae1f2e1b0a900e8891d0caf1"
    }
  },
  {
    "oid": "80961a487d1842b9d8a1472ead21673a6b38ba81",
    "message": "fix unit test case CodecTest (#261)\n\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* \u5c0f\u4f18\u5316-\u7c7b\u578b\u8f6c\u6362\r\n\r\n* \u7c7b\u578b\u8f6c\u6362\u5c0f\u4f18\u5316\r\n\r\n* fix unit test class CodecTest.java\r\n\r\n* fix merge conflicts",
    "date": "2019-01-24T02:13:38Z",
    "url": "https://github.com/apache/incubator-seata/commit/80961a487d1842b9d8a1472ead21673a6b38ba81",
    "details": {
      "sha": "dae5a7c9ec8faedf33c970421ad1fdfc210feb21",
      "filename": "core/src/test/java/com/alibaba/fescar/core/message/CodecTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/apache/incubator-seata/blob/80961a487d1842b9d8a1472ead21673a6b38ba81/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fcore%2Fmessage%2FCodecTest.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/80961a487d1842b9d8a1472ead21673a6b38ba81/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fcore%2Fmessage%2FCodecTest.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fcore%2Fmessage%2FCodecTest.java?ref=80961a487d1842b9d8a1472ead21673a6b38ba81",
      "patch": "@@ -16,17 +16,16 @@\n \n package com.alibaba.fescar.core.message;\n \n-import java.nio.ByteBuffer;\n-\n import com.alibaba.fescar.core.protocol.ResultCode;\n import com.alibaba.fescar.core.protocol.transaction.BranchRegisterResponse;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n \n+import java.nio.ByteBuffer;\n+\n public class CodecTest {\n \n-    @Test @Ignore\n+    @Test\n     public void testA() {\n \n         long tid = 232323L;\n@@ -41,6 +40,7 @@ public void testA() {\n \n         ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length);\n         byteBuffer.put(bytes);\n+        byteBuffer.flip();\n \n         BranchRegisterResponse rs = new BranchRegisterResponse();\n         rs.decode(byteBuffer);",
      "parent_sha": "f0890b9218d744771782c320c305867dafe1b850"
    }
  },
  {
    "oid": "dcb02c0d855400c9dc254ab790384c6b4e09a2e2",
    "message": "bugfix: throw NPE when the rpcMessage's body is null (#1558)",
    "date": "2019-08-30T06:05:22Z",
    "url": "https://github.com/apache/incubator-seata/commit/dcb02c0d855400c9dc254ab790384c6b4e09a2e2",
    "details": {
      "sha": "b8ce648fd554b3ff6a0717fb067b2631ab0777ea",
      "filename": "core/src/main/java/io/seata/core/rpc/netty/RpcServer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/dcb02c0d855400c9dc254ab790384c6b4e09a2e2/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FRpcServer.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/dcb02c0d855400c9dc254ab790384c6b4e09a2e2/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FRpcServer.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FRpcServer.java?ref=dcb02c0d855400c9dc254ab790384c6b4e09a2e2",
      "patch": "@@ -322,7 +322,7 @@ private void handleDisconnect(ChannelHandlerContext ctx) {\n     public void channelRead(final ChannelHandlerContext ctx, Object msg) throws Exception {\n         if (msg instanceof RpcMessage) {\n             RpcMessage rpcMessage = (RpcMessage) msg;\n-            debugLog(\"read:\" + rpcMessage.getBody().toString());\n+            debugLog(\"read:\" + rpcMessage.getBody());\n             if (rpcMessage.getBody() instanceof RegisterTMRequest) {\n                 serverMessageListener.onRegTmMessage(rpcMessage, ctx, this, checkAuthHandler);\n                 return;",
      "parent_sha": "c5d2d2d765ec48c424b7a7ed6b169e27adeb4bc0"
    }
  },
  {
    "oid": "5c209a3485df5328446323bb6f3401827e86622b",
    "message": "bugfix: fix saga \"cannot matching status\" (#6553)",
    "date": "2024-05-16T12:52:45Z",
    "url": "https://github.com/apache/incubator-seata/commit/5c209a3485df5328446323bb6f3401827e86622b",
    "details": {
      "sha": "1cee6d2ccf4f23ef486f41363e2d49e42ddfd207",
      "filename": "saga/seata-saga-engine/src/main/java/org/apache/seata/saga/engine/pcext/interceptors/ServiceTaskHandlerInterceptor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/incubator-seata/blob/5c209a3485df5328446323bb6f3401827e86622b/saga%2Fseata-saga-engine%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fseata%2Fsaga%2Fengine%2Fpcext%2Finterceptors%2FServiceTaskHandlerInterceptor.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/5c209a3485df5328446323bb6f3401827e86622b/saga%2Fseata-saga-engine%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fseata%2Fsaga%2Fengine%2Fpcext%2Finterceptors%2FServiceTaskHandlerInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/saga%2Fseata-saga-engine%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fseata%2Fsaga%2Fengine%2Fpcext%2Finterceptors%2FServiceTaskHandlerInterceptor.java?ref=5c209a3485df5328446323bb6f3401827e86622b",
      "patch": "@@ -337,9 +337,9 @@ private void decideExecutionStatus(ProcessContext context, StateInstance stateIn\n                     Object elContext;\n \n                     Class<? extends Expression> expressionClass = evaluator.getClass();\n-                    if (expressionClass.isAssignableFrom(ExceptionMatchExpression.class)) {\n+                    if (ExceptionMatchExpression.class.isAssignableFrom(expressionClass)) {\n                         elContext = context.getVariable(DomainConstants.VAR_NAME_CURRENT_EXCEPTION);\n-                    } else if (expressionClass.isAssignableFrom(ELExpression.class)) {\n+                    } else if (ELExpression.class.isAssignableFrom(expressionClass)) {\n                         elContext = context.getVariable(DomainConstants.VAR_NAME_OUTPUT_PARAMS);\n                     } else {\n                         elContext = context.getVariables();",
      "parent_sha": "ec47baa861c68dc8d7c9c8ae250314ba300ffde9"
    }
  },
  {
    "oid": "75d286b3aa2493caced341730658ace5de8f984b",
    "message": "Correct the class of Logger in AccountServiceImpl (#306)",
    "date": "2019-01-29T00:50:49Z",
    "url": "https://github.com/apache/incubator-seata/commit/75d286b3aa2493caced341730658ace5de8f984b",
    "details": {
      "sha": "c2df3b360497c27b610faaea0aa01f07eeb818a7",
      "filename": "examples/src/main/java/com/alibaba/fescar/tm/dubbo/impl/AccountServiceImpl.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/75d286b3aa2493caced341730658ace5de8f984b/examples%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Ftm%2Fdubbo%2Fimpl%2FAccountServiceImpl.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/75d286b3aa2493caced341730658ace5de8f984b/examples%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Ftm%2Fdubbo%2Fimpl%2FAccountServiceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/examples%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Ftm%2Fdubbo%2Fimpl%2FAccountServiceImpl.java?ref=75d286b3aa2493caced341730658ace5de8f984b",
      "patch": "@@ -34,7 +34,7 @@\n  */\n public class AccountServiceImpl implements AccountService {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(OrderService.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AccountService.class);\n \n     private JdbcTemplate jdbcTemplate;\n ",
      "parent_sha": "61ebf5d916a06f156371c963e6f0fc232b5f13af"
    }
  },
  {
    "oid": "8a6097b7a8c308c839c9b6cbd5fa75dee2113e08",
    "message": "bugfix: redis locker delete lock incomplete (#3031)",
    "date": "2020-08-17T07:18:24Z",
    "url": "https://github.com/apache/incubator-seata/commit/8a6097b7a8c308c839c9b6cbd5fa75dee2113e08",
    "details": {
      "sha": "7cb8b0e3586f157c782ccfc73c16b211bce0cb8a",
      "filename": "server/src/main/java/io/seata/server/storage/redis/lock/RedisLocker.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/apache/incubator-seata/blob/8a6097b7a8c308c839c9b6cbd5fa75dee2113e08/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fstorage%2Fredis%2Flock%2FRedisLocker.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/8a6097b7a8c308c839c9b6cbd5fa75dee2113e08/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fstorage%2Fredis%2Flock%2FRedisLocker.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fstorage%2Fredis%2Flock%2FRedisLocker.java?ref=8a6097b7a8c308c839c9b6cbd5fa75dee2113e08",
      "patch": "@@ -168,12 +168,11 @@ public boolean releaseLock(String xid, List<Long> branchIds) {\n                 List<String> values = jedis.mget(keys.toArray(new String[0]));\n                 for (String value : values) {\n                     Iterator<Long> it = branchIds.iterator();\n+                    LockDO lock = JSON.parseObject(value, LockDO.class);\n                     while (it.hasNext()) {\n                         Long branchId = it.next();\n-                        LockDO lock = JSON.parseObject(value, LockDO.class);\n                         if (lock != null && Objects.equals(lock.getBranchId(), branchId)) {\n                             delKeys.add(getLockKey(lock.getRowKey()));\n-                            it.remove();\n                             break;\n                         }\n                     }",
      "parent_sha": "b4af38e4adc42402608013c0117f5fd14674543f"
    }
  },
  {
    "oid": "f270413771d81773d024b1d627d3350a0584f501",
    "message": "optimize:use raw types instead of boxing types (#1747)",
    "date": "2019-10-12T02:37:42Z",
    "url": "https://github.com/apache/incubator-seata/commit/f270413771d81773d024b1d627d3350a0584f501",
    "details": {
      "sha": "7940fd790bd675fa5d43822311e276296f2dd84b",
      "filename": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apache/incubator-seata/blob/f270413771d81773d024b1d627d3350a0584f501/common%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcommon%2Floader%2FEnhancedServiceLoader.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/f270413771d81773d024b1d627d3350a0584f501/common%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcommon%2Floader%2FEnhancedServiceLoader.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/common%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcommon%2Floader%2FEnhancedServiceLoader.java?ref=f270413771d81773d024b1d627d3350a0584f501",
      "patch": "@@ -264,8 +264,8 @@ private static <S> List<Class> findAllExtensionClass(Class<S> service, String ac\n         Collections.sort(extensions, new Comparator<Class>() {\n             @Override\n             public int compare(Class c1, Class c2) {\n-                Integer o1 = 0;\n-                Integer o2 = 0;\n+                int o1 = 0;\n+                int o2 = 0;\n                 @SuppressWarnings(\"unchecked\")\n                 LoadLevel a1 = (LoadLevel)c1.getAnnotation(LoadLevel.class);\n                 @SuppressWarnings(\"unchecked\")\n@@ -279,7 +279,7 @@ public int compare(Class c1, Class c2) {\n                     o2 = a2.order();\n                 }\n \n-                return o1.compareTo(o2);\n+                return Integer.compare(o1, o2);\n \n             }\n         });",
      "parent_sha": "e645b9373799070296f8b9f87fc0a3b46d7f2bab"
    }
  },
  {
    "oid": "fcc1bd972bf103b7e2802edbeb22fca16edd9913",
    "message": "bugfix: STORE_FILE_DIR in config store is null  (#1293)                                                                                   (#1329)",
    "date": "2019-07-23T00:32:48Z",
    "url": "https://github.com/apache/incubator-seata/commit/fcc1bd972bf103b7e2802edbeb22fca16edd9913",
    "details": {
      "sha": "0923f0e8d95e17b9493dce72734766b532f669a0",
      "filename": "server/src/main/java/io/seata/server/session/SessionHolder.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/apache/incubator-seata/blob/fcc1bd972bf103b7e2802edbeb22fca16edd9913/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fsession%2FSessionHolder.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/fcc1bd972bf103b7e2802edbeb22fca16edd9913/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fsession%2FSessionHolder.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fsession%2FSessionHolder.java?ref=fcc1bd972bf103b7e2802edbeb22fca16edd9913",
      "patch": "@@ -68,6 +68,11 @@ public class SessionHolder {\n      */\n     public static final String RETRY_ROLLBACKING_SESSION_MANAGER_NAME = \"retry.rollback.data\";\n \n+    /**\n+     * The default session store dir\n+     */\n+    public static final String DEFAULT_SESSION_STORE_FILE_DIR = \"sessionStore\";\n+\n     private static SessionManager ROOT_SESSION_MANAGER;\n     private static SessionManager ASYNC_COMMITTING_SESSION_MANAGER;\n     private static SessionManager RETRY_COMMITTING_SESSION_MANAGER;\n@@ -97,7 +102,7 @@ public static void init(String mode) throws IOException {\n                 new Object[] {RETRY_ROLLBACKING_SESSION_MANAGER_NAME});\n         } else if (StoreMode.FILE.equals(storeMode)) {\n             //file store\n-            String sessionStorePath = CONFIG.getConfig(ConfigurationKeys.STORE_FILE_DIR);\n+            String sessionStorePath = CONFIG.getConfig(ConfigurationKeys.STORE_FILE_DIR, DEFAULT_SESSION_STORE_FILE_DIR);\n             if (sessionStorePath == null) {\n                 throw new StoreException(\"the {store.file.dir} is empty.\");\n             }",
      "parent_sha": "c4c5faf8756ad056b2c826762b2a2bae4491a985"
    }
  },
  {
    "oid": "fedc0852d2e448aaf11e2520d8344e255bd7dfcd",
    "message": "bugfix: fix get tablename and alias error in mysql delete (#2628)",
    "date": "2020-05-03T01:15:21Z",
    "url": "https://github.com/apache/incubator-seata/commit/fedc0852d2e448aaf11e2520d8344e255bd7dfcd",
    "details": {
      "sha": "9cc124df9095bc315dbf9c33403a99a6c450fb90",
      "filename": "sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/mysql/MySQLDeleteRecognizer.java",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/apache/incubator-seata/blob/fedc0852d2e448aaf11e2520d8344e255bd7dfcd/sqlparser%2Fseata-sqlparser-druid%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fsqlparser%2Fdruid%2Fmysql%2FMySQLDeleteRecognizer.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/fedc0852d2e448aaf11e2520d8344e255bd7dfcd/sqlparser%2Fseata-sqlparser-druid%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fsqlparser%2Fdruid%2Fmysql%2FMySQLDeleteRecognizer.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/sqlparser%2Fseata-sqlparser-druid%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fsqlparser%2Fdruid%2Fmysql%2FMySQLDeleteRecognizer.java?ref=fedc0852d2e448aaf11e2520d8344e255bd7dfcd",
      "patch": "@@ -55,7 +55,10 @@ public SQLType getSQLType() {\n \n     @Override\n     public String getTableAlias() {\n-        return ast.getTableSource().getAlias();\n+        if (ast.getFrom() == null) {\n+            return ast.getTableSource().getAlias();\n+        }\n+        return ast.getFrom().getAlias();\n     }\n \n     @Override\n@@ -69,7 +72,11 @@ public boolean visit(SQLExprTableSource x) {\n                 return false;\n             }\n         };\n-        visitor.visit((SQLExprTableSource)ast.getTableSource());\n+        if (ast.getFrom() == null) {\n+            visitor.visit((SQLExprTableSource) ast.getTableSource());\n+        } else {\n+            visitor.visit((SQLExprTableSource) ast.getFrom());\n+        }\n         return sb.toString();\n     }\n ",
      "parent_sha": "1425cf71122bdfaa92759e2bfa45e7056e8ad5b9"
    }
  },
  {
    "oid": "33edf343958539f26ef910da3de1788dc664bfee",
    "message": "bugfix:PK constraint name isn't the same as the unique index name which is belong to PK (#4005)",
    "date": "2021-09-15T09:04:06Z",
    "url": "https://github.com/apache/incubator-seata/commit/33edf343958539f26ef910da3de1788dc664bfee",
    "details": {
      "sha": "d11329dedadb60d9cfc83585178e9d7c39847a81",
      "filename": "rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/cache/OracleTableMetaCache.java",
      "status": "modified",
      "additions": 39,
      "deletions": 7,
      "changes": 46,
      "blob_url": "https://github.com/apache/incubator-seata/blob/33edf343958539f26ef910da3de1788dc664bfee/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fsql%2Fstruct%2Fcache%2FOracleTableMetaCache.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/33edf343958539f26ef910da3de1788dc664bfee/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fsql%2Fstruct%2Fcache%2FOracleTableMetaCache.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fsql%2Fstruct%2Fcache%2FOracleTableMetaCache.java?ref=33edf343958539f26ef910da3de1788dc664bfee",
      "patch": "@@ -30,6 +30,10 @@\n import io.seata.rm.datasource.sql.struct.TableMeta;\n import io.seata.sqlparser.util.JdbcConstants;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n /**\n  * The type Table meta cache.\n  *\n@@ -147,19 +151,47 @@ private TableMeta resultSetMetaToSchema(DatabaseMetaData dbmd, String tableName)\n \n                 }\n             }\n-\n+            if (tm.getAllIndexes().isEmpty()) {\n+                throw new ShouldNeverHappenException(String.format(\"Could not found any index in the table: %s\", tableName));\n+            }\n+            // when we create a primary key constraint oracle will uses and existing unique index.\n+            // if we create a unique index before create a primary constraint in the same column will cause the problem\n+            // that primary key constraint name was different from the unique name.\n+            List<String> pkcol = new ArrayList<>();\n             while (rsPrimary.next()) {\n-                String pkIndexName = rsPrimary.getString(\"PK_NAME\");\n-                if (tm.getAllIndexes().containsKey(pkIndexName)) {\n-                    IndexMeta index = tm.getAllIndexes().get(pkIndexName);\n+                String pkConstraintName = rsPrimary.getString(\"PK_NAME\");\n+                if (tm.getAllIndexes().containsKey(pkConstraintName)) {\n+                    IndexMeta index = tm.getAllIndexes().get(pkConstraintName);\n                     index.setIndextype(IndexType.PRIMARY);\n+                } else {\n+                    //save the columns that constraint primary key name was different from unique index name\n+                    pkcol.add(rsPrimary.getString(\"COLUMN_NAME\"));\n                 }\n             }\n-            if (tm.getAllIndexes().isEmpty()) {\n-                throw new ShouldNeverHappenException(String.format(\"Could not found any index in the table: %s\", tableName));\n+            //find the index that belong to the primary key constraint\n+            if (!pkcol.isEmpty()) {\n+                int matchCols = 0;\n+                for (Map.Entry<String, IndexMeta> entry : tm.getAllIndexes().entrySet()) {\n+                    IndexMeta index = entry.getValue();\n+                    // only the unique index and all the unique index's columes same as primary key columes,\n+                    // it belongs to primary key\n+                    if (index.getIndextype().value() == IndexType.UNIQUE.value()) {\n+                        for (ColumnMeta col : index.getValues()) {\n+                            if (pkcol.contains(col.getColumnName())) {\n+                                matchCols++;\n+                            }\n+                        }\n+                        if (matchCols == pkcol.size()) {\n+                            index.setIndextype(IndexType.PRIMARY);\n+                            // each table only has one primary key\n+                            break;\n+                        } else {\n+                            matchCols = 0;\n+                        }\n+                    }\n+                }\n             }\n         }\n-\n         return tm;\n     }\n }",
      "parent_sha": "64c9598721cd0c6736d6f8656d9a45b9e70e74f7"
    }
  },
  {
    "oid": "007ed0b8b3d2fbdae057ba99f927291846d246a4",
    "message": "fix CME in ZK discovery implementation. (#1239)",
    "date": "2019-06-26T00:34:22Z",
    "url": "https://github.com/apache/incubator-seata/commit/007ed0b8b3d2fbdae057ba99f927291846d246a4",
    "details": {
      "sha": "bb18581d1edcf39540a34a22d460dead741f925f",
      "filename": "discovery/seata-discovery-zk/src/main/java/io/seata/discovery/registry/zk/ZookeeperRegisterServiceImpl.java",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/apache/incubator-seata/blob/007ed0b8b3d2fbdae057ba99f927291846d246a4/discovery%2Fseata-discovery-zk%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fdiscovery%2Fregistry%2Fzk%2FZookeeperRegisterServiceImpl.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/007ed0b8b3d2fbdae057ba99f927291846d246a4/discovery%2Fseata-discovery-zk%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fdiscovery%2Fregistry%2Fzk%2FZookeeperRegisterServiceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/discovery%2Fseata-discovery-zk%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fdiscovery%2Fregistry%2Fzk%2FZookeeperRegisterServiceImpl.java?ref=007ed0b8b3d2fbdae057ba99f927291846d246a4",
      "patch": "@@ -37,6 +37,7 @@\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n \n import static io.seata.common.Constants.IP_PORT_SPLIT_CHAR;\n \n@@ -113,7 +114,7 @@ private void createParentIfNotPresent(String path) {\n             }\n         }\n     }\n-    \n+\n     private boolean checkExists(String path) {\n         return getClientInstance().exists(path);\n     }\n@@ -138,7 +139,7 @@ public void subscribe(String cluster, IZkChildListener listener) throws Exceptio\n             getClientInstance().createPersistent(path);\n         }\n         getClientInstance().subscribeChildChanges(path, listener);\n-        LISTENER_SERVICE_MAP.putIfAbsent(cluster, new ArrayList<>());\n+        LISTENER_SERVICE_MAP.putIfAbsent(cluster, new CopyOnWriteArrayList<>());\n         LISTENER_SERVICE_MAP.get(cluster).add(listener);\n     }\n \n@@ -207,17 +208,17 @@ private ZkClient getClientInstance() {\n             synchronized (ZookeeperRegisterServiceImpl.class) {\n                 if (null == zkClient) {\n                     zkClient = buildZkClient(FILE_CONFIG.getConfig(FILE_CONFIG_KEY_PREFIX + SERVER_ADDR_KEY),\n-                            FILE_CONFIG.getInt(FILE_CONFIG_KEY_PREFIX + SESSION_TIME_OUT_KEY),\n-                            FILE_CONFIG.getInt(FILE_CONFIG_KEY_PREFIX + CONNECT_TIME_OUT_KEY));\n+                        FILE_CONFIG.getInt(FILE_CONFIG_KEY_PREFIX + SESSION_TIME_OUT_KEY),\n+                        FILE_CONFIG.getInt(FILE_CONFIG_KEY_PREFIX + CONNECT_TIME_OUT_KEY));\n                 }\n             }\n         }\n         return zkClient;\n     }\n-    \n+\n     // visible for test.\n     ZkClient buildZkClient(String address, int sessionTimeout, int connectTimeout) {\n-        ZkClient zkClient = new ZkClient(address, sessionTimeout,connectTimeout);\n+        ZkClient zkClient = new ZkClient(address, sessionTimeout, connectTimeout);\n         if (!zkClient.exists(ROOT_PATH_WITHOUT_SUFFIX)) {\n             zkClient.createPersistent(ROOT_PATH_WITHOUT_SUFFIX, true);\n         }",
      "parent_sha": "7039f91db0d86c907614376ee9b10246f3bd25bd"
    }
  },
  {
    "oid": "eeb1dbe27ab600a4e3d41d1b47b7cc08b13cc23c",
    "message": "fix a typo (#1229)",
    "date": "2019-06-20T16:27:08Z",
    "url": "https://github.com/apache/incubator-seata/commit/eeb1dbe27ab600a4e3d41d1b47b7cc08b13cc23c",
    "details": {
      "sha": "fbb2d8715b3057785f99a361f4aba1a6fa1cabbd",
      "filename": "core/src/main/java/io/seata/core/rpc/netty/NettyClientChannelManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/eeb1dbe27ab600a4e3d41d1b47b7cc08b13cc23c/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FNettyClientChannelManager.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/eeb1dbe27ab600a4e3d41d1b47b7cc08b13cc23c/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FNettyClientChannelManager.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FNettyClientChannelManager.java?ref=eeb1dbe27ab600a4e3d41d1b47b7cc08b13cc23c",
      "patch": "@@ -160,7 +160,7 @@ void reconnect(String transactionServiceGroup) {\n         try {\n             availList = getAvailServerList(transactionServiceGroup);\n         } catch (Exception exx) {\n-            LOGGER.error(\"Failed to get available servers: {}\" + exx.getMessage());\n+            LOGGER.error(\"Failed to get available servers: {}\", exx.getMessage());\n         }\n         if (CollectionUtils.isEmpty(availList)) {\n             LOGGER.error(\"no available server to connect.\");",
      "parent_sha": "db51b52a47bd0ea141ea829f0b48f62d187b826e"
    }
  },
  {
    "oid": "7039f91db0d86c907614376ee9b10246f3bd25bd",
    "message": "bugfix:server start and handle remain branch session may cause NPE (#1237)",
    "date": "2019-06-25T06:49:43Z",
    "url": "https://github.com/apache/incubator-seata/commit/7039f91db0d86c907614376ee9b10246f3bd25bd",
    "details": {
      "sha": "d3ee02b6350197cdc46b628ce181e43c0e7e3b70",
      "filename": "server/src/main/java/io/seata/server/session/BranchSession.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/apache/incubator-seata/blob/7039f91db0d86c907614376ee9b10246f3bd25bd/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fsession%2FBranchSession.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/7039f91db0d86c907614376ee9b10246f3bd25bd/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fsession%2FBranchSession.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fsession%2FBranchSession.java?ref=7039f91db0d86c907614376ee9b10246f3bd25bd",
      "patch": "@@ -290,6 +290,8 @@ public byte[] encode() {\n \n         byte[] xidBytes = xid != null ? xid.getBytes() : null;\n \n+        byte branchTypeByte = branchType != null ? (byte) branchType.ordinal() : -1;\n+\n         int size = calBranchSessionSize(resourceIdBytes, lockKeyBytes, clientIdBytes, applicationDataBytes, xidBytes);\n \n         if (size > MAX_BRANCH_SESSION_SIZE) {\n@@ -356,6 +358,8 @@ public byte[] encode() {\n             byteBuffer.putInt(0);\n         }\n \n+        byteBuffer.put(branchTypeByte);\n+\n         byteBuffer.put((byte)status.getCode());\n         byteBuffer.flip();\n         byte[] result = new byte[byteBuffer.limit()];\n@@ -376,7 +380,8 @@ private int calBranchSessionSize(byte[] resourceIdBytes, byte[] lockKeyBytes, by\n             + (lockKeyBytes == null ? 0 : lockKeyBytes.length)\n             + (clientIdBytes == null ? 0 : clientIdBytes.length)\n             + (applicationDataBytes == null ? 0 : applicationDataBytes.length)\n-            + (xidBytes == null ? 0 : xidBytes.length);\n+            + (xidBytes == null ? 0 : xidBytes.length)\n+            + 1; //branchType\n         return size;\n     }\n \n@@ -424,6 +429,10 @@ public void decode(byte[] a) {\n             byteBuffer.get(xidBytes);\n             this.xid = new String(xidBytes);\n         }\n+        int branchTypeId = byteBuffer.get();\n+        if (branchTypeId >= 0) {\n+            this.branchType = BranchType.values()[branchTypeId];\n+        }\n         this.status = BranchStatus.get(byteBuffer.get());\n \n     }",
      "parent_sha": "7979580b15c86f38f58a3ee8f76adf4831a07ee7"
    }
  },
  {
    "oid": "b8a39f8617189a3098abb15bf9dd4b469566aebb",
    "message": "bugfix: oracle rollback failed when the table has null Blob Clob value (#1761)",
    "date": "2019-10-14T09:25:00Z",
    "url": "https://github.com/apache/incubator-seata/commit/b8a39f8617189a3098abb15bf9dd4b469566aebb",
    "details": {
      "sha": "9ae760db92736cdda13fc36eb69397ee1ff98093",
      "filename": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoExecutor.java",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/apache/incubator-seata/blob/b8a39f8617189a3098abb15bf9dd4b469566aebb/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fundo%2FAbstractUndoExecutor.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/b8a39f8617189a3098abb15bf9dd4b469566aebb/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fundo%2FAbstractUndoExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fundo%2FAbstractUndoExecutor.java?ref=b8a39f8617189a3098abb15bf9dd4b469566aebb",
      "patch": "@@ -155,14 +155,21 @@ protected void undoPrepare(PreparedStatement undoPST, ArrayList<Field> undoValue\n             undoIndex++;\n             if (undoValue.getType() == JDBCType.BLOB.getVendorTypeNumber()) {\n                 SerialBlob serialBlob = (SerialBlob) undoValue.getValue();\n-                undoPST.setBlob(undoIndex, serialBlob.getBinaryStream());\n+                if (serialBlob != null) {\n+                    undoPST.setBlob(undoIndex, serialBlob.getBinaryStream());\n+                } else {\n+                    undoPST.setObject(undoIndex, null);\n+                }\n             } else if (undoValue.getType() == JDBCType.CLOB.getVendorTypeNumber()) {\n                 SerialClob serialClob = (SerialClob) undoValue.getValue();\n-                undoPST.setClob(undoIndex, serialClob.getCharacterStream());\n+                if (serialClob != null) {\n+                    undoPST.setClob(undoIndex, serialClob.getCharacterStream());\n+                } else {\n+                    undoPST.setObject(undoIndex, null);\n+                }\n             } else {\n                 undoPST.setObject(undoIndex, undoValue.getValue(), undoValue.getType());\n             }\n-\n         }\n         // PK is at last one.\n         // INSERT INTO a (x, y, z, pk) VALUES (?, ?, ?, ?)",
      "parent_sha": "6afdf1e408319c70eb43756e59b4a6de54bff5ac"
    }
  },
  {
    "oid": "d8f6e1ca4c1bde77a1ba9878bfbc00fd8f2f46be",
    "message": "bugfix: unsafe double-checked locking in SofaRegistryServiceImpl (#2642)",
    "date": "2020-05-06T08:40:33Z",
    "url": "https://github.com/apache/incubator-seata/commit/d8f6e1ca4c1bde77a1ba9878bfbc00fd8f2f46be",
    "details": {
      "sha": "fafe04fe21d61901db71aba28bc50050a0c1e324",
      "filename": "discovery/seata-discovery-sofa/src/main/java/io/seata/discovery/registry/sofa/SofaRegistryServiceImpl.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/apache/incubator-seata/blob/d8f6e1ca4c1bde77a1ba9878bfbc00fd8f2f46be/discovery%2Fseata-discovery-sofa%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fdiscovery%2Fregistry%2Fsofa%2FSofaRegistryServiceImpl.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/d8f6e1ca4c1bde77a1ba9878bfbc00fd8f2f46be/discovery%2Fseata-discovery-sofa%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fdiscovery%2Fregistry%2Fsofa%2FSofaRegistryServiceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/discovery%2Fseata-discovery-sofa%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fdiscovery%2Fregistry%2Fsofa%2FSofaRegistryServiceImpl.java?ref=d8f6e1ca4c1bde77a1ba9878bfbc00fd8f2f46be",
      "patch": "@@ -131,8 +131,9 @@ private RegistryClient getRegistryInstance() {\n                         .setRegistryEndpoint(StringUtils.substringBefore(address, HOST_SEPERATOR))\n                         .setRegistryEndpointPort(Integer.parseInt(portStr)).build();\n \n-                    registryClient = new DefaultRegistryClient(config);\n-                    ((DefaultRegistryClient)registryClient).init();\n+                    DefaultRegistryClient result = new DefaultRegistryClient(config);\n+                    result.init();\n+                    registryClient = result;\n                 }\n             }\n         }",
      "parent_sha": "9c9212dc1d7c245283301ad5a8e3314b15150d3d"
    }
  },
  {
    "oid": "fcf6065616090566e811289127ac79d0175f96ab",
    "message": "test: verify that the analysis of the cause of issue 1702 is correct (#1710)",
    "date": "2019-10-21T01:35:59Z",
    "url": "https://github.com/apache/incubator-seata/commit/fcf6065616090566e811289127ac79d0175f96ab",
    "details": {
      "sha": "2141b7b75a4ea198542ac57e20266d9cc863705c",
      "filename": "common/src/main/java/io/seata/common/thread/NamedThreadFactory.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/apache/incubator-seata/blob/fcf6065616090566e811289127ac79d0175f96ab/common%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcommon%2Fthread%2FNamedThreadFactory.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/fcf6065616090566e811289127ac79d0175f96ab/common%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcommon%2Fthread%2FNamedThreadFactory.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/common%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcommon%2Fthread%2FNamedThreadFactory.java?ref=fcf6065616090566e811289127ac79d0175f96ab",
      "patch": "@@ -15,6 +15,8 @@\n  */\n package io.seata.common.thread;\n \n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ThreadFactory;\n import java.util.concurrent.atomic.AtomicInteger;\n \n@@ -24,9 +26,10 @@\n  * The type Named thread factory.\n  *\n  * @author jimin.jm @alibaba-inc.com\n- * @date 2018 /9/12\n+ * @author ggndnn\n  */\n public class NamedThreadFactory implements ThreadFactory {\n+    private final static Map<String, AtomicInteger> PREFIX_COUNTER = new ConcurrentHashMap<>();\n     private final AtomicInteger counter = new AtomicInteger(0);\n     private final String prefix;\n     private final int totalSize;\n@@ -40,7 +43,9 @@ public class NamedThreadFactory implements ThreadFactory {\n      * @param makeDaemons the make daemons\n      */\n     public NamedThreadFactory(String prefix, int totalSize, boolean makeDaemons) {\n-        this.prefix = prefix;\n+        PREFIX_COUNTER.putIfAbsent(prefix, new AtomicInteger(0));\n+        int prefixCounter = PREFIX_COUNTER.get(prefix).incrementAndGet();\n+        this.prefix = prefix + \"_\" + prefixCounter;\n         this.makeDaemons = makeDaemons;\n         this.totalSize = totalSize;\n     }",
      "parent_sha": "b78f425270cbd214da6631c962d9e24a6b62b221"
    }
  },
  {
    "oid": "fce1c23da1edbed2ff64ca040f0310fc1060fdb4",
    "message": "bugfix: BufferOverflow when BranchSession size too large (#1552)",
    "date": "2019-09-08T09:35:51Z",
    "url": "https://github.com/apache/incubator-seata/commit/fce1c23da1edbed2ff64ca040f0310fc1060fdb4",
    "details": {
      "sha": "df89ff3b7f368c404e1af5957e3c475ea8571972",
      "filename": "server/src/main/java/io/seata/server/store/file/FileTransactionStoreManager.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apache/incubator-seata/blob/fce1c23da1edbed2ff64ca040f0310fc1060fdb4/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fstore%2Ffile%2FFileTransactionStoreManager.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/fce1c23da1edbed2ff64ca040f0310fc1060fdb4/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fstore%2Ffile%2FFileTransactionStoreManager.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fstore%2Ffile%2FFileTransactionStoreManager.java?ref=fce1c23da1edbed2ff64ca040f0310fc1060fdb4",
      "patch": "@@ -411,14 +411,14 @@ private void closeFile(RandomAccessFile raf) {\n     }\n \n     private boolean writeDataFile(byte[] bs) {\n-        if (bs == null) {\n+        if (bs == null || bs.length >= Integer.MAX_VALUE - 3) {\n             return false;\n         }\n         ByteBuffer byteBuffer = null;\n \n-        if (bs.length > MAX_WRITE_BUFFER_SIZE) {\n+        if (bs.length + 4 > MAX_WRITE_BUFFER_SIZE) {\n             //allocateNew\n-            byteBuffer = ByteBuffer.allocateDirect(bs.length);\n+            byteBuffer = ByteBuffer.allocateDirect(bs.length + 4);\n         } else {\n             byteBuffer = writeBuffer;\n             //recycle",
      "parent_sha": "e191caa8f6df87cb425013122d494faf0b4590ba"
    }
  },
  {
    "oid": "41a1b352a9929da0fba03d6e2b0fc3a791cbd7c1",
    "message": "optimize:optimize the speed when batch insert or batch update",
    "date": "2019-11-25T04:32:44Z",
    "url": "https://github.com/apache/incubator-seata/commit/41a1b352a9929da0fba03d6e2b0fc3a791cbd7c1",
    "details": {
      "sha": "f0fd61a0c9f8023fcbf340660f6acf93c5dbb736",
      "filename": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseTransactionalExecutor.java",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/apache/incubator-seata/blob/41a1b352a9929da0fba03d6e2b0fc3a791cbd7c1/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fexec%2FBaseTransactionalExecutor.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/41a1b352a9929da0fba03d6e2b0fc3a791cbd7c1/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fexec%2FBaseTransactionalExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fexec%2FBaseTransactionalExecutor.java?ref=41a1b352a9929da0fba03d6e2b0fc3a791cbd7c1",
      "patch": "@@ -111,9 +111,9 @@ public Object execute(Object... args) throws Throwable {\n      * @throws SQLException the sql exception\n      */\n     protected String buildWhereConditionByPKs(List<Field> pkRows) throws SQLException {\n-        StringJoiner whereConditionAppender = new StringJoiner(\" OR \");\n+        StringJoiner whereConditionAppender = new StringJoiner(\",\", getColumnNameInSQL(pkRows.get(0).getName()) + \" in (\", \")\");\n         for (Field field : pkRows) {\n-            whereConditionAppender.add(getColumnNameInSQL(field.getName()) + \" = ?\");\n+            whereConditionAppender.add(\"?\");\n         }\n         return whereConditionAppender.toString();\n \n@@ -224,14 +224,16 @@ protected String buildLockKey(TableRecords rowsIncludingPK) {\n         if (rowsIncludingPK.size() == 0) {\n             return null;\n         }\n+\n         StringBuilder sb = new StringBuilder();\n         sb.append(rowsIncludingPK.getTableMeta().getTableName());\n         sb.append(\":\");\n         int filedSequence = 0;\n-        for (Field field : rowsIncludingPK.pkRows()) {\n+        List<Field> pkRows = rowsIncludingPK.pkRows();\n+        for (Field field : pkRows) {\n             sb.append(field.getValue());\n             filedSequence++;\n-            if (filedSequence < rowsIncludingPK.pkRows().size()) {\n+            if (filedSequence < pkRows.size()) {\n                 sb.append(\",\");\n             }\n         }\n@@ -320,9 +322,9 @@ protected TableRecords buildTableRecords(TableMeta tableMeta, String selectSQL,\n     protected TableRecords buildTableRecords(List<Object> pkValues) throws SQLException {\n         TableRecords afterImage;\n         String pk = getTableMeta().getPkName();\n-        StringJoiner pkValuesJoiner = new StringJoiner(\" OR \", \"SELECT * FROM \" + getTableMeta().getTableName() + \" WHERE \", \"\");\n+        StringJoiner pkValuesJoiner = new StringJoiner(\" , \", \"SELECT * FROM \" + getTableMeta().getTableName() + \" WHERE \" + pk + \" in (\", \")\");\n         for (Object pkValue : pkValues) {\n-            pkValuesJoiner.add(pk + \"=?\");\n+            pkValuesJoiner.add(\"?\");\n         }\n         PreparedStatement ps = null;\n         ResultSet rs = null;",
      "parent_sha": "9a407fd0947e0596f44bc36f41bb02692f73ff47"
    }
  },
  {
    "oid": "5767bff1df509925be9c6202dc5e3bebb09e2b92",
    "message": " bugfix:when BranchRollback RPC exception not retry and PhaseOne_Failed clean (#757)\n\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* add unit test for some request class (#239)\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* add unit test\r\n\r\n* fix\r\n\r\n* Revert \"add unit test for some request class (#239)\" (#240)\r\n\r\nThis reverts commit d176782766879e5a94bf0c1986242501a36c73ed.\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* update package pom\r\n\r\n* release 0.1.2 (#294)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* change version 0.1.2-SNAPSHOT (#179)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* Fix 3 problems of GlobalTransactionScanner class (#160)\r\n\r\n* 1.Fix the problem of duplicate creating objectes\r\n2.Remove the unnecessary type parameter\r\n\r\n* Let the PROXYED_SET just contains that has method annotated by @GlobalTransactional\r\n\r\n* Let not the first proxyed bean but the multiple proxyed bean can be added to PROXYED_SET\r\n\r\n* fix #201 add sample module sql script (#202)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* Optimize slf4j logger output. (#203)\r\n\r\n* sample OrderServiceImpl long->longValue() (#214)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* add sessionManager unit test (#222)\r\n\r\n* 1.Add static final default FailureHandler to scanner and interceptor (#209)\r\n\r\n2.Move static final field to the head of other fields\r\n\r\n* fixs #227  (#229)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* issue #227 SQLVisitorFactory should recognize FOR UPDATE from normal SELECT SQL\r\n\r\n* fixes #233 add package jvmSettings (#234)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* add  unit test for session package (#237)\r\n\r\n* add copyright and import testng framework\r\n\r\n* add global&branch session unit test\r\n\r\n* issue #244 Should support SQL with table alias (#247)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* issue #227 SQLVisitorFactory should recognize FOR UPDATE from normal SELECT SQL\r\n\r\n* issue #24 Should support SQL with table alias\r\n\r\n* remove useless import\r\n\r\n* Add unit test 20190123 (#248)\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* add unit test\r\n\r\n* extract jdbc config on demo project (#246)\r\n\r\n* extract jdbc config on demo project\r\n\r\n* independent db config for different service.\r\n\r\n* fix #250 add support zk (#253)\r\n\r\n* fix unit test case CodecTest (#261)\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* \u5c0f\u4f18\u5316-\u7c7b\u578b\u8f6c\u6362\r\n\r\n* \u7c7b\u578b\u8f6c\u6362\u5c0f\u4f18\u5316\r\n\r\n* fix unit test class CodecTest.java\r\n\r\n* fix merge conflicts\r\n\r\n* fixes #255 (#256)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* issue #227 SQLVisitorFactory should recognize FOR UPDATE from normal SELECT SQL\r\n\r\n* issue #24 Should support SQL with table alias\r\n\r\n* remove useless import\r\n\r\n* issue #255 Should work with case-sensitive database\r\n\r\n* remove unnecessary check and change some constants to capital letter (#269)\r\n\r\n* spring rm distinct (#263)\r\n\r\n* #266 deal exception scenes of retry rollback failure (#270)\r\n\r\n* add unit test to core module (#276)\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* \u5c0f\u4f18\u5316-\u7c7b\u578b\u8f6c\u6362\r\n\r\n* \u7c7b\u578b\u8f6c\u6362\u5c0f\u4f18\u5316\r\n\r\n* add unit test to fescar/core/message package\r\n\r\n* merge conflichts\r\n\r\n* add lock manager test (#278)\r\n\r\n* add lock manager test\r\n\r\n* add store unit test\r\n\r\n* add unit test for server package LockManager and DefaultCore (#262)\r\n\r\n* add unit test for server lock and default core\r\n\r\n* mysql_recognizer unit_test (#280)\r\n\r\n* mysql_recognizer unit_test\r\n\r\n* format code\r\n\r\n* fixed branchRegister use branchType (#275)\r\n\r\n* fix #271 add FileConfigurationTest, add addConfigListener removeConfigListener getConfigListeners impl, rm sample RmClientAT.init(),fix userDefined timeout not function (#272)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* fix #257 when timeout should break (#283)\r\n\r\n* add volatile (#273)\r\n\r\n* fix #292 update pom package (#293)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* update package pom\r\n\r\n* release 0.1.2 (#296)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* change version 0.1.2-SNAPSHOT (#179)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* Fix 3 problems of GlobalTransactionScanner class (#160)\r\n\r\n* 1.Fix the problem of duplicate creating objectes\r\n2.Remove the unnecessary type parameter\r\n\r\n* Let the PROXYED_SET just contains that has method annotated by @GlobalTransactional\r\n\r\n* Let not the first proxyed bean but the multiple proxyed bean can be added to PROXYED_SET\r\n\r\n* fix #201 add sample module sql script (#202)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* Optimize slf4j logger output. (#203)\r\n\r\n* sample OrderServiceImpl long->longValue() (#214)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* add sessionManager unit test (#222)\r\n\r\n* 1.Add static final default FailureHandler to scanner and interceptor (#209)\r\n\r\n2.Move static final field to the head of other fields\r\n\r\n* fixs #227  (#229)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* issue #227 SQLVisitorFactory should recognize FOR UPDATE from normal SELECT SQL\r\n\r\n* fixes #233 add package jvmSettings (#234)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* add  unit test for session package (#237)\r\n\r\n* add copyright and import testng framework\r\n\r\n* add global&branch session unit test\r\n\r\n* issue #244 Should support SQL with table alias (#247)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* issue #227 SQLVisitorFactory should recognize FOR UPDATE from normal SELECT SQL\r\n\r\n* issue #24 Should support SQL with table alias\r\n\r\n* remove useless import\r\n\r\n* Add unit test 20190123 (#248)\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* add unit test\r\n\r\n* extract jdbc config on demo project (#246)\r\n\r\n* extract jdbc config on demo project\r\n\r\n* independent db config for different service.\r\n\r\n* fix #250 add support zk (#253)\r\n\r\n* fix unit test case CodecTest (#261)\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* \u5c0f\u4f18\u5316-\u7c7b\u578b\u8f6c\u6362\r\n\r\n* \u7c7b\u578b\u8f6c\u6362\u5c0f\u4f18\u5316\r\n\r\n* fix unit test class CodecTest.java\r\n\r\n* fix merge conflicts\r\n\r\n* fixes #255 (#256)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* issue #227 SQLVisitorFactory should recognize FOR UPDATE from normal SELECT SQL\r\n\r\n* issue #24 Should support SQL with table alias\r\n\r\n* remove useless import\r\n\r\n* issue #255 Should work with case-sensitive database\r\n\r\n* remove unnecessary check and change some constants to capital letter (#269)\r\n\r\n* spring rm distinct (#263)\r\n\r\n* #266 deal exception scenes of retry rollback failure (#270)\r\n\r\n* add unit test to core module (#276)\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* \u5c0f\u4f18\u5316-\u7c7b\u578b\u8f6c\u6362\r\n\r\n* \u7c7b\u578b\u8f6c\u6362\u5c0f\u4f18\u5316\r\n\r\n* add unit test to fescar/core/message package\r\n\r\n* merge conflichts\r\n\r\n* add lock manager test (#278)\r\n\r\n* add lock manager test\r\n\r\n* add store unit test\r\n\r\n* add unit test for server package LockManager and DefaultCore (#262)\r\n\r\n* add unit test for server lock and default core\r\n\r\n* mysql_recognizer unit_test (#280)\r\n\r\n* mysql_recognizer unit_test\r\n\r\n* format code\r\n\r\n* fixed branchRegister use branchType (#275)\r\n\r\n* fix #271 add FileConfigurationTest, add addConfigListener removeConfigListener getConfigListeners impl, rm sample RmClientAT.init(),fix userDefined timeout not function (#272)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* fix #257 when timeout should break (#283)\r\n\r\n* add volatile (#273)\r\n\r\n* fix #292 update pom package (#293)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* update package pom\r\n\r\n* release 0.1.2\r\n\r\n* release 0.1.2 (#301)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* change version 0.1.2-SNAPSHOT (#179)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* Fix 3 problems of GlobalTransactionScanner class (#160)\r\n\r\n* 1.Fix the problem of duplicate creating objectes\r\n2.Remove the unnecessary type parameter\r\n\r\n* Let the PROXYED_SET just contains that has method annotated by @GlobalTransactional\r\n\r\n* Let not the first proxyed bean but the multiple proxyed bean can be added to PROXYED_SET\r\n\r\n* fix #201 add sample module sql script (#202)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* Optimize slf4j logger output. (#203)\r\n\r\n* sample OrderServiceImpl long->longValue() (#214)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* add sessionManager unit test (#222)\r\n\r\n* 1.Add static final default FailureHandler to scanner and interceptor (#209)\r\n\r\n2.Move static final field to the head of other fields\r\n\r\n* fixs #227  (#229)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* issue #227 SQLVisitorFactory should recognize FOR UPDATE from normal SELECT SQL\r\n\r\n* fixes #233 add package jvmSettings (#234)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* add  unit test for session package (#237)\r\n\r\n* add copyright and import testng framework\r\n\r\n* add global&branch session unit test\r\n\r\n* issue #244 Should support SQL with table alias (#247)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* issue #227 SQLVisitorFactory should recognize FOR UPDATE from normal SELECT SQL\r\n\r\n* issue #24 Should support SQL with table alias\r\n\r\n* remove useless import\r\n\r\n* Add unit test 20190123 (#248)\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* add unit test\r\n\r\n* extract jdbc config on demo project (#246)\r\n\r\n* extract jdbc config on demo project\r\n\r\n* independent db config for different service.\r\n\r\n* fix #250 add support zk (#253)\r\n\r\n* fix unit test case CodecTest (#261)\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* \u5c0f\u4f18\u5316-\u7c7b\u578b\u8f6c\u6362\r\n\r\n* \u7c7b\u578b\u8f6c\u6362\u5c0f\u4f18\u5316\r\n\r\n* fix unit test class CodecTest.java\r\n\r\n* fix merge conflicts\r\n\r\n* fixes #255 (#256)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* issue #227 SQLVisitorFactory should recognize FOR UPDATE from normal SELECT SQL\r\n\r\n* issue #24 Should support SQL with table alias\r\n\r\n* remove useless import\r\n\r\n* issue #255 Should work with case-sensitive database\r\n\r\n* remove unnecessary check and change some constants to capital letter (#269)\r\n\r\n* spring rm distinct (#263)\r\n\r\n* #266 deal exception scenes of retry rollback failure (#270)\r\n\r\n* add unit test to core module (#276)\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* \u5c0f\u4f18\u5316-\u7c7b\u578b\u8f6c\u6362\r\n\r\n* \u7c7b\u578b\u8f6c\u6362\u5c0f\u4f18\u5316\r\n\r\n* add unit test to fescar/core/message package\r\n\r\n* merge conflichts\r\n\r\n* add lock manager test (#278)\r\n\r\n* add lock manager test\r\n\r\n* add store unit test\r\n\r\n* add unit test for server package LockManager and DefaultCore (#262)\r\n\r\n* add unit test for server lock and default core\r\n\r\n* mysql_recognizer unit_test (#280)\r\n\r\n* mysql_recognizer unit_test\r\n\r\n* format code\r\n\r\n* fixed branchRegister use branchType (#275)\r\n\r\n* fix #271 add FileConfigurationTest, add addConfigListener removeConfigListener getConfigListeners impl, rm sample RmClientAT.init(),fix userDefined timeout not function (#272)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* fix #257 when timeout should break (#283)\r\n\r\n* add volatile (#273)\r\n\r\n* fix #292 update pom package (#293)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* update package pom\r\n\r\n* release 0.1.2 (#297)\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* add unit test for some request class (#239)\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* add unit test\r\n\r\n* fix\r\n\r\n* Revert \"add unit test for some request class (#239)\" (#240)\r\n\r\nThis reverts commit d176782766879e5a94bf0c1986242501a36c73ed.\r\n\r\n* release 0.1.2 (#294)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* change version 0.1.2-SNAPSHOT (#179)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* Fix 3 problems of GlobalTransactionScanner class (#160)\r\n\r\n* 1.Fix the problem of duplicate creating objectes\r\n2.Remove the unnecessary type parameter\r\n\r\n* Let the PROXYED_SET just contains that has method annotated by @GlobalTransactional\r\n\r\n* Let not the first proxyed bean but the multiple proxyed bean can be added to PROXYED_SET\r\n\r\n* fix #201 add sample module sql script (#202)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* Optimize slf4j logger output. (#203)\r\n\r\n* sample OrderServiceImpl long->longValue() (#214)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* add sessionManager unit test (#222)\r\n\r\n* 1.Add static final default FailureHandler to scanner and interceptor (#209)\r\n\r\n2.Move static final field to the head of other fields\r\n\r\n* fixs #227  (#229)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* issue #227 SQLVisitorFactory should recognize FOR UPDATE from normal SELECT SQL\r\n\r\n* fixes #233 add package jvmSettings (#234)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* add  unit test for session package (#237)\r\n\r\n* add copyright and import testng framework\r\n\r\n* add global&branch session unit test\r\n\r\n* issue #244 Should support SQL with table alias (#247)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* issue #227 SQLVisitorFactory should recognize FOR UPDATE from normal SELECT SQL\r\n\r\n* issue #24 Should support SQL with table alias\r\n\r\n* remove useless import\r\n\r\n* Add unit test 20190123 (#248)\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* add unit test\r\n\r\n* extract jdbc config on demo project (#246)\r\n\r\n* extract jdbc config on demo project\r\n\r\n* independent db config for different service.\r\n\r\n* fix #250 add support zk (#253)\r\n\r\n* fix unit test case CodecTest (#261)\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventEx\u2026",
    "date": "2019-04-11T02:10:49Z",
    "url": "https://github.com/apache/incubator-seata/commit/5767bff1df509925be9c6202dc5e3bebb09e2b92",
    "details": {
      "sha": "7cf6bf7b0261cedef0853857fb5255846259502c",
      "filename": "server/src/main/java/com/alibaba/fescar/server/coordinator/DefaultCore.java",
      "status": "modified",
      "additions": 23,
      "deletions": 26,
      "changes": 49,
      "blob_url": "https://github.com/apache/incubator-seata/blob/5767bff1df509925be9c6202dc5e3bebb09e2b92/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2Fcoordinator%2FDefaultCore.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/5767bff1df509925be9c6202dc5e3bebb09e2b92/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2Fcoordinator%2FDefaultCore.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2Fcoordinator%2FDefaultCore.java?ref=5767bff1df509925be9c6202dc5e3bebb09e2b92",
      "patch": "@@ -58,10 +58,12 @@ public void setResourceManagerInbound(ResourceManagerInbound resourceManagerInbo\n     }\n \n     @Override\n-    public Long branchRegister(BranchType branchType, String resourceId, String clientId, String xid, String applicationData, String lockKeys) throws TransactionException {\n+    public Long branchRegister(BranchType branchType, String resourceId, String clientId, String xid,\n+                               String applicationData, String lockKeys) throws TransactionException {\n         GlobalSession globalSession = assertGlobalSession(XID.getTransactionId(xid), GlobalStatus.Begin);\n \n-        BranchSession branchSession = SessionHelper.newBranchByGlobal(globalSession, branchType, resourceId, applicationData, lockKeys, clientId);\n+        BranchSession branchSession = SessionHelper.newBranchByGlobal(globalSession, branchType, resourceId,\n+            applicationData, lockKeys, clientId);\n \n         if (!branchSession.lock()) {\n             throw new TransactionException(LockKeyConflict);\n@@ -91,10 +93,12 @@ private GlobalSession assertGlobalSession(long transactionId, GlobalStatus statu\n     }\n \n     @Override\n-    public void branchReport(BranchType branchType, String xid, long branchId, BranchStatus status, String applicationData) throws TransactionException {\n+    public void branchReport(BranchType branchType, String xid, long branchId, BranchStatus status,\n+                             String applicationData) throws TransactionException {\n         GlobalSession globalSession = SessionHolder.findGlobalSession(XID.getTransactionId(xid));\n         if (globalSession == null) {\n-            throw new TransactionException(TransactionExceptionCode.GlobalTransactionNotExist, \"\" + XID.getTransactionId(xid) + \"\");\n+            throw new TransactionException(TransactionExceptionCode.GlobalTransactionNotExist,\n+                \"\" + XID.getTransactionId(xid) + \"\");\n         }\n         BranchSession branchSession = globalSession.getBranch(branchId);\n         if (branchSession == null) {\n@@ -104,7 +108,8 @@ public void branchReport(BranchType branchType, String xid, long branchId, Branc\n     }\n \n     @Override\n-    public boolean lockQuery(BranchType branchType, String resourceId, String xid, String lockKeys) throws TransactionException {\n+    public boolean lockQuery(BranchType branchType, String resourceId, String xid, String lockKeys)\n+        throws TransactionException {\n         if (branchType == BranchType.AT) {\n             return lockManager.isLockable(XID.getTransactionId(xid), resourceId, lockKeys);\n         } else {\n@@ -114,7 +119,8 @@ public boolean lockQuery(BranchType branchType, String resourceId, String xid, S\n     }\n \n     @Override\n-    public String begin(String applicationId, String transactionServiceGroup, String name, int timeout) throws TransactionException {\n+    public String begin(String applicationId, String transactionServiceGroup, String name, int timeout)\n+        throws TransactionException {\n         GlobalSession session = GlobalSession.createGlobalSession(\n             applicationId, transactionServiceGroup, name, timeout);\n         session.addSessionLifecycleListener(SessionHolder.getRootSessionManager());\n@@ -151,10 +157,12 @@ public void doGlobalCommit(GlobalSession globalSession, boolean retrying) throws\n         for (BranchSession branchSession : globalSession.getSortedBranches()) {\n             BranchStatus currentStatus = branchSession.getStatus();\n             if (currentStatus == BranchStatus.PhaseOne_Failed) {\n+                globalSession.removeBranch(branchSession);\n                 continue;\n             }\n             try {\n-                BranchStatus branchStatus = resourceManagerInbound.branchCommit(branchSession.getBranchType(), XID.generateXID(branchSession.getTransactionId()), branchSession.getBranchId(),\n+                BranchStatus branchStatus = resourceManagerInbound.branchCommit(branchSession.getBranchType(),\n+                    XID.generateXID(branchSession.getTransactionId()), branchSession.getBranchId(),\n                     branchSession.getResourceId(), branchSession.getApplicationData());\n \n                 switch (branchStatus) {\n@@ -189,14 +197,10 @@ public void doGlobalCommit(GlobalSession globalSession, boolean retrying) throws\n                 }\n \n             } catch (Exception ex) {\n-                LOGGER.info(\"Exception committing branch {}\", branchSession, ex);\n+                LOGGER.error(\"Exception committing branch {}\", branchSession, ex);\n                 if (!retrying) {\n                     queueToRetryCommit(globalSession);\n-                    if (ex instanceof TransactionException) {\n-                        throw (TransactionException)ex;\n-                    } else {\n-                        throw new TransactionException(ex);\n-                    }\n+                    throw new TransactionException(ex);\n                 }\n \n             }\n@@ -256,10 +260,12 @@ public void doGlobalRollback(GlobalSession globalSession, boolean retrying) thro\n         for (BranchSession branchSession : globalSession.getReverseSortedBranches()) {\n             BranchStatus currentBranchStatus = branchSession.getStatus();\n             if (currentBranchStatus == BranchStatus.PhaseOne_Failed) {\n+                globalSession.removeBranch(branchSession);\n                 continue;\n             }\n             try {\n-                BranchStatus branchStatus = resourceManagerInbound.branchRollback(branchSession.getBranchType(), XID.generateXID(branchSession.getTransactionId()), branchSession.getBranchId(),\n+                BranchStatus branchStatus = resourceManagerInbound.branchRollback(branchSession.getBranchType(),\n+                    XID.generateXID(branchSession.getTransactionId()), branchSession.getBranchId(),\n                     branchSession.getResourceId(), branchSession.getApplicationData());\n \n                 switch (branchStatus) {\n@@ -281,24 +287,15 @@ public void doGlobalRollback(GlobalSession globalSession, boolean retrying) thro\n \n                 }\n             } catch (Exception ex) {\n-                LOGGER.info(\"Exception rollbacking branch \" + branchSession, ex);\n+                LOGGER.error(\"Exception rollbacking branch \" + branchSession, ex);\n                 if (!retrying) {\n                     queueToRetryRollback(globalSession);\n-                    if (ex instanceof TransactionException) {\n-                        throw (TransactionException)ex;\n-                    } else {\n-                        throw new TransactionException(ex);\n-                    }\n                 }\n-\n+                throw new TransactionException(ex);\n             }\n \n         }\n-        if (globalSession.hasBranch()) {\n-            SessionHelper.endRollbackFailed(globalSession);\n-        } else {\n-            SessionHelper.endRollbacked(globalSession);\n-        }\n+        SessionHelper.endRollbacked(globalSession);\n     }\n \n     @Override",
      "parent_sha": "ec72f20649fc4506b3e4d59944a0c9a3ea3eb03a"
    }
  },
  {
    "oid": "75f3d36201749c9dfb491edca4cbb67cb5c4dccd",
    "message": "bugfix: ApplicationContext has not been refreshed (#2261)",
    "date": "2020-02-17T15:18:30Z",
    "url": "https://github.com/apache/incubator-seata/commit/75f3d36201749c9dfb491edca4cbb67cb5c4dccd",
    "details": {
      "sha": "186313872579006e1f74f0a57cbaabf54d088bec",
      "filename": "core/src/main/java/io/seata/core/rpc/netty/AbstractRpcRemotingClient.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/apache/incubator-seata/blob/75f3d36201749c9dfb491edca4cbb67cb5c4dccd/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FAbstractRpcRemotingClient.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/75f3d36201749c9dfb491edca4cbb67cb5c4dccd/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FAbstractRpcRemotingClient.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FAbstractRpcRemotingClient.java?ref=75f3d36201749c9dfb491edca4cbb67cb5c4dccd",
      "patch": "@@ -67,7 +67,8 @@ public abstract class AbstractRpcRemotingClient extends AbstractRpcRemoting\n \n     private static final int MAX_MERGE_SEND_THREAD = 1;\n     private static final long KEEP_ALIVE_TIME = Integer.MAX_VALUE;\n-    private static final int SCHEDULE_INTERVAL_MILLS = 5;\n+    private static final long SCHEDULE_DELAY_MILLS = 60 * 1000L;\n+    private static final long SCHEDULE_INTERVAL_MILLS = 10 * 1000L;\n     private static final String MERGE_THREAD_PREFIX = \"rpcMergeMessageSend\";\n \n     private final RpcClientBootstrap clientBootstrap;\n@@ -112,7 +113,7 @@ public void init() {\n             public void run() {\n                 clientChannelManager.reconnect(getTransactionServiceGroup());\n             }\n-        }, SCHEDULE_INTERVAL_MILLS, SCHEDULE_INTERVAL_MILLS, TimeUnit.SECONDS);\n+        }, SCHEDULE_DELAY_MILLS, SCHEDULE_INTERVAL_MILLS, TimeUnit.MILLISECONDS);\n         if (NettyClientConfig.isEnableClientBatchSendRequest()) {\n             mergeSendExecutorService = new ThreadPoolExecutor(MAX_MERGE_SEND_THREAD,\n                 MAX_MERGE_SEND_THREAD,",
      "parent_sha": "40f1bbf445101018c527b4cb11c05a667de42e03"
    }
  },
  {
    "oid": "e0918f9849ae6156808781ac77e2ed49ad7f642a",
    "message": "optimize: Change GlobalTransactionalInterceptor to singleton (#2680)",
    "date": "2020-05-12T06:34:24Z",
    "url": "https://github.com/apache/incubator-seata/commit/e0918f9849ae6156808781ac77e2ed49ad7f642a",
    "details": {
      "sha": "d3c1d225a851c920d55acfe2fdeedc7b77659a06",
      "filename": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/apache/incubator-seata/blob/e0918f9849ae6156808781ac77e2ed49ad7f642a/spring%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fspring%2Fannotation%2FGlobalTransactionScanner.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/e0918f9849ae6156808781ac77e2ed49ad7f642a/spring%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fspring%2Fannotation%2FGlobalTransactionScanner.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/spring%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fspring%2Fannotation%2FGlobalTransactionScanner.java?ref=e0918f9849ae6156808781ac77e2ed49ad7f642a",
      "patch": "@@ -72,6 +72,7 @@ public class GlobalTransactionScanner extends AbstractAutoProxyCreator\n     private static final Set<String> PROXYED_SET = new HashSet<>();\n \n     private MethodInterceptor interceptor;\n+    private MethodInterceptor globalTransactionalInterceptor;\n \n     private final String applicationId;\n     private final String txServiceGroup;\n@@ -216,8 +217,11 @@ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey)\n                     }\n \n                     if (interceptor == null) {\n-                        interceptor = new GlobalTransactionalInterceptor(failureHandlerHook);\n-                        ConfigurationFactory.getInstance().addConfigListener(ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION, (ConfigurationChangeListener) interceptor);\n+                        if (globalTransactionalInterceptor == null) {\n+                            globalTransactionalInterceptor = new GlobalTransactionalInterceptor(failureHandlerHook);\n+                            ConfigurationFactory.getInstance().addConfigListener(ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION, (ConfigurationChangeListener) globalTransactionalInterceptor);\n+                        }\n+                        interceptor = globalTransactionalInterceptor;\n                     }\n                 }\n ",
      "parent_sha": "834b09a461246cd56a44a2483689099f0bbf192f"
    }
  },
  {
    "oid": "7c92be5284665f04fd0c8969a654b9bb169ca3eb",
    "message": "fix #415 transId needs to recycle (#436)",
    "date": "2019-02-20T09:18:31Z",
    "url": "https://github.com/apache/incubator-seata/commit/7c92be5284665f04fd0c8969a654b9bb169ca3eb",
    "details": {
      "sha": "1f426d39233f934335bd98c37a95b31c2e8f1021",
      "filename": "server/src/main/java/com/alibaba/fescar/server/UUIDGenerator.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/incubator-seata/blob/7c92be5284665f04fd0c8969a654b9bb169ca3eb/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2FUUIDGenerator.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/7c92be5284665f04fd0c8969a654b9bb169ca3eb/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2FUUIDGenerator.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2FUUIDGenerator.java?ref=7c92be5284665f04fd0c8969a654b9bb169ca3eb",
      "patch": "@@ -29,7 +29,7 @@\n  */\n public class UUIDGenerator {\n \n-    private static AtomicLong UUID = new AtomicLong(1000);\n+    private static final AtomicLong UUID = new AtomicLong(1000);\n     private static int serverNodeId = 1;\n     private static final long UUID_INTERNAL = 2000000000;\n \n@@ -40,7 +40,7 @@ public class UUIDGenerator {\n      */\n     public static long generateUUID() {\n         long id = UUID.incrementAndGet();\n-        if (id > UUID_INTERNAL * serverNodeId) {\n+        if (id >= UUID_INTERNAL * (serverNodeId + 1)) {\n             synchronized (UUID) {\n                 if (UUID.get() >= id) {\n                     id -= UUID_INTERNAL;",
      "parent_sha": "cf0d43495fb6f1c1b31c66e7262c946c39f0ca37"
    }
  },
  {
    "oid": "570be043b98e8f8678b4ade07c482c6370e2bd40",
    "message": "fix fescar server must start with port",
    "date": "2019-01-12T03:32:04Z",
    "url": "https://github.com/apache/incubator-seata/commit/570be043b98e8f8678b4ade07c482c6370e2bd40",
    "details": {
      "sha": "aca1c7b1e82e52a5361bf69ce46063ee8223e47a",
      "filename": "server/src/main/java/com/alibaba/fescar/server/Server.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/apache/incubator-seata/blob/570be043b98e8f8678b4ade07c482c6370e2bd40/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2FServer.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/570be043b98e8f8678b4ade07c482c6370e2bd40/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2FServer.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2FServer.java?ref=570be043b98e8f8678b4ade07c482c6370e2bd40",
      "patch": "@@ -34,13 +34,18 @@ public class Server {\n \n     public static void main(String[] args) throws IOException {\n         RpcServer rpcServer = new RpcServer(WORKING_THREADS);\n+        \n         int port = 8091;\n         if (args.length == 0) {\n             rpcServer.setListenPort(port);\n         }\n \n         if (args.length > 0) {\n-            port = Integer.parseInt(args[0]);\n+            try {\n+                port = Integer.parseInt(args[0]);\n+            } catch (NumberFormatException e) {\n+                System.err.println(\"Usage: sh fescar-server.sh $LISTEN_PORT $PATH_FOR_PERSISTENT_DATA\");\n+            }\n             rpcServer.setListenPort(port);\n         }\n         ",
      "parent_sha": "6093da5c54500a08b1f8e9c905f5023ec7d1f527"
    }
  },
  {
    "oid": "e91edf4165deec2c756848ba27fcb84ce00d843b",
    "message": "bugfix: thread unsafe issue of MySQLKeywordChecker initialization (#1599)",
    "date": "2019-09-06T12:47:23Z",
    "url": "https://github.com/apache/incubator-seata/commit/e91edf4165deec2c756848ba27fcb84ce00d843b",
    "details": {
      "sha": "8c7e9b1cd5f172c8ebaf47a537a9619e2dc85565",
      "filename": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/keyword/MySQLKeywordChecker.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/incubator-seata/blob/e91edf4165deec2c756848ba27fcb84ce00d843b/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fundo%2Fmysql%2Fkeyword%2FMySQLKeywordChecker.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/e91edf4165deec2c756848ba27fcb84ce00d843b/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fundo%2Fmysql%2Fkeyword%2FMySQLKeywordChecker.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fundo%2Fmysql%2Fkeyword%2FMySQLKeywordChecker.java?ref=e91edf4165deec2c756848ba27fcb84ce00d843b",
      "patch": "@@ -29,9 +29,10 @@\n  */\n public class MySQLKeywordChecker implements KeywordChecker {\n     private static volatile KeywordChecker keywordChecker = null;\n-    private static volatile Set<String> keywordSet = null;\n+    private Set<String> keywordSet;\n \n     private MySQLKeywordChecker() {\n+        keywordSet = Arrays.stream(MySQLKeyword.values()).map(MySQLKeyword::name).collect(Collectors.toSet());\n     }\n \n     /**\n@@ -44,7 +45,6 @@ public static KeywordChecker getInstance() {\n             synchronized (MySQLKeywordChecker.class) {\n                 if (keywordChecker == null) {\n                     keywordChecker = new MySQLKeywordChecker();\n-                    keywordSet = Arrays.stream(MySQLKeyword.values()).map(MySQLKeyword::name).collect(Collectors.toSet());\n                 }\n             }\n         }",
      "parent_sha": "0398ba2541d15202331043d7329afcfa92dca717"
    }
  },
  {
    "oid": "c901bbecedaa9e71409e61b2d024cb2801df9ac1",
    "message": "bugfix: fix can't get the class of target class. (#1262)",
    "date": "2019-07-04T05:24:36Z",
    "url": "https://github.com/apache/incubator-seata/commit/c901bbecedaa9e71409e61b2d024cb2801df9ac1",
    "details": {
      "sha": "974065576906aaa6618d3172d04459a1dcb796cd",
      "filename": "spring/src/main/java/io/seata/spring/util/SpringProxyUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/c901bbecedaa9e71409e61b2d024cb2801df9ac1/spring%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fspring%2Futil%2FSpringProxyUtils.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/c901bbecedaa9e71409e61b2d024cb2801df9ac1/spring%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fspring%2Futil%2FSpringProxyUtils.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/spring%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fspring%2Futil%2FSpringProxyUtils.java?ref=c901bbecedaa9e71409e61b2d024cb2801df9ac1",
      "patch": "@@ -43,7 +43,7 @@ public static Class<?> findTargetClass(Object proxy) throws Exception {\n             if (AopUtils.isJdkDynamicProxy(proxy)) {\n                 TargetSource targetSource = advised.getTargetSource();\n                 return targetSource instanceof EmptyTargetSource ? getFirstInterfaceByAdvised(advised)\n-                    : targetSource.getTarget().getClass();\n+                    : targetSource.getTargetClass();\n             }\n             Object target = advised.getTargetSource().getTarget();\n             return findTargetClass(target);",
      "parent_sha": "612183b1f9ae6e72bd620d92234e33dd0e0364b1"
    }
  },
  {
    "oid": "14e570560a83ac34dbac3c4959847cd9e88f711a",
    "message": "fix: fixed qualifier",
    "date": "2019-01-16T03:50:30Z",
    "url": "https://github.com/apache/incubator-seata/commit/14e570560a83ac34dbac3c4959847cd9e88f711a",
    "details": {
      "sha": "f44ad945af7086ce7db5ba9356ad9ad79a5b4926",
      "filename": "tm/src/main/java/com/alibaba/fescar/tm/api/TransactionalTemplate.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/14e570560a83ac34dbac3c4959847cd9e88f711a/tm%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Ftm%2Fapi%2FTransactionalTemplate.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/14e570560a83ac34dbac3c4959847cd9e88f711a/tm%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Ftm%2Fapi%2FTransactionalTemplate.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/tm%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Ftm%2Fapi%2FTransactionalTemplate.java?ref=14e570560a83ac34dbac3c4959847cd9e88f711a",
      "patch": "@@ -28,7 +28,7 @@ public class TransactionalTemplate {\n      *\n      * @param business the business\n      * @return the object\n-     * @throws ExecutionException the execution exception\n+     * @throws TransactionalExecutor.ExecutionException the execution exception\n      */\n     public Object execute(TransactionalExecutor business) throws TransactionalExecutor.ExecutionException {\n ",
      "parent_sha": "4d52c4d49744a3c46d92bc9a917c7b27ca80c1b3"
    }
  },
  {
    "oid": "da40fb54d23f0d1229e89931d52356d3e544bc3a",
    "message": "bugfix: the problem test case (#3349)",
    "date": "2020-12-09T02:44:02Z",
    "url": "https://github.com/apache/incubator-seata/commit/da40fb54d23f0d1229e89931d52356d3e544bc3a",
    "details": {
      "sha": "d2bbcd5d10c9148418b72e1ac26e4cd2436eea70",
      "filename": "server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorMetricsTest.java",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/apache/incubator-seata/blob/da40fb54d23f0d1229e89931d52356d3e544bc3a/server%2Fsrc%2Ftest%2Fjava%2Fio%2Fseata%2Fserver%2Fcoordinator%2FDefaultCoordinatorMetricsTest.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/da40fb54d23f0d1229e89931d52356d3e544bc3a/server%2Fsrc%2Ftest%2Fjava%2Fio%2Fseata%2Fserver%2Fcoordinator%2FDefaultCoordinatorMetricsTest.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Ftest%2Fjava%2Fio%2Fseata%2Fserver%2Fcoordinator%2FDefaultCoordinatorMetricsTest.java?ref=da40fb54d23f0d1229e89931d52356d3e544bc3a",
      "patch": "@@ -19,6 +19,9 @@\n import java.util.HashMap;\n import java.util.Map;\n \n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n import io.seata.core.exception.TransactionException;\n import io.seata.core.protocol.transaction.GlobalBeginRequest;\n import io.seata.core.protocol.transaction.GlobalBeginResponse;\n@@ -30,8 +33,9 @@\n import io.seata.metrics.Measurement;\n import io.seata.server.metrics.MetricsManager;\n import io.seata.server.session.SessionHolder;\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.Test;\n+\n+\n+import static io.seata.server.coordinator.DefaultCoordinatorTest.MockServerMessageSender;\n \n /**\n  * Test Metrics\n@@ -42,7 +46,7 @@ public class DefaultCoordinatorMetricsTest {\n     @Test\n     public void test() throws IOException, TransactionException, InterruptedException {\n         SessionHolder.init(null);\n-        DefaultCoordinator coordinator = new DefaultCoordinator(null);\n+        DefaultCoordinator coordinator = new DefaultCoordinator(new MockServerMessageSender());\n         coordinator.init();\n         try {\n             MetricsManager.get().init();",
      "parent_sha": "f0711ada4b5f84d8c0bf1ee37539e9373776f142"
    }
  },
  {
    "oid": "af103f4de9a23d5815e9b3a0b5307c861a920d07",
    "message": "optimize: opt the reload during startup in file mode (#3215)",
    "date": "2021-01-04T07:13:06Z",
    "url": "https://github.com/apache/incubator-seata/commit/af103f4de9a23d5815e9b3a0b5307c861a920d07",
    "details": {
      "sha": "46b236e8605bba58f662857473e538951ce19418",
      "filename": "server/src/main/java/io/seata/server/storage/file/session/FileSessionManager.java",
      "status": "modified",
      "additions": 76,
      "deletions": 52,
      "changes": 128,
      "blob_url": "https://github.com/apache/incubator-seata/blob/af103f4de9a23d5815e9b3a0b5307c861a920d07/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fstorage%2Ffile%2Fsession%2FFileSessionManager.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/af103f4de9a23d5815e9b3a0b5307c861a920d07/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fstorage%2Ffile%2Fsession%2FFileSessionManager.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fstorage%2Ffile%2Fsession%2FFileSessionManager.java?ref=af103f4de9a23d5815e9b3a0b5307c861a920d07",
      "patch": "@@ -20,12 +20,15 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n-import java.util.Iterator;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n+\n import io.seata.common.exception.ShouldNeverHappenException;\n import io.seata.common.loader.LoadLevel;\n+import io.seata.common.loader.Scope;\n import io.seata.common.util.StringUtils;\n import io.seata.config.ConfigurationFactory;\n import io.seata.core.constants.ConfigurationKeys;\n@@ -42,7 +45,6 @@\n import io.seata.server.store.AbstractTransactionStoreManager;\n import io.seata.server.store.SessionStorable;\n import io.seata.server.store.TransactionStoreManager;\n-import io.seata.common.loader.Scope;\n \n \n /**\n@@ -85,7 +87,6 @@ public boolean writeSession(LogOperation logOperation, SessionStorable session)\n     @Override\n     public void reload() {\n         restoreSessions();\n-        washSessions();\n     }\n \n     @Override\n@@ -139,72 +140,71 @@ public <T> T lockAndExecute(GlobalSession globalSession, GlobalSession.LockCalla\n     }\n \n     private void restoreSessions() {\n-        Map<Long, BranchSession> unhandledBranchBuffer = new HashMap<>();\n+        final Set<String> removedGlobalBuffer = new HashSet<>();\n+        final Map<String, Map<Long, BranchSession>> unhandledBranchBuffer = new HashMap<>();\n \n-        restoreSessions(true, unhandledBranchBuffer);\n-        restoreSessions(false, unhandledBranchBuffer);\n+        restoreSessions(true, removedGlobalBuffer, unhandledBranchBuffer);\n+        restoreSessions(false, removedGlobalBuffer, unhandledBranchBuffer);\n \n         if (!unhandledBranchBuffer.isEmpty()) {\n-            unhandledBranchBuffer.values().forEach(branchSession -> {\n-                String xid = branchSession.getXid();\n-                long bid = branchSession.getBranchId();\n-                GlobalSession found = sessionMap.get(xid);\n-                if (found == null) {\n-                    // Ignore\n-                    if (LOGGER.isInfoEnabled()) {\n-                        LOGGER.info(\"GlobalSession Does Not Exists For BranchSession [\" + bid + \"/\" + xid + \"]\");\n+            unhandledBranchBuffer.values().forEach(unhandledBranchSessions -> {\n+                unhandledBranchSessions.values().forEach(branchSession -> {\n+                    String xid = branchSession.getXid();\n+                    if (removedGlobalBuffer.contains(xid)) {\n+                        return;\n                     }\n-                } else {\n-                    BranchSession existingBranch = found.getBranch(branchSession.getBranchId());\n-                    if (existingBranch == null) {\n-                        found.add(branchSession);\n+\n+                    long bid = branchSession.getBranchId();\n+                    GlobalSession found = sessionMap.get(xid);\n+                    if (found == null) {\n+                        // Ignore\n+                        if (LOGGER.isInfoEnabled()) {\n+                            LOGGER.info(\"GlobalSession Does Not Exists For BranchSession [\" + bid + \"/\" + xid + \"]\");\n+                        }\n                     } else {\n-                        existingBranch.setStatus(branchSession.getStatus());\n+                        BranchSession existingBranch = found.getBranch(branchSession.getBranchId());\n+                        if (existingBranch == null) {\n+                            found.add(branchSession);\n+                        } else {\n+                            existingBranch.setStatus(branchSession.getStatus());\n+                        }\n                     }\n-                }\n-\n+                });\n             });\n         }\n     }\n \n-    private void washSessions() {\n-        if (sessionMap.size() > 0) {\n-            Iterator<Map.Entry<String, GlobalSession>> iterator = sessionMap.entrySet().iterator();\n-            while (iterator.hasNext()) {\n-                GlobalSession globalSession = iterator.next().getValue();\n-\n-                GlobalStatus globalStatus = globalSession.getStatus();\n-                switch (globalStatus) {\n-                    case UnKnown:\n-                    case Committed:\n-                    case CommitFailed:\n-                    case Rollbacked:\n-                    case RollbackFailed:\n-                    case TimeoutRollbacked:\n-                    case TimeoutRollbackFailed:\n-                    case Finished:\n-                        // Remove all sessions finished\n-                        iterator.remove();\n-                        break;\n-                    default:\n-                        break;\n-                }\n-            }\n+    private boolean checkSessionStatus(GlobalSession globalSession) {\n+        GlobalStatus globalStatus = globalSession.getStatus();\n+        switch (globalStatus) {\n+            case UnKnown:\n+            case Committed:\n+            case CommitFailed:\n+            case Rollbacked:\n+            case RollbackFailed:\n+            case TimeoutRollbacked:\n+            case TimeoutRollbackFailed:\n+            case Finished:\n+                return false;\n+            default:\n+                return true;\n         }\n     }\n \n-    private void restoreSessions(boolean isHistory, Map<Long, BranchSession> unhandledBranchBuffer) {\n+    private void restoreSessions(boolean isHistory, Set<String> removedGlobalBuffer, Map<String,\n+            Map<Long, BranchSession>> unhandledBranchBuffer) {\n         if (!(transactionStoreManager instanceof ReloadableStore)) {\n             return;\n         }\n         while (((ReloadableStore)transactionStoreManager).hasRemaining(isHistory)) {\n             List<TransactionWriteStore> stores = ((ReloadableStore)transactionStoreManager).readWriteStore(READ_SIZE,\n                 isHistory);\n-            restore(stores, unhandledBranchBuffer);\n+            restore(stores, removedGlobalBuffer, unhandledBranchBuffer);\n         }\n     }\n \n-    private void restore(List<TransactionWriteStore> stores, Map<Long, BranchSession> unhandledBranchSessions) {\n+    private void restore(List<TransactionWriteStore> stores, Set<String> removedGlobalBuffer,\n+                         Map<String, Map<Long, BranchSession>> unhandledBranchBuffer) {\n         for (TransactionWriteStore store : stores) {\n             TransactionStoreManager.LogOperation logOperation = store.getOperate();\n             SessionStorable sessionStorable = store.getSessionRequest();\n@@ -218,11 +218,25 @@ private void restore(List<TransactionWriteStore> stores, Map<Long, BranchSession\n                                 .getXid());\n                         break;\n                     }\n+                    if (removedGlobalBuffer.contains(globalSession.getXid())) {\n+                        break;\n+                    }\n                     GlobalSession foundGlobalSession = sessionMap.get(globalSession.getXid());\n                     if (foundGlobalSession == null) {\n-                        sessionMap.put(globalSession.getXid(), globalSession);\n+                        if (this.checkSessionStatus(globalSession)) {\n+                            sessionMap.put(globalSession.getXid(), globalSession);\n+                        } else {\n+                            removedGlobalBuffer.add(globalSession.getXid());\n+                            unhandledBranchBuffer.remove(globalSession.getXid());\n+                        }\n                     } else {\n-                        foundGlobalSession.setStatus(globalSession.getStatus());\n+                        if (this.checkSessionStatus(globalSession)) {\n+                            foundGlobalSession.setStatus(globalSession.getStatus());\n+                        } else {\n+                            sessionMap.remove(globalSession.getXid());\n+                            removedGlobalBuffer.add(globalSession.getXid());\n+                            unhandledBranchBuffer.remove(globalSession.getXid());\n+                        }\n                     }\n                     break;\n                 }\n@@ -234,11 +248,16 @@ private void restore(List<TransactionWriteStore> stores, Map<Long, BranchSession\n                                 .getXid());\n                         break;\n                     }\n+                    if (removedGlobalBuffer.contains(globalSession.getXid())) {\n+                        break;\n+                    }\n                     if (sessionMap.remove(globalSession.getXid()) == null) {\n                         if (LOGGER.isInfoEnabled()) {\n                             LOGGER.info(\"GlobalSession To Be Removed Does Not Exists [\" + globalSession.getXid() + \"]\");\n                         }\n                     }\n+                    removedGlobalBuffer.add(globalSession.getXid());\n+                    unhandledBranchBuffer.remove(globalSession.getXid());\n                     break;\n                 }\n                 case BRANCH_ADD:\n@@ -250,9 +269,13 @@ private void restore(List<TransactionWriteStore> stores, Map<Long, BranchSession\n                                 .getXid());\n                         break;\n                     }\n+                    if (removedGlobalBuffer.contains(branchSession.getXid())) {\n+                        break;\n+                    }\n                     GlobalSession foundGlobalSession = sessionMap.get(branchSession.getXid());\n                     if (foundGlobalSession == null) {\n-                        unhandledBranchSessions.put(branchSession.getBranchId(), branchSession);\n+                        unhandledBranchBuffer.computeIfAbsent(branchSession.getXid(), key -> new HashMap<>())\n+                                .put(branchSession.getBranchId(), branchSession);\n                     } else {\n                         BranchSession existingBranch = foundGlobalSession.getBranch(branchSession.getBranchId());\n                         if (existingBranch == null) {\n@@ -266,6 +289,9 @@ private void restore(List<TransactionWriteStore> stores, Map<Long, BranchSession\n                 case BRANCH_REMOVE: {\n                     BranchSession branchSession = (BranchSession)sessionStorable;\n                     String xid = branchSession.getXid();\n+                    if (removedGlobalBuffer.contains(xid)) {\n+                        break;\n+                    }\n                     long bid = branchSession.getBranchId();\n                     if (branchSession.getTransactionId() == 0) {\n                         LOGGER.error(\n@@ -292,10 +318,8 @@ private void restore(List<TransactionWriteStore> stores, Map<Long, BranchSession\n                     }\n                     break;\n                 }\n-\n                 default:\n                     throw new ShouldNeverHappenException(\"Unknown Operation: \" + logOperation);\n-\n             }\n         }\n ",
      "parent_sha": "274fcd08358741e8c291b9d325aa00b737af0917"
    }
  },
  {
    "oid": "a50f95913bb9ec20e32750d688cc7449f24d9269",
    "message": "issue #21 fix the magic number first",
    "date": "2019-01-14T07:23:40Z",
    "url": "https://github.com/apache/incubator-seata/commit/a50f95913bb9ec20e32750d688cc7449f24d9269",
    "details": {
      "sha": "8a01d9a76fd96d513ad2547179c90f476872adaf",
      "filename": "server/src/main/java/com/alibaba/fescar/server/UUIDGenerator.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apache/incubator-seata/blob/a50f95913bb9ec20e32750d688cc7449f24d9269/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2FUUIDGenerator.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/a50f95913bb9ec20e32750d688cc7449f24d9269/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2FUUIDGenerator.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2FUUIDGenerator.java?ref=a50f95913bb9ec20e32750d688cc7449f24d9269",
      "patch": "@@ -28,14 +28,14 @@ public class UUIDGenerator {\n \n     private static AtomicLong UUID = new AtomicLong(1000);\n \n-    private static int UUID_INTERNAL = 200000000;\n+    private static int UUID_INTERNAL = 2000000000;\n \n     public static long generateUUID() {\n         long id = UUID.incrementAndGet();\n-        if (id > 2000000000) {\n+        if (id > UUID_INTERNAL) {\n             synchronized (UUID) {\n                 if (UUID.get() >= id) {\n-                    id -= 2000000000;\n+                    id -= UUID_INTERNAL;\n                     UUID.set(id);\n                 }\n             }",
      "parent_sha": "15933089697094478b249aa8e859db172d3e9979"
    }
  },
  {
    "oid": "ab32beea03ecba83f3b3c95c45945bae52154535",
    "message": "bugfix: connectionproxy prepareStatement not in global transaction (#1805)",
    "date": "2019-10-23T07:10:42Z",
    "url": "https://github.com/apache/incubator-seata/commit/ab32beea03ecba83f3b3c95c45945bae52154535",
    "details": {
      "sha": "d1d568b326ecb18befd0c852fbf1cc4cd18a62b8",
      "filename": "rm-datasource/src/main/java/io/seata/rm/datasource/AbstractConnectionProxy.java",
      "status": "modified",
      "additions": 10,
      "deletions": 7,
      "changes": 17,
      "blob_url": "https://github.com/apache/incubator-seata/blob/ab32beea03ecba83f3b3c95c45945bae52154535/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2FAbstractConnectionProxy.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/ab32beea03ecba83f3b3c95c45945bae52154535/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2FAbstractConnectionProxy.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2FAbstractConnectionProxy.java?ref=ab32beea03ecba83f3b3c95c45945bae52154535",
      "patch": "@@ -106,13 +106,16 @@ public Statement createStatement() throws SQLException {\n     public PreparedStatement prepareStatement(String sql) throws SQLException {\n         String dbType = getDbType();\n         // support oracle 10.2+\n-        PreparedStatement targetPreparedStatement;\n-        SQLRecognizer sqlRecognizer = SQLVisitorFactory.get(sql, dbType);\n-        if (sqlRecognizer != null && sqlRecognizer.getSQLType() == SQLType.INSERT) {\n-            final String tableName = sqlRecognizer.getTableName();\n-            TableMeta tableMeta = TableMetaCacheFactory.getTableMetaCache(getDataSourceProxy()).getTableMeta(getDataSourceProxy(), tableName);\n-            targetPreparedStatement = getTargetConnection().prepareStatement(sql, new String[]{ tableMeta.getPkName() });\n-        } else {\n+        PreparedStatement targetPreparedStatement = null;\n+        if (RootContext.inGlobalTransaction()) {\n+            SQLRecognizer sqlRecognizer = SQLVisitorFactory.get(sql, dbType);\n+            if (sqlRecognizer != null && sqlRecognizer.getSQLType() == SQLType.INSERT) {\n+                final String tableName = sqlRecognizer.getTableName();\n+                TableMeta tableMeta = TableMetaCacheFactory.getTableMetaCache(getDataSourceProxy()).getTableMeta(getDataSourceProxy(), tableName);\n+                targetPreparedStatement = getTargetConnection().prepareStatement(sql, new String[]{tableMeta.getPkName()});\n+            }\n+        }\n+        if (targetPreparedStatement == null) {\n             targetPreparedStatement = getTargetConnection().prepareStatement(sql);\n         }\n         return new PreparedStatementProxy(this, targetPreparedStatement, sql);",
      "parent_sha": "00738ac1501f522f0f4f22fbd27160dc8e4163eb"
    }
  },
  {
    "oid": "e57b6ca043ba1b40d9fd184e03dd129baa03c471",
    "message": "perfect mysql keywords (#1414)",
    "date": "2019-08-07T02:33:50Z",
    "url": "https://github.com/apache/incubator-seata/commit/e57b6ca043ba1b40d9fd184e03dd129baa03c471",
    "details": {
      "sha": "1bef2e2c57ae0f2c094cf52966bdb5f5103eab52",
      "filename": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/keyword/MySQLKeywordChecker.java",
      "status": "modified",
      "additions": 816,
      "deletions": 232,
      "changes": 1048,
      "blob_url": "https://github.com/apache/incubator-seata/blob/e57b6ca043ba1b40d9fd184e03dd129baa03c471/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fundo%2Fmysql%2Fkeyword%2FMySQLKeywordChecker.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/e57b6ca043ba1b40d9fd184e03dd129baa03c471/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fundo%2Fmysql%2Fkeyword%2FMySQLKeywordChecker.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fundo%2Fmysql%2Fkeyword%2FMySQLKeywordChecker.java?ref=e57b6ca043ba1b40d9fd184e03dd129baa03c471",
      "patch": "@@ -56,473 +56,1057 @@ public static KeywordChecker getInstance() {\n      */\n     private enum MySQLKeyword {\n         /**\n-         * Select my sql keyword.\n+         * ACCESSIBLE is mysql keyword.\n          */\n-        SELECT(\"SELECT\"),\n+        ACCESSIBLE(\"ACCESSIBLE\"),\n         /**\n-         * Delete my sql keyword.\n+         * ADD is mysql keyword.\n          */\n-        DELETE(\"DELETE\"),\n+        ADD(\"ADD\"),\n         /**\n-         * Insert my sql keyword.\n+         * ALL is mysql keyword.\n          */\n-        INSERT(\"INSERT\"),\n+        ALL(\"ALL\"),\n         /**\n-         * Update my sql keyword.\n+         * ALTER is mysql keyword.\n          */\n-        UPDATE(\"UPDATE\"),\n-\n+        ALTER(\"ALTER\"),\n         /**\n-         * From my sql keyword.\n+         * ANALYZE is mysql keyword.\n          */\n-        FROM(\"FROM\"),\n+        ANALYZE(\"ANALYZE\"),\n         /**\n-         * Having my sql keyword.\n+         * AND is mysql keyword.\n          */\n-        HAVING(\"HAVING\"),\n+        AND(\"AND\"),\n         /**\n-         * Where my sql keyword.\n+         * ARRAY is mysql keyword.\n          */\n-        WHERE(\"WHERE\"),\n+        ARRAY(\"ARRAY\"),\n         /**\n-         * Order my sql keyword.\n+         * AS is mysql keyword.\n          */\n-        ORDER(\"ORDER\"),\n+        AS(\"AS\"),\n+        /**\n+         * ASC is mysql keyword.\n+         */\n+        ASC(\"ASC\"),\n+        /**\n+         * ASENSITIVE is mysql keyword.\n+         */\n+        ASENSITIVE(\"ASENSITIVE\"),\n+        /**\n+         * BEFORE is mysql keyword.\n+         */\n+        BEFORE(\"BEFORE\"),\n+        /**\n+         * BETWEEN is mysql keyword.\n+         */\n+        BETWEEN(\"BETWEEN\"),\n+        /**\n+         * BIGINT is mysql keyword.\n+         */\n+        BIGINT(\"BIGINT\"),\n+        /**\n+         * BINARY is mysql keyword.\n+         */\n+        BINARY(\"BINARY\"),\n+        /**\n+         * BLOB is mysql keyword.\n+         */\n+        BLOB(\"BLOB\"),\n         /**\n-         * By my sql keyword.\n+         * BOTH is mysql keyword.\n+         */\n+        BOTH(\"BOTH\"),\n+        /**\n+         * BY is mysql keyword.\n          */\n         BY(\"BY\"),\n         /**\n-         * Group my sql keyword.\n+         * CALL is mysql keyword.\n          */\n-        GROUP(\"GROUP\"),\n+        CALL(\"CALL\"),\n         /**\n-         * Into my sql keyword.\n+         * CASCADE is mysql keyword.\n          */\n-        INTO(\"INTO\"),\n+        CASCADE(\"CASCADE\"),\n         /**\n-         * As my sql keyword.\n+         * CASE is mysql keyword.\n          */\n-        AS(\"AS\"),\n-\n+        CASE(\"CASE\"),\n         /**\n-         * Create my sql keyword.\n+         * CHANGE is mysql keyword.\n          */\n-        CREATE(\"CREATE\"),\n+        CHANGE(\"CHANGE\"),\n         /**\n-         * Alter my sql keyword.\n+         * CHAR is mysql keyword.\n          */\n-        ALTER(\"ALTER\"),\n+        CHAR(\"CHAR\"),\n         /**\n-         * Drop my sql keyword.\n+         * CHARACTER is mysql keyword.\n          */\n-        DROP(\"DROP\"),\n+        CHARACTER(\"CHARACTER\"),\n         /**\n-         * Set my sql keyword.\n+         * CHECK is mysql keyword.\n          */\n-        SET(\"SET\"),\n-\n+        CHECK(\"CHECK\"),\n         /**\n-         * Null my sql keyword.\n+         * COLLATE is mysql keyword.\n          */\n-        NULL(\"NULL\"),\n+        COLLATE(\"COLLATE\"),\n         /**\n-         * Not my sql keyword.\n+         * COLUMN is mysql keyword.\n          */\n-        NOT(\"NOT\"),\n+        COLUMN(\"COLUMN\"),\n         /**\n-         * Distinct my sql keyword.\n+         * CONDITION is mysql keyword.\n          */\n-        DISTINCT(\"DISTINCT\"),\n-\n+        CONDITION(\"CONDITION\"),\n         /**\n-         * Table my sql keyword.\n+         * CONSTRAINT is mysql keyword.\n          */\n-        TABLE(\"TABLE\"),\n+        CONSTRAINT(\"CONSTRAINT\"),\n         /**\n-         * Tablespace my sql keyword.\n+         * CONTINUE is mysql keyword.\n          */\n-        TABLESPACE(\"TABLESPACE\"),\n+        CONTINUE(\"CONTINUE\"),\n         /**\n-         * View my sql keyword.\n+         * CONVERT is mysql keyword.\n          */\n-        VIEW(\"VIEW\"),\n+        CONVERT(\"CONVERT\"),\n         /**\n-         * Sequence my sql keyword.\n+         * CREATE is mysql keyword.\n          */\n-        SEQUENCE(\"SEQUENCE\"),\n+        CREATE(\"CREATE\"),\n         /**\n-         * Trigger my sql keyword.\n+         * CROSS is mysql keyword.\n          */\n-        TRIGGER(\"TRIGGER\"),\n+        CROSS(\"CROSS\"),\n         /**\n-         * User my sql keyword.\n+         * CUBE is mysql keyword.\n          */\n-        USER(\"USER\"),\n+        CUBE(\"CUBE\"),\n         /**\n-         * Index my sql keyword.\n+         * CUME_DIST is mysql keyword.\n          */\n-        INDEX(\"INDEX\"),\n+        CUME_DIST(\"CUME_DIST\"),\n         /**\n-         * Session my sql keyword.\n+         * CURRENT_DATE is mysql keyword.\n          */\n-        SESSION(\"SESSION\"),\n+        CURRENT_DATE(\"CURRENT_DATE\"),\n         /**\n-         * Procedure my sql keyword.\n+         * CURRENT_TIME is mysql keyword.\n          */\n-        PROCEDURE(\"PROCEDURE\"),\n+        CURRENT_TIME(\"CURRENT_TIME\"),\n         /**\n-         * Function my sql keyword.\n+         * CURRENT_TIMESTAMP is mysql keyword.\n          */\n-        FUNCTION(\"FUNCTION\"),\n-\n+        CURRENT_TIMESTAMP(\"CURRENT_TIMESTAMP\"),\n         /**\n-         * Primary my sql keyword.\n+         * CURRENT_USER is mysql keyword.\n          */\n-        PRIMARY(\"PRIMARY\"),\n+        CURRENT_USER(\"CURRENT_USER\"),\n         /**\n-         * Key my sql keyword.\n+         * CURSOR is mysql keyword.\n          */\n-        KEY(\"KEY\"),\n+        CURSOR(\"CURSOR\"),\n         /**\n-         * Default my sql keyword.\n+         * DATABASE is mysql keyword.\n+         */\n+        DATABASE(\"DATABASE\"),\n+        /**\n+         * DATABASES is mysql keyword.\n+         */\n+        DATABASES(\"DATABASES\"),\n+        /**\n+         * DAY_HOUR is mysql keyword.\n+         */\n+        DAY_HOUR(\"DAY_HOUR\"),\n+        /**\n+         * DAY_MICROSECOND is mysql keyword.\n+         */\n+        DAY_MICROSECOND(\"DAY_MICROSECOND\"),\n+        /**\n+         * DAY_MINUTE is mysql keyword.\n+         */\n+        DAY_MINUTE(\"DAY_MINUTE\"),\n+        /**\n+         * DAY_SECOND is mysql keyword.\n+         */\n+        DAY_SECOND(\"DAY_SECOND\"),\n+        /**\n+         * DEC is mysql keyword.\n+         */\n+        DEC(\"DEC\"),\n+        /**\n+         * DECIMAL is mysql keyword.\n+         */\n+        DECIMAL(\"DECIMAL\"),\n+        /**\n+         * DECLARE is mysql keyword.\n+         */\n+        DECLARE(\"DECLARE\"),\n+        /**\n+         * DEFAULT is mysql keyword.\n          */\n         DEFAULT(\"DEFAULT\"),\n         /**\n-         * Constraint my sql keyword.\n+         * DELAYED is mysql keyword.\n          */\n-        CONSTRAINT(\"CONSTRAINT\"),\n+        DELAYED(\"DELAYED\"),\n         /**\n-         * Check my sql keyword.\n+         * DELETE is mysql keyword.\n          */\n-        CHECK(\"CHECK\"),\n+        DELETE(\"DELETE\"),\n         /**\n-         * Unique my sql keyword.\n+         * DENSE_RANK is mysql keyword.\n          */\n-        UNIQUE(\"UNIQUE\"),\n+        DENSE_RANK(\"DENSE_RANK\"),\n         /**\n-         * Foreign my sql keyword.\n+         * DESC is mysql keyword.\n          */\n-        FOREIGN(\"FOREIGN\"),\n+        DESC(\"DESC\"),\n         /**\n-         * References my sql keyword.\n+         * DESCRIBE is mysql keyword.\n          */\n-        REFERENCES(\"REFERENCES\"),\n-\n+        DESCRIBE(\"DESCRIBE\"),\n         /**\n-         * Explain my sql keyword.\n+         * DETERMINISTIC is mysql keyword.\n          */\n-        EXPLAIN(\"EXPLAIN\"),\n+        DETERMINISTIC(\"DETERMINISTIC\"),\n         /**\n-         * For my sql keyword.\n+         * DISTINCT is mysql keyword.\n          */\n-        FOR(\"FOR\"),\n+        DISTINCT(\"DISTINCT\"),\n         /**\n-         * If my sql keyword.\n+         * DISTINCTROW is mysql keyword.\n          */\n-        IF(\"IF\"),\n+        DISTINCTROW(\"DISTINCTROW\"),\n         /**\n-         * Sort my sql keyword.\n+         * DIV is mysql keyword.\n          */\n-        SORT(\"SORT\"),\n-\n+        DIV(\"DIV\"),\n         /**\n-         * All my sql keyword.\n+         * DOUBLE is mysql keyword.\n          */\n-        ALL(\"ALL\"),\n+        DOUBLE(\"DOUBLE\"),\n         /**\n-         * Union my sql keyword.\n+         * DROP is mysql keyword.\n          */\n-        UNION(\"UNION\"),\n+        DROP(\"DROP\"),\n         /**\n-         * Except my sql keyword.\n+         * DUAL is mysql keyword.\n+         */\n+        DUAL(\"DUAL\"),\n+        /**\n+         * EACH is mysql keyword.\n+         */\n+        EACH(\"EACH\"),\n+        /**\n+         * ELSE is mysql keyword.\n+         */\n+        ELSE(\"ELSE\"),\n+        /**\n+         * ELSEIF is mysql keyword.\n+         */\n+        ELSEIF(\"ELSEIF\"),\n+        /**\n+         * EMPTY is mysql keyword.\n+         */\n+        EMPTY(\"EMPTY\"),\n+        /**\n+         * ENCLOSED is mysql keyword.\n+         */\n+        ENCLOSED(\"ENCLOSED\"),\n+        /**\n+         * ESCAPED is mysql keyword.\n+         */\n+        ESCAPED(\"ESCAPED\"),\n+        /**\n+         * EXCEPT is mysql keyword.\n          */\n         EXCEPT(\"EXCEPT\"),\n         /**\n-         * Intersect my sql keyword.\n+         * EXISTS is mysql keyword.\n          */\n-        INTERSECT(\"INTERSECT\"),\n+        EXISTS(\"EXISTS\"),\n         /**\n-         * Minus my sql keyword.\n+         * EXIT is mysql keyword.\n          */\n-        MINUS(\"MINUS\"),\n+        EXIT(\"EXIT\"),\n         /**\n-         * Inner my sql keyword.\n+         * EXPLAIN is mysql keyword.\n          */\n-        INNER(\"INNER\"),\n+        EXPLAIN(\"EXPLAIN\"),\n         /**\n-         * Left my sql keyword.\n+         * FALSE is mysql keyword.\n          */\n-        LEFT(\"LEFT\"),\n+        FALSE(\"FALSE\"),\n         /**\n-         * Right my sql keyword.\n+         * FETCH is mysql keyword.\n          */\n-        RIGHT(\"RIGHT\"),\n+        FETCH(\"FETCH\"),\n         /**\n-         * Full my sql keyword.\n+         * FIRST_VALUE is mysql keyword.\n          */\n-        FULL(\"FULL\"),\n+        FIRST_VALUE(\"FIRST_VALUE\"),\n         /**\n-         * Outer my sql keyword.\n+         * FLOAT is mysql keyword.\n          */\n-        OUTER(\"OUTER\"),\n+        FLOAT(\"FLOAT\"),\n         /**\n-         * Join my sql keyword.\n+         * FLOAT4 is mysql keyword.\n          */\n-        JOIN(\"JOIN\"),\n+        FLOAT4(\"FLOAT4\"),\n         /**\n-         * On my sql keyword.\n+         * FLOAT8 is mysql keyword.\n          */\n-        ON(\"ON\"),\n+        FLOAT8(\"FLOAT8\"),\n         /**\n-         * Schema my sql keyword.\n+         * FOR is mysql keyword.\n          */\n-        SCHEMA(\"SCHEMA\"),\n+        FOR(\"FOR\"),\n         /**\n-         * Cast my sql keyword.\n+         * FORCE is mysql keyword.\n          */\n-        CAST(\"CAST\"),\n+        FORCE(\"FORCE\"),\n         /**\n-         * Column my sql keyword.\n+         * FOREIGN is mysql keyword.\n          */\n-        COLUMN(\"COLUMN\"),\n+        FOREIGN(\"FOREIGN\"),\n         /**\n-         * Use my sql keyword.\n+         * FROM is mysql keyword.\n          */\n-        USE(\"USE\"),\n+        FROM(\"FROM\"),\n         /**\n-         * Database my sql keyword.\n+         * FULLTEXT is mysql keyword.\n          */\n-        DATABASE(\"DATABASE\"),\n+        FULLTEXT(\"FULLTEXT\"),\n         /**\n-         * To my sql keyword.\n+         * FUNCTION is mysql keyword.\n          */\n-        TO(\"TO\"),\n-\n+        FUNCTION(\"FUNCTION\"),\n         /**\n-         * And my sql keyword.\n+         * GENERATED is mysql keyword.\n          */\n-        AND(\"AND\"),\n+        GENERATED(\"GENERATED\"),\n         /**\n-         * Or my sql keyword.\n+         * GET is mysql keyword.\n          */\n-        OR(\"OR\"),\n+        GET(\"GET\"),\n         /**\n-         * Xor my sql keyword.\n+         * GRANT is mysql keyword.\n          */\n-        XOR(\"XOR\"),\n+        GRANT(\"GRANT\"),\n         /**\n-         * Case my sql keyword.\n+         * GROUP is mysql keyword.\n          */\n-        CASE(\"CASE\"),\n+        GROUP(\"GROUP\"),\n         /**\n-         * When my sql keyword.\n+         * GROUPING is mysql keyword.\n          */\n-        WHEN(\"WHEN\"),\n+        GROUPING(\"GROUPING\"),\n         /**\n-         * Then my sql keyword.\n+         * GROUPS is mysql keyword.\n          */\n-        THEN(\"THEN\"),\n+        GROUPS(\"GROUPS\"),\n         /**\n-         * Else my sql keyword.\n+         * HAVING is mysql keyword.\n          */\n-        ELSE(\"ELSE\"),\n+        HAVING(\"HAVING\"),\n         /**\n-         * Elsif my sql keyword.\n+         * HIGH_PRIORITY is mysql keyword.\n          */\n-        ELSIF(\"ELSIF\"),\n+        HIGH_PRIORITY(\"HIGH_PRIORITY\"),\n         /**\n-         * End my sql keyword.\n+         * HOUR_MICROSECOND is mysql keyword.\n          */\n-        END(\"END\"),\n+        HOUR_MICROSECOND(\"HOUR_MICROSECOND\"),\n         /**\n-         * Exists my sql keyword.\n+         * HOUR_MINUTE is mysql keyword.\n          */\n-        EXISTS(\"EXISTS\"),\n+        HOUR_MINUTE(\"HOUR_MINUTE\"),\n+        /**\n+         * HOUR_SECOND is mysql keyword.\n+         */\n+        HOUR_SECOND(\"HOUR_SECOND\"),\n         /**\n-         * In my sql keyword.\n+         * IF is mysql keyword.\n+         */\n+        IF(\"IF\"),\n+        /**\n+         * IGNORE is mysql keyword.\n+         */\n+        IGNORE(\"IGNORE\"),\n+        /**\n+         * IN is mysql keyword.\n          */\n         IN(\"IN\"),\n         /**\n-         * Contains my sql keyword.\n+         * INDEX is mysql keyword.\n          */\n-        CONTAINS(\"CONTAINS\"),\n+        INDEX(\"INDEX\"),\n         /**\n-         * Rlike my sql keyword.\n+         * INFILE is mysql keyword.\n          */\n-        RLIKE(\"RLIKE\"),\n+        INFILE(\"INFILE\"),\n         /**\n-         * Fulltext my sql keyword.\n+         * INNER is mysql keyword.\n          */\n-        FULLTEXT(\"FULLTEXT\"),\n-\n+        INNER(\"INNER\"),\n         /**\n-         * New my sql keyword.\n+         * INOUT is mysql keyword.\n          */\n-        NEW(\"NEW\"),\n+        INOUT(\"INOUT\"),\n         /**\n-         * Asc my sql keyword.\n+         * INSENSITIVE is mysql keyword.\n          */\n-        ASC(\"ASC\"),\n+        INSENSITIVE(\"INSENSITIVE\"),\n         /**\n-         * Desc my sql keyword.\n+         * INSERT is mysql keyword.\n          */\n-        DESC(\"DESC\"),\n+        INSERT(\"INSERT\"),\n+        /**\n+         * INT is mysql keyword.\n+         */\n+        INT(\"INT\"),\n         /**\n-         * Is my sql keyword.\n+         * INT1 is mysql keyword.\n+         */\n+        INT1(\"INT1\"),\n+        /**\n+         * INT2 is mysql keyword.\n+         */\n+        INT2(\"INT2\"),\n+        /**\n+         * INT3 is mysql keyword.\n+         */\n+        INT3(\"INT3\"),\n+        /**\n+         * INT4 is mysql keyword.\n+         */\n+        INT4(\"INT4\"),\n+        /**\n+         * INT8 is mysql keyword.\n+         */\n+        INT8(\"INT8\"),\n+        /**\n+         * INTEGER is mysql keyword.\n+         */\n+        INTEGER(\"INTEGER\"),\n+        /**\n+         * INTERVAL is mysql keyword.\n+         */\n+        INTERVAL(\"INTERVAL\"),\n+        /**\n+         * INTO is mysql keyword.\n+         */\n+        INTO(\"INTO\"),\n+        /**\n+         * IO_AFTER_GTIDS is mysql keyword.\n+         */\n+        IO_AFTER_GTIDS(\"IO_AFTER_GTIDS\"),\n+        /**\n+         * IO_BEFORE_GTIDS is mysql keyword.\n+         */\n+        IO_BEFORE_GTIDS(\"IO_BEFORE_GTIDS\"),\n+        /**\n+         * IS is mysql keyword.\n          */\n         IS(\"IS\"),\n         /**\n-         * Like my sql keyword.\n+         * ITERATE is mysql keyword.\n+         */\n+        ITERATE(\"ITERATE\"),\n+        /**\n+         * JOIN is mysql keyword.\n+         */\n+        JOIN(\"JOIN\"),\n+        /**\n+         * JSON_TABLE is mysql keyword.\n+         */\n+        JSON_TABLE(\"JSON_TABLE\"),\n+        /**\n+         * KEY is mysql keyword.\n+         */\n+        KEY(\"KEY\"),\n+        /**\n+         * KEYS is mysql keyword.\n+         */\n+        KEYS(\"KEYS\"),\n+        /**\n+         * KILL is mysql keyword.\n+         */\n+        KILL(\"KILL\"),\n+        /**\n+         * LAG is mysql keyword.\n+         */\n+        LAG(\"LAG\"),\n+        /**\n+         * LAST_VALUE is mysql keyword.\n+         */\n+        LAST_VALUE(\"LAST_VALUE\"),\n+        /**\n+         * LATERAL is mysql keyword.\n+         */\n+        LATERAL(\"LATERAL\"),\n+        /**\n+         * LEAD is mysql keyword.\n+         */\n+        LEAD(\"LEAD\"),\n+        /**\n+         * LEADING is mysql keyword.\n+         */\n+        LEADING(\"LEADING\"),\n+        /**\n+         * LEAVE is mysql keyword.\n+         */\n+        LEAVE(\"LEAVE\"),\n+        /**\n+         * LEFT is mysql keyword.\n+         */\n+        LEFT(\"LEFT\"),\n+        /**\n+         * LIKE is mysql keyword.\n          */\n         LIKE(\"LIKE\"),\n         /**\n-         * Escape my sql keyword.\n+         * LIMIT is mysql keyword.\n          */\n-        ESCAPE(\"ESCAPE\"),\n+        LIMIT(\"LIMIT\"),\n         /**\n-         * Between my sql keyword.\n+         * LINEAR is mysql keyword.\n          */\n-        BETWEEN(\"BETWEEN\"),\n+        LINEAR(\"LINEAR\"),\n         /**\n-         * Values my sql keyword.\n+         * LINES is mysql keyword.\n          */\n-        VALUES(\"VALUES\"),\n+        LINES(\"LINES\"),\n         /**\n-         * Interval my sql keyword.\n+         * LOAD is mysql keyword.\n          */\n-        INTERVAL(\"INTERVAL\"),\n-\n+        LOAD(\"LOAD\"),\n+        /**\n+         * LOCALTIME is mysql keyword.\n+         */\n+        LOCALTIME(\"LOCALTIME\"),\n         /**\n-         * Lock my sql keyword.\n+         * LOCALTIMESTAMP is mysql keyword.\n+         */\n+        LOCALTIMESTAMP(\"LOCALTIMESTAMP\"),\n+        /**\n+         * LOCK is mysql keyword.\n          */\n         LOCK(\"LOCK\"),\n         /**\n-         * Some my sql keyword.\n+         * LONG is mysql keyword.\n          */\n-        SOME(\"SOME\"),\n+        LONG(\"LONG\"),\n         /**\n-         * Any my sql keyword.\n+         * LONGBLOB is mysql keyword.\n          */\n-        ANY(\"ANY\"),\n+        LONGBLOB(\"LONGBLOB\"),\n         /**\n-         * Truncate my sql keyword.\n+         * LONGTEXT is mysql keyword.\n          */\n-        TRUNCATE(\"TRUNCATE\"),\n-\n+        LONGTEXT(\"LONGTEXT\"),\n+        /**\n+         * LOOP is mysql keyword.\n+         */\n+        LOOP(\"LOOP\"),\n+        /**\n+         * LOW_PRIORITY is mysql keyword.\n+         */\n+        LOW_PRIORITY(\"LOW_PRIORITY\"),\n+        /**\n+         * MASTER_BIND is mysql keyword.\n+         */\n+        MASTER_BIND(\"MASTER_BIND\"),\n+        /**\n+         * MASTER_SSL_VERIFY_SERVER_CERT is mysql keyword.\n+         */\n+        MASTER_SSL_VERIFY_SERVER_CERT(\"MASTER_SSL_VERIFY_SERVER_CERT\"),\n+        /**\n+         * MATCH is mysql keyword.\n+         */\n+        MATCH(\"MATCH\"),\n+        /**\n+         * MAXVALUE is mysql keyword.\n+         */\n+        MAXVALUE(\"MAXVALUE\"),\n+        /**\n+         * MEDIUMBLOB is mysql keyword.\n+         */\n+        MEDIUMBLOB(\"MEDIUMBLOB\"),\n+        /**\n+         * MEDIUMINT is mysql keyword.\n+         */\n+        MEDIUMINT(\"MEDIUMINT\"),\n+        /**\n+         * MEDIUMTEXT is mysql keyword.\n+         */\n+        MEDIUMTEXT(\"MEDIUMTEXT\"),\n+        /**\n+         * MEMBER is mysql keyword.\n+         */\n+        MEMBER(\"MEMBER\"),\n+        /**\n+         * MIDDLEINT is mysql keyword.\n+         */\n+        MIDDLEINT(\"MIDDLEINT\"),\n+        /**\n+         * MINUTE_MICROSECOND is mysql keyword.\n+         */\n+        MINUTE_MICROSECOND(\"MINUTE_MICROSECOND\"),\n+        /**\n+         * MINUTE_SECOND is mysql keyword.\n+         */\n+        MINUTE_SECOND(\"MINUTE_SECOND\"),\n+        /**\n+         * MOD is mysql keyword.\n+         */\n+        MOD(\"MOD\"),\n+        /**\n+         * MODIFIES is mysql keyword.\n+         */\n+        MODIFIES(\"MODIFIES\"),\n+        /**\n+         * NATURAL is mysql keyword.\n+         */\n+        NATURAL(\"NATURAL\"),\n+        /**\n+         * NOT is mysql keyword.\n+         */\n+        NOT(\"NOT\"),\n+        /**\n+         * NO_WRITE_TO_BINLOG is mysql keyword.\n+         */\n+        NO_WRITE_TO_BINLOG(\"NO_WRITE_TO_BINLOG\"),\n+        /**\n+         * NTH_VALUE is mysql keyword.\n+         */\n+        NTH_VALUE(\"NTH_VALUE\"),\n+        /**\n+         * NTILE is mysql keyword.\n+         */\n+        NTILE(\"NTILE\"),\n         /**\n-         * Return my sql keyword.\n+         * NULL is mysql keyword.\n+         */\n+        NULL(\"NULL\"),\n+        /**\n+         * NUMERIC is mysql keyword.\n+         */\n+        NUMERIC(\"NUMERIC\"),\n+        /**\n+         * OF is mysql keyword.\n+         */\n+        OF(\"OF\"),\n+        /**\n+         * ON is mysql keyword.\n+         */\n+        ON(\"ON\"),\n+        /**\n+         * OPTIMIZE is mysql keyword.\n+         */\n+        OPTIMIZE(\"OPTIMIZE\"),\n+        /**\n+         * OPTIMIZER_COSTS is mysql keyword.\n+         */\n+        OPTIMIZER_COSTS(\"OPTIMIZER_COSTS\"),\n+        /**\n+         * OPTION is mysql keyword.\n+         */\n+        OPTION(\"OPTION\"),\n+        /**\n+         * OPTIONALLY is mysql keyword.\n+         */\n+        OPTIONALLY(\"OPTIONALLY\"),\n+        /**\n+         * OR is mysql keyword.\n+         */\n+        OR(\"OR\"),\n+        /**\n+         * ORDER is mysql keyword.\n+         */\n+        ORDER(\"ORDER\"),\n+        /**\n+         * OUT is mysql keyword.\n+         */\n+        OUT(\"OUT\"),\n+        /**\n+         * OUTER is mysql keyword.\n+         */\n+        OUTER(\"OUTER\"),\n+        /**\n+         * OUTFILE is mysql keyword.\n+         */\n+        OUTFILE(\"OUTFILE\"),\n+        /**\n+         * OVER is mysql keyword.\n+         */\n+        OVER(\"OVER\"),\n+        /**\n+         * PARTITION is mysql keyword.\n+         */\n+        PARTITION(\"PARTITION\"),\n+        /**\n+         * PERCENT_RANK is mysql keyword.\n+         */\n+        PERCENT_RANK(\"PERCENT_RANK\"),\n+        /**\n+         * PRECISION is mysql keyword.\n+         */\n+        PRECISION(\"PRECISION\"),\n+        /**\n+         * PRIMARY is mysql keyword.\n+         */\n+        PRIMARY(\"PRIMARY\"),\n+        /**\n+         * PROCEDURE is mysql keyword.\n+         */\n+        PROCEDURE(\"PROCEDURE\"),\n+        /**\n+         * PURGE is mysql keyword.\n+         */\n+        PURGE(\"PURGE\"),\n+        /**\n+         * RANGE is mysql keyword.\n+         */\n+        RANGE(\"RANGE\"),\n+        /**\n+         * RANK is mysql keyword.\n+         */\n+        RANK(\"RANK\"),\n+        /**\n+         * READ is mysql keyword.\n+         */\n+        READ(\"READ\"),\n+        /**\n+         * READS is mysql keyword.\n+         */\n+        READS(\"READS\"),\n+        /**\n+         * READ_WRITE is mysql keyword.\n+         */\n+        READ_WRITE(\"READ_WRITE\"),\n+        /**\n+         * REAL is mysql keyword.\n+         */\n+        REAL(\"REAL\"),\n+        /**\n+         * RECURSIVE is mysql keyword.\n+         */\n+        RECURSIVE(\"RECURSIVE\"),\n+        /**\n+         * REFERENCES is mysql keyword.\n+         */\n+        REFERENCES(\"REFERENCES\"),\n+        /**\n+         * REGEXP is mysql keyword.\n+         */\n+        REGEXP(\"REGEXP\"),\n+        /**\n+         * RELEASE is mysql keyword.\n+         */\n+        RELEASE(\"RELEASE\"),\n+        /**\n+         * RENAME is mysql keyword.\n+         */\n+        RENAME(\"RENAME\"),\n+        /**\n+         * REPEAT is mysql keyword.\n+         */\n+        REPEAT(\"REPEAT\"),\n+        /**\n+         * REPLACE is mysql keyword.\n+         */\n+        REPLACE(\"REPLACE\"),\n+        /**\n+         * REQUIRE is mysql keyword.\n+         */\n+        REQUIRE(\"REQUIRE\"),\n+        /**\n+         * RESIGNAL is mysql keyword.\n+         */\n+        RESIGNAL(\"RESIGNAL\"),\n+        /**\n+         * RESTRICT is mysql keyword.\n+         */\n+        RESTRICT(\"RESTRICT\"),\n+        /**\n+         * RETURN is mysql keyword.\n          */\n         RETURN(\"RETURN\"),\n-\n         /**\n-         * True my sql keyword.\n+         * REVOKE is mysql keyword.\n          */\n-        // mysql\n-        TRUE(\"TRUE\"),\n+        REVOKE(\"REVOKE\"),\n         /**\n-         * False my sql keyword.\n+         * RIGHT is mysql keyword.\n          */\n-        FALSE(\"FALSE\"),\n+        RIGHT(\"RIGHT\"),\n         /**\n-         * Limit my sql keyword.\n+         * RLIKE is mysql keyword.\n          */\n-        LIMIT(\"LIMIT\"),\n+        RLIKE(\"RLIKE\"),\n         /**\n-         * Kill my sql keyword.\n+         * ROW is mysql keyword.\n          */\n-        KILL(\"KILL\"),\n+        ROW(\"ROW\"),\n+        /**\n+         * ROWS is mysql keyword.\n+         */\n+        ROWS(\"ROWS\"),\n         /**\n-         * Identified my sql keyword.\n+         * ROW_NUMBER is mysql keyword.\n          */\n-        IDENTIFIED(\"IDENTIFIED\"),\n+        ROW_NUMBER(\"ROW_NUMBER\"),\n         /**\n-         * Password my sql keyword.\n+         * SCHEMA is mysql keyword.\n          */\n-        PASSWORD(\"PASSWORD\"),\n+        SCHEMA(\"SCHEMA\"),\n         /**\n-         * Algorithm my sql keyword.\n+         * SCHEMAS is mysql keyword.\n          */\n-        ALGORITHM(\"ALGORITHM\"),\n+        SCHEMAS(\"SCHEMAS\"),\n         /**\n-         * Dual my sql keyword.\n+         * SECOND_MICROSECOND is mysql keyword.\n          */\n-        DUAL(\"DUAL\"),\n+        SECOND_MICROSECOND(\"SECOND_MICROSECOND\"),\n         /**\n-         * Binary my sql keyword.\n+         * SELECT is mysql keyword.\n          */\n-        BINARY(\"BINARY\"),\n+        SELECT(\"SELECT\"),\n+        /**\n+         * SENSITIVE is mysql keyword.\n+         */\n+        SENSITIVE(\"SENSITIVE\"),\n+        /**\n+         * SEPARATOR is mysql keyword.\n+         */\n+        SEPARATOR(\"SEPARATOR\"),\n+        /**\n+         * SET is mysql keyword.\n+         */\n+        SET(\"SET\"),\n         /**\n-         * Show my sql keyword.\n+         * SHOW is mysql keyword.\n          */\n         SHOW(\"SHOW\"),\n         /**\n-         * Replace my sql keyword.\n+         * SIGNAL is mysql keyword.\n          */\n-        REPLACE(\"REPLACE\"),\n-\n+        SIGNAL(\"SIGNAL\"),\n         /**\n-         * The While.\n+         * SMALLINT is mysql keyword.\n          */\n-        // MySql procedure add by zz\n-        WHILE(\"WHILE\"),\n+        SMALLINT(\"SMALLINT\"),\n         /**\n-         * Do my sql keyword.\n+         * SPATIAL is mysql keyword.\n          */\n-        DO(\"DO\"),\n+        SPATIAL(\"SPATIAL\"),\n         /**\n-         * Leave my sql keyword.\n+         * SPECIFIC is mysql keyword.\n          */\n-        LEAVE(\"LEAVE\"),\n+        SPECIFIC(\"SPECIFIC\"),\n         /**\n-         * Iterate my sql keyword.\n+         * SQL is mysql keyword.\n          */\n-        ITERATE(\"ITERATE\"),\n+        SQL(\"SQL\"),\n         /**\n-         * Repeat my sql keyword.\n+         * SQLEXCEPTION is mysql keyword.\n          */\n-        REPEAT(\"REPEAT\"),\n+        SQLEXCEPTION(\"SQLEXCEPTION\"),\n         /**\n-         * Until my sql keyword.\n+         * SQLSTATE is mysql keyword.\n          */\n-        UNTIL(\"UNTIL\"),\n+        SQLSTATE(\"SQLSTATE\"),\n         /**\n-         * Open my sql keyword.\n+         * SQLWARNING is mysql keyword.\n          */\n-        OPEN(\"OPEN\"),\n+        SQLWARNING(\"SQLWARNING\"),\n         /**\n-         * Close my sql keyword.\n+         * SQL_BIG_RESULT is mysql keyword.\n          */\n-        CLOSE(\"CLOSE\"),\n+        SQL_BIG_RESULT(\"SQL_BIG_RESULT\"),\n         /**\n-         * Out my sql keyword.\n+         * SQL_CALC_FOUND_ROWS is mysql keyword.\n          */\n-        OUT(\"OUT\"),\n+        SQL_CALC_FOUND_ROWS(\"SQL_CALC_FOUND_ROWS\"),\n         /**\n-         * Inout my sql keyword.\n+         * SQL_SMALL_RESULT is mysql keyword.\n          */\n-        INOUT(\"INOUT\"),\n+        SQL_SMALL_RESULT(\"SQL_SMALL_RESULT\"),\n         /**\n-         * Exit my sql keyword.\n+         * SSL is mysql keyword.\n          */\n-        EXIT(\"EXIT\"),\n+        SSL(\"SSL\"),\n+        /**\n+         * STARTING is mysql keyword.\n+         */\n+        STARTING(\"STARTING\"),\n+        /**\n+         * STORED is mysql keyword.\n+         */\n+        STORED(\"STORED\"),\n+        /**\n+         * STRAIGHT_JOIN is mysql keyword.\n+         */\n+        STRAIGHT_JOIN(\"STRAIGHT_JOIN\"),\n+        /**\n+         * SYSTEM is mysql keyword.\n+         */\n+        SYSTEM(\"SYSTEM\"),\n+        /**\n+         * TABLE is mysql keyword.\n+         */\n+        TABLE(\"TABLE\"),\n+        /**\n+         * TERMINATED is mysql keyword.\n+         */\n+        TERMINATED(\"TERMINATED\"),\n+        /**\n+         * THEN is mysql keyword.\n+         */\n+        THEN(\"THEN\"),\n+        /**\n+         * TINYBLOB is mysql keyword.\n+         */\n+        TINYBLOB(\"TINYBLOB\"),\n+        /**\n+         * TINYINT is mysql keyword.\n+         */\n+        TINYINT(\"TINYINT\"),\n+        /**\n+         * TINYTEXT is mysql keyword.\n+         */\n+        TINYTEXT(\"TINYTEXT\"),\n+        /**\n+         * TO is mysql keyword.\n+         */\n+        TO(\"TO\"),\n+        /**\n+         * TRAILING is mysql keyword.\n+         */\n+        TRAILING(\"TRAILING\"),\n+        /**\n+         * TRIGGER is mysql keyword.\n+         */\n+        TRIGGER(\"TRIGGER\"),\n+        /**\n+         * TRUE is mysql keyword.\n+         */\n+        TRUE(\"TRUE\"),\n         /**\n-         * Undo my sql keyword.\n+         * UNDO is mysql keyword.\n          */\n         UNDO(\"UNDO\"),\n         /**\n-         * Sqlstate my sql keyword.\n+         * UNION is mysql keyword.\n          */\n-        SQLSTATE(\"SQLSTATE\"),\n+        UNION(\"UNION\"),\n         /**\n-         * Condition my sql keyword.\n+         * UNIQUE is mysql keyword.\n          */\n-        CONDITION(\"CONDITION\"),\n+        UNIQUE(\"UNIQUE\"),\n         /**\n-         * Div my sql keyword.\n+         * UNLOCK is mysql keyword.\n          */\n-        DIV(\"DIV\");\n-\n+        UNLOCK(\"UNLOCK\"),\n+        /**\n+         * UNSIGNED is mysql keyword.\n+         */\n+        UNSIGNED(\"UNSIGNED\"),\n+        /**\n+         * UPDATE is mysql keyword.\n+         */\n+        UPDATE(\"UPDATE\"),\n+        /**\n+         * USAGE is mysql keyword.\n+         */\n+        USAGE(\"USAGE\"),\n+        /**\n+         * USE is mysql keyword.\n+         */\n+        USE(\"USE\"),\n+        /**\n+         * USING is mysql keyword.\n+         */\n+        USING(\"USING\"),\n+        /**\n+         * UTC_DATE is mysql keyword.\n+         */\n+        UTC_DATE(\"UTC_DATE\"),\n+        /**\n+         * UTC_TIME is mysql keyword.\n+         */\n+        UTC_TIME(\"UTC_TIME\"),\n+        /**\n+         * UTC_TIMESTAMP is mysql keyword.\n+         */\n+        UTC_TIMESTAMP(\"UTC_TIMESTAMP\"),\n+        /**\n+         * VALUES is mysql keyword.\n+         */\n+        VALUES(\"VALUES\"),\n+        /**\n+         * VARBINARY is mysql keyword.\n+         */\n+        VARBINARY(\"VARBINARY\"),\n+        /**\n+         * VARCHAR is mysql keyword.\n+         */\n+        VARCHAR(\"VARCHAR\"),\n+        /**\n+         * VARCHARACTER is mysql keyword.\n+         */\n+        VARCHARACTER(\"VARCHARACTER\"),\n+        /**\n+         * VARYING is mysql keyword.\n+         */\n+        VARYING(\"VARYING\"),\n+        /**\n+         * VIRTUAL is mysql keyword.\n+         */\n+        VIRTUAL(\"VIRTUAL\"),\n+        /**\n+         * WHEN is mysql keyword.\n+         */\n+        WHEN(\"WHEN\"),\n+        /**\n+         * WHERE is mysql keyword.\n+         */\n+        WHERE(\"WHERE\"),\n+        /**\n+         * WHILE is mysql keyword.\n+         */\n+        WHILE(\"WHILE\"),\n+        /**\n+         * WINDOW is mysql keyword.\n+         */\n+        WINDOW(\"WINDOW\"),\n+        /**\n+         * WITH is mysql keyword.\n+         */\n+        WITH(\"WITH\"),\n+        /**\n+         * WRITE is mysql keyword.\n+         */\n+        WRITE(\"WRITE\"),\n+        /**\n+         * XOR is mysql keyword.\n+         */\n+        XOR(\"XOR\"),\n+        /**\n+         * YEAR_MONTH is mysql keyword.\n+         */\n+        YEAR_MONTH(\"YEAR_MONTH\"),\n+        /**\n+         * ZEROFILL is mysql keyword.\n+         */\n+        ZEROFILL(\"ZEROFILL\");\n         /**\n          * The Name.\n          */",
      "parent_sha": "c14ba508cb7eb871ea5a0224dd704a1b0334ead0"
    }
  },
  {
    "oid": "07f5477f4624558d77c00dc3fe25f1a085571c1b",
    "message": "test:changing HashMap to LinkedHashMap for deterministic iterations (#1802)",
    "date": "2019-10-23T01:54:55Z",
    "url": "https://github.com/apache/incubator-seata/commit/07f5477f4624558d77c00dc3fe25f1a085571c1b",
    "details": {
      "sha": "a1f7de5f3a7bc7cb8f2259dd0dfe0be354f554d4",
      "filename": "common/src/test/java/io/seata/common/util/CollectionUtilsTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/incubator-seata/blob/07f5477f4624558d77c00dc3fe25f1a085571c1b/common%2Fsrc%2Ftest%2Fjava%2Fio%2Fseata%2Fcommon%2Futil%2FCollectionUtilsTest.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/07f5477f4624558d77c00dc3fe25f1a085571c1b/common%2Fsrc%2Ftest%2Fjava%2Fio%2Fseata%2Fcommon%2Futil%2FCollectionUtilsTest.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/common%2Fsrc%2Ftest%2Fjava%2Fio%2Fseata%2Fcommon%2Futil%2FCollectionUtilsTest.java?ref=07f5477f4624558d77c00dc3fe25f1a085571c1b",
      "patch": "@@ -17,7 +17,7 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n \n@@ -57,7 +57,7 @@ public void encodeMap() {\n         Map<String, String> map = null;\n         Assertions.assertNull(CollectionUtils.encodeMap(map));\n \n-        map = new HashMap<>();\n+        map = new LinkedHashMap<>();\n         Assertions.assertEquals(\"\", CollectionUtils.encodeMap(map));\n         map.put(\"x\", \"1\");\n         Assertions.assertEquals(\"x=1\", CollectionUtils.encodeMap(map));",
      "parent_sha": "0cad72eb425a38b2bff7a51244cd70d360e6d76b"
    }
  },
  {
    "oid": "1d2f23575d6300f5925fc5d663ab7902a6b8990c",
    "message": "bugfix: StateInstance log can't record output parameters (#1834)",
    "date": "2019-11-01T07:02:33Z",
    "url": "https://github.com/apache/incubator-seata/commit/1d2f23575d6300f5925fc5d663ab7902a6b8990c",
    "details": {
      "sha": "8b5ade382e17569b8b133409400a44e39157398d",
      "filename": "saga/seata-saga-engine/src/main/java/io/seata/saga/engine/pcext/handlers/ServiceTaskStateHandler.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/apache/incubator-seata/blob/1d2f23575d6300f5925fc5d663ab7902a6b8990c/saga%2Fseata-saga-engine%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fsaga%2Fengine%2Fpcext%2Fhandlers%2FServiceTaskStateHandler.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/1d2f23575d6300f5925fc5d663ab7902a6b8990c/saga%2Fseata-saga-engine%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fsaga%2Fengine%2Fpcext%2Fhandlers%2FServiceTaskStateHandler.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/saga%2Fseata-saga-engine%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fsaga%2Fengine%2Fpcext%2Fhandlers%2FServiceTaskStateHandler.java?ref=1d2f23575d6300f5925fc5d663ab7902a6b8990c",
      "patch": "@@ -103,8 +103,9 @@ public void process(ProcessContext context) throws EngineExecutionException {\n                     state.getName(), serviceName, methodName, result);\n             }\n \n-            if (result != null) {\n-                ((HierarchicalProcessContext) context).setVariableLocally(DomainConstants.VAR_NAME_OUTPUT_PARAMS, result);\n+            if(result != null){\n+                stateInstance.setOutputParams(result);\n+                ((HierarchicalProcessContext)context).setVariableLocally(DomainConstants.VAR_NAME_OUTPUT_PARAMS, result);\n             }\n \n         } catch (Exception e) {",
      "parent_sha": "54554b0bb0802a0db811984690d14c2bd0762691"
    }
  },
  {
    "oid": "a1252331ae76c743859b383843d2c2b3fe1f2f72",
    "message": "bugfix: when instances empty,CLUSTER_ADDRESS_MAP add empty set (#1273)",
    "date": "2019-07-11T07:42:23Z",
    "url": "https://github.com/apache/incubator-seata/commit/a1252331ae76c743859b383843d2c2b3fe1f2f72",
    "details": {
      "sha": "d125077fa3ae696f95a3a2603147a49578e87c91",
      "filename": "discovery/seata-discovery-redis/src/main/java/io/seata/discovery/registry/redis/RedisRegistryServiceImpl.java",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/apache/incubator-seata/blob/a1252331ae76c743859b383843d2c2b3fe1f2f72/discovery%2Fseata-discovery-redis%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fdiscovery%2Fregistry%2Fredis%2FRedisRegistryServiceImpl.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/a1252331ae76c743859b383843d2c2b3fe1f2f72/discovery%2Fseata-discovery-redis%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fdiscovery%2Fregistry%2Fredis%2FRedisRegistryServiceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/discovery%2Fseata-discovery-redis%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fdiscovery%2Fregistry%2Fredis%2FRedisRegistryServiceImpl.java?ref=a1252331ae76c743859b383843d2c2b3fe1f2f72",
      "patch": "@@ -33,7 +33,6 @@\n import io.seata.common.util.StringUtils;\n import io.seata.config.Configuration;\n import io.seata.config.ConfigurationFactory;\n-\n import io.seata.discovery.registry.RegistryService;\n import org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n import org.slf4j.Logger;\n@@ -96,7 +95,7 @@ private RedisRegistryServiceImpl() {\n             redisConfig.setMaxTotal(maxTotal);\n         }\n         int maxWait = seataConfig.getInt(REDIS_FILEKEY_PREFIX + \"max.wait\",\n-                seataConfig.getInt(REDIS_FILEKEY_PREFIX + \"timeout\", 0));\n+            seataConfig.getInt(REDIS_FILEKEY_PREFIX + \"timeout\", 0));\n         if (maxWait > 0) {\n             redisConfig.setMaxWaitMillis(maxWait);\n         }\n@@ -204,13 +203,13 @@ public List<InetSocketAddress> lookup(String key) {\n             } finally {\n                 jedis.close();\n             }\n-            if (null != instances) {\n-                Set<InetSocketAddress> newAddressList = new HashSet<>();\n+            if (null != instances && !instances.isEmpty()) {\n+                Set<InetSocketAddress> newAddressSet = new HashSet<>();\n                 for (Map.Entry<String, String> instance : instances.entrySet()) {\n                     String serverAddr = instance.getKey();\n-                    newAddressList.add(NetUtil.toInetSocketAddress(serverAddr));\n+                    newAddressSet.add(NetUtil.toInetSocketAddress(serverAddr));\n                 }\n-                CLUSTER_ADDRESS_MAP.put(clusterName, newAddressList);\n+                CLUSTER_ADDRESS_MAP.put(clusterName, newAddressSet);\n             }\n             subscribe(clusterName, new RedisListener() {\n                 @Override\n@@ -226,7 +225,7 @@ public void onEvent(String msg) {\n                             CLUSTER_ADDRESS_MAP.get(clusterName).remove(NetUtil.toInetSocketAddress(serverAddr));\n                             break;\n                         default:\n-                            throw new ShouldNeverHappenException(\"unknow redis msg:\" + msg);\n+                            throw new ShouldNeverHappenException(\"unknown redis msg:\" + msg);\n                     }\n                 }\n             });",
      "parent_sha": "b298a7ce1b7da92ecc3a8514548fbfe426226f38"
    }
  },
  {
    "oid": "5afa229dd436aa744ad3777dff871f7279101c2c",
    "message": "add a missing placeholder in INSERT_UNDO_LOG_SQL (#1165)",
    "date": "2019-06-04T11:58:39Z",
    "url": "https://github.com/apache/incubator-seata/commit/5afa229dd436aa744ad3777dff871f7279101c2c",
    "details": {
      "sha": "fbed9c1dca60e7d235756efcf0bdcfddf87c0ffd",
      "filename": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/UndoLogManager.java",
      "status": "modified",
      "additions": 33,
      "deletions": 31,
      "changes": 64,
      "blob_url": "https://github.com/apache/incubator-seata/blob/5afa229dd436aa744ad3777dff871f7279101c2c/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fundo%2FUndoLogManager.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/5afa229dd436aa744ad3777dff871f7279101c2c/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fundo%2FUndoLogManager.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fundo%2FUndoLogManager.java?ref=5afa229dd436aa744ad3777dff871f7279101c2c",
      "patch": "@@ -15,7 +15,18 @@\n  */\n package io.seata.rm.datasource.undo;\n \n+import java.sql.Blob;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.SQLIntegrityConstraintViolationException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n import com.alibaba.druid.util.JdbcConstants;\n+\n import io.seata.common.Constants;\n import io.seata.common.exception.NotSupportYetException;\n import io.seata.common.util.BlobUtils;\n@@ -29,16 +40,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.sql.Blob;\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.sql.SQLIntegrityConstraintViolationException;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Set;\n-\n import static io.seata.core.exception.TransactionExceptionCode.BranchRollbackFailed_Retriable;\n \n /**\n@@ -76,14 +77,14 @@ public int getValue() {\n     private static String UNDO_LOG_TABLE_NAME = \"undo_log\";\n \n     private static String INSERT_UNDO_LOG_SQL = \"INSERT INTO \" + UNDO_LOG_TABLE_NAME +\n-            \" (branch_id, xid, context, rollback_info, log_status, log_created, log_modified)\" +\n-            \" VALUES (?, ?, ?, ?, now(), now())\";\n+        \" (branch_id, xid, context, rollback_info, log_status, log_created, log_modified)\" +\n+        \" VALUES (?, ?, ?, ?, ?, now(), now())\";\n \n     private static String DELETE_UNDO_LOG_SQL = \"DELETE FROM \" + UNDO_LOG_TABLE_NAME +\n-            \" WHERE branch_id = ? AND xid = ?\";\n+        \" WHERE branch_id = ? AND xid = ?\";\n \n     private static String SELECT_UNDO_LOG_SQL = \"SELECT * FROM \" + UNDO_LOG_TABLE_NAME +\n-            \" WHERE branch_id = ? AND xid = ? FOR UPDATE\";\n+        \" WHERE branch_id = ? AND xid = ? FOR UPDATE\";\n \n     private UndoLogManager() {\n \n@@ -106,15 +107,16 @@ public static void flushUndoLogs(ConnectionProxy cp) throws SQLException {\n         branchUndoLog.setXid(xid);\n         branchUndoLog.setBranchId(branchID);\n         branchUndoLog.setSqlUndoLogs(connectionContext.getUndoItems());\n-        \n+\n         UndoLogParser parser = UndoLogParserFactory.getInstance();\n         byte[] undoLogContent = parser.encode(branchUndoLog);\n \n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Flushing UNDO LOG: {}\", new String(undoLogContent, Constants.DEFAULT_CHARSET));\n         }\n \n-        insertUndoLogWithNormal(xid, branchID, buildContext(parser.getName()), undoLogContent, cp.getTargetConnection());\n+        insertUndoLogWithNormal(xid, branchID, buildContext(parser.getName()), undoLogContent,\n+            cp.getTargetConnection());\n     }\n \n     private static void assertDbSupport(String dbType) {\n@@ -162,7 +164,7 @@ public static void undo(DataSourceProxy dataSourceProxy, String xid, long branch\n                     if (!canUndo(state)) {\n                         if (LOGGER.isInfoEnabled()) {\n                             LOGGER.info(\"xid {} branch {}, ignore {} undo_log\",\n-                                    xid, branchId, state);\n+                                xid, branchId, state);\n                         }\n                         return;\n                     }\n@@ -174,7 +176,7 @@ public static void undo(DataSourceProxy dataSourceProxy, String xid, long branch\n \n                     String serializer = context == null ? null : context.get(UndoLogConstants.SERIALIZER_KEY);\n                     UndoLogParser parser = serializer == null ? UndoLogParserFactory.getInstance() :\n-                            UndoLogParserFactory.getInstance(serializer);\n+                        UndoLogParserFactory.getInstance(serializer);\n                     BranchUndoLog branchUndoLog = parser.decode(rollbackInfo);\n \n                     for (SQLUndoLog sqlUndoLog : branchUndoLog.getSqlUndoLogs()) {\n@@ -201,14 +203,14 @@ public static void undo(DataSourceProxy dataSourceProxy, String xid, long branch\n                     conn.commit();\n                     if (LOGGER.isInfoEnabled()) {\n                         LOGGER.info(\"xid {} branch {}, undo_log deleted with {}\",\n-                                xid, branchId, State.GlobalFinished.name());\n+                            xid, branchId, State.GlobalFinished.name());\n                     }\n                 } else {\n                     insertUndoLogWithGlobalFinished(xid, branchId, UndoLogParserFactory.getInstance(), conn);\n                     conn.commit();\n                     if (LOGGER.isInfoEnabled()) {\n                         LOGGER.info(\"xid {} branch {}, undo_log added with {}\",\n-                                xid, branchId, State.GlobalFinished.name());\n+                            xid, branchId, State.GlobalFinished.name());\n                     }\n                 }\n \n@@ -217,7 +219,7 @@ public static void undo(DataSourceProxy dataSourceProxy, String xid, long branch\n                 // Possible undo_log has been inserted into the database by other processes, retrying rollback undo_log\n                 if (LOGGER.isInfoEnabled()) {\n                     LOGGER.info(\"xid {} branch {}, undo_log inserted, retry rollback\",\n-                            xid, branchId);\n+                        xid, branchId);\n                 }\n             } catch (Throwable e) {\n                 if (conn != null) {\n@@ -277,7 +279,7 @@ public static void batchDeleteUndoLog(Set<String> xids, Set<Long> branchIds, Con\n             if (!(e instanceof SQLException)) {\n                 e = new SQLException(e);\n             }\n-            throw (SQLException) e;\n+            throw (SQLException)e;\n         } finally {\n             if (deletePST != null) {\n                 deletePST.close();\n@@ -289,8 +291,8 @@ public static void batchDeleteUndoLog(Set<String> xids, Set<Long> branchIds, Con\n     protected static String toBatchDeleteUndoLogSql(int xidSize, int branchIdSize) {\n         StringBuilder sqlBuilder = new StringBuilder(64);\n         sqlBuilder.append(\"DELETE FROM \")\n-                .append(UNDO_LOG_TABLE_NAME)\n-                .append(\" WHERE  branch_id IN \");\n+            .append(UNDO_LOG_TABLE_NAME)\n+            .append(\" WHERE  branch_id IN \");\n         appendInParam(branchIdSize, sqlBuilder);\n         sqlBuilder.append(\" AND xid IN \");\n         appendInParam(xidSize, sqlBuilder);\n@@ -327,7 +329,7 @@ public static void deleteUndoLog(String xid, long branchId, Connection conn) thr\n             if (!(e instanceof SQLException)) {\n                 e = new SQLException(e);\n             }\n-            throw (SQLException) e;\n+            throw (SQLException)e;\n         } finally {\n             if (deletePST != null) {\n                 deletePST.close();\n@@ -336,18 +338,18 @@ public static void deleteUndoLog(String xid, long branchId, Connection conn) thr\n     }\n \n     private static void insertUndoLogWithNormal(String xid, long branchID, String rollbackCtx,\n-                                                byte[] undoLogContent, Connection conn) throws SQLException {\n+        byte[] undoLogContent, Connection conn) throws SQLException {\n         insertUndoLog(xid, branchID, rollbackCtx, undoLogContent, State.Normal, conn);\n     }\n \n     private static void insertUndoLogWithGlobalFinished(String xid, long branchID, UndoLogParser parser,\n-                                                        Connection conn) throws SQLException {\n-        insertUndoLog(xid, branchID, buildContext(parser.getName()), \n-                parser.getDefaultContent(), State.GlobalFinished, conn);\n+        Connection conn) throws SQLException {\n+        insertUndoLog(xid, branchID, buildContext(parser.getName()),\n+            parser.getDefaultContent(), State.GlobalFinished, conn);\n     }\n \n     private static void insertUndoLog(String xid, long branchID, String rollbackCtx,\n-                                      byte[] undoLogContent, State state, Connection conn) throws SQLException {\n+        byte[] undoLogContent, State state, Connection conn) throws SQLException {\n         PreparedStatement pst = null;\n         try {\n             pst = conn.prepareStatement(INSERT_UNDO_LOG_SQL);\n@@ -361,7 +363,7 @@ private static void insertUndoLog(String xid, long branchID, String rollbackCtx,\n             if (!(e instanceof SQLException)) {\n                 e = new SQLException(e);\n             }\n-            throw (SQLException) e;\n+            throw (SQLException)e;\n         } finally {\n             if (pst != null) {\n                 pst.close();",
      "parent_sha": "1f4077752709dec81f4edce61582c298fd392917"
    }
  },
  {
    "oid": "c81614be70f1e0285afbea020a98a746a94813c9",
    "message": "bugfix: ApplicationKeeper ShutdownHook signal invalid. (#2543)",
    "date": "2020-04-23T01:42:26Z",
    "url": "https://github.com/apache/incubator-seata/commit/c81614be70f1e0285afbea020a98a746a94813c9",
    "details": {
      "sha": "63fc11beebb3b05e23e445fa624de5bcd7e0036f",
      "filename": "test/src/test/java/io/seata/common/ApplicationKeeper.java",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/apache/incubator-seata/blob/c81614be70f1e0285afbea020a98a746a94813c9/test%2Fsrc%2Ftest%2Fjava%2Fio%2Fseata%2Fcommon%2FApplicationKeeper.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/c81614be70f1e0285afbea020a98a746a94813c9/test%2Fsrc%2Ftest%2Fjava%2Fio%2Fseata%2Fcommon%2FApplicationKeeper.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/test%2Fsrc%2Ftest%2Fjava%2Fio%2Fseata%2Fcommon%2FApplicationKeeper.java?ref=c81614be70f1e0285afbea020a98a746a94813c9",
      "patch": "@@ -68,13 +68,14 @@ public void run() {\n      * Keep.\n      */\n     public void keep() {\n-        synchronized (LOCK) {\n-            try {\n-                LOGGER.info(\"Application is keep running ... \");\n-                LOCK.wait();\n-            } catch (InterruptedException e) {\n-                LOGGER.error(\"interrupted error\", e);\n-            }\n+        LOCK.lock();\n+        try {\n+            LOGGER.info(\"Application is keep running ... \");\n+            STOP.await();\n+        } catch (InterruptedException e) {\n+            LOGGER.error(\"interrupted error \", e);\n+        } finally {\n+            LOCK.unlock();\n         }\n     }\n }",
      "parent_sha": "54d37ee2b1a220b3bf068fac37993b23f4369fa5"
    }
  },
  {
    "oid": "49f1b5d8e6d739a40417896a13774135b94f09d8",
    "message": "bugfix: fix batch sql getTableMeta error (#3242)",
    "date": "2020-10-30T03:12:26Z",
    "url": "https://github.com/apache/incubator-seata/commit/49f1b5d8e6d739a40417896a13774135b94f09d8",
    "details": {
      "sha": "6e57b5a3c7933029d352fd741936a8cc751f3117",
      "filename": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/AbstractDMLBaseExecutor.java",
      "status": "modified",
      "additions": 30,
      "deletions": 1,
      "changes": 31,
      "blob_url": "https://github.com/apache/incubator-seata/blob/49f1b5d8e6d739a40417896a13774135b94f09d8/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fexec%2FAbstractDMLBaseExecutor.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/49f1b5d8e6d739a40417896a13774135b94f09d8/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fexec%2FAbstractDMLBaseExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fexec%2FAbstractDMLBaseExecutor.java?ref=49f1b5d8e6d739a40417896a13774135b94f09d8",
      "patch": "@@ -17,10 +17,17 @@\n \n import java.sql.SQLException;\n import java.sql.Statement;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import java.util.concurrent.Callable;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n import io.seata.common.exception.NotSupportYetException;\n import io.seata.common.exception.ShouldNeverHappenException;\n+import io.seata.common.util.CollectionUtils;\n import io.seata.rm.datasource.AbstractConnectionProxy;\n import io.seata.rm.datasource.ConnectionContext;\n import io.seata.rm.datasource.ConnectionProxy;\n@@ -88,7 +95,7 @@ public T doExecute(Object... args) throws Throwable {\n      * @throws Exception the exception\n      */\n     protected T executeAutoCommitFalse(Object[] args) throws Exception {\n-        if (!JdbcConstants.MYSQL.equalsIgnoreCase(getDbType()) && getTableMeta().getPrimaryKeyOnlyName().size() > 1) {\n+        if (!JdbcConstants.MYSQL.equalsIgnoreCase(getDbType()) && isMultiPk()) {\n             throw new NotSupportYetException(\"multi pk only support mysql!\");\n         }\n         TableRecords beforeImage = beforeImage();\n@@ -98,6 +105,28 @@ protected T executeAutoCommitFalse(Object[] args) throws Exception {\n         return result;\n     }\n \n+    private boolean isMultiPk() {\n+        if (null != sqlRecognizer) {\n+            return getTableMeta().getPrimaryKeyOnlyName().size() > 1;\n+        }\n+        if (CollectionUtils.isNotEmpty(sqlRecognizers)) {\n+            List<SQLRecognizer> distinctSQLRecognizer = sqlRecognizers.stream().filter(\n+                distinctByKey(t -> t.getTableName())).collect(Collectors.toList());\n+            for (SQLRecognizer sqlRecognizer : distinctSQLRecognizer) {\n+                if (getTableMeta(sqlRecognizer.getTableName()).getPrimaryKeyOnlyName().size() > 1) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static <T> Predicate<T> distinctByKey(Function<? super T, ?> keyExtractor) {\n+        Map<Object, Boolean> map = new HashMap<>();\n+        return t -> map.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;\n+    }\n+\n+\n     /**\n      * Execute auto commit true t.\n      *",
      "parent_sha": "e0001bbd859602b7110b084b62e09162b5f49db7"
    }
  },
  {
    "oid": "945b899a5205db46c44fb913041f4a3d1d3ddcf4",
    "message": "bugfix: fix rpc tm request timeout (#4199)",
    "date": "2021-12-13T12:41:21Z",
    "url": "https://github.com/apache/incubator-seata/commit/945b899a5205db46c44fb913041f4a3d1d3ddcf4",
    "details": {
      "sha": "2f43dd282eb8be8f12e7ff49706844039b0b04a9",
      "filename": "core/src/main/java/io/seata/core/rpc/netty/TmNettyRemotingClient.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/945b899a5205db46c44fb913041f4a3d1d3ddcf4/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FTmNettyRemotingClient.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/945b899a5205db46c44fb913041f4a3d1d3ddcf4/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FTmNettyRemotingClient.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FTmNettyRemotingClient.java?ref=945b899a5205db46c44fb913041f4a3d1d3ddcf4",
      "patch": "@@ -197,7 +197,7 @@ public boolean isEnableClientBatchSendRequest() {\n \n     @Override\n     public long getRpcRequestTimeout() {\n-        return NettyClientConfig.getRpcRmRequestTimeout();\n+        return NettyClientConfig.getRpcTmRequestTimeout();\n     }\n \n     @Override",
      "parent_sha": "4e2b199691e378be8e76990f9bb688ba53cf6d4b"
    }
  },
  {
    "oid": "abe196f9b9329a56f479d43a451c130a6d643576",
    "message": "optimize: remove duplicated word (#4482)",
    "date": "2022-04-03T15:40:22Z",
    "url": "https://github.com/apache/incubator-seata/commit/abe196f9b9329a56f479d43a451c130a6d643576",
    "details": {
      "sha": "b2c7a274399331918560c4e2a38e73ff71728473",
      "filename": "common/src/main/java/io/seata/common/util/CollectionUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/abe196f9b9329a56f479d43a451c130a6d643576/common%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcommon%2Futil%2FCollectionUtils.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/abe196f9b9329a56f479d43a451c130a6d643576/common%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcommon%2Futil%2FCollectionUtils.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/common%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcommon%2Futil%2FCollectionUtils.java?ref=abe196f9b9329a56f479d43a451c130a6d643576",
      "patch": "@@ -280,7 +280,7 @@ public static <K, V> V computeIfAbsent(Map<K, V> map, K key, Function<? super K,\n     }\n \n     /**\n-     * To upper list list.\n+     * To upper list.\n      *\n      * @param sourceList the source list\n      * @return the list",
      "parent_sha": "70b31d7a7eede9862c215973cc7af2f5bf551a30"
    }
  },
  {
    "oid": "7979580b15c86f38f58a3ee8f76adf4831a07ee7",
    "message": "prioritize global transaction scanner #1227 (#1230)",
    "date": "2019-06-25T02:57:55Z",
    "url": "https://github.com/apache/incubator-seata/commit/7979580b15c86f38f58a3ee8f76adf4831a07ee7",
    "details": {
      "sha": "703946b0bf716426ed6c7bbdd83001b2480e9f0d",
      "filename": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/apache/incubator-seata/blob/7979580b15c86f38f58a3ee8f76adf4831a07ee7/spring%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fspring%2Fannotation%2FGlobalTransactionScanner.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/7979580b15c86f38f58a3ee8f76adf4831a07ee7/spring%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fspring%2Fannotation%2FGlobalTransactionScanner.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/spring%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fspring%2Fannotation%2FGlobalTransactionScanner.java?ref=7979580b15c86f38f58a3ee8f76adf4831a07ee7",
      "patch": "@@ -42,9 +42,12 @@\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.DisposableBean;\n import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.config.BeanFactoryPostProcessor;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ApplicationContextAware;\n import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.core.PriorityOrdered;\n \n /**\n  * The type Global transaction scanner.\n@@ -54,7 +57,7 @@\n  */\n public class GlobalTransactionScanner extends AbstractAutoProxyCreator\n     implements InitializingBean, ApplicationContextAware,\n-    DisposableBean {\n+    DisposableBean, BeanFactoryPostProcessor, PriorityOrdered {\n \n     /**\n      *\n@@ -297,4 +300,13 @@ public void setApplicationContext(ApplicationContext applicationContext) throws\n         this.setBeanFactory(applicationContext);\n     }\n \n+    @Override\n+    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n+        //do nothing\n+    }\n+\n+    @Override\n+    public int getOrder() {\n+        return HIGHEST_PRECEDENCE;\n+    }\n }",
      "parent_sha": "e9c06366615f80a2471d32fa5db76bf62208a76b"
    }
  },
  {
    "oid": "26910a304ebbb9d287732266c253c0fe7c7fdf25",
    "message": "optimize: optimize release savepoint when use oracle (#3523)",
    "date": "2021-02-20T10:01:10Z",
    "url": "https://github.com/apache/incubator-seata/commit/26910a304ebbb9d287732266c253c0fe7c7fdf25",
    "details": {
      "sha": "bb2fe26176b18f171cacb5223971b2c6d2a3722d",
      "filename": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/SelectForUpdateExecutor.java",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/apache/incubator-seata/blob/26910a304ebbb9d287732266c253c0fe7c7fdf25/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fexec%2FSelectForUpdateExecutor.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/26910a304ebbb9d287732266c253c0fe7c7fdf25/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fexec%2FSelectForUpdateExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fexec%2FSelectForUpdateExecutor.java?ref=26910a304ebbb9d287732266c253c0fe7c7fdf25",
      "patch": "@@ -17,18 +17,19 @@\n \n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n+import java.sql.SQLException;\n import java.sql.Savepoint;\n import java.sql.Statement;\n-import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.List;\n \n import io.seata.common.util.StringUtils;\n import io.seata.core.context.RootContext;\n import io.seata.rm.datasource.StatementProxy;\n+import io.seata.rm.datasource.sql.struct.TableRecords;\n import io.seata.sqlparser.SQLRecognizer;\n import io.seata.sqlparser.SQLSelectRecognizer;\n-import io.seata.rm.datasource.sql.struct.TableRecords;\n+import io.seata.sqlparser.util.JdbcConstants;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -117,11 +118,11 @@ public T doExecute(Object... args) throws Throwable {\n         } finally {\n             if (sp != null) {\n                 try {\n-                    conn.releaseSavepoint(sp);\n-                } catch (SQLException e) {\n-                    if (LOGGER.isWarnEnabled()) {\n-                        LOGGER.warn(\"{} does not support release save point, but this is not a error.\", getDbType());\n+                    if (!JdbcConstants.ORACLE.equalsIgnoreCase(getDbType())) {\n+                        conn.releaseSavepoint(sp);\n                     }\n+                } catch (SQLException e) {\n+                    LOGGER.error(\"{} release save point error.\", getDbType(), e);\n                 }\n             }\n             if (originalAutoCommit) {",
      "parent_sha": "546d342a44aa69ef10409ade13adb91af1274dfe"
    }
  },
  {
    "oid": "abda837ff86c2750367dee92a04dc1a4d13f9027",
    "message": "optimize: invalid string concat (#3849)",
    "date": "2021-07-02T06:28:28Z",
    "url": "https://github.com/apache/incubator-seata/commit/abda837ff86c2750367dee92a04dc1a4d13f9027",
    "details": {
      "sha": "b52b037694dbf2763607bb24130346897ff7de8a",
      "filename": "core/src/main/java/io/seata/core/rpc/netty/AbstractNettyRemotingServer.java",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/apache/incubator-seata/blob/abda837ff86c2750367dee92a04dc1a4d13f9027/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FAbstractNettyRemotingServer.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/abda837ff86c2750367dee92a04dc1a4d13f9027/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FAbstractNettyRemotingServer.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FAbstractNettyRemotingServer.java?ref=abda837ff86c2750367dee92a04dc1a4d13f9027",
      "patch": "@@ -138,11 +138,12 @@ public void destroy() {\n     /**\n      * Debug log.\n      *\n-     * @param info the info\n+     * @param format the info\n+     * @param arguments the arguments\n      */\n-    public void debugLog(String info) {\n+    protected void debugLog(String format, Object... arguments) {\n         if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(info);\n+            LOGGER.debug(format, arguments);\n         }\n     }\n \n@@ -193,7 +194,7 @@ public void channelWritabilityChanged(ChannelHandlerContext ctx) {\n          */\n         @Override\n         public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n-            debugLog(\"inactive:\" + ctx);\n+            debugLog(\"inactive:{}\", ctx);\n             if (messageExecutor.isShutdown()) {\n                 return;\n             }\n@@ -245,7 +246,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E\n         @Override\n         public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {\n             if (evt instanceof IdleStateEvent) {\n-                debugLog(\"idle:\" + evt);\n+                debugLog(\"idle:{}\", evt);\n                 IdleStateEvent idleStateEvent = (IdleStateEvent) evt;\n                 if (idleStateEvent.state() == IdleState.READER_IDLE) {\n                     if (LOGGER.isInfoEnabled()) {",
      "parent_sha": "e438c758701237abfe2fa7de0f53d3f0b805877d"
    }
  },
  {
    "oid": "86978c7db5c27263696489848a64f1507147e3bd",
    "message": "add cause to FrameworkException to expose the actual exception",
    "date": "2019-01-11T09:08:57Z",
    "url": "https://github.com/apache/incubator-seata/commit/86978c7db5c27263696489848a64f1507147e3bd",
    "details": {
      "sha": "71d2d5147cdd23319e35f21590ed0b6ffefe4049",
      "filename": "core/src/main/java/com/alibaba/fescar/core/rpc/netty/AbstractRpcRemotingClient.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/incubator-seata/blob/86978c7db5c27263696489848a64f1507147e3bd/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fcore%2Frpc%2Fnetty%2FAbstractRpcRemotingClient.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/86978c7db5c27263696489848a64f1507147e3bd/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fcore%2Frpc%2Fnetty%2FAbstractRpcRemotingClient.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fcore%2Frpc%2Fnetty%2FAbstractRpcRemotingClient.java?ref=86978c7db5c27263696489848a64f1507147e3bd",
      "patch": "@@ -231,9 +231,9 @@ protected Channel getNewChannel(InetSocketAddress address) {\n         try {\n             f.await(this.nettyClientConfig.getConnectTimeoutMillis(), TimeUnit.MILLISECONDS);\n             if (f.isCancelled()) {\n-                throw new FrameworkException(\"connect cancelled, can not connect to fescar-server.\");\n+                throw new FrameworkException(f.cause(), \"connect cancelled, can not connect to fescar-server.\");\n             } else if (!f.isSuccess()) {\n-                throw new FrameworkException(\"connect failed, can not connect to fescar-server.\");\n+                throw new FrameworkException(f.cause(), \"connect failed, can not connect to fescar-server.\");\n             } else {\n                 channel = f.channel();\n             }",
      "parent_sha": "4e95a4c50e9378f0196c2041c7fb727651004a04"
    }
  },
  {
    "oid": "34286238b63b2c84c32e6cd892db1b75355fddb9",
    "message": "bugfix:the buffer may cause overflows when sql statement is long (#1148)",
    "date": "2019-06-04T07:18:47Z",
    "url": "https://github.com/apache/incubator-seata/commit/34286238b63b2c84c32e6cd892db1b75355fddb9",
    "details": {
      "sha": "19bc7030a9a9f5a8cd84fe09ee6565df0086204e",
      "filename": "core/src/main/java/io/seata/core/protocol/MergedWarpMessage.java",
      "status": "modified",
      "additions": 18,
      "deletions": 15,
      "changes": 33,
      "blob_url": "https://github.com/apache/incubator-seata/blob/34286238b63b2c84c32e6cd892db1b75355fddb9/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fprotocol%2FMergedWarpMessage.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/34286238b63b2c84c32e6cd892db1b75355fddb9/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fprotocol%2FMergedWarpMessage.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fprotocol%2FMergedWarpMessage.java?ref=34286238b63b2c84c32e6cd892db1b75355fddb9",
      "patch": "@@ -21,9 +21,11 @@\n import java.util.List;\n \n import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n /**\n  * The type Merged warp message.\n  *\n@@ -32,14 +34,15 @@\n  */\n public class MergedWarpMessage extends AbstractMessage implements Serializable, MergeMessage {\n     private static final long serialVersionUID = -5758802337446717090L;\n+\n     /**\n      * The Msgs.\n      */\n-    public List<AbstractMessage> msgs = new ArrayList<AbstractMessage>();\n+    public List<AbstractMessage> msgs = new ArrayList<>();\n     /**\n      * The Msg ids.\n      */\n-    public List<Long> msgIds = new ArrayList<Long>();\n+    public List<Long> msgIds = new ArrayList<>();\n     private static final Logger LOGGER = LoggerFactory.getLogger(MergedWarpMessage.class);\n \n     @Override\n@@ -49,21 +52,21 @@ public short getTypeCode() {\n \n     @Override\n     public byte[] encode() {\n-        int bufferSize = msgs.size() * 1024;\n-        ByteBuffer byteBuffer = ByteBuffer.allocate(bufferSize);\n-        byteBuffer.putShort((short)msgs.size());\n-        for (AbstractMessage msg : msgs) {\n-            //msg.setChannelHandlerContext(ctx);\n-            byte[] data = msg.encode();\n-            byteBuffer.putShort(msg.getTypeCode());\n-            byteBuffer.put(data);\n+        final ByteBuf buffer = Unpooled.buffer(1024);\n+        buffer.writeInt(0); // write placeholder for content length\n+\n+        buffer.writeShort((short) msgs.size());\n+        for (final AbstractMessage msg : msgs) {\n+            final byte[] bytes = msg.encode();\n+            buffer.writeShort(msg.getTypeCode());\n+            buffer.writeBytes(bytes);\n         }\n \n-        byteBuffer.flip();\n-        int length = byteBuffer.limit();\n-        byte[] content = new byte[length + 4];\n-        intToBytes(length, content, 0);\n-        byteBuffer.get(content, 4, length);\n+        final int length = buffer.readableBytes();\n+        final byte[] content = new byte[length];\n+        buffer.setInt(0, length - 4);  // minus the placeholder length itself\n+        buffer.readBytes(content);\n+\n         if (msgs.size() > 20) {\n             if (LOGGER.isDebugEnabled()) {\n                 LOGGER.debug(\"msg in one packet:\" + msgs.size() + \",buffer size:\" + content.length);",
      "parent_sha": "f5e436bd134eeb6ba083b589c3499dd76ab19787"
    }
  },
  {
    "oid": "78ccadb00e9603c30acc99f5c822de593f07a753",
    "message": "fix:the redis pipeline (#3136)",
    "date": "2020-09-23T08:03:27Z",
    "url": "https://github.com/apache/incubator-seata/commit/78ccadb00e9603c30acc99f5c822de593f07a753",
    "details": {
      "sha": "802118ba9276b57556cb838e3f10f006d66a28ae",
      "filename": "server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/incubator-seata/blob/78ccadb00e9603c30acc99f5c822de593f07a753/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fstorage%2Fredis%2Fstore%2FRedisTransactionStoreManager.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/78ccadb00e9603c30acc99f5c822de593f07a753/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fstorage%2Fredis%2Fstore%2FRedisTransactionStoreManager.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fstorage%2Fredis%2Fstore%2FRedisTransactionStoreManager.java?ref=78ccadb00e9603c30acc99f5c822de593f07a753",
      "patch": "@@ -117,8 +117,9 @@ private boolean deleteBranchTransactionDO(BranchTransactionDO branchTransactionD\n     private boolean insertOrUpdateBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n             String key = getBranchKey(branchTransactionDO.getBranchId());\n+            String branch = jedis.get(key);\n             Pipeline pipeline = jedis.pipelined();\n-            if (jedis.get(key) == null) {\n+            if (StringUtils.isEmpty(branch)) {\n                 pipeline.lpush(getBranchListKeyByXid(branchTransactionDO.getXid()), key);\n             }\n             pipeline.set(key, JSON.toJSONString(branchTransactionDO));",
      "parent_sha": "504e7d41c25ad41392be114047a30a862df912db"
    }
  },
  {
    "oid": "894b42c54f6fcc08fbd317110b4f572d44f9651d",
    "message": "optimize: remove duplicate validAddress code (#3459)",
    "date": "2021-01-11T05:44:59Z",
    "url": "https://github.com/apache/incubator-seata/commit/894b42c54f6fcc08fbd317110b4f572d44f9651d",
    "details": {
      "sha": "f77cc73d9f28ec00fa0bafa22af12527a21a483e",
      "filename": "discovery/seata-discovery-nacos/src/main/java/io/seata/discovery/registry/nacos/NacosRegistryServiceImpl.java",
      "status": "modified",
      "additions": 3,
      "deletions": 8,
      "changes": 11,
      "blob_url": "https://github.com/apache/incubator-seata/blob/894b42c54f6fcc08fbd317110b4f572d44f9651d/discovery%2Fseata-discovery-nacos%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fdiscovery%2Fregistry%2Fnacos%2FNacosRegistryServiceImpl.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/894b42c54f6fcc08fbd317110b4f572d44f9651d/discovery%2Fseata-discovery-nacos%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fdiscovery%2Fregistry%2Fnacos%2FNacosRegistryServiceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/discovery%2Fseata-discovery-nacos%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fdiscovery%2Fregistry%2Fnacos%2FNacosRegistryServiceImpl.java?ref=894b42c54f6fcc08fbd317110b4f572d44f9651d",
      "patch": "@@ -21,6 +21,7 @@\n import com.alibaba.nacos.api.naming.listener.NamingEvent;\n import com.alibaba.nacos.api.naming.pojo.Instance;\n import com.alibaba.nacos.client.naming.utils.CollectionUtils;\n+import io.seata.common.util.NetUtil;\n import io.seata.common.util.StringUtils;\n import io.seata.config.Configuration;\n import io.seata.config.ConfigurationFactory;\n@@ -81,13 +82,13 @@ static NacosRegistryServiceImpl getInstance() {\n \n     @Override\n     public void register(InetSocketAddress address) throws Exception {\n-        validAddress(address);\n+        NetUtil.validAddress(address);\n         getNamingInstance().registerInstance(getServiceName(), getServiceGroup(), address.getAddress().getHostAddress(), address.getPort(), getClusterName());\n     }\n \n     @Override\n     public void unregister(InetSocketAddress address) throws Exception {\n-        validAddress(address);\n+        NetUtil.validAddress(address);\n         getNamingInstance().deregisterInstance(getServiceName(), getServiceGroup(), address.getAddress().getHostAddress(), address.getPort(), getClusterName());\n     }\n \n@@ -156,12 +157,6 @@ public void close() throws Exception {\n \n     }\n \n-    private void validAddress(InetSocketAddress address) {\n-        if (address.getHostName() == null || 0 == address.getPort()) {\n-            throw new IllegalArgumentException(\"invalid address:\" + address);\n-        }\n-    }\n-\n     /**\n      * Gets naming instance.\n      *",
      "parent_sha": "95d39e6ba813550aea8fef222bc9b920fbaf8333"
    }
  },
  {
    "oid": "eea14054c7246354a6a12fd98fa2a9ec8dd3cd85",
    "message": "Modify punctuation marks. (#1730)",
    "date": "2019-10-08T11:42:45Z",
    "url": "https://github.com/apache/incubator-seata/commit/eea14054c7246354a6a12fd98fa2a9ec8dd3cd85",
    "details": {
      "sha": "f92f246148bc766d0207e06119d701110e429527",
      "filename": "server/src/main/java/io/seata/server/ParameterParser.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/eea14054c7246354a6a12fd98fa2a9ec8dd3cd85/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2FParameterParser.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/eea14054c7246354a6a12fd98fa2a9ec8dd3cd85/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2FParameterParser.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2FParameterParser.java?ref=eea14054c7246354a6a12fd98fa2a9ec8dd3cd85",
      "patch": "@@ -42,7 +42,7 @@ public class ParameterParser {\n     private String host;\n     @Parameter(names = {\"--port\", \"-p\"}, description = \"The port to listen.\", order = 2)\n     private int port = SERVER_DEFAULT_PORT;\n-    @Parameter(names = {\"--storeMode\", \"-m\"}, description = \"log store mode : file\u3001db\", order = 3)\n+    @Parameter(names = {\"--storeMode\", \"-m\"}, description = \"log store mode : file, db\", order = 3)\n     private String storeMode;\n     @Parameter(names = {\"--serverNode\", \"-n\"}, description = \"server node id, such as 1, 2, 3. default is 1\", order = 4)\n     private int serverNode = SERVER_DEFAULT_NODE;",
      "parent_sha": "c6f4e0d65d9d91c22d1a564bd4245fa9b66a3833"
    }
  },
  {
    "oid": "129c2f32d41164f6aa7e2c6c797604567ef2be97",
    "message": "optimize: optimize collectRowLocks method (#3909)",
    "date": "2021-09-14T08:28:05Z",
    "url": "https://github.com/apache/incubator-seata/commit/129c2f32d41164f6aa7e2c6c797604567ef2be97",
    "details": {
      "sha": "f57723699ad24cfced6ac8ea441cc4ce115b82e5",
      "filename": "server/src/main/java/io/seata/server/lock/AbstractLockManager.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/apache/incubator-seata/blob/129c2f32d41164f6aa7e2c6c797604567ef2be97/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Flock%2FAbstractLockManager.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/129c2f32d41164f6aa7e2c6c797604567ef2be97/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Flock%2FAbstractLockManager.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Flock%2FAbstractLockManager.java?ref=129c2f32d41164f6aa7e2c6c797604567ef2be97",
      "patch": "@@ -122,13 +122,14 @@ protected List<RowLock> collectRowLocks(BranchSession branchSession) {\n         if (branchSession == null || StringUtils.isBlank(branchSession.getLockKey())) {\n             return locks;\n         }\n-        String xid = branchSession.getXid();\n-        String resourceId = branchSession.getResourceId();\n-        long transactionId = branchSession.getTransactionId();\n \n         String lockKey = branchSession.getLockKey();\n+        String resourceId = branchSession.getResourceId();\n+        String xid = branchSession.getXid();\n+        long transactionId = branchSession.getTransactionId();\n+        long branchId = branchSession.getBranchId();\n \n-        return collectRowLocks(lockKey, resourceId, xid, transactionId, branchSession.getBranchId());\n+        return collectRowLocks(lockKey, resourceId, xid, transactionId, branchId);\n     }\n \n     /**",
      "parent_sha": "3295003361d2e044ca6ddcad51e528b632e21403"
    }
  },
  {
    "oid": "b350b365f173b3a40b22f885eb83c3a9174b87c9",
    "message": "bugfix: thread unsafe issue of OracleKeywordChecker initialization (#1609)",
    "date": "2019-09-07T05:54:08Z",
    "url": "https://github.com/apache/incubator-seata/commit/b350b365f173b3a40b22f885eb83c3a9174b87c9",
    "details": {
      "sha": "e431b57206f2f85d8013d084d858e874d469203b",
      "filename": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/keyword/OracleKeywordChecker.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/incubator-seata/blob/b350b365f173b3a40b22f885eb83c3a9174b87c9/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fundo%2Foracle%2Fkeyword%2FOracleKeywordChecker.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/b350b365f173b3a40b22f885eb83c3a9174b87c9/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fundo%2Foracle%2Fkeyword%2FOracleKeywordChecker.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fundo%2Foracle%2Fkeyword%2FOracleKeywordChecker.java?ref=b350b365f173b3a40b22f885eb83c3a9174b87c9",
      "patch": "@@ -29,9 +29,10 @@\n  */\n public class OracleKeywordChecker implements KeywordChecker {\n     private static volatile KeywordChecker keywordChecker = null;\n-    private static volatile Set<String> keywordSet = null;\n+    private Set<String> keywordSet;\n \n     private OracleKeywordChecker() {\n+        keywordSet = Arrays.stream(OracleKeyword.values()).map(OracleKeyword::name).collect(Collectors.toSet());\n     }\n \n     /**\n@@ -44,7 +45,6 @@ public static KeywordChecker getInstance() {\n             synchronized (OracleKeywordChecker.class) {\n                 if (keywordChecker == null) {\n                     keywordChecker = new OracleKeywordChecker();\n-                    keywordSet = Arrays.stream(OracleKeyword.values()).map(OracleKeyword::name).collect(Collectors.toSet());\n                 }\n             }\n         }",
      "parent_sha": "f9e303858fb92793963db32f869daa379ae7c9d3"
    }
  },
  {
    "oid": "b80fa9fe8cd29fed4cdb5f5cd168d5ada9b02e58",
    "message": "optimize: remove duplicated in string utils (#3186)",
    "date": "2020-10-14T07:19:58Z",
    "url": "https://github.com/apache/incubator-seata/commit/b80fa9fe8cd29fed4cdb5f5cd168d5ada9b02e58",
    "details": {
      "sha": "3e10796635153c82278a5103d1694e017cb25527",
      "filename": "common/src/main/java/io/seata/common/util/StringUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 12,
      "changes": 13,
      "blob_url": "https://github.com/apache/incubator-seata/blob/b80fa9fe8cd29fed4cdb5f5cd168d5ada9b02e58/common%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcommon%2Futil%2FStringUtils.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/b80fa9fe8cd29fed4cdb5f5cd168d5ada9b02e58/common%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcommon%2Futil%2FStringUtils.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/common%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcommon%2Futil%2FStringUtils.java?ref=b80fa9fe8cd29fed4cdb5f5cd168d5ada9b02e58",
      "patch": "@@ -79,18 +79,7 @@ public static boolean isBlank(String str) {\n      * @return boolean boolean\n      */\n     public static boolean isNotBlank(String str) {\n-        int length;\n-\n-        if ((str == null) || ((length = str.length()) == 0)) {\n-            return false;\n-        }\n-\n-        for (int i = 0; i < length; i++) {\n-            if (!Character.isWhitespace(str.charAt(i))) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return !isBlank(str);\n     }\n \n     /**",
      "parent_sha": "6c0c75939dedbf19c4a21a8ac7aa0fb98879a8fd"
    }
  },
  {
    "oid": "677d4426454929071100931f7ffb8fd054c0bdbd",
    "message": "optimize: some typos (#2115)",
    "date": "2019-12-31T10:05:12Z",
    "url": "https://github.com/apache/incubator-seata/commit/677d4426454929071100931f7ffb8fd054c0bdbd",
    "details": {
      "sha": "d3d7c84e8bc24c36fd5f248467706aabab3ce986",
      "filename": "server/src/main/java/io/seata/server/coordinator/DefaultCoordinator.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/apache/incubator-seata/blob/677d4426454929071100931f7ffb8fd054c0bdbd/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fcoordinator%2FDefaultCoordinator.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/677d4426454929071100931f7ffb8fd054c0bdbd/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fcoordinator%2FDefaultCoordinator.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fcoordinator%2FDefaultCoordinator.java?ref=677d4426454929071100931f7ffb8fd054c0bdbd",
      "patch": "@@ -96,9 +96,9 @@ public class DefaultCoordinator extends AbstractTCInboundHandler\n         1000L);\n \n     /**\n-     * The constant ASYN_COMMITTING_RETRY_PERIOD.\n+     * The constant ASYNC_COMMITTING_RETRY_PERIOD.\n      */\n-    protected static final long ASYN_COMMITTING_RETRY_PERIOD = CONFIG.getLong(\n+    protected static final long ASYNC_COMMITTING_RETRY_PERIOD = CONFIG.getLong(\n         ConfigurationKeys.ASYN_COMMITING_RETRY_PERIOD, 1000L);\n \n     /**\n@@ -113,15 +113,15 @@ public class DefaultCoordinator extends AbstractTCInboundHandler\n     protected static final long TIMEOUT_RETRY_PERIOD = CONFIG.getLong(ConfigurationKeys.TIMEOUT_RETRY_PERIOD, 1000L);\n \n     /**\n-     * The Transaction undolog delete period.\n+     * The Transaction undo log delete period.\n      */\n-    protected static final long UNDOLOG_DELETE_PERIOD = CONFIG.getLong(\n+    protected static final long UNDO_LOG_DELETE_PERIOD = CONFIG.getLong(\n         ConfigurationKeys.TRANSACTION_UNDO_LOG_DELETE_PERIOD, 24 * 60 * 60 * 1000);\n \n     /**\n-     * The Transaction undolog delay delete period\n+     * The Transaction undo log delay delete period\n      */\n-    protected static final long UNDOLOG_DELAY_DELETE_PERIOD = 3 * 60 * 1000;\n+    protected static final long UNDO_LOG_DELAY_DELETE_PERIOD = 3 * 60 * 1000;\n \n     private static final int ALWAYS_RETRY_BOUNDARY = 0;\n \n@@ -514,7 +514,7 @@ public void init() {\n             } catch (Exception e) {\n                 LOGGER.info(\"Exception async committing ... \", e);\n             }\n-        }, 0, ASYN_COMMITTING_RETRY_PERIOD, TimeUnit.MILLISECONDS);\n+        }, 0, ASYNC_COMMITTING_RETRY_PERIOD, TimeUnit.MILLISECONDS);\n \n         timeoutCheck.scheduleAtFixedRate(() -> {\n             try {\n@@ -530,7 +530,7 @@ public void init() {\n             } catch (Exception e) {\n                 LOGGER.info(\"Exception undoLog deleting ... \", e);\n             }\n-        }, UNDOLOG_DELAY_DELETE_PERIOD, UNDOLOG_DELETE_PERIOD, TimeUnit.MILLISECONDS);\n+        }, UNDO_LOG_DELAY_DELETE_PERIOD, UNDO_LOG_DELETE_PERIOD, TimeUnit.MILLISECONDS);\n     }\n \n     @Override",
      "parent_sha": "13c75946e833e6b938a755afb4f4549e0d29fa3c"
    }
  },
  {
    "oid": "58284ea9a2c4058f12823254a9127ddb2555adda",
    "message": "An optimization about MessageFuture (#831)\n\nUse CompletableFuture instead CountDownLatch in MessageFuture",
    "date": "2019-04-23T06:51:04Z",
    "url": "https://github.com/apache/incubator-seata/commit/58284ea9a2c4058f12823254a9127ddb2555adda",
    "details": {
      "sha": "32c964bee141589516f819fc7a9afd1e5a7079e5",
      "filename": "core/src/main/java/io/seata/core/protocol/MessageFuture.java",
      "status": "modified",
      "additions": 17,
      "deletions": 12,
      "changes": 29,
      "blob_url": "https://github.com/apache/incubator-seata/blob/58284ea9a2c4058f12823254a9127ddb2555adda/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fprotocol%2FMessageFuture.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/58284ea9a2c4058f12823254a9127ddb2555adda/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fprotocol%2FMessageFuture.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fprotocol%2FMessageFuture.java?ref=58284ea9a2c4058f12823254a9127ddb2555adda",
      "patch": "@@ -16,7 +16,10 @@\n \n package io.seata.core.protocol;\n \n-import java.util.concurrent.CountDownLatch;\n+import io.seata.common.exception.ShouldNeverHappenException;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n@@ -30,9 +33,8 @@ public class MessageFuture {\n     private RpcMessage requestMessage;\n     private long timeout;\n     private long start = System.currentTimeMillis();\n-    private volatile Object resultMessage;\n     private static final Object NULL = new Object();\n-    private final CountDownLatch latch = new CountDownLatch(1);\n+    private transient CompletableFuture origin = new CompletableFuture();\n \n     /**\n      * Is timeout boolean.\n@@ -54,18 +56,22 @@ public boolean isTimeout() {\n      */\n     public Object get(long timeout, TimeUnit unit) throws TimeoutException,\n         InterruptedException {\n-        boolean success = latch.await(timeout, unit);\n-        if (!success) {\n+        Object result = null;\n+        try {\n+            result = origin.get(timeout, unit);\n+        } catch (ExecutionException e) {\n+            throw new ShouldNeverHappenException(\"Should not get results in a multi-threaded environment\", e);\n+        } catch (TimeoutException e) {\n             throw new TimeoutException(\"cost \" + (System.currentTimeMillis() - start) + \" ms\");\n         }\n \n-        if (resultMessage instanceof RuntimeException) {\n-            throw (RuntimeException)resultMessage;\n-        } else if (resultMessage instanceof Throwable) {\n-            throw new RuntimeException((Throwable)resultMessage);\n+        if (result instanceof RuntimeException) {\n+            throw (RuntimeException)result;\n+        } else if (result instanceof Throwable) {\n+            throw new RuntimeException((Throwable)result);\n         }\n \n-        return resultMessage;\n+        return result;\n     }\n \n     /**\n@@ -74,8 +80,7 @@ public Object get(long timeout, TimeUnit unit) throws TimeoutException,\n      * @param obj the obj\n      */\n     public void setResultMessage(Object obj) {\n-        this.resultMessage = (obj == null ? NULL : obj);\n-        latch.countDown();\n+        origin.complete(obj);\n     }\n \n     /**",
      "parent_sha": "f1143a8053021d7d2a1bf914c17f04c2d807dacb"
    }
  },
  {
    "oid": "f6193e30498ef791a22cf8cba9e6571f13c07d10",
    "message": "optimize: get netty config property from system properties. (#3336)",
    "date": "2020-12-14T12:50:59Z",
    "url": "https://github.com/apache/incubator-seata/commit/f6193e30498ef791a22cf8cba9e6571f13c07d10",
    "details": {
      "sha": "11d0c4e1e46e57e01fc905e1bb61fdd801290879",
      "filename": "core/src/main/java/io/seata/core/rpc/netty/NettyServerConfig.java",
      "status": "modified",
      "additions": 16,
      "deletions": 8,
      "changes": 24,
      "blob_url": "https://github.com/apache/incubator-seata/blob/f6193e30498ef791a22cf8cba9e6571f13c07d10/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FNettyServerConfig.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/f6193e30498ef791a22cf8cba9e6571f13c07d10/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FNettyServerConfig.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FNettyServerConfig.java?ref=f6193e30498ef791a22cf8cba9e6571f13c07d10",
      "patch": "@@ -33,16 +33,24 @@\n  */\n public class NettyServerConfig extends NettyBaseConfig {\n \n-    private int serverSelectorThreads = WORKER_THREAD_SIZE;\n-    private int serverSocketSendBufSize = 153600;\n-    private int serverSocketResvBufSize = 153600;\n-    private int serverWorkerThreads = WORKER_THREAD_SIZE;\n-    private int soBackLogSize = 1024;\n-    private int writeBufferHighWaterMark = 67108864;\n-    private int writeBufferLowWaterMark = 1048576;\n+    private int serverSelectorThreads = Integer.parseInt(System.getProperty(\n+            ConfigurationKeys.TRANSPORT_PREFIX + \"serverSelectorThreads\", String.valueOf(WORKER_THREAD_SIZE)));\n+    private int serverSocketSendBufSize = Integer.parseInt(System.getProperty(\n+            ConfigurationKeys.TRANSPORT_PREFIX + \"serverSocketSendBufSize\", String.valueOf(153600)));\n+    private int serverSocketResvBufSize = Integer.parseInt(System.getProperty(\n+            ConfigurationKeys.TRANSPORT_PREFIX + \"serverSocketResvBufSize\", String.valueOf(153600)));\n+    private int serverWorkerThreads = Integer.parseInt(System.getProperty(\n+            ConfigurationKeys.TRANSPORT_PREFIX + \"serverWorkerThreads\", String.valueOf(WORKER_THREAD_SIZE)));\n+    private int soBackLogSize = Integer.parseInt(System.getProperty(\n+            ConfigurationKeys.TRANSPORT_PREFIX + \"soBackLogSize\", String.valueOf(1024)));\n+    private int writeBufferHighWaterMark = Integer.parseInt(System.getProperty(\n+            ConfigurationKeys.TRANSPORT_PREFIX + \"writeBufferHighWaterMark\", String.valueOf(67108864)));\n+    private int writeBufferLowWaterMark = Integer.parseInt(System.getProperty(\n+            ConfigurationKeys.TRANSPORT_PREFIX + \"writeBufferLowWaterMark\", String.valueOf(1048576)));\n     private static final int DEFAULT_LISTEN_PORT = 8091;\n     private static final int RPC_REQUEST_TIMEOUT = 30 * 1000;\n-    private int serverChannelMaxIdleTimeSeconds = 30;\n+    private int serverChannelMaxIdleTimeSeconds = Integer.parseInt(System.getProperty(\n+            ConfigurationKeys.TRANSPORT_PREFIX + \"serverChannelMaxIdleTimeSeconds\", String.valueOf(30)));\n     private static final String EPOLL_WORKER_THREAD_PREFIX = \"NettyServerEPollWorker\";\n \n     /**",
      "parent_sha": "f5ee231947f632f7932b50522b529285fa2c8c28"
    }
  },
  {
    "oid": "d3049de7aa7170ddbee031b815b7d701e31eb1d1",
    "message": "bugfix: Saga StateMachineRepository#getStateMachineById will replace the last version in cache (#2384)",
    "date": "2020-03-23T07:04:36Z",
    "url": "https://github.com/apache/incubator-seata/commit/d3049de7aa7170ddbee031b815b7d701e31eb1d1",
    "details": {
      "sha": "301775a8fb61e1c463ea78d63167482d09d67080",
      "filename": "saga/seata-saga-engine/src/main/java/io/seata/saga/engine/repo/impl/StateMachineRepositoryImpl.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/apache/incubator-seata/blob/d3049de7aa7170ddbee031b815b7d701e31eb1d1/saga%2Fseata-saga-engine%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fsaga%2Fengine%2Frepo%2Fimpl%2FStateMachineRepositoryImpl.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/d3049de7aa7170ddbee031b815b7d701e31eb1d1/saga%2Fseata-saga-engine%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fsaga%2Fengine%2Frepo%2Fimpl%2FStateMachineRepositoryImpl.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/saga%2Fseata-saga-engine%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fsaga%2Fengine%2Frepo%2Fimpl%2FStateMachineRepositoryImpl.java?ref=d3049de7aa7170ddbee031b815b7d701e31eb1d1",
      "patch": "@@ -77,7 +77,7 @@ public StateMachine getStateMachineById(String stateMachineId) {\n                         stateMachine.setStartState(parsedStatMachine.getStartState());\n                         stateMachine.getStates().putAll(parsedStatMachine.getStates());\n                         item.setValue(stateMachine);\n-                        stateMachineMapByNameAndTenant.put(stateMachine.getName() + \"_\" + stateMachine.getTenantId(),\n+                        stateMachineMapById.put(stateMachine.getName() + \"_\" + stateMachine.getTenantId(),\n                             item);\n                     }\n \n@@ -158,7 +158,9 @@ public StateMachine registryStateMachine(StateMachine stateMachine) {\n                     return stateMachine;\n                 }\n             }\n-            stateMachine.setId(seqGenerator.generate(DomainConstants.SEQ_ENTITY_STATE_MACHINE));\n+            if (StringUtils.isBlank(stateMachine.getId())) {\n+                stateMachine.setId(seqGenerator.generate(DomainConstants.SEQ_ENTITY_STATE_MACHINE));\n+            }\n             stateMachine.setGmtCreate(new Date());\n             stateLangStore.storeStateMachine(stateMachine);\n         }",
      "parent_sha": "0dac738a90d883d91c0d179668b1ec39f090c130"
    }
  },
  {
    "oid": "141b8cb94e58e6290a75f434c4865fb2353e3228",
    "message": "bugfix: multiple operations on the same record in the same local transaction, rollback failed (#1341)",
    "date": "2019-07-26T03:31:20Z",
    "url": "https://github.com/apache/incubator-seata/commit/141b8cb94e58e6290a75f434c4865fb2353e3228",
    "details": {
      "sha": "d2fa330f7a799354c4e122b3265a88b62975baed",
      "filename": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/UndoLogManager.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/apache/incubator-seata/blob/141b8cb94e58e6290a75f434c4865fb2353e3228/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fundo%2FUndoLogManager.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/141b8cb94e58e6290a75f434c4865fb2353e3228/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fundo%2FUndoLogManager.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fundo%2FUndoLogManager.java?ref=141b8cb94e58e6290a75f434c4865fb2353e3228",
      "patch": "@@ -21,7 +21,9 @@\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.SQLIntegrityConstraintViolationException;\n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n@@ -184,8 +186,11 @@ public static void undo(DataSourceProxy dataSourceProxy, String xid, long branch\n                     try {\n                         // put serializer name to local\n                         SERIALIZER_LOCAL.set(parser.getName());\n-\n-                        for (SQLUndoLog sqlUndoLog : branchUndoLog.getSqlUndoLogs()) {\n+                        List<SQLUndoLog> sqlUndoLogs = branchUndoLog.getSqlUndoLogs();\n+                        if (sqlUndoLogs.size() > 1) {\n+                            Collections.reverse(sqlUndoLogs);\n+                        }\n+                        for (SQLUndoLog sqlUndoLog : sqlUndoLogs) {\n                             TableMeta tableMeta = TableMetaCache.getTableMeta(dataSourceProxy, sqlUndoLog.getTableName());\n                             sqlUndoLog.setTableMeta(tableMeta);\n                             AbstractUndoExecutor undoExecutor = UndoExecutorFactory.getUndoExecutor(",
      "parent_sha": "775564cd3c8ffa2833c1f2f0ea818a16092e88fa"
    }
  },
  {
    "oid": "094cef7ed3ce1c5b0d2b6bd554b6bbb7cc944b93",
    "message": "optimize: optimize channel availability thread log output (#5563)",
    "date": "2023-06-12T14:57:44Z",
    "url": "https://github.com/apache/incubator-seata/commit/094cef7ed3ce1c5b0d2b6bd554b6bbb7cc944b93",
    "details": {
      "sha": "abef212fccbac2f5c88e37c863fbcfde9873d0a3",
      "filename": "core/src/main/java/io/seata/core/rpc/netty/NettyClientChannelManager.java",
      "status": "modified",
      "additions": 14,
      "deletions": 2,
      "changes": 16,
      "blob_url": "https://github.com/apache/incubator-seata/blob/094cef7ed3ce1c5b0d2b6bd554b6bbb7cc944b93/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FNettyClientChannelManager.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/094cef7ed3ce1c5b0d2b6bd554b6bbb7cc944b93/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FNettyClientChannelManager.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2Fnetty%2FNettyClientChannelManager.java?ref=094cef7ed3ce1c5b0d2b6bd554b6bbb7cc944b93",
      "patch": "@@ -18,9 +18,11 @@\n import java.net.InetSocketAddress;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n-import java.util.HashSet;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import java.util.function.Function;\n@@ -190,14 +192,24 @@ void reconnect(String transactionServiceGroup) {\n             return;\n         }\n         Set<String> channelAddress = new HashSet<>(availList.size());\n+        Map<String, Exception> failedMap = new HashMap<>();\n         try {\n             for (String serverAddress : availList) {\n                 try {\n                     acquireChannel(serverAddress);\n                     channelAddress.add(serverAddress);\n                 } catch (Exception e) {\n+                    failedMap.put(serverAddress, e);\n+                }\n+            }\n+            if (failedMap.size() > 0) {\n+                if (LOGGER.isInfoEnabled()) {\n                     LOGGER.error(\"{} can not connect to {} cause:{}\", FrameworkErrorCode.NetConnect.getErrCode(),\n-                        serverAddress, e.getMessage(), e);\n+                            failedMap.keySet(), failedMap.values().stream().map(Throwable::getMessage).collect(Collectors.toSet()));\n+                } else if (LOGGER.isDebugEnabled()) {\n+                    failedMap.forEach((key, value) -> {\n+                        LOGGER.error(\"{} can not connect to {} cause:{} trace information:{}\", FrameworkErrorCode.NetConnect.getErrCode(), key, value.getMessage(), value);\n+                    });\n                 }\n             }\n         } finally {",
      "parent_sha": "86f462916cb77dad7274999f67543df398bc1a18"
    }
  },
  {
    "oid": "081ca51299857cf917d4ec90e4682dde92398e48",
    "message": "feature: Check lock in TC when use @GlobalLock (#3076)",
    "date": "2020-10-25T03:11:08Z",
    "url": "https://github.com/apache/incubator-seata/commit/081ca51299857cf917d4ec90e4682dde92398e48",
    "details": {
      "sha": "044a213bbff4fec8efda021691d42d49b0ec73de",
      "filename": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/SelectForUpdateExecutor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/apache/incubator-seata/blob/081ca51299857cf917d4ec90e4682dde92398e48/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fexec%2FSelectForUpdateExecutor.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/081ca51299857cf917d4ec90e4682dde92398e48/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fexec%2FSelectForUpdateExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fexec%2FSelectForUpdateExecutor.java?ref=081ca51299857cf917d4ec90e4682dde92398e48",
      "patch": "@@ -96,13 +96,10 @@ public T doExecute(Object... args) throws Throwable {\n                         break;\n                     }\n \n-                    if (RootContext.inGlobalTransaction()) {\n-                        //do as usual\n+                    if (RootContext.inGlobalTransaction() || RootContext.requireGlobalLock()) {\n+                        // Do the same thing under either @GlobalTransactional or @GlobalLock, \n+                        // that only check the global lock  here.\n                         statementProxy.getConnectionProxy().checkLock(lockKeys);\n-                    } else if (RootContext.requireGlobalLock()) {\n-                        //check lock key before commit just like DML to avoid reentrant lock problem(no xid thus can\n-                        // not reentrant)\n-                        statementProxy.getConnectionProxy().appendLockKey(lockKeys);\n                     } else {\n                         throw new RuntimeException(\"Unknown situation!\");\n                     }\n@@ -113,6 +110,7 @@ public T doExecute(Object... args) throws Throwable {\n                     } else {\n                         conn.rollback();\n                     }\n+                    // trigger retry\n                     lockRetryController.sleep(lce);\n                 }\n             }",
      "parent_sha": "e699a9d2997ab7a5b16cc44e01766c766da4414b"
    }
  },
  {
    "oid": "e32a95cbe4548beca2414e4bb300be3ba1fc2c32",
    "message": "optimizi: optimize exceptionHandler code logic (#2489)",
    "date": "2020-04-12T10:03:31Z",
    "url": "https://github.com/apache/incubator-seata/commit/e32a95cbe4548beca2414e4bb300be3ba1fc2c32",
    "details": {
      "sha": "34033cce56191726bf3bc089ec8e1635c531990c",
      "filename": "core/src/main/java/io/seata/core/exception/AbstractExceptionHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/apache/incubator-seata/blob/e32a95cbe4548beca2414e4bb300be3ba1fc2c32/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fexception%2FAbstractExceptionHandler.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/e32a95cbe4548beca2414e4bb300be3ba1fc2c32/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fexception%2FAbstractExceptionHandler.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fexception%2FAbstractExceptionHandler.java?ref=e32a95cbe4548beca2414e4bb300be3ba1fc2c32",
      "patch": "@@ -111,8 +111,7 @@ public void onException(T request, S response, Exception rex) {\n      * @param request  the request\n      * @param response the response\n      */\n-    public void exceptionHandleTemplate(Callback callback, AbstractTransactionRequest request,\n-        AbstractTransactionResponse response) {\n+    public <T extends AbstractTransactionRequest, S extends AbstractTransactionResponse> void exceptionHandleTemplate(Callback<T, S> callback, T request, S response) {\n         try {\n             callback.execute(request, response);\n             callback.onSuccess(request, response);",
      "parent_sha": "6457fa62021758fdfe12488d20598e001dcd7c26"
    }
  },
  {
    "oid": "29e1928a31a10144ad43cb6d9db5d82b23e9c7fe",
    "message": "bugfix: correct LockManagerTest.concurrentUseAbilityTest assertion condition (#1713)",
    "date": "2019-09-28T03:38:17Z",
    "url": "https://github.com/apache/incubator-seata/commit/29e1928a31a10144ad43cb6d9db5d82b23e9c7fe",
    "details": {
      "sha": "32c64cffc9dbbc0c17eb6022f697f60fe9ff6f67",
      "filename": "server/src/test/java/io/seata/server/lock/LockManagerTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/29e1928a31a10144ad43cb6d9db5d82b23e9c7fe/server%2Fsrc%2Ftest%2Fjava%2Fio%2Fseata%2Fserver%2Flock%2FLockManagerTest.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/29e1928a31a10144ad43cb6d9db5d82b23e9c7fe/server%2Fsrc%2Ftest%2Fjava%2Fio%2Fseata%2Fserver%2Flock%2FLockManagerTest.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Ftest%2Fjava%2Fio%2Fseata%2Fserver%2Flock%2FLockManagerTest.java?ref=29e1928a31a10144ad43cb6d9db5d82b23e9c7fe",
      "patch": "@@ -142,7 +142,7 @@ public void concurrentUseAbilityTest(BranchSession branchSession1, BranchSession\n             }).start();\n             // Assume execute more than 5 seconds means deadlock happened.\n             if (countDownLatch.await(5, TimeUnit.SECONDS)) {\n-                Assertions.assertTrue((first.get() && !second.get()) || (second.get() && !first.get()));\n+                Assertions.assertTrue(!first.get() || !second.get());\n             }\n         } finally {\n             lockManager.releaseLock(branchSession1);",
      "parent_sha": "f7b12f545b2bec5dfca8abea0d81c6552ddb25b8"
    }
  },
  {
    "oid": "a635429ae752a8e40cb3d8e0f950c1b6c5e01e6c",
    "message": "config instance obtained by the factory class",
    "date": "2019-01-16T07:36:23Z",
    "url": "https://github.com/apache/incubator-seata/commit/a635429ae752a8e40cb3d8e0f950c1b6c5e01e6c",
    "details": {
      "sha": "eb5e14c5a43e5dc2b6b4584a35a37907958c52ad",
      "filename": "core/src/main/java/com/alibaba/fescar/core/rpc/netty/NettyServerConfig.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/apache/incubator-seata/blob/a635429ae752a8e40cb3d8e0f950c1b6c5e01e6c/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fcore%2Frpc%2Fnetty%2FNettyServerConfig.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/a635429ae752a8e40cb3d8e0f950c1b6c5e01e6c/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fcore%2Frpc%2Fnetty%2FNettyServerConfig.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fcore%2Frpc%2Fnetty%2FNettyServerConfig.java?ref=a635429ae752a8e40cb3d8e0f950c1b6c5e01e6c",
      "patch": "@@ -17,8 +17,7 @@\n package com.alibaba.fescar.core.rpc.netty;\n \n import com.alibaba.fescar.config.Configuration;\n-import com.alibaba.fescar.config.FileConfiguration;\n-\n+import com.alibaba.fescar.config.ConfigurationFactory;\n import io.netty.buffer.PooledByteBufAllocator;\n import io.netty.channel.ServerChannel;\n import io.netty.channel.epoll.Epoll;\n@@ -46,7 +45,7 @@ public class NettyServerConfig extends NettyBaseConfig {\n     private static final int RPC_REQUEST_TIMEOUT = 30 * 1000;\n     private boolean enableServerPooledByteBufAllocator = true;\n     private int serverChannelMaxIdleTimeSeconds = 30;\n-    private static final Configuration CONFIG = new FileConfiguration();\n+    private static final Configuration CONFIG = ConfigurationFactory.getInstance();\n     private static final String DEFAULT_BOSS_THREAD_PREFIX = \"NettyBoss\";\n     private static final String EPOLL_WORKER_THREAD_PREFIX = \"NettyServerEPollWorker\";\n     private static final String NIO_WORKER_THREAD_PREFIX = \"NettyServerNIOWorker\";",
      "parent_sha": "33275c72a103116e72936d5b91b4a19cc29924a3"
    }
  },
  {
    "oid": "0c2b204c3acfe2a7ec14be99424ca50276492a7f",
    "message": " fix #399 NacosConfiguration getConfig null or not exist should return defaultValue (#400)\n\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* add unit test for some request class (#239)\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* add unit test\r\n\r\n* fix\r\n\r\n* Revert \"add unit test for some request class (#239)\" (#240)\r\n\r\nThis reverts commit d176782766879e5a94bf0c1986242501a36c73ed.\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* update package pom\r\n\r\n* release 0.1.2 (#294)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* change version 0.1.2-SNAPSHOT (#179)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* Fix 3 problems of GlobalTransactionScanner class (#160)\r\n\r\n* 1.Fix the problem of duplicate creating objectes\r\n2.Remove the unnecessary type parameter\r\n\r\n* Let the PROXYED_SET just contains that has method annotated by @GlobalTransactional\r\n\r\n* Let not the first proxyed bean but the multiple proxyed bean can be added to PROXYED_SET\r\n\r\n* fix #201 add sample module sql script (#202)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* Optimize slf4j logger output. (#203)\r\n\r\n* sample OrderServiceImpl long->longValue() (#214)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* add sessionManager unit test (#222)\r\n\r\n* 1.Add static final default FailureHandler to scanner and interceptor (#209)\r\n\r\n2.Move static final field to the head of other fields\r\n\r\n* fixs #227  (#229)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* issue #227 SQLVisitorFactory should recognize FOR UPDATE from normal SELECT SQL\r\n\r\n* fixes #233 add package jvmSettings (#234)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* add  unit test for session package (#237)\r\n\r\n* add copyright and import testng framework\r\n\r\n* add global&branch session unit test\r\n\r\n* issue #244 Should support SQL with table alias (#247)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* issue #227 SQLVisitorFactory should recognize FOR UPDATE from normal SELECT SQL\r\n\r\n* issue #24 Should support SQL with table alias\r\n\r\n* remove useless import\r\n\r\n* Add unit test 20190123 (#248)\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* add unit test\r\n\r\n* extract jdbc config on demo project (#246)\r\n\r\n* extract jdbc config on demo project\r\n\r\n* independent db config for different service.\r\n\r\n* fix #250 add support zk (#253)\r\n\r\n* fix unit test case CodecTest (#261)\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* \u5c0f\u4f18\u5316-\u7c7b\u578b\u8f6c\u6362\r\n\r\n* \u7c7b\u578b\u8f6c\u6362\u5c0f\u4f18\u5316\r\n\r\n* fix unit test class CodecTest.java\r\n\r\n* fix merge conflicts\r\n\r\n* fixes #255 (#256)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* issue #227 SQLVisitorFactory should recognize FOR UPDATE from normal SELECT SQL\r\n\r\n* issue #24 Should support SQL with table alias\r\n\r\n* remove useless import\r\n\r\n* issue #255 Should work with case-sensitive database\r\n\r\n* remove unnecessary check and change some constants to capital letter (#269)\r\n\r\n* spring rm distinct (#263)\r\n\r\n* #266 deal exception scenes of retry rollback failure (#270)\r\n\r\n* add unit test to core module (#276)\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* \u5c0f\u4f18\u5316-\u7c7b\u578b\u8f6c\u6362\r\n\r\n* \u7c7b\u578b\u8f6c\u6362\u5c0f\u4f18\u5316\r\n\r\n* add unit test to fescar/core/message package\r\n\r\n* merge conflichts\r\n\r\n* add lock manager test (#278)\r\n\r\n* add lock manager test\r\n\r\n* add store unit test\r\n\r\n* add unit test for server package LockManager and DefaultCore (#262)\r\n\r\n* add unit test for server lock and default core\r\n\r\n* mysql_recognizer unit_test (#280)\r\n\r\n* mysql_recognizer unit_test\r\n\r\n* format code\r\n\r\n* fixed branchRegister use branchType (#275)\r\n\r\n* fix #271 add FileConfigurationTest, add addConfigListener removeConfigListener getConfigListeners impl, rm sample RmClientAT.init(),fix userDefined timeout not function (#272)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* fix #257 when timeout should break (#283)\r\n\r\n* add volatile (#273)\r\n\r\n* fix #292 update pom package (#293)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* update package pom\r\n\r\n* release 0.1.2 (#296)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* change version 0.1.2-SNAPSHOT (#179)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* Fix 3 problems of GlobalTransactionScanner class (#160)\r\n\r\n* 1.Fix the problem of duplicate creating objectes\r\n2.Remove the unnecessary type parameter\r\n\r\n* Let the PROXYED_SET just contains that has method annotated by @GlobalTransactional\r\n\r\n* Let not the first proxyed bean but the multiple proxyed bean can be added to PROXYED_SET\r\n\r\n* fix #201 add sample module sql script (#202)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* Optimize slf4j logger output. (#203)\r\n\r\n* sample OrderServiceImpl long->longValue() (#214)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* add sessionManager unit test (#222)\r\n\r\n* 1.Add static final default FailureHandler to scanner and interceptor (#209)\r\n\r\n2.Move static final field to the head of other fields\r\n\r\n* fixs #227  (#229)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* issue #227 SQLVisitorFactory should recognize FOR UPDATE from normal SELECT SQL\r\n\r\n* fixes #233 add package jvmSettings (#234)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* add  unit test for session package (#237)\r\n\r\n* add copyright and import testng framework\r\n\r\n* add global&branch session unit test\r\n\r\n* issue #244 Should support SQL with table alias (#247)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* issue #227 SQLVisitorFactory should recognize FOR UPDATE from normal SELECT SQL\r\n\r\n* issue #24 Should support SQL with table alias\r\n\r\n* remove useless import\r\n\r\n* Add unit test 20190123 (#248)\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* add unit test\r\n\r\n* extract jdbc config on demo project (#246)\r\n\r\n* extract jdbc config on demo project\r\n\r\n* independent db config for different service.\r\n\r\n* fix #250 add support zk (#253)\r\n\r\n* fix unit test case CodecTest (#261)\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* \u5c0f\u4f18\u5316-\u7c7b\u578b\u8f6c\u6362\r\n\r\n* \u7c7b\u578b\u8f6c\u6362\u5c0f\u4f18\u5316\r\n\r\n* fix unit test class CodecTest.java\r\n\r\n* fix merge conflicts\r\n\r\n* fixes #255 (#256)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* issue #227 SQLVisitorFactory should recognize FOR UPDATE from normal SELECT SQL\r\n\r\n* issue #24 Should support SQL with table alias\r\n\r\n* remove useless import\r\n\r\n* issue #255 Should work with case-sensitive database\r\n\r\n* remove unnecessary check and change some constants to capital letter (#269)\r\n\r\n* spring rm distinct (#263)\r\n\r\n* #266 deal exception scenes of retry rollback failure (#270)\r\n\r\n* add unit test to core module (#276)\r\n\r\n* release 0.1.1 (#178)\r\n\r\n* Remove redundant semicolons and modify non-standard names\r\n\r\n* remove duplicate RM init\r\n\r\n* issue #86 length of applicationData should be int\r\n\r\n* fix: fixed qualifier\r\n\r\n* Modify method description of DemoCode\r\n\r\n* Update ConfigurationKeys.java\r\n\r\n* config instance obtained by the factory class\r\n\r\n* fix typo of `retryable` as the annotation of Spring Retryable. add static code to init BranchStatus mapper to speed up get(int ordinal)\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* add template\r\n\r\n* fixes #117\r\n\r\n* fixes #114\r\n\r\n* fix issue #122\r\n\r\n* update template\r\n\r\n* fix file.RenameTo->Files.move\r\n\r\n* #73 add travis config\r\n\r\n* fix #121\r\n\r\n* #73 add travis config\r\n\r\n* fix #135 delete BranchSession main\r\n\r\n* fix #137 param position err\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #142 delete defaultEventExecutorGroup (#144)\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fixes #139 heartbeat configurable (#146)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)\r\n\r\n* fix: When local branch change nothing, the RC will rise an NullpointerException (#155)\r\n\r\n* bugfix: when no record changed register localBranch will occur exception\r\nin TC\r\n\r\n* clean the environment\r\n\r\n* enhancement: when no changes in local branch let RC not throw an\r\nNullpointerException\r\n\r\n* change tabs to spaces\r\n\r\n* fix #150 use ServerBootstrap#childOption() to set SO_KEEPALIVE (#151)\r\n\r\n* FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke\r\n\r\n* Netty SO_KEEPALIVE option not works on ServerBootstrap#option(), should replace with ServerBootstrap#childOption()\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n*  fix #149 (long)->Number.longValue (#156)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* remove mistake twitter icon (#165)\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* issue #110 bug fix for RM channel management (#169)\r\n\r\n* issue #110 fix RM channel management\r\n\r\n* fix merge mistake\r\n\r\n* issue #110 enhance: if no channel found on my application set, try other application on the same resource.\r\n\r\n* bug fix and enhance\r\n\r\n* issue #110 enhance the original fix\r\n\r\n* fix: Unify `undo_log` table name variable (#174)\r\n\r\n* ShowSql might be better when debugging to execute the demo to observe the data. (#164)\r\n\r\nissues #158\r\n\r\n* revert OrderServiceImpl\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* add toString method\r\n\r\n* fix\r\n\r\n* \u5c0f\u4f18\u5316-\u7c7b\u578b\u8f6c\u6362\r\n\r\n* \u7c7b\u578b\u8f6c\u6362\u5c0f\u4f18\u5316\r\n\r\n* add unit test to fescar/core/message package\r\n\r\n* merge conflichts\r\n\r\n* add lock manager test (#278)\r\n\r\n* add lock manager test\r\n\r\n* add store unit test\r\n\r\n* add unit test for server package LockManager and DefaultCore (#262)\r\n\r\n* add unit test for server lock and default core\r\n\r\n* mysql_recognizer unit_test (#280)\r\n\r\n* mysql_recognizer unit_test\r\n\r\n* format code\r\n\r\n* fixed branchRegister use branchType (#275)\r\n\r\n* fix #271 add FileConfigurationTest, add addConfigListener removeConfigListener getConfigListeners impl, rm sample RmClientAT.init(),fix userDefined timeout not function (#272)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* fix #257 when timeout should break (#283)\r\n\r\n* add volatile (#273)\r\n\r\n* fix #292 update pom package (#293)\r\n\r\n* fix #142 delete defaultEventExecutorGroup\r\n\r\n* fix #139 netty heartbeat configurable\r\n\r\n* fix #149 (long)->Number.longValue\r\n\r\n* revert OrderServiceImpl, change version 0.1.2-SNAPSHOT\r\n\r\n* fix #201 add sample module sql script\r\n\r\n* fix #206 optimize sample log print location.\r\n\r\n* fix #213 sample OrderServiceImpl long->longValue()\r\n\r\n* fix #233 add package jvmSettings\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* fix #271 add FileConfigurationTest,add addConfigListener removeConfigListener getConfigListeners impl,rm sample RmClientAT.init(),fix user defined timeout not function\r\n\r\n* update package pom\r\n\r\n* release 0.1.2\r\n\r\n* update mvn package\r\n\r\n* fix #325 GlobalTransactionContext.clean in finally,change version to 0.1.3-SNAPSHOT\r\n\r\n* release 0.1.3\r\n\r\n* change version 0.1.4-SNAPSHOT\r\n\r\n* remove examples module\r\n\r\n* remove fescar-client dependency on fescar-all pom\r\n\r\n* support nacos registry and config\r\n\r\n* fix #322 remove NettyServerConfig#CONFIG\r\n\r\n* fix #361 dependency jdk upgrade 1.8\r\n\r\n* Update README.md\r\n\r\n* fix #368 update Readme.md FESCAR-> Fescar\r\n\r\n* fix #371 fescar support nacos registry and config\r\n\r\n* fix #394 rename discover module to discovery\r\n\r\n* fix #399 NacosConfiguration getConfig null or not exist should return defaultValue",
    "date": "2019-02-14T10:35:37Z",
    "url": "https://github.com/apache/incubator-seata/commit/0c2b204c3acfe2a7ec14be99424ca50276492a7f",
    "details": {
      "sha": "fcc8e4fa4755c6cd9a181875cf98299d4cd120ab",
      "filename": "config/src/main/java/com/alibaba/fescar/config/NacosConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/0c2b204c3acfe2a7ec14be99424ca50276492a7f/config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fconfig%2FNacosConfiguration.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/0c2b204c3acfe2a7ec14be99424ca50276492a7f/config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fconfig%2FNacosConfiguration.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/config%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fconfig%2FNacosConfiguration.java?ref=0c2b204c3acfe2a7ec14be99424ca50276492a7f",
      "patch": "@@ -61,7 +61,7 @@ public String getConfig(String dataId, String defaultValue, long timeoutMills) {\n             LOGGER.error(exx.getErrMsg());\n             value = defaultValue;\n         }\n-        return value;\n+        return value == null ? defaultValue : value;\n     }\n \n     @Override",
      "parent_sha": "e422d1262888d1164fb086765bfa24e40785e493"
    }
  },
  {
    "oid": "bd24385fa3a4fbdcda82482c7b8450189310985e",
    "message": "normative variables,i think it is final may be better (#553)",
    "date": "2019-03-07T16:25:37Z",
    "url": "https://github.com/apache/incubator-seata/commit/bd24385fa3a4fbdcda82482c7b8450189310985e",
    "details": {
      "sha": "b5b46d29c30556fe17a3952f11c9c9d9a16c553d",
      "filename": "core/src/main/java/com/alibaba/fescar/core/protocol/HeartbeatMessage.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/incubator-seata/blob/bd24385fa3a4fbdcda82482c7b8450189310985e/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fcore%2Fprotocol%2FHeartbeatMessage.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/bd24385fa3a4fbdcda82482c7b8450189310985e/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fcore%2Fprotocol%2FHeartbeatMessage.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fcore%2Fprotocol%2FHeartbeatMessage.java?ref=bd24385fa3a4fbdcda82482c7b8450189310985e",
      "patch": "@@ -30,11 +30,11 @@ public class HeartbeatMessage implements Serializable {\n     /**\n      * The constant PING.\n      */\n-    public static HeartbeatMessage PING = new HeartbeatMessage(true);\n+    public static final HeartbeatMessage PING = new HeartbeatMessage(true);\n     /**\n      * The constant PONG.\n      */\n-    public static HeartbeatMessage PONG = new HeartbeatMessage(false);\n+    public static final HeartbeatMessage PONG = new HeartbeatMessage(false);\n \n     private HeartbeatMessage(boolean pingOrPong) {\n         this.pingOrPong = pingOrPong;",
      "parent_sha": "39c7410677376241c103a22560310a33bfc70ca6"
    }
  },
  {
    "oid": "c18e3ae417417a07f8bd403422f031cced92eb5b",
    "message": "fix #803  use queue instead of list to avoid concurrent modify exception(#877)",
    "date": "2019-04-23T11:28:25Z",
    "url": "https://github.com/apache/incubator-seata/commit/c18e3ae417417a07f8bd403422f031cced92eb5b",
    "details": {
      "sha": "bcae3b3c52835da391075756f319ac850bf7c799",
      "filename": "rm-datasource/src/main/java/io/seata/rm/datasource/AsyncWorker.java",
      "status": "modified",
      "additions": 9,
      "deletions": 12,
      "changes": 21,
      "blob_url": "https://github.com/apache/incubator-seata/blob/c18e3ae417417a07f8bd403422f031cced92eb5b/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2FAsyncWorker.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/c18e3ae417417a07f8bd403422f031cced92eb5b/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2FAsyncWorker.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2FAsyncWorker.java?ref=c18e3ae417417a07f8bd403422f031cced92eb5b",
      "patch": "@@ -27,13 +27,14 @@\n import io.seata.core.model.ResourceManagerInbound;\n import io.seata.rm.DefaultResourceManager;\n import io.seata.rm.datasource.undo.UndoLogManager;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.sql.Connection;\n import java.sql.SQLException;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.LinkedHashSet;\n@@ -101,19 +102,17 @@ public Phase2Context(BranchType branchType, String xid, long branchId, String re\n         BranchType branchType;\n     }\n \n-    private static final List<Phase2Context> ASYNC_COMMIT_BUFFER = Collections.synchronizedList(\n-        new ArrayList<Phase2Context>());\n-\n     private static int ASYNC_COMMIT_BUFFER_LIMIT = ConfigurationFactory.getInstance().getInt(\n         CLIENT_ASYNC_COMMIT_BUFFER_LIMIT, 10000);\n \n+    private static final BlockingQueue<Phase2Context> ASYNC_COMMIT_BUFFER = new LinkedBlockingQueue<>(ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+\n     private static ScheduledExecutorService timerExecutor;\n \n     @Override\n     public BranchStatus branchCommit(BranchType branchType, String xid, long branchId, String resourceId, String applicationData) throws TransactionException {\n-        if (ASYNC_COMMIT_BUFFER.size() < ASYNC_COMMIT_BUFFER_LIMIT) {\n-            ASYNC_COMMIT_BUFFER.add(new Phase2Context(branchType, xid, branchId, resourceId, applicationData));\n-        } else {\n+        if (!ASYNC_COMMIT_BUFFER.offer(new Phase2Context(branchType, xid, branchId, resourceId, applicationData))) {\n             LOGGER.warn(\"Async commit buffer is FULL. Rejected branch [\" + branchId + \"/\" + xid + \"] will be handled by housekeeping later.\");\n         }\n         return BranchStatus.PhaseTwo_Committed;\n@@ -145,19 +144,17 @@ private void doBranchCommits() {\n         if (ASYNC_COMMIT_BUFFER.size() == 0) {\n             return;\n         }\n+\n         Map<String, List<Phase2Context>> mappedContexts = new HashMap<>(DEFAULT_RESOURCE_SIZE);\n-        Iterator<Phase2Context> iterator = ASYNC_COMMIT_BUFFER.iterator();\n-        while (iterator.hasNext()) {\n-            Phase2Context commitContext = iterator.next();\n+        while (!ASYNC_COMMIT_BUFFER.isEmpty()) {\n+            Phase2Context commitContext = ASYNC_COMMIT_BUFFER.poll();\n             List<Phase2Context> contextsGroupedByResourceId = mappedContexts.get(commitContext.resourceId);\n             if (contextsGroupedByResourceId == null) {\n                 contextsGroupedByResourceId = new ArrayList<>();\n                 mappedContexts.put(commitContext.resourceId, contextsGroupedByResourceId);\n             }\n             contextsGroupedByResourceId.add(commitContext);\n \n-            iterator.remove();\n-\n         }\n \n         for (Map.Entry<String, List<Phase2Context>> entry : mappedContexts.entrySet()) {",
      "parent_sha": "3af5c3fbb053c8e23b9a42090e41aa6a0261d2c1"
    }
  },
  {
    "oid": "d8c09ab9469d468f5985c32d35c29e56173b7fd6",
    "message": "bugfix: zk node path is converted to dataId error (#3635)",
    "date": "2021-04-15T14:28:21Z",
    "url": "https://github.com/apache/incubator-seata/commit/d8c09ab9469d468f5985c32d35c29e56173b7fd6",
    "details": {
      "sha": "70d681a8ef78f45d83c1030cb8041570cfab4b37",
      "filename": "config/seata-config-zk/src/main/java/io/seata/config/zk/ZookeeperConfiguration.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/apache/incubator-seata/blob/d8c09ab9469d468f5985c32d35c29e56173b7fd6/config%2Fseata-config-zk%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fconfig%2Fzk%2FZookeeperConfiguration.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/d8c09ab9469d468f5985c32d35c29e56173b7fd6/config%2Fseata-config-zk%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fconfig%2Fzk%2FZookeeperConfiguration.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/config%2Fseata-config-zk%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fconfig%2Fzk%2FZookeeperConfiguration.java?ref=d8c09ab9469d468f5985c32d35c29e56173b7fd6",
      "patch": "@@ -348,15 +348,16 @@ public void handleDataChange(String s, Object o) {\n \n                 return;\n             }\n-\n-            ConfigurationChangeEvent event = new ConfigurationChangeEvent().setDataId(s).setNewValue(o.toString())\n-                    .setChangeType(ConfigurationChangeType.MODIFY);\n+            String dataId = s.replaceFirst(ROOT_PATH + ZK_PATH_SPLIT_CHAR, \"\");\n+            ConfigurationChangeEvent event = new ConfigurationChangeEvent().setDataId(dataId).setNewValue(o.toString())\n+                .setChangeType(ConfigurationChangeType.MODIFY);\n             listener.onProcessEvent(event);\n         }\n \n         @Override\n         public void handleDataDeleted(String s) {\n-            ConfigurationChangeEvent event = new ConfigurationChangeEvent().setDataId(s).setChangeType(\n+            String dataId = s.replaceFirst(ROOT_PATH + ZK_PATH_SPLIT_CHAR, \"\");\n+            ConfigurationChangeEvent event = new ConfigurationChangeEvent().setDataId(dataId).setChangeType(\n                     ConfigurationChangeType.DELETE);\n             listener.onProcessEvent(event);\n         }",
      "parent_sha": "d724cdae8bdaca80b933f5cb3d3e55674576d672"
    }
  },
  {
    "oid": "d68d16d9a8b3387058665306f81027fcc48f7746",
    "message": "optimize: replace with lambda (#2967)",
    "date": "2020-08-04T09:53:37Z",
    "url": "https://github.com/apache/incubator-seata/commit/d68d16d9a8b3387058665306f81027fcc48f7746",
    "details": {
      "sha": "9afec03ad450da77b4821af2b9b46b0cea7ed20b",
      "filename": "core/src/main/java/io/seata/core/context/ThreadLocalContextCore.java",
      "status": "modified",
      "additions": 1,
      "deletions": 8,
      "changes": 9,
      "blob_url": "https://github.com/apache/incubator-seata/blob/d68d16d9a8b3387058665306f81027fcc48f7746/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fcontext%2FThreadLocalContextCore.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/d68d16d9a8b3387058665306f81027fcc48f7746/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fcontext%2FThreadLocalContextCore.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fcontext%2FThreadLocalContextCore.java?ref=d68d16d9a8b3387058665306f81027fcc48f7746",
      "patch": "@@ -17,7 +17,6 @@\n \n import java.util.HashMap;\n import java.util.Map;\n-\n import io.seata.common.loader.LoadLevel;\n \n /**\n@@ -28,13 +27,7 @@\n @LoadLevel(name = \"ThreadLocalContextCore\", order = Integer.MIN_VALUE)\n public class ThreadLocalContextCore implements ContextCore {\n \n-    private ThreadLocal<Map<String, String>> threadLocal = new ThreadLocal<Map<String, String>>() {\n-        @Override\n-        protected Map<String, String> initialValue() {\n-            return new HashMap<String, String>();\n-        }\n-\n-    };\n+    private ThreadLocal<Map<String, String>> threadLocal = ThreadLocal.withInitial(() -> new HashMap<>());\n \n     @Override\n     public String put(String key, String value) {",
      "parent_sha": "0d16fb848d0efb0c03687213e598e59264035810"
    }
  },
  {
    "oid": "edb4e718a4b79b8c120a4deebd5d3418c75b4ae9",
    "message": "fix #576 when target is jdk-proxy, GlobalTransactional not function (#584)",
    "date": "2019-03-27T08:37:49Z",
    "url": "https://github.com/apache/incubator-seata/commit/edb4e718a4b79b8c120a4deebd5d3418c75b4ae9",
    "details": {
      "sha": "17aff9dc5f682eafdaa374fa6475d206991efb25",
      "filename": "spring/src/main/java/com/alibaba/fescar/spring/annotation/GlobalTransactionalInterceptor.java",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/apache/incubator-seata/blob/edb4e718a4b79b8c120a4deebd5d3418c75b4ae9/spring%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fspring%2Fannotation%2FGlobalTransactionalInterceptor.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/edb4e718a4b79b8c120a4deebd5d3418c75b4ae9/spring%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fspring%2Fannotation%2FGlobalTransactionalInterceptor.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/spring%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fspring%2Fannotation%2FGlobalTransactionalInterceptor.java?ref=edb4e718a4b79b8c120a4deebd5d3418c75b4ae9",
      "patch": "@@ -33,6 +33,9 @@\n import org.aopalliance.intercept.MethodInvocation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.aop.support.AopUtils;\n+import org.springframework.core.BridgeMethodResolver;\n+import org.springframework.util.ClassUtils;\n \n /**\n  * The type Global transactional interceptor.\n@@ -60,12 +63,15 @@ public GlobalTransactionalInterceptor(FailureHandler failureHandler) {\n \n     @Override\n     public Object invoke(final MethodInvocation methodInvocation) throws Throwable {\n-        final GlobalTransactional globalTrxAnno = getAnnotation(methodInvocation.getMethod(),\n-            GlobalTransactional.class);\n-        final GlobalLock globalLockAnno = getAnnotation(methodInvocation.getMethod(), GlobalLock.class);\n-        if (globalTrxAnno != null) {\n-            return handleGlobalTransaction(methodInvocation, globalTrxAnno);\n-        } else if (globalLockAnno != null) {\n+        Class<?> targetClass = (methodInvocation.getThis() != null ? AopUtils.getTargetClass(methodInvocation.getThis()) : null);\n+        Method specificMethod = ClassUtils.getMostSpecificMethod(methodInvocation.getMethod(), targetClass);\n+        final Method method = BridgeMethodResolver.findBridgedMethod(specificMethod);\n+\n+        final GlobalTransactional globalTransactionalAnnotation = getAnnotation(method, GlobalTransactional.class);\n+        final GlobalLock globalLockAnnotation = getAnnotation(method, GlobalLock.class);\n+        if (globalTransactionalAnnotation != null) {\n+            return handleGlobalTransaction(methodInvocation, globalTransactionalAnnotation);\n+        } else if (globalLockAnnotation != null) {\n             return handleGlobalLock(methodInvocation);\n         } else {\n             return methodInvocation.proceed();",
      "parent_sha": "c10a9d32f676ab5282919aa11b93504b5d36a0e2"
    }
  },
  {
    "oid": "d9589971d434162d79df5bee8888b5ab186a9c71",
    "message": "bugfix: fix rm client receive response logic. (#2887)",
    "date": "2020-07-14T14:04:43Z",
    "url": "https://github.com/apache/incubator-seata/commit/d9589971d434162d79df5bee8888b5ab186a9c71",
    "details": {
      "sha": "5e21b8a1c9de02c0fb7a76eb1b8771235178c644",
      "filename": "rm/src/main/java/io/seata/rm/AbstractRMHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/apache/incubator-seata/blob/d9589971d434162d79df5bee8888b5ab186a9c71/rm%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2FAbstractRMHandler.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/d9589971d434162d79df5bee8888b5ab186a9c71/rm%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2FAbstractRMHandler.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2FAbstractRMHandler.java?ref=d9589971d434162d79df5bee8888b5ab186a9c71",
      "patch": "@@ -15,7 +15,6 @@\n  */\n package io.seata.rm;\n \n-import io.seata.common.exception.ShouldNeverHappenException;\n import io.seata.core.exception.AbstractExceptionHandler;\n import io.seata.core.exception.TransactionException;\n import io.seata.core.model.BranchStatus;\n@@ -153,7 +152,7 @@ public AbstractResultMessage onRequest(AbstractMessage request, RpcContext conte\n \n     @Override\n     public void onResponse(AbstractResultMessage response, RpcContext context) {\n-        throw new ShouldNeverHappenException();\n+        LOGGER.info(\"the rm client received response msg [{}] from tc server.\", response.toString());\n     }\n \n     public abstract BranchType getBranchType();",
      "parent_sha": "d1b2f1f15cead74cd38c3908e43fc100213d8ceb"
    }
  },
  {
    "oid": "f8f488b03997feb76755bd8fee44dec10cd732c5",
    "message": "fix: Unify `undo_log` table name variable (#174)",
    "date": "2019-01-18T09:21:17Z",
    "url": "https://github.com/apache/incubator-seata/commit/f8f488b03997feb76755bd8fee44dec10cd732c5",
    "details": {
      "sha": "b170ec136ea8c6cfc4ff13e25a33d569cdd16d54",
      "filename": "rm-datasource/src/main/java/com/alibaba/fescar/rm/datasource/undo/UndoLogManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/f8f488b03997feb76755bd8fee44dec10cd732c5/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Frm%2Fdatasource%2Fundo%2FUndoLogManager.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/f8f488b03997feb76755bd8fee44dec10cd732c5/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Frm%2Fdatasource%2Fundo%2FUndoLogManager.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Frm%2Fdatasource%2Fundo%2FUndoLogManager.java?ref=f8f488b03997feb76755bd8fee44dec10cd732c5",
      "patch": "@@ -50,7 +50,7 @@ public final class UndoLogManager {\n     private static String DELETE_UNDO_LOG_SQL = \"DELETE FROM \" + UNDO_LOG_TABLE_NAME + \"\\n\" +\n             \"\\tWHERE branch_id = ? AND xid = ?\";\n \n-    private static String SELECT_UNDO_LOG_SQL = \"SELECT * FROM undo_log WHERE log_status = 0 AND branch_id = ? AND xid = ? FOR UPDATE\";\n+    private static String SELECT_UNDO_LOG_SQL = \"SELECT * FROM \" + UNDO_LOG_TABLE_NAME + \" WHERE log_status = 0 AND branch_id = ? AND xid = ? FOR UPDATE\";\n \n     private UndoLogManager() {\n ",
      "parent_sha": "105e24a253488d82f476608a4c5ceab06e4c9765"
    }
  },
  {
    "oid": "72d238d0961ef544e0e7ea929130ebb3c65ebf5c",
    "message": "FileTransactionStoreManager#closeFile() method remove redundant fileChannel.close() invoke (#140)",
    "date": "2019-01-17T08:58:00Z",
    "url": "https://github.com/apache/incubator-seata/commit/72d238d0961ef544e0e7ea929130ebb3c65ebf5c",
    "details": {
      "sha": "88e9c5fbe4c93038f6985f41b3d3c5a8ff18bc01",
      "filename": "server/src/main/java/com/alibaba/fescar/server/store/FileTransactionStoreManager.java",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/apache/incubator-seata/blob/72d238d0961ef544e0e7ea929130ebb3c65ebf5c/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2Fstore%2FFileTransactionStoreManager.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/72d238d0961ef544e0e7ea929130ebb3c65ebf5c/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2Fstore%2FFileTransactionStoreManager.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2Fstore%2FFileTransactionStoreManager.java?ref=72d238d0961ef544e0e7ea929130ebb3c65ebf5c",
      "patch": "@@ -177,7 +177,7 @@ public boolean hasRemaining(boolean isHistory) {\n \n         } catch (IOException exx) {\n         } finally {\n-            closeFile(raf, null);\n+            closeFile(raf);\n         }\n         return false;\n     }\n@@ -228,7 +228,7 @@ private List<TransactionWriteStore> parseDataFile(File file, int readSize, long\n                         recoverCurrOffset = fileChannel.position();\n                     }\n                 }\n-                closeFile(raf, fileChannel);\n+                closeFile(raf);\n             } catch (IOException exx) {\n                 LOGGER.error(\"file close error,\" + exx.getMessage());\n             }\n@@ -241,12 +241,8 @@ private boolean isHisFile(File file) {\n         return file.getName().endsWith(HIS_DATA_FILENAME_POSTFIX);\n     }\n \n-    private void closeFile(RandomAccessFile raf, FileChannel fileChannel) {\n+    private void closeFile(RandomAccessFile raf) {\n         try {\n-            if (null != fileChannel) {\n-                fileChannel.close();\n-                fileChannel = null;\n-            }\n             if (null != raf) {\n                 raf.close();\n                 raf = null;\n@@ -353,7 +349,7 @@ private void saveHistory() throws IOException {\n                     }\n                 }\n                 currFileChannel.force(true);\n-                closeFile(currRaf, currFileChannel);\n+                closeFile(currRaf);\n                 Files.move(currDataFile.toPath(), new File(hisFullFileName).toPath(),\n                     StandardCopyOption.REPLACE_EXISTING);\n             } catch (IOException exx) {",
      "parent_sha": "ed4eddb5c0e76cd50eb29c9fd00a272fa51c21ac"
    }
  },
  {
    "oid": "7696cd855828a33bb2b4913e82a0842988e9e1f7",
    "message": "optimize: oracle index (#1583)\n\nSigned-off-by: slievrly <slievrly@163.com>",
    "date": "2019-09-06T02:23:13Z",
    "url": "https://github.com/apache/incubator-seata/commit/7696cd855828a33bb2b4913e82a0842988e9e1f7",
    "details": {
      "sha": "77334585cea08686c0f52ed16ae9fe94fa6fe95b",
      "filename": "rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/TableMetaCacheOracle.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/apache/incubator-seata/blob/7696cd855828a33bb2b4913e82a0842988e9e1f7/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fsql%2Fstruct%2FTableMetaCacheOracle.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/7696cd855828a33bb2b4913e82a0842988e9e1f7/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fsql%2Fstruct%2FTableMetaCacheOracle.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fsql%2Fstruct%2FTableMetaCacheOracle.java?ref=7696cd855828a33bb2b4913e82a0842988e9e1f7",
      "patch": "@@ -170,9 +170,7 @@ private static TableMeta resultSetMetaToSchema(DatabaseMetaData dbmd, String tab\n                     index.setAscOrDesc(rsIndex.getString(\"ASC_OR_DESC\"));\n                     index.setCardinality(rsIndex.getInt(\"CARDINALITY\"));\n                     index.getValues().add(col);\n-                    if (\"PRIMARY\".equalsIgnoreCase(indexName)) {\n-                        index.setIndextype(IndexType.PRIMARY);\n-                    } else if (!index.isNonUnique()) {\n+                    if (!index.isNonUnique()) {\n                         index.setIndextype(IndexType.Unique);\n                     } else {\n                         index.setIndextype(IndexType.Normal);\n@@ -183,7 +181,7 @@ private static TableMeta resultSetMetaToSchema(DatabaseMetaData dbmd, String tab\n             }\n \n             while (rsPrimary.next()) {\n-                String pkIndexName = rsPrimary.getObject(6).toString();\n+                String pkIndexName = rsPrimary.getString(\"PK_NAME\");\n                 if (tm.getAllIndexes().containsKey(pkIndexName)) {\n                     IndexMeta index = tm.getAllIndexes().get(pkIndexName);\n                     index.setIndextype(IndexType.PRIMARY);",
      "parent_sha": "6c7df969f549cbd8e768e022fc8dd1561acd8b7b"
    }
  },
  {
    "oid": "11ffe19aa470a3ca84a4e0dd0667449075dfb511",
    "message": "bugfix: the disposables tree set won't accept another Disposable with the same priority (#3170)",
    "date": "2020-10-20T03:31:10Z",
    "url": "https://github.com/apache/incubator-seata/commit/11ffe19aa470a3ca84a4e0dd0667449075dfb511",
    "details": {
      "sha": "543bcd68f7ce597949eb1f788b171500793b87ce",
      "filename": "core/src/main/java/io/seata/core/rpc/ShutdownHook.java",
      "status": "modified",
      "additions": 36,
      "deletions": 8,
      "changes": 44,
      "blob_url": "https://github.com/apache/incubator-seata/blob/11ffe19aa470a3ca84a4e0dd0667449075dfb511/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2FShutdownHook.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/11ffe19aa470a3ca84a4e0dd0667449075dfb511/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2FShutdownHook.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Frpc%2FShutdownHook.java?ref=11ffe19aa470a3ca84a4e0dd0667449075dfb511",
      "patch": "@@ -15,10 +15,10 @@\n  */\n package io.seata.core.rpc;\n \n-import java.util.Objects;\n import java.util.Set;\n import java.util.TreeSet;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n \n import io.seata.common.util.CollectionUtils;\n import org.slf4j.Logger;\n@@ -91,35 +91,63 @@ public static void removeRuntimeShutdownHook() {\n \n     private static class DisposablePriorityWrapper implements Comparable<DisposablePriorityWrapper>, Disposable {\n \n+        private static AtomicLong seq = new AtomicLong();\n+\n         private Disposable disposable;\n \n         private int priority;\n \n+        private long seqId;\n+\n         public DisposablePriorityWrapper(Disposable disposable, int priority) {\n             this.disposable = disposable;\n             this.priority = priority;\n+            this.seqId = seq.incrementAndGet();\n         }\n \n         @Override\n         public int compareTo(DisposablePriorityWrapper disposablePriorityWrapper) {\n-            return priority - disposablePriorityWrapper.priority;\n+            int cmp = priority - disposablePriorityWrapper.priority;\n+            if (cmp == 0) {\n+                if (seqId > disposablePriorityWrapper.seqId) {\n+                    cmp = 1;\n+                } else if (seqId < disposablePriorityWrapper.seqId) {\n+                    cmp = -1;\n+                } else {\n+                    cmp = 0;\n+                }\n+            }\n+            return cmp;\n         }\n \n         @Override\n         public int hashCode() {\n-            return Objects.hashCode(this.priority);\n+            final int prime = 31;\n+            int result = 1;\n+            result = prime * result + priority;\n+            result = prime * result + (int) (seqId ^ (seqId >>> 32));\n+            return result;\n         }\n \n         @Override\n-        public boolean equals(Object other) {\n-            if (this == other) {\n+        public boolean equals(Object obj) {\n+            if (this == obj) {\n                 return true;\n             }\n-            if (!(other instanceof DisposablePriorityWrapper)) {\n+            if (obj == null) {\n+                return false;\n+            }\n+            if (getClass() != obj.getClass()) {\n+                return false;\n+            }\n+            DisposablePriorityWrapper other = (DisposablePriorityWrapper) obj;\n+            if (priority != other.priority) {\n+                return false;\n+            }\n+            if (seqId != other.seqId) {\n                 return false;\n             }\n-            DisposablePriorityWrapper dpw = (DisposablePriorityWrapper)other;\n-            return this.priority == dpw.priority && this.disposable.equals(dpw.disposable);\n+            return true;\n         }\n \n         @Override",
      "parent_sha": "fdf648470cf6e9dabe145b2be0e531954a310a42"
    }
  },
  {
    "oid": "a5b9a895ad6e11261a9719adea1ecd87ef5a17aa",
    "message": "fix when loop start,it will be parked (#929)",
    "date": "2019-05-06T02:48:01Z",
    "url": "https://github.com/apache/incubator-seata/commit/a5b9a895ad6e11261a9719adea1ecd87ef5a17aa",
    "details": {
      "sha": "30bb8e6a9afb6f5cdb25c2411a24ea462bf2f276",
      "filename": "server/src/main/java/io/seata/server/session/GlobalSession.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/a5b9a895ad6e11261a9719adea1ecd87ef5a17aa/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fsession%2FGlobalSession.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/a5b9a895ad6e11261a9719adea1ecd87ef5a17aa/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fsession%2FGlobalSession.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fsession%2FGlobalSession.java?ref=a5b9a895ad6e11261a9719adea1ecd87ef5a17aa",
      "patch": "@@ -516,7 +516,7 @@ private class GlobalSessionSpinLock{\n \n         public void lock() throws TransactionException {\n             boolean flag;\n-            int times = 0;\n+            int times = 1;\n             long beginTime = System.currentTimeMillis();\n             do {\n                 long restTime = GLOBAL_SESSOION_LOCK_TIME_OUT_MILLS - (System.currentTimeMillis() - beginTime);",
      "parent_sha": "a670592e1eb11b9d7aa0408a300d99467eead811"
    }
  },
  {
    "oid": "6c46de7fd3aefe91f28793ac9bf9d910f328bebb",
    "message": "bugfix: memory visibility of active attribute in file mode (#2466)",
    "date": "2020-03-31T09:21:06Z",
    "url": "https://github.com/apache/incubator-seata/commit/6c46de7fd3aefe91f28793ac9bf9d910f328bebb",
    "details": {
      "sha": "70ec04c8e69723055492e6e7f1d419f70a75d902",
      "filename": "server/src/main/java/io/seata/server/session/GlobalSession.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/6c46de7fd3aefe91f28793ac9bf9d910f328bebb/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fsession%2FGlobalSession.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/6c46de7fd3aefe91f28793ac9bf9d910f328bebb/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fsession%2FGlobalSession.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fsession%2FGlobalSession.java?ref=6c46de7fd3aefe91f28793ac9bf9d910f328bebb",
      "patch": "@@ -70,7 +70,7 @@ public class GlobalSession implements SessionLifecycle, SessionStorable {\n \n     private String applicationData;\n \n-    private boolean active = true;\n+    private volatile boolean active = true;\n \n     private final ArrayList<BranchSession> branchSessions = new ArrayList<>();\n ",
      "parent_sha": "5767edb35d1c0327cbe6ad24dcfb637d22e1d13a"
    }
  },
  {
    "oid": "bd4e464e648707dfcaa507b931ee64791fee1500",
    "message": "avoid duplicate lock key (#1058)",
    "date": "2019-05-17T07:53:39Z",
    "url": "https://github.com/apache/incubator-seata/commit/bd4e464e648707dfcaa507b931ee64791fee1500",
    "details": {
      "sha": "5eb96a49ada14749c39e18a54bcfe8e5b4ee004b",
      "filename": "rm-datasource/src/main/java/io/seata/rm/datasource/ConnectionContext.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/apache/incubator-seata/blob/bd4e464e648707dfcaa507b931ee64791fee1500/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2FConnectionContext.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/bd4e464e648707dfcaa507b931ee64791fee1500/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2FConnectionContext.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2FConnectionContext.java?ref=bd4e464e648707dfcaa507b931ee64791fee1500",
      "patch": "@@ -16,12 +16,13 @@\n package io.seata.rm.datasource;\n \n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Set;\n \n import io.seata.common.exception.ShouldNeverHappenException;\n import io.seata.rm.datasource.undo.SQLUndoLog;\n-import io.seata.rm.datasource.undo.SQLUndoLog;\n \n /**\n  * The type Connection context.\n@@ -32,7 +33,8 @@ public class ConnectionContext {\n     private String xid;\n     private Long branchId;\n     private boolean isGlobalLockRequire;\n-    private List<String> lockKeysBuffer = new ArrayList<>();\n+    //table and primary key should not be duplicated\n+    private Set<String> lockKeysBuffer = new HashSet<>();\n     private List<SQLUndoLog> sqlUndoItemsBuffer = new ArrayList<>();\n \n     /**",
      "parent_sha": "9b8d7503810f705cae4526bdfa3af658b143e91d"
    }
  },
  {
    "oid": "711c2ec13351cd01da0431fda8fd384d4396988f",
    "message": "bugfix: fix not return value when branchCommit and branchRollback throw exception (#2755)",
    "date": "2020-06-05T15:11:19Z",
    "url": "https://github.com/apache/incubator-seata/commit/711c2ec13351cd01da0431fda8fd384d4396988f",
    "details": {
      "sha": "0e9242f1cf65aeab29cd4080dbb65c27ffa3674d",
      "filename": "tcc/src/main/java/io/seata/rm/tcc/TCCResourceManager.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/apache/incubator-seata/blob/711c2ec13351cd01da0431fda8fd384d4396988f/tcc%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Ftcc%2FTCCResourceManager.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/711c2ec13351cd01da0431fda8fd384d4396988f/tcc%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Ftcc%2FTCCResourceManager.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/tcc%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Ftcc%2FTCCResourceManager.java?ref=711c2ec13351cd01da0431fda8fd384d4396988f",
      "patch": "@@ -23,7 +23,6 @@\n import com.alibaba.fastjson.JSON;\n \n import io.seata.common.Constants;\n-import io.seata.common.exception.FrameworkException;\n import io.seata.common.exception.ShouldNeverHappenException;\n import io.seata.common.util.StringUtils;\n import io.seata.core.exception.TransactionException;\n@@ -109,7 +108,7 @@ public BranchStatus branchCommit(BranchType branchType, String xid, long branchI\n         } catch (Throwable t) {\n             String msg = String.format(\"commit TCC resource error, resourceId: %s, xid: %s.\", resourceId, xid);\n             LOGGER.error(msg, t);\n-            throw new FrameworkException(t, msg);\n+            return BranchStatus.PhaseTwo_CommitFailed_Retryable;\n         }\n     }\n \n@@ -154,7 +153,7 @@ public BranchStatus branchRollback(BranchType branchType, String xid, long branc\n         } catch (Throwable t) {\n             String msg = String.format(\"rollback TCC resource error, resourceId: %s, xid: %s.\", resourceId, xid);\n             LOGGER.error(msg, t);\n-            throw new FrameworkException(t, msg);\n+            return BranchStatus.PhaseTwo_RollbackFailed_Retryable;\n         }\n     }\n ",
      "parent_sha": "40bd36b9f1370dfbafa8065362111b506ffd1eb1"
    }
  },
  {
    "oid": "2c83e0b778ae0a2fa7e721856faf8e2f57e9734f",
    "message": "bugfix: fix bug of session store path value judgment (#2505)",
    "date": "2020-04-03T05:51:07Z",
    "url": "https://github.com/apache/incubator-seata/commit/2c83e0b778ae0a2fa7e721856faf8e2f57e9734f",
    "details": {
      "sha": "2d45acfb09ae32e1e9ec725182ccee39632a28fb",
      "filename": "server/src/main/java/io/seata/server/session/SessionHolder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/2c83e0b778ae0a2fa7e721856faf8e2f57e9734f/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fsession%2FSessionHolder.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/2c83e0b778ae0a2fa7e721856faf8e2f57e9734f/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fsession%2FSessionHolder.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fsession%2FSessionHolder.java?ref=2c83e0b778ae0a2fa7e721856faf8e2f57e9734f",
      "patch": "@@ -98,7 +98,7 @@ public static void init(String mode) throws IOException {\n             //file store\n             String sessionStorePath = CONFIG.getConfig(ConfigurationKeys.STORE_FILE_DIR,\n                 DEFAULT_SESSION_STORE_FILE_DIR);\n-            if (sessionStorePath == null) {\n+            if (StringUtils.isBlank(sessionStorePath)) {\n                 throw new StoreException(\"the {store.file.dir} is empty.\");\n             }\n             ROOT_SESSION_MANAGER = EnhancedServiceLoader.load(SessionManager.class, StoreMode.FILE.getName(),",
      "parent_sha": "69e5ae1f95b4961a75ccaf5e25b3e1494cb094da"
    }
  },
  {
    "oid": "68f89511427d70649ce54f495aa7c3cda20d46d6",
    "message": "add volatile (#273)",
    "date": "2019-01-25T09:14:19Z",
    "url": "https://github.com/apache/incubator-seata/commit/68f89511427d70649ce54f495aa7c3cda20d46d6",
    "details": {
      "sha": "6e8a0441b5bc18bb23f09e1c02fd6370dac3de91",
      "filename": "core/src/main/java/com/alibaba/fescar/core/rpc/netty/AbstractRpcRemoting.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/68f89511427d70649ce54f495aa7c3cda20d46d6/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fcore%2Frpc%2Fnetty%2FAbstractRpcRemoting.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/68f89511427d70649ce54f495aa7c3cda20d46d6/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fcore%2Frpc%2Fnetty%2FAbstractRpcRemoting.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fcore%2Frpc%2Fnetty%2FAbstractRpcRemoting.java?ref=68f89511427d70649ce54f495aa7c3cda20d46d6",
      "patch": "@@ -96,7 +96,7 @@ public abstract class AbstractRpcRemoting extends ChannelDuplexHandler {\n     /**\n      * The Is sending.\n      */\n-    protected boolean isSending = false;\n+    protected volatile boolean isSending = false;\n     private String group = \"DEFAULT\";\n     /**\n      * The Merge msg map.",
      "parent_sha": "2b49586b54b1383b5daafa2ecb0252d87306abf5"
    }
  },
  {
    "oid": "2a528dcfb9b6558ed49199be015fde6491a0e90c",
    "message": "Change LockMode from MEMORY to DB when the StoreMode is DB (#1145)",
    "date": "2019-06-05T07:59:49Z",
    "url": "https://github.com/apache/incubator-seata/commit/2a528dcfb9b6558ed49199be015fde6491a0e90c",
    "details": {
      "sha": "d3cbddd54848387edd1cb0495ef797b90ac7b4f6",
      "filename": "server/src/main/java/io/seata/server/lock/LockerFactory.java",
      "status": "modified",
      "additions": 17,
      "deletions": 5,
      "changes": 22,
      "blob_url": "https://github.com/apache/incubator-seata/blob/2a528dcfb9b6558ed49199be015fde6491a0e90c/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Flock%2FLockerFactory.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/2a528dcfb9b6558ed49199be015fde6491a0e90c/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Flock%2FLockerFactory.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Flock%2FLockerFactory.java?ref=2a528dcfb9b6558ed49199be015fde6491a0e90c",
      "patch": "@@ -15,19 +15,21 @@\n  */\n package io.seata.server.lock;\n \n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n-\n-import javax.sql.DataSource;\n-\n import io.seata.common.loader.EnhancedServiceLoader;\n import io.seata.config.Configuration;\n import io.seata.config.ConfigurationFactory;\n import io.seata.core.constants.ConfigurationKeys;\n import io.seata.core.lock.LockMode;\n import io.seata.core.lock.Locker;\n+import io.seata.core.store.StoreMode;\n import io.seata.core.store.db.DataSourceGenerator;\n import io.seata.server.session.BranchSession;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.sql.DataSource;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n \n /**\n  * The type Lock manager factory.\n@@ -36,6 +38,8 @@\n  */\n public class LockerFactory {\n \n+    protected static final Logger LOGGER = LoggerFactory.getLogger(LockerFactory.class);\n+\n     /**\n      * The constant CONFIG.\n      */\n@@ -72,7 +76,15 @@ public static synchronized final LockManager getLockManager() {\n      * @return the lock manager\n      */\n     public static synchronized final Locker get(BranchSession branchSession) {\n+        String storeMode = CONFIG.getConfig(ConfigurationKeys.STORE_MODE);\n         String lockMode = CONFIG.getConfig(ConfigurationKeys.LOCK_MODE);\n+        //storeMode == db and lockMode == memeory is not allowed\n+        if(StoreMode.DB.name().equalsIgnoreCase(storeMode)){\n+            if(LockMode.MEMORY.name().equalsIgnoreCase(lockMode)) {\n+                LOGGER.warn(\"The LockMode will be changed from MEMORY to DB, when the StoreMode is DB.\");\n+                lockMode = LockMode.DB.name();\n+            }\n+        }\n         if (LockMode.DB.name().equalsIgnoreCase(lockMode)) {\n             if (lockerMap.get(lockMode) != null) {\n                 return lockerMap.get(lockMode);",
      "parent_sha": "b7bc37fd2b099f83a821e4be03b5a5c6ebc4082e"
    }
  },
  {
    "oid": "8408b76a34f9f541343676751630e48bfe7e9da8",
    "message": "optimize: ContextCoreLoader.java code style (#2224)",
    "date": "2020-02-04T03:19:31Z",
    "url": "https://github.com/apache/incubator-seata/commit/8408b76a34f9f541343676751630e48bfe7e9da8",
    "details": {
      "sha": "7b5ad1e3c50c1834f8e06ed708f74ffe1a927ac4",
      "filename": "core/src/main/java/io/seata/core/context/ContextCoreLoader.java",
      "status": "modified",
      "additions": 8,
      "deletions": 11,
      "changes": 19,
      "blob_url": "https://github.com/apache/incubator-seata/blob/8408b76a34f9f541343676751630e48bfe7e9da8/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fcontext%2FContextCoreLoader.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/8408b76a34f9f541343676751630e48bfe7e9da8/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fcontext%2FContextCoreLoader.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fcore%2Fcontext%2FContextCoreLoader.java?ref=8408b76a34f9f541343676751630e48bfe7e9da8",
      "patch": "@@ -15,6 +15,8 @@\n  */\n package io.seata.core.context;\n \n+import java.util.Optional;\n+\n import io.seata.common.loader.EnhancedServiceLoader;\n \n /**\n@@ -24,17 +26,12 @@\n  */\n public class ContextCoreLoader {\n \n+    private ContextCoreLoader() {\n+\n+    }\n+\n     private static class ContextCoreHolder {\n-        private static ContextCore instance;\n-\n-        static {\n-            ContextCore contextCore = EnhancedServiceLoader.load(ContextCore.class);\n-            if (contextCore == null) {\n-                // Default\n-                contextCore = new ThreadLocalContextCore();\n-            }\n-            instance = contextCore;\n-        }\n+        private static final ContextCore INSTANCE = Optional.ofNullable(EnhancedServiceLoader.load(ContextCore.class)).orElse(new ThreadLocalContextCore());\n     }\n \n     /**\n@@ -43,7 +40,7 @@ private static class ContextCoreHolder {\n      * @return the context core\n      */\n     public static ContextCore load() {\n-        return ContextCoreHolder.instance;\n+        return ContextCoreHolder.INSTANCE;\n     }\n \n }",
      "parent_sha": "0f2168f911b2cca5725e98c0f47659a76d9c3ad4"
    }
  },
  {
    "oid": "f1559d2a65e15af7501c8cb5bd0af358b7183805",
    "message": "issue #86 length of applicationData should be int",
    "date": "2019-01-15T14:57:36Z",
    "url": "https://github.com/apache/incubator-seata/commit/f1559d2a65e15af7501c8cb5bd0af358b7183805",
    "details": {
      "sha": "e1385d587fdc7c403e1d64fdd0b66e79194031d9",
      "filename": "core/src/main/java/com/alibaba/fescar/core/protocol/transaction/AbstractBranchEndRequest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/f1559d2a65e15af7501c8cb5bd0af358b7183805/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fcore%2Fprotocol%2Ftransaction%2FAbstractBranchEndRequest.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/f1559d2a65e15af7501c8cb5bd0af358b7183805/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fcore%2Fprotocol%2Ftransaction%2FAbstractBranchEndRequest.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fcore%2Fprotocol%2Ftransaction%2FAbstractBranchEndRequest.java?ref=f1559d2a65e15af7501c8cb5bd0af358b7183805",
      "patch": "@@ -157,7 +157,7 @@ public boolean decode(ByteBuf in) {\n             leftLen -= resourceIdLen;\n         }\n \n-        int applicationDataLen = in.readShort();\n+        int applicationDataLen = in.readInt();\n         if (applicationDataLen > 0) {\n             if (leftLen < applicationDataLen) {\n                 return false;",
      "parent_sha": "5c411383274ee97f3128615a7013707ab93b6275"
    }
  },
  {
    "oid": "6093da5c54500a08b1f8e9c905f5023ec7d1f527",
    "message": "set fescar server default port",
    "date": "2019-01-12T03:17:49Z",
    "url": "https://github.com/apache/incubator-seata/commit/6093da5c54500a08b1f8e9c905f5023ec7d1f527",
    "details": {
      "sha": "851fa2228e1f306ac6ec4d2cdc61fead47d2fc03",
      "filename": "server/src/main/java/com/alibaba/fescar/server/Server.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/apache/incubator-seata/blob/6093da5c54500a08b1f8e9c905f5023ec7d1f527/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2FServer.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/6093da5c54500a08b1f8e9c905f5023ec7d1f527/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2FServer.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2FServer.java?ref=6093da5c54500a08b1f8e9c905f5023ec7d1f527",
      "patch": "@@ -34,12 +34,16 @@ public class Server {\n \n     public static void main(String[] args) throws IOException {\n         RpcServer rpcServer = new RpcServer(WORKING_THREADS);\n+        int port = 8091;\n+        if (args.length == 0) {\n+            rpcServer.setListenPort(port);\n+        }\n \n         if (args.length > 0) {\n-            int port = Integer.parseInt(args[0]);\n+            port = Integer.parseInt(args[0]);\n             rpcServer.setListenPort(port);\n-\n         }\n+        \n         String dataDir = null;\n         if (args.length > 1) {\n             dataDir = args[1];",
      "parent_sha": "15933089697094478b249aa8e859db172d3e9979"
    }
  },
  {
    "oid": "40bd36b9f1370dfbafa8065362111b506ffd1eb1",
    "message": "bugfix: fix nested GlobalLock unbind prematurely (#2698)",
    "date": "2020-06-05T05:56:12Z",
    "url": "https://github.com/apache/incubator-seata/commit/40bd36b9f1370dfbafa8065362111b506ffd1eb1",
    "details": {
      "sha": "2127e7a6d7766a149b39a6e32e8d419378f4784f",
      "filename": "rm-datasource/src/main/java/io/seata/rm/GlobalLockTemplate.java",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/apache/incubator-seata/blob/40bd36b9f1370dfbafa8065362111b506ffd1eb1/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2FGlobalLockTemplate.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/40bd36b9f1370dfbafa8065362111b506ffd1eb1/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2FGlobalLockTemplate.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2FGlobalLockTemplate.java?ref=40bd36b9f1370dfbafa8065362111b506ffd1eb1",
      "patch": "@@ -37,15 +37,20 @@ public class GlobalLockTemplate<T> {\n     public Object execute(Callable<T> business) throws Exception {\n \n         Object rs;\n-        try {\n-            // add global lock declare\n+        //fix nested situation\n+        boolean hasInGlobalLock = RootContext.requireGlobalLock();\n+        // add global lock declare\n+        if (!hasInGlobalLock) {\n             RootContext.bindGlobalLockFlag();\n-\n+        }\n+        try {\n             // Do Your Business\n             rs = business.call();\n         } finally {\n             //clean the global lock declare\n-            RootContext.unbindGlobalLockFlag();\n+            if (!hasInGlobalLock) {\n+                RootContext.unbindGlobalLockFlag();\n+            }\n         }\n \n         return rs;",
      "parent_sha": "e13c5c9ca0d9e73b6b848fcbe7db1f56e2fcdd06"
    }
  },
  {
    "oid": "748e97a894edb8515e9ffc4a8dbd30a74d463b4c",
    "message": "bugfix:fix Apollo configuration load fail due to camel style (#2639)",
    "date": "2020-05-04T09:37:50Z",
    "url": "https://github.com/apache/incubator-seata/commit/748e97a894edb8515e9ffc4a8dbd30a74d463b4c",
    "details": {
      "sha": "136c669dd12de9bedce07ef9d6ad52e74a93e397",
      "filename": "config/seata-config-apollo/src/main/java/io/seata/config/apollo/ApolloConfiguration.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/apache/incubator-seata/blob/748e97a894edb8515e9ffc4a8dbd30a74d463b4c/config%2Fseata-config-apollo%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fconfig%2Fapollo%2FApolloConfiguration.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/748e97a894edb8515e9ffc4a8dbd30a74d463b4c/config%2Fseata-config-apollo%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fconfig%2Fapollo%2FApolloConfiguration.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/config%2Fseata-config-apollo%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fconfig%2Fapollo%2FApolloConfiguration.java?ref=748e97a894edb8515e9ffc4a8dbd30a74d463b4c",
      "patch": "@@ -52,6 +52,8 @@ public class ApolloConfiguration extends AbstractConfiguration {\n     private static final String REGISTRY_TYPE = \"apollo\";\n     private static final String APP_ID = \"appId\";\n     private static final String APOLLO_META = \"apolloMeta\";\n+    private static final String PROP_APP_ID = \"app.id\";\n+    private static final String PROP_APOLLO_META = \"apollo.meta\";\n     private static final String NAMESPACE = \"namespace\";\n     private static final String DEFAULT_NAMESPACE = \"application\";\n     private static final Configuration FILE_CONFIG = ConfigurationFactory.CURRENT_FILE_INSTANCE;\n@@ -159,11 +161,11 @@ public Set<ConfigurationChangeListener> getConfigListeners(String dataId) {\n \n     private void readyApolloConfig() {\n         Properties properties = System.getProperties();\n-        if (!properties.containsKey(APP_ID)) {\n-            System.setProperty(APP_ID, FILE_CONFIG.getConfig(getApolloAppIdFileKey()));\n+        if (!properties.containsKey(PROP_APP_ID)) {\n+            System.setProperty(PROP_APP_ID, FILE_CONFIG.getConfig(getApolloAppIdFileKey()));\n         }\n-        if (!properties.containsKey(APOLLO_META)) {\n-            System.setProperty(APOLLO_META, FILE_CONFIG.getConfig(getApolloMetaFileKey()));\n+        if (!properties.containsKey(PROP_APOLLO_META)) {\n+            System.setProperty(PROP_APOLLO_META, FILE_CONFIG.getConfig(getApolloMetaFileKey()));\n         }\n     }\n ",
      "parent_sha": "2dccac478fe0042ac55bf5f8902854d799deb4a8"
    }
  },
  {
    "oid": "d6e782794da113734bae5cac68ee25bd75bc56ab",
    "message": "fix #137 param position err",
    "date": "2019-01-17T06:07:17Z",
    "url": "https://github.com/apache/incubator-seata/commit/d6e782794da113734bae5cac68ee25bd75bc56ab",
    "details": {
      "sha": "5e6c7011da34c9b24fa9ce6c97c5ac28c01daac1",
      "filename": "server/src/main/java/com/alibaba/fescar/server/coordinator/DefaultCoordinator.java",
      "status": "modified",
      "additions": 45,
      "deletions": 26,
      "changes": 71,
      "blob_url": "https://github.com/apache/incubator-seata/blob/d6e782794da113734bae5cac68ee25bd75bc56ab/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2Fcoordinator%2FDefaultCoordinator.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/d6e782794da113734bae5cac68ee25bd75bc56ab/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2Fcoordinator%2FDefaultCoordinator.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Ffescar%2Fserver%2Fcoordinator%2FDefaultCoordinator.java?ref=d6e782794da113734bae5cac68ee25bd75bc56ab",
      "patch": "@@ -79,49 +79,60 @@ public DefaultCoordinator(ServerMessageSender messageSender) {\n     }\n \n     @Override\n-    protected void doGlobalBegin(GlobalBeginRequest request, GlobalBeginResponse response, RpcContext rpcContext) throws TransactionException {\n-        response.setXid(core.begin(rpcContext.getApplicationId(), rpcContext.getTransactionServiceGroup(), request.getTransactionName(), request.getTimeout()));\n+    protected void doGlobalBegin(GlobalBeginRequest request, GlobalBeginResponse response, RpcContext rpcContext)\n+        throws TransactionException {\n+        response.setXid(core.begin(rpcContext.getApplicationId(), rpcContext.getTransactionServiceGroup(),\n+            request.getTransactionName(), request.getTimeout()));\n     }\n \n     @Override\n-    protected void doGlobalCommit(GlobalCommitRequest request, GlobalCommitResponse response, RpcContext rpcContext) throws TransactionException {\n+    protected void doGlobalCommit(GlobalCommitRequest request, GlobalCommitResponse response, RpcContext rpcContext)\n+        throws TransactionException {\n         response.setGlobalStatus(core.commit(XID.generateXID(request.getTransactionId())));\n \n     }\n \n     @Override\n-    protected void doGlobalRollback(GlobalRollbackRequest request, GlobalRollbackResponse response, RpcContext rpcContext) throws TransactionException {\n+    protected void doGlobalRollback(GlobalRollbackRequest request, GlobalRollbackResponse response,\n+                                    RpcContext rpcContext) throws TransactionException {\n         response.setGlobalStatus(core.rollback(XID.generateXID(request.getTransactionId())));\n \n     }\n \n     @Override\n-    protected void doGlobalStatus(GlobalStatusRequest request, GlobalStatusResponse response, RpcContext rpcContext) throws TransactionException {\n+    protected void doGlobalStatus(GlobalStatusRequest request, GlobalStatusResponse response, RpcContext rpcContext)\n+        throws TransactionException {\n         response.setGlobalStatus(core.getStatus(XID.generateXID(request.getTransactionId())));\n     }\n \n     @Override\n-    protected void doBranchRegister(BranchRegisterRequest request, BranchRegisterResponse response, RpcContext rpcContext) throws TransactionException {\n+    protected void doBranchRegister(BranchRegisterRequest request, BranchRegisterResponse response,\n+                                    RpcContext rpcContext) throws TransactionException {\n         response.setTransactionId(request.getTransactionId());\n-        response.setBranchId(core.branchRegister(request.getBranchType(), request.getResourceId(), rpcContext.getClientId(),\n+        response.setBranchId(\n+            core.branchRegister(request.getBranchType(), request.getResourceId(), rpcContext.getClientId(),\n                 XID.generateXID(request.getTransactionId()), request.getLockKey()));\n \n     }\n \n     @Override\n-    protected void doBranchReport(BranchReportRequest request, BranchReportResponse response, RpcContext rpcContext) throws TransactionException {\n-        core.branchReport(XID.generateXID(request.getTransactionId()), request.getBranchId(), request.getStatus(), request.getApplicationData());\n+    protected void doBranchReport(BranchReportRequest request, BranchReportResponse response, RpcContext rpcContext)\n+        throws TransactionException {\n+        core.branchReport(XID.generateXID(request.getTransactionId()), request.getBranchId(), request.getStatus(),\n+            request.getApplicationData());\n \n     }\n \n     @Override\n-    protected void doLockCheck(GlobalLockQueryRequest request, GlobalLockQueryResponse response, RpcContext rpcContext) throws TransactionException {\n-        response.setLockable(core.lockQuery(request.getBranchType(), XID.generateXID(request.getTransactionId()), request.getResourceId(), request.getLockKey()));\n+    protected void doLockCheck(GlobalLockQueryRequest request, GlobalLockQueryResponse response, RpcContext rpcContext)\n+        throws TransactionException {\n+        response.setLockable(core.lockQuery(request.getBranchType(), request.getResourceId(),\n+            XID.generateXID(request.getTransactionId()), request.getLockKey()));\n     }\n \n-\n     @Override\n-    public BranchStatus branchCommit(String xid, long branchId, String resourceId, String applicationData) throws TransactionException {\n+    public BranchStatus branchCommit(String xid, long branchId, String resourceId, String applicationData)\n+        throws TransactionException {\n         try {\n             BranchCommitRequest\n                 request = new BranchCommitRequest();\n@@ -133,7 +144,8 @@ public BranchStatus branchCommit(String xid, long branchId, String resourceId, S\n             GlobalSession globalSession = SessionHolder.findGlobalSession(XID.getTransactionId(xid));\n             BranchSession branchSession = globalSession.getBranch(branchId);\n \n-            BranchCommitResponse response = (BranchCommitResponse) messageSender.sendSynRequest(resourceId, branchSession.getClientId(), globalSession.getApplicationId(), request);\n+            BranchCommitResponse response = (BranchCommitResponse)messageSender.sendSynRequest(resourceId,\n+                branchSession.getClientId(), globalSession.getApplicationId(), request);\n             return response.getBranchStatus();\n         } catch (IOException e) {\n             throw new TransactionException(FailedToSendBranchCommitRequest, branchId + \"/\" + xid, e);\n@@ -143,7 +155,8 @@ public BranchStatus branchCommit(String xid, long branchId, String resourceId, S\n     }\n \n     @Override\n-    public BranchStatus branchRollback(String xid, long branchId, String resourceId, String applicationData) throws TransactionException {\n+    public BranchStatus branchRollback(String xid, long branchId, String resourceId, String applicationData)\n+        throws TransactionException {\n         try {\n             BranchRollbackRequest\n                 request = new BranchRollbackRequest();\n@@ -155,7 +168,8 @@ public BranchStatus branchRollback(String xid, long branchId, String resourceId,\n             GlobalSession globalSession = SessionHolder.findGlobalSession(XID.getTransactionId(xid));\n             BranchSession branchSession = globalSession.getBranch(branchId);\n \n-            BranchRollbackResponse response = (BranchRollbackResponse) messageSender.sendSynRequest(resourceId, branchSession.getClientId(), globalSession.getApplicationId(), request);\n+            BranchRollbackResponse response = (BranchRollbackResponse)messageSender.sendSynRequest(resourceId,\n+                branchSession.getClientId(), globalSession.getApplicationId(), request);\n             return response.getBranchStatus();\n         } catch (IOException e) {\n             throw new TransactionException(FailedToSendBranchRollbackRequest, branchId + \"/\" + xid, e);\n@@ -181,7 +195,8 @@ private void timeoutCheck() throws TransactionException {\n \n             globalSession.close();\n             globalSession.changeStatus(GlobalStatus.TimeoutRollbacking);\n-            LOGGER.info(\"Global transaction[\" + globalSession.getTransactionId() + \"] is timeout and will be rolled back.\");\n+            LOGGER.info(\n+                \"Global transaction[\" + globalSession.getTransactionId() + \"] is timeout and will be rolled back.\");\n \n             globalSession.addSessionLifecycleListener(SessionHolder.getRetryRollbackingSessionManager());\n             SessionHolder.getRetryRollbackingSessionManager().addGlobalSession(globalSession);\n@@ -199,7 +214,9 @@ private void handleRetryRollbacking() {\n             try {\n                 core.doGlobalRollback(rollbackingSession, true);\n             } catch (TransactionException ex) {\n-                LOGGER.info(\"Failed to retry rollbacking [\" + rollbackingSession.getTransactionId() + \"] \" + ex.getCode() + \" \" + ex.getMessage());\n+                LOGGER.info(\n+                    \"Failed to retry rollbacking [\" + rollbackingSession.getTransactionId() + \"] \" + ex.getCode() + \" \"\n+                        + ex.getMessage());\n             }\n         }\n     }\n@@ -210,18 +227,23 @@ private void handleRetryCommitting() {\n             try {\n                 core.doGlobalCommit(committingSession, true);\n             } catch (TransactionException ex) {\n-                LOGGER.info(\"Failed to retry committing [\" + committingSession.getTransactionId() + \"] \" + ex.getCode() + \" \" + ex.getMessage());\n+                LOGGER.info(\n+                    \"Failed to retry committing [\" + committingSession.getTransactionId() + \"] \" + ex.getCode() + \" \"\n+                        + ex.getMessage());\n             }\n         }\n     }\n \n-    private void handleAsyncCommitting() throws TransactionException {\n-        Collection<GlobalSession> asyncCommittingSessions = SessionHolder.getAsyncCommittingSessionManager().allSessions();\n+    private void handleAsyncCommitting() {\n+        Collection<GlobalSession> asyncCommittingSessions = SessionHolder.getAsyncCommittingSessionManager()\n+            .allSessions();\n         for (GlobalSession asyncCommittingSession : asyncCommittingSessions) {\n             try {\n                 core.doGlobalCommit(asyncCommittingSession, true);\n             } catch (TransactionException ex) {\n-                LOGGER.info(\"Failed to async committing [\" + asyncCommittingSession.getTransactionId() + \"] \" + ex.getCode() + \" \" + ex.getMessage());\n+                LOGGER.info(\n+                    \"Failed to async committing [\" + asyncCommittingSession.getTransactionId() + \"] \" + ex.getCode()\n+                        + \" \" + ex.getMessage());\n             }\n         }\n     }\n@@ -252,7 +274,6 @@ public void run() {\n             }\n         }, 0, 5, TimeUnit.MILLISECONDS);\n \n-\n         retryCommitting.scheduleAtFixedRate(new Runnable() {\n             @Override\n             public void run() {\n@@ -289,16 +310,14 @@ public void run() {\n             }\n         }, 0, 2, TimeUnit.MILLISECONDS);\n \n-\n     }\n \n-\n     @Override\n     public AbstractResultMessage onRequest(AbstractMessage request, RpcContext context) {\n         if (!(request instanceof AbstractTransactionRequestToTC)) {\n             throw new IllegalArgumentException();\n         }\n-        AbstractTransactionRequestToTC transactionRequest = (AbstractTransactionRequestToTC) request;\n+        AbstractTransactionRequestToTC transactionRequest = (AbstractTransactionRequestToTC)request;\n         transactionRequest.setTCInboundHandler(this);\n \n         return transactionRequest.handle(context);",
      "parent_sha": "2655eebd057cf8629d480cc5e8a64a69f35296d8"
    }
  },
  {
    "oid": "d724cdae8bdaca80b933f5cb3d3e55674576d672",
    "message": "bugfix: fix register branch and flush undolog when affect row was zero (#3522)",
    "date": "2021-04-15T06:33:31Z",
    "url": "https://github.com/apache/incubator-seata/commit/d724cdae8bdaca80b933f5cb3d3e55674576d672",
    "details": {
      "sha": "4f316a8c314929cd7787f560b4e9cc2da8c9ee50",
      "filename": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseTransactionalExecutor.java",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/apache/incubator-seata/blob/d724cdae8bdaca80b933f5cb3d3e55674576d672/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fexec%2FBaseTransactionalExecutor.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/d724cdae8bdaca80b933f5cb3d3e55674576d672/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fexec%2FBaseTransactionalExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fexec%2FBaseTransactionalExecutor.java?ref=d724cdae8bdaca80b933f5cb3d3e55674576d672",
      "patch": "@@ -19,6 +19,8 @@\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n \n@@ -41,9 +43,6 @@\n import io.seata.sqlparser.SQLType;\n import io.seata.sqlparser.WhereRecognizer;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n /**\n  * The type Base transactional executor.\n  *\n@@ -279,10 +278,12 @@ protected void prepareUndoLog(TableRecords beforeImage, TableRecords afterImage)\n \n         TableRecords lockKeyRecords = sqlRecognizer.getSQLType() == SQLType.DELETE ? beforeImage : afterImage;\n         String lockKeys = buildLockKey(lockKeyRecords);\n-        connectionProxy.appendLockKey(lockKeys);\n+        if (null != lockKeys) {\n+            connectionProxy.appendLockKey(lockKeys);\n \n-        SQLUndoLog sqlUndoLog = buildUndoItem(beforeImage, afterImage);\n-        connectionProxy.appendUndoLog(sqlUndoLog);\n+            SQLUndoLog sqlUndoLog = buildUndoItem(beforeImage, afterImage);\n+            connectionProxy.appendUndoLog(sqlUndoLog);\n+        }\n     }\n \n     /**",
      "parent_sha": "1de031d82a373c8fe4a342a8f37b4024ed949bc7"
    }
  },
  {
    "oid": "1b90640911f2e907e0def194dfefd97d2571f853",
    "message": "optimize: paramsPlaceHolder generate by StringUtils.repeat() (#2776)",
    "date": "2020-06-24T08:24:51Z",
    "url": "https://github.com/apache/incubator-seata/commit/1b90640911f2e907e0def194dfefd97d2571f853",
    "details": {
      "sha": "580287a6a4285c74566f2cdfc689dfaffc052892",
      "filename": "server/src/main/java/io/seata/server/storage/db/store/LogStoreDataBaseDAO.java",
      "status": "modified",
      "additions": 5,
      "deletions": 14,
      "changes": 19,
      "blob_url": "https://github.com/apache/incubator-seata/blob/1b90640911f2e907e0def194dfefd97d2571f853/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fstorage%2Fdb%2Fstore%2FLogStoreDataBaseDAO.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/1b90640911f2e907e0def194dfefd97d2571f853/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fstorage%2Fdb%2Fstore%2FLogStoreDataBaseDAO.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fstorage%2Fdb%2Fstore%2FLogStoreDataBaseDAO.java?ref=1b90640911f2e907e0def194dfefd97d2571f853",
      "patch": "@@ -22,7 +22,6 @@\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.StringJoiner;\n import javax.sql.DataSource;\n \n import io.seata.common.exception.DataAccessException;\n@@ -165,15 +164,9 @@ public List<GlobalTransactionDO> queryGlobalTransactionDO(int[] statuses, int li\n             conn = logStoreDataSource.getConnection();\n             conn.setAutoCommit(true);\n \n-            StringBuilder sb = new StringBuilder();\n-            for (int i = 0; i < statuses.length; i++) {\n-                sb.append(\"?\");\n-                if (i != (statuses.length - 1)) {\n-                    sb.append(\", \");\n-                }\n-            }\n+            String paramsPlaceHolder = org.apache.commons.lang.StringUtils.repeat(\"?\", \",\", statuses.length);\n \n-            String sql = LogStoreSqlsFactory.getLogStoreSqls(dbType).getQueryGlobalTransactionSQLByStatus(globalTable, sb.toString());\n+            String sql = LogStoreSqlsFactory.getLogStoreSqls(dbType).getQueryGlobalTransactionSQLByStatus(globalTable, paramsPlaceHolder);\n             ps = conn.prepareStatement(sql);\n             for (int i = 0; i < statuses.length; i++) {\n                 int status = statuses[i];\n@@ -288,11 +281,9 @@ public List<BranchTransactionDO> queryBranchTransactionDO(String xid) {\n     @Override\n     public List<BranchTransactionDO> queryBranchTransactionDO(List<String> xids) {\n         int length = xids.size();\n-        int retsSize = length * 3;\n-        List<BranchTransactionDO> rets = new ArrayList<>(retsSize);\n-        StringJoiner sj = new StringJoiner(\",\");\n-        xids.stream().forEach(xid -> sj.add(\"?\"));\n-        String sql = LogStoreSqlsFactory.getLogStoreSqls(dbType).getQueryBranchTransaction(brachTable, sj.toString());\n+        List<BranchTransactionDO> rets = new ArrayList<>(length * 3);\n+        String paramsPlaceHolder = org.apache.commons.lang.StringUtils.repeat(\"?\", \",\", length);\n+        String sql = LogStoreSqlsFactory.getLogStoreSqls(dbType).getQueryBranchTransaction(brachTable, paramsPlaceHolder);\n         Connection conn = null;\n         PreparedStatement ps = null;\n         ResultSet rs = null;",
      "parent_sha": "d554fc85b4e79bc4e5ef63cb6c48b8978812c9a7"
    }
  },
  {
    "oid": "496aaa642d52b96b68aab15c9bf224b797e65951",
    "message": "optimize: support the default timeout for zookeeper register (#2591)",
    "date": "2020-04-24T03:16:08Z",
    "url": "https://github.com/apache/incubator-seata/commit/496aaa642d52b96b68aab15c9bf224b797e65951",
    "details": {
      "sha": "e8eb091844b238a7a5f1205bc52855ffc3c340bb",
      "filename": "discovery/seata-discovery-zk/src/main/java/io/seata/discovery/registry/zk/ZookeeperRegisterServiceImpl.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/apache/incubator-seata/blob/496aaa642d52b96b68aab15c9bf224b797e65951/discovery%2Fseata-discovery-zk%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fdiscovery%2Fregistry%2Fzk%2FZookeeperRegisterServiceImpl.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/496aaa642d52b96b68aab15c9bf224b797e65951/discovery%2Fseata-discovery-zk%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fdiscovery%2Fregistry%2Fzk%2FZookeeperRegisterServiceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/discovery%2Fseata-discovery-zk%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fdiscovery%2Fregistry%2Fzk%2FZookeeperRegisterServiceImpl.java?ref=496aaa642d52b96b68aab15c9bf224b797e65951",
      "patch": "@@ -64,6 +64,8 @@ public class ZookeeperRegisterServiceImpl implements RegistryService<IZkChildLis\n     private static final String AUTH_PASSWORD = \"password\";\n     private static final String SESSION_TIME_OUT_KEY = \"sessionTimeout\";\n     private static final String CONNECT_TIME_OUT_KEY = \"connectTimeout\";\n+    private static final int DEFAULT_SESSION_TIMEOUT = 6000;\n+    private static final int DEFAULT_CONNECT_TIMEOUT = 2000;\n     private static final String FILE_CONFIG_KEY_PREFIX = FILE_ROOT_REGISTRY + FILE_CONFIG_SPLIT_CHAR + REGISTRY_TYPE\n         + FILE_CONFIG_SPLIT_CHAR;\n     private static final String ROOT_PATH = ZK_PATH_SPLIT_CHAR + FILE_ROOT_REGISTRY + ZK_PATH_SPLIT_CHAR + REGISTRY_TYPE\n@@ -208,8 +210,8 @@ private ZkClient getClientInstance() {\n             synchronized (ZookeeperRegisterServiceImpl.class) {\n                 if (null == zkClient) {\n                     zkClient = buildZkClient(FILE_CONFIG.getConfig(FILE_CONFIG_KEY_PREFIX + SERVER_ADDR_KEY),\n-                        FILE_CONFIG.getInt(FILE_CONFIG_KEY_PREFIX + SESSION_TIME_OUT_KEY),\n-                        FILE_CONFIG.getInt(FILE_CONFIG_KEY_PREFIX + CONNECT_TIME_OUT_KEY),\n+                        FILE_CONFIG.getInt(FILE_CONFIG_KEY_PREFIX + SESSION_TIME_OUT_KEY, DEFAULT_SESSION_TIMEOUT),\n+                        FILE_CONFIG.getInt(FILE_CONFIG_KEY_PREFIX + CONNECT_TIME_OUT_KEY, DEFAULT_CONNECT_TIMEOUT),\n                         FILE_CONFIG.getConfig(FILE_CONFIG_KEY_PREFIX + AUTH_USERNAME),\n                         FILE_CONFIG.getConfig(FILE_CONFIG_KEY_PREFIX + AUTH_PASSWORD));\n                 }",
      "parent_sha": "141891ea9e6a9cbeb3fc31446f9e9dfc3df09778"
    }
  },
  {
    "oid": "9481e47adc34dc6b45b48f572d06b13745c305ff",
    "message": "refactor: the logics of Multi-configuration Isolation (#1533)",
    "date": "2019-08-27T12:15:26Z",
    "url": "https://github.com/apache/incubator-seata/commit/9481e47adc34dc6b45b48f572d06b13745c305ff",
    "details": {
      "sha": "c569920466958bb4da7e25690992990ca57b325a",
      "filename": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java",
      "status": "modified",
      "additions": 9,
      "deletions": 13,
      "changes": 22,
      "blob_url": "https://github.com/apache/incubator-seata/blob/9481e47adc34dc6b45b48f572d06b13745c305ff/config%2Fseata-config-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fconfig%2FConfigurationFactory.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/9481e47adc34dc6b45b48f572d06b13745c305ff/config%2Fseata-config-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fconfig%2FConfigurationFactory.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/config%2Fseata-config-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fconfig%2FConfigurationFactory.java?ref=9481e47adc34dc6b45b48f572d06b13745c305ff",
      "patch": "@@ -15,11 +15,11 @@\n  */\n package io.seata.config;\n \n-import java.util.Objects;\n-\n import io.seata.common.exception.NotSupportYetException;\n import io.seata.common.loader.EnhancedServiceLoader;\n \n+import java.util.Objects;\n+\n /**\n  * The type Configuration factory.\n  *\n@@ -29,27 +29,23 @@\n public final class ConfigurationFactory {\n     private static final String REGISTRY_CONF_PREFIX = \"registry\";\n     private static final String REGISTRY_CONF_SUFFIX = \".conf\";\n-    private static final String ENV_SYSTEM_KEY = \"SEATA_CONFIG_ENV\";\n-    private static final String ENV_PROPERTY_KEY = \"seataConfigEnv\";\n-    private static final String DEFAULT_ENV_VALUE = \"default\";\n+    private static final String ENV_SYSTEM_KEY = \"SEATA_ENV\";\n+    private static final String ENV_PROPERTY_KEY = \"seataEnv\";\n     /**\n-     * The constant FILE_INSTANCE.\n+     * the name of env\n      */\n     private static String envValue;\n \n     static {\n-        String env = System.getenv(ENV_SYSTEM_KEY);\n-        if (env != null && System.getProperty(ENV_PROPERTY_KEY) == null) {\n-            //Help users get\n-            System.setProperty(ENV_PROPERTY_KEY, env);\n-        }\n         envValue = System.getProperty(ENV_PROPERTY_KEY);\n+        if (null == envValue) {\n+            envValue = System.getenv(ENV_SYSTEM_KEY);\n+        }\n     }\n \n     private static final Configuration DEFAULT_FILE_INSTANCE = new FileConfiguration(\n         REGISTRY_CONF_PREFIX + REGISTRY_CONF_SUFFIX);\n-    public static final Configuration CURRENT_FILE_INSTANCE = (envValue == null || DEFAULT_ENV_VALUE.equals(envValue))\n-        ? DEFAULT_FILE_INSTANCE : new FileConfiguration(REGISTRY_CONF_PREFIX + \"-\" + envValue\n+    public static final Configuration CURRENT_FILE_INSTANCE = null == envValue ? DEFAULT_FILE_INSTANCE : new FileConfiguration(REGISTRY_CONF_PREFIX + \"-\" + envValue\n         + REGISTRY_CONF_SUFFIX);\n     private static final String NAME_KEY = \"name\";\n     private static final String FILE_TYPE = \"file\";",
      "parent_sha": "3ec2dfb5e8255591532b964d371e736289005171"
    }
  },
  {
    "oid": "52cb4dd011f73c73c29a22dd001ebb48af4e8eba",
    "message": "optimize: leak of error trace while handleAsyncCommitting (#1950)",
    "date": "2019-11-27T04:26:08Z",
    "url": "https://github.com/apache/incubator-seata/commit/52cb4dd011f73c73c29a22dd001ebb48af4e8eba",
    "details": {
      "sha": "189d563af99a24eb32a931148e6ed7a67f0153b4",
      "filename": "server/src/main/java/io/seata/server/coordinator/DefaultCoordinator.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/incubator-seata/blob/52cb4dd011f73c73c29a22dd001ebb48af4e8eba/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fcoordinator%2FDefaultCoordinator.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/52cb4dd011f73c73c29a22dd001ebb48af4e8eba/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fcoordinator%2FDefaultCoordinator.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fcoordinator%2FDefaultCoordinator.java?ref=52cb4dd011f73c73c29a22dd001ebb48af4e8eba",
      "patch": "@@ -454,8 +454,8 @@ protected void handleAsyncCommitting() {\n                 asyncCommittingSession.addSessionLifecycleListener(SessionHolder.getRootSessionManager());\n                 core.doGlobalCommit(asyncCommittingSession, true);\n             } catch (TransactionException ex) {\n-                LOGGER.info(\"Failed to async committing [{}] {} {}\", asyncCommittingSession.getXid(), ex.getCode(),\n-                    ex.getMessage());\n+                LOGGER.error(\"Failed to async committing [{}] {} {}\", asyncCommittingSession.getXid(), ex.getCode(),\n+                    ex.getMessage(), ex);\n             }\n         }\n     }",
      "parent_sha": "258760b5820af4676d3d3351f07c92529aedc459"
    }
  },
  {
    "oid": "52984e44bf74f8f1636f01774578fbe56a0c9012",
    "message": "bugfix: has other expression before insert row primary key. (#2725)",
    "date": "2020-06-03T08:22:11Z",
    "url": "https://github.com/apache/incubator-seata/commit/52984e44bf74f8f1636f01774578fbe56a0c9012",
    "details": {
      "sha": "1978f8f1a789552e4d531be1992f806faa1121d7",
      "filename": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseInsertExecutor.java",
      "status": "modified",
      "additions": 20,
      "deletions": 28,
      "changes": 48,
      "blob_url": "https://github.com/apache/incubator-seata/blob/52984e44bf74f8f1636f01774578fbe56a0c9012/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fexec%2FBaseInsertExecutor.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/52984e44bf74f8f1636f01774578fbe56a0c9012/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fexec%2FBaseInsertExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/rm-datasource%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Frm%2Fdatasource%2Fexec%2FBaseInsertExecutor.java?ref=52984e44bf74f8f1636f01774578fbe56a0c9012",
      "patch": "@@ -21,7 +21,6 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n-import java.util.stream.Collectors;\n \n import io.seata.common.exception.NotSupportYetException;\n import io.seata.common.exception.ShouldNeverHappenException;\n@@ -142,41 +141,34 @@ protected List<Object> parsePkValuesFromStatement() {\n                 ArrayList<Object>[] parameters = preparedStatementProxy.getParameters();\n                 final int rowSize = insertRows.size();\n \n-                if (rowSize == 1) {\n-                    Object pkValue = insertRows.get(0).get(pkIndex);\n-                    if (PLACEHOLDER.equals(pkValue)) {\n-                        pkValues = parameters[pkIndex];\n-                    } else {\n-                        pkValues = insertRows.stream().map(insertRow -> insertRow.get(pkIndex)).collect(Collectors.toList());\n+                int totalPlaceholderNum = -1;\n+                pkValues = new ArrayList<>(rowSize);\n+                for (int i = 0; i < rowSize; i++) {\n+                    List<Object> row = insertRows.get(i);\n+                    // oracle insert sql statement specify RETURN_GENERATED_KEYS will append :rowid on sql end\n+                    // insert parameter count will than the actual +1\n+                    if (row.isEmpty()) {\n+                        continue;\n                     }\n-                } else {\n-                    int totalPlaceholderNum = -1;\n-                    pkValues = new ArrayList<>(rowSize);\n-                    for (int i = 0; i < rowSize; i++) {\n-                        List<Object> row = insertRows.get(i);\n-                        // oracle insert sql statement specify RETURN_GENERATED_KEYS will append :rowid on sql end\n-                        // insert parameter count will than the actual +1\n-                        if (row.isEmpty()) {\n-                            continue;\n-                        }\n-                        Object pkValue = row.get(pkIndex);\n+                    Object pkValue = row.get(pkIndex);\n+                    if (PLACEHOLDER.equals(pkValue)) {\n                         int currentRowPlaceholderNum = -1;\n-                        for (Object r : row) {\n+                        int currentRowNotPlaceholderNumBeforePkIndex = 0;\n+                        for (int n = 0, len = row.size(); n < len; n++) {\n+                            Object r = row.get(n);\n                             if (PLACEHOLDER.equals(r)) {\n                                 totalPlaceholderNum += 1;\n                                 currentRowPlaceholderNum += 1;\n                             }\n-                        }\n-                        if (PLACEHOLDER.equals(pkValue)) {\n-                            int idx = pkIndex;\n-                            if (i != 0) {\n-                                idx = totalPlaceholderNum - currentRowPlaceholderNum + pkIndex;\n+                            if (n < pkIndex && !PLACEHOLDER.equals(r)) {\n+                                currentRowNotPlaceholderNumBeforePkIndex++;\n                             }\n-                            ArrayList<Object> parameter = parameters[idx];\n-                            pkValues.addAll(parameter);\n-                        } else {\n-                            pkValues.add(pkValue);\n                         }\n+                        int idx = totalPlaceholderNum - currentRowPlaceholderNum + pkIndex - currentRowNotPlaceholderNumBeforePkIndex;\n+                        ArrayList<Object> parameter = parameters[idx];\n+                        pkValues.addAll(parameter);\n+                    } else {\n+                        pkValues.add(pkValue);\n                     }\n                 }\n             }",
      "parent_sha": "5443e151d21f7c9ad0161dd63f8f37ca807b3499"
    }
  },
  {
    "oid": "1d562a68ffef6833cdb8a49867906c78e92abe92",
    "message": "bugfix: thread unsafe which missing double check when initial eureka client (#2066)",
    "date": "2019-12-20T03:42:44Z",
    "url": "https://github.com/apache/incubator-seata/commit/1d562a68ffef6833cdb8a49867906c78e92abe92",
    "details": {
      "sha": "3ebeb61d8d274e1f58c8317b8e05a032dd2b01bc",
      "filename": "discovery/seata-discovery-eureka/src/main/java/io/seata/discovery/registry/eureka/EurekaRegistryServiceImpl.java",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/apache/incubator-seata/blob/1d562a68ffef6833cdb8a49867906c78e92abe92/discovery%2Fseata-discovery-eureka%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fdiscovery%2Fregistry%2Feureka%2FEurekaRegistryServiceImpl.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/1d562a68ffef6833cdb8a49867906c78e92abe92/discovery%2Fseata-discovery-eureka%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fdiscovery%2Fregistry%2Feureka%2FEurekaRegistryServiceImpl.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/discovery%2Fseata-discovery-eureka%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fdiscovery%2Fregistry%2Feureka%2FEurekaRegistryServiceImpl.java?ref=1d562a68ffef6833cdb8a49867906c78e92abe92",
      "patch": "@@ -215,16 +215,18 @@ private String getApplicationName() {\n     }\n \n     private EurekaClient getEurekaClient(boolean needRegister) throws EurekaRegistryException {\n-        if (eurekaClient == null) {\n+        if (null == eurekaClient) {\n             synchronized (EurekaRegistryServiceImpl.class) {\n                 try {\n-                    if (!needRegister) {\n-                        instanceConfig = new CustomEurekaInstanceConfig();\n+                    if (null == eurekaClient) {\n+                        if (!needRegister) {\n+                            instanceConfig = new CustomEurekaInstanceConfig();\n+                        }\n+                        ConfigurationManager.loadProperties(getEurekaProperties(needRegister));\n+                        InstanceInfo instanceInfo = new EurekaConfigBasedInstanceInfoProvider(instanceConfig).get();\n+                        applicationInfoManager = new ApplicationInfoManager(instanceConfig, instanceInfo);\n+                        eurekaClient = new DiscoveryClient(applicationInfoManager, new DefaultEurekaClientConfig());\n                     }\n-                    ConfigurationManager.loadProperties(getEurekaProperties(needRegister));\n-                    InstanceInfo instanceInfo = new EurekaConfigBasedInstanceInfoProvider(instanceConfig).get();\n-                    applicationInfoManager = new ApplicationInfoManager(instanceConfig, instanceInfo);\n-                    eurekaClient = new DiscoveryClient(applicationInfoManager, new DefaultEurekaClientConfig());\n                 } catch (Exception e) {\n                     clean();\n                     throw new EurekaRegistryException(\"register eureka is error!\", e);",
      "parent_sha": "73e9809d9313fab33fb32aa54dc9bc4403730bc9"
    }
  },
  {
    "oid": "47b9b2cea57ce6b0d493d1d52e58242a21c53718",
    "message": "bugfix: druid parameter optimization. (#2529)",
    "date": "2020-04-10T09:11:01Z",
    "url": "https://github.com/apache/incubator-seata/commit/47b9b2cea57ce6b0d493d1d52e58242a21c53718",
    "details": {
      "sha": "5600cadb7ced55f29e2d0d6ac5ca6595c62d961e",
      "filename": "server/src/main/java/io/seata/server/store/DruidDataSourceGenerator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/incubator-seata/blob/47b9b2cea57ce6b0d493d1d52e58242a21c53718/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fstore%2FDruidDataSourceGenerator.java",
      "raw_url": "https://github.com/apache/incubator-seata/raw/47b9b2cea57ce6b0d493d1d52e58242a21c53718/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fstore%2FDruidDataSourceGenerator.java",
      "contents_url": "https://api.github.com/repos/apache/incubator-seata/contents/server%2Fsrc%2Fmain%2Fjava%2Fio%2Fseata%2Fserver%2Fstore%2FDruidDataSourceGenerator.java?ref=47b9b2cea57ce6b0d493d1d52e58242a21c53718",
      "patch": "@@ -44,7 +44,7 @@ public DataSource generateDataSource() {\n         ds.setTimeBetweenEvictionRunsMillis(120000);\n         ds.setMinEvictableIdleTimeMillis(300000);\n         ds.setTestWhileIdle(true);\n-        ds.setTestOnBorrow(true);\n+        ds.setTestOnBorrow(false);\n         ds.setPoolPreparedStatements(true);\n         ds.setMaxPoolPreparedStatementPerConnectionSize(20);\n         ds.setValidationQuery(getValidationQuery(getDBType()));",
      "parent_sha": "de4a6ecfb1e30ddd765d928e0fa696ee5075f758"
    }
  }
]