[
  {
    "oid": "7e790a0af8ecbdb91e90950c4d670d0593efca62",
    "message": "Fix an early nested set expansion.\n\nCloses #13309.\n\nPiperOrigin-RevId: 368593772",
    "date": "2021-04-15T08:38:13Z",
    "url": "https://github.com/bazelbuild/bazel/commit/7e790a0af8ecbdb91e90950c4d670d0593efca62",
    "details": {
      "sha": "5a51de852828bce0076fdaf82d639313edabecdb",
      "filename": "src/main/java/com/google/devtools/build/lib/exec/StandaloneTestStrategy.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/7e790a0af8ecbdb91e90950c4d670d0593efca62/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fexec%2FStandaloneTestStrategy.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/7e790a0af8ecbdb91e90950c4d670d0593efca62/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fexec%2FStandaloneTestStrategy.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fexec%2FStandaloneTestStrategy.java?ref=7e790a0af8ecbdb91e90950c4d670d0593efca62",
      "patch": "@@ -463,7 +463,7 @@ private static Spawn createCoveragePostProcessingSpawn(\n         action.getLcovMergerRunfilesSupplier(),\n         /* filesetMappings= */ ImmutableMap.of(),\n         /* inputs= */ NestedSetBuilder.<ActionInput>compileOrder()\n-            .addAll(action.getInputs().toList())\n+            .addTransitive(action.getInputs())\n             .addAll(expandedCoverageDir)\n             .add(action.getCollectCoverageScript())\n             .add(action.getCoverageDirectoryTreeArtifact())",
      "parent_sha": "e2ed2fd5cad34f0e97f117df391e255b59d96b63"
    }
  },
  {
    "oid": "6edeb84c1fee9df05099eafb7affe3f3330698e8",
    "message": "Stop using EXPERIMENTAL_BUILD_SETTING_API in StarlarkFlagGuardingTest becuase that flag is going away. Replace with EXPERIMENTAL_SIBLING_REPOSITORY_LAYOUT (chosen at random)\n\nPiperOrigin-RevId: 312352442",
    "date": "2020-05-19T21:24:07Z",
    "url": "https://github.com/bazelbuild/bazel/commit/6edeb84c1fee9df05099eafb7affe3f3330698e8",
    "details": {
      "sha": "213132d5bbad7c54ff5cc5b0f00ba79861623fc4",
      "filename": "src/test/java/com/google/devtools/build/lib/syntax/StarlarkFlagGuardingTest.java",
      "status": "modified",
      "additions": 37,
      "deletions": 29,
      "changes": 66,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/6edeb84c1fee9df05099eafb7affe3f3330698e8/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fsyntax%2FStarlarkFlagGuardingTest.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/6edeb84c1fee9df05099eafb7affe3f3330698e8/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fsyntax%2FStarlarkFlagGuardingTest.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fsyntax%2FStarlarkFlagGuardingTest.java?ref=6edeb84c1fee9df05099eafb7affe3f3330698e8",
      "patch": "@@ -46,7 +46,7 @@ public static class Mock implements StarlarkValue {\n               positional = true,\n               named = false,\n               type = Boolean.class,\n-              enableOnlyWithFlag = FlagIdentifier.EXPERIMENTAL_BUILD_SETTING_API,\n+              enableOnlyWithFlag = FlagIdentifier.EXPERIMENTAL_SIBLING_REPOSITORY_LAYOUT,\n               valueWhenDisabled = \"False\"),\n           @Param(name = \"c\", positional = true, named = false, type = Integer.class),\n         },\n@@ -65,7 +65,7 @@ public String positionalsOnlyMethod(Integer a, boolean b, Integer c, StarlarkThr\n               positional = false,\n               named = true,\n               type = Boolean.class,\n-              enableOnlyWithFlag = FlagIdentifier.EXPERIMENTAL_BUILD_SETTING_API,\n+              enableOnlyWithFlag = FlagIdentifier.EXPERIMENTAL_SIBLING_REPOSITORY_LAYOUT,\n               valueWhenDisabled = \"False\"),\n           @Param(name = \"c\", positional = false, named = true, type = Integer.class),\n         },\n@@ -84,14 +84,14 @@ public String keywordsOnlyMethod(Integer a, boolean b, Integer c, StarlarkThread\n               positional = true,\n               named = false,\n               type = Boolean.class,\n-              enableOnlyWithFlag = FlagIdentifier.EXPERIMENTAL_BUILD_SETTING_API,\n+              enableOnlyWithFlag = FlagIdentifier.EXPERIMENTAL_SIBLING_REPOSITORY_LAYOUT,\n               valueWhenDisabled = \"False\"),\n           @Param(\n               name = \"c\",\n               positional = false,\n               named = true,\n               type = Integer.class,\n-              enableOnlyWithFlag = FlagIdentifier.EXPERIMENTAL_BUILD_SETTING_API,\n+              enableOnlyWithFlag = FlagIdentifier.EXPERIMENTAL_SIBLING_REPOSITORY_LAYOUT,\n               valueWhenDisabled = \"3\"),\n           @Param(name = \"d\", positional = false, named = true, type = Boolean.class),\n         },\n@@ -118,7 +118,7 @@ public String mixedParamsMethod(\n               positional = false,\n               named = true,\n               type = Integer.class,\n-              enableOnlyWithFlag = FlagIdentifier.EXPERIMENTAL_BUILD_SETTING_API,\n+              enableOnlyWithFlag = FlagIdentifier.EXPERIMENTAL_SIBLING_REPOSITORY_LAYOUT,\n               valueWhenDisabled = \"3\"),\n         },\n         useStarlarkThread = true)\n@@ -129,23 +129,23 @@ public String keywordsMultipleFlags(Integer a, boolean b, Integer c, StarlarkThr\n \n   @Test\n   public void testPositionalsOnlyGuardedMethod() throws Exception {\n-    ev.new Scenario(\"--experimental_build_setting_api=true\")\n+    ev.new Scenario(\"--experimental_sibling_repository_layout=true\")\n         .update(\"mock\", new Mock())\n         .testEval(\n             \"mock.positionals_only_method(1, True, 3)\", \"'positionals_only_method(1, true, 3)'\");\n \n-    ev.new Scenario(\"--experimental_build_setting_api=true\")\n+    ev.new Scenario(\"--experimental_sibling_repository_layout=true\")\n         .update(\"mock\", new Mock())\n         .testIfErrorContains(\n             \"in call to positionals_only_method(), parameter 'b' got value of type 'int', want\"\n                 + \" 'bool'\",\n             \"mock.positionals_only_method(1, 3)\");\n \n-    ev.new Scenario(\"--experimental_build_setting_api=false\")\n+    ev.new Scenario(\"--experimental_sibling_repository_layout=false\")\n         .update(\"mock\", new Mock())\n         .testEval(\"mock.positionals_only_method(1, 3)\", \"'positionals_only_method(1, false, 3)'\");\n \n-    ev.new Scenario(\"--experimental_build_setting_api=false\")\n+    ev.new Scenario(\"--experimental_sibling_repository_layout=false\")\n         .update(\"mock\", new Mock())\n         .testIfErrorContains(\n             \"in call to positionals_only_method(), parameter 'c' got value of type 'bool', want\"\n@@ -155,40 +155,40 @@ ev.new Scenario(\"--experimental_build_setting_api=false\")\n \n   @Test\n   public void testKeywordOnlyGuardedMethod() throws Exception {\n-    ev.new Scenario(\"--experimental_build_setting_api=true\")\n+    ev.new Scenario(\"--experimental_sibling_repository_layout=true\")\n         .update(\"mock\", new Mock())\n         .testEval(\n             \"mock.keywords_only_method(a=1, b=True, c=3)\", \"'keywords_only_method(1, true, 3)'\");\n \n-    ev.new Scenario(\"--experimental_build_setting_api=true\")\n+    ev.new Scenario(\"--experimental_sibling_repository_layout=true\")\n         .update(\"mock\", new Mock())\n         .testIfErrorContains(\n             \"keywords_only_method() missing 1 required named argument: b\",\n             \"mock.keywords_only_method(a=1, c=3)\");\n \n-    ev.new Scenario(\"--experimental_build_setting_api=false\")\n+    ev.new Scenario(\"--experimental_sibling_repository_layout=false\")\n         .update(\"mock\", new Mock())\n         .testEval(\"mock.keywords_only_method(a=1, c=3)\", \"'keywords_only_method(1, false, 3)'\");\n \n-    ev.new Scenario(\"--experimental_build_setting_api=false\")\n+    ev.new Scenario(\"--experimental_sibling_repository_layout=false\")\n         .update(\"mock\", new Mock())\n         .testIfErrorContains(\n             \"parameter 'b' is experimental and thus unavailable with the current \"\n                 + \"flags. It may be enabled by setting \"\n-                + \"--experimental_build_setting_api\",\n+                + \"--experimental_sibling_repository_layout\",\n             \"mock.keywords_only_method(a=1, b=True, c=3)\");\n   }\n \n   @Test\n   public void testMixedParamsMethod() throws Exception {\n     // def mixed_params_method(a, b, c = ?, d = ?)\n-    ev.new Scenario(\"--experimental_build_setting_api=true\")\n+    ev.new Scenario(\"--experimental_sibling_repository_layout=true\")\n         .update(\"mock\", new Mock())\n         .testEval(\n             \"mock.mixed_params_method(1, True, c=3, d=True)\",\n             \"'mixed_params_method(1, true, 3, true)'\");\n \n-    ev.new Scenario(\"--experimental_build_setting_api=true\")\n+    ev.new Scenario(\"--experimental_sibling_repository_layout=true\")\n         .update(\"mock\", new Mock())\n         .testIfErrorContains(\n             // Missing named arguments (d) are not reported\n@@ -197,18 +197,18 @@ ev.new Scenario(\"--experimental_build_setting_api=true\")\n             \"mock.mixed_params_method(1, c=3)\");\n \n     // def mixed_params_method(a, b disabled = False, c disabled = 3, d = ?)\n-    ev.new Scenario(\"--experimental_build_setting_api=false\")\n+    ev.new Scenario(\"--experimental_sibling_repository_layout=false\")\n         .update(\"mock\", new Mock())\n         .testEval(\n             \"mock.mixed_params_method(1, d=True)\", \"'mixed_params_method(1, false, 3, true)'\");\n \n-    ev.new Scenario(\"--experimental_build_setting_api=false\")\n+    ev.new Scenario(\"--experimental_sibling_repository_layout=false\")\n         .update(\"mock\", new Mock())\n         .testIfErrorContains(\n             \"mixed_params_method() accepts no more than 1 positional argument but got 2\",\n             \"mock.mixed_params_method(1, True, d=True)\");\n \n-    ev.new Scenario(\"--experimental_build_setting_api=false\")\n+    ev.new Scenario(\"--experimental_sibling_repository_layout=false\")\n         .update(\"mock\", new Mock())\n         .testIfErrorContains(\n             \"mixed_params_method() accepts no more than 1 positional argument but got 2\",\n@@ -217,23 +217,31 @@ ev.new Scenario(\"--experimental_build_setting_api=false\")\n \n   @Test\n   public void testKeywordsMultipleFlags() throws Exception {\n-    ev.new Scenario(\"--experimental_build_setting_api=true\", \"--incompatible_no_attr_license=false\")\n+    ev\n+        .new Scenario(\n+            \"--experimental_sibling_repository_layout=true\", \"--incompatible_no_attr_license=false\")\n         .update(\"mock\", new Mock())\n         .testEval(\n             \"mock.keywords_multiple_flags(a=42, b=True, c=0)\",\n             \"'keywords_multiple_flags(42, true, 0)'\");\n \n-    ev.new Scenario(\"--experimental_build_setting_api=true\", \"--incompatible_no_attr_license=false\")\n+    ev\n+        .new Scenario(\n+            \"--experimental_sibling_repository_layout=true\", \"--incompatible_no_attr_license=false\")\n         .update(\"mock\", new Mock())\n         .testIfErrorContains(\n             \"keywords_multiple_flags() missing 2 required named arguments: b, c\",\n             \"mock.keywords_multiple_flags(a=42)\");\n \n-    ev.new Scenario(\"--experimental_build_setting_api=false\", \"--incompatible_no_attr_license=true\")\n+    ev\n+        .new Scenario(\n+            \"--experimental_sibling_repository_layout=false\", \"--incompatible_no_attr_license=true\")\n         .update(\"mock\", new Mock())\n         .testEval(\"mock.keywords_multiple_flags(a=42)\", \"'keywords_multiple_flags(42, false, 3)'\");\n \n-    ev.new Scenario(\"--experimental_build_setting_api=false\", \"--incompatible_no_attr_license=true\")\n+    ev\n+        .new Scenario(\n+            \"--experimental_sibling_repository_layout=false\", \"--incompatible_no_attr_license=true\")\n         .update(\"mock\", new Mock())\n         .testIfErrorContains(\n             \"parameter 'b' is deprecated and will be removed soon. It may be \"\n@@ -255,26 +263,26 @@ protected Object newModuleHook(ImmutableMap.Builder<String, Object> predeclared)\n             predeclared.put(\n                 \"GlobalSymbol\",\n                 FlagGuardedValue.onlyWhenExperimentalFlagIsTrue(\n-                    FlagIdentifier.EXPERIMENTAL_BUILD_SETTING_API, \"foo\"));\n+                    FlagIdentifier.EXPERIMENTAL_SIBLING_REPOSITORY_LAYOUT, \"foo\"));\n             return null; // no client data\n           }\n         };\n \n     String errorMessage =\n         \"GlobalSymbol is experimental and thus unavailable with the current \"\n-            + \"flags. It may be enabled by setting --experimental_build_setting_api\";\n+            + \"flags. It may be enabled by setting --experimental_sibling_repository_layout\";\n \n-    ev.new Scenario(\"--experimental_build_setting_api=true\")\n+    ev.new Scenario(\"--experimental_sibling_repository_layout=true\")\n         .setUp(\"var = GlobalSymbol\")\n         .testLookup(\"var\", \"foo\");\n \n-    ev.new Scenario(\"--experimental_build_setting_api=false\")\n+    ev.new Scenario(\"--experimental_sibling_repository_layout=false\")\n         .testIfErrorContains(errorMessage, \"var = GlobalSymbol\");\n \n-    ev.new Scenario(\"--experimental_build_setting_api=false\")\n+    ev.new Scenario(\"--experimental_sibling_repository_layout=false\")\n         .testIfErrorContains(errorMessage, \"def my_function():\", \"  var = GlobalSymbol\");\n \n-    ev.new Scenario(\"--experimental_build_setting_api=false\")\n+    ev.new Scenario(\"--experimental_sibling_repository_layout=false\")\n         .setUp(\"GlobalSymbol = 'other'\", \"var = GlobalSymbol\")\n         .testLookup(\"var\", \"other\");\n   }",
      "parent_sha": "226ad7f1e2ca26bb41d4bd7ee6440fb73a564add"
    }
  },
  {
    "oid": "16333bf64a38e7b92b184d8f06699ced8b738929",
    "message": "Always use deferred param files for resource jars\n\nPiperOrigin-RevId: 286178558",
    "date": "2019-12-18T14:16:49Z",
    "url": "https://github.com/bazelbuild/bazel/commit/16333bf64a38e7b92b184d8f06699ced8b738929",
    "details": {
      "sha": "e58cc69a239dfe8e1c0780b7283356755be16eaa",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/java/ResourceJarActionBuilder.java",
      "status": "modified",
      "additions": 4,
      "deletions": 19,
      "changes": 23,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/16333bf64a38e7b92b184d8f06699ced8b738929/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fjava%2FResourceJarActionBuilder.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/16333bf64a38e7b92b184d8f06699ced8b738929/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fjava%2FResourceJarActionBuilder.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fjava%2FResourceJarActionBuilder.java?ref=16333bf64a38e7b92b184d8f06699ced8b738929",
      "patch": "@@ -18,8 +18,6 @@\n \n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n-import com.google.common.collect.Iterables;\n-import com.google.common.collect.Streams;\n import com.google.devtools.build.lib.actions.Artifact;\n import com.google.devtools.build.lib.actions.ParamFileInfo;\n import com.google.devtools.build.lib.actions.ParameterFile.ParameterFileType;\n@@ -37,6 +35,9 @@\n public class ResourceJarActionBuilder {\n   public static final String MNEMONIC = \"JavaResourceJar\";\n \n+  private static final ParamFileInfo PARAM_FILE_INFO =\n+      ParamFileInfo.builder(ParameterFileType.SHELL_QUOTED).build();\n+\n   private Artifact outputJar;\n   private Map<PathFragment, Artifact> resources = ImmutableMap.of();\n   private NestedSet<Artifact> resourceJars = NestedSetBuilder.emptySet(Order.STABLE_ORDER);\n@@ -124,18 +125,6 @@ public void build(JavaSemantics semantics, RuleContext ruleContext) {\n     if (!classpathResources.isEmpty()) {\n       command.addExecPaths(\"--classpath_resources\", classpathResources);\n     }\n-    ParamFileInfo paramFileInfo = null;\n-    // TODO(b/37444705): remove this logic and always call useParameterFile once the bug is fixed\n-    // Most resource jar actions are very small and expanding the argument list for\n-    // ParamFileHelper#getParamsFileMaybe is expensive, so avoid doing that work if\n-    // we definitely don't need a params file.\n-    // This heuristic could be much more aggressive, but we don't ever want to skip\n-    // the params file in situations where it is required for --min_param_file_size.\n-    if (sizeGreaterThanOrEqual(\n-            Iterables.concat(messages, resources.values(), resourceJars, classpathResources), 10)\n-        || ruleContext.getConfiguration().getCommandLineLimits().maxLength < 10000) {\n-      paramFileInfo = ParamFileInfo.builder(ParameterFileType.SHELL_QUOTED).build();\n-    }\n     ruleContext.registerAction(\n         builder\n             .addOutput(outputJar)\n@@ -144,16 +133,12 @@ public void build(JavaSemantics semantics, RuleContext ruleContext) {\n             .addTransitiveInputs(resourceJars)\n             .addTransitiveInputs(additionalInputs)\n             .addInputs(classpathResources)\n-            .addCommandLine(command.build(), paramFileInfo)\n+            .addCommandLine(command.build(), PARAM_FILE_INFO)\n             .setProgressMessage(\"Building Java resource jar\")\n             .setMnemonic(MNEMONIC)\n             .build(ruleContext));\n   }\n \n-  boolean sizeGreaterThanOrEqual(Iterable<?> elements, int size) {\n-    return Streams.stream(elements).limit(size).count() == size;\n-  }\n-\n   private static void addAsResourcePrefixedExecPath(\n       PathFragment resourcePath, Artifact artifact, CustomCommandLine.Builder builder) {\n     PathFragment execPath = artifact.getExecPath();",
      "parent_sha": "f1d6b1fc141e1d73a22af89122784cd0287161e6"
    }
  },
  {
    "oid": "ef23ba57f2565fa6f049aa26ebd695c0fdfdcc60",
    "message": "Mark relative_to_caller_repository as deprecated in Label constructor.\n\nRELNOTES: in the Label() function, relative_to_caller_repository is now deprecated.\nPiperOrigin-RevId: 177443907",
    "date": "2017-11-30T14:07:27Z",
    "url": "https://github.com/bazelbuild/bazel/commit/ef23ba57f2565fa6f049aa26ebd695c0fdfdcc60",
    "details": {
      "sha": "a697721ea9f5cd6907358f7e86ea79e033432c0c",
      "filename": "src/main/java/com/google/devtools/build/lib/analysis/skylark/SkylarkRuleClassFunctions.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/ef23ba57f2565fa6f049aa26ebd695c0fdfdcc60/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Fskylark%2FSkylarkRuleClassFunctions.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/ef23ba57f2565fa6f049aa26ebd695c0fdfdcc60/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Fskylark%2FSkylarkRuleClassFunctions.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Fskylark%2FSkylarkRuleClassFunctions.java?ref=ef23ba57f2565fa6f049aa26ebd695c0fdfdcc60",
      "patch": "@@ -948,8 +948,13 @@ public void repr(SkylarkPrinter printer) {\n         named = true,\n         positional = false,\n         doc =\n-            \"whether the label should be resolved relative to the label of the file this \"\n-                + \"function is called from.\"\n+            \"Deprecated. Do not use. \"\n+                + \"When relative_to_caller_repository is True and the calling thread is a rule's \"\n+                + \"implementation function, then a repo-relative label //foo:bar is resolved \"\n+                + \"relative to the rule's repository.  For calls to Label from any other \"\n+                + \"thread, or calls in which the relative_to_caller_repository flag is False, \"\n+                + \"a repo-relative label is resolved relative to the file in which the \"\n+                + \"Label() call appears.\"\n       )\n     },\n     useLocation = true,",
      "parent_sha": "3549d761b3ed2120510b316a98fb0a9779feed12"
    }
  },
  {
    "oid": "cfc7581ce90a653c4228c88233af7f7c57efb3b6",
    "message": "Flip --experimental_objc_include_scanning\n\nEven though this flag is visible in bazel, it is only used internally.  It\nshould be a no-op outside of Google.\n\nPiperOrigin-RevId: 600771424\nChange-Id: Ic6f4bb45d46f13c572e1e4812b6bdde8dbca4d90",
    "date": "2024-01-23T14:40:43Z",
    "url": "https://github.com/bazelbuild/bazel/commit/cfc7581ce90a653c4228c88233af7f7c57efb3b6",
    "details": {
      "sha": "e579070ce731cbea299241d372d96468a479a9ec",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/cpp/CppOptions.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/cfc7581ce90a653c4228c88233af7f7c57efb3b6/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fcpp%2FCppOptions.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/cfc7581ce90a653c4228c88233af7f7c57efb3b6/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fcpp%2FCppOptions.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fcpp%2FCppOptions.java?ref=cfc7581ce90a653c4228c88233af7f7c57efb3b6",
      "patch": "@@ -992,7 +992,7 @@ public Label getMemProfProfileLabel() {\n \n   @Option(\n       name = \"experimental_objc_include_scanning\",\n-      defaultValue = \"false\",\n+      defaultValue = \"true\",\n       documentationCategory = OptionDocumentationCategory.BUILD_TIME_OPTIMIZATION,\n       effectTags = {\n         OptionEffectTag.LOADING_AND_ANALYSIS,",
      "parent_sha": "1b0a2a12ff3388a850069763d7c38155b111edbf"
    }
  },
  {
    "oid": "2f746b3df971de42ea1222f4bb6851f8fd5e1e11",
    "message": "Remove extraneous check in DependencyResolver.\n\nAt this point in the method we already know that aspect != null,\nbecause we're in the else-branch of an if (aspect == null).\n\n--\nMOS_MIGRATED_REVID=104674784",
    "date": "2015-10-06T07:03:38Z",
    "url": "https://github.com/bazelbuild/bazel/commit/2f746b3df971de42ea1222f4bb6851f8fd5e1e11",
    "details": {
      "sha": "63e90125fa43e2bb1151bd4ac563fa114c4bcf62",
      "filename": "src/main/java/com/google/devtools/build/lib/analysis/DependencyResolver.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/2f746b3df971de42ea1222f4bb6851f8fd5e1e11/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2FDependencyResolver.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/2f746b3df971de42ea1222f4bb6851f8fd5e1e11/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2FDependencyResolver.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2FDependencyResolver.java?ref=2f746b3df971de42ea1222f4bb6851f8fd5e1e11",
      "patch": "@@ -260,9 +260,7 @@ private ListMultimap<Attribute, LabelAndConfiguration> resolveAttributes(\n     } else {\n       attributes = new ArrayList<>();\n       attributes.addAll(rule.getRuleClassObject().getAttributes());\n-      if (aspect != null) {\n-        attributes.addAll(aspect.getAttributes().values());\n-      }\n+      attributes.addAll(aspect.getAttributes().values());\n     }\n \n     ImmutableSortedKeyListMultimap.Builder<Attribute, LabelAndConfiguration> result =",
      "parent_sha": "bf01d8424cae8a1c141106c26fab44a2c3c6f85b"
    }
  },
  {
    "oid": "8a32c3758a28b9c8624422a364a74987315143da",
    "message": "Fix doc typo.\n\n--\nPiperOrigin-RevId: 141916305\nMOS_MIGRATED_REVID=141916305",
    "date": "2016-12-13T21:05:23Z",
    "url": "https://github.com/bazelbuild/bazel/commit/8a32c3758a28b9c8624422a364a74987315143da",
    "details": {
      "sha": "20fe79a70891693736dedc5cf3b9f2a5e0797bd9",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/android/AarImportBaseRule.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/8a32c3758a28b9c8624422a364a74987315143da/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fandroid%2FAarImportBaseRule.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/8a32c3758a28b9c8624422a364a74987315143da/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fandroid%2FAarImportBaseRule.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fandroid%2FAarImportBaseRule.java?ref=8a32c3758a28b9c8624422a364a74987315143da",
      "patch": "@@ -42,7 +42,7 @@ public RuleClass build(Builder builder, RuleDefinitionEnvironment environment) {\n             .mandatory()\n             .allowedFileTypes(FileType.of(\".aar\")))\n         /* <!-- #BLAZE_RULE(aar_import).ATTRIBUTE(exports) -->\n-        Target to export to rules that depend on this rule.\n+        Targets to export to rules that depend on this rule.\n         See <a href=\"${link java_library.exports}\">java_library.exports.\n         <!-- #END_BLAZE_RULE.ATTRIBUTE --> */\n         .add(attr(\"exports\", LABEL_LIST)",
      "parent_sha": "a028ae2a4949cbc3051a6f0b110577459d2c4d5b"
    }
  },
  {
    "oid": "540f03bf2d4dba5f4d012378d969ea0d97cf57d1",
    "message": "Farm out DirtyingNodeVisitor intermediate nodes parents visitation when rdeps count is more than 100.\n\nPiperOrigin-RevId: 737689441\nChange-Id: Ieeafca1aebee845d8f71e7be126e63bf220bc248",
    "date": "2025-03-17T18:33:14Z",
    "url": "https://github.com/bazelbuild/bazel/commit/540f03bf2d4dba5f4d012378d969ea0d97cf57d1",
    "details": {
      "sha": "5d6f2a95e67e27ef1d10e8a26732ab6109ef85d3",
      "filename": "src/main/java/com/google/devtools/build/skyframe/InvalidatingNodeVisitor.java",
      "status": "modified",
      "additions": 45,
      "deletions": 7,
      "changes": 52,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/540f03bf2d4dba5f4d012378d969ea0d97cf57d1/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fskyframe%2FInvalidatingNodeVisitor.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/540f03bf2d4dba5f4d012378d969ea0d97cf57d1/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fskyframe%2FInvalidatingNodeVisitor.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fskyframe%2FInvalidatingNodeVisitor.java?ref=540f03bf2d4dba5f4d012378d969ea0d97cf57d1",
      "patch": "@@ -40,6 +40,7 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n@@ -254,6 +255,7 @@ protected void runInternal(ImmutableList<Pair<SkyKey, InvalidationType>> pending\n               MIN_TIME_FOR_LOGGING)) {\n         // To avoid contention and scheduling too many jobs for our #cpus, we start\n         // DEFAULT_THREAD_COUNT jobs, each processing a chunk of the pending visitations.\n+        // TODO: b/404241620 - Combine similar logic in DeletingNodeVisitor and DirtyNodeVisitor.\n         long listSize = pendingList.size();\n         long numThreads = min(DEFAULT_THREAD_COUNT, listSize);\n         for (long i = 0; i < numThreads; i++) {\n@@ -401,6 +403,7 @@ public void visit(Collection<SkyKey> keys, InvalidationType invalidationType) {\n   /** A node-dirtying implementation. */\n   static final class DirtyingNodeVisitor extends InvalidatingNodeVisitor<QueryableGraph> {\n     private static final int SAFE_STACK_DEPTH = 1 << 9;\n+    private static final int PARENT_VISITATION_FARM_OUT_THRESHOLD = 100;\n \n     private final Set<SkyKey> changed =\n         Collections.newSetFromMap(\n@@ -558,13 +561,48 @@ private void dirtyKeyAndVisitParents(\n       progressReceiver.dirtied(key, dirtyType);\n       pendingVisitations.remove(Pair.of(key, invalidationType));\n \n-      // Propagate dirtiness upwards and mark this node dirty/changed. Reverse deps should\n-      // only be marked dirty (because only a dependency of theirs has changed).\n-      visit(\n-          markedDirtyResult.getReverseDepsUnsafe(),\n-          InvalidationType.DIRTIED,\n-          depthForOverflowCheck,\n-          key);\n+      Collection<SkyKey> rdeps = markedDirtyResult.getReverseDepsUnsafe();\n+\n+      if (rdeps.size() < PARENT_VISITATION_FARM_OUT_THRESHOLD) {\n+        // If rdeps size is less than the threshold, we know rdep visitation will not farm out. So\n+        // just call visit() on the current thread and return.\n+        visit(rdeps, InvalidationType.DIRTIED, depthForOverflowCheck, key);\n+        return;\n+      }\n+\n+      List<SkyKey> rdepsList = rdeps.stream().toList();\n+      long listSize = rdepsList.size();\n+      long numBatches =\n+          (listSize + PARENT_VISITATION_FARM_OUT_THRESHOLD - 1)\n+              / PARENT_VISITATION_FARM_OUT_THRESHOLD;\n+\n+      // Delegate all parents batch visitations to other \"dirty node visitor\" threads, except the\n+      // last one.\n+      // TODO: b/404241620 - Combine similar logic in DeletingNodeVisitor and DirtyNodeVisitor.\n+      long i = 0;\n+      for (; i < numBatches - 1; ++i) {\n+        // Use long multiplication to avoid possible overflow, as numThreads * listSize might be\n+        // larger than max int.\n+        int startIdx = (int) ((i * listSize) / numBatches);\n+        int endIdx = (int) (((i + 1) * listSize) / numBatches);\n+        executor.execute(\n+            () ->\n+                visit(\n+                    rdepsList.subList(startIdx, endIdx),\n+                    InvalidationType.DIRTIED,\n+                    depthForOverflowCheck,\n+                    key));\n+      }\n+\n+      // Visit the last batches of parents on the current thread.\n+      int finalStartIdx = (int) ((i * listSize) / numBatches);\n+      if (finalStartIdx < rdepsList.size()) {\n+        visit(\n+            rdepsList.subList(finalStartIdx, rdepsList.size()),\n+            InvalidationType.DIRTIED,\n+            depthForOverflowCheck,\n+            key);\n+      }\n     }\n   }\n }",
      "parent_sha": "67ad575f9347aebf5765b8a3840f923a56a5ffc2"
    }
  },
  {
    "oid": "da6f8026967e2338973306c9d85ae6cf23244ecb",
    "message": "Deprecate `--experimental_spawn_scheduler` flag, as it causes more harm than good and can easily be replaced.\n\nPiperOrigin-RevId: 469682746\nChange-Id: I603bfbf2b73aa11a1eb99b700648dbf4212db56e",
    "date": "2022-08-24T10:32:15Z",
    "url": "https://github.com/bazelbuild/bazel/commit/da6f8026967e2338973306c9d85ae6cf23244ecb",
    "details": {
      "sha": "3bc70e0df40f1db8bc7e713e31e6c1a77e5dab75",
      "filename": "src/main/java/com/google/devtools/build/lib/dynamic/DynamicExecutionOptions.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/da6f8026967e2338973306c9d85ae6cf23244ecb/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fdynamic%2FDynamicExecutionOptions.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/da6f8026967e2338973306c9d85ae6cf23244ecb/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fdynamic%2FDynamicExecutionOptions.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fdynamic%2FDynamicExecutionOptions.java?ref=da6f8026967e2338973306c9d85ae6cf23244ecb",
      "patch": "@@ -41,7 +41,13 @@ public class DynamicExecutionOptions extends OptionsBase {\n       expansion = {\n         \"--internal_spawn_scheduler\",\n         \"--spawn_strategy=dynamic\",\n-      })\n+      },\n+      deprecationWarning =\n+          \"--experimental_spawn_scheduler is deprecated. Using dynamic execution for everything is\"\n+              + \" rarely a good idea (see https://bazel.build/remote/dynamic). If you really want\"\n+              + \" to enable dynamic execution globally, pass `--internal_spawn_scheduler \"\n+              + \"--spawn_strategy=dynamic`.\")\n+  @Deprecated\n   public Void experimentalSpawnScheduler;\n \n   @Option(",
      "parent_sha": "c535f5695708fbd34b54b789a828af8ee417fd95"
    }
  },
  {
    "oid": "56832e8a3d8f8998920775db7c60d02927db1f6f",
    "message": "Use try-resource for profiling skyfunction.\n\nPiperOrigin-RevId: 653242429\nChange-Id: Ifa04b24857140fa62cbe5d6af5948bbb9dbe39f0",
    "date": "2024-07-17T15:29:19Z",
    "url": "https://github.com/bazelbuild/bazel/commit/56832e8a3d8f8998920775db7c60d02927db1f6f",
    "details": {
      "sha": "e546b311cafcdb983a23bbdbddd450a8ab4a5702",
      "filename": "src/main/java/com/google/devtools/build/skyframe/AbstractParallelEvaluator.java",
      "status": "modified",
      "additions": 3,
      "deletions": 13,
      "changes": 16,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/56832e8a3d8f8998920775db7c60d02927db1f6f/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fskyframe%2FAbstractParallelEvaluator.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/56832e8a3d8f8998920775db7c60d02927db1f6f/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fskyframe%2FAbstractParallelEvaluator.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fskyframe%2FAbstractParallelEvaluator.java?ref=56832e8a3d8f8998920775db7c60d02927db1f6f",
      "patch": "@@ -31,7 +31,6 @@\n import com.google.common.graph.ImmutableGraph;\n import com.google.common.graph.Traverser;\n import com.google.common.util.concurrent.ListenableFuture;\n-import com.google.devtools.build.lib.clock.BlazeClock;\n import com.google.devtools.build.lib.collect.nestedset.NestedSet;\n import com.google.devtools.build.lib.concurrent.QuiescingExecutor;\n import com.google.devtools.build.lib.events.Event;\n@@ -54,7 +53,6 @@\n import com.google.devtools.build.skyframe.proto.GraphInconsistency.Inconsistency;\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n import java.io.IOException;\n-import java.time.Duration;\n import java.util.Collection;\n import java.util.List;\n import java.util.Set;\n@@ -461,22 +459,14 @@ public void run() {\n                 nodeEntry);\n \n         SkyValue value = null;\n-        long startTimeNanos = BlazeClock.instance().nanoTime();\n-        try {\n+        try (var s =\n+            Profiler.instance()\n+                .profile(ProfilerTask.SKYFUNCTION, skyKey.functionName().getName())) {\n           try {\n             evaluatorContext.getProgressReceiver().stateStarting(skyKey, NodeState.COMPUTE);\n             value = skyFunction.compute(skyKey, env);\n           } finally {\n             evaluatorContext.getProgressReceiver().stateEnding(skyKey, NodeState.COMPUTE);\n-            long elapsedTimeNanos = BlazeClock.instance().nanoTime() - startTimeNanos;\n-            if (elapsedTimeNanos > 0) {\n-              Profiler.instance()\n-                  .logSimpleTaskDuration(\n-                      startTimeNanos,\n-                      Duration.ofNanos(elapsedTimeNanos),\n-                      ProfilerTask.SKYFUNCTION,\n-                      skyKey.functionName().getName());\n-            }\n           }\n         } catch (SkyFunctionException builderException) {\n           // TODO(b/261604460): invalidating the state cache here appears to be load-bearing for",
      "parent_sha": "9bc4fe670b19c7c6c2e4f99f061b33c8d27a5013"
    }
  },
  {
    "oid": "6baddebc38a27b17ccb1b189a1e20dbc46d837d5",
    "message": "Add deprecation warning for --objc_generate_debug_symbols.\n\nRELNOTES: --objc_generate_debug_symbols is now deprecated.\n\n--\nMOS_MIGRATED_REVID=122432600",
    "date": "2016-05-17T16:14:28Z",
    "url": "https://github.com/bazelbuild/bazel/commit/6baddebc38a27b17ccb1b189a1e20dbc46d837d5",
    "details": {
      "sha": "6d4f47552fb964f18a3d3c41bd5a4a2047163f8d",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/objc/ObjcCommandLineOptions.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/6baddebc38a27b17ccb1b189a1e20dbc46d837d5/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fobjc%2FObjcCommandLineOptions.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/6baddebc38a27b17ccb1b189a1e20dbc46d837d5/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fobjc%2FObjcCommandLineOptions.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fobjc%2FObjcCommandLineOptions.java?ref=6baddebc38a27b17ccb1b189a1e20dbc46d837d5",
      "patch": "@@ -52,11 +52,14 @@ public class ObjcCommandLineOptions extends FragmentOptions {\n           + \"on the machine the simulator will be run on.\")\n   public String iosSimulatorDevice;\n \n-  // TODO(b/28110492): Deprecate this.\n+  // Deprecated. See b/27942021 for more details.\n   @Option(\n     name = \"objc_generate_debug_symbols\",\n     defaultValue = \"false\",\n     category = \"flags\",\n+    deprecationWarning = \"-g is enabled for all dbg builds.\"\n+        + \"Use --apple_generate_dsym flag for dSYM.\"\n+        + \"Use apple_generate_breakpad rule for breakpad.\",\n     help = \"Specifies whether to generate debug symbol(.dSYM) file.\"\n   )\n   public boolean generateDebugSymbols;",
      "parent_sha": "57b49df12334b6386290ea5399f1349b73357c87"
    }
  },
  {
    "oid": "29375d405399a2d39b42c853849e39cb82048c19",
    "message": "Change ValueVisitor to use delegation\n\nThis simplifies a future change that introduces new variance to\nValueVisitor's use of AbstractQueueVisitor.\n\n--\nMOS_MIGRATED_REVID=106846210",
    "date": "2015-11-02T23:18:49Z",
    "url": "https://github.com/bazelbuild/bazel/commit/29375d405399a2d39b42c853849e39cb82048c19",
    "details": {
      "sha": "3c64b616e0dc009b5d87fb2ee46861307fd910de",
      "filename": "src/main/java/com/google/devtools/build/skyframe/ParallelEvaluator.java",
      "status": "modified",
      "additions": 21,
      "deletions": 12,
      "changes": 33,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/29375d405399a2d39b42c853849e39cb82048c19/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fskyframe%2FParallelEvaluator.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/29375d405399a2d39b42c853849e39cb82048c19/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fskyframe%2FParallelEvaluator.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fskyframe%2FParallelEvaluator.java?ref=29375d405399a2d39b42c853849e39cb82048c19",
      "patch": "@@ -15,6 +15,7 @@\n \n import static com.google.devtools.build.skyframe.SkyKeyInterner.SKY_KEY_INTERNER;\n \n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Preconditions;\n import com.google.common.base.Predicate;\n import com.google.common.base.Predicates;\n@@ -610,25 +611,28 @@ protected ErrorClassification classifyException(Exception e) {\n         }\n       };\n \n-  private class ValueVisitor extends AbstractQueueVisitor {\n+  private class ValueVisitor {\n+\n+    private final AbstractQueueVisitor abstractQueueVisitor;\n     private AtomicBoolean preventNewEvaluations = new AtomicBoolean(false);\n     private final Set<SkyKey> inflightNodes = Sets.newConcurrentHashSet();\n     private final Set<RuntimeException> crashes = Sets.newConcurrentHashSet();\n \n     private ValueVisitor(int threadCount) {\n-      super(\n-          /*concurrent*/ true,\n-          threadCount,\n-          1,\n-          TimeUnit.SECONDS,\n-          /*failFastOnException*/ true,\n-          /*failFastOnInterrupt*/ true,\n-          \"skyframe-evaluator\",\n-          VALUE_VISITOR_ERROR_CLASSIFIER);\n+      abstractQueueVisitor =\n+          new AbstractQueueVisitor(\n+              /*concurrent*/ true,\n+              threadCount,\n+              1,\n+              TimeUnit.SECONDS,\n+              /*failFastOnException*/ true,\n+              /*failFastOnInterrupt*/ true,\n+              \"skyframe-evaluator\",\n+              VALUE_VISITOR_ERROR_CLASSIFIER);\n     }\n \n     protected void waitForCompletion() throws InterruptedException {\n-      awaitQuiescence(/*interruptWorkers=*/ true);\n+      abstractQueueVisitor.awaitQuiescence(/*interruptWorkers=*/ true);\n     }\n \n     public void enqueueEvaluation(final SkyKey key) {\n@@ -649,7 +653,7 @@ public void enqueueEvaluation(final SkyKey key) {\n       if (newlyEnqueued && progressReceiver != null) {\n         progressReceiver.enqueueing(key);\n       }\n-      execute(new Evaluate(this, key));\n+      abstractQueueVisitor.execute(new Evaluate(this, key));\n     }\n \n     /**\n@@ -677,6 +681,11 @@ void notifyDone(SkyKey key) {\n     private boolean isInflight(SkyKey key) {\n       return inflightNodes.contains(key);\n     }\n+\n+    @VisibleForTesting\n+    public CountDownLatch getExceptionLatchForTestingOnly() {\n+      return abstractQueueVisitor.getExceptionLatchForTestingOnly();\n+    }\n   }\n \n   /**",
      "parent_sha": "b92ff43bcb5653442e36b1d68403439b4ac65d33"
    }
  },
  {
    "oid": "798e2888aea6ae7b0ac3c7db2de9d34637595797",
    "message": "BEGIN_PUBLIC\nAdd missing spaces in documentation\nEND_PUBLIC\n\nPiperOrigin-RevId: 458912420\nChange-Id: I04f0123ce9c8c96be629c287249ae1a0274fed24",
    "date": "2022-07-04T14:52:39Z",
    "url": "https://github.com/bazelbuild/bazel/commit/798e2888aea6ae7b0ac3c7db2de9d34637595797",
    "details": {
      "sha": "a2de4e2d2400f83894f72399b4b4f2489a909c1b",
      "filename": "src/main/java/com/google/devtools/build/lib/starlarkbuildapi/CommandLineArgsApi.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/798e2888aea6ae7b0ac3c7db2de9d34637595797/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fstarlarkbuildapi%2FCommandLineArgsApi.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/798e2888aea6ae7b0ac3c7db2de9d34637595797/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fstarlarkbuildapi%2FCommandLineArgsApi.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fstarlarkbuildapi%2FCommandLineArgsApi.java?ref=798e2888aea6ae7b0ac3c7db2de9d34637595797",
      "patch": "@@ -370,7 +370,7 @@ CommandLineArgsApi addAll(\n                     + \"This arg will not be added if <code>omit_if_empty</code> is true \"\n                     + \"(the default) and there are no strings derived from <code>values</code> \"\n                     + \"to join together (which can happen if <code>values</code> is empty \"\n-                    + \"or all of its items are filtered).\"\n+                    + \"or all of its items are filtered). \"\n                     + \"If only one positional parameter is passed, it is interpreted as \"\n                     + \"<code>values</code> (see below).\"),\n         @Param(\n@@ -473,7 +473,7 @@ CommandLineArgsApi addJoined(\n           \"Spills the args to a params file, replacing them with a pointer to the param file. \"\n               + \"Use when your args may be too large for the system's command length limits.\"\n               + \"<p>Bazel may choose to elide writing the params file to the output tree during \"\n-              + \"execution for efficiency.\"\n+              + \"execution for efficiency. \"\n               + \"If you are debugging actions and want to inspect the param file, \"\n               + \"pass <code>--materialize_param_files</code> to your build.\",\n       parameters = {",
      "parent_sha": "29e8e7d733d350891291c7d98a44346d814216ec"
    }
  },
  {
    "oid": "8188ccf5f653d2c110a4196861288f96607ddf56",
    "message": "Have split deps sort by mnemonic, then config checksum.\n\nThe mnemonic is something like \"k8-fastbuild\", which almost every configuration has in common. This causes sorting to be more deterministic.\n\nPart of work on toolchain transitions, #10523.\n\nPiperOrigin-RevId: 313803864",
    "date": "2020-05-29T17:20:50Z",
    "url": "https://github.com/bazelbuild/bazel/commit/8188ccf5f653d2c110a4196861288f96607ddf56",
    "details": {
      "sha": "dc27ad953ea409ed965b6a12b1536300253752f5",
      "filename": "src/main/java/com/google/devtools/build/lib/analysis/config/ConfigurationResolver.java",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/8188ccf5f653d2c110a4196861288f96607ddf56/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Fconfig%2FConfigurationResolver.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/8188ccf5f653d2c110a4196861288f96607ddf56/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Fconfig%2FConfigurationResolver.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Fconfig%2FConfigurationResolver.java?ref=8188ccf5f653d2c110a4196861288f96607ddf56",
      "patch": "@@ -15,6 +15,7 @@\n package com.google.devtools.build.lib.analysis.config;\n \n import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Functions;\n import com.google.common.base.Joiner;\n import com.google.common.base.Verify;\n import com.google.common.base.VerifyException;\n@@ -675,17 +676,15 @@ private static void checkForMissingFragments(\n   }\n \n   /**\n-   * Determines the output ordering of each <attribute, depLabel> ->\n-   * [dep<config1>, dep<config2>, ...] collection produced by a split transition.\n+   * Determines the output ordering of each {@code <attribute, depLabel> -> [dep<config1>,\n+   * dep<config2>, ...]} collection produced by a split transition.\n    */\n   @VisibleForTesting\n   public static final Comparator<Dependency> SPLIT_DEP_ORDERING =\n-      new Comparator<Dependency>() {\n-        @Override\n-        public int compare(Dependency d1, Dependency d2) {\n-          return d1.getConfiguration().getMnemonic().compareTo(d2.getConfiguration().getMnemonic());\n-        }\n-      };\n+      Comparator.comparing(\n+              Functions.compose(BuildConfiguration::getMnemonic, Dependency::getConfiguration))\n+          .thenComparing(\n+              Functions.compose(BuildConfiguration::checksum, Dependency::getConfiguration));\n \n   /**\n    * Returns a copy of the output deps using the same key and value ordering as the input deps.",
      "parent_sha": "d0fa28bffd282bb709643c9dcf319c279e9c64a4"
    }
  },
  {
    "oid": "021684f61aba4a3f27231f5fbac642f635339e50",
    "message": "Change \"rule\" -> \"target\" in existing_rule() docs\n\nRELNOTES: None\nPiperOrigin-RevId: 218559308",
    "date": "2018-10-24T19:50:51Z",
    "url": "https://github.com/bazelbuild/bazel/commit/021684f61aba4a3f27231f5fbac642f635339e50",
    "details": {
      "sha": "0e4149e9aa94b73f2e218f3eb6f04f51f71264f9",
      "filename": "src/main/java/com/google/devtools/build/lib/skylarkbuildapi/SkylarkNativeModuleApi.java",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/021684f61aba4a3f27231f5fbac642f635339e50/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskylarkbuildapi%2FSkylarkNativeModuleApi.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/021684f61aba4a3f27231f5fbac642f635339e50/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskylarkbuildapi%2FSkylarkNativeModuleApi.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskylarkbuildapi%2FSkylarkNativeModuleApi.java?ref=021684f61aba4a3f27231f5fbac642f635339e50",
      "patch": "@@ -89,10 +89,13 @@ public SkylarkList<?> glob(\n   @SkylarkCallable(\n     name = \"existing_rule\",\n     doc =\n-        \"Returns a dictionary representing the attributes of a previously defined rule, \"\n-            + \"or None if the rule does not exist.\",\n+        \"Returns a dictionary representing the attributes of a previously defined target, or \"\n+            + \"<code>None</code> if the target does not exist.\"\n+            + \"\"\n+            + \"<p><i>Note: If possible, avoid using this function. It makes BUILD files brittle \"\n+            + \"and order-dependent.\",\n     parameters = {\n-      @Param(name = \"name\", type = String.class, doc = \"The name of the rule.\")\n+      @Param(name = \"name\", type = String.class, doc = \"The name of the target.\")\n     },\n     useAst = true,\n     useEnvironment = true\n@@ -103,9 +106,12 @@ public Object existingRule(String name, FuncallExpression ast, Environment env)\n   @SkylarkCallable(\n     name = \"existing_rules\",\n     doc =\n-        \"Returns a dict containing all the rules instantiated so far. \"\n-            + \"The map key is the name of the rule. The map value is equivalent to the \"\n-            + \"existing_rule output for that rule.\",\n+        \"Returns a dictionary containing all the targets instantiated so far. The map key is the \"\n+            + \"name of the target. The map value is equivalent to the <code>existing_rule</code> \"\n+            + \"output for that target.\"\n+            + \"\"\n+            + \"<p><i>Note: If possible, avoid using this function. It makes BUILD files brittle \"\n+            + \"and order-dependent.\",\n     useAst = true,\n     useEnvironment = true\n   )",
      "parent_sha": "3c42a3c446c0b9eb50ac829d9bd3a7a14f53567a"
    }
  },
  {
    "oid": "8e7f25a63d16a76940da82b5648e438b0bf1377b",
    "message": "Automated g4 rollforward of commit e7ab452ac940e645046221dee9b63a670f8a276c.\n(Automated g4 rollback of commit 23004957a56d304106d5dbf0d6ea52ec10713b39).\n\n*** Reason for rollback ***\n\nThe problems that forced commit 23004957a56d304106d5dbf0d6ea52ec10713b39 were fixed in commit e6392cd380fce14d719890c78d5eb2657e8a6cfc.\n\n*** Original change description ***\n\nAutomated g4 rollback of commit e7ab452ac940e645046221dee9b63a670f8a276c.\n\n*** Reason for rollback ***\n\nSome of the work supporting this is being rolled back due to uncaught crash bugs.\n\n*** Original change description ***\n\nEnable dynamic configurations for all builds.\n\nPiperOrigin-RevId: 158420321",
    "date": "2017-06-09T08:23:09Z",
    "url": "https://github.com/bazelbuild/bazel/commit/8e7f25a63d16a76940da82b5648e438b0bf1377b",
    "details": {
      "sha": "e5869a6ad13984356e9f20e1e045683af6105ae8",
      "filename": "src/main/java/com/google/devtools/build/lib/analysis/config/BuildConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/8e7f25a63d16a76940da82b5648e438b0bf1377b/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Fconfig%2FBuildConfiguration.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/8e7f25a63d16a76940da82b5648e438b0bf1377b/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Fconfig%2FBuildConfiguration.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Fconfig%2FBuildConfiguration.java?ref=8e7f25a63d16a76940da82b5648e438b0bf1377b",
      "patch": "@@ -999,7 +999,7 @@ public DynamicConfigsConverter() {\n \n     @Option(\n       name = \"experimental_dynamic_configs\",\n-      defaultValue = \"notrim_partial\",\n+      defaultValue = \"notrim\",\n       optionUsageRestrictions = OptionUsageRestrictions.UNDOCUMENTED,\n       converter = DynamicConfigsConverter.class,\n       help =",
      "parent_sha": "0cce52ea38f6dc16f3ee0a7d16c8241efd0a9e21"
    }
  },
  {
    "oid": "9db1e242e30e48ff15bbff4691d035e485b75539",
    "message": "Make `--starlark_cpu_profile` adopt `InstrumentationOutput` framework\n\nPiperOrigin-RevId: 700402246\nChange-Id: Iabd467fab2075949efe9fca8d2d24304bb91f4c3",
    "date": "2024-11-26T19:17:18Z",
    "url": "https://github.com/bazelbuild/bazel/commit/9db1e242e30e48ff15bbff4691d035e485b75539",
    "details": {
      "sha": "0a310729b85d80e8192476abb2333f530cbd604b",
      "filename": "src/main/java/com/google/devtools/build/lib/runtime/BlazeCommandDispatcher.java",
      "status": "modified",
      "additions": 14,
      "deletions": 3,
      "changes": 17,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/9db1e242e30e48ff15bbff4691d035e485b75539/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2FBlazeCommandDispatcher.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/9db1e242e30e48ff15bbff4691d035e485b75539/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2FBlazeCommandDispatcher.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2FBlazeCommandDispatcher.java?ref=9db1e242e30e48ff15bbff4691d035e485b75539",
      "patch": "@@ -49,6 +49,7 @@\n import com.google.devtools.build.lib.profiler.Profiler;\n import com.google.devtools.build.lib.profiler.ProfilerTask;\n import com.google.devtools.build.lib.profiler.SilentCloseable;\n+import com.google.devtools.build.lib.runtime.InstrumentationOutputFactory.DestinationRelativeTo;\n import com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy;\n import com.google.devtools.build.lib.server.FailureDetails;\n import com.google.devtools.build.lib.server.FailureDetails.FailureDetail;\n@@ -74,7 +75,6 @@\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n import com.google.protobuf.Any;\n import java.io.BufferedOutputStream;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.OutputStream;\n import java.time.Duration;\n@@ -400,9 +400,20 @@ private BlazeCommandResult execExclusively(\n     // Enable Starlark CPU profiling (--starlark_cpu_profile=/tmp/foo.pprof.gz)\n     boolean success = false;\n     if (!commonOptions.starlarkCpuProfile.isEmpty()) {\n-      FileOutputStream out;\n+      OutputStream out;\n       try {\n-        out = new FileOutputStream(commonOptions.starlarkCpuProfile);\n+        InstrumentationOutput starlarkCpuProfile =\n+            runtime\n+                .getInstrumentationOutputFactory()\n+                .createInstrumentationOutput(\n+                    /* name= */ \"starlarkCpuProfile\",\n+                    PathFragment.create(commonOptions.starlarkCpuProfile),\n+                    DestinationRelativeTo.WORKING_DIRECTORY_OR_HOME,\n+                    env,\n+                    storedEventHandler,\n+                    /* append= */ null,\n+                    /* internal= */ null);\n+        out = starlarkCpuProfile.createOutputStream();\n       } catch (IOException ex) {\n         String message = \"Starlark CPU profiler: \" + ex.getMessage();\n         outErr.printErrLn(message);",
      "parent_sha": "afe87991738784c9c79ba3604f2b99dabd52c8ca"
    }
  },
  {
    "oid": "19f2238b608d7ebba182a2bdd405e4696975f733",
    "message": "Fix hypothetical crash bug in AspectDefinition#addAllAttributesOfAspect when the default value of a parameterized aspect attribute is null. This is hypothetical because I couldn't figure out an end-to-end way to tickle the bug. Still, the surrounding code is very brittle and things may change in the future such that the bug is trivially tickle-able.\n\n--\nMOS_MIGRATED_REVID=124977450",
    "date": "2016-06-16T09:01:39Z",
    "url": "https://github.com/bazelbuild/bazel/commit/19f2238b608d7ebba182a2bdd405e4696975f733",
    "details": {
      "sha": "20c2a6ab288831f113cfd0f8ac508814644310ec",
      "filename": "src/main/java/com/google/devtools/build/lib/packages/AspectDefinition.java",
      "status": "modified",
      "additions": 17,
      "deletions": 4,
      "changes": 21,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/19f2238b608d7ebba182a2bdd405e4696975f733/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fpackages%2FAspectDefinition.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/19f2238b608d7ebba182a2bdd405e4696975f733/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fpackages%2FAspectDefinition.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fpackages%2FAspectDefinition.java?ref=19f2238b608d7ebba182a2bdd405e4696975f733",
      "patch": "@@ -29,6 +29,7 @@\n import java.util.Collection;\n import java.util.LinkedHashMap;\n import java.util.LinkedHashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n@@ -178,6 +179,11 @@ private static ImmutableSet<String> toStringSet(ImmutableSet<Class<?>> classes)\n     return classStrings.build();\n   }\n \n+  @Nullable\n+  private static Label maybeGetRepositoryRelativeLabel(Rule from, @Nullable Label label) {\n+    return label == null ? null : from.getLabel().resolveRepositoryRelative(label);\n+  }\n+\n   /**\n    * Collects all attribute labels from the specified aspectDefinition.\n    */\n@@ -192,14 +198,21 @@ public static void addAllAttributesOfAspect(\n         continue;\n       }\n       if (aspectAttribute.getType() == BuildType.LABEL) {\n-        Label label = from.getLabel().resolveRepositoryRelative(\n-            BuildType.LABEL.cast(aspectAttribute.getDefaultValue(from)));\n+        Label label = maybeGetRepositoryRelativeLabel(\n+            from, BuildType.LABEL.cast(aspectAttribute.getDefaultValue(from)));\n         if (label != null) {\n           labelBuilder.put(aspectAttribute, label);\n         }\n       } else if (aspectAttribute.getType() == BuildType.LABEL_LIST) {\n-        for (Label label : BuildType.LABEL_LIST.cast(aspectAttribute.getDefaultValue(from))) {\n-          labelBuilder.put(aspectAttribute, from.getLabel().resolveRepositoryRelative(label));\n+        List<Label> defaultLabels = BuildType.LABEL_LIST.cast(\n+            aspectAttribute.getDefaultValue(from));\n+        if (defaultLabels != null) {\n+          for (Label defaultLabel : defaultLabels) {\n+            Label label = maybeGetRepositoryRelativeLabel(from, defaultLabel);\n+            if (label != null) {\n+              labelBuilder.put(aspectAttribute, label);\n+            }\n+          }\n         }\n       }\n     }",
      "parent_sha": "cedd8d18afc42d328153056470024a1bd98c5310"
    }
  },
  {
    "oid": "39d9452995abf1dabe4023232ca084ba498b0714",
    "message": "experimental UI: consider progress bar refreshed on every redraw\n\nWhenever the UI has to write a line to the progress buffer, it removes\nthe progress bar, write the line and re-adds the progress bar. Of course,\nthe re-added progress bar is the one that represents the up-to-date state\nat the time of it being re-added. Therefore, this also is a refresh of the\nprogress bar. So update the time stamp tracking the last refresh. In this\nway rate-limits on refreshes are honored more correctly; also, requirements\nof the progress bar having to be refreshed after a certain point in time\nthat have been fulfilled by that implicit refresh are recognized as such,\nkeeping the output less flickering.\n\n--\nChange-Id: I44bcd85a149cb88fcde126119100a6e1ff1ba45d\nReviewed-on: https://bazel-review.googlesource.com/#/c/3873\nMOS_MIGRATED_REVID=125664608",
    "date": "2016-06-23T13:54:09Z",
    "url": "https://github.com/bazelbuild/bazel/commit/39d9452995abf1dabe4023232ca084ba498b0714",
    "details": {
      "sha": "cbe3755de7d7838626a5a5e700e5262f9b724a1c",
      "filename": "src/main/java/com/google/devtools/build/lib/runtime/ExperimentalEventHandler.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/39d9452995abf1dabe4023232ca084ba498b0714/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2FExperimentalEventHandler.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/39d9452995abf1dabe4023232ca084ba498b0714/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2FExperimentalEventHandler.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2FExperimentalEventHandler.java?ref=39d9452995abf1dabe4023232ca084ba498b0714",
      "patch": "@@ -365,7 +365,6 @@ private void doRefresh() {\n         try {\n           if (showProgress && (progressBarNeedsRefresh || timeBasedRefresh())) {\n             progressBarNeedsRefresh = false;\n-            lastRefreshMillis = nowMillis;\n             clearProgressBar();\n             addProgressBar();\n             terminal.flush();\n@@ -498,10 +497,11 @@ private void crlf() throws IOException {\n     terminal.writeString(\"\\n\");\n   }\n \n-  private void addProgressBar() throws IOException {\n+  private synchronized void addProgressBar() throws IOException {\n     LineCountingAnsiTerminalWriter countingTerminalWriter =\n         new LineCountingAnsiTerminalWriter(terminal);\n     AnsiTerminalWriter terminalWriter = countingTerminalWriter;\n+    lastRefreshMillis = clock.currentTimeMillis();\n     if (cursorControl) {\n       terminalWriter = new LineWrappingAnsiTerminalWriter(terminalWriter, terminalWidth - 1);\n     }",
      "parent_sha": "d825a3dd3ae50e0ae745ae8e87b0518408e16113"
    }
  },
  {
    "oid": "46e7fe29a5e3929b8b73867d61786204dd048834",
    "message": "Documentation typo fix\n\nPiperOrigin-RevId: 191930771",
    "date": "2018-04-06T20:23:20Z",
    "url": "https://github.com/bazelbuild/bazel/commit/46e7fe29a5e3929b8b73867d61786204dd048834",
    "details": {
      "sha": "bea1cd3577056798d86592b8c785eed777c14761",
      "filename": "src/main/java/com/google/devtools/build/lib/analysis/RuleContext.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/46e7fe29a5e3929b8b73867d61786204dd048834/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2FRuleContext.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/46e7fe29a5e3929b8b73867d61786204dd048834/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2FRuleContext.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2FRuleContext.java?ref=46e7fe29a5e3929b8b73867d61786204dd048834",
      "patch": "@@ -759,7 +759,7 @@ public List<? extends TransitiveInfoCollection> getPrerequisites(String attribut\n   }\n \n   /**\n-   * Returns the a prerequisites keyed by the CPU of their configurations. If the split transition\n+   * Returns the prerequisites keyed by the CPU of their configurations. If the split transition\n    * is not active (e.g. split() returned an empty list), the key is an empty Optional.\n    */\n   public Map<Optional<String>, ? extends List<? extends TransitiveInfoCollection>>",
      "parent_sha": "74f7897bb4eecf801a9625ca10ee170949532724"
    }
  },
  {
    "oid": "60d8f5a51deb0664abfbe85036122a30a67e7413",
    "message": "Split out `SequencedSkyframeProgressReceiver`\n\nPiperOrigin-RevId: 565750224\nChange-Id: I705fc576cd0be9dff78557ba849fe3c33773e12e",
    "date": "2023-09-15T19:35:08Z",
    "url": "https://github.com/bazelbuild/bazel/commit/60d8f5a51deb0664abfbe85036122a30a67e7413",
    "details": {
      "sha": "308a97a29adbcec44a6802cd402b54617fc42ba4",
      "filename": "src/main/java/com/google/devtools/build/lib/skyframe/SequencedSkyframeExecutor.java",
      "status": "modified",
      "additions": 11,
      "deletions": 8,
      "changes": 19,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/60d8f5a51deb0664abfbe85036122a30a67e7413/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FSequencedSkyframeExecutor.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/60d8f5a51deb0664abfbe85036122a30a67e7413/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FSequencedSkyframeExecutor.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FSequencedSkyframeExecutor.java?ref=60d8f5a51deb0664abfbe85036122a30a67e7413",
      "patch": "@@ -218,15 +218,18 @@ public RecordingDifferencer getDifferencerForTesting() {\n \n   @Override\n   protected SkyframeProgressReceiver newSkyframeProgressReceiver() {\n-    return new SkyframeProgressReceiver() {\n-      @Override\n-      public void invalidated(SkyKey skyKey, InvalidationState state) {\n-        super.invalidated(skyKey, state);\n-        if (state == InvalidationState.DIRTY && skyKey instanceof FileValue.Key) {\n-          incrementalBuildMonitor.reportInvalidatedFileValue();\n-        }\n+    return new SequencedSkyframeProgressReceiver();\n+  }\n+\n+  /** A {@link SkyframeProgressReceiver} tracks dirty {@link FileValue.Key}s. */\n+  protected class SequencedSkyframeProgressReceiver extends SkyframeProgressReceiver {\n+    @Override\n+    public void invalidated(SkyKey skyKey, InvalidationState state) {\n+      super.invalidated(skyKey, state);\n+      if (state == InvalidationState.DIRTY && skyKey instanceof FileValue.Key) {\n+        incrementalBuildMonitor.reportInvalidatedFileValue();\n       }\n-    };\n+    }\n   }\n \n   @Nullable",
      "parent_sha": "820ed9bf86bd8c3ced8aa65784be3f01e40414ec"
    }
  },
  {
    "oid": "f674007557dc73c50a19063d671c662ffa0f423e",
    "message": "Automatic code cleanup.\n\nPiperOrigin-RevId: 326143130",
    "date": "2020-08-12T01:14:15Z",
    "url": "https://github.com/bazelbuild/bazel/commit/f674007557dc73c50a19063d671c662ffa0f423e",
    "details": {
      "sha": "6ff0baad1d7c9df525a4d946a0cc9d6445833038",
      "filename": "src/tools/android/java/com/google/devtools/build/android/AndroidDataBindingProcessingAction.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/f674007557dc73c50a19063d671c662ffa0f423e/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2FAndroidDataBindingProcessingAction.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/f674007557dc73c50a19063d671c662ffa0f423e/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2FAndroidDataBindingProcessingAction.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2FAndroidDataBindingProcessingAction.java?ref=f674007557dc73c50a19063d671c662ffa0f423e",
      "patch": "@@ -28,6 +28,7 @@\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.Collections;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.stream.Stream;\n import java.util.zip.ZipEntry;\n@@ -141,10 +142,11 @@ public static void main(String[] args) throws IOException {\n \n       // 2. Zip all the layout info files into one zip file.\n       try (ZipOutputStream layoutInfoZip =\n-            new ZipOutputStream(Files.newOutputStream(options.dataBindingInfoOut));\n+              new ZipOutputStream(Files.newOutputStream(options.dataBindingInfoOut));\n           Stream<Path> layoutInfos = Files.list(dataBindingInfoOutDir.getPath())) {\n-\n-        for (Path layoutInfo : (Iterable<Path>) layoutInfos::iterator) {\n+        Iterator<Path> it = layoutInfos.iterator();\n+        while (it.hasNext()) {\n+          Path layoutInfo = it.next();\n           ZipEntry zipEntry = new ZipEntry(layoutInfo.getFileName().toString());\n           layoutInfoZip.putNextEntry(zipEntry);\n           Files.copy(layoutInfo, layoutInfoZip);",
      "parent_sha": "a40c64a0d71d2c7edc12824a1223a8e6ca598b77"
    }
  },
  {
    "oid": "226af9c5ac101484ed12e474b784107745ba32a0",
    "message": "Simplify some redundant code\n\nThis is an NFC.\n\nRELNOTES: None\nPiperOrigin-RevId: 321319827",
    "date": "2020-07-15T08:57:09Z",
    "url": "https://github.com/bazelbuild/bazel/commit/226af9c5ac101484ed12e474b784107745ba32a0",
    "details": {
      "sha": "b32f42530b7c0c027777745b9e8a017f9364a5d9",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/objc/CompilationSupport.java",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/226af9c5ac101484ed12e474b784107745ba32a0/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fobjc%2FCompilationSupport.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/226af9c5ac101484ed12e474b784107745ba32a0/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fobjc%2FCompilationSupport.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fobjc%2FCompilationSupport.java?ref=226af9c5ac101484ed12e474b784107745ba32a0",
      "patch": "@@ -473,14 +473,12 @@ private CompilationResult ccCompileAndLink(\n             .addPicObjectFiles(precompiledFiles.getObjectFiles(/* usePic= */ true))\n             .build();\n \n-    CcCompilationOutputs.Builder compilationOutputsBuilder =\n+    CcCompilationOutputs compilationOutputs =\n         CcCompilationOutputs.builder()\n             .merge(objcArcCompilationInfo.getCcCompilationOutputs())\n             .merge(nonObjcArcCompilationInfo.getCcCompilationOutputs())\n-            .merge(precompiledFilesObjects);\n-    compilationOutputsBuilder.merge(objcArcCompilationInfo.getCcCompilationOutputs());\n-    compilationOutputsBuilder.merge(nonObjcArcCompilationInfo.getCcCompilationOutputs());\n-    CcCompilationOutputs compilationOutputs = compilationOutputsBuilder.build();\n+            .merge(precompiledFilesObjects)\n+            .build();\n \n     if (!compilationOutputs.isEmpty()) {\n       resultLink.link(compilationOutputs);\n@@ -510,7 +508,7 @@ private CompilationResult ccCompileAndLink(\n \n     return new CompilationResult(\n         ccCompilationContextBuilder.build(),\n-        compilationOutputsBuilder.build(),\n+        compilationOutputs,\n         ImmutableMap.copyOf(mergedOutputGroups));\n   }\n ",
      "parent_sha": "37687c1e446ab433ca2518022bc5eda9f926e06a"
    }
  },
  {
    "oid": "78543c391b1b35aa211e1a8cbd6698252d861254",
    "message": "Refactoring: get rid of RecursiveFilesystemTraversalValue.ResolvedFileUtils\n\n--\nMOS_MIGRATED_REVID=109420721",
    "date": "2015-12-04T21:06:53Z",
    "url": "https://github.com/bazelbuild/bazel/commit/78543c391b1b35aa211e1a8cbd6698252d861254",
    "details": {
      "sha": "269b5546ebc1a9db50fdde15de3c2b45934435fe",
      "filename": "src/main/java/com/google/devtools/build/lib/skyframe/RecursiveFilesystemTraversalValue.java",
      "status": "modified",
      "additions": 26,
      "deletions": 48,
      "changes": 74,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/78543c391b1b35aa211e1a8cbd6698252d861254/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FRecursiveFilesystemTraversalValue.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/78543c391b1b35aa211e1a8cbd6698252d861254/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FRecursiveFilesystemTraversalValue.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FRecursiveFilesystemTraversalValue.java?ref=78543c391b1b35aa211e1a8cbd6698252d861254",
      "patch": "@@ -282,17 +282,19 @@ public boolean equals(Object obj) {\n       if (!(obj instanceof RegularFile)) {\n         return false;\n       }\n-      return ResolvedFileUtils.areObjectsEqual(this, (RegularFile) obj);\n+      return this.type.equals(((RegularFile) obj).type)\n+          && this.path.equals(((RegularFile) obj).path)\n+          && this.metadata.equals(((RegularFile) obj).metadata);\n     }\n \n     @Override\n     public int hashCode() {\n-      return ResolvedFileUtils.hashCodeOf(this);\n+      return Objects.hashCode(type, path, metadata);\n     }\n \n     @Override\n     public String toString() {\n-      return String.format(\"RegularFile(%s)\", ResolvedFileUtils.asString(this));\n+      return String.format(\"RegularFile(path=%s)\", path);\n     }\n \n     @Override\n@@ -343,17 +345,18 @@ public boolean equals(Object obj) {\n       if (!(obj instanceof Directory)) {\n         return false;\n       }\n-      return ResolvedFileUtils.areObjectsEqual(this, (Directory) obj);\n+      return this.type.equals(((Directory) obj).type)\n+          && this.path.equals(((Directory) obj).path);\n     }\n \n     @Override\n     public int hashCode() {\n-      return ResolvedFileUtils.hashCodeOf(this);\n+      return Objects.hashCode(type, path);\n     }\n \n     @Override\n     public String toString() {\n-      return String.format(\"Directory(%s)\", ResolvedFileUtils.asString(this));\n+      return String.format(\"Directory(path=%s)\", path);\n     }\n \n     @Override\n@@ -413,18 +416,19 @@ public boolean equals(Object obj) {\n       if (!(obj instanceof DanglingSymlink)) {\n         return false;\n       }\n-      DanglingSymlink o = (DanglingSymlink) obj;\n-      return ResolvedFileUtils.areObjectsEqual(this, o) && symlink.equals(o.symlink);\n+      return this.type.equals(((DanglingSymlink) obj).type)\n+          && this.metadata.equals(((DanglingSymlink) obj).metadata)\n+          && this.symlink.equals(((DanglingSymlink) obj).symlink);\n     }\n \n     @Override\n     public int hashCode() {\n-      return Objects.hashCode(ResolvedFileUtils.hashCodeOf(this), symlink);\n+      return Objects.hashCode(type, metadata, symlink);\n     }\n \n     @Override\n     public String toString() {\n-      return String.format(\"DanglingSymlink(%s, %s)\", ResolvedFileUtils.asString(this), symlink);\n+      return String.format(\"DanglingSymlink(%s)\", symlink);\n     }\n \n     @Override\n@@ -494,18 +498,20 @@ public boolean equals(Object obj) {\n       if (!(obj instanceof SymlinkToFile)) {\n         return false;\n       }\n-      SymlinkToFile o = (SymlinkToFile) obj;\n-      return ResolvedFileUtils.areObjectsEqual(this, o) && symlink.equals(o.symlink);\n+      return this.type.equals(((SymlinkToFile) obj).type)\n+          && this.path.equals(((SymlinkToFile) obj).path)\n+          && this.metadata.equals(((SymlinkToFile) obj).metadata)\n+          && this.symlink.equals(((SymlinkToFile) obj).symlink);\n     }\n \n     @Override\n     public int hashCode() {\n-      return Objects.hashCode(ResolvedFileUtils.hashCodeOf(this), symlink);\n+      return Objects.hashCode(type, path, metadata, symlink);\n     }\n \n     @Override\n     public String toString() {\n-      return String.format(\"SymlinkToFile(%s, %s)\", ResolvedFileUtils.asString(this), symlink);\n+      return String.format(\"SymlinkToFile(target=%s, %s)\", path, symlink);\n     }\n \n     @Override\n@@ -568,18 +574,20 @@ public boolean equals(Object obj) {\n       if (!(obj instanceof SymlinkToDirectory)) {\n         return false;\n       }\n-      SymlinkToDirectory o = (SymlinkToDirectory) obj;\n-      return ResolvedFileUtils.areObjectsEqual(this, o) && symlink.equals(o.symlink);\n+      return this.type.equals(((SymlinkToDirectory) obj).type)\n+          && this.path.equals(((SymlinkToDirectory) obj).path)\n+          && this.metadata.equals(((SymlinkToDirectory) obj).metadata)\n+          && this.symlink.equals(((SymlinkToDirectory) obj).symlink);\n     }\n \n     @Override\n     public int hashCode() {\n-      return Objects.hashCode(ResolvedFileUtils.hashCodeOf(this), symlink);\n+      return Objects.hashCode(type, path, metadata, symlink);\n     }\n \n     @Override\n     public String toString() {\n-      return String.format(\"SymlinkToDirectory(%s, %s)\", ResolvedFileUtils.asString(this), symlink);\n+      return String.format(\"SymlinkToDirectory(target=%s, %s)\", path, symlink);\n     }\n \n     @Override\n@@ -625,36 +633,6 @@ public static ResolvedFile danglingSymlink(RootedPath linkNamePath, PathFragment\n     }\n   }\n \n-  private static final class ResolvedFileUtils {\n-    private ResolvedFileUtils() {}\n-\n-    static boolean areObjectsEqual(ResolvedFile a, ResolvedFile b) {\n-      if (a == b) {\n-        return true;\n-      }\n-      if ((a == null) != (b == null)) {\n-        return false;\n-      }\n-      return a.getType().equals(b.getType())\n-          && a.getPath().equals(b.getPath())\n-          && a.getMetadata().equals(b.getMetadata());\n-    }\n-\n-    static int hashCodeOf(ResolvedFile f) {\n-      return Objects.hashCode(f.getType(), f.getPath(), f.getMetadata());\n-    }\n-\n-    static String asString(ResolvedFile f) {\n-      return String.format(\n-          \"type=%s, path=%s, metadata=%s\",\n-          f.getType(),\n-          f.getPath(),\n-          f.getMetadata().isPresent()\n-              ? Integer.toHexString(f.getMetadata().get().hashCode())\n-              : \"(stripped)\");\n-    }\n-  }\n-\n   /**\n    * Path and type information about a single file or symlink.\n    *",
      "parent_sha": "0e222581e674b0f7c186c4bc40be2af680e94643"
    }
  },
  {
    "oid": "f1c2c8d1d9a88895a8a3b97a477c1328ea2a64f8",
    "message": "Perform essential `notifyCommandComplete` cleanup in a `finally` block.\n\nIn case `InterruptedException` is thrown by `noteEvaluationsAtSameVersionMayBeFinished`, we still want to perform the cleanup.\n\nPiperOrigin-RevId: 522621717\nChange-Id: I6a6945a7223afed7f215a1c651c1f53667fb2f9e",
    "date": "2023-04-07T17:03:43Z",
    "url": "https://github.com/bazelbuild/bazel/commit/f1c2c8d1d9a88895a8a3b97a477c1328ea2a64f8",
    "details": {
      "sha": "2e4078134322ec7edd44e4b116f7135823c59f82",
      "filename": "src/main/java/com/google/devtools/build/lib/skyframe/SkyframeExecutor.java",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/f1c2c8d1d9a88895a8a3b97a477c1328ea2a64f8/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FSkyframeExecutor.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/f1c2c8d1d9a88895a8a3b97a477c1328ea2a64f8/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FSkyframeExecutor.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FSkyframeExecutor.java?ref=f1c2c8d1d9a88895a8a3b97a477c1328ea2a64f8",
      "patch": "@@ -912,13 +912,15 @@ public void resetEvaluator() {\n    * idempotent, so that calls after the first one in the same evaluation should be quick.\n    */\n   public void notifyCommandComplete(ExtendedEventHandler eventHandler) throws InterruptedException {\n-    memoizingEvaluator.noteEvaluationsAtSameVersionMayBeFinished(eventHandler);\n-    progressReceiver.globDeps = new ConcurrentHashMap<>();\n-    globFunction.complete();\n-    clearSyscallCache();\n-\n-    // So that the supplier object can be GC-ed.\n-    mergedSkyframeAnalysisExecutionSupplier = null;\n+    try {\n+      memoizingEvaluator.noteEvaluationsAtSameVersionMayBeFinished(eventHandler);\n+    } finally {\n+      progressReceiver.globDeps = new ConcurrentHashMap<>();\n+      globFunction.complete();\n+      clearSyscallCache();\n+      // So that the supplier object can be GC-ed.\n+      mergedSkyframeAnalysisExecutionSupplier = null;\n+    }\n   }\n \n   /**",
      "parent_sha": "81ee0fc29fb538d0849c6e7ccfff925f99b87453"
    }
  },
  {
    "oid": "9b61ab7a33ab091094880a3af53aade0baedf0b3",
    "message": "Follow-up changes suggested in internal review of https://github.com/bazelbuild/bazel/commit/3badca3f7e539e4b56fd5c502233c03b9934b813.\n\nPiperOrigin-RevId: 419838484",
    "date": "2022-01-05T16:45:55Z",
    "url": "https://github.com/bazelbuild/bazel/commit/9b61ab7a33ab091094880a3af53aade0baedf0b3",
    "details": {
      "sha": "442fd4477eb69b7bcb83728efb7a0e6c88ea067e",
      "filename": "src/main/java/com/google/devtools/build/lib/runtime/commands/RunCommand.java",
      "status": "modified",
      "additions": 30,
      "deletions": 28,
      "changes": 58,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/9b61ab7a33ab091094880a3af53aade0baedf0b3/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2Fcommands%2FRunCommand.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/9b61ab7a33ab091094880a3af53aade0baedf0b3/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2Fcommands%2FRunCommand.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2Fcommands%2FRunCommand.java?ref=9b61ab7a33ab091094880a3af53aade0baedf0b3",
      "patch": "@@ -307,20 +307,20 @@ public BlazeCommandResult exec(CommandEnvironment env, OptionsParsingResult opti\n     // and that it is executable.\n     // These checks should only fail if keepGoing is true, because we already did\n     // validation before the build began.  See {@link #validateTargets()}.\n-    Collection<ConfiguredTarget> targetsBuilt = result.getSuccessfulTargets();\n+    Collection<ConfiguredTarget> topLevelTargets = result.getSuccessfulTargets();\n     ConfiguredTarget targetToRun = null;\n     ConfiguredTarget runUnderTarget = null;\n \n-    if (targetsBuilt != null) {\n+    if (topLevelTargets != null) {\n       int maxTargets = runUnder != null && runUnder.getLabel() != null ? 2 : 1;\n-      if (targetsBuilt.size() > maxTargets) {\n+      if (topLevelTargets.size() > maxTargets) {\n         return reportAndCreateFailureResult(\n             env,\n             makeErrorMessageForNotHavingASingleTarget(\n-                targetString, Iterables.transform(targetsBuilt, ct -> ct.getLabel().toString())),\n+                targetString, Iterables.transform(topLevelTargets, ct -> ct.getLabel().toString())),\n             Code.TOO_MANY_TARGETS_SPECIFIED);\n       }\n-      for (ConfiguredTarget target : targetsBuilt) {\n+      for (ConfiguredTarget target : topLevelTargets) {\n         BlazeCommandResult targetValidation = fullyValidateTarget(env, target);\n         if (!targetValidation.isSuccess()) {\n           return targetValidation;\n@@ -339,7 +339,8 @@ public BlazeCommandResult exec(CommandEnvironment env, OptionsParsingResult opti\n           return reportAndCreateFailureResult(\n               env,\n               makeErrorMessageForNotHavingASingleTarget(\n-                  targetString, Iterables.transform(targetsBuilt, ct -> ct.getLabel().toString())),\n+                  targetString,\n+                  Iterables.transform(topLevelTargets, ct -> ct.getLabel().toString())),\n               Code.TOO_MANY_TARGETS_SPECIFIED);\n         }\n       }\n@@ -375,32 +376,33 @@ public BlazeCommandResult exec(CommandEnvironment env, OptionsParsingResult opti\n     // target to run needs to be preserved, as it acts as the working directory.\n     Path targetToRunRunfilesDir = null;\n     RunfilesSupport targetToRunRunfilesSupport = null;\n-    for (ConfiguredTarget target : targetsBuilt) {\n+    for (ConfiguredTarget target : topLevelTargets) {\n       FilesToRunProvider provider = target.getProvider(FilesToRunProvider.class);\n       RunfilesSupport runfilesSupport = provider == null ? null : provider.getRunfilesSupport();\n \n-      if (runfilesSupport != null) {\n-        try {\n-          Path runfilesDir =\n-              ensureRunfilesBuilt(\n-                  env,\n-                  runfilesSupport,\n-                  env.getSkyframeExecutor()\n-                      .getConfiguration(env.getReporter(), target.getConfigurationKey()));\n-          if (target == targetToRun) {\n-            targetToRunRunfilesDir = runfilesDir;\n-            targetToRunRunfilesSupport = runfilesSupport;\n-          }\n-        } catch (RunfilesException e) {\n-          env.getReporter().handle(Event.error(e.getMessage()));\n-          return BlazeCommandResult.failureDetail(e.createFailureDetail());\n-        } catch (InterruptedException e) {\n-          env.getReporter().handle(Event.error(\"Interrupted\"));\n-          return BlazeCommandResult.failureDetail(\n-              FailureDetail.newBuilder()\n-                  .setInterrupted(Interrupted.newBuilder().setCode(Interrupted.Code.INTERRUPTED))\n-                  .build());\n+      if (runfilesSupport == null) {\n+        continue;\n+      }\n+      try {\n+        Path runfilesDir =\n+            ensureRunfilesBuilt(\n+                env,\n+                runfilesSupport,\n+                env.getSkyframeExecutor()\n+                    .getConfiguration(env.getReporter(), target.getConfigurationKey()));\n+        if (target == targetToRun) {\n+          targetToRunRunfilesDir = runfilesDir;\n+          targetToRunRunfilesSupport = runfilesSupport;\n         }\n+      } catch (RunfilesException e) {\n+        env.getReporter().handle(Event.error(e.getMessage()));\n+        return BlazeCommandResult.failureDetail(e.createFailureDetail());\n+      } catch (InterruptedException e) {\n+        env.getReporter().handle(Event.error(\"Interrupted\"));\n+        return BlazeCommandResult.failureDetail(\n+            FailureDetail.newBuilder()\n+                .setInterrupted(Interrupted.newBuilder().setCode(Interrupted.Code.INTERRUPTED))\n+                .build());\n       }\n     }\n ",
      "parent_sha": "46ade3ec45ef41eb98136597410b38a3f630677d"
    }
  },
  {
    "oid": "cbb69f247adc1901ef6b7b52a6f12192f6131f72",
    "message": "Strengthen the deprecation notice for abi_deps.\n\n--\nMOS_MIGRATED_REVID=107624290",
    "date": "2015-11-12T09:02:26Z",
    "url": "https://github.com/bazelbuild/bazel/commit/cbb69f247adc1901ef6b7b52a6f12192f6131f72",
    "details": {
      "sha": "e4268a29769be7312d3ff0229799aea6b07fdfad",
      "filename": "src/main/java/com/google/devtools/build/lib/bazel/rules/cpp/BazelCppRuleClasses.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/cbb69f247adc1901ef6b7b52a6f12192f6131f72/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbazel%2Frules%2Fcpp%2FBazelCppRuleClasses.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/cbb69f247adc1901ef6b7b52a6f12192f6131f72/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbazel%2Frules%2Fcpp%2FBazelCppRuleClasses.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbazel%2Frules%2Fcpp%2FBazelCppRuleClasses.java?ref=cbb69f247adc1901ef6b7b52a6f12192f6131f72",
      "patch": "@@ -303,10 +303,10 @@ public RuleClass build(Builder builder, RuleDefinitionEnvironment env) {\n           <i>(Dictionary mapping strings to lists of\n              <a href=\"build-ref.html#labels\">labels</a>; optional)</i>\n           <p><i><a href=\"#configurable-attributes\">Configurable attributes</a> is a generalization\n-            of the same concept that works for most rules and attributes. It mostly deprecates\n-            <code>abi_deps</code>, which we expect to remove it as soon as possible. Use\n-            configurable attributes over <code>abi_deps</code> whenever possible. If the former is\n-            insufficient for you, please let us know why.</i>\n+            of the same concept that works for most rules and attributes. It deprecates\n+            <code>abi_deps</code>, which we intend to ultimately remove. Use configurable\n+            attributes over <code>abi_deps</code> whenever possible. When not possible, let\n+            us know why.</i>\n           </p>\n           <p>Each entry in this dictionary follows the form of\n              <code>'pattern' : ['label1', 'label2', ...]</code>.  If the library's",
      "parent_sha": "3f241a4869370f124edc764a4f81cd8a35da7ad1"
    }
  },
  {
    "oid": "e2549df933c59c70ce4f039d0ed2cd4308c1835f",
    "message": "Refactor registerLinkActions\n\nThis NFC will aid upcoming changes related to link info migration.\n\nPiperOrigin-RevId: 492380083\nChange-Id: Iec59b5865aa5d5234df98abb7356c2106be10596",
    "date": "2022-12-02T06:00:36Z",
    "url": "https://github.com/bazelbuild/bazel/commit/e2549df933c59c70ce4f039d0ed2cd4308c1835f",
    "details": {
      "sha": "37aa843fac9d7f699315854e7de4bf598ed105b8",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/objc/CompilationSupport.java",
      "status": "modified",
      "additions": 41,
      "deletions": 29,
      "changes": 70,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/e2549df933c59c70ce4f039d0ed2cd4308c1835f/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fobjc%2FCompilationSupport.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/e2549df933c59c70ce4f039d0ed2cd4308c1835f/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fobjc%2FCompilationSupport.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fobjc%2FCompilationSupport.java?ref=e2549df933c59c70ce4f039d0ed2cd4308c1835f",
      "patch": "@@ -89,6 +89,7 @@\n import com.google.devtools.build.lib.rules.cpp.Link.LinkingMode;\n import com.google.devtools.build.lib.rules.objc.ObjcVariablesExtension.VariableCategory;\n import com.google.devtools.build.lib.util.FileTypeSet;\n+import com.google.devtools.build.lib.util.Pair;\n import com.google.devtools.build.lib.vfs.PathFragment;\n import com.google.errorprone.annotations.CanIgnoreReturnValue;\n import java.util.LinkedHashSet;\n@@ -451,6 +452,24 @@ private StrippingType getStrippingType(ExtraLinkArgs extraLinkArgs) {\n     return StrippingType.DEFAULT;\n   }\n \n+  private static Pair<ImmutableSet<Artifact>, ImmutableSet<Artifact>>\n+      getLibrarySetsFromObjcProvider(ObjcProvider objcProvider) {\n+    ImmutableSet<Artifact> alwaysLinkLibraries = getForceLoadArtifacts(objcProvider);\n+\n+    // Clang loads archives specified in filelists and also specified as -force_load twice,\n+    // resulting in duplicate symbol errors unless they are deduped.\n+    ImmutableSet<Artifact> asNeededlibraries =\n+        ImmutableSet.copyOf(\n+            Iterables.filter(\n+                Iterables.concat(\n+                    objcProvider.getObjcLibraries(),\n+                    objcProvider.get(IMPORTED_LIBRARY).toList(),\n+                    objcProvider.getCcLibraries()),\n+                Predicates.not(Predicates.in(alwaysLinkLibraries))));\n+\n+    return Pair.of(asNeededlibraries, alwaysLinkLibraries);\n+  }\n+\n   /**\n    * Registers any actions necessary to link this rule and its dependencies. Automatically infers\n    * the toolchain from the configuration of this CompilationSupport.\n@@ -480,13 +499,22 @@ CompilationSupport registerLinkActions(\n       Iterable<Artifact> extraLinkInputs,\n       boolean isStampingEnabled)\n       throws InterruptedException, RuleErrorException {\n+\n+    Pair<ImmutableSet<Artifact>, ImmutableSet<Artifact>> inputLibrarySet =\n+        getLibrarySetsFromObjcProvider(objcProvider);\n+    ImmutableSet<Artifact> asNeededLibrarySet = inputLibrarySet.first;\n+    ImmutableSet<Artifact> alwaysLinkLibrarySet = inputLibrarySet.second;\n+\n     Iterable<Artifact> prunedJ2ObjcArchives =\n         computeAndStripPrunedJ2ObjcArchives(\n             j2ObjcEntryClassProvider, j2ObjcMappingFileProvider, objcProvider);\n-    ImmutableList<Artifact> bazelBuiltLibraries =\n+    asNeededLibrarySet =\n         Iterables.isEmpty(prunedJ2ObjcArchives)\n-            ? objcProvider.getObjcLibraries()\n-            : substituteJ2ObjcPrunedLibraries(objcProvider);\n+            ? asNeededLibrarySet\n+            : substituteJ2ObjcPrunedLibraries(asNeededLibrarySet, objcProvider);\n+\n+    ImmutableList<Artifact> asNeededLibraryList = asNeededLibrarySet.asList();\n+    ImmutableList<Artifact> alwaysLinkLibraryList = alwaysLinkLibrarySet.asList();\n \n     // Passing large numbers of inputs on the command line triggers a bug in Apple's Clang\n     // (b/29094356), so we'll create an input list manually and pass -filelist path/to/input/list.\n@@ -495,8 +523,6 @@ CompilationSupport registerLinkActions(\n     // CppLinkAction too, so create it now.\n     Artifact inputFileList = intermediateArtifacts.linkerObjList();\n \n-    ImmutableSet<Artifact> forceLinkArtifacts = getForceLoadArtifacts(objcProvider);\n-\n     FeatureConfiguration featureConfiguration =\n         CcCommon.configureFeaturesOrReportRuleError(\n             ruleContext,\n@@ -514,17 +540,6 @@ CompilationSupport registerLinkActions(\n       throw ruleContext.throwWithRuleError(e);\n     }\n \n-    // Clang loads archives specified in filelists and also specified as -force_load twice,\n-    // resulting in duplicate symbol errors unless they are deduped.\n-    ImmutableSet<Artifact> objFiles =\n-        ImmutableSet.copyOf(\n-            Iterables.filter(\n-                Iterables.concat(\n-                    bazelBuiltLibraries,\n-                    objcProvider.get(IMPORTED_LIBRARY).toList(),\n-                    objcProvider.getCcLibraries()),\n-                Predicates.not(Predicates.in(forceLinkArtifacts))));\n-\n     LinkTargetType linkType =\n         objcProvider.flagIs(USES_CPP)\n             ? LinkTargetType.OBJCPP_EXECUTABLE\n@@ -539,7 +554,7 @@ CompilationSupport registerLinkActions(\n             .setFrameworkNames(frameworkNames(objcProvider))\n             .setFrameworkSearchPath(frameworkLibrarySearchPaths(objcProvider))\n             .setLibraryNames(libraryNames(objcProvider))\n-            .setForceLoadArtifacts(getForceLoadArtifacts(objcProvider))\n+            .setForceLoadArtifacts(alwaysLinkLibrarySet)\n             .setDepLinkopts(objcProvider.get(LINKOPT).toList())\n             .setAttributeLinkopts(attributes.linkopts())\n             .addVariableCategory(VariableCategory.EXECUTABLE_LINKING_VARIABLES);\n@@ -573,12 +588,11 @@ CompilationSupport registerLinkActions(\n             .setGrepIncludes(CppHelper.getGrepIncludes(ruleContext))\n             .setIsStampingEnabled(isStampingEnabled)\n             .setTestOrTestOnlyTarget(ruleContext.isTestOnlyTarget() || ruleContext.isTestTarget())\n-            .addNonCodeLinkerInputs(bazelBuiltLibraries)\n-            .addNonCodeLinkerInputs(objcProvider.getCcLibraries())\n+            .addNonCodeLinkerInputs(asNeededLibraryList)\n+            .addNonCodeLinkerInputs(alwaysLinkLibraryList)\n             .addNonCodeLinkerInputs(ImmutableList.copyOf(extraLinkInputs))\n             .addNonCodeLinkerInputs(ImmutableList.copyOf(attributes.linkInputs()))\n             .addNonCodeLinkerInputs(ImmutableList.of(inputFileList))\n-            .addTransitiveAdditionalLinkerInputs(objcProvider.get(IMPORTED_LIBRARY))\n             .addTransitiveAdditionalLinkerInputs(objcProvider.get(STATIC_FRAMEWORK_FILE))\n             .addTransitiveAdditionalLinkerInputs(objcProvider.get(DYNAMIC_FRAMEWORK_FILE))\n             .addTransitiveAdditionalLinkerInputs(objcProvider.get(LINK_INPUTS))\n@@ -639,7 +653,7 @@ CompilationSupport registerLinkActions(\n     // files.\n     registerObjFilelistAction(\n         ImmutableSet.<Artifact>builder()\n-            .addAll(objFiles)\n+            .addAll(asNeededLibraryList)\n             .addAll(staticRuntimes)\n             .addAll(linkstampValues)\n             .build(),\n@@ -716,7 +730,7 @@ private ImmutableList<String> libraryNames(ObjcProvider objcProvider) {\n   }\n \n   /** Returns libraries that should be passed into the linker with {@code -force_load}. */\n-  private ImmutableSet<Artifact> getForceLoadArtifacts(ObjcProvider objcProvider) {\n+  private static ImmutableSet<Artifact> getForceLoadArtifacts(ObjcProvider objcProvider) {\n     List<Artifact> ccLibraries = objcProvider.getCcLibraries();\n     Iterable<Artifact> ccLibrariesToForceLoad =\n         Iterables.filter(ccLibraries, ALWAYS_LINKED_CC_LIBRARY);\n@@ -822,15 +836,13 @@ private Iterable<Artifact> computeAndStripPrunedJ2ObjcArchives(\n     return prunedJ2ObjcArchives;\n   }\n \n-  /**\n-   * Returns a nested set of Bazel-built ObjC libraries with all unpruned J2ObjC libraries\n-   * substituted with pruned ones.\n-   */\n-  private ImmutableList<Artifact> substituteJ2ObjcPrunedLibraries(ObjcProvider objcProvider) {\n-    ImmutableList.Builder<Artifact> libraries = new ImmutableList.Builder<>();\n+  /** Returns a set of libraries with all unpruned J2ObjC libraries substituted with pruned ones. */\n+  private ImmutableSet<Artifact> substituteJ2ObjcPrunedLibraries(\n+      ImmutableSet<Artifact> originalLibraries, ObjcProvider objcProvider) {\n+    ImmutableSet.Builder<Artifact> libraries = new ImmutableSet.Builder<>();\n \n     Set<Artifact> unprunedJ2ObjcLibs = objcProvider.get(ObjcProvider.J2OBJC_LIBRARY).toSet();\n-    for (Artifact library : objcProvider.getObjcLibraries()) {\n+    for (Artifact library : originalLibraries) {\n       // If we match an unpruned J2ObjC library, add the pruned version of the J2ObjC static library\n       // instead.\n       if (unprunedJ2ObjcLibs.contains(library)) {",
      "parent_sha": "74b10e6e834c3058e841d94aa56802d7b56a0041"
    }
  },
  {
    "oid": "03eb502e13105ba432ece3e182706986fa2eaf36",
    "message": "Fix another platform_type string compares that were broken by https://github.com/bazelbuild/bazel/commit/8e783b065c66c005db26d85e9ec6e8e28c42b2f2 (Migrate apple_common.platform_type to Starlark)\n\nI looked through https://github.com/bazelbuild/bazel/commit/8e783b065c66c005db26d85e9ec6e8e28c42b2f2 two more times. I hope I haven't overlooked yet another PlatformType turned string comparison that is affected.\n\nPiperOrigin-RevId: 639028732\nChange-Id: I27692b527f61292bc9ab577c395900c54a7d2881",
    "date": "2024-05-31T14:30:29Z",
    "url": "https://github.com/bazelbuild/bazel/commit/03eb502e13105ba432ece3e182706986fa2eaf36",
    "details": {
      "sha": "8701f7fe38d3dc75722494771e73399e66e5c766",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/apple/AppleConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/03eb502e13105ba432ece3e182706986fa2eaf36/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fapple%2FAppleConfiguration.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/03eb502e13105ba432ece3e182706986fa2eaf36/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fapple%2FAppleConfiguration.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fapple%2FAppleConfiguration.java?ref=03eb502e13105ba432ece3e182706986fa2eaf36",
      "patch": "@@ -275,7 +275,7 @@ private static String getPrefixedAppleCpu(String applePlatformType, AppleCpus ap\n    */\n   public List<String> getMultiArchitectures(String platformType) {\n     if (!Strings.isNullOrEmpty(appleCpus.appleSplitCpu())) {\n-      if (applePlatformType != platformType) {\n+      if (!applePlatformType.equals(platformType)) {\n         throw new IllegalArgumentException(\n             String.format(\"Expected post-split-transition platform type %s to match input %s \",\n                 applePlatformType, platformType));",
      "parent_sha": "ae3474f43e53b597b2616064426ecbf3c5e3f86e"
    }
  },
  {
    "oid": "53ca395a9d91b828cbf2c82205a85849c608f8f1",
    "message": "Refactor for readability improvements in AndroidDataContext.\n\n* Convert lacksAllowlistExemptions() to hasExemption(). This eliminates one layer of boolean negation and is easier to process.\n* Rename compatibleFor* values to optOutOf* which is easy for a reader to map directly to a rule's presence on the allowlist.\n* I considered renaming the throwOn* values too, but I feel the names are more intuitive than compatibleFor* and not worth disruption.\n\nNo outward behavioral changes.\n\nPiperOrigin-RevId: 281762548",
    "date": "2019-11-21T17:09:55Z",
    "url": "https://github.com/bazelbuild/bazel/commit/53ca395a9d91b828cbf2c82205a85849c608f8f1",
    "details": {
      "sha": "63110c476cf2e36cc2ef74c7a08218fad995e310",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/android/AndroidDataContext.java",
      "status": "modified",
      "additions": 34,
      "deletions": 30,
      "changes": 64,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/53ca395a9d91b828cbf2c82205a85849c608f8f1/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fandroid%2FAndroidDataContext.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/53ca395a9d91b828cbf2c82205a85849c608f8f1/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fandroid%2FAndroidDataContext.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fandroid%2FAndroidDataContext.java?ref=53ca395a9d91b828cbf2c82205a85849c608f8f1",
      "patch": "@@ -62,9 +62,9 @@ public class AndroidDataContext implements AndroidDataContextApi {\n   private final FilesToRunProvider busybox;\n   private final AndroidSdkProvider sdk;\n   private final boolean persistentBusyboxToolsEnabled;\n-  private final boolean compatibleForResourcePathShortening;\n-  private final boolean compatibleForResourceNameObfuscation;\n-  private final boolean compatibleForResourceShrinking;\n+  private final boolean optOutOfResourcePathShortening;\n+  private final boolean optOutOfResourceNameObfuscation;\n+  private final boolean optOutOfResourceShrinking;\n   private final boolean throwOnProguardApplyDictionary;\n   private final boolean throwOnProguardApplyMapping;\n   private final boolean throwOnResourceConflict;\n@@ -83,19 +83,21 @@ public static AndroidDataContext makeContext(RuleContext ruleContext) {\n         ruleContext.getExecutablePrerequisite(\"$android_resources_busybox\", Mode.HOST),\n         androidConfig.persistentBusyboxTools(),\n         AndroidSdkProvider.fromRuleContext(ruleContext),\n-        lacksAllowlistExemptions(ruleContext, \"allow_raw_access_to_resource_paths\", true),\n-        lacksAllowlistExemptions(ruleContext, \"allow_resource_name_obfuscation_opt_out\", true),\n-        lacksAllowlistExemptions(ruleContext, \"allow_resource_shrinking_opt_out\", true),\n-        lacksAllowlistExemptions(ruleContext, \"allow_proguard_apply_dictionary\", false),\n-        lacksAllowlistExemptions(ruleContext, \"allow_proguard_apply_mapping\", false),\n-        lacksAllowlistExemptions(ruleContext, \"allow_resource_conflicts\", false),\n+        hasExemption(ruleContext, \"allow_raw_access_to_resource_paths\", false),\n+        hasExemption(ruleContext, \"allow_resource_name_obfuscation_opt_out\", false),\n+        // TODO(bcsf): In a subsequent CL this will be changed to allow_shrink_resources\n+        // including a semantic change.\n+        hasExemption(ruleContext, \"allow_resource_shrinking_opt_out\", false),\n+        !hasExemption(ruleContext, \"allow_proguard_apply_dictionary\", true),\n+        !hasExemption(ruleContext, \"allow_proguard_apply_mapping\", true),\n+        !hasExemption(ruleContext, \"allow_resource_conflicts\", true),\n         androidConfig.useDataBindingV2());\n   }\n \n-  private static boolean lacksAllowlistExemptions(\n-      RuleContext ruleContext, String whitelistName, boolean valueIfNoWhitelist) {\n-    return Whitelist.hasWhitelist(ruleContext, whitelistName)\n-        ? !Whitelist.isAvailable(ruleContext, whitelistName)\n+  private static boolean hasExemption(\n+      RuleContext ruleContext, String exemptionName, boolean valueIfNoWhitelist) {\n+    return Whitelist.hasWhitelist(ruleContext, exemptionName)\n+        ? Whitelist.isAvailable(ruleContext, exemptionName)\n         : valueIfNoWhitelist;\n   }\n \n@@ -104,9 +106,9 @@ protected AndroidDataContext(\n       FilesToRunProvider busybox,\n       boolean persistentBusyboxToolsEnabled,\n       AndroidSdkProvider sdk,\n-      boolean compatibleForResourcePathShortening,\n-      boolean compatibleForResourceNameObfuscation,\n-      boolean compatibleForResourceShrinking,\n+      boolean optOutOfResourcePathShortening,\n+      boolean optOutOfResourceNameObfuscation,\n+      boolean optOutOfResourceShrinking,\n       boolean throwOnProguardApplyDictionary,\n       boolean throwOnProguardApplyMapping,\n       boolean throwOnResourceConflict,\n@@ -115,9 +117,9 @@ protected AndroidDataContext(\n     this.ruleContext = ruleContext;\n     this.busybox = busybox;\n     this.sdk = sdk;\n-    this.compatibleForResourcePathShortening = compatibleForResourcePathShortening;\n-    this.compatibleForResourceNameObfuscation = compatibleForResourceNameObfuscation;\n-    this.compatibleForResourceShrinking = compatibleForResourceShrinking;\n+    this.optOutOfResourcePathShortening = optOutOfResourcePathShortening;\n+    this.optOutOfResourceNameObfuscation = optOutOfResourceNameObfuscation;\n+    this.optOutOfResourceShrinking = optOutOfResourceShrinking;\n     this.throwOnProguardApplyDictionary = throwOnProguardApplyDictionary;\n     this.throwOnProguardApplyMapping = throwOnProguardApplyMapping;\n     this.throwOnResourceConflict = throwOnResourceConflict;\n@@ -196,16 +198,18 @@ public boolean isPersistentBusyboxToolsEnabled() {\n     return persistentBusyboxToolsEnabled;\n   }\n \n-  public boolean compatibleForResourcePathShortening() {\n-    return compatibleForResourcePathShortening;\n+  public boolean optOutOfResourcePathShortening() {\n+    return optOutOfResourcePathShortening;\n   }\n \n-  public boolean compatibleForResourceNameObfuscation() {\n-    return compatibleForResourceNameObfuscation;\n+  public boolean optOutOfResourceNameObfuscation() {\n+    return optOutOfResourceNameObfuscation;\n   }\n \n-  public boolean compatibleForResourceShrinking() {\n-    return compatibleForResourceShrinking;\n+  // TODO(bcsf): In a subsequent CL this will be changed to throwOnShrinkResources() including\n+  // a semantic change.\n+  public boolean optOutOfResourceShrinking() {\n+    return optOutOfResourceShrinking;\n   }\n \n   public boolean throwOnProguardApplyDictionary() {\n@@ -252,27 +256,27 @@ boolean isResourceShrinkingEnabled() {\n       state = getAndroidConfig().useAndroidResourceShrinking() ? TriState.YES : TriState.NO;\n     }\n \n-    return state == TriState.YES && compatibleForResourceShrinking;\n+    return state == TriState.YES && !optOutOfResourceShrinking;\n   }\n \n   boolean useResourcePathShortening() {\n     // Use resource path shortening iff:\n     //   1) --experimental_android_resource_path_shortening\n     //   2) -c opt\n-    //   3) Not on allowlist exempting from compatibleForResourcePathShortening\n+    //   3) Not opting out by being on allowlist named allow_raw_access_to_resource_paths\n     return getAndroidConfig().useAndroidResourcePathShortening()\n         && getActionConstructionContext().getConfiguration().getCompilationMode() == OPT\n-        && compatibleForResourcePathShortening;\n+        && !optOutOfResourcePathShortening;\n   }\n \n   boolean useResourceNameObfuscation(boolean hasProguardSpecs) {\n     // Use resource name obfuscation iff:\n     //   1) --experimental_android_resource_name_obfuscation or feature enabled for rule's package\n     //   2) resource shrinking is on (implying proguard specs are present)\n-    //   3) Not on allowlist exempting from compatibleForResourceNameObfuscation\n+    //   3) Not opting out by being on allowlist named allow_resource_name_obfuscation_opt_out\n     return (getAndroidConfig().useAndroidResourceNameObfuscation()\n             || ruleContext.getFeatures().contains(FEATURE_RESOURCE_NAME_OBFUSCATION))\n         && useResourceShrinking(hasProguardSpecs)\n-        && compatibleForResourceNameObfuscation;\n+        && !optOutOfResourceNameObfuscation;\n   }\n }",
      "parent_sha": "e9bef0cf46a71039e45f797c98acc201e13ae602"
    }
  },
  {
    "oid": "f48a935e72ba9497623a5cc2c914d521feb34fcf",
    "message": "Makes @AutoCodec preserve map order when it sees Map or ImmutableMap raw types instead of sorting.\n\nPiperOrigin-RevId: 183083445",
    "date": "2018-01-24T15:40:46Z",
    "url": "https://github.com/bazelbuild/bazel/commit/f48a935e72ba9497623a5cc2c914d521feb34fcf",
    "details": {
      "sha": "fbe0a19251f7a049024d22be0b5a2f16f8b57ec3",
      "filename": "src/main/java/com/google/devtools/build/lib/skyframe/serialization/autocodec/Marshallers.java",
      "status": "modified",
      "additions": 76,
      "deletions": 40,
      "changes": 116,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/f48a935e72ba9497623a5cc2c914d521feb34fcf/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2Fserialization%2Fautocodec%2FMarshallers.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/f48a935e72ba9497623a5cc2c914d521feb34fcf/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2Fserialization%2Fautocodec%2FMarshallers.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2Fserialization%2Fautocodec%2FMarshallers.java?ref=f48a935e72ba9497623a5cc2c914d521feb34fcf",
      "patch": "@@ -35,10 +35,10 @@\n import com.google.protobuf.ProtocolMessageEnum;\n import java.util.Collection;\n import java.util.Comparator;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.SortedMap;\n-import java.util.TreeMap;\n+import java.util.function.Consumer;\n import java.util.regex.Pattern;\n import javax.annotation.processing.ProcessingEnvironment;\n import javax.lang.model.element.Element;\n@@ -426,7 +426,6 @@ public boolean matches(DeclaredType type) {\n         @Override\n         public void addSerializationCode(Context context) {\n           context.builder.addStatement(\"codedOut.writeInt32NoTag($L.size())\", context.name);\n-          String mapName = context.makeName(\"orderedMap\");\n           String entryName = context.makeName(\"entry\");\n           Context key =\n               context.with(\n@@ -436,38 +435,39 @@ public void addSerializationCode(Context context) {\n               context.with(\n                   (DeclaredType) context.getDeclaredType().getTypeArguments().get(1),\n                   entryName + \".getValue()\");\n-          context.builder.addStatement(\n-              \"$T<$T, $T> $L = null\", Map.class, key.getTypeName(), value.getTypeName(), mapName);\n-          context.builder.beginControlFlow(\"if ($L instanceof $T)\", context.name, SortedMap.class);\n-          context.builder.addStatement(\"$L = $L\", mapName, context.name);\n-          context.builder.nextControlFlow(\"else\");\n-          context.builder.addStatement(\"$L = new $T<>($L)\", mapName, TreeMap.class, context.name);\n-          context.builder.endControlFlow();\n           context.builder.beginControlFlow(\n               \"for ($T<$T, $T> $L : $L.entrySet())\",\n               Map.Entry.class,\n               key.getTypeName(),\n               value.getTypeName(),\n               entryName,\n-              mapName);\n+              context.name);\n           writeSerializationCode(key);\n           writeSerializationCode(value);\n           context.builder.endControlFlow();\n         }\n \n         @Override\n         public void addDeserializationCode(Context context) {\n-          addMapDeserializationCode(context, context.name, false);\n+          addMapDeserializationCode(\n+              context,\n+              (builderName, key, value) ->\n+                  context.builder.addStatement(\n+                      \"$T<$T, $T> $L = new $T<>()\",\n+                      LinkedHashMap.class,\n+                      key.getTypeName(),\n+                      value.getTypeName(),\n+                      builderName,\n+                      LinkedHashMap.class),\n+              (builderName) -> context.builder.addStatement(\"$L = $L\", context.name, builderName));\n         }\n       };\n \n   private final Marshaller immutableMapMarshaller =\n       new Marshaller() {\n         @Override\n         public boolean matches(DeclaredType type) {\n-          // TODO(shahan): refine as needed by splitting these into separate marshallers.\n-          return matchesErased(type, ImmutableMap.class)\n-              || matchesErased(type, ImmutableSortedMap.class);\n+          return matchesErased(type, ImmutableMap.class);\n         }\n \n         @Override\n@@ -477,35 +477,69 @@ public void addSerializationCode(Context context) {\n \n         @Override\n         public void addDeserializationCode(Context context) {\n-          String builderName = context.makeName(\"builder\");\n-          addMapDeserializationCode(context, builderName, true);\n-          context.builder.addStatement(\"$L = $L.build()\", context.name, builderName);\n+          addMapDeserializationCode(\n+              context,\n+              (builderName, key, value) ->\n+                  context.builder.addStatement(\n+                      \"$T<$T, $T> $L = new $T<>()\",\n+                      ImmutableMap.Builder.class,\n+                      key.getTypeName(),\n+                      value.getTypeName(),\n+                      builderName,\n+                      ImmutableMap.Builder.class),\n+              (builderName) ->\n+                  context.builder.addStatement(\"$L = $L.build()\", context.name, builderName));\n+        }\n+      };\n+\n+  private final Marshaller immutableSortedMapMarshaller =\n+      new Marshaller() {\n+        @Override\n+        public boolean matches(DeclaredType type) {\n+          return matchesErased(type, ImmutableSortedMap.class);\n+        }\n+\n+        @Override\n+        public void addSerializationCode(Context context) {\n+          mapMarshaller.addSerializationCode(context);\n+        }\n+\n+        @Override\n+        public void addDeserializationCode(Context context) {\n+          addMapDeserializationCode(\n+              context,\n+              (builderName, key, value) ->\n+                  context.builder.addStatement(\n+                      \"$T<$T, $T> $L = new $T<>($T.naturalOrder())\",\n+                      ImmutableSortedMap.Builder.class,\n+                      key.getTypeName(),\n+                      value.getTypeName(),\n+                      builderName,\n+                      ImmutableSortedMap.Builder.class,\n+                      Comparator.class),\n+              (builderName) ->\n+                  context.builder.addStatement(\"$L = $L.build()\", context.name, builderName));\n         }\n       };\n \n-  /** Helper for mapMarshaller and immutableMapMarshaller. */\n+  @FunctionalInterface\n+  private static interface MapBuilderInitializer {\n+    void initialize(String builderName, Context key, Context value);\n+  }\n+\n+  /** Helper for map marshallers. */\n   private void addMapDeserializationCode(\n-      Context context, String builderName, boolean isImmutableMap) {\n-          Context key =\n-              context.with(\n-                  (DeclaredType) context.getDeclaredType().getTypeArguments().get(0),\n-                  context.makeName(\"key\"));\n-          Context value =\n-              context.with(\n-                  (DeclaredType) context.getDeclaredType().getTypeArguments().get(1),\n-                  context.makeName(\"value\"));\n-    if (isImmutableMap) {\n-      context.builder.addStatement(\n-          \"$T<$T, $T> $L = new $T<>($T.naturalOrder())\",\n-          ImmutableSortedMap.Builder.class,\n-          key.getTypeName(),\n-          value.getTypeName(),\n-          builderName,\n-          ImmutableSortedMap.Builder.class,\n-          Comparator.class);\n-    } else {\n-      context.builder.addStatement(\"$L = new $T<>()\", builderName, TreeMap.class);\n-    }\n+      Context context, MapBuilderInitializer mapBuilderInitializer, Consumer<String> finisher) {\n+    String builderName = context.makeName(\"builder\");\n+    Context key =\n+        context.with(\n+            (DeclaredType) context.getDeclaredType().getTypeArguments().get(0),\n+            context.makeName(\"key\"));\n+    Context value =\n+        context.with(\n+            (DeclaredType) context.getDeclaredType().getTypeArguments().get(1),\n+            context.makeName(\"value\"));\n+    mapBuilderInitializer.initialize(builderName, key, value);\n     String lengthName = context.makeName(\"length\");\n     context.builder.addStatement(\"int $L = codedIn.readInt32()\", lengthName);\n     String indexName = context.makeName(\"i\");\n@@ -515,6 +549,7 @@ private void addMapDeserializationCode(\n     writeDeserializationCode(value);\n     context.builder.addStatement(\"$L.put($L, $L)\", builderName, key.name, value.name);\n     context.builder.endControlFlow();\n+    finisher.accept(builderName);\n   }\n \n   private final Marshaller multimapMarshaller =\n@@ -715,6 +750,7 @@ public void addDeserializationCode(Context context) {\n           immutableSortedSetMarshaller,\n           mapMarshaller,\n           immutableMapMarshaller,\n+          immutableSortedMapMarshaller,\n           multimapMarshaller,\n           patternMarshaller,\n           hashCodeMarshaller,",
      "parent_sha": "e8dea319709d7d9ec8163cd65e6a336b15d09113"
    }
  },
  {
    "oid": "c9f9d7b70514c3a102c27b285dc6f94ed011e6a0",
    "message": "In `SequencedSkyframeExecutorTest`, inject values using `Injectable` instead of `GraphTransformerForTesting`.\n\nThis is one of the few tests that rely on the unspecified behavior of `injectGraphTransformerForTesting` applying the transform immediately and only once, which is currently true for `InMemoryMemoizingEvaluator` but not for other `MemoizingEvaluator` implementations.\n\nSwitch to `Injectable` which is better suited for injecting values and isn't a test-only channel.\n\nPiperOrigin-RevId: 439870075",
    "date": "2022-04-06T17:06:00Z",
    "url": "https://github.com/bazelbuild/bazel/commit/c9f9d7b70514c3a102c27b285dc6f94ed011e6a0",
    "details": {
      "sha": "4324ffc66992351c6335d4d6e6d373c1d8a889fe",
      "filename": "src/test/java/com/google/devtools/build/lib/skyframe/SequencedSkyframeExecutorTest.java",
      "status": "modified",
      "additions": 14,
      "deletions": 58,
      "changes": 72,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/c9f9d7b70514c3a102c27b285dc6f94ed011e6a0/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FSequencedSkyframeExecutorTest.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/c9f9d7b70514c3a102c27b285dc6f94ed011e6a0/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FSequencedSkyframeExecutorTest.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FSequencedSkyframeExecutorTest.java?ref=c9f9d7b70514c3a102c27b285dc6f94ed011e6a0",
      "patch": "@@ -29,7 +29,6 @@\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Iterables;\n-import com.google.common.collect.Maps;\n import com.google.common.eventbus.EventBus;\n import com.google.common.hash.HashCode;\n import com.google.common.testing.GcFinalization;\n@@ -130,14 +129,8 @@\n import com.google.devtools.build.skyframe.Differencer.Diff;\n import com.google.devtools.build.skyframe.EvaluationContext;\n import com.google.devtools.build.skyframe.EvaluationResult;\n-import com.google.devtools.build.skyframe.InMemoryGraph;\n-import com.google.devtools.build.skyframe.InMemoryGraphImpl;\n-import com.google.devtools.build.skyframe.InMemoryNodeEntry;\n-import com.google.devtools.build.skyframe.MemoizingEvaluator.GraphTransformerForTesting;\n import com.google.devtools.build.skyframe.NotifyingHelper;\n import com.google.devtools.build.skyframe.NotifyingHelper.EventType;\n-import com.google.devtools.build.skyframe.ProcessableGraph;\n-import com.google.devtools.build.skyframe.QueryableGraph;\n import com.google.devtools.build.skyframe.SkyKey;\n import com.google.devtools.build.skyframe.SkyValue;\n import com.google.devtools.build.skyframe.TaggedEvents;\n@@ -305,10 +298,9 @@ public void sync_onlyExternalFileChanged_reportsAffectedFile() throws Exception\n     RootedPath file = RootedPath.toRootedPath(externalRoot, scratch.file(\"/external/file\"));\n     initializeSkyframeExecutor(\n         /*doPackageLoadingChecks=*/ true, ImmutableList.of(nothingChangedDiffAwarenessFactory()));\n-    skyframeExecutor.memoizingEvaluator.injectGraphTransformerForTesting(\n-        inMemoryGraphWithValues(\n-            ImmutableMap.of(\n-                file, FileStateValue.create(file, SyscallCache.NO_CACHE, /*tsgm=*/ null))));\n+    skyframeExecutor\n+        .injectable()\n+        .inject(file, FileStateValue.create(file, SyscallCache.NO_CACHE, /*tsgm=*/ null));\n     skyframeExecutor.externalFilesHelper.getAndNoteFileType(file);\n     // Initial sync to establish the baseline DiffAwareness.View.\n     skyframeExecutor.handleDiffsForTesting(NullEventHandler.INSTANCE);\n@@ -335,10 +327,9 @@ public void sync_nothingChangedWithExternalFile_reportsNoExternalKeysInDiff() th\n     RootedPath file = RootedPath.toRootedPath(externalRoot, scratch.file(\"/external/file\"));\n     initializeSkyframeExecutor(\n         /*doPackageLoadingChecks=*/ true, ImmutableList.of(nothingChangedDiffAwarenessFactory()));\n-    skyframeExecutor.memoizingEvaluator.injectGraphTransformerForTesting(\n-        inMemoryGraphWithValues(\n-            ImmutableMap.of(\n-                file, FileStateValue.create(file, SyscallCache.NO_CACHE, /*tsgm=*/ null))));\n+    skyframeExecutor\n+        .injectable()\n+        .inject(file, FileStateValue.create(file, SyscallCache.NO_CACHE, /*tsgm=*/ null));\n     skyframeExecutor.externalFilesHelper.getAndNoteFileType(file);\n     // Initial sync to establish the baseline DiffAwareness.View.\n     skyframeExecutor.handleDiffsForTesting(NullEventHandler.INSTANCE);\n@@ -368,13 +359,14 @@ public void sync_onlyExternalListingChanged_reportsAffectedListing() throws Exce\n     DirectoryListingStateValue.Key dirListingKey = DirectoryListingStateValue.key(dir);\n     initializeSkyframeExecutor(\n         /*doPackageLoadingChecks=*/ true, ImmutableList.of(nothingChangedDiffAwarenessFactory()));\n-    skyframeExecutor.memoizingEvaluator.injectGraphTransformerForTesting(\n-        inMemoryGraphWithValues(\n+    skyframeExecutor\n+        .injectable()\n+        .inject(\n             ImmutableMap.of(\n                 dir,\n                 FileStateValue.create(dir, SyscallCache.NO_CACHE, /*tsgm=*/ null),\n                 dirListingKey,\n-                value)));\n+                value));\n     skyframeExecutor.externalFilesHelper.getAndNoteFileType(dir);\n     // Initial sync to establish the baseline DiffAwareness.View.\n     skyframeExecutor.handleDiffsForTesting(NullEventHandler.INSTANCE);\n@@ -407,13 +399,14 @@ public void sync_nothingChangedWithExternalListing_reportsNoExternalKeysInDiff()\n     DirectoryListingStateValue.Key dirListingKey = DirectoryListingStateValue.key(dir);\n     initializeSkyframeExecutor(\n         /*doPackageLoadingChecks=*/ true, ImmutableList.of(nothingChangedDiffAwarenessFactory()));\n-    skyframeExecutor.memoizingEvaluator.injectGraphTransformerForTesting(\n-        inMemoryGraphWithValues(\n+    skyframeExecutor\n+        .injectable()\n+        .inject(\n             ImmutableMap.of(\n                 dir,\n                 FileStateValue.create(dir, SyscallCache.NO_CACHE, /*tsgm=*/ null),\n                 dirListingKey,\n-                value)));\n+                value));\n     skyframeExecutor.externalFilesHelper.getAndNoteFileType(dir);\n     // Initial sync to establish the baseline DiffAwareness.View.\n     skyframeExecutor.handleDiffsForTesting(NullEventHandler.INSTANCE);\n@@ -464,43 +457,6 @@ private Diff getRecordedDiff() {\n         .getDiff(/*fromGraph=*/ null, ignored -> false, ignored -> false);\n   }\n \n-  private static GraphTransformerForTesting inMemoryGraphWithValues(\n-      ImmutableMap<SkyKey, SkyValue> values) {\n-\n-    return new GraphTransformerForTesting() {\n-      @Override\n-      public InMemoryGraph transform(InMemoryGraph graph) {\n-        return new InMemoryGraphImpl(values.size()) {\n-          {\n-            nodeMap.putAll(Maps.transformValues(values, v -> createNodeEntry(v)));\n-          }\n-        };\n-      }\n-\n-      @Override\n-      public QueryableGraph transform(QueryableGraph graph) {\n-        throw new UnsupportedOperationException();\n-      }\n-\n-      @Override\n-      public ProcessableGraph transform(ProcessableGraph graph) {\n-        throw new UnsupportedOperationException();\n-      }\n-\n-      private InMemoryNodeEntry createNodeEntry(SkyValue value) {\n-        InMemoryNodeEntry nodeEntry = new InMemoryNodeEntry();\n-        nodeEntry.addReverseDepAndCheckIfDone(null);\n-        nodeEntry.markRebuilding();\n-        try {\n-          nodeEntry.setValue(value, ignored -> false, /*maxTransitiveSourceVersion=*/ null);\n-        } catch (InterruptedException e) {\n-          throw new RuntimeException();\n-        }\n-        return nodeEntry;\n-      }\n-    };\n-  }\n-\n   @Test\n   public void testSetDeletedPackages() throws Exception {\n     ExtendedEventHandler eventHandler = NullEventHandler.INSTANCE;",
      "parent_sha": "d352102ad99988673762969d7c1de07672da5fd7"
    }
  },
  {
    "oid": "afde71894b1d7a73e0b2b54c1bd4a513474050a1",
    "message": "Use WARNING color when printing flaky test summary\n\nPiperOrigin-RevId: 277493892",
    "date": "2019-10-30T13:42:54Z",
    "url": "https://github.com/bazelbuild/bazel/commit/afde71894b1d7a73e0b2b54c1bd4a513474050a1",
    "details": {
      "sha": "db315d7229e29eb512ce345bb27955b066a983aa",
      "filename": "src/main/java/com/google/devtools/build/lib/runtime/UiEventHandler.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/afde71894b1d7a73e0b2b54c1bd4a513474050a1/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2FUiEventHandler.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/afde71894b1d7a73e0b2b54c1bd4a513474050a1/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2FUiEventHandler.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2FUiEventHandler.java?ref=afde71894b1d7a73e0b2b54c1bd4a513474050a1",
      "patch": "@@ -874,7 +874,8 @@ public synchronized void testSummary(TestSummary summary) {\n       try {\n         clearProgressBar();\n         crlf();\n-        setEventKindColor(EventKind.ERROR);\n+        setEventKindColor(\n+            summary.getStatus() == BlazeTestStatus.FLAKY ? EventKind.WARNING : EventKind.ERROR);\n         terminal.writeString(\"\" + summary.getStatus() + \": \");\n         terminal.resetTerminal();\n         terminal.writeString(summary.getLabel().toString());",
      "parent_sha": "1cfa9e3348bf1e53f246f540f8377b76eaa5aba1"
    }
  },
  {
    "oid": "ca9a425a4825b5fd9892ec55051e7ffb2025bea2",
    "message": "Add missing \"final\" specifiers to fix Bazel's JDK7 build.\n\n--\nMOS_MIGRATED_REVID=136626076",
    "date": "2016-10-19T19:21:28Z",
    "url": "https://github.com/bazelbuild/bazel/commit/ca9a425a4825b5fd9892ec55051e7ffb2025bea2",
    "details": {
      "sha": "7afd9b2adbe743ab1d89d81594630395bf249c45",
      "filename": "src/main/java/com/google/devtools/build/lib/bazel/repository/downloader/HttpDownloader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/ca9a425a4825b5fd9892ec55051e7ffb2025bea2/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbazel%2Frepository%2Fdownloader%2FHttpDownloader.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/ca9a425a4825b5fd9892ec55051e7ffb2025bea2/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbazel%2Frepository%2Fdownloader%2FHttpDownloader.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbazel%2Frepository%2Fdownloader%2FHttpDownloader.java?ref=ca9a425a4825b5fd9892ec55051e7ffb2025bea2",
      "patch": "@@ -27,7 +27,6 @@\n import com.google.devtools.build.lib.vfs.Path;\n import com.google.devtools.build.lib.vfs.PathFragment;\n import com.google.devtools.build.skyframe.SkyFunctionException;\n-\n import com.google.devtools.build.skyframe.SkyFunctionException.Transience;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -170,7 +169,7 @@ private void compareHashes(Path destination, String sha256) throws IOException {\n   }\n \n   private ScheduledFuture<?> getLoggerHandle(\n-      final AtomicInteger totalBytes, EventHandler eventHandler, String urlString) {\n+      final AtomicInteger totalBytes, final EventHandler eventHandler, final String urlString) {\n     final Runnable logger = new Runnable() {\n       @Override\n       public void run() {",
      "parent_sha": "fc0b635652c566c8f4db00fe317377803a9211d1"
    }
  },
  {
    "oid": "1ef13551ced319adee1e6f22f73cca91c6269d60",
    "message": "Avoid creating a bazillion lambdas, they create a lot of unnecessary garbage.\n\nPiperOrigin-RevId: 608602813\nChange-Id: I558b7ec39b18b65ac86a694024c6ef6393236875",
    "date": "2024-02-20T15:52:01Z",
    "url": "https://github.com/bazelbuild/bazel/commit/1ef13551ced319adee1e6f22f73cca91c6269d60",
    "details": {
      "sha": "0ece78c285da029e53c2b490ed95c5d2f7f8ca0f",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/cpp/CcToolchainVariables.java",
      "status": "modified",
      "additions": 15,
      "deletions": 17,
      "changes": 32,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/1ef13551ced319adee1e6f22f73cca91c6269d60/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fcpp%2FCcToolchainVariables.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/1ef13551ced319adee1e6f22f73cca91c6269d60/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fcpp%2FCcToolchainVariables.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fcpp%2FCcToolchainVariables.java?ref=1ef13551ced319adee1e6f22f73cca91c6269d60",
      "patch": "@@ -341,23 +341,21 @@ private VariableValue lookupVariable(\n       structuredVariableCache = Maps.newConcurrentMap();\n     }\n \n-    Object variableOrError =\n-        structuredVariableCache.computeIfAbsent(\n-            name,\n-            n -> {\n-              try {\n-                VariableValue variable = getStructureVariable(n, throwOnMissingVariable, expander);\n-                return variable != null ? variable : NULL_MARKER;\n-              } catch (ExpansionException e) {\n-                if (throwOnMissingVariable) {\n-                  return e.getMessage();\n-                } else {\n-                  throw new IllegalStateException(\n-                      \"Should not happen - call to getStructuredVariable threw when asked not to.\",\n-                      e);\n-                }\n-              }\n-            });\n+    Object variableOrError = structuredVariableCache.get(name);\n+    if (variableOrError == null) {\n+      try {\n+        VariableValue variable = getStructureVariable(name, throwOnMissingVariable, expander);\n+        variableOrError = variable != null ? variable : NULL_MARKER;\n+      } catch (ExpansionException e) {\n+        if (throwOnMissingVariable) {\n+          variableOrError = e.getMessage();\n+        } else {\n+          throw new IllegalStateException(\n+              \"Should not happen - call to getStructuredVariable threw when asked not to.\", e);\n+        }\n+      }\n+      structuredVariableCache.putIfAbsent(name, variableOrError);\n+    }\n \n     if (variableOrError instanceof VariableValue) {\n       return (VariableValue) variableOrError;",
      "parent_sha": "0e3544fa50fa2066eb56f464713190d21ad5df86"
    }
  },
  {
    "oid": "5fd91e2f6b4da737f3b7fa2915aa3017558e2e9f",
    "message": "Fix build documentation for C++ includes\n\nBlaze and Bazel each use -isystem rather than -I when specifying \"includes\" for cc_* rules. This distinction matters, e.g. for which warnings are enabled. Update documentation to reflect the current state of the world.\n\nRELNOTES:\nUpdate \"-I\" to \"-isystem\" in documentation to reflect current behavior.\n\n--\nPiperOrigin-RevId: 142290840\nMOS_MIGRATED_REVID=142290840",
    "date": "2016-12-16T22:50:26Z",
    "url": "https://github.com/bazelbuild/bazel/commit/5fd91e2f6b4da737f3b7fa2915aa3017558e2e9f",
    "details": {
      "sha": "d4644ba3d599b21005e8a8838311a2c3871e91c0",
      "filename": "src/main/java/com/google/devtools/build/lib/bazel/rules/cpp/BazelCcIncLibraryRule.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/5fd91e2f6b4da737f3b7fa2915aa3017558e2e9f/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbazel%2Frules%2Fcpp%2FBazelCcIncLibraryRule.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/5fd91e2f6b4da737f3b7fa2915aa3017558e2e9f/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbazel%2Frules%2Fcpp%2FBazelCcIncLibraryRule.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbazel%2Frules%2Fcpp%2FBazelCcIncLibraryRule.java?ref=5fd91e2f6b4da737f3b7fa2915aa3017558e2e9f",
      "patch": "@@ -51,7 +51,7 @@ public Metadata getMetadata() {\n <p>\n Bazel creates a subdirectory below\n <code>includes</code> (relative to WORKSPACE) for each such rule, and makes sure that all\n-dependent rules have a corresponding <code>-I</code> directive to add this\n+dependent rules have a corresponding <code>-isystem</code> directive to add this\n directory into the compiler's header file search path for all compilations. Note\n that if a rule has multiple <code>cc_inc_library</code> rules from the same\n package in its dependencies, the first such rule will take precedence.",
      "parent_sha": "8c83db0676104eb3c04fe7e7ced21113853ba069"
    }
  },
  {
    "oid": "a9100add682b190bb8e27447a6b6f95a0e4cca91",
    "message": "Cache results of PlatformMappingValue.map.\n\nAlthough the return value was already being interned, it needs to go through BuildOptions.diffForReconstruction with a new (uncached) instance prior to getting a hit on the interner.\n\nPiperOrigin-RevId: 251916165",
    "date": "2019-06-06T20:35:41Z",
    "url": "https://github.com/bazelbuild/bazel/commit/a9100add682b190bb8e27447a6b6f95a0e4cca91",
    "details": {
      "sha": "a3c6e0ca9e1f5a326ac5411529c39fe4fe9a3479",
      "filename": "src/main/java/com/google/devtools/build/lib/skyframe/PlatformMappingValue.java",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/a9100add682b190bb8e27447a6b6f95a0e4cca91/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FPlatformMappingValue.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/a9100add682b190bb8e27447a6b6f95a0e4cca91/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FPlatformMappingValue.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FPlatformMappingValue.java?ref=a9100add682b190bb8e27447a6b6f95a0e4cca91",
      "patch": "@@ -16,12 +16,14 @@\n \n import com.google.common.base.MoreObjects;\n import com.google.common.base.Preconditions;\n+import com.google.common.base.Throwables;\n import com.google.common.cache.Cache;\n import com.google.common.cache.CacheBuilder;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Interner;\n import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n import com.google.devtools.build.lib.analysis.PlatformOptions;\n import com.google.devtools.build.lib.analysis.config.BuildOptions;\n import com.google.devtools.build.lib.cmdline.Label;\n@@ -50,6 +52,7 @@\n  * the design</a> for more details on how the mapping can be defined and the desired logic on how it\n  * is applied to configuration keys.\n  */\n+@AutoCodec\n public final class PlatformMappingValue implements SkyValue {\n \n   public static final PlatformMappingValue EMPTY =\n@@ -136,7 +139,8 @@ public String toString() {\n \n   private final Map<Label, Collection<String>> platformsToFlags;\n   private final Map<Collection<String>, Label> flagsToPlatforms;\n-  private final transient Cache<Collection<String>, OptionsParsingResult> parserCache;\n+  private final Cache<Collection<String>, OptionsParsingResult> parserCache;\n+  private final Cache<BuildConfigurationValue.Key, BuildConfigurationValue.Key> mappingCache;\n \n   /**\n    * Creates a new mapping value which will match on the given platforms (if a target platform is\n@@ -156,6 +160,7 @@ public String toString() {\n         CacheBuilder.newBuilder()\n             .initialCapacity(platformsToFlags.size() + flagsToPlatforms.size())\n             .build();\n+    this.mappingCache = CacheBuilder.newBuilder().weakKeys().build();\n   }\n \n   /**\n@@ -182,6 +187,17 @@ public String toString() {\n   public BuildConfigurationValue.Key map(\n       BuildConfigurationValue.Key original, BuildOptions defaultBuildOptions)\n       throws OptionsParsingException {\n+    try {\n+      return mappingCache.get(original, () -> computeMapping(original, defaultBuildOptions));\n+    } catch (ExecutionException | UncheckedExecutionException e) {\n+      Throwables.propagateIfPossible(e.getCause(), OptionsParsingException.class);\n+      throw new IllegalStateException(e);\n+    }\n+  }\n+\n+  private BuildConfigurationValue.Key computeMapping(\n+      BuildConfigurationValue.Key original, BuildOptions defaultBuildOptions)\n+      throws OptionsParsingException {\n     BuildOptions.OptionsDiffForReconstruction originalDiff = original.getOptionsDiff();\n     BuildOptions originalOptions = defaultBuildOptions.applyDiff(originalDiff);\n ",
      "parent_sha": "13ad6f495c61a6dc9c18141058e2cefffeb44367"
    }
  },
  {
    "oid": "0520ac3348ea2bce7dc4fa75d8fff14bd47046a6",
    "message": "Intern CollectTargetsInPackagKey. Bug from https://github.com/bazelbuild/bazel/commit/5fb2a487e53cc3d80e3654d5b63d062f7f70588b.\n\nPiperOrigin-RevId: 188348546",
    "date": "2018-03-08T18:11:57Z",
    "url": "https://github.com/bazelbuild/bazel/commit/0520ac3348ea2bce7dc4fa75d8fff14bd47046a6",
    "details": {
      "sha": "173896afae564b90e90f608903f8191049cc2a97",
      "filename": "src/main/java/com/google/devtools/build/lib/skyframe/CollectTargetsInPackageValue.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/0520ac3348ea2bce7dc4fa75d8fff14bd47046a6/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FCollectTargetsInPackageValue.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/0520ac3348ea2bce7dc4fa75d8fff14bd47046a6/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FCollectTargetsInPackageValue.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FCollectTargetsInPackageValue.java?ref=0520ac3348ea2bce7dc4fa75d8fff14bd47046a6",
      "patch": "@@ -14,7 +14,9 @@\n package com.google.devtools.build.lib.skyframe;\n \n import com.google.auto.value.AutoValue;\n+import com.google.common.collect.Interner;\n import com.google.devtools.build.lib.cmdline.PackageIdentifier;\n+import com.google.devtools.build.lib.concurrent.BlazeInterners;\n import com.google.devtools.build.lib.pkgcache.FilteringPolicy;\n import com.google.devtools.build.lib.skyframe.serialization.autocodec.AutoCodec;\n import com.google.devtools.build.skyframe.SkyFunctionName;\n@@ -41,12 +43,16 @@ public static CollectTargetsInPackageKey key(\n   @AutoValue\n   @AutoCodec\n   public abstract static class CollectTargetsInPackageKey implements SkyKey {\n+    private static final Interner<CollectTargetsInPackageKey> interner =\n+        BlazeInterners.newWeakInterner();\n+\n     @AutoCodec.VisibleForSerialization\n     @AutoCodec.Instantiator\n     static CollectTargetsInPackageKey create(\n         PackageIdentifier packageId, FilteringPolicy filteringPolicy) {\n-      return new AutoValue_CollectTargetsInPackageValue_CollectTargetsInPackageKey(\n-          packageId, filteringPolicy);\n+      return interner.intern(\n+          new AutoValue_CollectTargetsInPackageValue_CollectTargetsInPackageKey(\n+              packageId, filteringPolicy));\n     }\n \n     public abstract PackageIdentifier getPackageId();",
      "parent_sha": "55ccf58f9da9847269a42c15e05317aab993d78c"
    }
  },
  {
    "oid": "09f26fdadfad0e2e5fed4f377b564213d894bf49",
    "message": "Reduce needless contention in the include scanner's fileParseCache. The\ncomputeIfAbsent() function of ConcurrentHashMap is supposed to have a fast\nimplementation and the map will then allow ~number of processors concurrent\nwrites. However, reading a file and extracting the include lines can be a costly\nIO operation that does not fit this bill. Use futures instead.\n\nRELNOTES: None.\nPiperOrigin-RevId: 344799253",
    "date": "2020-11-30T14:17:57Z",
    "url": "https://github.com/bazelbuild/bazel/commit/09f26fdadfad0e2e5fed4f377b564213d894bf49",
    "details": {
      "sha": "9a689db2c066331f9507586375f27b423234deb2",
      "filename": "src/main/java/com/google/devtools/build/lib/includescanning/LegacyIncludeScanner.java",
      "status": "modified",
      "additions": 29,
      "deletions": 34,
      "changes": 63,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/09f26fdadfad0e2e5fed4f377b564213d894bf49/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fincludescanning%2FLegacyIncludeScanner.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/09f26fdadfad0e2e5fed4f377b564213d894bf49/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fincludescanning%2FLegacyIncludeScanner.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fincludescanning%2FLegacyIncludeScanner.java?ref=09f26fdadfad0e2e5fed4f377b564213d894bf49",
      "patch": "@@ -15,7 +15,6 @@\n \n import com.google.common.base.Preconditions;\n import com.google.common.base.Supplier;\n-import com.google.common.base.Throwables;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Sets;\n@@ -58,6 +57,7 @@\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n \n /**\n  * C include scanner. Quickly scans C/C++ source files to determine the bounding set of transitively\n@@ -858,41 +858,36 @@ private void process(\n       checkForInterrupt(\"processing\", source);\n \n       Collection<Inclusion> inclusions;\n-      try {\n-        inclusions =\n-            fileParseCache\n-                .computeIfAbsent(\n-                    source,\n-                    file -> {\n-                      try {\n-                        return Futures.immediateFuture(\n-                            parser.extractInclusions(\n-                                file,\n-                                actionExecutionMetadata,\n-                                actionExecutionContext,\n-                                grepIncludes,\n-                                spawnIncludeScannerSupplier.get(),\n-                                isRealOutputFile(source.getExecPath())));\n-                      } catch (IOException e) {\n-                        throw new IORuntimeException(e);\n-                      } catch (ExecException e) {\n-                        throw new ExecRuntimeException(e);\n-                      } catch (InterruptedException e) {\n-                        throw new InterruptedRuntimeException(e);\n-                      }\n-                    })\n-                .get();\n-      } catch (ExecutionException ee) {\n+      SettableFuture<Collection<Inclusion>> future = SettableFuture.create();\n+      Future<Collection<Inclusion>> previous = fileParseCache.putIfAbsent(source, future);\n+      if (previous == null) {\n+        previous = future;\n         try {\n-          Throwables.throwIfInstanceOf(ee.getCause(), RuntimeException.class);\n-          throw new IllegalStateException(ee.getCause());\n-        } catch (IORuntimeException e) {\n-          throw e.getCauseIOException();\n-        } catch (ExecRuntimeException e) {\n-          throw e.getRealCause();\n-        } catch (InterruptedRuntimeException e) {\n-          throw e.getRealCause();\n+          future.set(\n+              parser.extractInclusions(\n+                  source,\n+                  actionExecutionMetadata,\n+                  actionExecutionContext,\n+                  grepIncludes,\n+                  spawnIncludeScannerSupplier.get(),\n+                  isRealOutputFile(source.getExecPath())));\n+        } catch (IOException | ExecException | InterruptedException e) {\n+          future.setException(e);\n+          fileParseCache.remove(source);\n+          throw e;\n+        }\n+      }\n+      try {\n+        inclusions = previous.get();\n+      } catch (ExecutionException e) {\n+        if (e.getCause() instanceof InterruptedException) {\n+          throw (InterruptedException) e.getCause();\n+        } else if (e.getCause() instanceof ExecException) {\n+          throw (ExecException) e.getCause();\n+        } else if (e.getCause() instanceof IOException) {\n+          throw (IOException) e.getCause();\n         }\n+        throw new IllegalStateException(e.getCause());\n       }\n       Preconditions.checkNotNull(inclusions, source);\n ",
      "parent_sha": "f38e293317088396163115cec07099026d63533e"
    }
  },
  {
    "oid": "e905ec3b99dd98c2c99929a6cda0b99cca328c24",
    "message": "Relax invariant that an action's inputs discovered during execution must be included in the action's inputs as found during the input discovery phase.\n\nWe still require that no new metadata be discovered -- in other words, the \"new\" inputs are likely just symlinks to old inputs, with different nominal paths.\n\n--\nMOS_MIGRATED_REVID=97257026",
    "date": "2015-07-01T09:14:14Z",
    "url": "https://github.com/bazelbuild/bazel/commit/e905ec3b99dd98c2c99929a6cda0b99cca328c24",
    "details": {
      "sha": "ae58479d3d4b940b73211d6a4a1d1d5d278bd794",
      "filename": "src/main/java/com/google/devtools/build/lib/skyframe/ActionExecutionFunction.java",
      "status": "modified",
      "additions": 27,
      "deletions": 8,
      "changes": 35,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/e905ec3b99dd98c2c99929a6cda0b99cca328c24/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FActionExecutionFunction.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/e905ec3b99dd98c2c99929a6cda0b99cca328c24/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FActionExecutionFunction.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FActionExecutionFunction.java?ref=e905ec3b99dd98c2c99929a6cda0b99cca328c24",
      "patch": "@@ -17,6 +17,7 @@\n import com.google.common.base.Preconditions;\n import com.google.common.base.Predicates;\n import com.google.common.collect.Collections2;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n@@ -318,7 +319,6 @@ private ActionExecutionValue checkCacheAndExecuteIfNeeded(\n     // This may be recreated if we discover inputs.\n     PerActionFileCache perActionFileCache = new PerActionFileCache(state.inputArtifactData);\n     ActionExecutionContext actionExecutionContext = null;\n-    boolean inputsDiscoveredDuringActionExecution = false;\n     try {\n       if (action.discoversInputs()) {\n         if (!state.hasDiscoveredInputs()) {\n@@ -329,11 +329,6 @@ private ActionExecutionValue checkCacheAndExecuteIfNeeded(\n             Preconditions.checkState(env.valuesMissing(), action);\n             return null;\n           }\n-          if (state.discoveredInputs == null) {\n-            // Action had nothing to tell us about discovered inputs before execution. We'll have to\n-            // add them afterwards.\n-            inputsDiscoveredDuringActionExecution = true;\n-          }\n         }\n         // state.discoveredInputs can be null even after include scanning if action discovers them\n         // during execution.\n@@ -366,10 +361,34 @@ private ActionExecutionValue checkCacheAndExecuteIfNeeded(\n         }\n       }\n     }\n-    if (inputsDiscoveredDuringActionExecution) {\n+    if (action.discoversInputs()) {\n       Map<Artifact, FileArtifactValue> metadataFoundDuringActionExecution =\n           declareAdditionalDependencies(env, action, state.inputArtifactData.keySet());\n-      state.discoveredInputs = metadataFoundDuringActionExecution.keySet();\n+      if (state.discoveredInputs == null) {\n+        // Include scanning didn't find anything beforehand -- these are the definitive discovered\n+        // inputs.\n+        state.discoveredInputs = metadataFoundDuringActionExecution.keySet();\n+      } else {\n+        // Sadly, even if we discovered inputs, sometimes the action runs and discovers more inputs.\n+        // Technically, this means our pre-execution input discovery is buggy, but it turns out this\n+        // is impractical to fix.\n+        // Any new inputs should already have been built -- this is a check that our input\n+        // discovery code is not missing too much. It may have to be removed if further input\n+        // discovery quirks are found.\n+        Preconditions.checkState(!env.valuesMissing(), \"%s %s %s\",\n+            action, metadataFoundDuringActionExecution, state);\n+        Set<FileArtifactValue> knownMetadata =\n+            ImmutableSet.copyOf(state.inputArtifactData.values());\n+        ImmutableSet.Builder<Artifact> discoveredInputBuilder =\n+            ImmutableSet.<Artifact>builder().addAll(state.discoveredInputs);\n+        for (Map.Entry<Artifact, FileArtifactValue> entry :\n+            metadataFoundDuringActionExecution.entrySet()) {\n+          Preconditions.checkState(knownMetadata.contains(entry.getValue()),\n+              \"%s %s\", action, entry);\n+          discoveredInputBuilder.add(entry.getKey());\n+        }\n+        state.discoveredInputs = discoveredInputBuilder.build();\n+      }\n       if (env.valuesMissing()) {\n         return null;\n       }",
      "parent_sha": "7a1db6e9906a6404c72f34f31cd9b6552e42e8d1"
    }
  },
  {
    "oid": "81fb43c8eaed8ac360f8792500675466e2bc63bc",
    "message": "Move checking whether usages of proguard_apply_* attributes into existing validation method.\n\nvalidateRuleContext() is renamed to validateContext().\n\nPiperOrigin-RevId: 282020488",
    "date": "2019-11-22T20:36:29Z",
    "url": "https://github.com/bazelbuild/bazel/commit/81fb43c8eaed8ac360f8792500675466e2bc63bc",
    "details": {
      "sha": "04100a1f25f787e286aeb23fbc96fa385a86f36f",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/android/AndroidBinary.java",
      "status": "modified",
      "additions": 32,
      "deletions": 33,
      "changes": 65,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/81fb43c8eaed8ac360f8792500675466e2bc63bc/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fandroid%2FAndroidBinary.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/81fb43c8eaed8ac360f8792500675466e2bc63bc/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fandroid%2FAndroidBinary.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fandroid%2FAndroidBinary.java?ref=81fb43c8eaed8ac360f8792500675466e2bc63bc",
      "patch": "@@ -120,7 +120,8 @@ public ConfiguredTarget create(RuleContext ruleContext)\n   }\n \n   /** Checks expected rule invariants, throws rule errors if anything is set wrong. */\n-  private static void validateRuleContext(RuleContext ruleContext) throws RuleErrorException {\n+  private static void validateRuleContext(RuleContext ruleContext, AndroidDataContext dataContext)\n+      throws RuleErrorException {\n     if (getMultidexMode(ruleContext) != MultidexMode.LEGACY\n         && ruleContext\n             .attributes()\n@@ -130,23 +131,33 @@ private static void validateRuleContext(RuleContext ruleContext) throws RuleErro\n           \"The 'main_dex_proguard_specs' attribute is only allowed if 'multidex' is\"\n               + \" set to 'legacy'\");\n     }\n-    if (ruleContext.attributes().isAttributeValueExplicitlySpecified(\"proguard_apply_mapping\")\n-        && ruleContext\n-            .attributes()\n-            .get(ProguardHelper.PROGUARD_SPECS, BuildType.LABEL_LIST)\n-            .isEmpty()) {\n-      ruleContext.throwWithAttributeError(\n-          \"proguard_apply_mapping\",\n-          \"'proguard_apply_mapping' can only be used when 'proguard_specs' is also set\");\n+    if (ruleContext.attributes().isAttributeValueExplicitlySpecified(\"proguard_apply_mapping\")) {\n+      if (dataContext.throwOnProguardApplyMapping()) {\n+        ruleContext.throwWithAttributeError(\n+            \"proguard_apply_mapping\", \"This attribute is not supported\");\n+      }\n+      if (ruleContext\n+          .attributes()\n+          .get(ProguardHelper.PROGUARD_SPECS, BuildType.LABEL_LIST)\n+          .isEmpty()) {\n+        ruleContext.throwWithAttributeError(\n+            \"proguard_apply_mapping\",\n+            \"'proguard_apply_mapping' can only be used when 'proguard_specs' is also set\");\n+      }\n     }\n-    if (ruleContext.attributes().isAttributeValueExplicitlySpecified(\"proguard_apply_dictionary\")\n-        && ruleContext\n-            .attributes()\n-            .get(ProguardHelper.PROGUARD_SPECS, BuildType.LABEL_LIST)\n-            .isEmpty()) {\n-      ruleContext.throwWithAttributeError(\n-          \"proguard_apply_dictionary\",\n-          \"'proguard_apply_dictionary' can only be used when 'proguard_specs' is also set\");\n+    if (ruleContext.attributes().isAttributeValueExplicitlySpecified(\"proguard_apply_dictionary\")) {\n+      if (dataContext.throwOnProguardApplyDictionary()) {\n+        ruleContext.throwWithAttributeError(\n+            \"proguard_apply_dictionary\", \"This attribute is not supported\");\n+      }\n+      if (ruleContext\n+          .attributes()\n+          .get(ProguardHelper.PROGUARD_SPECS, BuildType.LABEL_LIST)\n+          .isEmpty()) {\n+        ruleContext.throwWithAttributeError(\n+            \"proguard_apply_dictionary\",\n+            \"'proguard_apply_dictionary' can only be used when 'proguard_specs' is also set\");\n+      }\n     }\n \n     if (AndroidCommon.getAndroidConfig(ruleContext).desugarJava8Libs()\n@@ -196,7 +207,8 @@ private static RuleConfiguredTargetBuilder init(\n     ResourceDependencies resourceDeps =\n         ResourceDependencies.fromRuleDeps(ruleContext, /* neverlink= */ false);\n \n-    validateRuleContext(ruleContext);\n+    AndroidDataContext dataContext = androidSemantics.makeContextForNative(ruleContext);\n+    validateRuleContext(ruleContext, dataContext);\n \n     NativeLibs nativeLibs =\n         NativeLibs.fromLinkedNativeDeps(\n@@ -208,7 +220,6 @@ private static RuleConfiguredTargetBuilder init(\n     // Retrieve and compile the resources defined on the android_binary rule.\n     AndroidResources.validateRuleContext(ruleContext);\n \n-    final AndroidDataContext dataContext = androidSemantics.makeContextForNative(ruleContext);\n     Map<String, String> manifestValues = StampedAndroidManifest.getManifestValues(ruleContext);\n \n     StampedAndroidManifest manifest =\n@@ -342,16 +353,6 @@ private static RuleConfiguredTargetBuilder init(\n \n     Artifact proguardMapping =\n         ruleContext.getPrerequisiteArtifact(\"proguard_apply_mapping\", Mode.TARGET);\n-    if (proguardMapping != null && dataContext.throwOnProguardApplyMapping()) {\n-      throw ruleContext.throwWithAttributeError(\n-          \"proguard_apply_mapping\", \"This attribute is not supported\");\n-    }\n-    Artifact proguardDictionary =\n-        ruleContext.getPrerequisiteArtifact(\"proguard_apply_dictionary\", Mode.TARGET);\n-    if (proguardDictionary != null && dataContext.throwOnProguardApplyDictionary()) {\n-      throw ruleContext.throwWithAttributeError(\n-          \"proguard_apply_dictionary\", \"This attribute is not supported\");\n-    }\n \n     MobileInstallResourceApks mobileInstallResourceApks =\n         AndroidBinaryMobileInstall.createMobileInstallResourceApks(\n@@ -374,7 +375,6 @@ private static RuleConfiguredTargetBuilder init(\n         ImmutableList.<Artifact>of(),\n         ImmutableList.<Artifact>of(),\n         proguardMapping,\n-        proguardDictionary,\n         oneVersionOutputArtifact);\n   }\n \n@@ -395,7 +395,6 @@ public static RuleConfiguredTargetBuilder createAndroidBinary(\n       ImmutableList<Artifact> apksUnderTest,\n       ImmutableList<Artifact> additionalMergedManifests,\n       Artifact proguardMapping,\n-      Artifact proguardDictionary,\n       @Nullable Artifact oneVersionEnforcementArtifact)\n       throws InterruptedException, RuleErrorException {\n \n@@ -440,7 +439,6 @@ public static RuleConfiguredTargetBuilder createAndroidBinary(\n             binaryJar,\n             proguardSpecs,\n             proguardMapping,\n-            proguardDictionary,\n             proguardOutputMap);\n \n     if (dataContext.useResourceShrinking(hasProguardSpecs)) {\n@@ -750,7 +748,6 @@ private static ProguardOutput applyProguard(\n       Artifact deployJarArtifact,\n       ImmutableList<Artifact> proguardSpecs,\n       Artifact proguardMapping,\n-      Artifact proguardDictionary,\n       @Nullable Artifact proguardOutputMap)\n       throws InterruptedException {\n     Artifact proguardOutputJar =\n@@ -784,6 +781,8 @@ private static ProguardOutput applyProguard(\n         ruleContext.getImplicitOutputArtifact(JavaSemantics.JAVA_BINARY_PROGUARD_SEEDS);\n     Artifact proguardUsage =\n         ruleContext.getImplicitOutputArtifact(JavaSemantics.JAVA_BINARY_PROGUARD_USAGE);\n+    Artifact proguardDictionary =\n+        ruleContext.getPrerequisiteArtifact(\"proguard_apply_dictionary\", Mode.TARGET);\n     ProguardOutput result =\n         ProguardHelper.createOptimizationActions(\n             ruleContext,",
      "parent_sha": "13abce5ddd447a7b691f758d0f1e4c13c5920e20"
    }
  },
  {
    "oid": "fd9a0958a989cac1f08f15ab5643728469f9824e",
    "message": "Do not add flags from linking_mode_flags section when the toolchain defines\ncorresponding features.\n\nTherefore when both linking_mode_flags { mode: DYNAMIC } and feature { name:\n\"dynamic_linking_mode\" } are provided, bazel will only take flags from the\nfeature. The same applies to mode: STATIC and static_linkin_mode feature\nrespectively. mode: MOSTLY_STATIC_LIBRARIES is covered under\ndynamic_linking_mode for action \"c++-link-dynamic-library\". mode: FULLY_STATIC is handled separately.\n\nThis is needed to provide a way of incremental migration towards\nlegacy-flags-free crosstool.\n\nRELNOTES: None.\nPiperOrigin-RevId: 194556688",
    "date": "2018-04-27T17:10:36Z",
    "url": "https://github.com/bazelbuild/bazel/commit/fd9a0958a989cac1f08f15ab5643728469f9824e",
    "details": {
      "sha": "73b8bea0d3f5d81d38b9b59203489c4855df39dd",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/cpp/CppLinkActionBuilder.java",
      "status": "modified",
      "additions": 11,
      "deletions": 5,
      "changes": 16,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/fd9a0958a989cac1f08f15ab5643728469f9824e/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fcpp%2FCppLinkActionBuilder.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/fd9a0958a989cac1f08f15ab5643728469f9824e/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fcpp%2FCppLinkActionBuilder.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fcpp%2FCppLinkActionBuilder.java?ref=fd9a0958a989cac1f08f15ab5643728469f9824e",
      "patch": "@@ -708,12 +708,18 @@ private ImmutableList<String> getToolchainFlags(List<String> linkopts) {\n       result.addAll(\n           CppHelper.getFullyStaticLinkOptions(cppConfiguration, toolchain, sharedLinkopts));\n     } else if (mostlyStatic) {\n-      result.addAll(\n-          CppHelper.getMostlyStaticLinkOptions(\n-              cppConfiguration, toolchain, sharedLinkopts,\n-              featureConfiguration.isEnabled(CppRuleClasses.STATIC_LINK_CPP_RUNTIMES)));\n+      if (!featureConfiguration.isEnabled(CppRuleClasses.STATIC_LINKING_MODE)) {\n+        result.addAll(\n+            CppHelper.getMostlyStaticLinkOptions(\n+                cppConfiguration,\n+                toolchain,\n+                sharedLinkopts,\n+                featureConfiguration.isEnabled(CppRuleClasses.STATIC_LINK_CPP_RUNTIMES)));\n+      }\n     } else {\n-      result.addAll(CppHelper.getDynamicLinkOptions(cppConfiguration, toolchain, sharedLinkopts));\n+      if (!featureConfiguration.isEnabled(CppRuleClasses.DYNAMIC_LINKING_MODE)) {\n+        result.addAll(CppHelper.getDynamicLinkOptions(cppConfiguration, toolchain, sharedLinkopts));\n+      }\n     }\n \n     // Extra test-specific link options.",
      "parent_sha": "7afd69d431880ac81d01dc5cfa7e36bab37e7405"
    }
  },
  {
    "oid": "628cc2f9695d40c806c860f6ebd1b35cf7e6bac4",
    "message": "Make --experimental_resolved_file_instead_of_workspace accept path relative to the workspace\n\nMake the option --experimental_resolved_file_instead_of_workspace also accept\npaths relative to the workspace, instead of only absolute paths. In this way,\nusers of resolved files can simply add an entry\n\n  build --experimental_resolved_file_instead_of_workspace=resolved.bzl\n\nto their .bazelrc file.\n\nChange-Id: I70efee95f2379717de012525f7f26e7e2b1fadf2\nPiperOrigin-RevId: 213817984",
    "date": "2018-09-20T15:31:17Z",
    "url": "https://github.com/bazelbuild/bazel/commit/628cc2f9695d40c806c860f6ebd1b35cf7e6bac4",
    "details": {
      "sha": "4c5021cb90e2d8419a02d7ee0bdf7ae16e014446",
      "filename": "src/main/java/com/google/devtools/build/lib/bazel/BazelRepositoryModule.java",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/628cc2f9695d40c806c860f6ebd1b35cf7e6bac4/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbazel%2FBazelRepositoryModule.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/628cc2f9695d40c806c860f6ebd1b35cf7e6bac4/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbazel%2FBazelRepositoryModule.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbazel%2FBazelRepositoryModule.java?ref=628cc2f9695d40c806c860f6ebd1b35cf7e6bac4",
      "patch": "@@ -308,11 +308,16 @@ public void beforeCommand(CommandEnvironment env) {\n       }\n \n       if (!Strings.isNullOrEmpty(repoOptions.experimentalResolvedFileInsteadOfWorkspace)) {\n+        Path resolvedFile;\n+        if (env.getWorkspace() != null) {\n+          resolvedFile =\n+              env.getWorkspace()\n+                  .getRelative(repoOptions.experimentalResolvedFileInsteadOfWorkspace);\n+        } else {\n+          resolvedFile = filesystem.getPath(repoOptions.experimentalResolvedFileInsteadOfWorkspace);\n+        }\n         resolvedFileReplacingWorkspace =\n-            Optional.of(\n-                RootedPath.toRootedPath(\n-                    Root.absoluteRoot(filesystem),\n-                    filesystem.getPath(repoOptions.experimentalResolvedFileInsteadOfWorkspace)));\n+            Optional.of(RootedPath.toRootedPath(Root.absoluteRoot(filesystem), resolvedFile));\n       }\n \n       if (repoOptions.experimentalVerifyRepositoryRules != null) {",
      "parent_sha": "5cc183873f35e924de0bc716ac83705e936e83ff"
    }
  },
  {
    "oid": "178a7a3b328e85bd48598276a793c9a3c08adc3a",
    "message": "Handle top-level exceptions in javac\n\njavac's main catches all exceptions and returns an exit code, the API does not.\nThis restores error handling that was lost when we migrated to the API in\ncommit 3c5e55ff8e058b624ce26e803ff00434c70d4b91.\n\n--\nPiperOrigin-RevId: 144457176\nMOS_MIGRATED_REVID=144457176",
    "date": "2017-01-16T13:44:42Z",
    "url": "https://github.com/bazelbuild/bazel/commit/178a7a3b328e85bd48598276a793c9a3c08adc3a",
    "details": {
      "sha": "a4b5dc9f1347b352b70e8af6e0b9389f2890a709",
      "filename": "src/java_tools/buildjar/java/com/google/devtools/build/buildjar/javac/BlazeJavacMain.java",
      "status": "modified",
      "additions": 26,
      "deletions": 25,
      "changes": 51,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/178a7a3b328e85bd48598276a793c9a3c08adc3a/src%2Fjava_tools%2Fbuildjar%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fbuildjar%2Fjavac%2FBlazeJavacMain.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/178a7a3b328e85bd48598276a793c9a3c08adc3a/src%2Fjava_tools%2Fbuildjar%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fbuildjar%2Fjavac%2FBlazeJavacMain.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fjava_tools%2Fbuildjar%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fbuildjar%2Fjavac%2FBlazeJavacMain.java?ref=178a7a3b328e85bd48598276a793c9a3c08adc3a",
      "patch": "@@ -120,33 +120,34 @@ public Result compile(\n     setupBlazeJavaCompiler(context);\n \n     Result result = Result.ABNORMAL;\n+    JavacTool tool = JavacTool.create();\n+    JavacTaskImpl task =\n+        (JavacTaskImpl)\n+            tool.getTask(\n+                errOutput,\n+                fileManager,\n+                diagnosticListener,\n+                javacArguments,\n+                ImmutableList.<String>of() /*classes*/,\n+                fileManager.getJavaFileObjectsFromPaths(arguments.sourceFiles()),\n+                context);\n+    if (arguments.processors() != null) {\n+      task.setProcessors(arguments.processors());\n+    }\n+    fileManager.setContext(context);\n+    setLocations(fileManager, arguments);\n     try {\n-      JavacTool tool = JavacTool.create();\n-      JavacTaskImpl task =\n-          (JavacTaskImpl)\n-              tool.getTask(\n-                  errOutput,\n-                  fileManager,\n-                  diagnosticListener,\n-                  javacArguments,\n-                  ImmutableList.<String>of() /*classes*/,\n-                  fileManager.getJavaFileObjectsFromPaths(arguments.sourceFiles()),\n-                  context);\n-      if (arguments.processors() != null) {\n-        task.setProcessors(arguments.processors());\n-      }\n-      fileManager.setContext(context);\n-      setLocations(fileManager, arguments);\n-      result = task.doCall();\n-    } catch (PropagatedException e) {\n-      if (e.getCause() instanceof PluginException) {\n-        PluginException pluginException = (PluginException) e.getCause();\n-        errOutput.println(pluginException.getMessage());\n-        result = pluginException.getResult();\n-      } else {\n-        e.printStackTrace(errOutput);\n-        result = Result.ABNORMAL;\n+      try {\n+        result = task.doCall();\n+      } catch (PropagatedException e) {\n+        throw e.getCause();\n       }\n+    } catch (PluginException e) {\n+      errOutput.println(e.getMessage());\n+      result = e.getResult();\n+    } catch (Throwable t) {\n+      t.printStackTrace(errOutput);\n+      result = Result.ABNORMAL;\n     } finally {\n       if (result.isOK()) {\n         verifyNotNull(compiler);",
      "parent_sha": "0afc044a717763ed3123e0dbc5296c4cb2f5d443"
    }
  },
  {
    "oid": "6a947383f3312f8579aaceef5e5afdd61b4aa583",
    "message": "Automatic Remove Ref:org.junit.rules.TemporaryFolder\n\nPiperOrigin-RevId: 288420283",
    "date": "2020-01-07T03:13:32Z",
    "url": "https://github.com/bazelbuild/bazel/commit/6a947383f3312f8579aaceef5e5afdd61b4aa583",
    "details": {
      "sha": "90a16842e30fdd78b41e675f7865272c1ec0e315",
      "filename": "src/tools/android/java/com/google/devtools/build/android/desugar/testing/junit/DesugarRule.java",
      "status": "modified",
      "additions": 81,
      "deletions": 90,
      "changes": 171,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/6a947383f3312f8579aaceef5e5afdd61b4aa583/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2Fdesugar%2Ftesting%2Fjunit%2FDesugarRule.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/6a947383f3312f8579aaceef5e5afdd61b4aa583/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2Fdesugar%2Ftesting%2Fjunit%2FDesugarRule.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2Fdesugar%2Ftesting%2Fjunit%2FDesugarRule.java?ref=6a947383f3312f8579aaceef5e5afdd61b4aa583",
      "patch": "@@ -56,7 +56,6 @@\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipFile;\n import javax.inject.Inject;\n-import org.junit.rules.TemporaryFolder;\n import org.junit.rules.TestRule;\n import org.junit.runner.Description;\n import org.junit.runners.model.Statement;\n@@ -77,9 +76,6 @@ public final class DesugarRule implements TestRule {\n   private final Path androidRuntimeJar;\n   private final Path jacocoAgentJar;\n \n-  /** For hosting desugared jar temporarily. */\n-  private final TemporaryFolder temporaryFolder = new TemporaryFolder();\n-\n   private final Object testInstance;\n   private final MethodHandles.Lookup testInstanceLookup;\n \n@@ -176,86 +172,83 @@ public static DesugarRuleBuilder builder(Object testInstance, Lookup testInstanc\n \n   @Override\n   public Statement apply(Statement base, Description description) {\n-    return temporaryFolder.apply(\n-        new Statement() {\n-          @Override\n-          public void evaluate() throws Throwable {\n-            ImmutableList<Path> transInputs = inputs;\n-            for (int round = 1; round <= maxNumOfTransformations; round++) {\n-              ImmutableList<Path> transOutputs =\n-                  getRuntimeOutputPaths(\n-                      transInputs,\n-                      temporaryFolder,\n-                      tempDirs,\n-                      /* outputRootPrefix= */ DEFAULT_OUTPUT_ROOT_PREFIX + \"_\" + round);\n-              JarTransformationRecord transformationRecord =\n-                  JarTransformationRecord.create(\n-                      transInputs,\n-                      transOutputs,\n-                      classPathEntries,\n-                      bootClassPathEntries,\n-                      extraCustomCommandOptions);\n-              Desugar.main(transformationRecord.getDesugarFlags().toArray(new String[0]));\n-\n-              jarTransformationRecords.add(transformationRecord);\n-              transInputs = transOutputs;\n-            }\n-\n-            ClassLoader inputClassLoader = getInputClassLoader();\n-            for (Field field : injectableClassLiterals) {\n-              Class<?> classLiteral =\n-                  loadClassLiteral(\n-                      field.getDeclaredAnnotation(DynamicClassLiteral.class),\n-                      jarTransformationRecords,\n-                      inputClassLoader,\n-                      reflectionBasedMembers,\n-                      descriptorLookupRepo,\n-                      workingJavaPackage);\n-              MethodHandle fieldSetter = testInstanceLookup.unreflectSetter(field);\n-              fieldSetter.invoke(testInstance, classLiteral);\n-            }\n-\n-            for (Field field : injectableAsmNodes) {\n-              Class<?> requestedFieldType = field.getType();\n-              Object asmNode =\n-                  getAsmNode(\n-                      field.getDeclaredAnnotation(AsmNode.class),\n-                      requestedFieldType,\n-                      jarTransformationRecords,\n-                      inputs,\n-                      workingJavaPackage);\n-              MethodHandle fieldSetter = testInstanceLookup.unreflectSetter(field);\n-              fieldSetter.invoke(testInstance, asmNode);\n-            }\n-\n-            for (Field field : injectableMethodHandles) {\n-              MethodHandle methodHandle =\n-                  getMethodHandle(\n-                      field.getDeclaredAnnotation(RuntimeMethodHandle.class),\n-                      testInstanceLookup,\n-                      jarTransformationRecords,\n-                      inputClassLoader,\n-                      reflectionBasedMembers,\n-                      descriptorLookupRepo,\n-                      workingJavaPackage);\n-              MethodHandle fieldSetter = testInstanceLookup.unreflectSetter(field);\n-              fieldSetter.invoke(testInstance, methodHandle);\n-            }\n-\n-            for (Field field : injectableZipEntries) {\n-              ZipEntry zipEntry =\n-                  getZipEntry(\n-                      field.getDeclaredAnnotation(RuntimeZipEntry.class),\n-                      jarTransformationRecords,\n-                      inputs,\n-                      workingJavaPackage);\n-              MethodHandle fieldSetter = testInstanceLookup.unreflectSetter(field);\n-              fieldSetter.invoke(testInstance, zipEntry);\n-            }\n-            base.evaluate();\n-          }\n-        },\n-        description);\n+    return new Statement() {\n+      @Override\n+      public void evaluate() throws Throwable {\n+        ImmutableList<Path> transInputs = inputs;\n+        for (int round = 1; round <= maxNumOfTransformations; round++) {\n+          ImmutableList<Path> transOutputs =\n+              getRuntimeOutputPaths(\n+                  transInputs,\n+                  tempDirs,\n+                  /* outputRootPrefix= */ DEFAULT_OUTPUT_ROOT_PREFIX + \"_\" + round);\n+          JarTransformationRecord transformationRecord =\n+              JarTransformationRecord.create(\n+                  transInputs,\n+                  transOutputs,\n+                  classPathEntries,\n+                  bootClassPathEntries,\n+                  extraCustomCommandOptions);\n+          Desugar.main(transformationRecord.getDesugarFlags().toArray(new String[0]));\n+\n+          jarTransformationRecords.add(transformationRecord);\n+          transInputs = transOutputs;\n+        }\n+\n+        ClassLoader inputClassLoader = getInputClassLoader();\n+        for (Field field : injectableClassLiterals) {\n+          Class<?> classLiteral =\n+              loadClassLiteral(\n+                  field.getDeclaredAnnotation(DynamicClassLiteral.class),\n+                  jarTransformationRecords,\n+                  inputClassLoader,\n+                  reflectionBasedMembers,\n+                  descriptorLookupRepo,\n+                  workingJavaPackage);\n+          MethodHandle fieldSetter = testInstanceLookup.unreflectSetter(field);\n+          fieldSetter.invoke(testInstance, classLiteral);\n+        }\n+\n+        for (Field field : injectableAsmNodes) {\n+          Class<?> requestedFieldType = field.getType();\n+          Object asmNode =\n+              getAsmNode(\n+                  field.getDeclaredAnnotation(AsmNode.class),\n+                  requestedFieldType,\n+                  jarTransformationRecords,\n+                  inputs,\n+                  workingJavaPackage);\n+          MethodHandle fieldSetter = testInstanceLookup.unreflectSetter(field);\n+          fieldSetter.invoke(testInstance, asmNode);\n+        }\n+\n+        for (Field field : injectableMethodHandles) {\n+          MethodHandle methodHandle =\n+              getMethodHandle(\n+                  field.getDeclaredAnnotation(RuntimeMethodHandle.class),\n+                  testInstanceLookup,\n+                  jarTransformationRecords,\n+                  inputClassLoader,\n+                  reflectionBasedMembers,\n+                  descriptorLookupRepo,\n+                  workingJavaPackage);\n+          MethodHandle fieldSetter = testInstanceLookup.unreflectSetter(field);\n+          fieldSetter.invoke(testInstance, methodHandle);\n+        }\n+\n+        for (Field field : injectableZipEntries) {\n+          ZipEntry zipEntry =\n+              getZipEntry(\n+                  field.getDeclaredAnnotation(RuntimeZipEntry.class),\n+                  jarTransformationRecords,\n+                  inputs,\n+                  workingJavaPackage);\n+          MethodHandle fieldSetter = testInstanceLookup.unreflectSetter(field);\n+          fieldSetter.invoke(testInstance, zipEntry);\n+        }\n+        base.evaluate();\n+      }\n+    };\n   }\n \n   private static void fillMissingClassMemberDescriptorRepo(\n@@ -563,10 +556,7 @@ private ClassLoader getInputClassLoader() throws MalformedURLException {\n   }\n \n   private static ImmutableList<Path> getRuntimeOutputPaths(\n-      ImmutableList<Path> inputs,\n-      TemporaryFolder temporaryFolder,\n-      Map<String, Path> tempDirs,\n-      String outputRootPrefix)\n+      ImmutableList<Path> inputs, Map<String, Path> tempDirs, String outputRootPrefix)\n       throws IOException {\n     ImmutableList.Builder<Path> outputRuntimePathsBuilder = ImmutableList.builder();\n     for (Path path : inputs) {\n@@ -575,7 +565,9 @@ private static ImmutableList<Path> getRuntimeOutputPaths(\n       if (tempDirs.containsKey(targetDirKey)) {\n         outputDirPath = tempDirs.get(targetDirKey);\n       } else {\n-        outputDirPath = Paths.get(temporaryFolder.newFolder(targetDirKey.split(\"/\")).getPath());\n+        Path root = Files.createTempDirectory(\"junit\");\n+        Files.delete(root);\n+        outputDirPath = Files.createDirectories(root.resolve(Paths.get(targetDirKey)));\n         tempDirs.put(targetDirKey, outputDirPath);\n       }\n       outputRuntimePathsBuilder.add(outputDirPath.resolve(path.getFileName()));\n@@ -597,5 +589,4 @@ static ImmutableList<Field> findAllInjectableFieldsWithQualifier(\n     }\n     return fields.build();\n   }\n-\n }",
      "parent_sha": "f886f65ca77773e8822e7507aca357e344107c81"
    }
  },
  {
    "oid": "f5bbabe769cd0a52b3d73fb01685e75489564d24",
    "message": "Simplify logic around BES connection caching.\n\nRELNOTES: None\nPiperOrigin-RevId: 227892995",
    "date": "2019-01-04T20:09:41Z",
    "url": "https://github.com/bazelbuild/bazel/commit/f5bbabe769cd0a52b3d73fb01685e75489564d24",
    "details": {
      "sha": "769268e270b8c90de1f0c4fba9a7d81888e8bcb2",
      "filename": "src/main/java/com/google/devtools/build/lib/buildeventservice/BuildEventServiceModule.java",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/f5bbabe769cd0a52b3d73fb01685e75489564d24/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbuildeventservice%2FBuildEventServiceModule.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/f5bbabe769cd0a52b3d73fb01685e75489564d24/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbuildeventservice%2FBuildEventServiceModule.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbuildeventservice%2FBuildEventServiceModule.java?ref=f5bbabe769cd0a52b3d73fb01685e75489564d24",
      "patch": "@@ -96,7 +96,6 @@ public void beforeCommand(CommandEnvironment commandEnvironment) {\n       return;\n     }\n \n-    this.keepClient = false;\n     streamer = tryCreateStreamer(commandEnvironment);\n     if (streamer != null) {\n       commandEnvironment.getReporter().addHandler(streamer);\n@@ -150,6 +149,10 @@ public void afterCommand() {\n   @Nullable\n   @VisibleForTesting\n   BuildEventStreamer tryCreateStreamer(CommandEnvironment env) {\n+    BuildEventStreamOptions buildEventStreamOptions =\n+        env.getOptions().getOptions(BuildEventStreamOptions.class);\n+    this.keepClient = buildEventStreamOptions.keepBackendConnections;\n+\n     try {\n       BuildEventTransport besTransport = null;\n       try {\n@@ -165,10 +168,6 @@ BuildEventStreamer tryCreateStreamer(CommandEnvironment env) {\n         return null;\n       }\n \n-      BuildEventStreamOptions buildEventStreamOptions =\n-          env.getOptions().getOptions(BuildEventStreamOptions.class);\n-      this.keepClient = buildEventStreamOptions.keepBackendConnections;\n-\n       ImmutableSet<BuildEventTransport> bepTransports =\n           BuildEventTransportFactory.createFromOptions(env, env.getBlazeModuleEnvironment()::exit);\n ",
      "parent_sha": "3f8ff10e105230afeb3bb6684d361964c8b3f3c0"
    }
  },
  {
    "oid": "fbdfa61450a4f30f1793c3e90edb9414a3ee759e",
    "message": "Skylark, JS: nicer error message when a source file has an unknown type.\n\n--\nMOS_MIGRATED_REVID=112766003",
    "date": "2016-01-22T15:55:14Z",
    "url": "https://github.com/bazelbuild/bazel/commit/fbdfa61450a4f30f1793c3e90edb9414a3ee759e",
    "details": {
      "sha": "fe5ac8701d8c247bbdfa280ebb6b3dab1c654657",
      "filename": "src/main/java/com/google/devtools/build/lib/packages/AnalysisIssues.java",
      "status": "modified",
      "additions": 29,
      "deletions": 2,
      "changes": 31,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/fbdfa61450a4f30f1793c3e90edb9414a3ee759e/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fpackages%2FAnalysisIssues.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/fbdfa61450a4f30f1793c3e90edb9414a3ee759e/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fpackages%2FAnalysisIssues.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fpackages%2FAnalysisIssues.java?ref=fbdfa61450a4f30f1793c3e90edb9414a3ee759e",
      "patch": "@@ -13,7 +13,6 @@\n // limitations under the License.\n package com.google.devtools.build.lib.packages;\n \n-import com.google.common.base.Joiner;\n import com.google.common.collect.ImmutableList;\n import com.google.devtools.build.lib.util.Preconditions;\n \n@@ -57,6 +56,15 @@ private void reportTo(RuleErrorConsumer errors) {\n       }\n     }\n \n+    private void reportTo(StringBuilder sb) {\n+      String msg = String.format(messageTemplate, arguments);\n+      if (attribute == null) {\n+        sb.append(\"ERROR: \").append(msg);\n+      } else {\n+        sb.append(\"ERROR: in attribute \\\"\").append(attribute).append(\"\\\": \").append(msg);\n+      }\n+    }\n+\n     @Override\n     public String toString() {\n       if (attribute == null) {\n@@ -102,8 +110,27 @@ public void reportTo(RuleErrorConsumer errors) {\n     }\n   }\n \n+  @Nullable\n+  private String asString() {\n+    if (entries == null) {\n+      return null;\n+    }\n+\n+    StringBuilder sb = new StringBuilder();\n+    for (Entry e : entries) {\n+      e.reportTo(sb);\n+    }\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public String getMessage() {\n+    return asString();\n+  }\n+\n   @Override\n   public String toString() {\n-    return \"Errors during analysis:\\n\" + Joiner.on(\"\\n\").join(entries);\n+    String s = asString();\n+    return s == null ? \"\" : s;\n   }\n }",
      "parent_sha": "85c63c49138f106b6adebc2affc4edb97f8f11e1"
    }
  },
  {
    "oid": "27ec632c88ef228f4dee32b41ec7269ac749da28",
    "message": "Add a getGeneratingAction(ConfiguredTarget target, String outputName) method to BuildViewTestCase.\n\n--\nMOS_MIGRATED_REVID=117571330",
    "date": "2016-03-21T09:35:09Z",
    "url": "https://github.com/bazelbuild/bazel/commit/27ec632c88ef228f4dee32b41ec7269ac749da28",
    "details": {
      "sha": "7ad08322810658d5e281a4d44628667f94254d6d",
      "filename": "src/test/java/com/google/devtools/build/lib/analysis/util/BuildViewTestCase.java",
      "status": "modified",
      "additions": 16,
      "deletions": 5,
      "changes": 21,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/27ec632c88ef228f4dee32b41ec7269ac749da28/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Futil%2FBuildViewTestCase.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/27ec632c88ef228f4dee32b41ec7269ac749da28/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Futil%2FBuildViewTestCase.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Futil%2FBuildViewTestCase.java?ref=27ec632c88ef228f4dee32b41ec7269ac749da28",
      "patch": "@@ -520,6 +520,17 @@ protected final Action getGeneratingAction(Artifact artifact) {\n     return getActionGraph().getGeneratingAction(artifact);\n   }\n \n+  protected Action getGeneratingAction(ConfiguredTarget target, String outputName) {\n+    NestedSet<Artifact> filesToBuild = getFilesToBuild(target);\n+    Artifact artifact = Iterables.find(filesToBuild, artifactNamed(outputName), null);\n+    if (artifact == null) {\n+      fail(\n+          String.format(\n+              \"Artifact named '%s' not found in filesToBuild (%s)\", outputName, filesToBuild));\n+    }\n+    return getGeneratingAction(artifact);\n+  }\n+\n   /**\n    * Returns the SpawnAction that generates an artifact.\n    * Implicitly assumes the action is a SpawnAction.\n@@ -528,6 +539,11 @@ protected final SpawnAction getGeneratingSpawnAction(Artifact artifact) {\n     return (SpawnAction) getGeneratingAction(artifact);\n   }\n \n+  protected SpawnAction getGeneratingSpawnAction(ConfiguredTarget target, String outputName) {\n+    return getGeneratingSpawnAction(\n+        Iterables.find(getFilesToBuild(target), artifactNamed(outputName)));\n+  }\n+ \n   protected void simulateLoadingPhase() {\n     try {\n       ensureTargetsVisited(targetConfig.getAllLabels().values());\n@@ -1394,11 +1410,6 @@ public static Set<Label> asLabelSet(Iterable<String> strings) throws LabelSyntax\n     return result;\n   }\n \n-  protected SpawnAction getGeneratingSpawnAction(ConfiguredTarget target, String outputName) {\n-    return getGeneratingSpawnAction(\n-        Iterables.find(getFilesToBuild(target), artifactNamed(outputName)));\n-  }\n-\n   protected String getErrorMsgSingleFile(String attrName, String ruleType, String ruleName,\n       String depRuleName) {\n     return \"in \" + attrName + \" attribute of \" + ruleType + \" rule \" + ruleName + \": '\"",
      "parent_sha": "bb2f07124c7ebf5cb28c8cd4b57cf6156c1c7b0d"
    }
  },
  {
    "oid": "a816344d3ab55f8608d023373fdcac6a19aef5e9",
    "message": "Preserve compression for resources in ProtoApk#copy()\n\nPreviously all resources were stored uncompressed in copies - when resource\nshrinking is enabled, for example. This required relinking the APK downstream\nto correct compression, which is an unintended use of aapt2's shared library\nsupport.\n\nPiperOrigin-RevId: 370762729",
    "date": "2021-04-27T21:26:25Z",
    "url": "https://github.com/bazelbuild/bazel/commit/a816344d3ab55f8608d023373fdcac6a19aef5e9",
    "details": {
      "sha": "268043f2f9f3ce0eb9eafeba3ff6cce0f563bc45",
      "filename": "src/tools/android/java/com/google/devtools/build/android/aapt2/ProtoApk.java",
      "status": "modified",
      "additions": 34,
      "deletions": 27,
      "changes": 61,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/a816344d3ab55f8608d023373fdcac6a19aef5e9/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2Faapt2%2FProtoApk.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/a816344d3ab55f8608d023373fdcac6a19aef5e9/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2Faapt2%2FProtoApk.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2Faapt2%2FProtoApk.java?ref=a816344d3ab55f8608d023373fdcac6a19aef5e9",
      "patch": "@@ -42,6 +42,7 @@\n import com.google.common.base.Suppliers;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.io.ByteStreams;\n import com.google.common.xml.XmlEscapers;\n import com.google.devtools.build.android.AndroidResourceOutputs.UniqueZipBuilder;\n@@ -133,28 +134,35 @@ private static ProtoApk readFrom(URI uri) throws IOException {\n    */\n   public ProtoApk copy(Path destination, BiPredicate<ResourceType, String> resourceFilter)\n       throws IOException {\n+    final ResourceTable resourceTable = getResourceTable();\n+    final ResourceTable.Builder dstTableBuilder =\n+        resourceTable.toBuilder()\n+            .addToolFingerprint(\n+                ToolFingerprint.newBuilder().setTool(\"ResourceProcessorBusyBox\")\n+                // NB: \"stamp\" information should go here, but that's not available:\n+                // https://github.com/bazelbuild/bazel/blob/78bb263e46bf301900c1d4b1e04fabf3a6854762/src/main/java/com/google/devtools/build/lib/bazel/rules/java/BazelJavaRuleClasses.java#L380\n+                );\n+\n+    dstTableBuilder.clearPackage(); // we'll add these back, with filtering below\n+\n+    // keep track of all resource files still referenced in the (potentially stripped) table\n+    ImmutableSet.Builder<String> resToKeepBuilder = ImmutableSet.builder();\n+    for (Package pkg : resourceTable.getPackageList()) {\n+      Package dstPkg = copyPackage(resourceFilter, resToKeepBuilder, pkg);\n+      dstTableBuilder.addPackage(dstPkg);\n+    }\n+    ImmutableSet<String> resToKeep = resToKeepBuilder.build();\n \n-    final URI dstZipUri = URI.create(\"jar:\" + destination.toUri());\n     try (final ZipFile srcZip = new ZipFile(uri.getPath());\n         final UniqueZipBuilder dstZip = UniqueZipBuilder.createFor(destination)) {\n-      final ResourceTable resourceTable = getResourceTable();\n-      final ResourceTable.Builder dstTableBuilder =\n-          resourceTable.toBuilder()\n-              .addToolFingerprint(\n-                  ToolFingerprint.newBuilder().setTool(\"ResourceProcessorBusyBox\")\n-                  // NB: \"stamp\" information should go here, but that's not available:\n-                  // https://github.com/bazelbuild/bazel/blob/78bb263e46bf301900c1d4b1e04fabf3a6854762/src/main/java/com/google/devtools/build/lib/bazel/rules/java/BazelJavaRuleClasses.java#L380\n-                  );\n-\n-      dstTableBuilder.clearPackage(); // we'll add these back, with filtering below\n-      for (Package pkg : resourceTable.getPackageList()) {\n-        Package dstPkg = copyPackage(resourceFilter, dstZip, pkg);\n-        dstTableBuilder.addPackage(dstPkg);\n-      }\n       dstZip.addEntry(RESOURCE_TABLE, dstTableBuilder.build().toByteArray(), ZipEntry.DEFLATED);\n+      // the rest are pure copies, and could potentially be more efficiently done via ZipIn/ZipOut\n       srcZip.stream()\n           .filter(not(ZipEntry::isDirectory))\n-          .filter(entry -> !entry.getName().startsWith(RES_DIRECTORY + \"/\"))\n+          .filter(\n+              entry ->\n+                  !entry.getName().startsWith(RES_DIRECTORY + \"/\")\n+                      || resToKeep.contains(entry.getName()))\n           .filter(entry -> !entry.getName().equals(RESOURCE_TABLE))\n           .forEach(\n               entry -> {\n@@ -170,7 +178,7 @@ public ProtoApk copy(Path destination, BiPredicate<ResourceType, String> resourc\n               });\n     }\n \n-    return readFrom(dstZipUri);\n+    return readFrom(URI.create(\"jar:\" + destination.toUri()));\n   }\n \n   /**\n@@ -187,19 +195,21 @@ private static void createDirectories(UniqueZipBuilder zip, @Nullable Path direc\n   }\n \n   private Package copyPackage(\n-      BiPredicate<ResourceType, String> resourceFilter, UniqueZipBuilder dstZip, Package pkg)\n+      BiPredicate<ResourceType, String> resourceFilter,\n+      ImmutableSet.Builder<String> resToKeep,\n+      Package pkg)\n       throws IOException {\n     Package.Builder dstPkgBuilder = Package.newBuilder(pkg);\n     dstPkgBuilder.clearType();\n     for (Resources.Type type : pkg.getTypeList()) {\n-      copyResourceType(resourceFilter, dstZip, dstPkgBuilder, type);\n+      copyResourceType(resourceFilter, resToKeep, dstPkgBuilder, type);\n     }\n     return dstPkgBuilder.build();\n   }\n \n   private void copyResourceType(\n       BiPredicate<ResourceType, String> resourceFilter,\n-      UniqueZipBuilder dstZip,\n+      ImmutableSet.Builder<String> resToKeep,\n       Package.Builder dstPkgBuilder,\n       Resources.Type type)\n       throws IOException {\n@@ -209,7 +219,7 @@ private void copyResourceType(\n     ResourceType resourceType = ResourceType.getEnum(type.getName());\n     for (Entry entry : type.getEntryList()) {\n       if (resourceFilter.test(resourceType, entry.getName())) {\n-        copyEntry(dstZip, dstTypeBuilder, entry);\n+        copyEntry(resToKeep, dstTypeBuilder, entry);\n       }\n     }\n     final Resources.Type dstType = dstTypeBuilder.build();\n@@ -218,18 +228,15 @@ private void copyResourceType(\n     }\n   }\n \n-  private void copyEntry(UniqueZipBuilder dstZip, Type.Builder dstTypeBuilder, Entry entry)\n+  private void copyEntry(\n+      ImmutableSet.Builder<String> resToKeep, Type.Builder dstTypeBuilder, Entry entry)\n       throws IOException {\n     dstTypeBuilder.addEntry(Entry.newBuilder(entry));\n     for (ConfigValue configValue : entry.getConfigValueList()) {\n       if (configValue.hasValue()\n           && configValue.getValue().hasItem()\n           && configValue.getValue().getItem().hasFile()) {\n-        final String path = configValue.getValue().getItem().getFile().getPath();\n-        final Path apkFileSystemPath = apkFileSystem.getPath(path);\n-        createDirectories(dstZip, apkFileSystemPath.getParent());\n-        byte[] content = Files.readAllBytes(apkFileSystemPath);\n-        dstZip.addEntry(path, content, ZipEntry.STORED);\n+        resToKeep.add(configValue.getValue().getItem().getFile().getPath());\n       }\n     }\n   }",
      "parent_sha": "9fbd12d44e05bb90fb177c49725c99b0bf60e9d5"
    }
  },
  {
    "oid": "9b5fcc6b5557ce173a9cbf845bc93d27fdd4e115",
    "message": "Avoid leaking ResourceShrinkerAction args between requests\n\nKeeping the `ResourceShrinkerAction` options in a static field allows these options to leak between requests in a multiplex world.\n\nCloses #14145.\n\nPiperOrigin-RevId: 405479295",
    "date": "2021-10-25T20:34:55Z",
    "url": "https://github.com/bazelbuild/bazel/commit/9b5fcc6b5557ce173a9cbf845bc93d27fdd4e115",
    "details": {
      "sha": "bdd33f78a59e426f1a2f1c37fbb582b7140ec41b",
      "filename": "src/tools/android/java/com/google/devtools/build/android/ResourceShrinkerAction.java",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/9b5fcc6b5557ce173a9cbf845bc93d27fdd4e115/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2FResourceShrinkerAction.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/9b5fcc6b5557ce173a9cbf845bc93d27fdd4e115/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2FResourceShrinkerAction.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2FResourceShrinkerAction.java?ref=9b5fcc6b5557ce173a9cbf845bc93d27fdd4e115",
      "patch": "@@ -218,9 +218,6 @@ public static final class Options extends OptionsBase {\n     public VariantType packageType;\n   }\n \n-  private static AaptConfigOptions aaptConfigOptions;\n-  private static Options options;\n-\n   private static String getManifestPackage(Path manifest)\n       throws SAXException, IOException, StreamException, ParserConfigurationException {\n     ManifestData manifestData = AndroidManifestParser.parse(Files.newInputStream(manifest));\n@@ -246,8 +243,8 @@ public static void main(String[] args) throws Exception {\n             .argsPreProcessor(new ShellQuotedParamsFilePreProcessor(FileSystems.getDefault()))\n             .build();\n     optionsParser.parseAndExitUponError(args);\n-    aaptConfigOptions = optionsParser.getOptions(AaptConfigOptions.class);\n-    options = optionsParser.getOptions(Options.class);\n+    AaptConfigOptions aaptConfigOptions = optionsParser.getOptions(AaptConfigOptions.class);\n+    Options options = optionsParser.getOptions(Options.class);\n \n     AndroidResourceProcessor resourceProcessor = new AndroidResourceProcessor(stdLogger);\n     // Setup temporary working directories.",
      "parent_sha": "64ffc098a23a4d72726e2efbf590cb8002abeec2"
    }
  },
  {
    "oid": "3836ad029f202ca13c64c9f07e4568ea8ab2d9a6",
    "message": "Remote: Only waits for background tasks from remote execution.\n\nWe added the block waiting behaviour after each command in remote module to wait for background uploads when introducing async upload. However, not all background uploads should be waited, e.g. uploads from BES module but with flag `--bes_upload_mode=fully_async`.\n\nThis PR updates remote module so that only uploads initiated by remote module are waited after the command. This also enable us to implement something like `--remote_upload_mode=fully_async` in the future.\n\nFixes #14620.\n\nCloses #14634.\n\nPiperOrigin-RevId: 424296966",
    "date": "2022-01-26T10:28:37Z",
    "url": "https://github.com/bazelbuild/bazel/commit/3836ad029f202ca13c64c9f07e4568ea8ab2d9a6",
    "details": {
      "sha": "cf1f8938b9e1dc2506b69889cfcdd03a2ec7144b",
      "filename": "src/main/java/com/google/devtools/build/lib/remote/RemoteExecutionService.java",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/3836ad029f202ca13c64c9f07e4568ea8ab2d9a6/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fremote%2FRemoteExecutionService.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/3836ad029f202ca13c64c9f07e4568ea8ab2d9a6/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fremote%2FRemoteExecutionService.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fremote%2FRemoteExecutionService.java?ref=3836ad029f202ca13c64c9f07e4568ea8ab2d9a6",
      "patch": "@@ -142,6 +142,7 @@\n import java.util.TreeSet;\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.concurrent.Executor;\n+import java.util.concurrent.Phaser;\n import java.util.concurrent.atomic.AtomicBoolean;\n import javax.annotation.Nullable;\n \n@@ -164,6 +165,7 @@ public class RemoteExecutionService {\n   @Nullable private final Path captureCorruptedOutputsDir;\n   private final Cache<Object, MerkleTree> merkleTreeCache;\n   private final Set<String> reportedErrors = new HashSet<>();\n+  private final Phaser backgroundTaskPhaser = new Phaser(1);\n \n   private final Scheduler scheduler;\n \n@@ -1162,13 +1164,18 @@ public void uploadOutputs(RemoteAction action, SpawnResult spawnResult)\n             .subscribe(\n                 new SingleObserver<ActionResult>() {\n                   @Override\n-                  public void onSubscribe(@NonNull Disposable d) {}\n+                  public void onSubscribe(@NonNull Disposable d) {\n+                    backgroundTaskPhaser.register();\n+                  }\n \n                   @Override\n-                  public void onSuccess(@NonNull ActionResult actionResult) {}\n+                  public void onSuccess(@NonNull ActionResult actionResult) {\n+                    backgroundTaskPhaser.arriveAndDeregister();\n+                  }\n \n                   @Override\n                   public void onError(@NonNull Throwable e) {\n+                    backgroundTaskPhaser.arriveAndDeregister();\n                     reportUploadError(e);\n                   }\n                 });\n@@ -1302,7 +1309,7 @@ public void shutdown() {\n       remoteCache.release();\n \n       try {\n-        remoteCache.awaitTermination();\n+        backgroundTaskPhaser.awaitAdvanceInterruptibly(backgroundTaskPhaser.arrive());\n       } catch (InterruptedException e) {\n         buildInterrupted.set(true);\n         remoteCache.shutdownNow();",
      "parent_sha": "621649d5f927d5087bfc7f8a9b82f929723fc9cd"
    }
  },
  {
    "oid": "443f78fcdff99e313001a7dc06026c70f71e8792",
    "message": "Simplify LaunchStoryboard plist generation to make it less error prone.\nSimplify automatic entries creation.\n\n--\nMOS_MIGRATED_REVID=116866524",
    "date": "2016-03-11T21:29:12Z",
    "url": "https://github.com/bazelbuild/bazel/commit/443f78fcdff99e313001a7dc06026c70f71e8792",
    "details": {
      "sha": "64109672e510ec7eb7279bdb642bd0abf84d6879",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/objc/ReleaseBundlingSupport.java",
      "status": "modified",
      "additions": 7,
      "deletions": 17,
      "changes": 24,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/443f78fcdff99e313001a7dc06026c70f71e8792/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fobjc%2FReleaseBundlingSupport.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/443f78fcdff99e313001a7dc06026c70f71e8792/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fobjc%2FReleaseBundlingSupport.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fobjc%2FReleaseBundlingSupport.java?ref=443f78fcdff99e313001a7dc06026c70f71e8792",
      "patch": "@@ -344,19 +344,9 @@ private void registerEmbedLabelPlistAction() {\n   private void registerLaunchStoryboardPlistAction() {\n     String launchStoryboard = attributes.launchStoryboard().getFilename();\n     String launchStoryboardName = launchStoryboard.substring(0, launchStoryboard.lastIndexOf('.'));\n-    String contents =\n-        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n-            + \"<!DOCTYPE plist PUBLIC \\\"-//Apple//DTD PLIST 1.0//EN\\\" \"\n-            + \"\\\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\\">\\n\"\n-            + \"<plist version=\\\"1.0\\\">\\n\"\n-            + \"<dict>\\n\"\n-            + \"  <key>UILaunchStoryboardName</key>\\n\"\n-            + \"  <string>\"\n-            + launchStoryboardName\n-            + \"</string>\\n\"\n-            + \"</dict>\\n\"\n-            + \"</plist>\\n\";\n-\n+    NSDictionary result = new NSDictionary();\n+    result.put(\"UILaunchStoryboardName\", launchStoryboardName);\n+    String contents = result.toGnuStepASCIIPropertyList();\n     ruleContext.registerAction(\n         new FileWriteAction(\n             ruleContext.getActionOwner(), getLaunchStoryboardPlist(), contents, false));\n@@ -405,14 +395,14 @@ private NSDictionary automaticEntries() {\n     NSDictionary result = new NSDictionary();\n \n     if (uiDeviceFamily != null) {\n-      result.put(\"UIDeviceFamily\", NSObject.wrap(uiDeviceFamily.toArray()));\n+      result.put(\"UIDeviceFamily\", uiDeviceFamily.toArray());\n     }\n-    result.put(\"DTPlatformName\", NSObject.wrap(platform.getLowerCaseNameInPlist()));\n+    result.put(\"DTPlatformName\", platform.getLowerCaseNameInPlist());\n     result.put(\n         \"DTSDKName\",\n-        NSObject.wrap(platform.getLowerCaseNameInPlist() + appleConfiguration.getIosSdkVersion()));\n+        platform.getLowerCaseNameInPlist() + appleConfiguration.getIosSdkVersion());\n     result.put(\"CFBundleSupportedPlatforms\", new NSArray(NSObject.wrap(platform.getNameInPlist())));\n-    result.put(\"MinimumOSVersion\", NSObject.wrap(bundling.getMinimumOsVersion().toString()));\n+    result.put(\"MinimumOSVersion\", bundling.getMinimumOsVersion().toString());\n \n     return result;\n   }",
      "parent_sha": "830b21ba97b4fa816480ff6b48771430f8b828df"
    }
  },
  {
    "oid": "aff29b956c45ff121ae33097824a71bb0fd4d1be",
    "message": "\"Blaze\" -> \"Bazel\" in message visible on CLI\n\nExample message containing \"Blaze\" - should be \"Bazel\":\n\n    $ bazel run //...\n    ERROR: Blaze can only run a single target. Do not use wildcards that match more than one target.\n    INFO: Elapsed time: 0.092s\n\nCloses #3665.\n\nPiperOrigin-RevId: 179921748",
    "date": "2017-12-22T14:36:58Z",
    "url": "https://github.com/bazelbuild/bazel/commit/aff29b956c45ff121ae33097824a71bb0fd4d1be",
    "details": {
      "sha": "9a0fba3e6c4242710004536393deaf9b3fdfa93f",
      "filename": "src/main/java/com/google/devtools/build/lib/runtime/commands/RunCommand.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/aff29b956c45ff121ae33097824a71bb0fd4d1be/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2Fcommands%2FRunCommand.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/aff29b956c45ff121ae33097824a71bb0fd4d1be/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2Fcommands%2FRunCommand.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2Fcommands%2FRunCommand.java?ref=aff29b956c45ff121ae33097824a71bb0fd4d1be",
      "patch": "@@ -110,8 +110,10 @@ public static class RunOptions extends OptionsBase {\n   }\n \n   @VisibleForTesting\n-  public static final String SINGLE_TARGET_MESSAGE = \"Blaze can only run a single target. \"\n-      + \"Do not use wildcards that match more than one target\";\n+  public static final String SINGLE_TARGET_MESSAGE =\n+      \"Only a single target can be run. \"\n+          + \"Do not use wildcards that match more than one target\";\n+\n   @VisibleForTesting\n   public static final String NO_TARGET_MESSAGE = \"No targets found to run\";\n ",
      "parent_sha": "9fa5077112316b649d5fc3ed38d79c69bf68bfb5"
    }
  },
  {
    "oid": "986a4098ce312651ae65d098a7b68076969e911d",
    "message": "Simplify --incompatible_use_aapt2_by_default by making --android_aapt depend on it at analysis time.\n\nNow, the incompatible change flag is in effect for the parts of the Android rules which select the version based on the --android_aapt config value.\n\nIf the version is still `auto` after resolution of the --android_aapt flag and aapt_version attribute, default to aapt.\n\nhttps://github.com/bazelbuild/bazel/issues/6907\n\nRELNOTES: None.\nPiperOrigin-RevId: 254259050",
    "date": "2019-06-20T20:24:58Z",
    "url": "https://github.com/bazelbuild/bazel/commit/986a4098ce312651ae65d098a7b68076969e911d",
    "details": {
      "sha": "7ec6f47e1dadc496a257a911f2e9fadfe98adebf",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/android/AndroidConfiguration.java",
      "status": "modified",
      "additions": 20,
      "deletions": 18,
      "changes": 38,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/986a4098ce312651ae65d098a7b68076969e911d/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fandroid%2FAndroidConfiguration.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/986a4098ce312651ae65d098a7b68076969e911d/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fandroid%2FAndroidConfiguration.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fandroid%2FAndroidConfiguration.java?ref=986a4098ce312651ae65d098a7b68076969e911d",
      "patch": "@@ -259,14 +259,11 @@ public static AndroidAaptVersion chooseTargetAaptVersion(RuleContext ruleContext\n     }\n \n     /**\n-     * Select the aapt version for resource processing actions, based on the combination of\n-     * --android_aapt flag, aapt_version target attribute, and --incompatible_use_aapt2_by_default\n-     * flag.\n+     * Select the aapt version for resource processing actions.\n      *\n      * <p>Order of precedence:\n      * <li>1. --android_aapt flag\n      * <li>2. 'aapt_version' attribute on target\n-     * <li>3. --incompatible_use_aapt2_by_default flag\n      *\n      * @param dataContext the Android data context for detecting aapt2 and fetching Android configs\n      * @param errorConsumer the rule context for reporting errors during version selection\n@@ -286,27 +283,18 @@ public static AndroidAaptVersion chooseTargetAaptVersion(\n       AndroidAaptVersion flag = dataContext.getAndroidConfig().getAndroidAaptVersion();\n       AndroidAaptVersion attribute = AndroidAaptVersion.fromString(attributeString);\n \n-      AndroidAaptVersion version = flag == AndroidAaptVersion.AUTO ? attribute : flag;\n+      AndroidAaptVersion version = flag == AUTO ? attribute : flag;\n \n       if (version == AAPT2 && !hasAapt2) {\n         throw errorConsumer.throwWithRuleError(\n             \"aapt2 processing requested but not available on the android_sdk\");\n       }\n \n-      if (version != AndroidAaptVersion.AUTO) {\n-        return version;\n+      if (version == AUTO) {\n+        return AAPT;\n       }\n \n-      // At this point, the version is still auto. If the user passes\n-      // --incompatible_use_aapt2_by_default explicitly or implicitly via\n-      // --all_incompatible_changes, use aapt2 by default.\n-      //\n-      // We use the --incompatible_use_aapt2_by_default flag to signal a breaking change in Bazel.\n-      // This is required by the Bazel Incompatible Changes policy.\n-      //\n-      // TODO(jingwen): We can remove the incompatible change flag only when the depot migration is\n-      // complete and the default value of --android_aapt is switched from `auto` to `aapt2`.\n-      return dataContext.getAndroidConfig().incompatibleChangeUseAapt2ByDefault() ? AAPT2 : AAPT;\n+      return version;\n     }\n   }\n \n@@ -1127,7 +1115,6 @@ private AndroidConfiguration(Options options) throws InvalidConfigurationExcepti\n     this.useRexToCompressDexFiles = options.useRexToCompressDexFiles;\n     this.compressJavaResources = options.compressJavaResources;\n     this.exportsManifestDefault = options.exportsManifestDefault;\n-    this.androidAaptVersion = options.androidAaptVersion;\n     this.useAapt2ForRobolectric = options.useAapt2ForRobolectric;\n     this.throwOnResourceConflict = options.throwOnResourceConflict;\n     this.useParallelDex2Oat = options.useParallelDex2Oat;\n@@ -1151,6 +1138,21 @@ private AndroidConfiguration(Options options) throws InvalidConfigurationExcepti\n     this.alwaysFilterDuplicateClassesFromAndroidTest =\n         options.alwaysFilterDuplicateClassesFromAndroidTest;\n \n+    // Make the value of --android_aapt aapt2 if --incompatible_use_aapt2_by_default is enabled\n+    // and --android_aapt = AUTO\n+    //\n+    // We use the --incompatible_use_aapt2_by_default flag to signal a breaking change in Bazel.\n+    // This is required by the Bazel Incompatible Changes policy.\n+    //\n+    // TODO(jingwen): We can remove the incompatible change flag only when the depot migration is\n+    // complete and the default value of --android_aapt is switched from `auto` to `aapt2`.\n+    if (options.incompatibleUseAapt2ByDefault\n+        && options.androidAaptVersion == AndroidAaptVersion.AUTO) {\n+      this.androidAaptVersion = AndroidAaptVersion.AAPT2;\n+    } else {\n+      this.androidAaptVersion = options.androidAaptVersion;\n+    }\n+\n     if (incrementalDexingShardsAfterProguard < 0) {\n       throw new InvalidConfigurationException(\n           \"--experimental_incremental_dexing_after_proguard must be a positive number\");",
      "parent_sha": "d89a135e10ba22000ded0676b157090ce2d73e55"
    }
  },
  {
    "oid": "77ee239a9c231adc5b492a40444db50e29cd3d17",
    "message": "Fix some comments; it's --show_result, no trailing s.\n\n--\nMOS_MIGRATED_REVID=109395850",
    "date": "2015-12-04T21:06:25Z",
    "url": "https://github.com/bazelbuild/bazel/commit/77ee239a9c231adc5b492a40444db50e29cd3d17",
    "details": {
      "sha": "7422f526e6cb79b7ad5cea71fa3757db6204f7ac",
      "filename": "src/main/java/com/google/devtools/build/lib/buildtool/BuildResultPrinter.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/77ee239a9c231adc5b492a40444db50e29cd3d17/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbuildtool%2FBuildResultPrinter.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/77ee239a9c231adc5b492a40444db50e29cd3d17/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbuildtool%2FBuildResultPrinter.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbuildtool%2FBuildResultPrinter.java?ref=77ee239a9c231adc5b492a40444db50e29cd3d17",
      "patch": "@@ -39,7 +39,7 @@\n import java.util.Collection;\n \n /**\n- * Handles --show_results and --experimental_show_artifacts.\n+ * Handles --show_result and --experimental_show_artifacts.\n  */\n class BuildResultPrinter {\n   private final CommandEnvironment env;\n@@ -54,7 +54,7 @@ class BuildResultPrinter {\n    * Shows the result of the build. Information includes the list of up-to-date\n    * and failed targets and list of output artifacts for successful targets\n    *\n-   * <p>This corresponds to the --show_results flag.\n+   * <p>This corresponds to the --show_result flag.\n    */\n   public void showBuildResult(\n       BuildRequest request,",
      "parent_sha": "2633eafa646930fdc63e0dab54ef1a22222131cf"
    }
  },
  {
    "oid": "e74c1e91e68ce7c8eca6ab62100647d4b49f4597",
    "message": "Rename a param to better reflect its intent.\n\nRELNOTES: None\nPiperOrigin-RevId: 207550943",
    "date": "2018-08-06T15:46:06Z",
    "url": "https://github.com/bazelbuild/bazel/commit/e74c1e91e68ce7c8eca6ab62100647d4b49f4597",
    "details": {
      "sha": "f9585f34dfb0e59d7e98d0cf2a8d41fea1a097eb",
      "filename": "src/main/java/com/google/devtools/build/lib/actions/FilesetTraversalParamsFactory.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/e74c1e91e68ce7c8eca6ab62100647d4b49f4597/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Factions%2FFilesetTraversalParamsFactory.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/e74c1e91e68ce7c8eca6ab62100647d4b49f4597/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Factions%2FFilesetTraversalParamsFactory.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Factions%2FFilesetTraversalParamsFactory.java?ref=e74c1e91e68ce7c8eca6ab62100647d4b49f4597",
      "patch": "@@ -117,23 +117,23 @@ public static FilesetTraversalParams fileTraversal(Label ownerLabel, Artifact fi\n    *\n    * @param ownerLabel the rule that created this object\n    * @param nested the list of traversal params that were used for the nested (inner) Fileset\n-   * @param destDir path in the Fileset's output directory that will be the root of files coming\n+   * @param destPath path in the Fileset's output directory that will be the root of files coming\n    *     from the nested Fileset\n    * @param excludes optional; set of files directly below (not in a subdirectory of) the nested\n    *     Fileset that should be excluded from the outer Fileset\n    */\n   public static FilesetTraversalParams nestedTraversal(\n       Label ownerLabel,\n       ImmutableList<FilesetTraversalParams> nested,\n-      PathFragment destDir,\n+      PathFragment destPath,\n       @Nullable Set<String> excludes) {\n-    if (nested.size() == 1 && destDir.isEmpty() && (excludes == null || excludes.isEmpty())) {\n+    if (nested.size() == 1 && destPath.isEmpty() && (excludes == null || excludes.isEmpty())) {\n       // Wrapping the traversal here would not lead to a different result: the output location is\n       // the same and there are no additional excludes.\n       return Iterables.getOnlyElement(nested);\n     }\n     // When srcdir is another Fileset, then files must be null so strip_prefix must also be null.\n-    return NestedTraversalParams.getNestedTraversal(ownerLabel, nested, destDir, excludes);\n+    return NestedTraversalParams.getNestedTraversal(ownerLabel, nested, destPath, excludes);\n   }\n \n   private static ImmutableSortedSet<String> getOrderedExcludes(@Nullable Set<String> excludes) {\n@@ -230,9 +230,9 @@ public void fingerprint(Fingerprint fp) {\n     static NestedTraversalParams getNestedTraversal(\n         Label ownerLabel,\n         ImmutableList<FilesetTraversalParams> nested,\n-        PathFragment destDir,\n+        PathFragment destPath,\n         @Nullable Set<String> excludes) {\n-      return create(ownerLabel, destDir, getOrderedExcludes(excludes), nested);\n+      return create(ownerLabel, destPath, getOrderedExcludes(excludes), nested);\n     }\n \n     @AutoCodec.VisibleForSerialization",
      "parent_sha": "df0393cd2a78c357af339002b7c5fc135778cffe"
    }
  },
  {
    "oid": "be9ecf97375a93b28d192b904345884da4c864c0",
    "message": "Removing deprecated field total_input_file_count.\n\nSee API Revisions design doc: https://docs.google.com/document/d/12c3oAPgedckLpue2yj0xGgJTEOyUm4mXWWBJ157J-8I/edit#heading=h.llz6ymkp07b1\n\nThe BuildInfo is now sent via RequestMetadata.\n\nTESTED=we never used this field\nPiperOrigin-RevId: 169432884",
    "date": "2017-09-21T09:03:12Z",
    "url": "https://github.com/bazelbuild/bazel/commit/be9ecf97375a93b28d192b904345884da4c864c0",
    "details": {
      "sha": "6fcce64ad0645720ccddf1486a216acb6246b2ee",
      "filename": "src/main/java/com/google/devtools/build/lib/remote/RemoteSpawnRunner.java",
      "status": "modified",
      "additions": 7,
      "deletions": 14,
      "changes": 21,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/be9ecf97375a93b28d192b904345884da4c864c0/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fremote%2FRemoteSpawnRunner.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/be9ecf97375a93b28d192b904345884da4c864c0/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fremote%2FRemoteSpawnRunner.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fremote%2FRemoteSpawnRunner.java?ref=be9ecf97375a93b28d192b904345884da4c864c0",
      "patch": "@@ -173,7 +173,13 @@ public SpawnResult exec(Spawn spawn, SpawnExecutionPolicy policy)\n \n       final ActionResult result;\n       try {\n-        result = executeRemotely(action, inputMap.size(), acceptCachedResult);\n+        ExecuteRequest.Builder request =\n+            ExecuteRequest.newBuilder()\n+                .setInstanceName(options.remoteInstanceName)\n+                .setAction(action)\n+                .setSkipCacheLookup(!acceptCachedResult);\n+        ExecuteResponse reply = remoteExecutor.executeRemotely(request.build());\n+        result = reply.getResult();\n       } catch (IOException e) {\n         return execLocallyOrFail(spawn, policy, inputMap, actionKey, uploadLocalResults, e);\n       }\n@@ -202,19 +208,6 @@ private SpawnResult downloadRemoteResults(ActionResult result, FileOutErr outErr\n         .build();\n   }\n \n-  private ActionResult executeRemotely(Action action, int numInputFiles, boolean acceptCachedResult)\n-      throws IOException, InterruptedException {\n-    // TODO(olaola): set BuildInfo and input total bytes as well.\n-    ExecuteRequest.Builder request =\n-        ExecuteRequest.newBuilder()\n-            .setInstanceName(options.remoteInstanceName)\n-            .setAction(action)\n-            .setTotalInputFileCount(numInputFiles)\n-            .setSkipCacheLookup(!acceptCachedResult);\n-    ExecuteResponse reply = remoteExecutor.executeRemotely(request.build());\n-    return reply.getResult();\n-  }\n-\n   private SpawnResult execLocallyOrFail(\n       Spawn spawn,\n       SpawnExecutionPolicy policy,",
      "parent_sha": "bc66d0422c2a5a6066107fe7e8ed71e61bab5ce1"
    }
  },
  {
    "oid": "5194dfd8bafd27dfc2d86efba1265bf2b8b3fa78",
    "message": "Don't retain memory used by Artifact->owner Label multimap after it's been used at the start of execution.\n\nPiperOrigin-RevId: 206230049",
    "date": "2018-07-26T22:18:06Z",
    "url": "https://github.com/bazelbuild/bazel/commit/5194dfd8bafd27dfc2d86efba1265bf2b8b3fa78",
    "details": {
      "sha": "44a5fd7aabda49484058ee76a6ba922e690994bd",
      "filename": "src/main/java/com/google/devtools/build/lib/buildtool/ExecutionTool.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/5194dfd8bafd27dfc2d86efba1265bf2b8b3fa78/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbuildtool%2FExecutionTool.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/5194dfd8bafd27dfc2d86efba1265bf2b8b3fa78/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbuildtool%2FExecutionTool.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbuildtool%2FExecutionTool.java?ref=5194dfd8bafd27dfc2d86efba1265bf2b8b3fa78",
      "patch": "@@ -302,8 +302,6 @@ void executeBuild(\n     Set<AspectKey> builtAspects = new HashSet<>();\n     Collection<AspectValue> aspects = analysisResult.getAspects();\n \n-    SetMultimap<Artifact, Label> topLevelArtifactsToOwnerLabels =\n-        TopLevelArtifactHelper.makeTopLevelArtifactsToOwnerLabels(analysisResult, aspects);\n     if (request.isRunningInEmacs()) {\n       // The syntax of this message is tightly constrained by lisp/progmodes/compile.el in emacs\n       request\n@@ -313,12 +311,16 @@ void executeBuild(\n     }\n     boolean buildCompleted = false;\n     try {\n+      SetMultimap<Artifact, Label> topLevelArtifactsToOwnerLabels =\n+          TopLevelArtifactHelper.makeTopLevelArtifactsToOwnerLabels(analysisResult, aspects);\n       for (ActionContextProvider actionContextProvider : actionContextProviders) {\n         try (SilentCloseable c =\n             Profiler.instance().profile(actionContextProvider + \".executionPhaseStarting\")) {\n           actionContextProvider.executionPhaseStarting(actionGraph, topLevelArtifactsToOwnerLabels);\n         }\n       }\n+      // Don't retain memory.\n+      topLevelArtifactsToOwnerLabels = null;\n       executor.executionPhaseStarting();\n       skyframeExecutor.drainChangedFiles();\n ",
      "parent_sha": "1f3d3ea64e5982a86fffadc1d7131fee84f9cba9"
    }
  },
  {
    "oid": "a3381b6ac136a0cab3ba86020c739fe16b42cee9",
    "message": "Fix default for temporary directories to honor TMPDIR\n\n...and only use the hard-coded \"/tmp\" as default for the default.\nNote that is unchanged that blaze.rpcserver.tmpdir still overrides.\n\n--\nChange-Id: I2ad6b9904b7cde3917968090e85cf2d6c8ad88ab\nReviewed-on: https://bazel-review.googlesource.com/#/c/3962\nMOS_MIGRATED_REVID=127076270",
    "date": "2016-07-11T12:25:08Z",
    "url": "https://github.com/bazelbuild/bazel/commit/a3381b6ac136a0cab3ba86020c739fe16b42cee9",
    "details": {
      "sha": "8c5d3162109786a326281c776b759c42d3745b03",
      "filename": "src/main/java/com/google/devtools/build/lib/server/AfUnixServer.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/a3381b6ac136a0cab3ba86020c739fe16b42cee9/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fserver%2FAfUnixServer.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/a3381b6ac136a0cab3ba86020c739fe16b42cee9/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fserver%2FAfUnixServer.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fserver%2FAfUnixServer.java?ref=a3381b6ac136a0cab3ba86020c739fe16b42cee9",
      "patch": "@@ -329,7 +329,14 @@ private LocalServerSocket openServerSocket() throws IOException {\n     // (All this extra complexity is just used in tests... *sigh*).\n     if (socketFile.toString().length() >= 104) { // = UNIX_PATH_MAX\n       Path socketLink = socketFile;\n-      String tmpDir = System.getProperty(\"blaze.rpcserver.tmpdir\", \"/tmp\");\n+      String tmpDirDefault = System.getenv(\"TMPDIR\");\n+      if (tmpDirDefault == null\n+          || tmpDirDefault.length() > 104 - \"/blaze-4294967296/server.socket\".length()) {\n+        // Default for unset TMPDIR, or if TMPDIR is so that the resulting\n+        // path would be too long.\n+        tmpDirDefault = \"/tmp\";\n+      }\n+      String tmpDir = System.getProperty(\"blaze.rpcserver.tmpdir\", tmpDirDefault);\n       socketFile = createTempSocketDirectory(socketFile.getRelative(tmpDir)).\n           getRelative(\"server.socket\");\n       LOG.info(\"Using symlinked socket at \" + socketFile);",
      "parent_sha": "276a8cd19d4cde6245ed3323cee695e7834a0b9d"
    }
  },
  {
    "oid": "4409982d591a5018f77daa21e107b72aa3ef9202",
    "message": "remote: deprecated --remote_local_fallback_strategy\n\nThe flag is no-op because the flag --strategy can now accept a list of strategies, therefore a fallback specific for particular strategy is not possible. See https://github.com/bazelbuild/bazel/issues/7480 for details.\n\nRELNOTES: deprecated --remote_local_fallback_strategy. Use `--strategy=remote,local` instead. See https://github.com/bazelbuild/bazel/issues/7480.\n\nCloses #8307.\n\nPiperOrigin-RevId: 248804091",
    "date": "2019-05-17T23:04:00Z",
    "url": "https://github.com/bazelbuild/bazel/commit/4409982d591a5018f77daa21e107b72aa3ef9202",
    "details": {
      "sha": "f414bc3e47e966a18b2dbeca38a95e88e2a9ec3c",
      "filename": "src/main/java/com/google/devtools/build/lib/remote/options/RemoteOptions.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/4409982d591a5018f77daa21e107b72aa3ef9202/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fremote%2Foptions%2FRemoteOptions.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/4409982d591a5018f77daa21e107b72aa3ef9202/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fremote%2Foptions%2FRemoteOptions.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fremote%2Foptions%2FRemoteOptions.java?ref=4409982d591a5018f77daa21e107b72aa3ef9202",
      "patch": "@@ -96,12 +96,13 @@ public final class RemoteOptions extends OptionsBase {\n           \"Whether to fall back to standalone local execution strategy if remote execution fails.\")\n   public boolean remoteLocalFallback;\n \n+  @Deprecated\n   @Option(\n       name = \"remote_local_fallback_strategy\",\n       defaultValue = \"local\",\n       documentationCategory = OptionDocumentationCategory.REMOTE,\n       effectTags = {OptionEffectTag.UNKNOWN},\n-      help = \"The strategy to use when remote execution has to fallback to local execution.\")\n+      help = \"No-op, deprecated. See https://github.com/bazelbuild/bazel/issues/7480 for details.\")\n   public String remoteLocalFallbackStrategy;\n \n   @Option(",
      "parent_sha": "733979c303322ffc24b6927b534980b047c9261b"
    }
  },
  {
    "oid": "3f5ba8897fa27124ec6a11716d98c1d4e5571326",
    "message": "Don't use streams in PackageSpecification.containsPackage() as they create a\nlarge amount of garbage.\n\nRELNOTES: None.\nPiperOrigin-RevId: 240734633",
    "date": "2019-03-28T09:13:24Z",
    "url": "https://github.com/bazelbuild/bazel/commit/3f5ba8897fa27124ec6a11716d98c1d4e5571326",
    "details": {
      "sha": "c1035149538e53a55215f9d351f17c1da254e763",
      "filename": "src/main/java/com/google/devtools/build/lib/packages/PackageSpecification.java",
      "status": "modified",
      "additions": 12,
      "deletions": 4,
      "changes": 16,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/3f5ba8897fa27124ec6a11716d98c1d4e5571326/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fpackages%2FPackageSpecification.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/3f5ba8897fa27124ec6a11716d98c1d4e5571326/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fpackages%2FPackageSpecification.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fpackages%2FPackageSpecification.java?ref=3f5ba8897fa27124ec6a11716d98c1d4e5571326",
      "patch": "@@ -392,17 +392,25 @@ public static PackageGroupContents create(\n      * specifications match.\n      */\n     public boolean containsPackage(PackageIdentifier packageIdentifier) {\n+      // DO NOT use streams or iterators here as they create excessive garbage.\n+\n       // if some negative matches, returns false immediately.\n-      if (negativePackageSpecifications.stream()\n-          .anyMatch(p -> p.containsPackage(packageIdentifier))) {\n-        return false;\n+      for (int i = 0; i < negativePackageSpecifications.size(); i++) {\n+        if (negativePackageSpecifications.get(i).containsPackage(packageIdentifier)) {\n+          return false;\n+        }\n       }\n \n       if (singlePackages.containsKey(packageIdentifier)) {\n         return true;\n       }\n \n-      return allSpecifications.stream().anyMatch(p -> p.containsPackage(packageIdentifier));\n+      for (int i = 0; i < allSpecifications.size(); i++) {\n+        if (allSpecifications.get(i).containsPackage(packageIdentifier)) {\n+          return true;\n+        }\n+      }\n+      return false;\n     }\n \n     /**",
      "parent_sha": "e7c76a6e35308e8dace00cd25a16243cb2ae06de"
    }
  },
  {
    "oid": "b237344da8c2e47d55dadff6ada1b7600b1df4b1",
    "message": "remote: Chunker should open files lazily.\n\nThe Chunker should only open a file on the first call to next(). We\nnoticed that when remote executing with hundreds of actions in parallel\nbazel would sometimes run out of file descriptors. That's because on\ncreating a new Chunker object it would already open a file, eventhough\nthe first call to next would happen at a much later stage.\n\nPiperOrigin-RevId: 161923568",
    "date": "2017-07-14T08:53:05Z",
    "url": "https://github.com/bazelbuild/bazel/commit/b237344da8c2e47d55dadff6ada1b7600b1df4b1",
    "details": {
      "sha": "634425237652f51f535f588c786184e2c720238f",
      "filename": "src/main/java/com/google/devtools/build/lib/remote/Chunker.java",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/b237344da8c2e47d55dadff6ada1b7600b1df4b1/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fremote%2FChunker.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/b237344da8c2e47d55dadff6ada1b7600b1df4b1/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fremote%2FChunker.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fremote%2FChunker.java?ref=b237344da8c2e47d55dadff6ada1b7600b1df4b1",
      "patch": "@@ -105,6 +105,10 @@ public int hashCode() {\n   private long offset;\n   private byte[] chunkCache;\n \n+  // Set to true on the first call to next(). This is so that the Chunker can open its data source\n+  // lazily on the first call to next(), as opposed to opening it in the constructor.\n+  private boolean initialized;\n+\n   public Chunker(byte[] data) throws IOException {\n     this(data, getDefaultChunkSize());\n   }\n@@ -149,7 +153,6 @@ private Chunker(Supplier<InputStream> dataSupplier, Digest digest, int chunkSize\n     this.dataSupplier = checkNotNull(dataSupplier);\n     this.digest = checkNotNull(digest);\n     this.chunkSize = chunkSize;\n-    reset();\n   }\n \n   public Digest digest() {\n@@ -177,7 +180,7 @@ public void reset() throws IOException {\n    * Returns {@code true} if a subsequent call to {@link #next()} returns a {@link Chunk} object;\n    */\n   public boolean hasNext() {\n-    return data != null;\n+    return data != null || !initialized;\n   }\n \n   /**\n@@ -194,6 +197,11 @@ public Chunk next() throws IOException {\n       throw new NoSuchElementException();\n     }\n \n+    if (!initialized) {\n+      reset();\n+      initialized = true;\n+    }\n+\n     if (digest.getSizeBytes() == 0) {\n       data = null;\n       return EMPTY_CHUNK;",
      "parent_sha": "c1abc282a65535b9f91874e0b23d1adbbfad6c85"
    }
  },
  {
    "oid": "7e9dcfa501fb941cb9a0e42a41d954b3b34fa7a7",
    "message": "Fix comment in ExperimentalEventHandler\n\nThe \"is is line with\" should read \"is in line with\". While there,\nalso fix the formating of that comment.\n\nRELNOTES: None.\nPiperOrigin-RevId: 159683437",
    "date": "2017-06-22T09:47:04Z",
    "url": "https://github.com/bazelbuild/bazel/commit/7e9dcfa501fb941cb9a0e42a41d954b3b34fa7a7",
    "details": {
      "sha": "4c3ac451c3db2bb217610137fa10f42b7b8b1f91",
      "filename": "src/main/java/com/google/devtools/build/lib/runtime/ExperimentalEventHandler.java",
      "status": "modified",
      "additions": 13,
      "deletions": 9,
      "changes": 22,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/7e9dcfa501fb941cb9a0e42a41d954b3b34fa7a7/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2FExperimentalEventHandler.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/7e9dcfa501fb941cb9a0e42a41d954b3b34fa7a7/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2FExperimentalEventHandler.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2FExperimentalEventHandler.java?ref=7e9dcfa501fb941cb9a0e42a41d954b3b34fa7a7",
      "patch": "@@ -104,15 +104,19 @@ public class ExperimentalEventHandler implements EventHandler {\n    * values for the remaining relative capacity left at which we start taking given measure.\n    *\n    * <p>The degrading of progress updates to stay within output limit is done in the following\n-   * steps. - We limit progress updates to at most one per second; this is the granularity at which\n-   * times in he progress bar are shown. So the appearance won't look too bad. Hence we start that\n-   * measure realatively early. - We only show the short version of the progress bar, even if curses\n-   * are enabled. - We reduce the update frequency of the progress bar to at most one update per 5s.\n-   * This still looks as moving and is is line with escalation strategy that so far, every step\n-   * reduces output by about a factor of 5. - We start decreasing the update frequency to what we\n-   * would do, if curses were not allowed. Note that now the time between updates is at least a\n-   * fixed fraction of the time that passed so far; so the time between progress updates will\n-   * continue to increase.\n+   * steps.\n+   * <ul>\n+   *   <li>We limit progress updates to at most one per second; this is the granularity at which\n+   *       times in he progress bar are shown. So the appearance won't look too bad. Hence we start\n+   *       that measure relatively early.\n+   *   <li>We only show the short version of the progress bar, even if curses are enabled.\n+   *   <li>We reduce the update frequency of the progress bar to at most one update per 5s. This\n+   *       still looks moving and is in line with the escalation strategy that so far: every step\n+   *       reduces output by about a factor of 5.\n+   *   <li>We start decreasing the update frequency to what we would do, if curses were not allowed.\n+   *       Note that now the time between updates is at least a fixed fraction of the time that\n+   *       passed so far; so the time between progress updates will continue to increase.\n+   * </ul>\n    */\n   private static final double CAPACITY_INCREASE_UPDATE_DELAY = 0.7;\n ",
      "parent_sha": "f5aeed9649dec257ca9d8565262899e9f212b774"
    }
  },
  {
    "oid": "b7e3e4ff3703916296a14148fe26bd490e5f4865",
    "message": "Factor out `PathFragment.create(\"_repo_mapping\")` to a constant.\n\nNo need to create a new instance each time we call `Runfiles#getRunfilesInputs`.\n\nPiperOrigin-RevId: 671470371\nChange-Id: Ia168ab7a15e810f55381094db20301ac5373382a",
    "date": "2024-09-05T19:35:19Z",
    "url": "https://github.com/bazelbuild/bazel/commit/b7e3e4ff3703916296a14148fe26bd490e5f4865",
    "details": {
      "sha": "ea4f95d5490815372999250cf4e67ddfced2009d",
      "filename": "src/main/java/com/google/devtools/build/lib/analysis/Runfiles.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/b7e3e4ff3703916296a14148fe26bd490e5f4865/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2FRunfiles.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/b7e3e4ff3703916296a14148fe26bd490e5f4865/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2FRunfiles.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2FRunfiles.java?ref=b7e3e4ff3703916296a14148fe26bd490e5f4865",
      "patch": "@@ -94,6 +94,9 @@ public void fingerprint(Fingerprint fp) {\n   // It is important to declare this *after* the DUMMY_SYMLINK_EXPANDER to avoid NPEs\n   public static final Runfiles EMPTY = new Builder().build();\n \n+  private static final PathFragment REPO_MAPPING_PATH_FRAGMENT =\n+      PathFragment.create(\"_repo_mapping\");\n+\n   private static final CommandLineItem.ExceptionlessMapFn<SymlinkEntry> SYMLINK_ENTRY_MAP_FN =\n       (symlink, args) -> {\n         args.accept(symlink.getPathString());\n@@ -375,7 +378,7 @@ public Map<PathFragment, Artifact> getRunfilesInputs(\n     }\n     builder.add(getRootSymlinksAsMap(checker), checker);\n     if (repoMappingManifest != null) {\n-      checker.put(builder.manifest, PathFragment.create(\"_repo_mapping\"), repoMappingManifest);\n+      checker.put(builder.manifest, REPO_MAPPING_PATH_FRAGMENT, repoMappingManifest);\n     }\n     return builder.build();\n   }",
      "parent_sha": "c341c65a27f956f98faa9d6d13c5f50a5976f75c"
    }
  },
  {
    "oid": "49e1d82e40698c316d482eb87ee8339c835427a9",
    "message": "Change BuildOptions.DiffForReconstruction.toString() to use MoreObjects instead\nof a StringBuilder.\n\nPiperOrigin-RevId: 192681870",
    "date": "2018-04-12T22:35:05Z",
    "url": "https://github.com/bazelbuild/bazel/commit/49e1d82e40698c316d482eb87ee8339c835427a9",
    "details": {
      "sha": "5612359666c85f65fad409c80a553b7e2f9826be",
      "filename": "src/main/java/com/google/devtools/build/lib/analysis/config/BuildOptions.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/49e1d82e40698c316d482eb87ee8339c835427a9/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Fconfig%2FBuildOptions.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/49e1d82e40698c316d482eb87ee8339c835427a9/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Fconfig%2FBuildOptions.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Fconfig%2FBuildOptions.java?ref=49e1d82e40698c316d482eb87ee8339c835427a9",
      "patch": "@@ -15,6 +15,7 @@\n package com.google.devtools.build.lib.analysis.config;\n \n import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.ArrayListMultimap;\n import com.google.common.collect.ImmutableList;\n@@ -617,11 +618,10 @@ public boolean equals(Object o) {\n \n     @Override\n     public String toString() {\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(differingOptions).append(System.lineSeparator());\n-      sb.append(extraFirstFragmentClasses).append(System.lineSeparator());\n-      sb.append(extraSecondFragments);\n-      return sb.toString();\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"differingOptions\", differingOptions)\n+          .add(\"extraFirstFragmentClasses\", extraFirstFragmentClasses)\n+          .add(\"extraSecondFragments\", extraSecondFragments).toString();\n     }\n \n     @Override",
      "parent_sha": "398e6dab1092740e38a4ff8657a2f8dee9ee7c20"
    }
  },
  {
    "oid": "956a40ed1650e623f0c46f973c0f73822a177b9c",
    "message": "Slightly improve ArtifactSkyKey#toString.\n\nPiperOrigin-RevId: 230373763",
    "date": "2019-01-22T19:10:15Z",
    "url": "https://github.com/bazelbuild/bazel/commit/956a40ed1650e623f0c46f973c0f73822a177b9c",
    "details": {
      "sha": "ef66e8305a6a850432b519d58209746c14e1675a",
      "filename": "src/main/java/com/google/devtools/build/lib/actions/ArtifactSkyKey.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/956a40ed1650e623f0c46f973c0f73822a177b9c/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Factions%2FArtifactSkyKey.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/956a40ed1650e623f0c46f973c0f73822a177b9c/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Factions%2FArtifactSkyKey.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Factions%2FArtifactSkyKey.java?ref=956a40ed1650e623f0c46f973c0f73822a177b9c",
      "patch": "@@ -89,6 +89,6 @@ public Artifact getArtifact() {\n \n   @Override\n   public String toString() {\n-    return artifact.prettyPrint() + \" \" + artifact.getArtifactOwner();\n+    return \"ArtifactSkyKey:\" + artifact.prettyPrint() + \" \" + artifact.getArtifactOwner();\n   }\n }",
      "parent_sha": "3e6ac9274f604530419c3643d1a39800b05bc1c9"
    }
  },
  {
    "oid": "4627d6079f17d01a73830cda799a0bfe308a7e4e",
    "message": "Fix a couple of cquery/aquery latent bugs caused by delegation.\n\n* cquery / aquery stops rdep traversals by effectively comparing\nConfiguredTargetValues. When there are delegating nodes, they look like\nduplicates and cause traversals to stop prematurely. Now skips such\nnodes during rdeps traversal.\n\n* Implicit deps are stored in ConfiguredTargets using their actual\nconfigurations and not their \"graph\" configurations. Uses the\nConfiguredTargetKey of the actual ConfiguredTargetValue when checking these.\n\nPiperOrigin-RevId: 545455484\nChange-Id: I64cab9dd364d03f751634125751cbc3f2819004e",
    "date": "2023-07-04T15:36:56Z",
    "url": "https://github.com/bazelbuild/bazel/commit/4627d6079f17d01a73830cda799a0bfe308a7e4e",
    "details": {
      "sha": "df15e03e71aa55dcfe3a900d9a1ab2d00f3081aa",
      "filename": "src/main/java/com/google/devtools/build/lib/query2/PostAnalysisQueryEnvironment.java",
      "status": "modified",
      "additions": 84,
      "deletions": 3,
      "changes": 87,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/4627d6079f17d01a73830cda799a0bfe308a7e4e/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fquery2%2FPostAnalysisQueryEnvironment.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/4627d6079f17d01a73830cda799a0bfe308a7e4e/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fquery2%2FPostAnalysisQueryEnvironment.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fquery2%2FPostAnalysisQueryEnvironment.java?ref=4627d6079f17d01a73830cda799a0bfe308a7e4e",
      "patch": "@@ -13,8 +13,11 @@\n // limitations under the License.\n package com.google.devtools.build.lib.query2;\n \n+import static com.google.common.base.MoreObjects.toStringHelper;\n+\n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.ImmutableSortedSet;\n@@ -286,7 +289,9 @@ public Collection<T> getReverseDeps(Iterable<T> targets, QueryExpressionContext<\n       targetsByKey.put(getConfiguredTargetKey(target).toKey(), target);\n     }\n     Map<SkyKey, ImmutableList<ClassifiedDependency<T>>> reverseDepsByKey =\n-        targetifyValues(targetsByKey, graph.getReverseDeps(targetsByKey.keySet()));\n+        targetifyValues(\n+            targetsByKey,\n+            skipDelegatingAncestors(graph.getReverseDeps(targetsByKey.keySet())).asMap());\n     if (targetsByKey.size() != reverseDepsByKey.size()) {\n       Iterable<ConfiguredTargetKey> missingTargets =\n           Sets.difference(targetsByKey.keySet(), reverseDepsByKey.keySet()).stream()\n@@ -322,6 +327,74 @@ private Collection<T> filterReverseDeps(\n     return result;\n   }\n \n+  /**\n+   * Expands any delegating ancestors when computing reverse dependencies.\n+   *\n+   * <p>The {@link ConfiguredTargetKey} graph contains <i>delegation</i> entries where instead of\n+   * computing its own value, it delegates to a child with the same labels but a different\n+   * configuration. This causes problems in reverse dependency traversal because traversal stops at\n+   * duplicate values. The delegating parent has the same value as the delegate child.\n+   *\n+   * <p>This method replaces any delegating ancestor in the set of reverse dependencies with the\n+   * reverse dependencies of the ancestor.\n+   */\n+  private ImmutableListMultimap<SkyKey, SkyKey> skipDelegatingAncestors(\n+      Map<SkyKey, Iterable<SkyKey>> reverseDeps) throws InterruptedException {\n+    var result = ImmutableListMultimap.<SkyKey, SkyKey>builder();\n+    for (Map.Entry<SkyKey, Iterable<SkyKey>> entry : reverseDeps.entrySet()) {\n+      SkyKey child = entry.getKey();\n+      Iterable<SkyKey> rdeps = entry.getValue();\n+      Set<SkyKey> unwoundRdeps = unwindReverseDependencyDelegationLayersIfFound(child, rdeps);\n+      result.putAll(child, unwoundRdeps == null ? rdeps : unwoundRdeps);\n+    }\n+    return result.build();\n+  }\n+\n+  @Nullable\n+  private Set<SkyKey> unwindReverseDependencyDelegationLayersIfFound(\n+      SkyKey child, Iterable<SkyKey> rdeps) throws InterruptedException {\n+    // Most rdeps will not be delegating. Performs an optimistic pass that avoids copying.\n+    boolean foundDelegatingRdep = false;\n+    for (SkyKey rdep : rdeps) {\n+      if (!rdep.functionName().equals(SkyFunctions.CONFIGURED_TARGET)) {\n+        continue;\n+      }\n+      ConfiguredTargetKey actualParentKey = getConfiguredTargetKey(getValueFromKey(rdep));\n+      if (actualParentKey.equals(child)) {\n+        // The parent has the same value as the child because it is delegating.\n+        foundDelegatingRdep = true;\n+        break;\n+      }\n+    }\n+    if (!foundDelegatingRdep) {\n+      return null;\n+    }\n+    var logicalParents = new HashSet<SkyKey>();\n+    unwindReverseDependencyDelegationLayers(child, rdeps, logicalParents);\n+    return logicalParents;\n+  }\n+\n+  private void unwindReverseDependencyDelegationLayers(\n+      SkyKey child, Iterable<SkyKey> rdeps, Set<SkyKey> output) throws InterruptedException {\n+    // Checks the value of each rdep to see if it is delegating to `child`. If so, fetches its rdeps\n+    // and processes those, applying the same expansion as needed.\n+    for (SkyKey rdep : rdeps) {\n+      if (!rdep.functionName().equals(SkyFunctions.CONFIGURED_TARGET)) {\n+        output.add(rdep);\n+        continue;\n+      }\n+      ConfiguredTargetKey actualParentKey = getConfiguredTargetKey(getValueFromKey(rdep));\n+      if (!actualParentKey.equals(child)) {\n+        output.add(rdep);\n+        continue;\n+      }\n+      // Otherwise `rdep` is delegating to child and needs to be unwound.\n+      Iterable<SkyKey> rdepParents = graph.getReverseDeps(ImmutableList.of(rdep)).get(rdep);\n+      // Applies this recursively in case there are multiple layers of delegation.\n+      unwindReverseDependencyDelegationLayers(child, rdepParents, output);\n+    }\n+  }\n+\n   /**\n    * @param target source target\n    * @param deps next level of deps to filter\n@@ -416,7 +489,6 @@ private ImmutableList<ClassifiedDependency<T>> targetifyValues(\n         continue;\n       }\n       if (key.functionName().equals(SkyFunctions.CONFIGURED_TARGET)) {\n-        ConfiguredTargetKey ctkey = (ConfiguredTargetKey) key.argument();\n         T dependency = getValueFromKey(key);\n         Preconditions.checkState(\n             dependency != null,\n@@ -426,7 +498,8 @@ private ImmutableList<ClassifiedDependency<T>> targetifyValues(\n                 + \" configurability team.\",\n             key);\n \n-        boolean implicit = implicitDeps == null || implicitDeps.contains(ctkey);\n+        boolean implicit =\n+            implicitDeps == null || implicitDeps.contains(getConfiguredTargetKey(dependency));\n         values.add(new ClassifiedDependency<>(dependency, implicit));\n         knownCtDeps.add(key);\n       } else if (settings.contains(Setting.INCLUDE_ASPECTS)\n@@ -486,6 +559,14 @@ private ClassifiedDependency(T dependency, boolean implicit) {\n       this.implicit = implicit;\n       this.dependency = dependency;\n     }\n+\n+    @Override\n+    public String toString() {\n+      return toStringHelper(this)\n+          .add(\"implicit\", implicit)\n+          .add(\"dependency\", dependency)\n+          .toString();\n+    }\n   }\n \n   private static <T> ImmutableList<T> getDependencies(",
      "parent_sha": "79a77ee100ae9ee005bb86dd2527cfc75096069e"
    }
  },
  {
    "oid": "259c9e8014ad960985c0ed99db2a879cdd2ac301",
    "message": "Categorize proto options.\n\nRELNOTES: None\nPiperOrigin-RevId: 160695158",
    "date": "2017-07-03T07:06:52Z",
    "url": "https://github.com/bazelbuild/bazel/commit/259c9e8014ad960985c0ed99db2a879cdd2ac301",
    "details": {
      "sha": "887c9c23d3cf6cec83777986dbc1589f3c11ab01",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/proto/ProtoConfiguration.java",
      "status": "modified",
      "additions": 15,
      "deletions": 12,
      "changes": 27,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/259c9e8014ad960985c0ed99db2a879cdd2ac301/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fproto%2FProtoConfiguration.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/259c9e8014ad960985c0ed99db2a879cdd2ac301/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fproto%2FProtoConfiguration.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fproto%2FProtoConfiguration.java?ref=259c9e8014ad960985c0ed99db2a879cdd2ac301",
      "patch": "@@ -32,6 +32,7 @@\n import com.google.devtools.common.options.Option;\n import com.google.devtools.common.options.OptionDocumentationCategory;\n import com.google.devtools.common.options.proto.OptionFilters.OptionEffectTag;\n+import com.google.devtools.common.options.proto.OptionFilters.OptionMetadataTag;\n import java.util.List;\n \n /**\n@@ -57,7 +58,7 @@ public static class Options extends FragmentOptions {\n       defaultValue = \"\",\n       category = \"flags\",\n       documentationCategory = OptionDocumentationCategory.UNCATEGORIZED,\n-      effectTags = {OptionEffectTag.UNKNOWN},\n+      effectTags = {OptionEffectTag.AFFECTS_OUTPUTS},\n       help = \"Additional options to pass to the protobuf compiler.\"\n     )\n     public List<String> protocOpts;\n@@ -66,8 +67,9 @@ public static class Options extends FragmentOptions {\n       name = \"experimental_proto_extra_actions\",\n       defaultValue = \"false\",\n       category = \"experimental\",\n-      documentationCategory = OptionDocumentationCategory.UNCATEGORIZED,\n-      effectTags = {OptionEffectTag.UNKNOWN},\n+      documentationCategory = OptionDocumentationCategory.OUTPUT_SELECTION,\n+      effectTags = {OptionEffectTag.AFFECTS_OUTPUTS, OptionEffectTag.LOADING_AND_ANALYSIS},\n+      metadataTags = {OptionMetadataTag.EXPERIMENTAL},\n       help = \"Run extra actions for alternative Java api versions in a proto_library.\"\n     )\n     public boolean experimentalProtoExtraActions;\n@@ -78,7 +80,7 @@ public static class Options extends FragmentOptions {\n       category = \"flags\",\n       converter = BuildConfiguration.LabelConverter.class,\n       documentationCategory = OptionDocumentationCategory.UNCATEGORIZED,\n-      effectTags = {OptionEffectTag.UNKNOWN},\n+      effectTags = {OptionEffectTag.AFFECTS_OUTPUTS, OptionEffectTag.LOADING_AND_ANALYSIS},\n       help = \"The label of the proto-compiler.\"\n     )\n     public Label protoCompiler;\n@@ -89,7 +91,7 @@ public static class Options extends FragmentOptions {\n       category = \"flags\",\n       converter = BuildConfiguration.EmptyToNullLabelConverter.class,\n       documentationCategory = OptionDocumentationCategory.UNCATEGORIZED,\n-      effectTags = {OptionEffectTag.UNKNOWN},\n+      effectTags = {OptionEffectTag.AFFECTS_OUTPUTS, OptionEffectTag.LOADING_AND_ANALYSIS},\n       help = \"Label of proto_lang_toolchain() which describes how to compile JavaLite protos\"\n     )\n     public Label protoToolchainForJavaLite;\n@@ -100,7 +102,7 @@ public static class Options extends FragmentOptions {\n       category = \"flags\",\n       converter = BuildConfiguration.EmptyToNullLabelConverter.class,\n       documentationCategory = OptionDocumentationCategory.UNCATEGORIZED,\n-      effectTags = {OptionEffectTag.UNKNOWN},\n+      effectTags = {OptionEffectTag.AFFECTS_OUTPUTS, OptionEffectTag.LOADING_AND_ANALYSIS},\n       help = \"Label of proto_lang_toolchain() which describes how to compile Java protos\"\n     )\n     public Label protoToolchainForJava;\n@@ -111,7 +113,7 @@ public static class Options extends FragmentOptions {\n       category = \"flags\",\n       converter = BuildConfiguration.EmptyToNullLabelConverter.class,\n       documentationCategory = OptionDocumentationCategory.UNCATEGORIZED,\n-      effectTags = {OptionEffectTag.UNKNOWN},\n+      effectTags = {OptionEffectTag.AFFECTS_OUTPUTS, OptionEffectTag.LOADING_AND_ANALYSIS},\n       help = \"Label of proto_lang_toolchain() which describes how to compile C++ protos\"\n     )\n     public Label protoToolchainForCc;\n@@ -122,7 +124,8 @@ public static class Options extends FragmentOptions {\n       converter = BuildConfiguration.StrictDepsConverter.class,\n       category = \"semantics\",\n       documentationCategory = OptionDocumentationCategory.UNCATEGORIZED,\n-      effectTags = {OptionEffectTag.UNKNOWN},\n+      effectTags = {OptionEffectTag.LOADING_AND_ANALYSIS},\n+      metadataTags = {OptionMetadataTag.INCOMPATIBLE_CHANGE},\n       help =\n           \"If true, checks that a proto_library target explicitly declares all directly \"\n               + \"used targets as dependencies.\"\n@@ -133,8 +136,8 @@ public static class Options extends FragmentOptions {\n       name = \"cc_proto_library_header_suffixes\",\n       defaultValue = \".pb.h\",\n       category = \"semantics\",\n-      documentationCategory = OptionDocumentationCategory.UNCATEGORIZED,\n-      effectTags = {OptionEffectTag.UNKNOWN},\n+      documentationCategory = OptionDocumentationCategory.OUTPUT_SELECTION,\n+      effectTags = {OptionEffectTag.AFFECTS_OUTPUTS, OptionEffectTag.LOADING_AND_ANALYSIS},\n       help = \"Sets the prefixes of header files that a cc_proto_library creates.\",\n       converter = Converters.CommaSeparatedOptionListConverter.class\n     )\n@@ -144,8 +147,8 @@ public static class Options extends FragmentOptions {\n       name = \"cc_proto_library_source_suffixes\",\n       defaultValue = \".pb.cc\",\n       category = \"semantics\",\n-      documentationCategory = OptionDocumentationCategory.UNCATEGORIZED,\n-      effectTags = {OptionEffectTag.UNKNOWN},\n+      documentationCategory = OptionDocumentationCategory.OUTPUT_SELECTION,\n+      effectTags = {OptionEffectTag.AFFECTS_OUTPUTS, OptionEffectTag.LOADING_AND_ANALYSIS},\n       help = \"Sets the prefixes of source files that a cc_proto_library creates.\",\n       converter = Converters.CommaSeparatedOptionListConverter.class\n     )",
      "parent_sha": "6c12c279b795b3ef5e7eddc3beaac40e6274dd0b"
    }
  },
  {
    "oid": "e49b3bac82a2709d897520997135b816721e0ef8",
    "message": "Tweak the default Skyframe thread count during testing. Since test cases are typically small, the current default is too high.\n\n--\nMOS_MIGRATED_REVID=91225981",
    "date": "2015-04-16T18:35:50Z",
    "url": "https://github.com/bazelbuild/bazel/commit/e49b3bac82a2709d897520997135b816721e0ef8",
    "details": {
      "sha": "e3e954f434c41ef6a91a80bc0300c4069d4d4fe3",
      "filename": "src/main/java/com/google/devtools/build/lib/skyframe/SkyframeExecutor.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/e49b3bac82a2709d897520997135b816721e0ef8/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FSkyframeExecutor.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/e49b3bac82a2709d897520997135b816721e0ef8/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FSkyframeExecutor.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FSkyframeExecutor.java?ref=e49b3bac82a2709d897520997135b816721e0ef8",
      "patch": "@@ -151,7 +151,11 @@ public abstract class SkyframeExecutor implements WalkableGraphFactory {\n   // I just bumped this to 200 to get reasonable execution phase performance; that may cause\n   // significant overhead for CPU-bound processes (i.e. analysis). [skyframe-analysis]\n   @VisibleForTesting\n-  public static final int DEFAULT_THREAD_COUNT = 200;\n+  public static final int DEFAULT_THREAD_COUNT =\n+      // Reduce thread count while running tests of Bazel. Test cases are typically small, and large\n+      // thread pools vying for a relatively small number of CPU cores may induce non-optimal\n+      // performance.\n+      System.getenv(\"TEST_TMPDIR\") == null ? 200 : 5;\n \n   // Stores Packages between reruns of the PackageFunction (because of missing dependencies,\n   // within the same evaluate() run) to avoid loading the same package twice (first time loading",
      "parent_sha": "9d8e8ac27e3011f1ec7ac177028698aa2b8d4501"
    }
  },
  {
    "oid": "19dc0539657b9af8c0347a811df629be1e13064c",
    "message": "Automated rollback of commit 3fc3ddbc0d2a51853c0966bfd41834765ea619a5.\n\n*** Reason for rollback ***\n\nThis CL likely triggers a severe caching bug causing b/115864356. Rolling back to obtain a patch release of Blaze as an alternative to rolling back the Blaze release.\n\n*** Original change description ***\n\nSkip __init__.py in __pycache__ dir.\n\nRELNOTES: None.\nPiperOrigin-RevId: 213884642",
    "date": "2018-09-20T21:38:18Z",
    "url": "https://github.com/bazelbuild/bazel/commit/19dc0539657b9af8c0347a811df629be1e13064c",
    "details": {
      "sha": "c524a3034c8f9b71391c4606540732b024958f1f",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/python/PythonUtils.java",
      "status": "modified",
      "additions": 5,
      "deletions": 9,
      "changes": 14,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/19dc0539657b9af8c0347a811df629be1e13064c/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fpython%2FPythonUtils.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/19dc0539657b9af8c0347a811df629be1e13064c/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fpython%2FPythonUtils.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fpython%2FPythonUtils.java?ref=19dc0539657b9af8c0347a811df629be1e13064c",
      "patch": "@@ -36,7 +36,6 @@\n public final class PythonUtils {\n   public static final PathFragment INIT_PY = PathFragment.create(\"__init__.py\");\n   public static final PathFragment INIT_PYC = PathFragment.create(\"__init__.pyc\");\n-  public static final PathFragment PYCACHE = PathFragment.create(\"__pycache__\");\n \n   private static final FileType REQUIRES_INIT_PY = FileType.of(\".py\", \".so\", \".pyc\");\n \n@@ -65,17 +64,14 @@ public static Set<PathFragment> getInitPyFiles(Set<PathFragment> manifestFiles)\n     for (PathFragment source : manifestFiles) {\n       // If we have a python or .so file at this level...\n       if (REQUIRES_INIT_PY.matches(source)) {\n-        // ...then record that we need an __init__.py in this and all parents directories...\n+        // ...then record that we need an __init__.py in this directory...\n         while (source.segmentCount() > 1) {\n           source = source.getParentDirectory();\n-          // ...unless it's a Python .pyc cache or we already have __init__ there.\n-          if (!source.endsWith(PYCACHE)) {\n-            PathFragment initpy = source.getRelative(INIT_PY);\n-            PathFragment initpyc = source.getRelative(INIT_PYC);\n+          PathFragment initpy = source.getRelative(INIT_PY);\n+          PathFragment initpyc = source.getRelative(INIT_PYC);\n \n-            if (!manifestFiles.contains(initpy) && !manifestFiles.contains(initpyc)) {\n-              result.add(initpy);\n-            }\n+          if (!manifestFiles.contains(initpy) && !manifestFiles.contains(initpyc)) {\n+            result.add(initpy);\n           }\n         }\n       }",
      "parent_sha": "261a1134c458e3304fcc4b2dfeef032e8000fea3"
    }
  },
  {
    "oid": "5afbe2397476e3f4c4d2adfda6809a316a8de7c2",
    "message": "In `PersistentStringIndexer`, use an `AtomicReferenceArray<String>` instead of a `ConcurrentHashMap<Integer, String>`.\n\nKeys are monotonically increasing non-negative integers and writes are already synchronized, so there's no need for `ConcurrentHashMap`. Switch to an array to save memory.\n\nPiperOrigin-RevId: 631279197\nChange-Id: Id06d7cee289f3ee8615d561beacf5084e2ecb065",
    "date": "2024-05-07T04:06:01Z",
    "url": "https://github.com/bazelbuild/bazel/commit/5afbe2397476e3f4c4d2adfda6809a316a8de7c2",
    "details": {
      "sha": "daa2496677404aa7130ddc586c445b7621d50dc4",
      "filename": "src/main/java/com/google/devtools/build/lib/actions/cache/PersistentStringIndexer.java",
      "status": "modified",
      "additions": 40,
      "deletions": 19,
      "changes": 59,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/5afbe2397476e3f4c4d2adfda6809a316a8de7c2/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Factions%2Fcache%2FPersistentStringIndexer.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/5afbe2397476e3f4c4d2adfda6809a316a8de7c2/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Factions%2Fcache%2FPersistentStringIndexer.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Factions%2Fcache%2FPersistentStringIndexer.java?ref=5afbe2397476e3f4c4d2adfda6809a316a8de7c2",
      "patch": "@@ -13,6 +13,7 @@\n // limitations under the License.\n package com.google.devtools.build.lib.actions.cache;\n \n+import static java.lang.Math.max;\n import static java.nio.charset.StandardCharsets.UTF_8;\n \n import com.google.devtools.build.lib.clock.Clock;\n@@ -26,6 +27,7 @@\n import java.io.IOException;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReferenceArray;\n import javax.annotation.Nullable;\n \n /**\n@@ -35,50 +37,52 @@\n  * canonicalization mapping. The other direction is handled purely in memory and reconstituted at\n  * load-time.\n  *\n- * <p>Thread-safety is ensured by locking on all mutating operations from the superclass. Read-only\n- * operations are not locked, but rather backed by ConcurrentMaps.\n+ * <p>Thread-safety is ensured by locking on all mutating operations. Read-only operations are not\n+ * locked.\n  */\n @ConditionallyThreadSafe // Each instance must be instantiated with a different dataPath.\n final class PersistentStringIndexer implements StringIndexer {\n \n-  private static final int INITIAL_ENTRIES = 10000;\n+  private static final int INITIAL_CAPACITY = 8192;\n \n   /** Instantiates and loads instance of the persistent string indexer. */\n   static PersistentStringIndexer create(Path dataPath, Clock clock) throws IOException {\n-    PersistentIndexMap persistentIndexMap =\n+    PersistentIndexMap stringToInt =\n         new PersistentIndexMap(\n             dataPath, FileSystemUtils.replaceExtension(dataPath, \".journal\"), clock);\n-    Map<Integer, String> reverseMapping = new ConcurrentHashMap<>(INITIAL_ENTRIES);\n-    for (Map.Entry<String, Integer> entry : persistentIndexMap.entrySet()) {\n-      if (reverseMapping.put(entry.getValue(), entry.getKey()) != null) {\n+\n+    // INITIAL_CAPACITY or the next power of two greater than the size.\n+    int capacity = max(INITIAL_CAPACITY, Integer.highestOneBit(stringToInt.size()) << 1);\n+\n+    var intToString = new AtomicReferenceArray<String>(capacity);\n+    for (Map.Entry<String, Integer> entry : stringToInt.entrySet()) {\n+      if (intToString.getAndSet(entry.getValue(), entry.getKey()) != null) {\n         throw new IOException(\"Corrupted filename index has duplicate entry: \" + entry.getKey());\n       }\n     }\n-    return new PersistentStringIndexer(persistentIndexMap, reverseMapping);\n+    return new PersistentStringIndexer(stringToInt, intToString);\n   }\n \n-  // This is similar to (Synchronized) BiMap.\n-  // These maps *must* be weakly threadsafe to ensure thread safety for string indexer as a whole.\n-  // Specifically, mutating operations are serialized, but read-only operations may be executed\n-  // concurrently with mutators.\n+  // These two fields act similarly to a (synchronized) BiMap. Mutating operations are performed in\n+  // synchronized blocks. Reads are done lock-free.\n   private final PersistentIndexMap stringToInt;\n-  private final Map<Integer, String> intToString;\n+  private volatile AtomicReferenceArray<String> intToString;\n \n   private PersistentStringIndexer(\n-      PersistentIndexMap stringToInt, Map<Integer, String> intToString) {\n+      PersistentIndexMap stringToInt, AtomicReferenceArray<String> intToString) {\n     this.stringToInt = stringToInt;\n     this.intToString = intToString;\n   }\n \n   @Override\n   public synchronized void clear() {\n     stringToInt.clear();\n-    intToString.clear();\n+    intToString = new AtomicReferenceArray<>(INITIAL_CAPACITY);\n   }\n \n   @Override\n   public int size() {\n-    return intToString.size();\n+    return stringToInt.size();\n   }\n \n   @Override\n@@ -94,11 +98,24 @@ public Integer getOrCreateIndex(String s) {\n       if (existing != null) {\n         return existing; // Another thread won the race.\n       }\n-      intToString.put(i, s);\n+      int capacity = intToString.length();\n+      if (i == capacity) {\n+        intToString = copyOf(intToString, capacity * 2);\n+      }\n+      intToString.set(i, s);\n       return i;\n     }\n   }\n \n+  private static AtomicReferenceArray<String> copyOf(\n+      AtomicReferenceArray<String> oldArray, int newCapacity) {\n+    var newArray = new AtomicReferenceArray<String>(newCapacity);\n+    for (int j = 0; j < oldArray.length(); j++) {\n+      newArray.setPlain(j, oldArray.getPlain(j));\n+    }\n+    return newArray;\n+  }\n+\n   @Override\n   @Nullable\n   public Integer getIndex(String s) {\n@@ -108,7 +125,11 @@ public Integer getIndex(String s) {\n   @Override\n   @Nullable\n   public String getStringForIndex(Integer i) {\n-    return intToString.get(i);\n+    if (i < 0) {\n+      return null;\n+    }\n+    var snapshot = intToString;\n+    return i < snapshot.length() ? snapshot.get(i) : null;\n   }\n \n   /** Saves index data to the file. */\n@@ -143,7 +164,7 @@ private static final class PersistentIndexMap extends PersistentMap<String, Inte\n     private long nextUpdate;\n \n     PersistentIndexMap(Path mapFile, Path journalFile, Clock clock) throws IOException {\n-      super(VERSION, new ConcurrentHashMap<>(INITIAL_ENTRIES), mapFile, journalFile);\n+      super(VERSION, new ConcurrentHashMap<>(INITIAL_CAPACITY), mapFile, journalFile);\n       this.clock = clock;\n       nextUpdate = clock.nanoTime();\n       load(/* failFast= */ true);",
      "parent_sha": "e152961762a2cf1bd495df08efe48e88de6cb645"
    }
  },
  {
    "oid": "66fc20af7340020e0164c1bf8700f4dc3b43000c",
    "message": "Add .hh as accepted objc_library header extension\n\nCloses #9367.\n\nPiperOrigin-RevId: 272401356",
    "date": "2019-10-02T10:12:30Z",
    "url": "https://github.com/bazelbuild/bazel/commit/66fc20af7340020e0164c1bf8700f4dc3b43000c",
    "details": {
      "sha": "4c55dc0c7910461bf06c49cc7e4dfee5db9f595b",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/objc/ObjcRuleClasses.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/66fc20af7340020e0164c1bf8700f4dc3b43000c/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fobjc%2FObjcRuleClasses.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/66fc20af7340020e0164c1bf8700f4dc3b43000c/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fobjc%2FObjcRuleClasses.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fobjc%2FObjcRuleClasses.java?ref=66fc20af7340020e0164c1bf8700f4dc3b43000c",
      "patch": "@@ -303,7 +303,7 @@ public Metadata getMetadata() {\n   /**\n    * Header files, which are not compiled directly, but may be included/imported from source files.\n    */\n-  static final FileType HEADERS = FileType.of(\".h\", \".inc\", \".hpp\");\n+  static final FileType HEADERS = FileType.of(\".h\", \".inc\", \".hpp\", \".hh\");\n \n   /**\n    * Files allowed in the srcs attribute. This includes private headers.",
      "parent_sha": "3c7bd95ab11c295c1168f9c5a81be33f50def44e"
    }
  },
  {
    "oid": "1855afff766afa37edf5727671fbaa23c62d87ec",
    "message": "Fix spelling error in javadoc.\n\nRELNOTES: None\nPiperOrigin-RevId: 196232710",
    "date": "2018-05-11T09:22:41Z",
    "url": "https://github.com/bazelbuild/bazel/commit/1855afff766afa37edf5727671fbaa23c62d87ec",
    "details": {
      "sha": "efe086b581d4755897784f088ac3a5ed9fd5c272",
      "filename": "src/main/java/com/google/devtools/build/lib/analysis/ConfiguredRuleClassProvider.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/1855afff766afa37edf5727671fbaa23c62d87ec/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2FConfiguredRuleClassProvider.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/1855afff766afa37edf5727671fbaa23c62d87ec/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2FConfiguredRuleClassProvider.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2FConfiguredRuleClassProvider.java?ref=1855afff766afa37edf5727671fbaa23c62d87ec",
      "patch": "@@ -82,7 +82,7 @@\n  * Knows about every rule Blaze supports and the associated configuration options.\n  *\n  * <p>This class is initialized on server startup and the set of rules, build info factories\n- * and configuration options is guarantees not to change over the life time of the Blaze server.\n+ * and configuration options is guaranteed not to change over the life time of the Blaze server.\n  */\n public class ConfiguredRuleClassProvider implements RuleClassProvider {\n ",
      "parent_sha": "1461c20d31393c6e9abc4097ff8fc57d16228c71"
    }
  },
  {
    "oid": "3c1c0c09e68420c813d6258b90ff96641dbd1151",
    "message": "Add suggestions to invalid tag class errors\n\nCloses #17888.\n\nPiperOrigin-RevId: 519729739\nChange-Id: I0ae8b18acd1a88de4da40b6883cf24c5ce6586bb",
    "date": "2023-03-27T15:31:41Z",
    "url": "https://github.com/bazelbuild/bazel/commit/3c1c0c09e68420c813d6258b90ff96641dbd1151",
    "details": {
      "sha": "3f28dbe288bc343fb4823bfc9ec11bac7c8c9ed5",
      "filename": "src/main/java/com/google/devtools/build/lib/bazel/bzlmod/StarlarkBazelModule.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/3c1c0c09e68420c813d6258b90ff96641dbd1151/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbazel%2Fbzlmod%2FStarlarkBazelModule.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/3c1c0c09e68420c813d6258b90ff96641dbd1151/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbazel%2Fbzlmod%2FStarlarkBazelModule.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbazel%2Fbzlmod%2FStarlarkBazelModule.java?ref=3c1c0c09e68420c813d6258b90ff96641dbd1151",
      "patch": "@@ -34,6 +34,7 @@\n import net.starlark.java.eval.StarlarkList;\n import net.starlark.java.eval.StarlarkValue;\n import net.starlark.java.eval.Structure;\n+import net.starlark.java.spelling.SpellChecker;\n \n /** A Starlark object representing a Bazel module in the external dependency graph. */\n @StarlarkBuiltin(\n@@ -118,10 +119,11 @@ public static StarlarkBazelModule create(\n         throw ExternalDepsException.withMessage(\n             Code.BAD_MODULE,\n             \"The module extension defined at %s does not have a tag class named %s, but its use is\"\n-                + \" attempted at %s\",\n+                + \" attempted at %s%s\",\n             extension.getLocation(),\n             tag.getTagName(),\n-            tag.getLocation());\n+            tag.getLocation(),\n+            SpellChecker.didYouMean(tag.getTagName(), extension.getTagClasses().keySet()));\n       }\n \n       // Now we need to type-check the attribute values and convert them into \"build language types\"",
      "parent_sha": "81f312102ff25b89e3afadf05620785ace319ae0"
    }
  },
  {
    "oid": "86a440637f4ddd6d16194c907dee49f05b78f7af",
    "message": "Fix an incompatibility with the latest version of Java\n\nPiperOrigin-RevId: 495921042\nChange-Id: I95c7a4cbba640c6c2afb35151314d4dd246d576f",
    "date": "2022-12-16T19:27:46Z",
    "url": "https://github.com/bazelbuild/bazel/commit/86a440637f4ddd6d16194c907dee49f05b78f7af",
    "details": {
      "sha": "933a8767b5b7ef7eefbe8cf5fe50f8c6043fde5b",
      "filename": "src/tools/android/java/com/google/devtools/build/android/ExecutorServiceCloser.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/86a440637f4ddd6d16194c907dee49f05b78f7af/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2FExecutorServiceCloser.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/86a440637f4ddd6d16194c907dee49f05b78f7af/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2FExecutorServiceCloser.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2FExecutorServiceCloser.java?ref=86a440637f4ddd6d16194c907dee49f05b78f7af",
      "patch": "@@ -18,6 +18,7 @@\n import com.google.common.util.concurrent.MoreExecutors;\n import java.io.Closeable;\n import java.io.IOException;\n+import java.io.UncheckedIOException;\n import java.util.Collection;\n import java.util.List;\n import java.util.concurrent.Callable;\n@@ -36,11 +37,12 @@ private ExecutorServiceCloser(ListeningExecutorService executorService) {\n   }\n \n   @Override\n-  public void close() throws IOException {\n+  public void close() {\n     List<Runnable> unfinishedTasks = executorService.shutdownNow();\n     if (!unfinishedTasks.isEmpty()) {\n-      throw new IOException(\n-          \"Shutting down the executor with unfinished tasks:\" + unfinishedTasks.size());\n+      throw new UncheckedIOException(\n+          new IOException(\n+              \"Shutting down the executor with unfinished tasks:\" + unfinishedTasks.size()));\n     }\n   }\n ",
      "parent_sha": "d027d485c97ed15e3e8852b0701337c0b9d1a8dc"
    }
  },
  {
    "oid": "6ecc93bbfa9eada3b993c13b8faa3ab5a962de0c",
    "message": "PiperOrigin-RevId: 179941785",
    "date": "2017-12-22T18:50:19Z",
    "url": "https://github.com/bazelbuild/bazel/commit/6ecc93bbfa9eada3b993c13b8faa3ab5a962de0c",
    "details": {
      "sha": "ce75d07d5c57b59d105bff43c42a2d4cf39297a5",
      "filename": "src/main/java/com/google/devtools/build/lib/runtime/BlazeServerStartupOptions.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/6ecc93bbfa9eada3b993c13b8faa3ab5a962de0c/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2FBlazeServerStartupOptions.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/6ecc93bbfa9eada3b993c13b8faa3ab5a962de0c/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2FBlazeServerStartupOptions.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fruntime%2FBlazeServerStartupOptions.java?ref=6ecc93bbfa9eada3b993c13b8faa3ab5a962de0c",
      "patch": "@@ -375,7 +375,7 @@ public String getTypeDescription() {\n     category = \"server startup\",\n     documentationCategory = OptionDocumentationCategory.BAZEL_CLIENT_OPTIONS,\n     effectTags = {OptionEffectTag.LOSES_INCREMENTAL_STATE},\n-    help = \"If true, use the Exoblaze rule sets. If false, use the Blaze rule sets.\"\n+    help = \"If true, Blaze runs as Exoblaze\"\n   )\n   public boolean exoblaze;\n ",
      "parent_sha": "b6b2eaae47ef925aba062f5db4fe69c19705e5ae"
    }
  },
  {
    "oid": "a5af3734f1c8416aeac6c8debaddc17bf54f0c43",
    "message": "Increase visibility of lost output testing utility.\n\nPiperOrigin-RevId: 729187715\nChange-Id: I0ab6578db13c9272ee0abd6f54e5458c0836400c",
    "date": "2025-02-20T19:31:52Z",
    "url": "https://github.com/bazelbuild/bazel/commit/a5af3734f1c8416aeac6c8debaddc17bf54f0c43",
    "details": {
      "sha": "e204a039d9e6da64b476621de15809c62c893449",
      "filename": "src/test/java/com/google/devtools/build/lib/skyframe/rewinding/LostImportantOutputHandlerModule.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/a5af3734f1c8416aeac6c8debaddc17bf54f0c43/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2Frewinding%2FLostImportantOutputHandlerModule.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/a5af3734f1c8416aeac6c8debaddc17bf54f0c43/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2Frewinding%2FLostImportantOutputHandlerModule.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2Frewinding%2FLostImportantOutputHandlerModule.java?ref=a5af3734f1c8416aeac6c8debaddc17bf54f0c43",
      "patch": "@@ -65,11 +65,11 @@ public final void setOutputHandlerEnabled(boolean enabled) {\n     outputHandlerEnabled = enabled;\n   }\n \n-  final void addLostOutput(String execPath) {\n+  public final void addLostOutput(String execPath) {\n     pathsToConsiderLost.add(execPath);\n   }\n \n-  final void verifyAllLostOutputsConsumed() {\n+  public final void verifyAllLostOutputsConsumed() {\n     assertThat(pathsToConsiderLost).isEmpty();\n   }\n ",
      "parent_sha": "6d64e2e87e1c2bb069d6f622b0a2b51033252ef5"
    }
  },
  {
    "oid": "f0ed5ca13d7c1c011588e8ae4f744c8f04b61257",
    "message": "Prefer immutable type as return type.\n\nPiperOrigin-RevId: 501491397\nChange-Id: Ia638878cb78db7b82aaa800ca82bbafeec0f4218",
    "date": "2023-01-12T09:03:54Z",
    "url": "https://github.com/bazelbuild/bazel/commit/f0ed5ca13d7c1c011588e8ae4f744c8f04b61257",
    "details": {
      "sha": "e4e339203f73e584b57c434fb92cdd47cc0053c2",
      "filename": "src/main/java/com/google/devtools/build/lib/profiler/Profiler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/f0ed5ca13d7c1c011588e8ae4f744c8f04b61257/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fprofiler%2FProfiler.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/f0ed5ca13d7c1c011588e8ae4f744c8f04b61257/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fprofiler%2FProfiler.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fprofiler%2FProfiler.java?ref=f0ed5ca13d7c1c011588e8ae4f744c8f04b61257",
      "patch": "@@ -279,7 +279,7 @@ void clear() {\n     }\n \n     // @ThreadSafe\n-    Iterable<SlowTask> getSlowestTasks() {\n+    ImmutableList<SlowTask> getSlowestTasks() {\n       // This is slow, but since it only happens during the end of the invocation, it's OK.\n       Extrema<SlowTask> mergedExtrema = Extrema.max(SIZE);\n       for (int i = 0; i < SHARDS; i++) {",
      "parent_sha": "57c5ee3e0cf3de8959f6e5e5a67becf718b980a7"
    }
  },
  {
    "oid": "b36dbd59e1f2f4136d5b44f59000f225b64f1202",
    "message": "Use CustomCommandLine directly instead of via SpawnAction.Builder.\n\nThis change forces use of CustomCommandLine.Builder, which has a richer interface for constructing memory-efficient command lines. It will also permit surveying the code base for inefficient patterns using an IDE.\n\nThis change was done by hand and split using Rosie to assist with rollbacks in case of bugs. Reviewers, please pay particular attention to:\n\n* Each all to addInputArgument/addOutputArgument should come with a corresponding matching pair to SpawnAction.Builder#addInput and CustomCommandLine.Builder#addExecPath (eg.).\n* The commandLine must be set on the SpawnAction using SpawnAction.Builder#setCommandLine.\n\nNote that most calls to addPrefixed(\"arg=\", val) should be more idiomatically expressed as add(\"arg\", val), but this involves changing tests and making sure that the command line tools can accept the format.\n\nPiperOrigin-RevId: 166168847",
    "date": "2017-08-23T11:31:49Z",
    "url": "https://github.com/bazelbuild/bazel/commit/b36dbd59e1f2f4136d5b44f59000f225b64f1202",
    "details": {
      "sha": "b4cbd42fe3755547df24be85ac40e70a6aabdbec",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/java/ProguardLibrary.java",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/b36dbd59e1f2f4136d5b44f59000f225b64f1202/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fjava%2FProguardLibrary.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/b36dbd59e1f2f4136d5b44f59000f225b64f1202/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fjava%2FProguardLibrary.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fjava%2FProguardLibrary.java?ref=b36dbd59e1f2f4136d5b44f59000f225b64f1202",
      "patch": "@@ -21,12 +21,12 @@\n import com.google.devtools.build.lib.analysis.FilesToRunProvider;\n import com.google.devtools.build.lib.analysis.RuleConfiguredTarget.Mode;\n import com.google.devtools.build.lib.analysis.RuleContext;\n+import com.google.devtools.build.lib.analysis.actions.CustomCommandLine;\n import com.google.devtools.build.lib.analysis.actions.SpawnAction;\n import com.google.devtools.build.lib.collect.nestedset.NestedSet;\n import com.google.devtools.build.lib.collect.nestedset.NestedSetBuilder;\n import com.google.devtools.build.lib.collect.nestedset.Order;\n import com.google.devtools.build.lib.packages.BuildType;\n-\n import java.util.Collection;\n import java.util.Map.Entry;\n \n@@ -130,14 +130,15 @@ private Artifact validateProguardSpec(\n     ruleContext.registerAction(\n         new SpawnAction.Builder()\n             .addInput(specToValidate)\n+            .addOutput(output)\n             .setExecutable(proguardWhitelister)\n             .setProgressMessage(\"Validating proguard configuration\")\n             .setMnemonic(\"ValidateProguard\")\n-            .addArgument(\"--path\")\n-            .addArgument(specToValidate.getExecPathString())\n-            .addArgument(\"--output\")\n-            .addArgument(output.getExecPathString())\n-            .addOutput(output)\n+            .setCommandLine(\n+                CustomCommandLine.builder()\n+                    .addExecPath(\"--path\", specToValidate)\n+                    .addExecPath(\"--output\", output)\n+                    .build())\n             .build(ruleContext));\n     return output;\n   }",
      "parent_sha": "369d1a633e6ef60b673e8403917e8eef6ab5ec5a"
    }
  },
  {
    "oid": "69ab1a91ef0d6f5424ce01eaf8acc15fa429f4bb",
    "message": "When the apple crosstool transition is being used (set with --apple_crosstool_transition), the APPLE_CROSSTOOL distinguisher does not modify output directory.\n\n--\nPiperOrigin-RevId: 145999133\nMOS_MIGRATED_REVID=145999133",
    "date": "2017-01-30T17:37:05Z",
    "url": "https://github.com/bazelbuild/bazel/commit/69ab1a91ef0d6f5424ce01eaf8acc15fa429f4bb",
    "details": {
      "sha": "432c405741b1ca25159057b75acc3eaa9e50a11d",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/apple/AppleConfiguration.java",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/69ab1a91ef0d6f5424ce01eaf8acc15fa429f4bb/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fapple%2FAppleConfiguration.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/69ab1a91ef0d6f5424ce01eaf8acc15fa429f4bb/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fapple%2FAppleConfiguration.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fapple%2FAppleConfiguration.java?ref=69ab1a91ef0d6f5424ce01eaf8acc15fa429f4bb",
      "patch": "@@ -531,6 +531,16 @@ public ConfigurationDistinguisher getConfigurationDistinguisher() {\n     return configurationDistinguisher;\n   }\n \n+  private boolean shouldDistinguishOutputDirectory() {\n+    if (configurationDistinguisher == ConfigurationDistinguisher.UNKNOWN) {\n+      return false;\n+    } else if (configurationDistinguisher == ConfigurationDistinguisher.APPLE_CROSSTOOL\n+        && isAppleCrosstoolEnabled()) {\n+      return false;\n+    } else {\n+      return true;\n+    }\n+  }\n \n   @Nullable\n   @Override\n@@ -540,7 +550,7 @@ public String getOutputDirectoryName() {\n       components.add(applePlatformType.toString().toLowerCase());\n       components.add(appleSplitCpu);\n     }\n-    if (configurationDistinguisher != ConfigurationDistinguisher.UNKNOWN) {\n+    if (shouldDistinguishOutputDirectory()) {\n       components.add(configurationDistinguisher.getFileSystemName());\n     }\n ",
      "parent_sha": "ba4f0bbddec90d3645a51c0dbd3657db01b23dba"
    }
  },
  {
    "oid": "a0b9153eb28780e03e5a69a0484c88101890fe61",
    "message": "Deflake OutputArtifactConflictTest#testConflictErrorAndUnfinishedAspectAnalysis_mergedAnalysisExecution.\n\nPiperOrigin-RevId: 563738587\nChange-Id: I83013a7dd5872d10022ae9385dcb168cfbf8a76b",
    "date": "2023-09-08T13:48:18Z",
    "url": "https://github.com/bazelbuild/bazel/commit/a0b9153eb28780e03e5a69a0484c88101890fe61",
    "details": {
      "sha": "71ba213b5af13803bd8b3fc5c3a6d2d287135941",
      "filename": "src/test/java/com/google/devtools/build/lib/buildtool/OutputArtifactConflictTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/a0b9153eb28780e03e5a69a0484c88101890fe61/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbuildtool%2FOutputArtifactConflictTest.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/a0b9153eb28780e03e5a69a0484c88101890fe61/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbuildtool%2FOutputArtifactConflictTest.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbuildtool%2FOutputArtifactConflictTest.java?ref=a0b9153eb28780e03e5a69a0484c88101890fe61",
      "patch": "@@ -42,7 +42,6 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.regex.Pattern;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n@@ -422,7 +421,6 @@ public void testConflictErrorAndAnalysisError(@TestParameter boolean mergedAnaly\n \n   // Verify that an aspect whose analysis is unfinished doesn't fail the conflict reporting process.\n   @Test\n-  @Ignore(\"b/216490090 - flaky\")\n   public void testConflictErrorAndUnfinishedAspectAnalysis_mergedAnalysisExecution(\n       @TestParameter boolean keepGoing) throws Exception {\n     addOptions(\"--experimental_merged_skyframe_analysis_execution\");\n@@ -472,10 +470,7 @@ public void testConflictErrorAndUnfinishedAspectAnalysis_mergedAnalysisExecution\n     } else {\n       assertThat(errorCode)\n           .isAnyOf(Code.ARTIFACT_PREFIX_CONFLICT, Code.CONFIGURED_VALUE_CREATION_FAILED);\n-      assertThat(\n-              eventListener.failedTargetNames.contains(\"//x:y\")\n-                  ^ eventListener.failedTargetNames.contains(\"//x:fail_analysis\"))\n-          .isTrue();\n+      assertThat(eventListener.failedTargetNames).containsAnyOf(\"//x:y\", \"//x:fail_analysis\");\n     }\n   }\n ",
      "parent_sha": "58dce60019f9e7640272dbd248e8a92c1b2359dc"
    }
  },
  {
    "oid": "4e3a64df1b7f923c61f443098d3f06e4be993a4f",
    "message": "Fix a @GuardedBy error\n\nPiperOrigin-RevId: 208009857",
    "date": "2018-08-09T08:18:57Z",
    "url": "https://github.com/bazelbuild/bazel/commit/4e3a64df1b7f923c61f443098d3f06e4be993a4f",
    "details": {
      "sha": "ca9a8ebff470124c22880fb699f670183e37477a",
      "filename": "src/main/java/com/google/devtools/build/lib/remote/blobstore/http/HttpBlobStore.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/4e3a64df1b7f923c61f443098d3f06e4be993a4f/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fremote%2Fblobstore%2Fhttp%2FHttpBlobStore.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/4e3a64df1b7f923c61f443098d3f06e4be993a4f/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fremote%2Fblobstore%2Fhttp%2FHttpBlobStore.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fremote%2Fblobstore%2Fhttp%2FHttpBlobStore.java?ref=4e3a64df1b7f923c61f443098d3f06e4be993a4f",
      "patch": "@@ -243,7 +243,9 @@ private Channel acquireUploadChannel() throws InterruptedException {\n                 p.addLast(new HttpObjectAggregator(10 * 1024));\n                 p.addLast(new HttpRequestEncoder());\n                 p.addLast(new ChunkedWriteHandler());\n-                p.addLast(new HttpUploadHandler(creds));\n+                synchronized (credentialsLock) {\n+                  p.addLast(new HttpUploadHandler(creds));\n+                }\n \n                 channelReady.setSuccess(ch);\n               } catch (Throwable t) {\n@@ -289,7 +291,9 @@ private Future<Channel> acquireDownloadChannel() {\n                 ch.pipeline()\n                     .addFirst(\"read-timeout-handler\", new ReadTimeoutHandler(timeoutMillis));\n                 p.addLast(new HttpClientCodec());\n-                p.addLast(new HttpDownloadHandler(creds));\n+                synchronized (credentialsLock) {\n+                  p.addLast(new HttpDownloadHandler(creds));\n+                }\n \n                 channelReady.setSuccess(ch);\n               } catch (Throwable t) {",
      "parent_sha": "4ca9a22c29e95c93055e449f48db30f0f945ece9"
    }
  },
  {
    "oid": "464f118b5cb653230b9b768f533a77cc1aff2fb9",
    "message": "Short-circuit deleted package retrieval if list is empty.\n\n--\nMOS_MIGRATED_REVID=139127910",
    "date": "2016-11-15T15:59:12Z",
    "url": "https://github.com/bazelbuild/bazel/commit/464f118b5cb653230b9b768f533a77cc1aff2fb9",
    "details": {
      "sha": "8237e8408f4e0056aed35f97a727059c5f854b10",
      "filename": "src/main/java/com/google/devtools/build/lib/pkgcache/PackageCacheOptions.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/464f118b5cb653230b9b768f533a77cc1aff2fb9/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fpkgcache%2FPackageCacheOptions.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/464f118b5cb653230b9b768f533a77cc1aff2fb9/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fpkgcache%2FPackageCacheOptions.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fpkgcache%2FPackageCacheOptions.java?ref=464f118b5cb653230b9b768f533a77cc1aff2fb9",
      "patch": "@@ -166,7 +166,7 @@ public String getTypeDescription() {\n   }\n \n   public ImmutableSet<PackageIdentifier> getDeletedPackages() {\n-    if (deletedPackages == null) {\n+    if (deletedPackages == null || deletedPackages.isEmpty()) {\n       return ImmutableSet.of();\n     }\n     ImmutableSet.Builder<PackageIdentifier> newDeletedPackages = ImmutableSet.builder();",
      "parent_sha": "a0f3de38d17d5f06d7a1f33dd87be8fce5a56364"
    }
  },
  {
    "oid": "3e5c59f0fc01e66a4fa1c2babdfca66f0b1a2513",
    "message": "Remove comment about legacy package loading.\n\nRELNOTES: None\nPiperOrigin-RevId: 197504627",
    "date": "2018-05-22T03:22:24Z",
    "url": "https://github.com/bazelbuild/bazel/commit/3e5c59f0fc01e66a4fa1c2babdfca66f0b1a2513",
    "details": {
      "sha": "d1de91b1c99b05a4b787f3a28f8c20a866b5bc47",
      "filename": "src/main/java/com/google/devtools/build/lib/skyframe/PackageFunction.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/3e5c59f0fc01e66a4fa1c2babdfca66f0b1a2513/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FPackageFunction.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/3e5c59f0fc01e66a4fa1c2babdfca66f0b1a2513/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FPackageFunction.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fskyframe%2FPackageFunction.java?ref=3e5c59f0fc01e66a4fa1c2babdfca66f0b1a2513",
      "patch": "@@ -1138,8 +1138,8 @@ private GlobberWithSkyframeGlobDeps makeGlobber(\n   }\n \n   /**\n-   * Constructs a {@link Package} object for the given package using legacy package loading. Note\n-   * that the returned package may be in error.\n+   * Constructs a {@link Package} object for the given package. Note that the returned package\n+   * may be in error.\n    *\n    * <p>May return null if the computation has to be restarted.\n    *",
      "parent_sha": "e33708407e79b3e2c2b8bdab757d701b8318fea8"
    }
  },
  {
    "oid": "ff83807a8e792c5d8608464d6a17127562165680",
    "message": "[Skymeld] Fix the flaky `testTwoConflictingTargets_keepGoing_behaviorDifferences`\n\nConsider 2 targets `//foo` and `//foo/bar` which generates 2 artifacts `foo` and\n`foo/bar`.\n\nIn skymeld and `-k` mode, it's possible that either 1 of the 2 artifacts are\nbuilt or none at all. The last case can happen when the\n`ArtifactPrefixConflictException` are thrown for both the evaluation of\n`BuildDriverKey(//foo)` and `BuildDriverKey(//foo/bar)`, which is possible given\nthat the `IncrementalArtfiactConflictFinder` can be accessed from multiple\nthreads.\n\nThis CL updates the test to reflect that.\n\nPiperOrigin-RevId: 552476900\nChange-Id: Ifc67a9f1c09ab1887656ea491a6f2247484163e2",
    "date": "2023-07-31T14:40:01Z",
    "url": "https://github.com/bazelbuild/bazel/commit/ff83807a8e792c5d8608464d6a17127562165680",
    "details": {
      "sha": "00abaf8a379d969101b7736ed55b67850ba79a25",
      "filename": "src/test/java/com/google/devtools/build/lib/buildtool/OutputArtifactConflictTest.java",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/ff83807a8e792c5d8608464d6a17127562165680/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbuildtool%2FOutputArtifactConflictTest.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/ff83807a8e792c5d8608464d6a17127562165680/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbuildtool%2FOutputArtifactConflictTest.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fbuildtool%2FOutputArtifactConflictTest.java?ref=ff83807a8e792c5d8608464d6a17127562165680",
      "patch": "@@ -661,10 +661,11 @@ public void testConflictAfterNullBuild(\n     assertThat(eventListener.eventIds.get(0).getAspect()).isEqualTo(\"//x:aspect.bzl%my_aspect\");\n   }\n \n-  // There exists a discrepancy between --experimental_merged_skyframe_analysis_execution and\n-  // otherwise in case of --keep_going. The version with merged phases would still build one of the\n-  // 2 conflicting targets, while the one without would stop at the end of the analysis phase and\n-  // build nothing. The overall build would still fail.\n+  // There exists a discrepancy between skymeld and noskymeld modes in case of --keep_going.\n+  // noskymeld: bazel would stop at the end of the analysis phase and build nothing.\n+  // skymeld: we either finish building one of the 2 conflicting artifacts, or none at all.\n+  //\n+  // The overall build would still fail in both cases.\n   @Test\n   public void testTwoConflictingTargets_keepGoing_behaviorDifferences(\n       @TestParameter boolean mergedAnalysisExecution) throws Exception {\n@@ -679,8 +680,8 @@ public void testTwoConflictingTargets_keepGoing_behaviorDifferences(\n     Path outputXYY = Iterables.getOnlyElement(getArtifacts(\"//x/y:y\")).getPath();\n \n     if (mergedAnalysisExecution) {\n-      // Verify that one and only one of the output artifacts from these 2 targets were built.\n-      assertThat((outputXY.isDirectory() && outputXYY.isFile()) ^ outputXY.isFile()).isTrue();\n+      // Verify that these 2 conflicting artifacts can't both exist.\n+      assertThat(outputXYY.isFile() && outputXY.isFile()).isFalse();\n     } else {\n       // Verify that none of the output artifacts were built.\n       assertThat(outputXY.exists()).isFalse();",
      "parent_sha": "4441cef42eb332dd20c891ee856b7c807d3864be"
    }
  },
  {
    "oid": "1c9f1dd19ccd26998cd0a8b000e3c6cd1f1066bb",
    "message": "Use new `String#indexOf` overload for Starlark's `stringFind`\n\nSince Java 21, the internal `indexOf` method on String that accepts start and end position is available as public API.\n\nCloses #24333.\n\nPiperOrigin-RevId: 697001722\nChange-Id: I274b2ffd7a6d925531e1261f04bec5942d70fdf2",
    "date": "2024-11-15T22:29:24Z",
    "url": "https://github.com/bazelbuild/bazel/commit/1c9f1dd19ccd26998cd0a8b000e3c6cd1f1066bb",
    "details": {
      "sha": "3d481e50158ac14f20b74d3f4330ac5040b2fa96",
      "filename": "src/main/java/net/starlark/java/eval/StringModule.java",
      "status": "modified",
      "additions": 5,
      "deletions": 8,
      "changes": 13,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/1c9f1dd19ccd26998cd0a8b000e3c6cd1f1066bb/src%2Fmain%2Fjava%2Fnet%2Fstarlark%2Fjava%2Feval%2FStringModule.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/1c9f1dd19ccd26998cd0a8b000e3c6cd1f1066bb/src%2Fmain%2Fjava%2Fnet%2Fstarlark%2Fjava%2Feval%2FStringModule.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fnet%2Fstarlark%2Fjava%2Feval%2FStringModule.java?ref=1c9f1dd19ccd26998cd0a8b000e3c6cd1f1066bb",
      "patch": "@@ -532,15 +532,12 @@ private static int stringFind(boolean forward, String self, String sub, Object s\n     long indices = substringIndices(self, start, end);\n     int startpos = lo(indices);\n     int endpos = hi(indices);\n-    // Unfortunately Java forces us to allocate here in the general case, even\n-    // though String has a private indexOf method that accepts indices.\n-    // The common cases of a search of the full string or a forward search with\n-    // a custom start position do not require allocations.\n-    if (forward && endpos == self.length()) {\n-      return self.indexOf(sub, startpos);\n+    if (forward) {\n+      return self.indexOf(sub, startpos, endpos);\n     }\n-    String substr = self.substring(startpos, endpos);\n-    int subpos = forward ? substr.indexOf(sub) : substr.lastIndexOf(sub);\n+    // String#lastIndexOf can't be used to implement rfind() because it only\n+    // confines the start position of the substring, not the entire substring.\n+    int subpos = self.substring(startpos, endpos).lastIndexOf(sub);\n     return subpos < 0\n         ? subpos //\n         : subpos + startpos;",
      "parent_sha": "b406bdcbe95dd23ca623f807d5113f18b724611a"
    }
  },
  {
    "oid": "24c2ad12b914a084e27ec1b9ea5f67e4c8e0e452",
    "message": "Add missing trailing </pre> for Label documentation. Fixes broken formatting seen here:\nhttps://docs.bazel.build/versions/master/skylark/lib/Label.html\n\nRELNOTES: None\nPiperOrigin-RevId: 232654474",
    "date": "2019-02-06T12:55:07Z",
    "url": "https://github.com/bazelbuild/bazel/commit/24c2ad12b914a084e27ec1b9ea5f67e4c8e0e452",
    "details": {
      "sha": "3d109d29cc0727fc30256a6be3c7e77375dbdc86",
      "filename": "src/main/java/com/google/devtools/build/lib/cmdline/Label.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/24c2ad12b914a084e27ec1b9ea5f67e4c8e0e452/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fcmdline%2FLabel.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/24c2ad12b914a084e27ec1b9ea5f67e4c8e0e452/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fcmdline%2FLabel.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fcmdline%2FLabel.java?ref=24c2ad12b914a084e27ec1b9ea5f67e4c8e0e452",
      "patch": "@@ -531,7 +531,8 @@ public Label getLocalTargetLabel(String targetName) throws LabelSyntaxException\n               + \"then the following remapping will take place:<br>\"\n               + \"<pre class=language-python>\\n\"\n               + \"Label(\\\"@repo//foo/bar:baz\\\").relative(\\\"@other//wiz:quux\\\") == \"\n-              + \"Label(\\\"@remapped//wiz:quux\\\")\",\n+              + \"Label(\\\"@remapped//wiz:quux\\\")\\n\"\n+              + \"</pre>\",\n       parameters = {\n         @Param(\n             name = \"relName\",",
      "parent_sha": "3d4cd2584021dde9d4ecaa985c26751455eabf0e"
    }
  },
  {
    "oid": "c903cf9a51187e4432b257bb00f24890644e6e4f",
    "message": "Prepare D8 dexing tests for Java 11\n\nTest was compiling `.class` files separately without any classes on classpath. As there where classes in nests that failed when compiled with Java 11.\n\nFixed by passing all input as classpath.\n\nRELNOTES: None\nPiperOrigin-RevId: 359464672",
    "date": "2021-02-25T08:50:57Z",
    "url": "https://github.com/bazelbuild/bazel/commit/c903cf9a51187e4432b257bb00f24890644e6e4f",
    "details": {
      "sha": "dfa08a802d511b06a560f3f65ce0ff2718ccef36",
      "filename": "src/tools/android/java/com/google/devtools/build/android/r8/CompatDexBuilder.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/c903cf9a51187e4432b257bb00f24890644e6e4f/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2Fr8%2FCompatDexBuilder.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/c903cf9a51187e4432b257bb00f24890644e6e4f/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2Fr8%2FCompatDexBuilder.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2Fr8%2FCompatDexBuilder.java?ref=c903cf9a51187e4432b257bb00f24890644e6e4f",
      "patch": "@@ -163,7 +163,7 @@ private void run(String[] args) throws IOException, InterruptedException, Execut\n \n         List<Future<DexConsumer>> futures = new ArrayList<>(toDex.size());\n         for (ZipEntry classEntry : toDex) {\n-          futures.add(executor.submit(() -> dexEntry(zipFile, classEntry, executor)));\n+          futures.add(executor.submit(() -> dexEntry(input, zipFile, classEntry, executor)));\n         }\n         for (int i = 0; i < futures.size(); i++) {\n           ZipEntry entry = toDex.get(i);\n@@ -176,11 +176,13 @@ private void run(String[] args) throws IOException, InterruptedException, Execut\n     }\n   }\n \n-  private DexConsumer dexEntry(ZipFile zipFile, ZipEntry classEntry, ExecutorService executor)\n+  private DexConsumer dexEntry(\n+      String classpath, ZipFile zipFile, ZipEntry classEntry, ExecutorService executor)\n       throws IOException, CompilationFailedException {\n     DexConsumer consumer = new DexConsumer();\n     D8Command.Builder builder = D8Command.builder();\n     builder\n+        .addClasspathFiles(Paths.get(classpath))\n         .setProgramConsumer(consumer)\n         .setMode(noLocals ? CompilationMode.RELEASE : CompilationMode.DEBUG)\n         .setMinApiLevel(13) // H_MR2.",
      "parent_sha": "a3c52a78eab4a51f8b4294e834bfa4fe4bda91f9"
    }
  },
  {
    "oid": "2adf0033bb4e71171e96f95bbd54ab783c6bb6d1",
    "message": "exec transition should not reset any TestConfiguration.TestOptions options\n\nPiperOrigin-RevId: 459365627\nChange-Id: I5b0906154b2efc708be70b3658f50459165a1ee7",
    "date": "2022-07-06T22:59:24Z",
    "url": "https://github.com/bazelbuild/bazel/commit/2adf0033bb4e71171e96f95bbd54ab783c6bb6d1",
    "details": {
      "sha": "7ff420cd9001d8473f6eb368c3ad67d9a4461888",
      "filename": "src/main/java/com/google/devtools/build/lib/analysis/test/TestConfiguration.java",
      "status": "modified",
      "additions": 8,
      "deletions": 10,
      "changes": 18,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/2adf0033bb4e71171e96f95bbd54ab783c6bb6d1/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Ftest%2FTestConfiguration.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/2adf0033bb4e71171e96f95bbd54ab783c6bb6d1/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Ftest%2FTestConfiguration.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Ftest%2FTestConfiguration.java?ref=2adf0033bb4e71171e96f95bbd54ab783c6bb6d1",
      "patch": "@@ -296,16 +296,14 @@ public static class TestOptions extends FragmentOptions {\n \n     @Override\n     public FragmentOptions getHost() {\n-      TestOptions hostOptions = (TestOptions) getDefault();\n-      // These fields are used in late-bound attributes, which must not be null in the host\n-      // configuration.\n-      hostOptions.coverageSupport = this.coverageSupport;\n-      hostOptions.coverageReportGenerator = this.coverageReportGenerator;\n-      // trimTestConfiguration is a global analysis option and should be platform-agnostic\n-      hostOptions.trimTestConfiguration = this.trimTestConfiguration;\n-      hostOptions.experimentalRetainTestConfigurationAcrossTestonly =\n-          this.experimentalRetainTestConfigurationAcrossTestonly;\n-      return hostOptions;\n+      // Options here are either:\n+      // 1. Applicable only for the test actions, which are relevant only for the top-level targets\n+      //    before host or exec transitions can apply.\n+      // 2. Supposed to be build-universal and thus non-transitionable anyways\n+      //    (e.g. trim_test_configuration)\n+      // And thus the options should just be copied and not reset by the exec transition (as\n+      // resetting them has incremental performance drawbacks when these options change).\n+      return clone();\n     }\n   }\n ",
      "parent_sha": "2b44482eb7645f738fddf48622ccc1cf05a179d7"
    }
  },
  {
    "oid": "13455e8b5613c76711e9597ecd722fa23a0f774f",
    "message": "Line break after . rather than before\n\n--\nMOS_MIGRATED_REVID=89392921",
    "date": "2015-03-24T16:42:21Z",
    "url": "https://github.com/bazelbuild/bazel/commit/13455e8b5613c76711e9597ecd722fa23a0f774f",
    "details": {
      "sha": "9122a0aea982fd3afe9cd684882e689643aeac1b",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/objc/IosDeviceRule.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/13455e8b5613c76711e9597ecd722fa23a0f774f/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fobjc%2FIosDeviceRule.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/13455e8b5613c76711e9597ecd722fa23a0f774f/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fobjc%2FIosDeviceRule.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fobjc%2FIosDeviceRule.java?ref=13455e8b5613c76711e9597ecd722fa23a0f774f",
      "patch": "@@ -65,7 +65,7 @@ public Metadata getMetadata() {\n ${ATTRIBUTE_SIGNATURE}\n \n <p>This rule defines an iOS device profile that defines a simulator against\n-which to run tests</p>.\n+which to run tests.</p>\n \n ${ATTRIBUTE_DEFINITION}\n ",
      "parent_sha": "4df86e4498a9c6d2d0edc047d9228338ba0811f1"
    }
  },
  {
    "oid": "df6a3081cea419c2e974b5f955c43f1d14e6283d",
    "message": "Fix Jack's proguard specs.\n\nJack dexing currently only includes proguard specs from the binary itself,\nnot from any dependencies. There's no reason for this, just an accidental\ninconsistency in the original implementation.\n\n--\nMOS_MIGRATED_REVID=101776897",
    "date": "2015-08-31T19:09:16Z",
    "url": "https://github.com/bazelbuild/bazel/commit/df6a3081cea419c2e974b5f955c43f1d14e6283d",
    "details": {
      "sha": "79260c980fe8b2bea041a940e9b7e1a5cc2210bf",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/android/AndroidBinary.java",
      "status": "modified",
      "additions": 43,
      "deletions": 21,
      "changes": 64,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/df6a3081cea419c2e974b5f955c43f1d14e6283d/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fandroid%2FAndroidBinary.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/df6a3081cea419c2e974b5f955c43f1d14e6283d/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fandroid%2FAndroidBinary.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fandroid%2FAndroidBinary.java?ref=df6a3081cea419c2e974b5f955c43f1d14e6283d",
      "patch": "@@ -281,7 +281,8 @@ private static RuleConfiguredTargetBuilder init(\n   }\n \n \n-  public static RuleConfiguredTargetBuilder createAndroidBinary(RuleContext ruleContext,\n+  public static RuleConfiguredTargetBuilder createAndroidBinary(\n+      RuleContext ruleContext,\n       NestedSetBuilder<Artifact> filesBuilder,\n       Artifact deployJar,\n       JavaCommon javaCommon,\n@@ -297,17 +298,24 @@ public static RuleConfiguredTargetBuilder createAndroidBinary(RuleContext ruleCo\n       ImmutableList<Artifact> apksUnderTest,\n       Artifact proguardMapping) {\n \n-    ProguardOutput proguardOutput = applyProguard(ruleContext,\n-        androidCommon,\n-        deployJar,\n-        filesBuilder,\n-        resourceApk,\n-        ruleContext.getPrerequisiteArtifacts(PROGUARD_SPECS, Mode.TARGET).list(),\n-        proguardMapping);\n+    ImmutableList<Artifact> proguardSpecs =\n+        getTransitiveProguardSpecs(\n+            ruleContext,\n+            resourceApk,\n+            ruleContext.getPrerequisiteArtifacts(PROGUARD_SPECS, Mode.TARGET).list());\n+\n+    ProguardOutput proguardOutput =\n+        applyProguard(\n+            ruleContext,\n+            androidCommon,\n+            deployJar,\n+            filesBuilder,\n+            proguardSpecs,\n+            proguardMapping);\n     Artifact jarToDex = proguardOutput.outputJar;\n     DexingOutput dexingOutput =\n         shouldDexWithJack(ruleContext)\n-            ? dexWithJack(ruleContext, androidCommon)\n+            ? dexWithJack(ruleContext, androidCommon, proguardSpecs)\n             : dex(\n                 ruleContext,\n                 getMultidexMode(ruleContext),\n@@ -673,13 +681,35 @@ private ProguardOutput(Artifact outputJar, Artifact mapping) {\n     }\n   }\n \n+  /**\n+   * Retrieves the full set of proguard specs that should be applied to this binary.\n+   *\n+   * <p>If an empty list is passed (i.e., there are no proguardSpecs on this rule), an empty list\n+   * will be returned, regardless of any specs from dependencies or the resourceApk.\n+   */\n+  private static ImmutableList<Artifact> getTransitiveProguardSpecs(\n+      RuleContext ruleContext, ResourceApk resourceApk, ImmutableList<Artifact> proguardSpecs) {\n+    if (proguardSpecs.isEmpty()) {\n+      return proguardSpecs;\n+    }\n+\n+    ImmutableSortedSet.Builder<Artifact> builder =\n+        ImmutableSortedSet.<Artifact>orderedBy(Artifact.EXEC_PATH_COMPARATOR).addAll(proguardSpecs);\n+    for (ProguardSpecProvider dep :\n+        ruleContext.getPrerequisites(\"deps\", Mode.TARGET, ProguardSpecProvider.class)) {\n+      builder.addAll(dep.getTransitiveProguardSpecs());\n+    }\n+    Artifact output = resourceApk.getResourceProguardConfig();\n+    builder.add(output);\n+    return builder.build().asList();\n+  }\n+\n   /** Applies the proguard specifications, and creates a ProguardedJar. */\n   private static ProguardOutput applyProguard(\n       RuleContext ruleContext,\n       AndroidCommon common,\n       Artifact deployJarArtifact,\n       NestedSetBuilder<Artifact> filesBuilder,\n-      ResourceApk resourceApk,\n       ImmutableList<Artifact> proguardSpecs,\n       Artifact proguardMapping) {\n     Artifact proguardOutputJar =\n@@ -695,15 +725,6 @@ private static ProguardOutput applyProguard(\n       return createEmptyProguardAction(ruleContext, proguardOutputJar, deployJarArtifact);\n     }\n \n-    ImmutableSortedSet.Builder<Artifact> builder =\n-        ImmutableSortedSet.<Artifact>orderedBy(Artifact.EXEC_PATH_COMPARATOR).addAll(proguardSpecs);\n-    for (ProguardSpecProvider dep : ruleContext.getPrerequisites(\"deps\", Mode.TARGET,\n-        ProguardSpecProvider.class)) {\n-      builder.addAll(dep.getTransitiveProguardSpecs());\n-    }\n-    Artifact output = resourceApk.getResourceProguardConfig();\n-    builder.add(output);\n-    proguardSpecs = builder.build().asList();\n     AndroidSdkProvider sdk = AndroidSdkProvider.fromRuleContext(ruleContext);\n     return createProguardAction(ruleContext, common, sdk.getProguard(), deployJarArtifact,\n         proguardSpecs, proguardMapping, sdk.getAndroidJar(), proguardOutputJar, filesBuilder);\n@@ -801,13 +822,14 @@ static boolean shouldDexWithJack(RuleContext ruleContext) {\n         .isJackUsedForDexing();\n   }\n \n-  static DexingOutput dexWithJack(RuleContext ruleContext, AndroidCommon androidCommon) {\n+  static DexingOutput dexWithJack(\n+      RuleContext ruleContext, AndroidCommon androidCommon, ImmutableList<Artifact> proguardSpecs) {\n     Artifact classesDexZip =\n         androidCommon.compileDexWithJack(\n             getMultidexMode(ruleContext),\n             Optional.fromNullable(\n                 ruleContext.getPrerequisiteArtifact(\"main_dex_list\", Mode.TARGET)),\n-            ruleContext.getPrerequisiteArtifacts(PROGUARD_SPECS, Mode.TARGET).list());\n+            proguardSpecs);\n     return new DexingOutput(classesDexZip, null, ImmutableList.of(classesDexZip));\n   }\n ",
      "parent_sha": "601be74a64585172bd487caa267623bf7b00253c"
    }
  },
  {
    "oid": "73d33107fb06fd85efecdf2fc735e9e654aabbd0",
    "message": "Make ConstantRuleVisibility static constants into @AutoCodec constants.\n\nPiperOrigin-RevId: 198398386",
    "date": "2018-05-29T15:22:46Z",
    "url": "https://github.com/bazelbuild/bazel/commit/73d33107fb06fd85efecdf2fc735e9e654aabbd0",
    "details": {
      "sha": "34920f5da87da7a34ce6261ede32fe4317cf2230",
      "filename": "src/main/java/com/google/devtools/build/lib/packages/ConstantRuleVisibility.java",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/73d33107fb06fd85efecdf2fc735e9e654aabbd0/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fpackages%2FConstantRuleVisibility.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/73d33107fb06fd85efecdf2fc735e9e654aabbd0/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fpackages%2FConstantRuleVisibility.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fpackages%2FConstantRuleVisibility.java?ref=73d33107fb06fd85efecdf2fc735e9e654aabbd0",
      "patch": "@@ -16,10 +16,10 @@\n import com.google.common.collect.ImmutableList;\n import com.google.devtools.build.lib.cmdline.Label;\n import com.google.devtools.build.lib.cmdline.LabelSyntaxException;\n-import com.google.devtools.build.lib.syntax.EvalException;\n import com.google.devtools.build.lib.concurrent.ThreadSafety.Immutable;\n import com.google.devtools.build.lib.concurrent.ThreadSafety.ThreadSafe;\n-\n+import com.google.devtools.build.lib.skyframe.serialization.autocodec.AutoCodec;\n+import com.google.devtools.build.lib.syntax.EvalException;\n import java.io.Serializable;\n import java.util.Collections;\n import java.util.List;\n@@ -30,15 +30,15 @@\n  */\n @Immutable @ThreadSafe\n public class ConstantRuleVisibility implements RuleVisibility, Serializable {\n-  static final Label LEGACY_PUBLIC_LABEL;  // same as \"public\"; used for automated depot cleanup\n-  private static final Label PUBLIC_LABEL;\n-  private static final Label PRIVATE_LABEL;\n+  @AutoCodec\n+  static final Label LEGACY_PUBLIC_LABEL; // same as \"public\"; used for automated depot cleanup\n+\n+  @AutoCodec @AutoCodec.VisibleForSerialization static final Label PUBLIC_LABEL;\n+  @AutoCodec @AutoCodec.VisibleForSerialization static final Label PRIVATE_LABEL;\n \n-  public static final ConstantRuleVisibility PUBLIC =\n-      new ConstantRuleVisibility(true);\n+  @AutoCodec public static final ConstantRuleVisibility PUBLIC = new ConstantRuleVisibility(true);\n \n-  public static final ConstantRuleVisibility PRIVATE =\n-      new ConstantRuleVisibility(false);\n+  @AutoCodec public static final ConstantRuleVisibility PRIVATE = new ConstantRuleVisibility(false);\n \n   static {\n     try {",
      "parent_sha": "6ee1a8184bd2afd21da7c96359d202ad43d32264"
    }
  },
  {
    "oid": "b81776fad62771a261eaa8ec8ecedca3bd88969a",
    "message": "Properly presize the HashMap in\nAttribute#ComputationStrategy.computeValuesForAllCombinations.\n\nThis helper method is used by Rule#getTransitions and so is used in transitive\ntarget visitation.\n\nRELNOTES: None\nPiperOrigin-RevId: 235617961",
    "date": "2019-02-25T23:54:16Z",
    "url": "https://github.com/bazelbuild/bazel/commit/b81776fad62771a261eaa8ec8ecedca3bd88969a",
    "details": {
      "sha": "ceb3e9a511078e1211d3023e2c063ef8808dc155",
      "filename": "src/main/java/com/google/devtools/build/lib/packages/Attribute.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/b81776fad62771a261eaa8ec8ecedca3bd88969a/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fpackages%2FAttribute.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/b81776fad62771a261eaa8ec8ecedca3bd88969a/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fpackages%2FAttribute.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fpackages%2FAttribute.java?ref=b81776fad62771a261eaa8ec8ecedca3bd88969a",
      "patch": "@@ -26,6 +26,7 @@\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Iterables;\n+import com.google.common.collect.Maps;\n import com.google.common.collect.Ordering;\n import com.google.common.collect.Sets;\n import com.google.devtools.build.lib.analysis.TransitiveInfoProvider;\n@@ -1312,7 +1313,7 @@ <T, TLimitException extends Exception> Map<List<Object>, T> computeValuesForAllC\n       List<Map<String, Object>> depMaps = mapper.visitAttributes(dependencies, limiter);\n       // For each combination, call compute() on a specialized AttributeMap providing those\n       // values.\n-      Map<List<Object>, T> valueMap = new HashMap<>(depMaps.size());\n+      Map<List<Object>, T> valueMap = Maps.newHashMapWithExpectedSize(depMaps.size());\n       for (Map<String, Object> depMap : depMaps) {\n         AttributeMap attrMap = mapper.createMapBackedAttributeMap(depMap);\n         Object value = compute(attrMap);",
      "parent_sha": "4c8c152da4a5dee33c26154379486689df6e3035"
    }
  },
  {
    "oid": "ed86ef28fe68e71b12bdceacac1cc8fe41d867a1",
    "message": "Add .h++ extension for header files\n\nThis fixes #8111 (which I just opened).\n\nLet me know if changes are needed. I have essentially followed what I saw in 77ac48e2d0874d152c29b597113053f2629b3bc3 (which fixes #302 which is a similar issue affecting source files with `.c++` extension).\n\nCloses #8112.\n\nPiperOrigin-RevId: 253532672",
    "date": "2019-06-17T08:16:59Z",
    "url": "https://github.com/bazelbuild/bazel/commit/ed86ef28fe68e71b12bdceacac1cc8fe41d867a1",
    "details": {
      "sha": "4200946ba82e87b8b68aa53823af5c2d9645dab4",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/cpp/CppFileTypes.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/ed86ef28fe68e71b12bdceacac1cc8fe41d867a1/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fcpp%2FCppFileTypes.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/ed86ef28fe68e71b12bdceacac1cc8fe41d867a1/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fcpp%2FCppFileTypes.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fcpp%2FCppFileTypes.java?ref=ed86ef28fe68e71b12bdceacac1cc8fe41d867a1",
      "patch": "@@ -41,7 +41,8 @@ public final class CppFileTypes {\n       FileTypeSet.of(CppFileTypes.CPP_SOURCE, CppFileTypes.C_SOURCE);\n \n   public static final FileType CPP_HEADER =\n-      FileType.of(\".h\", \".hh\", \".hpp\", \".ipp\", \".hxx\", \".inc\", \".inl\", \".tlh\", \".tli\", \".H\");\n+      FileType.of(\n+          \".h\", \".hh\", \".hpp\", \".ipp\", \".hxx\", \".h++\", \".inc\", \".inl\", \".tlh\", \".tli\", \".H\");\n   public static final FileType PCH = FileType.of(\".pch\");\n   public static final FileTypeSet OBJC_HEADER = FileTypeSet.of(CPP_HEADER, PCH);\n ",
      "parent_sha": "a44ea875254c5a630000f1838764e525cdb864ce"
    }
  },
  {
    "oid": "560b0ae4701dd2084160c45bb772396535b31f47",
    "message": "Fix ScopedTemporaryDirectory causes crash when filesystem doesn't support xattr.\n\nPiperOrigin-RevId: 163053841",
    "date": "2017-07-25T11:17:55Z",
    "url": "https://github.com/bazelbuild/bazel/commit/560b0ae4701dd2084160c45bb772396535b31f47",
    "details": {
      "sha": "f7bcc88dfbadfe69023ae7d73662ee6ed2ce11f5",
      "filename": "src/tools/android/java/com/google/devtools/build/android/ScopedTemporaryDirectory.java",
      "status": "modified",
      "additions": 34,
      "deletions": 7,
      "changes": 41,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/560b0ae4701dd2084160c45bb772396535b31f47/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2FScopedTemporaryDirectory.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/560b0ae4701dd2084160c45bb772396535b31f47/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2FScopedTemporaryDirectory.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Ftools%2Fandroid%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Fandroid%2FScopedTemporaryDirectory.java?ref=560b0ae4701dd2084160c45bb772396535b31f47",
      "patch": "@@ -13,21 +13,30 @@\n // limitations under the License.\n package com.google.devtools.build.android;\n \n+import static java.nio.file.attribute.PosixFilePermission.OWNER_EXECUTE;\n+import static java.nio.file.attribute.PosixFilePermission.OWNER_READ;\n+import static java.nio.file.attribute.PosixFilePermission.OWNER_WRITE;\n+\n import java.io.Closeable;\n import java.io.IOException;\n+import java.nio.file.FileStore;\n import java.nio.file.FileVisitResult;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.SimpleFileVisitor;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.nio.file.attribute.DosFileAttributeView;\n+import java.nio.file.attribute.PosixFileAttributeView;\n+import java.util.EnumSet;\n \n /**\n  * Creates a temporary directory that will be deleted once a scope closes. NOTE: If an error occurs\n- * during deletion, it will just stop rather than try an continue.\n+ * during deletion, it will just stop rather than try and continue.\n  */\n final class ScopedTemporaryDirectory extends SimpleFileVisitor<Path> implements Closeable {\n \n+  private static final boolean IS_WINDOWS = System.getProperty(\"os.name\").startsWith(\"Windows\");\n+\n   private final Path path;\n \n   public ScopedTemporaryDirectory(String prefix) throws IOException {\n@@ -38,14 +47,32 @@ public Path getPath() {\n     return this.path;\n   }\n \n+  private void makeWritable(Path file) throws IOException {\n+    FileStore fileStore = Files.getFileStore(file);\n+    if (IS_WINDOWS && fileStore.supportsFileAttributeView(DosFileAttributeView.class)) {\n+      DosFileAttributeView dosAttribs =\n+          Files.getFileAttributeView(file, DosFileAttributeView.class);\n+      if (dosAttribs != null) {\n+        dosAttribs.setReadOnly(false);\n+      }\n+    } else if (fileStore.supportsFileAttributeView(PosixFileAttributeView.class)) {\n+      PosixFileAttributeView posixAttribs =\n+          Files.getFileAttributeView(file, PosixFileAttributeView.class);\n+      if (posixAttribs != null) {\n+        posixAttribs.setPermissions(EnumSet.of(OWNER_READ, OWNER_WRITE, OWNER_EXECUTE));\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n+    makeWritable(dir);\n+    return FileVisitResult.CONTINUE;\n+  }\n+\n   @Override\n   public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n-    // Make the file deletable on Windows.\n-    // Setting this attribute on other platforms than Windows has no effect.\n-    DosFileAttributeView dosAttribs = Files.getFileAttributeView(path, DosFileAttributeView.class);\n-    if (dosAttribs != null) {\n-      dosAttribs.setReadOnly(false);\n-    }\n+    makeWritable(file);\n     Files.delete(file);\n     return FileVisitResult.CONTINUE;\n   }",
      "parent_sha": "cd159bcee72a7f377621b45409807231a636f9e2"
    }
  },
  {
    "oid": "a3c29c44d3ef6f4b1dd33240b9972cda4eca1a4f",
    "message": "Use Stopwatch to measure elapsed time.\n\nSystem.currentTimeMillis() can \"travel\" backwards in time.\n\nRELNOTES: None\nPiperOrigin-RevId: 275792347",
    "date": "2019-10-21T08:04:57Z",
    "url": "https://github.com/bazelbuild/bazel/commit/a3c29c44d3ef6f4b1dd33240b9972cda4eca1a4f",
    "details": {
      "sha": "448328abd02c429c7d51a454dcd59c68ff0ffc60",
      "filename": "src/main/java/com/google/devtools/build/lib/profiler/CollectLocalCpuUsage.java",
      "status": "modified",
      "additions": 23,
      "deletions": 25,
      "changes": 48,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/a3c29c44d3ef6f4b1dd33240b9972cda4eca1a4f/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fprofiler%2FCollectLocalCpuUsage.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/a3c29c44d3ef6f4b1dd33240b9972cda4eca1a4f/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fprofiler%2FCollectLocalCpuUsage.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fprofiler%2FCollectLocalCpuUsage.java?ref=a3c29c44d3ef6f4b1dd33240b9972cda4eca1a4f",
      "patch": "@@ -14,43 +14,47 @@\n package com.google.devtools.build.lib.profiler;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.base.Stopwatch;\n import com.sun.management.OperatingSystemMXBean;\n import java.lang.management.ManagementFactory;\n+import java.time.Duration;\n import java.util.concurrent.TimeUnit;\n \n /** Thread to collect local cpu usage data and log into JSON profile. */\n public class CollectLocalCpuUsage extends Thread {\n   // TODO(twerth): Make these configurable.\n-  private static final long BUCKET_SIZE_MILLIS = 1000;\n+  private static final Duration BUCKET_DURATION = Duration.ofSeconds(1);\n   private static final long LOCAL_CPU_SLEEP_MILLIS = 200;\n \n   private volatile boolean stopCpuUsage;\n   private volatile boolean profilingStarted;\n-  private long cpuProfileStartMillis;\n   private TimeSeries localCpuUsage;\n+  private Stopwatch stopwatch;\n \n   @Override\n   public void run() {\n-    cpuProfileStartMillis = System.currentTimeMillis();\n-    localCpuUsage = new TimeSeries(cpuProfileStartMillis, BUCKET_SIZE_MILLIS);\n+    stopwatch = Stopwatch.createStarted();\n+    localCpuUsage =\n+        new TimeSeries(\n+            /* startTimeMillis= */ stopwatch.elapsed().toMillis(), BUCKET_DURATION.toMillis());\n     OperatingSystemMXBean bean =\n         (OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean();\n-    long previousTimeMillis = System.currentTimeMillis();\n-    long previousCpuTimeMillis = TimeUnit.NANOSECONDS.toMillis(bean.getProcessCpuTime());\n+    Duration previousElapsed = stopwatch.elapsed();\n+    long previousCpuTimeNanos = bean.getProcessCpuTime();\n     profilingStarted = true;\n     while (!stopCpuUsage) {\n       try {\n         Thread.sleep(LOCAL_CPU_SLEEP_MILLIS);\n       } catch (InterruptedException e) {\n         return;\n       }\n-      long nextTimeMillis = System.currentTimeMillis();\n-      long nextCpuTimeMillis = TimeUnit.NANOSECONDS.toMillis(bean.getProcessCpuTime());\n-      double deltaMillis = nextTimeMillis - previousTimeMillis;\n-      double cpuLevel = (nextCpuTimeMillis - previousCpuTimeMillis) / deltaMillis;\n-      localCpuUsage.addRange(previousTimeMillis, nextTimeMillis, cpuLevel);\n-      previousTimeMillis = nextTimeMillis;\n-      previousCpuTimeMillis = nextCpuTimeMillis;\n+      Duration nextElapsed = stopwatch.elapsed();\n+      long nextCpuTimeNanos = bean.getProcessCpuTime();\n+      double deltaNanos = nextElapsed.minus(previousElapsed).toNanos();\n+      double cpuLevel = (nextCpuTimeNanos - previousCpuTimeNanos) / deltaNanos;\n+      localCpuUsage.addRange(previousElapsed.toMillis(), nextElapsed.toMillis(), cpuLevel);\n+      previousElapsed = nextElapsed;\n+      previousCpuTimeNanos = nextCpuTimeNanos;\n     }\n   }\n \n@@ -65,22 +69,16 @@ public void logCollectedData() {\n       return;\n     }\n     Preconditions.checkArgument(stopCpuUsage);\n-    long currentTimeNanos = System.nanoTime();\n-    long currentTimeMillis = System.currentTimeMillis();\n-    int len = (int) ((currentTimeMillis - cpuProfileStartMillis) / BUCKET_SIZE_MILLIS) + 1;\n-    // Time math is famously unreliable and this class is doing it wrong, occasionally resulting in\n-    // a negative len value.\n-    // TODO(b/141709559): Rearchitect profiling to use Stopwatch etc. where possible to ensure time\n-    // only travels in one direction.\n-    len = Math.max(0, len);\n+    long endTimeNanos = System.nanoTime();\n+    long elapsedNanos = stopwatch.elapsed(TimeUnit.NANOSECONDS);\n+    long startTimeNanos = endTimeNanos - elapsedNanos;\n+    int len = (int) (elapsedNanos / BUCKET_DURATION.toNanos()) + 1;\n     double[] localCpuUsageValues = localCpuUsage.toDoubleArray(len);\n     Profiler profiler = Profiler.instance();\n     for (int i = 0; i < len; i++) {\n-      long timeMillis = cpuProfileStartMillis + i * BUCKET_SIZE_MILLIS;\n-      long timeNanos =\n-          TimeUnit.MILLISECONDS.toNanos(timeMillis - currentTimeMillis) + currentTimeNanos;\n+      long eventTimeNanos = startTimeNanos + i * BUCKET_DURATION.toNanos();\n       profiler.logEventAtTime(\n-          timeNanos, ProfilerTask.LOCAL_CPU_USAGE, String.valueOf(localCpuUsageValues[i]));\n+          eventTimeNanos, ProfilerTask.LOCAL_CPU_USAGE, String.valueOf(localCpuUsageValues[i]));\n     }\n     localCpuUsage = null;\n   }",
      "parent_sha": "07eb53d72eb6db4076397305d67ac385be99e664"
    }
  },
  {
    "oid": "e398b02227204f79caaa4c29861da93af1c1051e",
    "message": "Make the error message when a file is not found in the profile zip more indicative of the probable cause of the error.\n\nRELNOTES: None.\nPiperOrigin-RevId: 158286091",
    "date": "2017-06-08T14:52:26Z",
    "url": "https://github.com/bazelbuild/bazel/commit/e398b02227204f79caaa4c29861da93af1c1051e",
    "details": {
      "sha": "9bf74e93c594b09fef9d78963cbede081875a6a6",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/cpp/FdoSupport.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/e398b02227204f79caaa4c29861da93af1c1051e/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fcpp%2FFdoSupport.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/e398b02227204f79caaa4c29861da93af1c1051e/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fcpp%2FFdoSupport.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fcpp%2FFdoSupport.java?ref=e398b02227204f79caaa4c29861da93af1c1051e",
      "patch": "@@ -610,7 +610,9 @@ private Iterable<Artifact> getAuxiliaryInputs(\n                 getGcdaArtifactsForGcdaPath(fdoSupportProvider, importedFile);\n             if (gcdaArtifact == null) {\n               ruleContext.ruleError(String.format(\n-                  \".gcda file %s is not in the FDO zip (referenced by source file %s)\",\n+                  \".gcda file %s is not in the FDO zip (referenced by source file %s). Check if \"\n+                  + \"your profile is generated from the same sources you are building the \"\n+                  + \"optimized binary from\",\n                   importedFile, sourceName));\n             } else {\n               auxiliaryInputs.add(gcdaArtifact);\n@@ -622,7 +624,10 @@ private Iterable<Artifact> getAuxiliaryInputs(\n               auxiliaryInputs.add(importedArtifact);\n             } else {\n               ruleContext.ruleError(String.format(\n-                  \"cannot find source file '%s' referenced from '%s'\", importedFile, objectName));\n+                  \"cannot find source file '%s' referenced from '%s' by LIPO inclusion. Check if \"\n+                  + \"your profile is generated from the same sources you are building the \"\n+                  + \"optimized binary from\",\n+                  importedFile, objectName));\n             }\n           }\n         }",
      "parent_sha": "69faad021dcf65d8f1967f26808c10f9f949ed7e"
    }
  },
  {
    "oid": "14f481d1525477f13107941e525d399fc3effa0b",
    "message": "Remove unused NestedSet expansion.\n\nPiperOrigin-RevId: 379325097",
    "date": "2021-06-14T19:05:16Z",
    "url": "https://github.com/bazelbuild/bazel/commit/14f481d1525477f13107941e525d399fc3effa0b",
    "details": {
      "sha": "de9fcd2e17d1e7a37b3e8435f802b3b9cb6e4a26",
      "filename": "src/main/java/com/google/devtools/build/lib/analysis/starlark/StarlarkActionFactory.java",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/14f481d1525477f13107941e525d399fc3effa0b/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Fstarlark%2FStarlarkActionFactory.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/14f481d1525477f13107941e525d399fc3effa0b/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Fstarlark%2FStarlarkActionFactory.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Fanalysis%2Fstarlark%2FStarlarkActionFactory.java?ref=14f481d1525477f13107941e525d399fc3effa0b",
      "patch": "@@ -540,14 +540,10 @@ private void registerStarlarkAction(\n       Object shadowedActionUnchecked,\n       StarlarkAction.Builder builder)\n       throws EvalException {\n-    Iterable<Artifact> inputArtifacts;\n     if (inputs instanceof Sequence) {\n-      inputArtifacts = Sequence.cast(inputs, Artifact.class, \"inputs\");\n-      builder.addInputs(inputArtifacts);\n+      builder.addInputs(Sequence.cast(inputs, Artifact.class, \"inputs\"));\n     } else {\n-      NestedSet<Artifact> inputSet = Depset.cast(inputs, Artifact.class, \"inputs\");\n-      builder.addTransitiveInputs(inputSet);\n-      inputArtifacts = inputSet.toList();\n+      builder.addTransitiveInputs(Depset.cast(inputs, Artifact.class, \"inputs\"));\n     }\n \n     List<Artifact> outputArtifacts = Sequence.cast(outputs, Artifact.class, \"outputs\");",
      "parent_sha": "a129aeb333d83a4466ac2c996b84a113405acb4d"
    }
  },
  {
    "oid": "6622c9e61855bf1c44bbd7faa8cf0e8318e43667",
    "message": "Automatic code cleanup.\n\nPiperOrigin-RevId: 375781686",
    "date": "2021-05-25T20:25:10Z",
    "url": "https://github.com/bazelbuild/bazel/commit/6622c9e61855bf1c44bbd7faa8cf0e8318e43667",
    "details": {
      "sha": "9f786c238772c9c57a3b5e68be6ccea9cf5ee9f1",
      "filename": "src/test/java/com/google/devtools/build/lib/rules/android/AndroidResourcesTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/6622c9e61855bf1c44bbd7faa8cf0e8318e43667/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fandroid%2FAndroidResourcesTest.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/6622c9e61855bf1c44bbd7faa8cf0e8318e43667/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fandroid%2FAndroidResourcesTest.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Fandroid%2FAndroidResourcesTest.java?ref=6622c9e61855bf1c44bbd7faa8cf0e8318e43667",
      "patch": "@@ -489,10 +489,6 @@ private RuleContext getRuleContext() throws Exception {\n     return getRuleContext(\"android_library\");\n   }\n \n-  private RuleContext getRuleContextWithDataBinding() throws Exception {\n-    return getRuleContext(\"android_library\", \"enable_data_binding = 1\");\n-  }\n-\n   /** Gets a dummy rule context object by creating a dummy target. */\n   private RuleContext getRuleContext(String kind, String... additionalLines) throws Exception {\n     ConfiguredTarget target =\n@@ -507,4 +503,8 @@ private RuleContext getRuleContext(String kind, String... additionalLines) throw\n                 .toArray(new String[0]));\n     return getRuleContextForActionTesting(target);\n   }\n+\n+  private RuleContext getRuleContextWithDataBinding() throws Exception {\n+    return getRuleContext(\"android_library\", \"enable_data_binding = 1\");\n+  }\n }",
      "parent_sha": "b4b0c321910bc968736ef48e8140528ea7d323cd"
    }
  },
  {
    "oid": "58e760f71923cfc7e610262b142afce56689a1a5",
    "message": "Fix new InstrumentationSpec for filegroup\n\nThis puts \"srcs\" under dependency_attributes instead of source_attributes, somewhat counter-intuitively:\n\n1. \"srcs\" needs to be under dependency_attributes because filegroup just forwards FileProvider without any idea how the files are used. It doesn't know if the dependencies of stuff in srcs are runtime dependencies or not, so that needs to be forwarded indiscriminately and then dealt with by the consumer's InstrumentationSpec.\n\n2. \"srcs\" needs to not be under source_attributes because source_attributes is for sources that this rule _processes_. filegroup doesn't process anything. (Previously, it needed to include source files it _directly included_ because it might have consumers using that legacy configuration, and in that case those consumers would never gather files from filegroup via FileProvider because it provided InstrumentedFilesProvider.)\n\nRELNOTES: Make filegroup always forward InstrumentedFilesProvider and not collect any sources directly.\nPiperOrigin-RevId: 323563516",
    "date": "2020-07-28T13:54:38Z",
    "url": "https://github.com/bazelbuild/bazel/commit/58e760f71923cfc7e610262b142afce56689a1a5",
    "details": {
      "sha": "a400ecdffc4dca82e38b090e94269212e86247e6",
      "filename": "src/main/java/com/google/devtools/build/lib/rules/filegroup/Filegroup.java",
      "status": "modified",
      "additions": 16,
      "deletions": 2,
      "changes": 18,
      "blob_url": "https://github.com/bazelbuild/bazel/blob/58e760f71923cfc7e610262b142afce56689a1a5/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Ffilegroup%2FFilegroup.java",
      "raw_url": "https://github.com/bazelbuild/bazel/raw/58e760f71923cfc7e610262b142afce56689a1a5/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Ffilegroup%2FFilegroup.java",
      "contents_url": "https://api.github.com/repos/bazelbuild/bazel/contents/src%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fdevtools%2Fbuild%2Flib%2Frules%2Ffilegroup%2FFilegroup.java?ref=58e760f71923cfc7e610262b142afce56689a1a5",
      "patch": "@@ -72,10 +72,24 @@ public ConfiguredTarget create(RuleContext ruleContext)\n     InstrumentedFilesInfo instrumentedFilesProvider =\n         InstrumentedFilesCollector.collectTransitive(\n             ruleContext,\n+            // Seems strange to have \"srcs\" in \"dependency attributes\" instead of \"source\n+            // attributes\", but that's correct behavior here because:\n+            // 1. This rule is essentially forwarding, it has no idea how the stuff in srcs is used.\n+            //    Thus, it needs to look at any dependencies transitively via\n+            //    InstrumentedFilesProvider.\n+            // 2. This rule doesn't _process_ any source files. The rule which does process the\n+            //    source files in filegroup.srcs will include those files in its inputs and in its\n+            //    InstrumentedFileProvider the same way, via FileProvider. This ensures that when\n+            //    --instrumentation_filter says a rule's sources should be instrumented for coverage\n+            //    data collection, it also says all of those sources should be included in the\n+            //    coverage manifest.\n+            // Previously, this would have needed to include \"srcs\" in \"source attributes\" anyways,\n+            // since it might have been _consumed_ by a rule using the legacy InstrumentationSpec.\n+            // In that case, since filegroup provided InstrumentedFilesProvider, the legacy\n+            // consumer would never try to gather filegroup's instrumented sources via FileProvider.\n             new InstrumentationSpec(FileTypeSet.ANY_FILE)\n                 .withDeprecatedSourceOrDependencyAttributes(\"srcs\", \"deps\", \"data\")\n-                .withSourceAttributes(\"srcs\")\n-                .withDependencyAttributes(\"data\"),\n+                .withDependencyAttributes(\"srcs\", \"data\"),\n             /* reportedToActualSources= */ NestedSetBuilder.create(Order.STABLE_ORDER));\n \n     RunfilesProvider runfilesProvider =",
      "parent_sha": "7be7aedf46103923374288baf4d7f69ed714bedc"
    }
  }
]