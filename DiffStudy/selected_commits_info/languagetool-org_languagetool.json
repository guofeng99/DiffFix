[
  {
    "oid": "ac539b313415d5ea941502750a269d09c6b07702",
    "message": "update dictionary based in current LanguageTool data; stop storing the binary dictionary in the repo",
    "date": "2015-04-14T13:23:01Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/ac539b313415d5ea941502750a269d09c6b07702",
    "details": {
      "sha": "e0db82f15d40a9c02c8a51ae4f3a803ad167ee73",
      "filename": "languagetool-dev/src/main/java/org/languagetool/dev/ExportGermanNouns.java",
      "status": "modified",
      "additions": 28,
      "deletions": 30,
      "changes": 58,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/ac539b313415d5ea941502750a269d09c6b07702/languagetool-dev%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fdev%2FExportGermanNouns.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/ac539b313415d5ea941502750a269d09c6b07702/languagetool-dev%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fdev%2FExportGermanNouns.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-dev%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fdev%2FExportGermanNouns.java?ref=ac539b313415d5ea941502750a269d09c6b07702",
      "patch": "@@ -18,17 +18,13 @@\n  */\n package org.languagetool.dev;\n \n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.ObjectOutputStream;\n-import java.nio.ByteBuffer;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n import morfologik.fsa.FSA;\n-\n import org.languagetool.JLanguageTool;\n+import org.languagetool.tools.StringTools;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.*;\n \n /**\n  * Export German nouns as a serialized Java HashSet, to be used\n@@ -43,43 +39,45 @@ public class ExportGermanNouns {\n   private ExportGermanNouns() {\n   }\n   \n+  private List<String> getSortedWords() throws IOException {\n+    Set<String> words = getWords();\n+    List<String> sortedWords = new ArrayList<>(words);\n+    Collections.sort(sortedWords);\n+    return sortedWords;\n+  }\n+  \n   private Set<String> getWords() throws IOException {\n     final FSA fsa = FSA.read(JLanguageTool.getDataBroker().getFromResourceDirAsStream(DICT_FILENAME));\n-    String lastTerm = null;\n     final Set<String> set = new HashSet<>();\n     for (ByteBuffer bb : fsa) {\n       final byte [] sequence = new byte [bb.remaining()];\n       bb.get(sequence);\n       final String output = new String(sequence, \"iso-8859-1\");\n-      if (output.contains(\"+SUB:\") && !output.contains(\":ADJ\")) {\n+      boolean isNoun = output.contains(\"+SUB:\") || (output.contains(\"+EIG:\") && output.contains(\"COU\")); // COU = Country\n+      if (isNoun && !output.contains(\":ADJ\") && !StringTools.isAllUppercase(output)) {\n         final String[] parts = output.split(\"\\\\+\");\n         final String term = parts[0].toLowerCase();\n-        if (lastTerm == null || !lastTerm.equals(parts[0])) {\n-          //System.out.println(parts[0]);\n-          set.add(term);\n-        }\n-        lastTerm = term;\n+        set.add(term);\n       }\n     }\n     return set;\n   }\n   \n-  private void serialize(Set<String> words, File outputFile) throws IOException {\n-    final FileOutputStream fos = new FileOutputStream(outputFile);\n-    final ObjectOutputStream oos = new ObjectOutputStream(fos);\n-    oos.writeObject(words);\n-    oos.close();\n-    fos.close();\n-  }\n-  \n   public static void main(String[] args) throws IOException {\n-    if (args.length != 1) {\n-      System.out.println(\"Usage: ExportGermanNouns <outputFile>\");\n-      System.exit(1);\n+    ExportGermanNouns prg = new ExportGermanNouns();\n+    List<String> words = prg.getSortedWords();\n+    System.out.println(\"# DO NOT MODIFY - automatically exported\");\n+    System.out.println(\"# Exporting class: \" + ExportGermanNouns.class.getName());\n+    System.out.println(\"# Export date: \" + new Date());\n+    System.out.println(\"# LanguageTool: \" + JLanguageTool.VERSION + \" (\" + JLanguageTool.BUILD_DATE + \")\");\n+    System.out.println(\"# Potential German compound parts.\");\n+    System.out.println(\"# Data from Morphy (http://www.wolfganglezius.de/doku.php?id=cl:morphy)\");\n+    System.out.println(\"# with extensions by LanguageTool (https://languagetool.org)\");\n+    System.out.println(\"# License: Creative Commons Attribution-Share Alike 4.0, http://creativecommons.org/licenses/by-sa/4.0/\");\n+    for (String word : words) {\n+      System.out.println(word);\n     }\n-    final ExportGermanNouns prg = new ExportGermanNouns();\n-    final Set<String> words = prg.getWords();\n-    prg.serialize(words, new File(args[0]));\n+    //System.err.println(\"Done. Printed \" + words.size() + \" words.\");\n   }\n     \n }",
      "parent_sha": "ca8123058302812905ad6f67457ac263c89e652b"
    }
  },
  {
    "oid": "714c3646c35e75247896f6c5b57ae31e74d20fe8",
    "message": "[en] fixed indentation",
    "date": "2023-11-16T10:34:43Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/714c3646c35e75247896f6c5b57ae31e74d20fe8",
    "details": {
      "sha": "514e355ca9dddd12c36c3cffd187c3176f30375c",
      "filename": "languagetool-language-modules/en/src/main/java/org/languagetool/rules/en/AbstractEnglishSpellerRule.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/714c3646c35e75247896f6c5b57ae31e74d20fe8/languagetool-language-modules%2Fen%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fen%2FAbstractEnglishSpellerRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/714c3646c35e75247896f6c5b57ae31e74d20fe8/languagetool-language-modules%2Fen%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fen%2FAbstractEnglishSpellerRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fen%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fen%2FAbstractEnglishSpellerRule.java?ref=714c3646c35e75247896f6c5b57ae31e74d20fe8",
      "patch": "@@ -1348,7 +1348,7 @@ private void addHyphenSuggestions(String[] parts, List<SuggestedReplacement> top\n           if (partSuggestions.size() > 0) {\n               String suggestion = getHyphenatedWordSuggestion(parts, i, partSuggestions.get(0));\n               topSuggestions.add(new SuggestedReplacement(suggestion));\n-            }\n+          }\n         }\n       i++;\n     }\n@@ -1362,7 +1362,7 @@ private String getHyphenatedWordSuggestion(String[] parts, int currentPos, Strin\n           } else {\n             newParts.add(parts[j]);\n           }\n-      }\n+    }\n     return String.join(\"-\", newParts);\n   }\n ",
      "parent_sha": "4163cff1034e47f890585c7ae4d469cde65dbf4d"
    }
  },
  {
    "oid": "8be1c31e9286fbacdff33037ec232b10be3f9f9d",
    "message": "[pt] tautonyms exceptions fix\n\n* not as elegant as the suggestion on c55232c but still a major\nlegebility improvement\n\t- may be reworked later.\n* TODO reused to identify scientific names as general exceptions do\nspellchecking\n* TODO new rule to advice italicizing scientific species names",
    "date": "2016-11-22T20:54:15Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/8be1c31e9286fbacdff33037ec232b10be3f9f9d",
    "details": {
      "sha": "2c87c481ff7e40f4d2047939dc820b3340a1dea1",
      "filename": "languagetool-language-modules/pt/src/main/java/org/languagetool/rules/pt/PortugueseWordRepeatRule.java",
      "status": "modified",
      "additions": 17,
      "deletions": 1148,
      "changes": 1165,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/8be1c31e9286fbacdff33037ec232b10be3f9f9d/languagetool-language-modules%2Fpt%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpt%2FPortugueseWordRepeatRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/8be1c31e9286fbacdff33037ec232b10be3f9f9d/languagetool-language-modules%2Fpt%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpt%2FPortugueseWordRepeatRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fpt%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpt%2FPortugueseWordRepeatRule.java?ref=8be1c31e9286fbacdff33037ec232b10be3f9f9d",
      "patch": "@@ -19,6 +19,7 @@\n package org.languagetool.rules.pt;\n \n import java.util.ResourceBundle;\n+import java.util.regex.Pattern;\n \n import org.languagetool.AnalyzedTokenReadings;\n import org.languagetool.Language;\n@@ -27,11 +28,16 @@\n \n /**\n  * Palavras que se repetem no Porugu\u00eas.\n- * l18n from the english version, by Tiago F. Santos\n+ * @created by Tiago F. Santos\n  * @since 3.6\n  */\n public class PortugueseWordRepeatRule extends WordRepeatRule {\n \n+    // Tautonym list from https://en.wikipedia.org/wiki/List_of_tautonyms\n+  private static final Pattern TAUTONYMS_GENUS = Pattern.compile(\"Aaptos|Acanthogyrus|Achatina|Agagus|Agama|Alburnus|Alces|Alle|Alosa|Amandava|Amazilia|Ameiva|Anableps|Anguilla|Anguilla|Anhinga|Anostomus|Anser|Anthias|Apus|Arcinella|Ariadne|Aspredo|Astacus|Avicularia|Axis|Badis|Bagarius|Bagre|Balanus|Banjos|Barbatula|Barbus|Basiliscus|Batasio|Belobranchus|Belone|Belonimorphis|Bidyanus|Bison|Bombina|Boops|Brama|Brosme|Bubo|Bucayana|Bufo|Buteo|Butis|Calamus|Calappa|Caleta|Callichthys|Calotes|Capoeta|Capreolus|Caracal|Carassius|Carassius|Cardinalis|Carduelis|Caretta|Casuarius|Catla|Catostomus|Cephea|Cerastes|Chaca|Chalcides|Chandramara|Chanos|Chaos|Chinchilla|Chiropotes|Chitala|Chromis|Ciconia|Cidaris|Cinclus|Citellus|Clelia|Coccothraustes|Coccothraustes|Cochlearius|Coeligena|Colius|Columella|Concholepas|Concholepas|Conger|Conta|Convoluta|Cordylus|Coscoroba|Cossus|Cotinga|Coturnix|Crangon|Cressida|Crex|Cricetus|Crocuta|Crossoptilon|Curaeus|Cyanicterus|Cygnus|Cymbium|Cynoglossus|Dama|Dario|Dentex|Devario|Diuca|Dives|Dolabrifera|Enhydris|Ensifera|Ensifera|Ensis|Erythrinus|Extra|Falcipennis|Feroculus|Ficus|Fragum|Francolinus|Furcula|Gagata|Galbula|Gallinago|Gallus|Gazella|Gazella|Gemma|Genetta|Gerbillus|Gibberulus|Giraffa|Glis|Glycimeris|Glyphis|Gobio|Goliathus|Gonorynchus|Gorilla|Grapsus|Grapsus|Grus|Gryllotalpa|Guira|Gulo|Hara|Harpa|Haustellum|Hemilepidotus|Heterophyes|Himantopus|Himantopus|Hippocampus|Hippoglossus|Hippopus|Histrio|Histrionicus|Hoolock|Hucho|Huso|Hyaena|Hypnale|Ichthyaetus|Icterus|Idea|Iguana|Indicator|Indri|Indri|Jacana|Jaculus|Janthina|Kachuga|Koilofera|Lactarius|Lagocephalus|Lagopus|Lagopus|Lagurus|Lambis|Lemmus|Lepadogaster|Lerwa|Leuciscus|Lima|Limanda|Limanda|Limosa|Liparis|Lithognathus|Lithophaga|Loa|Lota|Luscinia|Lutjanus|Lutra|Lutraria|Lynx|Macrophyllum|Manacus|Margaritifera|Marmota|Martes|Mascarinus|Mashuna|Megacephala|Melanodera|Meles|Melo|Melolontha|Melolontha|Melongena|Menidia|Mephitis|Mercenaria|Meretrix|Merluccius|Meza|Microstoma|Milvus|Milvus|Mitella|Mitra|Mitu|Modiolus|Modulus|Mola|Molossus|Molva|Monachus|Moniliformis|Mops|Mustelus|Myaka|Myospalax|Myotis|Myotis|Naja|Naja|Nangra|Nasua|Natrix|Neita|Niviventer|Notopterus|Nycticorax|Nycticorax|Oenanthe|Ogasawarana|Oliva|Ophioscincus|Oplopomus|Oreotragus|Oriolus|Pagrus|Pangasius|Papio|Pauxi|Perdix|Periphylla|Perna|Petaurista|Petronia|Phocoena|Phoenicurus|Phoxinus|Phycis|Pica|Pipa|Pipile|Pipistrellus|Pipra|Pithecia|Planorbis|Plica|Poliocephalus|Pollachius|Pollicipes|Porites|Porphyrio|Porphyrolaema|Porpita|Porzana|Pristis|Pseudobagarius|Pudu|Puffinus|Pungitius|Pyrrhocorax|Pyrrhula|Quadrula|Quelea|Rama|Ranina|Rapa|Rasbora|Rattus|Redunca|Regulus|Remora|Retropinna|Rhinobatos|Riparia|Rita|Rupicapra|Rupicola|Rutilus|Saccolaimus|Salamandra|Sarda|Scalpellum|Scincus|Scolytus|Sephanoides|Serinus|Sodreana|Solea|Sphyraena|Spinachia|Spirorbis|Spirula|Sprattus|Squatina|Staphylaea|Suiriri|Sula|Suta|Synodus|Tadorna|Tandanus|Tchagra|Telescopium|Temnurus|Terebellum|Tetradactylus|Tetrax|Therezopolis|Thymallus|Tibicen|Tinca|Todus|Torpedo|Trachurus|Trachycorystes|Trachyrinchus|Tricornis|Troglodytes|Tropheops|Tubifex|Tyrannus|Umbraculum|Uncia|Vanellus|Vanellus|Velella|Velella|Velutina|Vicugna|Villosa|Vimba|Viviparus|Volva|Vulpes|Vulpes|Xanthocephalus|Xanthostigma|Xenopirostris|Ypiranga|Zebrus|Zera|Zingel|Zingha|Zoma|Zonia|Zungaro|Zygoneura\");\n+\n+  private static final Pattern TAUTONYMS_SPECIES = Pattern.compile(\"aaptos|acanthogyrus|achatina|agagus|agama|alburnus|alces|alle|alosa|amandava|amazilia|ameiva|anableps|anguilla|anguilla|anhinga|anostomus|anser|anthias|apus|arcinella|ariadne|aspredo|astacus|avicularia|axis|badis|bagarius|bagre|balanus|banjos|barbatula|barbus|basiliscus|batasio|belobranchus|belone|belonimorphis|bidyanus|bison|bombina|boops|brama|brosme|bubo|bucayana|bufo|buteo|butis|calamus|calappa|caleta|callichthys|calotes|capoeta|capreolus|caracal|carassius|carassius|cardinalis|carduelis|caretta|casuarius|catla|catostomus|cephea|cerastes|chaca|chalcides|chandramara|chanos|chaos|chinchilla|chiropotes|chitala|chromis|ciconia|cidaris|cinclus|citellus|clelia|coccothraustes|coccothraustes|cochlearius|coeligena|colius|columella|concholepas|concholepas|conger|conta|convoluta|cordylus|coscoroba|cossus|cotinga|coturnix|crangon|cressida|crex|cricetus|crocuta|crossoptilon|curaeus|cyanicterus|cygnus|cymbium|cynoglossus|dama|dario|dentex|devario|diuca|dives|dolabrifera|enhydris|ensifera|ensifera|ensis|erythrinus|extra|falcipennis|feroculus|ficus|fragum|francolinus|furcula|gagata|galbula|gallinago|gallus|gazella|gazella|gemma|genetta|gerbillus|gibberulus|giraffa|glis|glycimeris|glyphis|gobio|goliathus|gonorynchus|gorilla|grapsus|grapsus|grus|gryllotalpa|guira|gulo|hara|harpa|haustellum|hemilepidotus|heterophyes|himantopus|himantopus|hippocampus|hippoglossus|hippopus|histrio|histrionicus|hoolock|hucho|huso|hyaena|hypnale|ichthyaetus|icterus|idea|iguana|indicator|indri|indri|jacana|jaculus|janthina|kachuga|koilofera|lactarius|lagocephalus|lagopus|lagopus|lagurus|lambis|lemmus|lepadogaster|lerwa|leuciscus|lima|limanda|limanda|limosa|liparis|lithognathus|lithophaga|loa|lota|luscinia|lutjanus|lutra|lutraria|lynx|macrophyllum|manacus|margaritifera|marmota|martes|mascarinus|mashuna|megacephala|melanodera|meles|melo|melolontha|melolontha|melongena|menidia|mephitis|mercenaria|meretrix|merluccius|meza|microstoma|milvus|milvus|mitella|mitra|mitu|modiolus|modulus|mola|molossus|molva|monachus|moniliformis|mops|mustelus|myaka|myospalax|myotis|myotis|naja|naja|nangra|nasua|natrix|neita|niviventer|notopterus|nycticorax|nycticorax|oenanthe|ogasawarana|oliva|ophioscincus|oplopomus|oreotragus|oriolus|pagrus|pangasius|papio|pauxi|perdix|periphylla|perna|petaurista|petronia|phocoena|phoenicurus|phoxinus|phycis|pica|pipa|pipile|pipistrellus|pipra|pithecia|planorbis|plica|poliocephalus|pollachius|pollicipes|porites|porphyrio|porphyrolaema|porpita|porzana|pristis|pseudobagarius|pudu|puffinus|pungitius|pyrrhocorax|pyrrhula|quadrula|quelea|rama|ranina|rapa|rasbora|rattus|redunca|regulus|remora|retropinna|rhinobatos|riparia|rita|rupicapra|rupicola|rutilus|saccolaimus|salamandra|sarda|scalpellum|scincus|scolytus|sephanoides|serinus|sodreana|solea|sphyraena|spinachia|spirorbis|spirula|sprattus|squatina|staphylaea|suiriri|sula|suta|synodus|tadorna|tandanus|tchagra|telescopium|temnurus|terebellum|tetradactylus|tetrax|therezopolis|thymallus|tibicen|tinca|todus|torpedo|trachurus|trachycorystes|trachyrinchus|tricornis|troglodytes|tropheops|tubifex|tyrannus|umbraculum|uncia|vanellus|vanellus|velella|velella|velutina|vicugna|villosa|vimba|viviparus|volva|vulpes|vulpes|xanthocephalus|xanthostigma|xenopirostris|ypiranga|zebrus|zera|zingel|zingha|zoma|zonia|zungaro|zygoneura\");\n+\n   public PortugueseWordRepeatRule(ResourceBundle messages, Language language) {\n     super(messages, language);\n     addExamplePair(Example.wrong(\"Este <marker>\u00e9 \u00e9</marker> apenas uma frase de exemplo.\"),\n@@ -54,1153 +60,9 @@ public boolean ignore(AnalyzedTokenReadings[] tokens, int position) {\n     if (wordRepetitionOf(\"sapiens\", tokens, position)) {\n       return true;   // \"Homo sapiens sapiens\"\n     }\n-    // Tautonym list from https://en.wikipedia.org/wiki/List_of_tautonyms\n-    if (wordRepetitionOf(\"aaptos\", tokens, position)) {\n-      return true; \n-    }  //aaptos\n-    if (wordRepetitionOf(\"acanthogyrus\", tokens, position)) {\n-      return true;\n-    }  //acanthogyrus\n-    if (wordRepetitionOf(\"achatina\", tokens, position)) {\n-      return true;\n-    }  //achatina\n-    if (wordRepetitionOf(\"agagus\", tokens, position)) {\n-      return true;\n-    }  //agagus\n-    if (wordRepetitionOf(\"agama\", tokens, position)) {\n-      return true;\n-    }  //agama\n-    if (wordRepetitionOf(\"alburnus\", tokens, position)) {\n-      return true;\n-    }  //alburnus\n-    if (wordRepetitionOf(\"alces\", tokens, position)) {\n-      return true;\n-    }  //alces\n-    if (wordRepetitionOf(\"alle\", tokens, position)) {\n-      return true;\n-    }  //alle\n-    if (wordRepetitionOf(\"alosa\", tokens, position)) {\n-      return true;\n-    }  //alosa\n-    if (wordRepetitionOf(\"amandava\", tokens, position)) {\n-      return true;\n-    }  //amandava\n-    if (wordRepetitionOf(\"amazilia\", tokens, position)) {\n-      return true;\n-    }  //amazilia\n-    if (wordRepetitionOf(\"ameiva\", tokens, position)) {\n-      return true;\n-    }  //ameiva\n-    if (wordRepetitionOf(\"anableps\", tokens, position)) {\n-      return true;\n-    }  //anableps\n-    if (wordRepetitionOf(\"anguilla\", tokens, position)) {\n-      return true;\n-    }  //anguilla\n-    if (wordRepetitionOf(\"anguilla\", tokens, position)) {\n-      return true;\n-    }  //anguilla\n-    if (wordRepetitionOf(\"anhinga\", tokens, position)) {\n-      return true;\n-    }  //anhinga\n-    if (wordRepetitionOf(\"anostomus\", tokens, position)) {\n-      return true;\n-    }  //anostomus\n-    if (wordRepetitionOf(\"anser\", tokens, position)) {\n-      return true;\n-    }  //anser\n-    if (wordRepetitionOf(\"anthias\", tokens, position)) {\n-      return true;\n-    }  //anthias\n-    if (wordRepetitionOf(\"apus\", tokens, position)) {\n-      return true;\n-    }  //apus\n-    if (wordRepetitionOf(\"arcinella\", tokens, position)) {\n-      return true;\n-    }  //arcinella\n-    if (wordRepetitionOf(\"ariadne\", tokens, position)) {\n-      return true;\n-    }  //ariadne\n-    if (wordRepetitionOf(\"aspredo\", tokens, position)) {\n-      return true;\n-    }  //aspredo\n-    if (wordRepetitionOf(\"astacus\", tokens, position)) {\n-      return true;\n-    }  //astacus\n-    if (wordRepetitionOf(\"avicularia\", tokens, position)) {\n-      return true;\n-    }  //avicularia\n-    if (wordRepetitionOf(\"axis\", tokens, position)) {\n-      return true;\n-    }  //axis\n-    if (wordRepetitionOf(\"badis\", tokens, position)) {\n-      return true;\n-    }  //badis\n-    if (wordRepetitionOf(\"bagarius\", tokens, position)) {\n-      return true;\n-    }  //bagarius\n-    if (wordRepetitionOf(\"bagre\", tokens, position)) {\n-      return true;\n-    }  //bagre\n-    if (wordRepetitionOf(\"balanus\", tokens, position)) {\n-      return true;\n-    }  //balanus\n-    if (wordRepetitionOf(\"banjos\", tokens, position)) {\n-      return true;\n-    }  //banjos\n-    if (wordRepetitionOf(\"barbatula\", tokens, position)) {\n-      return true;\n-    }  //barbatula\n-    if (wordRepetitionOf(\"barbus\", tokens, position)) {\n-      return true;\n-    }  //barbus\n-    if (wordRepetitionOf(\"basiliscus\", tokens, position)) {\n-      return true;\n-    }  //basiliscus\n-    if (wordRepetitionOf(\"batasio\", tokens, position)) {\n-      return true;\n-    }  //batasio\n-    if (wordRepetitionOf(\"belobranchus\", tokens, position)) {\n-      return true;\n-    }  //belobranchus\n-    if (wordRepetitionOf(\"belone\", tokens, position)) {\n-      return true;\n-    }  //belone\n-    if (wordRepetitionOf(\"belonimorphis\", tokens, position)) {\n-      return true;\n-    }  //belonimorphis\n-    if (wordRepetitionOf(\"bidyanus\", tokens, position)) {\n-      return true;\n-    }  //bidyanus\n-    if (wordRepetitionOf(\"bison\", tokens, position)) {\n-      return true;\n-    }  //bison\n-    if (wordRepetitionOf(\"bombina\", tokens, position)) {\n-      return true;\n-    }  //bombina\n-    if (wordRepetitionOf(\"boops\", tokens, position)) {\n-      return true;\n-    }  //boops\n-    if (wordRepetitionOf(\"brama\", tokens, position)) {\n-      return true;\n-    }  //brama\n-    if (wordRepetitionOf(\"brosme\", tokens, position)) {\n-      return true;\n-    }  //brosme\n-    if (wordRepetitionOf(\"bubo\", tokens, position)) {\n-      return true;\n-    }  //bubo\n-    if (wordRepetitionOf(\"bucayana\", tokens, position)) {\n-      return true;\n-    }  //bucayana\n-    if (wordRepetitionOf(\"bufo\", tokens, position)) {\n-      return true;\n-    }  //bufo\n-    if (wordRepetitionOf(\"buteo\", tokens, position)) {\n-      return true;\n-    }  //buteo\n-    if (wordRepetitionOf(\"butis\", tokens, position)) {\n-      return true;\n-    }  //butis\n-    if (wordRepetitionOf(\"calamus\", tokens, position)) {\n-      return true;\n-    }  //calamus\n-    if (wordRepetitionOf(\"calappa\", tokens, position)) {\n-      return true;\n-    }  //calappa\n-    if (wordRepetitionOf(\"caleta\", tokens, position)) {\n-      return true;\n-    }  //caleta\n-    if (wordRepetitionOf(\"callichthys\", tokens, position)) {\n-      return true;\n-    }  //callichthys\n-    if (wordRepetitionOf(\"calotes\", tokens, position)) {\n-      return true;\n-    }  //calotes\n-    if (wordRepetitionOf(\"capoeta\", tokens, position)) {\n-      return true;\n-    }  //capoeta\n-    if (wordRepetitionOf(\"capreolus\", tokens, position)) {\n-      return true;\n-    }  //capreolus\n-    if (wordRepetitionOf(\"caracal\", tokens, position)) {\n-      return true;\n-    }  //caracal\n-    if (wordRepetitionOf(\"carassius\", tokens, position)) {\n-      return true;\n-    }  //carassius\n-    if (wordRepetitionOf(\"carassius\", tokens, position)) {\n-      return true;\n-    }  //carassius\n-    if (wordRepetitionOf(\"cardinalis\", tokens, position)) {\n-      return true;\n-    }  //cardinalis\n-    if (wordRepetitionOf(\"carduelis\", tokens, position)) {\n-      return true;\n-    }  //carduelis\n-    if (wordRepetitionOf(\"caretta\", tokens, position)) {\n-      return true;\n-    }  //caretta\n-    if (wordRepetitionOf(\"casuarius\", tokens, position)) {\n-      return true;\n-    }  //casuarius\n-    if (wordRepetitionOf(\"catla\", tokens, position)) {\n-      return true;\n-    }  //catla\n-    if (wordRepetitionOf(\"catostomus\", tokens, position)) {\n-      return true;\n-    }  //catostomus\n-    if (wordRepetitionOf(\"cephea\", tokens, position)) {\n-      return true;\n-    }  //cephea\n-    if (wordRepetitionOf(\"cerastes\", tokens, position)) {\n-      return true;\n-    }  //cerastes\n-    if (wordRepetitionOf(\"chaca\", tokens, position)) {\n-      return true;\n-    }  //chaca\n-    if (wordRepetitionOf(\"chalcides\", tokens, position)) {\n-      return true;\n-    }  //chalcides\n-    if (wordRepetitionOf(\"chandramara\", tokens, position)) {\n-      return true;\n-    }  //chandramara\n-    if (wordRepetitionOf(\"chanos\", tokens, position)) {\n-      return true;\n-    }  //chanos\n-    if (wordRepetitionOf(\"chaos\", tokens, position)) {\n-      return true;\n-    }  //chaos\n-    if (wordRepetitionOf(\"chinchilla\", tokens, position)) {\n-      return true;\n-    }  //chinchilla\n-    if (wordRepetitionOf(\"chiropotes\", tokens, position)) {\n-      return true;\n-    }  //chiropotes\n-    if (wordRepetitionOf(\"chitala\", tokens, position)) {\n-      return true;\n-    }  //chitala\n-    if (wordRepetitionOf(\"chromis\", tokens, position)) {\n-      return true;\n-    }  //chromis\n-    if (wordRepetitionOf(\"ciconia\", tokens, position)) {\n-      return true;\n-    }  //ciconia\n-    if (wordRepetitionOf(\"cidaris\", tokens, position)) {\n-      return true;\n-    }  //cidaris\n-    if (wordRepetitionOf(\"cinclus\", tokens, position)) {\n-      return true;\n-    }  //cinclus\n-    if (wordRepetitionOf(\"citellus\", tokens, position)) {\n-      return true;\n-    }  //citellus\n-    if (wordRepetitionOf(\"clelia\", tokens, position)) {\n-      return true;\n-    }  //clelia\n-    if (wordRepetitionOf(\"coccothraustes\", tokens, position)) {\n-      return true;\n-    }  //coccothraustes\n-    if (wordRepetitionOf(\"coccothraustes\", tokens, position)) {\n-      return true;\n-    }  //coccothraustes\n-    if (wordRepetitionOf(\"cochlearius\", tokens, position)) {\n-      return true;\n-    }  //cochlearius\n-    if (wordRepetitionOf(\"coeligena\", tokens, position)) {\n-      return true;\n-    }  //coeligena\n-    if (wordRepetitionOf(\"colius\", tokens, position)) {\n-      return true;\n-    }  //colius\n-    if (wordRepetitionOf(\"columella\", tokens, position)) {\n-      return true;\n-    }  //columella\n-    if (wordRepetitionOf(\"concholepas\", tokens, position)) {\n-      return true;\n-    }  //concholepas\n-    if (wordRepetitionOf(\"concholepas\", tokens, position)) {\n-      return true;\n-    }  //concholepas\n-    if (wordRepetitionOf(\"conger\", tokens, position)) {\n-      return true;\n-    }  //conger\n-    if (wordRepetitionOf(\"conta\", tokens, position)) {\n-      return true;\n-    }  //conta\n-    if (wordRepetitionOf(\"convoluta\", tokens, position)) {\n-      return true;\n-    }  //convoluta\n-    if (wordRepetitionOf(\"cordylus\", tokens, position)) {\n-      return true;\n-    }  //cordylus\n-    if (wordRepetitionOf(\"coscoroba\", tokens, position)) {\n-      return true;\n-    }  //coscoroba\n-    if (wordRepetitionOf(\"cossus\", tokens, position)) {\n-      return true;\n-    }  //cossus\n-    if (wordRepetitionOf(\"cotinga\", tokens, position)) {\n-      return true;\n-    }  //cotinga\n-    if (wordRepetitionOf(\"coturnix\", tokens, position)) {\n-      return true;\n-    }  //coturnix\n-    if (wordRepetitionOf(\"crangon\", tokens, position)) {\n-      return true;\n-    }  //crangon\n-    if (wordRepetitionOf(\"cressida\", tokens, position)) {\n-      return true;\n-    }  //cressida,\n-    if (wordRepetitionOf(\"crex\", tokens, position)) {\n-      return true;\n-    }  //crex\n-    if (wordRepetitionOf(\"cricetus\", tokens, position)) {\n-      return true;\n-    }  //cricetus\n-    if (wordRepetitionOf(\"crocuta\", tokens, position)) {\n-      return true;\n-    }  //crocuta\n-    if (wordRepetitionOf(\"crossoptilon\", tokens, position)) {\n-      return true;\n-    }  //crossoptilon\n-    if (wordRepetitionOf(\"curaeus\", tokens, position)) {\n-      return true;\n-    }  //curaeus\n-    if (wordRepetitionOf(\"cyanicterus\", tokens, position)) {\n-      return true;\n-    }  //cyanicterus\n-    if (wordRepetitionOf(\"cygnus\", tokens, position)) {\n-      return true;\n-    }  //cygnus\n-    if (wordRepetitionOf(\"cymbium\", tokens, position)) {\n-      return true;\n-    }  //cymbium\n-    if (wordRepetitionOf(\"cynoglossus\", tokens, position)) {\n-      return true;\n-    }  //cynoglossus\n-    if (wordRepetitionOf(\"dama\", tokens, position)) {\n-      return true;\n-    }  //dama\n-    if (wordRepetitionOf(\"dario\", tokens, position)) {\n-      return true;\n-    }  //dario\n-    if (wordRepetitionOf(\"dentex\", tokens, position)) {\n-      return true;\n-    }  //dentex\n-    if (wordRepetitionOf(\"devario\", tokens, position)) {\n-      return true;\n-    }  //devario\n-    if (wordRepetitionOf(\"diuca\", tokens, position)) {\n-      return true;\n-    }  //diuca\n-    if (wordRepetitionOf(\"dives\", tokens, position)) {\n-      return true;\n-    }  //dives\n-    if (wordRepetitionOf(\"dolabrifera\", tokens, position)) {\n-      return true;\n-    }  //dolabrifera\n-    if (wordRepetitionOf(\"enhydris\", tokens, position)) {\n-      return true;\n-    }  //enhydris\n-    if (wordRepetitionOf(\"ensifera\", tokens, position)) {\n-      return true;\n-    }  //ensifera\n-    if (wordRepetitionOf(\"ensifera\", tokens, position)) {\n-      return true;\n-    }  //ensifera\n-    if (wordRepetitionOf(\"ensis\", tokens, position)) {\n-      return true;\n-    }  //ensis\n-    if (wordRepetitionOf(\"erythrinus\", tokens, position)) {\n-      return true;\n-    }  //erythrinus\n-    if (wordRepetitionOf(\"extra\", tokens, position)) {\n-      return true;\n-    }  //extra\n-    if (wordRepetitionOf(\"falcipennis\", tokens, position)) {\n-      return true;\n-    }  //falcipennis\n-    if (wordRepetitionOf(\"feroculus\", tokens, position)) {\n-      return true;\n-    }  //feroculus\n-    if (wordRepetitionOf(\"ficus\", tokens, position)) {\n-      return true;\n-    }  //ficus\n-    if (wordRepetitionOf(\"fragum\", tokens, position)) {\n-      return true;\n-    }  //fragum\n-    if (wordRepetitionOf(\"francolinus\", tokens, position)) {\n-      return true;\n-    }  //francolinus\n-    if (wordRepetitionOf(\"furcula\", tokens, position)) {\n-      return true;\n-    }  //furcula\n-    if (wordRepetitionOf(\"gagata\", tokens, position)) {\n-      return true;\n-    }  //gagata\n-    if (wordRepetitionOf(\"galbula\", tokens, position)) {\n-      return true;\n-    }  //galbula\n-    if (wordRepetitionOf(\"gallinago\", tokens, position)) {\n-      return true;\n-    }  //gallinago\n-    if (wordRepetitionOf(\"gallus\", tokens, position)) {\n-      return true;\n-    }  //gallus\n-    if (wordRepetitionOf(\"gazella\", tokens, position)) {\n-      return true;\n-    }  //gazella\n-    if (wordRepetitionOf(\"gazella\", tokens, position)) {\n-      return true;\n-    }  //gazella\n-    if (wordRepetitionOf(\"gemma\", tokens, position)) {\n-      return true;\n-    }  //gemma\n-    if (wordRepetitionOf(\"genetta\", tokens, position)) {\n-      return true;\n-    }  //genetta\n-    if (wordRepetitionOf(\"gerbillus\", tokens, position)) {\n-      return true;\n-    }  //gerbillus\n-    if (wordRepetitionOf(\"gibberulus\", tokens, position)) {\n-      return true;\n-    }  //gibberulus\n-    if (wordRepetitionOf(\"giraffa\", tokens, position)) {\n-      return true;\n-    }  //giraffa\n-    if (wordRepetitionOf(\"glis\", tokens, position)) {\n-      return true;\n-    }  //glis\n-    if (wordRepetitionOf(\"glycimeris\", tokens, position)) {\n-      return true;\n-    }  //glycimeris\n-    if (wordRepetitionOf(\"glyphis\", tokens, position)) {\n-      return true;\n-    }  //glyphis\n-    if (wordRepetitionOf(\"gobio\", tokens, position)) {\n-      return true;\n-    }  //gobio\n-    if (wordRepetitionOf(\"goliathus\", tokens, position)) {\n-      return true;\n-    }  //goliathus\n-    if (wordRepetitionOf(\"gonorynchus\", tokens, position)) {\n-      return true;\n-    }  //gonorynchus\n-    if (wordRepetitionOf(\"gorilla\", tokens, position)) {\n-      return true;\n-    }  //gorilla\n-    if (wordRepetitionOf(\"grapsus\", tokens, position)) {\n-      return true;\n-    }  //grapsus\n-    if (wordRepetitionOf(\"grapsus\", tokens, position)) {\n-      return true;\n-    }  //grapsus\n-    if (wordRepetitionOf(\"grus\", tokens, position)) {\n-      return true;\n-    }  //grus\n-    if (wordRepetitionOf(\"gryllotalpa\", tokens, position)) {\n-      return true;\n-    }  //gryllotalpa\n-    if (wordRepetitionOf(\"guira\", tokens, position)) {\n-      return true;\n-    }  //guira\n-    if (wordRepetitionOf(\"gulo\", tokens, position)) {\n-      return true;\n-    }  //gulo\n-    if (wordRepetitionOf(\"hara\", tokens, position)) {\n-      return true;\n-    }  //hara\n-    if (wordRepetitionOf(\"harpa\", tokens, position)) {\n-      return true;\n-    }  //harpa\n-    if (wordRepetitionOf(\"haustellum\", tokens, position)) {\n-      return true;\n-    }  //haustellum\n-    if (wordRepetitionOf(\"hemilepidotus\", tokens, position)) {\n-      return true;\n-    }  //hemilepidotus\n-    if (wordRepetitionOf(\"heterophyes\", tokens, position)) {\n-      return true;\n-    }  //heterophyes\n-    if (wordRepetitionOf(\"himantopus\", tokens, position)) {\n-      return true;\n-    }  //himantopus\n-    if (wordRepetitionOf(\"himantopus\", tokens, position)) {\n-      return true;\n-    }  //himantopus\n-    if (wordRepetitionOf(\"hippocampus\", tokens, position)) {\n-      return true;\n-    }  //hippocampus\n-    if (wordRepetitionOf(\"hippoglossus\", tokens, position)) {\n-      return true;\n-    }  //hippoglossus\n-    if (wordRepetitionOf(\"hippopus\", tokens, position)) {\n-      return true;\n-    }  //hippopus\n-    if (wordRepetitionOf(\"histrio\", tokens, position)) {\n-      return true;\n-    }  //histrio\n-    if (wordRepetitionOf(\"histrionicus\", tokens, position)) {\n-      return true;\n-    }  //histrionicus\n-    if (wordRepetitionOf(\"hoolock\", tokens, position)) {\n-      return true;\n-    }  //hoolock\n-    if (wordRepetitionOf(\"hucho\", tokens, position)) {\n-      return true;\n-    }  //hucho\n-    if (wordRepetitionOf(\"huso\", tokens, position)) {\n-      return true;\n-    }  //huso\n-    if (wordRepetitionOf(\"hyaena\", tokens, position)) {\n-      return true;\n-    }  //hyaena\n-    if (wordRepetitionOf(\"hypnale\", tokens, position)) {\n-      return true;\n-    }  //hypnale\n-    if (wordRepetitionOf(\"ichthyaetus\", tokens, position)) {\n-      return true;\n-    }  //ichthyaetus\n-    if (wordRepetitionOf(\"icterus\", tokens, position)) {\n-      return true;\n-    }  //icterus\n-    if (wordRepetitionOf(\"idea\", tokens, position)) {\n-      return true;\n-    }  //idea\n-    if (wordRepetitionOf(\"iguana\", tokens, position)) {\n-      return true;\n-    }  //iguana\n-    if (wordRepetitionOf(\"indicator\", tokens, position)) {\n-      return true;\n-    }  //indicator\n-    if (wordRepetitionOf(\"indri\", tokens, position)) {\n-      return true;\n-    }  //indri\n-    if (wordRepetitionOf(\"indri\", tokens, position)) {\n-      return true;\n-    }  //indri\n-    if (wordRepetitionOf(\"jacana\", tokens, position)) {\n-      return true;\n-    }  //jacana\n-    if (wordRepetitionOf(\"jaculus\", tokens, position)) {\n-      return true;\n-    }  //jaculus\n-    if (wordRepetitionOf(\"janthina\", tokens, position)) {\n-      return true;\n-    }  //janthina\n-    if (wordRepetitionOf(\"kachuga\", tokens, position)) {\n-      return true;\n-    }  //kachuga\n-    if (wordRepetitionOf(\"koilofera\", tokens, position)) {\n-      return true;\n-    }  //koilofera\n-    if (wordRepetitionOf(\"lactarius\", tokens, position)) {\n-      return true;\n-    }  //lactarius\n-    if (wordRepetitionOf(\"lagocephalus\", tokens, position)) {\n-      return true;\n-    }  //lagocephalus\n-    if (wordRepetitionOf(\"lagopus\", tokens, position)) {\n-      return true;\n-    }  //lagopus\n-    if (wordRepetitionOf(\"lagopus\", tokens, position)) {\n-      return true;\n-    }  //lagopus\n-    if (wordRepetitionOf(\"lagurus\", tokens, position)) {\n-      return true;\n-    }  //lagurus\n-    if (wordRepetitionOf(\"lambis\", tokens, position)) {\n-      return true;\n-    }  //lambis\n-    if (wordRepetitionOf(\"lemmus\", tokens, position)) {\n-      return true;\n-    }  //lemmus\n-    if (wordRepetitionOf(\"lepadogaster\", tokens, position)) {\n-      return true;\n-    }  //lepadogaster\n-    if (wordRepetitionOf(\"lerwa\", tokens, position)) {\n-      return true;\n-    }  //lerwa\n-    if (wordRepetitionOf(\"leuciscus\", tokens, position)) {\n-      return true;\n-    }  //leuciscus\n-    if (wordRepetitionOf(\"lima\", tokens, position)) {\n-      return true;\n-    }  //lima\n-    if (wordRepetitionOf(\"limanda\", tokens, position)) {\n-      return true;\n-    }  //limanda\n-    if (wordRepetitionOf(\"limanda\", tokens, position)) {\n-      return true;\n-    }  //limanda\n-    if (wordRepetitionOf(\"limosa\", tokens, position)) {\n-      return true;\n-    }  //limosa\n-    if (wordRepetitionOf(\"liparis\", tokens, position)) {\n-      return true;\n-    }  //liparis\n-    if (wordRepetitionOf(\"lithognathus\", tokens, position)) {\n-      return true;\n-    }  //lithognathus\n-    if (wordRepetitionOf(\"lithophaga\", tokens, position)) {\n-      return true;\n-    }  //lithophaga\n-    if (wordRepetitionOf(\"loa\", tokens, position)) {\n-      return true;\n-    }  //loa\n-    if (wordRepetitionOf(\"lota\", tokens, position)) {\n-      return true;\n-    }  //lota\n-    if (wordRepetitionOf(\"luscinia\", tokens, position)) {\n-      return true;\n-    }  //luscinia\n-    if (wordRepetitionOf(\"lutjanus\", tokens, position)) {\n-      return true;\n-    }  //lutjanus\n-    if (wordRepetitionOf(\"lutra\", tokens, position)) {\n-      return true;\n-    }  //lutra\n-    if (wordRepetitionOf(\"lutraria\", tokens, position)) {\n-      return true;\n-    }  //lutraria\n-    if (wordRepetitionOf(\"lynx\", tokens, position)) {\n-      return true;\n-    }  //lynx\n-    if (wordRepetitionOf(\"macrophyllum\", tokens, position)) {\n-      return true;\n-    }  //macrophyllum\n-    if (wordRepetitionOf(\"manacus\", tokens, position)) {\n-      return true;\n-    }  //manacus\n-    if (wordRepetitionOf(\"margaritifera\", tokens, position)) {\n-      return true;\n-    }  //margaritifera\n-    if (wordRepetitionOf(\"marmota\", tokens, position)) {\n-      return true;\n-    }  //marmota\n-    if (wordRepetitionOf(\"martes\", tokens, position)) {\n-      return true;\n-    }  //martes\n-    if (wordRepetitionOf(\"mascarinus\", tokens, position)) {\n-      return true;\n-    }  //mascarinus\n-    if (wordRepetitionOf(\"mashuna\", tokens, position)) {\n-      return true;\n-    }  //mashuna\n-    if (wordRepetitionOf(\"megacephala\", tokens, position)) {\n-      return true;\n-    }  //megacephala\n-    if (wordRepetitionOf(\"melanodera\", tokens, position)) {\n-      return true;\n-    }  //melanodera\n-    if (wordRepetitionOf(\"meles\", tokens, position)) {\n-      return true;\n-    }  //meles\n-    if (wordRepetitionOf(\"melo\", tokens, position)) {\n-      return true;\n-    }  //melo\n-    if (wordRepetitionOf(\"melolontha\", tokens, position)) {\n-      return true;\n-    }  //melolontha\n-    if (wordRepetitionOf(\"melolontha\", tokens, position)) {\n-      return true;\n-    }  //melolontha\n-    if (wordRepetitionOf(\"melongena\", tokens, position)) {\n-      return true;\n-    }  //melongena\n-    if (wordRepetitionOf(\"menidia\", tokens, position)) {\n-      return true;\n-    }  //menidia\n-    if (wordRepetitionOf(\"mephitis\", tokens, position)) {\n-      return true;\n-    }  //mephitis\n-    if (wordRepetitionOf(\"mercenaria\", tokens, position)) {\n-      return true;\n-    }  //mercenaria\n-    if (wordRepetitionOf(\"meretrix\", tokens, position)) {\n-      return true;\n-    }  //meretrix\n-    if (wordRepetitionOf(\"merluccius\", tokens, position)) {\n-      return true;\n-    }  //merluccius\n-    if (wordRepetitionOf(\"meza\", tokens, position)) {\n-      return true;\n-    }  //meza\n-    if (wordRepetitionOf(\"microstoma\", tokens, position)) {\n-      return true;\n-    }  //microstoma\n-    if (wordRepetitionOf(\"milvus\", tokens, position)) {\n-      return true;\n-    }  //milvus\n-    if (wordRepetitionOf(\"milvus\", tokens, position)) {\n-      return true;\n-    }  //milvus\n-    if (wordRepetitionOf(\"mitella\", tokens, position)) {\n-      return true;\n-    }  //mitella\n-    if (wordRepetitionOf(\"mitra\", tokens, position)) {\n-      return true;\n-    }  //mitra\n-    if (wordRepetitionOf(\"mitu\", tokens, position)) {\n-      return true;\n-    }  //mitu\n-    if (wordRepetitionOf(\"modiolus\", tokens, position)) {\n-      return true;\n-    }  //modiolus\n-    if (wordRepetitionOf(\"modulus\", tokens, position)) {\n-      return true;\n-    }  //modulus\n-    if (wordRepetitionOf(\"mola\", tokens, position)) {\n-      return true;\n-    }  //mola\n-    if (wordRepetitionOf(\"molossus\", tokens, position)) {\n-      return true;\n-    }  //molossus\n-    if (wordRepetitionOf(\"molva\", tokens, position)) {\n-      return true;\n-    }  //molva\n-    if (wordRepetitionOf(\"monachus\", tokens, position)) {\n-      return true;\n-    }  //monachus\n-    if (wordRepetitionOf(\"moniliformis\", tokens, position)) {\n-      return true;\n-    }  //moniliformis\n-    if (wordRepetitionOf(\"mops\", tokens, position)) {\n-      return true;\n-    }  //mops\n-    if (wordRepetitionOf(\"mustelus\", tokens, position)) {\n-      return true;\n-    }  //mustelus\n-    if (wordRepetitionOf(\"myaka\", tokens, position)) {\n-      return true;\n-    }  //myaka\n-    if (wordRepetitionOf(\"myospalax\", tokens, position)) {\n-      return true;\n-    }  //myospalax\n-    if (wordRepetitionOf(\"myotis\", tokens, position)) {\n-      return true;\n-    }  //myotis\n-    if (wordRepetitionOf(\"myotis\", tokens, position)) {\n-      return true;\n-    }  //myotis\n-    if (wordRepetitionOf(\"naja\", tokens, position)) {\n-      return true;\n-    }  //naja\n-    if (wordRepetitionOf(\"naja\", tokens, position)) {\n-      return true;\n-    }  //naja\n-    if (wordRepetitionOf(\"nangra\", tokens, position)) {\n-      return true;\n-    }  //nangra\n-    if (wordRepetitionOf(\"nasua\", tokens, position)) {\n-      return true;\n-    }  //nasua\n-    if (wordRepetitionOf(\"natrix\", tokens, position)) {\n-      return true;\n-    }  //natrix\n-    if (wordRepetitionOf(\"neita\", tokens, position)) {\n-      return true;\n-    }  //neita\n-    if (wordRepetitionOf(\"niviventer\", tokens, position)) {\n-      return true;\n-    }  //niviventer\n-    if (wordRepetitionOf(\"notopterus\", tokens, position)) {\n-      return true;\n-    }  //notopterus\n-    if (wordRepetitionOf(\"nycticorax\", tokens, position)) {\n-      return true;\n-    }  //nycticorax\n-    if (wordRepetitionOf(\"nycticorax\", tokens, position)) {\n-      return true;\n-    }  //nycticorax\n-    if (wordRepetitionOf(\"oenanthe\", tokens, position)) {\n-      return true;\n-    }  //oenanthe\n-    if (wordRepetitionOf(\"ogasawarana\", tokens, position)) {\n-      return true;\n-    }  //ogasawarana\n-    if (wordRepetitionOf(\"oliva\", tokens, position)) {\n-      return true;\n-    }  //oliva\n-    if (wordRepetitionOf(\"ophioscincus\", tokens, position)) {\n-      return true;\n-    }  //ophioscincus\n-    if (wordRepetitionOf(\"oplopomus\", tokens, position)) {\n-      return true;\n-    }  //oplopomus\n-    if (wordRepetitionOf(\"oreotragus\", tokens, position)) {\n-      return true;\n-    }  //oreotragus\n-    if (wordRepetitionOf(\"oriolus\", tokens, position)) {\n-      return true;\n-    }  //oriolus\n-    if (wordRepetitionOf(\"pagrus\", tokens, position)) {\n-      return true;\n-    }  //pagrus\n-    if (wordRepetitionOf(\"pangasius\", tokens, position)) {\n-      return true;\n-    }  //pangasius\n-    if (wordRepetitionOf(\"papio\", tokens, position)) {\n-      return true;\n-    }  //papio\n-    if (wordRepetitionOf(\"pauxi\", tokens, position)) {\n-      return true;\n-    }  //pauxi\n-    if (wordRepetitionOf(\"perdix\", tokens, position)) {\n-      return true;\n-    }  //perdix\n-    if (wordRepetitionOf(\"periphylla\", tokens, position)) {\n-      return true;\n-    }  //periphylla\n-    if (wordRepetitionOf(\"perna\", tokens, position)) {\n-      return true;\n-    }  //perna\n-    if (wordRepetitionOf(\"petaurista\", tokens, position)) {\n-      return true;\n-    }  //petaurista\n-    if (wordRepetitionOf(\"petronia\", tokens, position)) {\n-      return true;\n-    }  //petronia\n-    if (wordRepetitionOf(\"phocoena\", tokens, position)) {\n-      return true;\n-    }  //phocoena\n-    if (wordRepetitionOf(\"phoenicurus\", tokens, position)) {\n-      return true;\n-    }  //phoenicurus\n-    if (wordRepetitionOf(\"phoxinus\", tokens, position)) {\n-      return true;\n-    }  //phoxinus\n-    if (wordRepetitionOf(\"phycis\", tokens, position)) {\n-      return true;\n-    }  //phycis\n-    if (wordRepetitionOf(\"pica\", tokens, position)) {\n-      return true;\n-    }  //pica\n-    if (wordRepetitionOf(\"pipa\", tokens, position)) {\n-      return true;\n-    }  //pipa\n-    if (wordRepetitionOf(\"pipile\", tokens, position)) {\n-      return true;\n-    }  //pipile\n-    if (wordRepetitionOf(\"pipistrellus\", tokens, position)) {\n-      return true;\n-    }  //pipistrellus\n-    if (wordRepetitionOf(\"pipra\", tokens, position)) {\n-      return true;\n-    }  //pipra\n-    if (wordRepetitionOf(\"pithecia\", tokens, position)) {\n-      return true;\n-    }  //pithecia\n-    if (wordRepetitionOf(\"planorbis\", tokens, position)) {\n-      return true;\n-    }  //planorbis\n-    if (wordRepetitionOf(\"plica\", tokens, position)) {\n-      return true;\n-    }  //plica\n-    if (wordRepetitionOf(\"poliocephalus\", tokens, position)) {\n-      return true;\n-    }  //poliocephalus\n-    if (wordRepetitionOf(\"pollachius\", tokens, position)) {\n-      return true;\n-    }  //pollachius\n-    if (wordRepetitionOf(\"pollicipes\", tokens, position)) {\n-      return true;\n-    }  //pollicipes\n-    if (wordRepetitionOf(\"porites\", tokens, position)) {\n-      return true;\n-    }  //porites\n-    if (wordRepetitionOf(\"porphyrio\", tokens, position)) {\n-      return true;\n-    }  //porphyrio\n-    if (wordRepetitionOf(\"porphyrolaema\", tokens, position)) {\n-      return true;\n-    }  //porphyrolaema\n-    if (wordRepetitionOf(\"porpita\", tokens, position)) {\n-      return true;\n-    }  //porpita\n-    if (wordRepetitionOf(\"porzana\", tokens, position)) {\n-      return true;\n-    }  //porzana\n-    if (wordRepetitionOf(\"pristis\", tokens, position)) {\n-      return true;\n-    }  //pristis\n-    if (wordRepetitionOf(\"pseudobagarius\", tokens, position)) {\n-      return true;\n-    }  //pseudobagarius\n-    if (wordRepetitionOf(\"pudu\", tokens, position)) {\n-      return true;\n-    }  //pudu\n-    if (wordRepetitionOf(\"puffinus\", tokens, position)) {\n-      return true;\n-    }  //puffinus\n-    if (wordRepetitionOf(\"pungitius\", tokens, position)) {\n-      return true;\n-    }  //pungitius\n-    if (wordRepetitionOf(\"pyrrhocorax\", tokens, position)) {\n-      return true;\n-    }  //pyrrhocorax\n-    if (wordRepetitionOf(\"pyrrhula\", tokens, position)) {\n-      return true;\n-    }  //pyrrhula\n-    if (wordRepetitionOf(\"quadrula\", tokens, position)) {\n-      return true;\n-    }  //quadrula\n-    if (wordRepetitionOf(\"quelea\", tokens, position)) {\n-      return true;\n-    }  //quelea\n-    if (wordRepetitionOf(\"rama\", tokens, position)) {\n-      return true;\n-    }  //rama\n-    if (wordRepetitionOf(\"ranina\", tokens, position)) {\n-      return true;\n-    }  //ranina\n-    if (wordRepetitionOf(\"rapa\", tokens, position)) {\n-      return true;\n-    }  //rapa\n-    if (wordRepetitionOf(\"rasbora\", tokens, position)) {\n-      return true;\n-    }  //rasbora\n-    if (wordRepetitionOf(\"rattus\", tokens, position)) {\n-      return true;\n-    }  //rattus\n-    if (wordRepetitionOf(\"redunca\", tokens, position)) {\n-      return true;\n-    }  //redunca\n-    if (wordRepetitionOf(\"regulus\", tokens, position)) {\n-      return true;\n-    }  //regulus\n-    if (wordRepetitionOf(\"remora\", tokens, position)) {\n-      return true;\n-    }  //remora\n-    if (wordRepetitionOf(\"retropinna\", tokens, position)) {\n-      return true;\n-    }  //retropinna\n-    if (wordRepetitionOf(\"rhinobatos\", tokens, position)) {\n-      return true;\n-    }  //rhinobatos\n-    if (wordRepetitionOf(\"riparia\", tokens, position)) {\n-      return true;\n-    }  //riparia\n-    if (wordRepetitionOf(\"rita\", tokens, position)) {\n-      return true;\n-    }  //rita\n-    if (wordRepetitionOf(\"rupicapra\", tokens, position)) {\n-      return true;\n-    }  //rupicapra\n-    if (wordRepetitionOf(\"rupicola\", tokens, position)) {\n-      return true;\n-    }  //rupicola\n-    if (wordRepetitionOf(\"rutilus\", tokens, position)) {\n-      return true;\n-    }  //rutilus\n-    if (wordRepetitionOf(\"saccolaimus\", tokens, position)) {\n-      return true;\n-    }  //saccolaimus\n-    if (wordRepetitionOf(\"salamandra\", tokens, position)) {\n-      return true;\n-    }  //salamandra\n-    if (wordRepetitionOf(\"sarda\", tokens, position)) {\n-      return true;\n-    }  //sarda\n-    if (wordRepetitionOf(\"scalpellum\", tokens, position)) {\n-      return true;\n-    }  //scalpellum\n-    if (wordRepetitionOf(\"scincus\", tokens, position)) {\n-      return true;\n-    }  //scincus\n-    if (wordRepetitionOf(\"scolytus\", tokens, position)) {\n-      return true;\n-    }  //scolytus\n-    if (wordRepetitionOf(\"sephanoides\", tokens, position)) {\n-      return true;\n-    }  //sephanoides\n-    if (wordRepetitionOf(\"serinus\", tokens, position)) {\n-      return true;\n-    }  //serinus\n-    if (wordRepetitionOf(\"sodreana\", tokens, position)) {\n-      return true;\n-    }  //sodreana\n-    if (wordRepetitionOf(\"solea\", tokens, position)) {\n-      return true;\n-    }  //solea\n-    if (wordRepetitionOf(\"sphyraena\", tokens, position)) {\n-      return true;\n-    }  //sphyraena\n-    if (wordRepetitionOf(\"spinachia\", tokens, position)) {\n-      return true;\n-    }  //spinachia\n-    if (wordRepetitionOf(\"spirorbis\", tokens, position)) {\n-      return true;\n-    }  //spirorbis\n-    if (wordRepetitionOf(\"spirula\", tokens, position)) {\n-      return true;\n-    }  //spirula\n-    if (wordRepetitionOf(\"sprattus\", tokens, position)) {\n-      return true;\n-    }  //sprattus\n-    if (wordRepetitionOf(\"squatina\", tokens, position)) {\n-      return true;\n-    }  //squatina\n-    if (wordRepetitionOf(\"staphylaea\", tokens, position)) {\n-      return true;\n-    }  //staphylaea\n-    if (wordRepetitionOf(\"suiriri\", tokens, position)) {\n-      return true;\n-    }  //suiriri\n-    if (wordRepetitionOf(\"sula\", tokens, position)) {\n-      return true;\n-    }  //sula\n-    if (wordRepetitionOf(\"suta\", tokens, position)) {\n-      return true;\n-    }  //suta\n-    if (wordRepetitionOf(\"synodus\", tokens, position)) {\n-      return true;\n-    }  //synodus\n-    if (wordRepetitionOf(\"tadorna\", tokens, position)) {\n-      return true;\n-    }  //tadorna\n-    if (wordRepetitionOf(\"tandanus\", tokens, position)) {\n-      return true;\n-    }  //tandanus\n-    if (wordRepetitionOf(\"tchagra\", tokens, position)) {\n-      return true;\n-    }  //tchagra\n-    if (wordRepetitionOf(\"telescopium\", tokens, position)) {\n-      return true;\n-    }  //telescopium\n-    if (wordRepetitionOf(\"temnurus\", tokens, position)) {\n-      return true;\n-    }  //temnurus\n-    if (wordRepetitionOf(\"terebellum\", tokens, position)) {\n-      return true;\n-    }  //terebellum\n-    if (wordRepetitionOf(\"tetradactylus\", tokens, position)) {\n-      return true;\n-    }  //tetradactylus\n-    if (wordRepetitionOf(\"tetrax\", tokens, position)) {\n-      return true;\n-    }  //tetrax\n-    if (wordRepetitionOf(\"therezopolis\", tokens, position)) {\n-      return true;\n-    }  //therezopolis\n-    if (wordRepetitionOf(\"thymallus\", tokens, position)) {\n-      return true;\n-    }  //thymallus\n-    if (wordRepetitionOf(\"tibicen\", tokens, position)) {\n-      return true;\n-    }  //tibicen\n-    if (wordRepetitionOf(\"tinca\", tokens, position)) {\n-      return true;\n-    }  //tinca\n-    if (wordRepetitionOf(\"todus\", tokens, position)) {\n-      return true;\n-    }  //todus\n-    if (wordRepetitionOf(\"torpedo\", tokens, position)) {\n-      return true;\n-    }  //torpedo\n-    if (wordRepetitionOf(\"trachurus\", tokens, position)) {\n-      return true;\n-    }  //trachurus\n-    if (wordRepetitionOf(\"trachycorystes\", tokens, position)) {\n-      return true;\n-    }  //trachycorystes\n-    if (wordRepetitionOf(\"trachyrinchus\", tokens, position)) {\n-      return true;\n-    }  //trachyrinchus\n-    if (wordRepetitionOf(\"tricornis\", tokens, position)) {\n-      return true;\n-    }  //tricornis\n-    if (wordRepetitionOf(\"troglodytes\", tokens, position)) {\n-      return true;\n-    }  //troglodytes\n-    if (wordRepetitionOf(\"tropheops\", tokens, position)) {\n-      return true;\n-    }  //tropheops\n-    if (wordRepetitionOf(\"tubifex\", tokens, position)) {\n-      return true;\n-    }  //tubifex\n-    if (wordRepetitionOf(\"tyrannus\", tokens, position)) {\n-      return true;\n-    }  //tyrannus\n-    if (wordRepetitionOf(\"umbraculum\", tokens, position)) {\n-      return true;\n-    }  //umbraculum\n-    if (wordRepetitionOf(\"uncia\", tokens, position)) {\n-      return true;\n-    }  //uncia\n-    if (wordRepetitionOf(\"vanellus\", tokens, position)) {\n-      return true;\n-    }  //vanellus\n-    if (wordRepetitionOf(\"vanellus\", tokens, position)) {\n-      return true;\n-    }  //vanellus\n-    if (wordRepetitionOf(\"velella\", tokens, position)) {\n-      return true;\n-    }  //velella\n-    if (wordRepetitionOf(\"velella\", tokens, position)) {\n-      return true;\n-    }  //velella\n-    if (wordRepetitionOf(\"velutina\", tokens, position)) {\n-      return true;\n-    }  //velutina\n-    if (wordRepetitionOf(\"vicugna\", tokens, position)) {\n-      return true;\n-    }  //vicugna\n-    if (wordRepetitionOf(\"villosa\", tokens, position)) {\n-      return true;\n-    }  //villosa\n-    if (wordRepetitionOf(\"vimba\", tokens, position)) {\n-      return true;\n-    }  //vimba\n-    if (wordRepetitionOf(\"viviparus\", tokens, position)) {\n-      return true;\n-    }  //viviparus\n-    if (wordRepetitionOf(\"volva\", tokens, position)) {\n-      return true;\n-    }  //volva\n-    if (wordRepetitionOf(\"vulpes\", tokens, position)) {\n-      return true;\n-    }  //vulpes\n-    if (wordRepetitionOf(\"vulpes\", tokens, position)) {\n-      return true;\n-    }  //vulpes\n-    if (wordRepetitionOf(\"xanthocephalus\", tokens, position)) {\n-      return true;\n-    }  //xanthocephalus\n-    if (wordRepetitionOf(\"xanthostigma\", tokens, position)) {\n-      return true;\n-    }  //xanthostigma\n-    if (wordRepetitionOf(\"xenopirostris\", tokens, position)) {\n-      return true;\n-    }  //xenopirostris\n-    if (wordRepetitionOf(\"ypiranga\", tokens, position)) {\n-      return true;\n-    }  //ypiranga\n-    if (wordRepetitionOf(\"zebrus\", tokens, position)) {\n-      return true;\n-    }  //zebrus\n-    if (wordRepetitionOf(\"zera\", tokens, position)) {\n-      return true;\n-    }  //zera\n-    if (wordRepetitionOf(\"zingel\", tokens, position)) {\n-      return true;\n-    }  //zingel\n-    if (wordRepetitionOf(\"zingha\", tokens, position)) {\n-      return true;\n-    }  //zingha\n-    if (wordRepetitionOf(\"zoma\", tokens, position)) {\n-      return true;\n-    }  //zoma\n-    if (wordRepetitionOf(\"zonia\", tokens, position)) {\n-      return true;\n-    }  //zonia\n-    if (wordRepetitionOf(\"zungaro\", tokens, position)) {\n-      return true;\n-    }  //zungaro\n-    if (wordRepetitionOf(\"zygoneura\", tokens, position)) {\n-      return true;\n-    }  //zygoneura\n+    if (isGenus(tokens[position - 1]) && isSpecies(tokens[position])) {\n+        return true;\n+    }\n     return false;\n   }\n \n@@ -1218,5 +80,12 @@ private boolean posIsIn(AnalyzedTokenReadings[] tokens, int position, String...\n   private boolean wordRepetitionOf(String word, AnalyzedTokenReadings[] tokens, int position) {\n     return position > 0 && tokens[position - 1].getToken().equals(word) && tokens[position].getToken().equals(word);\n   }\n+  private boolean isGenus(AnalyzedTokenReadings token) {\n+    return TAUTONYMS_GENUS.matcher(token.getToken()).matches();\n+  }\n+  private boolean isSpecies(AnalyzedTokenReadings token) {\n+    return TAUTONYMS_SPECIES.matcher(token.getToken()).matches();\n+  }\n+\n \n }",
      "parent_sha": "6e44fc4ea46b484d9b6ea0f3f5de98f8c2107877"
    }
  },
  {
    "oid": "58d896323f2cac7104104997ee7b2ed09b22fc0c",
    "message": "[LO extension] solves issue #10348",
    "date": "2024-02-26T12:07:23Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/58d896323f2cac7104104997ee7b2ed09b22fc0c",
    "details": {
      "sha": "d2fd3e196feeb66b23097c8226241ef7efd6c8cd",
      "filename": "languagetool-office-extension/src/main/java/org/languagetool/openoffice/LtToolbar.java",
      "status": "modified",
      "additions": 140,
      "deletions": 70,
      "changes": 210,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/58d896323f2cac7104104997ee7b2ed09b22fc0c/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FLtToolbar.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/58d896323f2cac7104104997ee7b2ed09b22fc0c/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FLtToolbar.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FLtToolbar.java?ref=58d896323f2cac7104104997ee7b2ed09b22fc0c",
      "patch": "@@ -25,6 +25,7 @@\n import org.languagetool.gui.Configuration;\n \n import com.sun.star.awt.Point;\n+import com.sun.star.awt.XWindow;\n import com.sun.star.beans.PropertyValue;\n import com.sun.star.beans.XPropertySet;\n import com.sun.star.container.NoSuchElementException;\n@@ -39,7 +40,6 @@\n import com.sun.star.lang.WrappedTargetException;\n import com.sun.star.lang.XComponent;\n import com.sun.star.lang.XMultiComponentFactory;\n-import com.sun.star.ui.DockingArea;\n import com.sun.star.ui.ItemStyle;\n import com.sun.star.ui.ItemType;\n import com.sun.star.ui.UIElementType;\n@@ -69,7 +69,6 @@ public class LtToolbar {\n   \n   public void makeToolbar() {\n     try {\n-      Configuration config = document.getMultiDocumentsHandler().getConfiguration();\n       XUIConfigurationManager confMan = getUIConfigManagerDoc(xContext);\n       if (confMan == null) {\n         MessageHandler.printToLogFile(\"Cannot create configuration manager\");\n@@ -78,65 +77,111 @@ public void makeToolbar() {\n       \n       String toolbarName = LT_TOOLBAR_URL;\n       \n-      XIndexContainer elementsContainer = confMan.createSettings();\n-\n       boolean hasStatisticalStyleRules;\n       if (document.getMultiDocumentsHandler().isBackgroundCheckOff()) {\n         hasStatisticalStyleRules = false;\n       } else {\n         hasStatisticalStyleRules = OfficeTools.hasStatisticalStyleRules(document.getLanguage());\n       }\n-      \n-      int j = 0;\n-      PropertyValue[] itemProps = makeBarItem(LtMenus.LT_NEXT_ERROR_COMMAND, MESSAGES.getString(\"loMenuNextError\"));\n-      elementsContainer.insertByIndex(j, itemProps);\n-      j++;\n-      itemProps = makeBarItem(LtMenus.LT_CHECKDIALOG_COMMAND, MESSAGES.getString(\"checkTextShortDesc\"));\n-      elementsContainer.insertByIndex(j, itemProps);\n-      j++;\n-      itemProps = makeBarItem(LtMenus.LT_CHECKAGAINDIALOG_COMMAND, MESSAGES.getString(\"loMenuGrammarCheckAgain\"));\n-      elementsContainer.insertByIndex(j, itemProps);\n-      j++;\n-      itemProps = makeBarItem(LtMenus.LT_REFRESH_CHECK_COMMAND, MESSAGES.getString(\"loContextMenuRefreshCheck\"));\n-      elementsContainer.insertByIndex(j, itemProps);\n-      if (hasStatisticalStyleRules) {\n+      XWindow window = getWindow();\n+      if (window != null) {\n+        window.setVisible(false);\n+      }\n+      if (!confMan.hasSettings(toolbarName)) {\n+        XIndexContainer elementsContainer = confMan.createSettings();\n+        int j = 0;\n+        PropertyValue[] itemProps = makeBarItem(LtMenus.LT_NEXT_ERROR_COMMAND, MESSAGES.getString(\"loMenuNextError\"));\n+        elementsContainer.insertByIndex(j, itemProps);\n         j++;\n-        itemProps = makeBarItem(LtMenus.LT_STATISTICAL_ANALYSES_COMMAND, MESSAGES.getString(\"loStatisticalAnalysis\"));\n+        itemProps = makeBarItem(LtMenus.LT_CHECKDIALOG_COMMAND, MESSAGES.getString(\"checkTextShortDesc\"));\n         elementsContainer.insertByIndex(j, itemProps);\n-      }\n-      j++;\n-      if (document.getMultiDocumentsHandler().isBackgroundCheckOff()) {\n-        itemProps = makeBarItem(LtMenus.LT_BACKGROUND_CHECK_ON_COMMAND, MESSAGES.getString(\"loMenuEnableBackgroundCheck\"));\n-      } else {\n-        itemProps = makeBarItem(LtMenus.LT_BACKGROUND_CHECK_OFF_COMMAND, MESSAGES.getString(\"loMenuDisableBackgroundCheck\"));\n-      }\n-      elementsContainer.insertByIndex(j, itemProps);\n-      j++;\n-      itemProps = makeBarItem(LtMenus.LT_RESET_IGNORE_PERMANENT_COMMAND, MESSAGES.getString(\"loMenuResetIgnorePermanent\"));\n-      elementsContainer.insertByIndex(j, itemProps);\n-/*        TODO: Add sub toolbars:\n-      if(!document.getMultiDocumentsHandler().getDisabledRulesMap(null).isEmpty()) {\n         j++;\n-        itemProps = makeBarItem(LtMenus.LT_ACTIVATE_RULES_COMMAND, MESSAGES.getString(\"loContextMenuActivateRule\"));\n+        itemProps = makeBarItem(LtMenus.LT_CHECKAGAINDIALOG_COMMAND, MESSAGES.getString(\"loMenuGrammarCheckAgain\"));\n         elementsContainer.insertByIndex(j, itemProps);\n-      }\n-      if(config.getDefinedProfiles().size() > 1) {\n         j++;\n-        itemProps = makeBarItem(LtMenus.LT_PROFILES_COMMAND, MESSAGES.getString(\"loMenuChangeProfiles\"));\n+        itemProps = makeBarItem(LtMenus.LT_REFRESH_CHECK_COMMAND, MESSAGES.getString(\"loContextMenuRefreshCheck\"));\n         elementsContainer.insertByIndex(j, itemProps);\n-      }\n-*/\n-      j++;\n-      itemProps = makeBarItem(LtMenus.LT_OPTIONS_COMMAND, MESSAGES.getString(\"loContextMenuOptions\"));\n-      elementsContainer.insertByIndex(j, itemProps);\n-      j++;\n-      itemProps = makeBarItem(LtMenus.LT_ABOUT_COMMAND, MESSAGES.getString(\"loContextMenuAbout\"));\n-      elementsContainer.insertByIndex(j, itemProps);\n-      \n-      if (confMan.hasSettings(toolbarName)) {\n-        confMan.replaceSettings(toolbarName, elementsContainer);\n-      } else {\n+        if (hasStatisticalStyleRules) {\n+          j++;\n+          itemProps = makeBarItem(LtMenus.LT_STATISTICAL_ANALYSES_COMMAND, MESSAGES.getString(\"loStatisticalAnalysis\"));\n+          elementsContainer.insertByIndex(j, itemProps);\n+        }\n+        j++;\n+        if (document.getMultiDocumentsHandler().isBackgroundCheckOff()) {\n+          itemProps = makeBarItem(LtMenus.LT_BACKGROUND_CHECK_ON_COMMAND, MESSAGES.getString(\"loMenuEnableBackgroundCheck\"));\n+        } else {\n+          itemProps = makeBarItem(LtMenus.LT_BACKGROUND_CHECK_OFF_COMMAND, MESSAGES.getString(\"loMenuDisableBackgroundCheck\"));\n+        }\n+        elementsContainer.insertByIndex(j, itemProps);\n+        j++;\n+        itemProps = makeBarItem(LtMenus.LT_RESET_IGNORE_PERMANENT_COMMAND, MESSAGES.getString(\"loMenuResetIgnorePermanent\"));\n+        elementsContainer.insertByIndex(j, itemProps);\n+  /*        TODO: Add sub toolbars:\n+        if(!document.getMultiDocumentsHandler().getDisabledRulesMap(null).isEmpty()) {\n+          j++;\n+          itemProps = makeBarItem(LtMenus.LT_ACTIVATE_RULES_COMMAND, MESSAGES.getString(\"loContextMenuActivateRule\"));\n+          elementsContainer.insertByIndex(j, itemProps);\n+        }\n+        if(config.getDefinedProfiles().size() > 1) {\n+          j++;\n+          itemProps = makeBarItem(LtMenus.LT_PROFILES_COMMAND, MESSAGES.getString(\"loMenuChangeProfiles\"));\n+          elementsContainer.insertByIndex(j, itemProps);\n+        }\n+  */\n+        j++;\n+        itemProps = makeBarItem(LtMenus.LT_OPTIONS_COMMAND, MESSAGES.getString(\"loContextMenuOptions\"));\n+        elementsContainer.insertByIndex(j, itemProps);\n+        j++;\n+        itemProps = makeBarItem(LtMenus.LT_ABOUT_COMMAND, MESSAGES.getString(\"loContextMenuAbout\"));\n+        elementsContainer.insertByIndex(j, itemProps);\n+\n         confMan.insertSettings(toolbarName, elementsContainer);\n+\n+      } else {\n+        boolean changed = false;\n+        XIndexAccess settings = confMan.getSettings(toolbarName, true);\n+        XIndexContainer elementsContainer = UnoRuntime.queryInterface(XIndexContainer.class, settings);\n+        PropertyValue[] itemProps = null;\n+        int j = getIndexOfItem(elementsContainer, LtMenus.LT_STATISTICAL_ANALYSES_COMMAND);\n+        if (hasStatisticalStyleRules && j < 0) {\n+          itemProps = makeBarItem(LtMenus.LT_STATISTICAL_ANALYSES_COMMAND, MESSAGES.getString(\"loStatisticalAnalysis\"));\n+          elementsContainer.insertByIndex(4, itemProps);\n+          changed = true;\n+        } else if (!hasStatisticalStyleRules && j >= 0) {\n+          elementsContainer.removeByIndex(j); \n+          changed = true;\n+        }\n+        itemProps = null;\n+        int i = getIndexOfItem(elementsContainer, LtMenus.LT_BACKGROUND_CHECK_ON_COMMAND);\n+        j = getIndexOfItem(elementsContainer, LtMenus.LT_BACKGROUND_CHECK_OFF_COMMAND);\n+        if (document.getMultiDocumentsHandler().isBackgroundCheckOff()) {\n+          if (j < 0) {\n+            j = 4;\n+          } else {\n+            elementsContainer.removeByIndex(j);\n+            changed = true;\n+          }\n+          if (i < 0) {\n+            itemProps = makeBarItem(LtMenus.LT_BACKGROUND_CHECK_ON_COMMAND, MESSAGES.getString(\"loMenuEnableBackgroundCheck\"));\n+            elementsContainer.insertByIndex(j, itemProps);\n+            changed = true;\n+          }\n+        } else {\n+          if (i < 0) {\n+            i = 4;\n+          } else {\n+            elementsContainer.removeByIndex(i);\n+            changed = true;\n+          }\n+          if (j < 0) {\n+            itemProps = makeBarItem(LtMenus.LT_BACKGROUND_CHECK_OFF_COMMAND, MESSAGES.getString(\"loMenuDisableBackgroundCheck\"));\n+            elementsContainer.insertByIndex(i, itemProps);\n+            changed = true;\n+          }\n+        }\n+        if (changed) {\n+          confMan.replaceSettings(toolbarName, elementsContainer);\n+        }\n       }\n /*        \n       setToolbarName(confMan, LT_TOOLBAR_URL, \"LanguageTool\");\n@@ -200,22 +245,31 @@ public void makeToolbar() {\n \n //      MessageHandler.printToLogFile(\"XUIConfigurationManager created!\");\n \n-    } catch (java.lang.Exception e) {\n+      if (window != null) {\n+        window.setVisible(true);\n+      }\n+\n+    } catch (Throwable e) {\n       MessageHandler.printException(e);\n     }\n   }\n-\n-  private void setToolbarName(XUIConfigurationManager confMan, String toolbarUrl, String name) \n-                  throws IllegalArgumentException {\n-    for (PropertyValue[] propValList : confMan.getUIElementsInfo(UIElementType.TOOLBAR)) {\n-      if (\"ResourceURL\".equals(propValList[0].Name) && toolbarUrl.equals(propValList[0].Value)\n-          && \"UIName\".equals(propValList[1].Name)) {\n-        propValList[1].Value = new String(name);\n-        return;\n+  \n+  private int getIndexOfItem (XIndexContainer elementsContainer, String command) throws Throwable {\n+    for (int i = 0; i < elementsContainer.getCount(); i++) {\n+      PropertyValue[] itemProps = (PropertyValue[]) elementsContainer.getByIndex(i);\n+      for (PropertyValue prop : itemProps) {\n+        if (\"CommandURL\".equals(prop.Name)) {\n+          if (command.equals(prop.Value)) {\n+            return i;\n+          } else {\n+            break;\n+          }\n+        }\n       }\n     }\n+    return -1;\n   }\n-  \n+\n   private PropertyValue[] makeBarItem(String cmd, String itemName) {\n     // propertiees for a toolbar item using a name and an image\n     // problem: image does not appear next to text on toolbar\n@@ -257,20 +311,36 @@ private XUIConfigurationManager getUIConfigManagerDoc(XComponentContext xContext\n     return xSupplier.getUIConfigurationManager(WRITER_SERVICE);\n   }\n   \n+  private XFrame getFrame() {\n+    XComponent xComponent = OfficeTools.getCurrentComponent(xContext);\n+    if (xComponent == null) {\n+      MessageHandler.printToLogFile(\"SingleDocument: setDokumentListener: XComponent not found!\");\n+      return null;\n+    }\n+    XModel xModel = UnoRuntime.queryInterface(XModel.class, xComponent);\n+    if (xModel == null) {\n+      MessageHandler.printToLogFile(\"SingleDocument: setDokumentListener: XModel not found!\");\n+      return null;\n+    }\n+    XController xController = xModel.getCurrentController();\n+    if (xController == null) {\n+      MessageHandler.printToLogFile(\"SingleDocument: setDokumentListener: XController not found!\");\n+      return null;\n+    }\n+    return xController.getFrame();\n+  }\n+\n+  private XWindow getWindow() {\n+    XFrame frame = getFrame();\n+    if (frame == null) {\n+      return null;\n+    }\n+    return frame.getComponentWindow();\n+  }\n+\n   private XLayoutManager getLayoutManager() {\n     try {\n-      XComponent xComponent = OfficeTools.getCurrentComponent(xContext);\n-      XModel xModel = UnoRuntime.queryInterface(XModel.class, xComponent);\n-      if (xModel == null) {\n-        MessageHandler.printToLogFile(\"SingleDocument: setDokumentListener: XModel not found!\");\n-        return null;\n-      }\n-      XController xController = xModel.getCurrentController();\n-      if (xController == null) {\n-        MessageHandler.printToLogFile(\"SingleDocument: setDokumentListener: XController not found!\");\n-        return null;\n-      }\n-      XFrame frame = xController.getFrame();\n+      XFrame frame = getFrame();\n       if (frame == null) {\n         return null;\n       }",
      "parent_sha": "5a63101f15a3e9668e10cb37f78f6df61a1c1584"
    }
  },
  {
    "oid": "a6d5f93bc0078a7ca151e539d5c443345f94e9a3",
    "message": "fix build",
    "date": "2023-04-17T14:31:15Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/a6d5f93bc0078a7ca151e539d5c443345f94e9a3",
    "details": {
      "sha": "7c4f77d58070c76ba6ec369ba49d759ab4b6e798",
      "filename": "languagetool-standalone/src/test/java/org/languagetool/LanguageTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/a6d5f93bc0078a7ca151e539d5c443345f94e9a3/languagetool-standalone%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2FLanguageTest.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/a6d5f93bc0078a7ca151e539d5c443345f94e9a3/languagetool-standalone%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2FLanguageTest.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-standalone%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2FLanguageTest.java?ref=a6d5f93bc0078a7ca151e539d5c443345f94e9a3",
      "patch": "@@ -35,10 +35,10 @@ public void testRuleFileName() {\n       assertTrue(new BritishEnglish().getRuleFileNames().contains(\"/src/main/resources/org/languagetool/rules/en/grammar-premium.xml\"));\n       assertTrue(new AmericanEnglish().getRuleFileNames().contains(\"/src/main/resources/org/languagetool/rules/en/grammar-premium.xml\"));\n     } else {\n-      assertEquals(\"[/org/languagetool/rules/en/grammar.xml, /org/languagetool/rules/en/en-GB/grammar.xml]\", new BritishEnglish().getRuleFileNames().toString());\n-      assertEquals(\"[/org/languagetool/rules/en/grammar.xml, /org/languagetool/rules/en/en-US/grammar.xml]\", new AmericanEnglish().getRuleFileNames().toString());\n-      assertEquals(\"[/org/languagetool/rules/en/grammar.xml]\", new English().getRuleFileNames().toString());\n-      assertEquals(\"[/org/languagetool/rules/de/grammar.xml]\", new German().getRuleFileNames().toString());\n+      assertEquals(\"[/org/languagetool/rules/en/grammar.xml, /org/languagetool/rules/en/style.xml, /org/languagetool/rules/en/en-GB/grammar.xml]\", new BritishEnglish().getRuleFileNames().toString());\n+      assertEquals(\"[/org/languagetool/rules/en/grammar.xml, /org/languagetool/rules/en/style.xml, /org/languagetool/rules/en/en-US/grammar.xml]\", new AmericanEnglish().getRuleFileNames().toString());\n+      assertEquals(\"[/org/languagetool/rules/en/grammar.xml, /org/languagetool/rules/en/style.xml]\", new English().getRuleFileNames().toString());\n+      assertEquals(\"[/org/languagetool/rules/de/grammar.xml, /org/languagetool/rules/de/style.xml]\", new German().getRuleFileNames().toString());\n     }\n   }\n ",
      "parent_sha": "dcaa4b711d7824b769deb26af2d09fa1ca1f09b2"
    }
  },
  {
    "oid": "e3f034973a5adc233dd5c2b401bc6fe03f727c4f",
    "message": "optimize condition order for better performance",
    "date": "2019-01-22T19:21:49Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/e3f034973a5adc233dd5c2b401bc6fe03f727c4f",
    "details": {
      "sha": "347f59d32ac73f1dfff78e9084af2e207678b91f",
      "filename": "languagetool-core/src/main/java/org/languagetool/tokenizers/WordTokenizer.java",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/e3f034973a5adc233dd5c2b401bc6fe03f727c4f/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Ftokenizers%2FWordTokenizer.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/e3f034973a5adc233dd5c2b401bc6fe03f727c4f/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Ftokenizers%2FWordTokenizer.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Ftokenizers%2FWordTokenizer.java?ref=e3f034973a5adc233dd5c2b401bc6fe03f727c4f",
      "patch": "@@ -192,21 +192,22 @@ private boolean urlStartsAt(int i, List<String> l) {\n     }\n     if (l.size() > i + 3) {\n       // e.g. mydomain.org/ (require slash to avoid missing errors that can be interpreted as domains)\n-      if (DOMAIN_CHARS.matcher(token).matches() &&\n-          l.get(i + 1).equals(\".\") &&\n-          DOMAIN_CHARS.matcher(l.get(i + 2)).matches() &&\n-          l.get(i + 3).equals(\"/\")) {\n+      if (l.get(i + 1).equals(\".\") &&   // use this order so the regex only gets matched if needed\n+          l.get(i + 3).equals(\"/\") &&\n+          DOMAIN_CHARS.matcher(token).matches() &&\n+          DOMAIN_CHARS.matcher(l.get(i + 2)).matches()) {\n         return true;\n       }\n     }\n     if (l.size() > i + 5) {\n       // e.g. sub.mydomain.org/ (require slash to avoid missing errors that can be interpreted as domains)\n-      if (DOMAIN_CHARS.matcher(token).matches() &&\n-          l.get(i + 1).equals(\".\") &&\n-          DOMAIN_CHARS.matcher(l.get(i + 2)).matches() &&\n+      if (l.get(i + 1).equals(\".\") &&   // use this order so the regex only gets matched if needed\n           l.get(i + 3).equals(\".\") &&\n-          DOMAIN_CHARS.matcher(l.get(i + 4)).matches() &&\n-          l.get(i + 5).equals(\"/\")) {\n+          l.get(i + 5).equals(\"/\") &&\n+          DOMAIN_CHARS.matcher(token).matches() &&\n+          DOMAIN_CHARS.matcher(l.get(i + 2)).matches() &&\n+          DOMAIN_CHARS.matcher(l.get(i + 4)).matches()\n+          ) {\n         return true;\n       }\n     }",
      "parent_sha": "5b40d1fec20d66661665e6051e906b375f708fdb"
    }
  },
  {
    "oid": "26dc37b4baec9eae5d2260077027a2e88a7f42b0",
    "message": "[de] shorten short message",
    "date": "2020-11-17T10:49:00Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/26dc37b4baec9eae5d2260077027a2e88a7f42b0",
    "details": {
      "sha": "4b662f14e08943912c5d8a63cc9bdb3c89160fff",
      "filename": "languagetool-language-modules/de/src/main/java/org/languagetool/rules/de/AgreementRule.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/26dc37b4baec9eae5d2260077027a2e88a7f42b0/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FAgreementRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/26dc37b4baec9eae5d2260077027a2e88a7f42b0/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FAgreementRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FAgreementRule.java?ref=26dc37b4baec9eae5d2260077027a2e88a7f42b0",
      "patch": "@@ -1166,7 +1166,7 @@ private RuleMatch checkDetNounAgreement(AnalyzedTokenReadings token1,\n             \"Kasus, Genus oder Numerus\" : String.join(\" und \", errorCategories);\n       String msg = \"M\u00f6glicherweise fehlende grammatische \u00dcbereinstimmung \" +\n             \"des \" + errorDetails + \".\";\n-      String shortMsg = \"M\u00f6glicherweise keine \u00dcbereinstimmung des \" + errorDetails;\n+      String shortMsg = \"Evtl. keine \u00dcbereinstimmung von Kasus, Genus oder Numerus\";\n       ruleMatch = new RuleMatch(this, sentence, token1.getStartPos(),\n               token2.getEndPos(), msg, shortMsg);\n       /*try {\n@@ -1324,7 +1324,7 @@ private RuleMatch checkDetAdjNounAgreement(AnalyzedTokenReadings token1,\n       String msg = \"M\u00f6glicherweise fehlende grammatische \u00dcbereinstimmung \" +\n             \"von Kasus, Numerus oder Genus. Beispiel: 'mein kleiner Haus' \" +\n             \"statt 'mein kleines Haus'\";\n-      String shortMsg = \"M\u00f6glicherweise keine \u00dcbereinstimmung von Kasus, Numerus oder Genus\";\n+      String shortMsg = \"Evtl. keine \u00dcbereinstimmung von Kasus, Numerus oder Genus\";\n       ruleMatch = new RuleMatch(this, sentence, token1.getStartPos(), token3.getEndPos(), msg, shortMsg);\n     }\n     return ruleMatch;",
      "parent_sha": "0c135389f841bed6fbcbbcdd67f211b4f2fa2833"
    }
  },
  {
    "oid": "223061e59e393fda45d310fa19ad0e0077704e95",
    "message": "[LO extension] solves problem with increasing memory while using queue",
    "date": "2020-02-20T19:57:00Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/223061e59e393fda45d310fa19ad0e0077704e95",
    "details": {
      "sha": "1bfd5c68a27daf511a256c37db5ce48d914d8f14",
      "filename": "languagetool-office-extension/src/main/java/org/languagetool/openoffice/TextLevelCheckQueue.java",
      "status": "modified",
      "additions": 41,
      "deletions": 13,
      "changes": 54,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/223061e59e393fda45d310fa19ad0e0077704e95/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FTextLevelCheckQueue.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/223061e59e393fda45d310fa19ad0e0077704e95/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FTextLevelCheckQueue.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FTextLevelCheckQueue.java?ref=223061e59e393fda45d310fa19ad0e0077704e95",
      "patch": "@@ -35,7 +35,7 @@ public class TextLevelCheckQueue {\n   public static final int DISPOSE_FLAG = 3;\n \n   private Deque<QueueEntry> textRuleQueue = new ArrayDeque<QueueEntry>();  //  Queue to check text rules in a separate thread\n-  private Object queueWakeup = new Object();\n+//  private Object queueWakeup = new Object();\n   private MultiDocumentsHandler multiDocHandler;\n   private SwJLanguageTool langTool;\n   private QueueIterator queueIterator;\n@@ -52,8 +52,8 @@ public class TextLevelCheckQueue {\n     langTool = multiDocHandler.initLanguageTool();\n     multiDocHandler.initCheck(langTool);\n     multiDocHandler.activateTextRulesByIndex(1, langTool);\n-    queueIterator = new QueueIterator();\n-    queueIterator.start();\n+//    queueIterator = new QueueIterator();\n+//    queueIterator.start();\n   }\n  \n  /**\n@@ -90,7 +90,8 @@ public void addQueueEntry(int nStart, int nEnd, int cacheNum, int nCheck, String\n     }\n     interruptCheck = false;\n     textRuleQueue.addLast(new QueueEntry(nStart, nEnd, cacheNum, nCheck, docId, overrideRunning));\n-    wakeupQueue();\n+    startQueue();\n+//    wakeupQueue();\n   }\n   \n   /**\n@@ -115,6 +116,7 @@ QueueEntry createQueueEntry(int nStart, int nEnd, int cacheNum, int nCheck, Stri\n   /**\n    * wake up the waiting iteration of the queue\n    */\n+/*\n   private void wakeupQueue() {\n     synchronized(queueWakeup) {\n       if(debugMode) {\n@@ -123,20 +125,36 @@ private void wakeupQueue() {\n       queueWakeup.notify();\n     }\n   }\n+*/\n   \n+  /**\n+   * Start queue\n+   */\n+  private void startQueue() {\n+    if(!queueRuns) {\n+      queueIterator = new QueueIterator();\n+      queueIterator.start();\n+      queueRuns = true;\n+      if(debugMode) {\n+        MessageHandler.printToLogFile(\"start queue\");\n+      }\n+    }\n+  }\n   /**\n    * Set a stop flag to get a definite ending of the iteration\n    */\n   public void setStop() {\n-    textRuleQueue.clear();\n-    interruptCheck = true;\n-    QueueEntry queueEntry = new QueueEntry();\n-    queueEntry.setStop();\n-    if(debugMode) {\n-      MessageHandler.printToLogFile(\"stop queue\");\n+    if(queueRuns) {\n+      textRuleQueue.clear();\n+      interruptCheck = true;\n+      QueueEntry queueEntry = new QueueEntry();\n+      queueEntry.setStop();\n+      if(debugMode) {\n+        MessageHandler.printToLogFile(\"stop queue\");\n+      }\n+      textRuleQueue.addLast(queueEntry);\n     }\n-    textRuleQueue.addLast(queueEntry);\n-    wakeupQueue();\n+//    wakeupQueue();\n   }\n   \n   /**\n@@ -150,7 +168,8 @@ public void setReset() {\n       MessageHandler.printToLogFile(\"reset queue\");\n     }\n     doReset();\n-    wakeupQueue();\n+    startQueue();\n+//    wakeupQueue();\n   }\n   \n   /**\n@@ -305,6 +324,14 @@ public void run() {\n               continue;\n             }\n           }\n+          if(textRuleQueue.isEmpty()) {\n+            queueRuns = false;\n+            if(debugMode) {\n+              MessageHandler.printToLogFile(\"queue ended\");\n+            }\n+            return;\n+          }\n+/*          \n           synchronized(queueWakeup) {\n             try {\n               if(debugMode) {\n@@ -317,6 +344,7 @@ public void run() {\n               return;\n             }\n           }\n+*/    \n         } else {\n           QueueEntry queueEntry = textRuleQueue.pollLast();\n           if(queueEntry.special == STOP_FLAG) {",
      "parent_sha": "a68643cd8024c1570c2778acaa3187108dce3d5b"
    }
  },
  {
    "oid": "8fb8d582773ca02a964e2cc82a562e769e064a7c",
    "message": "[de] speed up neural network rules in server use case",
    "date": "2017-12-29T14:20:58Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/8fb8d582773ca02a964e2cc82a562e769e064a7c",
    "details": {
      "sha": "7f91955d854afb02104e869ff5077563534fe1b5",
      "filename": "languagetool-language-modules/de/src/main/java/org/languagetool/language/German.java",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/8fb8d582773ca02a964e2cc82a562e769e064a7c/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Flanguage%2FGerman.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/8fb8d582773ca02a964e2cc82a562e769e064a7c/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Flanguage%2FGerman.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Flanguage%2FGerman.java?ref=8fb8d582773ca02a964e2cc82a562e769e064a7c",
      "patch": "@@ -65,6 +65,8 @@ public class German extends Language implements AutoCloseable {\n   private CompoundWordTokenizer compoundTokenizer;\n   private GermanCompoundTokenizer strictCompoundTokenizer;\n   private LanguageModel languageModel;\n+  private List<Rule> nnRules;\n+  private Word2VecModel word2VecModel;\n \n   /**\n    * @deprecated use {@link GermanyGerman}, {@link AustrianGerman}, or {@link SwissGerman} instead -\n@@ -234,9 +236,13 @@ public synchronized LanguageModel getLanguageModel(File indexDir) throws IOExcep\n     return languageModel;\n   }\n \n+  /** @since 4.0 */\n   @Override\n   public synchronized Word2VecModel getWord2VecModel(File indexDir) throws IOException {\n-    return new Word2VecModel(indexDir + File.separator + getShortCode());\n+    if (word2VecModel == null) {\n+      word2VecModel = new Word2VecModel(indexDir + File.separator + getShortCode());\n+    }\n+    return word2VecModel;\n   }\n \n   /** @since 3.1 */\n@@ -250,7 +256,10 @@ public List<Rule> getRelevantLanguageModelRules(ResourceBundle messages, Languag\n   /** @since 4.0 */\n   @Override\n   public List<Rule> getRelevantWord2VecModelRules(ResourceBundle messages, Word2VecModel word2vecModel) throws IOException {\n-    return NeuralNetworkRuleCreator.createRules(messages, this, word2vecModel);\n+    if (nnRules == null) {\n+      nnRules = NeuralNetworkRuleCreator.createRules(messages, this, word2vecModel);\n+    }\n+    return nnRules;\n   }\n \n   /**",
      "parent_sha": "3cf77f4f62621abc04ca091a1be2a3e935f71c95"
    }
  },
  {
    "oid": "84ecca95a08e84a31f56c07f678fe3d29941db20",
    "message": "comment out two tests until the real cause is fixed",
    "date": "2018-11-03T09:02:43Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/84ecca95a08e84a31f56c07f678fe3d29941db20",
    "details": {
      "sha": "306d8ac65c2bc63a4b5b5093047106abacb2fa04",
      "filename": "languagetool-language-modules/pt/src/test/java/org/languagetool/rules/pt/PortugueseUnitConversionRuleTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/84ecca95a08e84a31f56c07f678fe3d29941db20/languagetool-language-modules%2Fpt%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpt%2FPortugueseUnitConversionRuleTest.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/84ecca95a08e84a31f56c07f678fe3d29941db20/languagetool-language-modules%2Fpt%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpt%2FPortugueseUnitConversionRuleTest.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fpt%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpt%2FPortugueseUnitConversionRuleTest.java?ref=84ecca95a08e84a31f56c07f678fe3d29941db20",
      "patch": "@@ -56,10 +56,12 @@ public void match() throws IOException {\n     assertMatches(\"Eu tenho 6 p\u00e9s de altura.\", 1, \"1,83 metros\", rule, lt);\n     assertMatches(\"Eu tenho 6 p\u00e9s (2,02 m) de altura.\", 1, \"1,83 metros\", rule, lt);\n     assertMatches(\"Eu tenho 6 p\u00e9s (1,82 m) de altura.\", 0, null, rule, lt);\n-    assertMatches(\"A via tem 100 milhas de comprimento.\", 1, \"160,93 quil\u00f3metros\", rule, lt);\n+    //TODO:\n+    //assertMatches(\"A via tem 100 milhas de comprimento.\", 1, \"160,93 quil\u00f3metros\", rule, lt);\n     assertMatches(\"A via tem 10 km (20 milhas) de comprimento.\", 1, \"6,21\", rule, lt);\n     assertMatches(\"A via tem 10 km (6,21 milhas) de comprimento.\", 0, null, rule, lt);\n-    assertMatches(\"A via tem 100 milhas (160,93 quil\u00f3metros) de comprimento.\", 0, null, rule, lt);\n+    //TODO:\n+    //assertMatches(\"A via tem 100 milhas (160,93 quil\u00f3metros) de comprimento.\", 0, null, rule, lt);\n     assertMatches(\"A carga \u00e9 de 10.000 libras.\", 1, \"4,54 toneladas\", rule, lt);\n     assertMatches(\"Isto tem 5'6\\\" de altura.\", 1, \"1,68 m\", rule, lt);\n     assertMatches(\"O meu novo apartamento tem 500 sq ft de \u00e1rea.\", 1, \"46,45 metros quadrados\", rule, lt);",
      "parent_sha": "3417eac4dd57b640ae50841ac4c1811a74ba8d54"
    }
  },
  {
    "oid": "a7a81da609ee8b8e69943954658a077617a045b0",
    "message": "comment out logging for now (#3181)",
    "date": "2020-07-01T11:50:01Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/a7a81da609ee8b8e69943954658a077617a045b0",
    "details": {
      "sha": "d7998c80d6d81f3918978030198d537a373e4cad",
      "filename": "languagetool-core/src/main/java/org/languagetool/rules/spelling/hunspell/HunspellRule.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/a7a81da609ee8b8e69943954658a077617a045b0/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fspelling%2Fhunspell%2FHunspellRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/a7a81da609ee8b8e69943954658a077617a045b0/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fspelling%2Fhunspell%2FHunspellRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fspelling%2Fhunspell%2FHunspellRule.java?ref=a7a81da609ee8b8e69943954658a077617a045b0",
      "patch": "@@ -232,7 +232,7 @@ public RuleMatch[] match(AnalyzedSentence sentence) throws IOException {\n             // Find potentially missing compounds with privacy-friendly logging: we only log a single unknown word with no\n             // meta data and only if it's made up of two valid words, similar to the \"UNKNOWN\" logging in\n             // GermanSpellerRule:\n-            if (language.getShortCode().equals(\"de\")) {\n+            /*if (language.getShortCode().equals(\"de\")) {\n               String covered = sentence.getText().substring(len, len + cleanWord.length());\n               if (suggestions.stream().anyMatch(\n                     k -> k.getReplacement().contains(\" \") &&\n@@ -242,7 +242,7 @@ public RuleMatch[] match(AnalyzedSentence sentence) throws IOException {\n                   )) {\n                 logger.info(\"COMPOUND: \" + covered);\n               }\n-            }\n+            }*/\n             // TODO user suggestions\n             addSuggestionsToRuleMatch(cleanWord, Collections.emptyList(), suggestions, null, ruleMatch);\n           } else {",
      "parent_sha": "40bebf550e5a9f6ea41da2654e37b42acfcbf93a"
    }
  },
  {
    "oid": "35e2d4e817220a4c8a7728a05d2dd34dee53ca64",
    "message": "[de] quick fix for words with soft hyphens (#3224)",
    "date": "2020-07-08T20:08:18Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/35e2d4e817220a4c8a7728a05d2dd34dee53ca64",
    "details": {
      "sha": "8f41d809e9bece12e156170e19b3d3b113ed2336",
      "filename": "languagetool-language-modules/de/src/main/java/org/languagetool/rules/de/CaseRule.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/35e2d4e817220a4c8a7728a05d2dd34dee53ca64/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FCaseRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/35e2d4e817220a4c8a7728a05d2dd34dee53ca64/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FCaseRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FCaseRule.java?ref=35e2d4e817220a4c8a7728a05d2dd34dee53ca64",
      "patch": "@@ -1395,7 +1395,7 @@ private boolean hasNounReading(AnalyzedTokenReadings readings) {\n         return true;\n       }\n       // \"Die Sch\u00f6ne T\u00fcr\": \"Sch\u00f6ne\" also has a noun reading but like \"SUB:AKK:SIN:FEM:ADJ\", ignore that:\n-      AnalyzedTokenReadings allReadings = lookup(readings.getToken());  // unification in disambiguation.xml removes reading, so look up again\n+      AnalyzedTokenReadings allReadings = lookup(readings.getToken().replaceAll(\"\\\\u00AD\", \"\"));  // unification in disambiguation.xml removes reading, so look up again, removing soft hyphens\n       if (allReadings != null) {\n         for (AnalyzedToken reading : allReadings) {\n           String posTag = reading.getPOSTag();",
      "parent_sha": "77c7697b4a623ccea2a60c86e16876a3895c7ad6"
    }
  },
  {
    "oid": "14b955140139092a5e6c259a29c9955008f27f12",
    "message": "[de] reformat code",
    "date": "2017-10-17T18:55:24Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/14b955140139092a5e6c259a29c9955008f27f12",
    "details": {
      "sha": "dd85b92bf3dd60bfcc0d6b15d7ac10855b07fba3",
      "filename": "languagetool-language-modules/de/src/main/java/org/languagetool/rules/de/LongSentenceRule.java",
      "status": "modified",
      "additions": 117,
      "deletions": 117,
      "changes": 234,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/14b955140139092a5e6c259a29c9955008f27f12/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FLongSentenceRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/14b955140139092a5e6c259a29c9955008f27f12/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FLongSentenceRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FLongSentenceRule.java?ref=14b955140139092a5e6c259a29c9955008f27f12",
      "patch": "@@ -36,144 +36,144 @@\n \n public class LongSentenceRule extends org.languagetool.rules.LongSentenceRule {\n \n-    private static final int DEFAULT_MAX_WORDS = 40;\n-    private static final boolean DEFAULT_INACTIVE = true;\n+  private static final int DEFAULT_MAX_WORDS = 40;\n+  private static final boolean DEFAULT_INACTIVE = true;\n \n-    /**\n-     * @param defaultActive allows default granularity\n-     * @since 3.7\n-     */\n-    public LongSentenceRule(ResourceBundle messages, int maxSentenceLength, boolean defaultActive) {\n-      super(messages);\n-      super.setCategory(Categories.STYLE.getCategory(messages));\n-      setLocQualityIssueType(ITSIssueType.Style);\n-      addExamplePair(Example.wrong(\"<marker>Dies ist ein Bandwurmsatz, der immer weiter geht, obwohl das kein guter Stil ist, den man eigentlich ber\u00fccksichtigen sollte, obwohl es auch andere Meinungen gibt, die aber in der Minderzahl sind, weil die meisten Autoren sich doch an die Stilvorgaben halten, wenn auch nicht alle, was aber letztendlich wiederum eine Sache des Geschmacks ist</marker>.\"),\n-                Example.fixed(\"<marker>Dies ist ein kurzer Satz.</marker>\"));\n-      if (defaultActive) {\n-          setDefaultOn();\n-        }\n-      maxWords = maxSentenceLength;\n+  /**\n+   * @param defaultActive allows default granularity\n+   * @since 3.7\n+   */\n+  public LongSentenceRule(ResourceBundle messages, int maxSentenceLength, boolean defaultActive) {\n+    super(messages);\n+    super.setCategory(Categories.STYLE.getCategory(messages));\n+    setLocQualityIssueType(ITSIssueType.Style);\n+    addExamplePair(Example.wrong(\"<marker>Dies ist ein Bandwurmsatz, der immer weiter geht, obwohl das kein guter Stil ist, den man eigentlich ber\u00fccksichtigen sollte, obwohl es auch andere Meinungen gibt, die aber in der Minderzahl sind, weil die meisten Autoren sich doch an die Stilvorgaben halten, wenn auch nicht alle, was aber letztendlich wiederum eine Sache des Geschmacks ist</marker>.\"),\n+            Example.fixed(\"<marker>Dies ist ein kurzer Satz.</marker>\"));\n+    if (defaultActive) {\n+      setDefaultOn();\n     }\n+    maxWords = maxSentenceLength;\n+  }\n \n-    /**\n-     * @param maxSentenceLength the maximum sentence length that does not yet trigger a match\n-     * @since 2.4\n-     */\n-    public LongSentenceRule(ResourceBundle messages, int maxSentenceLength) {\n-      this(messages, maxSentenceLength, DEFAULT_INACTIVE);\n-    }\n+  /**\n+   * @param maxSentenceLength the maximum sentence length that does not yet trigger a match\n+   * @since 2.4\n+   */\n+  public LongSentenceRule(ResourceBundle messages, int maxSentenceLength) {\n+    this(messages, maxSentenceLength, DEFAULT_INACTIVE);\n+  }\n \n-    /**\n-     * Creates a rule with the default maximum sentence length (40 words).\n-     */\n-    public LongSentenceRule(ResourceBundle messages) {\n-      this(messages, DEFAULT_MAX_WORDS, DEFAULT_INACTIVE);\n-      setDefaultOn();\n-    }\n+  /**\n+   * Creates a rule with the default maximum sentence length (40 words).\n+   */\n+  public LongSentenceRule(ResourceBundle messages) {\n+    this(messages, DEFAULT_MAX_WORDS, DEFAULT_INACTIVE);\n+    setDefaultOn();\n+  }\n \n+  @Override\n+  public String getId() {\n+    return \"DE_TOO_LONG_SENTENCE_\" + maxWords;\n+  }\n \n   @Override\n-    public String getId() {\n-      return \"DE_TOO_LONG_SENTENCE_\" + maxWords;\n-    }\n+  public String getDescription() {\n+    return \"Sehr langer Satz (mehr als \" + maxWords + \" Worte)\";\n+  }\n \n-    @Override\n-    public String getDescription() {\n-      return \"Sehr langer Satz (mehr als \" + maxWords + \" Worte)\";\n-    }\n+  @Override\n+  public String getMessage() {\n+    return \"Dieser Satz ist sehr lang (mehr als \" + maxWords + \" Worte).\";\n+  }\n \n-    @Override\n-    public String getMessage() {\n-        return \"Dieser Satz ist sehr lang (mehr als \" + maxWords + \" Worte).\";\n+  private boolean isWordCount(String tokenText) {\n+    if (tokenText.length() > 0 &&\n+            ((tokenText.charAt(0) >= 'A' && tokenText.charAt(0) <= 'Z')\n+                    || (tokenText.charAt(0) >= 'a' && tokenText.charAt(0) <= 'z')\n+                    || tokenText.charAt(0) == '\u00e4' || tokenText.charAt(0) == '\u00f6' || tokenText.charAt(0) == '\u00fc'\n+                    || tokenText.charAt(0) == '\u00c4' || tokenText.charAt(0) == '\u00d6' || tokenText.charAt(0) == '\u00dc')) {\n+      return true;\n+    } else {\n+      return false;\n     }\n+  }\n \n-    private boolean isWordCount (String tokenText) {\n-        if (tokenText.length() > 0 && \n-          ((tokenText.charAt(0) >= 'A' && tokenText.charAt(0) <= 'Z') \n-            || (tokenText.charAt(0) >= 'a' && tokenText.charAt(0) <= 'z')\n-            || tokenText.charAt(0) == '\u00e4' || tokenText.charAt(0) == '\u00f6'  || tokenText.charAt(0) == '\u00fc'\n-            || tokenText.charAt(0) == '\u00c4' || tokenText.charAt(0) == '\u00d6'  || tokenText.charAt(0) == '\u00dc')) {\n-          return true; }\n-        else return false;\n+  @Override\n+  public RuleMatch[] match(AnalyzedSentence sentence) throws IOException {\n+    List<RuleMatch> ruleMatches = new ArrayList<>();\n+    AnalyzedTokenReadings[] tokens = sentence.getTokensWithoutWhitespace();\n+    String msg = getMessage();\n+    if (tokens.length < maxWords + 1) {   // just a short-circuit\n+      return toRuleMatchArray(ruleMatches);\n     }\n-    \n-    @Override\n-    public RuleMatch[] match(AnalyzedSentence sentence) throws IOException {\n-      List<RuleMatch> ruleMatches = new ArrayList<>();\n-      AnalyzedTokenReadings[] tokens = sentence.getTokensWithoutWhitespace();\n-      String msg = getMessage();\n-      if (tokens.length < maxWords + 1) {   // just a short-circuit\n-        return toRuleMatchArray(ruleMatches);\n+    int i = 0;\n+    List<Integer> fromPos = new ArrayList<Integer>();\n+    List<Integer> toPos = new ArrayList<Integer>();\n+    while (i < tokens.length) {\n+      for (; i < tokens.length && !isWordCount(tokens[i].getToken()); i++) ;\n+      if (i < tokens.length) {\n+        fromPos.add(tokens[i].getStartPos());\n+        toPos.add(tokens[i].getEndPos());\n       }\n-      int i = 0;\n-      ArrayList<Integer> fromPos = new ArrayList<Integer>();\n-      ArrayList<Integer> toPos = new ArrayList<Integer>();\n-      while (i < tokens.length) {\n-        for(;i < tokens.length && !isWordCount(tokens[i].getToken()); i++);\n-        if(i < tokens.length) {\n-          fromPos.add(tokens[i].getStartPos()); \n-          toPos.add(tokens[i].getEndPos());\n-        }\n-        int numWords = 1;\n-        //  Text before and after ':' and ';' is handled as separated sentences\n-        //  Direct speech is splitted \n-        while (i < tokens.length && !tokens[i].getToken().equals(\":\") && !tokens[i].getToken().equals(\";\") \n-                     && ((i < tokens.length - 1  && !tokens[i + 1].getToken().equals(\",\"))\n-                     || (!tokens[i].getToken().equals(\"\u201c\") && !tokens[i].getToken().equals(\"\u00bb\") \n-                     && !tokens[i].getToken().equals(\"\u00ab\") && !tokens[i].getToken().equals(\"\\\"\")))) {\n-          if (isWordCount(tokens[i].getToken())) {\n-            toPos.set(toPos.size()-1, tokens[i].getEndPos()); \n-            numWords++;\n+      int numWords = 1;\n+      //  Text before and after ':' and ';' is handled as separated sentences\n+      //  Direct speech is splitted \n+      while (i < tokens.length && !tokens[i].getToken().equals(\":\") && !tokens[i].getToken().equals(\";\")\n+              && ((i < tokens.length - 1 && !tokens[i + 1].getToken().equals(\",\"))\n+              || (!tokens[i].getToken().equals(\"\u201c\") && !tokens[i].getToken().equals(\"\u00bb\")\n+              && !tokens[i].getToken().equals(\"\u00ab\") && !tokens[i].getToken().equals(\"\\\"\")))) {\n+        if (isWordCount(tokens[i].getToken())) {\n+          toPos.set(toPos.size() - 1, tokens[i].getEndPos());\n+          numWords++;\n+        } else if (tokens[i].getToken().equals(\"(\") || tokens[i].getToken().equals(\"{\")\n+                || tokens[i].getToken().equals(\"[\")) {        //  The Text between brackets is handled as separate sentence\n+          String endChar;\n+          if (tokens[i].getToken().equals(\"(\")) endChar = \")\";\n+          else if (tokens[i].getToken().equals(\"{\")) endChar = \"}\";\n+          else endChar = \"]\";\n+          int numWordsInt = 0;\n+          int fromPosInt = 0;\n+          int toPosInt = 0;\n+          int k;\n+          for (k = i + 1; k < tokens.length && !tokens[k].getToken().equals(endChar) && !isWordCount(tokens[k].getToken()); k++)\n+            ;\n+          if (k < tokens.length) {\n+            fromPosInt = tokens[k].getStartPos();\n+            toPosInt = tokens[k].getEndPos();\n           }\n-          else if(tokens[i].getToken().equals(\"(\") || tokens[i].getToken().equals(\"{\") \n-                    || tokens[i].getToken().equals(\"[\")) {        //  The Text between brackets is handled as separate sentence\n-            String endChar;                             \n-            if(tokens[i].getToken().equals(\"(\")) endChar = \")\";\n-            else if(tokens[i].getToken().equals(\"{\")) endChar = \"}\";\n-            else endChar = \"]\";\n-            int numWordsInt = 0;\n-            int fromPosInt = 0;\n-            int toPosInt = 0;\n-            int k;\n-            for(k = i + 1; k < tokens.length && !tokens[k].getToken().equals(endChar) && !isWordCount(tokens[k].getToken()); k++);\n-            if(k < tokens.length) {\n-                fromPosInt = tokens[k].getStartPos(); \n-                toPosInt = tokens[k].getEndPos();\n+          for (k++; k < tokens.length && !tokens[k].getToken().equals(endChar); k++) {\n+            if (isWordCount(tokens[k].getToken())) {\n+              toPosInt = tokens[k].getEndPos();\n+              numWordsInt++;\n             }\n-            for(k++; k < tokens.length && !tokens[k].getToken().equals(endChar); k++) {\n-                if (isWordCount(tokens[k].getToken())) {\n-                  toPosInt = tokens[k].getEndPos(); \n-                  numWordsInt++;\n-                }\n+          }\n+          if (k < tokens.length) {\n+            if (numWordsInt > maxWords) {\n+              RuleMatch ruleMatch = new RuleMatch(this, fromPosInt, toPosInt, msg);\n+              ruleMatches.add(ruleMatch);\n             }\n-            if(k < tokens.length) {\n-              if(numWordsInt > maxWords) {\n-                RuleMatch ruleMatch = new RuleMatch(this, fromPosInt, toPosInt, msg);\n-                ruleMatches.add(ruleMatch);\n-              }\n-              for(i = k; i < tokens.length && !isWordCount(tokens[i].getToken()); i++);\n-              if(i < tokens.length) {\n-                fromPos.add(tokens[i].getStartPos()); \n-                toPos.add(tokens[i].getEndPos());\n-                numWords++;\n-              }\n+            for (i = k; i < tokens.length && !isWordCount(tokens[i].getToken()); i++) ;\n+            if (i < tokens.length) {\n+              fromPos.add(tokens[i].getStartPos());\n+              toPos.add(tokens[i].getEndPos());\n+              numWords++;\n             }\n           }\n-          i++;\n         }\n-        if(numWords > maxWords) {\n-          for(int j = 0; j < fromPos.size(); j++) {\n-            RuleMatch ruleMatch = new RuleMatch(this, fromPos.get(j), toPos.get(j), msg);\n-            ruleMatches.add(ruleMatch);\n-          }\n+        i++;\n+      }\n+      if (numWords > maxWords) {\n+        for (int j = 0; j < fromPos.size(); j++) {\n+          RuleMatch ruleMatch = new RuleMatch(this, fromPos.get(j), toPos.get(j), msg);\n+          ruleMatches.add(ruleMatch);\n         }\n-        else {\n-          for(int j = fromPos.size() - 1; j >= 0; j--) {\n-            fromPos.remove(j);\n-            toPos.remove(j);\n-          }\n+      } else {\n+        for (int j = fromPos.size() - 1; j >= 0; j--) {\n+          fromPos.remove(j);\n+          toPos.remove(j);\n         }\n       }\n-      return toRuleMatchArray(ruleMatches);\n     }\n+    return toRuleMatchArray(ruleMatches);\n+  }\n }",
      "parent_sha": "0fd6b739b9d5b493d9151f58710fe469e4386ce9"
    }
  },
  {
    "oid": "f964eff8ad9135d3ac2664767fc998dcf95572c6",
    "message": "fixing validation problem (works for WinXP)",
    "date": "2007-05-20T15:21:59Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/f964eff8ad9135d3ac2664767fc998dcf95572c6",
    "details": {
      "sha": "d0c58f590ea15df30cc79279cb2627b6973d73c7",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/rules/patterns/PatternRuleLoader.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/f964eff8ad9135d3ac2664767fc998dcf95572c6/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FPatternRuleLoader.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/f964eff8ad9135d3ac2664767fc998dcf95572c6/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FPatternRuleLoader.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FPatternRuleLoader.java?ref=f964eff8ad9135d3ac2664767fc998dcf95572c6",
      "patch": "@@ -51,8 +51,9 @@ public final List<PatternRule> getRules(final InputStream is, final String filen\n     try {\n       final PatternRuleHandler handler = new PatternRuleHandler();\n       final SAXParserFactory factory = SAXParserFactory.newInstance();\n-      final SAXParser saxParser = factory.newSAXParser();\n-      saxParser.getXMLReader().setFeature(\"http://xml.org/sax/features/validation\", false);      \n+      final SAXParser saxParser = factory.newSAXParser();      \n+      saxParser.getXMLReader().setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\",\n+          false);      \n       saxParser.parse(is, handler);\n       rules = handler.getRules();\n       return rules;",
      "parent_sha": "a3325d187b302120e6b285c702fe9648d1e1d83a"
    }
  },
  {
    "oid": "2937e310c7ad093dae3521ad4e5d4bf9e2586406",
    "message": "use the same annotation as elsewhere",
    "date": "2020-03-17T20:48:03Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/2937e310c7ad093dae3521ad4e5d4bf9e2586406",
    "details": {
      "sha": "5f0111e5df28c8f23b1a37a3c21acdcef02169f4",
      "filename": "languagetool-language-modules/en/src/main/java/org/languagetool/rules/en/translation/BeoLingusTranslator.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/2937e310c7ad093dae3521ad4e5d4bf9e2586406/languagetool-language-modules%2Fen%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fen%2Ftranslation%2FBeoLingusTranslator.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/2937e310c7ad093dae3521ad4e5d4bf9e2586406/languagetool-language-modules%2Fen%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fen%2Ftranslation%2FBeoLingusTranslator.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fen%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fen%2Ftranslation%2FBeoLingusTranslator.java?ref=2937e310c7ad093dae3521ad4e5d4bf9e2586406",
      "patch": "@@ -18,6 +18,7 @@\n  */\n package org.languagetool.rules.en.translation;\n \n+import org.jetbrains.annotations.NotNull;\n import org.languagetool.AnalyzedToken;\n import org.languagetool.AnalyzedTokenReadings;\n import org.languagetool.GlobalConfig;\n@@ -30,7 +31,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import javax.annotation.Nonnull;\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n@@ -201,7 +201,7 @@ public List<TranslationEntry> translate(String term, String fromLang, String toL\n     return sortedList;\n   }\n \n-  @Nonnull\n+  @NotNull\n   private List<TranslationEntry> getTranslationsForBaseforms(String term, Map<String, List<TranslationEntry>> map) {\n     List<TranslationEntry> result = new ArrayList<>();\n     try {",
      "parent_sha": "0483b2489e52f64ace6cf7743aa6b0233e4fce1a"
    }
  },
  {
    "oid": "9754a66022a6bc451b3bdf09bbafa503e947eac9",
    "message": "try to fix threading issue (#6423)",
    "date": "2022-03-11T12:56:45Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/9754a66022a6bc451b3bdf09bbafa503e947eac9",
    "details": {
      "sha": "445534e7a5c19d6adbfc4d148bcb05fe3e4e484b",
      "filename": "languagetool-core/src/main/java/org/languagetool/synthesis/ManualSynthesizer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/9754a66022a6bc451b3bdf09bbafa503e947eac9/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fsynthesis%2FManualSynthesizer.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/9754a66022a6bc451b3bdf09bbafa503e947eac9/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fsynthesis%2FManualSynthesizer.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fsynthesis%2FManualSynthesizer.java?ref=9754a66022a6bc451b3bdf09bbafa503e947eac9",
      "patch": "@@ -50,7 +50,6 @@ public final class ManualSynthesizer {\n   private final Set<String> possibleTags;\n   \n   private final static String DEFAULT_SEPARATOR = \"\\t\";\n-  private static String separator;\n \n   public ManualSynthesizer(InputStream inputStream) throws IOException {\n     THashSet<String> tags = new THashSet<>();\n@@ -84,7 +83,7 @@ private static Map<TaggedWord, List<String>> loadMapping(InputStream inputStream\n     Map<TaggedWord, List<String>> mapping = new HashMap<>();\n     Map<String, String> interned = new HashMap<>();\n     try (Scanner scanner = new Scanner(inputStream, \"utf8\")) {\n-      separator = DEFAULT_SEPARATOR;\n+      String separator = DEFAULT_SEPARATOR;\n       while (scanner.hasNextLine()) {\n         String line = scanner.nextLine();\n         line = line.trim();",
      "parent_sha": "1fe8ea0e218b5bdc95e56b7cac2d0ab17fe12779"
    }
  },
  {
    "oid": "c9b19831ec1f038edae5ee553aa8ae86503b4987",
    "message": "[ru] temp-activate rule for nightly test",
    "date": "2020-03-26T21:30:18Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/c9b19831ec1f038edae5ee553aa8ae86503b4987",
    "details": {
      "sha": "41af8af1de55a8a8e473d21e058e036d67ef7281",
      "filename": "languagetool-language-modules/ru/src/main/java/org/languagetool/rules/ru/RussianDashRule.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/c9b19831ec1f038edae5ee553aa8ae86503b4987/languagetool-language-modules%2Fru%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fru%2FRussianDashRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/c9b19831ec1f038edae5ee553aa8ae86503b4987/languagetool-language-modules%2Fru%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fru%2FRussianDashRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fru%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fru%2FRussianDashRule.java?ref=c9b19831ec1f038edae5ee553aa8ae86503b4987",
      "patch": "@@ -32,7 +32,7 @@ public class RussianDashRule extends AbstractDashRule {\n \n   public RussianDashRule() {\n     super(trie);\n-    setDefaultOff(); // Slows down start up. See GitHub issue #1016.\n+    setDefaultTempOff(); // Slows down start up. See GitHub issue #1016.\n   }\n \n   @Override",
      "parent_sha": "d0292097bcc91e91bc09d273e01283b0657bc395"
    }
  },
  {
    "oid": "490694d14a6a7090ce25ac32d2483a94ef969cdc",
    "message": "clean up test case",
    "date": "2012-05-10T20:06:15Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/490694d14a6a7090ce25ac32d2483a94ef969cdc",
    "details": {
      "sha": "d557292186fd614fff90cf4ffc9109f5739d85ea",
      "filename": "trunk/JLanguageTool/src/test/org/languagetool/rules/en/EnglishUnpairedBracketsRuleTest.java",
      "status": "modified",
      "additions": 46,
      "deletions": 86,
      "changes": 132,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/490694d14a6a7090ce25ac32d2483a94ef969cdc/trunk%2FJLanguageTool%2Fsrc%2Ftest%2Forg%2Flanguagetool%2Frules%2Fen%2FEnglishUnpairedBracketsRuleTest.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/490694d14a6a7090ce25ac32d2483a94ef969cdc/trunk%2FJLanguageTool%2Fsrc%2Ftest%2Forg%2Flanguagetool%2Frules%2Fen%2FEnglishUnpairedBracketsRuleTest.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Ftest%2Forg%2Flanguagetool%2Frules%2Fen%2FEnglishUnpairedBracketsRuleTest.java?ref=490694d14a6a7090ce25ac32d2483a94ef969cdc",
      "patch": "@@ -25,107 +25,68 @@\n import org.languagetool.JLanguageTool;\n import org.languagetool.Language;\n import org.languagetool.TestTools;\n+import org.languagetool.rules.Rule;\n import org.languagetool.rules.RuleMatch;\n import junit.framework.TestCase;\n \n public class EnglishUnpairedBracketsRuleTest extends TestCase {\n \n+  private Rule rule;\n+  private JLanguageTool langTool;\n+  \n+  @Override\n+  public void setUp() throws IOException {\n+    rule = new EnglishUnpairedBracketsRule(TestTools.getEnglishMessages(), Language.ENGLISH);\n+    langTool = new JLanguageTool(Language.ENGLISH);\n+  }\n+  \n   public void testRule() throws IOException {\n-    EnglishUnpairedBracketsRule rule = new EnglishUnpairedBracketsRule(TestTools\n-        .getEnglishMessages(), Language.ENGLISH);\n-    RuleMatch[] matches;\n-    JLanguageTool langTool = new JLanguageTool(Language.ENGLISH);\n     // correct sentences:\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"(This is a test sentence).\"));\n-    assertEquals(0, matches.length);\n-    matches = rule\n-        .match(langTool.getAnalyzedSentence(\"This is a word 'test'.\"));\n-    assertEquals(0, matches.length);\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"This is the joint presidents' declaration.\"));\n-    assertEquals(0, matches.length);\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"The screen is 20\\\" wide.\"));\n-    assertEquals(0, matches.length);\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"This is a [test] sentence...\"));\n-    assertEquals(0, matches.length);\n-    matches = rule\n-        .match(langTool\n-            .getAnalyzedSentence(\"The plight of Tamil refugees caused a surge of support from most of the Tamil political parties.[90]\"));\n-    assertEquals(0, matches.length);\n-    matches = rule\n-        .match(langTool\n-            .getAnalyzedSentence(\"This is what he said: \\\"We believe in freedom. This is what we do.\\\"\"));\n-    assertEquals(0, matches.length);\n-    matches = rule.match(langTool.getAnalyzedSentence(\"(([20] [20] [20]))\"));\n-    assertEquals(0, matches.length);\n+    assertCorrect(\"(This is a test sentence).\");\n+    assertCorrect(\"This is a word 'test'.\");\n+    assertCorrect(\"This is the joint presidents' declaration.\");\n+    assertCorrect(\"The screen is 20\\\" wide.\");\n+    assertCorrect(\"This is a [test] sentence...\");\n+    assertCorrect(\"The plight of Tamil refugees caused a surge of support from most of the Tamil political parties.[90]\");\n+    assertCorrect(\"This is what he said: \\\"We believe in freedom. This is what we do.\\\"\");\n+    assertCorrect(\"(([20] [20] [20]))\");\n     // test for a case that created a false alarm after disambiguation\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"This is a \\\"special test\\\", right?\"));\n-    assertEquals(0, matches.length);\n+    assertCorrect(\"This is a \\\"special test\\\", right?\");\n     // numerical bullets\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"We discussed this in Chapter 1).\"));\n-    assertEquals(0, matches.length);\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"The jury recommended that: (1) Four additional deputies be employed.\"));\n-    assertEquals(0, matches.length);\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"We discussed this in section 1a).\"));\n-    assertEquals(0, matches.length);\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"We discussed this in section iv).\"));\n-    assertEquals(0, matches.length);\n-\n+    assertCorrect(\"We discussed this in Chapter 1).\");\n+    assertCorrect(\"The jury recommended that: (1) Four additional deputies be employed.\");\n+    assertCorrect(\"We discussed this in section 1a).\");\n+    assertCorrect(\"We discussed this in section iv).\");\n     //inches exception shouldn't match \" here:\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"In addition, the government would pay a $1,000 \\\"cost of education\\\" grant to the schools.\"));\n-    assertEquals(0, matches.length);\n+    assertCorrect(\"In addition, the government would pay a $1,000 \\\"cost of education\\\" grant to the schools.\");\n+    assertCorrect(\"Paradise lost to the alleged water needs of Texas' big cities Thursday.\");\n+    assertCorrect(\"Kill 'em all!\");\n+    assertCorrect(\"Puttin' on the Ritz\");\n \n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"Paradise lost to the alleged water needs of Texas' big cities Thursday.\"));\n-    assertEquals(0, matches.length);\n-\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"Kill 'em all!\"));\n-    assertEquals(0, matches.length);\n-\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"Puttin' on the Ritz\"));\n-    assertEquals(0, matches.length);    \n-    \n     // incorrect sentences:\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"(This is a test sentence.\"));\n-    assertEquals(1, matches.length);\n-    \n-    //tests for Edward's bug\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"This is a test with an apostrophe &'.\"));\n-    assertEquals(1, matches.length);\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"&'\"));\n-    assertEquals(1, matches.length);\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"!'\"));\n-    assertEquals(1, matches.length);\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"What?'\"));\n-    assertEquals(1, matches.length);\n-    //\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"(This is a test\u201d sentence.\"));\n+    assertIncorrect(\"(This is a test sentence.\");\n+    assertIncorrect(\"This is a test with an apostrophe &'.\");\n+    assertIncorrect(\"&'\");\n+    assertIncorrect(\"!'\");\n+    assertIncorrect(\"What?'\");\n+\n+    RuleMatch[] matches;\n+    matches = rule.match(langTool.getAnalyzedSentence(\"(This is a test\u201d sentence.\"));\n     assertEquals(2, matches.length);\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"This is a {test sentence.\"));\n-    assertEquals(1, matches.length);\n-    matches = rule.match(langTool\n-        .getAnalyzedSentence(\"This [is (a test} sentence.\"));\n+    matches = rule.match(langTool.getAnalyzedSentence(\"This [is (a test} sentence.\"));\n     assertEquals(3, matches.length);\n   }\n \n+  private void assertCorrect(String sentence) throws IOException {\n+    final RuleMatch[] matches = rule.match(langTool.getAnalyzedSentence(sentence));\n+    assertEquals(0, matches.length);\n+  }\n+\n+  private void assertIncorrect(String sentence) throws IOException {\n+    final RuleMatch[] matches = rule.match(langTool.getAnalyzedSentence(sentence));\n+    assertEquals(1, matches.length);\n+  }\n+  \n   public void testMultipleSentences() throws IOException {\n     final JLanguageTool tool = new JLanguageTool(Language.ENGLISH);\n     tool.enableRule(\"EN_UNPAIRED_BRACKETS\");\n@@ -147,5 +108,4 @@ public void testMultipleSentences() throws IOException {\n     assertEquals(2, matches.size());\n   }\n \n-  \n }",
      "parent_sha": "217f6a3d2c771967ee437dbf5c3736a05e7c3a0c"
    }
  },
  {
    "oid": "f9dd8526889198e8628f973f3f2146124b3389dc",
    "message": "updates to languages that need a maintainer",
    "date": "2013-09-21T14:39:33Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/f9dd8526889198e8628f973f3f2146124b3389dc",
    "details": {
      "sha": "7a9ba7d4e6fa549c6b28edd4c1327ae66ccf1a45",
      "filename": "languagetool-standalone/src/main/java/org/languagetool/dev/RuleOverview.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/f9dd8526889198e8628f973f3f2146124b3389dc/languagetool-standalone%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fdev%2FRuleOverview.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/f9dd8526889198e8628f973f3f2146124b3389dc/languagetool-standalone%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fdev%2FRuleOverview.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-standalone%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fdev%2FRuleOverview.java?ref=f9dd8526889198e8628f973f3f2146124b3389dc",
      "patch": "@@ -39,9 +39,9 @@\n public final class RuleOverview {\n \n   private static final List<String> LANGUAGES_WITH_NEW_MAINTAINER_NEED = \n-          Arrays.asList(\"en\", \"ja\");\n+          Arrays.asList(\"en\", \"ja\", \"is\");\n   private static final List<String> LANGUAGES_WITH_CO_MAINTAINER_NEED = \n-          Arrays.asList(\"da\");\n+          Arrays.asList(\"da\", \"be\");\n \n   public static void main(final String[] args) throws IOException {\n     if (args.length != 1) {",
      "parent_sha": "146a635ce4d6cfff00af38f8b814b6d5e17ff700"
    }
  },
  {
    "oid": "5e13747f2df7b8354bdec9550d08bc626fe262e1",
    "message": "small code and javadoc cleanup",
    "date": "2014-02-25T08:09:01Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/5e13747f2df7b8354bdec9550d08bc626fe262e1",
    "details": {
      "sha": "7f1e46750bce66d4c54f0ed50c68130d84e02d56",
      "filename": "languagetool-core/src/main/java/org/languagetool/rules/patterns/PatternRule.java",
      "status": "modified",
      "additions": 18,
      "deletions": 18,
      "changes": 36,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/5e13747f2df7b8354bdec9550d08bc626fe262e1/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpatterns%2FPatternRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/5e13747f2df7b8354bdec9550d08bc626fe262e1/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpatterns%2FPatternRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpatterns%2FPatternRule.java?ref=5e13747f2df7b8354bdec9550d08bc626fe262e1",
      "patch": "@@ -36,23 +36,15 @@ public class PatternRule extends AbstractPatternRule {\n \n   private final String shortMessage;\n \n-  /**\n-   * A list of elements as they appear in XML file (phrases count as single\n-   * tokens in case of matches or skipping).\n-   */\n+  // A list of elements as they appear in XML file (phrases count as single tokens in case of matches or skipping).\n   private final List<Integer> elementNo;\n \n   private String message;\n   private String suggestionsOutMsg; // extra suggestions outside message\n \n-  // Formatted suggestion elements.\n   private List<Match> suggestionMatches;\n-  \n-  // Formatted suggestion elements outside message.\n   private List<Match> suggestionMatchesOutMsg;\n-\n   private Set<String> tokenSet;\n-\n   private Set<String> lemmaSet;\n \n   // This property is used for short-circuiting evaluation of the elementNo list order.\n@@ -120,7 +112,7 @@ public PatternRule(final String id, final Language language,\n       final List<Element> elements, final String description,\n       final String message, final String shortMessage, final String suggestionsOutMsg) {\n     this(id, language, elements, description, message, shortMessage);\n-    this.suggestionsOutMsg=suggestionsOutMsg;\n+    this.suggestionsOutMsg = suggestionsOutMsg;\n   }\n \n   public PatternRule(final String id, final Language language,\n@@ -129,12 +121,22 @@ public PatternRule(final String id, final Language language,\n       final boolean isMember) {\n     this(id, language, elements, description, message, shortMessage, suggestionsOutMsg);\n     this.isMemberOfDisjunctiveSet = isMember;\n-  }  \n+  }\n \n+  /**\n+   * Get the message shown to the user if this rule matches.\n+   */\n   public final String getMessage() {\n     return message;\n   }\n-  \n+\n+  /**\n+   * Set the message shown to the user if this rule matches.\n+   */\n+  public final void setMessage(final String message) {\n+    this.message = message;\n+  }\n+\n   public final String getSuggestionsOutMsg() {\n     return suggestionsOutMsg;\n   }\n@@ -181,10 +183,6 @@ public final String toXML() {\n     }\n   }\n \n-  public final void setMessage(final String message) {\n-    this.message = message;\n-  }\n-\n   @Override\n   public final RuleMatch[] match(final AnalyzedSentence sentence) throws IOException {\n     try {\n@@ -197,14 +195,16 @@ public final RuleMatch[] match(final AnalyzedSentence sentence) throws IOExcepti\n     }\n   }\n \n+  /** Add formatted suggestion elements. */\n   public final void addSuggestionMatch(final Match m) {\n     if (suggestionMatches == null) {\n       suggestionMatches = new ArrayList<>();\n     }\n     suggestionMatches.add(m);\n   }\n-  \n-  public final void addSuggestionMatchOutMsg (final Match m) {\n+\n+  /** Add formatted suggestion elements outside message. */\n+  public final void addSuggestionMatchOutMsg(final Match m) {\n     if (suggestionMatchesOutMsg == null) {\n       suggestionMatchesOutMsg = new ArrayList<>();\n     }",
      "parent_sha": "7c336cf4acae969644b8502b4c394c88bb59f129"
    }
  },
  {
    "oid": "6fc44dca2cc46ed222eab5ab09f87124276dbf9e",
    "message": "typo fix in message (#9138)",
    "date": "2023-08-18T15:33:41Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/6fc44dca2cc46ed222eab5ab09f87124276dbf9e",
    "details": {
      "sha": "525fed6a5fa17d3ad781759a598457c50400ebd1",
      "filename": "languagetool-core/src/test/java/org/languagetool/LanguageSpecificTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/6fc44dca2cc46ed222eab5ab09f87124276dbf9e/languagetool-core%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2FLanguageSpecificTest.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/6fc44dca2cc46ed222eab5ab09f87124276dbf9e/languagetool-core%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2FLanguageSpecificTest.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-core%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2FLanguageSpecificTest.java?ref=6fc44dca2cc46ed222eab5ab09f87124276dbf9e",
      "patch": "@@ -236,7 +236,7 @@ private void testNoQuotesAroundSuggestion(Language lang) throws IOException {\n       System.out.println(\"Skipping testNoQuotesAroundSuggestion for \" + lang.getName());\n       return;\n     }\n-    System.out.println(\"Testing that there no quotes around <suggestion>s...\");\n+    System.out.println(\"Testing that there are no quotes around <suggestion>s...\");\n     String dirBase = JLanguageTool.getDataBroker().getRulesDir() + \"/\" + lang.getShortCode() + \"/\";\n     for (String ruleFileName : lang.getRuleFileNames()) {\n       if (ruleFileName.contains(\"-test-\")) {",
      "parent_sha": "26aea8604f2af8a6e37b43917426f9f92f0d8ced"
    }
  },
  {
    "oid": "5ff17b2a285aafbee4bd93d1cc6220851ca4ea1c",
    "message": "add more informative error msg in case of complex phrase-based rules",
    "date": "2008-03-18T18:51:17Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/5ff17b2a285aafbee4bd93d1cc6220851ca4ea1c",
    "details": {
      "sha": "64cde49605b73b3646cc589e2afe7e24b194cbf4",
      "filename": "trunk/JLanguageTool/src/test/de/danielnaber/languagetool/rules/patterns/PatternRuleTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/5ff17b2a285aafbee4bd93d1cc6220851ca4ea1c/trunk%2FJLanguageTool%2Fsrc%2Ftest%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FPatternRuleTest.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/5ff17b2a285aafbee4bd93d1cc6220851ca4ea1c/trunk%2FJLanguageTool%2Fsrc%2Ftest%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FPatternRuleTest.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Ftest%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FPatternRuleTest.java?ref=5ff17b2a285aafbee4bd93d1cc6220851ca4ea1c",
      "patch": "@@ -102,7 +102,7 @@ private void testGrammarRulesFromXML(final List<PatternRule> rules,\n         RuleMatch[] matches = getMatches(rule, badSentence, languageTool);\n         if (!rule.isWithComplexPhrase()) {\n           assertTrue(lang + \": Did expect one error in: \\\"\" + badSentence + \"\\\" (Rule: \" + rule\n-              + \"), got \" + matches.length, matches.length == 1);\n+              + \"), got \" + matches.length + \". Additional info:\" + rule.getMessage(), matches.length == 1);\n           assertEquals(lang + \": Incorrect match position markup (start) for rule \" + rule,\n               expectedMatchStart, matches[0].getFromPos());\n           assertEquals(lang + \": Incorrect match position markup (end) for rule \" + rule,\n@@ -175,6 +175,7 @@ private void testGrammarRulesFromXML(final List<PatternRule> rules,\n         final PatternRule badRule = complexRules.get(iter.next());\n         if (badRule != null) {\n           badRule.notComplexPhrase();\n+          badRule.setMessage(\"The rule contains a phrase that never matched any incorrect example.\");\n           badRules.add(badRule);\n         }\n       }",
      "parent_sha": "57db7014cb93e9cfc24610d7ffec7ea1eac5ff68"
    }
  },
  {
    "oid": "939bea53274d03c210381e93ac000d0abea3b5a2",
    "message": "[LO extension] solves a null pointer exception",
    "date": "2022-03-20T19:12:55Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/939bea53274d03c210381e93ac000d0abea3b5a2",
    "details": {
      "sha": "5c83aef2488ed7d93126b63cb06150ab028b1094",
      "filename": "languagetool-office-extension/src/main/java/org/languagetool/openoffice/TextLevelCheckQueue.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/939bea53274d03c210381e93ac000d0abea3b5a2/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FTextLevelCheckQueue.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/939bea53274d03c210381e93ac000d0abea3b5a2/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FTextLevelCheckQueue.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FTextLevelCheckQueue.java?ref=939bea53274d03c210381e93ac000d0abea3b5a2",
      "patch": "@@ -268,7 +268,7 @@ Language getLanguage(String docId, TextParagraph nStart) {\n       DocumentCache docCache = document.getDocumentCache();\n       if (docCache != null && nStart.number < docCache.textSize(nStart)) {\n         Locale locale = docCache.getTextParagraphLocale(nStart);\n-        if (multiDocHandler.hasLocale(locale)) {\n+        if (locale != null && multiDocHandler.hasLocale(locale)) {\n           return multiDocHandler.getLanguage(locale);\n         }\n         MessageHandler.printToLogFile(\"TextLevelCheckQueue: getLanguage: return null: locale = \" + OfficeTools.localeToString(locale));",
      "parent_sha": "0a05f83374b499f01507654caf392ef22ad67507"
    }
  },
  {
    "oid": "d157a905cdf3c2bbefaec7e669069316e88e6e03",
    "message": "new exception to the rule",
    "date": "2006-08-13T00:13:24Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/d157a905cdf3c2bbefaec7e669069316e88e6e03",
    "details": {
      "sha": "33f839573d2464e35e559984c5a833ed7768d0d5",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/rules/pl/PolishWordRepeatRule.java",
      "status": "modified",
      "additions": 12,
      "deletions": 4,
      "changes": 16,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/d157a905cdf3c2bbefaec7e669069316e88e6e03/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpl%2FPolishWordRepeatRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/d157a905cdf3c2bbefaec7e669069316e88e6e03/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpl%2FPolishWordRepeatRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpl%2FPolishWordRepeatRule.java?ref=d157a905cdf3c2bbefaec7e669069316e88e6e03",
      "patch": "@@ -71,13 +71,21 @@ public RuleMatch[] match(AnalyzedSentence text) {\n \t        \t\tisWord = false;\n \t        \t\tbreak;\n \t        \t}\n+                \n+                String lemma = tokens[i].getAnalyzedToken(k).getLemma();\n+                if (Pattern.matches(\"to\", lemma)) {\n+                    isWord = false;\n+                    break;\n+                 }\n+                \n \t        \tif (Pattern.matches(\"prep:.*\", posTag)) {\n \t        \t\tisWord = false;\n \t        \t\tbreak;\n-\t        \t } \n-       \t\t    } else {\n-       \t\t    \thasLemma = false;\n-\t        \t}\n+\t        \t }\n+                } else {\n+                    hasLemma = false;\n+                }\n+                                       \t\t    \n \t        }\n \t        \n \t        if (tokens[i].getToken().equals(\"nie\")) {",
      "parent_sha": "e244b7c508b77f610532557405cc047a919177c3"
    }
  },
  {
    "oid": "4efea1de5b86097b95c2c675222defb71b5f0f6b",
    "message": "add JavaDoc and small refactoring (no functional change)",
    "date": "2007-09-13T10:05:09Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/4efea1de5b86097b95c2c675222defb71b5f0f6b",
    "details": {
      "sha": "b2d47e85ac86286e8e9a002c1ca7ca83c9fa88d4",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/rules/patterns/Match.java",
      "status": "modified",
      "additions": 75,
      "deletions": 42,
      "changes": 117,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/4efea1de5b86097b95c2c675222defb71b5f0f6b/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FMatch.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/4efea1de5b86097b95c2c675222defb71b5f0f6b/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FMatch.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FMatch.java?ref=4efea1de5b86097b95c2c675222defb71b5f0f6b",
      "patch": "@@ -93,18 +93,30 @@ public Match(final String posTag, final String posTagReplace,\n     this.posTagReplace = posTagReplace;\n   }\n \n-  public void setToken(final AnalyzedTokenReadings token) {\n+  /**\n+   * Sets the token that will be formatted or otherwise\n+   * used in the class.\n+   * @param token @AnalyzedTokenReadings\n+   * \n+   */\n+  public final void setToken(final AnalyzedTokenReadings token) {\n     if (!staticLemma) {\n       formattedToken = token;\n     } else {\n       matchedToken = token;\n     }\n   }\n \n-  public void setLemmaString(final String lemmaString) {\n+  /**\n+   * Sets a base form (lemma) that will be formatted, or\n+   * synthesized, using the specified POS regular expressions.\n+   * @param lemmaString @String that specifies the base form.\n+   */\n+  public final void setLemmaString(final String lemmaString) {\n     if (lemmaString != null) {\n       if (!lemmaString.equals(\"\")) {\n-        formattedToken = new AnalyzedTokenReadings(new AnalyzedToken(lemmaString, null, lemmaString));\n+        formattedToken = new AnalyzedTokenReadings(\n+            new AnalyzedToken(lemmaString, null, lemmaString));\n         staticLemma = true;\n         postagRegexp = true;\n         if (postagRegexp && posTag != null) {\n@@ -114,23 +126,30 @@ public void setLemmaString(final String lemmaString) {\n     }\n   }\n \n-  public void setSynthesizer(final Synthesizer synth) {\n+  /**\n+   * Sets a synthesizer used for grammatical synthesis\n+   * of forms based on formatted POS values.\n+   * @param synth @Synthesizer class.\n+   */\n+  public final void setSynthesizer(final Synthesizer synth) {\n     synthesizer = synth;\n   }    \n \n   /**\n    * Gets all strings formatted using the match\n    * element.\n-   * @return String[] array of strings\n-   * @throws IOException \n+   * @return @String[] array of strings\n+   * @throws IOException in case of syntesizer-related\n+   * disk problems. \n    */\n   public final String[] toFinalString() throws IOException {\n     String[] formattedString = new String[1];\n     if (formattedToken != null) {      \n       formattedString[0] = formattedToken.getToken();\n       if (pRegexMatch != null) {          \n         formattedString[0] \n-                        = pRegexMatch.matcher(formattedString[0]).replaceAll(regexReplace);\n+                        = pRegexMatch.matcher(formattedString[0]).\n+                        replaceAll(regexReplace);\n       }        \n       switch (caseConversionType) {\n         case NONE : formattedString[0] = formattedString[0]; break;\n@@ -151,39 +170,7 @@ public final String[] toFinalString() throws IOException {\n           formattedString[0] = formattedToken.getToken();\n         } else if (postagRegexp) {\n           final int readingCount = formattedToken.getReadingsLength();\n-          String targetPosTag = posTag;\n-          if (staticLemma) {\n-            final int numRead = matchedToken.getReadingsLength();\n-            for (int i = 0; i < numRead; i++) {\n-              final String tst = matchedToken.getAnalyzedToken(i).getPOSTag();\n-              if (tst != null) {\n-                if (pPosRegexMatch.matcher(tst).matches()) {\n-                  targetPosTag = matchedToken.getAnalyzedToken(i).getPOSTag();\n-                  break;\n-                }\n-              }\n-            }            \n-            if (pPosRegexMatch != null & posTagReplace != null) {            \n-              targetPosTag = pPosRegexMatch.matcher(targetPosTag).replaceAll(posTagReplace);  \n-            }\n-            if (targetPosTag.indexOf('?') > 0) {\n-              targetPosTag = targetPosTag.replaceAll(\"\\\\?\", \"\\\\\\\\?\");\n-            }\n-          } else {\n-            final int numRead = formattedToken.getReadingsLength();\n-            for (int i = 0; i < numRead; i++) {\n-              final String tst = formattedToken.getAnalyzedToken(i).getPOSTag();\n-              if (tst != null) {\n-                if (pPosRegexMatch.matcher(tst).matches()) {\n-                  targetPosTag = formattedToken.getAnalyzedToken(i).getPOSTag();\n-                  break;\n-                }\n-              }\n-            }\n-            if (pPosRegexMatch != null & posTagReplace != null) {            \n-              targetPosTag = pPosRegexMatch.matcher(targetPosTag).replaceAll(posTagReplace);  \n-            }\n-          }\n+          final String targetPosTag = getTargetPosTag();\n           final TreeSet<String> wordForms = new TreeSet<String>();          \n           for (int i = 0; i < readingCount; i++) {\n             final String[] possibleWordForms = \n@@ -230,6 +217,50 @@ public final String[] toFinalString() throws IOException {\n     return formattedString;\n   }\n \n+  /**\n+   * Format POS tag using parameters already defined in the class.\n+   * @return Formatted POS tag as @String.\n+   */\n+//TODO: use this for getting only POS tag in <token><match ...></token>   \n+ private String getTargetPosTag() {   \n+   String targetPosTag = posTag;\n+   if (staticLemma) {\n+     final int numRead = matchedToken.getReadingsLength();\n+     for (int i = 0; i < numRead; i++) {\n+       final String tst = matchedToken.getAnalyzedToken(i).getPOSTag();\n+       if (tst != null) {\n+         if (pPosRegexMatch.matcher(tst).matches()) {\n+           targetPosTag = matchedToken.getAnalyzedToken(i).getPOSTag();\n+           break;\n+         }\n+       }\n+     }            \n+     if (pPosRegexMatch != null & posTagReplace != null) {            \n+       targetPosTag = pPosRegexMatch.matcher(targetPosTag).\n+         replaceAll(posTagReplace);  \n+     }\n+     if (targetPosTag.indexOf('?') > 0) {\n+       targetPosTag = targetPosTag.replaceAll(\"\\\\?\", \"\\\\\\\\?\");\n+     }\n+   } else {\n+     final int numRead = formattedToken.getReadingsLength();\n+     for (int i = 0; i < numRead; i++) {\n+       final String tst = formattedToken.getAnalyzedToken(i).getPOSTag();\n+       if (tst != null) {\n+         if (pPosRegexMatch.matcher(tst).matches()) {\n+           targetPosTag = formattedToken.getAnalyzedToken(i).getPOSTag();\n+           break;\n+         }\n+       }\n+     }\n+     if (pPosRegexMatch != null & posTagReplace != null) {            \n+       targetPosTag = pPosRegexMatch.matcher(targetPosTag).\n+         replaceAll(posTagReplace);  \n+     }\n+   }\n+   return targetPosTag;\n+ }\n+  \n   /**\n    * Method for getting the formatted match as a single string.\n    * In case of multiple matches, it joins them using a regular\n@@ -269,7 +300,8 @@ public final int getTokenRef() {\n     return tokenRef;\n   }\n \n-  public final AnalyzedTokenReadings filterReadings(final AnalyzedTokenReadings tokenToFilter) {    \n+  public final AnalyzedTokenReadings filterReadings(\n+      final AnalyzedTokenReadings tokenToFilter) {    \n     final ArrayList <AnalyzedToken> l = new ArrayList <AnalyzedToken>();\n     if (formattedToken != null) {\n       String token = formattedToken.getToken();\n@@ -296,7 +328,8 @@ public final AnalyzedTokenReadings filterReadings(final AnalyzedTokenReadings to\n               if (pPosRegexMatch.matcher(tst).matches()) {\n                 targetPosTag = formattedToken.getAnalyzedToken(i).getPOSTag();\n                 if (pPosRegexMatch != null & posTagReplace != null) {            \n-                  targetPosTag = pPosRegexMatch.matcher(targetPosTag).replaceAll(posTagReplace);  \n+                  targetPosTag = pPosRegexMatch.matcher(targetPosTag).\n+                    replaceAll(posTagReplace);  \n                 }\n                 l.add(new AnalyzedToken(token, targetPosTag,\n                     formattedToken.getAnalyzedToken(i).getLemma(),",
      "parent_sha": "97de0cce32250be8d9f3f6070aa6e7b898978db5"
    }
  },
  {
    "oid": "0034a6f0f7bb168405e771e15e1fb98dd78f8d28",
    "message": "[de] GERMAN_SPELLER fix (#6681)\n\n* [de] GERMAN_SPELLER fix\r\n\r\n* Update GermanSpellerRule.java",
    "date": "2022-05-16T13:16:30Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/0034a6f0f7bb168405e771e15e1fb98dd78f8d28",
    "details": {
      "sha": "f0a60778d58d0dade42d07877043a39cd27fcb4f",
      "filename": "languagetool-language-modules/de/src/main/java/org/languagetool/rules/de/GermanSpellerRule.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/0034a6f0f7bb168405e771e15e1fb98dd78f8d28/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FGermanSpellerRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/0034a6f0f7bb168405e771e15e1fb98dd78f8d28/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FGermanSpellerRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FGermanSpellerRule.java?ref=0034a6f0f7bb168405e771e15e1fb98dd78f8d28",
      "patch": "@@ -76,7 +76,8 @@ public class GermanSpellerRule extends CompoundAwareHunspellRule {\n     \"rassejude\", \"rassejuden\", \"rassej\u00fcdin\", \"rassej\u00fcdinnen\",\n     \"m\u00f6se\", \"m\u00f6sen\", \"fotze\", \"fotzen\",\n     \"judenfrei\", \"judenfreie\", \"judenfreier\", \"judenfreies\", \"judenfreien\", \"judenfreiem\",\n-    \"judenrein\", \"judenreine\", \"judenreiner\", \"judenreines\", \"judenreinen\", \"judenreinem\"\n+    \"judenrein\", \"judenreine\", \"judenreiner\", \"judenreines\", \"judenreinen\", \"judenreinem\",\n+    \"judenmord\", \"judenmorden\", \"judenm\u00f6rder\"\n   ));\n   \n   // some exceptions for changes to the spelling in 2017 - just a workaround so we don't have to touch the binary dict:",
      "parent_sha": "645c6e92379959869819dd2cec6b3f408263ee53"
    }
  },
  {
    "oid": "e15ba92ca768452bcd23acb075e18ed246338cb1",
    "message": "code cleanup (minor changes)",
    "date": "2008-07-12T09:46:16Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/e15ba92ca768452bcd23acb075e18ed246338cb1",
    "details": {
      "sha": "cdee5fca88298d65e27df0760cd4e1cbc581ba73",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/openoffice/Main.java",
      "status": "modified",
      "additions": 47,
      "deletions": 43,
      "changes": 90,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/e15ba92ca768452bcd23acb075e18ed246338cb1/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Fopenoffice%2FMain.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/e15ba92ca768452bcd23acb075e18ed246338cb1/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Fopenoffice%2FMain.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Fopenoffice%2FMain.java?ref=e15ba92ca768452bcd23acb075e18ed246338cb1",
      "patch": "@@ -174,8 +174,9 @@ public void changeContext(final XComponentContext xCompContext) {\n    * @return Language - the language under the visible cursor.\n    */\n   private Language getLanguage() {\n-    if (xTextDoc == null)\n+    if (xTextDoc == null) {\n       return Language.ENGLISH; // for testing with local main() method only\n+    }\n     Locale charLocale;\n     try {     \n       final XModel model = \n@@ -191,8 +192,8 @@ private Language getLanguage() {\n           xCursor);\n       charLocale = (Locale) xCursorProps.getPropertyValue(\"CharLocale\");\n       boolean langIsSupported = false;\n-      for (int i = 0; i < Language.LANGUAGES.length; i++) {\n-        if (Language.LANGUAGES[i].getShortName().equals(charLocale.Language)) {\n+      for (Language element : Language.LANGUAGES) {\n+        if (element.getShortName().equals(charLocale.Language)) {\n           langIsSupported = true;\n           break;\n         }\n@@ -203,9 +204,9 @@ private Language getLanguage() {\n         \"' is not supported by LanguageTool.\");\n         return null;\n       }\n-    } catch (UnknownPropertyException e) {\n+    } catch (final UnknownPropertyException e) {\n       throw new RuntimeException(e);\n-    } catch (WrappedTargetException e) {\n+    } catch (final WrappedTargetException e) {\n       throw new RuntimeException(e);\n     }\n     return Language.getLanguageForShortName(charLocale.Language);\n@@ -378,6 +379,7 @@ public final void runOptionsDialog() {\n     configThread.start();\n     while (true) {\n       if (configThread.done()) {\n+        resetDocument();\n         break;\n       }\n       try {\n@@ -495,64 +497,63 @@ public void trigger(final String sEvent) {\n         checkText(textToCheck);\n       } else if (sEvent.equals(\"test_new_win\")) {\n //      TODO: make this a separate config dialog class        \n-        XMultiComponentFactory xMCF = xContext.getServiceManager();      \n+        final XMultiComponentFactory xMCF = xContext.getServiceManager();      \n //      get PackageInformationProvider from ComponentContext\n         final XNameAccess xNameAccess = (XNameAccess) UnoRuntime.queryInterface(\n             XNameAccess.class, xContext);\n-        Object oPIP = xNameAccess.getByName(\"/singletons/com.sun.star.deployment.PackageInformationProvider\");\n-        XPackageInformationProvider xPIP = (XPackageInformationProvider) UnoRuntime.queryInterface(\n+        final Object oPIP = xNameAccess.getByName(\"/singletons/com.sun.star.deployment.PackageInformationProvider\");\n+        final XPackageInformationProvider xPIP = (XPackageInformationProvider) UnoRuntime.queryInterface(\n             XPackageInformationProvider.class, oPIP);\n //      get the url of the directory extension installed\n         final String sPackageURL = \n           xPIP.getPackageLocation(\"org.openoffice.languagetool.oxt\");\n         final String sDialogURL = sPackageURL + \"/Options.xdl\";\n \n //      dialog provider to make a dialog\n-        Object oDialogProvider = xMCF.createInstanceWithContext(\n+        final Object oDialogProvider = xMCF.createInstanceWithContext(\n             \"com.sun.star.awt.DialogProvider\", xContext);\n-        XDialogProvider xDialogProv = (XDialogProvider) UnoRuntime.queryInterface(\n+        final XDialogProvider xDialogProv = (XDialogProvider) UnoRuntime.queryInterface(\n             XDialogProvider.class, oDialogProvider);\n-        XDialog xDialog = xDialogProv.createDialog(sDialogURL);\n-        XControlContainer xDlgContainer = (XControlContainer) UnoRuntime.queryInterface(XControlContainer.class, xDialog);\n-        XControl xListControl = xDlgContainer.getControl(\"LanguageList\");\n-        XListBox xListBox = (XListBox) UnoRuntime.queryInterface(XListBox.class, xListControl);\n+        final XDialog xDialog = xDialogProv.createDialog(sDialogURL);\n+        final XControlContainer xDlgContainer = (XControlContainer) UnoRuntime.queryInterface(XControlContainer.class, xDialog);\n+        final XControl xListControl = xDlgContainer.getControl(\"LanguageList\");\n+        final XListBox xListBox = (XListBox) UnoRuntime.queryInterface(XListBox.class, xListControl);\n         for (short i = 0; i < Language.LANGUAGES.length - 1; i++) {\n           xListBox.addItem(\n               Language.LANGUAGES[i].getTranslatedName(MESSAGES), i);\n         }\n-        XButton xOKButton = (XButton) UnoRuntime.queryInterface(XButton.class, xDlgContainer.getControl(\"OK_Button\"));\n+        final XButton xOKButton = (XButton) UnoRuntime.queryInterface(XButton.class, xDlgContainer.getControl(\"OK_Button\"));\n         xOKButton.setLabel(StringTools.getOOoLabel(MESSAGES.getString(\"guiOKButton\")));\n-        XButton xCancelButton = (XButton) UnoRuntime.queryInterface(XButton.class, xDlgContainer.getControl(\"Cancel_Button\"));\n+        final XButton xCancelButton = (XButton) UnoRuntime.queryInterface(XButton.class, xDlgContainer.getControl(\"Cancel_Button\"));\n         xCancelButton.setLabel(StringTools.getOOoLabel(MESSAGES.getString(\"guiCancelButton\")));\n \n-        XControl xControlTree = xDlgContainer.getControl(\"Rules\");\n-        XControlModel xTreeModel = xControlTree.getModel();\n+        final XControl xControlTree = xDlgContainer.getControl(\"Rules\");\n+        final XControlModel xTreeModel = xControlTree.getModel();\n \n-        Object xTreeData = xMCF.createInstanceWithContext(\n+        final Object xTreeData = xMCF.createInstanceWithContext(\n             \"com.sun.star.awt.tree.MutableTreeDataModel\", xContext);\n-        XMutableTreeDataModel mxTreeDataModel = (XMutableTreeDataModel) UnoRuntime.queryInterface(\n+        final XMutableTreeDataModel mxTreeDataModel = (XMutableTreeDataModel) UnoRuntime.queryInterface(\n             XMutableTreeDataModel.class, xTreeData);\n \n-        XMutableTreeNode xNode = mxTreeDataModel.createNode(\"Rules\", false);\n+        final XMutableTreeNode xNode = mxTreeDataModel.createNode(\"Rules\", false);\n \n         xNode.appendChild(mxTreeDataModel.createNode(\"Misc\", false));\n         xNode.appendChild(mxTreeDataModel.createNode(\"Punctuation\", false));\n \n         mxTreeDataModel.setRoot(xNode);\n \n-        XPropertySet xTreeModelProperty = (XPropertySet) UnoRuntime.queryInterface(\n+        final XPropertySet xTreeModelProperty = (XPropertySet) UnoRuntime.queryInterface(\n             XPropertySet.class, xTreeModel);\n         xTreeModelProperty.setPropertyValue(\"DataModel\", mxTreeDataModel);\n \n         xNode.setDataValue(\"test2\");\n         xNode.setExpandedGraphicURL(sPackageURL + \"triangle_down.png\");\n         xNode.setCollapsedGraphicURL(sPackageURL + \"triangle_right.png\");\n \n-        short nResult = xDialog.execute();\n+        final short nResult = xDialog.execute();\n \n       } else if (sEvent.equals(\"configure\")) {                \n-        runOptionsDialog();\n-        resetDocument();\n+        runOptionsDialog();        \n       } else if (sEvent.equals(\"about\")) {\n         final AboutDialogThread aboutthread = new AboutDialogThread(MESSAGES);\n         aboutthread.start();\n@@ -569,7 +570,6 @@ public void trigger(final String sEvent) {\n    * that options have changed and the doc should be rechecked.\n    *\n    */\n-//FIXME: this is called only in longer docs or on text modify... \n   public final void resetDocument() {\n     if (!xEventListeners.isEmpty()) {\n       for (final XLinguServiceEventListener xEvLis : xEventListeners) {\n@@ -723,28 +723,28 @@ private File getHomeDir() {\n \n //TODO: remove this method when spell-checking dialog window is available\n   //and bug-free :-/\n-  static String getParagraphContent(Object para) throws NoSuchElementException, WrappedTargetException, UnknownPropertyException {\n+  static String getParagraphContent(final Object para) throws NoSuchElementException, WrappedTargetException, UnknownPropertyException {\n     if (para == null) {\n       return null;\n     }\n-    com.sun.star.container.XEnumerationAccess xPortionAccess = (com.sun.star.container.XEnumerationAccess) UnoRuntime\n+    final com.sun.star.container.XEnumerationAccess xPortionAccess = (com.sun.star.container.XEnumerationAccess) UnoRuntime\n     .queryInterface(com.sun.star.container.XEnumerationAccess.class, para);\n     if (xPortionAccess == null) {\n       System.err.println(\"xPortionAccess is null\");\n       return null;\n     }\n-    StringBuilder sb = new StringBuilder();\n-    for (XEnumeration portionEnum = xPortionAccess.createEnumeration(); portionEnum.hasMoreElements();) {\n-      Object textPortion = portionEnum.nextElement();\n-      XPropertySet textProps = (XPropertySet) UnoRuntime.queryInterface(XPropertySet.class, textPortion);\n-      String type = (String)textProps.getPropertyValue(\"TextPortionType\");\n+    final StringBuilder sb = new StringBuilder();\n+    for (final XEnumeration portionEnum = xPortionAccess.createEnumeration(); portionEnum.hasMoreElements();) {\n+      final Object textPortion = portionEnum.nextElement();\n+      final XPropertySet textProps = (XPropertySet) UnoRuntime.queryInterface(XPropertySet.class, textPortion);\n+      final String type = (String)textProps.getPropertyValue(\"TextPortionType\");\n       if (\"Footnote\".equals(type) || \"DocumentIndexMark\".equals(type)) {\n         // a footnote reference appears as one character in the text. we don't use a whitespace\n         // because we don't want to trigger the \"no whitespace before comma\" rule in this case:\n         // my footnote\u00c2\u00b9, foo bar\n         sb.append(\"1\");\n       } else {\n-        XTextRange xtr = (XTextRange) UnoRuntime.queryInterface(XTextRange.class, textPortion);\n+        final XTextRange xtr = (XTextRange) UnoRuntime.queryInterface(XTextRange.class, textPortion);\n         sb.append(xtr.getString());\n       }\n     }\n@@ -759,10 +759,11 @@ class AboutDialogThread extends Thread {\n       this.messages = messages;\n     }\n \n+    @Override\n     public void run() {\n-      XModel model = (XModel)UnoRuntime.queryInterface(XModel.class, xComponent);\n-      XWindow parentWindow = model.getCurrentController().getFrame().getContainerWindow();\n-      XWindowPeer parentWindowPeer = (XWindowPeer) UnoRuntime.queryInterface(XWindowPeer.class, parentWindow);\n+      final XModel model = (XModel)UnoRuntime.queryInterface(XModel.class, xComponent);\n+      final XWindow parentWindow = model.getCurrentController().getFrame().getContainerWindow();\n+      final XWindowPeer parentWindowPeer = (XWindowPeer) UnoRuntime.queryInterface(XWindowPeer.class, parentWindow);\n       final OOoAboutDialog about = \n         new OOoAboutDialog(messages, parentWindowPeer);\n       about.show();\n@@ -814,6 +815,7 @@ class DialogThread extends Thread {\n     this.text = text;\n   }\n \n+  @Override\n   public void run() {\n     JOptionPane.showMessageDialog(null, text);\n   }\n@@ -839,12 +841,14 @@ class ResultDialogThread extends Thread {\n     this.textTocheck = textTocheck;\n   }\n \n+  @Override\n   public void run() {\n     OOoDialog dialog;\n-    if (xViewCursor == null)\n+    if (xViewCursor == null) {\n       dialog = new OOoDialog(configuration, rules, xTextDoc, checkedParagraphs);\n-    else\n+    } else {\n       dialog = new OOoDialog(configuration, rules, xTextDoc, checkedParagraphs, xViewCursor, textTocheck);\n+    }\n     dialog.show();\n   }\n \n@@ -864,21 +868,21 @@ class SingletonFactory implements XSingleComponentFactory {\n \n   private Object instance = null;\n   \n-  public Object createInstanceWithArgumentsAndContext(Object[] arg0, XComponentContext arg1) throws com.sun.star.uno.Exception {\n+  public Object createInstanceWithArgumentsAndContext(final Object[] arg0, final XComponentContext arg1) throws com.sun.star.uno.Exception {\n     if (instance == null) {\n       instance = new de.danielnaber.languagetool.openoffice.Main(arg1);\n     } else {\n-      de.danielnaber.languagetool.openoffice.Main x = (de.danielnaber.languagetool.openoffice.Main) instance;\n+      final de.danielnaber.languagetool.openoffice.Main x = (de.danielnaber.languagetool.openoffice.Main) instance;\n       x.changeContext(arg1);\n     }\n     return instance;\n   }\n \n-  public Object createInstanceWithContext(XComponentContext arg0) throws com.sun.star.uno.Exception {  \n+  public Object createInstanceWithContext(final XComponentContext arg0) throws com.sun.star.uno.Exception {  \n     if (instance == null) {\n       instance = new de.danielnaber.languagetool.openoffice.Main(arg0);\n     } else {\n-      de.danielnaber.languagetool.openoffice.Main x = (de.danielnaber.languagetool.openoffice.Main) instance;\n+      final de.danielnaber.languagetool.openoffice.Main x = (de.danielnaber.languagetool.openoffice.Main) instance;\n       x.changeContext(arg0);\n     }\n     return instance;",
      "parent_sha": "037a5f57802c2cccc7c82cc88bece3cc267e347f"
    }
  },
  {
    "oid": "5436fbf97388b55079265865e43971c79f3a9bb6",
    "message": "[de] change priorities, so that e.g. double space rule wins over style rules",
    "date": "2023-02-23T19:27:48Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/5436fbf97388b55079265865e43971c79f3a9bb6",
    "details": {
      "sha": "0e79d32cffd5dcbbc041128d8f03743e7cb81672",
      "filename": "languagetool-language-modules/de/src/main/java/org/languagetool/language/German.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/5436fbf97388b55079265865e43971c79f3a9bb6/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Flanguage%2FGerman.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/5436fbf97388b55079265865e43971c79f3a9bb6/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Flanguage%2FGerman.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Flanguage%2FGerman.java?ref=5436fbf97388b55079265865e43971c79f3a9bb6",
      "patch": "@@ -494,11 +494,11 @@ protected int getPriorityForId(String id) {\n       case \"REPETITIONS_STYLE\": return -60;\n       case \"MAN_SIEHT_SEHR_SCHOEN\": return -14; // prefer over SEHR_SCHOEN\n       // Category ids - make sure style issues don't hide overlapping \"real\" errors:\n+      case \"TYPOGRAPHY\": return -14;\n       case \"COLLOQUIALISMS\": return -15;\n       case \"STYLE\": return -15;\n       case \"REDUNDANCY\": return -15;\n       case \"GENDER_NEUTRALITY\": return -15;\n-      case \"TYPOGRAPHY\": return -15;\n     }\n     if (id.startsWith(\"CONFUSION_RULE_\")) {\n       return -1;",
      "parent_sha": "07fcebf1c46e1e334f7188d2d7a1cb6385c11ff5"
    }
  },
  {
    "oid": "a0ed725f2f78c69635915063052b9b5c223e9133",
    "message": "simplify a little",
    "date": "2008-07-15T17:05:50Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/a0ed725f2f78c69635915063052b9b5c223e9133",
    "details": {
      "sha": "e35cecb7538538eddff0855aa565c3d1342da015",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/JLanguageTool.java",
      "status": "modified",
      "additions": 24,
      "deletions": 27,
      "changes": 51,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/a0ed725f2f78c69635915063052b9b5c223e9133/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2FJLanguageTool.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/a0ed725f2f78c69635915063052b9b5c223e9133/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2FJLanguageTool.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2FJLanguageTool.java?ref=a0ed725f2f78c69635915063052b9b5c223e9133",
      "patch": "@@ -89,9 +89,7 @@ public final class JLanguageTool {\n   private PrintStream printStream = null;\n   \n   private int sentenceCount = 0;\n-  \n-  private ResourceBundle messages = null;\n-  \n+    \n   private boolean listUnknownWords = false;\n   private Set<String> unknownWords = null;\n \n@@ -122,7 +120,7 @@ public JLanguageTool(final Language language, final Language motherTongue) throw\n     }\n     this.language = language;\n     this.motherTongue = motherTongue;\n-    messages = getMessageBundle(language);\n+    final ResourceBundle messages = getMessageBundle(language);\n     final Rule[] allBuiltinRules = getAllBuiltinRules(language, messages);\n     for (final Rule element : allBuiltinRules) {\n       if (element.supportsLanguage(language)) {\n@@ -206,7 +204,7 @@ private Rule[] getAllBuiltinRules(final Language language, final ResourceBundle\n       throw new RuntimeException(\"Failed to load rules: \" + e.getMessage(), e);\n     }\n     //\tSystem.err.println(\"Loaded \" + rules.size() + \" rules\");\n-    return rules.toArray(new Rule[0]);\n+    return rules.toArray(new Rule[rules.size()]);\n   }\n   \n   /**\n@@ -458,18 +456,17 @@ public List<RuleMatch> check(final String text) throws IOException {\n     \n     //removing false positives in paragraph-level rules\n     for (final Rule rule : allRules) {\n-      if (rule.isParagraphBackTrack()) {\n-        if (rule.getMatches() != null) {\n+      if (rule.isParagraphBackTrack()\n+          && (rule.getMatches() != null)) {\n         final List <RuleMatch> rm = rule.getMatches();           \n-          for (final RuleMatch r : rm) {\n-            if (rule.isInRemoved(r)) {\n-              ruleMatches.remove(r);\n-            }\n+        for (final RuleMatch r : rm) {\n+          if (rule.isInRemoved(r)) {\n+            ruleMatches.remove(r);\n           }\n-       }\n-     }          \n+        }       \n+      }          \n     }\n-    \n+\n     return ruleMatches;\n   }\n   \n@@ -535,34 +532,34 @@ public AnalyzedSentence getAnalyzedSentence(final String sentence) throws IOExce\n     int lastToken = toArrayCount - 1;\n     //make SENT_END appear at last not whitespace token\n     for (int i = 0; i < toArrayCount - 1; i++) {\n-     if (!tokenArray[lastToken - i].isWhitespace()) {\n+      if (!tokenArray[lastToken - i].isWhitespace()) {\n         lastToken -= i;\n         break;\n-     }\n+      }\n     }\n     final AnalyzedToken sentenceEnd = \n       new AnalyzedToken(tokenArray[lastToken].getToken(), \n           SENTENCE_END_TAGNAME,\n           tokenArray[lastToken].getAnalyzedToken(0).getLemma(),\n           tokenArray[lastToken].getAnalyzedToken(0).getStartPos());\n-        tokenArray[lastToken].addReading(sentenceEnd);\n-        \n-    if (tokenArray.length == 2) {\n-    if (tokenArray[0].isSentStart() \n+    tokenArray[lastToken].addReading(sentenceEnd);\n+\n+    if (tokenArray.length == 2 \n+        && (tokenArray[0].isSentStart()) \n         && tokenArray[1].getToken().equals(\"\\n\")) {\n       final AnalyzedToken paragraphEnd =\n-      new AnalyzedToken(tokenArray[lastToken].getToken(),\n-          PARAGRAPH_END_TAGNAME,\n-          tokenArray[lastToken].getAnalyzedToken(0).getLemma(),\n-          tokenArray[lastToken].getAnalyzedToken(0).getStartPos());\n+        new AnalyzedToken(tokenArray[lastToken].getToken(),\n+            PARAGRAPH_END_TAGNAME,\n+            tokenArray[lastToken].getAnalyzedToken(0).getLemma(),\n+            tokenArray[lastToken].getAnalyzedToken(0).getStartPos());\n       tokenArray[lastToken].addReading(paragraphEnd);        \n-      }\n     }\n-    \n+\n+\n     AnalyzedSentence finalSentence = new AnalyzedSentence(tokenArray);\n     // disambiguate assigned tags            \n     finalSentence = disambiguator.disambiguate(finalSentence);\n-      \n+\n     return finalSentence;\n   }\n   ",
      "parent_sha": "6cbbcfc6cbc470754106bc5d955ed8c02b0af1cf"
    }
  },
  {
    "oid": "fc173a0e4d2b1ba91dee2ecf3a08802b55847a65",
    "message": "add some exceptions",
    "date": "2007-01-03T23:19:54Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/fc173a0e4d2b1ba91dee2ecf3a08802b55847a65",
    "details": {
      "sha": "cf26df12dbf1fcba3a804359189b47309517a5a3",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/rules/CommaWhitespaceRule.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/fc173a0e4d2b1ba91dee2ecf3a08802b55847a65/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2FCommaWhitespaceRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/fc173a0e4d2b1ba91dee2ecf3a08802b55847a65/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2FCommaWhitespaceRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2FCommaWhitespaceRule.java?ref=fc173a0e4d2b1ba91dee2ecf3a08802b55847a65",
      "patch": "@@ -72,7 +72,9 @@ public RuleMatch[] match(final AnalyzedSentence text) {\n           suggestionText = \")\";\n           fixLen = 1;\n     \t\t} else if (prevToken.trim().equals(\",\") && !token.trim().equals(\"\") &&\n-                !token.equals(\"'\") && !token.equals(\"&quot\")&& !token.equals(\"\u201d\") && !token.equals(\"\u2019\") && !token.matches(\".*\\\\d.*\") && !token.equals(\"-\")) {\n+                !token.equals(\"'\") && !token.equals(\"&quot\")&& !token.equals(\"\u201d\") && !token.equals(\"\u2019\") &&\n+                !token.equals(\"\\\"\") && !token.equals(\"\u201c\") &&\n+                !token.matches(\".*\\\\d.*\") && !token.equals(\"-\")) {\n                   \t\t\tmsg = messages.getString(\"missing_space_after_comma\");\n \n           suggestionText = \", \";",
      "parent_sha": "49e4e847348e5d2b4689648182483d8a056ab058"
    }
  },
  {
    "oid": "a47a639a0282b28605f4dc93861e57ee5b09758c",
    "message": "[en] fix priority for EN_COMPOUNDS, which is EN_COMPOUNDS_... now",
    "date": "2023-08-30T07:17:46Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/a47a639a0282b28605f4dc93861e57ee5b09758c",
    "details": {
      "sha": "cec26518fb80295569fde151997c52d8fe86c3b2",
      "filename": "languagetool-language-modules/en/src/main/java/org/languagetool/language/English.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/a47a639a0282b28605f4dc93861e57ee5b09758c/languagetool-language-modules%2Fen%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Flanguage%2FEnglish.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/a47a639a0282b28605f4dc93861e57ee5b09758c/languagetool-language-modules%2Fen%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Flanguage%2FEnglish.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fen%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Flanguage%2FEnglish.java?ref=a47a639a0282b28605f4dc93861e57ee5b09758c",
      "patch": "@@ -324,7 +324,6 @@ protected int getPriorityForId(String id) {\n       case \"YOU_GOOD\":                  return 3;   // prefer over AI_HYDRA_LEO_CP (YOU_YOURE etc.) // prefer over PRP_PAST_PART\n       case \"DOS_AND_DONTS\":             return 3;\n       case \"IF_YOU_FURTHER_QUESTIONS\":  return 3;   // higher prio than agreement rules and AI\n-      case \"EN_COMPOUNDS\":              return 2;\n       case \"ABBREVIATION_PUNCTUATION\":  return 2;\n       case \"READ_ONLY_ACCESS_HYPHEN\":   return 2;   // higher priority than agreement rules\n       case \"MAKE_OR_BREAK_HYPHEN\":   return 2;   // higher priority than agreement rules\n@@ -641,6 +640,9 @@ protected int getPriorityForId(String id) {\n       case LongParagraphRule.RULE_ID:   return -998;\n       case \"ALL_UPPERCASE\":             return -1000;  // do not hide spelling and grammar issues, when text is all upper case\n     }\n+    if (id.startsWith(\"EN_COMPOUNDS_\")) {\n+      return 2;\n+    }\n     if (id.startsWith(\"CONFUSION_RULE_\")) {\n       return -20;\n     }",
      "parent_sha": "5f37bcb38ea32aa44143ccdb4a618be6b75e4d9c"
    }
  },
  {
    "oid": "48aa8214e8fb3438a8cf7a5ee79033a98eaac71e",
    "message": "[de] fix NPE and preposition handling",
    "date": "2021-10-17T19:00:55Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/48aa8214e8fb3438a8cf7a5ee79033a98eaac71e",
    "details": {
      "sha": "c27794ac7ac8443c3fcea321bf5e392c1c2f5590",
      "filename": "languagetool-language-modules/de/src/main/java/org/languagetool/rules/de/AgreementSuggestor2.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/48aa8214e8fb3438a8cf7a5ee79033a98eaac71e/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FAgreementSuggestor2.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/48aa8214e8fb3438a8cf7a5ee79033a98eaac71e/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FAgreementSuggestor2.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FAgreementSuggestor2.java?ref=48aa8214e8fb3438a8cf7a5ee79033a98eaac71e",
      "patch": "@@ -114,11 +114,10 @@ private List<String> getNounCases() {\n             result.add(val.toUpperCase());\n           }\n         }\n+        return result;\n       }\n-      return result;\n-    } else {\n-      return AgreementSuggestor2.nounCases;\n     }\n+    return AgreementSuggestor2.nounCases;\n   }\n \n   private String[] getDetOrPronounSynth(String num, String gen, String aCase, AnalyzedToken detReading) throws IOException {\n@@ -166,6 +165,9 @@ private String[] getAdjSynth(String num, String gen, String aCase, AnalyzedToken\n     if (adjToken != null) {\n       for (AnalyzedToken adjReading : adjToken.getReadings()) {\n         boolean detIsDef = detReading.getPOSTag().contains(\":DEF:\");\n+        if (adjReading.getPOSTag() == null) {\n+          continue;\n+        }\n         String template = adjReading.getPOSTag().startsWith(\"PA2\") ? pa2Template : adjTemplate;\n         if (adjReading.getPOSTag().contains(\":KOM:\")) {\n           template = template.replace(\":GRU:\", \":KOM:\");",
      "parent_sha": "807b3336d1d2e2a20083137bad723f5b820ca8ad"
    }
  },
  {
    "oid": "cd8ca6b3d7406b8d69c288402115637e7b03a5c6",
    "message": "code cleanup",
    "date": "2016-09-09T00:52:16Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/cd8ca6b3d7406b8d69c288402115637e7b03a5c6",
    "details": {
      "sha": "57d3b8eef57755592f3c3d362d91e1ba3cd64f46",
      "filename": "languagetool-standalone/src/main/java/org/languagetool/gui/ResultArea.java",
      "status": "modified",
      "additions": 13,
      "deletions": 21,
      "changes": 34,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/cd8ca6b3d7406b8d69c288402115637e7b03a5c6/languagetool-standalone%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fgui%2FResultArea.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/cd8ca6b3d7406b8d69c288402115637e7b03a5c6/languagetool-standalone%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fgui%2FResultArea.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-standalone%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fgui%2FResultArea.java?ref=cd8ca6b3d7406b8d69c288402115637e7b03a5c6",
      "patch": "@@ -53,10 +53,7 @@ class ResultArea {\n   private final JTextPane statusPane;\n   private final LanguageToolSupport ltSupport;\n \n-  private String inputText;\n   private String startText;\n-  private List<RuleMatch> allRuleMatches;\n-  private List<RuleMatch> ruleMatches;    // will be filtered to not show disabled rules\n   private long runTime;\n \n   ResultArea(ResourceBundle messages, LanguageToolSupport ltSupport, JTextPane statusPane) {\n@@ -80,24 +77,24 @@ public void languageToolEventOccurred(LanguageToolEvent event) {\n             langName = lang.getTranslatedName(messages);\n           }\n           String startCheckText = Main.HTML_GREY_FONT_START\n-              + org.languagetool.tools.Tools.i18n(messages, \"startChecking\", langName) + \"...\" + Main.HTML_FONT_END;\n+              + org.languagetool.tools.Tools.i18n(messages, \"startChecking\", langName)\n+              + \"...\" + Main.HTML_FONT_END;\n           statusPane.setText(startCheckText);\n           setStartText(startCheckText);\n           if (event.getCaller() == this) {\n             statusPane.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n           }\n         } else if (event.getType() == LanguageToolEvent.Type.CHECKING_FINISHED) {\n           setRunTime(event.getElapsedTime());\n-          inputText = event.getSource().getTextComponent().getText();\n-          setRuleMatches(event.getSource().getMatches());\n-          displayResult();\n+          String inputText = event.getSource().getTextComponent().getText();\n+          displayResult(inputText, event.getSource().getMatches());\n           if (event.getCaller() == this) {\n             statusPane.setCursor(Cursor.getDefaultCursor());\n           }\n-        } else if (event.getType() == LanguageToolEvent.Type.RULE_DISABLED || event.getType() == LanguageToolEvent.Type.RULE_ENABLED) {\n-          inputText = event.getSource().getTextComponent().getText();\n-          setRuleMatches(event.getSource().getMatches());\n-          displayResult();\n+        } else if (event.getType() == LanguageToolEvent.Type.RULE_DISABLED\n+                || event.getType() == LanguageToolEvent.Type.RULE_ENABLED) {\n+          String inputText = event.getSource().getTextComponent().getText();\n+          displayResult(inputText, event.getSource().getMatches());\n         }\n       }\n     });\n@@ -188,14 +185,9 @@ private void setRunTime(long runTime) {\n     this.runTime = runTime;\n   }\n \n-  private void setRuleMatches(List<RuleMatch> ruleMatches) {\n-    this.allRuleMatches = new ArrayList<>(ruleMatches);\n-    this.ruleMatches = new ArrayList<>(ruleMatches);\n-  }\n-\n-  private void displayResult() {\n-    ruleMatches = filterRuleMatches();\n-    String ruleMatchHtml = getRuleMatchHtml(ruleMatches, inputText, startText);\n+  private void displayResult(String inputText, List<RuleMatch> matches) {\n+    List<RuleMatch> filtered = filterRuleMatches(matches);\n+    String ruleMatchHtml = getRuleMatchHtml(filtered, inputText, startText);\n     displayText(ruleMatchHtml);\n   }\n \n@@ -205,10 +197,10 @@ private void displayText(String text) {\n     statusPane.setCaretPosition(0);\n   }\n \n-  private List<RuleMatch> filterRuleMatches() {\n+  private List<RuleMatch> filterRuleMatches(List<RuleMatch> matches) {\n     List<RuleMatch> filtered = new ArrayList<>();\n     Set<String> disabledRuleIds = ltSupport.getConfig().getDisabledRuleIds();\n-    for (RuleMatch ruleMatch : allRuleMatches) {\n+    for (RuleMatch ruleMatch : matches) {\n       if (!disabledRuleIds.contains(ruleMatch.getRule().getId())) {\n         filtered.add(ruleMatch);\n       }",
      "parent_sha": "c58b19d2301058586158f8c99a241254517fe606"
    }
  },
  {
    "oid": "ed2e021b6bbee268b70f0082ffdb071a3df85eb0",
    "message": "re-indent a bit",
    "date": "2012-01-01T11:58:53Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/ed2e021b6bbee268b70f0082ffdb071a3df85eb0",
    "details": {
      "sha": "bc7fefb1e0259a7d298ee32210894a60ba4bb6fd",
      "filename": "trunk/JLanguageTool/src/java/org/languagetool/tagging/disambiguation/rules/DisambiguationPatternRule.java",
      "status": "modified",
      "additions": 3,
      "deletions": 8,
      "changes": 11,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/ed2e021b6bbee268b70f0082ffdb071a3df85eb0/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Forg%2Flanguagetool%2Ftagging%2Fdisambiguation%2Frules%2FDisambiguationPatternRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/ed2e021b6bbee268b70f0082ffdb071a3df85eb0/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Forg%2Flanguagetool%2Ftagging%2Fdisambiguation%2Frules%2FDisambiguationPatternRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Forg%2Flanguagetool%2Ftagging%2Fdisambiguation%2Frules%2FDisambiguationPatternRule.java?ref=ed2e021b6bbee268b70f0082ffdb071a3df85eb0",
      "patch": "@@ -82,9 +82,7 @@ public static DisambiguatorAction toAction(final String str) {\n    * @param disambAction\n    *          - the action to be executed on found token(s), one of the\n    *          following: add, filter, remove, replace, unify.\n-   * \n    */\n-\n   DisambiguationPatternRule(final String id, final String description,\n       final Language language, final List<Element> elements,\n       final String disamb, final Match posSelect,\n@@ -216,8 +214,7 @@ private AnalyzedTokenReadings[] executeAction(final AnalyzedSentence text,\n         l--;\n       }\n     }\n-    final int fromPos = text.getOriginalPosition(firstMatchToken\n-        + correctedStPos);\n+    final int fromPos = text.getOriginalPosition(firstMatchToken + correctedStPos);\n     final int numRead = whTokens[fromPos].getReadingsLength();   \n     final boolean spaceBefore = whTokens[fromPos].isWhitespaceBefore();\n     boolean filtered = false;\n@@ -276,10 +273,8 @@ private AnalyzedTokenReadings[] executeAction(final AnalyzedSentence text,\n       }\n       break;\n     case IMMUNIZE: \n-      for (int i = 0; i < matchingTokens - startPositionCorrection\n-            + endPositionCorrection; i++) {\n-      whTokens[text.getOriginalPosition(firstMatchToken + correctedStPos\n-          + i)].immunize();\n+      for (int i = 0; i < matchingTokens - startPositionCorrection + endPositionCorrection; i++) {\n+        whTokens[text.getOriginalPosition(firstMatchToken + correctedStPos + i)].immunize();\n       }\n     case FILTER:\n       if (matchElement == null) { // same as REPLACE if using <match>",
      "parent_sha": "27e4ec4d9b159c70a8978cdc437b3cc0f98551a1"
    }
  },
  {
    "oid": "795b741f0dd1d25e5569f30dbd8feb92e63f03e1",
    "message": "add generic rules for Slovenian",
    "date": "2009-10-23T21:58:02Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/795b741f0dd1d25e5569f30dbd8feb92e63f03e1",
    "details": {
      "sha": "9bea1fd1eea3072f4cb230fd994e67ec2fabcccb",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/language/Slovenian.java",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/795b741f0dd1d25e5569f30dbd8feb92e63f03e1/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Flanguage%2FSlovenian.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/795b741f0dd1d25e5569f30dbd8feb92e63f03e1/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Flanguage%2FSlovenian.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Flanguage%2FSlovenian.java?ref=795b741f0dd1d25e5569f30dbd8feb92e63f03e1",
      "patch": "@@ -18,6 +18,7 @@\n  */\n package de.danielnaber.languagetool.language;\n \n+import java.util.HashSet;\n import java.util.Locale;\n import java.util.Set;\n \n@@ -51,7 +52,16 @@ public Contributor[] getMaintainers() {\n   }\n \n   public Set<String> getRelevantRuleIDs() {\n-    return null;\n+    final Set<String> ids = new HashSet<String>();\n+    ids.add(\"COMMA_PARENTHESIS_WHITESPACE\");\n+    ids.add(\"DOUBLE_PUNCTUATION\");\n+    ids.add(\"UNPAIRED_BRACKETS\");\n+    ids.add(\"UPPERCASE_SENTENCE_START\");\n+    ids.add(\"WORD_REPEAT_RULE\");\n+    ids.add(\"WHITESPACE_RULE\");\n+    // specific to Slovenian: none\n+    return ids;\n+\n   }\n \n }",
      "parent_sha": "1cd522a46b9f6aff68151540601468ae23e0ff12"
    }
  },
  {
    "oid": "b3568508db903f255dca67a531723ae5dddcf1d0",
    "message": "refactor unpaired brackets rule to make it simpler (no functional change)",
    "date": "2010-04-09T21:39:38Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/b3568508db903f255dca67a531723ae5dddcf1d0",
    "details": {
      "sha": "9e9bf3a2cb165ac408ddcb13e0bde94f8a207372",
      "filename": "trunk/JLanguageTool/src/test/de/danielnaber/languagetool/JLanguageToolTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/b3568508db903f255dca67a531723ae5dddcf1d0/trunk%2FJLanguageTool%2Fsrc%2Ftest%2Fde%2Fdanielnaber%2Flanguagetool%2FJLanguageToolTest.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/b3568508db903f255dca67a531723ae5dddcf1d0/trunk%2FJLanguageTool%2Fsrc%2Ftest%2Fde%2Fdanielnaber%2Flanguagetool%2FJLanguageToolTest.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Ftest%2Fde%2Fdanielnaber%2Flanguagetool%2FJLanguageToolTest.java?ref=b3568508db903f255dca67a531723ae5dddcf1d0",
      "patch": "@@ -202,13 +202,13 @@ public void testParaRules() throws IOException {\n     //run in a paragraph mode - single sentence\n     matches = tool.check(\"(This is an quote.\\n It ends in the second sentence.\", false, paragraphHandling.ONLYPARA);\n     assertEquals(1, matches.size());\n-    assertEquals(\"UNPAIRED_BRACKETS\", matches.get(0).getRule().getId());\n+    assertEquals(\"EN_UNPAIRED_BRACKETS\", matches.get(0).getRule().getId());\n     assertEquals(1, tool.getSentenceCount());\n     \n     //run in a paragraph mode - many sentences\n     matches = tool.check(\"(This is an quote.\\n It ends in the second sentence.\", true, paragraphHandling.ONLYPARA);\n     assertEquals(1, matches.size());\n-    assertEquals(\"UNPAIRED_BRACKETS\", matches.get(0).getRule().getId());\n+    assertEquals(\"EN_UNPAIRED_BRACKETS\", matches.get(0).getRule().getId());\n     assertEquals(2, tool.getSentenceCount());\n   }  \n     ",
      "parent_sha": "6706a686d8b308ed7ce30018ec40e94ef6af9b18"
    }
  },
  {
    "oid": "9fd70db120cd505c86a2693d11aa3d9456710d15",
    "message": "[de] typo fix",
    "date": "2021-12-22T17:04:41Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/9fd70db120cd505c86a2693d11aa3d9456710d15",
    "details": {
      "sha": "8d0b56802ee3eebcc7dc2b429985c8c5f5e80608",
      "filename": "languagetool-language-modules/de/src/main/java/org/languagetool/rules/de/SimpleReplaceRule.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/9fd70db120cd505c86a2693d11aa3d9456710d15/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FSimpleReplaceRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/9fd70db120cd505c86a2693d11aa3d9456710d15/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FSimpleReplaceRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FSimpleReplaceRule.java?ref=9fd70db120cd505c86a2693d11aa3d9456710d15",
      "patch": "@@ -61,7 +61,7 @@ public String getShort() {\n \n   @Override\n   public String getMessage() {\n-    return \"Meiten Sie vielleicht $suggestions?\";\n+    return \"Meinten Sie vielleicht $suggestions?\";\n     //return \"Dieses Wort steht in der Liste der nicht erlaubten W\u00f6rter.\";\n   }\n ",
      "parent_sha": "6273b93c3de3c876da9d8fbc31a89c67ae68f36f"
    }
  },
  {
    "oid": "15eb1f6fd74677c8d2d7bfc009045391e2fec767",
    "message": "performance test: make shuffle stable so the results are always the same - performance can be better compared this way",
    "date": "2012-11-18T11:38:22Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/15eb1f6fd74677c8d2d7bfc009045391e2fec767",
    "details": {
      "sha": "d1bc059256306af73c303c861c65ce1a6ead5384",
      "filename": "trunk/JLanguageTool/src/test/java/org/languagetool/server/ExampleSentenceProvider.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/15eb1f6fd74677c8d2d7bfc009045391e2fec767/trunk%2FJLanguageTool%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Fserver%2FExampleSentenceProvider.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/15eb1f6fd74677c8d2d7bfc009045391e2fec767/trunk%2FJLanguageTool%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Fserver%2FExampleSentenceProvider.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Fserver%2FExampleSentenceProvider.java?ref=15eb1f6fd74677c8d2d7bfc009045391e2fec767",
      "patch": "@@ -72,7 +72,7 @@ private void initExampleSentences(Language language) throws IOException {\n   List<ExampleSentence> getRandomSentences(Language lang) {\n     final List<ExampleSentence> sentences = new ArrayList<ExampleSentence>(languageToExamples.get(lang));\n     final int sentenceCount = rnd.nextInt(Math.max(1, maxSentences - minSentences)) + minSentences;\n-    Collections.shuffle(sentences);\n+    Collections.shuffle(sentences, rnd);\n     return sentences.subList(0, Math.min(sentences.size(), sentenceCount));\n   }\n ",
      "parent_sha": "697dd075db826291ba28f7dab63e9b72dfcc7330"
    }
  },
  {
    "oid": "4a9e6f70a25b9b777e331d97b9b37acc2645e748",
    "message": "prevent filtering out everything",
    "date": "2007-05-04T22:59:24Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/4a9e6f70a25b9b777e331d97b9b37acc2645e748",
    "details": {
      "sha": "c327d6629e6d7bebd1880d7a1b860957645233f9",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/rules/patterns/Match.java",
      "status": "modified",
      "additions": 84,
      "deletions": 81,
      "changes": 165,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/4a9e6f70a25b9b777e331d97b9b37acc2645e748/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FMatch.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/4a9e6f70a25b9b777e331d97b9b37acc2645e748/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FMatch.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FMatch.java?ref=4a9e6f70a25b9b777e331d97b9b37acc2645e748",
      "patch": "@@ -38,41 +38,41 @@ public class Match {\n   /** Possible string case conversions. **/\n   public enum CaseConversion { \n     NONE, STARTLOWER, STARTUPPER, ALLLOWER, ALLUPPER; \n-  \n+\n     /** Converts string to the constant enum.\n      * @param str String value to be converted.\n      * @return CaseConversion enum.\n      */\n     public static CaseConversion toCase(final String str) {    \n       try {\n-          return valueOf(str);\n-          } catch (final Exception ex) {\n-          return NONE;\n-         }  \n+        return valueOf(str);\n+      } catch (final Exception ex) {\n+        return NONE;\n+      }  \n     }\n   };\n-  \n+\n   private String posTag = null;\n   private boolean postagRegexp = false;\n   private String regexReplace;\n   private String posTagReplace;\n   private CaseConversion caseConversionType;\n   private boolean staticLemma = false;\n-  \n+\n   private AnalyzedTokenReadings formattedToken;  \n   private AnalyzedTokenReadings matchedToken;\n-  \n+\n   private int tokenRef = 0;\n-  \n+\n   /** Word form generator for POS tags. **/\n   private Synthesizer synthesizer;\n-  \n+\n   /** Pattern used to define parts of the matched token. **/\n   private Pattern pRegexMatch = null;  \n-  \n+\n   /** Pattern used to define parts of the matched POS token. **/\n   private Pattern pPosRegexMatch = null;     \n-      \n+\n   public Match(final String posTag, final String posTagReplace,\n       final boolean postagRegexp,      \n       final String regexMatch,\n@@ -92,15 +92,15 @@ public Match(final String posTag, final String posTagReplace,\n     this.regexReplace = regexReplace;  \n     this.posTagReplace = posTagReplace;\n   }\n-  \n+\n   public void setToken(final AnalyzedTokenReadings token) {\n     if (!staticLemma) {\n       formattedToken = token;\n     } else {\n       matchedToken = token;\n     }\n   }\n-  \n+\n   public void setLemmaString(final String lemmaString) {\n     if (lemmaString != null) {\n       if (!lemmaString.equals(\"\")) {\n@@ -113,11 +113,11 @@ public void setLemmaString(final String lemmaString) {\n       }\n     }\n   }\n-  \n+\n   public void setSynthesizer(final Synthesizer synth) throws IOException {\n     synthesizer = synth;\n   }    \n-  \n+\n   /**\n    * Gets all strings formatted using the match\n    * element.\n@@ -128,28 +128,28 @@ public void setSynthesizer(final Synthesizer synth) throws IOException {\n   public final String[] toFinalString() throws IOException {\n     String[] formattedString = new String[1];\n     if (formattedToken != null) {      \n-        formattedString[0] = formattedToken.getToken();\n-        if (pRegexMatch != null) {          \n-          formattedString[0] \n-          = pRegexMatch.matcher(formattedString[0]).replaceAll(regexReplace);\n-          }        \n-          switch (caseConversionType) {\n-            case NONE : formattedString[0] = formattedString[0]; break;\n-            case STARTLOWER : formattedString[0] = formattedString[0].\n-                    substring(0, 1).toLowerCase() \n-                    + formattedToken.getToken().substring(1); break;\n-            case STARTUPPER : formattedString[0] = formattedString[0].\n-                  substring(0, 1).toUpperCase() \n-                  + formattedToken.getToken().substring(1); break;\n-            case ALLUPPER : formattedString[0] = formattedString[0].\n-                  toUpperCase(); break;\n-            case ALLLOWER : formattedString[0] = formattedString[0].\n-                  toLowerCase(); break;\n-            default : formattedString[0] = formattedString[0]; break;\n-          }         \n-     if (posTag != null) {              \n+      formattedString[0] = formattedToken.getToken();\n+      if (pRegexMatch != null) {          \n+        formattedString[0] \n+                        = pRegexMatch.matcher(formattedString[0]).replaceAll(regexReplace);\n+      }        \n+      switch (caseConversionType) {\n+        case NONE : formattedString[0] = formattedString[0]; break;\n+        case STARTLOWER : formattedString[0] = formattedString[0].\n+        substring(0, 1).toLowerCase() \n+        + formattedToken.getToken().substring(1); break;\n+        case STARTUPPER : formattedString[0] = formattedString[0].\n+        substring(0, 1).toUpperCase() \n+        + formattedToken.getToken().substring(1); break;\n+        case ALLUPPER : formattedString[0] = formattedString[0].\n+        toUpperCase(); break;\n+        case ALLLOWER : formattedString[0] = formattedString[0].\n+        toLowerCase(); break;\n+        default : formattedString[0] = formattedString[0]; break;\n+      }         \n+      if (posTag != null) {              \n         if (synthesizer == null) {\n-        formattedString[0] = formattedToken.getToken();\n+          formattedString[0] = formattedToken.getToken();\n         } else if (postagRegexp) {\n           final int readingCount = formattedToken.getReadingsLength();\n           String targetPosTag = posTag;\n@@ -158,50 +158,50 @@ public final String[] toFinalString() throws IOException {\n             for (int i = 0; i < numRead; i++) {\n               final String tst = matchedToken.getAnalyzedToken(i).getPOSTag();\n               if (tst != null) {\n-              if (pPosRegexMatch.matcher(tst).matches()) {\n-                targetPosTag = matchedToken.getAnalyzedToken(i).getPOSTag();\n-                break;\n-              }\n+                if (pPosRegexMatch.matcher(tst).matches()) {\n+                  targetPosTag = matchedToken.getAnalyzedToken(i).getPOSTag();\n+                  break;\n+                }\n               }\n             }            \n             if (pPosRegexMatch != null & posTagReplace != null) {            \n               targetPosTag = pPosRegexMatch.matcher(targetPosTag).replaceAll(posTagReplace);  \n             }\n             if (targetPosTag.indexOf(\"?\") > 0) {\n               targetPosTag = targetPosTag.replaceAll(\"\\\\?\", \"\\\\\\\\?\");\n-              }\n+            }\n           } else {\n             final int numRead = formattedToken.getReadingsLength();\n             for (int i = 0; i < numRead; i++) {\n               final String tst = formattedToken.getAnalyzedToken(i).getPOSTag();\n               if (tst != null) {\n-              if (pPosRegexMatch.matcher(tst).matches()) {\n-                targetPosTag = formattedToken.getAnalyzedToken(i).getPOSTag();\n-                break;\n-              }\n+                if (pPosRegexMatch.matcher(tst).matches()) {\n+                  targetPosTag = formattedToken.getAnalyzedToken(i).getPOSTag();\n+                  break;\n+                }\n               }\n             }\n-          if (pPosRegexMatch != null & posTagReplace != null) {            \n-            targetPosTag = pPosRegexMatch.matcher(targetPosTag).replaceAll(posTagReplace);  \n-          }\n+            if (pPosRegexMatch != null & posTagReplace != null) {            \n+              targetPosTag = pPosRegexMatch.matcher(targetPosTag).replaceAll(posTagReplace);  \n+            }\n           }\n           final TreeSet<String> wordForms = new TreeSet<String>();          \n           for (int i = 0; i < readingCount; i++) {\n-                final String[] possibleWordForms = \n-                  synthesizer.synthesize(\n-                    formattedToken.getAnalyzedToken(i),\n-                    targetPosTag, true);\n-                if (possibleWordForms != null) {\n-                  for (final String form : possibleWordForms) {           \n-                    wordForms.add(form);\n-                  }\n-                }\n+            final String[] possibleWordForms = \n+              synthesizer.synthesize(\n+                  formattedToken.getAnalyzedToken(i),\n+                  targetPosTag, true);\n+            if (possibleWordForms != null) {\n+              for (final String form : possibleWordForms) {           \n+                wordForms.add(form);\n+              }\n             }\n+          }\n           if (wordForms != null) {\n             if (wordForms.size() > 0) {\n-            formattedString = wordForms.toArray(new String[wordForms.size()]);\n+              formattedString = wordForms.toArray(new String[wordForms.size()]);\n             } else {\n-            formattedString[0] = \"(\" + formattedToken.getToken() + \")\";            \n+              formattedString[0] = \"(\" + formattedToken.getToken() + \")\";            \n             }\n           } else {\n             formattedString[0] = formattedToken.getToken();\n@@ -210,16 +210,16 @@ public final String[] toFinalString() throws IOException {\n           final int readingCount = formattedToken.getReadingsLength();\n           final TreeSet<String> wordForms = new TreeSet<String>();\n           for (int i = 0; i < readingCount; i++) {\n-                final String[] possibleWordForms = \n-                  synthesizer.synthesize(\n-                    formattedToken.getAnalyzedToken(i),\n-                    posTag);\n-                if (possibleWordForms != null) {\n-                  for (final String form : possibleWordForms) {           \n-                    wordForms.add(form);\n-                  }\n-                }\n+            final String[] possibleWordForms = \n+              synthesizer.synthesize(\n+                  formattedToken.getAnalyzedToken(i),\n+                  posTag);\n+            if (possibleWordForms != null) {\n+              for (final String form : possibleWordForms) {           \n+                wordForms.add(form);\n+              }\n             }\n+          }\n           if (wordForms != null) {\n             formattedString = wordForms.toArray(new String[wordForms.size()]);\n           } else {\n@@ -230,7 +230,7 @@ public final String[] toFinalString() throws IOException {\n     }\n     return formattedString;\n   }\n-  \n+\n   /**\n    * Method for getting the formatted match as a single string.\n    * In case of multiple matches, it joins them using a regular\n@@ -241,38 +241,38 @@ public final String[] toFinalString() throws IOException {\n   public final String toTokenString() {\n     String output = \"\"; \n     try {\n-    final String[] stringToFormat = toFinalString();    \n-    for (int i = 0; i < stringToFormat.length; i++) {\n-      output += stringToFormat[i];\n-      if (i + 1 < stringToFormat.length) {\n-        output += \"|\";\n+      final String[] stringToFormat = toFinalString();    \n+      for (int i = 0; i < stringToFormat.length; i++) {\n+        output += stringToFormat[i];\n+        if (i + 1 < stringToFormat.length) {\n+          output += \"|\";\n+        }\n       }\n-    }\n     } catch (final IOException e) {\n       throw new RuntimeException(e.getMessage());\n     }\n     return output;\n   }\n-  \n+\n   /**\n    * Sets the token number referenced by the match.\n    * @param i Token number.\n    */\n   public final void setTokenRef(final int i) {\n     tokenRef = i;\n   }\n-  \n+\n   /**\n    * Gets the token number referenced by the match.\n    * @return int - token number.\n    */\n   public final int getTokenRef() {\n     return tokenRef;\n   }\n-  \n+\n   public final AnalyzedTokenReadings filterReadings(final AnalyzedTokenReadings tokenToFilter) {\n     String token = formattedToken.getToken();\n-    ArrayList <AnalyzedToken> l = new ArrayList <AnalyzedToken>();\n+    final ArrayList <AnalyzedToken> l = new ArrayList <AnalyzedToken>();\n     if (formattedToken != null) {                  \n       if (pRegexMatch != null) {          \n         token = pRegexMatch.matcher(token).replaceAll(regexReplace);\n@@ -341,7 +341,10 @@ public final AnalyzedTokenReadings filterReadings(final AnalyzedTokenReadings to\n         }\n       }\n     }\n+    if (l.size() == 0) {\n+      return formattedToken;\n+    } else {\n       return new AnalyzedTokenReadings(l.toArray(new AnalyzedToken[l.size()]));\n     }\n-\n   }\n+}",
      "parent_sha": "e14cc33ba9bc503db635057d9603392568163601"
    }
  },
  {
    "oid": "e3eff8540d15b98a6ea2ad6a0a6cb2ff897e2533",
    "message": "[fr] fix-expected-picky",
    "date": "2024-04-05T07:05:12Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/e3eff8540d15b98a6ea2ad6a0a6cb2ff897e2533",
    "details": {
      "sha": "90673f0831b369374dc594b9513ff773f787945e",
      "filename": "languagetool-language-modules/fr/src/test/java/org/languagetool/JLanguageToolTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/e3eff8540d15b98a6ea2ad6a0a6cb2ff897e2533/languagetool-language-modules%2Ffr%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2FJLanguageToolTest.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/e3eff8540d15b98a6ea2ad6a0a6cb2ff897e2533/languagetool-language-modules%2Ffr%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2FJLanguageToolTest.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Ffr%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2FJLanguageToolTest.java?ref=e3eff8540d15b98a6ea2ad6a0a6cb2ff897e2533",
      "patch": "@@ -102,7 +102,7 @@ public void testMailRule() throws IOException {\n     Set<String> enabledRules = Collections.emptySet();\n     List<RuleMatch> processedMatches = lang.adaptSuggestions(ruleMatches, enabledRules);\n     assertEquals(\"AI_FR_GGEC_MAIL_EMAIL\", processedMatches.get(0).getSpecificRuleId());\n-    assertEquals(\"Rule should be marked as picky\", processedMatches.get(0).getRule().getTags().contains(Tag.picky));\n+    assertEquals(true, processedMatches.get(0).getRule().getTags().contains(Tag.picky));\n     assertEquals(\"Dans un contexte formel, \u00ab e-mail \u00bb semble plus appropri\u00e9.\", processedMatches.get(0).getMessage());\n     assertEquals(\"Forme pr\u00e9f\u00e9r\u00e9e : \u00ab e-mail \u00bb.\", processedMatches.get(0).getShortMessage());\n   }\n@@ -116,7 +116,7 @@ public void testQuotes() throws IOException {\n     ruleMatches.add(ruleMatch);\n     Set<String> enabledRules = Collections.emptySet();\n     List<RuleMatch> processedMatches = lang.adaptSuggestions(ruleMatches, enabledRules);\n-    assertEquals(\"Rule should be marked as picky\", processedMatches.get(0).getRule().getTags().contains(Tag.picky));\n+    assertEquals(true, processedMatches.get(0).getRule().getTags().contains(Tag.picky));\n     assertEquals(\"AI_FR_GGEC_QUOTES\", processedMatches.get(0).getSpecificRuleId());\n   }\n }",
      "parent_sha": "8c1057334b31b5d39b23da68cbf0b45c19013b57"
    }
  },
  {
    "oid": "d220a9f94b5fd66a96746939101e2354eea9bc28",
    "message": "tiny bug fix",
    "date": "2013-10-13T18:32:08Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/d220a9f94b5fd66a96746939101e2354eea9bc28",
    "details": {
      "sha": "51da9cc0d3438ce2deaa9f04068b41d87b29cdbc",
      "filename": "languagetool-core/src/main/java/org/languagetool/rules/patterns/Unifier.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/d220a9f94b5fd66a96746939101e2354eea9bc28/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpatterns%2FUnifier.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/d220a9f94b5fd66a96746939101e2354eea9bc28/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpatterns%2FUnifier.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpatterns%2FUnifier.java?ref=d220a9f94b5fd66a96746939101e2354eea9bc28",
      "patch": "@@ -303,13 +303,12 @@ public final AnalyzedTokenReadings[] getUnifiedTokens() {\n       while (!tmpFeaturesFound.get(first)) {\n         first++;\n       }\n-      tmpFeaturesFound.remove(tmpFeaturesFound.size() - 1);\n-      if (first >= tmpFeaturesFound.size()) {\n+      if (first > tmpFeaturesFound.size() - 1) {\n         return null;\n       }\n-      // FIXME: why this happens?\n+      tmpFeaturesFound.remove(tmpFeaturesFound.size() - 1);\n       final int numRead = tokSequence.get(0).getReadingsLength();\n-      if (first < numRead) {\n+      if (numRead > 1) { // no need to filter if there is just one reading\n         tmpATR = new AnalyzedTokenReadings(tokSequence.get(0).getAnalyzedToken(\n             first), 0);\n         for (int i = first + 1; i <= Math.min(numRead - 1, tokCnt); i++) {",
      "parent_sha": "14edfcdcc286dc925c2024b77bc7d9c331d9f9e8"
    }
  },
  {
    "oid": "ac2ebe45d3fd9a795cbcdef84a2c528d26ceb6aa",
    "message": "fix coverity scan bug CID 1100712",
    "date": "2014-02-11T07:50:29Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/ac2ebe45d3fd9a795cbcdef84a2c528d26ceb6aa",
    "details": {
      "sha": "d55d74b6dd0d528826e48dd1563bbf4e36c92a6d",
      "filename": "languagetool-gui-commons/src/main/java/org/languagetool/gui/ConfigurationDialog.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/ac2ebe45d3fd9a795cbcdef84a2c528d26ceb6aa/languagetool-gui-commons%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fgui%2FConfigurationDialog.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/ac2ebe45d3fd9a795cbcdef84a2c528d26ceb6aa/languagetool-gui-commons%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fgui%2FConfigurationDialog.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-gui-commons%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fgui%2FConfigurationDialog.java?ref=ac2ebe45d3fd9a795cbcdef84a2c528d26ceb6aa",
      "patch": "@@ -477,7 +477,7 @@ public int getServerPort() {\n     return Integer.parseInt(serverPortField.getText());\n   }\n \n-  class CategoryComparator implements Comparator<Rule> {\n+  static class CategoryComparator implements Comparator<Rule> {\n \n     @Override\n     public int compare(final Rule r1, final Rule r2) {",
      "parent_sha": "dfe689c06aa3603b2373ffd6134fe4fb2349701a"
    }
  },
  {
    "oid": "496e023ef3290b357802d82c131bb85fe694ba1a",
    "message": "[eo] avoid excessively long computation times for long (probably artificial) tokens",
    "date": "2021-07-17T18:40:23Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/496e023ef3290b357802d82c131bb85fe694ba1a",
    "details": {
      "sha": "f2cf03ca7a231df824d6e927f4fcc04effd82704",
      "filename": "languagetool-language-modules/eo/src/main/java/org/languagetool/tagging/eo/EsperantoTagger.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/496e023ef3290b357802d82c131bb85fe694ba1a/languagetool-language-modules%2Feo%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Ftagging%2Feo%2FEsperantoTagger.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/496e023ef3290b357802d82c131bb85fe694ba1a/languagetool-language-modules%2Feo%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Ftagging%2Feo%2FEsperantoTagger.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Feo%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Ftagging%2Feo%2FEsperantoTagger.java?ref=496e023ef3290b357802d82c131bb85fe694ba1a",
      "patch": "@@ -210,9 +210,12 @@ public List<AnalyzedTokenReadings> tag(List<String> sentenceTokens) throws IOExc\n     for (String word : sentenceTokens) {\n       List<AnalyzedToken> l = new ArrayList<>();\n \n-      // No Esperanto word is made of one letter only. This check avoids\n-      // spurious tagging as single letter words \"A\", \"O\", \"E\", etc.\n-      if (word.length() > 1) {\n+      if (word.length() > 50) {\n+        // avoid excessively long computation times for long (probably artificial) tokens:\n+        l.add(new AnalyzedToken(word, null, null));\n+      } else if (word.length() > 1) {\n+        // No Esperanto word is made of one letter only. This check avoids\n+        // spurious tagging as single letter words \"A\", \"O\", \"E\", etc.\n         // Lemma contains words in lower case, and with Unicode transcription (as opposed\n         // to x-system).\n         String lWord = xSystemToUnicode(word.toLowerCase());",
      "parent_sha": "bcf9e3131f07f0ddba8a08bd2490a8d4b2f816ed"
    }
  },
  {
    "oid": "5c7f026e7864cc72327798ea7c62e9bf70fd99c8",
    "message": "adding javadoc",
    "date": "2013-02-08T08:53:07Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/5c7f026e7864cc72327798ea7c62e9bf70fd99c8",
    "details": {
      "sha": "c49a0c2b1bf42e26235b629610b920f664811c53",
      "filename": "languagetool-core/src/main/java/org/languagetool/rules/spelling/morfologik/MorfologikSpeller.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/5c7f026e7864cc72327798ea7c62e9bf70fd99c8/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fspelling%2Fmorfologik%2FMorfologikSpeller.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/5c7f026e7864cc72327798ea7c62e9bf70fd99c8/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fspelling%2Fmorfologik%2FMorfologikSpeller.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fspelling%2Fmorfologik%2FMorfologikSpeller.java?ref=5c7f026e7864cc72327798ea7c62e9bf70fd99c8",
      "patch": "@@ -42,7 +42,6 @@ public class MorfologikSpeller {\n \n   /**\n    * Creates a speller with the given maximum edit distance.\n-   * \n    * @param filename path in classpath to morfologik dictionary\n    * @param conversionLocale used when transforming the word to lowercase\n    */\n@@ -57,14 +56,17 @@ public MorfologikSpeller(String filename, Locale conversionLocale, int maxEditDi\n \n   /**\n    * Creates a speller with a maximum edit distance of one.\n-   * \n    * @param filename path in classpath to morfologik dictionary\n    * @param conversionLocale used when transforming the word to lowercase\n    */\n   public MorfologikSpeller(String filename, Locale conversionLocale) throws IOException {\n     this(filename, conversionLocale, 1);\n   }\n \n+  /**\n+   * Creates a speller with a maximum edit distance of one.\n+   * @param filename path in classpath to morfologik dictionary\n+   */\n   public MorfologikSpeller(String filename) throws IOException {\n     this(filename, null);\n   }",
      "parent_sha": "41a749472a3f7e7b41c5fce997209657f055e9c2"
    }
  },
  {
    "oid": "dc801f974ff64a0355d80014c049789889ced59d",
    "message": "make accessible from all tests",
    "date": "2021-07-17T18:40:23Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/dc801f974ff64a0355d80014c049789889ced59d",
    "details": {
      "sha": "2b6bd414d051292a5f6960d62b60fef4060c9bf8",
      "filename": "languagetool-server/src/test/java/org/languagetool/server/HTTPTools.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/dc801f974ff64a0355d80014c049789889ced59d/languagetool-server%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Fserver%2FHTTPTools.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/dc801f974ff64a0355d80014c049789889ced59d/languagetool-server%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Fserver%2FHTTPTools.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-server%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Fserver%2FHTTPTools.java?ref=dc801f974ff64a0355d80014c049789889ced59d",
      "patch": "@@ -40,7 +40,7 @@\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n \n-final class HTTPTools {\n+public final class HTTPTools {\n \n   private HTTPTools() {\n   }\n@@ -77,7 +77,7 @@ public void checkServerTrusted(X509Certificate[] certs, String authType) {}\n     HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());\n   }\n \n-  static String checkAtUrl(URL url) throws IOException {\n+  public static String checkAtUrl(URL url) throws IOException {\n     try {\n       InputStream stream = (InputStream)url.getContent();\n       return StringTools.streamToString(stream, \"UTF-8\");",
      "parent_sha": "65d3c4adb198f129cd55ac0cfa2be0a1ed796311"
    }
  },
  {
    "oid": "96e3c2e024bbab6c07971c95b093dcdaba00d284",
    "message": "ArtificialErrorEval: run a single file",
    "date": "2022-11-04T06:51:02Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/96e3c2e024bbab6c07971c95b093dcdaba00d284",
    "details": {
      "sha": "d9aa34c235ece2187f37686e94078683360f7f9b",
      "filename": "languagetool-http-client/src/main/java/org/languagetool/remote/ArtificialErrorEval.java",
      "status": "modified",
      "additions": 67,
      "deletions": 54,
      "changes": 121,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/96e3c2e024bbab6c07971c95b093dcdaba00d284/languagetool-http-client%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fremote%2FArtificialErrorEval.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/96e3c2e024bbab6c07971c95b093dcdaba00d284/languagetool-http-client%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fremote%2FArtificialErrorEval.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-http-client%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fremote%2FArtificialErrorEval.java?ref=96e3c2e024bbab6c07971c95b093dcdaba00d284",
      "patch": "@@ -103,48 +103,77 @@ public static void main(String[] args) throws IOException {\n       runEvaluationOnFolders(inputFolder, outpuFolder, remoteServer, printSummaryDetails, printHeader);\n       System.exit(0);\n     }\n-    if (args.length < 4 || args.length > 12) {\n-      writeHelp();\n-      System.exit(1);\n+    // language code + input file\n+    if (args.length == 2) { \n+      runEvaluationOnFile(args[0], args[1]);\n+      System.exit(0);\n     }\n     \n-    //Parse options from args\n-    for (int k = 4; k < args.length; k++) {\n-      if (args[k].contentEquals(\"-v\")) {\n-        verboseOutput = true;\n-      }\n-      if (args[k].contentEquals(\"-u\")) {\n-        unidirectional = true;\n-      }\n-      if (args[k].contentEquals(\"-r\")) {\n-        onlyRules = Arrays.asList(args[k + 1].split(\",\"));\n-      }\n-      if (args[k].contentEquals(\"-s\")) {\n-        summaryOutputFilename = args[k + 1];\n-      }\n-      if (args[k].contentEquals(\"-c\")) {\n-        errorCategory = args[k + 1];\n-      }\n-      if (args[k].contentEquals(\"--inflected\")) {\n-        inflected = true;\n-      }\n-    }\n-    words[0] = args[2];\n-    words[1] = args[3];\n-    lemmas[0] = words[0];\n-    lemmas[1] = words[1];\n-    langCode = args[0];\n-    corpusFilePath = args[1];\n+    writeHelp();\n+    System.exit(1);\n+  }\n+  \n+  private static void runEvaluationOnFile(String languageCode, String inputFile) throws IOException {\n+    langCode = languageCode;\n+    corpusFilePath = inputFile;\n+    verboseOutput = true;\n     language = Languages.getLanguageForShortCode(langCode);\n     localLt = new JLanguageTool(language);\n     synth = language.getSynthesizer();\n     lt = new RemoteLanguageTool(Tools.getUrl(\"http://localhost:8081\"));\n+    File corpusFile = new File(corpusFilePath);\n+    String fileName = corpusFile.getName();\n+    System.out.println(\"Analyzing file: \" + fileName);\n+    fileName = fileName.substring(0, fileName.lastIndexOf('.'));\n+    verboseOutputFilename = inputFile +\".results\";\n+    // reset all global Variables to default\n+    unidirectional = false;\n+    wholeword = true;\n+    isDoubleLetters = false;\n+    isDiacritics = false;\n+    inflected = false;\n+    isParallelCorpus = false;\n+    columnCorrect = 1;\n+    columnIncorrect = 2;\n+    if (fileName.startsWith(\"parallelcorpus\")) {\n+      isParallelCorpus = true;\n+      unidirectional = true;\n+      String parts[] = fileName.split(\"-\");\n+      if (parts.length > 2) {\n+        columnCorrect = Integer.parseInt(parts[1]);\n+        columnIncorrect = Integer.parseInt(parts[2]);\n+      }\n+    }\n+    else if (fileName.equals(\"diacritics\")) {\n+      isDiacritics = true;\n+      unidirectional = true;\n+    }\n+    else if (fileName.equals(\"double_letters\")) {\n+      isDoubleLetters = true;\n+      unidirectional = true;\n+    }\n+    else {\n+      String[] parts = fileName.split(\"~\");\n+      words[0] = parts[0].replaceAll(\"_\", \" \");\n+      words[1] = parts[1].replaceAll(\"_\", \" \");\n+      if (parts.length > 2) {\n+        unidirectional = parts[2].equals(\"u\");\n+        if (parts[2].equals(\"u_notwholeword\")) {\n+          unidirectional = true;\n+          wholeword = false;\n+        }\n+        if (parts[2].equals(\"notwholeword\")) {\n+          wholeword = false;\n+        }\n+      }  \n+    }\n+     \n     run(true);\n-    // end of parsing from args  \n   }\n   \n-  private static void runEvaluationOnFolders(String inputFolder, String outputFolder, String remoteServer, boolean printSummaryDetails, boolean printHeader) throws IOException {\n-    \n+  private static void runEvaluationOnFolders(String inputFolder, String outputFolder, String remoteServer,\n+      boolean printSummaryDetails, boolean printHeader) throws IOException {\n+ \n     verboseOutput = true;\n     SimpleDateFormat formatter= new SimpleDateFormat(\"yyyy-MM-dd\");\n     Date date = new Date(System.currentTimeMillis());\n@@ -156,9 +185,6 @@ private static void runEvaluationOnFolders(String inputFolder, String outputFold\n     File[] languageDirectories = new File(inputFolder).listFiles(File::isDirectory);\n     for (File languageDirectory : languageDirectories) {\n       langCode = languageDirectory.getName();\n-//      if (!langCode.toString().equals(\"de-DE\")) {\n-//        continue;\n-//      }\n       language = Languages.getLanguageForShortCode(langCode);\n       Files.createDirectories(Paths.get(outputPathRoot+\"/\"+langCode));\n       summaryOutputFilename = outputPathRoot+\"/\"+langCode+\"/\"+langCode+\".tsv\";\n@@ -176,9 +202,6 @@ private static void runEvaluationOnFolders(String inputFolder, String outputFold\n           String fileName = myCorpusFile.getName();\n           System.out.println(\"Analyzing file: \" + fileName);\n           fileName = fileName.substring(0, fileName.lastIndexOf('.'));\n-//          if (!fileName.startsWith(\"parallelcorpus\")) {\n-//            continue;\n-//          }\n           //reset all global Variables to default\n           unidirectional = false;\n           wholeword = true;\n@@ -441,7 +464,7 @@ private static void run(boolean printSummaryDetails) throws IOException {\n       resultsString.append(\"Recall: \" + String.format(Locale.ROOT, \"%.4f\", recall) + \"\\n\");\n       // out.write(\"TP with expected suggestion: \" + String.format(\"%.4f\",\n       // expectedSuggestionPercentage)+\"\\n\");\n-      resultsString.append(\"Errors: \" + String.valueOf(errorsTotal) + \"\\n\");\n+      resultsString.append(\"Total sentences: \" + String.valueOf(errorsTotal) + \"\\n\");\n       appendToFile(verboseOutputFilename, resultsString.toString());\n       \n       if (printSummaryDetails) {\n@@ -632,19 +655,9 @@ private static boolean isExpectedSuggestionAtPos(List<RemoteRuleMatch> matchesCo\n   }\n   \n   private static void writeHelp() {\n-    System.out.println(\"Usage: \" + ArtificialErrorEval.class.getSimpleName()\n-        + \" <language code> <file> <string1> <string2> <options>\");\n-    System.out.println(\"  <language code>, e.g. en, en-US, de, fr...\");\n-    System.out.println(\"  <file> is a file with correct sentences, once sentence per line; errors will be \"\n-        + \"introduced and each line will be checked\");\n-    System.out.println(\"  <string1> is the string to be replaced by <string2>, word boundaries will be \"\n-        + \"assumed at the start and the end of the strings\");\n-    System.out.println(\"  <options>\");\n-    System.out.println(\"    -v           verbose, print all false positive or false negative sentences\");\n-    System.out.println(\"    -u           unidirectional, analyze only rules for string1 (wrong) -> string2 (correct)\");\n-    System.out.println(\"    -r           list of comma-separated rules to be considered\");\n-    System.out.println(\"    -s           summary output file\");\n-    System.out.println(\"    -c           error category\");\n-    System.out.println(\"    --inflected  search lemmas insted of forms\");\n+    System.out.println(\"Usage 1: \" + ArtificialErrorEval.class.getSimpleName()\n+        + \" <language code> <input file>\");\n+    System.out.println(\"Usage 2: \" + ArtificialErrorEval.class.getSimpleName()\n+        + \" <configuration file>\");\n   }\n }",
      "parent_sha": "2f6c93c579e734b7612fb050032eeca972941075"
    }
  },
  {
    "oid": "42f155705205dfa16fcca74552891cc4457a639d",
    "message": "simplify code",
    "date": "2007-09-16T19:45:53Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/42f155705205dfa16fcca74552891cc4457a639d",
    "details": {
      "sha": "ca4927cc34f37f997de68ef96ff99a6f2e0e0cc4",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/rules/patterns/PatternRule.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/42f155705205dfa16fcca74552891cc4457a639d/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FPatternRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/42f155705205dfa16fcca74552891cc4457a639d/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FPatternRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FPatternRule.java?ref=42f155705205dfa16fcca74552891cc4457a639d",
      "patch": "@@ -285,9 +285,10 @@ public final RuleMatch[] match(final AnalyzedSentence text) throws IOException {\n                   || elem.andGroupExceptionMatch(matchToken));\n             if (!exceptionMatched && elem.hasPreviousException() && m > 0) {\n               final int numReadings = tokens[m - 1].getReadingsLength();\n-              for (int p = 0; p < numReadings; p++) {\n-                final AnalyzedToken matchExceptionToken = tokens[m - 1].getAnalyzedToken(p);\n-              exceptionMatched |= elem.scopePreviousExceptionMatch(matchExceptionToken);\n+              for (int p = 0; p < numReadings; p++) {             \n+              exceptionMatched |= \n+                elem.scopePreviousExceptionMatch(\n+                    tokens[m - 1].getAnalyzedToken(p));\n             }\n             }\n             ",
      "parent_sha": "6508f192274586a8b41f1eb7393c1772fedb8a79"
    }
  },
  {
    "oid": "872e16cbbc718a9d9f95fc1b49458dbd0aae9390",
    "message": "use magic textSessionID value for regressionTestMode",
    "date": "2020-11-06T16:11:40Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/872e16cbbc718a9d9f95fc1b49458dbd0aae9390",
    "details": {
      "sha": "ee5502aafb0f006eb1a52184abf16b0bc7a72948",
      "filename": "languagetool-server/src/main/java/org/languagetool/server/TextChecker.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/872e16cbbc718a9d9f95fc1b49458dbd0aae9390/languagetool-server%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fserver%2FTextChecker.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/872e16cbbc718a9d9f95fc1b49458dbd0aae9390/languagetool-server%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fserver%2FTextChecker.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-server%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fserver%2FTextChecker.java?ref=872e16cbbc718a9d9f95fc1b49458dbd0aae9390",
      "patch": "@@ -638,8 +638,12 @@ private List<RuleMatch> getPipelineResults(AnnotatedText aText, Language lang, L\n     try {\n       settings = new PipelinePool.PipelineSettings(lang, motherTongue, params, config.globalConfig, userConfig);\n       lt = pipelinePool.getPipeline(settings);\n+      Long textSessionId = userConfig.getTextSessionId();\n+      if (params.regressionTestMode) {\n+        textSessionId = -2L; // magic value for remote rule roll-out - includes all results, even from disabled models\n+      }\n       matches.addAll(lt.check(aText, true, JLanguageTool.ParagraphHandling.NORMAL, listener,\n-        params.mode, params.level, executorService, userConfig.getTextSessionId()));\n+        params.mode, params.level, executorService, textSessionId));\n     } finally {\n       if (lt != null) {\n         pipelinePool.returnPipeline(settings, lt);",
      "parent_sha": "44ab7854075fc40cf2055cc1e7261da1c081c798"
    }
  },
  {
    "oid": "6f5d962f7465d0de6005c45b41955c7dbd225e99",
    "message": "avoid a rare NPE in getOriginalPosition() when using multiple threads",
    "date": "2014-10-20T08:09:41Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/6f5d962f7465d0de6005c45b41955c7dbd225e99",
    "details": {
      "sha": "91ebb94cb45945a8e8c16d376d4ef3337620d2f9",
      "filename": "languagetool-core/src/main/java/org/languagetool/AnalyzedSentence.java",
      "status": "modified",
      "additions": 18,
      "deletions": 16,
      "changes": 34,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/6f5d962f7465d0de6005c45b41955c7dbd225e99/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2FAnalyzedSentence.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/6f5d962f7465d0de6005c45b41955c7dbd225e99/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2FAnalyzedSentence.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2FAnalyzedSentence.java?ref=6f5d962f7465d0de6005c45b41955c7dbd225e99",
      "patch": "@@ -45,7 +45,7 @@ public AnalyzedSentence(final AnalyzedTokenReadings[] tokens) {\n \n   public AnalyzedSentence(final AnalyzedTokenReadings[] tokens, final int[] whPositions) {\n     this.tokens = tokens;\n-    this.setWhPositions(whPositions);\n+    this.setWhPositions(Objects.requireNonNull(whPositions));\n     getTokensWithoutWhitespace();\n   }\n \n@@ -92,22 +92,24 @@ public final AnalyzedTokenReadings[] getTokens() {\n    * token included.\n    */\n   public final AnalyzedTokenReadings[] getTokensWithoutWhitespace() {\n-    if (nonBlankTokens == null) {\n-      int whCounter = 0;\n-      int nonWhCounter = 0;\n-      final int[] mapping = new int[tokens.length + 1];\n-      final List<AnalyzedTokenReadings> l = new ArrayList<>();\n-      for (final AnalyzedTokenReadings token : tokens) {\n-        if (!token.isWhitespace() || token.isSentenceStart() || token.isSentenceEnd()\n-            || token.isParagraphEnd()) {\n-          l.add(token);\n-          mapping[nonWhCounter] = whCounter;\n-          nonWhCounter++;\n+    synchronized (this) {\n+      if (nonBlankTokens == null) {\n+        int whCounter = 0;\n+        int nonWhCounter = 0;\n+        final int[] mapping = new int[tokens.length + 1];\n+        final List<AnalyzedTokenReadings> l = new ArrayList<>();\n+        for (final AnalyzedTokenReadings token : tokens) {\n+          if (!token.isWhitespace() || token.isSentenceStart() || token.isSentenceEnd()\n+                  || token.isParagraphEnd()) {\n+            l.add(token);\n+            mapping[nonWhCounter] = whCounter;\n+            nonWhCounter++;\n+          }\n+          whCounter++;\n         }\n-        whCounter++;\n+        setNonBlankTokens(l.toArray(new AnalyzedTokenReadings[l.size()]));\n+        setWhPositions(mapping.clone());\n       }\n-      setNonBlankTokens(l.toArray(new AnalyzedTokenReadings[l.size()]));\n-      setWhPositions(mapping.clone());\n     }\n     return nonBlankTokens.clone();\n   }\n@@ -231,7 +233,7 @@ public final String getAnnotations() {\n    * @param whPositions the whPositions to set, see {@link #getWhPositions()}\n    */\n   public void setWhPositions(int[] whPositions) {\n-    this.whPositions = whPositions;\n+    this.whPositions = Objects.requireNonNull(whPositions);\n   }\n \n   /**",
      "parent_sha": "54b13c55ab10c5e7da444ed00300a6233e48028f"
    }
  },
  {
    "oid": "9da22701144ea9666f5a6922012aae8727986a15",
    "message": "#206 make class public so it can be used from external packages",
    "date": "2014-11-14T15:59:54Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/9da22701144ea9666f5a6922012aae8727986a15",
    "details": {
      "sha": "e01155c3af1a1350d0746bbe19884fd833cbf12e",
      "filename": "languagetool-standalone/src/main/java/org/languagetool/dev/POSDictionaryBuilder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/9da22701144ea9666f5a6922012aae8727986a15/languagetool-standalone%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fdev%2FPOSDictionaryBuilder.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/9da22701144ea9666f5a6922012aae8727986a15/languagetool-standalone%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fdev%2FPOSDictionaryBuilder.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-standalone%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fdev%2FPOSDictionaryBuilder.java?ref=9da22701144ea9666f5a6922012aae8727986a15",
      "patch": "@@ -26,7 +26,7 @@\n  * Create a Morfologik binary dictionary from plain text data.\n  * @since public since 2.8\n  */\n-final class POSDictionaryBuilder extends DictionaryBuilder {\n+public final class POSDictionaryBuilder extends DictionaryBuilder {\n \n   public POSDictionaryBuilder(File infoFile) throws IOException {\n     super(infoFile);",
      "parent_sha": "69148fc0727b7224f96291b52c09bca356442b28"
    }
  },
  {
    "oid": "59f50847d8cf32851fff6630e5bd98bc20e84488",
    "message": "add special case for SENT_END",
    "date": "2007-05-31T22:54:21Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/59f50847d8cf32851fff6630e5bd98bc20e84488",
    "details": {
      "sha": "0b2975a2a58d8a9e880f87efefd20820e09b551f",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/rules/pl/PolishWordRepeatRule.java",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/59f50847d8cf32851fff6630e5bd98bc20e84488/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpl%2FPolishWordRepeatRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/59f50847d8cf32851fff6630e5bd98bc20e84488/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpl%2FPolishWordRepeatRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpl%2FPolishWordRepeatRule.java?ref=59f50847d8cf32851fff6630e5bd98bc20e84488",
      "patch": "@@ -131,7 +131,7 @@ public final RuleMatch[] match(final AnalyzedSentence text) {\n           if (m2.matches()) {\n             isWord = false;\n             break;\n-          }\n+          }          \n         } else {\n           hasLemma = false;\n         }\n@@ -145,10 +145,15 @@ public final RuleMatch[] match(final AnalyzedSentence text) {\n \n       prevLemma = \"\";\n       if (isWord) {\n-        for (int j = 0; j < readingsLen; j++) {\n-          if (hasLemma) {\n-            curLemma = tokens[i].getAnalyzedToken(j).getLemma();\n-            if (!prevLemma.equals(curLemma)) {\n+        for (int j = 0; j < readingsLen; j++) {          \n+          if (hasLemma) {            \n+            curLemma = tokens[i].getAnalyzedToken(j).getLemma();            \n+            final String Pos = tokens[i].getAnalyzedToken(j).getPOSTag();\n+            boolean notSentEnd = false;\n+            if (Pos != null) {\n+              notSentEnd = \"SENT_END\".equals(Pos);\n+              }            \n+            if (!prevLemma.equals(curLemma) && !notSentEnd) {\n               if (inflectedWords.contains(curLemma)) {\n                 repetition = true;\n               } else {\t        \t\t\t   \t           ",
      "parent_sha": "5eedfb452a68c6bbe51f1d545a9fbaa6c9e2dc92"
    }
  },
  {
    "oid": "991b4ef76f2b7e7f9e396f29bc6e82e43e660ff2",
    "message": "[LO extension] solves bug: no reaction of right mouse click",
    "date": "2020-03-09T19:44:58Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/991b4ef76f2b7e7f9e396f29bc6e82e43e660ff2",
    "details": {
      "sha": "755fbc234ab7175d30ea338a4fb47b45e48a9d03",
      "filename": "languagetool-office-extension/src/main/java/org/languagetool/openoffice/SingleDocument.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/991b4ef76f2b7e7f9e396f29bc6e82e43e660ff2/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FSingleDocument.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/991b4ef76f2b7e7f9e396f29bc6e82e43e660ff2/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FSingleDocument.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FSingleDocument.java?ref=991b4ef76f2b7e7f9e396f29bc6e82e43e660ff2",
      "patch": "@@ -429,14 +429,13 @@ private int getParaFromFlatparagraph(String chPara, int startPos, boolean isRese\n     if(!isReset) {\n       isReset = numOldPara != allParas.size();\n     }\n-    \n-    if (proofInfo == PROOFINFO_UNKNOWN && ret < 0) {\n+    nParas = flatPara.getCurNumFlatParagraph();\n+\n+    if (proofInfo == PROOFINFO_UNKNOWN && (ret < 0 || nParas < 0)) {\n       //  no automatic iteration - get ViewCursor position\n       return getParaFromViewCursorOrDialog(chPara);\n     }\n \n-    nParas = flatPara.getCurNumFlatParagraph();\n-\n     if (nParas < divNum || nParas >= divNum + allParas.size()) {\n       return -1; //  nParas < divNum: Proof footnote etc.  /  nParas >= allParas.size():  document was changed while checking\n     }",
      "parent_sha": "0b44f07fe2055cf03e43ff4f5a6d86b4541cd58e"
    }
  },
  {
    "oid": "d7eff3f56ae67b5a0ef1e4b5ccc7b863186903ed",
    "message": "more verbose exception message",
    "date": "2016-06-28T08:30:51Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/d7eff3f56ae67b5a0ef1e4b5ccc7b863186903ed",
    "details": {
      "sha": "e553fdcd0ed5e40ee24ded96db36f5bcdd0cbd9d",
      "filename": "languagetool-core/src/main/java/org/languagetool/JLanguageTool.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/d7eff3f56ae67b5a0ef1e4b5ccc7b863186903ed/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2FJLanguageTool.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/d7eff3f56ae67b5a0ef1e4b5ccc7b863186903ed/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2FJLanguageTool.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2FJLanguageTool.java?ref=d7eff3f56ae67b5a0ef1e4b5ccc7b863186903ed",
      "patch": "@@ -964,7 +964,7 @@ public List<RuleMatch> call() throws Exception {\n             }\n           }\n         } catch (Exception e) {\n-          throw new RuntimeException(\"Could not check sentence: '\"\n+          throw new RuntimeException(\"Could not check sentence (language: \" + language + \"): '\"\n                   + StringUtils.abbreviate(analyzedSentence.toTextString(), 200) + \"'\", e);\n         }\n       }",
      "parent_sha": "9d78cda0cd51b60f3fefbe48909731587fba8db8"
    }
  },
  {
    "oid": "8fe9d69fb52e8f6817ffbf71979a9b1b3c22db27",
    "message": "don't let test fail on \"r\u00f4le\" from spelling.txt",
    "date": "2016-12-21T17:32:56Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/8fe9d69fb52e8f6817ffbf71979a9b1b3c22db27",
    "details": {
      "sha": "580c51c0339a6d186b2270c8655dbb5273f201f9",
      "filename": "languagetool-standalone/src/test/java/org/languagetool/rules/WordListValidatorTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/8fe9d69fb52e8f6817ffbf71979a9b1b3c22db27/languagetool-standalone%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Frules%2FWordListValidatorTest.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/8fe9d69fb52e8f6817ffbf71979a9b1b3c22db27/languagetool-standalone%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Frules%2FWordListValidatorTest.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-standalone%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Frules%2FWordListValidatorTest.java?ref=8fe9d69fb52e8f6817ffbf71979a9b1b3c22db27",
      "patch": "@@ -47,7 +47,8 @@ public class WordListValidatorTest {\n   // Words that are valid but with special characters so are that we don't want to\n   // allow them in general:\n   private static final Set<String> VALID_WORDS = new HashSet<>(Arrays.asList(\n-          \"Hidsch\u0101b/S\"\n+          \"Hidsch\u0101b/S\",\n+          \"r\u00f4le\", \"r\u00f4les\"\n   ));\n \n   @Test",
      "parent_sha": "12f3fed10594a5790e9fe6e82fef7fa42a36e4b4"
    }
  },
  {
    "oid": "a205ee8853e333c5280bb6fa6089951d15f271df",
    "message": "[LO extension] solves issue #5969 and another bug (not running paragraph level rules) for remote server access",
    "date": "2021-11-04T21:40:53Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/a205ee8853e333c5280bb6fa6089951d15f271df",
    "details": {
      "sha": "f436cd761bb4c235896c548ea6ddad0a37573f54",
      "filename": "languagetool-office-extension/src/main/java/org/languagetool/openoffice/LORemoteLanguageTool.java",
      "status": "modified",
      "additions": 27,
      "deletions": 4,
      "changes": 31,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/a205ee8853e333c5280bb6fa6089951d15f271df/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FLORemoteLanguageTool.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/a205ee8853e333c5280bb6fa6089951d15f271df/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FLORemoteLanguageTool.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FLORemoteLanguageTool.java?ref=a205ee8853e333c5280bb6fa6089951d15f271df",
      "patch": "@@ -135,7 +135,8 @@ List<RuleMatch> check(String text, ParagraphHandling paraMode, RemoteCheck check\n         configBuilder.enabledRuleIds(enabledRules.toArray(new String[0]));\n         configBuilder.disabledRuleIds(tmpDisabled.toArray(new String[0]));\n         configBuilder.ruleValues(ruleValues);\n-        configBuilder.mode(\"allButTextLevelOnly\");\n+        configBuilder.mode(\"all\");\n+//        configBuilder.mode(\"allButTextLevelOnly\");\n       } else if (checkMode == RemoteCheck.ONLY_SPELL) {\n         Set<String> tmpEnabled = new HashSet<>();\n         for (Rule rule : spellingRules) {\n@@ -148,7 +149,8 @@ List<RuleMatch> check(String text, ParagraphHandling paraMode, RemoteCheck check\n         configBuilder.mode(\"allButTextLevelOnly\");\n       }\n     }\n-    configBuilder.level(\"picky\");\n+    configBuilder.level(\"default\");\n+//    configBuilder.level(\"picky\");\n     CheckConfiguration remoteConfig = configBuilder.build();\n     int limit;\n     for (int nStart = 0; text.length() > nStart; nStart += limit) {\n@@ -292,8 +294,9 @@ private RuleMatch toRuleMatch(RemoteRuleMatch remoteMatch, int nOffset) throws M\n     }\n     if (matchRule == null) {\n       MessageHandler.printToLogFile(\"WARNING: Rule \\\"\" + remoteMatch.getRuleDescription() + \"(ID: \" \n-                                    + remoteMatch.getRuleId() + \")\\\" not supported by LO extension!\");\n-      return null;\n+                                    + remoteMatch.getRuleId() + \")\\\" may be not supported by option panel!\");\n+      matchRule = new RemoteRule(remoteMatch);\n+      allRules.add(matchRule);\n     }\n     RuleMatch ruleMatch = new RuleMatch(matchRule, null, remoteMatch.getErrorOffset() + nOffset, \n         remoteMatch.getErrorOffset() + remoteMatch.getErrorLength() + nOffset, remoteMatch.getMessage(), \n@@ -392,6 +395,26 @@ static class RemoteRule extends Rule {\n       setLocQualityIssueType(ITSIssueType.getIssueType(ruleMap.get(\"locQualityIssueType\")));\n     }\n \n+    RemoteRule(RemoteRuleMatch remoteMatch) {\n+      ruleId = remoteMatch.getRuleId();\n+      description = remoteMatch.getRuleDescription();\n+      isDictionaryBasedSpellingRule = false;\n+      hasConfigurableValue = false;\n+      defaultValue = 0;\n+      minConfigurableValue = 0;\n+      maxConfigurableValue = 100;\n+      configureText = \"\";\n+      String categoryId = remoteMatch.getCategoryId().isEmpty() ? null : remoteMatch.getCategoryId().get();\n+      String categoryName = remoteMatch.getCategory().isEmpty() ? null : remoteMatch.getCategory().get();\n+      if (categoryId != null && categoryName != null) {\n+        setCategory(new Category(new CategoryId(categoryId), categoryName));\n+      }\n+      String locQualityIssueType = remoteMatch.getLocQualityIssueType().isEmpty() ? null : remoteMatch.getLocQualityIssueType().get();\n+      if (locQualityIssueType != null) {\n+        setLocQualityIssueType(ITSIssueType.getIssueType(locQualityIssueType));\n+      }\n+    }\n+\n     @Override\n     public String getId() {\n       return ruleId;",
      "parent_sha": "42901da7c029dd58f4c41d5935a7c5fc9c87b270"
    }
  },
  {
    "oid": "5a1ef0a95ca88b179f35142c72b9ac797c96ac0c",
    "message": "[de] stop logging to STDOUT",
    "date": "2022-01-27T12:53:32Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/5a1ef0a95ca88b179f35142c72b9ac797c96ac0c",
    "details": {
      "sha": "417e710396095b1c8733eaafd982977880ed39ad",
      "filename": "languagetool-language-modules/de/src/main/java/org/languagetool/rules/de/GermanSpellerRule.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/5a1ef0a95ca88b179f35142c72b9ac797c96ac0c/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FGermanSpellerRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/5a1ef0a95ca88b179f35142c72b9ac797c96ac0c/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FGermanSpellerRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FGermanSpellerRule.java?ref=5a1ef0a95ca88b179f35142c72b9ac797c96ac0c",
      "patch": "@@ -1678,20 +1678,20 @@ && isMisspelled(word)\n             !firstPart.matches(\".{3,25}(tum|ing|ling|heit|keit|schaft|ung|ion|t\u00e4t|at|um)\") &&\n             isOnlyNoun(firstPart) &&\n             !isMisspelled(firstPart + \"test\")) {  // does hunspell accept this? takes infex-s into account automatically\n-          System.out.println(\"will accept: \" + word);\n+          //System.out.println(\"will accept: \" + word);\n           return true;\n         } else if (!isMisspelled(firstPart) &&\n                    !firstPart.matches(\".{3,25}(tum|ing|ling|heit|keit|schaft|ung|ion|t\u00e4t|at|um)\")) {\n-                   System.out.println(\"will not accept: \" + word);\n+                   //System.out.println(\"will not accept: \" + word);\n         } else if (firstPart.endsWith(\"s\") && !isMisspelled(firstPart.replaceFirst(\"s$\", \"\")) &&\n                    firstPart.matches(\".{3,25}(tum|ing|ling|heit|keit|schaft|ung|ion|t\u00e4t|at|um)s\") &&   // \"handlungsartig\"\n                    isOnlyNoun(firstPart.replaceFirst(\"s$\", \"\")) &&\n                    !isMisspelled(firstPart + \"test\")) {  // does hunspell accept this? takes infex-s into account automatically\n-          System.out.println(\"will accept: \" + word);\n+          //System.out.println(\"will accept: \" + word);\n           return true;\n         } else if (firstPart.endsWith(\"s\") && !isMisspelled(firstPart.replaceFirst(\"s$\", \"\")) &&\n                    firstPart.matches(\".{3,25}(tum|ing|ling|heit|keit|schaft|ung|ion|t\u00e4t|at|um)s\")) {\n-          System.out.println(\"will not accept: \" + word);\n+          //System.out.println(\"will not accept: \" + word);\n         }\n       }\n     }",
      "parent_sha": "69e67192272b6c6b8867d25e4db980b02d9bfa77"
    }
  },
  {
    "oid": "1dfb03c2b2d4e482ad6f16ee3c95521741cc8f7a",
    "message": "auto-detect document language",
    "date": "2005-12-02T22:08:27Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/1dfb03c2b2d4e482ad6f16ee3c95521741cc8f7a",
    "details": {
      "sha": "391b40c4091ab549734c5d64d372a772f1cd3f90",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/openoffice/Main.java",
      "status": "modified",
      "additions": 31,
      "deletions": 5,
      "changes": 36,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/1dfb03c2b2d4e482ad6f16ee3c95521741cc8f7a/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Fopenoffice%2FMain.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/1dfb03c2b2d4e482ad6f16ee3c95521741cc8f7a/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Fopenoffice%2FMain.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Fopenoffice%2FMain.java?ref=1dfb03c2b2d4e482ad6f16ee3c95521741cc8f7a",
      "patch": "@@ -27,7 +27,11 @@\n \n import org.xml.sax.SAXException;\n \n+import com.sun.star.beans.UnknownPropertyException;\n+import com.sun.star.beans.XPropertySet;\n import com.sun.star.frame.XDesktop;\n+import com.sun.star.lang.Locale;\n+import com.sun.star.lang.WrappedTargetException;\n import com.sun.star.lang.XComponent;\n import com.sun.star.lang.XMultiComponentFactory;\n import com.sun.star.lang.XServiceInfo;\n@@ -106,25 +110,47 @@ public String getImplementationName() {\n       return _Main.class.getName();\n     }\n \n+    private Language getLanguage() throws UnknownPropertyException, WrappedTargetException {\n+      // just look at the current position(?) in the document and assume that this character's\n+      // language is the language of the whole document:\n+      XPropertySet xCursorProps = (XPropertySet) UnoRuntime.queryInterface(XPropertySet.class,\n+          xTextDoc.getText().createTextCursor());\n+      Locale charLocale = (Locale) xCursorProps.getPropertyValue(\"CharLocale\");\n+      boolean langIsSupported = false;\n+      for (int i = 0; i < Language.LANGUAGES.length; i++) {\n+        if (Language.LANGUAGES[i].getShortName().equals(charLocale.Language)) {\n+          langIsSupported= true;\n+          break;\n+        }\n+      }\n+      if (!langIsSupported) {\n+        JOptionPane.showMessageDialog(null, \"Error: Sorry, the document language '\" +charLocale.Language+ \n+            \"' is not supported by LanguageTool.\");\n+        throw new IllegalArgumentException(\"Language is not supported: \" + charLocale.Language);\n+      }\n+      return Language.getLanguageforShortName(charLocale.Language);\n+    }\n+    \n     private String getText() {\n       XText text = xTextDoc.getText();\n       return text.getString();\n     }\n \n-    private void checkText(String text) throws IOException, ParserConfigurationException, SAXException {\n+    private void checkText(String text) throws IOException, ParserConfigurationException, SAXException, UnknownPropertyException, WrappedTargetException {\n       // TODO: show splash screen, as init takes some time?\n-      // TODO: use document language\n       Configuration config = new Configuration();\n-      JLanguageTool langTool = new JLanguageTool(Language.ENGLISH);\n+      Language docLanguage = getLanguage();\n+      JLanguageTool langTool = new JLanguageTool(docLanguage);\n       langTool.activateDefaultPatternRules();\n       for (Iterator iter = config.getDisabledRuleIds().iterator(); iter.hasNext();) {\n         String id = (String) iter.next();\n         langTool.disableRule(id);\n       }\n       List ruleMatches = langTool.check(text);\n       if (ruleMatches.size() == 0) {\n-        JOptionPane.showMessageDialog(null, \"No errors and warnings found\");\n-        // TODO: display language setting used etc.\n+        JOptionPane.showMessageDialog(null, \"No errors and warnings found (document language: \" +\n+            docLanguage.getName() + \")\");\n+        // TODO: display number of active rules etc?\n       } else {\n         OOoDialog dialog = new OOoDialog(config, langTool.getAllRules(), xTextDoc, ruleMatches, text);\n         dialog.show();",
      "parent_sha": "9547466df9f40609b19046520049d9c90944baac"
    }
  },
  {
    "oid": "3a5f42f3b03942a0801a87d4eb4a1e8d796c7ffd",
    "message": "small whitespace and javadoc cleanup",
    "date": "2013-08-07T21:03:27Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/3a5f42f3b03942a0801a87d4eb4a1e8d796c7ffd",
    "details": {
      "sha": "bd7a80529927ceecc98130fbf15d19100069b5b5",
      "filename": "languagetool-core/src/main/java/org/languagetool/AnalyzedTokenReadings.java",
      "status": "modified",
      "additions": 25,
      "deletions": 25,
      "changes": 50,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/3a5f42f3b03942a0801a87d4eb4a1e8d796c7ffd/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2FAnalyzedTokenReadings.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/3a5f42f3b03942a0801a87d4eb4a1e8d796c7ffd/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2FAnalyzedTokenReadings.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2FAnalyzedTokenReadings.java?ref=3a5f42f3b03942a0801a87d4eb4a1e8d796c7ffd",
      "patch": "@@ -43,7 +43,6 @@ public class AnalyzedTokenReadings {\n   private boolean isSentEnd;\n   private boolean isSentStart;\n   private boolean isParaEnd;\n-\n   private boolean isWhitespaceBefore;\n   \n   /**\n@@ -100,7 +99,7 @@ public final List<AnalyzedToken> getReadings() {\n   }\n \n   /**\n-   * Get a token reading \n+   * Get a token reading.\n    * @see #getReadingsLength() getReadingsLength() for how many token readings there are\n    */\n   public final AnalyzedToken getAnalyzedToken(final int idx) {\n@@ -164,7 +163,7 @@ public final boolean hasPartialPosTag(final String posTag) {\n \n   /**\n    * Add a new reading.\n-   * @param token - new reading, given as {@link AnalyzedToken}  \n+   * @param token new reading, given as {@link AnalyzedToken}\n    */\n   public final void addReading(final AnalyzedToken token) {\n     final ArrayList<AnalyzedToken> l = new ArrayList<>();\n@@ -190,20 +189,19 @@ public final void addReading(final AnalyzedToken token) {\n    * Removes a reading from the list of readings. Note: if the token\n    * has only one reading, then a new reading with an empty POS tag\n    * and an empty lemma is created.\n-   * @param token - reading to be removed.\n+   * @param token reading to be removed\n    */\n   public final void removeReading(final AnalyzedToken token) {\n     final ArrayList<AnalyzedToken> l = new ArrayList<>();\n-    final AnalyzedToken tmpTok = new AnalyzedToken(token.getToken(), token\n-        .getPOSTag(), token.getLemma());\n+    final AnalyzedToken tmpTok = new AnalyzedToken(token.getToken(), token.getPOSTag(), token.getLemma());\n     tmpTok.setWhitespaceBefore(isWhitespaceBefore);\n     for (AnalyzedToken anTokReading : anTokReadings) {\n       if (!anTokReading.matches(tmpTok)) {\n         l.add(anTokReading);\n       }\n     }\n     if (l.isEmpty()) {\n-        l.add(new AnalyzedToken(this.token, null, null));\n+      l.add(new AnalyzedToken(this.token, null, null));\n     }\n     anTokReadings = l.toArray(new AnalyzedToken[l.size()]);\n     setNoRealPOStag();\n@@ -216,21 +214,23 @@ public final void removeReading(final AnalyzedToken token) {\n    */\n   public final void leaveReading(final AnalyzedToken token) {\n     final ArrayList<AnalyzedToken> l = new ArrayList<>();\n-    final AnalyzedToken tmpTok = new AnalyzedToken(token.getToken(), token\n-        .getPOSTag(), token.getLemma());\n+    final AnalyzedToken tmpTok = new AnalyzedToken(token.getToken(), token.getPOSTag(), token.getLemma());\n     tmpTok.setWhitespaceBefore(isWhitespaceBefore);\n     for (AnalyzedToken anTokReading : anTokReadings) {\n       if (anTokReading.matches(tmpTok)) {\n         l.add(anTokReading);\n       }\n     }\n     if (l.isEmpty()) {\n-        l.add(new AnalyzedToken(this.token, null, null));\n+      l.add(new AnalyzedToken(this.token, null, null));\n     }\n     anTokReadings = l.toArray(new AnalyzedToken[l.size()]);\n     setNoRealPOStag();\n   }\n \n+  /**\n+   * Number of readings.\n+   */\n   public final int getReadingsLength() {\n     return anTokReadings.length;\n   }\n@@ -240,7 +240,7 @@ public final boolean isWhitespace() {\n   }\n   \n   /**\n-   * Returns true if the token equals \\n, \\r\\n \\n\\r or \\r\\n.\n+   * Returns true if the token equals {@code \\n}, {@code \\r}, {@code \\n\\r}, or {@code \\r\\n}.\n    */\n   public final boolean isLinebreak() {\n     return isLinebreak;\n@@ -277,7 +277,7 @@ public final boolean isSentEnd() {\n   \n   /**\n    * @since 0.9.9\n-   * @return true if the token is OpenOffice field code.\n+   * @return true if the token is LibreOffice/OpenOffice field code.\n    */\n   public final boolean isFieldCode() {\n     return \"\\u0001\".equals(token) || \"\\u0002\".equals(token);\n@@ -327,7 +327,7 @@ public final boolean isImmunized() {\n   \n   /**\n    * Sets the flag on AnalyzedTokens to make matching\n-   * on \"UNKNOWN\" POS tag correct in the Element class.  \n+   * on {@code UNKNOWN} POS tag correct in the Element class.\n    */\n   private void setNoRealPOStag() {\n     boolean hasNoPOStag = !isLinebreak();\n@@ -413,20 +413,20 @@ public boolean equals(Object obj) {\n     return true;\n   }\n \n-/**\n- * Used to track disambiguator actions.\n- * @return the historicalAnnotations\n- */\n-public String getHistoricalAnnotations() {\n+  /**\n+   * Used to track disambiguator actions.\n+   * @return the historicalAnnotations\n+   */\n+  public String getHistoricalAnnotations() {\n     return historicalAnnotations;\n-}\n+  }\n \n-/**\n- * Used to track disambiguator actions.\n- * @param historicalAnnotations the historicalAnnotations to set\n- */\n-public void setHistoricalAnnotations(String historicalAnnotations) {\n+  /**\n+   * Used to track disambiguator actions.\n+   * @param historicalAnnotations the historicalAnnotations to set\n+   */\n+  public void setHistoricalAnnotations(String historicalAnnotations) {\n     this.historicalAnnotations = historicalAnnotations;\n-}\n+  }\n   \n }",
      "parent_sha": "0ddd3bd075c18e588990d06c9f6bd4873c506786"
    }
  },
  {
    "oid": "a73e078e39f75d9625973a2af6b8764889775255",
    "message": "fix test",
    "date": "2021-05-15T09:10:41Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/a73e078e39f75d9625973a2af6b8764889775255",
    "details": {
      "sha": "0b40f832e3200878a8c03f8835881c961baf8759",
      "filename": "languagetool-wikipedia/src/test/java/org/languagetool/dev/index/PatternRuleQueryBuilderTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/a73e078e39f75d9625973a2af6b8764889775255/languagetool-wikipedia%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Fdev%2Findex%2FPatternRuleQueryBuilderTest.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/a73e078e39f75d9625973a2af6b8764889775255/languagetool-wikipedia%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Fdev%2Findex%2FPatternRuleQueryBuilderTest.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-wikipedia%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Fdev%2Findex%2FPatternRuleQueryBuilderTest.java?ref=a73e078e39f75d9625973a2af6b8764889775255",
      "patch": "@@ -112,7 +112,7 @@ public void testQueryBuilder() throws Exception {\n   }\n \n   public void testCaseSensitive() throws Exception {\n-    InputStream input = new ByteArrayInputStream((\"<?xml version='1.0' encoding='UTF-8'?> <rules lang='en'> <category name='Test'>\" +\n+    InputStream input = new ByteArrayInputStream((\"<?xml version='1.0' encoding='UTF-8'?> <rules lang='en'> <category id='TEST' name='Test'>\" +\n             \"<rule id='TEST_RULE_1' name='test_1'> <pattern case_sensitive='yes'><token>How</token></pattern> </rule>\" +\n             \"<rule id='TEST_RULE_2' name='test_2'> <pattern case_sensitive='yes'><token>how</token></pattern> </rule>\" +\n             \"<rule id='TEST_RULE_3' name='test_3'> <pattern><token>How</token></pattern> </rule>\" +\n@@ -280,7 +280,7 @@ private void assertMatches(AbstractPatternRule patternRule, int expectedMatches)\n   private AbstractPatternRule makeRule(String ruleXml) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(\"<?xml version='1.0' encoding='UTF-8'?>\");\n-    sb.append(\"<rules lang='en'> <category name='Test'> <rule id='TEST_RULE' name='test'>\");\n+    sb.append(\"<rules lang='en'> <category id='TEST' name='Test'> <rule id='TEST_RULE' name='test'>\");\n     sb.append(\"<pattern>\");\n     sb.append(ruleXml);\n     sb.append(\"</pattern> </rule> </category> </rules>\");",
      "parent_sha": "1b870e37e864d88b4cb2534e78a1ad6b3845f776"
    }
  },
  {
    "oid": "2787d6ee4a79bf6b1e5f04ec6f5916f531d241ea",
    "message": "[de] improve test",
    "date": "2014-08-17T13:10:05Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/2787d6ee4a79bf6b1e5f04ec6f5916f531d241ea",
    "details": {
      "sha": "820cca120af29fdb3b626884040a5d884802a72a",
      "filename": "languagetool-language-modules/de/src/test/java/org/languagetool/rules/de/WiederVsWiderRuleTest.java",
      "status": "modified",
      "additions": 23,
      "deletions": 12,
      "changes": 35,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/2787d6ee4a79bf6b1e5f04ec6f5916f531d241ea/languagetool-language-modules%2Fde%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FWiederVsWiderRuleTest.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/2787d6ee4a79bf6b1e5f04ec6f5916f531d241ea/languagetool-language-modules%2Fde%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FWiederVsWiderRuleTest.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fde%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FWiederVsWiderRuleTest.java?ref=2787d6ee4a79bf6b1e5f04ec6f5916f531d241ea",
      "patch": "@@ -29,20 +29,31 @@\n  */\n public class WiederVsWiderRuleTest extends TestCase {\n \n+  private final WiederVsWiderRule rule = new WiederVsWiderRule(null);\n+\n   public void testRule() throws IOException {\n-    WiederVsWiderRule rule = new WiederVsWiderRule(null);\n-    JLanguageTool langTool = new JLanguageTool(new German());\n+    JLanguageTool lt = new JLanguageTool(new German());\n     // correct sentences:\n-    assertEquals(0, rule.match(langTool.getAnalyzedSentence(\"Das spiegelt wider, wie es wieder l\u00e4uft.\")).length);\n-    assertEquals(0, rule.match(langTool.getAnalyzedSentence(\"Das spiegelt die Situation gut wider.\")).length);\n-    assertEquals(0, rule.match(langTool.getAnalyzedSentence(\"Das spiegelt die Situation.\")).length);\n-    assertEquals(0, rule.match(langTool.getAnalyzedSentence(\"Immer wieder spiegelt das die Situation.\")).length);\n-    assertEquals(0, rule.match(langTool.getAnalyzedSentence(\"Immer wieder spiegelt das die Situation wider.\")).length);\n-    assertEquals(0, rule.match(langTool.getAnalyzedSentence(\"Das spiegelt wieder wider, wie es l\u00e4uft.\")).length);\n+    assertGood(\"Das spiegelt wider, wie es wieder l\u00e4uft.\", lt);\n+    assertGood(\"Das spiegelt die Situation gut wider.\", lt);\n+    assertGood(\"Das spiegelt die Situation.\", lt);\n+    assertGood(\"Immer wieder spiegelt das die Situation.\", lt);\n+    assertGood(\"Immer wieder spiegelt das die Situation wider.\", lt);\n+    assertGood(\"Das spiegelt wieder wider, wie es l\u00e4uft.\", lt);\n     // errors:\n-    assertEquals(1, rule.match(langTool.getAnalyzedSentence(\"Das spiegelt wieder, wie es wieder l\u00e4uft.\")).length);\n-    assertEquals(1, rule.match(langTool.getAnalyzedSentence(\"Das spiegelt die Situation gut wieder.\")).length);\n-    assertEquals(1, rule.match(langTool.getAnalyzedSentence(\"Immer wieder spiegelt das die Situation wieder.\")).length);\n+    assertBad(\"Das spiegelt wieder, wie es wieder l\u00e4uft.\", lt);\n+    assertBad(\"Sie spiegeln das Wachstum der Stadt wieder.\", lt);\n+    assertBad(\"Das spiegelt die Situation gut wieder.\", lt);\n+    assertBad(\"Immer wieder spiegelt das die Situation wieder.\", lt);\n+    assertBad(\"Immer wieder spiegelte das die Situation wieder.\", lt);\n+  }\n+\n+  private void assertGood(String text, JLanguageTool langTool) throws IOException {\n+    assertEquals(0, rule.match(langTool.getAnalyzedSentence(text)).length);\n   }\n-    \n+\n+  private void assertBad(String text, JLanguageTool langTool) throws IOException {\n+    assertEquals(1, rule.match(langTool.getAnalyzedSentence(text)).length);\n+  }\n+\n }",
      "parent_sha": "6d9c5d0ce3ff653b8a0d40d6df626aa9770a7cb8"
    }
  },
  {
    "oid": "8388ba0d1a3fcd9389b82f75fd778bc92f9a77ef",
    "message": "[de] fix error",
    "date": "2017-11-14T22:04:03Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/8388ba0d1a3fcd9389b82f75fd778bc92f9a77ef",
    "details": {
      "sha": "3c2a2984f8613318216af402f72d30caa6838fc9",
      "filename": "languagetool-language-modules/de/src/main/java/org/languagetool/rules/de/GermanWordRepeatRule.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/8388ba0d1a3fcd9389b82f75fd778bc92f9a77ef/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FGermanWordRepeatRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/8388ba0d1a3fcd9389b82f75fd778bc92f9a77ef/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FGermanWordRepeatRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FGermanWordRepeatRule.java?ref=8388ba0d1a3fcd9389b82f75fd778bc92f9a77ef",
      "patch": "@@ -78,7 +78,7 @@ public boolean ignore(AnalyzedTokenReadings[] tokens, int position) {\n       return true;\n     }\n     // \"Dann warfen sie sie weg.\"\n-    if (tokens.length > position && position > 2 && tokens[position - 2].matchesPosTagRegex(\"VER:3:PLU:.+\") && tokens[position - 1].getToken().equals(\"sie\") &&\n+    if (tokens.length+1 > position && position > 2 && tokens[position - 2].matchesPosTagRegex(\"VER:3:PLU:.+\") && tokens[position - 1].getToken().equals(\"sie\") &&\n       tokens[position].getToken().equals(\"sie\") && (tokens[position + 1].hasPosTag(\"ZUS\"))) {\n       return true;\n     }",
      "parent_sha": "40a9ddcdeb9f4d4f38f3b5d5a72da7c1b41c7371"
    }
  },
  {
    "oid": "62439f842b3dd4b0c16061dfb1104b120108c3e1",
    "message": "[LO extension] some changes in spell an grammar dialog; solves issue #3638",
    "date": "2021-02-17T07:50:34Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/62439f842b3dd4b0c16061dfb1104b120108c3e1",
    "details": {
      "sha": "2ee8f3d044fcea8af4ac62f94390719631b43213",
      "filename": "languagetool-office-extension/src/main/java/org/languagetool/openoffice/SpellAndGrammarCheckDialog.java",
      "status": "modified",
      "additions": 114,
      "deletions": 32,
      "changes": 146,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/62439f842b3dd4b0c16061dfb1104b120108c3e1/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FSpellAndGrammarCheckDialog.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/62439f842b3dd4b0c16061dfb1104b120108c3e1/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FSpellAndGrammarCheckDialog.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FSpellAndGrammarCheckDialog.java?ref=62439f842b3dd4b0c16061dfb1104b120108c3e1",
      "patch": "@@ -162,18 +162,27 @@ private DocumentCache updateDocumentCache(int nPara, XComponent xComponent, Docu\n   }\n \n   /**\n-   * Find the next error relative to the position of cursor and set the view cursor to the position\n+   * Get the current document\n+   * Wait until it is initialized (by LO/OO)\n    */\n-  public void nextError() {\n-    SingleDocument document = documents.getCurrentDocument();\n-    while (document == null) {\n+  private SingleDocument getCurrentDocument() {\n+    SingleDocument currentDocument = documents.getCurrentDocument();\n+    while (currentDocument == null) {\n       try {\n         Thread.sleep(5);\n       } catch (InterruptedException e) {\n         MessageHandler.printException(e);\n       }\n-      document = documents.getCurrentDocument();\n+      currentDocument = documents.getCurrentDocument();\n     }\n+    return currentDocument;\n+  }\n+\n+   /**\n+   * Find the next error relative to the position of cursor and set the view cursor to the position\n+   */\n+  public void nextError() {\n+    SingleDocument document = getCurrentDocument();\n     XComponent xComponent = document.getXComponent();\n     DocumentCursorTools docCursor = new DocumentCursorTools(xComponent);\n     docCache = updateDocumentCache(nLastFlat,xComponent, docCursor, document);\n@@ -257,14 +266,22 @@ private boolean moveViewCursor(long nChars, ViewCursorTools viewCursor)  {\n    * x = number of character in paragraph\n    */\n   public void setTextViewCursor(int x, int y, ViewCursorTools viewCursor, DocumentCursorTools docCursor)  {\n-    XTextViewCursor vCursor = viewCursor.getViewCursor();\n-    XParagraphCursor pCursor = docCursor.getParagraphCursor();\n-    pCursor.gotoStart(false);\n-    for (int i = 0; i < y && pCursor.gotoNextParagraph(false); i++) {\n+    try {\n+      XTextViewCursor vCursor = viewCursor.getViewCursor();\n+      if (vCursor != null) {\n+        XParagraphCursor pCursor = docCursor.getParagraphCursor();\n+        if (pCursor != null) {\n+          pCursor.gotoStart(false);\n+          for (int i = 0; i < y && pCursor.gotoNextParagraph(false); i++) {\n+          }\n+          pCursor.gotoStartOfParagraph(false);\n+          vCursor.gotoRange(pCursor.getStart(), false);\n+          vCursor.goRight((short)x, false);\n+        }\n+      }\n+    } catch (Throwable t) {\n+      MessageHandler.printException(t);\n     }\n-    pCursor.gotoStartOfParagraph(false);\n-    vCursor.gotoRange(pCursor.getStart(), false);\n-    vCursor.goRight((short)x, false);\n   }\n \n   /**\n@@ -419,7 +436,7 @@ public class ExtensionSpellChecker {\n     public List<CheckError> getSpellErrors(int nPara, String text, Locale lang, Map<Integer, Set<Integer>> ignoredSpellMatches) {\n       try {\n         List<CheckError> errorArray = new ArrayList<CheckError>();\n-        XFlatParagraph xFlatPara = documents.getCurrentDocument().getFlatParagraphTools().getFlatParagraphAt(nPara);\n+        XFlatParagraph xFlatPara = getCurrentDocument().getFlatParagraphTools().getFlatParagraphAt(nPara);\n         Locale locale = null;\n         AnalyzedSentence analyzedSentence = langTool.getAnalyzedSentence(text);\n         AnalyzedTokenReadings[] tokens = analyzedSentence.getTokensWithoutWhitespace();\n@@ -474,7 +491,7 @@ public List<CheckError> getSpellErrors(int numPara, Locale lang,\n         DocumentCursorTools cursorTools, Map<Integer, Set<Integer>> ignoredSpellMatches) {\n       try {\n         List<CheckError> errorArray = new ArrayList<CheckError>();\n-        XFlatParagraph xFlatPara = documents.getCurrentDocument().getFlatParagraphTools().getFlatParagraphAt(docCache.getFlatParagraphNumber(numPara));\n+        XFlatParagraph xFlatPara = getCurrentDocument().getFlatParagraphTools().getFlatParagraphAt(docCache.getFlatParagraphNumber(numPara));\n         WordsFromParagraph wParas = new WordsFromParagraph(numPara, cursorTools);\n         String word = wParas.getNextWord();\n         while (word != null) {\n@@ -842,6 +859,7 @@ public class LtCheckDialog implements ActionListener {\n     private String informationUrl;\n     private String docId;\n     private String lastLang = new String();\n+    private String endOfDokumentMessage;\n     private int x;\n     private int y;\n     private int endOfRange = -1;\n@@ -869,15 +887,7 @@ public LtCheckDialog(XComponentContext xContext) {\n       if (debugMode) {\n         MessageHandler.printToLogFile(\"LtCheckDialog called\");\n       }\n-      currentDocument = documents.getCurrentDocument();\n-      while (currentDocument == null) {\n-        try {\n-          Thread.sleep(5);\n-        } catch (InterruptedException e) {\n-          MessageHandler.printException(e);\n-        }\n-        currentDocument = documents.getCurrentDocument();\n-      }\n+      currentDocument = getCurrentDocument();\n       docId = currentDocument.getDocID();\n       ignoredSpellMatches = new HashMap<>();\n       undoList = new ArrayList<UndoContainer>();\n@@ -1152,7 +1162,7 @@ public void windowGainedFocus(WindowEvent e) {\n             if (debugMode) {\n               MessageHandler.printToLogFile(\"Check Dialog: Window Focus gained: Event = \" + e.paramString());\n             }\n-            currentDocument = documents.getCurrentDocument();\n+            currentDocument = getCurrentDocument();\n             String newDocId = currentDocument.getDocID();\n             if (debugMode) {\n               MessageHandler.printToLogFile(\"Check Dialog: Window Focus gained: new docID = \" + newDocId + \", old = \" + docId);\n@@ -1198,6 +1208,7 @@ public void show() {\n       documents.setLtDialog(this);\n       dialog.setAutoRequestFocus(true);\n       dialog.setVisible(true);\n+      dialog.toFront();\n     }\n \n     /**\n@@ -1287,9 +1298,27 @@ private String formatToolTipText(String Text) {\n      * fill the elements of the dialog with the information of the match\n      */\n     private void gotoNextError(boolean startAtBegin) {\n+      ignoreOnce.setEnabled(false);\n+      ignoreAll.setEnabled(false);\n+      deactivateRule.setEnabled(false);\n+      change.setEnabled(false);\n+      changeAll.setVisible(false);\n+      addToDictionary.setEnabled(false);\n+      more.setEnabled(false);\n+      help.setEnabled(false);\n+      options.setEnabled(false);\n+      undo.setEnabled(false);\n+      close.setEnabled(false);\n+      language.setEnabled(false);\n+      changeLanguage.setEnabled(false);\n+      endOfDokumentMessage = null;\n+      errorDescription.setForeground(Color.BLACK);\n       CheckError checkError = getNextError(startAtBegin);\n       error = checkError == null ? null : checkError.error;\n       locale = checkError == null ? null : checkError.locale;\n+      help.setEnabled(true);\n+      options.setEnabled(true);\n+      close.setEnabled(true);\n       if (sentenceIncludeError == null || errorDescription == null || suggestions == null) {\n         MessageHandler.printToLogFile(\"SentenceIncludeError == null || errorDescription == null || suggestions == null\");\n       } else if (error != null) {\n@@ -1324,13 +1353,15 @@ private void gotoNextError(boolean startAtBegin) {\n           MessageHandler.printToLogFile(\"LT language == null\");\n         }\n         lastLang = lang.getTranslatedName(messages);\n+        language.setEnabled(true);\n         language.setSelectedItem(lang.getTranslatedName(messages));\n-        changeLanguage.setEnabled(false);\n         \n         if (isSpellError) {\n           addToDictionary.setVisible(true);\n           changeAll.setVisible(true);\n           deactivateRule.setVisible(false);\n+          addToDictionary.setEnabled(true);\n+          changeAll.setEnabled(true);\n         } else {\n           addToDictionary.setVisible(false);\n           changeAll.setVisible(false);\n@@ -1339,6 +1370,7 @@ private void gotoNextError(boolean startAtBegin) {\n         }\n         informationUrl = getUrl(error);\n         more.setVisible(informationUrl != null);\n+        more.setEnabled(informationUrl != null);\n         undo.setEnabled(undoList != null && !undoList.isEmpty());\n       } else {\n         ignoreOnce.setEnabled(false);\n@@ -1351,9 +1383,11 @@ private void gotoNextError(boolean startAtBegin) {\n         more.setVisible(false);\n         focusLost = false;\n         suggestions.setListData(new String[0]);\n-        errorDescription.setText(\"\");\n+        undo.setEnabled(undoList != null && !undoList.isEmpty());\n+        errorDescription.setForeground(Color.RED);\n+        errorDescription.setText(endOfDokumentMessage == null ? \"\" : endOfDokumentMessage);\n+        sentenceIncludeError.setText(\"\");\n         if (docCache.size() > 0) {\n-          sentenceIncludeError.setText(docCache.getFlatParagraph(docCache.size() - 1));\n           locale = docCache.getFlatParagraphLocale(docCache.size() - 1);\n         }\n         Language lang = locale == null || !documents.hasLocale(locale)? langTool.getLanguage() : documents.getLanguage(locale);\n@@ -1453,6 +1487,7 @@ private String getUrl(SingleProofreadingError error) {\n      * starting at the current cursor position\n      */\n     private CheckError getNextError(boolean startAtBegin) {\n+      currentDocument = getCurrentDocument();\n       XComponent xComponent = currentDocument.getXComponent();\n       DocumentCursorTools docCursor = new DocumentCursorTools(xComponent);\n       docCache = updateDocumentCache(nFPara, xComponent, docCursor, currentDocument);\n@@ -1463,7 +1498,7 @@ private CheckError getNextError(boolean startAtBegin) {\n       y = viewCursor.getViewCursorParagraph();\n       if (y >= docCache.textSize()) {\n         MessageHandler.printToLogFile(\"getNextError: y (= \" + y + \") >= text size (= \" + docCache.textSize() + \"): Return null\");\n-        MessageHandler.showMessage(messages.getString(\"guiCheckComplete\"), false);\n+        endOfDokumentMessage = messages.getString(\"guiCheckComplete\");\n         return null;\n       }\n       x = viewCursor.getViewCursorCharacter();\n@@ -1526,9 +1561,9 @@ private CheckError getNextError(boolean startAtBegin) {\n           }\n         }\n         lastFlatPara = -1;\n-        MessageHandler.showMessage(messages.getString(\"guiCheckComplete\"), false);\n+        endOfDokumentMessage = messages.getString(\"guiCheckComplete\");\n       } else {\n-        MessageHandler.showMessage(messages.getString(\"guiSelectionCheckComplete\"), false);\n+        endOfDokumentMessage = messages.getString(\"guiSelectionCheckComplete\");\n       }\n       return null;\n     }\n@@ -1560,7 +1595,7 @@ public void actionPerformed(ActionEvent action) {\n       } else if (action.getActionCommand().equals(\"options\")) {\n         documents.runOptionsDialog();\n       } else if (action.getActionCommand().equals(\"help\")) {\n-        MessageHandler.showMessage(messages.getString(\"loDialogHelpText\"), false);\n+        MessageHandler.showMessage(messages.getString(\"loDialogHelpText\"));\n       } else {\n         MessageHandler.showMessage(\"Action '\" + action.getActionCommand() + \"' not supported\");\n       }\n@@ -1710,9 +1745,19 @@ private void changeText() {\n         if (!orgText.equals(dialogText)) {\n           int firstChange = getDifferenceFromBegin(orgText, dialogText);\n           int lastEqual = getDifferenceFromEnd(orgText, dialogText);\n+          int nDiff = lastEqual - firstChange;\n           pCursor.goRight((short)firstChange, false);\n-          pCursor.goRight((short)(lastEqual - firstChange), true);\n+          if (nDiff < orgText.length() - dialogText.length()) {\n+            nDiff = orgText.length() - dialogText.length();\n+            lastEqual = firstChange + nDiff;\n+          }\n+          if (nDiff > 0) {\n+            pCursor.goRight((short)nDiff, true);\n+          }\n           int lastDialogEqual = dialogText.length() - orgText.length() + lastEqual;\n+          if (lastDialogEqual - firstChange < dialogText.length() - orgText.length()) {\n+            lastDialogEqual = firstChange + dialogText.length() - orgText.length();\n+          }\n           replace = dialogText.substring(firstChange, lastDialogEqual);\n           word = pCursor.getString();\n           pCursor.setString(replace);\n@@ -1970,7 +2015,44 @@ private void undo() {\n         MessageHandler.showError(e);\n       }\n     }\n+/*    TODO: Delete after tests\n+    private void showMessage (JDialog parent, String text) {\n+      parent.toFront();\n+      JOptionPane optionPane = new JOptionPane(text);\n+      optionPane.setOptionType(JOptionPane.DEFAULT_OPTION);\n+      JDialog messageDialog = optionPane.createDialog(parent, \"LanguageTool\");\n+      messageDialog.setIconImage(null);\n+      messageDialog.setAlwaysOnTop(true);\n+      messageDialog.setVisible(true);\n+      messageDialog.toFront();\n+    }\n+\n+/*\n+    private void showMessage (Component parent, String text) {\n+      ShowMessage mess = new ShowMessage (parent, text);\n+      mess.start();\n+    }\n     \n+    class ShowMessage extends Thread {\n+      private final Component parent;\n+      private final String text;\n+      \n+      ShowMessage (Component parent, String text) {\n+        this.parent = parent;\n+        this.text = text;\n+      }\n+      \n+      public void run() {\n+        JOptionPane optionPane = new JOptionPane(text);\n+        optionPane.setOptionType(JOptionPane.DEFAULT_OPTION);\n+        messageDialog = optionPane.createDialog(parent, \"LanguageTool\");\n+        messageDialog.setIconImage(null);\n+        messageDialog.setAlwaysOnTop(true);\n+        messageDialog.setVisible(true);\n+        messageDialog.toFront();\n+      }\n+    }\n+*/    \n   }\n   \n }",
      "parent_sha": "61880b0b3ab7bd02857fe1d62ef21ac9ad47a7a6"
    }
  },
  {
    "oid": "cb52dbfff642ba21df13880dc401711d9d223c37",
    "message": "undo parts of latest change, it broke the tests",
    "date": "2012-06-26T21:39:17Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/cb52dbfff642ba21df13880dc401711d9d223c37",
    "details": {
      "sha": "afee73a192c05c85fec527ddb5d219316913cfa6",
      "filename": "trunk/JLanguageTool/src/java/org/languagetool/gui/Configuration.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/cb52dbfff642ba21df13880dc401711d9d223c37/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Forg%2Flanguagetool%2Fgui%2FConfiguration.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/cb52dbfff642ba21df13880dc401711d9d223c37/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Forg%2Flanguagetool%2Fgui%2FConfiguration.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Forg%2Flanguagetool%2Fgui%2FConfiguration.java?ref=cb52dbfff642ba21df13880dc401711d9d223c37",
      "patch": "@@ -161,8 +161,9 @@ private void loadConfiguration(final Language lang) throws IOException {\n \n \t  final String qualifier = getQualifier(lang);\n \t\n-    final FileInputStream fis = new FileInputStream(configFile);\n+    FileInputStream fis = null;\n     try {\n+      fis = new FileInputStream(configFile);\n       final Properties props = new Properties();\n       props.load(fis);\n \n@@ -190,7 +191,9 @@ private void loadConfiguration(final Language lang) throws IOException {\n     } catch (final FileNotFoundException e) {\n       // file not found: okay, leave disabledRuleIds empty\n     } finally {\n-      fis.close();\n+      if (fis != null) {\n+        fis.close();\n+      }\n     }\n   }\n ",
      "parent_sha": "8638e0fa928c83eca0c2bdf0c133f3dd5607bfb5"
    }
  },
  {
    "oid": "cdbd376b5fbb472763d95c57d21a7898b09b635f",
    "message": "partially revert last commit",
    "date": "2016-11-22T20:54:16Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/cdbd376b5fbb472763d95c57d21a7898b09b635f",
    "details": {
      "sha": "f585ce53875b660f8e4b30ce44ae8132af191d97",
      "filename": "languagetool-commandline/src/main/java/org/languagetool/commandline/Main.java",
      "status": "modified",
      "additions": 28,
      "deletions": 15,
      "changes": 43,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/cdbd376b5fbb472763d95c57d21a7898b09b635f/languagetool-commandline%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fcommandline%2FMain.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/cdbd376b5fbb472763d95c57d21a7898b09b635f/languagetool-commandline%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fcommandline%2FMain.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-commandline%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fcommandline%2FMain.java?ref=cdbd376b5fbb472763d95c57d21a7898b09b635f",
      "patch": "@@ -18,33 +18,46 @@\n  */\n package org.languagetool.commandline;\n \n+import static org.languagetool.tools.StringTools.filterXML;\n+import static org.languagetool.tools.StringTools.readerToString;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.commons.io.ByteOrderMark;\n+import org.apache.commons.io.input.BOMInputStream;\n import org.languagetool.JLanguageTool;\n import org.languagetool.Language;\n import org.languagetool.Languages;\n import org.languagetool.MultiThreadedJLanguageTool;\n import org.languagetool.bitext.TabBitextReader;\n import org.languagetool.language.AmericanEnglish;\n+import org.languagetool.language.English;\n import org.languagetool.language.LanguageIdentifier;\n import org.languagetool.rules.Rule;\n import org.languagetool.rules.bitext.BitextRule;\n import org.languagetool.rules.patterns.AbstractPatternRule;\n import org.languagetool.rules.patterns.PatternRuleLoader;\n import org.languagetool.tools.JnaTools;\n+import org.languagetool.tools.StringTools.ApiPrintMode;\n import org.languagetool.tools.Tools;\n import org.xml.sax.SAXException;\n \n-import javax.xml.parsers.ParserConfigurationException;\n-\n-import java.io.*;\n-import java.nio.charset.Charset;\n-import java.util.*;\n-import java.util.stream.Collectors;\n-\n-import org.apache.commons.io.ByteOrderMark;\n-import org.apache.commons.io.input.BOMInputStream;\n-\n-import static org.languagetool.tools.StringTools.*;\n-\n /**\n  * The command line tool to check plain text files.\n  */\n@@ -169,7 +182,7 @@ private void runOnFile(String filename, String encoding,\n       if (options.isAutoDetect()) {\n         Language language = detectLanguageOfString(text);\n         if (language == null) {\n-          System.err.println(\"Could not detect language well enough, using English\");\n+          System.err.println(\"Could not detect language well enough, using American English\");\n           language = new AmericanEnglish();\n         }\n         changeLanguage(language, options.getMotherTongue(), options.getDisabledRules(), options.getEnabledRules());\n@@ -234,7 +247,7 @@ private void runOnFileLineByLine(String filename, String encoding) throws IOExce\n           if (lineCount == 1 && options.isAutoDetect()) {\n             Language language = detectLanguageOfString(line);\n             if (language == null) {\n-              System.err.println(\"Could not detect language well enough, using English\");\n+              System.err.println(\"Could not detect language well enough, using American English\");\n               language = new AmericanEnglish();\n             }\n             System.err.println(\"Language used is: \" + language.getName());\n@@ -413,7 +426,7 @@ public static void main(String[] args) throws IOException, ParserConfigurationEx\n         System.err.println(\"No language specified, using English (no spell checking active, \" +\n                 \"specify a language variant like 'en-GB' if available)\");\n       }\n-      options.setLanguage(new AmericanEnglish());\n+      options.setLanguage(new English());\n     } else if (!options.isXmlFormat() && !options.isApplySuggestions()) {\n       languageHint = \"Expected text language: \" + options.getLanguage().getName();\n     }",
      "parent_sha": "dfab0fddb1c7d15588255f7c3ddfa490fb9e899c"
    }
  },
  {
    "oid": "f3ca8b794f607e12e782170f9d7519cb48ef8b94",
    "message": "translation: avoid some duplicates",
    "date": "2020-03-13T08:36:11Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/f3ca8b794f607e12e782170f9d7519cb48ef8b94",
    "details": {
      "sha": "244635a5171dd4d5fde58c4a4ce61f3b96dd010c",
      "filename": "languagetool-language-modules/en/src/main/java/org/languagetool/rules/en/translation/BeoLingusTranslator.java",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/f3ca8b794f607e12e782170f9d7519cb48ef8b94/languagetool-language-modules%2Fen%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fen%2Ftranslation%2FBeoLingusTranslator.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/f3ca8b794f607e12e782170f9d7519cb48ef8b94/languagetool-language-modules%2Fen%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fen%2Ftranslation%2FBeoLingusTranslator.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fen%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fen%2Ftranslation%2FBeoLingusTranslator.java?ref=f3ca8b794f607e12e782170f9d7519cb48ef8b94",
      "patch": "@@ -176,7 +176,19 @@ public List<TranslationEntry> translate(String term, String fromLang, String toL\n     if (entries != null) {\n       entriesSet.addAll(entries);\n     }\n-    entriesSet.addAll(getTranslationsForBaseforms(term, map));\n+    List<TranslationEntry> translationsForBaseforms = getTranslationsForBaseforms(term, map);\n+    for (TranslationEntry trans : translationsForBaseforms) {\n+      if (entries != null) {\n+        Optional<TranslationEntry> first = entries.stream().filter(k -> k.getL1().equals(trans.getL1())).findFirst();\n+        if (first.isPresent() && first.get().getL1().equals(trans.getL1())) {\n+          // skip duplicates\n+        } else {\n+          entriesSet.add(trans);\n+        }\n+      } else {\n+        entriesSet.add(trans);\n+      }\n+    }\n     List<TranslationEntry> sortedList = new ArrayList<>(entriesSet);\n     Collections.sort(sortedList, (t1, t2) -> Integer.compare(t2.getItemCount(), t1.getItemCount()));\n     return sortedList;",
      "parent_sha": "6c1d76a484d735ab74e628f1a3f796bee932e674"
    }
  },
  {
    "oid": "8e9f13725ab031b75e080ad8115ffc0ee4900cbf",
    "message": "[fr] avoid splitting prefixes",
    "date": "2021-05-14T09:57:15Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/8e9f13725ab031b75e080ad8115ffc0ee4900cbf",
    "details": {
      "sha": "e4f4db080188fb4bfba119aae9b6d8d6e5696ef5",
      "filename": "languagetool-language-modules/fr/src/main/java/org/languagetool/rules/fr/MorfologikFrenchSpellerRule.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/8e9f13725ab031b75e080ad8115ffc0ee4900cbf/languagetool-language-modules%2Ffr%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Ffr%2FMorfologikFrenchSpellerRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/8e9f13725ab031b75e080ad8115ffc0ee4900cbf/languagetool-language-modules%2Ffr%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Ffr%2FMorfologikFrenchSpellerRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Ffr%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Ffr%2FMorfologikFrenchSpellerRule.java?ref=8e9f13725ab031b75e080ad8115ffc0ee4900cbf",
      "patch": "@@ -39,7 +39,7 @@ public final class MorfologikFrenchSpellerRule extends MorfologikSpellerRule {\n       \"^(non|en|a|le|la|les|pour|de|du|des|un|une|mon|ma|mes|ton|ta|tes|son|sa|ses|leur|leurs|ce|cet) (..+)$\",\n       Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n   private static final Pattern PREFIX_AMB_ESPAI = Pattern.compile(\n-      \"^(auto|ex|extra|macro|mega|meta|micro|multi|mono|mini|post|retro|semi|super|trans|l|d) (..+)$\",\n+      \"^(agro|anti|archi|auto|a\u00e9ro|cardio|co|cyber|demi|ex|extra|grand|g\u00e9o|haut|hospitalo|hydro|hyper|hypo|infra|inter|macro|mega|meta|mi|micro|mini|mono|multi|musculo|m\u00e9ga|m\u00e9ta|nord|n\u00e9o|omni|pan|para|pluri|poly|post|prim|pro|proto|pr\u00e9|pseudo|psycho|p\u00e9ri|re|retro|r\u00e9|semi|simili|socio|sous|sud|super|supra|sur|sus|trans|tri|t\u00e9l\u00e9|ultra|uni|vice|\u00e9co|l|d) (..+)$\",\n       Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n \n   private static final Pattern APOSTROF_INICI_VERBS = Pattern.compile(\"^([lnts])(h?[aeiou\u00e0\u00e9\u00e8\u00ed\u00f2\u00f3\u00fa].*[^\u00e8])$\",",
      "parent_sha": "c199781a01ad6ada3a668c2ff5a4a94ebe399d1a"
    }
  },
  {
    "oid": "27af88c5895a0ac148c386da8c28ff6f30c0b96c",
    "message": "trivial style fixes",
    "date": "2010-09-29T16:49:24Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/27af88c5895a0ac148c386da8c28ff6f30c0b96c",
    "details": {
      "sha": "8156a6e13ee381bf09af622f67d1fffedda35748",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/rules/patterns/PatternRuleLoader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/27af88c5895a0ac148c386da8c28ff6f30c0b96c/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FPatternRuleLoader.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/27af88c5895a0ac148c386da8c28ff6f30c0b96c/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FPatternRuleLoader.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FPatternRuleLoader.java?ref=27af88c5895a0ac148c386da8c28ff6f30c0b96c",
      "patch": "@@ -148,7 +148,7 @@ public void startElement(final String namespaceURI, final String lName,\n         uTypeList.add(uType);\n     } else if (qName.equals(TOKEN)) {\n       setToken(attrs);\n-    } else if (qName.equals(EXCEPTION)) {\n+    } else if (EXCEPTION.equals(qName)) {\n       setExceptions(attrs);\n     } else if (qName.equals(EXAMPLE)\n         && attrs.getValue(TYPE).equals(\"correct\")) {",
      "parent_sha": "17f4f2f2302e11f63447c41110f1676986fd4156"
    }
  },
  {
    "oid": "8eee4ca11898e124794c3610fc90d2694f8523e8",
    "message": "[pl] avoid code duplication with BaseSynthesizer",
    "date": "2016-12-27T17:11:58Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/8eee4ca11898e124794c3610fc90d2694f8523e8",
    "details": {
      "sha": "59bf2d466815cf69cf436e6244ba96500a116a0e",
      "filename": "languagetool-language-modules/pl/src/main/java/org/languagetool/synthesis/pl/PolishSynthesizer.java",
      "status": "modified",
      "additions": 6,
      "deletions": 14,
      "changes": 20,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/8eee4ca11898e124794c3610fc90d2694f8523e8/languagetool-language-modules%2Fpl%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fsynthesis%2Fpl%2FPolishSynthesizer.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/8eee4ca11898e124794c3610fc90d2694f8523e8/languagetool-language-modules%2Fpl%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fsynthesis%2Fpl%2FPolishSynthesizer.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fpl%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fsynthesis%2Fpl%2FPolishSynthesizer.java?ref=8eee4ca11898e124794c3610fc90d2694f8523e8",
      "patch": "@@ -35,6 +35,7 @@\n \n import org.languagetool.AnalyzedToken;\n import org.languagetool.JLanguageTool;\n+import org.languagetool.synthesis.BaseSynthesizer;\n import org.languagetool.synthesis.Synthesizer;\n import org.languagetool.synthesis.SynthesizerTools;\n \n@@ -44,7 +45,7 @@\n  * @author Marcin Milkowski\n  */\n \n-public class PolishSynthesizer implements Synthesizer {\n+public class PolishSynthesizer extends BaseSynthesizer implements Synthesizer {\n \n   private static final String RESOURCE_FILENAME = \"/pl/polish_synth.dict\";\n   private static final String TAGS_FILE_NAME = \"/pl/polish_tags.txt\";\n@@ -57,20 +58,11 @@ public class PolishSynthesizer implements Synthesizer {\n   private volatile Dictionary dictionary;\n   private List<String> possibleTags;\n \n-  private Dictionary getDictionary() throws IOException {\n-    Dictionary result = this.dictionary;\n-    if (result == null) {\n-      synchronized (this) {\n-        result = this.dictionary;\n-        if (result == null) {\n-          final URL url = JLanguageTool.getDataBroker().getFromResourceDirAsUrl(RESOURCE_FILENAME);\n-          this.dictionary = result = Dictionary.read(url);\n-        }\n-      }\n-    }\n-    return result;\n+\n+  public PolishSynthesizer() {\n+    super(RESOURCE_FILENAME, TAGS_FILE_NAME);\n   }\n-  \n+\n   @Override\n   public final String[] synthesize(final AnalyzedToken token,\n       final String posTag) throws IOException {",
      "parent_sha": "6cbf03034616f10a3db25350f62340d1ac2e0dc7"
    }
  },
  {
    "oid": "9cea451f193200fdf561b4c1d2f7114b5fffa6de",
    "message": "prepare testing neural network rules",
    "date": "2017-12-29T14:14:36Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/9cea451f193200fdf561b4c1d2f7114b5fffa6de",
    "details": {
      "sha": "a721fd5f63b161c6d8e2a786092ff39d0eed16de",
      "filename": "languagetool-standalone/src/test/java/org/languagetool/rules/patterns/PerformanceTest2.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/9cea451f193200fdf561b4c1d2f7114b5fffa6de/languagetool-standalone%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpatterns%2FPerformanceTest2.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/9cea451f193200fdf561b4c1d2f7114b5fffa6de/languagetool-standalone%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpatterns%2FPerformanceTest2.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-standalone%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpatterns%2FPerformanceTest2.java?ref=9cea451f193200fdf561b4c1d2f7114b5fffa6de",
      "patch": "@@ -53,10 +53,12 @@ private void run(String languageCode, File textFile) throws IOException {\n       int endIndex = Math.min(beginIndex + MAX_TEXT_LENGTH, text.length()-1);\n       String subText = text.substring(beginIndex, endIndex);\n       long startTime = System.currentTimeMillis();\n-      MultiThreadedJLanguageTool langTool = new MultiThreadedJLanguageTool(language);\n-      List<RuleMatch> matches = langTool.check(subText);\n+      MultiThreadedJLanguageTool lt = new MultiThreadedJLanguageTool(language);\n+      //lt.activateWord2VecModelRules(new File(\"/home/dnaber/lt/word2vec\"));\n+      List<RuleMatch> matches = lt.check(subText);\n+      //System.out.println(matches);\n       long runTime = System.currentTimeMillis() - startTime;\n-      langTool.shutdown();\n+      lt.shutdown();\n       if (i >= SKIP) {\n         totalTime += runTime;\n         System.out.println(\"Time: \" + runTime + \"ms (\" + matches.size() + \" matches)\");",
      "parent_sha": "526fb7eec8af33b32de4bb4e069190ce5f748f78"
    }
  },
  {
    "oid": "4f5ce25fa0f0e373cb4eb6513d95db549f26fe37",
    "message": "[en] add adverbs",
    "date": "2020-04-21T07:50:25Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/4f5ce25fa0f0e373cb4eb6513d95db549f26fe37",
    "details": {
      "sha": "ffdab320596cc9f1413b187ac29892e4619ee3b5",
      "filename": "languagetool-language-modules/en/src/main/java/org/languagetool/rules/en/AdverbFilter.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/4f5ce25fa0f0e373cb4eb6513d95db549f26fe37/languagetool-language-modules%2Fen%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fen%2FAdverbFilter.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/4f5ce25fa0f0e373cb4eb6513d95db549f26fe37/languagetool-language-modules%2Fen%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fen%2FAdverbFilter.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fen%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fen%2FAdverbFilter.java?ref=4f5ce25fa0f0e373cb4eb6513d95db549f26fe37",
      "patch": "@@ -93,7 +93,7 @@ public class AdverbFilter extends RuleFilter {\n     put(\"accurately\", \"accurate\");\n     put(\"necessarily\", \"necessary\");\n     put(\"temporarily\", \"temporary\");\n-    put(\"significant\", \"significantly\");\n+    put(\"significantly\", \"significant\");\n     put(\"hastily\", \"hasty\");\n     put(\"immediately\", \"immediate\");\n     put(\"rarely\", \"rare\");\n@@ -152,6 +152,12 @@ public class AdverbFilter extends RuleFilter {\n     put(\"quietly\", \"quiet\");\n     put(\"slightly\", \"slight\");\n     put(\"cleverly\", \"clever\");\n+    put(\"roughly\", \"rough\");\n+    put(\"environmentally\", \"environmental\");\n+    put(\"geographically\", \"geographical\");\n+    put(\"usually\", \"usual\");\n+    put(\"normally\", \"normal\");\n+    put(\"deliciously\", \"delicious\");\n \n     // TODO: add more or maybe use https://github.com/simplenlg/simplenlg?\n     //put(\"\", \"\");",
      "parent_sha": "f9f96c4ca6634fdfaa52b7dbbeb6c3fa9ffa16f0"
    }
  },
  {
    "oid": "8bc680c4d4c71fb8b46b04bdf7ce6d2917c31334",
    "message": "LO/OO: don't always show error dialog if ngram data cannot be found - we already make this check when user sets the ngram directory and ngram data might not be there for all languages that support ngram data",
    "date": "2015-09-25T17:18:10Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/8bc680c4d4c71fb8b46b04bdf7ce6d2917c31334",
    "details": {
      "sha": "a7235e2ed4b0d3a1cdd6a8b52d3bde4591287dfe",
      "filename": "languagetool-office-extension/src/main/java/org/languagetool/openoffice/Main.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/8bc680c4d4c71fb8b46b04bdf7ce6d2917c31334/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FMain.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/8bc680c4d4c71fb8b46b04bdf7ce6d2917c31334/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FMain.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FMain.java?ref=8bc680c4d4c71fb8b46b04bdf7ce6d2917c31334",
      "patch": "@@ -383,7 +383,10 @@ private void initLanguageTool() {\n       langTool = new JLanguageTool(docLanguage, config.getMotherTongue());\n       File ngramDirectory = config.getNgramDirectory();\n       if (ngramDirectory != null) {\n-        langTool.activateLanguageModelRules(ngramDirectory);\n+        File ngramLangDir = new File(config.getNgramDirectory(), docLanguage.getShortName());\n+        if (ngramLangDir.exists()) {  // user might have ngram data only for some languages and that's okay\n+          langTool.activateLanguageModelRules(ngramDirectory);\n+        }\n       }\n       for (Rule rule : langTool.getAllActiveRules()) {\n         if (rule.isDictionaryBasedSpellingRule()) {",
      "parent_sha": "0ccf614044321929c7da0f4f273fb4d8b3d81f16"
    }
  },
  {
    "oid": "77af1af18cf7ae28467a8826937d8d5b1022ae49",
    "message": "more test fixes after false friend changes",
    "date": "2020-10-27T09:45:40Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/77af1af18cf7ae28467a8826937d8d5b1022ae49",
    "details": {
      "sha": "bec99e9220cd98def3f7f7547623ae7e511dca41",
      "filename": "languagetool-standalone/src/test/java/org/languagetool/rules/patterns/FalseFriendRuleTest.java",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/77af1af18cf7ae28467a8826937d8d5b1022ae49/languagetool-standalone%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpatterns%2FFalseFriendRuleTest.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/77af1af18cf7ae28467a8826937d8d5b1022ae49/languagetool-standalone%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpatterns%2FFalseFriendRuleTest.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-standalone%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpatterns%2FFalseFriendRuleTest.java?ref=77af1af18cf7ae28467a8826937d8d5b1022ae49",
      "patch": "@@ -28,6 +28,8 @@\n import org.junit.Test;\n import org.languagetool.JLanguageTool;\n import org.languagetool.language.*;\n+import org.languagetool.markup.AnnotatedText;\n+import org.languagetool.markup.AnnotatedTextBuilder;\n import org.languagetool.rules.RuleMatch;\n import org.languagetool.rules.en.MorfologikAmericanSpellerRule;\n import org.languagetool.rules.en.MorfologikBritishSpellerRule;\n@@ -99,14 +101,18 @@ protected synchronized List<AbstractPatternRule> getPatternRules() {\n   }\n   \n   private List<RuleMatch> assertErrors(int errorCount, String s, JLanguageTool lt) throws IOException {\n-    List<RuleMatch> matches = lt.check(s);\n+    AnnotatedText text = new AnnotatedTextBuilder().addText(s).build();\n+    List<RuleMatch> matches = lt.check(text, true, JLanguageTool.ParagraphHandling.NORMAL, null,\n+            JLanguageTool.Mode.ALL, JLanguageTool.Level.PICKY);\n     //System.err.println(matches);\n     assertEquals(\"Matches found: \" + matches, errorCount, matches.size());\n     return matches;\n   }\n   \n-  private void assertSuggestions(int suggestionCount, String text, JLanguageTool lt) throws IOException {\n-    List<RuleMatch> matches = lt.check(text);\n+  private void assertSuggestions(int suggestionCount, String s, JLanguageTool lt) throws IOException {\n+    AnnotatedText text = new AnnotatedTextBuilder().addText(s).build();\n+    List<RuleMatch> matches = lt.check(text, true, JLanguageTool.ParagraphHandling.NORMAL, null,\n+            JLanguageTool.Mode.ALL, JLanguageTool.Level.PICKY);\n     int suggestionsFound = 0;\n     for (RuleMatch match : matches) {\n       int pos = 0;",
      "parent_sha": "50a0f9f79a66e5a5bcd28d87c80762b2188baa43"
    }
  },
  {
    "oid": "1b7555795c9a95a6b233401f34e66524b0d9a298",
    "message": "tiny indentation fixes",
    "date": "2014-02-23T10:10:20Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/1b7555795c9a95a6b233401f34e66524b0d9a298",
    "details": {
      "sha": "bdb3c8347b7e7cce0984abae9c2e9767a5c05b56",
      "filename": "languagetool-core/src/main/java/org/languagetool/rules/patterns/Unifier.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/1b7555795c9a95a6b233401f34e66524b0d9a298/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpatterns%2FUnifier.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/1b7555795c9a95a6b233401f34e66524b0d9a298/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpatterns%2FUnifier.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpatterns%2FUnifier.java?ref=1b7555795c9a95a6b233401f34e66524b0d9a298",
      "patch": "@@ -227,17 +227,17 @@ public final void startNextToken() {\n     for (int i = 0; i < tokCnt; i++) {\n       for (Map.Entry<String, List<String>> feat : equivalenceFeatures.entrySet()) {\n         if (featuresFound.get(i)) {\n-        if (equivalencesMatched.get(i).containsKey(feat.getKey())) {\n-          if (equivalencesToBeKept.containsKey(feat.getKey())) {\n-          equivalencesMatched.get(i).get(feat.getKey()).retainAll(equivalencesToBeKept.get(feat.getKey()));\n-          } else {\n-            equivalencesMatched.get(i).remove(feat.getKey());\n+          if (equivalencesMatched.get(i).containsKey(feat.getKey())) {\n+            if (equivalencesToBeKept.containsKey(feat.getKey())) {\n+              equivalencesMatched.get(i).get(feat.getKey()).retainAll(equivalencesToBeKept.get(feat.getKey()));\n+            } else {\n+              equivalencesMatched.get(i).remove(feat.getKey());\n+            }\n           }\n-        }\n-      } else {\n+        } else {\n           equivalencesMatched.get(i).remove(feat.getKey());\n         }\n-    }\n+      }\n     }\n     equivalencesToBeKept.clear();\n   }",
      "parent_sha": "ea347a37283c7374d8f7d41d446d7d949fc1a933"
    }
  },
  {
    "oid": "739fd1940e291998429ac67aaaeae02037ec2843",
    "message": "reformat; use lowercase variable names (no functional change)",
    "date": "2006-07-04T19:46:54Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/739fd1940e291998429ac67aaaeae02037ec2843",
    "details": {
      "sha": "5cdfaa8e664a0e8f24e9292e4874a84fd0a13210",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/rules/patterns/StringElement.java",
      "status": "modified",
      "additions": 41,
      "deletions": 42,
      "changes": 83,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/739fd1940e291998429ac67aaaeae02037ec2843/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FStringElement.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/739fd1940e291998429ac67aaaeae02037ec2843/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FStringElement.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fpatterns%2FStringElement.java?ref=739fd1940e291998429ac67aaaeae02037ec2843",
      "patch": "@@ -17,6 +17,7 @@\n  * USA\n  */\n package de.danielnaber.languagetool.rules.patterns;\n+\n import java.util.regex.Pattern;\n import de.danielnaber.languagetool.AnalyzedToken;\n \n@@ -29,59 +30,57 @@\n class StringElement extends Element {\n \n   private boolean caseSensitive = false;\n+\n   private boolean regExp = false;\n-  private boolean Inflected = false;\n-  \n-  StringElement(String token, boolean caseSensitive, boolean regExp, boolean Inflected) {\n-    this.tokens = new String[] {token};\n+\n+  private boolean inflected = false;\n+\n+  StringElement(String token, boolean caseSensitive, boolean regExp, boolean inflected) {\n+    this.tokens = new String[] { token };\n     this.caseSensitive = caseSensitive;\n     this.regExp = regExp;\n-    this.Inflected = Inflected;\n+    this.inflected = inflected;\n   }\n-  \n-  StringElement(String[] tokens, boolean caseSensitive, boolean regExp, boolean Inflected) {\n+\n+  StringElement(String[] tokens, boolean caseSensitive, boolean regExp, boolean inflected) {\n     this.tokens = tokens;\n     this.caseSensitive = caseSensitive;\n     this.regExp = regExp;\n-    this.Inflected = Inflected;\n+    this.inflected = inflected;\n   }\n-  \n+\n   boolean matchToken(AnalyzedToken token) {\n-\t  String testToken = null;\n-\t  \n-\t  if (Inflected)\n-\t\t  testToken=token.getLemma();\n-\t  else \n-\t\t  testToken=token.getToken();\n-\t  \n-\t  if (caseSensitive) {\n+    String testToken = null;\n+\n+    if (inflected)\n+      testToken = token.getLemma();\n+    else\n+      testToken = token.getToken();\n+\n+    if (caseSensitive) {\n+      for (int i = 0; i < tokens.length; i++) {\n+        if (regExp) {\n+          if (token.getToken() != null)\n+            if (Pattern.matches(tokens[i], testToken))\n+              return true;\n+        } else {\n+          if (tokens[i].equals(testToken))\n+            return true;\n+        }\n+      }\n+    } else {\n       for (int i = 0; i < tokens.length; i++) {\n-    \t  if (regExp){\n-          \tif (token.getToken()!=null)\n-                  if (Pattern.matches(tokens[i], testToken))\n-          \t \t\t  return true;\n-          }\n-    \t  else{\n-    \t\t  if (tokens[i].equals(testToken))\n-    \t\t\t  return true;\n-    \t  }\n-        }\t\t\n+        if (regExp) {\n+          if (testToken != null)\n+            //(?u) - regex matching \n+            //case insensitive in Unicode\n+            if (Pattern.matches(\"(?u)\".concat(tokens[i]), testToken))\n+              return true;\n+        } else {\n+          if (tokens[i].equalsIgnoreCase(testToken))\n+            return true;\n+        }\n       }\n-    else {\n-    \tfor (int i = 0; i < tokens.length; i++) {\n-    \t\tif (regExp){\n-            \tif (testToken!=null)\n-            \t\t//(?u) - regex matching \n-            \t\t//case insensitive in Unicode\n-                    if (Pattern.matches(\"(?u)\".concat(tokens[i]), testToken))\n-            \t \t\t  return true;\n-            }\n-            else\n-            {\n-    \t\tif (tokens[i].equalsIgnoreCase(testToken))\n-                return true;\n-            }\n-    \t}\n     }\n     return false;\n   }",
      "parent_sha": "0e850c1862fbece1fbd7e38ae14b2e7b5416cadd"
    }
  },
  {
    "oid": "977924f613cbab83d7573e492f9716625afb1baf",
    "message": "fixed error in multiplewhitespacerule for LO",
    "date": "2017-09-06T11:02:34Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/977924f613cbab83d7573e492f9716625afb1baf",
    "details": {
      "sha": "2ca301b9eccd7ae07bdf658a7e4596b336f35ab6",
      "filename": "languagetool-core/src/main/java/org/languagetool/rules/MultipleWhitespaceRule.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/977924f613cbab83d7573e492f9716625afb1baf/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2FMultipleWhitespaceRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/977924f613cbab83d7573e492f9716625afb1baf/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2FMultipleWhitespaceRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2FMultipleWhitespaceRule.java?ref=977924f613cbab83d7573e492f9716625afb1baf",
      "patch": "@@ -71,12 +71,13 @@ public RuleMatch[] match(AnalyzedSentence sentence) {\n           StringTools.isNonBreakingWhitespace(tokens[i].getToken())) && prevWhite && !tokenIsTab && !prevTokenIsLinebreak && !isLineBreakContinuation) {\n         int pos = tokens[i -1].getStartPos();\n         while (i < tokens.length && (tokens[i].isWhitespace() ||\n-            StringTools.isNonBreakingWhitespace(tokens[i].getToken()))) {\n+            StringTools.isNonBreakingWhitespace(tokens[i].getToken())) \n+        \t\t&& !tokens[i].isLinebreak()) {    // preserve LF because LO/OO can't handle grammar errors including LF\n           prevLen += tokens[i].getToken().length();\n           i++;\n         }\n         String message = messages.getString(\"whitespace_repetition\");\n-        if (prevLen > 0) {\n+        if (prevLen > 1) {\n           if (prevPos >= 2 && sentence.getText().substring(prevPos-2, pos + prevLen).equals(\"-- \\n\")) {\n             // no match for typical email signature delimiter\n             continue;",
      "parent_sha": "f74f1a4c6437299156483caf0c8f7f4426319865"
    }
  },
  {
    "oid": "39902b65889ff3173f400d2f99e5b4f05a1cd81b",
    "message": "new option to enable only given rules",
    "date": "2006-07-22T19:28:16Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/39902b65889ff3173f400d2f99e5b4f05a1cd81b",
    "details": {
      "sha": "e7b71e92b7b8868993a347c55d65d0728b838edd",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/Main.java",
      "status": "modified",
      "additions": 28,
      "deletions": 5,
      "changes": 33,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/39902b65889ff3173f400d2f99e5b4f05a1cd81b/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2FMain.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/39902b65889ff3173f400d2f99e5b4f05a1cd81b/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2FMain.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2FMain.java?ref=39902b65889ff3173f400d2f99e5b4f05a1cd81b",
      "patch": "@@ -21,15 +21,19 @@\n import java.io.File;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Set;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n import javax.xml.parsers.ParserConfigurationException;\n \n import org.xml.sax.SAXException;\n \n+import de.danielnaber.languagetool.rules.Rule;\n import de.danielnaber.languagetool.rules.RuleMatch;\n import de.danielnaber.languagetool.tools.StringTools;\n \n@@ -47,18 +51,29 @@ class Main {\n \n   Main(boolean verbose, Language language, Language motherTongue) throws IOException, \n       ParserConfigurationException, SAXException {\n-    this(verbose, language, motherTongue, new String[0]);\n+    this(verbose, language, motherTongue, new String[0], new String[0]);\n   }\n   \n-  Main(boolean verbose, Language language, Language motherTongue, String[] disabledRules) throws IOException, \n+  Main(boolean verbose, Language language, Language motherTongue, String[] disabledRules,\n+      String[] enabledRules) throws IOException, \n       SAXException, ParserConfigurationException {\n     this.verbose = verbose;\n     lt = new JLanguageTool(language, motherTongue);\n     lt.activateDefaultPatternRules();\n     lt.activateDefaultFalseFriendRules();\n+    // disable rules that are disabled explicitly:\n     for (int i = 0; i < disabledRules.length; i++) {\n       lt.disableRule(disabledRules[i]);\n     }\n+    // disable all rules except those enabled explictly, if any:\n+    if (enabledRules.length > 0) {\n+      Set<String> enabledRuleIDs = new HashSet<String>(Arrays.asList(enabledRules));\n+      for (Rule rule : lt.getAllRules()) {\n+        if (!enabledRuleIDs.contains(rule.getId())) {\n+          lt.disableRule(rule.getId());\n+        }\n+      }\n+    }\n   }\n   \n   JLanguageTool getJLanguageTool() {\n@@ -172,7 +187,7 @@ private String getContext(int fromPos, int toPos, String fileContents) {\n   private static void exitWithUsageMessage() {\n     System.out.println(\"Usage: java de.danielnaber.languagetool.Main \" +\n             \"[-r|--recursive] [-v|--verbose] [-l|--language LANG] [-m|--mothertongue LANG] [-d|--disable RULES] \" +\n-            \"[-e|--encoding] <file>\");\n+            \"[-e|--enable RULES] [-c|--encoding] <file>\");\n     System.exit(1);\n   }\n \n@@ -190,6 +205,7 @@ public static void main(String[] args) throws IOException, ParserConfigurationEx\n     String encoding = null;\n     String filename = null;\n     String[] disabledRules = new String[0];\n+    String[] enabledRules = new String[0];\n     for (int i = 0; i < args.length; i++) {\n       if (args[i].equals(\"-h\") || args[i].equals(\"-help\") || args[i].equals(\"--help\")) {\n         exitWithUsageMessage();\n@@ -198,13 +214,20 @@ public static void main(String[] args) throws IOException, ParserConfigurationEx\n       } else if (args[i].equals(\"-r\") || args[i].equals(\"--recursive\")) {\n         recursive = true;\n       } else if (args[i].equals(\"-d\") || args[i].equals(\"--disable\")) {\n+        if (enabledRules.length > 0)\n+          throw new IllegalArgumentException(\"You cannot specifiy both enabled and disabled rules\");\n         String rules = args[++i];\n         disabledRules = rules.split(\",\");\n+      } else if (args[i].equals(\"-e\") || args[i].equals(\"--enable\")) {\n+        if (disabledRules.length > 0)\n+          throw new IllegalArgumentException(\"You cannot specifiy both enabled and disabled rules\");\n+        String rules = args[++i];\n+        enabledRules = rules.split(\",\");\n       } else if (args[i].equals(\"-l\") || args[i].equals(\"--language\")) {\n         language = getLanguageOrExit(args[++i]);\n       } else if (args[i].equals(\"-m\") || args[i].equals(\"--mothertongue\")) {\n         motherTongue = getLanguageOrExit(args[++i]);\n-      } else if (args[i].equals(\"-e\") || args[i].equals(\"--encoding\")) {\n+      } else if (args[i].equals(\"-c\") || args[i].equals(\"--encoding\")) {\n         encoding = args[++i];\n       } else {\n         filename = args[i];\n@@ -217,7 +240,7 @@ public static void main(String[] args) throws IOException, ParserConfigurationEx\n       System.err.println(\"No language specified, using English\");\n       language = Language.ENGLISH;\n     }\n-    Main prg = new Main(verbose, language, motherTongue, disabledRules);\n+    Main prg = new Main(verbose, language, motherTongue, disabledRules, enabledRules);\n     if (recursive) {\n       prg.runRecursive(filename, encoding);\n     } else {",
      "parent_sha": "71d6d97061d67506bad8eec0f13234125c205c1c"
    }
  },
  {
    "oid": "bf72429c0198e726330ee81b3cbfd4b1fea6281c",
    "message": "[ca] update rule priorities",
    "date": "2020-06-29T11:37:57Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/bf72429c0198e726330ee81b3cbfd4b1fea6281c",
    "details": {
      "sha": "21d3ab2c8663171762cc54ea1d0ff6afe27cc7e5",
      "filename": "languagetool-language-modules/ca/src/main/java/org/languagetool/language/Catalan.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/bf72429c0198e726330ee81b3cbfd4b1fea6281c/languagetool-language-modules%2Fca%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Flanguage%2FCatalan.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/bf72429c0198e726330ee81b3cbfd4b1fea6281c/languagetool-language-modules%2Fca%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Flanguage%2FCatalan.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fca%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Flanguage%2FCatalan.java?ref=bf72429c0198e726330ee81b3cbfd4b1fea6281c",
      "patch": "@@ -149,9 +149,9 @@ protected int getPriorityForId(String id) {\n       case \"VENIR_NO_REFLEXIU\": return 5;\n       case \"REGIONAL_VERBS\": return -10;\n       case \"FALTA_COMA_FRASE_CONDICIONAL\": return -20;\n-      case \"SUBSTANTIUS_JUNTS\": return -25;\n       case \"MUNDAR\": return -50;\n       case \"MORFOLOGIK_RULE_CA_ES\": return -100;\n+      case \"SUBSTANTIUS_JUNTS\": return -150;\n       case \"FALTA_ELEMENT_ENTRE_VERBS\": return -200;\n       case \"NOMBRES_ROMANS\": return -400;\n       case \"UPPERCASE_SENTENCE_START\": return -500;",
      "parent_sha": "87097555be04517d92fca700a335b8a4cdf06311"
    }
  },
  {
    "oid": "7e721df28422fd3e737494c69d7778e4a8c84dae",
    "message": "add BE to countries that speak Dutch",
    "date": "2009-05-12T13:03:33Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/7e721df28422fd3e737494c69d7778e4a8c84dae",
    "details": {
      "sha": "9b2512fb7921c7d2c7d5d2f0504c889fe77919b2",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/language/Dutch.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/7e721df28422fd3e737494c69d7778e4a8c84dae/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Flanguage%2FDutch.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/7e721df28422fd3e737494c69d7778e4a8c84dae/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Flanguage%2FDutch.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Flanguage%2FDutch.java?ref=7e721df28422fd3e737494c69d7778e4a8c84dae",
      "patch": "@@ -42,7 +42,7 @@ public class Dutch extends Language {\n   private Disambiguator disambiguator = new DutchRuleDisambiguator();\n   private Tokenizer wdTokenizer = new DutchWordTokenizer();\n \n-  private static final String[] COUNTRIES = { \"NL\" };\n+  private static final String[] COUNTRIES = { \"NL\", \"BE\" };\n \n   public final Locale getLocale() {\n     return new Locale(getShortName());",
      "parent_sha": "a8571980fbaa3336d634ff0a9c03370d70ede52d"
    }
  },
  {
    "oid": "8771d1a57b39384cd2cc8e30f53fa94bc46b7ad4",
    "message": "[uk] fix ArrayIndexOutOfBoundsException",
    "date": "2019-11-16T10:56:05Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/8771d1a57b39384cd2cc8e30f53fa94bc46b7ad4",
    "details": {
      "sha": "36ebd189e496d543d09443ef764aa389d8633509",
      "filename": "languagetool-language-modules/uk/src/main/java/org/languagetool/rules/uk/TokenAgreementAdjNounExceptionHelper.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/8771d1a57b39384cd2cc8e30f53fa94bc46b7ad4/languagetool-language-modules%2Fuk%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fuk%2FTokenAgreementAdjNounExceptionHelper.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/8771d1a57b39384cd2cc8e30f53fa94bc46b7ad4/languagetool-language-modules%2Fuk%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fuk%2FTokenAgreementAdjNounExceptionHelper.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fuk%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fuk%2FTokenAgreementAdjNounExceptionHelper.java?ref=8771d1a57b39384cd2cc8e30f53fa94bc46b7ad4",
      "patch": "@@ -443,7 +443,7 @@ && hasOverlapIgnoreGender(InflectionHelper.getAdjInflections(tokens[i-3].getRead\n     if( i < tokens.length-1 \n         && LemmaHelper.hasLemma(tokens[i], Arrays.asList(\"\u043f\u0430\u0440\u0430\", \"\u043d\u0438\u0437\u043a\u0430\", \"\u0440\u044f\u0434\", \"\u043a\u0443\u043f\u0430\", \"\u0431\u0456\u043b\u044c\u0448\u0456\u0441\u0442\u044c\", \"\u0434\u0435\u0441\u044f\u0442\u043a\u0430\", \"\u0441\u043e\u0442\u043d\u044f\", \"\u0442\u0438\u0441\u044f\u0447\u0430\", \"\u043c\u0456\u043b\u044c\u0439\u043e\u043d\"))\n         && (PosTagHelper.hasPosTag(tokens[i+1], \"noun.*?:p:v_rod.*\")\n-          || (i < tokens.length-1\n+          || (i < tokens.length-2\n             && PosTagHelper.hasPosTag(tokens[i+1], \"adj:p:v_rod.*\")\n             && PosTagHelper.hasPosTag(tokens[i+2], \"noun.*?:p:v_rod.*\")) ) ) {\n       logException();",
      "parent_sha": "ac12479957af7236074fd4f5469909360479239a"
    }
  },
  {
    "oid": "114733a81c15efddc17b6d44b4a34c028d18cb9b",
    "message": "[ru] fix GitHub issue #526  for Russian",
    "date": "2016-09-02T21:45:33Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/114733a81c15efddc17b6d44b4a34c028d18cb9b",
    "details": {
      "sha": "770c2bb1f9861c7dd6996af807d11835e53c7f92",
      "filename": "languagetool-language-modules/ru/src/main/java/org/languagetool/tagging/ru/RussianTagger.java",
      "status": "modified",
      "additions": 35,
      "deletions": 1,
      "changes": 36,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/114733a81c15efddc17b6d44b4a34c028d18cb9b/languagetool-language-modules%2Fru%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Ftagging%2Fru%2FRussianTagger.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/114733a81c15efddc17b6d44b4a34c028d18cb9b/languagetool-language-modules%2Fru%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Ftagging%2Fru%2FRussianTagger.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fru%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Ftagging%2Fru%2FRussianTagger.java?ref=114733a81c15efddc17b6d44b4a34c028d18cb9b",
      "patch": "@@ -18,10 +18,20 @@\n  */\n package org.languagetool.tagging.ru;\n \n+import java.io.IOException;\n+import java.util.ArrayList;\n import java.util.Locale;\n+import java.util.List;\n+\n+import org.languagetool.AnalyzedToken;\n+import org.languagetool.AnalyzedTokenReadings;\n \n import org.languagetool.tagging.BaseTagger;\n \n+import org.languagetool.tools.StringTools;\n+\n+\n+\n /**  Part-of-speech tagger.\n  * Russian dictionary originally developed by www.aot.ru and licensed under LGPL.\n  * See readme.txt for details, the POS tagset is described in tagset.txt\n@@ -36,4 +46,28 @@ public String getManualAdditionsFileName() {\n   public RussianTagger() {\n     super(\"/ru/russian.dict\", new Locale(\"ru\"));\n   }\n-}\n+\n+\n+\n+\n+   @Override\n+  public List<AnalyzedTokenReadings> tag(List<String> sentenceTokens)\n+      throws IOException {\n+    List<AnalyzedTokenReadings> tokenReadings = new ArrayList<>();\n+    int pos = 0;\n+    for (String word : sentenceTokens) {\n+        if (word.length() > 1) {\n+          word = word.replace(\"\u00f3\", \"\u043e\");\n+          word = word.replace(\"\u00e1\", \"\u0430\");\n+          word = word.replace(\"\u00e9\", \"\u0435\");\n+          word = word.replace(\"\u00fd\", \"\u0443\");\n+        }\n+      List<AnalyzedToken> l = getAnalyzedTokens(word);\n+      tokenReadings.add(new AnalyzedTokenReadings(l, pos));\n+      pos += word.length();\n+    }\n+    return tokenReadings;\n+  }\n+\n+\n+}\n\\ No newline at end of file",
      "parent_sha": "82d1920d791543f6fc7b71a50cd521670b343621"
    }
  },
  {
    "oid": "3b64f1706649ef585d767033367a7994c1656762",
    "message": "fix wrong warning for \"---\"",
    "date": "2005-11-20T00:48:34Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/3b64f1706649ef585d767033367a7994c1656762",
    "details": {
      "sha": "10490e0e341fc22cc708366f05132b4253b0698a",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/rules/de/DashRule.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/3b64f1706649ef585d767033367a7994c1656762/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fde%2FDashRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/3b64f1706649ef585d767033367a7994c1656762/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fde%2FDashRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fde%2FDashRule.java?ref=3b64f1706649ef585d767033367a7994c1656762",
      "patch": "@@ -54,7 +54,7 @@ public RuleMatch[] match(AnalyzedSentence text) {\n         // ignore\n         continue;\n       } else {\n-        if (prevToken != null && !prevToken.equals(\"-\") && !prevToken.equals(\"--\") && prevToken.endsWith(\"-\")) {\n+        if (prevToken != null && !prevToken.equals(\"-\") && prevToken.indexOf(\"--\") == -1 && prevToken.endsWith(\"-\")) {\n           char firstChar = token.charAt(0);\n           if (Character.isUpperCase(firstChar)) {\n             String msg = \"M\u00f6glicherweise fehlt ein 'und' oder es wurde nach dem Wort \" +",
      "parent_sha": "fe4491eee86067fcd7832c13cdaf1c3d29b79810"
    }
  },
  {
    "oid": "cd048d47dbb00cfb1a243016ae4b2e5868c67e12",
    "message": "[de] avoid false alarm for \"Sie sind beide Mitglied im Verein.\"; tiny code simplification",
    "date": "2011-11-03T19:38:52Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/cd048d47dbb00cfb1a243016ae4b2e5868c67e12",
    "details": {
      "sha": "f51d6f24091131160d69355dded53c72be390afe",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/rules/de/AgreementRule.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/cd048d47dbb00cfb1a243016ae4b2e5868c67e12/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fde%2FAgreementRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/cd048d47dbb00cfb1a243016ae4b2e5868c67e12/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fde%2FAgreementRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2Fde%2FAgreementRule.java?ref=cd048d47dbb00cfb1a243016ae4b2e5868c67e12",
      "patch": "@@ -198,6 +198,8 @@ private boolean isRelevantPronoun(AnalyzedTokenReadings[] tokens, int pos) {\n       relevantPronoun = false;\n     else if (token.equalsIgnoreCase(\"er\") || token.equalsIgnoreCase(\"sie\") || token.equalsIgnoreCase(\"es\"))\n       relevantPronoun = false;\n+    else if (token.equalsIgnoreCase(\"ihm\"))\n+      relevantPronoun = false;\n     else if (token.equalsIgnoreCase(\"ich\"))\n       relevantPronoun = false;\n     else if (token.equalsIgnoreCase(\"du\"))\n@@ -214,8 +216,12 @@ else if (token.equalsIgnoreCase(\"aller\"))\n       relevantPronoun = false;\n     else if (token.equalsIgnoreCase(\"man\"))\n       relevantPronoun = false;\n+    else if (token.equalsIgnoreCase(\"beide\"))\n+      relevantPronoun = false;\n     else if (token.equalsIgnoreCase(\"beiden\"))\n       relevantPronoun = false;\n+    else if (token.equalsIgnoreCase(\"beider\"))\n+      relevantPronoun = false;\n     else if (token.equalsIgnoreCase(\"wessen\"))\n       relevantPronoun = false;\n     else if (token.equalsIgnoreCase(\"a\"))\n@@ -290,10 +296,6 @@ private boolean couldBeRelativeClause(AnalyzedTokenReadings[] tokens, int pos) {\n \n   private RuleMatch checkDetNounAgreement(final AnalyzedGermanTokenReadings token1,\n       final AnalyzedGermanTokenReadings token2) {\n-    // avoid false alarm: \"Gebt ihm Macht.\"\n-    if (token1.getToken().equalsIgnoreCase(\"ihm\")) {\n-      return null;\n-    }\n     RuleMatch ruleMatch = null;\n     final Set<String> set1 = getAgreementCategories(token1);\n     if (set1 == null) {",
      "parent_sha": "95302a20c26826b6b93b19a967727bcd60996422"
    }
  },
  {
    "oid": "7f69cc2f7f576812269175408302015d29f248b7",
    "message": "[fr] AGREEMENT_POSTPONED_ADJ fix tags",
    "date": "2021-03-18T14:08:25Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/7f69cc2f7f576812269175408302015d29f248b7",
    "details": {
      "sha": "c2d9bdf8f6ddc6ea4ed45c82ce5c6e97f255d7a0",
      "filename": "languagetool-language-modules/fr/src/main/java/org/languagetool/rules/fr/PostponedAdjectiveConcordanceFilter.java",
      "status": "modified",
      "additions": 18,
      "deletions": 11,
      "changes": 29,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/7f69cc2f7f576812269175408302015d29f248b7/languagetool-language-modules%2Ffr%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Ffr%2FPostponedAdjectiveConcordanceFilter.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/7f69cc2f7f576812269175408302015d29f248b7/languagetool-language-modules%2Ffr%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Ffr%2FPostponedAdjectiveConcordanceFilter.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Ffr%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Ffr%2FPostponedAdjectiveConcordanceFilter.java?ref=7f69cc2f7f576812269175408302015d29f248b7",
      "patch": "@@ -75,14 +75,14 @@ public class PostponedAdjectiveConcordanceFilter extends RuleFilter {\n   private static final Pattern DET_FP = Pattern.compile(\"(P\\\\+)?D f p\");\n   private static final Pattern DET_CP = Pattern.compile(\"(P\\\\+)?D e p\"); // NEW for French!!\n \n-  private static final Pattern GN_MS = Pattern.compile(\"N [me](s|sp)|J [me](s|sp)|V ppa m s|(P\\\\+)?D m s\");\n-  private static final Pattern GN_FS = Pattern.compile(\"N [fe](s|sp)|J [fe](s|sp)|V ppa f s|(P\\\\+)?D f s\");\n-  private static final Pattern GN_MP = Pattern.compile(\"N [me](p|sp)|J [me](p|sp)|V ppa m p|(P\\\\+)?D m p\");\n-  private static final Pattern GN_FP = Pattern.compile(\"N [fe](p|sp)|J [fe](p|sp)|V ppa f p|(P\\\\+)?D f p\");\n-  private static final Pattern GN_CP = Pattern.compile(\"N [fme](p|sp)|J [fme](p|sp)|(P\\\\+)?D e p\");\n-  private static final Pattern GN_CS = Pattern.compile(\"N [fme](s|sp)|J [fme](s|sp)|(P\\\\+)?D e s\");\n+  private static final Pattern GN_MS = Pattern.compile(\"N [me] (s|sp)|J [me] (s|sp)|V ppa m s|(P\\\\+)?D m s\");\n+  private static final Pattern GN_FS = Pattern.compile(\"N [fe] (s|sp)|J [fe] (s|sp)|V ppa f s|(P\\\\+)?D f s\");\n+  private static final Pattern GN_MP = Pattern.compile(\"N [me] (p|sp)|J [me] (p|sp)|V ppa m p|(P\\\\+)?D m p\");\n+  private static final Pattern GN_FP = Pattern.compile(\"N [fe] (p|sp)|J [fe] (p|sp)|V ppa f p|(P\\\\+)?D f p\");\n+  private static final Pattern GN_CP = Pattern.compile(\"N [fme] (p|sp)|J [fme] (p|sp)|(P\\\\+)?D e p\");\n+  private static final Pattern GN_CS = Pattern.compile(\"N [fme] (s|sp)|J [fme] (s|sp)|(P\\\\+)?D e s\");\n   \n-  //private static final Pattern NOM_ADJ = Pattern.compile(\"N *|A.*|V.P.*\");\n+  //private static final Pattern NOM_ADJ = Pattern.compile(\"N *|J .*|V ppa .*\");\n \n   private static final Pattern ADJECTIU = Pattern.compile(\"J .*|V ppa .*|PX.*\");\n   private static final Pattern ADJECTIU_MS = Pattern.compile(\"J [me] (s|sp)|V ppa m s\");\n@@ -91,10 +91,7 @@ public class PostponedAdjectiveConcordanceFilter extends RuleFilter {\n   private static final Pattern ADJECTIU_FP = Pattern.compile(\"J [fe] (p|sp)|V ppa f p\");\n   private static final Pattern ADJECTIU_CP = Pattern.compile(\"J e (p|sp)\");\n   private static final Pattern ADJECTIU_CS = Pattern.compile(\"J e (s|sp)\");\n-  // private static final Pattern ADJECTIU_M =\n-  // Pattern.compile(\"J [MC].*|V.P...M.?|PX.M.*\");\n-  // private static final Pattern ADJECTIU_F =\n-  // Pattern.compile(\"J [FC].*|V.P...F.?|PX.F.*\");\n+\n   private static final Pattern ADJECTIU_S = Pattern.compile(\"J .* (s|sp)|V ppa . s\");\n   private static final Pattern ADJECTIU_P = Pattern.compile(\"J .* (p|sp)|V ppa . p\");\n   private static final Pattern ADVERBI = Pattern.compile(\"A\");\n@@ -223,6 +220,16 @@ && matchPostagRegexp(tokens[i - j - 1], DET))) {\n           canBeFS = true;\n         }\n       }\n+      if (matchPostagRegexp(tokens[i - j], DET_CP)) {\n+        if (matchPostagRegexp(tokens[i - j + 1], NOM_MP)) {\n+          cDMS[level]++;\n+          canBeMS = true;\n+        }\n+        if (matchPostagRegexp(tokens[i - j + 1], NOM_FP)) {\n+          cDFS[level]++;\n+          canBeFS = true;\n+        }\n+      }\n       if (!matchPostagRegexp(tokens[i - j], ADVERBI)) {\n         if (matchPostagRegexp(tokens[i - j], DET_MS)) {\n           cDMS[level]++;",
      "parent_sha": "b0811885790e990cada75630b3a9af561297832e"
    }
  },
  {
    "oid": "2b573d935f1dc463542624022e2575aeab968d75",
    "message": "slightly extend logging",
    "date": "2020-10-04T13:14:56Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/2b573d935f1dc463542624022e2575aeab968d75",
    "details": {
      "sha": "8d96397a75b6b9687044223f9bd5aefab5f29130",
      "filename": "languagetool-server/src/main/java/org/languagetool/server/TextChecker.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/2b573d935f1dc463542624022e2575aeab968d75/languagetool-server%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fserver%2FTextChecker.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/2b573d935f1dc463542624022e2575aeab968d75/languagetool-server%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fserver%2FTextChecker.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-server%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fserver%2FTextChecker.java?ref=2b573d935f1dc463542624022e2575aeab968d75",
      "patch": "@@ -694,7 +694,7 @@ DetectedLanguage detectLanguageOfString(String text, String fallbackLanguage, Li\n     }\n     long t2 = System.nanoTime();\n     float runTime = (t2-t1)/1000.0f/1000.0f;\n-    System.out.printf(Locale.ENGLISH, \"detected \" + detected + \" using \" + mode + \" in %.2fms\\n\", runTime);\n+    System.out.printf(Locale.ENGLISH, \"detected \" + detected + \" using \" + mode + \" in %.2fms for %d chars\\n\", runTime, text.length());\n     Language lang;\n     if (detected == null) {\n       lang = Languages.getLanguageForShortCode(fallbackLanguage != null ? fallbackLanguage : \"en\");",
      "parent_sha": "61256b5fcf2f7848569fe112e5f35f41e66fe0d5"
    }
  },
  {
    "oid": "fbc4b37c3acc842a2fa9ad6e66a05e7d2d9471f3",
    "message": "bugfix: use locale for toLowerCase() - code didn't work with e.g. Turkish locale",
    "date": "2014-10-21T11:39:47Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/fbc4b37c3acc842a2fa9ad6e66a05e7d2d9471f3",
    "details": {
      "sha": "ba6892fc27c28bf927612dfb2d95dd9181462f05",
      "filename": "languagetool-core/src/main/java/org/languagetool/rules/ITSIssueType.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/fbc4b37c3acc842a2fa9ad6e66a05e7d2d9471f3/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2FITSIssueType.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/fbc4b37c3acc842a2fa9ad6e66a05e7d2d9471f3/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2FITSIssueType.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2FITSIssueType.java?ref=fbc4b37c3acc842a2fa9ad6e66a05e7d2d9471f3",
      "patch": "@@ -19,6 +19,7 @@\n package org.languagetool.rules;\n \n import java.util.Arrays;\n+import java.util.Locale;\n \n /**\n  * Some constants for Localization Quality Issue Type from the\n@@ -61,7 +62,7 @@ public static ITSIssueType getIssueType(String name) {\n    */\n   @Override\n   public String toString() {\n-    return name.toLowerCase();\n+    return name.toLowerCase(Locale.ENGLISH);\n   }\n \n }",
      "parent_sha": "254f0b448df8d88c5c498fcf4133d5a2dd91b7de"
    }
  },
  {
    "oid": "a4624dd1a834acb8026558894e0d3f859be34650",
    "message": "create artificial ID so title becomes unique per sentence, which helps us compare rule matches between LT versions (e.g. in nightly tests)",
    "date": "2019-11-25T14:34:41Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/a4624dd1a834acb8026558894e0d3f859be34650",
    "details": {
      "sha": "cbb5a52d4dd02a1512f6eba338c0c1d3708094f5",
      "filename": "languagetool-wikipedia/src/main/java/org/languagetool/dev/dumpcheck/WikipediaSentenceSource.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/a4624dd1a834acb8026558894e0d3f859be34650/languagetool-wikipedia%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fdev%2Fdumpcheck%2FWikipediaSentenceSource.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/a4624dd1a834acb8026558894e0d3f859be34650/languagetool-wikipedia%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fdev%2Fdumpcheck%2FWikipediaSentenceSource.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-wikipedia%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fdev%2Fdumpcheck%2FWikipediaSentenceSource.java?ref=a4624dd1a834acb8026558894e0d3f859be34650",
      "patch": "@@ -155,7 +155,11 @@ private void handleTextElement(String namespace, String title, int articleCount)\n       String textToCheck = textFilter.filter(sb.toString()).getPlainText();\n       for (String sentence : sentenceTokenizer.tokenize(textToCheck)) {\n         if (acceptSentence(sentence)) {\n-          sentences.add(new WikipediaSentence(sentence, title, articleCount));\n+          // Create an artificial ID - as we treat each sentence as a single document\n+          // in e.g. the nightly checks, this helps with detection of whether a match\n+          // is new or a duplicate:\n+          String titleWithId = title + \"/\" + sentence.hashCode();\n+          sentences.add(new WikipediaSentence(sentence, titleWithId, articleCount));\n         }\n       }\n     } catch (Exception e) {",
      "parent_sha": "11326270eed6dc5db76e96ccd20d51f22fafb9a8"
    }
  },
  {
    "oid": "63c81e7e7c3d8a854137bdd1aad636461a320824",
    "message": "[de] 'isses' -> 'ist es'",
    "date": "2022-03-31T17:43:11Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/63c81e7e7c3d8a854137bdd1aad636461a320824",
    "details": {
      "sha": "26bb622f69da530f6573f16c8914b28d03c4d86c",
      "filename": "languagetool-language-modules/de/src/main/java/org/languagetool/rules/de/GermanSpellerRule.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/63c81e7e7c3d8a854137bdd1aad636461a320824/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FGermanSpellerRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/63c81e7e7c3d8a854137bdd1aad636461a320824/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FGermanSpellerRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-language-modules%2Fde%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2Fde%2FGermanSpellerRule.java?ref=63c81e7e7c3d8a854137bdd1aad636461a320824",
      "patch": "@@ -100,7 +100,7 @@ public class GermanSpellerRule extends CompoundAwareHunspellRule {\n     put(\"wiederrum\", \"wiederum\");\n     put(\"ne\", w -> Arrays.asList(\"'ne\", \"eine\"));\n     put(\"ner\", \"einer\");\n-    put(\"isses\", w -> Arrays.asList(\"isses\", \"Risses\"));\n+    put(\"isses\", w -> Arrays.asList(\"ist es\", \"Risses\"));\n     put(\"Vieleicht\", \"Vielleicht\");\n     put(\"inbetracht\", \"in Betracht\");\n     put(\"\u00fcberwhatsapp\", \"\u00fcber WhatsApp\");",
      "parent_sha": "d088f7bd1fa3a9fd0e0e88bf7035bf7e2589a7e8"
    }
  },
  {
    "oid": "65533bdfaca4b30f6aad7644d3052de9371e17c8",
    "message": "sync with premium",
    "date": "2021-07-29T15:52:30Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/65533bdfaca4b30f6aad7644d3052de9371e17c8",
    "details": {
      "sha": "92569040e0ca928c3b2cb064da21e8f5f7789280",
      "filename": "languagetool-core/src/test/java/org/languagetool/rules/patterns/PatternRuleLoaderTest.java",
      "status": "modified",
      "additions": 51,
      "deletions": 4,
      "changes": 55,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/65533bdfaca4b30f6aad7644d3052de9371e17c8/languagetool-core%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpatterns%2FPatternRuleLoaderTest.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/65533bdfaca4b30f6aad7644d3052de9371e17c8/languagetool-core%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpatterns%2FPatternRuleLoaderTest.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-core%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Frules%2Fpatterns%2FPatternRuleLoaderTest.java?ref=65533bdfaca4b30f6aad7644d3052de9371e17c8",
      "patch": "@@ -18,17 +18,24 @@\n  */\n package org.languagetool.rules.patterns;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n import org.languagetool.JLanguageTool;\n import org.languagetool.chunking.ChunkTag;\n import org.languagetool.rules.ITSIssueType;\n import org.languagetool.rules.IncorrectExample;\n import org.languagetool.rules.Rule;\n \n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n+import javax.crypto.Cipher;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.ByteArrayInputStream;\n+import java.io.FileWriter;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.Key;\n+import java.util.*;\n \n import static org.junit.Assert.*;\n \n@@ -121,4 +128,44 @@ private List<Rule> getRulesById(String id, List<AbstractPatternRule> rules) {\n     return result;\n   }\n \n+  @Test\n+  @Ignore\n+  public void testEncryptDecrypt() throws Exception {\n+    String encrypted = encrypt();\n+    System.out.println(\"encrypted: \" + decrypt(encrypted));\n+    String decrypted = decrypt(encrypted);\n+    System.out.println(\"decrypted: \" + decrypted);\n+    PatternRuleLoader loader = new PatternRuleLoader();\n+    List<AbstractPatternRule> rules = loader.getRules(new ByteArrayInputStream(decrypted.getBytes(StandardCharsets.UTF_8)), \"<unknown>\");\n+    System.out.println(\"Loaded \" + rules.size() + \" rules\");\n+  }\n+\n+  private String encrypt() throws Exception {\n+    Key key = generateKey();\n+    Cipher c = Cipher.getInstance(\"AES\");\n+    c.init(Cipher.ENCRYPT_MODE, key);\n+    List<String> lines = Files.readAllLines(Paths.get(\"grammar-premium.xml\"));\n+    String val = String.join(\"\\n\", lines);\n+    //String val = \"my-secret-data\";\n+    byte[] encVal = c.doFinal(val.getBytes(StandardCharsets.UTF_8));\n+    String encoded = Base64.getEncoder().encodeToString(encVal);\n+    try (FileWriter fw = new FileWriter(\"/tmp/encoded\")) {\n+      fw.write(encoded);\n+    }\n+    return encoded;\n+  }\n+\n+  private String decrypt(String encrypted) throws Exception {\n+    Key key = generateKey();\n+    Cipher c = Cipher.getInstance(\"AES\");\n+    c.init(Cipher.DECRYPT_MODE, key);\n+    byte[] decodedValue = Base64.getDecoder().decode(encrypted);\n+    byte[] decValue = c.doFinal(decodedValue);\n+    return new String(decValue);\n+  }\n+\n+  private static Key generateKey() {\n+    return new SecretKeySpec(\"mykey...........\".getBytes(StandardCharsets.UTF_8), \"AES\");\n+  }\n+  \n }",
      "parent_sha": "5e61e54e0fede0f1d5bdfae840cf4856654148cd"
    }
  },
  {
    "oid": "cbd63f64828b711925ced2dbaf08b1bcd5722f59",
    "message": "fix rule",
    "date": "2005-10-18T21:24:33Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/cbd63f64828b711925ced2dbaf08b1bcd5722f59",
    "details": {
      "sha": "e8c8046346f0cf043982c3814bd86718a01ebd01",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/rules/DoublePunctuationRule.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/cbd63f64828b711925ced2dbaf08b1bcd5722f59/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2FDoublePunctuationRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/cbd63f64828b711925ced2dbaf08b1bcd5722f59/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2FDoublePunctuationRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Frules%2FDoublePunctuationRule.java?ref=cbd63f64828b711925ced2dbaf08b1bcd5722f59",
      "patch": "@@ -60,12 +60,17 @@ public RuleMatch[] match(AnalyzedSentence text) {\n         commaCount++;\n         dotCount = 0;\n         matchToken = tokens[i];\n-      } else if (dotCount == 2 || commaCount == 2) {\n+      }\n+      if (dotCount == 2 || commaCount == 2) {\n         String msg = \"Two consecutive dots or commas.\";\n         RuleMatch ruleMatch = new RuleMatch(this, matchToken.getStartPos(), matchToken.getStartPos()+1, msg);\n         ruleMatches.add(ruleMatch);\n         dotCount = 0;\n         commaCount = 0;\n+      }\n+      if (!token.trim().equals(\".\") && !token.trim().equals(\",\")) {\n+        dotCount = 0;\n+        commaCount = 0;\n       }        \n     }\n     return toRuleMatchArray(ruleMatches);",
      "parent_sha": "84fba8e27809ef663c735d1f4d1738823fcd96b4"
    }
  },
  {
    "oid": "3bb3e23485b09777d0cbbfc015666b898cb1efd0",
    "message": "implement \"Ignore All\"",
    "date": "2005-12-04T01:14:49Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/3bb3e23485b09777d0cbbfc015666b898cb1efd0",
    "details": {
      "sha": "979cf241b94278c5fab3159d075f6051610bd47d",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/openoffice/OOoDialog.java",
      "status": "modified",
      "additions": 21,
      "deletions": 1,
      "changes": 22,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/3bb3e23485b09777d0cbbfc015666b898cb1efd0/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Fopenoffice%2FOOoDialog.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/3bb3e23485b09777d0cbbfc015666b898cb1efd0/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Fopenoffice%2FOOoDialog.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2Fopenoffice%2FOOoDialog.java?ref=3bb3e23485b09777d0cbbfc015666b898cb1efd0",
      "patch": "@@ -25,6 +25,7 @@\n import java.awt.event.ActionEvent;\n import java.awt.event.ActionListener;\n import java.io.IOException;\n+import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n \n@@ -100,6 +101,7 @@ public class OOoDialog implements ActionListener {\n   }\n   \n   void show() {\n+    // TODO: escape = close dialog\n     if (ruleMatches.size() == 0) {\n       JOptionPane.showMessageDialog(null, COMPLETE_TEXT);\n       return;\n@@ -299,13 +301,31 @@ private void close() {\n     dialog.setVisible(false);       // FIXME: does this really close the dialog?\n   }\n \n+  /**\n+   * Ignore all matches of the current rule for the rest of this document.\n+   */\n+  private void ignoreAll() {\n+    int i = 0;\n+    List filteredRuleMatches = new ArrayList();\n+    for (Iterator iter = ruleMatches.iterator(); iter.hasNext();) {\n+      RuleMatch ruleMatch = (RuleMatch) iter.next();\n+      if (i < currentRuleMatchPos)\n+        continue;\n+      if (!ruleMatch.getRule().getId().equals(currentRuleMatch.getRule().getId()))\n+        filteredRuleMatches.add(ruleMatch);\n+      i++;\n+    }\n+    ruleMatches = filteredRuleMatches;\n+  }\n+\n   public void actionPerformed(ActionEvent event) {\n     if (event.getActionCommand().equals(CHANGE_BUTTON)) {\n       changeText();\n     } else if (event.getActionCommand().equals(IGNORE_BUTTON)) {\n       gotoNextMatch();\n     } else if (event.getActionCommand().equals(IGNORE_ALL_BUTTON)) {\n-      JOptionPane.showMessageDialog(null, \"fixme: not yet implemented\");        //FIXME\n+      ignoreAll();\n+      gotoNextMatch();\n     } else if (event.getActionCommand().equals(OPTIONS_BUTTON)) {\n       ConfigurationDialog cfgDialog = new ConfigurationDialog();\n       cfgDialog.setDisabledRules(configuration.getDisabledRuleIds());",
      "parent_sha": "158ed8579c470a9f1ec46301180dc1d6fa9337e8"
    }
  },
  {
    "oid": "5fc9d6995d5e2695f1756bdc3a7543963e6ecb97",
    "message": "small test speedup (but still slow...)",
    "date": "2013-08-27T08:35:34Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/5fc9d6995d5e2695f1756bdc3a7543963e6ecb97",
    "details": {
      "sha": "d752248858b7e5d28b4bca0dfce697a2528f1c5a",
      "filename": "languagetool-wikipedia/src/test/java/org/languagetool/dev/wikipedia/SuggestionReplacerTest.java",
      "status": "modified",
      "additions": 14,
      "deletions": 15,
      "changes": 29,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/5fc9d6995d5e2695f1756bdc3a7543963e6ecb97/languagetool-wikipedia%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Fdev%2Fwikipedia%2FSuggestionReplacerTest.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/5fc9d6995d5e2695f1756bdc3a7543963e6ecb97/languagetool-wikipedia%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Fdev%2Fwikipedia%2FSuggestionReplacerTest.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-wikipedia%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Fdev%2Fwikipedia%2FSuggestionReplacerTest.java?ref=5fc9d6995d5e2695f1756bdc3a7543963e6ecb97",
      "patch": "@@ -37,8 +37,10 @@\n \n public class SuggestionReplacerTest extends TestCase {\n \n+  private final JLanguageTool langTool = getLanguageTool();\n+  private final JLanguageTool englishLangTool = getLanguageTool(new English());\n+\n   public void testApplySuggestionToOriginalText() throws Exception {\n-    JLanguageTool langTool = getLanguageTool();\n     SwebleWikipediaTextFilter filter = new SwebleWikipediaTextFilter();\n     applySuggestion(langTool, filter, \"Die CD ROM.\", \"Die <s>CD-ROM.</s>\");\n     applySuggestion(langTool, filter, \"Die [[verlinkte]] CD ROM.\", \"Die [[verlinkte]] <s>CD-ROM.</s>\");\n@@ -57,7 +59,6 @@ public void testApplySuggestionToOriginalText() throws Exception {\n   }\n \n   public void testNestedTemplates() throws Exception {\n-    JLanguageTool langTool = getLanguageTool();\n     SwebleWikipediaTextFilter filter = new SwebleWikipediaTextFilter();\n     String markup = \"{{FNBox|\\n\" +\n             \"  {{FNZ|1|1979 und 1984}}\\n\" +\n@@ -67,36 +68,31 @@ public void testNestedTemplates() throws Exception {\n   }\n \n   public void testReference1() throws Exception {\n-    JLanguageTool langTool = getLanguageTool();\n     SwebleWikipediaTextFilter filter = new SwebleWikipediaTextFilter();\n     String markup = \"Hier <ref name=isfdb>\\n\" +\n             \"Retrieved 2012-07-31.</ref> steht der Haus.\";\n     applySuggestion(langTool, filter, markup, markup.replace(\"steht der Haus.\", \"<s>steht der Haus.</s>\"));\n   }\n \n   public void testReference2() throws Exception {\n-    JLanguageTool langTool = getLanguageTool();\n     SwebleWikipediaTextFilter filter = new SwebleWikipediaTextFilter();\n     String markup = \"Hier <ref name=\\\"NPOVxxx\\\" /> steht der Haus.\";\n     applySuggestion(langTool, filter, markup, markup.replace(\"steht der Haus.\", \"steht <s>der Haus.</s>\"));\n   }\n \n   public void testErrorAtTextBeginning() throws Exception {\n-    JLanguageTool langTool = getLanguageTool(new English());\n     SwebleWikipediaTextFilter filter = new SwebleWikipediaTextFilter();\n     String markup = \"A hour ago\\n\";\n-    applySuggestion(langTool, filter, markup, markup.replace(\"A\", \"<s>An</s>\"));\n+    applySuggestion(englishLangTool, filter, markup, markup.replace(\"A\", \"<s>An</s>\"));\n   }\n \n   public void testErrorAtParagraphBeginning() throws Exception {\n-    JLanguageTool langTool = getLanguageTool(new English());\n     SwebleWikipediaTextFilter filter = new SwebleWikipediaTextFilter();\n     String markup = \"X\\n\\nA hour ago\\n\";\n-    applySuggestion(langTool, filter, markup, markup.replace(\"A\", \"<s>An</s>\"));\n+    applySuggestion(englishLangTool, filter, markup, markup.replace(\"A\", \"<s>An</s>\"));\n   }\n \n   public void testKnownBug() throws Exception {\n-    JLanguageTool langTool = getLanguageTool();\n     SwebleWikipediaTextFilter filter = new SwebleWikipediaTextFilter();\n     String markup = \"{{HdBG GKZ|9761000}}.\";\n     try {\n@@ -119,7 +115,6 @@ public void testComplexText() throws Exception {\n             \"}}\\n\" +\n             \"\\n\" +\n             \"'''Wikipedia''' [{{IPA|\u02ccv\u026aki\u02c8pe\u02d0dia}}] (auch: ''die Wikipedia'') ist ein am [[15. Januar|15.&nbsp;Januar]] [[2001]] gegr\u00fcndetes Projekt. Und und so.\\n\";\n-    JLanguageTool langTool = getLanguageTool();\n     SwebleWikipediaTextFilter filter = new SwebleWikipediaTextFilter();\n     applySuggestion(langTool, filter, markup, markup.replace(\"Und und so.\", \"<s>Und so.</s>\"));\n   }\n@@ -178,16 +173,20 @@ public void testCompleteText2() throws Exception {\n     }\n   }\n \n-  private JLanguageTool getLanguageTool() throws IOException {\n+  private JLanguageTool getLanguageTool() {\n     JLanguageTool langTool = getLanguageTool(new GermanyGerman());\n     langTool.disableRule(\"DE_CASE\");\n     return langTool;\n   }\n \n-  private JLanguageTool getLanguageTool(Language language) throws IOException {\n-    JLanguageTool langTool = new JLanguageTool(language);\n-    langTool.activateDefaultPatternRules();\n-    return langTool;\n+  private JLanguageTool getLanguageTool(Language language) {\n+    try {\n+      JLanguageTool langTool = new JLanguageTool(language);\n+      langTool.activateDefaultPatternRules();\n+      return langTool;\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n   }\n \n   private void applySuggestion(JLanguageTool langTool, SwebleWikipediaTextFilter filter, String text, String expected) throws IOException {",
      "parent_sha": "cf2a0c292d9447cbc9759027258d9c9263c42eb0"
    }
  },
  {
    "oid": "a97c086867e1969f9597028285795298ad3ea6d1",
    "message": "[core] add error rate calc after each rule check based on hole text size\n[core] add logging to see how error rate is growing in case of an error",
    "date": "2021-11-04T16:18:10Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/a97c086867e1969f9597028285795298ad3ea6d1",
    "details": {
      "sha": "09dcb80efe580027283f045da91c60cb050e7b78",
      "filename": "languagetool-core/src/main/java/org/languagetool/JLanguageTool.java",
      "status": "modified",
      "additions": 41,
      "deletions": 7,
      "changes": 48,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/a97c086867e1969f9597028285795298ad3ea6d1/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2FJLanguageTool.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/a97c086867e1969f9597028285795298ad3ea6d1/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2FJLanguageTool.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2FJLanguageTool.java?ref=a97c086867e1969f9597028285795298ad3ea6d1",
      "patch": "@@ -1274,11 +1274,18 @@ public List<RuleMatch> checkAnalyzedSentence(ParagraphHandling paraMode,\n    */\n   public List<RuleMatch> checkAnalyzedSentence(ParagraphHandling paraMode,\n                                                List<Rule> rules, AnalyzedSentence analyzedSentence, boolean checkRemoteRules) throws IOException {\n+    return checkAnalyzedSentence(paraMode, rules, analyzedSentence, checkRemoteRules, -1);\n+  }\n+\n+  private List<RuleMatch> checkAnalyzedSentence(ParagraphHandling paraMode, List<Rule> rules, AnalyzedSentence analyzedSentence, boolean checkRemoteRules, int wordCounter) throws IOException {\n     if (paraMode == ParagraphHandling.ONLYPARA) {\n       return Collections.emptyList();\n     }\n     List<RuleMatch> sentenceMatches = new ArrayList<>();\n-    for (Rule rule : rules) {\n+    List<String> errorRateLog = new ArrayList<>();\n+    float tmpErrorsPerWord = 0.0f;\n+    for (int i = 0, rulesSize = rules.size(); i < rulesSize; i++) {\n+      Rule rule = rules.get(i);\n       if (rule instanceof TextLevelRule || !checkRemoteRules && rule instanceof RemoteRule) {\n         continue;\n       }\n@@ -1287,6 +1294,24 @@ public List<RuleMatch> checkAnalyzedSentence(ParagraphHandling paraMode,\n       }\n       RuleMatch[] thisMatches = rule.match(analyzedSentence);\n       Collections.addAll(sentenceMatches, thisMatches);\n+      if (wordCounter > 0) {\n+        //check if the maxErrorsPerWordRate is already reached for the full text with this sentence and rule  \n+        float errorsPerWord = sentenceMatches.size() / (float) wordCounter;\n+        if (tmpErrorsPerWord < errorsPerWord) {\n+          errorRateLog.add(\"With rule: \" + rule.getFullId() + \" \" + (i+1) + \"/\" + rulesSize + \" the sentence error rate increased by: \" + (errorsPerWord - tmpErrorsPerWord) + \" from: \" + tmpErrorsPerWord + \" to total: \" + errorsPerWord);\n+          //logger.info(\"With rule: \" + rule.getFullId() + \" the sentence error rate increased by: \" + (errorsPerWord - tmpErrorsPerWord) + \" from: \" + tmpErrorsPerWord + \" to total: \" + errorsPerWord);\n+          tmpErrorsPerWord = errorsPerWord;\n+        }\n+        if (maxErrorsPerWordRate > 0 && errorsPerWord > maxErrorsPerWordRate && wordCounter > 25) {\n+          errorRateLog.forEach(logger::error);\n+          logger.error(\"ErrorRateTooHigh is reached by a single sentence after rule: \" + rule.getFullId() +\n+            \" the hole text contains \" + wordCounter + \" words \" +\n+            \" this sentence has \" + sentenceMatches.size() + \" matches\");\n+          throw new ErrorRateTooHighException(\"ErrorRateTooHigh is reached by a single sentence after rule: \" + rule.getFullId() +\n+            \" the hole text contains \" + wordCounter + \" words\" +\n+            \" this sentence has \" + sentenceMatches.size() + \" matches\");\n+        }\n+      }\n     }\n     if (sentenceMatches.isEmpty()) {\n       return sentenceMatches;\n@@ -1819,8 +1844,12 @@ private List<RuleMatch> getTextLevelRuleMatches() throws IOException {\n     private CheckResults getOtherRuleMatches() {\n       List<RuleMatch> ruleMatches = new ArrayList<>();\n       List<Range> ignoreRanges = new ArrayList<>();\n+      int textWordCounter = sentences.stream().map(sentenceData -> sentenceData.wordCount).reduce(0, Integer::sum);\n       int wordCounter = 0;\n-      for (SentenceData sentence : sentences) {\n+      float tmpErrorsPerWord = 0.0f;\n+      List<String> errorRateLog = new ArrayList<>();\n+      for (int i = 0, sentencesSize = sentences.size(); i < sentencesSize; i++) {\n+        SentenceData sentence = sentences.get(i);\n         wordCounter += sentence.wordCount;\n         try {\n           //comment in to trigger an exception via input text:\n@@ -1836,7 +1865,7 @@ private CheckResults getOtherRuleMatches() {\n             sentenceMatches = cache.getIfPresent(cacheKey);\n           }\n           if (sentenceMatches == null) {\n-            sentenceMatches = checkAnalyzedSentence(paraMode, rules.rulesForSentence(sentence.analyzed), sentence.analyzed, checkRemoteRules);\n+            sentenceMatches = checkAnalyzedSentence(paraMode, rules.rulesForSentence(sentence.analyzed), sentence.analyzed, checkRemoteRules, textWordCounter);\n           }\n           if (cache != null) {\n             cache.put(cacheKey, sentenceMatches);\n@@ -1858,11 +1887,16 @@ private CheckResults getOtherRuleMatches() {\n           }\n           float errorsPerWord = ruleMatches.size() / (float) wordCounter;\n           //System.out.println(\"errorPerWord \" + errorsPerWord + \" (matches: \" + ruleMatches.size() + \" / \" + wordCounter + \")\");\n+          if (tmpErrorsPerWord < errorsPerWord) {\n+            errorRateLog.add(\"With sentence: \" + (i + 1) + \" (of \" + sentencesSize + \") the text error rate increased by: \" + (errorsPerWord - tmpErrorsPerWord) + \" from: \" + tmpErrorsPerWord  + \" to total: \" + errorsPerWord);\n+            //logger.info(\"With sentence: \" + (i + 1) + \" (of \" + sentencesSize + \") the text error rate increased by: \" + (errorsPerWord - tmpErrorsPerWord) + \" from: \" + tmpErrorsPerWord  + \" to total: \" + errorsPerWord);\n+            tmpErrorsPerWord = errorsPerWord;\n+          }\n           if (maxErrorsPerWordRate > 0 && errorsPerWord > maxErrorsPerWordRate && wordCounter > 25) {\n-            //CommonWords commonWords = new CommonWords();\n-            throw new ErrorRateTooHighException(\"Text checking was stopped due to too many errors (more than \" + String.format(\"%.0f\", maxErrorsPerWordRate*100) +\n-                    \"% of words seem to have an error). Are you sure you have set the correct text language? Language set: \" + JLanguageTool.this.language.getName() +\n-                    \", text length: \" + annotatedText.getPlainText().length());\n+            errorRateLog.forEach(logger::error);\n+            throw new ErrorRateTooHighException(\"Text checking was stopped due to too many errors (more than \" + String.format(\"%.0f\", maxErrorsPerWordRate * 100) +\n+              \"% of words seem to have an error). Are you sure you have set the correct text language? Language set: \" + JLanguageTool.this.language.getName() +\n+              \", text length: \" + annotatedText.getPlainText().length());\n             //        \", text length: \" + annotatedText.getPlainText().length() + \", common word count: \" + commonWords.getKnownWordsPerLanguage(annotatedText.getPlainText()));\n           }\n         } catch (ErrorRateTooHighException e) {",
      "parent_sha": "aae9d7eb09f0d9560ebb0b402cb91e946e21ce1b"
    }
  },
  {
    "oid": "e4088497d91948c5a4f5a955f2abddff0be29fd6",
    "message": "(1 )considering the positions of the skips; (2) support \"skip=-1\"",
    "date": "2011-06-24T12:05:09Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/e4088497d91948c5a4f5a955f2abddff0be29fd6",
    "details": {
      "sha": "1b9136cfa0937f9281dce9aff46a3dde3b04ef25",
      "filename": "trunk/JLanguageTool/src/dev/de/danielnaber/languagetool/dev/index/PatternRuleQueryBuilder.java",
      "status": "modified",
      "additions": 46,
      "deletions": 21,
      "changes": 67,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/e4088497d91948c5a4f5a955f2abddff0be29fd6/trunk%2FJLanguageTool%2Fsrc%2Fdev%2Fde%2Fdanielnaber%2Flanguagetool%2Fdev%2Findex%2FPatternRuleQueryBuilder.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/e4088497d91948c5a4f5a955f2abddff0be29fd6/trunk%2FJLanguageTool%2Fsrc%2Fdev%2Fde%2Fdanielnaber%2Flanguagetool%2Fdev%2Findex%2FPatternRuleQueryBuilder.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fdev%2Fde%2Fdanielnaber%2Flanguagetool%2Fdev%2Findex%2FPatternRuleQueryBuilder.java?ref=e4088497d91948c5a4f5a955f2abddff0be29fd6",
      "patch": "@@ -1,6 +1,7 @@\n package de.danielnaber.languagetool.dev.index;\r\n \r\n import java.util.ArrayList;\r\n+import java.util.Iterator;\r\n \r\n import org.apache.lucene.index.Term;\r\n import org.apache.lucene.search.Query;\r\n@@ -17,31 +18,55 @@ public class PatternRuleQueryBuilder {\n   public static final String FN = \"field\";\r\n \r\n   public static Query bulidQuery(PatternRule rule) {\r\n+    return next(rule.getElements().iterator());\r\n+  }\r\n+\r\n+  // create the next SpanQuery from the top Element in the Iterator.\r\n+  private static SpanQuery next(Iterator<Element> it) {\r\n+\r\n+    // no more Element\r\n+    if (!it.hasNext())\r\n+      return null;\r\n+\r\n+    Element patternElement = it.next();\r\n+    patternElement.getExceptionList();\r\n+\r\n     ArrayList<SpanQuery> list = new ArrayList<SpanQuery>();\r\n-    int i = 0;\r\n-    for (Element patternElement : rule.getElements()) {\r\n-      SpanQuery termQuery = createSpanQuery(patternElement.getString(), \"\",\r\n-          patternElement.getNegation(), patternElement.isRegularExpression());\r\n-      SpanQuery posQuery = createSpanQuery(patternElement.getPOStag(),\r\n-          LanguageToolFilter.POS_PREFIX, patternElement.getPOSNegation(),\r\n-          patternElement.isPOStagRegularExpression());\r\n-\r\n-      if (termQuery != null && posQuery != null) {\r\n-        SpanNearQuery q = new SpanNearQuery(new SpanQuery[] { termQuery, posQuery }, 0, false);\r\n-        list.add(q);\r\n-      } else if (termQuery != null) {\r\n-        list.add(termQuery);\r\n-      } else if (posQuery != null) {\r\n-        list.add(posQuery);\r\n-      } else {\r\n-        i++;\r\n-      }\r\n-      i += patternElement.getSkipNext();\r\n \r\n+    int skip = 0;\r\n+\r\n+    SpanQuery termQuery = createSpanQuery(patternElement.getString(), \"\",\r\n+        patternElement.getNegation(), patternElement.isRegularExpression());\r\n+    SpanQuery posQuery = createSpanQuery(patternElement.getPOStag(), LanguageToolFilter.POS_PREFIX,\r\n+        patternElement.getPOSNegation(), patternElement.isPOStagRegularExpression());\r\n+\r\n+    if (termQuery != null && posQuery != null) {\r\n+      SpanNearQuery q = new SpanNearQuery(new SpanQuery[] { termQuery, posQuery }, 0, false);\r\n+      list.add(q);\r\n+    } else if (termQuery != null) {\r\n+      list.add(termQuery);\r\n+    } else if (posQuery != null) {\r\n+      list.add(posQuery);\r\n+    } else {\r\n+      skip++;\r\n+    }\r\n+    if (patternElement.getSkipNext() >= 0) {\r\n+      skip += patternElement.getSkipNext();\r\n+    } else {\r\n+      // skip == -1\r\n+      skip = Integer.MAX_VALUE;\r\n+    }\r\n+\r\n+    // recursion invoke\r\n+    SpanQuery next = next(it);\r\n+\r\n+    if (next != null) {\r\n+      list.add(next);\r\n+      return new SpanNearQuery(list.toArray(new SpanQuery[list.size()]), skip, true);\r\n+    } else {\r\n+      return list.get(0);\r\n     }\r\n \r\n-    SpanNearQuery snq = new SpanNearQuery(list.toArray(new SpanQuery[list.size()]), i, true);\r\n-    return snq;\r\n   }\r\n \r\n   private static SpanQuery createSpanQuery(String token, String prefix, boolean isNegation,\r",
      "parent_sha": "2af2b565779250506196f7a7dfd9d8a16370656b"
    }
  },
  {
    "oid": "fb666be74c93200031b6ffe1f33958cc7800bc5b",
    "message": "AbstractCompoundRule: avoid locking overhead in a single-threaded queue",
    "date": "2020-12-02T12:34:58Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/fb666be74c93200031b6ffe1f33958cc7800bc5b",
    "details": {
      "sha": "fe87e62bcad7a448c1cb4e6e6c3e53bda57b2213",
      "filename": "languagetool-core/src/main/java/org/languagetool/rules/AbstractCompoundRule.java",
      "status": "modified",
      "additions": 7,
      "deletions": 14,
      "changes": 21,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/fb666be74c93200031b6ffe1f33958cc7800bc5b/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2FAbstractCompoundRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/fb666be74c93200031b6ffe1f33958cc7800bc5b/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2FAbstractCompoundRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2FAbstractCompoundRule.java?ref=fb666be74c93200031b6ffe1f33958cc7800bc5b",
      "patch": "@@ -18,22 +18,16 @@\n  */\n package org.languagetool.rules;\n \n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Queue;\n-import java.util.ResourceBundle;\n-import java.util.concurrent.ArrayBlockingQueue;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.languagetool.AnalyzedSentence;\n import org.languagetool.AnalyzedToken;\n import org.languagetool.AnalyzedTokenReadings;\n import org.languagetool.JLanguageTool;\n import org.languagetool.tools.StringTools;\n \n+import java.io.IOException;\n+import java.util.*;\n+\n /**\n  * Checks that compounds (if in the list) are not written as separate words.\n  * \n@@ -103,7 +97,7 @@ public RuleMatch[] match(AnalyzedSentence sentence) {\n     AnalyzedTokenReadings[] tokens = getSentenceWithImmunization(sentence).getTokensWithoutWhitespace();\n \n     RuleMatch prevRuleMatch = null;\n-    Queue<AnalyzedTokenReadings> prevTokens = new ArrayBlockingQueue<>(MAX_TERMS);\n+    ArrayDeque<AnalyzedTokenReadings> prevTokens = new ArrayDeque<>(MAX_TERMS);\n     for (int i = 0; i < tokens.length + MAX_TERMS-1; i++) {\n       AnalyzedTokenReadings token;\n       // we need to extend the token list so we find matches at the end of the original list:\n@@ -234,12 +228,11 @@ private String mergeCompound(String str, boolean uncapitalizeMidWords) {\n     return sb.toString();\n   }\n \n-  private void addToQueue(AnalyzedTokenReadings token, Queue<AnalyzedTokenReadings> prevTokens) {\n-    boolean inserted = prevTokens.offer(token);\n-    if (!inserted) {\n+  private static void addToQueue(AnalyzedTokenReadings token, ArrayDeque<AnalyzedTokenReadings> prevTokens) {\n+    if (prevTokens.size() == MAX_TERMS) {\n       prevTokens.poll();\n-      prevTokens.offer(token);\n     }\n+    prevTokens.offer(token);\n   }\n \n }",
      "parent_sha": "23fe07f3a42dd842cc018cfee0beb79559811c1b"
    }
  },
  {
    "oid": "53cd708c5bb8258acbcda7b976f06b1f249291fc",
    "message": "feed checker: extend usage information",
    "date": "2013-12-08T10:25:57Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/53cd708c5bb8258acbcda7b976f06b1f249291fc",
    "details": {
      "sha": "909014d15e416eca33fc627dcd3e80422f35464c",
      "filename": "languagetool-wikipedia/src/main/java/org/languagetool/dev/wikipedia/atom/AtomFeedCheckerCmd.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/53cd708c5bb8258acbcda7b976f06b1f249291fc/languagetool-wikipedia%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fdev%2Fwikipedia%2Fatom%2FAtomFeedCheckerCmd.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/53cd708c5bb8258acbcda7b976f06b1f249291fc/languagetool-wikipedia%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fdev%2Fwikipedia%2Fatom%2FAtomFeedCheckerCmd.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-wikipedia%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fdev%2Fwikipedia%2Fatom%2FAtomFeedCheckerCmd.java?ref=53cd708c5bb8258acbcda7b976f06b1f249291fc",
      "patch": "@@ -32,7 +32,9 @@ public static void main(String[] args) throws IOException, InterruptedException\n     if (args.length != 1 && args.length != 2) {\n       System.out.println(\"Usage: \" + AtomFeedCheckerCmd.class.getSimpleName() + \" <atomFeedUrl> [database.properties]\");\n       System.out.println(\"  <atomFeedUrl> is a Wikipedia URL to the latest changes, for example:\");\n-      System.out.println(\"  https://de.wikipedia.org/w/index.php?title=Spezial:Letzte_%C3%84nderungen&feed=atom&namespace=0\");\n+      System.out.println(\"    https://de.wikipedia.org/w/index.php?title=Spezial:Letzte_%C3%84nderungen&feed=atom&namespace=0\");\n+      System.out.println(\"  [database.properties] (optional) is a file that defines dbUrl, dbUser, and dbPassword,\");\n+      System.out.println(\"    used to write the results to an database via JDBC\");\n       System.exit(1);\n     }\n     String url = args[0];",
      "parent_sha": "47d7475a755f6799987cd682c9e9166e75931346"
    }
  },
  {
    "oid": "ce0f28cad83d9fbbf970526a161b921aa3e88cd4",
    "message": "log error from server",
    "date": "2017-03-27T16:31:29Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/ce0f28cad83d9fbbf970526a161b921aa3e88cd4",
    "details": {
      "sha": "771d30670af849e1e1ce73bffc90f9e208478cb3",
      "filename": "languagetool-core/src/main/java/org/languagetool/rules/OpenNMTRule.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/ce0f28cad83d9fbbf970526a161b921aa3e88cd4/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2FOpenNMTRule.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/ce0f28cad83d9fbbf970526a161b921aa3e88cd4/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2FOpenNMTRule.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-core%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Frules%2FOpenNMTRule.java?ref=ce0f28cad83d9fbbf970526a161b921aa3e88cd4",
      "patch": "@@ -23,13 +23,16 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.node.ArrayNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.base.Charsets;\n+import com.google.common.io.CharStreams;\n import org.jetbrains.annotations.NotNull;\n import org.languagetool.AnalyzedSentence;\n import org.languagetool.Experimental;\n \n import java.io.DataOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n import java.net.HttpURLConnection;\n import java.net.URL;\n import java.util.ArrayList;\n@@ -98,7 +101,9 @@ public RuleMatch[] match(AnalyzedSentence sentence) throws IOException {\n       }\n       return new RuleMatch[0];\n     } else {\n-      throw new RuntimeException(\"Got error \" + responseCode + \" from \" + url);\n+      InputStream inputStr = conn.getErrorStream();\n+      String error = CharStreams.toString(new InputStreamReader(inputStr, Charsets.UTF_8));\n+      throw new RuntimeException(\"Got error \" + responseCode + \" from \" + url + \": \" + error);\n     }\n   }\n ",
      "parent_sha": "d3d23d9962c3d9a8cbbfb1d805cf430026c818f1"
    }
  },
  {
    "oid": "809236307f882d540fd3b67cf5e7d720ab72148a",
    "message": "[LO extension] change comment",
    "date": "2018-07-17T11:32:28Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/809236307f882d540fd3b67cf5e7d720ab72148a",
    "details": {
      "sha": "13b321cfbd1aed89907c3a594a9caf00fff3159e",
      "filename": "languagetool-office-extension/src/main/java/org/languagetool/openoffice/LOFlatParagraph.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/809236307f882d540fd3b67cf5e7d720ab72148a/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FLOFlatParagraph.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/809236307f882d540fd3b67cf5e7d720ab72148a/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FLOFlatParagraph.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-office-extension%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fopenoffice%2FLOFlatParagraph.java?ref=809236307f882d540fd3b67cf5e7d720ab72148a",
      "patch": "@@ -297,8 +297,7 @@ public List<int[]> getFootnotePositions() {\n   }\n \n   /**\n-   * Returns Number of all FlatParagraphs of Document\n-   * Returns negative value if it fails\n+   * Marks all paragraphs as checked with exception of the paragraphs \"from\" to \"to\"\n    */\n   public void markFlatParasAsChecked(int from, int to) {\n     try {",
      "parent_sha": "9b41c40f8966cc88c36acc056ea5ee0d95e811f0"
    }
  },
  {
    "oid": "b82d1bdb07bcca38bb0527d3e04792d0a71ed55b",
    "message": "small javadoc clarification",
    "date": "2011-01-03T19:32:07Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/b82d1bdb07bcca38bb0527d3e04792d0a71ed55b",
    "details": {
      "sha": "a4ffa50a200f8e4e79b7b1f72a653353e4fbe0d7",
      "filename": "trunk/JLanguageTool/src/java/de/danielnaber/languagetool/Language.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/b82d1bdb07bcca38bb0527d3e04792d0a71ed55b/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2FLanguage.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/b82d1bdb07bcca38bb0527d3e04792d0a71ed55b/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2FLanguage.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/trunk%2FJLanguageTool%2Fsrc%2Fjava%2Fde%2Fdanielnaber%2Flanguagetool%2FLanguage.java?ref=b82d1bdb07bcca38bb0527d3e04792d0a71ed55b",
      "patch": "@@ -143,7 +143,8 @@ public abstract class Language {\n   public abstract String getName();\n   \n   /**\n-   * Get this language's country variants, e.g. <code>US</code> or <code>PL</code>.\n+   * Get this language's variants, e.g. <code>US</code> (as in <code>en_US</code>) or\n+   * <code>PL</code> (as in <code>pl_PL</code>).\n    * @return String[] - array of country variants for the language.\n    */\n   public abstract String[] getCountryVariants();",
      "parent_sha": "c3b90df720b0397aef518410b9f85f96061c3f95"
    }
  },
  {
    "oid": "e5384ac905dbb33c655f0e5f8bc4e1663b4cf6a3",
    "message": "simplify code",
    "date": "2020-05-11T15:31:40Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/e5384ac905dbb33c655f0e5f8bc4e1663b4cf6a3",
    "details": {
      "sha": "733696adeea2049bc469fa8e261dfd0b95d78e81",
      "filename": "languagetool-server/src/main/java/org/languagetool/server/Pipeline.java",
      "status": "modified",
      "additions": 20,
      "deletions": 46,
      "changes": 66,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/e5384ac905dbb33c655f0e5f8bc4e1663b4cf6a3/languagetool-server%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fserver%2FPipeline.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/e5384ac905dbb33c655f0e5f8bc4e1663b4cf6a3/languagetool-server%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fserver%2FPipeline.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-server%2Fsrc%2Fmain%2Fjava%2Forg%2Flanguagetool%2Fserver%2FPipeline.java?ref=e5384ac905dbb33c655f0e5f8bc4e1663b4cf6a3",
      "patch": "@@ -84,105 +84,85 @@ boolean isExpired() {\n \n   @Override\n   public void setCleanOverlappingMatches(boolean cleanOverlappingMatches) {\n+    preventModificationAfterSetup();\n+    super.setCleanOverlappingMatches(cleanOverlappingMatches);\n+  }\n+\n+  private void preventModificationAfterSetup() {\n     if (setup) {\n       throw new IllegalPipelineMutationException();\n     }\n-    super.setCleanOverlappingMatches(cleanOverlappingMatches);\n   }\n \n   @Override\n   public void setMaxErrorsPerWordRate(float maxErrorsPerWordRate) {\n-    if (setup) {\n-      throw new IllegalPipelineMutationException();\n-    }\n+    preventModificationAfterSetup();\n     super.setMaxErrorsPerWordRate(maxErrorsPerWordRate);\n   }\n \n   @Override\n   public void setOutput(PrintStream printStream) {\n-    if (setup) {\n-      throw new IllegalPipelineMutationException();\n-    }\n+    preventModificationAfterSetup();\n     super.setOutput(printStream);\n   }\n \n   @Override\n   public List<AbstractPatternRule> loadPatternRules(String filename) throws IOException {\n-    if (setup) {\n-      throw new IllegalPipelineMutationException();\n-    }\n+    preventModificationAfterSetup();\n     return super.loadPatternRules(filename);\n   }\n \n   @Override\n   public List<AbstractPatternRule> loadFalseFriendRules(String filename) throws ParserConfigurationException, SAXException, IOException {\n-    if (setup) {\n-      throw new IllegalPipelineMutationException();\n-    }\n+    preventModificationAfterSetup();\n     return super.loadFalseFriendRules(filename);\n   }\n \n   @Override\n   public void activateLanguageModelRules(File indexDir) throws IOException {\n-    if (setup) {\n-      throw new IllegalPipelineMutationException();\n-    }\n+    preventModificationAfterSetup();\n     super.activateLanguageModelRules(indexDir);\n   }\n \n   @Override\n   public void activateWord2VecModelRules(File indexDir) throws IOException {\n-    if (setup) {\n-      throw new IllegalPipelineMutationException();\n-    }\n+    preventModificationAfterSetup();\n     super.activateWord2VecModelRules(indexDir);\n   }\n \n   @Override\n   public void activateRemoteRules(File configFile) throws IOException {\n-    if (setup) {\n-      throw new IllegalPipelineMutationException();\n-    }\n+    preventModificationAfterSetup();\n     super.activateRemoteRules(configFile);\n   }\n \n   @Override\n   public void addMatchFilter(@NotNull RuleMatchFilter filter) {\n-    if (setup) {\n-      throw new IllegalPipelineMutationException();\n-    }\n+    preventModificationAfterSetup();\n     super.addMatchFilter(filter);\n   }\n \n   @Override\n   public void addRule(Rule rule) {\n-    if (setup) {\n-      throw new IllegalPipelineMutationException();\n-    }\n+    preventModificationAfterSetup();\n     super.addRule(rule);\n   }\n \n   @Override\n   public void disableRule(String ruleId) {\n-    if (setup) {\n-      throw new IllegalPipelineMutationException();\n-    }\n+    preventModificationAfterSetup();\n     super.disableRule(ruleId);\n   }\n \n   @Override\n   public void disableRules(List<String> ruleIds) {\n-    if (setup) {\n-      throw new IllegalPipelineMutationException();\n-    }\n+    preventModificationAfterSetup();\n     super.disableRules(ruleIds);\n   }\n \n   @Override\n   public void disableCategory(CategoryId id) {\n-    if (setup) {\n-      throw new IllegalPipelineMutationException();\n-    }\n+    preventModificationAfterSetup();\n     super.disableCategory(id);\n   }\n \n@@ -193,17 +173,13 @@ public Set<String> getDisabledRules() {\n \n   @Override\n   public void enableRule(String ruleId) {\n-    if (setup) {\n-      throw new IllegalPipelineMutationException();\n-    }\n+    preventModificationAfterSetup();\n     super.enableRule(ruleId);\n   }\n \n   @Override\n   public void enableRuleCategory(CategoryId id) {\n-    if (setup) {\n-      throw new IllegalPipelineMutationException();\n-    }\n+    preventModificationAfterSetup();\n     super.enableRuleCategory(id);\n   }\n \n@@ -239,9 +215,7 @@ public List<AbstractPatternRule> getPatternRulesByIdAndSubId(String Id, String s\n \n   @Override\n   public void setConfigValues(Map<String, Integer> v) {\n-    if (setup) {\n-      throw new IllegalPipelineMutationException();\n-    }\n+    preventModificationAfterSetup();\n     super.setConfigValues(v);\n   }\n ",
      "parent_sha": "7ee379d9cc660654506f8318d617d92963d131ab"
    }
  },
  {
    "oid": "4a53e3dd1afa6928c68f18a940539ec692cd55c7",
    "message": "tiny code cleanup",
    "date": "2016-06-17T10:00:13Z",
    "url": "https://github.com/languagetool-org/languagetool/commit/4a53e3dd1afa6928c68f18a940539ec692cd55c7",
    "details": {
      "sha": "023ed8a0f335db7a2874084224644a67f341b52e",
      "filename": "languagetool-commandline/src/test/java/org/languagetool/commandline/MainTest.java",
      "status": "modified",
      "additions": 12,
      "deletions": 25,
      "changes": 37,
      "blob_url": "https://github.com/languagetool-org/languagetool/blob/4a53e3dd1afa6928c68f18a940539ec692cd55c7/languagetool-commandline%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Fcommandline%2FMainTest.java",
      "raw_url": "https://github.com/languagetool-org/languagetool/raw/4a53e3dd1afa6928c68f18a940539ec692cd55c7/languagetool-commandline%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Fcommandline%2FMainTest.java",
      "contents_url": "https://api.github.com/repos/languagetool-org/languagetool/contents/languagetool-commandline%2Fsrc%2Ftest%2Fjava%2Forg%2Flanguagetool%2Fcommandline%2FMainTest.java?ref=4a53e3dd1afa6928c68f18a940539ec692cd55c7",
      "patch": "@@ -194,8 +194,7 @@ public void testEnglishFileAutoDetect() throws Exception {\n   @Test\n   public void testEnglishStdInAutoDetect() throws Exception {\n     String test = \"This is an test.\";\n-    byte[] b = test.getBytes();\n-    System.setIn(new ByteArrayInputStream(b));\n+    System.setIn(new ByteArrayInputStream(test.getBytes()));\n     String[] args = {\"-adl\"};\n \n     Main.main(args);\n@@ -209,8 +208,7 @@ public void testEnglishStdInAutoDetect() throws Exception {\n   @Test\n   public void testStdInWithExternalFalseFriends() throws Exception {\n     String test = \"L\u00e1ska!\\n\";\n-    byte[] b = test.getBytes();\n-    System.setIn(new ByteArrayInputStream(b));\n+    System.setIn(new ByteArrayInputStream(test.getBytes()));\n     String[] args = {\"-l\", \"sk\", \"--falsefriends\", getExternalFalseFriends(), \"-m\", \"pl\", \"-\"};\n \n     Main.main(args);\n@@ -248,8 +246,7 @@ public void testEnglishFileApplySuggestions() throws Exception {\n   @Test\n   public void testEnglishStdIn1() throws Exception {\n     String test = \"This is an test.\";\n-    byte[] b = test.getBytes();\n-    System.setIn(new ByteArrayInputStream(b));\n+    System.setIn(new ByteArrayInputStream(test.getBytes()));\n     String[] args = {\"-l\", \"en\"};\n \n     Main.main(args);\n@@ -262,8 +259,7 @@ public void testEnglishStdIn1() throws Exception {\n   @Test\n   public void testEnglishStdIn2() throws Exception {\n     String test = \"This is an test.\";\n-    byte[] b = test.getBytes();\n-    System.setIn(new ByteArrayInputStream(b));\n+    System.setIn(new ByteArrayInputStream(test.getBytes()));\n     String[] args = {\"-l\", \"en\", \"-\"};\n \n     Main.main(args);\n@@ -276,8 +272,7 @@ public void testEnglishStdIn2() throws Exception {\n   @Test\n   public void testEnglishStdIn3() throws Exception {\n     String test = \"This is an test.\";\n-    byte[] b = test.getBytes();\n-    System.setIn(new ByteArrayInputStream(b));\n+    System.setIn(new ByteArrayInputStream(test.getBytes()));\n     String[] args = {\"-l\", \"en\", \"-a\", \"-\"};\n \n     Main.main(args);\n@@ -303,8 +298,7 @@ public void testEnglishStdIn4() throws Exception {\n   @Test\n   public void testEnglishLineMode() throws Exception {\n     String test = \"This is what I mean\\nand you know it.\";\n-    byte[] b = test.getBytes();\n-    System.setIn(new ByteArrayInputStream(b));\n+    System.setIn(new ByteArrayInputStream(test.getBytes()));\n     String[] args = {\"-l\", \"en\", \"-a\", \"-b\", \"-\"};\n \n     Main.main(args);\n@@ -316,8 +310,7 @@ public void testEnglishLineMode() throws Exception {\n   @Test\n   public void testEnglishParaMode() throws Exception {\n     String test = \"This is what I mean\\nand you know it.\";\n-    byte[] b = test.getBytes();\n-    System.setIn(new ByteArrayInputStream(b));\n+    System.setIn(new ByteArrayInputStream(test.getBytes()));\n     String[] args = {\"-l\", \"en\", \"-a\", \"-\"};\n \n     Main.main(args);\n@@ -328,8 +321,7 @@ public void testEnglishParaMode() throws Exception {\n   @Test\n   public void testPolishStdInDefaultOff() throws Exception {\n     String test = \"To jest test, kt\u00f3ry zrobi\u0142em, kt\u00f3ry mi si\u0119 podoba.\";\n-    byte[] b = test.getBytes();\n-    System.setIn(new ByteArrayInputStream(b));\n+    System.setIn(new ByteArrayInputStream(test.getBytes()));\n     String[] args = {\"-l\", \"pl\", \"-e\", \"PL_WORD_REPEAT\", \"-\"};\n \n     Main.main(args);\n@@ -343,12 +335,10 @@ public void testPolishStdInDefaultOff() throws Exception {\n   @Test\n   public void testPolishApiStdInDefaultOff() throws Exception {\n     String test = \"To jest test, kt\u00f3ry zrobi\u0142em, kt\u00f3ry mi si\u0119 podoba.\";\n-    byte[] b = test.getBytes();\n-    System.setIn(new ByteArrayInputStream(b));\n+    System.setIn(new ByteArrayInputStream(test.getBytes()));\n     String[] args = {\"--api\", \"-l\", \"pl\", \"-eo\", \"-e\", \"PL_WORD_REPEAT\", \"-\"};\n     Main.main(args);\n     String output = new String(this.out.toByteArray());\n-//    assertThat(\"asdf\", is(output));\n     assertThat(StringUtils.countMatches(output, \"<error \"), is(1));\n     assertThat(StringUtils.countMatches(output, \"<matches \"), is(1));\n     assertThat(StringUtils.countMatches(output, \"</matches>\"), is(1));  // https://github.com/languagetool-org/languagetool/issues/251\n@@ -357,8 +347,7 @@ public void testPolishApiStdInDefaultOff() throws Exception {\n   @Test\n   public void testPolishApiStdInDefaultOffNoErrors() throws Exception {\n     String test = \"To jest test.\";\n-    byte[] b = test.getBytes();\n-    System.setIn(new ByteArrayInputStream(b));\n+    System.setIn(new ByteArrayInputStream(test.getBytes()));\n     String[] args = {\"--api\", \"-l\", \"pl\", \"-e\", \"PL_WORD_REPEAT\", \"-\"};\n     Main.main(args);\n     String output = new String(this.out.toByteArray());\n@@ -370,8 +359,7 @@ public void testPolishApiStdInDefaultOffNoErrors() throws Exception {\n   @Test\n   public void testPolishSpelling() throws Exception {\n     String test = \"Zwuasdac?\";\n-    byte[] b = test.getBytes();\n-    System.setIn(new ByteArrayInputStream(b));\n+    System.setIn(new ByteArrayInputStream(test.getBytes()));\n     String[] args = {\"-l\", \"pl\", \"-e\", \"MORFOLOGIK_RULE_PL_PL\", \"-\"};\n \n     Main.main(args);\n@@ -407,8 +395,7 @@ public void testEnglishFileRuleEnabled() throws Exception {\n   @Test\n   public void testEnglishFileFakeRuleEnabled() throws Exception {\n     String test = \"Zwuasdac?\";\n-    byte[] b = test.getBytes();\n-    System.setIn(new ByteArrayInputStream(b));\n+    System.setIn(new ByteArrayInputStream(test.getBytes()));\n     String[] args = {\"-l\", \"en\", \"-e\", \"FOO_BAR_BLABLA\", \"-\"};\n     Main.main(args);\n     String stderr = new String(this.err.toByteArray());",
      "parent_sha": "e1e6d1a68837579a34735603d9b982b45fad41cb"
    }
  }
]