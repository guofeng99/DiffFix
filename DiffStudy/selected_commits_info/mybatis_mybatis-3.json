[
  {
    "oid": "96b6a1313d3c25e4ab7b5f2604385311497d8b65",
    "message": "fix for http://code.google.com/p/mybatis/issues/detail?id=517  ?? pending user test",
    "date": "2012-02-09T17:29:27Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/96b6a1313d3c25e4ab7b5f2604385311497d8b65",
    "details": {
      "sha": "316fd028c922fd773382ccb311fb46de1df4e175",
      "filename": "src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/96b6a1313d3c25e4ab7b5f2604385311497d8b65/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FFastResultSetHandler.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/96b6a1313d3c25e4ab7b5f2604385311497d8b65/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FFastResultSetHandler.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FFastResultSetHandler.java?ref=96b6a1313d3c25e4ab7b5f2604385311497d8b65",
      "patch": "@@ -113,7 +113,7 @@ protected void handleRefCursorOutputParameter(CallableStatement cs, ParameterMap\n     if (resultMapId != null) {\r\n       final ResultMap resultMap = configuration.getResultMap(resultMapId);\r\n       final DefaultResultHandler resultHandler = new DefaultResultHandler(configuration.getDefaultListResultHandlerType());\r\n-      ResultColumnCache resultColumnCache = new ResultColumnCache(cs.getMetaData(), configuration);\r\n+      ResultColumnCache resultColumnCache = new ResultColumnCache(rs.getMetaData(), configuration);\r\n       handleRowValues(rs, resultMap, resultHandler, new RowBounds(), resultColumnCache);\r\n       metaParam.setValue(parameterMapping.getProperty(), resultHandler.getResultList());\r\n     } else {\r",
      "parent_sha": "eb11545322afb4531ade60e5682af9f38e24ace9"
    }
  },
  {
    "oid": "6735798940920b0aaacf9211bf4a6f1be40d64fd",
    "message": "When a default method defined in a mapper interface is called, invoke the default method instead of looking for a bound mapper method. This feature requires Java 7.",
    "date": "2016-07-07T11:23:54Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/6735798940920b0aaacf9211bf4a6f1be40d64fd",
    "details": {
      "sha": "6eb1c6e32abdfbdc053de63191aada0944295f2b",
      "filename": "src/main/java/org/apache/ibatis/binding/MapperProxy.java",
      "status": "modified",
      "additions": 29,
      "deletions": 4,
      "changes": 33,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/6735798940920b0aaacf9211bf4a6f1be40d64fd/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbinding%2FMapperProxy.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/6735798940920b0aaacf9211bf4a6f1be40d64fd/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbinding%2FMapperProxy.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbinding%2FMapperProxy.java?ref=6735798940920b0aaacf9211bf4a6f1be40d64fd",
      "patch": "@@ -16,8 +16,11 @@\n package org.apache.ibatis.binding;\n \n import java.io.Serializable;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationHandler;\n import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n import java.util.Map;\n \n import org.apache.ibatis.reflection.ExceptionUtil;\n@@ -42,12 +45,14 @@ public MapperProxy(SqlSession sqlSession, Class<T> mapperInterface, Map<Method,\n \n   @Override\n   public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n-    if (Object.class.equals(method.getDeclaringClass())) {\n-      try {\n+    try {\n+      if (Object.class.equals(method.getDeclaringClass())) {\n         return method.invoke(this, args);\n-      } catch (Throwable t) {\n-        throw ExceptionUtil.unwrapThrowable(t);\n+      } else if (isDefaultMethod(method)) {\n+        return invokeDefaultMethod(proxy, method, args);\n       }\n+    } catch (Throwable t) {\n+      throw ExceptionUtil.unwrapThrowable(t);\n     }\n     final MapperMethod mapperMethod = cachedMapperMethod(method);\n     return mapperMethod.execute(sqlSession, args);\n@@ -61,5 +66,25 @@ private MapperMethod cachedMapperMethod(Method method) {\n     }\n     return mapperMethod;\n   }\n+  \n+  private Object invokeDefaultMethod(Object proxy, Method method, Object[] args)\n+      throws Throwable {\n+    final Constructor<MethodHandles.Lookup> constructor = MethodHandles.Lookup.class\n+        .getDeclaredConstructor(Class.class, int.class);\n+    if (!constructor.isAccessible()) {\n+      constructor.setAccessible(true);\n+    }\n+    final Class<?> declaringClass = method.getDeclaringClass();\n+    return constructor.newInstance(declaringClass, MethodHandles.Lookup.PRIVATE)\n+        .unreflectSpecial(method, declaringClass).bindTo(proxy).invokeWithArguments(args);\n+  }\n \n+  /**\n+   * Backport of java.lang.reflect.Method#isDefault()\n+   */\n+  private boolean isDefaultMethod(Method method) {\n+    return ((method.getModifiers()\n+        & (Modifier.ABSTRACT | Modifier.PUBLIC | Modifier.STATIC)) == Modifier.PUBLIC)\n+        && method.getDeclaringClass().isInterface();\n+  }\n }",
      "parent_sha": "6fc1b462177e1e3c91eda623e37c57f11212aad6"
    }
  },
  {
    "oid": "0153c30262daf8e2395c69977a5ca674c6e4328c",
    "message": "Make tests more stable by adding test conditions",
    "date": "2020-02-12T20:19:25Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/0153c30262daf8e2395c69977a5ca674c6e4328c",
    "details": {
      "sha": "597c6706630b159982cf6356ebc8bb2edc468f96",
      "filename": "src/test/java/org/apache/ibatis/reflection/ReflectorTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/0153c30262daf8e2395c69977a5ca674c6e4328c/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FReflectorTest.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/0153c30262daf8e2395c69977a5ca674c6e4328c/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FReflectorTest.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FReflectorTest.java?ref=0153c30262daf8e2395c69977a5ca674c6e4328c",
      "patch": "@@ -212,7 +212,7 @@ public void setProp2(boolean arg) {}\n     assertNotNull(reflector.getSetInvoker(\"prop1\"));\n \n     Class<?> paramType = reflector.getSetterType(\"prop2\");\n-    assertTrue(String.class.equals(paramType) || Integer.class.equals(paramType));\n+    assertTrue(String.class.equals(paramType) || Integer.class.equals(paramType)|| boolean.class.equals(paramType));\n \n     Invoker ambiguousInvoker = reflector.getSetInvoker(\"prop2\");\n     Object[] param = String.class.equals(paramType)? new String[]{\"x\"} : new Integer[]{1};",
      "parent_sha": "454aece248c7d0898a4270a506b4ddd1083e6377"
    }
  },
  {
    "oid": "b13ed766e21ccbc42bb6f62b616d2066f0e46263",
    "message": "refactor to make code more readable",
    "date": "2012-04-04T17:04:09Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/b13ed766e21ccbc42bb6f62b616d2066f0e46263",
    "details": {
      "sha": "9c0156233836bf564ff75ba6d39ebd4df9731026",
      "filename": "src/main/java/org/apache/ibatis/executor/CachingExecutor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/b13ed766e21ccbc42bb6f62b616d2066f0e46263/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2FCachingExecutor.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/b13ed766e21ccbc42bb6f62b616d2066f0e46263/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2FCachingExecutor.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2FCachingExecutor.java?ref=b13ed766e21ccbc42bb6f62b616d2066f0e46263",
      "patch": "@@ -54,7 +54,9 @@ public Transaction getTransaction() {\n \r\n   public void close(boolean forceRollback) {\r\n     try {\r\n-      if (dirty) { //issue #499. Unresolved session handling\r\n+      //issue #499. Unresolved session handling\r\n+      //issue #573. Autocommit sessions should commit\r\n+      if (dirty && !autoCommit) { \r\n         tcm.rollback();\r\n       } else {\r\n         tcm.commit();\r\n@@ -155,7 +157,7 @@ private void flushCacheIfRequired(MappedStatement ms) {\n     Cache cache = ms.getCache();\r\n     if (cache != null) {\r\n       if (ms.isFlushCacheRequired()) {\r\n-        if (!autoCommit) dirty = true; // issue #524. Disable using cached data for this session\r\n+        dirty = true; // issue #524. Disable using cached data for this session\r\n         tcm.clear(cache);\r\n       }\r\n     }\r",
      "parent_sha": "7dde13fad48bc6f2b138f670b7ad5e2849967c69"
    }
  },
  {
    "oid": "b9c947309ba03c000504cdca6a92136bf05d76ba",
    "message": "Preventing a Thread Leak",
    "date": "2013-09-03T17:12:18Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/b9c947309ba03c000504cdca6a92136bf05d76ba",
    "details": {
      "sha": "c358836fbff093871f575a46987a655f9ad20055",
      "filename": "src/main/java/org/apache/ibatis/executor/loader/ResultLoader.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/b9c947309ba03c000504cdca6a92136bf05d76ba/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Floader%2FResultLoader.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/b9c947309ba03c000504cdca6a92136bf05d76ba/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Floader%2FResultLoader.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Floader%2FResultLoader.java?ref=b9c947309ba03c000504cdca6a92136bf05d76ba",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- *    Copyright 2009-2012 the original author or authors.\n+ *    Copyright 2009-2013 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.\n@@ -45,7 +45,7 @@ public class ResultLoader {\n   protected final CacheKey cacheKey;\n   protected final BoundSql boundSql;\n   protected final ResultExtractor resultExtractor;\n-  protected final Thread creatorThread;\n+  protected final String creatorThread;\n   \n   protected boolean loaded;\n   protected Object resultObject;\n@@ -60,7 +60,7 @@ public ResultLoader(Configuration config, Executor executor, MappedStatement map\n     this.cacheKey = cacheKey;\n     this.boundSql = boundSql;\n     this.resultExtractor = new ResultExtractor(configuration, objectFactory);\n-    this.creatorThread = Thread.currentThread();\n+    this.creatorThread = Thread.currentThread().getName();\n   }\n \n   public Object loadResult() throws SQLException {\n@@ -71,7 +71,7 @@ public Object loadResult() throws SQLException {\n \n   private <E> List<E> selectList() throws SQLException {\n     Executor localExecutor = executor;\n-    if (Thread.currentThread() != this.creatorThread || localExecutor.isClosed()) {\n+    if (localExecutor.isClosed() || !Thread.currentThread().getName().equals(this.creatorThread)) {\n       localExecutor = newExecutor();\n     }\n     try {",
      "parent_sha": "3eff78a58129f077294b1cd4bdc09a198d7d9d91"
    }
  },
  {
    "oid": "d607f8983d024d1b33b2b1ed1e89faf6538fb9d3",
    "message": "Minor changes.",
    "date": "2019-06-27T12:17:05Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/d607f8983d024d1b33b2b1ed1e89faf6538fb9d3",
    "details": {
      "sha": "bcb438ad087a20e425623c5a638913673848628e",
      "filename": "src/main/java/org/apache/ibatis/reflection/Reflector.java",
      "status": "modified",
      "additions": 21,
      "deletions": 59,
      "changes": 80,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/d607f8983d024d1b33b2b1ed1e89faf6538fb9d3/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FReflector.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/d607f8983d024d1b33b2b1ed1e89faf6538fb9d3/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FReflector.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FReflector.java?ref=d607f8983d024d1b33b2b1ed1e89faf6538fb9d3",
      "patch": "@@ -15,21 +15,8 @@\n  */\n package org.apache.ibatis.reflection;\n \n-import java.lang.reflect.Array;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.GenericArrayType;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n-import java.lang.reflect.ParameterizedType;\n-import java.lang.reflect.ReflectPermission;\n-import java.lang.reflect.Type;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n+import java.lang.reflect.*;\n+import java.util.*;\n import java.util.Map.Entry;\n \n import org.apache.ibatis.reflection.invoker.GetFieldInvoker;\n@@ -63,8 +50,8 @@ public Reflector(Class<?> clazz) {\n     addGetMethods(clazz);\n     addSetMethods(clazz);\n     addFields(clazz);\n-    readablePropertyNames = getMethods.keySet().toArray(new String[getMethods.keySet().size()]);\n-    writablePropertyNames = setMethods.keySet().toArray(new String[setMethods.keySet().size()]);\n+    readablePropertyNames = getMethods.keySet().toArray(new String[0]);\n+    writablePropertyNames = setMethods.keySet().toArray(new String[0]);\n     for (String propName : readablePropertyNames) {\n       caseInsensitivePropertyMap.put(propName.toUpperCase(Locale.ENGLISH), propName);\n     }\n@@ -74,28 +61,16 @@ public Reflector(Class<?> clazz) {\n   }\n \n   private void addDefaultConstructor(Class<?> clazz) {\n-    Constructor<?>[] consts = clazz.getDeclaredConstructors();\n-    for (Constructor<?> constructor : consts) {\n-      if (constructor.getParameterTypes().length == 0) {\n-        this.defaultConstructor = constructor;\n-      }\n-    }\n+    Constructor<?>[] constructors = clazz.getDeclaredConstructors();\n+    Arrays.stream(constructors).filter(constructor -> constructor.getParameterTypes().length == 0)\n+      .findFirst().ifPresent(constructor -> this.defaultConstructor = constructor);\n   }\n \n-  private void addGetMethods(Class<?> cls) {\n+  private void addGetMethods(Class<?> clazz) {\n     Map<String, List<Method>> conflictingGetters = new HashMap<>();\n-    Method[] methods = getClassMethods(cls);\n-    for (Method method : methods) {\n-      if (method.getParameterTypes().length > 0) {\n-        continue;\n-      }\n-      String name = method.getName();\n-      if ((name.startsWith(\"get\") && name.length() > 3)\n-          || (name.startsWith(\"is\") && name.length() > 2)) {\n-        name = PropertyNamer.methodToProperty(name);\n-        addMethodConflict(conflictingGetters, name, method);\n-      }\n-    }\n+    Method[] methods = getClassMethods(clazz);\n+    Arrays.stream(methods).filter(m -> m.getParameterTypes().length == 0 && PropertyNamer.isGetter(m.getName()))\n+      .forEach(m -> addMethodConflict(conflictingGetters, PropertyNamer.methodToProperty(m.getName()), m));\n     resolveGetterConflicts(conflictingGetters);\n   }\n \n@@ -142,18 +117,11 @@ private void addGetMethod(String name, Method method) {\n     }\n   }\n \n-  private void addSetMethods(Class<?> cls) {\n+  private void addSetMethods(Class<?> clazz) {\n     Map<String, List<Method>> conflictingSetters = new HashMap<>();\n-    Method[] methods = getClassMethods(cls);\n-    for (Method method : methods) {\n-      String name = method.getName();\n-      if (name.startsWith(\"set\") && name.length() > 3) {\n-        if (method.getParameterTypes().length == 1) {\n-          name = PropertyNamer.methodToProperty(name);\n-          addMethodConflict(conflictingSetters, name, method);\n-        }\n-      }\n-    }\n+    Method[] methods = getClassMethods(clazz);\n+    Arrays.stream(methods).filter(m -> m.getParameterTypes().length == 1 && PropertyNamer.isSetter(m.getName()))\n+      .forEach(m -> addMethodConflict(conflictingSetters, PropertyNamer.methodToProperty(m.getName()), m));\n     resolveSetterConflicts(conflictingSetters);\n   }\n \n@@ -169,8 +137,7 @@ private void resolveSetterConflicts(Map<String, List<Method>> conflictingSetters\n       Method match = null;\n       ReflectionException exception = null;\n       for (Method setter : setters) {\n-        Class<?> paramType = setter.getParameterTypes()[0];\n-        if (paramType.equals(getterType)) {\n+        if (setter.getParameterTypes()[0].equals(getterType)) {\n           // should be the best match\n           match = setter;\n           break;\n@@ -285,12 +252,12 @@ private boolean isValidPropertyName(String name) {\n    * We use this method, instead of the simpler <code>Class.getMethods()</code>,\n    * because we want to look for private methods as well.\n    *\n-   * @param cls The class\n+   * @param clazz The class\n    * @return An array containing all methods in this class\n    */\n-  private Method[] getClassMethods(Class<?> cls) {\n+  private Method[] getClassMethods(Class<?> clazz) {\n     Map<String, Method> uniqueMethods = new HashMap<>();\n-    Class<?> currentClass = cls;\n+    Class<?> currentClass = clazz;\n     while (currentClass != null && currentClass != Object.class) {\n       addUniqueMethods(uniqueMethods, currentClass.getDeclaredMethods());\n \n@@ -306,7 +273,7 @@ private Method[] getClassMethods(Class<?> cls) {\n \n     Collection<Method> methods = uniqueMethods.values();\n \n-    return methods.toArray(new Method[methods.size()]);\n+    return methods.toArray(new Method[0]);\n   }\n \n   private void addUniqueMethods(Map<String, Method> uniqueMethods, Method[] methods) {\n@@ -332,12 +299,7 @@ private String getSignature(Method method) {\n     sb.append(method.getName());\n     Class<?>[] parameters = method.getParameterTypes();\n     for (int i = 0; i < parameters.length; i++) {\n-      if (i == 0) {\n-        sb.append(':');\n-      } else {\n-        sb.append(',');\n-      }\n-      sb.append(parameters[i].getName());\n+      sb.append(i == 0 ? \":\" : \",\").append(parameters[i].getName());\n     }\n     return sb.toString();\n   }",
      "parent_sha": "50004157ad1e537c64e5a3951edd543e2648451b"
    }
  },
  {
    "oid": "489f564cd5396aafb9b28fef840c49d7bf59ed84",
    "message": "Prevent known vulnerable classes from being deserialized.\n\nThe recommended way would be to configure the deserialization filter provided by JDK (JEP-290).\nhttp://openjdk.java.net/jeps/290",
    "date": "2018-06-23T17:10:40Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/489f564cd5396aafb9b28fef840c49d7bf59ed84",
    "details": {
      "sha": "ae723e5e9c4107193e0f9c1db9fa65fa7ce21e28",
      "filename": "src/main/java/org/apache/ibatis/executor/loader/AbstractSerialStateHolder.java",
      "status": "modified",
      "additions": 29,
      "deletions": 2,
      "changes": 31,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/489f564cd5396aafb9b28fef840c49d7bf59ed84/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Floader%2FAbstractSerialStateHolder.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/489f564cd5396aafb9b28fef840c49d7bf59ed84/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Floader%2FAbstractSerialStateHolder.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Floader%2FAbstractSerialStateHolder.java?ref=489f564cd5396aafb9b28fef840c49d7bf59ed84",
      "patch": "@@ -19,11 +19,13 @@\n import java.io.ByteArrayOutputStream;\n import java.io.Externalizable;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.InvalidClassException;\n import java.io.ObjectInput;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutput;\n import java.io.ObjectOutputStream;\n+import java.io.ObjectStreamClass;\n import java.io.ObjectStreamException;\n import java.io.StreamCorruptedException;\n import java.util.Arrays;\n@@ -107,8 +109,7 @@ protected final Object readResolve() throws ObjectStreamException {\n     }\n \n     /* First run */\n-    try {\n-      final ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(this.userBeanBytes));\n+    try (final ObjectInputStream in = new LookAheadObjectInputStream(new ByteArrayInputStream(this.userBeanBytes))) {\n       this.userBean = in.readObject();\n       this.unloadedProperties = (Map<String, ResultLoaderMap.LoadPair>) in.readObject();\n       this.objectFactory = (ObjectFactory) in.readObject();\n@@ -129,4 +130,30 @@ protected final Object readResolve() throws ObjectStreamException {\n \n   protected abstract Object createDeserializationProxy(Object target, Map<String, ResultLoaderMap.LoadPair> unloadedProperties, ObjectFactory objectFactory,\n           List<Class<?>> constructorArgTypes, List<Object> constructorArgs);\n+\n+  private static class LookAheadObjectInputStream extends ObjectInputStream {\n+    private static final List<String> blacklist = Arrays.asList(\n+        \"org.apache.commons.collections.functors.InvokerTransformer\",\n+        \"org.apache.commons.collections.functors.InstantiateTransformer\",\n+        \"org.apache.commons.collections4.functors.InvokerTransformer\",\n+        \"org.apache.commons.collections4.functors.InstantiateTransformer\",\n+        \"org.codehaus.groovy.runtime.ConvertedClosure\", \"org.codehaus.groovy.runtime.MethodClosure\",\n+        \"org.springframework.beans.factory.ObjectFactory\",\n+        \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n+\n+    public LookAheadObjectInputStream(InputStream in) throws IOException {\n+      super(in);\n+    }\n+\n+    @Override\n+    protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n+      String className = desc.getName();\n+      if (blacklist.contains(className)) {\n+        throw new InvalidClassException(className, \"Deserialization is not allowed for security reasons. \"\n+            + \"It is strongly recommended to configure the deserialization filter provided by JDK. \"\n+            + \"See http://openjdk.java.net/jeps/290 for the details.\");\n+      }\n+      return super.resolveClass(desc);\n+    }\n+  }\n }",
      "parent_sha": "67a1c4ea5726c605d297398a8ab9a42ab7d4ebf1"
    }
  },
  {
    "oid": "a52d1e1d078ab39dd0bcfce4640634ab69f97e3c",
    "message": "Added a flushStatments after a query to fix issue http://code.google.com/p/mybatis/issues/detail?id=138",
    "date": "2010-11-02T03:31:14Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/a52d1e1d078ab39dd0bcfce4640634ab69f97e3c",
    "details": {
      "sha": "2385638635c1c83f92a36962ad18864158968e88",
      "filename": "src/main/java/org/apache/ibatis/executor/BatchExecutor.java",
      "status": "modified",
      "additions": 11,
      "deletions": 7,
      "changes": 18,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/a52d1e1d078ab39dd0bcfce4640634ab69f97e3c/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2FBatchExecutor.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/a52d1e1d078ab39dd0bcfce4640634ab69f97e3c/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2FBatchExecutor.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2FBatchExecutor.java?ref=a52d1e1d078ab39dd0bcfce4640634ab69f97e3c",
      "patch": "@@ -53,13 +53,17 @@ public int doUpdate(MappedStatement ms, Object parameterObject)\n \r\n   public List doQuery(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler)\r\n       throws SQLException {\r\n-    flushStatements();\r\n-    Configuration configuration = ms.getConfiguration();\r\n-    StatementHandler handler = configuration.newStatementHandler(this, ms, parameterObject, rowBounds, resultHandler);\r\n-    Connection connection = transaction.getConnection();\r\n-    Statement stmt = handler.prepare(connection);\r\n-    handler.parameterize(stmt);\r\n-    return handler.query(stmt, resultHandler);\r\n+    try {\r\n+      flushStatements();\r\n+      Configuration configuration = ms.getConfiguration();\r\n+      StatementHandler handler = configuration.newStatementHandler(this, ms, parameterObject, rowBounds, resultHandler);\r\n+      Connection connection = transaction.getConnection();\r\n+      Statement stmt = handler.prepare(connection);\r\n+      handler.parameterize(stmt);\r\n+      return handler.query(stmt, resultHandler);\r\n+    } finally {\r\n+      flushStatements();\r\n+    }\r\n   }\r\n \r\n   public List<BatchResult> doFlushStatements() throws SQLException {\r",
      "parent_sha": "466a646447fb09de6759b0c951478b0272fb5f6b"
    }
  },
  {
    "oid": "891aa87fe059e8d4971fa3f83f014ec2ef19ff0b",
    "message": "rollback to 3836 (http://code.google.com/p/mybatis/issues/detail?id=53 )",
    "date": "2012-01-04T23:19:14Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/891aa87fe059e8d4971fa3f83f014ec2ef19ff0b",
    "details": {
      "sha": "6fcf108214a7067badbb5ed01be2be0e5da56f71",
      "filename": "src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java",
      "status": "modified",
      "additions": 25,
      "deletions": 110,
      "changes": 135,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/891aa87fe059e8d4971fa3f83f014ec2ef19ff0b/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fjdbc%2FScriptRunner.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/891aa87fe059e8d4971fa3f83f014ec2ef19ff0b/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fjdbc%2FScriptRunner.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fjdbc%2FScriptRunner.java?ref=891aa87fe059e8d4971fa3f83f014ec2ef19ff0b",
      "patch": "@@ -20,25 +20,13 @@\n import java.io.Reader;\r\n import java.io.UnsupportedEncodingException;\r\n import java.sql.*;\r\n-import java.util.regex.Pattern;\r\n \r\n public class ScriptRunner {\r\n \r\n   private static final String LINE_SEPARATOR = System.getProperty(\"line.separator\",\"\\n\");\r\n \r\n   private static final String DEFAULT_DELIMITER = \";\";\r\n \r\n-  private static final String S_N = \"(\\\\s|\\\\n)+\";\r\n-  private static final String IDENTIFIER = \"(\\\\S+|\\\"[^\\\"]+\\\")\";\r\n-  private static final String BLOCK_START = \"(^|\" + S_N + \")\" +\r\n-            \"create\" + S_N +\r\n-            \"(or\" + S_N + \"replace\" + S_N + \")?\" +\r\n-            \"(function|library|package(\" + S_N + \"body)?|procedure|trigger|type)\" + S_N +\r\n-            IDENTIFIER + S_N +\r\n-            \".*\";\r\n-  \r\n-  private final Pattern blockStart = Pattern.compile(BLOCK_START, Pattern.CASE_INSENSITIVE);\r\n-\r\n   private Connection connection;\r\n \r\n   private boolean stopOnError;\r\n@@ -48,7 +36,6 @@ public class ScriptRunner {\n   private PrintWriter logWriter = new PrintWriter(System.out);\r\n   private PrintWriter errorLogWriter = new PrintWriter(System.err);\r\n \r\n-  private String DatabaseProductName;\r\n   private String delimiter = DEFAULT_DELIMITER;\r\n   private boolean fullLineDelimiter = false;\r\n \r\n@@ -85,31 +72,21 @@ public void setFullLineDelimiter(boolean fullLineDelimiter) {\n   }\r\n \r\n   public void runScript(Reader reader) {\r\n+    setAutoCommit();\r\n+\r\n     try {\r\n-      setAutoCommit();\r\n-      DatabaseMetaData md = connection.getMetaData();\r\n-        DatabaseProductName = md.getDatabaseProductName().toUpperCase().trim();\r\n-      try {\r\n-        if (\"ORACLE\".equals(DatabaseProductName)) {\r\n-          executeOracleScript(reader);    \r\n-        } else {\r\n-          if (sendFullScript) {\r\n-            executeFullScript(reader);\r\n-          } else {\r\n-            executeLineByLine(reader);\r\n-          }\r\n-         }\r\n-      } finally {\r\n-        rollbackConnection();\r\n+      if (sendFullScript) {\r\n+        executeFullScript(reader);\r\n+      } else {\r\n+        executeLineByLine(reader);\r\n       }\r\n-    } catch (SQLException e) {\r\n-      String message = \"\\nError retrieving database metadata\\nCause: \" + e;\r\n-      throw new RuntimeSqlException(message, e);\r\n+    } finally {\r\n+      rollbackConnection();\r\n     }\r\n   }\r\n \r\n   private void executeFullScript(Reader reader) {\r\n-    StringBuilder script = new StringBuilder();\r\n+    StringBuffer script = new StringBuffer();\r\n     try {\r\n       BufferedReader lineReader = new BufferedReader(reader);\r\n       String line;\r\n@@ -120,13 +97,14 @@ private void executeFullScript(Reader reader) {\n       executeStatement(script.toString());\r\n       commitConnection();\r\n     } catch (Exception e) {\r\n-      String message = \"\\nError executing: \\n\" + script + \"Cause: \" + e;\r\n+      String message = \"Error executing: \" + script + \".  Cause: \" + e;\r\n+      printlnError(message);\r\n       throw new RuntimeSqlException(message, e);\r\n     }\r\n   }\r\n \r\n   private void executeLineByLine(Reader reader) {\r\n-    StringBuilder command = new StringBuilder();\r\n+    StringBuffer command = new StringBuffer();\r\n     try {\r\n       BufferedReader lineReader = new BufferedReader(reader);\r\n       String line;\r\n@@ -136,83 +114,12 @@ private void executeLineByLine(Reader reader) {\n       commitConnection();\r\n       checkForMissingLineTerminator(command);\r\n     } catch (Exception e) {\r\n-      String message = \"\\nError executing: \\n\" + command + \"Cause: \" + e;\r\n-      throw new RuntimeSqlException(message, e);\r\n-    }\r\n-  }\r\n-\r\n-  private void executeOracleScript(Reader reader) {\r\n-    StringBuilder command = new StringBuilder();\r\n-    try {\r\n-      boolean plsqlMode = false;\r\n-      BufferedReader lineReader = new BufferedReader(reader);\r\n-      String line;\r\n-      while ((line = lineReader.readLine()) != null) {\r\n-        String trimmedLine = line.trim();\r\n-        if (trimmedLine.length() == 0) {\r\n-          continue;\r\n-        }\r\n-        if (trimmedLine.matches(\"[/.]\")) {\r\n-          /*\r\n-            Terminate PL/SQL subprograms by entering a period (.) by itself on\r\n-            a new line. You can also terminate and execute a PL/SQL subprogram\r\n-            by entering a slash (/) by itself on a new line.\r\n-          */\r\n-          println(command);\r\n-          executeStatement(command.toString().trim());\r\n-          plsqlMode = false;\r\n-          command.setLength(0);\r\n-        } else if (!plsqlMode &&\r\n-                    (blockStart.matcher(command).find() ||\r\n-                     \"begin\".equalsIgnoreCase(line) ||\r\n-                     \"declare\".equalsIgnoreCase(line)\r\n-                    )\r\n-                  ) {\r\n-          plsqlMode = true;\r\n-          command.append(line);\r\n-          command.append(LINE_SEPARATOR);\r\n-        } else if (!plsqlMode &&\r\n-                    ( (\"exit\" + delimiter).equalsIgnoreCase(line) ||\r\n-                       \"exit\".equalsIgnoreCase(line)\r\n-                    )\r\n-                  ) {\r\n-          return;\r\n-        } else if (!plsqlMode && line.endsWith(delimiter)) {\r\n-          command.append(line.substring(0, line.lastIndexOf(delimiter)));\r\n-          println(command);\r\n-          executeStatement(command.toString().trim());\r\n-          command.setLength(0);\r\n-        } else {\r\n-          command.append(line);\r\n-          command.append(LINE_SEPARATOR);\r\n-        }\r\n-      }\r\n-      // Check to see if we have an unexecuted statement in command.\r\n-      if (command.length() > 0) {\r\n-        println(command);\r\n-        executeStatement(command.toString().trim());\r\n-      }\r\n-      commitConnection();\r\n-      checkForMissingLineTerminator(command);\r\n-    } catch (Exception e) {\r\n-      String message = \"\\nError executing: \\n\" + command + \"Cause: \" + e;\r\n+      String message = \"Error executing: \" + command + \".  Cause: \" + e;\r\n+      printlnError(message);\r\n       throw new RuntimeSqlException(message, e);\r\n     }\r\n   }\r\n \r\n-  public void run(String sql) throws SQLException {\r\n-    Statement stmt = connection.createStatement();\r\n-    try {\r\n-      stmt.execute(sql);\r\n-    } finally {\r\n-      try {\r\n-        stmt.close();\r\n-      } catch (SQLException e) {\r\n-        //ignore\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n   public void closeConnection() {\r\n     try {\r\n       connection.close();\r\n@@ -251,15 +158,17 @@ private void rollbackConnection() {\n     }\r\n   }\r\n \r\n-  private void checkForMissingLineTerminator(StringBuilder command) {\r\n+  private void checkForMissingLineTerminator(StringBuffer command) {\r\n     if (command != null && command.toString().trim().length() > 0) {\r\n       throw new RuntimeSqlException(\"Line missing end-of-line terminator (\" + delimiter + \") => \" + command);\r\n     }\r\n   }\r\n \r\n-  private StringBuilder handleLine(StringBuilder command, String line) throws SQLException, UnsupportedEncodingException {\r\n+  private StringBuffer handleLine(StringBuffer command, String line) throws SQLException, UnsupportedEncodingException {\r\n     String trimmedLine = line.trim();\r\n-    if (commandReadyToExecute(trimmedLine)) {\r\n+    if (lineIsComment(trimmedLine)) {\r\n+      println(trimmedLine);\r\n+    } else if (commandReadyToExecute(trimmedLine)) {\r\n       command.append(line.substring(0, line.lastIndexOf(delimiter)));\r\n       command.append(LINE_SEPARATOR);\r\n       println(command);\r\n@@ -272,6 +181,10 @@ private StringBuilder handleLine(StringBuilder command, String line) throws SQLE\n     return command;\r\n   }\r\n \r\n+  private boolean lineIsComment(String trimmedLine) {\r\n+    return trimmedLine.startsWith(\"//\") || trimmedLine.startsWith(\"--\");\r\n+  }\r\n+\r\n   private boolean commandReadyToExecute(String trimmedLine) {\r\n     return !fullLineDelimiter && trimmedLine.endsWith(delimiter)\r\n         || fullLineDelimiter && trimmedLine.equals(delimiter);\r\n@@ -286,6 +199,8 @@ private void executeStatement(String command) throws SQLException, UnsupportedEn\n       try {\r\n         hasResults = statement.execute(command);\r\n       } catch (SQLException e) {\r\n+        String message = \"Error executing: \" + command + \".  Cause: \" + e;\r\n+        printlnError(message);\r\n       }\r\n     }\r\n     printResults(statement, hasResults);\r",
      "parent_sha": "15605bdf11cbc44086a416c7f2007f980752f736"
    }
  },
  {
    "oid": "f801726138da7e3af5f11ec157a0fca2cc22192a",
    "message": "Minor adjustments for cases where constructor mapping does not use actual constructor",
    "date": "2025-01-24T23:47:03Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/f801726138da7e3af5f11ec157a0fca2cc22192a",
    "details": {
      "sha": "7268471e79c07f879d01144c1611ddef1ac0e928",
      "filename": "src/main/java/org/apache/ibatis/builder/ResultMappingConstructorResolver.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/f801726138da7e3af5f11ec157a0fca2cc22192a/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2FResultMappingConstructorResolver.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/f801726138da7e3af5f11ec157a0fca2cc22192a/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2FResultMappingConstructorResolver.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2FResultMappingConstructorResolver.java?ref=f801726138da7e3af5f11ec157a0fca2cc22192a",
      "patch": "@@ -98,6 +98,10 @@ public List<ResultMapping> resolveWithConstructor() {\n     final List<ConstructorMetaInfo> matchingConstructorCandidates = retrieveConstructorCandidates(\n         constructorResultMappings.size());\n \n+    if (matchingConstructorCandidates.isEmpty()) {\n+      return constructorResultMappings;\n+    }\n+\n     // extract the property names we have\n     final Set<String> constructorArgsByName = constructorResultMappings.stream().map(ResultMapping::getProperty)\n         .filter(Objects::nonNull).collect(Collectors.toCollection(LinkedHashSet::new));\n@@ -123,11 +127,9 @@ public List<ResultMapping> resolveWithConstructor() {\n             + \". Note that 'javaType' is required when there is ambiguous constructors or there is no writable property with the same name ('name' is optional, BTW). There is more info in the debug log.\");\n       } else {\n         if (log.isDebugEnabled()) {\n-          log.debug(\"Constructor for '\" + resultMapId\n-              + \"' could not be resolved, continuing, but this may result in a mapping exception later\");\n+          log.debug(\"Constructor for '\" + resultMapId + \"' could not be resolved.\");\n         }\n-        // return un-modified original mappings (maybe have this as a config flag, as this will result in a runtime\n-        // exception eventually\n+        // return un-modified original mappings\n         return constructorResultMappings;\n       }\n     }",
      "parent_sha": "be848e4d7f83b7c440ae344d1872420f0ace712b"
    }
  },
  {
    "oid": "14f0f5d285fd9bfa09615f258afcc29847757d19",
    "message": "`resultMap.hasResultMapsUsingConstructorCollection` should stay false if type handler is specified",
    "date": "2025-01-06T19:45:19Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/14f0f5d285fd9bfa09615f258afcc29847757d19",
    "details": {
      "sha": "a7c8ebe494ac7691cb9b7a8465a30df80ce5b0de",
      "filename": "src/main/java/org/apache/ibatis/mapping/ResultMap.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/14f0f5d285fd9bfa09615f258afcc29847757d19/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fmapping%2FResultMap.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/14f0f5d285fd9bfa09615f258afcc29847757d19/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fmapping%2FResultMap.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fmapping%2FResultMap.java?ref=14f0f5d285fd9bfa09615f258afcc29847757d19",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- *    Copyright 2009-2024 the original author or authors.\n+ *    Copyright 2009-2025 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.\n@@ -116,7 +116,7 @@ public ResultMap build() {\n           // #101\n           Class<?> javaType = resultMapping.getJavaType();\n           resultMap.hasResultMapsUsingConstructorCollection = resultMap.hasResultMapsUsingConstructorCollection\n-              || (resultMapping.getNestedQueryId() == null && javaType != null\n+              || (resultMapping.getNestedQueryId() == null && resultMapping.getTypeHandler() == null && javaType != null\n                   && resultMap.configuration.getObjectFactory().isCollection(javaType));\n \n           if (resultMapping.getProperty() != null) {",
      "parent_sha": "6e639f612efcaa3bc23e002be91680d79d084263"
    }
  },
  {
    "oid": "d6a2d6278cfc7aaa7e8abf6127966d69caab6748",
    "message": "fix: check lock status",
    "date": "2022-07-16T15:35:52Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/d6a2d6278cfc7aaa7e8abf6127966d69caab6748",
    "details": {
      "sha": "9d98b9446c8a9b4b7406a0caef580673b809bcf6",
      "filename": "src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/d6a2d6278cfc7aaa7e8abf6127966d69caab6748/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fdatasource%2Fpooled%2FPooledDataSource.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/d6a2d6278cfc7aaa7e8abf6127966d69caab6748/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fdatasource%2Fpooled%2FPooledDataSource.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fdatasource%2Fpooled%2FPooledDataSource.java?ref=d6a2d6278cfc7aaa7e8abf6127966d69caab6748",
      "patch": "@@ -331,8 +331,8 @@ public int getPoolPingConnectionsNotUsedFor() {\n    * Closes all active and idle connections in the pool.\n    */\n   public void forceCloseAll() {\n-    fairLock.lock();\n     try {\n+      fairLock.lock();\n       expectedConnectionTypeCode = assembleConnectionTypeCode(dataSource.getUrl(), dataSource.getUsername(), dataSource.getPassword());\n       for (int i = state.activeConnections.size(); i > 0; i--) {\n         try {\n@@ -381,7 +381,6 @@ private int assembleConnectionTypeCode(String url, String username, String passw\n   }\n \n   protected void pushConnection(PooledConnection conn) throws SQLException {\n-\n     try {\n       fairLock.lock();\n       state.activeConnections.remove(conn);\n@@ -399,7 +398,9 @@ protected void pushConnection(PooledConnection conn) throws SQLException {\n           if (log.isDebugEnabled()) {\n             log.debug(\"Returned connection \" + newConn.getRealHashCode() + \" to pool.\");\n           }\n-          fairLock.unlock();\n+          if (fairLock.isLocked()) {\n+            fairLock.unlock();\n+          }\n         } else {\n           state.accumulatedCheckoutTime += conn.getCheckoutTime();\n           if (!conn.getRealConnection().getAutoCommit()) {\n@@ -431,8 +432,8 @@ private PooledConnection popConnection(String username, String password) throws\n     int localBadConnectionCount = 0;\n \n     while (conn == null) {\n-      fairLock.lock();\n       try {\n+        fairLock.lock();\n         if (!state.idleConnections.isEmpty()) {\n           // Pool has available connection\n           conn = state.idleConnections.remove(0);",
      "parent_sha": "8b4f303045c0d6f01efd8f9d195d193b2e02575f"
    }
  },
  {
    "oid": "b4644c74b9afb6195d4d4ee98af916ccac7e5020",
    "message": "Minor refactoring.",
    "date": "2017-01-27T15:20:48Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/b4644c74b9afb6195d4d4ee98af916ccac7e5020",
    "details": {
      "sha": "baac033a7dbf7b19fec68d470d629c23ac11f679",
      "filename": "src/main/java/org/apache/ibatis/mapping/ResultMap.java",
      "status": "modified",
      "additions": 16,
      "deletions": 19,
      "changes": 35,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/b4644c74b9afb6195d4d4ee98af916ccac7e5020/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fmapping%2FResultMap.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/b4644c74b9afb6195d4d4ee98af916ccac7e5020/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fmapping%2FResultMap.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fmapping%2FResultMap.java?ref=b4644c74b9afb6195d4d4ee98af916ccac7e5020",
      "patch": "@@ -125,11 +125,20 @@ public ResultMap build() {\n         resultMap.idResultMappings.addAll(resultMap.resultMappings);\n       }\n       if (!constructorArgNames.isEmpty()) {\n-        if (!sortConstructorResultMapping(constructorArgNames)) {\n+        final List<String> actualArgNames = argNamesOfMatchingConstructor(constructorArgNames);\n+        if (actualArgNames == null) {\n           throw new BuilderException(\"Failed to find a constructor in '\"\n               + resultMap.getType().getName() + \"' by arg names \" + constructorArgNames\n               + \". There might be more info in debug log.\");\n         }\n+        Collections.sort(resultMap.constructorResultMappings, new Comparator<ResultMapping>() {\n+          @Override\n+          public int compare(ResultMapping o1, ResultMapping o2) {\n+            int paramIdx1 = actualArgNames.indexOf(o1.getProperty());\n+            int paramIdx2 = actualArgNames.indexOf(o2.getProperty());\n+            return paramIdx1 - paramIdx2;\n+          }\n+        });\n       }\n       // lock down collections\n       resultMap.resultMappings = Collections.unmodifiableList(resultMap.resultMappings);\n@@ -140,31 +149,19 @@ public ResultMap build() {\n       return resultMap;\n     }\n \n-    private boolean sortConstructorResultMapping(final List<String> constructorArgNames) {\n+    private List<String> argNamesOfMatchingConstructor(List<String> constructorArgNames) {\n       Constructor<?>[] constructors = resultMap.type.getDeclaredConstructors();\n-      // Search constructors by arg names and types.\n       for (Constructor<?> constructor : constructors) {\n         Class<?>[] paramTypes = constructor.getParameterTypes();\n         if (constructorArgNames.size() == paramTypes.length) {\n-          final List<String> paramNames = getArgNames(constructor);\n-          if (constructorArgNames.containsAll(paramNames)) {\n-            if (!argTypesMatch(constructorArgNames, paramTypes, paramNames)) {\n-              continue;\n-            }\n-            // Found a matching constructor.\n-            Collections.sort(resultMap.constructorResultMappings, new Comparator<ResultMapping>() {\n-              @Override\n-              public int compare(ResultMapping o1, ResultMapping o2) {\n-                int paramIdx1 = paramNames.indexOf(o1.getProperty());\n-                int paramIdx2 = paramNames.indexOf(o2.getProperty());\n-                return paramIdx1 - paramIdx2;\n-              }\n-            });\n-            return true;\n+          List<String> paramNames = getArgNames(constructor);\n+          if (constructorArgNames.containsAll(paramNames)\n+              && argTypesMatch(constructorArgNames, paramTypes, paramNames)) {\n+            return paramNames;\n           }\n         }\n       }\n-      return false;\n+      return null;\n     }\n \n     private boolean argTypesMatch(final List<String> constructorArgNames,",
      "parent_sha": "1fe27a1e15edb1fe8de6692c539b1469bc47ec8c"
    }
  },
  {
    "oid": "b89efb6a243135a14207cf27d47b305af06a3c68",
    "message": "removed @Ignore from test",
    "date": "2012-03-17T20:55:06Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/b89efb6a243135a14207cf27d47b305af06a3c68",
    "details": {
      "sha": "ecbb3a67d1923e6feaa7cbca4ebe661cb375298a",
      "filename": "src/test/java/org/apache/ibatis/binding/BindingTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/b89efb6a243135a14207cf27d47b305af06a3c68/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fbinding%2FBindingTest.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/b89efb6a243135a14207cf27d47b305af06a3c68/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fbinding%2FBindingTest.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fbinding%2FBindingTest.java?ref=b89efb6a243135a14207cf27d47b305af06a3c68",
      "patch": "@@ -564,8 +564,7 @@ public void shouldFailWhenSelectingOneBlogWithNullParam() {\n     }\r\n   }\r\n \r\n-  @Ignore // Decided that maps are dynamic so no existent params do not fail\r\n-  @Test(expected = PersistenceException.class)\r\n+  @Test // Decided that maps are dynamic so no existent params do not fail\r\n   public void shouldFailWhenSelectingOneBlogWithNonExistentNestedParam() {\r\n     SqlSession session = sqlSessionFactory.openSession();\r\n     try {\r",
      "parent_sha": "5d24b6b2e9f1ac01d678f194bd1a876a103054fc"
    }
  },
  {
    "oid": "9a19aed74474cfb698152a3f7a4e673ee2b484bd",
    "message": "Skip Object when collecting class methods (#1180)\n\nAs a side effect, this might reduce the chance of 'illegal reflective access' warnings on Java 9. #1156",
    "date": "2018-02-01T09:06:31Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/9a19aed74474cfb698152a3f7a4e673ee2b484bd",
    "details": {
      "sha": "c208cf23b3def8e248205f6894e2fc960fc14206",
      "filename": "src/main/java/org/apache/ibatis/reflection/Reflector.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/9a19aed74474cfb698152a3f7a4e673ee2b484bd/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FReflector.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/9a19aed74474cfb698152a3f7a4e673ee2b484bd/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FReflector.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FReflector.java?ref=9a19aed74474cfb698152a3f7a4e673ee2b484bd",
      "patch": "@@ -1,5 +1,5 @@\n /**\n- *    Copyright 2009-2017 the original author or authors.\n+ *    Copyright 2009-2018 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.\n@@ -313,7 +313,7 @@ private boolean isValidPropertyName(String name) {\n   private Method[] getClassMethods(Class<?> cls) {\n     Map<String, Method> uniqueMethods = new HashMap<String, Method>();\n     Class<?> currentClass = cls;\n-    while (currentClass != null) {\n+    while (currentClass != null && currentClass != Object.class) {\n       addUniqueMethods(uniqueMethods, currentClass.getDeclaredMethods());\n \n       // we also need to look for interface methods -",
      "parent_sha": "b4d4e299e9a1184004ed7919c9efaf4c41c28c64"
    }
  },
  {
    "oid": "42c49ab469ecdde059735019c61cb2c8da3ed57d",
    "message": "wrong error message - TypeReference is not always a TypeHandler",
    "date": "2012-05-03T08:02:54Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/42c49ab469ecdde059735019c61cb2c8da3ed57d",
    "details": {
      "sha": "b2801407a4aa0a2cbbdd7e9b9ddf23131e9de911",
      "filename": "src/main/java/org/apache/ibatis/type/TypeReference.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/42c49ab469ecdde059735019c61cb2c8da3ed57d/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Ftype%2FTypeReference.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/42c49ab469ecdde059735019c61cb2c8da3ed57d/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Ftype%2FTypeReference.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Ftype%2FTypeReference.java?ref=42c49ab469ecdde059735019c61cb2c8da3ed57d",
      "patch": "@@ -31,7 +31,7 @@ public abstract class TypeReference<T> {\n   protected TypeReference() {\n     Type superclass = getClass().getGenericSuperclass();\n     if (superclass instanceof Class) {\n-      throw new TypeException(\"TypeHandler '\" + getClass() + \"' extends TypeReference but misses the type parameter. \"\n+      throw new TypeException(\"'\" + getClass() + \"' extends TypeReference but misses the type parameter. \"\n         + \"Remove the extension or add a type parameter to it.\");\n     }\n     rawType = ((ParameterizedType) superclass).getActualTypeArguments()[0];",
      "parent_sha": "752bf7547243e07286f8bde29dc9e3e7a8be4574"
    }
  },
  {
    "oid": "357d58a70535e250554d5d3c73076fd0935d1662",
    "message": "forgot to remove the TODO comment...",
    "date": "2012-01-23T16:20:45Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/357d58a70535e250554d5d3c73076fd0935d1662",
    "details": {
      "sha": "d7034821076e97a41749c3c36be2d41e95551f46",
      "filename": "src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/357d58a70535e250554d5d3c73076fd0935d1662/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FFastResultSetHandler.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/357d58a70535e250554d5d3c73076fd0935d1662/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FFastResultSetHandler.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FFastResultSetHandler.java?ref=357d58a70535e250554d5d3c73076fd0935d1662",
      "patch": "@@ -114,7 +114,7 @@ protected void handleRefCursorOutputParameter(CallableStatement cs, ParameterMap\n       final ResultMap resultMap = configuration.getResultMap(resultMapId);\r\n       final DefaultResultHandler resultHandler = new DefaultResultHandler(configuration.getDefaultListResultHandlerType());\r\n       ResultColumnCache resultColumnCache = new ResultColumnCache(cs.getMetaData(), configuration);\r\n-      handleRowValues(rs, resultMap, resultHandler, new RowBounds(), resultColumnCache); // TODO check this regarding ResultColumnCache\r\n+      handleRowValues(rs, resultMap, resultHandler, new RowBounds(), resultColumnCache);\r\n       metaParam.setValue(parameterMapping.getProperty(), resultHandler.getResultList());\r\n     } else {\r\n       throw new ExecutorException(\"Parameter requires ResultMap for output types of java.sql.ResultSet\");\r",
      "parent_sha": "f828d0f9880aa4d5717553d25f19ab277623c7e9"
    }
  },
  {
    "oid": "4503d61959d6d7769370c0a19703d8fe1a79674a",
    "message": "Fix Word Spelling",
    "date": "2020-12-11T12:19:43Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/4503d61959d6d7769370c0a19703d8fe1a79674a",
    "details": {
      "sha": "acfb3a096b3a17e5357173900a085705773b98d7",
      "filename": "src/main/java/org/apache/ibatis/session/Configuration.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/4503d61959d6d7769370c0a19703d8fe1a79674a/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FConfiguration.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/4503d61959d6d7769370c0a19703d8fe1a79674a/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FConfiguration.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FConfiguration.java?ref=4503d61959d6d7769370c0a19703d8fe1a79674a",
      "patch": "@@ -627,9 +627,9 @@ public LanguageDriver getLanguageDriver(Class<? extends LanguageDriver> langClas\n   }\n \n   /**\n-   * Gets the default scripting lanuage instance.\n+   * Gets the default scripting language instance.\n    *\n-   * @return the default scripting lanuage instance\n+   * @return the default scripting language instance\n    * @deprecated Use {@link #getDefaultScriptingLanguageInstance()}\n    */\n   @Deprecated",
      "parent_sha": "6af8646990584417bb5d97023cbbc9deebe8a479"
    }
  },
  {
    "oid": "df6f14b5978c0abd68379ced6ab70cc44ad8aa50",
    "message": "Order methods in expected order\n\nMove private constructor to expected location.",
    "date": "2014-09-22T01:40:16Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/df6f14b5978c0abd68379ced6ab70cc44ad8aa50",
    "details": {
      "sha": "d91c91f1bccbf8bcc866892f521db9cd8eebb157",
      "filename": "src/main/java/org/apache/ibatis/session/SqlSessionManager.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/df6f14b5978c0abd68379ced6ab70cc44ad8aa50/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FSqlSessionManager.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/df6f14b5978c0abd68379ced6ab70cc44ad8aa50/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FSqlSessionManager.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FSqlSessionManager.java?ref=df6f14b5978c0abd68379ced6ab70cc44ad8aa50",
      "patch": "@@ -38,6 +38,14 @@ public class SqlSessionManager implements SqlSessionFactory, SqlSession {\n \n   private ThreadLocal<SqlSession> localSqlSession = new ThreadLocal<SqlSession>();\n \n+  private SqlSessionManager(SqlSessionFactory sqlSessionFactory) {\n+    this.sqlSessionFactory = sqlSessionFactory;\n+    this.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(\n+        SqlSessionFactory.class.getClassLoader(),\n+        new Class[]{SqlSession.class},\n+        new SqlSessionInterceptor());\n+  }\n+\n   public static SqlSessionManager newInstance(Reader reader) {\n     return new SqlSessionManager(new SqlSessionFactoryBuilder().build(reader, null, null));\n   }\n@@ -66,14 +74,6 @@ public static SqlSessionManager newInstance(SqlSessionFactory sqlSessionFactory)\n     return new SqlSessionManager(sqlSessionFactory);\n   }\n \n-  private SqlSessionManager(SqlSessionFactory sqlSessionFactory) {\n-    this.sqlSessionFactory = sqlSessionFactory;\n-    this.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(\n-        SqlSessionFactory.class.getClassLoader(),\n-        new Class[]{SqlSession.class},\n-        new SqlSessionInterceptor());\n-  }\n-\n   public void startManagedSession() {\n     this.localSqlSession.set(openSession());\n   }",
      "parent_sha": "2e043d90639c6fddb14bef52c7fad71ff8ed8909"
    }
  },
  {
    "oid": "bd836e13941320ee23ba745511e0271425ab6f8b",
    "message": "always use ObjectBuilder to create new objects (copy&paste from MapperMethod)",
    "date": "2012-02-04T16:06:16Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/bd836e13941320ee23ba745511e0271425ab6f8b",
    "details": {
      "sha": "4311e7b423c55bc76f10ad386a8822198e9a0596",
      "filename": "src/main/java/org/apache/ibatis/executor/loader/ResultLoader.java",
      "status": "modified",
      "additions": 20,
      "deletions": 22,
      "changes": 42,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/bd836e13941320ee23ba745511e0271425ab6f8b/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Floader%2FResultLoader.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/bd836e13941320ee23ba745511e0271425ab6f8b/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Floader%2FResultLoader.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Floader%2FResultLoader.java?ref=bd836e13941320ee23ba745511e0271425ab6f8b",
      "patch": "@@ -1,5 +1,5 @@\n /*\r\n- *    Copyright 2009-2011 The MyBatis Team\r\n+ *    Copyright 2009-2012 The MyBatis Team\r\n  *\r\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  *    you may not use this file except in compliance with the License.\r\n@@ -17,11 +17,7 @@\n \r\n import java.sql.SQLException;\r\n import java.util.Collection;\r\n-import java.util.HashSet;\r\n import java.util.List;\r\n-import java.util.Set;\r\n-import java.util.SortedSet;\r\n-import java.util.TreeSet;\r\n \r\n import javax.sql.DataSource;\r\n \r\n@@ -37,9 +33,6 @@\n \r\n public class ResultLoader {\r\n \r\n-  protected static final Class<?>[] LIST_INTERFACES = new Class<?>[]{List.class};\r\n-  protected static final Class<?>[] SET_INTERFACES = new Class<?>[]{Set.class};\r\n-\r\n   protected final Configuration configuration;\r\n   protected final Executor executor;\r\n   protected final MappedStatement mappedStatement;\r\n@@ -57,14 +50,12 @@ public ResultLoader(Configuration config, Executor executor, MappedStatement map\n     this.targetType = targetType;\r\n   }\r\n \r\n-  public Object loadResult() throws SQLException {\r\n-    List<Object> list = selectList();\r\n-    if (targetType != null && SortedSet.class.isAssignableFrom(targetType)) { // issue #426 support TreeSet\r\n-      resultObject = new TreeSet<Object>(list);\r\n-    } else if (targetType != null && Set.class.isAssignableFrom(targetType)) {\r\n-      resultObject = new HashSet<Object>(list);\r\n-    } else if (targetType != null && Collection.class.isAssignableFrom(targetType)) {\r\n+  public <E> Object loadResult() throws SQLException {\r\n+    List<E> list = selectList();\r\n+    if (targetType != null && targetType.isAssignableFrom(list.getClass())) {\r\n       resultObject = list;\r\n+    } else if (targetType != null && Collection.class.isAssignableFrom(targetType)) {\r\n+      resultObject = convertToDeclaredCollection(list, targetType);\r\n     } else if (targetType != null && targetType.isArray()) {\r\n       resultObject = listToArray(list, targetType.getComponentType());\r\n     } else {\r\n@@ -83,7 +74,7 @@ private <E> List<E> selectList() throws SQLException {\n       localExecutor = newExecutor();\r\n     }\r\n     try {\r\n-      return localExecutor.<E>query(mappedStatement, parameterObject, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);\r\n+      return localExecutor.<E> query(mappedStatement, parameterObject, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);\r\n     } finally {\r\n       if (localExecutor != executor) {\r\n         localExecutor.close(false);\r\n@@ -93,8 +84,7 @@ private <E> List<E> selectList() throws SQLException {\n \r\n   private Executor newExecutor() throws SQLException {\r\n     Environment environment = configuration.getEnvironment();\r\n-    if (environment == null)\r\n-      throw new ExecutorException(\"ResultLoader could not load lazily.  Environment was not configured.\");\r\n+    if (environment == null) throw new ExecutorException(\"ResultLoader could not load lazily.  Environment was not configured.\");\r\n     DataSource ds = environment.getDataSource();\r\n     if (ds == null) throw new ExecutorException(\"ResultLoader could not load lazily.  DataSource was not configured.\");\r\n     final TransactionFactory transactionFactory = environment.getTransactionFactory();\r\n@@ -106,10 +96,18 @@ public boolean wasNull() {\n     return resultObject == null;\r\n   }\r\n \r\n-  private Object[] listToArray(List<Object> list, Class<?> type) {\r\n-    Object array = java.lang.reflect.Array.newInstance(type, list.size());\r\n-    array = list.toArray((Object[]) array);\r\n-    return (Object[]) array;\r\n+  @SuppressWarnings(\"unchecked\")\r\n+  private <E> E[] listToArray(List<E> list, Class<?> type) {\r\n+    E[] array = (E[]) java.lang.reflect.Array.newInstance(type, list.size());\r\n+    array = list.toArray(array);\r\n+    return array;\r\n+  }\r\n+\r\n+  @SuppressWarnings(\"unchecked\")\r\n+  private <E> Collection<E> convertToDeclaredCollection(List<E> result, Class<?> type) {\r\n+    Collection<E> collection = (Collection<E>) configuration.getObjectFactory().create(type);\r\n+    collection.addAll(result);\r\n+    return collection;\r\n   }\r\n \r\n }\r",
      "parent_sha": "0229b3783ef795657366b1fac2d12746d374b103"
    }
  },
  {
    "oid": "53573207cea484f0c828417bf3add877db54a00d",
    "message": "[ci] Use proper modifier order",
    "date": "2020-03-14T22:41:42Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/53573207cea484f0c828417bf3add877db54a00d",
    "details": {
      "sha": "9ef8cc4d2a00ee2008eccfca92a59d70ee267f98",
      "filename": "src/main/java/org/apache/ibatis/session/Configuration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/53573207cea484f0c828417bf3add877db54a00d/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FConfiguration.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/53573207cea484f0c828417bf3add877db54a00d/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FConfiguration.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FConfiguration.java?ref=53573207cea484f0c828417bf3add877db54a00d",
      "patch": "@@ -971,7 +971,7 @@ public V get(Object key) {\n     }\n \n     protected static class Ambiguity {\n-      final private String subject;\n+      private final String subject;\n \n       public Ambiguity(String subject) {\n         this.subject = subject;",
      "parent_sha": "0707b070bda65f3fb61542b20420c577c0d0dc10"
    }
  },
  {
    "oid": "5ae537cadd16bf617b9f4507e494d44ce63ec002",
    "message": "Optimize the loop of resultMaps in Configuration",
    "date": "2023-03-04T13:55:51Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/5ae537cadd16bf617b9f4507e494d44ce63ec002",
    "details": {
      "sha": "4df862eefaee23c769242e3b8681eca06ec3cebe",
      "filename": "src/main/java/org/apache/ibatis/session/Configuration.java",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/5ae537cadd16bf617b9f4507e494d44ce63ec002/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FConfiguration.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/5ae537cadd16bf617b9f4507e494d44ce63ec002/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FConfiguration.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FConfiguration.java?ref=5ae537cadd16bf617b9f4507e494d44ce63ec002",
      "patch": "@@ -990,14 +990,14 @@ protected String extractNamespace(String statementId) {\n   // Slow but a one time cost. A better solution is welcome.\n   protected void checkGloballyForDiscriminatedNestedResultMaps(ResultMap rm) {\n     if (rm.hasNestedResultMaps()) {\n-      for (Map.Entry<String, ResultMap> entry : resultMaps.entrySet()) {\n-        Object value = entry.getValue();\n-        if (value instanceof ResultMap) {\n-          ResultMap entryResultMap = (ResultMap) value;\n+      final String resultMapId = rm.getId();\n+      for (Object resultMapObject : resultMaps.values()) {\n+        if (resultMapObject instanceof ResultMap) {\n+          ResultMap entryResultMap = (ResultMap) resultMapObject;\n           if (!entryResultMap.hasNestedResultMaps() && entryResultMap.getDiscriminator() != null) {\n             Collection<String> discriminatedResultMapNames = entryResultMap.getDiscriminator().getDiscriminatorMap()\n                 .values();\n-            if (discriminatedResultMapNames.contains(rm.getId())) {\n+            if (discriminatedResultMapNames.contains(resultMapId)) {\n               entryResultMap.forceNestedResultMaps();\n             }\n           }\n@@ -1009,8 +1009,7 @@ protected void checkGloballyForDiscriminatedNestedResultMaps(ResultMap rm) {\n   // Slow but a one time cost. A better solution is welcome.\n   protected void checkLocallyForDiscriminatedNestedResultMaps(ResultMap rm) {\n     if (!rm.hasNestedResultMaps() && rm.getDiscriminator() != null) {\n-      for (Map.Entry<String, String> entry : rm.getDiscriminator().getDiscriminatorMap().entrySet()) {\n-        String discriminatedResultMapName = entry.getValue();\n+      for (String discriminatedResultMapName : rm.getDiscriminator().getDiscriminatorMap().values()) {\n         if (hasResultMap(discriminatedResultMapName)) {\n           ResultMap discriminatedResultMap = resultMaps.get(discriminatedResultMapName);\n           if (discriminatedResultMap.hasNestedResultMaps()) {",
      "parent_sha": "acb63bf375f0611e55e9317c34f3d50dff6a9ed7"
    }
  },
  {
    "oid": "1595faee36c82b1dfc11dc172be1ad3234fa0843",
    "message": "License year [ci skip]",
    "date": "2019-07-14T14:09:21Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/1595faee36c82b1dfc11dc172be1ad3234fa0843",
    "details": {
      "sha": "52f1436fbd58287c8848dd36e01cca8bd0fcf401",
      "filename": "src/test/java/org/apache/ibatis/submitted/foreach_map/NestedBeanMapEntry.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/1595faee36c82b1dfc11dc172be1ad3234fa0843/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fsubmitted%2Fforeach_map%2FNestedBeanMapEntry.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/1595faee36c82b1dfc11dc172be1ad3234fa0843/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fsubmitted%2Fforeach_map%2FNestedBeanMapEntry.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fsubmitted%2Fforeach_map%2FNestedBeanMapEntry.java?ref=1595faee36c82b1dfc11dc172be1ad3234fa0843",
      "patch": "@@ -1,5 +1,5 @@\n /**\n- *    Copyright 2009-2015 the original author or authors.\n+ *    Copyright 2009-2019 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.",
      "parent_sha": "3275c96b611c6cf52b9bd3af37e57e0bce88f058"
    }
  },
  {
    "oid": "61f777b72db078ddedadf9b4c4e6f87b05be5705",
    "message": "renamed inner class",
    "date": "2012-04-09T12:44:19Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/61f777b72db078ddedadf9b4c4e6f87b05be5705",
    "details": {
      "sha": "1af4fef34d72fa7bec6315302b8e597dc1c41701",
      "filename": "src/main/java/org/apache/ibatis/cache/decorators/SerializedCache.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/61f777b72db078ddedadf9b4c4e6f87b05be5705/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fcache%2Fdecorators%2FSerializedCache.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/61f777b72db078ddedadf9b4c4e6f87b05be5705/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fcache%2Fdecorators%2FSerializedCache.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fcache%2Fdecorators%2FSerializedCache.java?ref=61f777b72db078ddedadf9b4c4e6f87b05be5705",
      "patch": "@@ -95,7 +95,7 @@ private Serializable deserialize(byte[] value) {\n     Serializable result;\r\n     try {\r\n       ByteArrayInputStream bis = new ByteArrayInputStream((byte[]) value);\r\n-      ObjectInputStream ois = new ThreadContextObjectInputStream(bis);\r\n+      ObjectInputStream ois = new CustomObjectInputStream(bis);\r\n       result = (Serializable) ois.readObject();\r\n       ois.close();\r\n     } catch (Exception e) {\r\n@@ -104,9 +104,9 @@ private Serializable deserialize(byte[] value) {\n     return result;\r\n   }\r\n \r\n-  public static class ThreadContextObjectInputStream extends ObjectInputStream {\r\n+  public static class CustomObjectInputStream extends ObjectInputStream {\r\n \r\n-    public ThreadContextObjectInputStream(InputStream in) throws IOException {\r\n+    public CustomObjectInputStream(InputStream in) throws IOException {\r\n       super(in);\r\n     }\r\n \r",
      "parent_sha": "93a8f5a514e32153a2d503a22386439a5a4ce47f"
    }
  },
  {
    "oid": "43b7ae60ffdd384aef13b5fd4af89bc1d25c6651",
    "message": "minor test updates to check that insert/delete/update returns the right value",
    "date": "2012-05-13T11:31:57Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/43b7ae60ffdd384aef13b5fd4af89bc1d25c6651",
    "details": {
      "sha": "18f9d3d23b197b726aa9cb6d2058fda1211a1817",
      "filename": "src/test/java/org/apache/ibatis/session/SqlSessionTest.java",
      "status": "modified",
      "additions": 11,
      "deletions": 8,
      "changes": 19,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/43b7ae60ffdd384aef13b5fd4af89bc1d25c6651/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FSqlSessionTest.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/43b7ae60ffdd384aef13b5fd4af89bc1d25c6651/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FSqlSessionTest.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FSqlSessionTest.java?ref=43b7ae60ffdd384aef13b5fd4af89bc1d25c6651",
      "patch": "@@ -248,7 +248,8 @@ public void shouldInsertAuthor() throws Exception {\n     SqlSession session = sqlMapper.openSession();\n     try {\n       Author expected = new Author(500, \"cbegin\", \"******\", \"cbegin@somewhere.com\", \"Something...\", null);\n-      session.insert(\"domain.blog.mappers.AuthorMapper.insertAuthor\", expected);\n+      int updates = session.insert(\"domain.blog.mappers.AuthorMapper.insertAuthor\", expected);\n+      assertEquals(1, updates);\n       Author actual = session.selectOne(\"domain.blog.mappers.AuthorMapper.selectAuthor\", new Author(500));\n       assertNotNull(actual);\n       assertEquals(expected.getId(), actual.getId());\n@@ -269,8 +270,8 @@ public void shouldUpdateAuthorImplicitRollback() throws Exception {\n     try {\n       original = session.selectOne(\"domain.blog.mappers.AuthorMapper.selectAuthor\", 101);\n       original.setEmail(\"new@email.com\");\n-      session.update(\"domain.blog.mappers.AuthorMapper.updateAuthor\", original);\n-\n+      int updates = session.update(\"domain.blog.mappers.AuthorMapper.updateAuthor\", original);\n+      assertEquals(1, updates);\n       updated = session.selectOne(\"domain.blog.mappers.AuthorMapper.selectAuthor\", 101);\n       assertEquals(original.getEmail(), updated.getEmail());\n     } finally {\n@@ -293,8 +294,8 @@ public void shouldUpdateAuthorCommit() throws Exception {\n     try {\n       original = session.selectOne(\"domain.blog.mappers.AuthorMapper.selectAuthor\", 101);\n       original.setEmail(\"new@email.com\");\n-      session.update(\"domain.blog.mappers.AuthorMapper.updateAuthor\", original);\n-\n+      int updates = session.update(\"domain.blog.mappers.AuthorMapper.updateAuthor\", original);\n+      assertEquals(1, updates);\n       updated = session.selectOne(\"domain.blog.mappers.AuthorMapper.selectAuthor\", 101);\n       assertEquals(original.getEmail(), updated.getEmail());\n       session.commit();\n@@ -319,8 +320,8 @@ public void shouldUpdateAuthorIfNecessary() throws Exception {\n       original = session.selectOne(\"domain.blog.mappers.AuthorMapper.selectAuthor\", 101);\n       original.setEmail(\"new@email.com\");\n       original.setBio(null);\n-      session.update(\"domain.blog.mappers.AuthorMapper.updateAuthorIfNecessary\", original);\n-\n+      int updates = session.update(\"domain.blog.mappers.AuthorMapper.updateAuthorIfNecessary\", original);\n+      assertEquals(1, updates);\n       updated = session.selectOne(\"domain.blog.mappers.AuthorMapper.selectAuthor\", 101);\n       assertEquals(original.getEmail(), updated.getEmail());\n       session.commit();\n@@ -345,7 +346,9 @@ public void shouldDeleteAuthor() throws Exception {\n       List<Author> authors = session.selectList(\"domain.blog.mappers.AuthorMapper.selectAuthor\", id);\n       assertEquals(1, authors.size());\n \n-      session.delete(\"domain.blog.mappers.AuthorMapper.deleteAuthor\", id);\n+      int updates = session.delete(\"domain.blog.mappers.AuthorMapper.deleteAuthor\", id);\n+      assertEquals(1, updates);\n+\n       authors = session.selectList(\"domain.blog.mappers.AuthorMapper.selectAuthor\", id);\n       assertEquals(0, authors.size());\n ",
      "parent_sha": "1b726ecf92967b2315c4b1b9eadc47030646289d"
    }
  },
  {
    "oid": "e323505dae2751dda54765245b5eeb3a45adc14f",
    "message": "Found leak\n\njar read was not closed.  Fixed.\npotential null pointer fixed with check on null.\nnull checks in finally statements now outside of try as no need to be\ninside try.\nUse curly brackets always.",
    "date": "2014-09-14T04:12:05Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/e323505dae2751dda54765245b5eeb3a45adc14f",
    "details": {
      "sha": "d8850825c28e82da5cad36c8d79ce031d28dab55",
      "filename": "src/main/java/org/apache/ibatis/io/DefaultVFS.java",
      "status": "modified",
      "additions": 16,
      "deletions": 8,
      "changes": 24,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/e323505dae2751dda54765245b5eeb3a45adc14f/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FDefaultVFS.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/e323505dae2751dda54765245b5eeb3a45adc14f/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FDefaultVFS.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FDefaultVFS.java?ref=e323505dae2751dda54765245b5eeb3a45adc14f",
      "patch": "@@ -77,6 +77,7 @@ public List<String> list(URL url, String path) throws IOException {\n               log.debug(\"Jar entry: \" + entry.getName());\n               children.add(entry.getName());\n             }\n+            jarInput.close();\n           }\n           else {\n             /*\n@@ -140,10 +141,12 @@ public List<String> list(URL url, String path) throws IOException {\n \n       return resources;\n     } finally {\n-      try {\n-        if (is != null)\n+      if (is != null) {\n+        try {\n           is.close();\n-      } catch (Exception e) {\n+        } catch (Exception e) {\n+          // Ignore\n+        }\n       }\n     }\n   }\n@@ -159,10 +162,12 @@ public List<String> list(URL url, String path) throws IOException {\n    */\n   protected List<String> listResources(JarInputStream jar, String path) throws IOException {\n     // Include the leading and trailing slash when matching names\n-    if (!path.startsWith(\"/\"))\n+    if (!path.startsWith(\"/\")) {\n       path = \"/\" + path;\n-    if (!path.endsWith(\"/\"))\n+    }\n+    if (!path.endsWith(\"/\")) {\n       path = path + \"/\";\n+    }\n \n     // Iterate over the entries and collect those that begin with the requested path\n     List<String> resources = new ArrayList<String>();\n@@ -294,9 +299,12 @@ protected boolean isJar(URL url, byte[] buffer) {\n     } catch (Exception e) {\n       // Failure to read the stream means this is not a JAR\n     } finally {\n-      try {\n-        is.close();\n-      } catch (Exception e) {\n+      if (is != null) {\n+        try {\n+          is.close();\n+        } catch (Exception e) {\n+          // Ignore\n+        }\n       }\n     }\n ",
      "parent_sha": "aefb455451af15af23310ca0001242682478f796"
    }
  },
  {
    "oid": "eb8749e055a8bce5f1bc260f30ad5fc12ce2eb92",
    "message": "Forgot to add `final`",
    "date": "2025-01-26T20:40:23Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/eb8749e055a8bce5f1bc260f30ad5fc12ce2eb92",
    "details": {
      "sha": "7265499c600cf00e317da3b9835b3fccc1e8d823",
      "filename": "src/main/java/org/apache/ibatis/mapping/ParameterMapping.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/eb8749e055a8bce5f1bc260f30ad5fc12ce2eb92/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fmapping%2FParameterMapping.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/eb8749e055a8bce5f1bc260f30ad5fc12ce2eb92/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fmapping%2FParameterMapping.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fmapping%2FParameterMapping.java?ref=eb8749e055a8bce5f1bc260f30ad5fc12ce2eb92",
      "patch": "@@ -27,7 +27,7 @@\n  */\n public class ParameterMapping {\n \n-  private static Object UNSET = new Object();\n+  private static final Object UNSET = new Object();\n   private Configuration configuration;\n \n   private String property;",
      "parent_sha": "7043d8a2e67b12a9e8bb253cd27f17f7d8e035d3"
    }
  },
  {
    "oid": "1abf653a0774560f3da680505689e05978d75e07",
    "message": "Fixes #26. UnPooledDatasource sets autocommit to false if no autocommit\nwas specified.",
    "date": "2013-04-06T08:34:24Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/1abf653a0774560f3da680505689e05978d75e07",
    "details": {
      "sha": "ad3dbd829ffdc8be93340b65783209bd3032a96b",
      "filename": "src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/1abf653a0774560f3da680505689e05978d75e07/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fdatasource%2Funpooled%2FUnpooledDataSource.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/1abf653a0774560f3da680505689e05978d75e07/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fdatasource%2Funpooled%2FUnpooledDataSource.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fdatasource%2Funpooled%2FUnpooledDataSource.java?ref=1abf653a0774560f3da680505689e05978d75e07",
      "patch": "@@ -37,7 +37,7 @@ public class UnpooledDataSource implements DataSource {\n   private String username;\n   private String password;\n \n-  private boolean autoCommit;\n+  private Boolean autoCommit;\n   private Integer defaultTransactionIsolationLevel;\n \n   static {\n@@ -148,11 +148,11 @@ public void setPassword(String password) {\n     this.password = password;\n   }\n \n-  public boolean isAutoCommit() {\n+  public Boolean isAutoCommit() {\n     return autoCommit;\n   }\n \n-  public void setAutoCommit(boolean autoCommit) {\n+  public void setAutoCommit(Boolean autoCommit) {\n     this.autoCommit = autoCommit;\n   }\n \n@@ -198,7 +198,7 @@ private synchronized void initializeDriver() throws SQLException {\n   }\n \n   private void configureConnection(Connection conn) throws SQLException {\n-    if (autoCommit != conn.getAutoCommit()) {\n+    if (autoCommit != null && autoCommit != conn.getAutoCommit()) {\n       conn.setAutoCommit(autoCommit);\n     }\n     if (defaultTransactionIsolationLevel != null) {",
      "parent_sha": "4d08f3890b5901468b0887e42bb59f37bf64535b"
    }
  },
  {
    "oid": "6662e779ed21f3f8962d3b0d97aae84b0a9e9ede",
    "message": "tests: Lambda cleanup",
    "date": "2024-12-31T05:44:30Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/6662e779ed21f3f8962d3b0d97aae84b0a9e9ede",
    "details": {
      "sha": "8ab5199651efdf9c33b38884add3358648aa0d03",
      "filename": "src/test/java/org/apache/ibatis/cache/PerpetualCacheTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/6662e779ed21f3f8962d3b0d97aae84b0a9e9ede/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fcache%2FPerpetualCacheTest.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/6662e779ed21f3f8962d3b0d97aae84b0a9e9ede/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fcache%2FPerpetualCacheTest.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fcache%2FPerpetualCacheTest.java?ref=6662e779ed21f3f8962d3b0d97aae84b0a9e9ede",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- *    Copyright 2009-2023 the original author or authors.\n+ *    Copyright 2009-2024 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.\n@@ -75,7 +75,7 @@ void shouldFlushAllItemsOnDemand() {\n   @Test\n   void shouldDemonstrateIdIsNull() {\n     Cache cache = new PerpetualCache(null);\n-    assertThrows(CacheException.class, () -> cache.hashCode());\n+    assertThrows(CacheException.class, cache::hashCode);\n     assertThrows(CacheException.class, () -> cache.equals(new Object()));\n   }\n }",
      "parent_sha": "1ada7262e9222d1035079645d7750d3dd331faf4"
    }
  },
  {
    "oid": "af7b0d7ce17f3874fd679b21cc0f141773086100",
    "message": "Check the class object not its name.",
    "date": "2014-03-20T05:23:35Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/af7b0d7ce17f3874fd679b21cc0f141773086100",
    "details": {
      "sha": "9412f6b01bd242e9695c81c79c4aebd1a0f9d111",
      "filename": "src/main/java/org/apache/ibatis/mapping/CacheBuilder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/af7b0d7ce17f3874fd679b21cc0f141773086100/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fmapping%2FCacheBuilder.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/af7b0d7ce17f3874fd679b21cc0f141773086100/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fmapping%2FCacheBuilder.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fmapping%2FCacheBuilder.java?ref=af7b0d7ce17f3874fd679b21cc0f141773086100",
      "patch": "@@ -85,8 +85,7 @@ public Cache build() {\n     setDefaultImplementations();\n     Cache cache = newBaseCacheInstance(implementation, id);\n     setCacheProperties(cache);\n-    // issue #352, do not apply decorators to custom caches\n-    if (cache.getClass().getName().startsWith(\"org.apache.ibatis\")) {\n+    if (PerpetualCache.class.equals(cache.getClass())) { // issue #352, do not apply decorators to custom caches\n       for (Class<? extends Cache> decorator : decorators) {\n         cache = newCacheDecoratorInstance(decorator, cache);\n         setCacheProperties(cache);",
      "parent_sha": "9f22ad517b6df0c6d28c0dd2fdd91a6279a10cf5"
    }
  },
  {
    "oid": "c1bd0f297712a921ecd498e8d589dcfb4e1cf87a",
    "message": "Words correction in TypeHandlerRegistryTest.",
    "date": "2021-07-16T01:55:38Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/c1bd0f297712a921ecd498e8d589dcfb4e1cf87a",
    "details": {
      "sha": "95980cff420aaaaaf0b2c22704de198ec75ab8a6",
      "filename": "src/test/java/org/apache/ibatis/type/TypeHandlerRegistryTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/c1bd0f297712a921ecd498e8d589dcfb4e1cf87a/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Ftype%2FTypeHandlerRegistryTest.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/c1bd0f297712a921ecd498e8d589dcfb4e1cf87a/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Ftype%2FTypeHandlerRegistryTest.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Ftype%2FTypeHandlerRegistryTest.java?ref=c1bd0f297712a921ecd498e8d589dcfb4e1cf87a",
      "patch": "@@ -126,7 +126,7 @@ public List<URI> getNullableResult(CallableStatement cs, int columnIndex) {\n   }\n \n   @Test\n-  void shouldBindHandlersToWrapersAndPrimitivesIndividually() {\n+  void shouldBindHandlersToWrappersAndPrimitivesIndividually() {\n     typeHandlerRegistry.register(Integer.class, DateTypeHandler.class);\n     assertSame(IntegerTypeHandler.class, typeHandlerRegistry.getTypeHandler(int.class).getClass());\n     typeHandlerRegistry.register(Integer.class, IntegerTypeHandler.class);\n@@ -227,7 +227,7 @@ enum TestEnum {\n   }\n \n   @Test\n-  void shouldAutoRegisterEnutmTypeInMultiThreadEnvironment() throws Exception {\n+  void shouldAutoRegisterEnumTypeInMultiThreadEnvironment() throws Exception {\n     // gh-1820\n     ExecutorService executorService = Executors.newCachedThreadPool();\n     try {",
      "parent_sha": "033be14ee815ea0d2759b01d8aa91f95dadef39d"
    }
  },
  {
    "oid": "4a2bf469fe3c35e99bf8e79676ba3132147435c8",
    "message": "Update JdbcTransaction.java\n\nupdate a variable name in JdbcTransaction class.",
    "date": "2017-03-03T16:23:31Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/4a2bf469fe3c35e99bf8e79676ba3132147435c8",
    "details": {
      "sha": "583bd8e2ebfc74b1b05da5c3a64a77d709e59788",
      "filename": "src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransaction.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/4a2bf469fe3c35e99bf8e79676ba3132147435c8/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Ftransaction%2Fjdbc%2FJdbcTransaction.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/4a2bf469fe3c35e99bf8e79676ba3132147435c8/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Ftransaction%2Fjdbc%2FJdbcTransaction.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Ftransaction%2Fjdbc%2FJdbcTransaction.java?ref=4a2bf469fe3c35e99bf8e79676ba3132147435c8",
      "patch": "@@ -42,12 +42,12 @@ public class JdbcTransaction implements Transaction {\n   protected Connection connection;\n   protected DataSource dataSource;\n   protected TransactionIsolationLevel level;\n-  protected boolean autoCommmit;\n+  protected boolean autoCommit;\n \n   public JdbcTransaction(DataSource ds, TransactionIsolationLevel desiredLevel, boolean desiredAutoCommit) {\n     dataSource = ds;\n     level = desiredLevel;\n-    autoCommmit = desiredAutoCommit;\n+    autoCommit = desiredAutoCommit;\n   }\n \n   public JdbcTransaction(Connection connection) {\n@@ -139,7 +139,7 @@ protected void openConnection() throws SQLException {\n     if (level != null) {\n       connection.setTransactionIsolation(level.getLevel());\n     }\n-    setDesiredAutoCommit(autoCommmit);\n+    setDesiredAutoCommit(autoCommit);\n   }\n \n   @Override",
      "parent_sha": "17e9687440db0a2605882c77ff4261bccfac2f0e"
    }
  },
  {
    "oid": "7668d577b0a30c1294cc9f45ad5624a6e0828c46",
    "message": "Ignore anonymous classes when searching for aliases per issue http://code.google.com/p/mybatis/issues/detail?id=140",
    "date": "2010-11-02T04:18:00Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/7668d577b0a30c1294cc9f45ad5624a6e0828c46",
    "details": {
      "sha": "f39732cb1b254a59012930f0518c280d5b0c5387",
      "filename": "src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/7668d577b0a30c1294cc9f45ad5624a6e0828c46/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Ftype%2FTypeAliasRegistry.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/7668d577b0a30c1294cc9f45ad5624a6e0828c46/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Ftype%2FTypeAliasRegistry.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Ftype%2FTypeAliasRegistry.java?ref=7668d577b0a30c1294cc9f45ad5624a6e0828c46",
      "patch": "@@ -95,7 +95,9 @@ public void registerAliases(String packageName, Class superType){\n     resolverUtil.find(new ResolverUtil.IsA(superType), packageName);\r\n     Set<Class<? extends Class>> typeSet = resolverUtil.getClasses();\r\n     for(Class type : typeSet){\r\n-      registerAlias(type.getSimpleName(), type);\r\n+      //Ignore inner classes\r\n+      if (!type.isAnonymousClass())\r\n+        registerAlias(type.getSimpleName(), type);\r\n     }\r\n   }\r\n \r",
      "parent_sha": "35498748d5ce29762566069159f0c35e6bbf069d"
    }
  },
  {
    "oid": "2f6716f50192c4769c247ebda821a3b945ebd37e",
    "message": "Use `Class#getResourceAsStream(String)` to search corresponding XML mapper.\n\n`Class#getResourceAsStream(String)` covers most use cases and it requires the package to be open only to mybatis. `ClassLoader#getResourceAsStream(String)` still is useful if the XML mapper is not in the module but in the classpath.\nThis should fix #1347 .",
    "date": "2018-09-24T07:05:15Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/2f6716f50192c4769c247ebda821a3b945ebd37e",
    "details": {
      "sha": "696336bfd3db28df7782274316af348f15c97397",
      "filename": "src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/2f6716f50192c4769c247ebda821a3b945ebd37e/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2Fannotation%2FMapperAnnotationBuilder.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/2f6716f50192c4769c247ebda821a3b945ebd37e/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2Fannotation%2FMapperAnnotationBuilder.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2Fannotation%2FMapperAnnotationBuilder.java?ref=2f6716f50192c4769c247ebda821a3b945ebd37e",
      "patch": "@@ -166,11 +166,15 @@ private void loadXmlResource() {\n     // this flag is set at XMLMapperBuilder#bindMapperForNamespace\n     if (!configuration.isResourceLoaded(\"namespace:\" + type.getName())) {\n       String xmlResource = type.getName().replace('.', '/') + \".xml\";\n-      InputStream inputStream = null;\n-      try {\n-        inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);\n-      } catch (IOException e) {\n-        // ignore, resource is not required\n+      // #1347\n+      InputStream inputStream = type.getResourceAsStream(\"/\" + xmlResource);\n+      if (inputStream == null) {\n+        // Search XML mapper that is not in the module but in the classpath. \n+        try {\n+          inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);\n+        } catch (IOException e2) {\n+          // ignore, resource is not required\n+        }\n       }\n       if (inputStream != null) {\n         XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());",
      "parent_sha": "66a5dee9ddd94dd7770d48b066667fe57b163a92"
    }
  },
  {
    "oid": "7acd1c29e1a910f030379655aba54386563e5ebf",
    "message": "Update copyright year",
    "date": "2017-02-14T22:29:38Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/7acd1c29e1a910f030379655aba54386563e5ebf",
    "details": {
      "sha": "44edfa2aafa51a130bff1e843cdf37875128db70",
      "filename": "src/test/java/org/apache/ibatis/reflection/MetaClassTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/7acd1c29e1a910f030379655aba54386563e5ebf/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FMetaClassTest.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/7acd1c29e1a910f030379655aba54386563e5ebf/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FMetaClassTest.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FMetaClassTest.java?ref=7acd1c29e1a910f030379655aba54386563e5ebf",
      "patch": "@@ -1,5 +1,5 @@\n /**\n- *    Copyright 2009-2015 the original author or authors.\n+ *    Copyright 2009-2017 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.",
      "parent_sha": "080db729a14ff1c8ad89b2848bc1ecc312121c90"
    }
  },
  {
    "oid": "8d0153ecfc08f3f25ea39c6c926eb63a1626e82d",
    "message": "Polishing #807",
    "date": "2016-10-19T17:46:57Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/8d0153ecfc08f3f25ea39c6c926eb63a1626e82d",
    "details": {
      "sha": "4986d6eee3cf1d3c220153e8024ecca43bb572f5",
      "filename": "src/main/java/org/apache/ibatis/reflection/TypeParameterResolver.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/8d0153ecfc08f3f25ea39c6c926eb63a1626e82d/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FTypeParameterResolver.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/8d0153ecfc08f3f25ea39c6c926eb63a1626e82d/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FTypeParameterResolver.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FTypeParameterResolver.java?ref=8d0153ecfc08f3f25ea39c6c926eb63a1626e82d",
      "patch": "@@ -148,7 +148,7 @@ private static Type resolveTypeVar(TypeVariable<?> typeVar, Type srcType, Class<\n     if (clazz == declaringClass) {\n       Type[] bounds = typeVar.getBounds();\n       if(bounds.length > 0) {\n-        return typeVar.getBounds()[0];\n+        return bounds[0];\n       }\n       return Object.class;\n     }",
      "parent_sha": "a05f741e92efbcf2e89aff958c4d86e8fe1ffc80"
    }
  },
  {
    "oid": "09423b92cefb5c5e33eb7a3328bdd6ea0b1d1799",
    "message": "Revert jdk7 override\n\nTwo overrides turned out to be jdk7 only.  Comment them out and add note\nregarding this.  Also fixed trailing comment.",
    "date": "2014-09-21T22:29:28Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/09423b92cefb5c5e33eb7a3328bdd6ea0b1d1799",
    "details": {
      "sha": "be8a13a0c2c2bb031a6901926704d2ad2e7bb3ed",
      "filename": "src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/09423b92cefb5c5e33eb7a3328bdd6ea0b1d1799/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fdatasource%2Funpooled%2FUnpooledDataSource.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/09423b92cefb5c5e33eb7a3328bdd6ea0b1d1799/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fdatasource%2Funpooled%2FUnpooledDataSource.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fdatasource%2Funpooled%2FUnpooledDataSource.java?ref=09423b92cefb5c5e33eb7a3328bdd6ea0b1d1799",
      "patch": "@@ -269,7 +269,7 @@ public boolean jdbcCompliant() {\n       return this.driver.jdbcCompliant();\n     }\n \n-    @Override\n+    // @Override only valid jdk7+\n     public Logger getParentLogger() {\n       return Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\n     }\n@@ -285,9 +285,10 @@ public boolean isWrapperFor(Class<?> iface) throws SQLException {\n     return false;\n   }\n \n-  @Override\n+  // @Override only valid jdk7+\n   public Logger getParentLogger() {\n-    return Logger.getLogger(Logger.GLOBAL_LOGGER_NAME); // requires JDK version 1.6\n+    // requires JDK version 1.6\n+    return Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\n   }\n \n }",
      "parent_sha": "aeb820c1dae02dec2ca01c67ee96aa4933091c4c"
    }
  },
  {
    "oid": "67c6babee6d38522191b4b2bf6b051d4f150046c",
    "message": "Revert the license year to 2023",
    "date": "2024-05-28T22:30:55Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/67c6babee6d38522191b4b2bf6b051d4f150046c",
    "details": {
      "sha": "62b39becea5ac952ddcd639cdfb470371f81d34e",
      "filename": "src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/67c6babee6d38522191b4b2bf6b051d4f150046c/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2Fdefaults%2FDefaultSqlSession.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/67c6babee6d38522191b4b2bf6b051d4f150046c/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2Fdefaults%2FDefaultSqlSession.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2Fdefaults%2FDefaultSqlSession.java?ref=67c6babee6d38522191b4b2bf6b051d4f150046c",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- *    Copyright 2009-2024 the original author or authors.\n+ *    Copyright 2009-2023 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.",
      "parent_sha": "3a9321e459cc3d167db310d5175c2b25f0caa08e"
    }
  },
  {
    "oid": "86efb193f87913483c7495496caa71b68624883f",
    "message": "[mybatis] javadoc typo",
    "date": "2011-12-19T20:21:18Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/86efb193f87913483c7495496caa71b68624883f",
    "details": {
      "sha": "66b26a6df4583f6a1cc69132d3768ded37eebee2",
      "filename": "src/main/java/org/apache/ibatis/transaction/Transaction.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/86efb193f87913483c7495496caa71b68624883f/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Ftransaction%2FTransaction.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/86efb193f87913483c7495496caa71b68624883f/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Ftransaction%2FTransaction.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Ftransaction%2FTransaction.java?ref=86efb193f87913483c7495496caa71b68624883f",
      "patch": "@@ -20,7 +20,7 @@\n \n /**\n  * Wraps a database connection.\n- * Handles the connection livecycle that comprises: its creation, preparation, commit/rollback and close. \n+ * Handles the connection lifecycle that comprises: its creation, preparation, commit/rollback and close. \n  *\n  */\n public interface Transaction {",
      "parent_sha": "297a803576496ae27fb2be0cb253281759f9471c"
    }
  },
  {
    "oid": "3aa825a41d5269c2dcdf6a57fc78c90d74e2fe52",
    "message": "completed the collection of DB products type/name\nnames resolution moved to a single Map access\nTODOs:\n * understanding if type->names is useful\n * verify how the collection is complete",
    "date": "2011-11-11T16:20:46Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/3aa825a41d5269c2dcdf6a57fc78c90d74e2fe52",
    "details": {
      "sha": "265bfcdacc544110712d120a53aa15add635029d",
      "filename": "src/main/java/org/apache/ibatis/jdbc/DataSourceUtils.java",
      "status": "modified",
      "additions": 67,
      "deletions": 24,
      "changes": 91,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/3aa825a41d5269c2dcdf6a57fc78c90d74e2fe52/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fjdbc%2FDataSourceUtils.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/3aa825a41d5269c2dcdf6a57fc78c90d74e2fe52/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fjdbc%2FDataSourceUtils.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fjdbc%2FDataSourceUtils.java?ref=3aa825a41d5269c2dcdf6a57fc78c90d74e2fe52",
      "patch": "@@ -3,51 +3,94 @@\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.Map.Entry;\n \n import javax.sql.DataSource;\n \n public class DataSourceUtils {\n \n-  private static Map<String, String> databaseNames = new HashMap<String, String>() {\n-    {\n-      put(\"derby\", \"Derby\");\n-      put(\"db2\", \"DB2\");\n-      put(\"hsql\", \"HSQL\");\n-      put(\"sqlserver\", \"Microsoft\");\n-      put(\"mysql\", \"MySQL\");\n-      put(\"oracle\", \"Oracle\");\n-      put(\"postgres\", \"PostgreSQL\");\n-      put(\"sybase\", \"Sybase\");\n-    }\n-  };\n+  /**\n+   * For each type, the supported DatabaseProductNameS\n+   *\n+   * TODO is this useful?\n+   */\n+  private static Map<String, Collection<String>> TYPE_NAME = new HashMap<String, Collection<String>>();\n \n-  public static String getDatabaseName(DataSource dataSource) {\n-    String productName = getDatabaseProductName(dataSource);\n-    String databaseName = null;\n-    for (Entry<String, String> databaseNameEntry : databaseNames.entrySet()) {\n-      if (productName.contains(databaseNameEntry.getValue())) {\n-        databaseName = databaseNameEntry.getKey();\n-        break;\n-      }\n+  /**\n+   * For each DatabaseProductName, the related type\n+   */\n+  private static Map<String, String> NAME_TYPE = new HashMap<String, String>();\n+\n+  static {\n+    // data kindly borrowed from DbVisualizer (http://www.dbvis.com/)\n+    register(\"cache\", \"Cache\");\n+    register(\"db2\", \"DB2\");\n+    register(\"db2\", \"DB2 (DataDirect)\");\n+    register(\"generic\", \"DB2 for AS/400 (JTOpen)\");\n+    register(\"firebird\", \"Firebird\");\n+    register(\"frontbase\", \"FrontBase\");\n+    register(\"neoview\", \"HP Neoview\");\n+    register(\"hsql\", \"HSQLDB server\");\n+    register(\"hsql\", \"HSQLDB embedded\");\n+    register(\"h2\", \"H2 server\");\n+    register(\"h2\", \"H2 embedded\");\n+    register(\"informix\", \"Informix\");\n+    register(\"informix\", \"Informix (DataDirect)\");\n+    register(\"derby\", \"JavaDB/Derby server\");\n+    register(\"derby\", \"JavaDB/Derby embedded\");\n+    register(\"jdatastore\", \"JDataStore\");\n+    register(\"generic\", \"JDBC/ODBC Bridge\");\n+    register(\"maxdb\", \"MaxDB\");\n+    register(\"generic\", \"McKoi\");\n+    register(\"mimer\", \"Mimer\");\n+    register(\"mysql\", \"MySQL\");\n+    register(\"netezza\", \"Netezza\");\n+    register(\"oracle\", \"Oracle Thin\");\n+    register(\"oracle\", \"Oracle OCI\");\n+    register(\"oracle\", \"Oracle (DataDirect)\");\n+    register(\"pervasive\", \"Pervasive\");\n+    register(\"postgresql\", \"PostgreSQL\");\n+    register(\"progress\", \"Progress\");\n+    register(\"sqlite\", \"SQLite\");\n+    register(\"sqlserver\", \"SQL Server (DataDirect)\");\n+    register(\"sqlserver\", \"SQL Server (jTDS)\");\n+    register(\"sqlserver\", \"SQL Server (Microsoft JDBC Driver)\");\n+    register(\"sqlserver\", \"SQL Server 2008 (Microsoft JDBC Driver)\");\n+    register(\"sybase-ase\", \"Sybase ASE (jTDS)\");\n+    register(\"sybase-ase\", \"Sybase ASE (JConnect)\");\n+    register(\"sybase-asa\", \"Sybase SQL Anywhere (JConnect)\");\n+    register(\"sybase\", \"Sybase (DataDirect)\");\n+  }\n+\n+  private static void register(String type, String databaseProductName) {\n+    Collection<String> names = TYPE_NAME.get(type);\n+    if (names == null) {\n+      names = new ArrayList<String>();\n+      TYPE_NAME.put(type, names);\n     }\n-    return databaseName;\n+    TYPE_NAME.put(type, names);\n+\n+    NAME_TYPE.put(databaseProductName, type);\n   }\n \n-  private static String getDatabaseProductName(DataSource dataSource) {\n+  public static String getDatabaseName(DataSource dataSource) {\n     Connection con = null;\n     try {\n       con = dataSource.getConnection();\n       if (con == null) {\n         throw new RuntimeException(\"Connection returned by DataSource [\" + dataSource + \"] was null\");\n       }\n+\n       DatabaseMetaData metaData = con.getMetaData();\n       if (metaData == null) {\n         throw new RuntimeException(\"DatabaseMetaData returned by Connection [\" + con + \"] was null\");\n       }\n-      return metaData.getDatabaseProductName();\n+\n+      String productName = metaData.getDatabaseProductName();\n+      return NAME_TYPE.get(productName);\n     } catch (SQLException e) {\n       throw new RuntimeException(\"Could not get database product name\", e);\n     } finally {",
      "parent_sha": "a84ece4f08bb04fa6a5babd800113fe7338a9880"
    }
  },
  {
    "oid": "859a2546696c302f4189a50799c80996acb0f079",
    "message": "Calculate non-cached names on-the-fly",
    "date": "2024-06-12T15:58:11Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/859a2546696c302f4189a50799c80996acb0f079",
    "details": {
      "sha": "67aef542621d2ecdf113d0f41f601a0e6b290e3e",
      "filename": "src/main/java/org/apache/ibatis/reflection/ParamNameResolver.java",
      "status": "modified",
      "additions": 9,
      "deletions": 13,
      "changes": 22,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/859a2546696c302f4189a50799c80996acb0f079/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FParamNameResolver.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/859a2546696c302f4189a50799c80996acb0f079/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FParamNameResolver.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FParamNameResolver.java?ref=859a2546696c302f4189a50799c80996acb0f079",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- *    Copyright 2009-2023 the original author or authors.\n+ *    Copyright 2009-2024 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.\n@@ -137,19 +137,15 @@ public Object getNamedParams(Object[] args) {\n     } else {\n       final Map<String, Object> param = new ParamMap<>();\n       int i = 0;\n-      try {\n-        for (Map.Entry<Integer, String> entry : names.entrySet()) {\n-          param.put(entry.getValue(), args[entry.getKey()]);\n-          // add generic param names (param1, param2, ...)\n-          final String genericParamName = GENERIC_NAME_CACHE[i];\n-          // ensure not to overwrite parameter named with @Param\n-          if (!names.containsValue(genericParamName)) {\n-            param.put(genericParamName, args[entry.getKey()]);\n-          }\n-          i++;\n+      for (Map.Entry<Integer, String> entry : names.entrySet()) {\n+        param.put(entry.getValue(), args[entry.getKey()]);\n+        // add generic param names (param1, param2, ...)\n+        final String genericParamName = i < 10 ? GENERIC_NAME_CACHE[i] : GENERIC_NAME_PREFIX + (i + 1);\n+        // ensure not to overwrite parameter named with @Param\n+        if (!names.containsValue(genericParamName)) {\n+          param.put(genericParamName, args[entry.getKey()]);\n         }\n-      } catch (ArrayIndexOutOfBoundsException e) {\n-        throw new ArrayIndexOutOfBoundsException(\"The parameter list is too long, the maximum supported length is 10\");\n+        i++;\n       }\n       return param;\n     }",
      "parent_sha": "0a7af47818fc8287e989e7bfd63b8f46308b0c52"
    }
  },
  {
    "oid": "0419f493301e7cad32bbf2292d19d7a43d5ea9ed",
    "message": "Minor refactoring.",
    "date": "2019-02-27T17:02:46Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/0419f493301e7cad32bbf2292d19d7a43d5ea9ed",
    "details": {
      "sha": "1b90bc5aebedb18d3030f2c61e9ce3701ff575d1",
      "filename": "src/main/java/org/apache/ibatis/executor/keygen/Jdbc3KeyGenerator.java",
      "status": "modified",
      "additions": 17,
      "deletions": 15,
      "changes": 32,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/0419f493301e7cad32bbf2292d19d7a43d5ea9ed/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fkeygen%2FJdbc3KeyGenerator.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/0419f493301e7cad32bbf2292d19d7a43d5ea9ed/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fkeygen%2FJdbc3KeyGenerator.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fkeygen%2FJdbc3KeyGenerator.java?ref=0419f493301e7cad32bbf2292d19d7a43d5ea9ed",
      "patch": "@@ -159,10 +159,7 @@ private Entry<String, KeyAssigner> getAssignerForParamMap(Configuration config,\n     int firstDot = keyProperty.indexOf('.');\n     if (firstDot == -1) {\n       if (singleParam) {\n-        // Assume 'keyProperty' to be a property of the single param.\n-        String singleParamName = nameOfSingleParam(paramMap);\n-        String argParamName = omitParamName ? null : singleParamName;\n-        return entry(singleParamName, new KeyAssigner(config, rsmd, columnPosition, argParamName, keyProperty));\n+        return getAssignerForSingleParam(config, rsmd, columnPosition, paramMap, keyProperty, omitParamName);\n       }\n       throw new ExecutorException(\"Could not determine which parameter to assign generated keys to. \"\n           + \"Note that when there are multiple parameters, 'keyProperty' must include the parameter name (e.g. 'param.id'). \"\n@@ -175,10 +172,7 @@ private Entry<String, KeyAssigner> getAssignerForParamMap(Configuration config,\n       String argKeyProperty = keyProperty.substring(firstDot + 1);\n       return entry(paramName, new KeyAssigner(config, rsmd, columnPosition, argParamName, argKeyProperty));\n     } else if (singleParam) {\n-      // Assume 'keyProperty' to be a property of the single param.\n-      String singleParamName = nameOfSingleParam(paramMap);\n-      String argParamName = omitParamName ? null : singleParamName;\n-      return entry(singleParamName, new KeyAssigner(config, rsmd, columnPosition, argParamName, keyProperty));\n+      return getAssignerForSingleParam(config, rsmd, columnPosition, paramMap, keyProperty, omitParamName);\n     } else {\n       throw new ExecutorException(\"Could not find parameter '\" + paramName + \"'. \"\n           + \"Note that when there are multiple parameters, 'keyProperty' must include the parameter name (e.g. 'param.id'). \"\n@@ -187,6 +181,14 @@ private Entry<String, KeyAssigner> getAssignerForParamMap(Configuration config,\n     }\n   }\n \n+  private Entry<String, KeyAssigner> getAssignerForSingleParam(Configuration config, ResultSetMetaData rsmd,\n+      int columnPosition, Map<String, ?> paramMap, String keyProperty, boolean omitParamName) {\n+    // Assume 'keyProperty' to be a property of the single param.\n+    String singleParamName = nameOfSingleParam(paramMap);\n+    String argParamName = omitParamName ? null : singleParamName;\n+    return entry(singleParamName, new KeyAssigner(config, rsmd, columnPosition, argParamName, keyProperty));\n+  }\n+\n   private static String nameOfSingleParam(Map<String, ?> paramMap) {\n     // There is virtually one parameter, so any key works.\n     return paramMap.keySet().iterator().next();\n@@ -208,13 +210,13 @@ private static <K, V> Entry<K, V> entry(K key, V value) {\n   }\n \n   private class KeyAssigner {\n-    protected final Configuration configuration;\n-    protected final ResultSetMetaData rsmd;\n-    protected final TypeHandlerRegistry typeHandlerRegistry;\n-    protected final int columnPosition;\n-    protected final String paramName;\n-    protected final String propertyName;\n-    protected TypeHandler<?> typeHandler;\n+    private final Configuration configuration;\n+    private final ResultSetMetaData rsmd;\n+    private final TypeHandlerRegistry typeHandlerRegistry;\n+    private final int columnPosition;\n+    private final String paramName;\n+    private final String propertyName;\n+    private TypeHandler<?> typeHandler;\n \n     protected KeyAssigner(Configuration configuration, ResultSetMetaData rsmd, int columnPosition, String paramName,\n         String propertyName) {",
      "parent_sha": "36d3a4a7e2e4e0490f6879a18d20273559b62a66"
    }
  },
  {
    "oid": "82f39ea457c223e3ab080667b26d602a7f642aab",
    "message": "Change function name to conflictMessageProducer #1104",
    "date": "2018-12-11T15:53:31Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/82f39ea457c223e3ab080667b26d602a7f642aab",
    "details": {
      "sha": "7181d694cc1d5ef828e5511e3327760a3e771d1e",
      "filename": "src/main/java/org/apache/ibatis/session/Configuration.java",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/82f39ea457c223e3ab080667b26d602a7f642aab/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FConfiguration.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/82f39ea457c223e3ab080667b26d602a7f642aab/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FConfiguration.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FConfiguration.java?ref=82f39ea457c223e3ab080667b26d602a7f642aab",
      "patch": "@@ -149,8 +149,8 @@ public class Configuration {\n   protected final LanguageDriverRegistry languageRegistry = new LanguageDriverRegistry();\n \n   protected final Map<String, MappedStatement> mappedStatements = new StrictMap<MappedStatement>(\"Mapped Statements collection\")\n-      .additionalErrorMessageForDuplication((savedValue, currentValue) ->\n-          \". please check \" + savedValue.getResource() + \" and \" + currentValue.getResource());\n+      .conflictMessageProducer((savedValue, targetValue) ->\n+          \". please check \" + savedValue.getResource() + \" and \" + targetValue.getResource());\n   protected final Map<String, Cache> caches = new StrictMap<>(\"Caches collection\");\n   protected final Map<String, ResultMap> resultMaps = new StrictMap<>(\"Result Maps collection\");\n   protected final Map<String, ParameterMap> parameterMaps = new StrictMap<>(\"Parameter Maps collection\");\n@@ -875,7 +875,7 @@ protected static class StrictMap<V> extends HashMap<String, V> {\n \n     private static final long serialVersionUID = -4950446264854982944L;\n     private final String name;\n-    private BiFunction<V, V, String> additionalErrorMessageForDuplication;\n+    private BiFunction<V, V, String> conflictMessageProducer;\n \n     public StrictMap(String name, int initialCapacity, float loadFactor) {\n       super(initialCapacity, loadFactor);\n@@ -898,23 +898,23 @@ public StrictMap(String name, Map<String, ? extends V> m) {\n     }\n \n     /**\n-     * Assign a function for providing an additional error message when contains value with the same key.\n+     * Assign a function for producing a conflict error message when contains value with the same key.\n      * <p>\n-     * function arguments are 1st is saved value and 2nd is current value.\n-     * @param additionalErrorMessage A function for providing an additional error message\n-     * @return an additional error message\n+     * function arguments are 1st is saved value and 2nd is target value.\n+     * @param conflictMessageProducer A function for producing a conflict error message\n+     * @return a conflict error message\n      * @since 3.5.0\n      */\n-    public StrictMap<V> additionalErrorMessageForDuplication(BiFunction<V, V, String> additionalErrorMessage) {\n-      this.additionalErrorMessageForDuplication = additionalErrorMessage;\n+    public StrictMap<V> conflictMessageProducer(BiFunction<V, V, String> conflictMessageProducer) {\n+      this.conflictMessageProducer = conflictMessageProducer;\n       return this;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     public V put(String key, V value) {\n       if (containsKey(key)) {\n         throw new IllegalArgumentException(name + \" already contains value for \" + key\n-            + (additionalErrorMessageForDuplication == null ? \"\" : additionalErrorMessageForDuplication.apply(super.get(key), value)));\n+            + (conflictMessageProducer == null ? \"\" : conflictMessageProducer.apply(super.get(key), value)));\n       }\n       if (key.contains(\".\")) {\n         final String shortKey = getShortName(key);",
      "parent_sha": "efe0a341c4cf24b8e6dbb0afc6d3de5a3c469e04"
    }
  },
  {
    "oid": "b13e7d8f7ea134dbc877dee8a540d6ba16af2d6a",
    "message": "Specify the default tag for PostgreSQL container\n\nAfter the recent change 7a4167d9f6148f88e3de6f1c5f329a70ebfff30f , NetworkTimeoutTest fails consistently on my environment (Apple M3 MAX w/ Colima).\nAssuming it is a temporary issue, I didn't look into it.",
    "date": "2025-01-08T22:19:44Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/b13e7d8f7ea134dbc877dee8a540d6ba16af2d6a",
    "details": {
      "sha": "29cf3391473bdf668adf63ba5794f3fc9515164e",
      "filename": "src/test/java/org/apache/ibatis/testcontainers/PgContainer.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/b13e7d8f7ea134dbc877dee8a540d6ba16af2d6a/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Ftestcontainers%2FPgContainer.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/b13e7d8f7ea134dbc877dee8a540d6ba16af2d6a/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Ftestcontainers%2FPgContainer.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Ftestcontainers%2FPgContainer.java?ref=b13e7d8f7ea134dbc877dee8a540d6ba16af2d6a",
      "patch": "@@ -19,6 +19,7 @@\n \n import org.apache.ibatis.datasource.unpooled.UnpooledDataSource;\n import org.testcontainers.containers.PostgreSQLContainer;\n+import org.testcontainers.utility.DockerImageName;\n \n public final class PgContainer {\n \n@@ -31,8 +32,9 @@ public final class PgContainer {\n \n   private static PostgreSQLContainer<?> initContainer() {\n     @SuppressWarnings(\"resource\")\n-    PostgreSQLContainer<?> container = new PostgreSQLContainer<>(\"postgres\").withDatabaseName(DB_NAME)\n-        .withUsername(USERNAME).withPassword(PASSWORD);\n+    PostgreSQLContainer<?> container = new PostgreSQLContainer<>(\n+        DockerImageName.parse(\"postgres\").withTag(PostgreSQLContainer.DEFAULT_TAG)).withDatabaseName(DB_NAME)\n+            .withUsername(USERNAME).withPassword(PASSWORD);\n     container.start();\n     return container;\n   }",
      "parent_sha": "9548efb6002bd41598983ee4614fbdb91f9f03d9"
    }
  },
  {
    "oid": "24270abd1aaa2503e23cc1cb58cf900597f4e117",
    "message": "Updated license year and javadoc format",
    "date": "2020-07-08T23:50:44Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/24270abd1aaa2503e23cc1cb58cf900597f4e117",
    "details": {
      "sha": "083c28e1fa0b5c41571067f2db164f86e7b2046b",
      "filename": "src/main/java/org/apache/ibatis/session/TransactionIsolationLevel.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/24270abd1aaa2503e23cc1cb58cf900597f4e117/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FTransactionIsolationLevel.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/24270abd1aaa2503e23cc1cb58cf900597f4e117/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FTransactionIsolationLevel.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FTransactionIsolationLevel.java?ref=24270abd1aaa2503e23cc1cb58cf900597f4e117",
      "patch": "@@ -1,5 +1,5 @@\n /**\n- *    Copyright 2009-2018 the original author or authors.\n+ *    Copyright 2009-2020 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.\n@@ -27,9 +27,9 @@ public enum TransactionIsolationLevel {\n   REPEATABLE_READ(Connection.TRANSACTION_REPEATABLE_READ),\n   SERIALIZABLE(Connection.TRANSACTION_SERIALIZABLE),\n   /**\n-  * A non-standard isolation level for Microsoft SQL Server. Defined in\n-  * the SQL Server JDBC driver {@link com.microsoft.sqlserver.jdbc.ISQLServerConnection}\n-  */\n+   * A non-standard isolation level for Microsoft SQL Server.\n+   * Defined in the SQL Server JDBC driver {@link com.microsoft.sqlserver.jdbc.ISQLServerConnection}\n+   */\n   SQL_SERVER_SNAPSHOT(0x1000);\n \n   private final int level;",
      "parent_sha": "97ea9acb607f88c8f4751d8bab705039fc4ae17b"
    }
  },
  {
    "oid": "8c370c0e8ec624832454746410ace73b2267413e",
    "message": "remove redundant code...",
    "date": "2019-07-10T03:43:24Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/8c370c0e8ec624832454746410ace73b2267413e",
    "details": {
      "sha": "bb35b20dcfd056840d4704d71ad24a998d1863a2",
      "filename": "src/test/java/org/apache/ibatis/submitted/cglib_lazy_error/CglibNPETest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/8c370c0e8ec624832454746410ace73b2267413e/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fsubmitted%2Fcglib_lazy_error%2FCglibNPETest.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/8c370c0e8ec624832454746410ace73b2267413e/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fsubmitted%2Fcglib_lazy_error%2FCglibNPETest.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fsubmitted%2Fcglib_lazy_error%2FCglibNPETest.java?ref=8c370c0e8ec624832454746410ace73b2267413e",
      "patch": "@@ -104,14 +104,13 @@ void testInsertBetweenTwoSelects() {\n     try (SqlSession sqlSession = sqlSessionFactory.openSession()){\n       PersonMapper personMapper = sqlSession.getMapper(PersonMapper.class);\n       Person selected1 = personMapper.selectById(1);\n-      Person selected2 = personMapper.selectById(2);\n-      Person selected3 = personMapper.selectById(3);\n       selected1.setId(4L);\n       int rows = personMapper.insertPerson(selected1);\n       Assertions.assertEquals(1, rows);\n+\n       selected1 = personMapper.selectById(1);\n-      selected2 = personMapper.selectById(2);\n-      selected3 = personMapper.selectById(3);\n+      Person selected2 = personMapper.selectById(2);\n+      Person selected3 = personMapper.selectById(3);\n       Person selected4 = personMapper.selectById(4);\n       Assertions.assertEquals(1, selected1.getId().longValue());\n       Assertions.assertEquals(2, selected2.getId().longValue());",
      "parent_sha": "85fed970cd432f3aad73d7cc3cadfa6db1ea68ec"
    }
  },
  {
    "oid": "f96dd27d43e4c9d12bffac829c0ac1cc36f2156c",
    "message": "A minor correction.",
    "date": "2018-11-17T17:02:48Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/f96dd27d43e4c9d12bffac829c0ac1cc36f2156c",
    "details": {
      "sha": "c167542b24765ae1a1936456597f24e8cd1029f3",
      "filename": "src/test/java/org/apache/ibatis/submitted/resolution/cachereffromxml/CacheRefFromXmlTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/f96dd27d43e4c9d12bffac829c0ac1cc36f2156c/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fsubmitted%2Fresolution%2Fcachereffromxml%2FCacheRefFromXmlTest.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/f96dd27d43e4c9d12bffac829c0ac1cc36f2156c/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fsubmitted%2Fresolution%2Fcachereffromxml%2FCacheRefFromXmlTest.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fsubmitted%2Fresolution%2Fcachereffromxml%2FCacheRefFromXmlTest.java?ref=f96dd27d43e4c9d12bffac829c0ac1cc36f2156c",
      "patch": "@@ -46,14 +46,11 @@ public static void setUp() throws Exception {\n \n   @Test\n   public void shouldGetAUser() {\n-    SqlSession sqlSession = sqlSessionFactory.openSession();\n-    try {\n+    try (SqlSession sqlSession = sqlSessionFactory.openSession()) {\n       UserMapper mapper = sqlSession.getMapper(UserMapper.class);\n       User user = mapper.getUser(1);\n       Assert.assertEquals(Integer.valueOf(1), user.getId());\n       Assert.assertEquals(\"User1\", user.getName());\n-    } finally {\n-      sqlSession.close();\n     }\n   }\n ",
      "parent_sha": "472ef3d77a8c4520042119e0671ea43e89496b10"
    }
  },
  {
    "oid": "fa8d9a033fbf79cc4de1e05f33b34df40d3b4f25",
    "message": "refact: update if... else...",
    "date": "2019-09-24T10:22:05Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/fa8d9a033fbf79cc4de1e05f33b34df40d3b4f25",
    "details": {
      "sha": "0293a694058a571edc77b35486dbc23d7554dd59",
      "filename": "src/main/java/org/apache/ibatis/executor/statement/StatementUtil.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/fa8d9a033fbf79cc4de1e05f33b34df40d3b4f25/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fstatement%2FStatementUtil.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/fa8d9a033fbf79cc4de1e05f33b34df40d3b4f25/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fstatement%2FStatementUtil.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fstatement%2FStatementUtil.java?ref=fa8d9a033fbf79cc4de1e05f33b34df40d3b4f25",
      "patch": "@@ -45,9 +45,7 @@ public static void applyTransactionTimeout(Statement statement, Integer queryTim\n       return;\n     }\n     Integer timeToLiveOfQuery = null;\n-    if (queryTimeout == null || queryTimeout == 0) {\n-      timeToLiveOfQuery = transactionTimeout;\n-    } else if (transactionTimeout < queryTimeout) {\n+    if (queryTimeout == null || queryTimeout == 0 || transactionTimeout < queryTimeout) {\n       timeToLiveOfQuery = transactionTimeout;\n     }\n     if (timeToLiveOfQuery != null) {",
      "parent_sha": "4cfbddf6f7c732d4c01b58e126734e0862e45516"
    }
  },
  {
    "oid": "7dcd2a9df8c059eab629490b46e987a5a5a128d7",
    "message": "Fixed close leakage of SqlSession",
    "date": "2016-05-22T05:40:06Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/7dcd2a9df8c059eab629490b46e987a5a5a128d7",
    "details": {
      "sha": "2edf3deaf74e93c7762ce06470c100de2878ec47",
      "filename": "src/test/java/org/apache/ibatis/submitted/batch_keys/BatchKeysTest.java",
      "status": "modified",
      "additions": 35,
      "deletions": 16,
      "changes": 51,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/7dcd2a9df8c059eab629490b46e987a5a5a128d7/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fsubmitted%2Fbatch_keys%2FBatchKeysTest.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/7dcd2a9df8c059eab629490b46e987a5a5a128d7/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fsubmitted%2Fbatch_keys%2FBatchKeysTest.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fsubmitted%2Fbatch_keys%2FBatchKeysTest.java?ref=7dcd2a9df8c059eab629490b46e987a5a5a128d7",
      "patch": "@@ -104,10 +104,13 @@ public void testInsert() throws Exception {\n     } finally {\n       sqlSession.close();\n     }\n-\n-    sqlSession = sqlSessionFactory.openSession();\n-    List<User> users = sqlSession.selectList(\"select\");\n-    Assert.assertTrue(users.size() == 2);\n+    try {\n+      sqlSession = sqlSessionFactory.openSession();\n+      List<User> users = sqlSession.selectList(\"select\");\n+      Assert.assertTrue(users.size() == 2);\n+    } finally {\n+      sqlSession.close();\n+    }\n   }\n \n \n@@ -127,9 +130,13 @@ public void testInsertJdbc3() throws Exception {\n       sqlSession.close();\n     }\n \n-    sqlSession = sqlSessionFactory.openSession();\n-    List<User> users = sqlSession.selectList(\"selectIdentity\");\n-    Assert.assertTrue(users.size() == 2);\n+    try {\n+      sqlSession = sqlSessionFactory.openSession();\n+      List<User> users = sqlSession.selectList(\"selectIdentity\");\n+      Assert.assertTrue(users.size() == 2);\n+    } finally {\n+      sqlSession.close();\n+    }\n   }\n \n   @Test\n@@ -149,9 +156,13 @@ public void testInsertWithMapper() throws Exception {\n       sqlSession.close();\n     }\n \n-    sqlSession = sqlSessionFactory.openSession();\n-    List<User> users = sqlSession.selectList(\"select\");\n-    Assert.assertTrue(users.size() == 2);\n+    try {\n+      sqlSession = sqlSessionFactory.openSession();\n+      List<User> users = sqlSession.selectList(\"select\");\n+      Assert.assertTrue(users.size() == 2);\n+    } finally {\n+      sqlSession.close();\n+    }\n   }\n \n   @Test\n@@ -171,9 +182,13 @@ public void testInsertMapperJdbc3() throws Exception {\n       sqlSession.close();\n     }\n \n-    sqlSession = sqlSessionFactory.openSession();\n-    List<User> users = sqlSession.selectList(\"selectIdentity\");\n-    Assert.assertTrue(users.size() == 2);\n+    try {\n+      sqlSession = sqlSessionFactory.openSession();\n+      List<User> users = sqlSession.selectList(\"selectIdentity\");\n+      Assert.assertTrue(users.size() == 2);\n+    } finally {\n+      sqlSession.close();\n+    }\n   }\n \n   @Test\n@@ -189,9 +204,13 @@ public void testInsertMapperNoBatchJdbc3() throws Exception {\n       sqlSession.close();\n     }\n \n-    sqlSession = sqlSessionFactory.openSession();\n-    List<User> users = sqlSession.selectList(\"selectIdentity\");\n-    Assert.assertTrue(users.size() == 1);\n+    try {\n+      sqlSession = sqlSessionFactory.openSession();\n+      List<User> users = sqlSession.selectList(\"selectIdentity\");\n+      Assert.assertTrue(users.size() == 1);\n+    } finally {\n+      sqlSession.close();\n+    }\n   }\n   \n }",
      "parent_sha": "9dfbbc24fcf4cd96eb867f17d0a809be5b44d533"
    }
  },
  {
    "oid": "d761d12daba74082f283f81c00cd3456dc3009a3",
    "message": "code optimization",
    "date": "2020-11-30T14:18:40Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/d761d12daba74082f283f81c00cd3456dc3009a3",
    "details": {
      "sha": "98e50e61949a226980346c0e5083cbab479bdf72",
      "filename": "src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java",
      "status": "modified",
      "additions": 6,
      "deletions": 9,
      "changes": 15,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/d761d12daba74082f283f81c00cd3456dc3009a3/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2Fdefaults%2FDefaultSqlSession.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/d761d12daba74082f283f81c00cd3456dc3009a3/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2Fdefaults%2FDefaultSqlSession.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2Fdefaults%2FDefaultSqlSession.java?ref=d761d12daba74082f283f81c00cd3456dc3009a3",
      "patch": "@@ -142,9 +142,13 @@ public <E> List<E> selectList(String statement, Object parameter) {\n \n   @Override\n   public <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds) {\n+    return selectList(statement, parameter, rowBounds, Executor.NO_RESULT_HANDLER);\n+  }\n+\n+  private <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {\n     try {\n       MappedStatement ms = configuration.getMappedStatement(statement);\n-      return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);\n+      return executor.query(ms, wrapCollection(parameter), rowBounds, handler);\n     } catch (Exception e) {\n       throw ExceptionFactory.wrapException(\"Error querying database.  Cause: \" + e, e);\n     } finally {\n@@ -164,14 +168,7 @@ public void select(String statement, ResultHandler handler) {\n \n   @Override\n   public void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {\n-    try {\n-      MappedStatement ms = configuration.getMappedStatement(statement);\n-      executor.query(ms, wrapCollection(parameter), rowBounds, handler);\n-    } catch (Exception e) {\n-      throw ExceptionFactory.wrapException(\"Error querying database.  Cause: \" + e, e);\n-    } finally {\n-      ErrorContext.instance().reset();\n-    }\n+    selectList(statement, parameter, rowBounds, handler);\n   }\n \n   @Override",
      "parent_sha": "b2aff7694ff05d44b6a5de8c446abce02f53fe1a"
    }
  },
  {
    "oid": "c5eb55e0684c197eda50fd0e7d082c7a20c6be5b",
    "message": "excluded nextedquery and nestedresultmap from rowkey",
    "date": "2010-05-31T01:35:12Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/c5eb55e0684c197eda50fd0e7d082c7a20c6be5b",
    "details": {
      "sha": "aa80167703245fafd213ab72f9a278947d72265a",
      "filename": "src/main/java/org/apache/ibatis/executor/resultset/NestedResultSetHandler.java",
      "status": "modified",
      "additions": 12,
      "deletions": 10,
      "changes": 22,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/c5eb55e0684c197eda50fd0e7d082c7a20c6be5b/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FNestedResultSetHandler.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/c5eb55e0684c197eda50fd0e7d082c7a20c6be5b/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FNestedResultSetHandler.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FNestedResultSetHandler.java?ref=c5eb55e0684c197eda50fd0e7d082c7a20c6be5b",
      "patch": "@@ -211,17 +211,19 @@ private List<ResultMapping> getResultMappingsForRowKey(ResultMap resultMap) {\n \n   private void createRowKeyForMappedProperties(ResultSet rs, CacheKey cacheKey, List<ResultMapping> resultMappings) {\n     for (ResultMapping resultMapping : resultMappings) {\n-      final String column = resultMapping.getColumn();\n-      final TypeHandler th = resultMapping.getTypeHandler();\n-      if (column != null) {\n-        try {\n-          final Object value = th.getResult(rs, column);\n-          if (value != null) {\n-            cacheKey.update(column);\n-            cacheKey.update(value);\n+      if (resultMapping.getNestedQueryId() == null && resultMapping.getNestedResultMapId() == null) {\n+        final String column = resultMapping.getColumn();\n+        final TypeHandler th = resultMapping.getTypeHandler();\n+        if (column != null) {\n+          try {\n+            final Object value = th.getResult(rs, column);\n+            if (value != null) {\n+              cacheKey.update(column);\n+              cacheKey.update(value);\n+            }\n+          } catch (Exception e) {\n+            //ignore\n           }\n-        } catch (Exception e) {\n-          //ignore\n         }\n       }\n     }",
      "parent_sha": "7f17c401e714522693f83b084b259c25b8ae8c8f"
    }
  },
  {
    "oid": "aca6951b2f91ee5b775bd52c579fa51c70cb1da1",
    "message": "Reflecting feedback on pull request - simplifications, imports fix, concrete exception used",
    "date": "2015-02-27T21:17:21Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/aca6951b2f91ee5b775bd52c579fa51c70cb1da1",
    "details": {
      "sha": "ad56c2e0f9a2631ae30319e39246d7320419621a",
      "filename": "src/main/java/org/apache/ibatis/builder/xml/XMLIncludeTransformer.java",
      "status": "modified",
      "additions": 15,
      "deletions": 26,
      "changes": 41,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/aca6951b2f91ee5b775bd52c579fa51c70cb1da1/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2Fxml%2FXMLIncludeTransformer.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/aca6951b2f91ee5b775bd52c579fa51c70cb1da1/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2Fxml%2FXMLIncludeTransformer.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2Fxml%2FXMLIncludeTransformer.java?ref=aca6951b2f91ee5b775bd52c579fa51c70cb1da1",
      "patch": "@@ -15,17 +15,19 @@\n  */\n package org.apache.ibatis.builder.xml;\n \n+import org.apache.ibatis.builder.BuilderException;\n import org.apache.ibatis.builder.IncompleteElementException;\n import org.apache.ibatis.builder.MapperBuilderAssistant;\n-import org.apache.ibatis.parsing.GenericTokenParser;\n import org.apache.ibatis.parsing.PropertyParser;\n-import org.apache.ibatis.parsing.TokenHandler;\n import org.apache.ibatis.parsing.XNode;\n import org.apache.ibatis.session.Configuration;\n import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n \n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Properties;\n \n /**\n  * @author Frank D. Martinez [mnesarco]\n@@ -63,15 +65,12 @@ private void applyIncludes(Node source, final Properties variablesContext) {\n       // replace variables in include refid value\n       refid = PropertyParser.parse(refid, variablesContext);\n       Node toInclude = findSqlFragment(refid);\n-      Properties newVariablesContext = getVariablesContext(source);\n+      Properties newVariablesContext = getVariablesContext(source, variablesContext);\n       if (!newVariablesContext.isEmpty()) {\n-        // replace variables in variable values too\n-        for (Object name : newVariablesContext.keySet()) {\n-          newVariablesContext.put(name, PropertyParser.parse(newVariablesContext.get(name).toString(), variablesContext));\n-        }\n-        // merge new and inherited into new full one\n-        applyInheritedContext(newVariablesContext, variablesContext);\n-        fullContext = newVariablesContext;\n+        // merge contexts\n+        fullContext = new Properties();\n+        fullContext.putAll(variablesContext);\n+        fullContext.putAll(newVariablesContext);\n       } else {\n         // no new context - use inherited fully\n         fullContext = variablesContext;\n@@ -113,25 +112,13 @@ private String getStringAttribute(Node node, String name) {\n     return node.getAttributes().getNamedItem(name).getNodeValue();\n   }\n \n-  /**\n-   * Add inherited context into newly created one.\n-   * @param newContext variables defined current include clause where inherited values will be placed\n-   * @param inheritedContext all inherited variables values\n-   */\n-  private void applyInheritedContext(Properties newContext, Properties inheritedContext) {\n-    for (Map.Entry<Object, Object> e : inheritedContext.entrySet()) {\n-      if (!newContext.containsKey(e.getKey())) {\n-        newContext.put(e.getKey(), e.getValue());\n-      }\n-    }\n-  }\n-\n   /**\n    * Read placholders and their values from include node definition. \n    * @param node Include node instance\n+   * @param inheritedVariablesContext Current context used for replace variables in new variables values\n    * @return variables context from include instance (no inherited values)\n    */\n-  private Properties getVariablesContext(Node node) {\n+  private Properties getVariablesContext(Node node, Properties inheritedVariablesContext) {\n     List<Node> subElements = getSubElements(node);\n     if (subElements.isEmpty()) {\n       return new Properties();\n@@ -140,10 +127,12 @@ private Properties getVariablesContext(Node node) {\n       for (Node variableValue : subElements) {\n         String name = getStringAttribute(variableValue, \"name\");\n         String value = getStringAttribute(variableValue, \"value\");\n+        // Replace variables inside\n+        value = PropertyParser.parse(value, inheritedVariablesContext);\n         // Push new value\n         Object originalValue = variablesContext.put(name, value);\n         if (originalValue != null) {\n-          throw new IllegalArgumentException(\"Variable \" + name + \" defined twice in the same include definition\");\n+          throw new BuilderException(\"Variable \" + name + \" defined twice in the same include definition\");\n         }\n       }\n       return variablesContext;",
      "parent_sha": "fd1544643dffeb15a96a7ee8dc1cb95f73be6160"
    }
  },
  {
    "oid": "6d378bb20258399aea2266224c8289ddb2052db5",
    "message": "[test] Cleanup cacheKeyTest per review",
    "date": "2017-08-22T03:03:44Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/6d378bb20258399aea2266224c8289ddb2052db5",
    "details": {
      "sha": "cf38f56ff6f0c338a89c33d75c3c24d2b9cc2f9d",
      "filename": "src/test/java/org/apache/ibatis/cache/CacheKeyTest.java",
      "status": "modified",
      "additions": 12,
      "deletions": 15,
      "changes": 27,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/6d378bb20258399aea2266224c8289ddb2052db5/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fcache%2FCacheKeyTest.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/6d378bb20258399aea2266224c8289ddb2052db5/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fcache%2FCacheKeyTest.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fcache%2FCacheKeyTest.java?ref=6d378bb20258399aea2266224c8289ddb2052db5",
      "patch": "@@ -20,6 +20,8 @@\n import org.junit.Assert;\n import org.junit.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n@@ -89,30 +91,25 @@ public void shouldTestCacheKeysWithBinaryArrays() throws Exception {\n   }\n \n   @Test (expected = NotSerializableException.class)\n-  public void serializationExceptionTest() throws ClassNotFoundException, IOException {\n+  public void serializationExceptionTest() throws Exception {\n     CacheKey cacheKey = new CacheKey();\n     cacheKey.update(new Object());\n-    canSerialize(cacheKey);\n+    serialize(cacheKey);\n   }\n \n   @Test\n-  public void serializationTest() throws ClassNotFoundException, IOException {\n+  public void serializationTest() throws Exception {\n     CacheKey cacheKey = new CacheKey();\n     cacheKey.update(\"serializable\");\n-    canSerialize(cacheKey);\n+    Assert.assertEquals(cacheKey, serialize(cacheKey));\n   }\n \n-  private void canSerialize(final CacheKey object) throws ClassNotFoundException, IOException {\n-      FileOutputStream fout = new FileOutputStream(\"target/address.ser\");\n-      ObjectOutputStream output = new ObjectOutputStream(fout);\n-      output.writeObject(object);\n-      output.close();\n+  private static <T> T serialize(T object) throws Exception {\n+      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+      new ObjectOutputStream(baos).writeObject(object);\n \n-      FileInputStream fin = new FileInputStream(\"target/address.ser\");\n-      ObjectInputStream input = new ObjectInputStream(fin);\n-      CacheKey cacheKey = (CacheKey) input.readObject();\n-      input.close();\n-\n-      Assert.assertEquals(1, cacheKey.getUpdateCount());\n+      ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n+      return (T) new ObjectInputStream(bais).readObject();\n   }\n+\n }",
      "parent_sha": "9ffabe2ddc9841c1168357d18be7411e4be13790"
    }
  },
  {
    "oid": "9bfbfe4e3f5056059fd943721351648c3a68e492",
    "message": "add more test cases",
    "date": "2024-09-29T03:14:12Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/9bfbfe4e3f5056059fd943721351648c3a68e492",
    "details": {
      "sha": "2673f4743e1a5afa8e32987dc98988bb831ded3f",
      "filename": "src/test/java/org/apache/ibatis/type/TypeAliasRegistryTest.java",
      "status": "modified",
      "additions": 20,
      "deletions": 4,
      "changes": 24,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/9bfbfe4e3f5056059fd943721351648c3a68e492/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Ftype%2FTypeAliasRegistryTest.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/9bfbfe4e3f5056059fd943721351648c3a68e492/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Ftype%2FTypeAliasRegistryTest.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Ftype%2FTypeAliasRegistryTest.java?ref=9bfbfe4e3f5056059fd943721351648c3a68e492",
      "patch": "@@ -15,14 +15,13 @@\n  */\n package org.apache.ibatis.type;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-\n import java.math.BigDecimal;\n \n import org.junit.jupiter.api.Test;\n \n+import static org.assertj.core.api.Assertions.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n class TypeAliasRegistryTest {\n \n   @Test\n@@ -75,4 +74,21 @@ void shouldFetchCharType() {\n     assertEquals(char[].class, typeAliasRegistry.resolveAlias(\"_char[]\"));\n   }\n \n+  @Test\n+  void shouldNotBeAbleToRegisterAliasWithEmptyString() {\n+    TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry();\n+\n+    assertThatThrownBy(() -> typeAliasRegistry.registerAlias(\"foo\", \"\"))\n+      .isInstanceOf(TypeException.class)\n+      .hasMessageContaining(\"Error registering type alias foo for\");\n+  }\n+\n+  @Test\n+  void shouldNotBeAbleToResolveNotExistsAlias() {\n+    TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry();\n+\n+    assertThatThrownBy(() -> typeAliasRegistry.resolveAlias(\"abc\"))\n+      .isInstanceOf(TypeException.class)\n+      .hasMessageContaining(\"Could not resolve type alias 'abc'.  Cause: java.lang.ClassNotFoundException: Cannot find class: abc\");\n+  }\n }",
      "parent_sha": "9cce295122d1d9d2571d475b0fd09bd04a1f298d"
    }
  },
  {
    "oid": "383d748ca8d4e60bae40934e31b5a02a50fe20e5",
    "message": "Improved the error message on missing type handler.",
    "date": "2016-02-20T16:35:15Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/383d748ca8d4e60bae40934e31b5a02a50fe20e5",
    "details": {
      "sha": "216372e97f9198bc0ac54d56c27678031fd00f21",
      "filename": "src/main/java/org/apache/ibatis/mapping/ParameterMapping.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/383d748ca8d4e60bae40934e31b5a02a50fe20e5/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fmapping%2FParameterMapping.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/383d748ca8d4e60bae40934e31b5a02a50fe20e5/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fmapping%2FParameterMapping.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fmapping%2FParameterMapping.java?ref=383d748ca8d4e60bae40934e31b5a02a50fe20e5",
      "patch": "@@ -114,9 +114,9 @@ private void validate() {\n         }            \n       } else {\n         if (parameterMapping.typeHandler == null) { \n-          throw new IllegalStateException(\"Type handler was null on parameter mapping for property '\"  \n-              + parameterMapping.property + \"'.  \" \n-              + \"It was either not specified and/or could not be found for the javaType / jdbcType combination specified.\");\n+          throw new IllegalStateException(\"Type handler was null on parameter mapping for property '\"\n+            + parameterMapping.property + \"'. It was either not specified and/or could not be found for the javaType (\"\n+            + parameterMapping.javaType.getName() + \") : jdbcType (\" + parameterMapping.jdbcType + \") combination.\");\n         }\n       }\n     }",
      "parent_sha": "74f488d850a52de210080975e7721843328b0c14"
    }
  },
  {
    "oid": "8820b11da9e8e7ac82d9e6dd37d3e80c07c51609",
    "message": "Restore original behavior\n\nThe doc says that fair locks show slower (often much slower) throughput.\nConsidering the nature of this class, higher throughput may be more important than fairness here.",
    "date": "2022-07-16T19:03:00Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/8820b11da9e8e7ac82d9e6dd37d3e80c07c51609",
    "details": {
      "sha": "6e281fb36956345a706edb01ba16bb12c37c4c85",
      "filename": "src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java",
      "status": "modified",
      "additions": 14,
      "deletions": 17,
      "changes": 31,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/8820b11da9e8e7ac82d9e6dd37d3e80c07c51609/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fdatasource%2Fpooled%2FPooledDataSource.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/8820b11da9e8e7ac82d9e6dd37d3e80c07c51609/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fdatasource%2Fpooled%2FPooledDataSource.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fdatasource%2Fpooled%2FPooledDataSource.java?ref=8820b11da9e8e7ac82d9e6dd37d3e80c07c51609",
      "patch": "@@ -24,6 +24,8 @@\n import java.sql.Statement;\n import java.util.Properties;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.Lock;\n import java.util.concurrent.locks.ReentrantLock;\n import java.util.logging.Logger;\n \n@@ -43,7 +45,6 @@ public class PooledDataSource implements DataSource {\n   private static final Log log = LogFactory.getLog(PooledDataSource.class);\n \n   private final PoolState state = new PoolState(this);\n-  private final ReentrantLock fairLock = new ReentrantLock(true);\n \n   private final UnpooledDataSource dataSource;\n \n@@ -59,6 +60,9 @@ public class PooledDataSource implements DataSource {\n \n   private int expectedConnectionTypeCode;\n \n+  private Lock lock = new ReentrantLock();\n+  private Condition condition = lock.newCondition();\n+\n   public PooledDataSource() {\n     dataSource = new UnpooledDataSource();\n   }\n@@ -331,8 +335,8 @@ public int getPoolPingConnectionsNotUsedFor() {\n    * Closes all active and idle connections in the pool.\n    */\n   public void forceCloseAll() {\n+    lock.lock();\n     try {\n-      fairLock.lock();\n       expectedConnectionTypeCode = assembleConnectionTypeCode(dataSource.getUrl(), dataSource.getUsername(), dataSource.getPassword());\n       for (int i = state.activeConnections.size(); i > 0; i--) {\n         try {\n@@ -363,9 +367,7 @@ public void forceCloseAll() {\n         }\n       }\n     } finally {\n-      if (fairLock.isLocked()) {\n-        fairLock.unlock();\n-      }\n+      lock.unlock();\n     }\n     if (log.isDebugEnabled()) {\n       log.debug(\"PooledDataSource forcefully closed/removed all connections.\");\n@@ -381,8 +383,9 @@ private int assembleConnectionTypeCode(String url, String username, String passw\n   }\n \n   protected void pushConnection(PooledConnection conn) throws SQLException {\n+\n+    lock.lock();\n     try {\n-      fairLock.lock();\n       state.activeConnections.remove(conn);\n       if (conn.isValid()) {\n         if (state.idleConnections.size() < poolMaximumIdleConnections && conn.getConnectionTypeCode() == expectedConnectionTypeCode) {\n@@ -398,9 +401,7 @@ protected void pushConnection(PooledConnection conn) throws SQLException {\n           if (log.isDebugEnabled()) {\n             log.debug(\"Returned connection \" + newConn.getRealHashCode() + \" to pool.\");\n           }\n-          if (fairLock.isLocked()) {\n-            fairLock.unlock();\n-          }\n+          condition.signal();\n         } else {\n           state.accumulatedCheckoutTime += conn.getCheckoutTime();\n           if (!conn.getRealConnection().getAutoCommit()) {\n@@ -419,9 +420,7 @@ protected void pushConnection(PooledConnection conn) throws SQLException {\n         state.badConnectionCount++;\n       }\n     } finally {\n-      if (fairLock.isLocked()) {\n-        fairLock.unlock();\n-      }\n+      lock.unlock();\n     }\n   }\n \n@@ -432,8 +431,8 @@ private PooledConnection popConnection(String username, String password) throws\n     int localBadConnectionCount = 0;\n \n     while (conn == null) {\n+      lock.lock();\n       try {\n-        fairLock.lock();\n         if (!state.idleConnections.isEmpty()) {\n           // Pool has available connection\n           conn = state.idleConnections.remove(0);\n@@ -491,7 +490,7 @@ private PooledConnection popConnection(String username, String password) throws\n                   log.debug(\"Waiting as long as \" + poolTimeToWait + \" milliseconds for connection.\");\n                 }\n                 long wt = System.currentTimeMillis();\n-                fairLock.tryLock(poolTimeToWait, TimeUnit.MILLISECONDS);\n+                condition.await(poolTimeToWait, TimeUnit.MILLISECONDS);\n                 state.accumulatedWaitTime += System.currentTimeMillis() - wt;\n               } catch (InterruptedException e) {\n                 // set interrupt flag\n@@ -529,9 +528,7 @@ private PooledConnection popConnection(String username, String password) throws\n           }\n         }\n       } finally {\n-        if (fairLock.isLocked()) {\n-          fairLock.unlock();\n-        }\n+        lock.unlock();\n       }\n \n     }",
      "parent_sha": "d6a2d6278cfc7aaa7e8abf6127966d69caab6748"
    }
  },
  {
    "oid": "2ec79d39e516022e45a208671d721c4fdf23f117",
    "message": "avoid generating NullPointerException while closing IO",
    "date": "2022-04-21T16:21:29Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/2ec79d39e516022e45a208671d721c4fdf23f117",
    "details": {
      "sha": "9726a06a97ce68cb18b0fb26d4ba355eb588690a",
      "filename": "src/main/java/org/apache/ibatis/session/SqlSessionFactoryBuilder.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/2ec79d39e516022e45a208671d721c4fdf23f117/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FSqlSessionFactoryBuilder.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/2ec79d39e516022e45a208671d721c4fdf23f117/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FSqlSessionFactoryBuilder.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FSqlSessionFactoryBuilder.java?ref=2ec79d39e516022e45a208671d721c4fdf23f117",
      "patch": "@@ -53,7 +53,9 @@ public SqlSessionFactory build(Reader reader, String environment, Properties pro\n     } finally {\n       ErrorContext.instance().reset();\n       try {\n-        reader.close();\n+      \tif (reader != null) {\n+      \t  reader.close();\n+      \t}\n       } catch (IOException e) {\n         // Intentionally ignore. Prefer previous error.\n       }\n@@ -81,7 +83,9 @@ public SqlSessionFactory build(InputStream inputStream, String environment, Prop\n     } finally {\n       ErrorContext.instance().reset();\n       try {\n-        inputStream.close();\n+      \tif (inputStream != null) {\n+      \t  inputStream.close();\n+      \t}\n       } catch (IOException e) {\n         // Intentionally ignore. Prefer previous error.\n       }",
      "parent_sha": "774a52daf037a9a792e75cbe414c975b8d9f7866"
    }
  },
  {
    "oid": "9ffeb75057d541530b7ff410cfe220df26c893be",
    "message": "Update PrimitiveTypes.java\n\nfix add method",
    "date": "2017-05-24T03:06:58Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/9ffeb75057d541530b7ff410cfe220df26c893be",
    "details": {
      "sha": "24aa995899afb45efb17bcdd39edf6aab03fea1c",
      "filename": "src/main/java/org/apache/ibatis/executor/resultset/PrimitiveTypes.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/9ffeb75057d541530b7ff410cfe220df26c893be/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FPrimitiveTypes.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/9ffeb75057d541530b7ff410cfe220df26c893be/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FPrimitiveTypes.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FPrimitiveTypes.java?ref=9ffeb75057d541530b7ff410cfe220df26c893be",
      "patch": "@@ -39,7 +39,7 @@ public PrimitiveTypes() {\n \n   private void add(final Class<?> primitiveType, final Class<?> wrapperType) {\n     primitiveToWrappers.put(primitiveType, wrapperType);\n-    primitiveToWrappers.put(wrapperType, primitiveType);\n+    wrappersToPrimitives.put(wrapperType, primitiveType);\n   }\n \n   public Class<?> getWrapper(final Class<?> primitiveType) {",
      "parent_sha": "99b74df77f69e533c48e8ae0e25a6eb3780b9bf0"
    }
  },
  {
    "oid": "9ca2f3f57d8091b584abe2ad389303d6a84e3fa5",
    "message": "better explanation for http://code.google.com/p/mybatis/issues/detail?id=508",
    "date": "2012-03-19T16:44:54Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/9ca2f3f57d8091b584abe2ad389303d6a84e3fa5",
    "details": {
      "sha": "4b65ae793f83e7e822d8f70845d6b95ace885321",
      "filename": "src/main/java/org/apache/ibatis/binding/MapperMethod.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/9ca2f3f57d8091b584abe2ad389303d6a84e3fa5/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbinding%2FMapperMethod.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/9ca2f3f57d8091b584abe2ad389303d6a84e3fa5/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbinding%2FMapperMethod.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbinding%2FMapperMethod.java?ref=9ca2f3f57d8091b584abe2ad389303d6a84e3fa5",
      "patch": "@@ -103,7 +103,7 @@ public Object execute(Object[] args) {\n   private void executeWithResultHandler(Object[] args) {\r\n     MappedStatement ms = config.getMappedStatement(commandName);\r\n     if (Void.TYPE.equals(ms.getResultMaps().get(0).getType())) {\r\n-      throw new BindingException(method.getName() + \", annotated methods do not support ResultHandlers, use XML instead.\");\r\n+      throw new BindingException(\"method \" + method.getName() + \" needs either a @ResultMap annotation or a resultType attribute in XML so a ResultHandler can be used as a parameter.\");\r\n     }\r\n     Object param = getParam(args);\r\n     if (rowBoundsIndex != null) {\r",
      "parent_sha": "bea1bf66f8235283af106d81ab65befe2677c802"
    }
  },
  {
    "oid": "5f27ff55e679192e92d7b206c387ccaccf77ee5d",
    "message": "Do not deprecate getReadWriteLock, just add to the docs that it is not\nused.",
    "date": "2014-03-15T11:29:13Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/5f27ff55e679192e92d7b206c387ccaccf77ee5d",
    "details": {
      "sha": "660fe6f6d61686b728aa0c3852f0d2581b96c18b",
      "filename": "src/main/java/org/apache/ibatis/cache/Cache.java",
      "status": "modified",
      "additions": 12,
      "deletions": 10,
      "changes": 22,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/5f27ff55e679192e92d7b206c387ccaccf77ee5d/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fcache%2FCache.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/5f27ff55e679192e92d7b206c387ccaccf77ee5d/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fcache%2FCache.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fcache%2FCache.java?ref=5f27ff55e679192e92d7b206c387ccaccf77ee5d",
      "patch": "@@ -18,12 +18,14 @@\n import java.util.concurrent.locks.ReadWriteLock;\n \n /**\n- * Interface to be implemented by cache providers.\n+ * SPI for cache providers.\n  * \n  * One instance of cache will be created for each namespace.\n  * \n  * The cache implementation must have a constructor that receives the cache id as an String parameter.\n  * \n+ * MyBatis will pass the namespace as id to the constructor.\n+ * \n  * <pre>\n  * public MyCache(final String id) {\n  *  if (id == null) {\n@@ -43,13 +45,6 @@ public interface Cache {\n    */\n   String getId();\n \n-  /**\n-   * Optional. It is not called by the core.\n-   * \n-   * @return The cache size.\n-   */\n-  int getSize();\n-\n   /**\n    * @param key Can be any object but usually it is a {@link CacheKey}\n    * @param value The result of a select.\n@@ -75,12 +70,19 @@ public interface Cache {\n    */  \n   void clear();\n \n+  /**\n+   * Optional. This method is not called by the core.\n+   * \n+   * @return The number of elements stored in the cache (not its capacity).\n+   */\n+  int getSize();\n+  \n   /** \n-   * As of 3.2.6 this method is no longer called by the core. \n+   * Optional. As of 3.2.6 this method is no longer called by the core.\n+   *  \n    * Any locking needed by the cache must be provided internally by the cache provider.\n    * \n    * @return A ReadWriteLock \n-   * @deprecated \n    */\n   ReadWriteLock getReadWriteLock();\n ",
      "parent_sha": "e6d8c8cb703db9271da676fe48d5a61b939bea45"
    }
  },
  {
    "oid": "e345ace9e7de8998a877d3dfccaed76b0ca7107a",
    "message": "[ci] Fix spelling",
    "date": "2023-11-03T22:34:05Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/e345ace9e7de8998a877d3dfccaed76b0ca7107a",
    "details": {
      "sha": "0293b35c242fccf53a12e5812961270ffb588f06",
      "filename": "src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/e345ace9e7de8998a877d3dfccaed76b0ca7107a/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fjdbc%2FScriptRunner.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/e345ace9e7de8998a877d3dfccaed76b0ca7107a/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fjdbc%2FScriptRunner.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fjdbc%2FScriptRunner.java?ref=e345ace9e7de8998a877d3dfccaed76b0ca7107a",
      "patch": "@@ -248,7 +248,7 @@ private void executeStatement(String command) throws SQLException {\n       }\n       try {\n         boolean hasResults = statement.execute(sql);\n-        // DO NOT try to 'imporove' the condition even if IDE tells you to!\n+        // DO NOT try to 'improve' the condition even if IDE tells you to!\n         // It's important that getUpdateCount() is called here.\n         while (!(!hasResults && statement.getUpdateCount() == -1)) {\n           checkWarnings(statement);",
      "parent_sha": "ab67df3fd877997afe3f150bfc2b982b91f51719"
    }
  },
  {
    "oid": "d6be6e0eda4900eecb09a2cc8c5553c44fff1b18",
    "message": "[ci] Use isEmpty checks instead of size",
    "date": "2017-04-24T01:16:20Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/d6be6e0eda4900eecb09a2cc8c5553c44fff1b18",
    "details": {
      "sha": "84909ff7f5fdc2e8147c24985ce877637f04f7ea",
      "filename": "src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/d6be6e0eda4900eecb09a2cc8c5553c44fff1b18/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FDefaultResultSetHandler.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/d6be6e0eda4900eecb09a2cc8c5553c44fff1b18/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FDefaultResultSetHandler.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FDefaultResultSetHandler.java?ref=d6be6e0eda4900eecb09a2cc8c5553c44fff1b18",
      "patch": "@@ -507,7 +507,7 @@ private List<UnMappedColumnAutoMapping> createAutomaticMappings(ResultSetWrapper\n   private boolean applyAutomaticMappings(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject, String columnPrefix) throws SQLException {\n     List<UnMappedColumnAutoMapping> autoMapping = createAutomaticMappings(rsw, resultMap, metaObject, columnPrefix);\n     boolean foundValues = false;\n-    if (autoMapping.size() > 0) {\n+    if (!autoMapping.isEmpty()) {\n       for (UnMappedColumnAutoMapping mapping : autoMapping) {\n         final Object value = mapping.typeHandler.getResult(rsw.getResultSet(), mapping.column);\n         if (value != null) {\n@@ -1012,7 +1012,7 @@ private CacheKey createRowKey(ResultMap resultMap, ResultSetWrapper rsw, String\n     final CacheKey cacheKey = new CacheKey();\n     cacheKey.update(resultMap.getId());\n     List<ResultMapping> resultMappings = getResultMappingsForRowKey(resultMap);\n-    if (resultMappings.size() == 0) {\n+    if (resultMappings.isEmpty()) {\n       if (Map.class.isAssignableFrom(resultMap.getType())) {\n         createRowKeyForMap(rsw, cacheKey);\n       } else {\n@@ -1043,7 +1043,7 @@ private CacheKey combineKeys(CacheKey rowKey, CacheKey parentRowKey) {\n \n   private List<ResultMapping> getResultMappingsForRowKey(ResultMap resultMap) {\n     List<ResultMapping> resultMappings = resultMap.getIdResultMappings();\n-    if (resultMappings.size() == 0) {\n+    if (resultMappings.isEmpty()) {\n       resultMappings = resultMap.getPropertyResultMappings();\n     }\n     return resultMappings;",
      "parent_sha": "0941ba328bb1f0bdc60cc02a9def28eeb089f9ed"
    }
  },
  {
    "oid": "9466ddf19f861654fcea0ed9872be67d1df187e7",
    "message": "forObject is expecting an Object not its Class\n\nCloses: https://github.com/quarkiverse/quarkus-mybatis/issues/10",
    "date": "2021-07-08T17:05:30Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/9466ddf19f861654fcea0ed9872be67d1df187e7",
    "details": {
      "sha": "bece5f3c0e64f2a82c3274d98ee917c8c4c714c8",
      "filename": "src/main/java/org/apache/ibatis/reflection/SystemMetaObject.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/9466ddf19f861654fcea0ed9872be67d1df187e7/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FSystemMetaObject.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/9466ddf19f861654fcea0ed9872be67d1df187e7/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FSystemMetaObject.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FSystemMetaObject.java?ref=9466ddf19f861654fcea0ed9872be67d1df187e7",
      "patch": "@@ -27,7 +27,7 @@ public final class SystemMetaObject {\n \n   public static final ObjectFactory DEFAULT_OBJECT_FACTORY = new DefaultObjectFactory();\n   public static final ObjectWrapperFactory DEFAULT_OBJECT_WRAPPER_FACTORY = new DefaultObjectWrapperFactory();\n-  public static final MetaObject NULL_META_OBJECT = MetaObject.forObject(NullObject.class, DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY, new DefaultReflectorFactory());\n+  public static final MetaObject NULL_META_OBJECT = MetaObject.forObject(new NullObject(), DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY, new DefaultReflectorFactory());\n \n   private SystemMetaObject() {\n     // Prevent Instantiation of Static Class",
      "parent_sha": "193e6fa7ef3c7eb07d319adafa3f8822cb1af4a5"
    }
  },
  {
    "oid": "9e4abf4eb49aa2cfc22965eb5b2e537158dd5913",
    "message": "tests: Remove <T> as not required",
    "date": "2024-12-31T04:28:11Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/9e4abf4eb49aa2cfc22965eb5b2e537158dd5913",
    "details": {
      "sha": "ad761adae8f39bfbabe3798cbf30e91c96de6cad",
      "filename": "src/test/java/org/apache/ibatis/builder/ExampleObjectFactory.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/9e4abf4eb49aa2cfc22965eb5b2e537158dd5913/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2FExampleObjectFactory.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/9e4abf4eb49aa2cfc22965eb5b2e537158dd5913/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2FExampleObjectFactory.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2FExampleObjectFactory.java?ref=9e4abf4eb49aa2cfc22965eb5b2e537158dd5913",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- *    Copyright 2009-2023 the original author or authors.\n+ *    Copyright 2009-2024 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.\n@@ -26,12 +26,12 @@ public class ExampleObjectFactory extends DefaultObjectFactory {\n \n   @Override\n   public <T> T create(Class<T> type) {\n-    return super.<T>create(type);\n+    return super.create(type);\n   }\n \n   @Override\n   public <T> T create(Class<T> type, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {\n-    return super.<T>create(type, constructorArgTypes, constructorArgs);\n+    return super.create(type, constructorArgTypes, constructorArgs);\n   }\n \n   @Override",
      "parent_sha": "3d64b1b95fe177af4903abf8c89193bb7e09a075"
    }
  },
  {
    "oid": "3ffa3071ba49c6743636731c9b4e85ee3ce4379b",
    "message": "clean failure doc url link",
    "date": "2020-09-29T07:53:46Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/3ffa3071ba49c6743636731c9b4e85ee3ce4379b",
    "details": {
      "sha": "2f9668d2237ba8825f3b866d3919089942015c87",
      "filename": "src/test/java/org/apache/ibatis/submitted/refid_resolution/ExternalRefidResolutionTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/3ffa3071ba49c6743636731c9b4e85ee3ce4379b/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fsubmitted%2Frefid_resolution%2FExternalRefidResolutionTest.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/3ffa3071ba49c6743636731c9b4e85ee3ce4379b/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fsubmitted%2Frefid_resolution%2FExternalRefidResolutionTest.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fsubmitted%2Frefid_resolution%2FExternalRefidResolutionTest.java?ref=3ffa3071ba49c6743636731c9b4e85ee3ce4379b",
      "patch": "@@ -23,7 +23,7 @@\n import org.junit.jupiter.api.Test;\n \n /**\n- * @see http://code.google.com/p/mybatis/issues/detail?id=291\n+ *\n  */\n class ExternalRefidResolutionTest {\n   @Test",
      "parent_sha": "24d672c654e0707b4127c942edafdfee0a355307"
    }
  },
  {
    "oid": "926c451275908bccd0e25a4b57a02b9173739ad5",
    "message": "Update license year",
    "date": "2024-03-19T21:05:31Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/926c451275908bccd0e25a4b57a02b9173739ad5",
    "details": {
      "sha": "8cdc29d637773aba6f7b7b96547bfac7882ed667",
      "filename": "src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/926c451275908bccd0e25a4b57a02b9173739ad5/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FDefaultResultSetHandler.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/926c451275908bccd0e25a4b57a02b9173739ad5/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FDefaultResultSetHandler.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FDefaultResultSetHandler.java?ref=926c451275908bccd0e25a4b57a02b9173739ad5",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- *    Copyright 2009-2023 the original author or authors.\n+ *    Copyright 2009-2024 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.",
      "parent_sha": "d846fbc3accb23c284e64090db61b079e3bf2e86"
    }
  },
  {
    "oid": "3f9883d0994f9ded4e2c32ee32143cb757c34378",
    "message": "http://code.google.com/p/mybatis/issues/detail?id=114  faster method for non existent columns",
    "date": "2012-01-15T00:00:15Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/3f9883d0994f9ded4e2c32ee32143cb757c34378",
    "details": {
      "sha": "5cc202ec1e5796fe663eb1c33071d24efd23797f",
      "filename": "src/main/java/org/apache/ibatis/executor/resultset/NestedResultSetHandler.java",
      "status": "modified",
      "additions": 22,
      "deletions": 10,
      "changes": 32,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/3f9883d0994f9ded4e2c32ee32143cb757c34378/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FNestedResultSetHandler.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/3f9883d0994f9ded4e2c32ee32143cb757c34378/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FNestedResultSetHandler.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FNestedResultSetHandler.java?ref=3f9883d0994f9ded4e2c32ee32143cb757c34378",
      "patch": "@@ -249,7 +249,7 @@ private List<ResultMapping> getResultMappingsForRowKey(ResultMap resultMap) {\n     return resultMappings;\r\n   }\r\n \r\n-  private void createRowKeyForMappedProperties(ResultSet rs, CacheKey cacheKey, List<ResultMapping> resultMappings, String columnPrefix) {\r\n+  private void createRowKeyForMappedProperties(ResultSet rs, CacheKey cacheKey, List<ResultMapping> resultMappings, String columnPrefix) throws SQLException {\r\n     for (ResultMapping resultMapping : resultMappings) {\r\n       if (resultMapping.getNestedResultMapId() != null) {\r\n         final ResultMap myResultMap = configuration.getResultMap(resultMapping.getNestedResultMapId());\r\n@@ -258,15 +258,11 @@ private void createRowKeyForMappedProperties(ResultSet rs, CacheKey cacheKey, Li\n       } else if (resultMapping.getNestedQueryId() == null) {\r\n         final String column = prependPrefix(resultMapping.getColumn(), columnPrefix);\r\n         final TypeHandler<?> th = resultMapping.getTypeHandler();\r\n-        if (column != null) {\r\n-          try {\r\n-            final Object value = th.getResult(rs, column);\r\n-            if (value != null) {\r\n-              cacheKey.update(column);\r\n-              cacheKey.update(value);\r\n-            }\r\n-          } catch (Exception e) {\r\n-            //ignore\r\n+        if (column != null && resultSetHasColumn(rs, column)) { // issue #114\r\n+          final Object value = th.getResult(rs, column);\r\n+          if (value != null) {\r\n+            cacheKey.update(column);\r\n+            cacheKey.update(value);\r\n           }\r\n         }\r\n       }\r\n@@ -311,4 +307,20 @@ private void createRowKeyForMap(ResultSet rs, CacheKey cacheKey) throws SQLExcep\n     }\r\n   }\r\n \r\n+  protected boolean resultSetHasColumn(final ResultSet rs, final String column) {\r\n+    try {\r\n+      final ResultSetMetaData rsmd = rs.getMetaData();\r\n+      final int columnCount = rsmd.getColumnCount();\r\n+      for (int i = 1; i <= columnCount; i++) {\r\n+        final String label = rsmd.getColumnLabel(i);\r\n+        if (column.equalsIgnoreCase(label)) {\r\n+          return true;\r\n+        }\r\n+      }\r\n+    } catch (final SQLException e) {\r\n+      // ignore \r\n+    }\r\n+    return false;\r\n+  }\r\n+  \r\n }\n\\ No newline at end of file",
      "parent_sha": "f616f0338e5ccda01d3a01286c6c03b140fa2894"
    }
  },
  {
    "oid": "3c41a1b5c7e036338e96ee526ebd8e95a61bd3f8",
    "message": "Unused parameter cleaning",
    "date": "2015-12-23T10:27:45Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/3c41a1b5c7e036338e96ee526ebd8e95a61bd3f8",
    "details": {
      "sha": "aad125ee7c89a0c6baf3a8a7ec8e4f43d42a1006",
      "filename": "src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/3c41a1b5c7e036338e96ee526ebd8e95a61bd3f8/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FDefaultResultSetHandler.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/3c41a1b5c7e036338e96ee526ebd8e95a61bd3f8/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FDefaultResultSetHandler.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FDefaultResultSetHandler.java?ref=3c41a1b5c7e036338e96ee526ebd8e95a61bd3f8",
      "patch": "@@ -808,9 +808,9 @@ private void handleRowValuesForNestedResultMap(ResultSetWrapper rsw, ResultMap r\n           nestedResultObjects.clear();\n           storeObject(resultHandler, resultContext, rowValue, parentMapping, rsw.getResultSet());\n         }\n-        rowValue = getRowValue(rsw, discriminatedResultMap, rowKey, rowKey, null, partialObject);\n+        rowValue = getRowValue(rsw, discriminatedResultMap, rowKey, null, partialObject);\n       } else {\n-        rowValue = getRowValue(rsw, discriminatedResultMap, rowKey, rowKey, null, partialObject);\n+        rowValue = getRowValue(rsw, discriminatedResultMap, rowKey, null, partialObject);\n         if (partialObject == null) {\n           storeObject(resultHandler, resultContext, rowValue, parentMapping, rsw.getResultSet());\n         }\n@@ -828,12 +828,12 @@ private void handleRowValuesForNestedResultMap(ResultSetWrapper rsw, ResultMap r\n   // GET VALUE FROM ROW FOR NESTED RESULT MAP\n   //\n \n-  private Object getRowValue(ResultSetWrapper rsw, ResultMap resultMap, CacheKey combinedKey, CacheKey absoluteKey, String columnPrefix, Object partialObject) throws SQLException {\n+  private Object getRowValue(ResultSetWrapper rsw, ResultMap resultMap, CacheKey combinedKey, String columnPrefix, Object partialObject) throws SQLException {\n     final String resultMapId = resultMap.getId();\n     Object resultObject = partialObject;\n     if (resultObject != null) {\n       final MetaObject metaObject = configuration.newMetaObject(resultObject);\n-      putAncestor(absoluteKey, resultObject, resultMapId, columnPrefix);\n+      putAncestor(resultObject, resultMapId, columnPrefix);\n       applyNestedResultMappings(rsw, resultMap, metaObject, columnPrefix, combinedKey, false);\n       ancestorObjects.remove(resultMapId);\n     } else {\n@@ -846,7 +846,7 @@ private Object getRowValue(ResultSetWrapper rsw, ResultMap resultMap, CacheKey c\n           foundValues = applyAutomaticMappings(rsw, resultMap, metaObject, columnPrefix) || foundValues;\n         }\n         foundValues = applyPropertyMappings(rsw, resultMap, metaObject, lazyLoader, columnPrefix) || foundValues;\n-        putAncestor(absoluteKey, resultObject, resultMapId, columnPrefix);\n+        putAncestor(resultObject, resultMapId, columnPrefix);\n         foundValues = applyNestedResultMappings(rsw, resultMap, metaObject, columnPrefix, combinedKey, true) || foundValues;\n         ancestorObjects.remove(resultMapId);\n         foundValues = lazyLoader.size() > 0 || foundValues;\n@@ -859,7 +859,7 @@ private Object getRowValue(ResultSetWrapper rsw, ResultMap resultMap, CacheKey c\n     return resultObject;\n   }\n \n-  private void putAncestor(CacheKey rowKey, Object resultObject, String resultMapId, String columnPrefix) {\n+  private void putAncestor(Object resultObject, String resultMapId, String columnPrefix) {\n     if (!ancestorColumnPrefix.containsKey(resultMapId)) {\n       ancestorColumnPrefix.put(resultMapId, columnPrefix);\n     }\n@@ -878,7 +878,6 @@ private boolean applyNestedResultMappings(ResultSetWrapper rsw, ResultMap result\n         try {\n           final String columnPrefix = getColumnPrefix(parentPrefix, resultMapping);\n           final ResultMap nestedResultMap = getNestedResultMap(rsw.getResultSet(), nestedResultMapId, columnPrefix);\n-          CacheKey rowKey = null;\n           Object ancestorObject = null;\n           if (ancestorColumnPrefix.containsKey(nestedResultMapId)) {\n             ancestorObject = ancestorObjects.get(nestedResultMapId);\n@@ -888,13 +887,13 @@ private boolean applyNestedResultMappings(ResultSetWrapper rsw, ResultMap result\n               linkObjects(metaObject, resultMapping, ancestorObject); // issue #385\n             }\n           } else {\n-            rowKey = createRowKey(nestedResultMap, rsw, columnPrefix);\n+            final CacheKey rowKey = createRowKey(nestedResultMap, rsw, columnPrefix);\n             final CacheKey combinedKey = combineKeys(rowKey, parentRowKey);\n             Object rowValue = nestedResultObjects.get(combinedKey);\n             boolean knownValue = (rowValue != null);\n             instantiateCollectionPropertyIfAppropriate(resultMapping, metaObject); // mandatory            \n             if (anyNotNullColumnHasValue(resultMapping, columnPrefix, rsw.getResultSet())) {\n-              rowValue = getRowValue(rsw, nestedResultMap, combinedKey, rowKey, columnPrefix, rowValue);\n+              rowValue = getRowValue(rsw, nestedResultMap, combinedKey, columnPrefix, rowValue);\n               if (rowValue != null && !knownValue) {\n                 linkObjects(metaObject, resultMapping, rowValue);\n                 foundValues = true;",
      "parent_sha": "acf45945dec2bbae334320f9acc480eea99e496f"
    }
  },
  {
    "oid": "e0668745d166104a6cc2ca8508e6c343f44cf538",
    "message": "Tests resultType before trying to use default object factory to create new instance",
    "date": "2014-04-20T02:01:37Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/e0668745d166104a6cc2ca8508e6c343f44cf538",
    "details": {
      "sha": "3e060fbe0d7be0a1872146a94e5e217b9d5fea48",
      "filename": "src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java",
      "status": "modified",
      "additions": 21,
      "deletions": 12,
      "changes": 33,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/e0668745d166104a6cc2ca8508e6c343f44cf538/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FDefaultResultSetHandler.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/e0668745d166104a6cc2ca8508e6c343f44cf538/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FDefaultResultSetHandler.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2Fresultset%2FDefaultResultSetHandler.java?ref=e0668745d166104a6cc2ca8508e6c343f44cf538",
      "patch": "@@ -16,6 +16,7 @@\n package org.apache.ibatis.executor.resultset;\n \n import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n import java.sql.CallableStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n@@ -526,17 +527,18 @@ private Object createResultObject(ResultSetWrapper rsw, ResultMap resultMap, Lis\n       return createPrimitiveResultObject(rsw, resultMap, columnPrefix);\n     } else if (constructorMappings.size() > 0) {\n       return createParameterizedResultObject(rsw, resultType, constructorMappings, constructorArgTypes, constructorArgs, columnPrefix);\n-    } else {\n-      try {\n+    } else if ( canBeCreatedByDefaultFactory(resultType) ) {\n         return objectFactory.create(resultType);\n-      } catch (Exception ex) {\n+    } else {\n         return createByConstructorSignature(rsw, resultType);\n-      }\n-      \n     }\n   }\n \n-  private Object createParameterizedResultObject(ResultSetWrapper rsw, Class<?> resultType, List<ResultMapping> constructorMappings, List<Class<?>> constructorArgTypes,\n+    private boolean canBeCreatedByDefaultFactory(Class<?> resultType) {\n+        return resultType.isInterface() || hasDefaultConstructor(resultType);\n+    }\n+\n+    private Object createParameterizedResultObject(ResultSetWrapper rsw, Class<?> resultType, List<ResultMapping> constructorMappings, List<Class<?>> constructorArgTypes,\n       List<Object> constructorArgs, String columnPrefix) throws SQLException {\n     boolean foundValues = false;\n     for (ResultMapping constructorMapping : constructorMappings) {\n@@ -944,7 +946,10 @@ private void createRowKeyForMap(ResultSetWrapper rsw, CacheKey cacheKey) throws\n   }\n   \n   private boolean hasDefaultConstructor(Class<?> resultType) {\n-    for (Constructor<?> constructor : resultType.getDeclaredConstructors()) {\n+      if ( resultType.getDeclaredConstructors().length == 0) {\n+          return true;\n+      }\n+      for (Constructor<?> constructor : resultType.getDeclaredConstructors()) {\n       if (constructor.getParameterTypes().length == 0) {\n         return true;\n       }\n@@ -955,12 +960,16 @@ private boolean hasDefaultConstructor(Class<?> resultType) {\n   private Object createByConstructorSignature(ResultSetWrapper rsw, Class<?> resultType) throws SQLException {\n     for (Constructor<?> constructor : resultType.getDeclaredConstructors()) {\n       if (typeNames(constructor.getParameterTypes()).equals(rsw.getClassNames())) {\n-        try {\n           constructor.setAccessible(true);\n-          return constructor.newInstance(fillValuesForConstructor(constructor, rsw));\n-        } catch (ReflectiveOperationException ex) {\n-          throw new ReflectionException(ex);\n-        }\n+          try {\n+              return constructor.newInstance(fillValuesForConstructor(constructor, rsw));\n+          } catch (InstantiationException e) {\n+              throw new ReflectionException(e);\n+          } catch (IllegalAccessException e) {\n+              throw new ReflectionException(e);\n+          } catch (InvocationTargetException e) {\n+              throw new ReflectionException(e);\n+          }\n       }\n     }\n     throw new ReflectionException(\"No constructor found in \" + resultType.getName() + \" matching \" + rsw.getClassNames());",
      "parent_sha": "87b524cfdd07e7230e7c9ca0b384334e024bca85"
    }
  },
  {
    "oid": "4daae82f439259ed0db6538af721fd285e1587ce",
    "message": "javadoc for auto-mapping thanks to Antonio",
    "date": "2012-02-20T16:54:13Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/4daae82f439259ed0db6538af721fd285e1587ce",
    "details": {
      "sha": "ca59219673cce461e5bb19dd8612f50e8a37e523",
      "filename": "src/main/java/org/apache/ibatis/session/AutoMappingBehavior.java",
      "status": "modified",
      "additions": 18,
      "deletions": 1,
      "changes": 19,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/4daae82f439259ed0db6538af721fd285e1587ce/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FAutoMappingBehavior.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/4daae82f439259ed0db6538af721fd285e1587ce/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FAutoMappingBehavior.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2FAutoMappingBehavior.java?ref=4daae82f439259ed0db6538af721fd285e1587ce",
      "patch": "@@ -15,6 +15,23 @@\n  */\r\n package org.apache.ibatis.session;\r\n \r\n+/**\r\n+ * Specifies if and how MyBatis should automatically map columns to fields/properties.\r\n+ */\r\n public enum AutoMappingBehavior {\r\n-  NONE,PARTIAL,FULL\r\n+  \r\n+    /**\r\n+     * Disables auto-mapping.\r\n+     */\r\n+    NONE,\r\n+    \r\n+    /**\r\n+     * Will only auto-map results with no nested result mappings defined inside.\r\n+     */\r\n+    PARTIAL,\r\n+    \r\n+    /**\r\n+     * Will auto-map result mappings of any complexity (containing nested or otherwise).\r\n+     */\r\n+    FULL\r\n }\r",
      "parent_sha": "3c65cd22ab5161dd2ab3f8cf08a015987ae5cd58"
    }
  },
  {
    "oid": "9d99753cc0da6934ead7ad26479c22157cbf21a1",
    "message": "synchronize clear() call because it modifies cache",
    "date": "2012-02-22T07:56:35Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/9d99753cc0da6934ead7ad26479c22157cbf21a1",
    "details": {
      "sha": "c478a03e45b68718d7dff4bc3aad9f8bf9f089e9",
      "filename": "src/main/java/org/apache/ibatis/cache/decorators/TransactionalCache.java",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/9d99753cc0da6934ead7ad26479c22157cbf21a1/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fcache%2Fdecorators%2FTransactionalCache.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/9d99753cc0da6934ead7ad26479c22157cbf21a1/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fcache%2Fdecorators%2FTransactionalCache.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fcache%2Fdecorators%2FTransactionalCache.java?ref=9d99753cc0da6934ead7ad26479c22157cbf21a1",
      "patch": "@@ -63,9 +63,14 @@ public Object removeObject(Object key) {\n   }\r\n \r\n   public void clear() {\r\n-    delegate.clear(); // issue #524 delegate should be cleared\r\n-    reset();\r\n-    clearOnCommit = true;\r\n+    delegate.getReadWriteLock().writeLock().lock();\r\n+    try {\r\n+      delegate.clear(); // issue #524 delegate should be cleared\r\n+      reset();\r\n+      clearOnCommit = true;\r\n+    } finally {\r\n+      delegate.getReadWriteLock().writeLock().unlock();\r\n+    }\r\n   }\r\n \r\n   public void commit() {\r",
      "parent_sha": "fc3a49a01d045a4abed1bbcd7f29768a5fd825dc"
    }
  },
  {
    "oid": "0fc882f517228b6d793b9ef0da5c3fd77c70a9bd",
    "message": "Fix for http://code.google.com/p/mybatis/issues/detail?id=424  - EnumTypeHandler should use Enum.name() rather than Enum.toString()",
    "date": "2011-11-03T17:26:21Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/0fc882f517228b6d793b9ef0da5c3fd77c70a9bd",
    "details": {
      "sha": "54ba5fd020e5592155ef426fde971e35d85e92af",
      "filename": "src/main/java/org/apache/ibatis/type/EnumTypeHandler.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/0fc882f517228b6d793b9ef0da5c3fd77c70a9bd/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Ftype%2FEnumTypeHandler.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/0fc882f517228b6d793b9ef0da5c3fd77c70a9bd/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Ftype%2FEnumTypeHandler.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Ftype%2FEnumTypeHandler.java?ref=0fc882f517228b6d793b9ef0da5c3fd77c70a9bd",
      "patch": "@@ -15,9 +15,9 @@ public EnumTypeHandler(Class<E> type) {\n \r\n   public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcType jdbcType) throws SQLException {\r\n     if (jdbcType == null) {\r\n-        ps.setString(i, parameter.toString());\r\n+        ps.setString(i, parameter.name());\r\n     } else {\r\n-        ps.setObject(i, parameter.toString(), jdbcType.TYPE_CODE);\r\n+        ps.setObject(i, parameter.name(), jdbcType.TYPE_CODE);\r\n     }\r\n   }\r\n \r",
      "parent_sha": "9663e3b838b5a2adc3f5b3f631e0d12617246702"
    }
  },
  {
    "oid": "66c943a875561b439b7f15cd650b31623ad00567",
    "message": "Apply JUnit 5",
    "date": "2019-07-07T02:09:54Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/66c943a875561b439b7f15cd650b31623ad00567",
    "details": {
      "sha": "42c0203abb1f59a223f133f5ebbb941c13a18192",
      "filename": "src/test/java/org/apache/ibatis/builder/AnnotationMapperBuilderTest.java",
      "status": "modified",
      "additions": 9,
      "deletions": 18,
      "changes": 27,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/66c943a875561b439b7f15cd650b31623ad00567/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2FAnnotationMapperBuilderTest.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/66c943a875561b439b7f15cd650b31623ad00567/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2FAnnotationMapperBuilderTest.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2FAnnotationMapperBuilderTest.java?ref=66c943a875561b439b7f15cd650b31623ad00567",
      "patch": "@@ -1,5 +1,5 @@\n /**\n- *    Copyright 2009-2018 the original author or authors.\n+ *    Copyright 2009-2019 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.\n@@ -19,28 +19,19 @@\n import org.apache.ibatis.annotations.Options;\n import org.apache.ibatis.annotations.Select;\n import org.apache.ibatis.builder.annotation.MapperAnnotationBuilder;\n-import org.apache.ibatis.builder.xml.XMLMapperBuilder;\n import org.apache.ibatis.executor.keygen.Jdbc3KeyGenerator;\n-import org.apache.ibatis.io.Resources;\n import org.apache.ibatis.mapping.MappedStatement;\n import org.apache.ibatis.mapping.ResultSetType;\n import org.apache.ibatis.mapping.StatementType;\n import org.apache.ibatis.session.Configuration;\n-import org.apache.ibatis.type.TypeHandler;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n-import java.io.InputStream;\n-import java.util.regex.Pattern;\n-\n-import static com.googlecode.catchexception.apis.BDDCatchException.caughtException;\n-import static com.googlecode.catchexception.apis.BDDCatchException.when;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.BDDAssertions.then;\n \n-public class AnnotationMapperBuilderTest {\n+class AnnotationMapperBuilderTest {\n \n   @Test\n-  public void withOptions() throws Exception {\n+  void withOptions() {\n     Configuration configuration = new Configuration();\n     MapperAnnotationBuilder builder = new MapperAnnotationBuilder(configuration, Mapper.class);\n     builder.parse();\n@@ -61,7 +52,7 @@ public void withOptions() throws Exception {\n   }\n \n   @Test\n-  public void withOptionsAndWithoutOptionsAttributesWhenSpecifyDefaultValue() throws Exception {\n+  void withOptionsAndWithoutOptionsAttributesWhenSpecifyDefaultValue() {\n     Configuration configuration = new Configuration();\n     configuration.setDefaultResultSetType(ResultSetType.SCROLL_INSENSITIVE);\n     MapperAnnotationBuilder builder = new MapperAnnotationBuilder(configuration, Mapper.class);\n@@ -73,7 +64,7 @@ public void withOptionsAndWithoutOptionsAttributesWhenSpecifyDefaultValue() thro\n \n \n   @Test\n-  public void withOptionsAndWithoutOptionsAttributesWhenNotSpecifyDefaultValue() throws Exception {\n+  void withOptionsAndWithoutOptionsAttributesWhenNotSpecifyDefaultValue() {\n     Configuration configuration = new Configuration();\n     MapperAnnotationBuilder builder = new MapperAnnotationBuilder(configuration, Mapper.class);\n     builder.parse();\n@@ -83,7 +74,7 @@ public void withOptionsAndWithoutOptionsAttributesWhenNotSpecifyDefaultValue() t\n   }\n \n   @Test\n-  public void withoutOptionsWhenSpecifyDefaultValue() throws Exception {\n+  void withoutOptionsWhenSpecifyDefaultValue() {\n     Configuration configuration = new Configuration();\n     configuration.setDefaultResultSetType(ResultSetType.SCROLL_INSENSITIVE);\n     MapperAnnotationBuilder builder = new MapperAnnotationBuilder(configuration, Mapper.class);\n@@ -94,7 +85,7 @@ public void withoutOptionsWhenSpecifyDefaultValue() throws Exception {\n   }\n \n   @Test\n-  public void withoutOptionsWhenNotSpecifyDefaultValue() throws Exception {\n+  void withoutOptionsWhenNotSpecifyDefaultValue() {\n     Configuration configuration = new Configuration();\n     MapperAnnotationBuilder builder = new MapperAnnotationBuilder(configuration, Mapper.class);\n     builder.parse();\n@@ -103,7 +94,7 @@ public void withoutOptionsWhenNotSpecifyDefaultValue() throws Exception {\n     assertThat(mappedStatement.getResultSetType()).isEqualTo(ResultSetType.DEFAULT);\n   }\n \n-  public interface Mapper {\n+  interface Mapper {\n \n     @Insert(\"insert into test (name) values(#{name})\")\n     @Options(useGeneratedKeys = true, keyColumn = \"key_column\", keyProperty = \"keyProperty\")",
      "parent_sha": "e541e9f3569765e1bf42dd46ae512b89e00a7e2e"
    }
  },
  {
    "oid": "c99fde853bc3fb8f914351501d07348001330791",
    "message": "Variable name change and javadocs.",
    "date": "2014-03-18T14:49:24Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/c99fde853bc3fb8f914351501d07348001330791",
    "details": {
      "sha": "1604aa3d9ad78d128d725d230c7997caa660e202",
      "filename": "src/main/java/org/apache/ibatis/builder/xml/XMLMapperEntityResolver.java",
      "status": "modified",
      "additions": 24,
      "deletions": 24,
      "changes": 48,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/c99fde853bc3fb8f914351501d07348001330791/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2Fxml%2FXMLMapperEntityResolver.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/c99fde853bc3fb8f914351501d07348001330791/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2Fxml%2FXMLMapperEntityResolver.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2Fxml%2FXMLMapperEntityResolver.java?ref=c99fde853bc3fb8f914351501d07348001330791",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- *    Copyright 2009-2012 the original author or authors.\n+ *    Copyright 2009-2014 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.\n@@ -35,45 +35,45 @@ public class XMLMapperEntityResolver implements EntityResolver {\n \n   private static final Map<String, String> doctypeMap = new HashMap<String, String>();\n \n-  private static final String IBATIS_CONFIG_DOCTYPE = \"-//ibatis.apache.org//DTD Config 3.0//EN\".toUpperCase(Locale.ENGLISH);\n-  private static final String IBATIS_CONFIG_URL = \"http://ibatis.apache.org/dtd/ibatis-3-config.dtd\".toUpperCase(Locale.ENGLISH);\n+  private static final String IBATIS_CONFIG_PUBLIC = \"-//ibatis.apache.org//DTD Config 3.0//EN\".toUpperCase(Locale.ENGLISH);\n+  private static final String IBATIS_CONFIG_SYSTEM = \"http://ibatis.apache.org/dtd/ibatis-3-config.dtd\".toUpperCase(Locale.ENGLISH);\n \n-  private static final String IBATIS_MAPPER_DOCTYPE = \"-//ibatis.apache.org//DTD Mapper 3.0//EN\".toUpperCase(Locale.ENGLISH);\n-  private static final String IBATIS_MAPPER_URL = \"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd\".toUpperCase(Locale.ENGLISH);\n+  private static final String IBATIS_MAPPER_PUBLIC = \"-//ibatis.apache.org//DTD Mapper 3.0//EN\".toUpperCase(Locale.ENGLISH);\n+  private static final String IBATIS_MAPPER_SYSTEM = \"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd\".toUpperCase(Locale.ENGLISH);\n \n-  private static final String MYBATIS_CONFIG_DOCTYPE = \"-//mybatis.org//DTD Config 3.0//EN\".toUpperCase(Locale.ENGLISH);\n-  private static final String MYBATIS_CONFIG_URL = \"http://mybatis.org/dtd/mybatis-3-config.dtd\".toUpperCase(Locale.ENGLISH);\n+  private static final String MYBATIS_CONFIG_PUBLIC = \"-//mybatis.org//DTD Config 3.0//EN\".toUpperCase(Locale.ENGLISH);\n+  private static final String MYBATIS_CONFIG_SYSTEM = \"http://mybatis.org/dtd/mybatis-3-config.dtd\".toUpperCase(Locale.ENGLISH);\n \n-  private static final String MYBATIS_MAPPER_DOCTYPE = \"-//mybatis.org//DTD Mapper 3.0//EN\".toUpperCase(Locale.ENGLISH);\n-  private static final String MYBATIS_MAPPER_URL = \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\".toUpperCase(Locale.ENGLISH);\n+  private static final String MYBATIS_MAPPER_PUBLIC = \"-//mybatis.org//DTD Mapper 3.0//EN\".toUpperCase(Locale.ENGLISH);\n+  private static final String MYBATIS_MAPPER_SYSTEM = \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\".toUpperCase(Locale.ENGLISH);\n \n-  private static final String IBATIS_CONFIG_DTD = \"org/apache/ibatis/builder/xml/mybatis-3-config.dtd\";\n-  private static final String IBATIS_MAPPER_DTD = \"org/apache/ibatis/builder/xml/mybatis-3-mapper.dtd\";\n+  private static final String MYBATIS_CONFIG_DTD = \"org/apache/ibatis/builder/xml/mybatis-3-config.dtd\";\n+  private static final String MYBATIS_MAPPER_DTD = \"org/apache/ibatis/builder/xml/mybatis-3-mapper.dtd\";\n \n   static {\n-    doctypeMap.put(IBATIS_CONFIG_URL, IBATIS_CONFIG_DTD);\n-    doctypeMap.put(IBATIS_CONFIG_DOCTYPE, IBATIS_CONFIG_DTD);\n+    doctypeMap.put(IBATIS_CONFIG_SYSTEM, MYBATIS_CONFIG_DTD);\n+    doctypeMap.put(IBATIS_CONFIG_PUBLIC, MYBATIS_CONFIG_DTD);\n \n-    doctypeMap.put(IBATIS_MAPPER_URL, IBATIS_MAPPER_DTD);\n-    doctypeMap.put(IBATIS_MAPPER_DOCTYPE, IBATIS_MAPPER_DTD);\n+    doctypeMap.put(IBATIS_MAPPER_SYSTEM, MYBATIS_MAPPER_DTD);\n+    doctypeMap.put(IBATIS_MAPPER_PUBLIC, MYBATIS_MAPPER_DTD);\n \n-    doctypeMap.put(MYBATIS_CONFIG_URL, IBATIS_CONFIG_DTD);\n-    doctypeMap.put(MYBATIS_CONFIG_DOCTYPE, IBATIS_CONFIG_DTD);\n+    doctypeMap.put(MYBATIS_CONFIG_SYSTEM, MYBATIS_CONFIG_DTD);\n+    doctypeMap.put(MYBATIS_CONFIG_PUBLIC, MYBATIS_CONFIG_DTD);\n \n-    doctypeMap.put(MYBATIS_MAPPER_URL, IBATIS_MAPPER_DTD);\n-    doctypeMap.put(MYBATIS_MAPPER_DOCTYPE, IBATIS_MAPPER_DTD);\n+    doctypeMap.put(MYBATIS_MAPPER_SYSTEM, MYBATIS_MAPPER_DTD);\n+    doctypeMap.put(MYBATIS_MAPPER_PUBLIC, MYBATIS_MAPPER_DTD);\n   }\n \n   /*\n    * Converts a public DTD into a local one\n-   *\n-   * @param publicId Unused but required by EntityResolver interface\n-   * @param systemId The DTD that is being requested\n+   * \n+   * @param publicId The public id that is what comes after \"PUBLIC\"\n+   * @param systemId The system id that is what comes after the public id.\n    * @return The InputSource for the DTD\n+   * \n    * @throws org.xml.sax.SAXException If anything goes wrong\n    */\n-  public InputSource resolveEntity(String publicId, String systemId)\n-      throws SAXException {\n+  public InputSource resolveEntity(String publicId, String systemId) throws SAXException {\n \n     if (publicId != null) publicId = publicId.toUpperCase(Locale.ENGLISH);\n     if (systemId != null) systemId = systemId.toUpperCase(Locale.ENGLISH);",
      "parent_sha": "91f28828d4df64fd83fe4fa0a554b896f2f4d0cb"
    }
  },
  {
    "oid": "cc227afad35fe0b9a8d82eb0575e26ecc5e0eb82",
    "message": "[ci] Fix suspected memory leak",
    "date": "2019-01-19T19:11:27Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/cc227afad35fe0b9a8d82eb0575e26ecc5e0eb82",
    "details": {
      "sha": "7aa16a8a7cbea2a66cf057de19705f1803f007c0",
      "filename": "src/main/java/org/apache/ibatis/io/ExternalResources.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/cc227afad35fe0b9a8d82eb0575e26ecc5e0eb82/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FExternalResources.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/cc227afad35fe0b9a8d82eb0575e26ecc5e0eb82/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FExternalResources.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FExternalResources.java?ref=cc227afad35fe0b9a8d82eb0575e26ecc5e0eb82",
      "patch": "@@ -20,7 +20,6 @@\n import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n import java.io.IOException;\n-import java.nio.channels.FileChannel;\n import java.util.Properties;\n \n import org.apache.ibatis.logging.Log;\n@@ -43,9 +42,9 @@ public static void copyExternalResource(File sourceFile, File destFile) throws I\n       destFile.createNewFile();\n     }\n \n-    try (FileChannel source = new FileInputStream(sourceFile).getChannel();\n-         FileChannel destination = new FileOutputStream(destFile).getChannel()){\n-      destination.transferFrom(source, 0, source.size());\n+    try (FileInputStream source = new FileInputStream(sourceFile);\n+         FileOutputStream destination = new FileOutputStream(destFile)) {\n+      destination.getChannel().transferFrom(source.getChannel(), 0, source.getChannel().size());\n     }\n \n   }",
      "parent_sha": "272283f8a4bd3e0a08aba457efe0dc3c60d162c4"
    }
  },
  {
    "oid": "9ed60f5e78161b23f47644a66455b15db9666b22",
    "message": "do not change log level",
    "date": "2012-01-02T23:58:17Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/9ed60f5e78161b23f47644a66455b15db9666b22",
    "details": {
      "sha": "47b01a738ec2c7d0d7153785914f74ec7238604e",
      "filename": "src/main/java/org/apache/ibatis/io/ResolverUtil.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/9ed60f5e78161b23f47644a66455b15db9666b22/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FResolverUtil.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/9ed60f5e78161b23f47644a66455b15db9666b22/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FResolverUtil.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FResolverUtil.java?ref=9ed60f5e78161b23f47644a66455b15db9666b22",
      "patch": "@@ -254,8 +254,8 @@ protected void addIfMatching(Test test, String fqn) {\n         matches.add((Class<T>) type);\n       }\n     } catch (Throwable t) {\n-      log.error(\"Could not examine class '\" + fqn + \"'\" + \" due to a \"\n-          + t.getClass().getName() + \" with message: \" + t.getMessage(), t);\n+      log.warn(\"Could not examine class '\" + fqn + \"'\" + \" due to a \" +\n+          t.getClass().getName() + \" with message: \" + t.getMessage());\n     }\n   }\n }\n\\ No newline at end of file",
      "parent_sha": "c6e42f05012e27c6a196d991449362aa122e1a27"
    }
  },
  {
    "oid": "fb9691df55dba73e00ea767f981a208e7332798c",
    "message": "[modernizer] Use Double.valueOf instead of new Double",
    "date": "2018-12-29T22:12:43Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/fb9691df55dba73e00ea767f981a208e7332798c",
    "details": {
      "sha": "4b93286cabb50db588f0c7d04b69550ad3a4bd0e",
      "filename": "src/test/java/org/apache/ibatis/type/DoubleTypeHandlerTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/fb9691df55dba73e00ea767f981a208e7332798c/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Ftype%2FDoubleTypeHandlerTest.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/fb9691df55dba73e00ea767f981a208e7332798c/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Ftype%2FDoubleTypeHandlerTest.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Ftype%2FDoubleTypeHandlerTest.java?ref=fb9691df55dba73e00ea767f981a208e7332798c",
      "patch": "@@ -37,10 +37,10 @@ public void shouldSetParameter() throws Exception {\n   @Test\n   public void shouldGetResultFromResultSetByName() throws Exception {\n     when(rs.getDouble(\"column\")).thenReturn(100d);\n-    assertEquals(new Double(100d), TYPE_HANDLER.getResult(rs, \"column\"));\n+    assertEquals(Double.valueOf(100d), TYPE_HANDLER.getResult(rs, \"column\"));\n \n     when(rs.getDouble(\"column\")).thenReturn(0d);\n-    assertEquals(new Double(0d), TYPE_HANDLER.getResult(rs, \"column\"));\n+    assertEquals(Double.valueOf(0d), TYPE_HANDLER.getResult(rs, \"column\"));\n   }\n \n   @Override\n@@ -55,10 +55,10 @@ public void shouldGetResultNullFromResultSetByName() throws Exception {\n   @Test\n   public void shouldGetResultFromResultSetByPosition() throws Exception {\n     when(rs.getDouble(1)).thenReturn(100d);\n-    assertEquals(new Double(100d), TYPE_HANDLER.getResult(rs, 1));\n+    assertEquals(Double.valueOf(100d), TYPE_HANDLER.getResult(rs, 1));\n \n     when(rs.getDouble(1)).thenReturn(0d);\n-    assertEquals(new Double(0d), TYPE_HANDLER.getResult(rs, 1));\n+    assertEquals(Double.valueOf(0d), TYPE_HANDLER.getResult(rs, 1));\n   }\n \n   @Override\n@@ -73,10 +73,10 @@ public void shouldGetResultNullFromResultSetByPosition() throws Exception {\n   @Test\n   public void shouldGetResultFromCallableStatement() throws Exception {\n     when(cs.getDouble(1)).thenReturn(100d);\n-    assertEquals(new Double(100d), TYPE_HANDLER.getResult(cs, 1));\n+    assertEquals(Double.valueOf(100d), TYPE_HANDLER.getResult(cs, 1));\n \n     when(cs.getDouble(1)).thenReturn(0d);\n-    assertEquals(new Double(0d), TYPE_HANDLER.getResult(cs, 1));\n+    assertEquals(Double.valueOf(0d), TYPE_HANDLER.getResult(cs, 1));\n   }\n \n   @Override",
      "parent_sha": "4acac3589c1b5d44c55a2402956ecfebf0b71cb8"
    }
  },
  {
    "oid": "b72813738f7416b013d0dc7a40c8fb13870db73e",
    "message": "removed unnecessary else statement",
    "date": "2012-04-15T16:49:15Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/b72813738f7416b013d0dc7a40c8fb13870db73e",
    "details": {
      "sha": "4a752377c14fa54f541751abf06bd5c8d0f176eb",
      "filename": "src/main/java/org/apache/ibatis/parsing/PropertyParser.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/b72813738f7416b013d0dc7a40c8fb13870db73e/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fparsing%2FPropertyParser.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/b72813738f7416b013d0dc7a40c8fb13870db73e/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fparsing%2FPropertyParser.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fparsing%2FPropertyParser.java?ref=b72813738f7416b013d0dc7a40c8fb13870db73e",
      "patch": "@@ -35,9 +35,8 @@ public VariableTokenHandler(Properties variables) {\n     public String handleToken(String content) {\r\n       if (variables != null && variables.containsKey(content)) {\r\n         return variables.getProperty(content);\r\n-      } else {\r\n-        return \"${\" + content + \"}\";\r\n       }\r\n+      return \"${\" + content + \"}\";\r\n     }\r\n   }\r\n }\r",
      "parent_sha": "4ebaf08c43b4da6f23efcc89c67eaf1fe3a718b3"
    }
  },
  {
    "oid": "9990dd7fd13db75520d6faacc08b34ef6146222c",
    "message": "use final lock\ud83d\udc4d",
    "date": "2022-07-17T11:54:53Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/9990dd7fd13db75520d6faacc08b34ef6146222c",
    "details": {
      "sha": "78eb55854d98ae72d959947066e6cf58ff5aa9e7",
      "filename": "src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/9990dd7fd13db75520d6faacc08b34ef6146222c/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fdatasource%2Fpooled%2FPooledDataSource.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/9990dd7fd13db75520d6faacc08b34ef6146222c/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fdatasource%2Fpooled%2FPooledDataSource.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fdatasource%2Fpooled%2FPooledDataSource.java?ref=9990dd7fd13db75520d6faacc08b34ef6146222c",
      "patch": "@@ -60,8 +60,8 @@ public class PooledDataSource implements DataSource {\n \n   private int expectedConnectionTypeCode;\n \n-  private Lock lock = new ReentrantLock();\n-  private Condition condition = lock.newCondition();\n+  private final Lock lock = new ReentrantLock();\n+  private final Condition condition = lock.newCondition();\n \n   public PooledDataSource() {\n     dataSource = new UnpooledDataSource();",
      "parent_sha": "8820b11da9e8e7ac82d9e6dd37d3e80c07c51609"
    }
  },
  {
    "oid": "96f5f190f57052bdca891077e28112012f0060ac",
    "message": "Modify Array Size",
    "date": "2020-07-08T13:29:13Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/96f5f190f57052bdca891077e28112012f0060ac",
    "details": {
      "sha": "ae535c79e630aee56efcd0146b233e847e76b02a",
      "filename": "src/main/java/org/apache/ibatis/plugin/Plugin.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/96f5f190f57052bdca891077e28112012f0060ac/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fplugin%2FPlugin.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/96f5f190f57052bdca891077e28112012f0060ac/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fplugin%2FPlugin.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fplugin%2FPlugin.java?ref=96f5f190f57052bdca891077e28112012f0060ac",
      "patch": "@@ -96,7 +96,7 @@ private static Class<?>[] getAllInterfaces(Class<?> type, Map<Class<?>, Set<Meth\n       }\n       type = type.getSuperclass();\n     }\n-    return interfaces.toArray(new Class<?>[interfaces.size()]);\n+    return interfaces.toArray(new Class<?>[0]);\n   }\n \n }",
      "parent_sha": "2461bbd981ba1082bc876e3bb00e99356d616c52"
    }
  },
  {
    "oid": "9897fe353b800d3ecd064c56c8804f7ccdcfcd42",
    "message": "refactor: optimize the code in ParamNameResolver.java\n\nOptimize the code inline 122 of ParamNameResolver.java. The method `String.valueOf` is unnecessary and can be deleted.",
    "date": "2019-12-10T12:25:04Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/9897fe353b800d3ecd064c56c8804f7ccdcfcd42",
    "details": {
      "sha": "809ed6ff0dc45acf1718386306abda67f4ad26c1",
      "filename": "src/main/java/org/apache/ibatis/reflection/ParamNameResolver.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/9897fe353b800d3ecd064c56c8804f7ccdcfcd42/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FParamNameResolver.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/9897fe353b800d3ecd064c56c8804f7ccdcfcd42/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FParamNameResolver.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FParamNameResolver.java?ref=9897fe353b800d3ecd064c56c8804f7ccdcfcd42",
      "patch": "@@ -119,7 +119,7 @@ public Object getNamedParams(Object[] args) {\n       for (Map.Entry<Integer, String> entry : names.entrySet()) {\n         param.put(entry.getValue(), args[entry.getKey()]);\n         // add generic param names (param1, param2, ...)\n-        final String genericParamName = GENERIC_NAME_PREFIX + String.valueOf(i + 1);\n+        final String genericParamName = GENERIC_NAME_PREFIX + (i + 1);\n         // ensure not to overwrite parameter named with @Param\n         if (!names.containsValue(genericParamName)) {\n           param.put(genericParamName, args[entry.getKey()]);",
      "parent_sha": "f0852b8ce420ca75ef6695eec6dfc526a691b8c0"
    }
  },
  {
    "oid": "e8037eb74d941c95815c5d75be96cdbfbf6486c4",
    "message": "Remove unnecessary ()",
    "date": "2024-12-31T03:04:57Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/e8037eb74d941c95815c5d75be96cdbfbf6486c4",
    "details": {
      "sha": "7ae50d0e0d5792db2a5a61a3ad68549ad6c921ed",
      "filename": "src/main/java/org/apache/ibatis/reflection/Reflector.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/e8037eb74d941c95815c5d75be96cdbfbf6486c4/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FReflector.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/e8037eb74d941c95815c5d75be96cdbfbf6486c4/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FReflector.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2FReflector.java?ref=e8037eb74d941c95815c5d75be96cdbfbf6486c4",
      "patch": "@@ -243,7 +243,7 @@ private void addFields(Class<?> clazz) {\n         // modification of final fields through reflection (JSR-133). (JGB)\n         // pr #16 - final static can only be set by the classloader\n         int modifiers = field.getModifiers();\n-        if ((!Modifier.isFinal(modifiers) || !Modifier.isStatic(modifiers))) {\n+        if (!Modifier.isFinal(modifiers) || !Modifier.isStatic(modifiers)) {\n           addSetField(field);\n         }\n       }\n@@ -273,7 +273,7 @@ private void addGetField(Field field) {\n   }\n \n   private boolean isValidPropertyName(String name) {\n-    return (!name.startsWith(\"$\") && !\"serialVersionUID\".equals(name) && !\"class\".equals(name));\n+    return !name.startsWith(\"$\") && !\"serialVersionUID\".equals(name) && !\"class\".equals(name);\n   }\n \n   /**",
      "parent_sha": "260b30f3198e5ee8a1ea9168357ae4ac07486f02"
    }
  },
  {
    "oid": "31ed79dafe74b1179f6bebda08bb00b82c215f17",
    "message": "fix/add  test case about  DefaultObjectFactoryTest",
    "date": "2020-08-28T08:03:39Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/31ed79dafe74b1179f6bebda08bb00b82c215f17",
    "details": {
      "sha": "f71f4ac0eeb8644456decb9bbf35a8cbc170dda6",
      "filename": "src/test/java/org/apache/ibatis/reflection/factory/DefaultObjectFactoryTest.java",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/31ed79dafe74b1179f6bebda08bb00b82c215f17/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2Ffactory%2FDefaultObjectFactoryTest.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/31ed79dafe74b1179f6bebda08bb00b82c215f17/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2Ffactory%2FDefaultObjectFactoryTest.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Freflection%2Ffactory%2FDefaultObjectFactoryTest.java?ref=31ed79dafe74b1179f6bebda08bb00b82c215f17",
      "patch": "@@ -62,7 +62,7 @@ void createClassThrowsProperErrorMsg() {\n   }\n \n   @Test\n-  void creatHashMap() {\n+  void createHashMap() {\n      DefaultObjectFactory defaultObjectFactory=new DefaultObjectFactory();\n      Map  map= defaultObjectFactory.create(Map.class,null,null);\n      Assertions.assertTrue(map instanceof HashMap, \"Should be HashMap\");\n@@ -94,4 +94,14 @@ void createHashSet() {\n     Set set = defaultObjectFactory.create(Set.class);\n     Assertions.assertTrue(set instanceof HashSet, \" set should be HashSet\");\n   }\n+\n+  @Test\n+  void testIsCollection() {\n+    DefaultObjectFactory defaultObjectFactory = new DefaultObjectFactory();\n+    boolean trueTarget = defaultObjectFactory.isCollection(ArrayList.class);\n+    Assertions.assertTrue(trueTarget,\"ArrayList should be Collection\");\n+\n+    boolean falseTarget = defaultObjectFactory.isCollection(HashMap.class);\n+    Assertions.assertFalse(falseTarget,\"HashMap should't be Collection\");\n+  }\n }",
      "parent_sha": "5ecbc05a1ff22ed51bb19bf08643839918ca6075"
    }
  },
  {
    "oid": "037cc035fa3e59a39aa16d266b4c182de5be4439",
    "message": "Refactor XMLScriptBuilder#parseDynamicTags() (#1167)\n\n* Modify the parseDynamicTags's return type as MixedSqlNode and visibility to protected",
    "date": "2017-12-27T19:01:51Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/037cc035fa3e59a39aa16d266b4c182de5be4439",
    "details": {
      "sha": "955a9cd8a7b9a8c54434470109c2114d826359c1",
      "filename": "src/main/java/org/apache/ibatis/scripting/xmltags/XMLScriptBuilder.java",
      "status": "modified",
      "additions": 9,
      "deletions": 16,
      "changes": 25,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/037cc035fa3e59a39aa16d266b4c182de5be4439/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fscripting%2Fxmltags%2FXMLScriptBuilder.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/037cc035fa3e59a39aa16d266b4c182de5be4439/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fscripting%2Fxmltags%2FXMLScriptBuilder.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fscripting%2Fxmltags%2FXMLScriptBuilder.java?ref=037cc035fa3e59a39aa16d266b4c182de5be4439",
      "patch": "@@ -64,8 +64,7 @@ private void initNodeHandlerMap() {\n   }\n \n   public SqlSource parseScriptNode() {\n-    List<SqlNode> contents = parseDynamicTags(context);\n-    MixedSqlNode rootSqlNode = new MixedSqlNode(contents);\n+    MixedSqlNode rootSqlNode = parseDynamicTags(context);\n     SqlSource sqlSource = null;\n     if (isDynamic) {\n       sqlSource = new DynamicSqlSource(configuration, rootSqlNode);\n@@ -75,7 +74,7 @@ public SqlSource parseScriptNode() {\n     return sqlSource;\n   }\n \n-  List<SqlNode> parseDynamicTags(XNode node) {\n+  protected MixedSqlNode parseDynamicTags(XNode node) {\n     List<SqlNode> contents = new ArrayList<SqlNode>();\n     NodeList children = node.getNode().getChildNodes();\n     for (int i = 0; i < children.getLength(); i++) {\n@@ -99,7 +98,7 @@ List<SqlNode> parseDynamicTags(XNode node) {\n         isDynamic = true;\n       }\n     }\n-    return contents;\n+    return new MixedSqlNode(contents);\n   }\n \n   private interface NodeHandler {\n@@ -127,8 +126,7 @@ public TrimHandler() {\n \n     @Override\n     public void handleNode(XNode nodeToHandle, List<SqlNode> targetContents) {\n-      List<SqlNode> contents = parseDynamicTags(nodeToHandle);\n-      MixedSqlNode mixedSqlNode = new MixedSqlNode(contents);\n+      MixedSqlNode mixedSqlNode = parseDynamicTags(nodeToHandle);\n       String prefix = nodeToHandle.getStringAttribute(\"prefix\");\n       String prefixOverrides = nodeToHandle.getStringAttribute(\"prefixOverrides\");\n       String suffix = nodeToHandle.getStringAttribute(\"suffix\");\n@@ -145,8 +143,7 @@ public WhereHandler() {\n \n     @Override\n     public void handleNode(XNode nodeToHandle, List<SqlNode> targetContents) {\n-      List<SqlNode> contents = parseDynamicTags(nodeToHandle);\n-      MixedSqlNode mixedSqlNode = new MixedSqlNode(contents);\n+      MixedSqlNode mixedSqlNode = parseDynamicTags(nodeToHandle);\n       WhereSqlNode where = new WhereSqlNode(configuration, mixedSqlNode);\n       targetContents.add(where);\n     }\n@@ -159,8 +156,7 @@ public SetHandler() {\n \n     @Override\n     public void handleNode(XNode nodeToHandle, List<SqlNode> targetContents) {\n-      List<SqlNode> contents = parseDynamicTags(nodeToHandle);\n-      MixedSqlNode mixedSqlNode = new MixedSqlNode(contents);\n+      MixedSqlNode mixedSqlNode = parseDynamicTags(nodeToHandle);\n       SetSqlNode set = new SetSqlNode(configuration, mixedSqlNode);\n       targetContents.add(set);\n     }\n@@ -173,8 +169,7 @@ public ForEachHandler() {\n \n     @Override\n     public void handleNode(XNode nodeToHandle, List<SqlNode> targetContents) {\n-      List<SqlNode> contents = parseDynamicTags(nodeToHandle);\n-      MixedSqlNode mixedSqlNode = new MixedSqlNode(contents);\n+      MixedSqlNode mixedSqlNode = parseDynamicTags(nodeToHandle);\n       String collection = nodeToHandle.getStringAttribute(\"collection\");\n       String item = nodeToHandle.getStringAttribute(\"item\");\n       String index = nodeToHandle.getStringAttribute(\"index\");\n@@ -193,8 +188,7 @@ public IfHandler() {\n \n     @Override\n     public void handleNode(XNode nodeToHandle, List<SqlNode> targetContents) {\n-      List<SqlNode> contents = parseDynamicTags(nodeToHandle);\n-      MixedSqlNode mixedSqlNode = new MixedSqlNode(contents);\n+      MixedSqlNode mixedSqlNode = parseDynamicTags(nodeToHandle);\n       String test = nodeToHandle.getStringAttribute(\"test\");\n       IfSqlNode ifSqlNode = new IfSqlNode(mixedSqlNode, test);\n       targetContents.add(ifSqlNode);\n@@ -208,8 +202,7 @@ public OtherwiseHandler() {\n \n     @Override\n     public void handleNode(XNode nodeToHandle, List<SqlNode> targetContents) {\n-      List<SqlNode> contents = parseDynamicTags(nodeToHandle);\n-      MixedSqlNode mixedSqlNode = new MixedSqlNode(contents);\n+      MixedSqlNode mixedSqlNode = parseDynamicTags(nodeToHandle);\n       targetContents.add(mixedSqlNode);\n     }\n   }",
      "parent_sha": "e440bfaea37b312b32c522e261c895c8b287e21f"
    }
  },
  {
    "oid": "7df6d2770c82197973e9d49a9eba8001446c9b68",
    "message": "[ci] Fix checkstyle issue with else statement",
    "date": "2020-03-14T21:45:09Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/7df6d2770c82197973e9d49a9eba8001446c9b68",
    "details": {
      "sha": "deb396b4181942274a53361f095b0c29e8ec5d69",
      "filename": "src/main/java/org/apache/ibatis/io/DefaultVFS.java",
      "status": "modified",
      "additions": 5,
      "deletions": 10,
      "changes": 15,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/7df6d2770c82197973e9d49a9eba8001446c9b68/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FDefaultVFS.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/7df6d2770c82197973e9d49a9eba8001446c9b68/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FDefaultVFS.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FDefaultVFS.java?ref=7df6d2770c82197973e9d49a9eba8001446c9b68",
      "patch": "@@ -65,8 +65,7 @@ public List<String> list(URL url, String path) throws IOException {\n           log.debug(\"Listing \" + url);\n         }\n         resources = listResources(new JarInputStream(is), path);\n-      }\n-      else {\n+      } else {\n         List<String> children = new ArrayList<>();\n         try {\n           if (isJar(url)) {\n@@ -84,8 +83,7 @@ public List<String> list(URL url, String path) throws IOException {\n                 children.add(entry.getName());\n               }\n             }\n-          }\n-          else {\n+          } else {\n             /*\n              * Some servlet containers allow reading from directory resources like a\n              * text file, listing the child resources one per line. However, there is no\n@@ -132,8 +130,7 @@ public List<String> list(URL url, String path) throws IOException {\n               }\n               children = Arrays.asList(file.list());\n             }\n-          }\n-          else {\n+          } else {\n             // No idea where the exception came from so rethrow it\n             throw e;\n           }\n@@ -244,8 +241,7 @@ protected URL findJarForResource(URL url) throws MalformedURLException {\n       if (log.isDebugEnabled()) {\n         log.debug(\"Extracted JAR URL: \" + jarUrl);\n       }\n-    }\n-    else {\n+    } else {\n       if (log.isDebugEnabled()) {\n         log.debug(\"Not a JAR: \" + jarUrl);\n       }\n@@ -257,8 +253,7 @@ protected URL findJarForResource(URL url) throws MalformedURLException {\n       URL testUrl = new URL(jarUrl.toString());\n       if (isJar(testUrl)) {\n         return testUrl;\n-      }\n-      else {\n+      } else {\n         // WebLogic fix: check if the URL's file exists in the filesystem.\n         if (log.isDebugEnabled()) {\n           log.debug(\"Not a JAR: \" + jarUrl);",
      "parent_sha": "f81fb49110f10b16bb28a7f7980a0cd5fe94bf23"
    }
  },
  {
    "oid": "e0a54375ee11789021d6cefeed1c2ac424942b93",
    "message": "[ci] Use jdk 11 style charset",
    "date": "2025-01-01T04:12:59Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/e0a54375ee11789021d6cefeed1c2ac424942b93",
    "details": {
      "sha": "a53b278f5588ce1a865c25e94f8dbdc6c28baf25",
      "filename": "src/main/java/org/apache/ibatis/io/DefaultVFS.java",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/e0a54375ee11789021d6cefeed1c2ac424942b93/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FDefaultVFS.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/e0a54375ee11789021d6cefeed1c2ac424942b93/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FDefaultVFS.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FDefaultVFS.java?ref=e0a54375ee11789021d6cefeed1c2ac424942b93",
      "patch": "@@ -21,7 +21,6 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n-import java.io.UnsupportedEncodingException;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLEncoder;\n@@ -278,11 +277,7 @@ protected URL findJarForResource(URL url) throws MalformedURLException {\n \n       // File name might be URL-encoded\n       if (!file.exists()) {\n-        try {\n-          file = new File(URLEncoder.encode(jarUrl.toString(), StandardCharsets.UTF_8.name()));\n-        } catch (UnsupportedEncodingException e) {\n-          throw new RuntimeException(\"Unsupported encoding?  UTF-8?  That's impossible.\");\n-        }\n+        file = new File(URLEncoder.encode(jarUrl.toString(), StandardCharsets.UTF_8));\n       }\n \n       if (file.exists()) {",
      "parent_sha": "236c860f3c0ff3bac906368b78fb571c33a20038"
    }
  },
  {
    "oid": "ae6310f57950916c1f6dcd76e4f568b6d3b497f6",
    "message": "[ci] Use stringbuilder instead of concatenation",
    "date": "2018-12-23T02:07:57Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/ae6310f57950916c1f6dcd76e4f568b6d3b497f6",
    "details": {
      "sha": "944dcb4690eb28d5a0c1d8766361ac32279d1319",
      "filename": "src/main/java/org/apache/ibatis/io/DefaultVFS.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/ae6310f57950916c1f6dcd76e4f568b6d3b497f6/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FDefaultVFS.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/ae6310f57950916c1f6dcd76e4f568b6d3b497f6/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FDefaultVFS.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FDefaultVFS.java?ref=ae6310f57950916c1f6dcd76e4f568b6d3b497f6",
      "patch": "@@ -189,13 +189,13 @@ protected List<String> listResources(JarInputStream jar, String path) throws IOE\n     for (JarEntry entry; (entry = jar.getNextJarEntry()) != null;) {\n       if (!entry.isDirectory()) {\n         // Add leading slash if it's missing\n-        String name = entry.getName();\n-        if (!name.startsWith(\"/\")) {\n-          name = \"/\" + name;\n+        StringBuilder name = new StringBuilder(entry.getName());\n+        if (name.charAt(0) != '/') {\n+          name.insert(0, '/');\n         }\n \n         // Check file name\n-        if (name.startsWith(path)) {\n+        if (name.indexOf(path) == 0) {\n           if (log.isDebugEnabled()) {\n             log.debug(\"Found resource: \" + name);\n           }",
      "parent_sha": "71017b57af2b17abbd41ade1ed948fbe266dab3f"
    }
  },
  {
    "oid": "baab2b7f4c58a561d7eb85352d7c27f8ca55f58a",
    "message": "Fix build error on JDK 1.6",
    "date": "2016-04-24T19:42:00Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/baab2b7f4c58a561d7eb85352d7c27f8ca55f58a",
    "details": {
      "sha": "65d9a7499b25d37a8a0679e28c57359c0020c7a2",
      "filename": "src/test/java/org/apache/ibatis/builder/XmlMapperBuilderTest.java",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/baab2b7f4c58a561d7eb85352d7c27f8ca55f58a/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2FXmlMapperBuilderTest.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/baab2b7f4c58a561d7eb85352d7c27f8ca55f58a/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2FXmlMapperBuilderTest.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2FXmlMapperBuilderTest.java?ref=baab2b7f4c58a561d7eb85352d7c27f8ca55f58a",
      "patch": "@@ -25,13 +25,13 @@\n import org.apache.ibatis.mapping.StatementType;\n import org.apache.ibatis.session.Configuration;\n import org.apache.ibatis.type.TypeHandler;\n+import org.hamcrest.CoreMatchers;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n \n import static org.junit.Assert.assertThat;\n-import static org.hamcrest.core.Is.is;\n-import static org.hamcrest.core.IsNull.nullValue;\n+import static org.hamcrest.CoreMatchers.*;\n \n public class XmlMapperBuilderTest {\n \n@@ -84,23 +84,26 @@ public void parseExpression() {\n   public void resolveJdbcTypeWithUndefinedValue() {\n     BaseBuilder builder = new BaseBuilder(new Configuration()){{}};\n     expectedException.expect(BuilderException.class);\n-    expectedException.expectMessage(is(\"Error resolving JdbcType. Cause: java.lang.IllegalArgumentException: No enum constant org.apache.ibatis.type.JdbcType.aaa\"));\n+    expectedException.expectMessage(startsWith(\"Error resolving JdbcType. Cause: java.lang.IllegalArgumentException: No enum\"));\n+    expectedException.expectMessage(endsWith(\"org.apache.ibatis.type.JdbcType.aaa\"));\n     builder.resolveJdbcType(\"aaa\");\n   }\n \n   @Test\n   public void resolveResultSetTypeWithUndefinedValue() {\n     BaseBuilder builder = new BaseBuilder(new Configuration()){{}};\n     expectedException.expect(BuilderException.class);\n-    expectedException.expectMessage(is(\"Error resolving ResultSetType. Cause: java.lang.IllegalArgumentException: No enum constant org.apache.ibatis.mapping.ResultSetType.bbb\"));\n+    expectedException.expectMessage(startsWith(\"Error resolving ResultSetType. Cause: java.lang.IllegalArgumentException: No enum\"));\n+    expectedException.expectMessage(endsWith(\"org.apache.ibatis.mapping.ResultSetType.bbb\"));\n     builder.resolveResultSetType(\"bbb\");\n   }\n \n   @Test\n   public void resolveParameterModeWithUndefinedValue() {\n     BaseBuilder builder = new BaseBuilder(new Configuration()){{}};\n     expectedException.expect(BuilderException.class);\n-    expectedException.expectMessage(is(\"Error resolving ParameterMode. Cause: java.lang.IllegalArgumentException: No enum constant org.apache.ibatis.mapping.ParameterMode.ccc\"));\n+    expectedException.expectMessage(startsWith(\"Error resolving ParameterMode. Cause: java.lang.IllegalArgumentException: No enum\"));\n+    expectedException.expectMessage(endsWith(\"org.apache.ibatis.mapping.ParameterMode.ccc\"));\n     builder.resolveParameterMode(\"ccc\");\n   }\n ",
      "parent_sha": "1d0b2dd3db9a7e301ca1674ea9d271c37d6f4b00"
    }
  },
  {
    "oid": "62b56f305f4c3983501297a6cd91bd39804a04cc",
    "message": "2nd commit for http://code.google.com/p/mybatis/issues/detail?id=237 . close connections for any exception, not just SQLException",
    "date": "2011-01-30T18:58:20Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/62b56f305f4c3983501297a6cd91bd39804a04cc",
    "details": {
      "sha": "413113689ca73af5cd896123c407249df03c4c07",
      "filename": "src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSessionFactory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/62b56f305f4c3983501297a6cd91bd39804a04cc/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2Fdefaults%2FDefaultSqlSessionFactory.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/62b56f305f4c3983501297a6cd91bd39804a04cc/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2Fdefaults%2FDefaultSqlSessionFactory.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fsession%2Fdefaults%2FDefaultSqlSessionFactory.java?ref=62b56f305f4c3983501297a6cd91bd39804a04cc",
      "patch": "@@ -78,7 +78,7 @@ private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionI\n       Transaction tx = transactionFactory.newTransaction(connection, autoCommit);\n       Executor executor = configuration.newExecutor(tx, execType);\n       return new DefaultSqlSession(configuration, executor, autoCommit);\n-    } catch (SQLException e) {\n+    } catch (Exception e) {\n       closeConnection(connection);\n       throw ExceptionFactory.wrapException(\"Error opening session.  Cause: \" + e, e);\n     } finally {",
      "parent_sha": "8b217af8f4c312780a0bb9dfb2aab13bd871e45d"
    }
  },
  {
    "oid": "d4ab36d9a8f9b2eb3c4026c4de1b01025c20afd0",
    "message": "minor fix http://code.google.com/p/mybatis/issues/detail?id=625",
    "date": "2012-07-19T06:07:14Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/d4ab36d9a8f9b2eb3c4026c4de1b01025c20afd0",
    "details": {
      "sha": "912725e0ae00f9da64cd4d9426c7db732292f397",
      "filename": "src/main/java/org/apache/ibatis/io/Resources.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/d4ab36d9a8f9b2eb3c4026c4de1b01025c20afd0/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FResources.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/d4ab36d9a8f9b2eb3c4026c4de1b01025c20afd0/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FResources.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FResources.java?ref=d4ab36d9a8f9b2eb3c4026c4de1b01025c20afd0",
      "patch": "@@ -67,7 +67,7 @@ public static void setDefaultClassLoader(ClassLoader defaultClassLoader) {\n    * @throws java.io.IOException If the resource cannot be found or read\r\n    */\r\n   public static URL getResourceURL(String resource) throws IOException {\r\n-    return classLoaderWrapper.getResourceAsURL(resource);\r\n+    return getResourceURL(null, resource); // issue #625\r\n   }\r\n \r\n   /*\r",
      "parent_sha": "00df3c3f6bfdba855b014baaf2ab2298678c362a"
    }
  },
  {
    "oid": "951a99cf5c26c9325d5c95c028968ff372487193",
    "message": "Fix issue #366",
    "date": "2015-05-02T23:18:40Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/951a99cf5c26c9325d5c95c028968ff372487193",
    "details": {
      "sha": "7491743577fe06352c15e0e11b44e9cb1c2b9512",
      "filename": "src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/951a99cf5c26c9325d5c95c028968ff372487193/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2Fannotation%2FMapperAnnotationBuilder.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/951a99cf5c26c9325d5c95c028968ff372487193/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2Fannotation%2FMapperAnnotationBuilder.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2Fannotation%2FMapperAnnotationBuilder.java?ref=951a99cf5c26c9325d5c95c028968ff372487193",
      "patch": "@@ -436,7 +436,7 @@ private SqlSource buildSqlSourceFromStrings(String[] strings, Class<?> parameter\n       sql.append(fragment);\n       sql.append(\" \");\n     }\n-    return languageDriver.createSqlSource(configuration, sql.toString(), parameterTypeClass);\n+    return languageDriver.createSqlSource(configuration, sql.toString().trim(), parameterTypeClass);\n   }\n \n   private SqlCommandType getSqlCommandType(Method method) {",
      "parent_sha": "1c5a2cb0337e1a8e512a38b05d5a15b7202fc849"
    }
  },
  {
    "oid": "9d998511d7b81efbf865e0d9daf166b3e38828ef",
    "message": "Updated license year",
    "date": "2020-08-20T15:22:21Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/9d998511d7b81efbf865e0d9daf166b3e38828ef",
    "details": {
      "sha": "da5cdb5a1ef717341061fff559f4e5d644080878",
      "filename": "src/main/java/org/apache/ibatis/io/ClassLoaderWrapper.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/9d998511d7b81efbf865e0d9daf166b3e38828ef/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FClassLoaderWrapper.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/9d998511d7b81efbf865e0d9daf166b3e38828ef/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FClassLoaderWrapper.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fio%2FClassLoaderWrapper.java?ref=9d998511d7b81efbf865e0d9daf166b3e38828ef",
      "patch": "@@ -1,5 +1,5 @@\n /**\n- *    Copyright 2009-2019 the original author or authors.\n+ *    Copyright 2009-2020 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.",
      "parent_sha": "a16ed320ce109065b73a53a8cf8d6ea45cc5e941"
    }
  },
  {
    "oid": "953bba61f730f24cf6e81b7a98a058e50730e510",
    "message": "Polishing #1582",
    "date": "2019-06-27T16:16:50Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/953bba61f730f24cf6e81b7a98a058e50730e510",
    "details": {
      "sha": "c8adbf791386861e84b455770e9e577ff242b5e7",
      "filename": "src/main/java/org/apache/ibatis/jdbc/AbstractSQL.java",
      "status": "modified",
      "additions": 4,
      "deletions": 12,
      "changes": 16,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/953bba61f730f24cf6e81b7a98a058e50730e510/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fjdbc%2FAbstractSQL.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/953bba61f730f24cf6e81b7a98a058e50730e510/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fjdbc%2FAbstractSQL.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fjdbc%2FAbstractSQL.java?ref=953bba61f730f24cf6e81b7a98a058e50730e510",
      "patch": "@@ -285,9 +285,7 @@ public T LIMIT(String variable) {\n    * @since 3.5.2\n    */\n   public T LIMIT(int value) {\n-    sql().limit = String.valueOf(value);\n-    sql().limitingRowsStrategy = SQLStatement.LimitingRowsStrategy.OFFSET_LIMIT;\n-    return getSelf();\n+    return LIMIT(String.valueOf(value));\n   }\n \n   /**\n@@ -313,9 +311,7 @@ public T OFFSET(String variable) {\n    * @since 3.5.2\n    */\n   public T OFFSET(long value) {\n-    sql().offset = String.valueOf(value);\n-    sql().limitingRowsStrategy = SQLStatement.LimitingRowsStrategy.OFFSET_LIMIT;\n-    return getSelf();\n+    return OFFSET(String.valueOf(value));\n   }\n \n   /**\n@@ -341,9 +337,7 @@ public T FETCH_FIRST_ROWS_ONLY(String variable) {\n    * @since 3.5.2\n    */\n   public T FETCH_FIRST_ROWS_ONLY(int value) {\n-    sql().limit = String.valueOf(value);\n-    sql().limitingRowsStrategy = SQLStatement.LimitingRowsStrategy.ISO;\n-    return getSelf();\n+    return FETCH_FIRST_ROWS_ONLY(String.valueOf(value));\n   }\n \n   /**\n@@ -369,9 +363,7 @@ public T OFFSET_ROWS(String variable) {\n    * @since 3.5.2\n    */\n   public T OFFSET_ROWS(long value) {\n-    sql().offset = String.valueOf(value);\n-    sql().limitingRowsStrategy = SQLStatement.LimitingRowsStrategy.ISO;\n-    return getSelf();\n+    return OFFSET_ROWS(String.valueOf(value));\n   }\n \n   private SQLStatement sql() {",
      "parent_sha": "a0772380ef843391a51dc3fc42e3d1c3205bd666"
    }
  },
  {
    "oid": "ad27aa00f6ed0fe6dae6000959ab56a86dfabe54",
    "message": "Edit the Copyright year of BadAnnotatedSubject",
    "date": "2022-07-30T08:27:28Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/ad27aa00f6ed0fe6dae6000959ab56a86dfabe54",
    "details": {
      "sha": "f5621b79a477922b859e2c6c49c4e6e394e08d8c",
      "filename": "src/test/java/org/apache/ibatis/autoconstructor/BadAnnotatedSubject.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/ad27aa00f6ed0fe6dae6000959ab56a86dfabe54/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fautoconstructor%2FBadAnnotatedSubject.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/ad27aa00f6ed0fe6dae6000959ab56a86dfabe54/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fautoconstructor%2FBadAnnotatedSubject.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fautoconstructor%2FBadAnnotatedSubject.java?ref=ad27aa00f6ed0fe6dae6000959ab56a86dfabe54",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- *    Copyright 2009-2021 the original author or authors.\n+ *    Copyright 2009-2022 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.",
      "parent_sha": "e5bb47aae7a77776f045c0e6608f5ed73a24aebd"
    }
  },
  {
    "oid": "eb9d0c586fd5648b1780e73d303f2fd28f938bb7",
    "message": "Improve  the ProvderSqlSource to immutable object",
    "date": "2019-07-22T04:01:17Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/eb9d0c586fd5648b1780e73d303f2fd28f938bb7",
    "details": {
      "sha": "543fc9ceb2894516d97e13984ad94ea1280663ab",
      "filename": "src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java",
      "status": "modified",
      "additions": 27,
      "deletions": 20,
      "changes": 47,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/eb9d0c586fd5648b1780e73d303f2fd28f938bb7/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2Fannotation%2FProviderSqlSource.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/eb9d0c586fd5648b1780e73d303f2fd28f938bb7/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2Fannotation%2FProviderSqlSource.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2Fannotation%2FProviderSqlSource.java?ref=eb9d0c586fd5648b1780e73d303f2fd28f938bb7",
      "patch": "@@ -39,11 +39,11 @@ public class ProviderSqlSource implements SqlSource {\n   private final Class<?> providerType;\n   private final LanguageDriver languageDriver;\n   private final Method mapperMethod;\n-  private Method providerMethod;\n-  private String[] providerMethodArgumentNames;\n-  private Class<?>[] providerMethodParameterTypes;\n-  private ProviderContext providerContext;\n-  private Integer providerContextIndex;\n+  private final Method providerMethod;\n+  private final String[] providerMethodArgumentNames;\n+  private final Class<?>[] providerMethodParameterTypes;\n+  private final ProviderContext providerContext;\n+  private final Integer providerContextIndex;\n \n   /**\n    * @deprecated Since 3.5.3, Please use the {@link #ProviderSqlSource(Configuration, Annotation, Class, Method)} instead of this.\n@@ -68,29 +68,30 @@ public ProviderSqlSource(Configuration configuration, Object provider, Class<?>\n    * @since 3.5.3\n    */\n   public ProviderSqlSource(Configuration configuration, Annotation provider, Class<?> mapperType, Method mapperMethod) {\n-    String providerMethodName;\n+    String candidateProviderMethodName;\n+    Method candidateProviderMethod = null;\n     try {\n       this.configuration = configuration;\n       this.mapperMethod = mapperMethod;\n       Lang lang = mapperMethod == null ? null : mapperMethod.getAnnotation(Lang.class);\n       this.languageDriver = configuration.getLanguageDriver(lang == null ? null : lang.value());\n       this.providerType = getProviderType(provider, mapperMethod);\n-      providerMethodName = (String) provider.annotationType().getMethod(\"method\").invoke(provider);\n+      candidateProviderMethodName = (String) provider.annotationType().getMethod(\"method\").invoke(provider);\n \n-      if (providerMethodName.length() == 0 && ProviderMethodResolver.class.isAssignableFrom(this.providerType)) {\n-        this.providerMethod = ((ProviderMethodResolver) this.providerType.getDeclaredConstructor().newInstance())\n+      if (candidateProviderMethodName.length() == 0 && ProviderMethodResolver.class.isAssignableFrom(this.providerType)) {\n+        candidateProviderMethod = ((ProviderMethodResolver) this.providerType.getDeclaredConstructor().newInstance())\n             .resolveMethod(new ProviderContext(mapperType, mapperMethod, configuration.getDatabaseId()));\n       }\n-      if (this.providerMethod == null) {\n-        providerMethodName = providerMethodName.length() == 0 ? \"provideSql\" : providerMethodName;\n+      if (candidateProviderMethod == null) {\n+        candidateProviderMethodName = candidateProviderMethodName.length() == 0 ? \"provideSql\" : candidateProviderMethodName;\n         for (Method m : this.providerType.getMethods()) {\n-          if (providerMethodName.equals(m.getName()) && CharSequence.class.isAssignableFrom(m.getReturnType())) {\n-            if (this.providerMethod != null) {\n+          if (candidateProviderMethodName.equals(m.getName()) && CharSequence.class.isAssignableFrom(m.getReturnType())) {\n+            if (candidateProviderMethod != null) {\n               throw new BuilderException(\"Error creating SqlSource for SqlProvider. Method '\"\n-                  + providerMethodName + \"' is found multiple in SqlProvider '\" + this.providerType.getName()\n+                  + candidateProviderMethodName + \"' is found multiple in SqlProvider '\" + this.providerType.getName()\n                   + \"'. Sql provider method can not overload.\");\n             }\n-            this.providerMethod = m;\n+            candidateProviderMethod = m;\n           }\n         }\n       }\n@@ -99,24 +100,30 @@ public ProviderSqlSource(Configuration configuration, Annotation provider, Class\n     } catch (Exception e) {\n       throw new BuilderException(\"Error creating SqlSource for SqlProvider.  Cause: \" + e, e);\n     }\n-    if (this.providerMethod == null) {\n+    if (candidateProviderMethod == null) {\n       throw new BuilderException(\"Error creating SqlSource for SqlProvider. Method '\"\n-          + providerMethodName + \"' not found in SqlProvider '\" + this.providerType.getName() + \"'.\");\n+          + candidateProviderMethodName + \"' not found in SqlProvider '\" + this.providerType.getName() + \"'.\");\n     }\n+    this.providerMethod = candidateProviderMethod;\n     this.providerMethodArgumentNames = new ParamNameResolver(configuration, this.providerMethod).getNames();\n     this.providerMethodParameterTypes = this.providerMethod.getParameterTypes();\n+\n+    ProviderContext candidateProviderContext = null;\n+    Integer candidateProviderContextIndex = null;\n     for (int i = 0; i < this.providerMethodParameterTypes.length; i++) {\n       Class<?> parameterType = this.providerMethodParameterTypes[i];\n       if (parameterType == ProviderContext.class) {\n-        if (this.providerContext != null) {\n+        if (candidateProviderContext != null) {\n           throw new BuilderException(\"Error creating SqlSource for SqlProvider. ProviderContext found multiple in SqlProvider method (\"\n               + this.providerType.getName() + \".\" + providerMethod.getName()\n               + \"). ProviderContext can not define multiple in SqlProvider method argument.\");\n         }\n-        this.providerContext = new ProviderContext(mapperType, mapperMethod, configuration.getDatabaseId());\n-        this.providerContextIndex = i;\n+        candidateProviderContext = new ProviderContext(mapperType, mapperMethod, configuration.getDatabaseId());\n+        candidateProviderContextIndex = i;\n       }\n     }\n+    this.providerContext = candidateProviderContext;\n+    this.providerContextIndex = candidateProviderContextIndex;\n   }\n \n   @Override",
      "parent_sha": "e4b89ce5d66b64f43a9daa763d62d5cf09255538"
    }
  },
  {
    "oid": "7b26ea32f6e69e310c67d07ce59f1903df52e0f5",
    "message": "Fixes #158. Use namespace for cache logging.",
    "date": "2014-03-11T19:47:52Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/7b26ea32f6e69e310c67d07ce59f1903df52e0f5",
    "details": {
      "sha": "3d2f447b6beec6e02457d85f9172fbb97b5c0eb9",
      "filename": "src/main/java/org/apache/ibatis/cache/decorators/LoggingCache.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/7b26ea32f6e69e310c67d07ce59f1903df52e0f5/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fcache%2Fdecorators%2FLoggingCache.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/7b26ea32f6e69e310c67d07ce59f1903df52e0f5/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fcache%2Fdecorators%2FLoggingCache.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fcache%2Fdecorators%2FLoggingCache.java?ref=7b26ea32f6e69e310c67d07ce59f1903df52e0f5",
      "patch": "@@ -23,14 +23,14 @@\n \n public class LoggingCache implements Cache {\n \n-  private static final Log log = LogFactory.getLog(LoggingCache.class); \n-\n+  private Log log;  \n   private Cache delegate;\n   protected int requests = 0;\n   protected int hits = 0;\n \n   public LoggingCache(Cache delegate) {\n     this.delegate = delegate;\n+    this.log = LogFactory.getLog(getId());\n   }\n \n   @Override",
      "parent_sha": "ddc48a7691f3925724a6059041c09b0af3996502"
    }
  },
  {
    "oid": "783c3a822880322a8ee084c393016d0430aafaaf",
    "message": "refs #21 Added 'final' as per Kazuki's suggestion.",
    "date": "2018-10-31T13:17:01Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/783c3a822880322a8ee084c393016d0430aafaaf",
    "details": {
      "sha": "518fd9b216152ea631c256806fad820c9b5d95e1",
      "filename": "src/main/java/org/apache/ibatis/scripting/xmltags/SetSqlNode.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/783c3a822880322a8ee084c393016d0430aafaaf/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fscripting%2Fxmltags%2FSetSqlNode.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/783c3a822880322a8ee084c393016d0430aafaaf/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fscripting%2Fxmltags%2FSetSqlNode.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fscripting%2Fxmltags%2FSetSqlNode.java?ref=783c3a822880322a8ee084c393016d0430aafaaf",
      "patch": "@@ -25,7 +25,7 @@\n  */\n public class SetSqlNode extends TrimSqlNode {\n \n-  private static List<String> COMMA = Collections.singletonList(\",\");\n+  private static final List<String> COMMA = Collections.singletonList(\",\");\n \n   public SetSqlNode(Configuration configuration,SqlNode contents) {\n     super(configuration, contents, \"SET\", COMMA, null, COMMA);",
      "parent_sha": "95166a683c11e35273769c7edf15f7925a5f4006"
    }
  },
  {
    "oid": "7d95da4ecbd3f818e19e81f8bfdbda8e773091ae",
    "message": "Changing terms - using \"variable\" instead of \"placeholder\" (the same is used in configuration.getVariables)",
    "date": "2015-02-02T06:43:03Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/7d95da4ecbd3f818e19e81f8bfdbda8e773091ae",
    "details": {
      "sha": "6be815323867699cf313750325cb9867714fc2fd",
      "filename": "src/main/java/org/apache/ibatis/builder/xml/XMLIncludeTransformer.java",
      "status": "modified",
      "additions": 33,
      "deletions": 33,
      "changes": 66,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/7d95da4ecbd3f818e19e81f8bfdbda8e773091ae/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2Fxml%2FXMLIncludeTransformer.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/7d95da4ecbd3f818e19e81f8bfdbda8e773091ae/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2Fxml%2FXMLIncludeTransformer.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fbuilder%2Fxml%2FXMLIncludeTransformer.java?ref=7d95da4ecbd3f818e19e81f8bfdbda8e773091ae",
      "patch": "@@ -41,40 +41,40 @@ public XMLIncludeTransformer(Configuration configuration, MapperBuilderAssistant\n   }\n \n   public void applyIncludes(Node source) {\n-    Properties placeholderContext = new Properties();\n+    Properties variablesContext = new Properties();\n     Properties configurationVariables = configuration.getVariables();\n     if (configurationVariables != null) {\n-      placeholderContext.putAll(configurationVariables);\n+      variablesContext.putAll(configurationVariables);\n     }\n-    applyIncludes(source, placeholderContext);\n+    applyIncludes(source, variablesContext);\n   }\n \n   /**\n    * Recursively apply includes through all SQL fragments.\n    * @param source Include node in DOM tree\n-   * @param placeholderContext Current context for static placeholders with values\n+   * @param variablesContext Current context for static variables with values\n    */\n-  private void applyIncludes(Node source, final Properties placeholderContext) {\n+  private void applyIncludes(Node source, final Properties variablesContext) {\n     if (source.getNodeName().equals(\"include\")) {\n       // new full context for included SQL - contains inherited context and new variables from current include node\n       Properties fullContext;\n \n       String refid = getStringAttribute(source, \"refid\");\n-      // replace placeholders and variables in include refid value\n-      refid = PropertyParser.parse(refid, placeholderContext);\n+      // replace variables in include refid value\n+      refid = PropertyParser.parse(refid, variablesContext);\n       Node toInclude = findSqlFragment(refid);\n-      Properties newPlaceholderContext = getPlaceholderContext(source);\n-      if (!newPlaceholderContext.isEmpty()) {\n-        // replace placeholders in new variables too\n-        for (Object name : newPlaceholderContext.keySet()) {\n-          newPlaceholderContext.put(name, PropertyParser.parse(newPlaceholderContext.get(name).toString(), placeholderContext));\n+      Properties newVariablesContext = getVariablesContext(source);\n+      if (!newVariablesContext.isEmpty()) {\n+        // replace variables in variable values too\n+        for (Object name : newVariablesContext.keySet()) {\n+          newVariablesContext.put(name, PropertyParser.parse(newVariablesContext.get(name).toString(), variablesContext));\n         }\n         // merge new and inherited into new full one\n-        applyInheritedContext(newPlaceholderContext, placeholderContext);\n-        fullContext = newPlaceholderContext;\n+        applyInheritedContext(newVariablesContext, variablesContext);\n+        fullContext = newVariablesContext;\n       } else {\n         // no new context - use inherited fully\n-        fullContext = placeholderContext;\n+        fullContext = variablesContext;\n       }\n       applyIncludes(toInclude, fullContext);\n       if (toInclude.getOwnerDocument() != source.getOwnerDocument()) {\n@@ -88,14 +88,14 @@ private void applyIncludes(Node source, final Properties placeholderContext) {\n     } else if (source.getNodeType() == Node.ELEMENT_NODE) {\n       NodeList children = source.getChildNodes();\n       for (int i=0; i<children.getLength(); i++) {\n-        applyIncludes(children.item(i), placeholderContext);\n+        applyIncludes(children.item(i), variablesContext);\n       }\n-    } else if (source.getNodeType() == Node.ATTRIBUTE_NODE && !placeholderContext.isEmpty()) {\n-      // replace placeholders in all attribute values\n-      source.setNodeValue(PropertyParser.parse(source.getNodeValue(), placeholderContext));\n-    } else if (source.getNodeType() == Node.TEXT_NODE && !placeholderContext.isEmpty()) {\n-      // replace placeholder ins all text nodes\n-      source.setNodeValue(PropertyParser.parse(source.getNodeValue(), placeholderContext));\n+    } else if (source.getNodeType() == Node.ATTRIBUTE_NODE && !variablesContext.isEmpty()) {\n+      // replace variables in all attribute values\n+      source.setNodeValue(PropertyParser.parse(source.getNodeValue(), variablesContext));\n+    } else if (source.getNodeType() == Node.TEXT_NODE && !variablesContext.isEmpty()) {\n+      // replace variables ins all text nodes\n+      source.setNodeValue(PropertyParser.parse(source.getNodeValue(), variablesContext));\n     }\n   }\n \n@@ -115,8 +115,8 @@ private String getStringAttribute(Node node, String name) {\n \n   /**\n    * Add inherited context into newly created one.\n-   * @param newContext placeholders defined current include clause where inherited values will be placed\n-   * @param inheritedContext all inherited placeholder values\n+   * @param newContext variables defined current include clause where inherited values will be placed\n+   * @param inheritedContext all inherited variables values\n    */\n   private void applyInheritedContext(Properties newContext, Properties inheritedContext) {\n     for (Map.Entry<Object, Object> e : inheritedContext.entrySet()) {\n@@ -129,24 +129,24 @@ private void applyInheritedContext(Properties newContext, Properties inheritedCo\n   /**\n    * Read placholders and their values from include node definition. \n    * @param node Include node instance\n-   * @return placeholder context from include instance (no inherited values)\n+   * @return variables context from include instance (no inherited values)\n    */\n-  private Properties getPlaceholderContext(Node node) {\n+  private Properties getVariablesContext(Node node) {\n     List<Node> subElements = getSubElements(node);\n     if (subElements.isEmpty()) {\n       return new Properties();\n     } else {\n-      Properties placeholderContext = new Properties();\n-      for (Node placeholderValue : subElements) {\n-        String name = getStringAttribute(placeholderValue, \"name\");\n-        String value = getStringAttribute(placeholderValue, \"value\");\n+      Properties variablesContext = new Properties();\n+      for (Node variableValue : subElements) {\n+        String name = getStringAttribute(variableValue, \"name\");\n+        String value = getStringAttribute(variableValue, \"value\");\n         // Push new value\n-        Object originalValue = placeholderContext.put(name, value);\n+        Object originalValue = variablesContext.put(name, value);\n         if (originalValue != null) {\n-          throw new IllegalArgumentException(\"Placeholder \" + name + \" defined twice in the same include definition\");\n+          throw new IllegalArgumentException(\"Variable \" + name + \" defined twice in the same include definition\");\n         }\n       }\n-      return placeholderContext;\n+      return variablesContext;\n     }\n   }\n   ",
      "parent_sha": "f06a2e40bf7b9fc863608037f47d964b308da681"
    }
  },
  {
    "oid": "8f4a6192c240730fcb9680e4275cd6a52f763bf1",
    "message": "Mimic DefaultParameterHandler logic when calculating the CacheKey",
    "date": "2014-03-12T09:49:36Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/8f4a6192c240730fcb9680e4275cd6a52f763bf1",
    "details": {
      "sha": "3e020c1dbe4ee5074c1410d2dc4c6dde964aa6c2",
      "filename": "src/main/java/org/apache/ibatis/executor/BaseExecutor.java",
      "status": "modified",
      "additions": 17,
      "deletions": 14,
      "changes": 31,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/8f4a6192c240730fcb9680e4275cd6a52f763bf1/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2FBaseExecutor.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/8f4a6192c240730fcb9680e4275cd6a52f763bf1/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2FBaseExecutor.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fibatis%2Fexecutor%2FBaseExecutor.java?ref=8f4a6192c240730fcb9680e4275cd6a52f763bf1",
      "patch": "@@ -166,24 +166,27 @@ public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBo\n     cacheKey.update(rowBounds.getLimit());\n     cacheKey.update(boundSql.getSql());\n     List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();\n-    if (parameterMappings.size() > 0 && parameterObject != null) {\n-      TypeHandlerRegistry typeHandlerRegistry = ms.getConfiguration().getTypeHandlerRegistry();\n-      if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {\n-        cacheKey.update(parameterObject);\n-      } else {\n-        MetaObject metaObject = configuration.newMetaObject(parameterObject);\n-        for (ParameterMapping parameterMapping : parameterMappings) {\n-          String propertyName = parameterMapping.getProperty();       \n-          if (boundSql.hasAdditionalParameter(propertyName)) { // issue #448 ask first for additional params\n-            cacheKey.update(boundSql.getAdditionalParameter(propertyName));\n-          } else if (metaObject.hasGetter(propertyName)) {\n-            cacheKey.update(metaObject.getValue(propertyName));\n-          }\n+    TypeHandlerRegistry typeHandlerRegistry = ms.getConfiguration().getTypeHandlerRegistry();\n+    for (int i = 0; i < parameterMappings.size(); i++) { // mimic DefaultParameterHandler logic\n+      ParameterMapping parameterMapping = parameterMappings.get(i);\n+      if (parameterMapping.getMode() != ParameterMode.OUT) {\n+        Object value;\n+        String propertyName = parameterMapping.getProperty();\n+        if (boundSql.hasAdditionalParameter(propertyName)) {\n+          value = boundSql.getAdditionalParameter(propertyName);\n+        } else if (parameterObject == null) {\n+          value = null;\n+        } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {\n+          value = parameterObject;\n+        } else {\n+          MetaObject metaObject = configuration.newMetaObject(parameterObject);\n+          value = metaObject.getValue(propertyName);\n         }\n+        cacheKey.update(value);\n       }\n     }\n     return cacheKey;\n-  }\n+  }    \n \n   public boolean isCached(MappedStatement ms, CacheKey key) {\n     return localCache.getObject(key) != null;",
      "parent_sha": "c1887e3fb3a3753a5db5e623658e98b4cec91c10"
    }
  },
  {
    "oid": "7ab1ebbd7b5405bed9d3d77ee4546987e27e3cb9",
    "message": "[test] Use mockito anyString instead of deprecated anyObject",
    "date": "2016-12-18T04:59:56Z",
    "url": "https://github.com/mybatis/mybatis-3/commit/7ab1ebbd7b5405bed9d3d77ee4546987e27e3cb9",
    "details": {
      "sha": "8fd8dde44c29f48f3aa85cefc5e27c99e10ea1e3",
      "filename": "src/test/java/org/apache/ibatis/scripting/defaults/DefaultParameterHandlerTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/mybatis/mybatis-3/blob/7ab1ebbd7b5405bed9d3d77ee4546987e27e3cb9/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fscripting%2Fdefaults%2FDefaultParameterHandlerTest.java",
      "raw_url": "https://github.com/mybatis/mybatis-3/raw/7ab1ebbd7b5405bed9d3d77ee4546987e27e3cb9/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fscripting%2Fdefaults%2FDefaultParameterHandlerTest.java",
      "contents_url": "https://api.github.com/repos/mybatis/mybatis-3/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fibatis%2Fscripting%2Fdefaults%2FDefaultParameterHandlerTest.java?ref=7ab1ebbd7b5405bed9d3d77ee4546987e27e3cb9",
      "patch": "@@ -34,7 +34,7 @@\n \n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.anyInt;\n-import static org.mockito.ArgumentMatchers.anyObject;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n@@ -53,7 +53,7 @@ public void setParametersThrowsProperException() throws SQLException {\n     final BoundSql boundSql = mock(BoundSql.class);\n \n     TypeHandler<String> typeHandler = mock(TypeHandler.class);\n-    doThrow(new SQLException(\"foo\")).when(typeHandler).setParameter(any(PreparedStatement.class), anyInt(), (String) anyObject(), any(JdbcType.class));\n+    doThrow(new SQLException(\"foo\")).when(typeHandler).setParameter(any(PreparedStatement.class), anyInt(), anyString(), any(JdbcType.class));\n     ParameterMapping parameterMapping = new ParameterMapping.Builder(mappedStatement.getConfiguration(), \"prop\", typeHandler).build();\n     List<ParameterMapping> parameterMappings = Collections.singletonList(parameterMapping);\n     when(boundSql.getParameterMappings()).thenReturn(parameterMappings);",
      "parent_sha": "d83b892bdaf1067eed7ac704b0cdcbbd653dc797"
    }
  }
]