[
  {
    "oid": "7b3f5fd855fe822ef1bfb21c3fa0d430c0713e39",
    "message": "ResourceUtils.extractArchiveURL properly deals with top-level war URLs\n\nIssue: SPR-15556",
    "date": "2017-05-17T12:22:43Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/7b3f5fd855fe822ef1bfb21c3fa0d430c0713e39",
    "details": {
      "sha": "46f704e4a10c347a40e63a08adb3003721700917",
      "filename": "spring-core/src/main/java/org/springframework/util/ResourceUtils.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/7b3f5fd855fe822ef1bfb21c3fa0d430c0713e39/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Futil%2FResourceUtils.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/7b3f5fd855fe822ef1bfb21c3fa0d430c0713e39/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Futil%2FResourceUtils.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Futil%2FResourceUtils.java?ref=7b3f5fd855fe822ef1bfb21c3fa0d430c0713e39",
      "patch": "@@ -341,8 +341,11 @@ public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {\n \n \t\tint endIndex = urlFile.indexOf(WAR_URL_SEPARATOR);\n \t\tif (endIndex != -1) {\n-\t\t\t// Tomcat's \"jar:war:file:...mywar.war*/WEB-INF/lib/myjar.jar!/myentry.txt\"\n+\t\t\t// Tomcat's \"war:file:...mywar.war*/WEB-INF/lib/myjar.jar!/myentry.txt\"\n \t\t\tString warFile = urlFile.substring(0, endIndex);\n+\t\t\tif (URL_PROTOCOL_WAR.equals(jarUrl.getProtocol())) {\n+\t\t\t\treturn new URL(warFile);\n+\t\t\t}\n \t\t\tint startIndex = warFile.indexOf(WAR_URL_PREFIX);\n \t\t\tif (startIndex != -1) {\n \t\t\t\treturn new URL(warFile.substring(startIndex + WAR_URL_PREFIX.length()));\n@@ -356,8 +359,6 @@ public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {\n \t/**\n \t * Create a URI instance for the given URL,\n \t * replacing spaces with \"%20\" URI encoding first.\n-\t * <p>Furthermore, this method works on JDK 1.4 as well,\n-\t * in contrast to the {@code URL.toURI()} method.\n \t * @param url the URL to convert into a URI instance\n \t * @return the URI instance\n \t * @throws URISyntaxException if the URL wasn't a valid URI",
      "parent_sha": "e835f4d0258b8b3067cd5d121e5826247a69b88e"
    }
  },
  {
    "oid": "a985b739399468d6ee5c84adb9202734e604105e",
    "message": "Improve logging in ReactiveTypeHandler\n\nSee gh-34188",
    "date": "2025-01-06T12:13:29Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/a985b739399468d6ee5c84adb9202734e604105e",
    "details": {
      "sha": "026b1ec7d0d89c699d0b221576109a2e26e60fd1",
      "filename": "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java",
      "status": "modified",
      "additions": 24,
      "deletions": 3,
      "changes": 27,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/a985b739399468d6ee5c84adb9202734e604105e/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fmvc%2Fmethod%2Fannotation%2FReactiveTypeHandler.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/a985b739399468d6ee5c84adb9202734e604105e/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fmvc%2Fmethod%2Fannotation%2FReactiveTypeHandler.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fmvc%2Fmethod%2Fannotation%2FReactiveTypeHandler.java?ref=a985b739399468d6ee5c84adb9202734e604105e",
      "patch": "@@ -364,7 +364,14 @@ public void run() {\n \t\t\t\t\t\tlogger.debug(\"Send for \" + this.emitter + \" failed: \" + ex);\n \t\t\t\t\t}\n \t\t\t\t\tterminate();\n-\t\t\t\t\tthis.emitter.completeWithError(ex);\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tthis.emitter.completeWithError(ex);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex2) {\n+\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\t\tlogger.debug(\"Failure from emitter completeWithError: \" + ex2);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t\treturn;\n \t\t\t\t}\n \t\t\t}\n@@ -377,13 +384,27 @@ public void run() {\n \t\t\t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\t\t\tlogger.debug(\"Publisher for \" + this.emitter + \" failed: \" + ex);\n \t\t\t\t\t}\n-\t\t\t\t\tthis.emitter.completeWithError(ex);\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tthis.emitter.completeWithError(ex);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex2) {\n+\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\t\tlogger.debug(\"Failure from emitter completeWithError: \" + ex2);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\t\t\tlogger.trace(\"Publisher for \" + this.emitter + \" completed\");\n \t\t\t\t\t}\n-\t\t\t\t\tthis.emitter.complete();\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tthis.emitter.complete();\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex2) {\n+\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\t\t\tlogger.debug(\"Failure from emitter complete: \" + ex2);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\treturn;\n \t\t\t}",
      "parent_sha": "6ec7dcf2c1ca98613999621f64f9be0960d19407"
    }
  },
  {
    "oid": "47aca90c5836dc03c276a27e06685422a693ade8",
    "message": "Optimize array creation in SpEL ConstructorReference\n\n- Create primitive arrays directly instead of using Array#newInstance.\n\n- Replace if-else blocks with enhanced switch statement.\n\nCloses gh-30189",
    "date": "2023-03-27T17:31:35Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/47aca90c5836dc03c276a27e06685422a693ade8",
    "details": {
      "sha": "e044f54ea8c2f461ab7336bf9a9060969d8f2d5c",
      "filename": "spring-expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java",
      "status": "modified",
      "additions": 64,
      "deletions": 94,
      "changes": 158,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/47aca90c5836dc03c276a27e06685422a693ade8/spring-expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2Fast%2FConstructorReference.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/47aca90c5836dc03c276a27e06685422a693ade8/spring-expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2Fast%2FConstructorReference.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2Fast%2FConstructorReference.java?ref=47aca90c5836dc03c276a27e06685422a693ade8",
      "patch": "@@ -38,7 +38,6 @@\n import org.springframework.expression.spel.ExpressionState;\n import org.springframework.expression.spel.SpelEvaluationException;\n import org.springframework.expression.spel.SpelMessage;\n-import org.springframework.expression.spel.SpelNode;\n import org.springframework.expression.spel.support.ReflectiveConstructorExecutor;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n@@ -60,6 +59,7 @@\n  * @author Andy Clement\n  * @author Juergen Hoeller\n  * @author Sam Brannen\n+ * @author <a href=\"https://github.com/TAKETODAY\">Harry Yang</a>\n  * @since 3.0\n  */\n public class ConstructorReference extends SpelNodeImpl {\n@@ -332,39 +332,18 @@ private TypedValue createArray(ExpressionState state) throws EvaluationException\n \t\t\t\t\tthrow new SpelEvaluationException(getStartPosition(), SpelMessage.INITIALIZER_LENGTH_INCORRECT);\n \t\t\t\t}\n \t\t\t}\n-\t\t\t// Build the array and populate it\n-\t\t\tint arraySize = initializer.getChildCount();\n-\t\t\tnewArray = Array.newInstance(componentType, arraySize);\n-\t\t\tif (arrayTypeCode == TypeCode.OBJECT) {\n-\t\t\t\tpopulateReferenceTypeArray(state, newArray, typeConverter, initializer, componentType);\n-\t\t\t}\n-\t\t\telse if (arrayTypeCode == TypeCode.BOOLEAN) {\n-\t\t\t\tpopulateBooleanArray(state, newArray, typeConverter, initializer);\n-\t\t\t}\n-\t\t\telse if (arrayTypeCode == TypeCode.BYTE) {\n-\t\t\t\tpopulateByteArray(state, newArray, typeConverter, initializer);\n-\t\t\t}\n-\t\t\telse if (arrayTypeCode == TypeCode.CHAR) {\n-\t\t\t\tpopulateCharArray(state, newArray, typeConverter, initializer);\n-\t\t\t}\n-\t\t\telse if (arrayTypeCode == TypeCode.DOUBLE) {\n-\t\t\t\tpopulateDoubleArray(state, newArray, typeConverter, initializer);\n-\t\t\t}\n-\t\t\telse if (arrayTypeCode == TypeCode.FLOAT) {\n-\t\t\t\tpopulateFloatArray(state, newArray, typeConverter, initializer);\n-\t\t\t}\n-\t\t\telse if (arrayTypeCode == TypeCode.INT) {\n-\t\t\t\tpopulateIntArray(state, newArray, typeConverter, initializer);\n-\t\t\t}\n-\t\t\telse if (arrayTypeCode == TypeCode.LONG) {\n-\t\t\t\tpopulateLongArray(state, newArray, typeConverter, initializer);\n-\t\t\t}\n-\t\t\telse if (arrayTypeCode == TypeCode.SHORT) {\n-\t\t\t\tpopulateShortArray(state, newArray, typeConverter, initializer);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tthrow new IllegalStateException(arrayTypeCode.name());\n-\t\t\t}\n+\n+\t\t\tnewArray = switch (arrayTypeCode) {\n+\t\t\t\tcase OBJECT -> createReferenceTypeArray(state, typeConverter, initializer.children, componentType);\n+\t\t\t\tcase BOOLEAN -> createBooleanArray(state, typeConverter, initializer.children);\n+\t\t\t\tcase BYTE -> createByteArray(state, typeConverter, initializer.children);\n+\t\t\t\tcase CHAR -> createCharArray(state, typeConverter, initializer.children);\n+\t\t\t\tcase DOUBLE -> createDoubleArray(state, typeConverter, initializer.children);\n+\t\t\t\tcase FLOAT -> createFloatArray(state, typeConverter, initializer.children);\n+\t\t\t\tcase INT -> createIntArray(state, typeConverter, initializer.children);\n+\t\t\t\tcase LONG -> createLongArray(state, typeConverter, initializer.children);\n+\t\t\t\tcase SHORT -> createShortArray(state, typeConverter, initializer.children);\n+\t\t\t};\n \t\t}\n \t\treturn new TypedValue(newArray);\n \t}\n@@ -376,97 +355,88 @@ private void checkNumElements(long numElements) {\n \t\t}\n \t}\n \n-\tprivate void populateReferenceTypeArray(ExpressionState state, Object newArray, TypeConverter typeConverter,\n-\t\t\tInlineList initializer, Class<?> componentType) {\n-\n+\tprivate Object createReferenceTypeArray(ExpressionState state,\n+\t\t\tTypeConverter typeConverter, SpelNodeImpl[] children, Class<?> componentType) {\n+\t\tObject[] newArray = (Object[]) Array.newInstance(componentType, children.length);\n \t\tTypeDescriptor toTypeDescriptor = TypeDescriptor.valueOf(componentType);\n-\t\tObject[] newObjectArray = (Object[]) newArray;\n-\t\tfor (int i = 0; i < newObjectArray.length; i++) {\n-\t\t\tSpelNode elementNode = initializer.getChild(i);\n-\t\t\tObject arrayEntry = elementNode.getValue(state);\n-\t\t\tnewObjectArray[i] = typeConverter.convertValue(arrayEntry,\n+\t\tfor (int i = 0; i < newArray.length; i++) {\n+\t\t\tObject arrayEntry = children[i].getValue(state);\n+\t\t\tnewArray[i] = typeConverter.convertValue(arrayEntry,\n \t\t\t\t\tTypeDescriptor.forObject(arrayEntry), toTypeDescriptor);\n \t\t}\n+\t\treturn newArray;\n \t}\n \n-\tprivate void populateByteArray(ExpressionState state, Object newArray, TypeConverter typeConverter,\n-\t\t\tInlineList initializer) {\n-\n-\t\tbyte[] newByteArray = (byte[]) newArray;\n-\t\tfor (int i = 0; i < newByteArray.length; i++) {\n-\t\t\tTypedValue typedValue = initializer.getChild(i).getTypedValue(state);\n-\t\t\tnewByteArray[i] = ExpressionUtils.toByte(typeConverter, typedValue);\n+\tprivate byte[] createByteArray(ExpressionState state, TypeConverter converter, SpelNodeImpl[] children) {\n+\t\tbyte[] byteArray = new byte[children.length];\n+\t\tfor (int i = 0; i < byteArray.length; i++) {\n+\t\t\tTypedValue typedValue = children[i].getTypedValue(state);\n+\t\t\tbyteArray[i] = ExpressionUtils.toByte(converter, typedValue);\n \t\t}\n+\t\treturn byteArray;\n \t}\n \n-\tprivate void populateFloatArray(ExpressionState state, Object newArray, TypeConverter typeConverter,\n-\t\t\tInlineList initializer) {\n-\n-\t\tfloat[] newFloatArray = (float[]) newArray;\n-\t\tfor (int i = 0; i < newFloatArray.length; i++) {\n-\t\t\tTypedValue typedValue = initializer.getChild(i).getTypedValue(state);\n-\t\t\tnewFloatArray[i] = ExpressionUtils.toFloat(typeConverter, typedValue);\n+\tprivate float[] createFloatArray(ExpressionState state, TypeConverter typeConverter, SpelNodeImpl[] children) {\n+\t\tfloat[] floatArray = new float[children.length];\n+\t\tfor (int i = 0; i < floatArray.length; i++) {\n+\t\t\tTypedValue typedValue = children[i].getTypedValue(state);\n+\t\t\tfloatArray[i] = ExpressionUtils.toFloat(typeConverter, typedValue);\n \t\t}\n+\t\treturn floatArray;\n \t}\n \n-\tprivate void populateDoubleArray(ExpressionState state, Object newArray, TypeConverter typeConverter,\n-\t\t\tInlineList initializer) {\n-\n-\t\tdouble[] newDoubleArray = (double[]) newArray;\n-\t\tfor (int i = 0; i < newDoubleArray.length; i++) {\n-\t\t\tTypedValue typedValue = initializer.getChild(i).getTypedValue(state);\n-\t\t\tnewDoubleArray[i] = ExpressionUtils.toDouble(typeConverter, typedValue);\n+\tprivate double[] createDoubleArray(ExpressionState state, TypeConverter typeConverter, SpelNodeImpl[] children) {\n+\t\tdouble[] doubleArray = new double[children.length];\n+\t\tfor (int i = 0; i < doubleArray.length; i++) {\n+\t\t\tTypedValue typedValue = children[i].getTypedValue(state);\n+\t\t\tdoubleArray[i] = ExpressionUtils.toDouble(typeConverter, typedValue);\n \t\t}\n+\t\treturn doubleArray;\n \t}\n \n-\tprivate void populateShortArray(ExpressionState state, Object newArray, TypeConverter typeConverter,\n-\t\t\tInlineList initializer) {\n-\n-\t\tshort[] newShortArray = (short[]) newArray;\n-\t\tfor (int i = 0; i < newShortArray.length; i++) {\n-\t\t\tTypedValue typedValue = initializer.getChild(i).getTypedValue(state);\n-\t\t\tnewShortArray[i] = ExpressionUtils.toShort(typeConverter, typedValue);\n+\tprivate short[] createShortArray(ExpressionState state, TypeConverter typeConverter, SpelNodeImpl[] children) {\n+\t\tshort[] shortArray = new short[children.length];\n+\t\tfor (int i = 0; i < shortArray.length; i++) {\n+\t\t\tTypedValue typedValue = children[i].getTypedValue(state);\n+\t\t\tshortArray[i] = ExpressionUtils.toShort(typeConverter, typedValue);\n \t\t}\n+\t\treturn shortArray;\n \t}\n \n-\tprivate void populateLongArray(ExpressionState state, Object newArray, TypeConverter typeConverter,\n-\t\t\tInlineList initializer) {\n-\n-\t\tlong[] newLongArray = (long[]) newArray;\n-\t\tfor (int i = 0; i < newLongArray.length; i++) {\n-\t\t\tTypedValue typedValue = initializer.getChild(i).getTypedValue(state);\n-\t\t\tnewLongArray[i] = ExpressionUtils.toLong(typeConverter, typedValue);\n+\tprivate long[] createLongArray(ExpressionState state, TypeConverter converter, SpelNodeImpl[] children) {\n+\t\tlong[] longArray = new long[children.length];\n+\t\tfor (int i = 0; i < longArray.length; i++) {\n+\t\t\tTypedValue typedValue = children[i].getTypedValue(state);\n+\t\t\tlongArray[i] = ExpressionUtils.toLong(converter, typedValue);\n \t\t}\n+\t\treturn longArray;\n \t}\n \n-\tprivate void populateCharArray(ExpressionState state, Object newArray, TypeConverter typeConverter,\n-\t\t\tInlineList initializer) {\n-\n-\t\tchar[] newCharArray = (char[]) newArray;\n+\tprivate char[] createCharArray(ExpressionState state, TypeConverter typeConverter, SpelNodeImpl[] children) {\n+\t\tchar[] newCharArray = new char[children.length];\n \t\tfor (int i = 0; i < newCharArray.length; i++) {\n-\t\t\tTypedValue typedValue = initializer.getChild(i).getTypedValue(state);\n+\t\t\tTypedValue typedValue = children[i].getTypedValue(state);\n \t\t\tnewCharArray[i] = ExpressionUtils.toChar(typeConverter, typedValue);\n \t\t}\n+\t\treturn newCharArray;\n \t}\n \n-\tprivate void populateBooleanArray(ExpressionState state, Object newArray, TypeConverter typeConverter,\n-\t\t\tInlineList initializer) {\n-\n-\t\tboolean[] newBooleanArray = (boolean[]) newArray;\n+\tprivate boolean[] createBooleanArray(ExpressionState state, TypeConverter typeConverter, SpelNodeImpl[] children) {\n+\t\tboolean[] newBooleanArray = new boolean[children.length];\n \t\tfor (int i = 0; i < newBooleanArray.length; i++) {\n-\t\t\tTypedValue typedValue = initializer.getChild(i).getTypedValue(state);\n+\t\t\tTypedValue typedValue = children[i].getTypedValue(state);\n \t\t\tnewBooleanArray[i] = ExpressionUtils.toBoolean(typeConverter, typedValue);\n \t\t}\n+\t\treturn newBooleanArray;\n \t}\n \n-\tprivate void populateIntArray(ExpressionState state, Object newArray, TypeConverter typeConverter,\n-\t\t\tInlineList initializer) {\n-\n-\t\tint[] newIntArray = (int[]) newArray;\n-\t\tfor (int i = 0; i < newIntArray.length; i++) {\n-\t\t\tTypedValue typedValue = initializer.getChild(i).getTypedValue(state);\n-\t\t\tnewIntArray[i] = ExpressionUtils.toInt(typeConverter, typedValue);\n+\tprivate int[] createIntArray(ExpressionState state, TypeConverter typeConverter, SpelNodeImpl[] children) {\n+\t\tint[] intArray = new int[children.length];\n+\t\tfor (int i = 0; i < intArray.length; i++) {\n+\t\t\tTypedValue typedValue = children[i].getTypedValue(state);\n+\t\t\tintArray[i] = ExpressionUtils.toInt(typeConverter, typedValue);\n \t\t}\n+\t\treturn intArray;\n \t}\n \n \tprivate boolean hasInitializer() {",
      "parent_sha": "ddd6b123bbc4db54ba988bd2a846f19295f04c89"
    }
  },
  {
    "oid": "718ef42d68acbdc9f62799d2e3762bd4d4361a04",
    "message": "Exclude @Reflective from @AliasFor collection\n\nUpdate `RuntimeHintsUtils` to skip `@Reflective` annotations when\nchecking for `@AliasFor`. Since the `@Reflective` annotation is only\nused at AOT processing time, we shouldn't need a hint for it.\n\nSee gh-28528",
    "date": "2022-05-27T03:56:06Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/718ef42d68acbdc9f62799d2e3762bd4d4361a04",
    "details": {
      "sha": "538381f13e621d5e8fea422103b14c51e74f60de",
      "filename": "spring-core/src/main/java/org/springframework/aot/hint/support/RuntimeHintsUtils.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/718ef42d68acbdc9f62799d2e3762bd4d4361a04/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Faot%2Fhint%2Fsupport%2FRuntimeHintsUtils.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/718ef42d68acbdc9f62799d2e3762bd4d4361a04/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Faot%2Fhint%2Fsupport%2FRuntimeHintsUtils.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Faot%2Fhint%2Fsupport%2FRuntimeHintsUtils.java?ref=718ef42d68acbdc9f62799d2e3762bd4d4361a04",
      "patch": "@@ -27,6 +27,7 @@\n import org.springframework.aot.hint.RuntimeHints;\n import org.springframework.aot.hint.TypeHint;\n import org.springframework.aot.hint.TypeHint.Builder;\n+import org.springframework.aot.hint.annotation.Reflective;\n import org.springframework.core.annotation.AliasFor;\n import org.springframework.core.annotation.MergedAnnotations;\n import org.springframework.core.annotation.SynthesizedAnnotation;\n@@ -66,7 +67,7 @@ public static void registerAnnotation(RuntimeHints hints, Class<?> annotationTyp\n \t}\n \n \tprivate static void collectAliasedAnnotations(Set<Class<?>> seen, Set<Class<?>> types, Class<?> annotationType) {\n-\t\tif (seen.contains(annotationType)) {\n+\t\tif (seen.contains(annotationType) || Reflective.class.equals(annotationType)) {\n \t\t\treturn;\n \t\t}\n \t\tseen.add(annotationType);",
      "parent_sha": "86a85f558c7c319c6dbb651807dce7ebbe2e1f3e"
    }
  },
  {
    "oid": "a01f7cefaeca74ce73f4f0c7c604c7d93966fd29",
    "message": "Polish Javadoc for SpelNode",
    "date": "2024-04-19T12:27:11Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/a01f7cefaeca74ce73f4f0c7c604c7d93966fd29",
    "details": {
      "sha": "95fd5102626c48f6b2cbd0e34a5f17fecccc6f89",
      "filename": "spring-expression/src/main/java/org/springframework/expression/spel/SpelNode.java",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/a01f7cefaeca74ce73f4f0c7c604c7d93966fd29/spring-expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2FSpelNode.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/a01f7cefaeca74ce73f4f0c7c604c7d93966fd29/spring-expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2FSpelNode.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2FSpelNode.java?ref=a01f7cefaeca74ce73f4f0c7c604c7d93966fd29",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -21,7 +21,8 @@\n import org.springframework.lang.Nullable;\n \n /**\n- * Represents a node in the AST for a parsed expression.\n+ * Represents a node in the abstract syntax tree (AST) for a parsed Spring\n+ * Expression Language (SpEL) expression.\n  *\n  * @author Andy Clement\n  * @since 3.0\n@@ -33,6 +34,7 @@ public interface SpelNode {\n \t * and return the value.\n \t * @param expressionState the current expression state (includes the context)\n \t * @return the value of this node evaluated against the specified state\n+\t * @throws EvaluationException if any problem occurs evaluating the expression\n \t */\n \t@Nullable\n \tObject getValue(ExpressionState expressionState) throws EvaluationException;\n@@ -41,7 +43,8 @@ public interface SpelNode {\n \t * Evaluate the expression node in the context of the supplied expression state\n \t * and return the typed value.\n \t * @param expressionState the current expression state (includes the context)\n-\t * @return the type value of this node evaluated against the specified state\n+\t * @return the typed value of this node evaluated against the specified state\n+\t * @throws EvaluationException if any problem occurs evaluating the expression\n \t */\n \tTypedValue getTypedValue(ExpressionState expressionState) throws EvaluationException;\n \n@@ -74,12 +77,14 @@ public interface SpelNode {\n \t/**\n \t * Return the number of children under this node.\n \t * @return the child count\n+\t * @see #getChild(int)\n \t */\n \tint getChildCount();\n \n \t/**\n-\t * Helper method that returns a SpelNode rather than an Antlr Tree node.\n-\t * @return the child node cast to a SpelNode\n+\t * Return the n<sup>th</sup> child under this node.\n+\t * @return the child node\n+\t * @see #getChildCount()\n \t */\n \tSpelNode getChild(int index);\n ",
      "parent_sha": "ccf9ba86a035bd54acea70a5bff13ad9bb1838ba"
    }
  },
  {
    "oid": "309b3287195528ce2d96305195885be0b6a32513",
    "message": "Use computeIfAbsent in LocalVariableTableParameterNameDiscoverer\n\nCloses gh-23281",
    "date": "2019-07-12T09:44:10Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/309b3287195528ce2d96305195885be0b6a32513",
    "details": {
      "sha": "9f655c8e3d4ec0b4cbc4a6237a83319a881ace9e",
      "filename": "spring-core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java",
      "status": "modified",
      "additions": 2,
      "deletions": 10,
      "changes": 12,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/309b3287195528ce2d96305195885be0b6a32513/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcore%2FLocalVariableTableParameterNameDiscoverer.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/309b3287195528ce2d96305195885be0b6a32513/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcore%2FLocalVariableTableParameterNameDiscoverer.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcore%2FLocalVariableTableParameterNameDiscoverer.java?ref=309b3287195528ce2d96305195885be0b6a32513",
      "patch": "@@ -69,11 +69,7 @@ public class LocalVariableTableParameterNameDiscoverer implements ParameterNameD\n \tpublic String[] getParameterNames(Method method) {\n \t\tMethod originalMethod = BridgeMethodResolver.findBridgedMethod(method);\n \t\tClass<?> declaringClass = originalMethod.getDeclaringClass();\n-\t\tMap<Member, String[]> map = this.parameterNamesCache.get(declaringClass);\n-\t\tif (map == null) {\n-\t\t\tmap = inspectClass(declaringClass);\n-\t\t\tthis.parameterNamesCache.put(declaringClass, map);\n-\t\t}\n+\t\tMap<Member, String[]> map = this.parameterNamesCache.computeIfAbsent(declaringClass, this::inspectClass);\n \t\tif (map != NO_DEBUG_INFO_MAP) {\n \t\t\treturn map.get(originalMethod);\n \t\t}\n@@ -84,11 +80,7 @@ public String[] getParameterNames(Method method) {\n \t@Nullable\n \tpublic String[] getParameterNames(Constructor<?> ctor) {\n \t\tClass<?> declaringClass = ctor.getDeclaringClass();\n-\t\tMap<Member, String[]> map = this.parameterNamesCache.get(declaringClass);\n-\t\tif (map == null) {\n-\t\t\tmap = inspectClass(declaringClass);\n-\t\t\tthis.parameterNamesCache.put(declaringClass, map);\n-\t\t}\n+\t\tMap<Member, String[]> map = this.parameterNamesCache.computeIfAbsent(declaringClass, this::inspectClass);\n \t\tif (map != NO_DEBUG_INFO_MAP) {\n \t\t\treturn map.get(ctor);\n \t\t}",
      "parent_sha": "5b341f620a9404edcdd54bf73a715dfe2967ba03"
    }
  },
  {
    "oid": "e5e61dfa3f8bbddee5512d2054b59409b9c029af",
    "message": "Ignore scheduled task exceptions after shutdown\n\nIncludes suppression after logging, not propagating exceptions to the thread itself.\n\nCloses gh-32381\nSee gh-32298",
    "date": "2024-03-06T17:03:31Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/e5e61dfa3f8bbddee5512d2054b59409b9c029af",
    "details": {
      "sha": "a4b5a0a3c7579446e98e5ed7771517d1a523dd5c",
      "filename": "spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java",
      "status": "modified",
      "additions": 14,
      "deletions": 3,
      "changes": 17,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/e5e61dfa3f8bbddee5512d2054b59409b9c029af/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fscheduling%2Fconcurrent%2FSimpleAsyncTaskScheduler.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/e5e61dfa3f8bbddee5512d2054b59409b9c029af/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fscheduling%2Fconcurrent%2FSimpleAsyncTaskScheduler.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fscheduling%2Fconcurrent%2FSimpleAsyncTaskScheduler.java?ref=e5e61dfa3f8bbddee5512d2054b59409b9c029af",
      "patch": "@@ -27,6 +27,8 @@\n import java.util.concurrent.ScheduledThreadPoolExecutor;\n import java.util.concurrent.TimeUnit;\n \n+import org.apache.commons.logging.LogFactory;\n+\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ApplicationContextAware;\n import org.springframework.context.ApplicationListener;\n@@ -183,12 +185,21 @@ protected void doExecute(Runnable task) {\n \t\t}\n \t}\n \n+\tprivate Runnable taskOnSchedulerThread(Runnable task) {\n+\t\treturn new DelegatingErrorHandlingRunnable(task, TaskUtils.getDefaultErrorHandler(true));\n+\t}\n+\n \tprivate Runnable scheduledTask(Runnable task) {\n-\t\treturn () -> execute(new DelegatingErrorHandlingRunnable(task, TaskUtils.LOG_AND_PROPAGATE_ERROR_HANDLER));\n+\t\treturn () -> execute(new DelegatingErrorHandlingRunnable(task, this::shutdownAwareErrorHandler));\n \t}\n \n-\tprivate Runnable taskOnSchedulerThread(Runnable task) {\n-\t\treturn new DelegatingErrorHandlingRunnable(task, TaskUtils.getDefaultErrorHandler(true));\n+\tprivate void shutdownAwareErrorHandler(Throwable ex) {\n+\t\tif (this.scheduledExecutor.isTerminated()) {\n+\t\t\tLogFactory.getLog(getClass()).debug(\"Ignoring scheduled task exception after shutdown\", ex);\n+\t\t}\n+\t\telse {\n+\t\t\tTaskUtils.getDefaultErrorHandler(true).handleError(ex);\n+\t\t}\n \t}\n \n ",
      "parent_sha": "988f3630c4e83117feb140c13e7c2fdd17dc65b2"
    }
  },
  {
    "oid": "0ef4349c4d1e7caa5c4f7cb6c1dfcaea3ff960ef",
    "message": "Polish \"Replace with 'Integer.compare()'\"\n\nSee gh-23071",
    "date": "2019-06-03T06:31:57Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/0ef4349c4d1e7caa5c4f7cb6c1dfcaea3ff960ef",
    "details": {
      "sha": "1b47258d266da3ba711b45915af510baf6893068",
      "filename": "spring-core/src/main/java/org/springframework/util/comparator/InstanceComparator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/0ef4349c4d1e7caa5c4f7cb6c1dfcaea3ff960ef/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Futil%2Fcomparator%2FInstanceComparator.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/0ef4349c4d1e7caa5c4f7cb6c1dfcaea3ff960ef/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Futil%2Fcomparator%2FInstanceComparator.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Futil%2Fcomparator%2FInstanceComparator.java?ref=0ef4349c4d1e7caa5c4f7cb6c1dfcaea3ff960ef",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.",
      "parent_sha": "7ce379267231d560c83610d8d0f592e6b2f5a276"
    }
  },
  {
    "oid": "5e8e901aba9abc55a9f3dedd0b5d5a0d8841357f",
    "message": "FreeMarkerConfigurationFactory properly supports TemplateLoaders when recreating Configurations\n\nIssue: SPR-9389",
    "date": "2013-01-10T16:00:43Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/5e8e901aba9abc55a9f3dedd0b5d5a0d8841357f",
    "details": {
      "sha": "027f0f4a6bc8d601193c069f03cb7fe1672e6c5d",
      "filename": "spring-context-support/src/main/java/org/springframework/ui/freemarker/FreeMarkerConfigurationFactory.java",
      "status": "modified",
      "additions": 15,
      "deletions": 12,
      "changes": 27,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/5e8e901aba9abc55a9f3dedd0b5d5a0d8841357f/spring-context-support%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fui%2Ffreemarker%2FFreeMarkerConfigurationFactory.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/5e8e901aba9abc55a9f3dedd0b5d5a0d8841357f/spring-context-support%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fui%2Ffreemarker%2FFreeMarkerConfigurationFactory.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-context-support%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fui%2Ffreemarker%2FFreeMarkerConfigurationFactory.java?ref=5e8e901aba9abc55a9f3dedd0b5d5a0d8841357f",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -20,6 +20,7 @@\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n@@ -147,7 +148,7 @@ public void setDefaultEncoding(String defaultEncoding) {\n \t * @see #setPostTemplateLoaders\n \t */\n \t@Deprecated\n-\tpublic void setTemplateLoaders(TemplateLoader[] templateLoaders) {\n+\tpublic void setTemplateLoaders(TemplateLoader... templateLoaders) {\n \t\tif (templateLoaders != null) {\n \t\t\tthis.templateLoaders.addAll(Arrays.asList(templateLoaders));\n \t\t}\n@@ -164,7 +165,7 @@ public void setTemplateLoaders(TemplateLoader[] templateLoaders) {\n \t * @see #setTemplateLoaderPaths\n \t * @see #postProcessTemplateLoaders\n \t */\n-\tpublic void setPreTemplateLoaders(TemplateLoader[] preTemplateLoaders) {\n+\tpublic void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders) {\n \t\tthis.preTemplateLoaders = Arrays.asList(preTemplateLoaders);\n \t}\n \n@@ -179,7 +180,7 @@ public void setPreTemplateLoaders(TemplateLoader[] preTemplateLoaders) {\n \t * @see #setTemplateLoaderPaths\n \t * @see #postProcessTemplateLoaders\n \t */\n-\tpublic void setPostTemplateLoaders(TemplateLoader[] postTemplateLoaders) {\n+\tpublic void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders) {\n \t\tthis.postTemplateLoaders = Arrays.asList(postTemplateLoaders);\n \t}\n \n@@ -211,7 +212,7 @@ public void setTemplateLoaderPath(String templateLoaderPath) {\n \t * @see SpringTemplateLoader\n \t * @see #setTemplateLoaders\n \t */\n-\tpublic void setTemplateLoaderPaths(String[] templateLoaderPaths) {\n+\tpublic void setTemplateLoaderPaths(String... templateLoaderPaths) {\n \t\tthis.templateLoaderPaths = templateLoaderPaths;\n \t}\n \n@@ -229,7 +230,7 @@ public void setResourceLoader(ResourceLoader resourceLoader) {\n \t * Return the Spring ResourceLoader to use for loading FreeMarker template files.\n \t */\n \tprotected ResourceLoader getResourceLoader() {\n-\t\treturn resourceLoader;\n+\t\treturn this.resourceLoader;\n \t}\n \n \t/**\n@@ -252,7 +253,7 @@ public void setPreferFileSystemAccess(boolean preferFileSystemAccess) {\n \t * Return whether to prefer file system access for template loading.\n \t */\n \tprotected boolean isPreferFileSystemAccess() {\n-\t\treturn preferFileSystemAccess;\n+\t\treturn this.preferFileSystemAccess;\n \t}\n \n \n@@ -293,25 +294,27 @@ public Configuration createConfiguration() throws IOException, TemplateException\n \t\t\tconfig.setDefaultEncoding(this.defaultEncoding);\n \t\t}\n \n+\t\tList<TemplateLoader> templateLoaders = new LinkedList<TemplateLoader>(this.templateLoaders);\n+\n \t\t// Register template loaders that are supposed to kick in early.\n \t\tif (this.preTemplateLoaders != null) {\n-\t\t\tthis.templateLoaders.addAll(this.preTemplateLoaders);\n+\t\t\ttemplateLoaders.addAll(this.preTemplateLoaders);\n \t\t}\n \n \t\t// Register default template loaders.\n \t\tif (this.templateLoaderPaths != null) {\n \t\t\tfor (String path : this.templateLoaderPaths) {\n-\t\t\t\tthis.templateLoaders.add(getTemplateLoaderForPath(path));\n+\t\t\t\ttemplateLoaders.add(getTemplateLoaderForPath(path));\n \t\t\t}\n \t\t}\n-\t\tpostProcessTemplateLoaders(this.templateLoaders);\n+\t\tpostProcessTemplateLoaders(templateLoaders);\n \n \t\t// Register template loaders that are supposed to kick in late.\n \t\tif (this.postTemplateLoaders != null) {\n-\t\t\tthis.templateLoaders.addAll(this.postTemplateLoaders);\n+\t\t\ttemplateLoaders.addAll(this.postTemplateLoaders);\n \t\t}\n \n-\t\tTemplateLoader loader = getAggregateTemplateLoader(this.templateLoaders);\n+\t\tTemplateLoader loader = getAggregateTemplateLoader(templateLoaders);\n \t\tif (loader != null) {\n \t\t\tconfig.setTemplateLoader(loader);\n \t\t}",
      "parent_sha": "f8a7cf9f515f0d77fa515cec6af22ad1c8f2a58b"
    }
  },
  {
    "oid": "90309a57d9de031ea358176fd629201213b5325e",
    "message": "Made GMT the default Locale...",
    "date": "2008-08-18T00:21:00Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/90309a57d9de031ea358176fd629201213b5325e",
    "details": {
      "sha": "15de2afef7b3e217e01b08802c1e835b9d23b274",
      "filename": "org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/DateLiteral.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/90309a57d9de031ea358176fd629201213b5325e/org.springframework.expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2Fast%2FDateLiteral.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/90309a57d9de031ea358176fd629201213b5325e/org.springframework.expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2Fast%2FDateLiteral.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2Fast%2FDateLiteral.java?ref=90309a57d9de031ea358176fd629201213b5325e",
      "patch": "@@ -19,12 +19,13 @@\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n+import java.util.Locale;\n \n import org.antlr.runtime.Token;\n import org.springframework.expression.EvaluationException;\n+import org.springframework.expression.spel.ExpressionState;\n import org.springframework.expression.spel.SpelException;\n import org.springframework.expression.spel.SpelMessages;\n-import org.springframework.expression.spel.ExpressionState;\n \n /**\n  * Represents a date literal value in an expression (a java.util.Date object).\n@@ -47,7 +48,9 @@ public Date getValue(ExpressionState state) throws EvaluationException {\n \t\t\tif (getChildCount() > 1) {\n \t\t\t\tformatter = new SimpleDateFormat((String) getChild(1).getValue(state));\n \t\t\t} else {\n-\t\t\t\tformatter = DateFormat.getDateTimeInstance();\n+\t\t\t\t// http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html\n+\t\t\t\t// this is something of this format: \"Wed, 4 Jul 2001 12:08:56 GMT\"\n+\t\t\t\tformatter = new SimpleDateFormat(\"EEE, d MMM yyyy HH:mm:ss z\", Locale.UK);\n \t\t\t}\n \t\t}\n \t\tString valueToParse = (String) getChild(0).getValue(state);",
      "parent_sha": "b9aa8552e063a9a75404663b3b9ccc4f9dd85c32"
    }
  },
  {
    "oid": "43d72e2079d94edd6a8bcd26e59ed7ef2c4ca996",
    "message": "Restored capacity check before trying output stream resize\n\nIssue: SPR-13671",
    "date": "2015-11-11T23:47:33Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/43d72e2079d94edd6a8bcd26e59ed7ef2c4ca996",
    "details": {
      "sha": "ee0643f82dae69cc4e7f924f91fad5a82be4d973",
      "filename": "spring-web/src/main/java/org/springframework/web/util/ContentCachingResponseWrapper.java",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/43d72e2079d94edd6a8bcd26e59ed7ef2c4ca996/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Futil%2FContentCachingResponseWrapper.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/43d72e2079d94edd6a8bcd26e59ed7ef2c4ca996/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Futil%2FContentCachingResponseWrapper.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Futil%2FContentCachingResponseWrapper.java?ref=43d72e2079d94edd6a8bcd26e59ed7ef2c4ca996",
      "patch": "@@ -123,7 +123,9 @@ public PrintWriter getWriter() throws IOException {\n \n \t@Override\n \tpublic void setContentLength(int len) {\n-\t\tthis.content.resize(len);\n+\t\tif (len > this.content.size()) {\n+\t\t\tthis.content.resize(len);\n+\t\t}\n \t\tthis.contentLength = len;\n \t}\n \n@@ -134,13 +136,17 @@ public void setContentLengthLong(long len) {\n \t\t\t\t\tInteger.MAX_VALUE + \"): \" + len);\n \t\t}\n \t\tint lenInt = (int) len;\n-\t\tthis.content.resize(lenInt);\n+\t\tif (lenInt > this.content.size()) {\n+\t\t\tthis.content.resize(lenInt);\n+\t\t}\n \t\tthis.contentLength = lenInt;\n \t}\n \n \t@Override\n \tpublic void setBufferSize(int size) {\n-\t\tthis.content.resize(size);\n+\t\tif (size > this.content.size()) {\n+\t\t\tthis.content.resize(size);\n+\t\t}\n \t}\n \n \t@Override",
      "parent_sha": "e7073474740283761bb2e9f823d6fc9e9f22eb1d"
    }
  },
  {
    "oid": "f9f8f2d89e260e53911a6681ecb94f193c69b314",
    "message": "Polishing",
    "date": "2022-11-22T15:27:45Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/f9f8f2d89e260e53911a6681ecb94f193c69b314",
    "details": {
      "sha": "1083de70fd0d534af1ddd82c3dfc7b777b3dde22",
      "filename": "spring-context/src/test/java/org/springframework/aop/aspectj/DeclarationOrderIndependenceTests.java",
      "status": "modified",
      "additions": 9,
      "deletions": 11,
      "changes": 20,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/f9f8f2d89e260e53911a6681ecb94f193c69b314/spring-context%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Faop%2Faspectj%2FDeclarationOrderIndependenceTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/f9f8f2d89e260e53911a6681ecb94f193c69b314/spring-context%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Faop%2Faspectj%2FDeclarationOrderIndependenceTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-context%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Faop%2Faspectj%2FDeclarationOrderIndependenceTests.java?ref=f9f8f2d89e260e53911a6681ecb94f193c69b314",
      "patch": "@@ -44,8 +44,8 @@ class DeclarationOrderIndependenceTests {\n \t@BeforeEach\n \tvoid setup() {\n \t\tthis.ctx = new ClassPathXmlApplicationContext(getClass().getSimpleName() + \".xml\", getClass());\n-\t\taspect = (TopsyTurvyAspect) ctx.getBean(\"topsyTurvyAspect\");\n-\t\ttarget = (TopsyTurvyTarget) ctx.getBean(\"topsyTurvyTarget\");\n+\t\taspect = ctx.getBean(TopsyTurvyAspect.class);\n+\t\ttarget = ctx.getBean(TopsyTurvyTarget.class);\n \t}\n \n \t@AfterEach\n@@ -55,35 +55,33 @@ void tearDown() {\n \n \n \t@Test\n-\tvoid testTargetIsSerializable() {\n-\t\tboolean condition = this.target instanceof Serializable;\n-\t\tassertThat(condition).as(\"target bean is serializable\").isTrue();\n+\tvoid targetIsSerializable() {\n+\t\tassertThat(this.target).isInstanceOf(Serializable.class);\n \t}\n \n \t@Test\n-\tvoid testTargetIsBeanNameAware() {\n-\t\tboolean condition = this.target instanceof BeanNameAware;\n-\t\tassertThat(condition).as(\"target bean is bean name aware\").isTrue();\n+\tvoid targetIsBeanNameAware() {\n+\t\tassertThat(this.target).isInstanceOf(BeanNameAware.class);\n \t}\n \n \t@Test\n-\tvoid testBeforeAdviceFiringOk() {\n+\tvoid beforeAdviceFiringOk() {\n \t\tAspectCollaborator collab = new AspectCollaborator();\n \t\tthis.aspect.setCollaborator(collab);\n \t\tthis.target.doSomething();\n \t\tassertThat(collab.beforeFired).as(\"before advice fired\").isTrue();\n \t}\n \n \t@Test\n-\tvoid testAroundAdviceFiringOk() {\n+\tvoid aroundAdviceFiringOk() {\n \t\tAspectCollaborator collab = new AspectCollaborator();\n \t\tthis.aspect.setCollaborator(collab);\n \t\tthis.target.getX();\n \t\tassertThat(collab.aroundFired).as(\"around advice fired\").isTrue();\n \t}\n \n \t@Test\n-\tvoid testAfterReturningFiringOk() {\n+\tvoid afterReturningFiringOk() {\n \t\tAspectCollaborator collab = new AspectCollaborator();\n \t\tthis.aspect.setCollaborator(collab);\n \t\tthis.target.getX();",
      "parent_sha": "43f8d9e084716ccce46c11c36fa4a8fd6373ba3f"
    }
  },
  {
    "oid": "403e1f2505335bc6f5a17546a838a15f53ca2e3a",
    "message": "Update copyright year of changed file\n\nSee gh-27102",
    "date": "2021-07-02T06:11:41Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/403e1f2505335bc6f5a17546a838a15f53ca2e3a",
    "details": {
      "sha": "8ec11fabecb75c680faf5b087318ac5e7af2765d",
      "filename": "spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveConstructorResolver.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/403e1f2505335bc6f5a17546a838a15f53ca2e3a/spring-expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2Fsupport%2FReflectiveConstructorResolver.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/403e1f2505335bc6f5a17546a838a15f53ca2e3a/spring-expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2Fsupport%2FReflectiveConstructorResolver.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2Fsupport%2FReflectiveConstructorResolver.java?ref=403e1f2505335bc6f5a17546a838a15f53ca2e3a",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2019 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.",
      "parent_sha": "f39c6d36c70fbbbbb0323fabf7a1ee6d1c0f4d7c"
    }
  },
  {
    "oid": "2a47751fcd09f0db0a46fa00f1e089744073c966",
    "message": "Defensively handle loadClass null result in BeanUtils.findEditorByConvention\n\nCloses gh-26252",
    "date": "2020-12-10T15:24:32Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/2a47751fcd09f0db0a46fa00f1e089744073c966",
    "details": {
      "sha": "cabe6d27c2853a533d4c231ba003f732c050705d",
      "filename": "spring-beans/src/main/java/org/springframework/beans/BeanUtils.java",
      "status": "modified",
      "additions": 20,
      "deletions": 13,
      "changes": 33,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/2a47751fcd09f0db0a46fa00f1e089744073c966/spring-beans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbeans%2FBeanUtils.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/2a47751fcd09f0db0a46fa00f1e089744073c966/spring-beans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbeans%2FBeanUtils.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-beans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbeans%2FBeanUtils.java?ref=2a47751fcd09f0db0a46fa00f1e089744073c966",
      "patch": "@@ -543,6 +543,7 @@ public static PropertyEditor findEditorByConvention(@Nullable Class<?> targetTyp\n \t\tif (targetType == null || targetType.isArray() || unknownEditorTypes.contains(targetType)) {\n \t\t\treturn null;\n \t\t}\n+\n \t\tClassLoader cl = targetType.getClassLoader();\n \t\tif (cl == null) {\n \t\t\ttry {\n@@ -559,28 +560,34 @@ public static PropertyEditor findEditorByConvention(@Nullable Class<?> targetTyp\n \t\t\t\treturn null;\n \t\t\t}\n \t\t}\n+\n \t\tString targetTypeName = targetType.getName();\n \t\tString editorName = targetTypeName + \"Editor\";\n \t\ttry {\n \t\t\tClass<?> editorClass = cl.loadClass(editorName);\n-\t\t\tif (!PropertyEditor.class.isAssignableFrom(editorClass)) {\n-\t\t\t\tif (logger.isInfoEnabled()) {\n-\t\t\t\t\tlogger.info(\"Editor class [\" + editorName +\n-\t\t\t\t\t\t\t\"] does not implement [java.beans.PropertyEditor] interface\");\n+\t\t\tif (editorClass != null) {\n+\t\t\t\tif (!PropertyEditor.class.isAssignableFrom(editorClass)) {\n+\t\t\t\t\tif (logger.isInfoEnabled()) {\n+\t\t\t\t\t\tlogger.info(\"Editor class [\" + editorName +\n+\t\t\t\t\t\t\t\t\"] does not implement [java.beans.PropertyEditor] interface\");\n+\t\t\t\t\t}\n+\t\t\t\t\tunknownEditorTypes.add(targetType);\n+\t\t\t\t\treturn null;\n \t\t\t\t}\n-\t\t\t\tunknownEditorTypes.add(targetType);\n-\t\t\t\treturn null;\n+\t\t\t\treturn (PropertyEditor) instantiateClass(editorClass);\n \t\t\t}\n-\t\t\treturn (PropertyEditor) instantiateClass(editorClass);\n+\t\t\t// Misbehaving ClassLoader returned null instead of ClassNotFoundException\n+\t\t\t// - fall back to unknown editor type registration below\n \t\t}\n \t\tcatch (ClassNotFoundException ex) {\n-\t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\tlogger.trace(\"No property editor [\" + editorName + \"] found for type \" +\n-\t\t\t\t\t\ttargetTypeName + \" according to 'Editor' suffix convention\");\n-\t\t\t}\n-\t\t\tunknownEditorTypes.add(targetType);\n-\t\t\treturn null;\n+\t\t\t// Ignore - fall back to unknown editor type registration below\n \t\t}\n+\t\tif (logger.isTraceEnabled()) {\n+\t\t\tlogger.trace(\"No property editor [\" + editorName + \"] found for type \" +\n+\t\t\t\t\ttargetTypeName + \" according to 'Editor' suffix convention\");\n+\t\t}\n+\t\tunknownEditorTypes.add(targetType);\n+\t\treturn null;\n \t}\n \n \t/**",
      "parent_sha": "06e352822abc1eb0f5858ca9e79e38f8958e3c63"
    }
  },
  {
    "oid": "c5590ae9e6a3d75feae96f3015a65462c67dbcf8",
    "message": "Log column type for limited support message in getResultSetValue\n\nCloses gh-32601",
    "date": "2024-04-09T14:14:45Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/c5590ae9e6a3d75feae96f3015a65462c67dbcf8",
    "details": {
      "sha": "185e210a86ecb70c05d28be2b0048f6fdf9c63fe",
      "filename": "spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/c5590ae9e6a3d75feae96f3015a65462c67dbcf8/spring-jdbc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fjdbc%2Fsupport%2FJdbcUtils.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/c5590ae9e6a3d75feae96f3015a65462c67dbcf8/spring-jdbc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fjdbc%2Fsupport%2FJdbcUtils.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-jdbc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fjdbc%2Fsupport%2FJdbcUtils.java?ref=c5590ae9e6a3d75feae96f3015a65462c67dbcf8",
      "patch": "@@ -229,14 +229,14 @@ else if (obj instanceof Number number) {\n \t\t\ttry {\n \t\t\t\treturn rs.getObject(index, requiredType);\n \t\t\t}\n-\t\t\tcatch (AbstractMethodError err) {\n-\t\t\t\tlogger.debug(\"JDBC driver does not implement JDBC 4.1 'getObject(int, Class)' method\", err);\n-\t\t\t}\n-\t\t\tcatch (SQLFeatureNotSupportedException ex) {\n+\t\t\tcatch (SQLFeatureNotSupportedException | AbstractMethodError ex) {\n \t\t\t\tlogger.debug(\"JDBC driver does not support JDBC 4.1 'getObject(int, Class)' method\", ex);\n \t\t\t}\n \t\t\tcatch (SQLException ex) {\n-\t\t\t\tlogger.debug(\"JDBC driver has limited support for JDBC 4.1 'getObject(int, Class)' method\", ex);\n+\t\t\t\tif (logger.isDebugEnabled()) {\n+\t\t\t\t\tlogger.debug(\"JDBC driver has limited support for 'getObject(int, Class)' with column type: \" +\n+\t\t\t\t\t\t\trequiredType.getName(), ex);\n+\t\t\t\t}\n \t\t\t}\n \n \t\t\t// Corresponding SQL types for JSR-310 / Joda-Time types, left up",
      "parent_sha": "39b551c3346d6092adeee7c0d5898ecd357b63a9"
    }
  },
  {
    "oid": "56d2c9daf513e130fe92d78bb93d68054c1fa639",
    "message": "component-scan's scoped-proxy attribute applies to scope-annotated singleton beans as well (SPR-6683)",
    "date": "2010-02-01T16:30:21Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/56d2c9daf513e130fe92d78bb93d68054c1fa639",
    "details": {
      "sha": "1c201527b94a046718bdca75f4b091fa6e542621",
      "filename": "org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationScopeMetadataResolver.java",
      "status": "modified",
      "additions": 6,
      "deletions": 9,
      "changes": 15,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/56d2c9daf513e130fe92d78bb93d68054c1fa639/org.springframework.context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcontext%2Fannotation%2FAnnotationScopeMetadataResolver.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/56d2c9daf513e130fe92d78bb93d68054c1fa639/org.springframework.context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcontext%2Fannotation%2FAnnotationScopeMetadataResolver.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcontext%2Fannotation%2FAnnotationScopeMetadataResolver.java?ref=56d2c9daf513e130fe92d78bb93d68054c1fa639",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -78,16 +78,13 @@ public ScopeMetadata resolveScopeMetadata(BeanDefinition definition) {\n \t\t\tAnnotatedBeanDefinition annDef = (AnnotatedBeanDefinition) definition;\n \t\t\tMap<String, Object> attributes =\n \t\t\t\t\tannDef.getMetadata().getAnnotationAttributes(this.scopeAnnotationType.getName());\n-\t\t\tScopedProxyMode annMode = null;\n \t\t\tif (attributes != null) {\n \t\t\t\tmetadata.setScopeName((String) attributes.get(\"value\"));\n-\t\t\t\tannMode = (ScopedProxyMode) attributes.get(\"proxyMode\");\n-\t\t\t}\n-\t\t\tif (annMode != null && annMode != ScopedProxyMode.DEFAULT) {\n-\t\t\t\tmetadata.setScopedProxyMode(annMode);\n-\t\t\t}\n-\t\t\telse if (!metadata.getScopeName().equals(BeanDefinition.SCOPE_SINGLETON)) {\n-\t\t\t\tmetadata.setScopedProxyMode(this.defaultProxyMode);\n+\t\t\t\tScopedProxyMode proxyMode = (ScopedProxyMode) attributes.get(\"proxyMode\");\n+\t\t\t\tif (proxyMode == null || proxyMode == ScopedProxyMode.DEFAULT) {\n+\t\t\t\t\tproxyMode = this.defaultProxyMode;\n+\t\t\t\t}\n+\t\t\t\tmetadata.setScopedProxyMode(proxyMode);\n \t\t\t}\n \t\t}\n \t\treturn metadata;",
      "parent_sha": "208c2d9c8b62b296b61094e89e238195d3d14570"
    }
  },
  {
    "oid": "11de70ed08274730a5fc818c1ad043d21d410c0b",
    "message": "Update Javadoc for SimpleTriggerFactoryBean.setMisfireInstructionName()\n\norg.quartz.Trigger#MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY is also\nsupported.",
    "date": "2023-07-16T12:34:42Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/11de70ed08274730a5fc818c1ad043d21d410c0b",
    "details": {
      "sha": "05cefd1449c97a003a4dd88d6952aa7755ff02ed",
      "filename": "spring-context-support/src/main/java/org/springframework/scheduling/quartz/SimpleTriggerFactoryBean.java",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/11de70ed08274730a5fc818c1ad043d21d410c0b/spring-context-support%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fscheduling%2Fquartz%2FSimpleTriggerFactoryBean.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/11de70ed08274730a5fc818c1ad043d21d410c0b/spring-context-support%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fscheduling%2Fquartz%2FSimpleTriggerFactoryBean.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-context-support%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fscheduling%2Fquartz%2FSimpleTriggerFactoryBean.java?ref=11de70ed08274730a5fc818c1ad043d21d410c0b",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2023 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -184,22 +184,24 @@ public void setPriority(int priority) {\n \t}\n \n \t/**\n-\t * Specify a misfire instruction for this trigger.\n+\t * Specify the misfire instruction for this trigger.\n \t */\n \tpublic void setMisfireInstruction(int misfireInstruction) {\n \t\tthis.misfireInstruction = misfireInstruction;\n \t}\n \n \t/**\n-\t * Set the misfire instruction via the name of the corresponding\n-\t * constant in the {@link org.quartz.SimpleTrigger} class.\n-\t * Default is {@code MISFIRE_INSTRUCTION_SMART_POLICY}.\n+\t * Set the misfire instruction for this trigger via the name of the corresponding\n+\t * constant in the {@link org.quartz.Trigger} and {@link org.quartz.SimpleTrigger}\n+\t * classes.\n+\t * <p>Default is {@code MISFIRE_INSTRUCTION_SMART_POLICY}.\n+\t * @see org.quartz.Trigger#MISFIRE_INSTRUCTION_SMART_POLICY\n+\t * @see org.quartz.Trigger#MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY\n \t * @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_FIRE_NOW\n \t * @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT\n \t * @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT\n \t * @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT\n \t * @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT\n-\t * @see org.quartz.Trigger#MISFIRE_INSTRUCTION_SMART_POLICY\n \t */\n \tpublic void setMisfireInstructionName(String constantName) {\n \t\tthis.misfireInstruction = constants.asNumber(constantName).intValue();",
      "parent_sha": "9283fd2162d16d2654a9513e928a5ea77977e3bb"
    }
  },
  {
    "oid": "40cd277b7e26e135de71b80bec757b2022641815",
    "message": "ReloadableResourceBundleMessageSource prevents accidental exposure of incomplete holder\n\nIssue: SPR-12177",
    "date": "2014-09-17T13:00:22Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/40cd277b7e26e135de71b80bec757b2022641815",
    "details": {
      "sha": "3f650e1447584d1e2536ef09f6f8d85025c3253b",
      "filename": "spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/40cd277b7e26e135de71b80bec757b2022641815/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcontext%2Fsupport%2FReloadableResourceBundleMessageSource.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/40cd277b7e26e135de71b80bec757b2022641815/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcontext%2Fsupport%2FReloadableResourceBundleMessageSource.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcontext%2Fsupport%2FReloadableResourceBundleMessageSource.java?ref=40cd277b7e26e135de71b80bec757b2022641815",
      "patch": "@@ -451,11 +451,11 @@ protected List<String> calculateFilenamesForLocale(String basename, Locale local\n \t */\n \tprotected PropertiesHolder getProperties(String filename) {\n \t\tPropertiesHolder propHolder = this.cachedProperties.get(filename);\n-\t\tlong originalTimestamp = -1;\n+\t\tlong originalTimestamp = -2;\n \n \t\tif (propHolder != null) {\n \t\t\toriginalTimestamp = propHolder.getRefreshTimestamp();\n-\t\t\tif (originalTimestamp < 0 || originalTimestamp > System.currentTimeMillis() - this.cacheMillis) {\n+\t\t\tif (originalTimestamp == -1 || originalTimestamp > System.currentTimeMillis() - this.cacheMillis) {\n \t\t\t\t// Up to date\n \t\t\t\treturn propHolder;\n \t\t\t}",
      "parent_sha": "0cf472b111c268e9771e899f65232640a3e335bc"
    }
  },
  {
    "oid": "92308ac83f976b04d5a639cc8260999dbf799edb",
    "message": "Polishing in UrlParser",
    "date": "2024-10-07T17:35:02Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/92308ac83f976b04d5a639cc8260999dbf799edb",
    "details": {
      "sha": "8c0667e482eaae5fcc0140f02cedcefd46e8bf6f",
      "filename": "spring-web/src/main/java/org/springframework/web/util/UrlParser.java",
      "status": "modified",
      "additions": 377,
      "deletions": 281,
      "changes": 658,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/92308ac83f976b04d5a639cc8260999dbf799edb/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Futil%2FUrlParser.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/92308ac83f976b04d5a639cc8260999dbf799edb/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Futil%2FUrlParser.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Futil%2FUrlParser.java?ref=92308ac83f976b04d5a639cc8260999dbf799edb",
      "patch": "@@ -36,12 +36,12 @@\n import org.springframework.util.Assert;\n \n /**\n- * Implementation of the URL parser from the Living URL standard.\n+ * Implementation of the\n+ * <a href=\"https://url.spec.whatwg.org/#url-parsing\">URL parsing</a> algorithm\n+ * of the WhatWG URL Living standard.\n  *\n- * <p>All comments in this class refer to parts of the\n- * <a href=\"https://url.spec.whatwg.org/#url-parsing\">parsing algorithm</a>.\n- * This implementation differs from the one defined in the specification in\n- * these areas:\n+ * <p>Comments in this class correlate to the parsing algorithm.\n+ * The implementation differs from the spec in the following ways:\n  * <ul>\n  * <li>Support for URI templates has been added, through the\n  * {@link State#URL_TEMPLATE} state</li>\n@@ -55,16 +55,15 @@\n  *\n  * @author Arjen Poutsma\n  * @since 6.2\n- * @see <a href=\"https://url.spec.whatwg.org/#url-parsing\">URL parsing</a>\n  */\n final class UrlParser {\n \n+\tprivate static final Log logger = LogFactory.getLog(UrlParser.class);\n+\n \tprivate static final int EOF = -1;\n \n \tprivate static final int MAX_PORT = 65535;\n \n-\tprivate static final Log logger = LogFactory.getLog(UrlParser.class);\n-\n \n \tprivate final StringBuilder input;\n \n@@ -99,7 +98,10 @@ final class UrlParser {\n \tprivate boolean stopMainLoop = false;\n \n \n-\tprivate UrlParser(String input, @Nullable UrlRecord base, @Nullable Charset encoding, @Nullable Consumer<String> validationErrorHandler) {\n+\tprivate UrlParser(\n+\t\t\tString input, @Nullable UrlRecord base, @Nullable Charset encoding,\n+\t\t\t@Nullable Consumer<String> validationErrorHandler) {\n+\n \t\tthis.input = new StringBuilder(input);\n \t\tthis.base = base;\n \t\tthis.encoding = encoding;\n@@ -135,10 +137,8 @@ public static UrlRecord parse(String input, @Nullable UrlRecord base,\n \n \t/**\n \t * The basic URL parser takes a scalar value string input, with an optional\n-\t * null or base URL base (default null), an optional encoding\n-\t * {@code encoding}\n-\t * (default UTF-8), an optional URL {@code url}, and an optional state\n-\t * override {@code state override}.\n+\t * null or base URL base (default null), an optional encoding (default UTF-8),\n+\t * an optional UrlRecord, and an optional state override.\n \t */\n \tprivate UrlRecord basicUrlParser(@Nullable UrlRecord url, @Nullable State stateOverride) {\n \t\t// If url is not given:\n@@ -152,7 +152,7 @@ private UrlRecord basicUrlParser(@Nullable UrlRecord url, @Nullable State stateO\n \t\t}\n \n \t\t// Let state be state override if given, or scheme start state otherwise.\n-\t\tthis.state = stateOverride != null ? stateOverride : State.SCHEME_START;\n+\t\tthis.state = (stateOverride != null ? stateOverride : State.SCHEME_START);\n \t\tthis.stateOverride = stateOverride;\n \n \t\t// Keep running the following state machine by switching on state.\n@@ -167,8 +167,8 @@ private UrlRecord basicUrlParser(@Nullable UrlRecord url, @Nullable State stateO\n \t\t\t\tc = EOF;\n \t\t\t}\n \t\t\tif (logger.isTraceEnabled()) {\n-\t\t\t\tString cStr = c != EOF ? Character.toString(c) : \"EOF\";\n-\t\t\t\tlogger.trace(\"current: \" + cStr + \" ptr: \" + this.pointer + \" Buffer: \" + this.buffer + \" State: \" + this.state);\n+\t\t\t\tlogger.trace(\"current: \" + (c != EOF ? Character.toString(c) : \"EOF\") +\n+\t\t\t\t\t\t\" ptr: \" + this.pointer + \" Buffer: \" + this.buffer + \" State: \" + this.state);\n \t\t\t}\n \t\t\tthis.state.handle(c, url, this);\n \t\t\tthis.pointer++;\n@@ -180,12 +180,12 @@ void sanitizeInput(boolean removeC0ControlOrSpace) {\n \t\tboolean strip = true;\n \t\tfor (int i = 0; i < this.input.length(); i++) {\n \t\t\tint c = this.input.codePointAt(i);\n-\t\t\tboolean isSpaceOrC0 = c == ' ' || isC0Control(c);\n-\t\t\tboolean isTabOrNL = c == '\\t' || isNewline(c);\n+\t\t\tboolean isSpaceOrC0 = (c == ' ' || isC0Control(c));\n+\t\t\tboolean isTabOrNL = (c == '\\t' || isNewline(c));\n \t\t\tif ((strip && isSpaceOrC0) || isTabOrNL) {\n \t\t\t\tif (validate()) {\n-\t\t\t\t\t// If input contains any leading (or trailing) C0 control or space, invalid-URL-unit validation error.\n-\t\t\t\t\t// If input contains any ASCII tab or newline, invalid-URL-unit validation error.\n+\t\t\t\t\t// If input contains leading (or trailing) C0 control or space, invalid-URL-unit validation error.\n+\t\t\t\t\t// If input contains ASCII tab or newline, invalid-URL-unit validation error.\n \t\t\t\t\tvalidationError(\"Code point \\\"\" + c + \"\\\" is not a URL unit.\");\n \t\t\t\t}\n \t\t\t\t// Remove any leading C0 control or space from input.\n@@ -207,7 +207,7 @@ else if (isTabOrNL) {\n \t\t\t\tint c = this.input.codePointAt(i);\n \t\t\t\tif (c == ' ' || isC0Control(c)) {\n \t\t\t\t\tif (validate()) {\n-\t\t\t\t\t\t// If input contains any (leading or) trailing C0 control or space, invalid-URL-unit validation error.\n+\t\t\t\t\t\t// If input contains (leading or) trailing C0 control or space, invalid-URL-unit validation error.\n \t\t\t\t\t\tvalidationError(\"Code point \\\"\" + c + \"\\\" is not a URL unit.\");\n \t\t\t\t\t}\n \t\t\t\t\t// Remove any trailing C0 control or space from input.\n@@ -229,7 +229,8 @@ private void setState(State newState) {\n \t\t\telse {\n \t\t\t\tc = \"EOF\";\n \t\t\t}\n-\t\t\tlogger.trace(\"Changing state from \" + this.state + \" to \" + newState + \" (cur: \" + c + \" prev: \" + this.previousState + \")\");\n+\t\t\tlogger.trace(\"Changing state from \" + this.state + \" to \" +\n+\t\t\t\t\tnewState + \" (cur: \" + c + \" prev: \" + this.previousState + \")\");\n \t\t}\n \t\t// EXTRA: we keep the previous state, to ensure that the parser can escape from malformed URI templates\n \t\tthis.previousState = this.state;\n@@ -254,7 +255,8 @@ private static LinkedList<String> strictSplit(String input, int delimiter) {\n \t\t\t// Advance position by 1.\n \t\t\tposition++;\n \t\t\tdelIdx = input.indexOf(delimiter, position);\n-\t\t\t// Let token be the result of collecting a sequence of code points that are not equal to delimiter from input, given position.\n+\t\t\t// Let token be the result of collecting a sequence of code points\n+\t\t\t// that are not equal to delimiter from input, given position.\n \t\t\ttoken = (delIdx != EOF) ? input.substring(position, delIdx) : input.substring(position);\n \t\t\tposition = delIdx;\n \t\t\t// Append token to tokens.\n@@ -264,7 +266,9 @@ private static LinkedList<String> strictSplit(String input, int delimiter) {\n \t}\n \n \tprivate static String domainToAscii(String domain, boolean beStrict) {\n-\t\t// If beStrict is false, domain is an ASCII string, and strictly splitting domain on U+002E (.) does not produce any item that starts with an ASCII case-insensitive match for \"xn--\", this step is equivalent to ASCII lowercasing domain.\n+\t\t// If beStrict is false, domain is an ASCII string, and strictly splitting domain on U+002E (.)\n+\t\t// does not produce any item that starts with an ASCII case-insensitive match for \"xn--\",\n+\t\t// this step is equivalent to ASCII lowercasing domain.\n \t\tif (!beStrict && containsOnlyAscii(domain)) {\n \t\t\tint dotIdx = domain.indexOf('.');\n \t\t\tboolean onlyLowerCase = true;\n@@ -288,17 +292,22 @@ private static String domainToAscii(String domain, boolean beStrict) {\n \t\t\t\treturn domain.toLowerCase(Locale.ENGLISH);\n \t\t\t}\n \t\t}\n-\t\t// Let result be the result of running Unicode ToASCII (https://www.unicode.org/reports/tr46/#ToASCII) with domain_name set to domain, UseSTD3ASCIIRules set to beStrict, CheckHyphens set to false, CheckBidi set to true, CheckJoiners set to true, Transitional_Processing set to false, and VerifyDnsLength set to beStrict. [UTS46]\n+\t\t// Let result be the result of running Unicode ToASCII (https://www.unicode.org/reports/tr46/#ToASCII)\n+\t\t// with domain_name set to domain, UseSTD3ASCIIRules set to beStrict, CheckHyphens set to false,\n+\t\t// CheckBidi set to true, CheckJoiners set to true, Transitional_Processing set to false,\n+\t\t// and VerifyDnsLength set to beStrict. [UTS46]\n \t\tint flag = 0;\n \t\tif (beStrict) {\n \t\t\tflag |= IDN.USE_STD3_ASCII_RULES;\n \t\t}\n-\t\t// Implementation note: implementing Unicode ToASCII is beyond the scope of this parser, we use java.net.IDN.toASCII\n+\t\t// Implementation note: implementing Unicode ToASCII is beyond the scope of this parser,\n+\t\t// we use java.net.IDN.toASCII\n \t\ttry {\n \t\t\treturn IDN.toASCII(domain, flag);\n \t\t}\n \t\tcatch (IllegalArgumentException ex) {\n-\t\t\tthrow new InvalidUrlException(\"Could not convert \\\"\" + domain + \"\\\" to ASCII: \" + ex.getMessage(), ex);\n+\t\t\tthrow new InvalidUrlException(\n+\t\t\t\t\t\"Could not convert \\\"\" + domain + \"\\\" to ASCII: \" + ex.getMessage(), ex);\n \t\t}\n \t}\n \n@@ -337,57 +346,61 @@ private void failure(@Nullable String additionalInfo) {\n \t * The C0 control percent-encode set are the C0 controls and all code points greater than U+007E (~).\n \t */\n \tprivate static boolean c0ControlPercentEncodeSet(int ch) {\n-\t\treturn isC0Control(ch) || Integer.compareUnsigned(ch, '~') > 0;\n+\t\treturn (isC0Control(ch) || Integer.compareUnsigned(ch, '~') > 0);\n \t}\n \n \t/**\n-\t * The fragment percent-encode set is the C0 control percent-encode set and U+0020 SPACE, U+0022 (\"), U+003C (<), U+003E (>), and U+0060 (`).\n+\t * The fragment percent-encode set is the C0 control percent-encode set and\n+\t * U+0020 SPACE, U+0022 (\"), U+003C (<), U+003E (>), and U+0060 (`).\n \t */\n \tprivate static boolean fragmentPercentEncodeSet(int ch) {\n-\t\treturn c0ControlPercentEncodeSet(ch) || ch == ' ' || ch == '\"' || ch == '<' || ch == '>' || ch == '`';\n+\t\treturn (c0ControlPercentEncodeSet(ch) || ch == ' ' || ch == '\"' || ch == '<' || ch == '>' || ch == '`');\n \t}\n \n \t/**\n-\t * The query percent-encode set is the C0 control percent-encode set and U+0020 SPACE, U+0022 (\"), U+0023 (#), U+003C (<), and U+003E (>).\n+\t * The query percent-encode set is the C0 control percent-encode set and\n+\t * U+0020 SPACE, U+0022 (\"), U+0023 (#), U+003C (<), and U+003E (>).\n \t */\n \tprivate static boolean queryPercentEncodeSet(int ch) {\n-\t\treturn c0ControlPercentEncodeSet(ch) || ch == ' ' || ch == '\"' || ch == '#' || ch == '<' || ch == '>';\n+\t\treturn (c0ControlPercentEncodeSet(ch) || ch == ' ' || ch == '\"' || ch == '#' || ch == '<' || ch == '>');\n \t}\n \n \t/**\n \t * The special-query percent-encode set is the query percent-encode set and U+0027 (').\n \t */\n \tprivate static boolean specialQueryPercentEncodeSet(int ch) {\n-\t\treturn queryPercentEncodeSet(ch) || ch == '\\'';\n+\t\treturn (queryPercentEncodeSet(ch) || ch == '\\'');\n \t}\n \n \n \t/**\n-\t * The path percent-encode set is the query percent-encode set and U+003F (?), U+0060 (`), U+007B ({), and U+007D (}).\n+\t * The path percent-encode set is the query percent-encode set and\n+\t * U+003F (?), U+0060 (`), U+007B ({), and U+007D (}).\n \t */\n \tprivate static boolean pathPercentEncodeSet(int ch) {\n-\t\treturn queryPercentEncodeSet(ch) || ch == '?' || ch == '`' || ch == '{' || ch == '}';\n+\t\treturn (queryPercentEncodeSet(ch) || ch == '?' || ch == '`' || ch == '{' || ch == '}');\n \t}\n \n \t/**\n-\t * The userinfo percent-encode set is the path percent-encode set and U+002F (/), U+003A (:), U+003B (;), U+003D (=), U+0040 (@), U+005B ([) to U+005E (^), inclusive, and U+007C (|).\n+\t * The userinfo percent-encode set is the path percent-encode set and\n+\t * U+002F (/), U+003A (:), U+003B (;), U+003D (=), U+0040 (@),\n+\t * U+005B ([) to U+005E (^), inclusive, and U+007C (|).\n \t */\n \tprivate static boolean userinfoPercentEncodeSet(int ch) {\n-\t\treturn pathPercentEncodeSet(ch) || ch == '/' || ch == ':' || ch == ';' || ch == '=' || ch == '@' ||\n-\t\t\t\t(Integer.compareUnsigned(ch, '[') >= 0 && Integer.compareUnsigned(ch, '^') <= 0) || ch == '|';\n+\t\treturn (pathPercentEncodeSet(ch) || ch == '/' || ch == ':' || ch == ';' || ch == '=' || ch == '@' ||\n+\t\t\t\t(Integer.compareUnsigned(ch, '[') >= 0 && Integer.compareUnsigned(ch, '^') <= 0) || ch == '|');\n \t}\n \n \tprivate static boolean isC0Control(int ch) {\n-\t\treturn ch >= 0 && ch <= 0x1F;\n+\t\treturn (ch >= 0 && ch <= 0x1F);\n \t}\n \n \tprivate static boolean isNewline(int ch) {\n-\t\treturn ch == '\\r' || ch == '\\n';\n+\t\treturn (ch == '\\r' || ch == '\\n');\n \t}\n \n \tprivate static boolean isAsciiAlpha(int ch) {\n-\t\treturn (ch >= 'A' && ch <= 'Z') ||\n-\t\t\t\t(ch >= 'a' && ch <= 'z');\n+\t\treturn (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z');\n \t}\n \n \tprivate static boolean containsOnlyAsciiDigits(CharSequence string) {\n@@ -412,57 +425,52 @@ private static boolean containsOnlyAscii(String string) {\n \n \tprivate static boolean isAsciiCodePoint(int ch) {\n \t\t// An ASCII code point is a code point in the range U+0000 NULL to U+007F DELETE, inclusive.\n-\t\treturn Integer.compareUnsigned(ch, 0) >= 0 && Integer.compareUnsigned(ch, 127) <= 0;\n+\t\treturn (Integer.compareUnsigned(ch, 0) >= 0 && Integer.compareUnsigned(ch, 127) <= 0);\n \t}\n \n \tprivate static boolean isAsciiDigit(int ch) {\n \t\treturn (ch >= '0' && ch <= '9');\n \t}\n \n \tprivate static boolean isAsciiAlphaNumeric(int ch) {\n-\t\treturn isAsciiAlpha(ch) || isAsciiDigit(ch);\n+\t\treturn (isAsciiAlpha(ch) || isAsciiDigit(ch));\n \t}\n \n \tprivate static boolean isAsciiHexDigit(int ch) {\n-\t\treturn isAsciiDigit(ch) ||\n-\t\t\t\t(ch >= 'A' && ch <= 'F') ||\n-\t\t\t\t(ch >= 'a' && ch <= 'f');\n+\t\treturn (isAsciiDigit(ch) || (ch >= 'A' && ch <= 'F') || (ch >= 'a' && ch <= 'f'));\n \t}\n \n \tprivate static boolean isForbiddenDomain(int ch) {\n-\t\treturn isForbiddenHost(ch) || isC0Control(ch) || ch == '%' || ch == 0x7F;\n+\t\treturn (isForbiddenHost(ch) || isC0Control(ch) || ch == '%' || ch == 0x7F);\n \t}\n \n \tprivate static boolean isForbiddenHost(int ch) {\n-\t\treturn ch == 0x00 || ch == '\\t' || isNewline(ch) || ch == ' ' || ch == '#' || ch == '/' || ch == ':' ||\n-\t\t\t\tch == '<' || ch == '>' || ch == '?' || ch == '@' || ch == '[' || ch == '\\\\' || ch == ']' || ch == '^' ||\n-\t\t\t\tch == '|';\n+\t\treturn (ch == 0x00 || ch == '\\t' || isNewline(ch) || ch == ' ' || ch == '#' ||\n+\t\t\t\tch == '/' || ch == ':' || ch == '<' || ch == '>' || ch == '?' || ch == '@' ||\n+\t\t\t\tch == '[' || ch == '\\\\' || ch == ']' || ch == '^' || ch == '|');\n \t}\n \n \tprivate static boolean isNonCharacter(int ch) {\n-\t\treturn (ch >= 0xFDD0 && ch <= 0xFDEF) || ch == 0xFFFE || ch == 0xFFFF || ch == 0x1FFFE || ch == 0x1FFFF ||\n+\t\treturn ((ch >= 0xFDD0 && ch <= 0xFDEF) || ch == 0xFFFE || ch == 0xFFFF || ch == 0x1FFFE || ch == 0x1FFFF ||\n \t\t\t\tch == 0x2FFFE || ch == 0x2FFFF || ch == 0x3FFFE || ch == 0x3FFFF || ch == 0x4FFFE || ch == 0x4FFFF ||\n \t\t\t\tch == 0x5FFFE || ch == 0x5FFFF || ch == 0x6FFFE || ch == 0x6FFFF || ch == 0x7FFFE || ch == 0x7FFFF ||\n \t\t\t\tch == 0x8FFFE || ch == 0x8FFFF || ch == 0x9FFFE || ch == 0x9FFFF || ch == 0xAFFFE || ch == 0xAFFFF ||\n \t\t\t\tch == 0xBFFFE || ch == 0xBFFFF || ch == 0xCFFFE || ch == 0xCFFFF || ch == 0xDFFFE || ch == 0xDFFFF ||\n-\t\t\t\tch == 0xEFFFE || ch == 0xEFFFF || ch == 0xFFFFE || ch == 0xFFFFF || ch == 0x10FFFE || ch == 0x10FFFF;\n+\t\t\t\tch == 0xEFFFE || ch == 0xEFFFF || ch == 0xFFFFE || ch == 0xFFFFF || ch == 0x10FFFE || ch == 0x10FFFF);\n \t}\n \n \tprivate static boolean isUrlCodePoint(int ch) {\n-\t\treturn isAsciiAlphaNumeric(ch) ||\n-\t\t\t\tch == '!' || ch == '$' || ch == '&' || ch == '\\'' || ch == '(' || ch == ')' || ch == '*' || ch == '+'\n-\t\t\t\t|| ch == ',' || ch == '-' || ch == '.' || ch == '/' || ch == ':' || ch == ';' || ch == '=' || ch == '?'\n-\t\t\t\t|| ch == '@' || ch == '_' || ch == '~' ||\n-\t\t\t\t(ch >= 0x00A0 && ch <= 0x10FFFD && !Character.isSurrogate((char) ch) && !isNonCharacter(ch));\n+\t\treturn (isAsciiAlphaNumeric(ch) ||\n+\t\t\t\tch == '!' || ch == '$' || ch == '&' || ch == '\\'' || ch == '(' || ch == ')' ||\n+\t\t\t\tch == '*' || ch == '+' || ch == ',' || ch == '-' || ch == '.' || ch == '/' ||\n+\t\t\t\tch == ':' || ch == ';' || ch == '=' || ch == '?' || ch == '@' || ch == '_' || ch == '~' ||\n+\t\t\t\t(ch >= 0x00A0 && ch <= 0x10FFFD && !Character.isSurrogate((char) ch) && !isNonCharacter(ch)));\n \t}\n \n \tprivate static boolean isSpecialScheme(String scheme) {\n-\t\treturn \"ftp\".equals(scheme) ||\n-\t\t\t\t\"file\".equals(scheme) ||\n-\t\t\t\t\"http\".equals(scheme) ||\n-\t\t\t\t\"https\".equals(scheme) ||\n-\t\t\t\t\"ws\".equals(scheme) ||\n-\t\t\t\t\"wss\".equals(scheme);\n+\t\treturn (\"ftp\".equals(scheme) || \"file\".equals(scheme) ||\n+\t\t\t\t\"http\".equals(scheme) || \"https\".equals(scheme) ||\n+\t\t\t\t\"ws\".equals(scheme) || \"wss\".equals(scheme));\n \t}\n \n \n@@ -504,12 +512,7 @@ private void emptyBuffer() {\n \n \tprivate int remaining(int deltaPos) {\n \t\tint pos = this.pointer + deltaPos + 1;\n-\t\tif (pos < this.input.length()) {\n-\t\t\treturn this.input.codePointAt(pos);\n-\t\t}\n-\t\telse {\n-\t\t\treturn EOF;\n-\t\t}\n+\t\treturn (pos < this.input.length() ? this.input.codePointAt(pos) : EOF);\n \t}\n \n \tprivate static String percentDecode(String input) {\n@@ -565,7 +568,8 @@ private String percentEncode(String input, IntPredicate percentEncodeSet) {\n \t}\n \n \t/**\n-\t * A single-dot URL path segment is a URL path segment that is \"[/].\" or an ASCII case-insensitive match for \"[/]%2e\".\n+\t * A single-dot URL path segment is a URL path segment that is \"[/].\" or\n+\t * an ASCII case-insensitive match for \"[/]%2e\".\n \t */\n \tprivate static boolean isSingleDotPathSegment(StringBuilder b) {\n \t\tint len = b.length();\n@@ -601,21 +605,22 @@ private static boolean isSingleDotPathSegment(StringBuilder b) {\n \t}\n \n \t/**\n-\t * A double-dot URL path segment is a URL path segment that is \"[/]..\" or an ASCII case-insensitive match for \"/.%2e\", \"/%2e.\", or \"/%2e%2e\".\n+\t * A double-dot URL path segment is a URL path segment that is \"[/]..\" or\n+\t * an ASCII case-insensitive match for \"/.%2e\", \"/%2e.\", or \"/%2e%2e\".\n \t */\n \tprivate static boolean isDoubleDotPathSegment(StringBuilder b) {\n \t\tint len = b.length();\n \t\tswitch (len) {\n \t\t\tcase 2 -> {\n \t\t\t\tint ch0 = b.codePointAt(0);\n \t\t\t\tint ch1 = b.codePointAt(1);\n-\t\t\t\treturn ch0 == '.' && ch1 == '.';\n+\t\t\t\treturn (ch0 == '.' && ch1 == '.');\n \t\t\t}\n \t\t\tcase 3 -> {\n \t\t\t\tint ch0 = b.codePointAt(0);\n \t\t\t\tint ch1 = b.codePointAt(1);\n \t\t\t\tint ch2 = b.codePointAt(2);\n-\t\t\t\treturn ch0 == '/' && ch1 == '.' && ch2 == '.';\n+\t\t\t\treturn (ch0 == '/' && ch1 == '.' && ch2 == '.');\n \t\t\t}\n \t\t\tcase 4 -> {\n \t\t\t\tint ch0 = b.codePointAt(0);\n@@ -633,9 +638,9 @@ private static boolean isDoubleDotPathSegment(StringBuilder b) {\n \t\t\t\tint ch3 = b.codePointAt(3);\n \t\t\t\tint ch4 = b.codePointAt(4);\n \t\t\t\t// case-insensitive match for \"/.%2e\" or \"/%2e.\"\n-\t\t\t\treturn ch0 == '/' &&\n-\t\t\t\t\t\t(ch1 == '.' && ch2 == '%' && ch3 == '2' && (ch4 == 'e' || ch4 == 'E')\n-\t\t\t\t\t\t\t\t|| (ch1 == '%' && ch2 == '2' && (ch3 == 'e' || ch3 == 'E') && ch4 == '.'));\n+\t\t\t\treturn (ch0 == '/' &&\n+\t\t\t\t\t\t(ch1 == '.' && ch2 == '%' && ch3 == '2' && (ch4 == 'e' || ch4 == 'E') ||\n+\t\t\t\t\t\t\t\t(ch1 == '%' && ch2 == '2' && (ch3 == 'e' || ch3 == 'E') && ch4 == '.')));\n \t\t\t}\n \t\t\tcase 6 -> {\n \t\t\t\tint ch0 = b.codePointAt(0);\n@@ -645,8 +650,8 @@ private static boolean isDoubleDotPathSegment(StringBuilder b) {\n \t\t\t\tint ch4 = b.codePointAt(4);\n \t\t\t\tint ch5 = b.codePointAt(5);\n \t\t\t\t// case-insensitive match for \"%2e%2e\".\n-\t\t\t\treturn ch0 == '%' && ch1 == '2' && (ch2 == 'e' || ch2 == 'E')\n-\t\t\t\t\t\t&& ch3 == '%' && ch4 == '2' && (ch5 == 'e' || ch5 == 'E');\n+\t\t\t\treturn (ch0 == '%' && ch1 == '2' && (ch2 == 'e' || ch2 == 'E') &&\n+\t\t\t\t\t\tch3 == '%' && ch4 == '2' && (ch5 == 'e' || ch5 == 'E'));\n \t\t\t}\n \t\t\tcase 7 -> {\n \t\t\t\tint ch0 = b.codePointAt(0);\n@@ -657,8 +662,8 @@ private static boolean isDoubleDotPathSegment(StringBuilder b) {\n \t\t\t\tint ch5 = b.codePointAt(5);\n \t\t\t\tint ch6 = b.codePointAt(6);\n \t\t\t\t// case-insensitive match for \"/%2e%2e\".\n-\t\t\t\treturn ch0 == '/' && ch1 == '%' && ch2 == '2' && (ch3 == 'e' || ch3 == 'E')\n-\t\t\t\t\t\t&& ch4 == '%' && ch5 == '2' && (ch6 == 'e' || ch6 == 'E');\n+\t\t\t\treturn (ch0 == '/' && ch1 == '%' && ch2 == '2' && (ch3 == 'e' || ch3 == 'E') &&\n+\t\t\t\t\t\tch4 == '%' && ch5 == '2' && (ch6 == 'e' || ch6 == 'E'));\n \t\t\t}\n \t\t\tdefault -> {\n \t\t\t\treturn false;\n@@ -668,9 +673,11 @@ private static boolean isDoubleDotPathSegment(StringBuilder b) {\n \n \n \t/**\n-\t * A Windows drive letter is two code points, of which the first is an ASCII alpha and the second is either U+003A (:) or U+007C (|).\n+\t * A Windows drive letter is two code points, of which the first is an ASCII alpha\n+\t * and the second is either U+003A (:) or U+007C (|).\n \t *\n-\t * A normalized Windows drive letter is a Windows drive letter of which the second code point is U+003A (:).\n+\t * A normalized Windows drive letter is a Windows drive letter of which\n+\t * the second code point is U+003A (:).\n \t */\n \tprivate static boolean isWindowsDriveLetter(CharSequence input, boolean normalized) {\n \t\tif (input.length() != 2) {\n@@ -699,7 +706,7 @@ private static boolean startsWithWindowsDriveLetter(String input) {\n \t\t}\n \t\telse {\n \t\t\tint ch2 = input.codePointAt(2);\n-\t\t\treturn ch2 == '/' || ch2 == '\\\\' || ch2 == '?' || ch2 == '#';\n+\t\t\treturn (ch2 == '/' || ch2 == '\\\\' || ch2 == '?' || ch2 == '#');\n \t\t}\n \t}\n \n@@ -742,14 +749,15 @@ public void handle(int c, UrlRecord url, UrlParser p) {\n \t\t\t\t\tp.append(Character.toLowerCase((char) c));\n \t\t\t\t\tp.setState(SCHEME);\n \t\t\t\t}\n-\t\t\t\t// EXTRA: if c is '{', then append c to buffer, set previous state to scheme state, and state to url template state.\n-\t\t\t\t//\n+\t\t\t\t// EXTRA: if c is '{', then append c to buffer, set previous state to scheme state,\n+\t\t\t\t// and state to url template state.\n \t\t\t\telse if (p.previousState != URL_TEMPLATE && c == '{') {\n \t\t\t\t\tp.append(c);\n \t\t\t\t\tp.previousState = SCHEME;\n \t\t\t\t\tp.state = URL_TEMPLATE;\n \t\t\t\t}\n-\t\t\t\t// Otherwise, if state override is not given, set state to no scheme state and decrease pointer by 1.\n+\t\t\t\t// Otherwise, if state override is not given,\n+\t\t\t\t// set state to no scheme state and decrease pointer by 1.\n \t\t\t\telse if (p.stateOverride == null) {\n \t\t\t\t\tp.setState(NO_SCHEME);\n \t\t\t\t\tp.pointer--;\n@@ -792,7 +800,8 @@ else if (c == ':') {\n \t\t\t\t\t\t\treturn;\n \t\t\t\t\t\t}\n \t\t\t\t\t\t// If url\u2019s scheme is \"file\" and its host is an empty host, then return.\n-\t\t\t\t\t\tif (\"file\".equals(url.scheme()) && (url.host() == null || url.host() == EmptyHost.INSTANCE)) {\n+\t\t\t\t\t\tif (\"file\".equals(url.scheme()) &&\n+\t\t\t\t\t\t\t\t(url.host() == null || url.host() == EmptyHost.INSTANCE)) {\n \t\t\t\t\t\t\treturn;\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n@@ -801,8 +810,7 @@ else if (c == ':') {\n \t\t\t\t\t// If state override is given, then:\n \t\t\t\t\tif (p.stateOverride != null) {\n \t\t\t\t\t\t// If url\u2019s port is url\u2019s scheme\u2019s default port, then set url\u2019s port to null.\n-\t\t\t\t\t\tif (url.port instanceof IntPort intPort &&\n-\t\t\t\t\t\t\t\tintPort.value() == defaultPort(url.scheme)) {\n+\t\t\t\t\t\tif (url.port instanceof IntPort intPort && intPort.value() == defaultPort(url.scheme)) {\n \t\t\t\t\t\t\turl.port = null;\n \t\t\t\t\t\t\t// Return.\n \t\t\t\t\t\t\tp.stopMainLoop = true;\n@@ -813,7 +821,8 @@ else if (c == ':') {\n \t\t\t\t\tp.emptyBuffer();\n \t\t\t\t\t// If url\u2019s scheme is \"file\", then:\n \t\t\t\t\tif (url.scheme.equals(\"file\")) {\n-\t\t\t\t\t\t// If remaining does not start with \"//\", special-scheme-missing-following-solidus validation error.\n+\t\t\t\t\t\t// If remaining does not start with \"//\",\n+\t\t\t\t\t\t// special-scheme-missing-following-solidus validation error.\n \t\t\t\t\t\tif (p.validate() && (p.remaining(0) != '/' || p.remaining(1) != '/')) {\n \t\t\t\t\t\t\tp.validationError(\"\\\"file\\\" scheme not followed by \\\"//\\\".\");\n \t\t\t\t\t\t}\n@@ -831,7 +840,8 @@ else if (url.isSpecial() && p.base != null && p.base.scheme().equals(url.scheme)\n \t\t\t\t\telse if (url.isSpecial()) {\n \t\t\t\t\t\tp.setState(SPECIAL_AUTHORITY_SLASHES);\n \t\t\t\t\t}\n-\t\t\t\t\t// Otherwise, if remaining starts with an U+002F (/), set state to path or authority state and increase pointer by 1.\n+\t\t\t\t\t// Otherwise, if remaining starts with an U+002F (/),\n+\t\t\t\t\t// set state to path or authority state and increase pointer by 1.\n \t\t\t\t\telse if (p.remaining(0) == '/') {\n \t\t\t\t\t\tp.setState(PATH_OR_AUTHORITY);\n \t\t\t\t\t\tp.pointer++;\n@@ -842,7 +852,8 @@ else if (p.remaining(0) == '/') {\n \t\t\t\t\t\tp.setState(OPAQUE_PATH);\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\t// Otherwise, if state override is not given, set buffer to the empty string, state to no scheme state, and start over (from the first code point in input).\n+\t\t\t\t// Otherwise, if state override is not given, set buffer to the empty string,\n+\t\t\t\t// state to no scheme state, and start over (from the first code point in input).\n \t\t\t\telse if (p.stateOverride == null) {\n \t\t\t\t\tp.emptyBuffer();\n \t\t\t\t\tp.setState(NO_SCHEME);\n@@ -858,22 +869,25 @@ else if (p.stateOverride == null) {\n \t\tNO_SCHEME {\n \t\t\t@Override\n \t\t\tpublic void handle(int c, UrlRecord url, UrlParser p) {\n-\t\t\t\t// If base is null, or base has an opaque path and c is not U+0023 (#), missing-scheme-non-relative-URL\n-\t\t\t\t// validation error, return failure.\n+\t\t\t\t// If base is null, or base has an opaque path and c is not U+0023 (#),\n+\t\t\t\t// missing-scheme-non-relative-URL validation error, return failure.\n \t\t\t\tif (p.base == null || p.base.path().isOpaque() && c != '#') {\n \t\t\t\t\tp.failure(\"The input is missing a scheme, because it does not begin with an ASCII alpha \\\"\" +\n \t\t\t\t\t\t\t(c != EOF ? Character.toString(c) : \"\") + \"\\\", and no base URL was provided.\");\n \t\t\t\t}\n-\t\t\t\t// Otherwise, if base has an opaque path and c is U+0023 (#), set url\u2019s scheme to base\u2019s scheme, url\u2019s\n-\t\t\t\t// path to base\u2019s path, url\u2019s query to base\u2019s query, url\u2019s fragment to the empty string, and set state to fragment state.\n+\t\t\t\t// Otherwise, if base has an opaque path and c is U+0023 (#),\n+\t\t\t\t// set url\u2019s scheme to base\u2019s scheme, url\u2019s path to base\u2019s path,\n+\t\t\t\t// url\u2019s query to base\u2019s query, url\u2019s fragment to the empty string,\n+\t\t\t\t// and set state to fragment state.\n \t\t\t\telse if (p.base.path().isOpaque() && c == '#') {\n \t\t\t\t\turl.scheme = p.base.scheme();\n \t\t\t\t\turl.path = p.base.path();\n \t\t\t\t\turl.query = p.base.query;\n \t\t\t\t\turl.fragment = new StringBuilder();\n \t\t\t\t\tp.setState(FRAGMENT);\n \t\t\t\t}\n-\t\t\t\t// Otherwise, if base\u2019s scheme is not \"file\", set state to relative state and decrease pointer by 1.\n+\t\t\t\t// Otherwise, if base\u2019s scheme is not \"file\",\n+\t\t\t\t// set state to relative state and decrease pointer by 1.\n \t\t\t\telse if (!\"file\".equals(p.base.scheme())) {\n \t\t\t\t\tp.setState(RELATIVE);\n \t\t\t\t\tp.pointer--;\n@@ -888,12 +902,15 @@ else if (!\"file\".equals(p.base.scheme())) {\n \t\tSPECIAL_RELATIVE_OR_AUTHORITY {\n \t\t\t@Override\n \t\t\tpublic void handle(int c, UrlRecord url, UrlParser p) {\n-\t\t\t\t// If c is U+002F (/) and remaining starts with U+002F (/), then set state to special authority ignore slashes state and increase pointer by 1.\n+\t\t\t\t// If c is U+002F (/) and remaining starts with U+002F (/),\n+\t\t\t\t// then set state to special authority ignore slashes state and\n+\t\t\t\t// increase pointer by 1.\n \t\t\t\tif (c == '/' && p.remaining(0) == '/') {\n \t\t\t\t\tp.setState(SPECIAL_AUTHORITY_IGNORE_SLASHES);\n \t\t\t\t\tp.pointer++;\n \t\t\t\t}\n-\t\t\t\t// Otherwise, special-scheme-missing-following-solidus validation error, set state to relative state and decrease pointer by 1.\n+\t\t\t\t// Otherwise, special-scheme-missing-following-solidus validation error,\n+\t\t\t\t// set state to relative state and decrease pointer by 1.\n \t\t\t\telse {\n \t\t\t\t\tif (p.validate()) {\n \t\t\t\t\t\tp.validationError(\"The input\u2019s scheme is not followed by \\\"//\\\".\");\n@@ -921,7 +938,8 @@ public void handle(int c, UrlRecord url, UrlParser p) {\n \t\t\t@Override\n \t\t\tpublic void handle(int c, UrlRecord url, UrlParser p) {\n \t\t\t\t// Assert: base\u2019s scheme is not \"file\".\n-\t\t\t\tAssert.state(p.base != null && !\"file\".equals(p.base.scheme()), \"Base scheme not provided or supported\");\n+\t\t\t\tAssert.state(p.base != null && !\"file\".equals(p.base.scheme()),\n+\t\t\t\t\t\t\"Base scheme not provided or supported\");\n \t\t\t\t// Set url\u2019s scheme to base\u2019s scheme.\n \t\t\t\turl.scheme = p.base.scheme;\n \t\t\t\t// If c is U+002F (/), then set state to relative slash state.\n@@ -930,7 +948,8 @@ public void handle(int c, UrlRecord url, UrlParser p) {\n \t\t\t\t\tp.append('/');\n \t\t\t\t\tp.setState(RELATIVE_SLASH);\n \t\t\t\t}\n-\t\t\t\t// Otherwise, if url is special and c is U+005C (\\), invalid-reverse-solidus validation error, set state to relative slash state.\n+\t\t\t\t// Otherwise, if url is special and c is U+005C (\\),\n+\t\t\t\t// invalid-reverse-solidus validation error, set state to relative slash state.\n \t\t\t\telse if (url.isSpecial() && c == '\\\\') {\n \t\t\t\t\tif (p.validate()) {\n \t\t\t\t\t\tp.validationError(\"URL uses \\\\ instead of /.\");\n@@ -941,10 +960,11 @@ else if (url.isSpecial() && c == '\\\\') {\n \t\t\t\t}\n \t\t\t\t// Otherwise\n \t\t\t\telse {\n-\t\t\t\t\t// Set url\u2019s username to base\u2019s username, url\u2019s password to base\u2019s password, url\u2019s host to base\u2019s host,\n-\t\t\t\t\t// url\u2019s port to base\u2019s port, url\u2019s path to a clone of base\u2019s path, and url\u2019s query to base\u2019s query.\n-\t\t\t\t\turl.username = (p.base.username != null) ? new StringBuilder(p.base.username) : null;\n-\t\t\t\t\turl.password = (p.base.password != null) ? new StringBuilder(p.base.password) : null;\n+\t\t\t\t\t// Set url\u2019s username to base\u2019s username, url\u2019s password to base\u2019s password,\n+\t\t\t\t\t// url\u2019s host to base\u2019s host, url\u2019s port to base\u2019s port,\n+\t\t\t\t\t// url\u2019s path to a clone of base\u2019s path, and url\u2019s query to base\u2019s query.\n+\t\t\t\t\turl.username = ((p.base.username != null) ? new StringBuilder(p.base.username) : null);\n+\t\t\t\t\turl.password = ((p.base.password != null) ? new StringBuilder(p.base.password) : null);\n \t\t\t\t\turl.host = p.base.host();\n \t\t\t\t\turl.port = p.base.port();\n \t\t\t\t\turl.path = p.base.path().clone();\n@@ -990,8 +1010,9 @@ else if (c == '/') {\n \t\t\t\t\tp.emptyBuffer();\n \t\t\t\t\tp.setState(AUTHORITY);\n \t\t\t\t}\n-\t\t\t\t// Otherwise, set url\u2019s username to base\u2019s username, url\u2019s password to base\u2019s password, url\u2019s host\n-\t\t\t\t// to base\u2019s host, url\u2019s port to base\u2019s port, state to path state, and then, decrease pointer by 1.\n+\t\t\t\t// Otherwise, set url\u2019s username to base\u2019s username, url\u2019s password to base\u2019s password,\n+\t\t\t\t// url\u2019s host to base\u2019s host, url\u2019s port to base\u2019s port, state to path state,\n+\t\t\t\t// and then, decrease pointer by 1.\n \t\t\t\telse {\n \t\t\t\t\tAssert.state(p.base != null, \"No base URL available\");\n \t\t\t\t\turl.username = (p.base.username != null) ? new StringBuilder(p.base.username) : null;\n@@ -1007,12 +1028,15 @@ else if (c == '/') {\n \t\tSPECIAL_AUTHORITY_SLASHES {\n \t\t\t@Override\n \t\t\tpublic void handle(int c, UrlRecord url, UrlParser p) {\n-\t\t\t\t// If c is U+002F (/) and remaining starts with U+002F (/), then set state to special authority ignore slashes state and increase pointer by 1.\n+\t\t\t\t// If c is U+002F (/) and remaining starts with U+002F (/),\n+\t\t\t\t// then set state to special authority ignore slashes state and\n+\t\t\t\t// increase pointer by 1.\n \t\t\t\tif (c == '/' && p.remaining(0) == '/') {\n \t\t\t\t\tp.setState(SPECIAL_AUTHORITY_IGNORE_SLASHES);\n \t\t\t\t\tp.pointer++;\n \t\t\t\t}\n-\t\t\t\t// Otherwise, special-scheme-missing-following-solidus validation error, set state to special authority ignore slashes state and decrease pointer by 1.\n+\t\t\t\t// Otherwise, special-scheme-missing-following-solidus validation error,\n+\t\t\t\t// set state to special authority ignore slashes state and decrease pointer by 1.\n \t\t\t\telse {\n \t\t\t\t\tif (p.validate()) {\n \t\t\t\t\t\tp.validationError(\"Scheme \\\"\" + url.scheme + \"\\\" not followed by \\\"//\\\".\");\n@@ -1025,7 +1049,8 @@ public void handle(int c, UrlRecord url, UrlParser p) {\n \t\tSPECIAL_AUTHORITY_IGNORE_SLASHES {\n \t\t\t@Override\n \t\t\tpublic void handle(int c, UrlRecord url, UrlParser p) {\n-\t\t\t\t// If c is neither U+002F (/) nor U+005C (\\), then set state to authority state and decrease pointer by 1.\n+\t\t\t\t// If c is neither U+002F (/) nor U+005C (\\),\n+\t\t\t\t// then set state to authority state and decrease pointer by 1.\n \t\t\t\tif (c != '/' && c != '\\\\') {\n \t\t\t\t\tp.setState(AUTHORITY);\n \t\t\t\t\tp.pointer--;\n@@ -1058,12 +1083,14 @@ public void handle(int c, UrlRecord url, UrlParser p) {\n \t\t\t\t\t// For each codePoint in buffer:\n \t\t\t\t\tfor (int i = 0; i < bufferLen; i++) {\n \t\t\t\t\t\tint codePoint = p.buffer.codePointAt(i);\n-\t\t\t\t\t\t// If codePoint is U+003A (:) and passwordTokenSeen is false, then set passwordTokenSeen to true and continue.\n+\t\t\t\t\t\t// If codePoint is U+003A (:) and passwordTokenSeen is false,\n+\t\t\t\t\t\t// then set passwordTokenSeen to true and continue.\n \t\t\t\t\t\tif (codePoint == ':' && !p.passwordTokenSeen) {\n \t\t\t\t\t\t\tp.passwordTokenSeen = true;\n \t\t\t\t\t\t\tcontinue;\n \t\t\t\t\t\t}\n-\t\t\t\t\t\t// Let encodedCodePoints be the result of running UTF-8 percent-encode codePoint using the userinfo percent-encode set.\n+\t\t\t\t\t\t// Let encodedCodePoints be the result of running UTF-8 percent-encode codePoint\n+\t\t\t\t\t\t// using the userinfo percent-encode set.\n \t\t\t\t\t\tString encodedCodePoints = p.percentEncode(codePoint, UrlParser::userinfoPercentEncodeSet);\n \t\t\t\t\t\t// If passwordTokenSeen is true, then append encodedCodePoints to url\u2019s password.\n \t\t\t\t\t\tif (p.passwordTokenSeen) {\n@@ -1090,13 +1117,14 @@ public void handle(int c, UrlRecord url, UrlParser p) {\n \t\t\t\t// Otherwise, if one of the following is true:\n \t\t\t\t// - c is the EOF code point, U+002F (/), U+003F (?), or U+0023 (#)\n \t\t\t\t// - url is special and c is U+005C (\\)\n-\t\t\t\telse if ((c == EOF || c == '/' || c == '?' || c == '#') ||\n-\t\t\t\t\t\t(url.isSpecial() && c == '\\\\')) {\n-\t\t\t\t\t// If atSignSeen is true and buffer is the empty string, host-missing validation error, return failure.\n+\t\t\t\telse if ((c == EOF || c == '/' || c == '?' || c == '#') || (url.isSpecial() && c == '\\\\')) {\n+\t\t\t\t\t// If atSignSeen is true and buffer is the empty string,\n+\t\t\t\t\t// host-missing validation error, return failure.\n \t\t\t\t\tif (p.atSignSeen && p.buffer.isEmpty()) {\n \t\t\t\t\t\tp.failure(\"Missing host.\");\n \t\t\t\t\t}\n-\t\t\t\t\t// Decrease pointer by buffer\u2019s code point length + 1, set buffer to the empty string, and set state to host state.\n+\t\t\t\t\t// Decrease pointer by buffer\u2019s code point length + 1,\n+\t\t\t\t\t// set buffer to the empty string, and set state to host state.\n \t\t\t\t\tp.pointer -= p.buffer.length() + 1;\n \t\t\t\t\tp.emptyBuffer();\n \t\t\t\t\tp.setState(HOST);\n@@ -1110,7 +1138,8 @@ else if ((c == EOF || c == '/' || c == '?' || c == '#') ||\n \t\tHOST {\n \t\t\t@Override\n \t\t\tpublic void handle(int c, UrlRecord url, UrlParser p) {\n-\t\t\t\t// If state override is given and url\u2019s scheme is \"file\", then decrease pointer by 1 and set state to file host state.\n+\t\t\t\t// If state override is given and url\u2019s scheme is \"file\",\n+\t\t\t\t// then decrease pointer by 1 and set state to file host state.\n \t\t\t\tif (p.stateOverride != null && \"file\".equals(url.scheme())) {\n \t\t\t\t\tp.pointer--;\n \t\t\t\t\tp.setState(FILE_HOST);\n@@ -1127,9 +1156,8 @@ else if (c == ':' && !p.insideBrackets) {\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n \t\t\t\t\t// Let host be the result of host parsing buffer with url is not special.\n-\t\t\t\t\tHost host = Host.parse(p.buffer.toString(), !url.isSpecial(), p);\n \t\t\t\t\t// Set url\u2019s host to host, buffer to the empty string, and state to port state.\n-\t\t\t\t\turl.host = host;\n+\t\t\t\t\turl.host = Host.parse(p.buffer.toString(), !url.isSpecial(), p);\n \t\t\t\t\tp.emptyBuffer();\n \t\t\t\t\tp.setState(PORT);\n \t\t\t\t}\n@@ -1140,11 +1168,13 @@ else if ( (c == EOF || c == '/' || c == '?' || c == '#') ||\n \t\t\t\t\t\t(url.isSpecial() && c == '\\\\')) {\n \t\t\t\t\t// then decrease pointer by 1, and then:\n \t\t\t\t\tp.pointer--;\n-\t\t\t\t\t// If url is special and buffer is the empty string, host-missing validation error, return failure.\n+\t\t\t\t\t// If url is special and buffer is the empty string,\n+\t\t\t\t\t// host-missing validation error, return failure.\n \t\t\t\t\tif (url.isSpecial() && p.buffer.isEmpty()) {\n \t\t\t\t\t\tp.failure(\"The input has a special scheme, but does not contain a host.\");\n \t\t\t\t\t}\n-\t\t\t\t\t// Otherwise, if state override is given, buffer is the empty string, and either url includes credentials or url\u2019s port is non-null, return.\n+\t\t\t\t\t// Otherwise, if state override is given, buffer is the empty string,\n+\t\t\t\t\t// and either url includes credentials or url\u2019s port is non-null, return.\n \t\t\t\t\telse if (p.stateOverride != null && p.buffer.isEmpty() &&\n \t\t\t\t\t\t\t(url.includesCredentials() || url.port() != null )) {\n \t\t\t\t\t\tp.stopMainLoop = true;\n@@ -1153,9 +1183,8 @@ else if (p.stateOverride != null && p.buffer.isEmpty() &&\n \t\t\t\t\t// EXTRA: if buffer is not empty\n \t\t\t\t\tif (!p.buffer.isEmpty()) {\n \t\t\t\t\t\t// Let host be the result of host parsing buffer with url is not special.\n-\t\t\t\t\t\tHost host = Host.parse(p.buffer.toString(), !url.isSpecial(), p);\n \t\t\t\t\t\t// Set url\u2019s host to host, buffer to the empty string, and state to path start state.\n-\t\t\t\t\t\turl.host = host;\n+\t\t\t\t\t\turl.host = Host.parse(p.buffer.toString(), !url.isSpecial(), p);\n \t\t\t\t\t}\n \t\t\t\t\telse {\n \t\t\t\t\t\turl.host = EmptyHost.INSTANCE;\n@@ -1207,9 +1236,11 @@ else if (c == EOF || c == '/' || c == '?' || c == '#' ||\n \t\t\t\t\t\t// EXTRA: if buffer contains only ASCII digits, then\n \t\t\t\t\t\tif (containsOnlyAsciiDigits(p.buffer)) {\n \t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\t// Let port be the mathematical integer value that is represented by buffer in radix-10 using ASCII digits for digits with values 0 through 9.\n+\t\t\t\t\t\t\t\t// Let port be the mathematical integer value that is represented\n+\t\t\t\t\t\t\t\t// by buffer in radix-10 using ASCII digits for digits with values 0 through 9.\n \t\t\t\t\t\t\t\tint port = Integer.parseInt(p.buffer, 0, p.buffer.length(), 10);\n-\t\t\t\t\t\t\t\t// If port is greater than 2^16 \u2212 1, port-out-of-range validation error, return failure.\n+\t\t\t\t\t\t\t\t// If port is greater than 2^16 \u2212 1,\n+\t\t\t\t\t\t\t\t// port-out-of-range validation error, return failure.\n \t\t\t\t\t\t\t\tif (port > MAX_PORT) {\n \t\t\t\t\t\t\t\t\tp.failure(\"Port \\\"\" + port + \"\\\" is out of range\");\n \t\t\t\t\t\t\t\t}\n@@ -1266,7 +1297,8 @@ public void handle(int c, UrlRecord url, UrlParser p) {\n \t\t\t\t}\n \t\t\t\t// Otherwise, if base is non-null and base\u2019s scheme is \"file\":\n \t\t\t\telse if (p.base != null && p.base.scheme().equals(\"file\")) {\n-\t\t\t\t\t// Set url\u2019s host to base\u2019s host, url\u2019s path to a clone of base\u2019s path, and url\u2019s query to base\u2019s query.\n+\t\t\t\t\t// Set url\u2019s host to base\u2019s host, url\u2019s path to a clone of base\u2019s path,\n+\t\t\t\t\t// and url\u2019s query to base\u2019s query.\n \t\t\t\t\turl.host = p.base.host;\n \t\t\t\t\turl.path = p.base.path().clone();\n \t\t\t\t\turl.query = p.base.query;\n@@ -1275,7 +1307,8 @@ else if (p.base != null && p.base.scheme().equals(\"file\")) {\n \t\t\t\t\t\turl.query = new StringBuilder();\n \t\t\t\t\t\tp.setState(QUERY);\n \t\t\t\t\t}\n-\t\t\t\t\t// Otherwise, if c is U+0023 (#), set url\u2019s fragment to the empty string and state to fragment state.\n+\t\t\t\t\t// Otherwise, if c is U+0023 (#), set url\u2019s fragment to\n+\t\t\t\t\t// the empty string and state to fragment state.\n \t\t\t\t\telse if (c == '#') {\n \t\t\t\t\t\turl.fragment = new StringBuilder();\n \t\t\t\t\t\tp.setState(FRAGMENT);\n@@ -1284,7 +1317,8 @@ else if (c == '#') {\n \t\t\t\t\telse if (c != EOF) {\n \t\t\t\t\t\t// Set url\u2019s query to null.\n \t\t\t\t\t\turl.query = null;\n-\t\t\t\t\t\t// If the code point substring from pointer to the end of input does not start with a Windows drive letter, then shorten url\u2019s path.\n+\t\t\t\t\t\t// If the code point substring from pointer to the end of input does not start with\n+\t\t\t\t\t\t// a Windows drive letter, then shorten url\u2019s path.\n \t\t\t\t\t\tString substring = p.input.substring(p.pointer);\n \t\t\t\t\t\tif (!startsWithWindowsDriveLetter(substring)) {\n \t\t\t\t\t\t\turl.shortenPath();\n@@ -1293,8 +1327,8 @@ else if (c != EOF) {\n \t\t\t\t\t\telse {\n \t\t\t\t\t\t\t// File-invalid-Windows-drive-letter validation error.\n \t\t\t\t\t\t\tif (p.validate()) {\n-\t\t\t\t\t\t\t\tp.validationError(\"The input is a relative-URL string that starts with a Windows \" +\n-\t\t\t\t\t\t\t\t\t\t\"drive letter and the base URL\u2019s scheme is \\\"file\\\".\");\n+\t\t\t\t\t\t\t\tp.validationError(\"The input is a relative-URL string that starts with \" +\n+\t\t\t\t\t\t\t\t\t\t\"a Windows drive letter and the base URL\u2019s scheme is \\\"file\\\".\");\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t// Set url\u2019s path to \u00ab \u00bb.\n \t\t\t\t\t\t\turl.path = new PathSegments();\n@@ -1329,7 +1363,9 @@ public void handle(int c, UrlRecord url, UrlParser p) {\n \t\t\t\t\tif (p.base != null && p.base.scheme.equals(\"file\")) {\n \t\t\t\t\t\t// Set url\u2019s host to base\u2019s host.\n \t\t\t\t\t\turl.host = p.base.host;\n-\t\t\t\t\t\t// If the code point substring from pointer to the end of input does not start with a Windows drive letter and base\u2019s path[0] is a normalized Windows drive letter, then append base\u2019s path[0] to url\u2019s path.\n+\t\t\t\t\t\t// If the code point substring from pointer to the end of input does not start with\n+\t\t\t\t\t\t// a Windows drive letter and base\u2019s path[0] is a normalized Windows drive letter,\n+\t\t\t\t\t\t// then append base\u2019s path[0] to url\u2019s path.\n \t\t\t\t\t\tString substring = p.input.substring(p.pointer);\n \t\t\t\t\t\tif (!startsWithWindowsDriveLetter(substring) &&\n \t\t\t\t\t\t\t\tp.base.path instanceof PathSegments basePath &&\n@@ -1347,10 +1383,12 @@ public void handle(int c, UrlRecord url, UrlParser p) {\n \t\tFILE_HOST {\n \t\t\t@Override\n \t\t\tpublic void handle(int c, UrlRecord url, UrlParser p) {\n-\t\t\t\t// If c is the EOF code point, U+002F (/), U+005C (\\), U+003F (?), or U+0023 (#), then decrease pointer by 1 and then:\n+\t\t\t\t// If c is the EOF code point, U+002F (/), U+005C (\\), U+003F (?), or U+0023 (#),\n+\t\t\t\t// then decrease pointer by 1 and then:\n \t\t\t\tif (c == EOF || c == '/' || c == '\\\\' || c == '?' || c == '#') {\n \t\t\t\t\tp.pointer--;\n-\t\t\t\t\t// If state override is not given and buffer is a Windows drive letter, file-invalid-Windows-drive-letter-host validation error, set state to path state.\n+\t\t\t\t\t// If state override is not given and buffer is a Windows drive letter,\n+\t\t\t\t\t// file-invalid-Windows-drive-letter-host validation error, set state to path state.\n \t\t\t\t\tif (p.stateOverride == null && isWindowsDriveLetter(p.buffer, false)) {\n \t\t\t\t\t\tp.validationError(\"A file: URL\u2019s host is a Windows drive letter.\");\n \t\t\t\t\t\tp.setState(PATH);\n@@ -1412,12 +1450,14 @@ public void handle(int c, UrlRecord url, UrlParser p) {\n \t\t\t\t\t\tp.append('/');\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\t// Otherwise, if state override is not given and if c is U+003F (?), set url\u2019s query to the empty string and state to query state.\n+\t\t\t\t// Otherwise, if state override is not given and if c is U+003F (?),\n+\t\t\t\t// set url\u2019s query to the empty string and state to query state.\n \t\t\t\telse if (p.stateOverride == null && c == '?') {\n \t\t\t\t\turl.query = new StringBuilder();\n \t\t\t\t\tp.setState(QUERY);\n \t\t\t\t}\n-\t\t\t\t// Otherwise, if state override is not given and if c is U+0023 (#), set url\u2019s fragment to the empty string and state to fragment state.\n+\t\t\t\t// Otherwise, if state override is not given and if c is U+0023 (#),\n+\t\t\t\t// set url\u2019s fragment to the empty string and state to fragment state.\n \t\t\t\telse if (p.stateOverride == null && c =='#') {\n \t\t\t\t\turl.fragment = new StringBuilder();\n \t\t\t\t\tp.setState(FRAGMENT);\n@@ -1435,7 +1475,8 @@ else if (c != EOF) {\n \t\t\t\t\t\tp.append('/');\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\t// Otherwise, if state override is given and url\u2019s host is null, append the empty string to url\u2019s path.\n+\t\t\t\t// Otherwise, if state override is given and url\u2019s host is null,\n+\t\t\t\t// append the empty string to url\u2019s path.\n \t\t\t\telse if (p.stateOverride != null && url.host() == null) {\n \t\t\t\t\turl.path().append(\"\");\n \t\t\t\t}\n@@ -1460,20 +1501,23 @@ public void handle(int c, UrlRecord url, UrlParser p) {\n \t\t\t\t\tif (isDoubleDotPathSegment(p.buffer)) {\n \t\t\t\t\t\t// Shorten url\u2019s path.\n \t\t\t\t\t\turl.shortenPath();\n-\t\t\t\t\t\t// If neither c is U+002F (/), nor url is special and c is U+005C (\\), append the empty string to url\u2019s path.\n+\t\t\t\t\t\t// If neither c is U+002F (/), nor url is special and c is U+005C (\\),\n+\t\t\t\t\t\t// append the empty string to url\u2019s path.\n \t\t\t\t\t\tif (c != '/' && !(url.isSpecial() && c == '\\\\')) {\n \t\t\t\t\t\t\turl.path.append(\"\");\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\telse {\n \t\t\t\t\t\tboolean singlePathSegment = isSingleDotPathSegment(p.buffer);\n-\t\t\t\t\t\t// Otherwise, if buffer is a single-dot URL path segment and if neither c is U+002F (/), nor url is special and c is U+005C (\\), append the empty string to url\u2019s path.\n+\t\t\t\t\t\t// Otherwise, if buffer is a single-dot URL path segment and if neither c is U+002F (/),\n+\t\t\t\t\t\t// nor url is special and c is U+005C (\\), append the empty string to url\u2019s path.\n \t\t\t\t\t\tif (singlePathSegment && c != '/' && !(url.isSpecial() && c == '\\\\')) {\n \t\t\t\t\t\t\turl.path.append(\"\");\n \t\t\t\t\t\t}\n \t\t\t\t\t\t// Otherwise, if buffer is not a single-dot URL path segment, then:\n \t\t\t\t\t\telse if (!singlePathSegment) {\n-\t\t\t\t\t\t\t// If url\u2019s scheme is \"file\", url\u2019s path is empty, and buffer is a Windows drive letter, then replace the second code point in buffer with U+003A (:).\n+\t\t\t\t\t\t\t// If url\u2019s scheme is \"file\", url\u2019s path is empty, and buffer is\n+\t\t\t\t\t\t\t// a Windows drive letter, then replace the second code point in buffer with U+003A (:).\n \t\t\t\t\t\t\tif (\"file\".equals(url.scheme) && url.path.isEmpty() && isWindowsDriveLetter(p.buffer, false)) {\n \t\t\t\t\t\t\t\tp.buffer.setCharAt(1, ':');\n \t\t\t\t\t\t\t}\n@@ -1509,7 +1553,8 @@ else if (p.previousState != URL_TEMPLATE && c == '{') {\n \t\t\t\t\t\tif (!isUrlCodePoint(c) && c != '%') {\n \t\t\t\t\t\t\tp.validationError(\"Invalid URL Unit: \\\"\" + (char) c + \"\\\"\");\n \t\t\t\t\t\t}\n-\t\t\t\t\t\t// If c is U+0025 (%) and remaining does not start with two ASCII hex digits, invalid-URL-unit validation error.\n+\t\t\t\t\t\t// If c is U+0025 (%) and remaining does not start with two ASCII hex digits,\n+\t\t\t\t\t\t// invalid-URL-unit validation error.\n \t\t\t\t\t\telse if (c == '%' &&\n \t\t\t\t\t\t\t\t(p.pointer >= p.input.length() - 2 ||\n \t\t\t\t\t\t\t\t\t\t!isAsciiHexDigit(p.input.codePointAt(p.pointer + 1)) ||\n@@ -1531,7 +1576,8 @@ else if (c == '%' &&\n \t\tOPAQUE_PATH {\n \t\t\t@Override\n \t\t\tpublic void handle(int c, UrlRecord url, UrlParser p) {\n-\t\t\t\t// EXTRA: if previous state is URL Template and the buffer is empty, append buffer to url's path and empty the buffer\n+\t\t\t\t// EXTRA: if previous state is URL Template and the buffer is empty,\n+\t\t\t\t// append buffer to url's path and empty the buffer\n \t\t\t\tif (p.previousState == URL_TEMPLATE && !p.buffer.isEmpty()) {\n \t\t\t\t\turl.path.append(p.buffer.toString());\n \t\t\t\t\tp.emptyBuffer();\n@@ -1541,7 +1587,8 @@ public void handle(int c, UrlRecord url, UrlParser p) {\n \t\t\t\t\turl.query = new StringBuilder();\n \t\t\t\t\tp.setState(QUERY);\n \t\t\t\t}\n-\t\t\t\t// Otherwise, if c is U+0023 (#), then set url\u2019s fragment to the empty string and state to fragment state.\n+\t\t\t\t// Otherwise, if c is U+0023 (#), then set url\u2019s fragment to\n+\t\t\t\t// the empty string and state to fragment state.\n \t\t\t\telse if (c == '#') {\n \t\t\t\t\turl.fragment = new StringBuilder();\n \t\t\t\t\tp.setState(FRAGMENT);\n@@ -1554,19 +1601,22 @@ else if (p.previousState != URL_TEMPLATE && c == '{') {\n \t\t\t\t// Otherwise:\n \t\t\t\telse {\n \t\t\t\t\tif (p.validate()) {\n-\t\t\t\t\t\t// If c is not the EOF code point, not a URL code point, and not U+0025 (%), invalid-URL-unit validation error.\n+\t\t\t\t\t\t// If c is not the EOF code point, not a URL code point, and not U+0025 (%),\n+\t\t\t\t\t\t// invalid-URL-unit validation error.\n \t\t\t\t\t\tif (c != EOF && !isUrlCodePoint(c) && c != '%') {\n \t\t\t\t\t\t\tp.validationError(\"Invalid URL Unit: \\\"\" + (char) c + \"\\\"\");\n \t\t\t\t\t\t}\n-\t\t\t\t\t\t// If c is U+0025 (%) and remaining does not start with two ASCII hex digits, invalid-URL-unit validation error.\n+\t\t\t\t\t\t// If c is U+0025 (%) and remaining does not start with two ASCII hex digits,\n+\t\t\t\t\t\t// invalid-URL-unit validation error.\n \t\t\t\t\t\telse if (c == '%' &&\n \t\t\t\t\t\t\t\t(p.pointer >= p.input.length() - 2 ||\n \t\t\t\t\t\t\t\t\t\t!isAsciiHexDigit(p.input.codePointAt(p.pointer + 1)) ||\n \t\t\t\t\t\t\t\t\t\t!isAsciiHexDigit(p.input.codePointAt(p.pointer + 2)))) {\n \t\t\t\t\t\t\tp.validationError(\"Invalid URL Unit: \\\"\" + (char) c + \"\\\"\");\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t\t// If c is not the EOF code point, UTF-8 percent-encode c using the C0 control percent-encode set and append the result to url\u2019s path.\n+\t\t\t\t\t// If c is not the EOF code point, UTF-8 percent-encode c using\n+\t\t\t\t\t// the C0 control percent-encode set and append the result to url\u2019s path.\n \t\t\t\t\tif (c != EOF) {\n \t\t\t\t\t\tString encoded = p.percentEncode(c, UrlParser::c0ControlPercentEncodeSet);\n \t\t\t\t\t\tif (encoded != null) {\n@@ -1595,9 +1645,12 @@ public void handle(int c, UrlRecord url, UrlParser p) {\n \t\t\t\t// - state override is not given and c is U+0023 (#)\n \t\t\t\t// - c is the EOF code point\n \t\t\t\tif ( (p.stateOverride == null && c == '#') || c == EOF) {\n-\t\t\t\t\t// Let queryPercentEncodeSet be the special-query percent-encode set if url is special; otherwise the query percent-encode set.\n-\t\t\t\t\tIntPredicate queryPercentEncodeSet = url.isSpecial() ? UrlParser::specialQueryPercentEncodeSet : UrlParser::queryPercentEncodeSet;\n-\t\t\t\t\t// Percent-encode after encoding, with encoding, buffer, and queryPercentEncodeSet, and append the result to url\u2019s query.\n+\t\t\t\t\t// Let queryPercentEncodeSet be the special-query percent-encode set if url is special;\n+\t\t\t\t\t// otherwise the query percent-encode set.\n+\t\t\t\t\tIntPredicate queryPercentEncodeSet = (url.isSpecial() ?\n+\t\t\t\t\t\t\tUrlParser::specialQueryPercentEncodeSet : UrlParser::queryPercentEncodeSet);\n+\t\t\t\t\t// Percent-encode after encoding, with encoding, buffer, and queryPercentEncodeSet,\n+\t\t\t\t\t// and append the result to url\u2019s query.\n \t\t\t\t\tString encoded = p.percentEncode(p.buffer.toString(), queryPercentEncodeSet);\n \t\t\t\t\tAssert.state(url.query != null, \"Url's query should not be null\");\n \t\t\t\t\turl.query.append(encoded);\n@@ -1621,7 +1674,8 @@ else if (c != EOF) {\n \t\t\t\t\t\tif (!isUrlCodePoint(c) && c != '%') {\n \t\t\t\t\t\t\tp.validationError(\"Invalid URL Unit: \\\"\" + (char) c + \"\\\"\");\n \t\t\t\t\t\t}\n-\t\t\t\t\t\t// If c is U+0025 (%) and remaining does not start with two ASCII hex digits, invalid-URL-unit validation error.\n+\t\t\t\t\t\t// If c is U+0025 (%) and remaining does not start with two ASCII hex digits,\n+\t\t\t\t\t\t// invalid-URL-unit validation error.\n \t\t\t\t\t\telse if (c == '%' &&\n \t\t\t\t\t\t\t\t(p.pointer >= p.input.length() - 2 ||\n \t\t\t\t\t\t\t\t\t\t!isAsciiHexDigit(p.input.codePointAt(p.pointer + 1)) ||\n@@ -1644,15 +1698,17 @@ public void handle(int c, UrlRecord url, UrlParser p) {\n \t\t\t\t\t\tif (!isUrlCodePoint(c) && c != '%') {\n \t\t\t\t\t\t\tp.validationError(\"Invalid URL Unit: \\\"\" + (char) c + \"\\\"\");\n \t\t\t\t\t\t}\n-\t\t\t\t\t\t// If c is U+0025 (%) and remaining does not start with two ASCII hex digits, invalid-URL-unit validation error.\n+\t\t\t\t\t\t// If c is U+0025 (%) and remaining does not start with two ASCII hex digits,\n+\t\t\t\t\t\t// invalid-URL-unit validation error.\n \t\t\t\t\t\telse if (c == '%' &&\n \t\t\t\t\t\t\t\t(p.pointer >= p.input.length() - 2 ||\n \t\t\t\t\t\t\t\t\t\t!isAsciiHexDigit(p.input.codePointAt(p.pointer + 1)) ||\n \t\t\t\t\t\t\t\t\t\t!isAsciiHexDigit(p.input.codePointAt(p.pointer + 2)))) {\n \t\t\t\t\t\t\tp.validationError(\"Invalid URL Unit: \\\"\" + (char) c + \"\\\"\");\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t\t// UTF-8 percent-encode c using the fragment percent-encode set and append the result to url\u2019s fragment.\n+\t\t\t\t\t// UTF-8 percent-encode c using the fragment percent-encode set and\n+\t\t\t\t\t// append the result to url\u2019s fragment.\n \t\t\t\t\tString encoded = p.percentEncode(c, UrlParser::fragmentPercentEncodeSet);\n \t\t\t\t\tAssert.state(url.fragment != null, \"Url's fragment should not be null\");\n \t\t\t\t\tif (encoded != null) {\n@@ -1685,13 +1741,12 @@ else if (c == EOF) {\n \n \t\tpublic abstract void handle(int c, UrlRecord url, UrlParser p);\n \n-\n \t}\n \n \n \t/**\n-\t * A URL is a struct that represents a universal identifier. To disambiguate from a valid URL string it can also be\n-\t * referred to as a\n+\t * A URL is a struct that represents a universal identifier.\n+\t * To disambiguate from a valid URL string it can also be referred to as a\n \t * <em>URL record</em>.\n \t */\n \tstatic final class UrlRecord {\n@@ -1721,20 +1776,19 @@ static final class UrlRecord {\n \t\tpublic UrlRecord() {\n \t\t}\n \n-\n \t\t/**\n \t\t * A URL is special if its scheme is a special scheme. A URL is not special if its scheme is not a special scheme.\n \t\t */\n \t\tpublic boolean isSpecial() {\n \t\t\treturn isSpecialScheme(this.scheme);\n \t\t}\n \n-\n \t\t/**\n \t\t * A URL includes credentials if its username or password is not the empty string.\n \t\t */\n \t\tpublic boolean includesCredentials() {\n-\t\t\treturn this.username != null && !this.username.isEmpty() || this.password != null && !this.password.isEmpty();\n+\t\t\treturn (this.username != null && !this.username.isEmpty() ||\n+\t\t\t\t\tthis.password != null && !this.password.isEmpty());\n \t\t}\n \n \t\t/**\n@@ -1746,17 +1800,23 @@ public boolean hasOpaquePath() {\n \n \n \t\t/**\n-\t\t * The serialization of an origin is the string obtained by applying the following algorithm to the given origin origin:\n-\t\t * If origin is an opaque origin, then return \"null\".\n-\t\t * Otherwise, let result be origin's scheme.\n-\t\t * Append \"://\" to result.\n+\t\t * The serialization of an origin is the string obtained by applying\n+\t\t * the following algorithm to the given origin:\n+\t\t * <ol>\n+\t\t * <li>If origin is an opaque origin, then return \"null\".\n+\t\t * <li>Otherwise, let result be origin's scheme.\n+\t\t * <li>Append \"://\" to result.\n \t\t * Append origin's host, serialized, to result.\n-\t\t * If origin's port is non-null, append a U+003A COLON character (:), and origin's port, serialized, to result.\n-\t\t * Return result.\n+\t\t * <li>If origin's port is non-null, append a U+003A COLON character (:),\n+\t\t * and origin's port, serialized, to result.\n+\t\t * <li>Return result.\n+\t\t * </ol>\n \t\t */\n \t\tpublic String origin() {\n \t\t\tString scheme = scheme();\n-\t\t\tif (scheme.equals(\"ftp\") || scheme.equals(\"http\") || scheme.equals(\"https\") || scheme.equals(\"ws\") || scheme.equals(\"wss\")) {\n+\t\t\tif (scheme.equals(\"ftp\") ||\n+\t\t\t\t\tscheme.equals(\"http\") || scheme.equals(\"https\") ||\n+\t\t\t\t\tscheme.equals(\"ws\") || scheme.equals(\"wss\")) {\n \t\t\t\tStringBuilder builder = new StringBuilder(scheme);\n \t\t\t\tbuilder.append(\"://\");\n \t\t\t\tbuilder.append(host());\n@@ -1773,8 +1833,9 @@ public String origin() {\n \t\t}\n \n \t\t/**\n-\t\t * A URL\u2019s scheme is an ASCII string that identifies the type of URL and can be used to dispatch a URL for\n-\t\t * further processing after parsing. It is initially the empty string.\n+\t\t * A URL\u2019s scheme is an ASCII string that identifies the type of URL and\n+\t\t * can be used to dispatch a URL for further processing after parsing.\n+\t\t * It is initially the empty string.\n \t\t */\n \t\tpublic String scheme() {\n \t\t\treturn this.scheme;\n@@ -1788,15 +1849,11 @@ public String protocol() {\n \t\t}\n \n \t\t/**\n-\t\t * A URL\u2019s username is an ASCII string identifying a username. It is initially the empty string.\n+\t\t * A URL\u2019s username is an ASCII string identifying a username.\n+\t\t * It is initially the empty string.\n \t\t */\n \t\tpublic String username() {\n-\t\t\tif (this.username != null) {\n-\t\t\t\treturn this.username.toString();\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn \"\";\n-\t\t\t}\n+\t\t\treturn (this.username != null ? this.username.toString() : \"\");\n \t\t}\n \n \t\tvoid appendToUsername(int codePoint) {\n@@ -1819,12 +1876,7 @@ public void appendToUsername(String s) {\n \t\t * A URL\u2019s password is an ASCII string identifying a password. It is initially the empty string.\n \t\t */\n \t\tpublic String password() {\n-\t\t\tif (this.password != null) {\n-\t\t\t\treturn this.password.toString();\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn \"\";\n-\t\t\t}\n+\t\t\treturn (this.password != null ? this.password.toString() : \"\");\n \t\t}\n \n \t\tvoid appendToPassword(int codePoint) {\n@@ -1844,7 +1896,8 @@ void appendToPassword(String s) {\n \t\t}\n \n \t\t/**\n-\t\t * A URL\u2019s host is {@code null} or a {@linkplain Host host}. It is initially {@code null}.\n+\t\t * A URL\u2019s host is {@code null} or a {@linkplain Host host}.\n+\t\t * It is initially {@code null}.\n \t\t */\n \t\t@Nullable\n \t\tpublic Host host() {\n@@ -1853,10 +1906,12 @@ public Host host() {\n \n \t\t/**\n \t\t *The host getter steps are:\n-\t\t * Let url be this\u2019s URL.\n-\t\t * If url\u2019s host is null, then return the empty string.\n-\t\t * If url\u2019s port is null, return url\u2019s host, serialized.\n-\t\t * Return url\u2019s host, serialized, followed by U+003A (:) and url\u2019s port, serialized.\n+\t\t * <ol>\n+\t\t * <li>Let url be this URL.\n+\t\t * <li>If url\u2019s host is null, then return the empty string.\n+\t\t * <li>If url\u2019s port is null, return url\u2019s host, serialized.\n+\t\t * <li>Return url\u2019s host, serialized, followed by U+003A (:) and url\u2019s port, serialized.\n+\t\t * </ol>\n \t\t */\n \t\tpublic String hostString() {\n \t\t\tif (host() == null) {\n@@ -1873,34 +1928,26 @@ public String hostString() {\n \n \t\tpublic String hostname() {\n \t\t\tHost host = host();\n-\t\t\tif (host == null) {\n-\t\t\t\treturn \"\";\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn host.toString();\n-\t\t\t}\n+\t\t\treturn (host != null ? host.toString() : \"\");\n \t\t}\n \n \t\t/**\n-\t\t * A URL\u2019s port is either null, a string representing a 16-bit unsigned integer  that identifies a networking\n-\t\t * port, or a string containing a uri template . It is initially {@code null}.\n+\t\t * A URL\u2019s port is either null, a string representing a 16-bit unsigned\n+\t\t * integer, or a string containing a uri template.\n+\t\t * <p>It is initially {@code null}.\n \t\t */\n \t\t@Nullable\n \t\tpublic Port port() {\n \t\t\treturn this.port;\n \t\t}\n \n \t\tpublic String portString() {\n-\t\t\tif (port() == null) {\n-\t\t\t\treturn \"\";\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn port().toString();\n-\t\t\t}\n+\t\t\treturn (port() != null ? port().toString() : \"\");\n \t\t}\n \n \t\t/**\n-\t\t * A URL\u2019s path is a URL {@linkplain Path path}, usually identifying a location. It is initially {@code \u00ab \u00bb}.\n+\t\t * A URL\u2019s path is a URL {@linkplain Path path}, usually identifying a location.\n+\t\t * <p>It is initially {@code \u00ab \u00bb}.\n \t\t */\n \t\tpublic Path path() {\n \t\t\treturn this.path;\n@@ -1925,22 +1972,20 @@ public void shortenPath() {\n \t\t}\n \n \t\t/**\n-\t\t * A URL\u2019s query is either {@code null} or an ASCII string. It is initially {@code null}.\n+\t\t * A URL\u2019s query is either {@code null} or an ASCII string.\n+\t\t * <p>It is initially {@code null}.\n \t\t */\n \t\t@Nullable\n \t\tpublic String query() {\n-\t\t\tif (this.query == null) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn this.query.toString();\n-\t\t\t}\n+\t\t\treturn (this.query != null ? this.query.toString() : null);\n \t\t}\n \n \t\t/**\n \t\t * The search getter steps are:\n-\t\t * If this\u2019s URL\u2019s query is either null or the empty string, then return the empty string.\n-\t\t * Return U+003F (?), followed by this\u2019s URL\u2019s query.\n+\t\t * <ol>\n+\t\t * <li>If this URL\u2019s query is either null or the empty string, then return the empty string.\n+\t\t * <li>Return U+003F (?), followed by this URL\u2019s query.\n+\t\t * </ol>\n \t\t */\n \t\tpublic String search() {\n \t\t\tString query = query();\n@@ -1953,32 +1998,26 @@ public String search() {\n \t\t}\n \n \t\t/**\n-\t\t * A URL\u2019s fragment is either {@code null}  or an ASCII string that can be used for further processing on the\n-\t\t * resource the URL\u2019s other components identify. It is initially {@code null}.\n+\t\t * A URL\u2019s fragment is either {@code null}  or an ASCII string\n+\t\t * that can be used for further processing on the resource the URL\u2019s\n+\t\t * other components identify.\n+\t\t * <p>It is initially {@code null}.\n \t\t */\n \t\t@Nullable\n \t\tpublic String fragment() {\n-\t\t\tif (this.fragment == null) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn this.fragment.toString();\n-\t\t\t}\n+\t\t\treturn (this.fragment != null ? this.fragment.toString() : null);\n \t\t}\n \n \t\t/**\n \t\t * The hash getter steps are:\n-\t\t * If this\u2019s URL\u2019s fragment is either null or the empty string, then return the empty string.\n-\t\t * Return U+0023 (#), followed by this\u2019s URL\u2019s fragment.\n+\t\t * <ol>\n+\t\t * <li>If this URL\u2019s fragment is either null or the empty string, then return the empty string.\n+\t\t * <li>Return U+0023 (#), followed by this\u2019s URL\u2019s fragment.\n+\t\t * </ol>\n \t\t */\n \t\tpublic String hash() {\n \t\t\tString fragment = fragment();\n-\t\t\tif (fragment == null || fragment.isEmpty()) {\n-\t\t\t\treturn \"\";\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn \"#\" + fragment;\n-\t\t\t}\n+\t\t\treturn (fragment != null && !fragment.isEmpty() ? \"#\" + fragment : \"\");\n \t\t}\n \n \t\tpublic String href() {\n@@ -1995,7 +2034,8 @@ public String href() {\n \t\t\t\t\t// Append url\u2019s username to output.\n \t\t\t\t\toutput.append(username());\n \t\t\t\t\tString password = password();\n-\t\t\t\t\t// If url\u2019s password is not the empty string, then append U+003A (:), followed by url\u2019s password, to output.\n+\t\t\t\t\t// If url\u2019s password is not the empty string, then append U+003A (:),\n+\t\t\t\t\t// followed by url\u2019s password, to output.\n \t\t\t\t\tif (!password.isEmpty()) {\n \t\t\t\t\t\toutput.append(':');\n \t\t\t\t\t\toutput.append(password);\n@@ -2012,7 +2052,8 @@ public String href() {\n \t\t\t\t\toutput.append(port());\n \t\t\t\t}\n \t\t\t}\n-\t\t\t// If url\u2019s host is null, url does not have an opaque path, url\u2019s path\u2019s size is greater than 1, and url\u2019s path[0] is the empty string, then append U+002F (/) followed by U+002E (.) to output.\n+\t\t\t// If url\u2019s host is null, url does not have an opaque path, url\u2019s path\u2019s size is greater than 1,\n+\t\t\t// and url\u2019s path[0] is the empty string, then append U+002F (/) followed by U+002E (.) to output.\n \t\t\telse if (!hasOpaquePath() &&\n \t\t\t\t\tpath() instanceof PathSegments pathSegments &&\n \t\t\t\t\tpathSegments.size() > 1 &&\n@@ -2027,7 +2068,8 @@ else if (!hasOpaquePath() &&\n \t\t\t\toutput.append('?');\n \t\t\t\toutput.append(query);\n \t\t\t}\n-\t\t\t// If exclude fragment is false and url\u2019s fragment is non-null, then append U+0023 (#), followed by url\u2019s fragment, to output.\n+\t\t\t// If exclude fragment is false and url\u2019s fragment is non-null, then append U+0023 (#),\n+\t\t\t// followed by url\u2019s fragment, to output.\n \t\t\tString fragment = fragment();\n \t\t\tif (fragment != null) {\n \t\t\t\toutput.append('#');\n@@ -2058,7 +2100,9 @@ public boolean equals(Object obj) {\n \n \t\t@Override\n \t\tpublic int hashCode() {\n-\t\t\treturn Objects.hash(this.scheme, this.username, this.password, this.host, this.port, this.path, this.query, this.fragment);\n+\t\t\treturn Objects.hash(\n+\t\t\t\t\tthis.scheme, this.username, this.password, this.host, this.port,\n+\t\t\t\t\tthis.path, this.query, this.fragment);\n \t\t}\n \n \t\t@Override\n@@ -2074,20 +2118,20 @@ public String toString() {\n \t\t\t\t\t\"fragment=\" + this.fragment + ']';\n \t\t}\n \n-\n \t}\n \n+\n \t/**\n \t * A host is a domain, an IP address, an opaque host, or an empty host.\n-\t * Typically a host serves as a network address, but it is sometimes used as\n+\t * Typically, a host serves as a network address, but it is sometimes used as\n \t * opaque identifier in URLs where a network address is not necessary.\n \t */\n \tsealed interface Host permits Domain, EmptyHost, IpAddressHost, OpaqueHost {\n \n-\n \t\t/**\n \t\t * The host parser takes a scalar value string input with an optional\n-\t\t * boolean isOpaque (default false), and then runs these steps. They return failure or a host.\n+\t\t * boolean isOpaque (default false), and then runs these steps.\n+\t\t * They return failure or a host.\n \t\t */\n \t\tstatic Host parse(String input, boolean isOpaque, UrlParser p) {\n \t\t\t// If input starts with U+005B ([), then:\n@@ -2097,7 +2141,8 @@ static Host parse(String input, boolean isOpaque, UrlParser p) {\n \t\t\t\tif (input.codePointAt(last) != ']') {\n \t\t\t\t\tthrow new InvalidUrlException(\"IPv6 address is missing the closing \\\"]\\\").\");\n \t\t\t\t}\n-\t\t\t\t// Return the result of IPv6 parsing input with its leading U+005B ([) and trailing U+005D (]) removed.\n+\t\t\t\t// Return the result of IPv6 parsing input\n+\t\t\t\t// with its leading U+005B ([) and trailing U+005D (]) removed.\n \t\t\t\tString ipv6Host = input.substring(1, last);\n \t\t\t\treturn new IpAddressHost(Ipv6Address.parse(ipv6Host));\n \t\t\t}\n@@ -2115,7 +2160,8 @@ static Host parse(String input, boolean isOpaque, UrlParser p) {\n \n \t\t\tfor (int i=0; i < asciiDomain.length(); i++) {\n \t\t\t\tint ch = asciiDomain.codePointAt(i);\n-\t\t\t\t// If asciiDomain contains a forbidden domain code point, domain-invalid-code-point validation error, return failure.\n+\t\t\t\t// If asciiDomain contains a forbidden domain code point,\n+\t\t\t\t// domain-invalid-code-point validation error, return failure.\n \t\t\t\tif (isForbiddenDomain(ch)) {\n \t\t\t\t\tthrow new InvalidUrlException(\"Invalid character \\\"\" + ch + \"\\\" in domain \\\"\" + input + \"\\\"\");\n \t\t\t\t}\n@@ -2158,9 +2204,9 @@ private static boolean endsInNumber(String input) {\n \t\t}\n \t}\n \n+\n \t/**\n-\t * A domain is a non-empty ASCII string that identifies a realm within a\n-\t * network. [RFC1034].\n+\t * A domain is a non-empty ASCII string that identifies a realm within a network. [RFC1034].\n \t */\n \tstatic final class Domain implements Host {\n \n@@ -2199,6 +2245,7 @@ public String toString() {\n \n \t}\n \n+\n \tstatic final class IpAddressHost implements Host {\n \n \t\tprivate final IpAddress address;\n@@ -2243,6 +2290,7 @@ public String toString() {\n \t\t}\n \t}\n \n+\n \tstatic final class OpaqueHost implements Host {\n \n \t\tprivate final String host;\n@@ -2252,26 +2300,32 @@ private OpaqueHost(String host) {\n \t\t}\n \n \t\t/**\n-\t\t * The opaque-host parser takes a scalar value string input, and then runs these steps. They return failure or\n-\t\t * an opaque host.\n+\t\t * The opaque-host parser takes a scalar value string input,\n+\t\t * and then runs these steps. They return failure or an opaque host.\n \t\t */\n \t\tpublic static OpaqueHost parse(String input, UrlParser p) {\n \t\t\tfor (int i = 0; i < input.length(); i++) {\n \t\t\t\tint ch = input.codePointAt(i);\n-\t\t\t\t// If input contains a forbidden host code point, host-invalid-code-point validation error, return failure.\n+\t\t\t\t// If input contains a forbidden host code point, h\n+\t\t\t\t// ost-invalid-code-point validation error, return failure.\n \t\t\t\tif (isForbiddenHost(ch)) {\n \t\t\t\t\tthrow new InvalidUrlException(\"An opaque host contains a forbidden host code point.\");\n \t\t\t\t}\n-\t\t\t\t// If input contains a code point that is not a URL code point and not U+0025 (%), invalid-URL-unit validation error.\n+\t\t\t\t// If input contains a code point that is not a URL code point and not U+0025 (%),\n+\t\t\t\t// invalid-URL-unit validation error.\n \t\t\t\tif (p.validate() && !isUrlCodePoint(ch) && ch != '%') {\n \t\t\t\t\tp.validationError(\"Code point \\\"\" + ch + \"\\\" is not a URL unit.\");\n \t\t\t\t}\n-\t\t\t\t//If input contains a U+0025 (%) and the two code points following it are not ASCII hex digits, invalid-URL-unit validation error.\n-\t\t\t\tif (p.validate() && ch == '%' && (input.length() - i < 2 || !isAsciiDigit(input.codePointAt(i + 1)) || !isAsciiDigit(input.codePointAt(i + 2)))) {\n+\t\t\t\t// If input contains a U+0025 (%) and the two code points following it\n+\t\t\t\t// are not ASCII hex digits, invalid-URL-unit validation error.\n+\t\t\t\tif (p.validate() && ch == '%' &&\n+\t\t\t\t\t\t(input.length() - i < 2 || !isAsciiDigit(input.codePointAt(i + 1)) ||\n+\t\t\t\t\t\t\t\t!isAsciiDigit(input.codePointAt(i + 2)))) {\n \t\t\t\t\tp.validationError(\"Code point \\\"\" + ch + \"\\\" is not a URL unit.\");\n \t\t\t\t}\n \t\t\t}\n-\t\t\t//Return the result of running UTF-8 percent-encode on input using the C0 control percent-encode set.\n+\t\t\t// Return the result of running UTF-8 percent-encode on input\n+\t\t\t// using the C0 control percent-encode set.\n \t\t\tString encoded = p.percentEncode(input, UrlParser::c0ControlPercentEncodeSet);\n \t\t\treturn new OpaqueHost(encoded);\n \t\t}\n@@ -2301,6 +2355,7 @@ public String toString() {\n \n \t}\n \n+\n \tstatic final class EmptyHost implements Host {\n \n \t\tstatic final EmptyHost INSTANCE = new EmptyHost();\n@@ -2325,10 +2380,11 @@ public String toString() {\n \n \t}\n \n-\tsealed interface IpAddress permits Ipv4Address, Ipv6Address {\n \n+\tsealed interface IpAddress permits Ipv4Address, Ipv6Address {\n \t}\n \n+\n \tstatic final class Ipv4Address implements IpAddress {\n \n \t\tprivate final int address;\n@@ -2341,7 +2397,8 @@ static final class Ipv4Address implements IpAddress {\n \t\t}\n \n \t\t/**\n-\t\t * The IPv4 serializer takes an IPv4 address {@code address} and then runs these steps. They return an ASCII string.\n+\t\t * The IPv4 serializer takes an IPv4 address {@code address} and then runs these steps.\n+\t\t * They return an ASCII string.\n \t\t */\n \t\tprivate static String serialize(int address) {\n \t\t\t//Let output be the empty string.\n@@ -2395,7 +2452,8 @@ public static Ipv4Address parse(String input, UrlParser p) {\n \t\t\t\telse {\n \t\t\t\t\tParseIpv4NumberSuccess success = (ParseIpv4NumberSuccess) result;\n \t\t\t\t\tif (p.validate() && success.validationError()) {\n-\t\t\t\t\t\tp.validationError(\"The IPv4 address contains numbers expressed using hexadecimal or octal digits.\");\n+\t\t\t\t\t\tp.validationError(\n+\t\t\t\t\t\t\t\t\"The IPv4 address contains numbers expressed using hexadecimal or octal digits.\");\n \t\t\t\t\t}\n \t\t\t\t\t// Append result to numbers.\n \t\t\t\t\tnumbers.add(success.number());\n@@ -2414,10 +2472,12 @@ public static Ipv4Address parse(String input, UrlParser p) {\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\t// If the last item in numbers is greater than or equal to 256^(5 \u2212 numbers\u2019s size), then return failure.\n+\t\t\t\t\t// If the last item in numbers is greater than or equal to 256^(5 \u2212 numbers\u2019s size),\n+\t\t\t\t\t// then return failure.\n \t\t\t\t\tdouble limit = Math.pow(256, (5 - numbers.size()));\n \t\t\t\t\tif (number >= limit) {\n-\t\t\t\t\t\tthrow new InvalidUrlException(\"IPv4 address part \" + number + \" exceeds \" + limit + \".'\");\n+\t\t\t\t\t\tthrow new InvalidUrlException(\n+\t\t\t\t\t\t\t\t\"IPv4 address part \" + number + \" exceeds \" + limit + \".'\");\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n@@ -2440,7 +2500,8 @@ public static Ipv4Address parse(String input, UrlParser p) {\n \t\t}\n \n \t\t/**\n-\t\t * The IPv4 number parser takes an ASCII string input and then runs these steps. They return failure or a tuple of a number and a boolean.\n+\t\t * The IPv4 number parser takes an ASCII string input and then runs these steps.\n+\t\t * They return failure or a tuple of a number and a boolean.\n \t\t */\n \t\tprivate static ParseIpv4NumberResult parseIpv4Number(String input) {\n \t\t\t// If input is the empty string, then return failure.\n@@ -2452,7 +2513,8 @@ private static ParseIpv4NumberResult parseIpv4Number(String input) {\n \t\t\t// Let R be 10.\n \t\t\tint r = 10;\n \t\t\tint len = input.length();\n-\t\t\t// If input contains at least two code points and the first two code points are either \"0X\" or \"0x\", then:\n+\t\t\t// If input contains at least two code points and\n+\t\t\t// the first two code points are either \"0X\" or \"0x\", then:\n \t\t\tif (len >= 2) {\n \t\t\t\tint ch0 = input.codePointAt(0);\n \t\t\t\tint ch1 = input.codePointAt(1);\n@@ -2464,7 +2526,8 @@ private static ParseIpv4NumberResult parseIpv4Number(String input) {\n \t\t\t\t\t// Set R to 16.\n \t\t\t\t\tr = 16;\n \t\t\t\t}\n-\t\t\t\t// Otherwise, if input contains at least two code points and the first code point is U+0030 (0), then:\n+\t\t\t\t// Otherwise, if input contains at least two code points and\n+\t\t\t\t// the first code point is U+0030 (0), then:\n \t\t\t\telse if (ch0 == '0') {\n \t\t\t\t\t// Set validationError to true.\n \t\t\t\t\tvalidationError = true;\n@@ -2487,7 +2550,8 @@ else if (ch0 == '0') {\n \t\t\t\t}\n \t\t\t}\n \t\t\ttry {\n-\t\t\t\t// Let output be the mathematical integer value that is represented by input in radix-R notation, using ASCII hex digits for digits with values 0 through 15.\n+\t\t\t\t// Let output be the mathematical integer value that is represented by\n+\t\t\t\t// input in radix-R notation, using ASCII hex digits for digits with values 0 through 15.\n \t\t\t\tint output = Integer.parseInt(input, r);\n \t\t\t\t// Return (output, validationError).\n \t\t\t\treturn new ParseIpv4NumberSuccess(output, validationError);\n@@ -2522,6 +2586,7 @@ public String toString() {\n \t\t}\n \t}\n \n+\n \tstatic final class Ipv6Address implements IpAddress {\n \n \t\tprivate final int[] pieces;\n@@ -2535,7 +2600,8 @@ private Ipv6Address(int[] pieces) {\n \t\t}\n \n \t\t/**\n-\t\t * The IPv6 parser takes a scalar value string input and then runs these steps. They return failure or an IPv6 address.\n+\t\t * The IPv6 parser takes a scalar value string input and then runs these steps.\n+\t\t * They return failure or an IPv6 address.\n \t\t */\n \t\tpublic static Ipv6Address parse(String input) {\n \t\t\t// Let address be a new IPv6 address whose IPv6 pieces are all 0.\n@@ -2550,7 +2616,8 @@ public static Ipv6Address parse(String input) {\n \t\t\tint c = (inputLength > 0) ? input.codePointAt(0) : EOF;\n \t\t\t// If c is U+003A (:), then:\n \t\t\tif (c == ':') {\n-\t\t\t\t// If remaining does not start with U+003A (:), IPv6-invalid-compression validation error, return failure.\n+\t\t\t\t// If remaining does not start with U+003A (:),\n+\t\t\t\t// IPv6-invalid-compression validation error, return failure.\n \t\t\t\tif (inputLength > 1 && input.codePointAt(1) != ':') {\n \t\t\t\t\tthrow new InvalidUrlException(\"IPv6 address begins with improper compression.\");\n \t\t\t\t}\n@@ -2583,7 +2650,9 @@ public static Ipv6Address parse(String input) {\n \t\t\t\t// Let value and length be 0.\n \t\t\t\tint value = 0;\n \t\t\t\tint length = 0;\n-\t\t\t\t// While length is less than 4 and c is an ASCII hex digit, set value to value \u00d7 0x10 + c interpreted as hexadecimal number, and increase pointer and length by 1.\n+\t\t\t\t// While length is less than 4 and c is an ASCII hex digit,\n+\t\t\t\t// set value to value \u00d7 0x10 + c interpreted as hexadecimal number,\n+\t\t\t\t// and increase pointer and length by 1.\n \t\t\t\twhile (length < 4 && isAsciiHexDigit(c)) {\n \t\t\t\t\tint cHex = Character.digit(c, 16);\n \t\t\t\t\tvalue = (value * 0x10) + cHex;\n@@ -2595,13 +2664,16 @@ public static Ipv6Address parse(String input) {\n \t\t\t\tif (c == '.') {\n \t\t\t\t\t// If length is 0, IPv4-in-IPv6-invalid-code-point validation error, return failure.\n \t\t\t\t\tif (length == 0) {\n-\t\t\t\t\t\tthrow new InvalidUrlException(\"IPv6 address with IPv4 address syntax: IPv4 part is empty.\");\n+\t\t\t\t\t\tthrow new InvalidUrlException(\n+\t\t\t\t\t\t\t\t\"IPv6 address with IPv4 address syntax: IPv4 part is empty.\");\n \t\t\t\t\t}\n \t\t\t\t\t// Decrease pointer by length.\n \t\t\t\t\tpointer -= length;\n-\t\t\t\t\t// If pieceIndex is greater than 6, IPv4-in-IPv6-too-many-pieces validation error, return failure.\n+\t\t\t\t\t// If pieceIndex is greater than 6,\n+\t\t\t\t\t// IPv4-in-IPv6-too-many-pieces validation error, return failure.\n \t\t\t\t\tif (pieceIndex > 6) {\n-\t\t\t\t\t\tthrow new InvalidUrlException(\"IPv6 address with IPv4 address syntax: IPv6 address has more than 6 pieces.\");\n+\t\t\t\t\t\tthrow new InvalidUrlException(\n+\t\t\t\t\t\t\t\t\"IPv6 address with IPv4 address syntax: IPv6 address has more than 6 pieces.\");\n \t\t\t\t\t}\n \t\t\t\t\t// Let numbersSeen be 0.\n \t\t\t\t\tint numbersSeen = 0;\n@@ -2619,13 +2691,16 @@ public static Ipv6Address parse(String input) {\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t// Otherwise, IPv4-in-IPv6-invalid-code-point validation error, return failure.\n \t\t\t\t\t\t\telse {\n-\t\t\t\t\t\t\t\tthrow new InvalidUrlException(\"IPv6 address with IPv4 address syntax: \" +\n-\t\t\t\t\t\t\t\t\t\t\"IPv4 part is empty or contains a non-ASCII digit.\");\n+\t\t\t\t\t\t\t\tthrow new InvalidUrlException(\n+\t\t\t\t\t\t\t\t\t\t\"IPv6 address with IPv4 address syntax: \" +\n+\t\t\t\t\t\t\t\t\t\t\t\t\"IPv4 part is empty or contains a non-ASCII digit.\");\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t\t// If c is not an ASCII digit, IPv4-in-IPv6-invalid-code-point validation error, return failure.\n+\t\t\t\t\t\t// If c is not an ASCII digit,\n+\t\t\t\t\t\t// IPv4-in-IPv6-invalid-code-point validation error, return failure.\n \t\t\t\t\t\tif (!isAsciiDigit(c)) {\n-\t\t\t\t\t\t\tthrow new InvalidUrlException(\"IPv6 address with IPv4 address syntax: IPv4 part contains a non-ASCII digit.\");\n+\t\t\t\t\t\t\tthrow new InvalidUrlException(\n+\t\t\t\t\t\t\t\t\t\"IPv6 address with IPv4 address syntax: IPv4 part contains a non-ASCII digit.\");\n \t\t\t\t\t\t}\n \t\t\t\t\t\t// While c is an ASCII digit:\n \t\t\t\t\t\twhile (isAsciiDigit(c)) {\n@@ -2635,17 +2710,21 @@ public static Ipv6Address parse(String input) {\n \t\t\t\t\t\t\tif (ipv4Piece == null) {\n \t\t\t\t\t\t\t\tipv4Piece = number;\n \t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t// Otherwise, if ipv4Piece is 0, IPv4-in-IPv6-invalid-code-point validation error, return failure.\n+\t\t\t\t\t\t\t// Otherwise, if ipv4Piece is 0,\n+\t\t\t\t\t\t\t// IPv4-in-IPv6-invalid-code-point validation error, return failure.\n \t\t\t\t\t\t\telse if (ipv4Piece == 0) {\n-\t\t\t\t\t\t\t\tthrow new InvalidUrlException(\"IPv6 address with IPv4 address syntax: IPv4 part contains a non-ASCII digit.\");\n+\t\t\t\t\t\t\t\tthrow new InvalidUrlException(\n+\t\t\t\t\t\t\t\t\t\t\"IPv6 address with IPv4 address syntax: IPv4 part contains a non-ASCII digit.\");\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t// Otherwise, set ipv4Piece to ipv4Piece \u00d7 10 + number.\n \t\t\t\t\t\t\telse {\n \t\t\t\t\t\t\t\tipv4Piece = ipv4Piece * 10 + number;\n \t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t// If ipv4Piece is greater than 255, IPv4-in-IPv6-out-of-range-part validation error, return failure.\n+\t\t\t\t\t\t\t// If ipv4Piece is greater than 255,\n+\t\t\t\t\t\t\t// IPv4-in-IPv6-out-of-range-part validation error, return failure.\n \t\t\t\t\t\t\tif (ipv4Piece > 255) {\n-\t\t\t\t\t\t\t\tthrow new InvalidUrlException(\"IPv6 address with IPv4 address syntax: IPv4 part exceeds 255.\");\n+\t\t\t\t\t\t\t\tthrow new InvalidUrlException(\n+\t\t\t\t\t\t\t\t\t\t\"IPv6 address with IPv4 address syntax: IPv4 part exceeds 255.\");\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t// Increase pointer by 1.\n \t\t\t\t\t\t\tpointer++;\n@@ -2661,9 +2740,11 @@ else if (ipv4Piece == 0) {\n \t\t\t\t\t\t}\n \t\t\t\t\t\tc = (pointer < inputLength) ? input.codePointAt(pointer) : EOF;\n \t\t\t\t\t}\n-\t\t\t\t\t// If numbersSeen is not 4, IPv4-in-IPv6-too-few-parts validation error, return failure.\n+\t\t\t\t\t// If numbersSeen is not 4,\n+\t\t\t\t\t// IPv4-in-IPv6-too-few-parts validation error, return failure.\n \t\t\t\t\tif (numbersSeen != 4) {\n-\t\t\t\t\t\tthrow new InvalidUrlException(\"IPv6 address with IPv4 address syntax: IPv4 address contains too few parts.\");\n+\t\t\t\t\t\tthrow new InvalidUrlException(\n+\t\t\t\t\t\t\t\t\"IPv6 address with IPv4 address syntax: IPv4 address contains too few parts.\");\n \t\t\t\t\t}\n \t\t\t\t\t// Break.\n \t\t\t\t\tbreak;\n@@ -2678,9 +2759,12 @@ else if (c == ':') {\n \t\t\t\t\t\tthrow new InvalidUrlException(\"IPv6 address unexpectedly ends.\");\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\t// Otherwise, if c is not the EOF code point, IPv6-invalid-code-point validation error, return failure.\n+\t\t\t\t// Otherwise, if c is not the EOF code point,\n+\t\t\t\t// IPv6-invalid-code-point validation error, return failure.\n \t\t\t\telse if (c != EOF) {\n-\t\t\t\t\tthrow new InvalidUrlException(\"IPv6 address contains \\\"\" + Character.toString(c) + \"\\\", which is neither an ASCII hex digit nor a ':'.\");\n+\t\t\t\t\tthrow new InvalidUrlException(\n+\t\t\t\t\t\t\t\"IPv6 address contains \\\"\" + Character.toString(c) + \"\\\", which is \" +\n+\t\t\t\t\t\t\t\t\t\"neither an ASCII hex digit nor a ':'.\");\n \t\t\t\t}\n \t\t\t\t// Set address[pieceIndex] to value.\n \t\t\t\taddress[pieceIndex] = value;\n@@ -2693,7 +2777,9 @@ else if (c != EOF) {\n \t\t\t\tint swaps = pieceIndex - compress;\n \t\t\t\t// Set pieceIndex to 7.\n \t\t\t\tpieceIndex = 7;\n-\t\t\t\t// While pieceIndex is not 0 and swaps is greater than 0, swap address[pieceIndex] with address[compress + swaps \u2212 1], and then decrease both pieceIndex and swaps by 1.\n+\t\t\t\t// While pieceIndex is not 0 and swaps is greater than 0,\n+\t\t\t\t// swap address[pieceIndex] with address[compress + swaps \u2212 1], and\n+\t\t\t\t// then decrease both pieceIndex and swaps by 1.\n \t\t\t\twhile (pieceIndex != 0 && swaps > 0) {\n \t\t\t\t\tint tmp = address[pieceIndex];\n \t\t\t\t\taddress[pieceIndex] = address[compress + swaps - 1];\n@@ -2702,7 +2788,8 @@ else if (c != EOF) {\n \t\t\t\t\tswaps--;\n \t\t\t\t}\n \t\t\t}\n-\t\t\t// Otherwise, if compress is null and pieceIndex is not 8, IPv6-too-few-pieces validation error, return failure.\n+\t\t\t// Otherwise, if compress is null and pieceIndex is not 8,\n+\t\t\t// IPv6-too-few-pieces validation error, return failure.\n \t\t\telse if (compress == null && pieceIndex != 8) {\n \t\t\t\tthrow new InvalidUrlException(\"An uncompressed IPv6 address contains fewer than 8 pieces.\");\n \t\t\t}\n@@ -2712,12 +2799,14 @@ else if (compress == null && pieceIndex != 8) {\n \n \n \t\t/**\n-\t\t * The IPv6 serializer takes an IPv6 address {@code address} and then runs these steps. They return an ASCII string.\n+\t\t * The IPv6 serializer takes an IPv6 address {@code address} and\n+\t\t * then runs these steps. They return an ASCII string.\n \t\t */\n \t\tprivate static String serialize(int[] address) {\n \t\t\t// Let output be the empty string.\n \t\t\tStringBuilder output = new StringBuilder();\n-\t\t\t// Let compress be an index to the first IPv6 piece in the first longest sequences of address\u2019s IPv6 pieces that are 0.\n+\t\t\t// Let compress be an index to the first IPv6 piece in\n+\t\t\t// the first longest sequences of address\u2019s IPv6 pieces that are 0.\n \t\t\tint compress = longestSequenceOf0Pieces(address);\n \t\t\t// Let ignore0 be false.\n \t\t\tboolean ignore0 = false;\n@@ -2741,7 +2830,8 @@ else if (ignore0) {\n \t\t\t\t\tignore0 = true;\n \t\t\t\t\tcontinue;\n \t\t\t\t}\n-\t\t\t\t// Append address[pieceIndex], represented as the shortest possible lowercase hexadecimal number, to output.\n+\t\t\t\t// Append address[pieceIndex], represented as\n+\t\t\t\t// the shortest possible lowercase hexadecimal number, to output.\n \t\t\t\toutput.append(Integer.toHexString(address[pieceIndex]));\n \t\t\t\t// If pieceIndex is not 7, then append U+003A (:) to output.\n \t\t\t\tif (pieceIndex != 7) {\n@@ -2771,7 +2861,8 @@ else if (start >= 0) {\n \t\t\t\t\tstart = -1;\n \t\t\t\t}\n \t\t\t}\n-\t\t\t// If there is no sequence of address\u2019s IPv6 pieces that are 0 that is longer than 1, then set compress to null.\n+\t\t\t// If there is no sequence of address\u2019s IPv6 pieces\n+\t\t\t// that are 0 that is longer than 1, then set compress to null.\n \t\t\tif (longestLength > 1) {\n \t\t\t\treturn longestStart;\n \t\t\t}\n@@ -2804,10 +2895,11 @@ public String toString() {\n \t\t}\n \t}\n \n-\tsealed interface Port permits StringPort, IntPort {\n \n+\tsealed interface Port permits StringPort, IntPort {\n \t}\n \n+\n \tstatic final class StringPort implements Port {\n \n \t\tprivate final String port;\n@@ -2826,6 +2918,7 @@ public String toString() {\n \t\t}\n \t}\n \n+\n \tstatic final class IntPort implements Port {\n \n \t\tprivate final int port;\n@@ -2845,6 +2938,7 @@ public String toString() {\n \n \t}\n \n+\n \tsealed interface Path permits PathSegment, PathSegments {\n \n \t\tvoid append(int codePoint);\n@@ -2862,6 +2956,7 @@ sealed interface Path permits PathSegment, PathSegments {\n \t\tString name();\n \t}\n \n+\n \tstatic final class PathSegment implements Path {\n \n \t\t@Nullable\n@@ -2967,6 +3062,7 @@ public String toString() {\n \t\t}\n \t}\n \n+\n \tstatic final class PathSegments implements Path {\n \n \t\tprivate final List<PathSegment> segments;\n@@ -3065,21 +3161,21 @@ public String toString() {\n \n \t}\n \n+\n \tprivate sealed interface ParseIpv4NumberResult permits ParseIpv4NumberFailure, ParseIpv4NumberSuccess {\n \t}\n \n+\n \tprivate record ParseIpv4NumberSuccess(int number, boolean validationError) implements ParseIpv4NumberResult {\n \t}\n \n+\n \tprivate static final class ParseIpv4NumberFailure implements ParseIpv4NumberResult {\n \n \t\tpublic static final ParseIpv4NumberFailure INSTANCE = new ParseIpv4NumberFailure();\n \n \t\tprivate ParseIpv4NumberFailure() {\n \t\t}\n-\n \t}\n \n-\n-\n }",
      "parent_sha": "98bee41630059b566178ce18d047f24df7b8fa11"
    }
  },
  {
    "oid": "2ef20f63bc97cb4612befdc9d63cab1554694992",
    "message": "Remove assertion making locations mandatory\n\nThis change finishes work started in SPR-12133.\n\nIssue: SPR-12133",
    "date": "2014-09-02T08:44:08Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/2ef20f63bc97cb4612befdc9d63cab1554694992",
    "details": {
      "sha": "e36c08c590597819f171cbe223046211637336ce",
      "filename": "spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/2ef20f63bc97cb4612befdc9d63cab1554694992/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fresource%2FResourceHttpRequestHandler.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/2ef20f63bc97cb4612befdc9d63cab1554694992/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fresource%2FResourceHttpRequestHandler.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fresource%2FResourceHttpRequestHandler.java?ref=2ef20f63bc97cb4612befdc9d63cab1554694992",
      "patch": "@@ -104,7 +104,7 @@ public ResourceHttpRequestHandler() {\n \t * for serving static resources.\n \t */\n \tpublic void setLocations(List<Resource> locations) {\n-\t\tAssert.notEmpty(locations, \"Locations list must not be empty\");\n+\t\tAssert.notNull(locations, \"Locations list must not be null\");\n \t\tthis.locations.clear();\n \t\tthis.locations.addAll(locations);\n \t}",
      "parent_sha": "da8771d5a9b9e73e94ce2bddb94a8617c67a8f12"
    }
  },
  {
    "oid": "3a36d51473a8f3212601c6550c6ffaa3d7840bb2",
    "message": "Polish\n\nSee gh-29246",
    "date": "2023-03-30T12:49:11Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/3a36d51473a8f3212601c6550c6ffaa3d7840bb2",
    "details": {
      "sha": "8034870a00e23d54de57ca38bf5dae5e79ba8ab9",
      "filename": "spring-context/src/test/java/org/springframework/context/generator/ApplicationContextAotGeneratorRuntimeHintsTests.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/3a36d51473a8f3212601c6550c6ffaa3d7840bb2/spring-context%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcontext%2Fgenerator%2FApplicationContextAotGeneratorRuntimeHintsTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/3a36d51473a8f3212601c6550c6ffaa3d7840bb2/spring-context%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcontext%2Fgenerator%2FApplicationContextAotGeneratorRuntimeHintsTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-context%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcontext%2Fgenerator%2FApplicationContextAotGeneratorRuntimeHintsTests.java?ref=3a36d51473a8f3212601c6550c6ffaa3d7840bb2",
      "patch": "@@ -117,7 +117,7 @@ default void destroy() {\n \t}\n \n \tpublic static class InheritedDestroy implements Destroyable {\n-\t\t\n+\n \t}\n \n }",
      "parent_sha": "fe6589d5afdc049a9f136a039e6ddf0f7325c171"
    }
  },
  {
    "oid": "0f06771249e58be3e90c061a963bb75f4448ac4b",
    "message": "fixed typo",
    "date": "2009-10-14T10:45:17Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/0f06771249e58be3e90c061a963bb75f4448ac4b",
    "details": {
      "sha": "8d4ce6f3190a631a0e25c9f6d2261f70130503f7",
      "filename": "org.springframework.web/src/main/java/org/springframework/web/bind/annotation/CookieValue.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/0f06771249e58be3e90c061a963bb75f4448ac4b/org.springframework.web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fbind%2Fannotation%2FCookieValue.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/0f06771249e58be3e90c061a963bb75f4448ac4b/org.springframework.web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fbind%2Fannotation%2FCookieValue.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fbind%2Fannotation%2FCookieValue.java?ref=0f06771249e58be3e90c061a963bb75f4448ac4b",
      "patch": "@@ -54,7 +54,7 @@\n \t * of the header missing in the request. Switch this to <code>false</code>\n \t * if you prefer a <code>null</value> in case of the header missing.\n \t * <p>Alternatively, provide a {@link #defaultValue() defaultValue},\n-\t * which implicitely sets this flag to <code>false</code>.\n+\t * which implicitly sets this flag to <code>false</code>.\n \t */\n \tboolean required() default true;\n ",
      "parent_sha": "523dba7285163c96934030387817a0a7ff290fb2"
    }
  },
  {
    "oid": "04373056696f62405955d26a18cee8ba8f72f49a",
    "message": "nested revision",
    "date": "2009-10-06T21:40:59Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/04373056696f62405955d26a18cee8ba8f72f49a",
    "details": {
      "sha": "9d6d9d474be616027d20b969addccea9b18fc891",
      "filename": "org.springframework.context/src/test/java/org/springframework/mapping/support/SpelMapperTests.java",
      "status": "modified",
      "additions": 3,
      "deletions": 9,
      "changes": 12,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/04373056696f62405955d26a18cee8ba8f72f49a/org.springframework.context%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fmapping%2Fsupport%2FSpelMapperTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/04373056696f62405955d26a18cee8ba8f72f49a/org.springframework.context%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fmapping%2Fsupport%2FSpelMapperTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.context%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fmapping%2Fsupport%2FSpelMapperTests.java?ref=04373056696f62405955d26a18cee8ba8f72f49a",
      "patch": "@@ -132,23 +132,17 @@ public void mapBeanDeep() {\n \t@Test\n \tpublic void mapBeanNested() {\n \t\tPersonDto source = new PersonDto();\n-\t\tsource.setFullName(\"Keith Donald\");\n-\t\tsource.setAge(\"31\");\n-\t\tsource.setSport(\"FOOTBALL\");\n \t\tNestedDto nested = new NestedDto();\n \t\tnested.foo = \"bar\";\n \t\tsource.setNested(nested);\n \n \t\tPerson target = new Person();\n \n-\t\tmapper.addMapping(\"fullName\", \"name\");\n-\t\tmapper.addMapping(\"sport\", \"favoriteSport\");\n-\t\tmapper.addMapping(\"nested\", \"nested\");\n+\t\tmapper.setAutoMappingEnabled(false);\n+\t\tmapper.addMapping(\"nested\");\n \t\tmapper.map(source, target);\n \n-\t\tassertEquals(\"Keith Donald\", target.name);\n-\t\tassertEquals(31, target.age);\n-\t\tassertEquals(Sport.FOOTBALL, target.favoriteSport);\n+\t\tassertEquals(\"bar\", target.nested.foo);\n \t}\n \n \t@Test",
      "parent_sha": "0f5074db2b5fd37f25976449d6e270ccd47fab93"
    }
  },
  {
    "oid": "7da13e7ad1867b8ccf7947671cfb3e090654aa85",
    "message": "compatibility with OpenJPA 2.0 (support for persistence.xml versioning; SPR-6975)",
    "date": "2010-03-12T23:10:06Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/7da13e7ad1867b8ccf7947671cfb3e090654aa85",
    "details": {
      "sha": "f8d474ea18fdaea28bc33f21387cbfdf1ce95e66",
      "filename": "org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceUnitReader.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/7da13e7ad1867b8ccf7947671cfb3e090654aa85/org.springframework.orm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fpersistenceunit%2FPersistenceUnitReader.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/7da13e7ad1867b8ccf7947671cfb3e090654aa85/org.springframework.orm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fpersistenceunit%2FPersistenceUnitReader.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.orm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fpersistenceunit%2FPersistenceUnitReader.java?ref=7da13e7ad1867b8ccf7947671cfb3e090654aa85",
      "patch": "@@ -51,6 +51,8 @@\n  */\n class PersistenceUnitReader {\n \n+\tprivate static final String PERSISTENCE_VERSION = \"version\";\n+\n \tprivate static final String PERSISTENCE_UNIT = \"persistence-unit\";\n \n \tprivate static final String UNIT_NAME = \"name\";\n@@ -170,10 +172,11 @@ protected List<SpringPersistenceUnitInfo> parseDocument(\n \t\t\tResource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException {\n \n \t\tElement persistence = document.getDocumentElement();\n+\t\tString version = persistence.getAttribute(PERSISTENCE_VERSION);\n \t\tURL unitRootURL = determinePersistenceUnitRootUrl(resource);\n \t\tList<Element> units = DomUtils.getChildElementsByTagName(persistence, PERSISTENCE_UNIT);\n \t\tfor (Element unit : units) {\n-\t\t\tSpringPersistenceUnitInfo info = parsePersistenceUnitInfo(unit);\n+\t\t\tSpringPersistenceUnitInfo info = parsePersistenceUnitInfo(unit, version);\n \t\t\tinfo.setPersistenceUnitRootUrl(unitRootURL);\n \t\t\tinfos.add(info);\n \t\t}\n@@ -224,9 +227,12 @@ protected URL determinePersistenceUnitRootUrl(Resource resource) throws IOExcept\n \t/**\n \t * Parse the unit info DOM element.\n \t */\n-\tprotected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit) throws IOException {\n+\tprotected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version) throws IOException { // JC: Changed\n \t\tSpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo();\n \n+\t\t// set JPA version (1.0 or 2.0)\n+\t\tunitInfo.setPersistenceXMLSchemaVersion(version);\n+\n \t\t// set unit name\n \t\tunitInfo.setPersistenceUnitName(persistenceUnit.getAttribute(UNIT_NAME).trim());\n ",
      "parent_sha": "a0e40a561071ab4e7bdc7f50725a49d7105959d6"
    }
  },
  {
    "oid": "49570ae2f391332ead8818b0640716dc325990b7",
    "message": "Fix typo",
    "date": "2019-05-07T12:25:22Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/49570ae2f391332ead8818b0640716dc325990b7",
    "details": {
      "sha": "e76e9abd1bef99006713bf7674ea9c856256419c",
      "filename": "spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/49570ae2f391332ead8818b0640716dc325990b7/spring-websocket%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fsocket%2Fmessaging%2FSubProtocolWebSocketHandler.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/49570ae2f391332ead8818b0640716dc325990b7/spring-websocket%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fsocket%2Fmessaging%2FSubProtocolWebSocketHandler.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-websocket%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fsocket%2Fmessaging%2FSubProtocolWebSocketHandler.java?ref=49570ae2f391332ead8818b0640716dc325990b7",
      "patch": "@@ -254,7 +254,7 @@ public String getStatsInfo() {\n \t}\n \n \t/**\n-\t * Return a {@link Stats} object that containers various session counters.\n+\t * Return a {@link Stats} object that contains various session counters.\n \t * @since 5.2\n \t */\n \tpublic Stats getStats() {",
      "parent_sha": "e3fa4e13503f5cb1427c308b6044140c6b016979"
    }
  },
  {
    "oid": "d9af4d65994a85c66988c01ffb0d2e8c4ca76a81",
    "message": "ResourceBundleMessageSource uses ConcurrentHashMaps instead of synchronization\n\nIssue: https://jira.spring.io/browse/SPR-16235",
    "date": "2018-01-09T21:12:03Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/d9af4d65994a85c66988c01ffb0d2e8c4ca76a81",
    "details": {
      "sha": "5b71fa19949fa4f79defcc03a7bf88c3e7b7cd2c",
      "filename": "spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java",
      "status": "modified",
      "additions": 52,
      "deletions": 46,
      "changes": 98,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/d9af4d65994a85c66988c01ffb0d2e8c4ca76a81/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcontext%2Fsupport%2FResourceBundleMessageSource.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/d9af4d65994a85c66988c01ffb0d2e8c4ca76a81/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcontext%2Fsupport%2FResourceBundleMessageSource.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcontext%2Fsupport%2FResourceBundleMessageSource.java?ref=d9af4d65994a85c66988c01ffb0d2e8c4ca76a81",
      "patch": "@@ -33,6 +33,7 @@\n import java.util.PropertyResourceBundle;\n import java.util.ResourceBundle;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n \n import org.springframework.beans.factory.BeanClassLoaderAware;\n import org.springframework.lang.Nullable;\n@@ -80,7 +81,7 @@ public class ResourceBundleMessageSource extends AbstractResourceBasedMessageSou\n \t * This allows for very efficient hash lookups, significantly faster\n \t * than the ResourceBundle class's own cache.\n \t */\n-\tprivate final Map<String, Map<Locale, ResourceBundle>> cachedResourceBundles = new HashMap<>();\n+\tprivate final Map<String, Map<Locale, ResourceBundle>> cachedResourceBundles = new ConcurrentHashMap<>();\n \n \t/**\n \t * Cache to hold already generated MessageFormats.\n@@ -90,7 +91,7 @@ public class ResourceBundleMessageSource extends AbstractResourceBasedMessageSou\n \t * very efficient hash lookups without concatenated keys.\n \t * @see #getMessageFormat\n \t */\n-\tprivate final Map<ResourceBundle, Map<String, Map<Locale, MessageFormat>>> cachedBundleMessageFormats = new HashMap<>();\n+\tprivate final Map<ResourceBundle, Map<String, Map<Locale, MessageFormat>>> cachedBundleMessageFormats = new ConcurrentHashMap<>();\n \n \n \t/**\n@@ -178,31 +179,32 @@ protected ResourceBundle getResourceBundle(String basename, Locale locale) {\n \t\t}\n \t\telse {\n \t\t\t// Cache forever: prefer locale cache over repeated getBundle calls.\n-\t\t\tsynchronized (this.cachedResourceBundles) {\n-\t\t\t\tMap<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename);\n-\t\t\t\tif (localeMap != null) {\n-\t\t\t\t\tResourceBundle bundle = localeMap.get(locale);\n-\t\t\t\t\tif (bundle != null) {\n-\t\t\t\t\t\treturn bundle;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\ttry {\n-\t\t\t\t\tResourceBundle bundle = doGetBundle(basename, locale);\n-\t\t\t\t\tif (localeMap == null) {\n-\t\t\t\t\t\tlocaleMap = new HashMap<>();\n-\t\t\t\t\t\tthis.cachedResourceBundles.put(basename, localeMap);\n-\t\t\t\t\t}\n-\t\t\t\t\tlocaleMap.put(locale, bundle);\n+\t\t\tMap<Locale, ResourceBundle> localeMap = this.cachedResourceBundles.get(basename);\n+\t\t\tif (localeMap != null) {\n+\t\t\t\tResourceBundle bundle = localeMap.get(locale);\n+\t\t\t\tif (bundle != null) {\n \t\t\t\t\treturn bundle;\n \t\t\t\t}\n-\t\t\t\tcatch (MissingResourceException ex) {\n-\t\t\t\t\tif (logger.isWarnEnabled()) {\n-\t\t\t\t\t\tlogger.warn(\"ResourceBundle [\" + basename + \"] not found for MessageSource: \" + ex.getMessage());\n+\t\t\t}\n+\t\t\ttry {\n+\t\t\t\tResourceBundle bundle = doGetBundle(basename, locale);\n+\t\t\t\tif (localeMap == null) {\n+\t\t\t\t\tlocaleMap = new ConcurrentHashMap<>();\n+\t\t\t\t\tMap<Locale, ResourceBundle> existing = this.cachedResourceBundles.putIfAbsent(basename, localeMap);\n+\t\t\t\t\tif (existing != null) {\n+\t\t\t\t\t\tlocaleMap = existing;\n \t\t\t\t\t}\n-\t\t\t\t\t// Assume bundle not found\n-\t\t\t\t\t// -> do NOT throw the exception to allow for checking parent message source.\n-\t\t\t\t\treturn null;\n \t\t\t\t}\n+\t\t\t\tlocaleMap.put(locale, bundle);\n+\t\t\t\treturn bundle;\n+\t\t\t}\n+\t\t\tcatch (MissingResourceException ex) {\n+\t\t\t\tif (logger.isWarnEnabled()) {\n+\t\t\t\t\tlogger.warn(\"ResourceBundle [\" + basename + \"] not found for MessageSource: \" + ex.getMessage());\n+\t\t\t\t}\n+\t\t\t\t// Assume bundle not found\n+\t\t\t\t// -> do NOT throw the exception to allow for checking parent message source.\n+\t\t\t\treturn null;\n \t\t\t}\n \t\t}\n \t}\n@@ -249,36 +251,40 @@ protected ResourceBundle loadBundle(Reader reader) throws IOException {\n \tprotected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale)\n \t\t\tthrows MissingResourceException {\n \n-\t\tsynchronized (this.cachedBundleMessageFormats) {\n-\t\t\tMap<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle);\n-\t\t\tMap<Locale, MessageFormat> localeMap = null;\n-\t\t\tif (codeMap != null) {\n-\t\t\t\tlocaleMap = codeMap.get(code);\n-\t\t\t\tif (localeMap != null) {\n-\t\t\t\t\tMessageFormat result = localeMap.get(locale);\n-\t\t\t\t\tif (result != null) {\n-\t\t\t\t\t\treturn result;\n-\t\t\t\t\t}\n+\t\tMap<String, Map<Locale, MessageFormat>> codeMap = this.cachedBundleMessageFormats.get(bundle);\n+\t\tMap<Locale, MessageFormat> localeMap = null;\n+\t\tif (codeMap != null) {\n+\t\t\tlocaleMap = codeMap.get(code);\n+\t\t\tif (localeMap != null) {\n+\t\t\t\tMessageFormat result = localeMap.get(locale);\n+\t\t\t\tif (result != null) {\n+\t\t\t\t\treturn result;\n \t\t\t\t}\n \t\t\t}\n+\t\t}\n \n-\t\t\tString msg = getStringOrNull(bundle, code);\n-\t\t\tif (msg != null) {\n-\t\t\t\tif (codeMap == null) {\n-\t\t\t\t\tcodeMap = new HashMap<>();\n-\t\t\t\t\tthis.cachedBundleMessageFormats.put(bundle, codeMap);\n+\t\tString msg = getStringOrNull(bundle, code);\n+\t\tif (msg != null) {\n+\t\t\tif (codeMap == null) {\n+\t\t\t\tcodeMap = new ConcurrentHashMap<>();\n+\t\t\t\tMap<String, Map<Locale, MessageFormat>> existing = this.cachedBundleMessageFormats.putIfAbsent(bundle, codeMap);\n+\t\t\t\tif (existing != null) {\n+\t\t\t\t\tcodeMap = existing;\n \t\t\t\t}\n-\t\t\t\tif (localeMap == null) {\n-\t\t\t\t\tlocaleMap = new HashMap<>();\n-\t\t\t\t\tcodeMap.put(code, localeMap);\n+\t\t\t}\n+\t\t\tif (localeMap == null) {\n+\t\t\t\tlocaleMap = new ConcurrentHashMap<>();\n+\t\t\t\tMap<Locale, MessageFormat> existing = codeMap.putIfAbsent(code, localeMap);\n+\t\t\t\tif (existing != null) {\n+\t\t\t\t\tlocaleMap = existing;\n \t\t\t\t}\n-\t\t\t\tMessageFormat result = createMessageFormat(msg, locale);\n-\t\t\t\tlocaleMap.put(locale, result);\n-\t\t\t\treturn result;\n \t\t\t}\n-\n-\t\t\treturn null;\n+\t\t\tMessageFormat result = createMessageFormat(msg, locale);\n+\t\t\tlocaleMap.put(locale, result);\n+\t\t\treturn result;\n \t\t}\n+\n+\t\treturn null;\n \t}\n \n \t/**",
      "parent_sha": "f72318a0aeb7043023c2963f5db9cd7643c28bbc"
    }
  },
  {
    "oid": "1b0b2693708c5de003805630a1c469c50e9d9139",
    "message": "DefaultServerResponseBuilder uses Reactor's new thenEmpty method (fixing deprecation error)",
    "date": "2016-10-27T15:41:33Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/1b0b2693708c5de003805630a1c469c50e9d9139",
    "details": {
      "sha": "f7548e6b43c81511ab36834a13a3a0ea17880501",
      "filename": "spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultServerResponseBuilder.java",
      "status": "modified",
      "additions": 14,
      "deletions": 25,
      "changes": 39,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/1b0b2693708c5de003805630a1c469c50e9d9139/spring-web-reactive%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Ffunction%2FDefaultServerResponseBuilder.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/1b0b2693708c5de003805630a1c469c50e9d9139/spring-web-reactive%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Ffunction%2FDefaultServerResponseBuilder.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web-reactive%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Ffunction%2FDefaultServerResponseBuilder.java?ref=1b0b2693708c5de003805630a1c469c50e9d9139",
      "patch": "@@ -21,7 +21,6 @@\n import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.LinkedHashMap;\n import java.util.LinkedHashSet;\n import java.util.Locale;\n@@ -60,10 +59,12 @@ class DefaultServerResponseBuilder implements ServerResponse.BodyBuilder {\n \n \tprivate final HttpHeaders headers = new HttpHeaders();\n \n+\n \tpublic DefaultServerResponseBuilder(int statusCode) {\n \t\tthis.statusCode = statusCode;\n \t}\n \n+\n \t@Override\n \tpublic ServerResponse.BodyBuilder header(String headerName, String... headerValues) {\n \t\tfor (String headerValue : headerValues) {\n@@ -152,7 +153,7 @@ public ServerResponse<Void> build() {\n \tpublic <T extends Publisher<Void>> ServerResponse<T> build(T voidPublisher) {\n \t\tAssert.notNull(voidPublisher, \"'voidPublisher' must not be null\");\n \t\treturn body(BodyInserter.of(\n-\t\t\t\t(response, context) -> Flux.from(voidPublisher).then(response.setComplete()),\n+\t\t\t\t(response, context) -> Flux.from(voidPublisher).thenEmpty(response.setComplete()),\n \t\t\t\t() -> null));\n \t}\n \n@@ -173,21 +174,6 @@ public ServerResponse<Rendering> render(String name, Object... modelAttributes)\n \t\treturn render(name, toModelMap(modelAttributes));\n \t}\n \n-\tprivate static Map<String, Object> toModelMap(Object[] modelAttributes) {\n-\t\tif (!ObjectUtils.isEmpty(modelAttributes)) {\n-\t\t\treturn Arrays.stream(modelAttributes)\n-\t\t\t\t\t.filter(o -> !isEmptyCollection(o))\n-\t\t\t\t\t.collect(Collectors.toMap(Conventions::getVariableName, o -> o));\n-\t\t}\n-\t\telse {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tprivate static boolean isEmptyCollection(Object o) {\n-\t\treturn o instanceof Collection && ((Collection<?>) o).isEmpty();\n-\t}\n-\n \t@Override\n \tpublic ServerResponse<Rendering> render(String name, Map<String, ?> model) {\n \t\tAssert.hasLength(name, \"'name' must not be empty\");\n@@ -198,14 +184,22 @@ public ServerResponse<Rendering> render(String name, Map<String, ?> model) {\n \t\treturn new RenderingServerResponse(this.statusCode, this.headers, name, modelMap);\n \t}\n \n+\tprivate Map<String, Object> toModelMap(Object[] modelAttributes) {\n+\t\tif (ObjectUtils.isEmpty(modelAttributes)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn Arrays.stream(modelAttributes)\n+\t\t\t\t.filter(val -> !ObjectUtils.isEmpty(val))\n+\t\t\t\t.collect(Collectors.toMap(Conventions::getVariableName, val -> val));\n+\t}\n+\n \n \tprivate static abstract class AbstractServerResponse<T> implements ServerResponse<T> {\n \n \t\tprivate final int statusCode;\n \n \t\tprivate final HttpHeaders headers;\n \n-\n \t\tprotected AbstractServerResponse(int statusCode, HttpHeaders headers) {\n \t\t\tthis.statusCode = statusCode;\n \t\t\tthis.headers = HttpHeaders.readOnlyHttpHeaders(headers);\n@@ -234,11 +228,11 @@ protected void writeStatusAndHeaders(ServerHttpResponse response) {\n \t\t}\n \t}\n \n+\n \tprivate static final class BodyInserterServerResponse<T> extends AbstractServerResponse<T> {\n \n \t\tprivate final BodyInserter<T, ? super ServerHttpResponse> inserter;\n \n-\n \t\tpublic BodyInserterServerResponse(int statusCode, HttpHeaders headers,\n \t\t\t\tBodyInserter<T, ? super ServerHttpResponse> inserter) {\n \n@@ -262,7 +256,6 @@ public Supplier<Stream<HttpMessageWriter<?>>> messageWriters() {\n \t\t\t\t}\n \t\t\t});\n \t\t}\n-\n \t}\n \n \n@@ -274,8 +267,7 @@ private static final class RenderingServerResponse extends AbstractServerRespons\n \n \t\tprivate final Rendering rendering;\n \n-\t\tpublic RenderingServerResponse(int statusCode, HttpHeaders headers, String name,\n-\t\t\t\tMap<String, Object> model) {\n+\t\tpublic RenderingServerResponse(int statusCode, HttpHeaders headers, String name, Map<String, Object> model) {\n \t\t\tsuper(statusCode, headers);\n \t\t\tthis.name = name;\n \t\t\tthis.model = model;\n@@ -314,9 +306,6 @@ public Map<String, Object> model() {\n \t\t\t\treturn model;\n \t\t\t}\n \t\t}\n-\n-\n \t}\n \n-\n }",
      "parent_sha": "5c9350b8cb8678292ff5887da4ba207fbbeb67d1"
    }
  },
  {
    "oid": "54d083a6f836a80342143b8c4b8855bca0af7f21",
    "message": "Added proper synchronization and not-null check to SimpleMessageListenerContainer's doShutdown\n\nIssue: SPR-9930",
    "date": "2012-10-31T08:38:11Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/54d083a6f836a80342143b8c4b8855bca0af7f21",
    "details": {
      "sha": "3bd88b84baa6d0202f9fe7abb0f077ffb481bdc1",
      "filename": "spring-jms/src/main/java/org/springframework/jms/listener/SimpleMessageListenerContainer.java",
      "status": "modified",
      "additions": 11,
      "deletions": 7,
      "changes": 18,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/54d083a6f836a80342143b8c4b8855bca0af7f21/spring-jms%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fjms%2Flistener%2FSimpleMessageListenerContainer.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/54d083a6f836a80342143b8c4b8855bca0af7f21/spring-jms%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fjms%2Flistener%2FSimpleMessageListenerContainer.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-jms%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fjms%2Flistener%2FSimpleMessageListenerContainer.java?ref=54d083a6f836a80342143b8c4b8855bca0af7f21",
      "patch": "@@ -351,13 +351,17 @@ protected void processMessage(Message message, Session session) {\n \t */\n \t@Override\n \tprotected void doShutdown() throws JMSException {\n-\t\tlogger.debug(\"Closing JMS MessageConsumers\");\n-\t\tfor (MessageConsumer consumer : this.consumers) {\n-\t\t\tJmsUtils.closeMessageConsumer(consumer);\n-\t\t}\n-\t\tlogger.debug(\"Closing JMS Sessions\");\n-\t\tfor (Session session : this.sessions) {\n-\t\t\tJmsUtils.closeSession(session);\n+\t\tsynchronized (this.consumersMonitor) {\n+\t\t\tif (this.consumers != null) {\n+\t\t\t\tlogger.debug(\"Closing JMS MessageConsumers\");\n+\t\t\t\tfor (MessageConsumer consumer : this.consumers) {\n+\t\t\t\t\tJmsUtils.closeMessageConsumer(consumer);\n+\t\t\t\t}\n+\t\t\t\tlogger.debug(\"Closing JMS Sessions\");\n+\t\t\t\tfor (Session session : this.sessions) {\n+\t\t\t\t\tJmsUtils.closeSession(session);\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n \t}\n ",
      "parent_sha": "1acd5cff8f1fd984388918f9f4b420f3f6360ceb"
    }
  },
  {
    "oid": "c04fa858fc3344b8d8a9b01b3b07ce0d00d51676",
    "message": "Partially revert e1200f34e735769fcc9bac86059d56312460e132\n\nSyntax for this try-with-resources use case only permitted on Java 9+.",
    "date": "2022-01-04T15:20:55Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/c04fa858fc3344b8d8a9b01b3b07ce0d00d51676",
    "details": {
      "sha": "c27fae2c07926a66dd3018ecadeccdc63a80e280",
      "filename": "spring-context-indexer/src/main/java/org/springframework/context/index/processor/MetadataStore.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/c04fa858fc3344b8d8a9b01b3b07ce0d00d51676/spring-context-indexer%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcontext%2Findex%2Fprocessor%2FMetadataStore.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/c04fa858fc3344b8d8a9b01b3b07ce0d00d51676/spring-context-indexer%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcontext%2Findex%2Fprocessor%2FMetadataStore.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-context-indexer%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcontext%2Findex%2Fprocessor%2FMetadataStore.java?ref=c04fa858fc3344b8d8a9b01b3b07ce0d00d51676",
      "patch": "@@ -62,9 +62,12 @@ public void writeMetadata(CandidateComponentsMetadata metadata) throws IOExcepti\n \n \n \tprivate CandidateComponentsMetadata readMetadata(InputStream in) throws IOException {\n-\t\ttry (in) {\n+\t\ttry {\n \t\t\treturn PropertiesMarshaller.read(in);\n \t\t}\n+\t\tfinally {\n+\t\t\tin.close();\n+\t\t}\n \t}\n \n \tprivate FileObject getMetadataResource() throws IOException {",
      "parent_sha": "c3ce4f0f90a0793bf4aa758a929b794d002a1428"
    }
  },
  {
    "oid": "d331c5d1c99a2cb6d6932c98b96433e6f9c62c79",
    "message": "correctly handle ParseException from Formatter for String->String case (SPR-8944)",
    "date": "2011-12-22T15:30:22Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/d331c5d1c99a2cb6d6932c98b96433e6f9c62c79",
    "details": {
      "sha": "9776b460b76ca92edf73a35518097a3643d233a1",
      "filename": "org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/d331c5d1c99a2cb6d6932c98b96433e6f9c62c79/org.springframework.beans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbeans%2FTypeConverterDelegate.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/d331c5d1c99a2cb6d6932c98b96433e6f9c62c79/org.springframework.beans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbeans%2FTypeConverterDelegate.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.beans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbeans%2FTypeConverterDelegate.java?ref=d331c5d1c99a2cb6d6932c98b96433e6f9c62c79",
      "patch": "@@ -244,7 +244,7 @@ else if (convertedValue instanceof String && !requiredType.isInstance(convertedV\n \t\t}\n \n \t\tif (firstAttemptEx != null) {\n-\t\t\tif (editor == null) {\n+\t\t\tif (editor == null && convertedValue == newValue) {\n \t\t\t\tthrow firstAttemptEx;\n \t\t\t}\n \t\t\tlogger.debug(\"Original ConversionService attempt failed - ignored since \" +",
      "parent_sha": "3d5e245374c997436d3802149c5ab46f4300a389"
    }
  },
  {
    "oid": "4742aa0bfeaa96737baa407029fbddfd6bc16087",
    "message": "Test @JmsListener as a merged composed annotation\n\nIssue: SPR-13973",
    "date": "2016-03-26T00:09:35Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/4742aa0bfeaa96737baa407029fbddfd6bc16087",
    "details": {
      "sha": "2fc8d46e12dff8ce42058165c9eafe1563256835",
      "filename": "spring-jms/src/test/java/org/springframework/jms/annotation/EnableJmsTests.java",
      "status": "modified",
      "additions": 64,
      "deletions": 3,
      "changes": 67,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/4742aa0bfeaa96737baa407029fbddfd6bc16087/spring-jms%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fjms%2Fannotation%2FEnableJmsTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/4742aa0bfeaa96737baa407029fbddfd6bc16087/spring-jms%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fjms%2Fannotation%2FEnableJmsTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-jms%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fjms%2Fannotation%2FEnableJmsTests.java?ref=4742aa0bfeaa96737baa407029fbddfd6bc16087",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,10 +16,14 @@\n \n package org.springframework.jms.annotation;\n \n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n import javax.jms.JMSException;\n import javax.jms.MessageListener;\n \n import org.hamcrest.core.Is;\n+\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n@@ -32,10 +36,12 @@\n import org.springframework.context.annotation.Lazy;\n import org.springframework.context.annotation.PropertySource;\n import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\n+import org.springframework.core.annotation.AliasFor;\n import org.springframework.jms.config.JmsListenerContainerTestFactory;\n import org.springframework.jms.config.JmsListenerEndpointRegistrar;\n import org.springframework.jms.config.JmsListenerEndpointRegistry;\n import org.springframework.jms.config.MessageListenerTestContainer;\n+import org.springframework.jms.config.MethodJmsListenerEndpoint;\n import org.springframework.jms.config.SimpleJmsListenerEndpoint;\n import org.springframework.jms.listener.adapter.ListenerExecutionFailedException;\n import org.springframework.jms.listener.adapter.MessageListenerAdapter;\n@@ -48,6 +54,7 @@\n \n /**\n  * @author Stephane Nicoll\n+ * @author Sam Brannen\n  */\n public class EnableJmsTests extends AbstractJmsAnnotationDrivenTests {\n \n@@ -130,11 +137,33 @@ public void jmsListeners() {\n \t}\n \n \t@Test\n+\tpublic void composedJmsListeners() {\n+\t\ttry (ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(\n+\t\t\tEnableJmsDefaultContainerFactoryConfig.class, ComposedJmsListenersBean.class)) {\n+\t\t\tJmsListenerContainerTestFactory simpleFactory = context.getBean(\"jmsListenerContainerFactory\",\n+\t\t\t\tJmsListenerContainerTestFactory.class);\n+\t\t\tassertEquals(2, simpleFactory.getListenerContainers().size());\n+\n+\t\t\tMethodJmsListenerEndpoint first = (MethodJmsListenerEndpoint) simpleFactory.getListenerContainer(\n+\t\t\t\t\"first\").getEndpoint();\n+\t\t\tassertEquals(\"first\", first.getId());\n+\t\t\tassertEquals(\"orderQueue\", first.getDestination());\n+\t\t\tassertNull(first.getConcurrency());\n+\n+\t\t\tMethodJmsListenerEndpoint second = (MethodJmsListenerEndpoint) simpleFactory.getListenerContainer(\n+\t\t\t\t\"second\").getEndpoint();\n+\t\t\tassertEquals(\"second\", second.getId());\n+\t\t\tassertEquals(\"billingQueue\", second.getDestination());\n+\t\t\tassertEquals(\"2-10\", second.getConcurrency());\n+\t\t}\n+\t}\n+\n+\t@Test\n+\t@SuppressWarnings(\"resource\")\n \tpublic void unknownFactory() {\n \t\tthrown.expect(BeanCreationException.class);\n \t\tthrown.expectMessage(\"customFactory\"); // Not found\n-\t\tnew AnnotationConfigApplicationContext(\n-\t\t\t\tEnableJmsSampleConfig.class, CustomBean.class);\n+\t\tnew AnnotationConfigApplicationContext(EnableJmsSampleConfig.class, CustomBean.class);\n \t}\n \n \t@Test\n@@ -295,4 +324,36 @@ public void handle(String msg) {\n \t\t}\n \t}\n \n+\n+\t@JmsListener(destination = \"orderQueue\")\n+\t@Retention(RetentionPolicy.RUNTIME)\n+\tprivate @interface OrderQueueListener {\n+\n+\t\t@AliasFor(annotation = JmsListener.class)\n+\t\tString id() default \"\";\n+\n+\t\t@AliasFor(annotation = JmsListener.class)\n+\t\tString concurrency() default \"\";\n+\t}\n+\n+\t@JmsListener(destination = \"billingQueue\")\n+\t@Retention(RetentionPolicy.RUNTIME)\n+\tprivate @interface BillingQueueListener {\n+\n+\t\t@AliasFor(annotation = JmsListener.class)\n+\t\tString id() default \"\";\n+\n+\t\t@AliasFor(annotation = JmsListener.class)\n+\t\tString concurrency() default \"\";\n+\t}\n+\n+\t@Component\n+\tstatic class ComposedJmsListenersBean {\n+\n+\t\t@OrderQueueListener(id = \"first\")\n+\t\t@BillingQueueListener(id = \"second\", concurrency = \"2-10\")\n+\t\tpublic void repeatableHandle(String msg) {\n+\t\t}\n+\t}\n+\n }",
      "parent_sha": "2353f39ee444a83cd114a1c037a9de71bbceee8c"
    }
  },
  {
    "oid": "5a91d607882e59a6255eff0f144a6efecc749af2",
    "message": "Allow setting WSDL document as a Resource\n\nPrior to this change, LocalJaxWsServiceFactory allowed specifying a WSDL\ndocument URL. Now users may also specify a WSDL document represented as\na Spring Resource object for convenience.\n\nIssue: SPR-9909",
    "date": "2012-10-25T13:04:24Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/5a91d607882e59a6255eff0f144a6efecc749af2",
    "details": {
      "sha": "7f95b3acd65105353fa227a64b02018408c91c8a",
      "filename": "spring-web/src/main/java/org/springframework/remoting/jaxws/LocalJaxWsServiceFactory.java",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/5a91d607882e59a6255eff0f144a6efecc749af2/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fremoting%2Fjaxws%2FLocalJaxWsServiceFactory.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/5a91d607882e59a6255eff0f144a6efecc749af2/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fremoting%2Fjaxws%2FLocalJaxWsServiceFactory.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fremoting%2Fjaxws%2FLocalJaxWsServiceFactory.java?ref=5a91d607882e59a6255eff0f144a6efecc749af2",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2010 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,12 +16,14 @@\n \n package org.springframework.remoting.jaxws;\n \n+import java.io.IOException;\n import java.net.URL;\n import java.util.concurrent.Executor;\n import javax.xml.namespace.QName;\n import javax.xml.ws.Service;\n import javax.xml.ws.handler.HandlerResolver;\n \n+import org.springframework.core.io.Resource;\n import org.springframework.util.Assert;\n \n /**\n@@ -53,11 +55,22 @@ public class LocalJaxWsServiceFactory {\n \n \t/**\n \t * Set the URL of the WSDL document that describes the service.\n+\t * @see #setWsdlDocumentResource(Resource)\n \t */\n \tpublic void setWsdlDocumentUrl(URL wsdlDocumentUrl) {\n \t\tthis.wsdlDocumentUrl = wsdlDocumentUrl;\n \t}\n \n+\t/**\n+\t * Set the WSDL document URL as a {@link Resource}.\n+\t * @throws IOException\n+\t * @since 3.2\n+\t */\n+\tpublic void setWsdlDocumentResource(Resource wsdlDocumentResource) throws IOException {\n+\t\tAssert.notNull(wsdlDocumentResource, \"WSDL Resource must not be null.\");\n+\t\tthis.wsdlDocumentUrl = wsdlDocumentResource.getURL();\n+\t}\n+\n \t/**\n \t * Return the URL of the WSDL document that describes the service.\n \t */",
      "parent_sha": "d52e86853026fa66cf9e7a8cfdc38791c80d93c4"
    }
  },
  {
    "oid": "f4b28867753d32f2466a571b6eb188920fe4f901",
    "message": "Polish \"Support JAXBElement in Jaxb2RootElementHttpMessageConverter\"\n\nSee gh-33233",
    "date": "2024-07-19T08:20:06Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/f4b28867753d32f2466a571b6eb188920fe4f901",
    "details": {
      "sha": "ee11dec759b9969d311a9f5de37bd2362d54028b",
      "filename": "spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverter.java",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/f4b28867753d32f2466a571b6eb188920fe4f901/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2Fxml%2FJaxb2RootElementHttpMessageConverter.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/f4b28867753d32f2466a571b6eb188920fe4f901/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2Fxml%2FJaxb2RootElementHttpMessageConverter.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2Fxml%2FJaxb2RootElementHttpMessageConverter.java?ref=f4b28867753d32f2466a571b6eb188920fe4f901",
      "patch": "@@ -121,7 +121,9 @@ public boolean canRead(Class<?> clazz, @Nullable MediaType mediaType) {\n \n \t@Override\n \tpublic boolean canWrite(Class<?> clazz, @Nullable MediaType mediaType) {\n-\t\treturn ((JAXBElement.class.isAssignableFrom(clazz) || AnnotationUtils.findAnnotation(clazz, XmlRootElement.class) != null) && canWrite(mediaType));\n+\t\tboolean supportedType = (JAXBElement.class.isAssignableFrom(clazz) ||\n+\t\t\t\tAnnotationUtils.findAnnotation(clazz, XmlRootElement.class) != null);\n+\t\treturn (supportedType && canWrite(mediaType));\n \t}\n \n \t@Override\n@@ -190,12 +192,12 @@ protected Source processSource(Source source) {\n \t}\n \n \t@Override\n-\tprotected void writeToResult(Object o, HttpHeaders headers, Result result) throws Exception {\n+\tprotected void writeToResult(Object value, HttpHeaders headers, Result result) throws Exception {\n \t\ttry {\n-\t\t\tClass<?> clazz = getMarshallerType(o);\n+\t\t\tClass<?> clazz = getMarshallerType(value);\n \t\t\tMarshaller marshaller = createMarshaller(clazz);\n \t\t\tsetCharset(headers.getContentType(), marshaller);\n-\t\t\tmarshaller.marshal(o, result);\n+\t\t\tmarshaller.marshal(value, result);\n \t\t}\n \t\tcatch (MarshalException ex) {\n \t\t\tthrow ex;\n@@ -205,12 +207,12 @@ protected void writeToResult(Object o, HttpHeaders headers, Result result) throw\n \t\t}\n \t}\n \n-\tprivate static Class<?> getMarshallerType(Object o) {\n-\t\tif (o instanceof JAXBElement<?> jaxbElement) {\n+\tprivate static Class<?> getMarshallerType(Object value) {\n+\t\tif (value instanceof JAXBElement<?> jaxbElement) {\n \t\t\treturn jaxbElement.getDeclaredType();\n \t\t}\n \t\telse {\n-\t\t\treturn ClassUtils.getUserClass(o);\n+\t\t\treturn ClassUtils.getUserClass(value);\n \t\t}\n \t}\n ",
      "parent_sha": "a5e2557738fcdecc2ae5dc1870ff117184e8502c"
    }
  },
  {
    "oid": "d52f07aa1b83208dd84b65d2a4ba724b3a0227ff",
    "message": "Log STOMP ERROR frames at error level\n\nIssue: SPR-11673",
    "date": "2014-04-30T15:00:27Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/d52f07aa1b83208dd84b65d2a4ba724b3a0227ff",
    "details": {
      "sha": "b9aec16ccfff76d5d66b3fd8f6956377071bca11",
      "filename": "spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/d52f07aa1b83208dd84b65d2a4ba724b3a0227ff/spring-messaging%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fmessaging%2Fsimp%2Fstomp%2FStompBrokerRelayMessageHandler.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/d52f07aa1b83208dd84b65d2a4ba724b3a0227ff/spring-messaging%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fmessaging%2Fsimp%2Fstomp%2FStompBrokerRelayMessageHandler.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-messaging%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fmessaging%2Fsimp%2Fstomp%2FStompBrokerRelayMessageHandler.java?ref=d52f07aa1b83208dd84b65d2a4ba724b3a0227ff",
      "patch": "@@ -583,20 +583,23 @@ public void handleMessage(Message<byte[]> message) {\n \t\t\tStompHeaderAccessor headerAccessor =\n \t\t\t\t\tMessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class);\n \n+\t\t\theaderAccessor.setSessionId(this.sessionId);\n+\n \t\t\tif (headerAccessor.isHeartbeat()) {\n \t\t\t\tlogger.trace(\"Received broker heartbeat\");\n \t\t\t}\n \t\t\telse if (logger.isDebugEnabled()) {\n \t\t\t\tlogger.debug(\"Received message from broker in session '\" + this.sessionId + \"'\");\n \t\t\t}\n+\t\t\telse if (logger.isErrorEnabled() && StompCommand.ERROR == headerAccessor.getCommand()) {\n+\t\t\t\tlogger.error(\"Received STOMP ERROR: \" + message);\n+\t\t\t}\n \n \t\t\tif (StompCommand.CONNECTED == headerAccessor.getCommand()) {\n \t\t\t\tafterStompConnected(headerAccessor);\n \t\t\t}\n \n-\t\t\theaderAccessor.setSessionId(this.sessionId);\n \t\t\theaderAccessor.setImmutable();\n-\n \t\t\tsendMessageToClient(message);\n \t\t}\n ",
      "parent_sha": "1958ae3a625dbf7761cd4f6a530c9cd8543a19eb"
    }
  },
  {
    "oid": "4128a71657924f43a96fc1ca32a46806ce236abe",
    "message": "Polish javadoc",
    "date": "2022-06-07T23:49:42Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/4128a71657924f43a96fc1ca32a46806ce236abe",
    "details": {
      "sha": "d3dc16d393a11680b1a0cf469429d53b7f4736b2",
      "filename": "spring-core-test/src/main/java/org/springframework/aot/test/generator/compile/TestCompiler.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/4128a71657924f43a96fc1ca32a46806ce236abe/spring-core-test%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Faot%2Ftest%2Fgenerator%2Fcompile%2FTestCompiler.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/4128a71657924f43a96fc1ca32a46806ce236abe/spring-core-test%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Faot%2Ftest%2Fgenerator%2Fcompile%2FTestCompiler.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-core-test%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Faot%2Ftest%2Fgenerator%2Fcompile%2FTestCompiler.java?ref=4128a71657924f43a96fc1ca32a46806ce236abe",
      "patch": "@@ -104,7 +104,7 @@ public TestCompiler withFiles(InMemoryGeneratedFiles generatedFiles) {\n \t}\n \n \t/**\n-\t * Return a new {@link TestCompiler} instance with addition source files.\n+\t * Return a new {@link TestCompiler} instance with additional source files.\n \t * @param sourceFiles the additional source files\n \t * @return a new {@link TestCompiler} instance\n \t */\n@@ -114,7 +114,7 @@ public TestCompiler withSources(SourceFile... sourceFiles) {\n \t}\n \n \t/**\n-\t * Return a new {@link TestCompiler} instance with addition source files.\n+\t * Return a new {@link TestCompiler} instance with additional source files.\n \t * @param sourceFiles the additional source files\n \t * @return a new {@link TestCompiler} instance\n \t */\n@@ -124,7 +124,7 @@ public TestCompiler withSources(Iterable<SourceFile> sourceFiles) {\n \t}\n \n \t/**\n-\t * Return a new {@link TestCompiler} instance with addition source files.\n+\t * Return a new {@link TestCompiler} instance with additional source files.\n \t * @param sourceFiles the additional source files\n \t * @return a new {@link TestCompiler} instance\n \t */\n@@ -134,7 +134,7 @@ public TestCompiler withSources(SourceFiles sourceFiles) {\n \t}\n \n \t/**\n-\t * Return a new {@link TestCompiler} instance with addition resource files.\n+\t * Return a new {@link TestCompiler} instance with additional resource files.\n \t * @param resourceFiles the additional resource files\n \t * @return a new {@link TestCompiler} instance\n \t */\n@@ -144,7 +144,7 @@ public TestCompiler withResources(ResourceFile... resourceFiles) {\n \t}\n \n \t/**\n-\t * Return a new {@link TestCompiler} instance with addition source files.\n+\t * Return a new {@link TestCompiler} instance with additional source files.\n \t * @param resourceFiles the additional source files\n \t * @return a new {@link TestCompiler} instance\n \t */\n@@ -154,7 +154,7 @@ public TestCompiler withResources(Iterable<ResourceFile> resourceFiles) {\n \t}\n \n \t/**\n-\t * Return a new {@link TestCompiler} instance with addition resource files.\n+\t * Return a new {@link TestCompiler} instance with additional resource files.\n \t * @param resourceFiles the additional resource files\n \t * @return a new {@link TestCompiler} instance\n \t */",
      "parent_sha": "7119d420cece91ca810ce917ac9ade6853169fde"
    }
  },
  {
    "oid": "45aa1edf871e7e86cbd9523146a94b911d944736",
    "message": "Fix Undertow zero-copy-support\n\nThis commit fixed the exception that occurs when a larger file is\ntransfered using zero-copy on Undertow.\n\nIssue: SPR-15343",
    "date": "2017-03-16T11:35:51Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/45aa1edf871e7e86cbd9523146a94b911d944736",
    "details": {
      "sha": "3038602d3487fad768ae5c8343c39d3b423150e5",
      "filename": "spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java",
      "status": "modified",
      "additions": 21,
      "deletions": 16,
      "changes": 37,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/45aa1edf871e7e86cbd9523146a94b911d944736/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fserver%2Freactive%2FUndertowServerHttpResponse.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/45aa1edf871e7e86cbd9523146a94b911d944736/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fserver%2Freactive%2FUndertowServerHttpResponse.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fserver%2Freactive%2FUndertowServerHttpResponse.java?ref=45aa1edf871e7e86cbd9523146a94b911d944736",
      "patch": "@@ -30,6 +30,7 @@\n import io.undertow.util.HttpString;\n import org.reactivestreams.Processor;\n import org.reactivestreams.Publisher;\n+import org.xnio.channels.Channels;\n import org.xnio.channels.StreamSinkChannel;\n import reactor.core.publisher.Mono;\n \n@@ -79,24 +80,28 @@ protected void applyStatusCode() {\n \n \t@Override\n \tpublic Mono<Void> writeWith(File file, long position, long count) {\n-\t\tapplyHeaders();\n-\t\tapplyCookies();\n-\t\ttry {\n-\t\t\tStreamSinkChannel responseChannel = getUndertowExchange().getResponseChannel();\n-\t\t\t@SuppressWarnings(\"resource\")\n-\t\t\tFileChannel in = new FileInputStream(file).getChannel();\n-\t\t\tlong result = responseChannel.transferFrom(in, position, count);\n-\t\t\tif (result < count) {\n-\t\t\t\treturn Mono.error(new IOException(\n-\t\t\t\t\t\t\"Could only write \" + result + \" out of \" + count + \" bytes\"));\n-\t\t\t}\n-\t\t\telse {\n+\t\treturn doCommit(() -> {\n+\t\t\tFileChannel source = null;\n+\t\t\ttry {\n+\t\t\t\tsource = new FileInputStream(file).getChannel();\n+\t\t\t\tStreamSinkChannel destination = getUndertowExchange().getResponseChannel();\n+\t\t\t\tChannels.transferBlocking(destination, source, position, count);\n \t\t\t\treturn Mono.empty();\n \t\t\t}\n-\t\t}\n-\t\tcatch (IOException ex) {\n-\t\t\treturn Mono.error(ex);\n-\t\t}\n+\t\t\tcatch (IOException ex) {\n+\t\t\t\treturn Mono.error(ex);\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tif (source != null) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tsource.close();\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (IOException ex) {\n+\t\t\t\t\t\t// ignore\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n \t}\n \n \t@Override",
      "parent_sha": "1dc38660e5abb1b3eeb1108564a43b627ccb5478"
    }
  },
  {
    "oid": "65e88449aa0f970d0d52e4e8364ce4b7faa51b94",
    "message": "DispatcherPortlet passes handler instance into HandlerExceptionResolver for action exception; DispatcherPortlet applies preHandleRender callbacks in case of action exception as well (SPR-6959)",
    "date": "2010-03-30T21:17:31Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/65e88449aa0f970d0d52e4e8364ce4b7faa51b94",
    "details": {
      "sha": "843643145e51ad7baebee5819ab131a1a908cf9a",
      "filename": "org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/DispatcherPortlet.java",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/65e88449aa0f970d0d52e4e8364ce4b7faa51b94/org.springframework.web.portlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fportlet%2FDispatcherPortlet.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/65e88449aa0f970d0d52e4e8364ce4b7faa51b94/org.springframework.web.portlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fportlet%2FDispatcherPortlet.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.web.portlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fportlet%2FDispatcherPortlet.java?ref=65e88449aa0f970d0d52e4e8364ce4b7faa51b94",
      "patch": "@@ -700,21 +700,6 @@ protected void doRenderService(RenderRequest request, RenderResponse response) t\n \t\ttry {\n \t\t\tModelAndView mv;\n \t\t\ttry {\n-\t\t\t\t// Check for forwarded exception from the action phase\n-\t\t\t\tPortletSession session = request.getPortletSession(false);\n-\t\t\t\tif (session != null) {\n-\t\t\t\t\tif (request.getParameter(ACTION_EXCEPTION_RENDER_PARAMETER) != null) {\n-\t\t\t\t\t\tException ex = (Exception) session.getAttribute(ACTION_EXCEPTION_SESSION_ATTRIBUTE);\n-\t\t\t\t\t\tif (ex != null) {\n-\t\t\t\t\t\t\tlogger.debug(\"Render phase found exception caught during action phase - rethrowing it\");\n-\t\t\t\t\t\t\tthrow ex;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\telse {\n-\t\t\t\t\t\tsession.removeAttribute(ACTION_EXCEPTION_SESSION_ATTRIBUTE);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t\n \t\t\t\t// Determine handler for the current request.\n \t\t\t\tmappedHandler = getHandler(request, false);\n \t\t\t\tif (mappedHandler == null || mappedHandler.getHandler() == null) {\n@@ -735,6 +720,21 @@ protected void doRenderService(RenderRequest request, RenderResponse response) t\n \t\t\t\t\t}\n \t\t\t\t}\n \n+\t\t\t\t// Check for forwarded exception from the action phase\n+\t\t\t\tPortletSession session = request.getPortletSession(false);\n+\t\t\t\tif (session != null) {\n+\t\t\t\t\tif (request.getParameter(ACTION_EXCEPTION_RENDER_PARAMETER) != null) {\n+\t\t\t\t\t\tException ex = (Exception) session.getAttribute(ACTION_EXCEPTION_SESSION_ATTRIBUTE);\n+\t\t\t\t\t\tif (ex != null) {\n+\t\t\t\t\t\t\tlogger.debug(\"Render phase found exception caught during action phase - rethrowing it\");\n+\t\t\t\t\t\t\tthrow ex;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\tsession.removeAttribute(ACTION_EXCEPTION_SESSION_ATTRIBUTE);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n \t\t\t\t// Actually invoke the handler.\n \t\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n \t\t\t\tmv = ha.handleRender(request, response, mappedHandler.getHandler());\n@@ -930,7 +930,7 @@ protected void doEventService(EventRequest request, EventResponse response) thro\n \t\t\ttry {\n \t\t\t\tresponse.setRenderParameter(ACTION_EXCEPTION_RENDER_PARAMETER, ex.toString());\n \t\t\t\trequest.getPortletSession().setAttribute(ACTION_EXCEPTION_SESSION_ATTRIBUTE, ex);\n-\t\t\t\tlogger.debug(\"Caught exception during action phase - forwarding to render phase\", ex);\n+\t\t\t\tlogger.debug(\"Caught exception during event phase - forwarding to render phase\", ex);\n \t\t\t}\n \t\t\tcatch (IllegalStateException ex2) {\n \t\t\t\t// Probably sendRedirect called... need to rethrow exception immediately.",
      "parent_sha": "20de98362a481d2754aceab25150e50e8b49d15f"
    }
  },
  {
    "oid": "b2319fa38b94efe3e0bbe2ed52733990b1804a39",
    "message": "reactivated ThrowsAdviceInterceptorTests",
    "date": "2009-05-05T21:49:23Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/b2319fa38b94efe3e0bbe2ed52733990b1804a39",
    "details": {
      "sha": "ceae4f577e8cd7ea67caa39961e42c4d89f65fa1",
      "filename": "org.springframework.aop/src/test/java/org/springframework/aop/framework/adapter/ThrowsAdviceInterceptorTests.java",
      "status": "modified",
      "additions": 8,
      "deletions": 18,
      "changes": 26,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/b2319fa38b94efe3e0bbe2ed52733990b1804a39/org.springframework.aop%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Faop%2Fframework%2Fadapter%2FThrowsAdviceInterceptorTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/b2319fa38b94efe3e0bbe2ed52733990b1804a39/org.springframework.aop%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Faop%2Fframework%2Fadapter%2FThrowsAdviceInterceptorTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.aop%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Faop%2Fframework%2Fadapter%2FThrowsAdviceInterceptorTests.java?ref=b2319fa38b94efe3e0bbe2ed52733990b1804a39",
      "patch": "@@ -1,12 +1,12 @@\n /*\n- * Copyright 2002-2005 the original author or authors.\n- * \n+ * Copyright 2002-2009 the original author or authors.\n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -16,30 +16,21 @@\n \n package org.springframework.aop.framework.adapter;\n \n-import static org.easymock.EasyMock.createMock;\n-import static org.easymock.EasyMock.expect;\n-import static org.easymock.EasyMock.replay;\n-import static org.easymock.EasyMock.verify;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n-\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.lang.reflect.Method;\n import java.rmi.RemoteException;\n-\n import javax.transaction.TransactionRolledbackException;\n \n import org.aopalliance.intercept.MethodInvocation;\n-import org.junit.Ignore;\n+import static org.easymock.EasyMock.*;\n+import static org.junit.Assert.*;\n import org.junit.Test;\n-import org.springframework.aop.ThrowsAdvice;\n-\n import test.aop.MethodCounter;\n \n+import org.springframework.aop.ThrowsAdvice;\n+\n /**\n- * Unit tests for {@link ThrowsAdviceInterceptor}\n- * \n  * @author Rod Johnson\n  * @author Chris Beams\n  */\n@@ -52,7 +43,6 @@ public void testNoHandlerMethods() {\n \t}\n \n \t@Test\n-\t@Ignore\n \tpublic void testNotInvoked() throws Throwable {\n \t\tMyThrowsHandler th = new MyThrowsHandler();\n \t\tThrowsAdviceInterceptor ti = new ThrowsAdviceInterceptor(th);",
      "parent_sha": "c356d99621b4805276302025c961d94bbe2b6c69"
    }
  },
  {
    "oid": "893f5dcb9b4d5135042feb949be5948f020f0c8b",
    "message": "Replace \"null\" with NULL_STRING constant in ObjectUtils.nullSafeConciseToString()\n\nCloses gh-33625",
    "date": "2024-10-01T10:33:40Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/893f5dcb9b4d5135042feb949be5948f020f0c8b",
    "details": {
      "sha": "6edba426b8161b3d9154e1afacf944a4c7b06890",
      "filename": "spring-core/src/main/java/org/springframework/util/ObjectUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/893f5dcb9b4d5135042feb949be5948f020f0c8b/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Futil%2FObjectUtils.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/893f5dcb9b4d5135042feb949be5948f020f0c8b/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Futil%2FObjectUtils.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Futil%2FObjectUtils.java?ref=893f5dcb9b4d5135042feb949be5948f020f0c8b",
      "patch": "@@ -901,7 +901,7 @@ public static String nullSafeToString(@Nullable short[] array) {\n \t */\n \tpublic static String nullSafeConciseToString(@Nullable Object obj) {\n \t\tif (obj == null) {\n-\t\t\treturn \"null\";\n+\t\t\treturn NULL_STRING;\n \t\t}\n \t\tif (obj instanceof Optional<?> optional) {\n \t\t\treturn (optional.isEmpty() ? \"Optional.empty\" :",
      "parent_sha": "a21c557101ea3454c5fafc2f46ac55ab4d6653f1"
    }
  },
  {
    "oid": "47e3f0948dbc2530c3722ed31176590de6032133",
    "message": "polish",
    "date": "2011-05-24T18:32:01Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/47e3f0948dbc2530c3722ed31176590de6032133",
    "details": {
      "sha": "8586b92cbe13eb58781cc40550c28975c3b9f63f",
      "filename": "org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/47e3f0948dbc2530c3722ed31176590de6032133/org.springframework.core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcore%2Fconvert%2Fsupport%2FGenericConversionService.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/47e3f0948dbc2530c3722ed31176590de6032133/org.springframework.core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcore%2Fconvert%2Fsupport%2FGenericConversionService.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcore%2Fconvert%2Fsupport%2FGenericConversionService.java?ref=47e3f0948dbc2530c3722ed31176590de6032133",
      "patch": "@@ -458,14 +458,13 @@ else if (componentType.isInterface()) {\n \n \tprivate void addInterfaceHierarchy(Class<?> interfaceType, LinkedList<Class<?>> classQueue) {\n \t\tclassQueue.addFirst(interfaceType);\n-\t\tfor (Class<?> implementedInterface : interfaceType.getInterfaces()) {\n-\t\t\taddInterfaceHierarchy(implementedInterface, classQueue);\n+\t\tfor (Class<?> inheritedInterface : interfaceType.getInterfaces()) {\n+\t\t\taddInterfaceHierarchy(inheritedInterface, classQueue);\n \t\t}\n \t}\n \n \tprivate GenericConverter matchConverter(\n \t\t\tMatchableConverters matchable, TypeDescriptor sourceFieldType, TypeDescriptor targetFieldType) {\n-\n \t\tif (matchable == null) {\n \t\t\treturn null;\n \t\t}",
      "parent_sha": "01cbfd4f6f750aa87021a91658bf09a2f28e0d03"
    }
  },
  {
    "oid": "402a3b8473c976a07e40d2cf8a663267ca7e2dec",
    "message": "Fix javadoc",
    "date": "2013-08-27T16:48:48Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/402a3b8473c976a07e40d2cf8a663267ca7e2dec",
    "details": {
      "sha": "43314c04f7a97a6086e2cf636cd9f003eb9a9e59",
      "filename": "spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java",
      "status": "modified",
      "additions": 5,
      "deletions": 8,
      "changes": 13,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/402a3b8473c976a07e40d2cf8a663267ca7e2dec/spring-messaging%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fmessaging%2Fsimp%2Fhandler%2FAnnotationMethodMessageHandler.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/402a3b8473c976a07e40d2cf8a663267ca7e2dec/spring-messaging%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fmessaging%2Fsimp%2Fhandler%2FAnnotationMethodMessageHandler.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-messaging%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fmessaging%2Fsimp%2Fhandler%2FAnnotationMethodMessageHandler.java?ref=402a3b8473c976a07e40d2cf8a663267ca7e2dec",
      "patch": "@@ -138,12 +138,10 @@ public void setMessageConverter(MessageConverter<?> converter) {\n \t}\n \n \t/**\n-\t * Sets the custom list of {@code HandlerMethodArgumentResolver}s that will be used as\n-\t * the <em>first</em> argument resolvers when resolving the values of the mapped\n-\t * methods.\n+\t * Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used\n+\t * after resolvers for supported argument type.\n \t *\n-\t * @param customArgumentResolvers the custom argument resolvers to be used first;\n-\t *        never {@code null}.\n+\t * @param customArgumentResolvers the list of resolvers; never {@code null}.\n \t */\n \tpublic void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {\n \t\tAssert.notNull(customArgumentResolvers, \"The 'customArgumentResolvers' cannot be null.\");\n@@ -152,10 +150,9 @@ public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> custo\n \n \t/**\n \t * Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used\n-\t * as the <em>first</em> return value handlers when handling the method return values.\n+\t * after return value handlers for known types.\n \t *\n-\t * @param customReturnValueHandlers the custom return value resolvers that will be\n-\t *        used first; never {@code null}.\n+\t * @param customReturnValueHandlers the list of custom return value handlers, never {@code null}.\n \t */\n \tpublic void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {\n \t\tAssert.notNull(customReturnValueHandlers, \"The 'customReturnValueHandlers' cannot be null.\");",
      "parent_sha": "3f130a1c086028aef7ce1debdcd18642801525b2"
    }
  },
  {
    "oid": "c15760bcd1b21f8c7276cb3896b843ab29c154a4",
    "message": "Fixed generics warnings",
    "date": "2008-08-12T18:31:31Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/c15760bcd1b21f8c7276cb3896b843ab29c154a4",
    "details": {
      "sha": "734d40320885875578e153cb85b1e0dcb56b7f7a",
      "filename": "org.springframework.expression/src/test/java/org/springframework/expression/spel/ScenariosForSpringSecurity.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/c15760bcd1b21f8c7276cb3896b843ab29c154a4/org.springframework.expression%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2FScenariosForSpringSecurity.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/c15760bcd1b21f8c7276cb3896b843ab29c154a4/org.springframework.expression%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2FScenariosForSpringSecurity.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.expression%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2FScenariosForSpringSecurity.java?ref=c15760bcd1b21f8c7276cb3896b843ab29c154a4",
      "patch": "@@ -19,8 +19,8 @@\n \n import org.springframework.expression.AccessException;\n import org.springframework.expression.EvaluationContext;\n-import org.springframework.expression.Expression;\n import org.springframework.expression.EvaluationException;\n+import org.springframework.expression.Expression;\n import org.springframework.expression.MethodExecutor;\n import org.springframework.expression.MethodResolver;\n import org.springframework.expression.PropertyAccessor;\n@@ -136,7 +136,7 @@ public void write(EvaluationContext context, Object target, Object name, Object\n \t\t\t\tthrows AccessException {\n \t\t}\n \n-\t\tpublic Class[] getSpecificTargetClasses() {\n+\t\tpublic Class<?>[] getSpecificTargetClasses() {\n \t\t\treturn null;\n \t\t}\n \t\t\n@@ -164,7 +164,7 @@ public void write(EvaluationContext context, Object target, Object name, Object\n \t\t\t\tthrows AccessException {\n \t\t}\n \n-\t\tpublic Class[] getSpecificTargetClasses() {\n+\t\tpublic Class<?>[] getSpecificTargetClasses() {\n \t\t\treturn null;\n \t\t}\n ",
      "parent_sha": "106131ab8f98dfeb0a0382e9e541968eb50c735b"
    }
  },
  {
    "oid": "ddebda1121c37caf1bcebd76671754802ed2c331",
    "message": "Ignoring non-loadable annotations in SourceClass.getAnnotations() and therefore in the collectImports algorithm\n\nIssue: SPR-11086",
    "date": "2013-11-15T10:50:01Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/ddebda1121c37caf1bcebd76671754802ed2c331",
    "details": {
      "sha": "36efb1281748c1284a6bdbec65cc6dd81a6c9380",
      "filename": "spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java",
      "status": "modified",
      "additions": 23,
      "deletions": 12,
      "changes": 35,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/ddebda1121c37caf1bcebd76671754802ed2c331/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcontext%2Fannotation%2FConfigurationClassParser.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/ddebda1121c37caf1bcebd76671754802ed2c331/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcontext%2Fannotation%2FConfigurationClassParser.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcontext%2Fannotation%2FConfigurationClassParser.java?ref=ddebda1121c37caf1bcebd76671754802ed2c331",
      "patch": "@@ -359,7 +359,8 @@ private void collectImports(SourceClass sourceClass, Set<SourceClass> imports, S\n \t\ttry {\n \t\t\tif (visited.add(sourceClass)) {\n \t\t\t\tfor (SourceClass annotation : sourceClass.getAnnotations()) {\n-\t\t\t\t\tif (!annotation.getMetadata().getClassName().startsWith(\"java\") && !annotation.isAssignable(Import.class)) {\n+\t\t\t\t\tString annName = annotation.getMetadata().getClassName();\n+\t\t\t\t\tif (!annName.startsWith(\"java\") && !annName.equals(Import.class.getName())) {\n \t\t\t\t\t\tcollectImports(annotation, imports, visited);\n \t\t\t\t\t}\n \t\t\t\t}\n@@ -525,11 +526,11 @@ public SourceClass asSourceClass(Class<?> classType) throws IOException, ClassNo\n \t\ttry {\n \t\t\t// Sanity test that we can read annotations, if not fall back to ASM\n \t\t\tclassType.getAnnotations();\n+\t\t\treturn new SourceClass(classType);\n \t\t}\n \t\tcatch (Throwable ex) {\n \t\t\treturn asSourceClass(classType.getName());\n \t\t}\n-\t\treturn new SourceClass(classType);\n \t}\n \n \t/**\n@@ -549,7 +550,7 @@ public Collection<SourceClass> asSourceClasses(String[] classNames) throws IOExc\n \tpublic SourceClass asSourceClass(String className) throws IOException, ClassNotFoundException {\n \t\tif (className.startsWith(\"java\")) {\n \t\t\t// Never use ASM for core java types\n-\t\t\treturn new SourceClass(this.resourceLoader.getClassLoader().loadClass( className));\n+\t\t\treturn new SourceClass(this.resourceLoader.getClassLoader().loadClass(className));\n \t\t}\n \t\treturn new SourceClass(this.metadataReaderFactory.getMetadataReader(className));\n \t}\n@@ -718,12 +719,18 @@ public SourceClass getSuperClass() throws IOException, ClassNotFoundException {\n \t\t\treturn asSourceClass(((MetadataReader) this.source).getClassMetadata().getSuperClassName());\n \t\t}\n \n-\t\tpublic Set<SourceClass> getAnnotations() throws IOException, ClassNotFoundException {\n-\t\t\tSet<SourceClass> annotations = new LinkedHashSet<SourceClass>();\n-\t\t\tfor (String annotation : this.metadata.getAnnotationTypes()) {\n-\t\t\t\tannotations.add(getRelated(annotation));\n+\t\tpublic Set<SourceClass> getAnnotations() throws IOException {\n+\t\t\tSet<SourceClass> result = new LinkedHashSet<SourceClass>();\n+\t\t\tfor (String className : this.metadata.getAnnotationTypes()) {\n+\t\t\t\ttry {\n+\t\t\t\t\tresult.add(getRelated(className));\n+\t\t\t\t}\n+\t\t\t\tcatch (Throwable ex) {\n+\t\t\t\t\t// An annotation not present on the classpath is being ignored\n+\t\t\t\t\t// by the JVM's class loading -> ignore here as well.\n+\t\t\t\t}\n \t\t\t}\n-\t\t\treturn annotations;\n+\t\t\treturn result;\n \t\t}\n \n \t\tpublic Collection<SourceClass> getAnnotationAttributes(String annotationType, String attribute)\n@@ -734,11 +741,11 @@ public Collection<SourceClass> getAnnotationAttributes(String annotationType, St\n \t\t\t\treturn Collections.emptySet();\n \t\t\t}\n \t\t\tString[] classNames = (String[]) annotationAttributes.get(attribute);\n-\t\t\tSet<SourceClass> rtn = new LinkedHashSet<SourceClass>();\n+\t\t\tSet<SourceClass> result = new LinkedHashSet<SourceClass>();\n \t\t\tfor (String className : classNames) {\n-\t\t\t\trtn.add(getRelated(className));\n+\t\t\t\tresult.add(getRelated(className));\n \t\t\t}\n-\t\t\treturn rtn;\n+\t\t\treturn result;\n \t\t}\n \n \t\tprivate SourceClass getRelated(String className) throws IOException, ClassNotFoundException {\n@@ -748,7 +755,11 @@ private SourceClass getRelated(String className) throws IOException, ClassNotFou\n \t\t\t\t\treturn asSourceClass(clazz);\n \t\t\t\t}\n \t\t\t\tcatch (ClassNotFoundException ex) {\n-\t\t\t\t\t// ignore\n+\t\t\t\t\t// Ignore -> fall back to ASM next, except for core java types.\n+\t\t\t\t\tif (className.startsWith(\"java\")) {\n+\t\t\t\t\t\tthrow ex;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn new SourceClass(metadataReaderFactory.getMetadataReader(className));\n \t\t\t\t}\n \t\t\t}\n \t\t\treturn asSourceClass(className);",
      "parent_sha": "6802f813dea1759283e8bc4f0ea81961c342c929"
    }
  },
  {
    "oid": "e2c7653da4286e8daa9e9a185ef3f8016a035f87",
    "message": "Correct parameter index boundary in exception message\n\nIssue: SPR-14466",
    "date": "2016-07-14T20:29:14Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/e2c7653da4286e8daa9e9a185ef3f8016a035f87",
    "details": {
      "sha": "ea1cc4c631a2bb6fefa117d4fe8d0e67fc9177ee",
      "filename": "spring-core/src/main/java/org/springframework/core/MethodParameter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/e2c7653da4286e8daa9e9a185ef3f8016a035f87/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcore%2FMethodParameter.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/e2c7653da4286e8daa9e9a185ef3f8016a035f87/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcore%2FMethodParameter.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcore%2FMethodParameter.java?ref=e2c7653da4286e8daa9e9a185ef3f8016a035f87",
      "patch": "@@ -668,7 +668,7 @@ protected static int findParameterIndex(Parameter parameter) {\n \n \tprivate static int validateIndex(Executable executable, int parameterIndex) {\n \t\tint count = executable.getParameterCount();\n-\t\tAssert.isTrue(parameterIndex < count, () -> \"Parameter index needs to be between 0 and \" + (count - 1));\n+\t\tAssert.isTrue(parameterIndex < count, () -> \"Parameter index needs to be between -1 and \" + (count - 1));\n \t\treturn parameterIndex;\n \t}\n ",
      "parent_sha": "e431624e8472b3b53d1a0c4528bf736c612f1fd9"
    }
  },
  {
    "oid": "a6f53ef2a7f7960a5ad294fd342ca69620298cdf",
    "message": "Polish Javadoc for @MessageMapping",
    "date": "2015-06-01T11:37:08Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/a6f53ef2a7f7960a5ad294fd342ca69620298cdf",
    "details": {
      "sha": "0796f8ee3b7ebd271cbe836c350088d52dd5ec6e",
      "filename": "spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/MessageMapping.java",
      "status": "modified",
      "additions": 14,
      "deletions": 12,
      "changes": 26,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/a6f53ef2a7f7960a5ad294fd342ca69620298cdf/spring-messaging%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fmessaging%2Fhandler%2Fannotation%2FMessageMapping.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/a6f53ef2a7f7960a5ad294fd342ca69620298cdf/spring-messaging%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fmessaging%2Fhandler%2Fannotation%2FMessageMapping.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-messaging%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fmessaging%2Fhandler%2Fannotation%2FMessageMapping.java?ref=a6f53ef2a7f7960a5ad294fd342ca69620298cdf",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2014 the original author or authors.\n+ * Copyright 2002-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -65,16 +65,17 @@\n  * authentication (e.g. Spring Security based) can be used to secure the\n  * HTTP handshake that initiates WebSocket sessions.</li>\n  * </ul>\n+ *\n  * <p>By default the return value is wrapped as a message and sent to the destination\n- * specified with an {@link SendTo} method-level annotation.\n+ * specified with an {@link SendTo @SendTo} method-level annotation.\n  *\n- * <p>STOMP over WebSocket: an {@link SendTo} annotation is not strictly required --\n- * by default the message will be sent to the same destination as the incoming\n- * message but with an additional prefix (\"/topic\" by default). It is also possible\n- * to use {@link org.springframework.messaging.simp.annotation.SendToUser} to\n- * have the message directed to a specific user only if connected.\n- * Also the return value is converted with a\n- * {@link org.springframework.messaging.converter.MessageConverter}.\n+ * <h3>STOMP over WebSocket</h3>\n+ * <p>An {@link SendTo @SendTo} annotation is not strictly required &mdash; by default\n+ * the message will be sent to the same destination as the incoming message but with\n+ * an additional prefix ({@code \"/topic\"} by default). It is also possible to use the\n+ * {@link org.springframework.messaging.simp.annotation.SendToUser} annotation to\n+ * have the message directed to a specific user if connected. The return value is\n+ * converted with a {@link org.springframework.messaging.converter.MessageConverter}.\n  *\n  * @author Rossen Stoyanchev\n  * @since 4.0\n@@ -87,9 +88,10 @@\n \n \t/**\n \t * Destination-based mapping expressed by this annotation.\n-\t * <p>For STOMP over WebSocket messages: this is the destination of the STOMP message\n-\t * (e.g. \"/positions\"). Ant-style path patterns (e.g. \"/price.stock.*\") are supported\n-\t * and so are path template variables (e.g. \"/price.stock.{ticker}\"\").\n+\t * <p>For STOMP over WebSocket messages: this is the destination of the\n+\t * STOMP message (e.g. {@code \"/positions\"}). Ant-style path patterns\n+\t * (e.g. {@code \"/price.stock.*\"}) and path template variables (e.g.\n+\t * <code>\"/price.stock.{ticker}\"</code>) are also supported.\n \t */\n \tString[] value() default {};\n ",
      "parent_sha": "4ecb8611bc445a745362424288afd53172e30203"
    }
  },
  {
    "oid": "56670ebec8e8fa6f9fa956fd9cdd71e5cceb89a0",
    "message": "Polish CorsAbstractHandlerMappingTests\n\nSee gh-23995",
    "date": "2019-11-14T13:13:05Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/56670ebec8e8fa6f9fa956fd9cdd71e5cceb89a0",
    "details": {
      "sha": "602b9d9c83c0a2d2b7fdd9c796031d756bcf884c",
      "filename": "spring-webmvc/src/test/java/org/springframework/web/servlet/handler/CorsAbstractHandlerMappingTests.java",
      "status": "modified",
      "additions": 24,
      "deletions": 30,
      "changes": 54,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/56670ebec8e8fa6f9fa956fd9cdd71e5cceb89a0/spring-webmvc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FCorsAbstractHandlerMappingTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/56670ebec8e8fa6f9fa956fd9cdd71e5cceb89a0/spring-webmvc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FCorsAbstractHandlerMappingTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webmvc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fhandler%2FCorsAbstractHandlerMappingTests.java?ref=56670ebec8e8fa6f9fa956fd9cdd71e5cceb89a0",
      "patch": "@@ -71,11 +71,10 @@ void actualRequestWithoutCorsConfigurationProvider() throws Exception {\n \t\tthis.request.setRequestURI(\"/foo\");\n \t\tthis.request.addHeader(HttpHeaders.ORIGIN, \"https://domain2.com\");\n \t\tthis.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"GET\");\n-\t\tHandlerExecutionChain chain = handlerMapping.getHandler(this.request);\n+\t\tHandlerExecutionChain chain = this.handlerMapping.getHandler(this.request);\n \n \t\tassertThat(chain).isNotNull();\n-\t\tboolean condition = chain.getHandler() instanceof SimpleHandler;\n-\t\tassertThat(condition).isTrue();\n+\t\tassertThat(chain.getHandler()).isInstanceOf(SimpleHandler.class);\n \t}\n \n \t@Test\n@@ -84,11 +83,10 @@ void preflightRequestWithoutCorsConfigurationProvider() throws Exception {\n \t\tthis.request.setRequestURI(\"/foo\");\n \t\tthis.request.addHeader(HttpHeaders.ORIGIN, \"https://domain2.com\");\n \t\tthis.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"GET\");\n-\t\tHandlerExecutionChain chain = handlerMapping.getHandler(this.request);\n+\t\tHandlerExecutionChain chain = this.handlerMapping.getHandler(this.request);\n \n \t\tassertThat(chain).isNotNull();\n-\t\tboolean condition = chain.getHandler() instanceof SimpleHandler;\n-\t\tassertThat(condition).isTrue();\n+\t\tassertThat(chain.getHandler()).isInstanceOf(SimpleHandler.class);\n \t}\n \n \t@Test\n@@ -97,12 +95,11 @@ void actualRequestWithCorsConfigurationProvider() throws Exception {\n \t\tthis.request.setRequestURI(\"/cors\");\n \t\tthis.request.addHeader(HttpHeaders.ORIGIN, \"https://domain2.com\");\n \t\tthis.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"GET\");\n-\t\tHandlerExecutionChain chain = handlerMapping.getHandler(this.request);\n+\t\tHandlerExecutionChain chain = this.handlerMapping.getHandler(this.request);\n \n \t\tassertThat(chain).isNotNull();\n-\t\tboolean condition = chain.getHandler() instanceof CorsAwareHandler;\n-\t\tassertThat(condition).isTrue();\n-\t\tassertThat(getRequiredCorsConfiguration(chain, false).getAllowedOrigins()).isEqualTo(Collections.singletonList(\"*\"));\n+\t\tassertThat(chain.getHandler()).isInstanceOf(CorsAwareHandler.class);\n+\t\tassertThat(getRequiredCorsConfiguration(chain, false).getAllowedOrigins()).containsExactly(\"*\");\n \t}\n \n \t@Test // see gh-23843\n@@ -111,12 +108,11 @@ void actualRequestWithCorsConfigurationProviderForHandlerChain() throws Exceptio\n \t\tthis.request.setRequestURI(\"/chain\");\n \t\tthis.request.addHeader(HttpHeaders.ORIGIN, \"https://domain2.com\");\n \t\tthis.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"GET\");\n-\t\tHandlerExecutionChain chain = handlerMapping.getHandler(this.request);\n+\t\tHandlerExecutionChain chain = this.handlerMapping.getHandler(this.request);\n \n \t\tassertThat(chain).isNotNull();\n-\t\tboolean condition = chain.getHandler() instanceof CorsAwareHandler;\n-\t\tassertThat(condition).isTrue();\n-\t\tassertThat(getRequiredCorsConfiguration(chain, false).getAllowedOrigins()).isEqualTo(Collections.singletonList(\"*\"));\n+\t\tassertThat(chain.getHandler()).isInstanceOf(CorsAwareHandler.class);\n+\t\tassertThat(getRequiredCorsConfiguration(chain, false).getAllowedOrigins()).containsExactly(\"*\");\n \t}\n \n \t@Test\n@@ -125,12 +121,12 @@ void preflightRequestWithCorsConfigurationProvider() throws Exception {\n \t\tthis.request.setRequestURI(\"/cors\");\n \t\tthis.request.addHeader(HttpHeaders.ORIGIN, \"https://domain2.com\");\n \t\tthis.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"GET\");\n-\t\tHandlerExecutionChain chain = handlerMapping.getHandler(this.request);\n+\t\tHandlerExecutionChain chain = this.handlerMapping.getHandler(this.request);\n \n \t\tassertThat(chain).isNotNull();\n \t\tassertThat(chain.getHandler()).isNotNull();\n \t\tassertThat(chain.getHandler().getClass().getSimpleName()).isEqualTo(\"PreFlightHandler\");\n-\t\tassertThat(getRequiredCorsConfiguration(chain, true).getAllowedOrigins()).isEqualTo(Collections.singletonList(\"*\"));\n+\t\tassertThat(getRequiredCorsConfiguration(chain, true).getAllowedOrigins()).containsExactly(\"*\");\n \t}\n \n \t@Test\n@@ -142,12 +138,11 @@ void actualRequestWithMappedCorsConfiguration() throws Exception {\n \t\tthis.request.setRequestURI(\"/foo\");\n \t\tthis.request.addHeader(HttpHeaders.ORIGIN, \"https://domain2.com\");\n \t\tthis.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"GET\");\n-\t\tHandlerExecutionChain chain = handlerMapping.getHandler(this.request);\n+\t\tHandlerExecutionChain chain = this.handlerMapping.getHandler(this.request);\n \n \t\tassertThat(chain).isNotNull();\n-\t\tboolean condition = chain.getHandler() instanceof SimpleHandler;\n-\t\tassertThat(condition).isTrue();\n-\t\tassertThat(getRequiredCorsConfiguration(chain, false).getAllowedOrigins()).isEqualTo(Collections.singletonList(\"*\"));\n+\t\tassertThat(chain.getHandler()).isInstanceOf(SimpleHandler.class);\n+\t\tassertThat(getRequiredCorsConfiguration(chain, false).getAllowedOrigins()).containsExactly(\"*\");\n \t}\n \n \t@Test\n@@ -159,12 +154,12 @@ void preflightRequestWithMappedCorsConfiguration() throws Exception {\n \t\tthis.request.setRequestURI(\"/foo\");\n \t\tthis.request.addHeader(HttpHeaders.ORIGIN, \"https://domain2.com\");\n \t\tthis.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"GET\");\n-\t\tHandlerExecutionChain chain = handlerMapping.getHandler(this.request);\n+\t\tHandlerExecutionChain chain = this.handlerMapping.getHandler(this.request);\n \n \t\tassertThat(chain).isNotNull();\n \t\tassertThat(chain.getHandler()).isNotNull();\n \t\tassertThat(chain.getHandler().getClass().getSimpleName()).isEqualTo(\"PreFlightHandler\");\n-\t\tassertThat(getRequiredCorsConfiguration(chain, true).getAllowedOrigins()).isEqualTo(Collections.singletonList(\"*\"));\n+\t\tassertThat(getRequiredCorsConfiguration(chain, true).getAllowedOrigins()).containsExactly(\"*\");\n \t}\n \n \t@Test\n@@ -174,15 +169,14 @@ void actualRequestWithCorsConfigurationSource() throws Exception {\n \t\tthis.request.setRequestURI(\"/foo\");\n \t\tthis.request.addHeader(HttpHeaders.ORIGIN, \"https://domain2.com\");\n \t\tthis.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"GET\");\n-\t\tHandlerExecutionChain chain = handlerMapping.getHandler(this.request);\n+\t\tHandlerExecutionChain chain = this.handlerMapping.getHandler(this.request);\n \n \t\tassertThat(chain).isNotNull();\n-\t\tboolean condition = chain.getHandler() instanceof SimpleHandler;\n-\t\tassertThat(condition).isTrue();\n+\t\tassertThat(chain.getHandler()).isInstanceOf(SimpleHandler.class);\n \t\tCorsConfiguration config = getRequiredCorsConfiguration(chain, false);\n \t\tassertThat(config).isNotNull();\n-\t\tassertThat(config.getAllowedOrigins()).isEqualTo(Collections.singletonList(\"*\"));\n-\t\tassertThat(config.getAllowCredentials()).isEqualTo(true);\n+\t\tassertThat(config.getAllowedOrigins()).containsExactly(\"*\");\n+\t\tassertThat(config.getAllowCredentials()).isTrue();\n \t}\n \n \t@Test\n@@ -192,15 +186,15 @@ void preflightRequestWithCorsConfigurationSource() throws Exception {\n \t\tthis.request.setRequestURI(\"/foo\");\n \t\tthis.request.addHeader(HttpHeaders.ORIGIN, \"https://domain2.com\");\n \t\tthis.request.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"GET\");\n-\t\tHandlerExecutionChain chain = handlerMapping.getHandler(this.request);\n+\t\tHandlerExecutionChain chain = this.handlerMapping.getHandler(this.request);\n \n \t\tassertThat(chain).isNotNull();\n \t\tassertThat(chain.getHandler()).isNotNull();\n \t\tassertThat(chain.getHandler().getClass().getSimpleName()).isEqualTo(\"PreFlightHandler\");\n \t\tCorsConfiguration config = getRequiredCorsConfiguration(chain, true);\n \t\tassertThat(config).isNotNull();\n-\t\tassertThat(config.getAllowedOrigins()).isEqualTo(Collections.singletonList(\"*\"));\n-\t\tassertThat(config.getAllowCredentials()).isEqualTo(true);\n+\t\tassertThat(config.getAllowedOrigins()).containsExactly(\"*\");\n+\t\tassertThat(config.getAllowCredentials()).isTrue();\n \t}\n \n ",
      "parent_sha": "8df3afd0b65e15ed1063c737d7d428ede3670603"
    }
  },
  {
    "oid": "d44ba0a42b84a623f220564202b144acbbb0ee90",
    "message": "Consistent formatting",
    "date": "2022-05-10T11:12:11Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/d44ba0a42b84a623f220564202b144acbbb0ee90",
    "details": {
      "sha": "fff4d7e23298419f239cdf6100e0feca5ad23882",
      "filename": "spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClientResponseException.java",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/d44ba0a42b84a623f220564202b144acbbb0ee90/spring-webflux%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Ffunction%2Fclient%2FWebClientResponseException.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/d44ba0a42b84a623f220564202b144acbbb0ee90/spring-webflux%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Ffunction%2Fclient%2FWebClientResponseException.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webflux%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Ffunction%2Fclient%2FWebClientResponseException.java?ref=d44ba0a42b84a623f220564202b144acbbb0ee90",
      "patch": "@@ -119,16 +119,15 @@ public WebClientResponseException(\n \t\t\t@Nullable HttpRequest request) {\n \n \t\tthis(message, HttpStatusCode.valueOf(statusCode), statusText, headers, responseBody, charset, request);\n-\n-\n \t}\n+\n \t/**\n \t * Constructor with a prepared message.\n \t * @since 6.0\n \t */\n-\tpublic WebClientResponseException(String message, HttpStatusCode statusCode, String statusText,\n-\t\t\t@Nullable HttpHeaders headers, @Nullable byte[] responseBody, @Nullable Charset charset,\n-\t\t\t@Nullable HttpRequest request) {\n+\tpublic WebClientResponseException(\n+\t\t\tString message, HttpStatusCode statusCode, String statusText, @Nullable HttpHeaders headers,\n+\t\t\t@Nullable byte[] responseBody, @Nullable Charset charset, @Nullable HttpRequest request) {\n \n \t\tsuper(message);\n ",
      "parent_sha": "da112a7ea82fee786a309f24baeda57d15478ff7"
    }
  },
  {
    "oid": "cccd9c8bb0228f09e51a1f44bfc24978822b7718",
    "message": "Fix okhttp3 downgrade",
    "date": "2019-09-04T13:07:17Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/cccd9c8bb0228f09e51a1f44bfc24978822b7718",
    "details": {
      "sha": "cbef27287d44f6de5ad5dac333a27a1a14efab33",
      "filename": "spring-web/src/test/java/org/springframework/http/client/AbstractMockWebServerTests.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/cccd9c8bb0228f09e51a1f44bfc24978822b7718/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fclient%2FAbstractMockWebServerTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/cccd9c8bb0228f09e51a1f44bfc24978822b7718/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fclient%2FAbstractMockWebServerTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fclient%2FAbstractMockWebServerTests.java?ref=cccd9c8bb0228f09e51a1f44bfc24978822b7718",
      "patch": "@@ -66,10 +66,10 @@ public MockResponse dispatch(RecordedRequest request) throws InterruptedExceptio\n \t\t\t\t\tassertThat(request.getHeader(\"Host\"))\n \t\t\t\t\t\t\t.contains(\"localhost:\" + port);\n \t\t\t\t\tMockResponse response = new MockResponse()\n+\t\t\t\t\t\t\t.setHeaders(request.getHeaders())\n \t\t\t\t\t\t\t.setHeader(\"Content-Length\", request.getBody().size())\n \t\t\t\t\t\t\t.setResponseCode(200)\n \t\t\t\t\t\t\t.setBody(request.getBody());\n-\t\t\t\t\tresponse.headers(request.getHeaders());\n \t\t\t\t\trequest.getBody().flush();\n \t\t\t\t\treturn response;\n \t\t\t\t}",
      "parent_sha": "e83fec4ec3a79c29b068d3c5db4f4a41de717cdb"
    }
  },
  {
    "oid": "a02aafe5fefacc57ab0a5707fb9afa3056d2ab09",
    "message": "Regular getBeanInfo call for interfaces (enabling Introspector's cache)\n\nIssue: SPR-16568",
    "date": "2018-03-08T11:29:09Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/a02aafe5fefacc57ab0a5707fb9afa3056d2ab09",
    "details": {
      "sha": "ef74f0dd37738f8f67d45ec9a56a272c84ce502d",
      "filename": "spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java",
      "status": "modified",
      "additions": 4,
      "deletions": 9,
      "changes": 13,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/a02aafe5fefacc57ab0a5707fb9afa3056d2ab09/spring-beans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbeans%2FCachedIntrospectionResults.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/a02aafe5fefacc57ab0a5707fb9afa3056d2ab09/spring-beans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbeans%2FCachedIntrospectionResults.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-beans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbeans%2FCachedIntrospectionResults.java?ref=a02aafe5fefacc57ab0a5707fb9afa3056d2ab09",
      "patch": "@@ -247,20 +247,17 @@ private static boolean isUnderneathClassLoader(@Nullable ClassLoader candidate,\n \t/**\n \t * Retrieve a {@link BeanInfo} descriptor for the given target class.\n \t * @param beanClass the target class to introspect\n-\t * @param ignoreBeaninfoClasses whether to apply {@link Introspector#IGNORE_ALL_BEANINFO} mode\n \t * @return the resulting {@code BeanInfo} descriptor (never {@code null})\n \t * @throws IntrospectionException from the underlying {@link Introspector}\n \t */\n-\tprivate static BeanInfo getBeanInfo(Class<?> beanClass, boolean ignoreBeaninfoClasses)\n-\t\t\tthrows IntrospectionException {\n-\n+\tprivate static BeanInfo getBeanInfo(Class<?> beanClass) throws IntrospectionException {\n \t\tfor (BeanInfoFactory beanInfoFactory : beanInfoFactories) {\n \t\t\tBeanInfo beanInfo = beanInfoFactory.getBeanInfo(beanClass);\n \t\t\tif (beanInfo != null) {\n \t\t\t\treturn beanInfo;\n \t\t\t}\n \t\t}\n-\t\treturn (ignoreBeaninfoClasses ?\n+\t\treturn (shouldIntrospectorIgnoreBeaninfoClasses ?\n \t\t\t\tIntrospector.getBeanInfo(beanClass, Introspector.IGNORE_ALL_BEANINFO) :\n \t\t\t\tIntrospector.getBeanInfo(beanClass));\n \t}\n@@ -286,7 +283,7 @@ private CachedIntrospectionResults(Class<?> beanClass) throws BeansException {\n \t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\tlogger.trace(\"Getting BeanInfo for class [\" + beanClass.getName() + \"]\");\n \t\t\t}\n-\t\t\tthis.beanInfo = getBeanInfo(beanClass, shouldIntrospectorIgnoreBeaninfoClasses);\n+\t\t\tthis.beanInfo = getBeanInfo(beanClass);\n \n \t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\tlogger.trace(\"Caching PropertyDescriptors for class [\" + beanClass.getName() + \"]\");\n@@ -318,9 +315,7 @@ private CachedIntrospectionResults(Class<?> beanClass) throws BeansException {\n \t\t\t\tClass<?>[] ifcs = clazz.getInterfaces();\n \t\t\t\tfor (Class<?> ifc : ifcs) {\n \t\t\t\t\tif (!ClassUtils.isJavaLanguageInterface(ifc)) {\n-\t\t\t\t\t\tBeanInfo ifcInfo = getBeanInfo(ifc, true);\n-\t\t\t\t\t\tPropertyDescriptor[] ifcPds = ifcInfo.getPropertyDescriptors();\n-\t\t\t\t\t\tfor (PropertyDescriptor pd : ifcPds) {\n+\t\t\t\t\t\tfor (PropertyDescriptor pd : getBeanInfo(ifc).getPropertyDescriptors()) {\n \t\t\t\t\t\t\tif (!this.propertyDescriptorCache.containsKey(pd.getName())) {\n \t\t\t\t\t\t\t\tpd = buildGenericTypeAwarePropertyDescriptor(beanClass, pd);\n \t\t\t\t\t\t\t\tthis.propertyDescriptorCache.put(pd.getName(), pd);",
      "parent_sha": "eb96ff2943182565f1aa3508f9c3e39a4997d56d"
    }
  },
  {
    "oid": "14b9931ee30e309c32b0e5949611f1516e8bd6f4",
    "message": "Update MvcUriComponentsBuilder to use DispServlet WAC\n\nIssue: SPR-8826",
    "date": "2013-10-26T03:25:13Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/14b9931ee30e309c32b0e5949611f1516e8bd6f4",
    "details": {
      "sha": "9112dcf36d2a1af92d8897ed2bba40c321492774",
      "filename": "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/14b9931ee30e309c32b0e5949611f1516e8bd6f4/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fmvc%2Fmethod%2Fannotation%2FMvcUriComponentsBuilder.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/14b9931ee30e309c32b0e5949611f1516e8bd6f4/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fmvc%2Fmethod%2Fannotation%2FMvcUriComponentsBuilder.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fmvc%2Fmethod%2Fannotation%2FMvcUriComponentsBuilder.java?ref=14b9931ee30e309c32b0e5949611f1516e8bd6f4",
      "patch": "@@ -40,6 +40,8 @@\n import org.springframework.web.context.support.WebApplicationContextUtils;\n import org.springframework.web.method.annotation.RequestParamMethodArgumentResolver;\n import org.springframework.web.method.support.CompositeUriComponentsContributor;\n+import org.springframework.web.servlet.DispatcherServlet;\n+import org.springframework.web.servlet.support.RequestContextUtils;\n import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n import org.springframework.web.util.UriComponents;\n import org.springframework.web.util.UriComponentsBuilder;\n@@ -297,10 +299,10 @@ protected static CompositeUriComponentsContributor getConfiguredUriComponentsCon\n \t\t\tlogger.debug(\"Request bound to current thread is not an HttpServletRequest\");\n \t\t\treturn null;\n \t\t}\n-\t\tServletContext servletContext = request.getServletContext();\n-\t\tWebApplicationContext wac = WebApplicationContextUtils.getWebApplicationContext(servletContext);\n+\t\tWebApplicationContext wac = (WebApplicationContext) request.getAttribute(\n+\t\t\t\tDispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE);\n \t\tif (wac == null) {\n-\t\t\tlogger.debug(\"No WebApplicationContext found: no ContextLoaderListener registered?\");\n+\t\t\tlogger.debug(\"No WebApplicationContext found: not in a DispatcherServlet request?\");\n \t\t\treturn null;\n \t\t}\n \t\ttry {",
      "parent_sha": "cf5db8362b3b95e2555e4e1600e3c6919e952f01"
    }
  },
  {
    "oid": "4e4145ac27d15a8078c1f1b468b5fd61ec332d21",
    "message": "Avoid unnecessary call to get message type\n\nCloses gh-23040",
    "date": "2019-05-28T05:21:08Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/4e4145ac27d15a8078c1f1b468b5fd61ec332d21",
    "details": {
      "sha": "bcfe2dc3fe61a897d8e29a1ffbf4d2f310cea6e6",
      "filename": "spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/4e4145ac27d15a8078c1f1b468b5fd61ec332d21/spring-messaging%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fmessaging%2Fsimp%2Fbroker%2FSimpleBrokerMessageHandler.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/4e4145ac27d15a8078c1f1b468b5fd61ec332d21/spring-messaging%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fmessaging%2Fsimp%2Fbroker%2FSimpleBrokerMessageHandler.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-messaging%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fmessaging%2Fsimp%2Fbroker%2FSimpleBrokerMessageHandler.java?ref=4e4145ac27d15a8078c1f1b468b5fd61ec332d21",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2018 the original author or authors.\n+ * Copyright 2002-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -289,7 +289,6 @@ public void stopInternal() {\n \t@Override\n \tprotected void handleMessageInternal(Message<?> message) {\n \t\tMessageHeaders headers = message.getHeaders();\n-\t\tSimpMessageType messageType = SimpMessageHeaderAccessor.getMessageType(headers);\n \t\tString destination = SimpMessageHeaderAccessor.getDestination(headers);\n \t\tString sessionId = SimpMessageHeaderAccessor.getSessionId(headers);\n \n@@ -299,6 +298,7 @@ protected void handleMessageInternal(Message<?> message) {\n \t\t\treturn;\n \t\t}\n \n+\t\tSimpMessageType messageType = SimpMessageHeaderAccessor.getMessageType(headers);\n \t\tif (SimpMessageType.MESSAGE.equals(messageType)) {\n \t\t\tlogMessage(message);\n \t\t\tsendMessageToSubscribers(destination, message);",
      "parent_sha": "bc205e0dbf4b79e9dd2f3527ddfa9fb5a117cc67"
    }
  },
  {
    "oid": "c6f63bdb30dcbdbaaecaa772077cfa436698c0b4",
    "message": "Assertions for error codes in case of formatting failures\n\nIssue: SPR-14345",
    "date": "2016-06-08T13:54:00Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/c6f63bdb30dcbdbaaecaa772077cfa436698c0b4",
    "details": {
      "sha": "1f0c31c85481a427c28176935a6c9b96563d2f41",
      "filename": "spring-context/src/test/java/org/springframework/validation/DataBinderTests.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/c6f63bdb30dcbdbaaecaa772077cfa436698c0b4/spring-context%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fvalidation%2FDataBinderTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/c6f63bdb30dcbdbaaecaa772077cfa436698c0b4/spring-context%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fvalidation%2FDataBinderTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-context%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fvalidation%2FDataBinderTests.java?ref=c6f63bdb30dcbdbaaecaa772077cfa436698c0b4",
      "patch": "@@ -227,12 +227,14 @@ public void testBindingWithErrors() throws Exception {\n \n \t\t\tassertTrue(\"Has age errors\", br.hasFieldErrors(\"age\"));\n \t\t\tassertTrue(\"Correct number of age errors\", br.getFieldErrorCount(\"age\") == 1);\n+\t\t\tassertEquals(\"typeMismatch\", binder.getBindingResult().getFieldError(\"age\").getCode());\n \t\t\tassertEquals(\"32x\", binder.getBindingResult().getFieldValue(\"age\"));\n \t\t\tassertEquals(\"32x\", binder.getBindingResult().getFieldError(\"age\").getRejectedValue());\n \t\t\tassertEquals(0, tb.getAge());\n \n \t\t\tassertTrue(\"Has touchy errors\", br.hasFieldErrors(\"touchy\"));\n \t\t\tassertTrue(\"Correct number of touchy errors\", br.getFieldErrorCount(\"touchy\") == 1);\n+\t\t\tassertEquals(\"methodInvocation\", binder.getBindingResult().getFieldError(\"touchy\").getCode());\n \t\t\tassertEquals(\"m.y\", binder.getBindingResult().getFieldValue(\"touchy\"));\n \t\t\tassertEquals(\"m.y\", binder.getBindingResult().getFieldError(\"touchy\").getRejectedValue());\n \t\t\tassertNull(tb.getTouchy());\n@@ -316,12 +318,14 @@ public String getAsText() {\n \n \t\t\tassertTrue(\"Has age errors\", br.hasFieldErrors(\"age\"));\n \t\t\tassertTrue(\"Correct number of age errors\", br.getFieldErrorCount(\"age\") == 1);\n+\t\t\tassertEquals(\"typeMismatch\", binder.getBindingResult().getFieldError(\"age\").getCode());\n \t\t\tassertEquals(\"32x\", binder.getBindingResult().getFieldValue(\"age\"));\n \t\t\tassertEquals(\"32x\", binder.getBindingResult().getFieldError(\"age\").getRejectedValue());\n \t\t\tassertEquals(0, tb.getAge());\n \n \t\t\tassertTrue(\"Has touchy errors\", br.hasFieldErrors(\"touchy\"));\n \t\t\tassertTrue(\"Correct number of touchy errors\", br.getFieldErrorCount(\"touchy\") == 1);\n+\t\t\tassertEquals(\"methodInvocation\", binder.getBindingResult().getFieldError(\"touchy\").getCode());\n \t\t\tassertEquals(\"m.y\", binder.getBindingResult().getFieldValue(\"touchy\"));\n \t\t\tassertEquals(\"m.y\", binder.getBindingResult().getFieldError(\"touchy\").getRejectedValue());\n \t\t\tassertNull(tb.getTouchy());\n@@ -420,6 +424,7 @@ public String print(String object, Locale locale) {\n \n \t\tbinder.bind(pvs);\n \t\tassertTrue(binder.getBindingResult().hasFieldErrors(\"name\"));\n+\t\tassertEquals(\"typeMismatch\", binder.getBindingResult().getFieldError(\"name\").getCode());\n \t\tassertEquals(\"test\", binder.getBindingResult().getFieldValue(\"name\"));\n \t}\n \n@@ -568,6 +573,7 @@ public void testBindingErrorWithCustomFormatter() {\n \t\t\tassertEquals(new Float(0.0), tb.getMyFloat());\n \t\t\tassertEquals(\"1x2\", binder.getBindingResult().getFieldValue(\"myFloat\"));\n \t\t\tassertTrue(binder.getBindingResult().hasFieldErrors(\"myFloat\"));\n+\t\t\tassertEquals(\"typeMismatch\", binder.getBindingResult().getFieldError(\"myFloat\").getCode());\n \t\t}\n \t\tfinally {\n \t\t\tLocaleContextHolder.resetLocaleContext();\n@@ -882,7 +888,6 @@ public void testCustomEditorForPrimitiveProperty() {\n \t\t\tpublic void setAsText(String text) throws IllegalArgumentException {\n \t\t\t\tsetValue(new Integer(99));\n \t\t\t}\n-\n \t\t\t@Override\n \t\t\tpublic String getAsText() {\n \t\t\t\treturn \"argh\";\n@@ -907,7 +912,6 @@ public void testCustomEditorForAllStringProperties() {\n \t\t\tpublic void setAsText(String text) throws IllegalArgumentException {\n \t\t\t\tsetValue(\"prefix\" + text);\n \t\t\t}\n-\n \t\t\t@Override\n \t\t\tpublic String getAsText() {\n \t\t\t\treturn ((String) getValue()).substring(6);\n@@ -980,7 +984,6 @@ public void testCustomFormatterForPrimitiveProperty() {\n \t\t\tpublic Integer parse(String text, Locale locale) throws ParseException {\n \t\t\t\treturn 99;\n \t\t\t}\n-\n \t\t\t@Override\n \t\t\tpublic String print(Integer object, Locale locale) {\n \t\t\t\treturn \"argh\";",
      "parent_sha": "d1d29cf699f21eb2bfba235b6cf1086fd1d54433"
    }
  },
  {
    "oid": "cac76192e28ccf18faa8d19147011cbde040e3b4",
    "message": "Added \"postProcessConfiguration\" template method to LocalValidatorFactoryBean",
    "date": "2013-05-03T13:04:18Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/cac76192e28ccf18faa8d19147011cbde040e3b4",
    "details": {
      "sha": "9f187600c4adaff1bd5e7242b085136a1a7c35ae",
      "filename": "spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java",
      "status": "modified",
      "additions": 18,
      "deletions": 3,
      "changes": 21,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/cac76192e28ccf18faa8d19147011cbde040e3b4/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fvalidation%2Fbeanvalidation%2FLocalValidatorFactoryBean.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/cac76192e28ccf18faa8d19147011cbde040e3b4/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fvalidation%2Fbeanvalidation%2FLocalValidatorFactoryBean.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fvalidation%2Fbeanvalidation%2FLocalValidatorFactoryBean.java?ref=cac76192e28ccf18faa8d19147011cbde040e3b4",
      "patch": "@@ -64,8 +64,8 @@\n  * you will almost always use the default Validator anyway. This can also be injected directly\n  * into any target dependency of type {@link org.springframework.validation.Validator}!\n  *\n- * <p>As of Spring 4.0, this class supports Bean Validation 1.0 and 1.1, with special support\n- * for Hibernate Validator 4.x and 5.0 (see {@link #setValidationMessageSource}).\n+ * <p><b>As of Spring 4.0, this class supports Bean Validation 1.0 and 1.1, with special support\n+ * for Hibernate Validator 4.x and 5.0</b> (see {@link #setValidationMessageSource}).\n  *\n  * <p>Note that Bean Validation 1.1's {@code #forExecutables} method isn't supported: We do not\n  * expect that method to be called by application code; consider {@link MethodValidationInterceptor}\n@@ -254,6 +254,9 @@ public void afterPropertiesSet() {\n \t\t\tconfiguration.addProperty(entry.getKey(), entry.getValue());\n \t\t}\n \n+\t\t// Allow for custom post-processing before we actually build the ValidatorFactory.\n+\t\tpostProcessConfiguration(configuration);\n+\n \t\tthis.validatorFactory = configuration.buildValidatorFactory();\n \t\tsetTargetValidator(this.validatorFactory.getValidator());\n \t}\n@@ -310,6 +313,16 @@ else if (args[0] instanceof Method) {\n \t\t}\n \t}\n \n+\t/**\n+\t * Post-process the given Bean Validation configuration,\n+\t * adding to or overriding any of its settings.\n+\t * <p>Invoked right before building the {@link ValidatorFactory}.\n+\t * @param configuration the Configuration object, pre-populated with\n+\t * settings driven by LocalValidatorFactoryBean's properties\n+\t */\n+\tprotected void postProcessConfiguration(Configuration configuration) {\n+\t}\n+\n \n \tpublic Validator getValidator() {\n \t\treturn this.validatorFactory.getValidator();\n@@ -332,7 +345,9 @@ public ConstraintValidatorFactory getConstraintValidatorFactory() {\n \t}\n \n \tpublic void close() {\n-\t\tReflectionUtils.invokeMethod(closeMethod, this.validatorFactory);\n+\t\tif (closeMethod != null) {\n+\t\t\tReflectionUtils.invokeMethod(closeMethod, this.validatorFactory);\n+\t\t}\n \t}\n \n \tpublic void destroy() {",
      "parent_sha": "ddbcf62edd187944145480c73ed4c98d85dd3432"
    }
  },
  {
    "oid": "48e7908effa1f6e1be514062e4156bceff214861",
    "message": "Polishing",
    "date": "2024-05-22T13:57:41Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/48e7908effa1f6e1be514062e4156bceff214861",
    "details": {
      "sha": "62a3e524bb11e6316bae66d09588ec24ad06624c",
      "filename": "spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/48e7908effa1f6e1be514062e4156bceff214861/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Ffunction%2Fclient%2FWebClientIntegrationTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/48e7908effa1f6e1be514062e4156bceff214861/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Ffunction%2Fclient%2FWebClientIntegrationTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Ffunction%2Fclient%2FWebClientIntegrationTests.java?ref=48e7908effa1f6e1be514062e4156bceff214861",
      "patch": "@@ -219,7 +219,7 @@ else if (nativeRequest.get() instanceof reactor.netty5.channel.ChannelOperations\n \t\telse if (nativeRequest.get() instanceof Request nativeReq) {\n \t\t\tassertThat(nativeReq.getAttributes()).containsEntry(\"foo\", \"bar\");\n \t\t}\n-\t\telse if (nativeRequest.get() instanceof org.apache.hc.core5.http.HttpRequest nativeReq) {\n+\t\telse if (nativeRequest.get() instanceof org.apache.hc.core5.http.HttpRequest) {\n \t\t\t// Attributes are not in the request, but in separate HttpClientContext\n \t\t}\n \t}",
      "parent_sha": "61db499ae2f225a565072ccd76b19697fd811174"
    }
  },
  {
    "oid": "5904814ec68aa4be07a2d84803a88882561aecfa",
    "message": "ignore cases from some tricky scenarios",
    "date": "2009-07-12T18:05:13Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/5904814ec68aa4be07a2d84803a88882561aecfa",
    "details": {
      "sha": "fa359913eb9cee27a59d7a1e72f24b94be400bc7",
      "filename": "org.springframework.context/src/test/java/org/springframework/ui/binding/support/GenericBinderTests.java",
      "status": "modified",
      "additions": 23,
      "deletions": 1,
      "changes": 24,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/5904814ec68aa4be07a2d84803a88882561aecfa/org.springframework.context%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fui%2Fbinding%2Fsupport%2FGenericBinderTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/5904814ec68aa4be07a2d84803a88882561aecfa/org.springframework.context%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fui%2Fbinding%2Fsupport%2FGenericBinderTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.context%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fui%2Fbinding%2Fsupport%2FGenericBinderTests.java?ref=5904814ec68aa4be07a2d84803a88882561aecfa",
      "patch": "@@ -324,7 +324,29 @@ public void getListAsSingleString() {\n \t\tString value = binder.getBinding(\"addresses\").getValue();\n \t\tassertEquals(\"s1:c1:st1:z1,s2:c2:st2:z2,\", value);\n \t}\n-\t\n+\n+\t@Test\n+\t@Ignore\n+\tpublic void getListAsSingleStringNoFormatter() {\n+\t\tbinder.addBinding(\"addresses\");\n+\t\tAddress address1 = new Address();\n+\t\taddress1.setStreet(\"s1\");\n+\t\taddress1.setCity(\"c1\");\n+\t\taddress1.setState(\"st1\");\n+\t\taddress1.setZip(\"z1\");\n+\t\tAddress address2 = new Address();\n+\t\taddress2.setStreet(\"s2\");\n+\t\taddress2.setCity(\"c2\");\n+\t\taddress2.setState(\"st2\");\n+\t\taddress2.setZip(\"z2\");\n+\t\tList<Address> addresses = new ArrayList<Address>(2);\n+\t\taddresses.add(address1);\n+\t\taddresses.add(address2);\n+\t\tbean.addresses = addresses;\n+\t\tString value = binder.getBinding(\"addresses\").getValue();\n+\t\tassertEquals(\"s1:c1:st1:z1,s2:c2:st2:z2,\", value);\n+\t}\n+\n \t@Test\n \tpublic void bindToListHandleNullValueInNestedPath() {\n \t\tbinder.addBinding(\"addresses.street\");",
      "parent_sha": "eb4a767f6b76466b33d30ebd5006b4e81b64cab5"
    }
  },
  {
    "oid": "7d8dda9a5ac6b05edb0bbb9d23edf44a3c465554",
    "message": "Polish reactive type support in Conventions",
    "date": "2017-04-19T03:25:44Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/7d8dda9a5ac6b05edb0bbb9d23edf44a3c465554",
    "details": {
      "sha": "1fbeeae68674557bd2271b9d72cc10de00c78d1a",
      "filename": "spring-core/src/main/java/org/springframework/core/Conventions.java",
      "status": "modified",
      "additions": 25,
      "deletions": 8,
      "changes": 33,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/7d8dda9a5ac6b05edb0bbb9d23edf44a3c465554/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcore%2FConventions.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/7d8dda9a5ac6b05edb0bbb9d23edf44a3c465554/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcore%2FConventions.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcore%2FConventions.java?ref=7d8dda9a5ac6b05edb0bbb9d23edf44a3c465554",
      "patch": "@@ -36,6 +36,7 @@\n  *\n  * @author Rob Harrop\n  * @author Juergen Hoeller\n+ * @author Rossen Stoyanchev\n  * @since 2.0\n  */\n public abstract class Conventions {\n@@ -108,6 +109,12 @@ else if (value instanceof Collection) {\n \t/**\n \t * Determine the conventional variable name for the given parameter taking\n \t * the generic collection type, if any, into account.\n+\t *\n+\t * <p>As of 5.0 this method supports reactive types:<br>\n+\t * {@code Mono<com.myapp.Product>} becomes {@code \"productMono\"}<br>\n+\t * {@code Flux<com.myapp.MyProduct>} becomes {@code \"myProductFlux\"}<br>\n+\t * {@code Observable<com.myapp.MyProduct>} becomes {@code \"myProductObservable\"}<br>\n+\t *\n \t * @param parameter the method or constructor parameter\n \t * @return the generated variable name\n \t */\n@@ -132,10 +139,12 @@ else if (Collection.class.isAssignableFrom(parameter.getParameterType())) {\n \t\telse {\n \t\t\tvalueClass = parameter.getParameterType();\n \n-\t\t\tReactiveAdapter adapter = reactiveAdapterRegistry.getAdapter(valueClass);\n-\t\t\tif (adapter != null && !adapter.getDescriptor().isNoValue()) {\n-\t\t\t\treactiveSuffix = ClassUtils.getShortName(valueClass);\n-\t\t\t\tvalueClass = parameter.nested().getNestedParameterType();\n+\t\t\tif (reactiveAdapterRegistry.hasAdapters()) {\n+\t\t\t\tReactiveAdapter adapter = reactiveAdapterRegistry.getAdapter(valueClass);\n+\t\t\t\tif (adapter != null && !adapter.getDescriptor().isNoValue()) {\n+\t\t\t\t\treactiveSuffix = ClassUtils.getShortName(valueClass);\n+\t\t\t\t\tvalueClass = parameter.nested().getNestedParameterType();\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \n@@ -171,6 +180,12 @@ public static String getVariableNameForReturnType(Method method, Object value) {\n \t * method, taking the generic collection type, if any, into account, falling\n \t * back on the given return value if the method declaration is not specific\n \t * enough, e.g. {@code Object} return type or untyped collection.\n+\t *\n+\t * <p>As of 5.0 this method supports reactive types:<br>\n+\t * {@code Mono<com.myapp.Product>} becomes {@code \"productMono\"}<br>\n+\t * {@code Flux<com.myapp.MyProduct>} becomes {@code \"myProductFlux\"}<br>\n+\t * {@code Observable<com.myapp.MyProduct>} becomes {@code \"myProductObservable\"}<br>\n+\t *\n \t * @param method the method to generate a variable name for\n \t * @param resolvedType the resolved return type of the method\n \t * @param value the return value (may be {@code null} if not available)\n@@ -215,10 +230,12 @@ else if (Collection.class.isAssignableFrom(resolvedType)) {\n \t\telse {\n \t\t\tvalueClass = resolvedType;\n \n-\t\t\tReactiveAdapter adapter = reactiveAdapterRegistry.getAdapter(valueClass);\n-\t\t\tif (adapter != null && !adapter.getDescriptor().isNoValue()) {\n-\t\t\t\treactiveSuffix = ClassUtils.getShortName(valueClass);\n-\t\t\t\tvalueClass = ResolvableType.forMethodReturnType(method).getGeneric(0).resolve();\n+\t\t\tif (reactiveAdapterRegistry.hasAdapters()) {\n+\t\t\t\tReactiveAdapter adapter = reactiveAdapterRegistry.getAdapter(valueClass);\n+\t\t\t\tif (adapter != null && !adapter.getDescriptor().isNoValue()) {\n+\t\t\t\t\treactiveSuffix = ClassUtils.getShortName(valueClass);\n+\t\t\t\t\tvalueClass = ResolvableType.forMethodReturnType(method).getGeneric(0).resolve();\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n ",
      "parent_sha": "887e5e50a9a7397b02edb5bd4be65b2a6355325d"
    }
  },
  {
    "oid": "0702898836bf68a6cabe0f6215ab94593240f4b9",
    "message": "Clean up warnings in Gradle build output",
    "date": "2017-09-04T14:26:51Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/0702898836bf68a6cabe0f6215ab94593240f4b9",
    "details": {
      "sha": "92a3ad9df39d47bf9d426fd25d4a9789abc48f24",
      "filename": "spring-test/src/test/java/org/springframework/test/web/client/samples/SampleAsyncTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/0702898836bf68a6cabe0f6215ab94593240f4b9/spring-test%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Ftest%2Fweb%2Fclient%2Fsamples%2FSampleAsyncTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/0702898836bf68a6cabe0f6215ab94593240f4b9/spring-test%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Ftest%2Fweb%2Fclient%2Fsamples%2FSampleAsyncTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-test%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Ftest%2Fweb%2Fclient%2Fsamples%2FSampleAsyncTests.java?ref=0702898836bf68a6cabe0f6215ab94593240f4b9",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2016 the original author or authors.\n+ * Copyright 2002-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -26,7 +26,6 @@\n import org.springframework.test.web.Person;\n import org.springframework.test.web.client.MockRestServiceServer;\n import org.springframework.util.concurrent.ListenableFuture;\n-import org.springframework.web.client.AsyncRestTemplate;\n \n import static org.junit.Assert.*;\n import static org.springframework.test.web.client.ExpectedCount.manyTimes;\n@@ -45,7 +44,7 @@\n @SuppressWarnings(\"deprecation\")\n public class SampleAsyncTests {\n \n-\tprivate final AsyncRestTemplate restTemplate = new AsyncRestTemplate();\n+\tprivate final org.springframework.web.client.AsyncRestTemplate restTemplate = new org.springframework.web.client.AsyncRestTemplate();\n \n \tprivate final MockRestServiceServer mockServer = MockRestServiceServer.createServer(this.restTemplate);\n ",
      "parent_sha": "60f763a0dd2bc4e1559aff84cacd729387ee9c16"
    }
  },
  {
    "oid": "59b7c25003f0fe61163d074d50be558bde6b698b",
    "message": "Use ResolvableType instead of raw Class in JacksonJsonDecoder",
    "date": "2016-06-21T14:48:18Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/59b7c25003f0fe61163d074d50be558bde6b698b",
    "details": {
      "sha": "93815729db6b8fdd46908a97ab127dbd54109439",
      "filename": "spring-web-reactive/src/main/java/org/springframework/core/codec/support/JacksonJsonDecoder.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/59b7c25003f0fe61163d074d50be558bde6b698b/spring-web-reactive%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcore%2Fcodec%2Fsupport%2FJacksonJsonDecoder.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/59b7c25003f0fe61163d074d50be558bde6b698b/spring-web-reactive%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcore%2Fcodec%2Fsupport%2FJacksonJsonDecoder.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web-reactive%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcore%2Fcodec%2Fsupport%2FJacksonJsonDecoder.java?ref=59b7c25003f0fe61163d074d50be558bde6b698b",
      "patch": "@@ -19,8 +19,10 @@\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n \n+import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.ObjectReader;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n import org.reactivestreams.Publisher;\n import reactor.core.publisher.Flux;\n \n@@ -29,6 +31,7 @@\n import org.springframework.core.codec.Decoder;\n import org.springframework.core.io.buffer.DataBuffer;\n import org.springframework.core.io.buffer.support.DataBufferUtils;\n+import org.springframework.util.Assert;\n import org.springframework.util.MimeType;\n \n \n@@ -64,7 +67,11 @@ public JacksonJsonDecoder(ObjectMapper mapper, Decoder<DataBuffer> preProcessor)\n \tpublic Flux<Object> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType,\n \t\t\tMimeType mimeType, Object... hints) {\n \n-\t\tObjectReader reader = this.mapper.readerFor(elementType.getRawClass());\n+\t\tAssert.notNull(inputStream, \"'inputStream' must not be null\");\n+\t\tAssert.notNull(elementType, \"'elementType' must not be null\");\n+\t\tTypeFactory typeFactory = this.mapper.getTypeFactory();\n+\t\tJavaType javaType = typeFactory.constructType(elementType.getType());\n+\t\tObjectReader reader = this.mapper.readerFor(javaType);\n \n \t\tFlux<DataBuffer> stream = Flux.from(inputStream);\n \t\tif (this.preProcessor != null) {",
      "parent_sha": "b5ec47d36078c6dd5518a5f69bc31625f9be4f79"
    }
  },
  {
    "oid": "31b8587ce61b2a37268eeaf2c83bd57b65ccd141",
    "message": "Update copyright year of changed file\n\nSee gh-27804",
    "date": "2021-12-12T15:30:06Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/31b8587ce61b2a37268eeaf2c83bd57b65ccd141",
    "details": {
      "sha": "91450ac1db444f54e1e748de20ac5712f8ee447d",
      "filename": "spring-aop/src/main/java/org/springframework/aop/framework/adapter/ThrowsAdviceAdapter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/31b8587ce61b2a37268eeaf2c83bd57b65ccd141/spring-aop%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Faop%2Fframework%2Fadapter%2FThrowsAdviceAdapter.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/31b8587ce61b2a37268eeaf2c83bd57b65ccd141/spring-aop%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Faop%2Fframework%2Fadapter%2FThrowsAdviceAdapter.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-aop%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Faop%2Fframework%2Fadapter%2FThrowsAdviceAdapter.java?ref=31b8587ce61b2a37268eeaf2c83bd57b65ccd141",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2021 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.",
      "parent_sha": "00375df4e8acc97f88c96cfaf5e4c0c44e7f8960"
    }
  },
  {
    "oid": "d51005fbbeaf6e84f94a2f9d491d705119898572",
    "message": "Improve Encoder Javadoc",
    "date": "2016-09-08T11:33:36Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/d51005fbbeaf6e84f94a2f9d491d705119898572",
    "details": {
      "sha": "6aa2661e5737801c8cdf5393171a30262491d6a0",
      "filename": "spring-core/src/main/java/org/springframework/core/codec/Encoder.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/d51005fbbeaf6e84f94a2f9d491d705119898572/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcore%2Fcodec%2FEncoder.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/d51005fbbeaf6e84f94a2f9d491d705119898572/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcore%2Fcodec%2FEncoder.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcore%2Fcodec%2FEncoder.java?ref=d51005fbbeaf6e84f94a2f9d491d705119898572",
      "patch": "@@ -20,6 +20,7 @@\n \n import org.reactivestreams.Publisher;\n import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n \n import org.springframework.core.ResolvableType;\n import org.springframework.core.io.buffer.DataBuffer;\n@@ -50,7 +51,9 @@ public interface Encoder<T> {\n \t/**\n \t * Encode a stream of Objects of type {@code T} into a {@link DataBuffer}\n \t * output stream.\n-\t * @param inputStream the input stream of Objects to encode\n+\t * @param inputStream the input stream of Objects to encode. If the input should be\n+\t * encoded as a single value rather than as a stream of elements, an instance of\n+\t * {@link Mono} should be used.\n \t * @param bufferFactory for creating output stream {@code DataBuffer}'s\n \t * @param elementType the expected type of elements in the input stream;\n \t * this type must have been previously passed to the {@link #canEncode}",
      "parent_sha": "10e157a5a23e362fac1575fd2c32c7664549edc7"
    }
  },
  {
    "oid": "22d3272117a384e0bf7429646b5ce7d1b98eab5d",
    "message": "updated for JRuby 1.1",
    "date": "2008-11-20T19:47:57Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/22d3272117a384e0bf7429646b5ce7d1b98eab5d",
    "details": {
      "sha": "67544bd9014200dfa825f9e56db49e088f05d373",
      "filename": "org.springframework.context/src/main/java/org/springframework/scripting/jruby/JRubyScriptUtils.java",
      "status": "modified",
      "additions": 10,
      "deletions": 29,
      "changes": 39,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/22d3272117a384e0bf7429646b5ce7d1b98eab5d/org.springframework.context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fscripting%2Fjruby%2FJRubyScriptUtils.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/22d3272117a384e0bf7429646b5ce7d1b98eab5d/org.springframework.context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fscripting%2Fjruby%2FJRubyScriptUtils.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fscripting%2Fjruby%2FJRubyScriptUtils.java?ref=22d3272117a384e0bf7429646b5ce7d1b98eab5d",
      "patch": "@@ -34,7 +34,6 @@\n import org.jruby.exceptions.JumpException;\n import org.jruby.exceptions.RaiseException;\n import org.jruby.javasupport.JavaEmbedUtils;\n-import org.jruby.runtime.DynamicScope;\n import org.jruby.runtime.builtin.IRubyObject;\n \n import org.springframework.core.NestedRuntimeException;\n@@ -46,8 +45,7 @@\n /**\n  * Utility methods for handling JRuby-scripted objects.\n  *\n- * <p>As of Spring 2.5, this class supports JRuby 0.9.9, 0.9.9 and 1.0.x.\n- * <b>Note that there is no support for JRuby 1.1 at this point!</b>\n+ * <p>As of Spring 3.0, this class requires JRuby 1.1 or higher.\n  *\n  * @author Rob Harrop\n  * @author Juergen Hoeller\n@@ -56,11 +54,6 @@\n  */\n public abstract class JRubyScriptUtils {\n \n-\t// Determine whether the old JRuby 0.9 parse method is available (incompatible with 1.0)\n-\tprivate final static Method oldParseMethod = ClassUtils.getMethodIfAvailable(\n-\t\t\tRuby.class, \"parse\", new Class[] {String.class, String.class, DynamicScope.class});\n-\n-\n \t/**\n \t * Create a new JRuby-scripted object from the given script source,\n \t * using the default {@link ClassLoader}.\n@@ -85,23 +78,12 @@ public static Object createJRubyObject(String scriptSource, Class[] interfaces)\n \tpublic static Object createJRubyObject(String scriptSource, Class[] interfaces, ClassLoader classLoader) {\n \t\tRuby ruby = initializeRuntime();\n \n-\t\tNode scriptRootNode = null;\n-\t\t/* TODO: make this JRuby 1.1 compliant\n-\t\t\n-\t\tNode scriptRootNode = (oldParseMethod != null ?\n-\t\t\t\t(Node) ReflectionUtils.invokeMethod(oldParseMethod, ruby, new Object[] {scriptSource, \"\", null}) :\n-\t\t\t\truby.parse(scriptSource, \"\", null, 0));\n-\t\t*/\n-\t\tIRubyObject rubyObject = null;\n-\t\t/** TODO: make this JRuby 1.1 compliant \n-\t\tIRubyObject rubyObject = ruby.eval(scriptRootNode);\n-\t\t*/\n+\t\tNode scriptRootNode = ruby.parseEval(scriptSource, \"\", null, 0);\n+\t\tIRubyObject rubyObject = ruby.runNormally(scriptRootNode, false);\n \n \t\tif (rubyObject instanceof RubyNil) {\n \t\t\tString className = findClassName(scriptRootNode);\n-\t\t\t/** TODO: make this JRuby 1.1 compliant \n-\t\t\trubyObject = ruby.evalScript(\"\\n\" + className + \".new\");\n-\t\t\t*/\n+\t\t\trubyObject = ruby.evalScriptlet(\"\\n\" + className + \".new\");\n \t\t}\n \t\t// still null?\n \t\tif (rubyObject instanceof RubyNil) {\n@@ -141,21 +123,20 @@ private static ClassNode findClassNode(Node node) {\n \t\tif (node instanceof ClassNode) {\n \t\t\treturn (ClassNode) node;\n \t\t}\n-\t\tList children = node.childNodes();\n-\t\tfor (int i = 0; i < children.size(); i++) {\n-\t\t\tNode child = (Node) children.get(i);\n+\t\tList<Node> children = node.childNodes();\n+\t\tfor (Node child : children) {\n \t\t\tif (child instanceof ClassNode) {\n \t\t\t\treturn (ClassNode) child;\n-\t\t\t} else if (child instanceof NewlineNode) {\n+\t\t\t}\n+\t\t\telse if (child instanceof NewlineNode) {\n \t\t\t\tNewlineNode nn = (NewlineNode) child;\n \t\t\t\tNode found = findClassNode(nn.getNextNode());\n \t\t\t\tif (found instanceof ClassNode) {\n \t\t\t\t\treturn (ClassNode) found;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tfor (int i = 0; i < children.size(); i++) {\n-\t\t\tNode child = (Node) children.get(i);\n+\t\tfor (Node child : children) {\n \t\t\tNode found = findClassNode(child);\n \t\t\tif (found instanceof ClassNode) {\n \t\t\t\treturn (ClassNode) found;\n@@ -184,7 +165,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n \t\t\t\treturn (isProxyForSameRubyObject(args[0]) ? Boolean.TRUE : Boolean.FALSE);\n \t\t\t}\n \t\t\telse if (ReflectionUtils.isHashCodeMethod(method)) {\n-\t\t\t\treturn new Integer(this.rubyObject.hashCode());\n+\t\t\t\treturn this.rubyObject.hashCode();\n \t\t\t}\n \t\t\telse if (ReflectionUtils.isToStringMethod(method)) {\n \t\t\t\tString toStringResult = this.rubyObject.toString();",
      "parent_sha": "51577b2a0736ba9f6a7c8e8478a7e289640a0dd5"
    }
  },
  {
    "oid": "b4174377c2afc1a07933d8a2e6114a2b51b1e9ee",
    "message": "Correctly document Propagation.NOT_SUPPORTED in javadoc\n\nSee gh-31907",
    "date": "2023-12-31T12:44:09Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/b4174377c2afc1a07933d8a2e6114a2b51b1e9ee",
    "details": {
      "sha": "6dcda47fa207cd0b52d902de3f0cded37d63d3cd",
      "filename": "spring-tx/src/main/java/org/springframework/transaction/annotation/RestrictedTransactionalEventListenerFactory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/b4174377c2afc1a07933d8a2e6114a2b51b1e9ee/spring-tx%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Ftransaction%2Fannotation%2FRestrictedTransactionalEventListenerFactory.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/b4174377c2afc1a07933d8a2e6114a2b51b1e9ee/spring-tx%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Ftransaction%2Fannotation%2FRestrictedTransactionalEventListenerFactory.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-tx%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Ftransaction%2Fannotation%2FRestrictedTransactionalEventListenerFactory.java?ref=b4174377c2afc1a07933d8a2e6114a2b51b1e9ee",
      "patch": "@@ -26,7 +26,7 @@\n  * Extension of {@link TransactionalEventListenerFactory},\n  * detecting invalid transaction configuration for transactional event listeners:\n  * {@link Transactional} only supported with {@link Propagation#REQUIRES_NEW}\n- * and {@link Propagation#NEVER}.\n+ * and {@link Propagation#NOT_SUPPORTED}.\n  *\n  * @author Juergen Hoeller\n  * @since 6.1",
      "parent_sha": "174eae377f0c0ac4bade644ff72eda583c103cff"
    }
  },
  {
    "oid": "e377fc003d675a61a9643d149b0745314ad02d7d",
    "message": "BeanWrapperImpl.setPropertyValue throws InvalidPropertyException with correct property value for nested collection case\n\nIssue: SPR-12866",
    "date": "2015-03-31T08:03:00Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/e377fc003d675a61a9643d149b0745314ad02d7d",
    "details": {
      "sha": "855ef022fdf846909fa28334f96905d021dc57a4",
      "filename": "spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/e377fc003d675a61a9643d149b0745314ad02d7d/spring-beans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbeans%2FBeanWrapperImpl.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/e377fc003d675a61a9643d149b0745314ad02d7d/spring-beans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbeans%2FBeanWrapperImpl.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-beans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbeans%2FBeanWrapperImpl.java?ref=e377fc003d675a61a9643d149b0745314ad02d7d",
      "patch": "@@ -1055,7 +1055,7 @@ else if (propValue instanceof Map) {\n \t\t\telse {\n \t\t\t\tthrow new InvalidPropertyException(getRootClass(), this.nestedPath + propertyName,\n \t\t\t\t\t\t\"Property referenced in indexed property path '\" + propertyName +\n-\t\t\t\t\t\t\"' is neither an array nor a List nor a Map; returned value was [\" + pv.getValue() + \"]\");\n+\t\t\t\t\t\t\"' is neither an array nor a List nor a Map; returned value was [\" + propValue + \"]\");\n \t\t\t}\n \t\t}\n ",
      "parent_sha": "d05fc2ed9c722f1bfc9fd5009702b0ee3ce0c6ec"
    }
  },
  {
    "oid": "fa2a58b9dbefe3a284e1a517e11f583b46c37ec8",
    "message": "Ensure varargs component type for MethodHandle is not null in SpEL\n\nThis commit ensures that the varargs component type for a MethodHandle\ncannot be null in ReflectionHelper's\nconvertAllMethodHandleArguments(...) method in SpEL.\n\nCloses gh-33193",
    "date": "2024-07-10T14:46:47Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/fa2a58b9dbefe3a284e1a517e11f583b46c37ec8",
    "details": {
      "sha": "b030b5c6c8a24d6dc914bc4c5c76bed97e1f85bd",
      "filename": "spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/fa2a58b9dbefe3a284e1a517e11f583b46c37ec8/spring-expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2Fsupport%2FReflectionHelper.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/fa2a58b9dbefe3a284e1a517e11f583b46c37ec8/spring-expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2Fsupport%2FReflectionHelper.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2Fsupport%2FReflectionHelper.java?ref=fa2a58b9dbefe3a284e1a517e11f583b46c37ec8",
      "patch": "@@ -380,20 +380,19 @@ public static boolean convertAllMethodHandleArguments(TypeConverter converter, O\n \t\t\t\tconversionOccurred |= (argument != arguments[i]);\n \t\t\t}\n \n-\t\t\tClass<?> varArgClass = methodHandleType.lastParameterType().componentType();\n+\t\t\tClass<?> varArgClass = methodHandleType.lastParameterType();\n \t\t\tResolvableType varArgResolvableType = ResolvableType.forClass(varArgClass);\n-\t\t\tTypeDescriptor targetType = new TypeDescriptor(varArgResolvableType, varArgClass, null);\n+\t\t\tTypeDescriptor targetType = new TypeDescriptor(varArgResolvableType, varArgClass.componentType(), null);\n \t\t\tTypeDescriptor componentTypeDesc = targetType.getElementTypeDescriptor();\n-\t\t\t// TODO Determine why componentTypeDesc can be null.\n-\t\t\t// Assert.state(componentTypeDesc != null, \"Component type must not be null for a varargs array\");\n+\t\t\tAssert.state(componentTypeDesc != null, \"Component type must not be null for a varargs array\");\n \n \t\t\t// If the target is varargs and there is just one more argument, then convert it here.\n \t\t\tif (varargsPosition == arguments.length - 1) {\n \t\t\t\tObject argument = arguments[varargsPosition];\n \t\t\t\tTypeDescriptor sourceType = TypeDescriptor.forObject(argument);\n \t\t\t\tif (argument == null) {\n \t\t\t\t\t// Perform the equivalent of GenericConversionService.convertNullSource() for a single argument.\n-\t\t\t\t\tif (componentTypeDesc != null && componentTypeDesc.getObjectType() == Optional.class) {\n+\t\t\t\t\tif (componentTypeDesc.getObjectType() == Optional.class) {\n \t\t\t\t\t\targuments[varargsPosition] = Optional.empty();\n \t\t\t\t\t\tconversionOccurred = true;\n \t\t\t\t\t}\n@@ -402,7 +401,7 @@ public static boolean convertAllMethodHandleArguments(TypeConverter converter, O\n \t\t\t\t// convert it or wrap it in an array. For example, using StringToArrayConverter to\n \t\t\t\t// convert a String containing a comma would result in the String being split and\n \t\t\t\t// repackaged in an array when it should be used as-is.\n-\t\t\t\telse if (componentTypeDesc != null && !sourceType.isAssignableTo(componentTypeDesc)) {\n+\t\t\t\telse if (!sourceType.isAssignableTo(componentTypeDesc)) {\n \t\t\t\t\targuments[varargsPosition] = converter.convertValue(argument, sourceType, targetType);\n \t\t\t\t}\n \t\t\t\t// Possible outcomes of the above if-else block:\n@@ -420,7 +419,7 @@ else if (componentTypeDesc != null && !sourceType.isAssignableTo(componentTypeDe\n \t\t\telse {\n \t\t\t\tfor (int i = varargsPosition; i < arguments.length; i++) {\n \t\t\t\t\tObject argument = arguments[i];\n-\t\t\t\t\targuments[i] = converter.convertValue(argument, TypeDescriptor.forObject(argument), targetType);\n+\t\t\t\t\targuments[i] = converter.convertValue(argument, TypeDescriptor.forObject(argument), componentTypeDesc);\n \t\t\t\t\tconversionOccurred |= (argument != arguments[i]);\n \t\t\t\t}\n \t\t\t}",
      "parent_sha": "83ca2c0cff43f28fc4ddba3f229636ea1f7e628e"
    }
  },
  {
    "oid": "d49c067770241f6287abc94f9fb08d22b1966fca",
    "message": "DispatcherServlet applies view name translation to error views as well (SPR-7298)",
    "date": "2010-06-20T19:06:56Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/d49c067770241f6287abc94f9fb08d22b1966fca",
    "details": {
      "sha": "a49eb92b8707bb63ec345210a855cfb7de68b643",
      "filename": "org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/d49c067770241f6287abc94f9fb08d22b1966fca/org.springframework.web.servlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2FDispatcherServlet.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/d49c067770241f6287abc94f9fb08d22b1966fca/org.springframework.web.servlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2FDispatcherServlet.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.web.servlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2FDispatcherServlet.java?ref=d49c067770241f6287abc94f9fb08d22b1966fca",
      "patch": "@@ -996,12 +996,10 @@ protected HandlerAdapter getHandlerAdapter(Object handler) throws ServletExcepti\n \t * @return a corresponding ModelAndView to forward to\n \t * @throws Exception if no error ModelAndView found\n \t */\n-\tprotected ModelAndView processHandlerException(HttpServletRequest request,\n-\t\t\tHttpServletResponse response,\n-\t\t\tObject handler,\n-\t\t\tException ex) throws Exception {\n+\tprotected ModelAndView processHandlerException(HttpServletRequest request, HttpServletResponse response,\n+\t\t\tObject handler, Exception ex) throws Exception {\n \n-\t\t// Check registerer HandlerExceptionResolvers...\n+\t\t// Check registered HandlerExceptionResolvers...\n \t\tModelAndView exMv = null;\n \t\tfor (HandlerExceptionResolver handlerExceptionResolver : this.handlerExceptionResolvers) {\n \t\t\texMv = handlerExceptionResolver.resolveException(request, response, handler, ex);\n@@ -1013,9 +1011,12 @@ protected ModelAndView processHandlerException(HttpServletRequest request,\n \t\t\tif (exMv.isEmpty()) {\n \t\t\t\treturn null;\n \t\t\t}\n+\t\t\t// We might still need view name translation for a plain error model...\n+\t\t\tif (!exMv.hasView()) {\n+\t\t\t\texMv.setViewName(getDefaultViewName(request));\n+\t\t\t}\n \t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\tlogger.debug(\"Handler execution resulted in exception - forwarding to resolved error view: \" + exMv,\n-\t\t\t\t\t\tex);\n+\t\t\t\tlogger.debug(\"Handler execution resulted in exception - forwarding to resolved error view: \" + exMv, ex);\n \t\t\t}\n \t\t\tWebUtils.exposeErrorRequestAttributes(request, ex, getServletName());\n \t\t\treturn exMv;",
      "parent_sha": "89fadb987c3c4effeb6d0346e8b145336290f8ae"
    }
  },
  {
    "oid": "82941caa006a3982c217b029736e6975a60e3d80",
    "message": "Polishing in DefaultRestClientBuilder\n\nAlign order of fields with order of methods on Builder.",
    "date": "2025-01-08T15:52:40Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/82941caa006a3982c217b029736e6975a60e3d80",
    "details": {
      "sha": "1ae72aa429fb2f894d302c7b1d54988add942de5",
      "filename": "spring-web/src/main/java/org/springframework/web/client/DefaultRestClientBuilder.java",
      "status": "modified",
      "additions": 10,
      "deletions": 18,
      "changes": 28,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/82941caa006a3982c217b029736e6975a60e3d80/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fclient%2FDefaultRestClientBuilder.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/82941caa006a3982c217b029736e6975a60e3d80/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fclient%2FDefaultRestClientBuilder.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fclient%2FDefaultRestClientBuilder.java?ref=82941caa006a3982c217b029736e6975a60e3d80",
      "patch": "@@ -133,16 +133,16 @@ final class DefaultRestClientBuilder implements RestClient.Builder {\n \n \tprivate @Nullable List<StatusHandler> statusHandlers;\n \n-\tprivate @Nullable ClientHttpRequestFactory requestFactory;\n-\n-\tprivate @Nullable List<HttpMessageConverter<?>> messageConverters;\n-\n \tprivate @Nullable List<ClientHttpRequestInterceptor> interceptors;\n \n \tprivate @Nullable BiPredicate<URI, HttpMethod> bufferingPredicate;\n \n \tprivate @Nullable List<ClientHttpRequestInitializer> initializers;\n \n+\tprivate @Nullable ClientHttpRequestFactory requestFactory;\n+\n+\tprivate @Nullable List<HttpMessageConverter<?>> messageConverters;\n+\n \tprivate ObservationRegistry observationRegistry = ObservationRegistry.NOOP;\n \n \tprivate @Nullable ClientRequestObservationConvention observationConvention;\n@@ -155,29 +155,23 @@ public DefaultRestClientBuilder(DefaultRestClientBuilder other) {\n \t\tAssert.notNull(other, \"Other must not be null\");\n \n \t\tthis.baseUrl = other.baseUrl;\n-\t\tthis.defaultUriVariables = (other.defaultUriVariables != null ?\n-\t\t\t\tnew LinkedHashMap<>(other.defaultUriVariables) : null);\n+\t\tthis.defaultUriVariables = (other.defaultUriVariables != null ? new LinkedHashMap<>(other.defaultUriVariables) : null);\n \t\tthis.uriBuilderFactory = other.uriBuilderFactory;\n-\n \t\tif (other.defaultHeaders != null) {\n \t\t\tthis.defaultHeaders = new HttpHeaders();\n \t\t\tthis.defaultHeaders.putAll(other.defaultHeaders);\n \t\t}\n \t\telse {\n \t\t\tthis.defaultHeaders = null;\n \t\t}\n-\t\tthis.defaultCookies = (other.defaultCookies != null ?\n-\t\t\t\tnew LinkedMultiValueMap<>(other.defaultCookies) : null);\n+\t\tthis.defaultCookies = (other.defaultCookies != null ? new LinkedMultiValueMap<>(other.defaultCookies) : null);\n \t\tthis.defaultRequest = other.defaultRequest;\n \t\tthis.statusHandlers = (other.statusHandlers != null ? new ArrayList<>(other.statusHandlers) : null);\n-\n-\t\tthis.requestFactory = other.requestFactory;\n-\t\tthis.messageConverters = (other.messageConverters != null ?\n-\t\t\t\tnew ArrayList<>(other.messageConverters) : null);\n-\n \t\tthis.interceptors = (other.interceptors != null) ? new ArrayList<>(other.interceptors) : null;\n \t\tthis.bufferingPredicate = other.bufferingPredicate;\n \t\tthis.initializers = (other.initializers != null) ? new ArrayList<>(other.initializers) : null;\n+\t\tthis.requestFactory = other.requestFactory;\n+\t\tthis.messageConverters = (other.messageConverters != null ? new ArrayList<>(other.messageConverters) : null);\n \t\tthis.observationRegistry = other.observationRegistry;\n \t\tthis.observationConvention = other.observationConvention;\n \t}\n@@ -188,16 +182,14 @@ public DefaultRestClientBuilder(RestTemplate restTemplate) {\n \t\tthis.uriBuilderFactory = getUriBuilderFactory(restTemplate);\n \t\tthis.statusHandlers = new ArrayList<>();\n \t\tthis.statusHandlers.add(StatusHandler.fromErrorHandler(restTemplate.getErrorHandler()));\n-\n-\t\tthis.requestFactory = getRequestFactory(restTemplate);\n-\t\tthis.messageConverters = new ArrayList<>(restTemplate.getMessageConverters());\n-\n \t\tif (!CollectionUtils.isEmpty(restTemplate.getInterceptors())) {\n \t\t\tthis.interceptors = new ArrayList<>(restTemplate.getInterceptors());\n \t\t}\n \t\tif (!CollectionUtils.isEmpty(restTemplate.getClientHttpRequestInitializers())) {\n \t\t\tthis.initializers = new ArrayList<>(restTemplate.getClientHttpRequestInitializers());\n \t\t}\n+\t\tthis.requestFactory = getRequestFactory(restTemplate);\n+\t\tthis.messageConverters = new ArrayList<>(restTemplate.getMessageConverters());\n \t\tthis.observationRegistry = restTemplate.getObservationRegistry();\n \t\tthis.observationConvention = restTemplate.getObservationConvention();\n \t}",
      "parent_sha": "4b9be5aaf84a79f679b8e93eda6b784edc482ea4"
    }
  },
  {
    "oid": "981a748dccbc0d24a37e72edd95bb3c7e8cff9df",
    "message": "Fix ambiguous static import in TestPropertySourceUtilsTests",
    "date": "2016-06-17T15:18:36Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/981a748dccbc0d24a37e72edd95bb3c7e8cff9df",
    "details": {
      "sha": "1324c21902652c182e37aff012736b85623821d8",
      "filename": "spring-test/src/test/java/org/springframework/test/context/support/TestPropertySourceUtilsTests.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/981a748dccbc0d24a37e72edd95bb3c7e8cff9df/spring-test%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Ftest%2Fcontext%2Fsupport%2FTestPropertySourceUtilsTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/981a748dccbc0d24a37e72edd95bb3c7e8cff9df/spring-test%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Ftest%2Fcontext%2Fsupport%2FTestPropertySourceUtilsTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-test%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Ftest%2Fcontext%2Fsupport%2FTestPropertySourceUtilsTests.java?ref=981a748dccbc0d24a37e72edd95bb3c7e8cff9df",
      "patch": "@@ -32,7 +32,7 @@\n import org.springframework.mock.env.MockPropertySource;\n import org.springframework.test.context.TestPropertySource;\n \n-import static org.hamcrest.CoreMatchers.*;\n+import static org.hamcrest.CoreMatchers.containsString;\n import static org.hamcrest.CoreMatchers.startsWith;\n import static org.junit.Assert.*;\n import static org.mockito.Matchers.*;",
      "parent_sha": "6f9fb31bf91179bd2da344eacf3180462247cd24"
    }
  },
  {
    "oid": "da8d50f91fed1470c69baa0cbaeeffc4b31a0e8b",
    "message": "Revise SpringExtension based on recent changes in JUnit Jupiter\n\nThis commit revises the implementation of the SpringExtension to use\nthe getRequired*() methods in the ExtensionContext which are now built\ninto JUnit Jupiter thanks to inspiration from the initial \"convenience\"\nmethods implemented here.",
    "date": "2017-08-03T20:19:57Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/da8d50f91fed1470c69baa0cbaeeffc4b31a0e8b",
    "details": {
      "sha": "e0f365cab101d9192f75689644145f3a868e5c7f",
      "filename": "spring-test/src/main/java/org/springframework/test/context/junit/jupiter/SpringExtension.java",
      "status": "modified",
      "additions": 14,
      "deletions": 46,
      "changes": 60,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/da8d50f91fed1470c69baa0cbaeeffc4b31a0e8b/spring-test%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Ftest%2Fcontext%2Fjunit%2Fjupiter%2FSpringExtension.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/da8d50f91fed1470c69baa0cbaeeffc4b31a0e8b/spring-test%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Ftest%2Fcontext%2Fjunit%2Fjupiter%2FSpringExtension.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-test%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Ftest%2Fcontext%2Fjunit%2Fjupiter%2FSpringExtension.java?ref=da8d50f91fed1470c69baa0cbaeeffc4b31a0e8b",
      "patch": "@@ -84,7 +84,7 @@ public void afterAll(ExtensionContext context) throws Exception {\n \t\t\tgetTestContextManager(context).afterTestClass();\n \t\t}\n \t\tfinally {\n-\t\t\tcontext.getStore(NAMESPACE).remove(getRequiredTestClass(context));\n+\t\t\tgetStore(context).remove(context.getRequiredTestClass());\n \t\t}\n \t}\n \n@@ -101,8 +101,8 @@ public void postProcessTestInstance(Object testInstance, ExtensionContext contex\n \t */\n \t@Override\n \tpublic void beforeEach(ExtensionContext context) throws Exception {\n-\t\tObject testInstance = getRequiredTestInstance(context);\n-\t\tMethod testMethod = getRequiredTestMethod(context);\n+\t\tObject testInstance = context.getRequiredTestInstance();\n+\t\tMethod testMethod = context.getRequiredTestMethod();\n \t\tgetTestContextManager(context).beforeTestMethod(testInstance, testMethod);\n \t}\n \n@@ -111,8 +111,8 @@ public void beforeEach(ExtensionContext context) throws Exception {\n \t */\n \t@Override\n \tpublic void beforeTestExecution(ExtensionContext context) throws Exception {\n-\t\tObject testInstance = getRequiredTestInstance(context);\n-\t\tMethod testMethod = getRequiredTestMethod(context);\n+\t\tObject testInstance = context.getRequiredTestInstance();\n+\t\tMethod testMethod = context.getRequiredTestMethod();\n \t\tgetTestContextManager(context).beforeTestExecution(testInstance, testMethod);\n \t}\n \n@@ -121,8 +121,8 @@ public void beforeTestExecution(ExtensionContext context) throws Exception {\n \t */\n \t@Override\n \tpublic void afterTestExecution(ExtensionContext context) throws Exception {\n-\t\tObject testInstance = getRequiredTestInstance(context);\n-\t\tMethod testMethod = getRequiredTestMethod(context);\n+\t\tObject testInstance = context.getRequiredTestInstance();\n+\t\tMethod testMethod = context.getRequiredTestMethod();\n \t\tThrowable testException = context.getExecutionException().orElse(null);\n \t\tgetTestContextManager(context).afterTestExecution(testInstance, testMethod, testException);\n \t}\n@@ -132,8 +132,8 @@ public void afterTestExecution(ExtensionContext context) throws Exception {\n \t */\n \t@Override\n \tpublic void afterEach(ExtensionContext context) throws Exception {\n-\t\tObject testInstance = getRequiredTestInstance(context);\n-\t\tMethod testMethod = getRequiredTestMethod(context);\n+\t\tObject testInstance = context.getRequiredTestInstance();\n+\t\tMethod testMethod = context.getRequiredTestMethod();\n \t\tThrowable testException = context.getExecutionException().orElse(null);\n \t\tgetTestContextManager(context).afterTestMethod(testInstance, testMethod, testException);\n \t}\n@@ -171,7 +171,7 @@ public boolean supportsParameter(ParameterContext parameterContext, ExtensionCon\n \t@Nullable\n \tpublic Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {\n \t\tParameter parameter = parameterContext.getParameter();\n-\t\tClass<?> testClass = getRequiredTestClass(extensionContext);\n+\t\tClass<?> testClass = extensionContext.getRequiredTestClass();\n \t\tApplicationContext applicationContext = getApplicationContext(extensionContext);\n \t\treturn ParameterAutowireUtils.resolveDependency(parameter, testClass, applicationContext);\n \t}\n@@ -194,45 +194,13 @@ public static ApplicationContext getApplicationContext(ExtensionContext context)\n \t */\n \tprivate static TestContextManager getTestContextManager(ExtensionContext context) {\n \t\tAssert.notNull(context, \"ExtensionContext must not be null\");\n-\t\tClass<?> testClass = getRequiredTestClass(context);\n-\t\tStore store = context.getStore(NAMESPACE);\n+\t\tClass<?> testClass = context.getRequiredTestClass();\n+\t\tStore store = getStore(context);\n \t\treturn store.getOrComputeIfAbsent(testClass, TestContextManager::new, TestContextManager.class);\n \t}\n \n-\t/**\n-\t * Get the test class associated with the supplied {@code ExtensionContext}.\n-\t * @return the test class\n-\t * @throws IllegalStateException if the extension context does not contain\n-\t * a test class\n-\t */\n-\tprivate static Class<?> getRequiredTestClass(ExtensionContext context) throws IllegalStateException {\n-\t\tAssert.notNull(context, \"ExtensionContext must not be null\");\n-\t\treturn context.getTestClass().orElseThrow(\n-\t\t\t() -> new IllegalStateException(\"JUnit failed to supply the test class in the ExtensionContext\"));\n-\t}\n-\n-\t/**\n-\t * Get the test instance associated with the supplied {@code ExtensionContext}.\n-\t * @return the test instance\n-\t * @throws IllegalStateException if the extension context does not contain\n-\t * a test instance\n-\t */\n-\tprivate static Object getRequiredTestInstance(ExtensionContext context) throws IllegalStateException {\n-\t\tAssert.notNull(context, \"ExtensionContext must not be null\");\n-\t\treturn context.getTestInstance().orElseThrow(\n-\t\t\t() -> new IllegalStateException(\"JUnit failed to supply the test instance in the ExtensionContext\"));\n-\t}\n-\n-\t/**\n-\t * Get the test method associated with the supplied {@code ExtensionContext}.\n-\t * @return the test method\n-\t * @throws IllegalStateException if the extension context does not contain\n-\t * a test method\n-\t */\n-\tprivate static Method getRequiredTestMethod(ExtensionContext context) throws IllegalStateException {\n-\t\tAssert.notNull(context, \"ExtensionContext must not be null\");\n-\t\treturn context.getTestMethod().orElseThrow(\n-\t\t\t() -> new IllegalStateException(\"JUnit failed to supply the test method in the ExtensionContext\"));\n+\tprivate static Store getStore(ExtensionContext context) {\n+\t\treturn context.getRoot().getStore(NAMESPACE);\n \t}\n \n }",
      "parent_sha": "fabc9c28d7e115431e25da81a0dca47787a683aa"
    }
  },
  {
    "oid": "2fbcff89199267313dcb7fe1c7fb803f38f22879",
    "message": "Prevent ValueLoaderEntryProcessor to be created for each get call\n\nCloses gh-31250",
    "date": "2023-09-18T07:27:16Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/2fbcff89199267313dcb7fe1c7fb803f38f22879",
    "details": {
      "sha": "c870d843d736ecbb19022ba82863b6a8edb31884",
      "filename": "spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java",
      "status": "modified",
      "additions": 25,
      "deletions": 8,
      "changes": 33,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/2fbcff89199267313dcb7fe1c7fb803f38f22879/spring-context-support%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcache%2Fjcache%2FJCacheCache.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/2fbcff89199267313dcb7fe1c7fb803f38f22879/spring-context-support%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcache%2Fjcache%2FJCacheCache.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-context-support%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fcache%2Fjcache%2FJCacheCache.java?ref=2fbcff89199267313dcb7fe1c7fb803f38f22879",
      "patch": "@@ -17,6 +17,7 @@\n package org.springframework.cache.jcache;\n \n import java.util.concurrent.Callable;\n+import java.util.function.Function;\n \n import javax.cache.Cache;\n import javax.cache.processor.EntryProcessor;\n@@ -42,6 +43,8 @@ public class JCacheCache extends AbstractValueAdaptingCache {\n \n \tprivate final Cache<Object, Object> cache;\n \n+\tprivate final ValueLoaderEntryProcessor valueLoaderEntryProcessor;\n+\n \n \t/**\n \t * Create a {@code JCacheCache} instance.\n@@ -60,6 +63,8 @@ public JCacheCache(Cache<Object, Object> jcache, boolean allowNullValues) {\n \t\tsuper(allowNullValues);\n \t\tAssert.notNull(jcache, \"Cache must not be null\");\n \t\tthis.cache = jcache;\n+\t\tthis.valueLoaderEntryProcessor = new ValueLoaderEntryProcessor(\n+\t\t\t\tthis::fromStoreValue, this::toStoreValue);\n \t}\n \n \n@@ -81,9 +86,10 @@ protected Object lookup(Object key) {\n \n \t@Override\n \t@Nullable\n+\t@SuppressWarnings(\"unchecked\")\n \tpublic <T> T get(Object key, Callable<T> valueLoader) {\n \t\ttry {\n-\t\t\treturn this.cache.invoke(key, new ValueLoaderEntryProcessor<T>(), valueLoader);\n+\t\t\treturn (T) this.cache.invoke(key, this.valueLoaderEntryProcessor, valueLoader);\n \t\t}\n \t\tcatch (EntryProcessorException ex) {\n \t\t\tthrow new ValueRetrievalException(key, valueLoader, ex.getCause());\n@@ -141,26 +147,37 @@ public Object process(MutableEntry<Object, Object> entry, Object... arguments) t\n \t}\n \n \n-\tprivate class ValueLoaderEntryProcessor<T> implements EntryProcessor<Object, Object, T> {\n+\tprivate static final class ValueLoaderEntryProcessor implements EntryProcessor<Object, Object, Object> {\n+\n+\t\tprivate final Function<Object, Object> fromStoreValue;\n+\n+\t\tprivate final Function<Object, Object> toStoreValue;\n+\n+\t\tprivate ValueLoaderEntryProcessor(Function<Object, Object> fromStoreValue,\n+\t\t\t\tFunction<Object, Object> toStoreValue) {\n+\n+\t\t\tthis.fromStoreValue = fromStoreValue;\n+\t\t\tthis.toStoreValue = toStoreValue;\n+\t\t}\n \n-\t\t@SuppressWarnings(\"unchecked\")\n \t\t@Override\n \t\t@Nullable\n-\t\tpublic T process(MutableEntry<Object, Object> entry, Object... arguments) throws EntryProcessorException {\n-\t\t\tCallable<T> valueLoader = (Callable<T>) arguments[0];\n+\t\t@SuppressWarnings(\"unchecked\")\n+\t\tpublic Object process(MutableEntry<Object, Object> entry, Object... arguments) throws EntryProcessorException {\n+\t\t\tCallable<Object> valueLoader = (Callable<Object>) arguments[0];\n \t\t\tif (entry.exists()) {\n-\t\t\t\treturn (T) fromStoreValue(entry.getValue());\n+\t\t\t\treturn this.fromStoreValue.apply(entry.getValue());\n \t\t\t}\n \t\t\telse {\n-\t\t\t\tT value;\n+\t\t\t\tObject value;\n \t\t\t\ttry {\n \t\t\t\t\tvalue = valueLoader.call();\n \t\t\t\t}\n \t\t\t\tcatch (Exception ex) {\n \t\t\t\t\tthrow new EntryProcessorException(\"Value loader '\" + valueLoader + \"' failed \" +\n \t\t\t\t\t\t\t\"to compute value for key '\" + entry.getKey() + \"'\", ex);\n \t\t\t\t}\n-\t\t\t\tentry.setValue(toStoreValue(value));\n+\t\t\t\tentry.setValue(this.toStoreValue.apply(value));\n \t\t\t\treturn value;\n \t\t\t}\n \t\t}",
      "parent_sha": "f79bc7b14ddadd4fac101860ddded2f20d032c0f"
    }
  },
  {
    "oid": "d4495a56542276d6ea9a09d6b61c0e30cb75188c",
    "message": "Revise PropertyOrFieldReference since isNullSafe() is not final",
    "date": "2024-03-22T15:37:08Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/d4495a56542276d6ea9a09d6b61c0e30cb75188c",
    "details": {
      "sha": "a033f6c14b49d6c56f93b03be20ca6791dd1b50f",
      "filename": "spring-expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/d4495a56542276d6ea9a09d6b61c0e30cb75188c/spring-expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2Fast%2FPropertyOrFieldReference.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/d4495a56542276d6ea9a09d6b61c0e30cb75188c/spring-expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2Fast%2FPropertyOrFieldReference.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2Fast%2FPropertyOrFieldReference.java?ref=d4495a56542276d6ea9a09d6b61c0e30cb75188c",
      "patch": "@@ -181,7 +181,7 @@ private TypedValue readProperty(TypedValue contextObject, EvaluationContext eval\n \t\t\tthrows EvaluationException {\n \n \t\tObject targetObject = contextObject.getValue();\n-\t\tif (targetObject == null && this.nullSafe) {\n+\t\tif (targetObject == null && isNullSafe()) {\n \t\t\treturn TypedValue.NULL;\n \t\t}\n \n@@ -233,7 +233,7 @@ private void writeProperty(\n \t\t\tTypedValue contextObject, EvaluationContext evalContext, String name, @Nullable Object newValue)\n \t\t\tthrows EvaluationException {\n \n-\t\tif (contextObject.getValue() == null && this.nullSafe) {\n+\t\tif (contextObject.getValue() == null && isNullSafe()) {\n \t\t\treturn;\n \t\t}\n \t\tif (contextObject.getValue() == null) {\n@@ -353,7 +353,7 @@ public void generateCode(MethodVisitor mv, CodeFlow cf) {\n \t\t}\n \n \t\tLabel skipIfNull = null;\n-\t\tif (this.nullSafe) {\n+\t\tif (isNullSafe()) {\n \t\t\tmv.visitInsn(DUP);\n \t\t\tskipIfNull = new Label();\n \t\t\tLabel continueLabel = new Label();\n@@ -381,7 +381,7 @@ void setExitTypeDescriptor(String descriptor) {\n \t\t// If this property or field access would return a primitive - and yet\n \t\t// it is also marked null safe - then the exit type descriptor must be\n \t\t// promoted to the box type to allow a null value to be passed on\n-\t\tif (this.nullSafe && CodeFlow.isPrimitive(descriptor)) {\n+\t\tif (isNullSafe() && CodeFlow.isPrimitive(descriptor)) {\n \t\t\tthis.originalPrimitiveExitTypeDescriptor = descriptor;\n \t\t\tthis.exitTypeDescriptor = CodeFlow.toBoxedDescriptor(descriptor);\n \t\t}",
      "parent_sha": "c7c61e13e161bb0bc8192661d254e6b2c9764915"
    }
  },
  {
    "oid": "7ac665b18eb6e37fce367a9abe5f23e582abde02",
    "message": "Polishing",
    "date": "2019-08-01T20:42:33Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/7ac665b18eb6e37fce367a9abe5f23e582abde02",
    "details": {
      "sha": "b07a611dc481295753cc6e035cc813c52d118e30",
      "filename": "spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/7ac665b18eb6e37fce367a9abe5f23e582abde02/spring-beans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbeans%2Ffactory%2Fsupport%2FAbstractAutowireCapableBeanFactory.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/7ac665b18eb6e37fce367a9abe5f23e582abde02/spring-beans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbeans%2Ffactory%2Fsupport%2FAbstractAutowireCapableBeanFactory.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-beans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbeans%2Ffactory%2Fsupport%2FAbstractAutowireCapableBeanFactory.java?ref=7ac665b18eb6e37fce367a9abe5f23e582abde02",
      "patch": "@@ -823,9 +823,7 @@ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition m\n \t * it will be fully created to check the type of its exposed object.\n \t */\n \t@Override\n-\tprotected ResolvableType getTypeForFactoryBean(String beanName,\n-\t\t\tRootBeanDefinition mbd, boolean allowInit) {\n-\n+\tprotected ResolvableType getTypeForFactoryBean(String beanName, RootBeanDefinition mbd, boolean allowInit) {\n \t\t// Check if the bean definition itself has defined the type with an attribute\n \t\tResolvableType result = getTypeForFactoryBeanFromAttributes(mbd);\n \t\tif (result != ResolvableType.NONE) {\n@@ -858,14 +856,14 @@ protected ResolvableType getTypeForFactoryBean(String beanName,\n \t\t\t\t// Try to obtain the FactoryBean's object type from its factory method\n \t\t\t\t// declaration without instantiating the containing bean at all.\n \t\t\t\tBeanDefinition factoryBeanDefinition = getBeanDefinition(factoryBeanName);\n-\t\t\t\tClass<?> factoryBeanClass = null;\n-\t\t\t\tif (factoryBeanDefinition instanceof AbstractBeanDefinition\n-\t\t\t\t\t\t&& ((AbstractBeanDefinition) factoryBeanDefinition).hasBeanClass()) {\n+\t\t\t\tClass<?> factoryBeanClass;\n+\t\t\t\tif (factoryBeanDefinition instanceof AbstractBeanDefinition &&\n+\t\t\t\t\t\t((AbstractBeanDefinition) factoryBeanDefinition).hasBeanClass()) {\n \t\t\t\t\tfactoryBeanClass = ((AbstractBeanDefinition) factoryBeanDefinition).getBeanClass();\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tRootBeanDefinition fbmbd = getMergedBeanDefinition(factoryBeanName, factoryBeanDefinition);\n-\t\t\t\t\tfactoryBeanClass = determineTargetType(factoryBeanName, fbmbd, new Class<?>[] { Object.class });\n+\t\t\t\t\tfactoryBeanClass = determineTargetType(factoryBeanName, fbmbd);\n \t\t\t\t}\n \t\t\t\tif (factoryBeanClass != null) {\n \t\t\t\t\tresult = getTypeForFactoryBeanFromMethod(factoryBeanClass, factoryMethodName);",
      "parent_sha": "765d43b34f85c176a2e557d1e3f8ecaa0cd3d4c7"
    }
  },
  {
    "oid": "d0393ea109b6a17905941e5d35be9f48c0ce8eb0",
    "message": "SPR-7233 - ResponseEntity having body, headers and HttpStatus mixed up in responseEntity.getBody()",
    "date": "2010-05-28T08:07:21Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/d0393ea109b6a17905941e5d35be9f48c0ce8eb0",
    "details": {
      "sha": "54ec61078a995002f6650ff0409989bcf266535f",
      "filename": "org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/d0393ea109b6a17905941e5d35be9f48c0ce8eb0/org.springframework.web.servlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fmvc%2Fannotation%2FAnnotationMethodHandlerAdapter.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/d0393ea109b6a17905941e5d35be9f48c0ce8eb0/org.springframework.web.servlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fmvc%2Fannotation%2FAnnotationMethodHandlerAdapter.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.web.servlet%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fmvc%2Fannotation%2FAnnotationMethodHandlerAdapter.java?ref=d0393ea109b6a17905941e5d35be9f48c0ce8eb0",
      "patch": "@@ -839,12 +839,12 @@ public ModelAndView getModelAndView(Method handlerMethod, Class handlerType, Obj\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (AnnotationUtils.findAnnotation(handlerMethod, ResponseBody.class) != null) {\n-\t\t\t\thandleResponseBody(returnValue, webRequest);\n+\t\t\tif (returnValue instanceof HttpEntity) {\n+\t\t\t\thandleHttpEntityResponse((HttpEntity<?>) returnValue, webRequest);\n \t\t\t\treturn null;\n \t\t\t}\n-\t\t\telse if (returnValue instanceof HttpEntity) {\n-\t\t\t\thandleHttpEntityResponse((HttpEntity<?>) returnValue, webRequest);\n+\t\t\telse if (AnnotationUtils.findAnnotation(handlerMethod, ResponseBody.class) != null) {\n+\t\t\t\thandleResponseBody(returnValue, webRequest);\n \t\t\t\treturn null;\n \t\t\t}\n \t\t\telse if (returnValue instanceof ModelAndView) {",
      "parent_sha": "75c5405d6f9438135edba5b83ba933fc630a43d5"
    }
  },
  {
    "oid": "641a57ec9302ef694c39b52c8dd5cced509d237c",
    "message": "no need to convert to array list with last zip signature",
    "date": "2016-01-27T14:59:19Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/641a57ec9302ef694c39b52c8dd5cced509d237c",
    "details": {
      "sha": "855d6dc5caac3e3045cfc7be00b0ada8cbaa2b63",
      "filename": "spring-web-reactive/src/main/java/org/springframework/web/reactive/method/InvocableHandlerMethod.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/641a57ec9302ef694c39b52c8dd5cced509d237c/spring-web-reactive%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fmethod%2FInvocableHandlerMethod.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/641a57ec9302ef694c39b52c8dd5cced509d237c/spring-web-reactive%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fmethod%2FInvocableHandlerMethod.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web-reactive%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fmethod%2FInvocableHandlerMethod.java?ref=641a57ec9302ef694c39b52c8dd5cced509d237c",
      "patch": "@@ -112,7 +112,7 @@ private Mono<Object[]> resolveArguments(WebServerExchange exchange, Object... pr\n \t\t\t\t\t\tif (!ObjectUtils.isEmpty(providedArgs)) {\n \t\t\t\t\t\t\tfor (Object providedArg : providedArgs) {\n \t\t\t\t\t\t\t\tif (param.getParameterType().isInstance(providedArg)) {\n-\t\t\t\t\t\t\t\t\treturn Mono.just(providedArg);\n+\t\t\t\t\t\t\t\t\treturn Mono.just(providedArg).log(\"reactor.resolved\");\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n@@ -123,16 +123,17 @@ private Mono<Object[]> resolveArguments(WebServerExchange exchange, Object... pr\n \t\t\t\t\t\ttry {\n \t\t\t\t\t\t\treturn resolver.resolveArgument(param, exchange)\n \t\t\t\t\t\t\t\t\t.defaultIfEmpty(NO_VALUE)\n-\t\t\t\t\t\t\t\t\t.otherwise(ex -> Mono.error(getArgError(\"Error resolving \", param, ex)));\n+\t\t\t\t\t\t\t\t\t.otherwise(ex -> Mono.error(getArgError(\"Error resolving \", param, ex)))\n+\t\t\t\t\t\t\t\t\t.log(\"reactor.unresolved\");\n \t\t\t\t\t\t}\n \t\t\t\t\t\tcatch (Exception ex) {\n \t\t\t\t\t\t\tthrow getArgError(\"Error resolving \", param, ex);\n \t\t\t\t\t\t}\n \t\t\t\t\t})\n \t\t\t\t\t.collect(Collectors.toList());\n \n-\t\t\treturn Mono.when(monos).map(args ->\n-\t\t\t\t\tStream.of(args.toArray()).map(o -> o != NO_VALUE ? o : null).toArray());\n+\t\t\treturn Mono.when(monos).log(\"reactor.unresolved\").map(args ->\n+\t\t\t\t\tStream.of(args).map(o -> o != NO_VALUE ? o : null).toArray());\n \t\t}\n \t\tcatch (Throwable ex) {\n \t\t\treturn Mono.error(ex);",
      "parent_sha": "10f4f64e6f5c7afc7ee56635e9867f29bd669c5e"
    }
  },
  {
    "oid": "6f32ff489ab66f144c4a9222e6d3cb482efceb24",
    "message": "Use null stream in ReactorNettyClientResponse if no body is available\n\nCloses gh-32805",
    "date": "2024-06-13T09:10:50Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/6f32ff489ab66f144c4a9222e6d3cb482efceb24",
    "details": {
      "sha": "9d1b18a25252c22251a7333898e54db8a9975a47",
      "filename": "spring-web/src/main/java/org/springframework/http/client/ReactorNettyClientResponse.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/6f32ff489ab66f144c4a9222e6d3cb482efceb24/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fclient%2FReactorNettyClientResponse.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/6f32ff489ab66f144c4a9222e6d3cb482efceb24/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fclient%2FReactorNettyClientResponse.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fclient%2FReactorNettyClientResponse.java?ref=6f32ff489ab66f144c4a9222e6d3cb482efceb24",
      "patch": "@@ -88,7 +88,7 @@ public InputStream getBody() throws IOException {\n \t\t}\n \n \t\tif (body == null) {\n-\t\t\tthrow new IOException(\"Could not receive body\");\n+\t\t\tbody = InputStream.nullInputStream();\n \t\t}\n \t\tthis.body = body;\n \t\treturn body;",
      "parent_sha": "24c8dfea1f3d166bae890efc8f5427e9b43124ac"
    }
  },
  {
    "oid": "7d747f9645d5194ac15b17bf6a50835d3ea7b326",
    "message": "Deprecate AsyncRestTemplate methods in MockRestServiceServer",
    "date": "2017-07-07T17:20:36Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/7d747f9645d5194ac15b17bf6a50835d3ea7b326",
    "details": {
      "sha": "cb93e67faa873a8f65eb0b3b0b8b2a5bea211ff4",
      "filename": "spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/7d747f9645d5194ac15b17bf6a50835d3ea7b326/spring-test%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Ftest%2Fweb%2Fclient%2FMockRestServiceServer.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/7d747f9645d5194ac15b17bf6a50835d3ea7b326/spring-test%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Ftest%2Fweb%2Fclient%2FMockRestServiceServer.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-test%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Ftest%2Fweb%2Fclient%2FMockRestServiceServer.java?ref=7d747f9645d5194ac15b17bf6a50835d3ea7b326",
      "patch": "@@ -136,7 +136,10 @@ public static MockRestServiceServerBuilder bindTo(RestTemplate restTemplate) {\n \t * Return a builder for a {@code MockRestServiceServer} that should be used\n \t * to reply to the given {@code AsyncRestTemplate}.\n \t * @since 4.3\n+\t * @deprecated see deprecation notice on\n+\t * {@link org.springframework.web.client.AsyncRestTemplate} itself\n \t */\n+\t@Deprecated\n \tpublic static MockRestServiceServerBuilder bindTo(org.springframework.web.client.AsyncRestTemplate asyncRestTemplate) {\n \t\treturn new DefaultBuilder(asyncRestTemplate);\n \t}\n@@ -165,7 +168,10 @@ public static MockRestServiceServer createServer(RestTemplate restTemplate) {\n \t * A shortcut for {@code bindTo(asyncRestTemplate).build()}.\n \t * @param asyncRestTemplate the AsyncRestTemplate to set up for mock testing\n \t * @return the created mock server\n+\t * @deprecated see deprecation notice on\n+\t * {@link org.springframework.web.client.AsyncRestTemplate} itself\n \t */\n+\t@Deprecated\n \tpublic static MockRestServiceServer createServer(org.springframework.web.client.AsyncRestTemplate asyncRestTemplate) {\n \t\treturn bindTo(asyncRestTemplate).build();\n \t}\n@@ -188,8 +194,9 @@ public interface MockRestServiceServerBuilder {\n \t\t/**\n \t\t * Whether to allow expected requests to be executed in any order not\n \t\t * necessarily matching the order of declaration.\n-\t\t * <p>When set to \"true\" this is effectively a shortcut for:<br>\n+\t\t * <p>Effectively a shortcut for:<br>\n \t\t * {@code builder.build(new UnorderedRequestExpectationManager)}.\n+\t\t * <p>By default this is set to {@code false}\n \t\t * @param ignoreExpectOrder whether to ignore the order of expectations\n \t\t */\n \t\tMockRestServiceServerBuilder ignoreExpectOrder(boolean ignoreExpectOrder);",
      "parent_sha": "9640cedeaed69902d1351cee27fd3426cdc21c40"
    }
  },
  {
    "oid": "613b4d182b23b474db4e43257cf75ef8454e6bdf",
    "message": "avoid potential NPE (SPR-6300)",
    "date": "2009-11-12T13:42:07Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/613b4d182b23b474db4e43257cf75ef8454e6bdf",
    "details": {
      "sha": "5f5930ffcf9930a450061b5678a83be35323c7b0",
      "filename": "org.springframework.test/src/main/java/org/springframework/test/web/ModelAndViewAssert.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/613b4d182b23b474db4e43257cf75ef8454e6bdf/org.springframework.test%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Ftest%2Fweb%2FModelAndViewAssert.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/613b4d182b23b474db4e43257cf75ef8454e6bdf/org.springframework.test%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Ftest%2Fweb%2FModelAndViewAssert.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.test%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Ftest%2Fweb%2FModelAndViewAssert.java?ref=613b4d182b23b474db4e43257cf75ef8454e6bdf",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2008 the original author or authors.\n+ * Copyright 2002-2009 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -23,6 +23,7 @@\n import java.util.Map;\n import java.util.Set;\n \n+import org.springframework.util.ObjectUtils;\n import org.springframework.web.servlet.ModelAndView;\n \n /**\n@@ -180,8 +181,8 @@ public static void assertSortAndCompareListModelAttribute(\n \t */\n \tpublic static void assertViewName(ModelAndView mav, String expectedName) {\n \t\tassertCondition(mav != null, \"ModelAndView is null\");\n-\t\tassertCondition(expectedName.equals(mav.getViewName()), \"View name is not equal to '\" + expectedName +\n-\t\t\t\t\"' but was '\" + mav.getViewName() + \"'\");\n+\t\tassertCondition(ObjectUtils.nullSafeEquals(expectedName, mav.getViewName()),\n+\t\t\t\t\"View name is not equal to '\" + expectedName + \"' but was '\" + mav.getViewName() + \"'\");\n \t}\n \n ",
      "parent_sha": "6ee17d28267ad387c1cee5eb853a493e242ceeaa"
    }
  },
  {
    "oid": "c3032349b154b4a00c975c9765960da3caec0a4c",
    "message": "Introduced \"mapperWrappers\" bean property\n\nIssue: SPR-10421",
    "date": "2013-08-05T21:50:44Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/c3032349b154b4a00c975c9765960da3caec0a4c",
    "details": {
      "sha": "457a877ce1cabcd7b2ec59546231284ed5786179",
      "filename": "spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java",
      "status": "modified",
      "additions": 61,
      "deletions": 20,
      "changes": 81,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/c3032349b154b4a00c975c9765960da3caec0a4c/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamMarshaller.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/c3032349b154b4a00c975c9765960da3caec0a4c/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamMarshaller.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-oxm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Foxm%2Fxstream%2FXStreamMarshaller.java?ref=c3032349b154b4a00c975c9765960da3caec0a4c",
      "patch": "@@ -23,6 +23,7 @@\n import java.io.OutputStreamWriter;\n import java.io.Reader;\n import java.io.Writer;\n+import java.lang.reflect.Constructor;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n@@ -58,6 +59,7 @@\n import com.thoughtworks.xstream.io.xml.XppDriver;\n import com.thoughtworks.xstream.mapper.CannotResolveClassException;\n import com.thoughtworks.xstream.mapper.Mapper;\n+import com.thoughtworks.xstream.mapper.MapperWrapper;\n import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n import org.w3c.dom.Node;\n@@ -73,6 +75,7 @@\n import org.springframework.oxm.UnmarshallingFailureException;\n import org.springframework.oxm.XmlMappingException;\n import org.springframework.oxm.support.AbstractMarshaller;\n+import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.ObjectUtils;\n import org.springframework.util.StringUtils;\n@@ -123,6 +126,8 @@ public class XStreamMarshaller extends AbstractMarshaller implements Initializin\n \n \tprivate Mapper mapper;\n \n+\tprivate Class<?>[] mapperWrappers;\n+\n \tprivate ConverterLookup converterLookup = new DefaultConverterLookup();\n \n \tprivate ConverterRegistry converterRegistry;\n@@ -185,6 +190,16 @@ public void setMapper(Mapper mapper) {\n \t\tthis.mapper = mapper;\n \t}\n \n+\t/**\n+\t * Set one or more custom XStream {@link MapperWrapper} classes.\n+\t * Each of those classes needs to have a constructor with a single argument\n+\t * of type {@link Mapper} or {@link MapperWrapper}.\n+\t * @since 4.0\n+\t */\n+\tpublic void setMapperWrappers(Class<?>... mapperWrappers) {\n+\t\tthis.mapperWrappers = mapperWrappers;\n+\t}\n+\n \t/**\n \t * Set a custom XStream {@link ConverterLookup} to use.\n \t * Also used as {@link ConverterRegistry} if the given reference implements it as well.\n@@ -282,7 +297,7 @@ public void setUseAttributeFor(Map<?, ?> useAttributeFor) {\n \t/**\n \t * Specify implicit collection fields, as a Map consisting of {@code Class} instances\n \t * mapped to comma separated collection field names.\n-\t *@see XStream#addImplicitCollection(Class, String)\n+\t * @see XStream#addImplicitCollection(Class, String)\n \t */\n \tpublic void setImplicitCollections(Map<Class<?>, String> implicitCollections) {\n \t\tthis.implicitCollections = implicitCollections;\n@@ -306,8 +321,8 @@ public void setAnnotatedClasses(Class<?>... annotatedClasses) {\n \t}\n \n \t/**\n-\t * Activate the autodetection mode of XStream.\n-\t * <p><b>Note</b> that auto-detection implies that the XStream is configured while\n+\t * Activate XStream's autodetection mode.\n+\t * <p><b>Note</b>: Autodetection implies that the XStream instance is being configured while\n \t * it is processing the XML streams, and thus introduces a potential concurrency problem.\n \t * @see XStream#autodetectAnnotations(boolean)\n \t */\n@@ -348,7 +363,36 @@ public final void afterPropertiesSet() {\n \t */\n \tprotected XStream buildXStream() {\n \t\tXStream xstream = new XStream(this.reflectionProvider, this.streamDriver,\n-\t\t\t\tthis.beanClassLoader, this.mapper, this.converterLookup, this.converterRegistry);\n+\t\t\t\tthis.beanClassLoader, this.mapper, this.converterLookup, this.converterRegistry) {\n+\t\t\t@Override\n+\t\t\tprotected MapperWrapper wrapMapper(MapperWrapper next) {\n+\t\t\t\tMapperWrapper mapperToWrap = next;\n+\t\t\t\tif (mapperWrappers != null) {\n+\t\t\t\t\tfor (Class<?> mapperWrapper : mapperWrappers) {\n+\t\t\t\t\t\tAssert.isAssignable(MapperWrapper.class, mapperWrapper);\n+\t\t\t\t\t\tConstructor<?> ctor;\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tctor = mapperWrapper.getConstructor(Mapper.class);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tcatch (NoSuchMethodException ex) {\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tctor = mapperWrapper.getConstructor(MapperWrapper.class);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tcatch (NoSuchMethodException ex2) {\n+\t\t\t\t\t\t\t\tthrow new IllegalStateException(\"No appropriate MapperWrapper constructor found: \" + mapperWrapper);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tmapperToWrap = (MapperWrapper) ctor.newInstance(mapperToWrap);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\tthrow new IllegalStateException(\"Failed to construct MapperWrapper: \" + mapperWrapper);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn mapperToWrap;\n+\t\t\t}\n+\t\t};\n \n \t\tif (this.converters != null) {\n \t\t\tfor (int i = 0; i < this.converters.length; i++) {\n@@ -391,7 +435,7 @@ else if (this.converters[i] instanceof SingleValueConverter) {\n \t\t\t\t\tint idx = field.lastIndexOf('.');\n \t\t\t\t\tif (idx != -1) {\n \t\t\t\t\t\tString className = field.substring(0, idx);\n-\t\t\t\t\t\tClass clazz = ClassUtils.forName(className, this.beanClassLoader);\n+\t\t\t\t\t\tClass<?> clazz = ClassUtils.forName(className, this.beanClassLoader);\n \t\t\t\t\t\tString fieldName = field.substring(idx + 1);\n \t\t\t\t\t\txstream.aliasField(alias, clazz, fieldName);\n \t\t\t\t\t}\n@@ -418,8 +462,7 @@ else if (this.converters[i] instanceof SingleValueConverter) {\n \t\t\t\t\t}\n \t\t\t\t\telse {\n \t\t\t\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\t\t\t\"Invalid argument 'attributes'. 'useAttributesFor' property takes map of <String, Class>,\" +\n-\t\t\t\t\t\t\t\t\t\t\" when using a map key of type String\");\n+\t\t\t\t\t\t\t\t\"'useAttributesFor' takes Map<String, Class> when using a map key of type String\");\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\telse if (entry.getKey() instanceof Class) {\n@@ -428,22 +471,20 @@ else if (entry.getKey() instanceof Class) {\n \t\t\t\t\t\txstream.useAttributeFor(key, (String) entry.getValue());\n \t\t\t\t\t}\n \t\t\t\t\telse if (entry.getValue() instanceof List) {\n-\t\t\t\t\t\tList list = (List) entry.getValue();\n-\n-\t\t\t\t\t\tfor (Object o : list) {\n-\t\t\t\t\t\t\tif (o instanceof String) {\n-\t\t\t\t\t\t\t\txstream.useAttributeFor(key, (String) o);\n+\t\t\t\t\t\tList listValue = (List) entry.getValue();\n+\t\t\t\t\t\tfor (Object element : listValue) {\n+\t\t\t\t\t\t\tif (element instanceof String) {\n+\t\t\t\t\t\t\t\txstream.useAttributeFor(key, (String) element);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\telse {\n-\t\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid argument 'attributes'. \" +\n-\t\t\t\t\t\t\t\t\"'useAttributesFor' property takes either <Class, String> or <Class, List<String>> map,\" +\n-\t\t\t\t\t\t\t\t\" when using a map key of type Class\");\n+\t\t\t\t\t\tthrow new IllegalArgumentException(\"'useAttributesFor' property takes either Map<Class, String> \" +\n+\t\t\t\t\t\t\t\t\"or Map<Class, List<String>> when using a map key of type Class\");\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid argument 'attributes. \" +\n+\t\t\t\t\tthrow new IllegalArgumentException(\n \t\t\t\t\t\t\t\"'useAttributesFor' property takes either a map key of type String or Class\");\n \t\t\t\t}\n \t\t\t}\n@@ -482,16 +523,16 @@ private Map<String, Class<?>> toClassMap(Map<String, ?> map) throws ClassNotFoun\n \t\tfor (Map.Entry<String, ?> entry : map.entrySet()) {\n \t\t\tString key = entry.getKey();\n \t\t\tObject value = entry.getValue();\n-\t\t\tClass type;\n+\t\t\tClass<?> type;\n \t\t\tif (value instanceof Class) {\n-\t\t\t\ttype = (Class) value;\n+\t\t\t\ttype = (Class<?>) value;\n \t\t\t}\n \t\t\telse if (value instanceof String) {\n \t\t\t\tString className = (String) value;\n \t\t\t\ttype = ClassUtils.forName(className, this.beanClassLoader);\n \t\t\t}\n \t\t\telse {\n-\t\t\t\tthrow new IllegalArgumentException(\"Unknown value [\" + value + \"], expected String or Class\");\n+\t\t\t\tthrow new IllegalArgumentException(\"Unknown value [\" + value + \"] - expected String or Class\");\n \t\t\t}\n \t\t\tresult.put(key, type);\n \t\t}\n@@ -521,7 +562,7 @@ public final XStream getXStream() {\n \n \n \t@Override\n-\tpublic boolean supports(Class clazz) {\n+\tpublic boolean supports(Class<?> clazz) {\n \t\tif (ObjectUtils.isEmpty(this.supportedClasses)) {\n \t\t\treturn true;\n \t\t}",
      "parent_sha": "3cd2eb83c5937de7d6636f9b410947ee9c8cde99"
    }
  },
  {
    "oid": "e24e76805479a3a8ab3b4b2a73b8c272afa36baa",
    "message": "SPR-6164 - a Uri Value is incorrectly extracted if it contains '.'.",
    "date": "2009-10-15T09:18:14Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/e24e76805479a3a8ab3b4b2a73b8c272afa36baa",
    "details": {
      "sha": "d245d83e8af357d47e4e505dea89a630422b53db",
      "filename": "org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/UriTemplateServletAnnotationControllerTests.java",
      "status": "modified",
      "additions": 23,
      "deletions": 1,
      "changes": 24,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/e24e76805479a3a8ab3b4b2a73b8c272afa36baa/org.springframework.web.servlet%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fmvc%2Fannotation%2FUriTemplateServletAnnotationControllerTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/e24e76805479a3a8ab3b4b2a73b8c272afa36baa/org.springframework.web.servlet%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fmvc%2Fannotation%2FUriTemplateServletAnnotationControllerTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.web.servlet%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fmvc%2Fannotation%2FUriTemplateServletAnnotationControllerTests.java?ref=e24e76805479a3a8ab3b4b2a73b8c272afa36baa",
      "patch": "@@ -235,6 +235,29 @@ protected WebApplicationContext createWebApplicationContext(WebApplicationContex\n \t\tservlet.init(new MockServletConfig());\n \t}\n \n+\t@Test\n+\tpublic void noDefaultSuffixPattern() throws Exception {\n+\t\tservlet = new DispatcherServlet() {\n+\t\t\t@Override\n+\t\t\tprotected WebApplicationContext createWebApplicationContext(WebApplicationContext parent)\n+\t\t\t\t\tthrows BeansException {\n+\t\t\t\tGenericWebApplicationContext wac = new GenericWebApplicationContext();\n+\t\t\t\twac.registerBeanDefinition(\"controller\", new RootBeanDefinition(ImplicitSubPathController.class));\n+\t\t\t\tRootBeanDefinition mappingDef = new RootBeanDefinition(DefaultAnnotationHandlerMapping.class);\n+\t\t\t\tmappingDef.getPropertyValues().addPropertyValue(\"useDefaultSuffixPattern\", false);\n+\t\t\t\twac.registerBeanDefinition(\"handlerMapping\", mappingDef);\n+\t\t\t\twac.refresh();\n+\t\t\t\treturn wac;\n+\t\t\t}\n+\t\t};\n+\t\tservlet.init(new MockServletConfig());\n+\n+\t\tMockHttpServletRequest request = new MockHttpServletRequest(\"GET\", \"/hotels/hotel.with.dot\");\n+\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n+\t\tservlet.service(request, response);\n+\t\tassertEquals(\"test-hotel.with.dot\", response.getContentAsString());\n+\t}\n+\n \t/*\n \t * Controllers\n \t */\n@@ -406,5 +429,4 @@ public void remove(@PathVariable long hotelId, Writer writer) {\n \t\t}\n \t}\n \n-\n }",
      "parent_sha": "64ded0484eafcb4a3563c44f3e156f8c1d9f7581"
    }
  },
  {
    "oid": "d1e099029388795c31c76eeb1a963332599f6652",
    "message": "Polishing",
    "date": "2017-04-19T14:49:06Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/d1e099029388795c31c76eeb1a963332599f6652",
    "details": {
      "sha": "925406dd11587381f82457b1218e0e2d745937cd",
      "filename": "spring-webflux/src/test/java/org/springframework/web/reactive/result/view/AbstractViewTests.java",
      "status": "modified",
      "additions": 27,
      "deletions": 13,
      "changes": 40,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/d1e099029388795c31c76eeb1a963332599f6652/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fresult%2Fview%2FAbstractViewTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/d1e099029388795c31c76eeb1a963332599f6652/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fresult%2Fview%2FAbstractViewTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fresult%2Fview%2FAbstractViewTests.java?ref=d1e099029388795c31c76eeb1a963332599f6652",
      "patch": "@@ -1,27 +1,40 @@\n+/*\n+ * Copyright 2002-2017 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.springframework.web.reactive.result.view;\n \n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n import io.reactivex.Observable;\n import io.reactivex.Single;\n import org.junit.Before;\n import org.junit.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n import org.springframework.http.MediaType;\n import org.springframework.mock.http.server.reactive.test.MockServerHttpRequest;\n import org.springframework.mock.http.server.reactive.test.MockServerWebExchange;\n import org.springframework.tests.sample.beans.TestBean;\n-import org.springframework.ui.Model;\n import org.springframework.web.server.ServerWebExchange;\n-import reactor.core.publisher.Flux;\n-import reactor.core.publisher.Mono;\n-import reactor.test.StepVerifier;\n-\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.logging.Level;\n \n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.*;\n \n /**\n  * Unit tests for {@link AbstractView}.\n@@ -37,12 +50,13 @@ public void setup() {\n         this.exchange = MockServerHttpRequest.get(\"/\").toExchange();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Test\n     public void resolveAsyncAttributes() {\n \n         TestBean testBean1 = new TestBean(\"Bean1\");\n         TestBean testBean2 = new TestBean(\"Bean2\");\n-        Map<String, Object> attributes = new HashMap();\n+        Map<String, Object> attributes = new HashMap<>();\n         attributes.put(\"attr1\", Mono.just(testBean1));\n         attributes.put(\"attr2\", Flux.just(testBean1, testBean2));\n         attributes.put(\"attr3\", Single.just(testBean2));",
      "parent_sha": "30f61e0c0709c66c9171b0be0210555447a8f55e"
    }
  },
  {
    "oid": "302cdeeee67f9291be45147ffc5b543bfcb32d77",
    "message": "Clean up warnings in JdbcTransactionManagerTests",
    "date": "2023-12-06T20:35:02Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/302cdeeee67f9291be45147ffc5b543bfcb32d77",
    "details": {
      "sha": "c9950596d70be8575d612be4905e2921a41bdfb1",
      "filename": "spring-jdbc/src/test/java/org/springframework/jdbc/support/JdbcTransactionManagerTests.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/302cdeeee67f9291be45147ffc5b543bfcb32d77/spring-jdbc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fjdbc%2Fsupport%2FJdbcTransactionManagerTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/302cdeeee67f9291be45147ffc5b543bfcb32d77/spring-jdbc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fjdbc%2Fsupport%2FJdbcTransactionManagerTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-jdbc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fjdbc%2Fsupport%2FJdbcTransactionManagerTests.java?ref=302cdeeee67f9291be45147ffc5b543bfcb32d77",
      "patch": "@@ -43,14 +43,15 @@\n  * @since 5.3\n  * @see org.springframework.jdbc.datasource.DataSourceTransactionManagerTests\n  */\n-public class JdbcTransactionManagerTests extends DataSourceTransactionManagerTests {\n+public class JdbcTransactionManagerTests extends DataSourceTransactionManagerTests<JdbcTransactionManager> {\n \n \t@Override\n \tprotected JdbcTransactionManager createTransactionManager(DataSource ds) {\n \t\treturn new JdbcTransactionManager(ds);\n \t}\n \n \n+\t@Override\n \t@Test\n \tpublic void testTransactionWithExceptionOnCommit() throws Exception {\n \t\twillThrow(new SQLException(\"Cannot commit\")).given(con).commit();\n@@ -106,6 +107,7 @@ protected void doInTransactionWithoutResult(TransactionStatus status) {\n \t\tverify(con).close();\n \t}\n \n+\t@Override\n \t@Test\n \tpublic void testTransactionWithExceptionOnCommitAndRollbackOnCommitFailure() throws Exception {\n \t\twillThrow(new SQLException(\"Cannot commit\")).given(con).commit();\n@@ -127,6 +129,7 @@ protected void doInTransactionWithoutResult(TransactionStatus status) {\n \t\tverify(con).close();\n \t}\n \n+\t@Override\n \t@Test\n \tpublic void testTransactionWithExceptionOnRollback() throws Exception {\n \t\tgiven(con.getAutoCommit()).willReturn(true);",
      "parent_sha": "61dd9fce7360891503e7d8cf215b4702b4f7ff4d"
    }
  },
  {
    "oid": "28eece3da14e40e3b2068bc4e7e8ef2e6bda73da",
    "message": "Fix predicate setup in test\n\nSee gh-33368",
    "date": "2024-08-12T08:29:23Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/28eece3da14e40e3b2068bc4e7e8ef2e6bda73da",
    "details": {
      "sha": "6b11bc256d978aed579afb568c1a4cf22a084b87",
      "filename": "spring-jdbc/src/test/java/org/springframework/jdbc/config/JdbcNamespaceIntegrationTests.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/28eece3da14e40e3b2068bc4e7e8ef2e6bda73da/spring-jdbc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fjdbc%2Fconfig%2FJdbcNamespaceIntegrationTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/28eece3da14e40e3b2068bc4e7e8ef2e6bda73da/spring-jdbc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fjdbc%2Fconfig%2FJdbcNamespaceIntegrationTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-jdbc%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fjdbc%2Fconfig%2FJdbcNamespaceIntegrationTests.java?ref=28eece3da14e40e3b2068bc4e7e8ef2e6bda73da",
      "patch": "@@ -86,9 +86,9 @@ void createWithExplicitDatabaseName() {\n \n \t@Test\n \tvoid createWithGeneratedDatabaseName() {\n-\t\tPredicate<String> urlPredicate = url -> url.startsWith(\"jdbc:hsqldb:mem:\");\n-\t\turlPredicate.and(url -> !url.endsWith(\"dataSource\"));\n-\t\turlPredicate.and(url -> !url.endsWith(\"shouldBeOverriddenByGeneratedName\"));\n+\t\tPredicate<String> urlPredicate = ((Predicate<String>) url -> url.startsWith(\"jdbc:hsqldb:mem:\"))\n+\t\t\t\t.and(url -> !url.endsWith(\"dataSource\"))\n+\t\t\t\t.and(url -> !url.endsWith(\"shouldBeOverriddenByGeneratedName\"));\n \t\tassertCorrectSetupForSingleDataSource(\"jdbc-config-db-name-generated.xml\", urlPredicate);\n \t}\n ",
      "parent_sha": "2b8225f11ca5621e92243a88f15aa5b8e4f335ed"
    }
  },
  {
    "oid": "5be94731367407c703d9c6c2584dc7cb964638b6",
    "message": "initialize cache Maps early, turning them into final fields",
    "date": "2010-10-10T20:11:44Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/5be94731367407c703d9c6c2584dc7cb964638b6",
    "details": {
      "sha": "4cfc67861e5cc621a5afcf8f83dd3221b142e6c8",
      "filename": "org.springframework.expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java",
      "status": "modified",
      "additions": 29,
      "deletions": 45,
      "changes": 74,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/5be94731367407c703d9c6c2584dc7cb964638b6/org.springframework.expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2Fsupport%2FReflectivePropertyAccessor.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/5be94731367407c703d9c6c2584dc7cb964638b6/org.springframework.expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2Fsupport%2FReflectivePropertyAccessor.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.expression%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fexpression%2Fspel%2Fsupport%2FReflectivePropertyAccessor.java?ref=5be94731367407c703d9c6c2584dc7cb964638b6",
      "patch": "@@ -47,11 +47,12 @@\n  */\r\n public class ReflectivePropertyAccessor implements PropertyAccessor {\r\n \r\n-\tprotected Map<CacheKey, InvokerPair> readerCache;\r\n+\tprotected final Map<CacheKey, InvokerPair> readerCache = new ConcurrentHashMap<CacheKey, InvokerPair>();\r\n \r\n-\tprotected Map<CacheKey, Member> writerCache;\r\n+\tprotected final Map<CacheKey, Member> writerCache = new ConcurrentHashMap<CacheKey, Member>();\r\n \t\r\n-\tprotected Map<CacheKey, TypeDescriptor> typeDescriptorCache;\r\n+\tprotected final Map<CacheKey, TypeDescriptor> typeDescriptorCache = new ConcurrentHashMap<CacheKey, TypeDescriptor>();\r\n+\r\n \r\n \t/**\r\n \t * @return null which means this is a general purpose accessor\r\n@@ -65,15 +66,9 @@ public boolean canRead(EvaluationContext context, Object target, String name) th\n \t\t\treturn false;\r\n \t\t}\r\n \t\tClass<?> type = (target instanceof Class ? (Class<?>) target : target.getClass());\r\n-\t\tif ((type.isArray() && name.equals(\"length\"))) {\r\n+\t\tif (type.isArray() && name.equals(\"length\")) {\r\n \t\t\treturn true;\r\n \t\t}\r\n-\t\tif (this.readerCache==null) {\r\n-\t\t\tthis.readerCache = new ConcurrentHashMap<CacheKey, InvokerPair>();\r\n-\t\t\tif (this.typeDescriptorCache == null) {\r\n-\t\t\t\tthis.typeDescriptorCache = new ConcurrentHashMap<CacheKey,TypeDescriptor>();\r\n-\t\t\t}\r\n-\t\t}\r\n \t\tCacheKey cacheKey = new CacheKey(type, name);\r\n \t\tif (this.readerCache.containsKey(cacheKey)) {\r\n \t\t\treturn true;\r\n@@ -119,14 +114,11 @@ public TypedValue read(EvaluationContext context, Object target, String name) th\n \t\t\treturn new TypedValue(Array.getLength(target),TypeDescriptor.valueOf(Integer.TYPE));\r\n \t\t}\r\n \r\n-\t\tif (this.readerCache==null) {\r\n-\t\t\tthis.readerCache = new ConcurrentHashMap<CacheKey, InvokerPair>();\r\n-\t\t}\r\n \t\tCacheKey cacheKey = new CacheKey(type, name);\r\n \t\tInvokerPair invoker = this.readerCache.get(cacheKey);\r\n \r\n \t\tif (invoker == null || invoker.member instanceof Method) {\r\n-\t\t\tMethod method = (Method) (invoker==null?null:invoker.member);\r\n+\t\t\tMethod method = (Method) (invoker != null ? invoker.member : null);\r\n \t\t\tif (method == null) {\r\n \t\t\t\tmethod = findGetterForProperty(name, type, target instanceof Class);\r\n \t\t\t\tif (method != null) {\r\n@@ -185,12 +177,6 @@ public boolean canWrite(EvaluationContext context, Object target, String name) t\n \t\t\treturn false;\r\n \t\t}\r\n \t\tClass<?> type = (target instanceof Class ? (Class<?>) target : target.getClass());\r\n-\t\tif (this.writerCache == null) {\r\n-\t\t\tthis.writerCache = new ConcurrentHashMap<CacheKey, Member>();\r\n-\t\t\tif (this.typeDescriptorCache == null) {\r\n-\t\t\t\tthis.typeDescriptorCache = new ConcurrentHashMap<CacheKey,TypeDescriptor>();\r\n-\t\t\t}\r\n-\t\t}\r\n \t\tCacheKey cacheKey = new CacheKey(type, name);\r\n \t\tif (this.writerCache.containsKey(cacheKey)) {\r\n \t\t\treturn true;\r\n@@ -201,7 +187,8 @@ public boolean canWrite(EvaluationContext context, Object target, String name) t\n \t\t\tPropertyDescriptor propertyDescriptor = null;\r\n \t\t\ttry {\r\n \t\t\t\tpropertyDescriptor = new PropertyDescriptor(name,null,method);\r\n-\t\t\t} catch (IntrospectionException ex) {\r\n+\t\t\t}\r\n+\t\t\tcatch (IntrospectionException ex) {\r\n \t\t\t\tthrow new AccessException(\"Unable to access property '\" + name + \"' through setter \"+method, ex);\r\n \t\t\t}\r\n \t\t\tMethodParameter mp = new MethodParameter(method,0);\r\n@@ -232,13 +219,11 @@ public void write(EvaluationContext context, Object target, String name, Object\n \t\tif (typeDescriptor != null) {\r\n \t\t\ttry {\r\n \t\t\t\tpossiblyConvertedNewValue = context.getTypeConverter().convertValue(newValue, TypeDescriptor.forObject(newValue), typeDescriptor);\r\n-\t\t\t} catch (EvaluationException evaluationException) {\r\n+\t\t\t}\r\n+\t\t\tcatch (EvaluationException evaluationException) {\r\n \t\t\t\tthrow new AccessException(\"Type conversion failure\",evaluationException);\r\n \t\t\t}\r\n \t\t}\r\n-\t\tif (this.writerCache == null) {\r\n-\t\t\tthis.writerCache = new ConcurrentHashMap<CacheKey, Member>();\r\n-\t\t}\r\n \t\tCacheKey cacheKey = new CacheKey(type, name);\r\n \t\tMember cachedMember = this.writerCache.get(cacheKey);\r\n \r\n@@ -303,11 +288,13 @@ private TypeDescriptor getTypeDescriptor(EvaluationContext context, Object targe\n \t\t\ttry {\r\n \t\t\t\tif (canRead(context, target, name)) {\r\n \t\t\t\t\ttypeDescriptor =  this.typeDescriptorCache.get(cacheKey);\r\n-\t\t\t\t} else if (canWrite(context, target, name)) {\r\n+\t\t\t\t}\r\n+\t\t\t\telse if (canWrite(context, target, name)) {\r\n \t\t\t\t\ttypeDescriptor =  this.typeDescriptorCache.get(cacheKey);\r\n \t\t\t\t}\r\n-\t\t\t} catch (AccessException e) {\r\n-\t\t\t\t// continue with null typeDescriptor\r\n+\t\t\t}\r\n+\t\t\tcatch (AccessException ex) {\r\n+\t\t\t\t// continue with null type descriptor\r\n \t\t\t}\r\n \t\t}\r\n \t\treturn typeDescriptor;\r\n@@ -415,30 +402,24 @@ public int hashCode() {\n \r\n \t/** \r\n \t * Attempt to create an optimized property accessor tailored for a property of a particular name on\r\n-\t * a particular class.  The general ReflectivePropertyAccessor will always work but is not optimal \r\n+\t * a particular class. The general ReflectivePropertyAccessor will always work but is not optimal \r\n \t * due to the need to lookup which reflective member (method/field) to use each time read() is called.\r\n \t * This method will just return the ReflectivePropertyAccessor instance if it is unable to build\r\n \t * something more optimal.\r\n \t */\r\n \tpublic PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {\r\n \t\t// Don't be clever for arrays or null target\r\n-\t\tif (target==null) {\r\n+\t\tif (target == null) {\r\n \t\t\treturn this;\r\n \t\t}\r\n \t\tClass<?> type = (target instanceof Class ? (Class<?>) target : target.getClass());\r\n \t\tif (type.isArray()) {\r\n \t\t\treturn this;\r\n \t\t}\r\n-\t\t\r\n+\r\n \t\tCacheKey cacheKey = new CacheKey(type, name);\r\n-\t\tif (this.readerCache==null) {\r\n-\t\t\tthis.readerCache = new ConcurrentHashMap<CacheKey, InvokerPair>();\r\n-\t\t\tif (this.typeDescriptorCache == null) {\r\n-\t\t\t\tthis.typeDescriptorCache = new ConcurrentHashMap<CacheKey,TypeDescriptor>();\r\n-\t\t\t}\r\n-\t\t}\r\n \t\tInvokerPair invocationTarget = this.readerCache.get(cacheKey);\r\n-\t\t\r\n+\r\n \t\tif (invocationTarget == null || invocationTarget.member instanceof Method) {\r\n \t\t\tMethod method = (Method) (invocationTarget==null?null:invocationTarget.member);\r\n \t\t\tif (method == null) {\r\n@@ -489,7 +470,8 @@ static class OptimalPropertyAccessor implements PropertyAccessor {\n \t\t\t\tField field = (Field)member;\r\n \t\t\t\tneedsToBeMadeAccessible = (!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers())) \r\n \t\t\t\t&& !field.isAccessible();\r\n-\t\t\t} else {\r\n+\t\t\t}\r\n+\t\t\telse {\r\n \t\t\t\tMethod method = (Method)member;\r\n \t\t\t\tneedsToBeMadeAccessible = ((!Modifier.isPublic(method.getModifiers()) || !Modifier.isPublic(method.getDeclaringClass().getModifiers()))\r\n \t\t\t\t\t\t&& !method.isAccessible());\r\n@@ -516,7 +498,8 @@ public boolean canRead(EvaluationContext context, Object target, String name) th\n \t\t\t\t}\r\n \t\t\t\tgetterName = \"is\" + StringUtils.capitalize(name);\r\n \t\t\t\treturn getterName.equals(method.getName());\r\n-\t\t\t} else {\r\n+\t\t\t}\r\n+\t\t\telse {\r\n \t\t\t\tField field = (Field)member;\r\n \t\t\t\treturn field.getName().equals(name);\r\n \t\t\t}\r\n@@ -526,11 +509,12 @@ public TypedValue read(EvaluationContext context, Object target, String name) th\n \t\t\tif (member instanceof Method) {\r\n \t\t\t\ttry {\r\n \t\t\t\t\tif (needsToBeMadeAccessible) {\r\n-\t\t\t\t\t\tReflectionUtils.makeAccessible((Method)member);\r\n+\t\t\t\t\t\tReflectionUtils.makeAccessible((Method) member);\r\n \t\t\t\t\t}\r\n-\t\t\t\t\treturn new TypedValue(((Method)member).invoke(target),typeDescriptor);\r\n-\t\t\t\t} catch (Exception e) {\r\n-\t\t\t\t\tthrow new AccessException(\"Unable to access property '\" + name + \"' through getter\", e);\r\n+\t\t\t\t\treturn new TypedValue(((Method) member).invoke(target), typeDescriptor);\r\n+\t\t\t\t}\r\n+\t\t\t\tcatch (Exception ex) {\r\n+\t\t\t\t\tthrow new AccessException(\"Unable to access property '\" + name + \"' through getter\", ex);\r\n \t\t\t\t}\r\n \t\t\t}\t\t\r\n \t\t\tif (member instanceof Field) {\r\n@@ -555,6 +539,6 @@ public void write(EvaluationContext context, Object target, String name, Object\n \t\t\t\tthrows AccessException {\r\n \t\t\tthrow new UnsupportedOperationException(\"Should not be called on an OptimalPropertyAccessor\");\r\n \t\t}\r\n-\t\t\r\n \t}\r\n+\r\n }\r",
      "parent_sha": "7553b76f15c5b5e80d15e0ae09aba72a56c3572b"
    }
  },
  {
    "oid": "c23fd784a0d91f5de1e6b5cab82e86b1746fc3b4",
    "message": "Consistently apply TaskDecorator to ManagedExecutorService as well\n\nCloses gh-32455",
    "date": "2024-03-15T20:16:37Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/c23fd784a0d91f5de1e6b5cab82e86b1746fc3b4",
    "details": {
      "sha": "d9bd5ee06b1bf9b7897866547a314fbda231ed8f",
      "filename": "spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.java",
      "status": "modified",
      "additions": 5,
      "deletions": 11,
      "changes": 16,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/c23fd784a0d91f5de1e6b5cab82e86b1746fc3b4/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fscheduling%2Fconcurrent%2FConcurrentTaskExecutor.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/c23fd784a0d91f5de1e6b5cab82e86b1746fc3b4/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fscheduling%2Fconcurrent%2FConcurrentTaskExecutor.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fscheduling%2Fconcurrent%2FConcurrentTaskExecutor.java?ref=c23fd784a0d91f5de1e6b5cab82e86b1746fc3b4",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2023 the original author or authors.\n+ * Copyright 2002-2024 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -143,11 +143,6 @@ public final Executor getConcurrentExecutor() {\n \t * execution callback (which may be a wrapper around the user-supplied task).\n \t * <p>The primary use case is to set some execution context around the task's\n \t * invocation, or to provide some monitoring/statistics for task execution.\n-\t * <p><b>NOTE:</b> Exception handling in {@code TaskDecorator} implementations\n-\t * is limited to plain {@code Runnable} execution via {@code execute} calls.\n-\t * In case of {@code #submit} calls, the exposed {@code Runnable} will be a\n-\t * {@code FutureTask} which does not propagate any exceptions; you might\n-\t * have to cast it and call {@code Future#get} to evaluate exceptions.\n \t * @since 4.3\n \t */\n \tpublic final void setTaskDecorator(TaskDecorator taskDecorator) {\n@@ -188,11 +183,10 @@ public <T> ListenableFuture<T> submitListenable(Callable<T> task) {\n \t}\n \n \n-\tprivate TaskExecutorAdapter getAdaptedExecutor(Executor concurrentExecutor) {\n-\t\tif (managedExecutorServiceClass != null && managedExecutorServiceClass.isInstance(concurrentExecutor)) {\n-\t\t\treturn new ManagedTaskExecutorAdapter(concurrentExecutor);\n-\t\t}\n-\t\tTaskExecutorAdapter adapter = new TaskExecutorAdapter(concurrentExecutor);\n+\tprivate TaskExecutorAdapter getAdaptedExecutor(Executor originalExecutor) {\n+\t\tTaskExecutorAdapter adapter =\n+\t\t\t\t(managedExecutorServiceClass != null && managedExecutorServiceClass.isInstance(originalExecutor) ?\n+\t\t\t\t\t\tnew ManagedTaskExecutorAdapter(originalExecutor) : new TaskExecutorAdapter(originalExecutor));\n \t\tif (this.taskDecorator != null) {\n \t\t\tadapter.setTaskDecorator(this.taskDecorator);\n \t\t}",
      "parent_sha": "68a39938974a6519b747698f5119575463b11991"
    }
  },
  {
    "oid": "030bc224e30699a91e33e27a6d9782803afbd0d4",
    "message": "Invert the check for ServletInputStream.isReady()\n\nWhen checking whether there is still request body the first method\nthat should be checked is ServletInputStream.isReady() and then\nServletInputStream.isFinished(). ServletInputStream.isReady() is the active\nmethod whereas the ServletInputStream.isFinished() is not.\nIt is important to call ServletInputStream.isReady() because if it returns\nfalse it will schedule a dispatch and if the request body is already read it will\nsend onAllDataRead event.\n\nIssue: SPR-16521",
    "date": "2018-03-07T16:23:10Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/030bc224e30699a91e33e27a6d9782803afbd0d4",
    "details": {
      "sha": "4111a9e1444f9384172d93d9ad210316ef43e045",
      "filename": "spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/030bc224e30699a91e33e27a6d9782803afbd0d4/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fserver%2Freactive%2FServletServerHttpRequest.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/030bc224e30699a91e33e27a6d9782803afbd0d4/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fserver%2Freactive%2FServletServerHttpRequest.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fserver%2Freactive%2FServletServerHttpRequest.java?ref=030bc224e30699a91e33e27a6d9782803afbd0d4",
      "patch": "@@ -263,7 +263,7 @@ public void registerReadListener() throws IOException {\n \n \t\t@Override\n \t\tprotected void checkOnDataAvailable() {\n-\t\t\tif (!this.inputStream.isFinished() && this.inputStream.isReady()) {\n+\t\t\tif (this.inputStream.isReady() && !this.inputStream.isFinished()) {\n \t\t\t\tonDataAvailable();\n \t\t\t}\n \t\t}",
      "parent_sha": "20287e0cb07f557634efe9366d9115525e70cc80"
    }
  },
  {
    "oid": "23a941d0f47f9efc8362ecda087c9daa230b2080",
    "message": "added \"entityInterceptor\" property to Hibernate 4 LocalSessionFactoryBean (SPR-8940)",
    "date": "2011-12-21T13:04:37Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/23a941d0f47f9efc8362ecda087c9daa230b2080",
    "details": {
      "sha": "5af9396b3d12dd71a15396022fc67afbc4b4b606",
      "filename": "org.springframework.orm/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java",
      "status": "modified",
      "additions": 352,
      "deletions": 335,
      "changes": 687,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/23a941d0f47f9efc8362ecda087c9daa230b2080/org.springframework.orm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fhibernate4%2FLocalSessionFactoryBean.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/23a941d0f47f9efc8362ecda087c9daa230b2080/org.springframework.orm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fhibernate4%2FLocalSessionFactoryBean.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.orm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fhibernate4%2FLocalSessionFactoryBean.java?ref=23a941d0f47f9efc8362ecda087c9daa230b2080",
      "patch": "@@ -1,335 +1,352 @@\n-/*\r\n- * Copyright 2002-2011 the original author or authors.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-\r\n-package org.springframework.orm.hibernate4;\r\n-\r\n-import java.io.File;\r\n-import java.io.IOException;\r\n-import java.util.Properties;\r\n-import javax.sql.DataSource;\r\n-\r\n-import org.hibernate.SessionFactory;\r\n-import org.hibernate.cfg.NamingStrategy;\r\n-\r\n-import org.springframework.beans.factory.DisposableBean;\r\n-import org.springframework.beans.factory.FactoryBean;\r\n-import org.springframework.beans.factory.InitializingBean;\r\n-import org.springframework.context.ResourceLoaderAware;\r\n-import org.springframework.core.io.ClassPathResource;\r\n-import org.springframework.core.io.Resource;\r\n-import org.springframework.core.io.ResourceLoader;\r\n-import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\r\n-import org.springframework.core.io.support.ResourcePatternResolver;\r\n-import org.springframework.core.io.support.ResourcePatternUtils;\r\n-\r\n-/**\r\n- * {@link org.springframework.beans.factory.FactoryBean} that creates a\r\n- * Hibernate {@link org.hibernate.SessionFactory}. This is the usual way to\r\n- * set up a shared Hibernate SessionFactory in a Spring application context;\r\n- * the SessionFactory can then be passed to Hibernate-based DAOs via\r\n- * dependency injection.\r\n- *\r\n- * <p><b>NOTE:</b> This variant of LocalSessionFactoryBean requires Hibernate 4.0\r\n- * or higher. It is similar in role to the same-named class in the <code>orm.hibernate3</code>\r\n- * package. However, in practice, it is closer to <code>AnnotationSessionFactoryBean</code>\r\n- * since its core purpose is to bootstrap a <code>SessionFactory</code> from annotation scanning.\r\n- *\r\n- * @author Juergen Hoeller\r\n- * @since 3.1\r\n- * @see #setDataSource\r\n- * @see #setPackagesToScan\r\n- */\r\n-public class LocalSessionFactoryBean implements FactoryBean<SessionFactory>, ResourceLoaderAware,\r\n-\t\tInitializingBean, DisposableBean {\r\n-\r\n-\tprivate DataSource dataSource;\r\n-\r\n-\tprivate Resource[] configLocations;\r\n-\r\n-\tprivate String[] mappingResources;\r\n-\r\n-\tprivate Resource[] mappingLocations;\r\n-\r\n-\tprivate Resource[] cacheableMappingLocations;\r\n-\r\n-\tprivate Resource[] mappingJarLocations;\r\n-\r\n-\tprivate Resource[] mappingDirectoryLocations;\r\n-\r\n-\tprivate NamingStrategy namingStrategy;\r\n-\r\n-\tprivate Properties hibernateProperties;\r\n-\r\n-\tprivate Class<?>[] annotatedClasses;\r\n-\r\n-\tprivate String[] annotatedPackages;\r\n-\r\n-\tprivate String[] packagesToScan;\r\n-\r\n-\tprivate ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();\r\n-\r\n-\tprivate SessionFactory sessionFactory;\r\n-\r\n-\r\n-\t/**\r\n-\t * Set the DataSource to be used by the SessionFactory.\r\n-\t * If set, this will override corresponding settings in Hibernate properties.\r\n-\t * <p>If this is set, the Hibernate settings should not define\r\n-\t * a connection provider to avoid meaningless double configuration.\r\n-\t */\r\n-\tpublic void setDataSource(DataSource dataSource) {\r\n-\t\tthis.dataSource = dataSource;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Set the location of a single Hibernate XML config file, for example as\r\n-\t * classpath resource \"classpath:hibernate.cfg.xml\".\r\n-\t * <p>Note: Can be omitted when all necessary properties and mapping\r\n-\t * resources are specified locally via this bean.\r\n-\t * @see org.hibernate.cfg.Configuration#configure(java.net.URL)\r\n-\t */\r\n-\tpublic void setConfigLocation(Resource configLocation) {\r\n-\t\tthis.configLocations = new Resource[] {configLocation};\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Set the locations of multiple Hibernate XML config files, for example as\r\n-\t * classpath resources \"classpath:hibernate.cfg.xml,classpath:extension.cfg.xml\".\r\n-\t * <p>Note: Can be omitted when all necessary properties and mapping\r\n-\t * resources are specified locally via this bean.\r\n-\t * @see org.hibernate.cfg.Configuration#configure(java.net.URL)\r\n-\t */\r\n-\tpublic void setConfigLocations(Resource[] configLocations) {\r\n-\t\tthis.configLocations = configLocations;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Set Hibernate mapping resources to be found in the class path,\r\n-\t * like \"example.hbm.xml\" or \"mypackage/example.hbm.xml\".\r\n-\t * Analogous to mapping entries in a Hibernate XML config file.\r\n-\t * Alternative to the more generic setMappingLocations method.\r\n-\t * <p>Can be used to add to mappings from a Hibernate XML config file,\r\n-\t * or to specify all mappings locally.\r\n-\t * @see #setMappingLocations\r\n-\t * @see org.hibernate.cfg.Configuration#addResource\r\n-\t */\r\n-\tpublic void setMappingResources(String[] mappingResources) {\r\n-\t\tthis.mappingResources = mappingResources;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Set locations of Hibernate mapping files, for example as classpath\r\n-\t * resource \"classpath:example.hbm.xml\". Supports any resource location\r\n-\t * via Spring's resource abstraction, for example relative paths like\r\n-\t * \"WEB-INF/mappings/example.hbm.xml\" when running in an application context.\r\n-\t * <p>Can be used to add to mappings from a Hibernate XML config file,\r\n-\t * or to specify all mappings locally.\r\n-\t * @see org.hibernate.cfg.Configuration#addInputStream\r\n-\t */\r\n-\tpublic void setMappingLocations(Resource[] mappingLocations) {\r\n-\t\tthis.mappingLocations = mappingLocations;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Set locations of cacheable Hibernate mapping files, for example as web app\r\n-\t * resource \"/WEB-INF/mapping/example.hbm.xml\". Supports any resource location\r\n-\t * via Spring's resource abstraction, as long as the resource can be resolved\r\n-\t * in the file system.\r\n-\t * <p>Can be used to add to mappings from a Hibernate XML config file,\r\n-\t * or to specify all mappings locally.\r\n-\t * @see org.hibernate.cfg.Configuration#addCacheableFile(java.io.File)\r\n-\t */\r\n-\tpublic void setCacheableMappingLocations(Resource[] cacheableMappingLocations) {\r\n-\t\tthis.cacheableMappingLocations = cacheableMappingLocations;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Set locations of jar files that contain Hibernate mapping resources,\r\n-\t * like \"WEB-INF/lib/example.hbm.jar\".\r\n-\t * <p>Can be used to add to mappings from a Hibernate XML config file,\r\n-\t * or to specify all mappings locally.\r\n-\t * @see org.hibernate.cfg.Configuration#addJar(java.io.File)\r\n-\t */\r\n-\tpublic void setMappingJarLocations(Resource[] mappingJarLocations) {\r\n-\t\tthis.mappingJarLocations = mappingJarLocations;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Set locations of directories that contain Hibernate mapping resources,\r\n-\t * like \"WEB-INF/mappings\".\r\n-\t * <p>Can be used to add to mappings from a Hibernate XML config file,\r\n-\t * or to specify all mappings locally.\r\n-\t * @see org.hibernate.cfg.Configuration#addDirectory(java.io.File)\r\n-\t */\r\n-\tpublic void setMappingDirectoryLocations(Resource[] mappingDirectoryLocations) {\r\n-\t\tthis.mappingDirectoryLocations = mappingDirectoryLocations;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Set a Hibernate NamingStrategy for the SessionFactory, determining the\r\n-\t * physical column and table names given the info in the mapping document.\r\n-\t * @see org.hibernate.cfg.Configuration#setNamingStrategy\r\n-\t */\r\n-\tpublic void setNamingStrategy(NamingStrategy namingStrategy) {\r\n-\t\tthis.namingStrategy = namingStrategy;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Set Hibernate properties, such as \"hibernate.dialect\".\r\n-\t * <p>Note: Do not specify a transaction provider here when using\r\n-\t * Spring-driven transactions. It is also advisable to omit connection\r\n-\t * provider settings and use a Spring-set DataSource instead.\r\n-\t * @see #setDataSource\r\n-\t */\r\n-\tpublic void setHibernateProperties(Properties hibernateProperties) {\r\n-\t\tthis.hibernateProperties = hibernateProperties;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Return the Hibernate properties, if any. Mainly available for\r\n-\t * configuration through property paths that specify individual keys.\r\n-\t */\r\n-\tpublic Properties getHibernateProperties() {\r\n-\t\tif (this.hibernateProperties == null) {\r\n-\t\t\tthis.hibernateProperties = new Properties();\r\n-\t\t}\r\n-\t\treturn this.hibernateProperties;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Specify annotated entity classes to register with this Hibernate SessionFactory.\r\n-\t * @see org.hibernate.cfg.Configuration#addAnnotatedClass(String)\r\n-\t */\r\n-\tpublic void setAnnotatedClasses(Class<?>[] annotatedClasses) {\r\n-\t\tthis.annotatedClasses = annotatedClasses;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Specify the names of annotated packages, for which package-level\r\n-\t * annotation metadata will be read.\r\n-\t * @see org.hibernate.cfg.Configuration#addPackage(String)\r\n-\t */\r\n-\tpublic void setAnnotatedPackages(String[] annotatedPackages) {\r\n-\t\tthis.annotatedPackages = annotatedPackages;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Specify packages to search for autodetection of your entity classes in the\r\n-\t * classpath. This is analogous to Spring's component-scan feature\r\n-\t * ({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).\r\n-\t */\r\n-\tpublic void setPackagesToScan(String... packagesToScan) {\r\n-\t\tthis.packagesToScan = packagesToScan;\r\n-\t}\r\n-\r\n-\tpublic void setResourceLoader(ResourceLoader resourceLoader) {\r\n-\t\tthis.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader);\r\n-\t}\r\n-\r\n-\r\n-\tpublic void afterPropertiesSet() throws IOException {\r\n-\t\tLocalSessionFactoryBuilder sfb = new LocalSessionFactoryBuilder(this.dataSource, this.resourcePatternResolver);\r\n-\r\n-\t\tif (this.configLocations != null) {\r\n-\t\t\tfor (Resource resource : this.configLocations) {\r\n-\t\t\t\t// Load Hibernate configuration from given location.\r\n-\t\t\t\tsfb.configure(resource.getURL());\r\n-\t\t\t}\r\n-\t\t}\r\n-\r\n-\t\tif (this.mappingResources != null) {\r\n-\t\t\t// Register given Hibernate mapping definitions, contained in resource files.\r\n-\t\t\tfor (String mapping : this.mappingResources) {\r\n-\t\t\t\tResource mr = new ClassPathResource(mapping.trim(), this.resourcePatternResolver.getClassLoader());\r\n-\t\t\t\tsfb.addInputStream(mr.getInputStream());\r\n-\t\t\t}\r\n-\t\t}\r\n-\r\n-\t\tif (this.mappingLocations != null) {\r\n-\t\t\t// Register given Hibernate mapping definitions, contained in resource files.\r\n-\t\t\tfor (Resource resource : this.mappingLocations) {\r\n-\t\t\t\tsfb.addInputStream(resource.getInputStream());\r\n-\t\t\t}\r\n-\t\t}\r\n-\r\n-\t\tif (this.cacheableMappingLocations != null) {\r\n-\t\t\t// Register given cacheable Hibernate mapping definitions, read from the file system.\r\n-\t\t\tfor (Resource resource : this.cacheableMappingLocations) {\r\n-\t\t\t\tsfb.addCacheableFile(resource.getFile());\r\n-\t\t\t}\r\n-\t\t}\r\n-\r\n-\t\tif (this.mappingJarLocations != null) {\r\n-\t\t\t// Register given Hibernate mapping definitions, contained in jar files.\r\n-\t\t\tfor (Resource resource : this.mappingJarLocations) {\r\n-\t\t\t\tsfb.addJar(resource.getFile());\r\n-\t\t\t}\r\n-\t\t}\r\n-\r\n-\t\tif (this.mappingDirectoryLocations != null) {\r\n-\t\t\t// Register all Hibernate mapping definitions in the given directories.\r\n-\t\t\tfor (Resource resource : this.mappingDirectoryLocations) {\r\n-\t\t\t\tFile file = resource.getFile();\r\n-\t\t\t\tif (!file.isDirectory()) {\r\n-\t\t\t\t\tthrow new IllegalArgumentException(\r\n-\t\t\t\t\t\t\t\"Mapping directory location [\" + resource + \"] does not denote a directory\");\r\n-\t\t\t\t}\r\n-\t\t\t\tsfb.addDirectory(file);\r\n-\t\t\t}\r\n-\t\t}\r\n-\r\n-\t\tif (this.namingStrategy != null) {\r\n-\t\t\tsfb.setNamingStrategy(this.namingStrategy);\r\n-\t\t}\r\n-\r\n-\t\tif (this.hibernateProperties != null) {\r\n-\t\t\tsfb.addProperties(this.hibernateProperties);\r\n-\t\t}\r\n-\r\n-\t\tif (this.annotatedClasses != null) {\r\n-\t\t\tsfb.addAnnotatedClasses(this.annotatedClasses);\r\n-\t\t}\r\n-\r\n-\t\tif (this.annotatedPackages != null) {\r\n-\t\t\tsfb.addPackages(this.annotatedPackages);\r\n-\t\t}\r\n-\r\n-\t\tif (this.packagesToScan != null) {\r\n-\t\t\tsfb.scanPackages(this.packagesToScan);\r\n-\t\t}\r\n-\r\n-\t\tthis.sessionFactory = sfb.buildSessionFactory();\r\n-\t}\r\n-\r\n-\r\n-\tpublic SessionFactory getObject() {\r\n-\t\treturn this.sessionFactory;\r\n-\t}\r\n-\r\n-\tpublic Class<?> getObjectType() {\r\n-\t\treturn (this.sessionFactory != null ? this.sessionFactory.getClass() : SessionFactory.class);\r\n-\t}\r\n-\r\n-\tpublic boolean isSingleton() {\r\n-\t\treturn true;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void destroy() {\r\n-\t\tthis.sessionFactory.close();\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Copyright 2002-2011 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.orm.hibernate4;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Properties;\n+import javax.sql.DataSource;\n+\n+import org.hibernate.Interceptor;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.NamingStrategy;\n+\n+import org.springframework.beans.factory.DisposableBean;\n+import org.springframework.beans.factory.FactoryBean;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.ResourceLoaderAware;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.ResourceLoader;\n+import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n+import org.springframework.core.io.support.ResourcePatternResolver;\n+import org.springframework.core.io.support.ResourcePatternUtils;\n+\n+/**\n+ * {@link org.springframework.beans.factory.FactoryBean} that creates a\n+ * Hibernate {@link org.hibernate.SessionFactory}. This is the usual way to\n+ * set up a shared Hibernate SessionFactory in a Spring application context;\n+ * the SessionFactory can then be passed to Hibernate-based DAOs via\n+ * dependency injection.\n+ *\n+ * <p><b>NOTE:</b> This variant of LocalSessionFactoryBean requires Hibernate 4.0\n+ * or higher. It is similar in role to the same-named class in the <code>orm.hibernate3</code>\n+ * package. However, in practice, it is closer to <code>AnnotationSessionFactoryBean</code>\n+ * since its core purpose is to bootstrap a <code>SessionFactory</code> from annotation scanning.\n+ *\n+ * @author Juergen Hoeller\n+ * @since 3.1\n+ * @see #setDataSource\n+ * @see #setPackagesToScan\n+ */\n+public class LocalSessionFactoryBean implements FactoryBean<SessionFactory>, ResourceLoaderAware,\n+\t\tInitializingBean, DisposableBean {\n+\n+\tprivate DataSource dataSource;\n+\n+\tprivate Resource[] configLocations;\n+\n+\tprivate String[] mappingResources;\n+\n+\tprivate Resource[] mappingLocations;\n+\n+\tprivate Resource[] cacheableMappingLocations;\n+\n+\tprivate Resource[] mappingJarLocations;\n+\n+\tprivate Resource[] mappingDirectoryLocations;\n+\n+\tprivate Interceptor entityInterceptor;\n+\n+\tprivate NamingStrategy namingStrategy;\n+\n+\tprivate Properties hibernateProperties;\n+\n+\tprivate Class<?>[] annotatedClasses;\n+\n+\tprivate String[] annotatedPackages;\n+\n+\tprivate String[] packagesToScan;\n+\n+\tprivate ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();\n+\n+\tprivate SessionFactory sessionFactory;\n+\n+\n+\t/**\n+\t * Set the DataSource to be used by the SessionFactory.\n+\t * If set, this will override corresponding settings in Hibernate properties.\n+\t * <p>If this is set, the Hibernate settings should not define\n+\t * a connection provider to avoid meaningless double configuration.\n+\t */\n+\tpublic void setDataSource(DataSource dataSource) {\n+\t\tthis.dataSource = dataSource;\n+\t}\n+\n+\t/**\n+\t * Set the location of a single Hibernate XML config file, for example as\n+\t * classpath resource \"classpath:hibernate.cfg.xml\".\n+\t * <p>Note: Can be omitted when all necessary properties and mapping\n+\t * resources are specified locally via this bean.\n+\t * @see org.hibernate.cfg.Configuration#configure(java.net.URL)\n+\t */\n+\tpublic void setConfigLocation(Resource configLocation) {\n+\t\tthis.configLocations = new Resource[] {configLocation};\n+\t}\n+\n+\t/**\n+\t * Set the locations of multiple Hibernate XML config files, for example as\n+\t * classpath resources \"classpath:hibernate.cfg.xml,classpath:extension.cfg.xml\".\n+\t * <p>Note: Can be omitted when all necessary properties and mapping\n+\t * resources are specified locally via this bean.\n+\t * @see org.hibernate.cfg.Configuration#configure(java.net.URL)\n+\t */\n+\tpublic void setConfigLocations(Resource[] configLocations) {\n+\t\tthis.configLocations = configLocations;\n+\t}\n+\n+\t/**\n+\t * Set Hibernate mapping resources to be found in the class path,\n+\t * like \"example.hbm.xml\" or \"mypackage/example.hbm.xml\".\n+\t * Analogous to mapping entries in a Hibernate XML config file.\n+\t * Alternative to the more generic setMappingLocations method.\n+\t * <p>Can be used to add to mappings from a Hibernate XML config file,\n+\t * or to specify all mappings locally.\n+\t * @see #setMappingLocations\n+\t * @see org.hibernate.cfg.Configuration#addResource\n+\t */\n+\tpublic void setMappingResources(String[] mappingResources) {\n+\t\tthis.mappingResources = mappingResources;\n+\t}\n+\n+\t/**\n+\t * Set locations of Hibernate mapping files, for example as classpath\n+\t * resource \"classpath:example.hbm.xml\". Supports any resource location\n+\t * via Spring's resource abstraction, for example relative paths like\n+\t * \"WEB-INF/mappings/example.hbm.xml\" when running in an application context.\n+\t * <p>Can be used to add to mappings from a Hibernate XML config file,\n+\t * or to specify all mappings locally.\n+\t * @see org.hibernate.cfg.Configuration#addInputStream\n+\t */\n+\tpublic void setMappingLocations(Resource[] mappingLocations) {\n+\t\tthis.mappingLocations = mappingLocations;\n+\t}\n+\n+\t/**\n+\t * Set locations of cacheable Hibernate mapping files, for example as web app\n+\t * resource \"/WEB-INF/mapping/example.hbm.xml\". Supports any resource location\n+\t * via Spring's resource abstraction, as long as the resource can be resolved\n+\t * in the file system.\n+\t * <p>Can be used to add to mappings from a Hibernate XML config file,\n+\t * or to specify all mappings locally.\n+\t * @see org.hibernate.cfg.Configuration#addCacheableFile(java.io.File)\n+\t */\n+\tpublic void setCacheableMappingLocations(Resource[] cacheableMappingLocations) {\n+\t\tthis.cacheableMappingLocations = cacheableMappingLocations;\n+\t}\n+\n+\t/**\n+\t * Set locations of jar files that contain Hibernate mapping resources,\n+\t * like \"WEB-INF/lib/example.hbm.jar\".\n+\t * <p>Can be used to add to mappings from a Hibernate XML config file,\n+\t * or to specify all mappings locally.\n+\t * @see org.hibernate.cfg.Configuration#addJar(java.io.File)\n+\t */\n+\tpublic void setMappingJarLocations(Resource[] mappingJarLocations) {\n+\t\tthis.mappingJarLocations = mappingJarLocations;\n+\t}\n+\n+\t/**\n+\t * Set locations of directories that contain Hibernate mapping resources,\n+\t * like \"WEB-INF/mappings\".\n+\t * <p>Can be used to add to mappings from a Hibernate XML config file,\n+\t * or to specify all mappings locally.\n+\t * @see org.hibernate.cfg.Configuration#addDirectory(java.io.File)\n+\t */\n+\tpublic void setMappingDirectoryLocations(Resource[] mappingDirectoryLocations) {\n+\t\tthis.mappingDirectoryLocations = mappingDirectoryLocations;\n+\t}\n+\n+\t/**\n+\t * Set a Hibernate entity interceptor that allows to inspect and change\n+\t * property values before writing to and reading from the database.\n+\t * Will get applied to any new Session created by this factory.\n+\t * @see org.hibernate.cfg.Configuration#setInterceptor\n+\t */\n+\tpublic void setEntityInterceptor(Interceptor entityInterceptor) {\n+\t\tthis.entityInterceptor = entityInterceptor;\n+\t}\n+\n+\t/**\n+\t * Set a Hibernate NamingStrategy for the SessionFactory, determining the\n+\t * physical column and table names given the info in the mapping document.\n+\t * @see org.hibernate.cfg.Configuration#setNamingStrategy\n+\t */\n+\tpublic void setNamingStrategy(NamingStrategy namingStrategy) {\n+\t\tthis.namingStrategy = namingStrategy;\n+\t}\n+\n+\t/**\n+\t * Set Hibernate properties, such as \"hibernate.dialect\".\n+\t * <p>Note: Do not specify a transaction provider here when using\n+\t * Spring-driven transactions. It is also advisable to omit connection\n+\t * provider settings and use a Spring-set DataSource instead.\n+\t * @see #setDataSource\n+\t */\n+\tpublic void setHibernateProperties(Properties hibernateProperties) {\n+\t\tthis.hibernateProperties = hibernateProperties;\n+\t}\n+\n+\t/**\n+\t * Return the Hibernate properties, if any. Mainly available for\n+\t * configuration through property paths that specify individual keys.\n+\t */\n+\tpublic Properties getHibernateProperties() {\n+\t\tif (this.hibernateProperties == null) {\n+\t\t\tthis.hibernateProperties = new Properties();\n+\t\t}\n+\t\treturn this.hibernateProperties;\n+\t}\n+\n+\t/**\n+\t * Specify annotated entity classes to register with this Hibernate SessionFactory.\n+\t * @see org.hibernate.cfg.Configuration#addAnnotatedClass(String)\n+\t */\n+\tpublic void setAnnotatedClasses(Class<?>[] annotatedClasses) {\n+\t\tthis.annotatedClasses = annotatedClasses;\n+\t}\n+\n+\t/**\n+\t * Specify the names of annotated packages, for which package-level\n+\t * annotation metadata will be read.\n+\t * @see org.hibernate.cfg.Configuration#addPackage(String)\n+\t */\n+\tpublic void setAnnotatedPackages(String[] annotatedPackages) {\n+\t\tthis.annotatedPackages = annotatedPackages;\n+\t}\n+\n+\t/**\n+\t * Specify packages to search for autodetection of your entity classes in the\n+\t * classpath. This is analogous to Spring's component-scan feature\n+\t * ({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).\n+\t */\n+\tpublic void setPackagesToScan(String... packagesToScan) {\n+\t\tthis.packagesToScan = packagesToScan;\n+\t}\n+\n+\tpublic void setResourceLoader(ResourceLoader resourceLoader) {\n+\t\tthis.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader);\n+\t}\n+\n+\n+\tpublic void afterPropertiesSet() throws IOException {\n+\t\tLocalSessionFactoryBuilder sfb = new LocalSessionFactoryBuilder(this.dataSource, this.resourcePatternResolver);\n+\n+\t\tif (this.configLocations != null) {\n+\t\t\tfor (Resource resource : this.configLocations) {\n+\t\t\t\t// Load Hibernate configuration from given location.\n+\t\t\t\tsfb.configure(resource.getURL());\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (this.mappingResources != null) {\n+\t\t\t// Register given Hibernate mapping definitions, contained in resource files.\n+\t\t\tfor (String mapping : this.mappingResources) {\n+\t\t\t\tResource mr = new ClassPathResource(mapping.trim(), this.resourcePatternResolver.getClassLoader());\n+\t\t\t\tsfb.addInputStream(mr.getInputStream());\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (this.mappingLocations != null) {\n+\t\t\t// Register given Hibernate mapping definitions, contained in resource files.\n+\t\t\tfor (Resource resource : this.mappingLocations) {\n+\t\t\t\tsfb.addInputStream(resource.getInputStream());\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (this.cacheableMappingLocations != null) {\n+\t\t\t// Register given cacheable Hibernate mapping definitions, read from the file system.\n+\t\t\tfor (Resource resource : this.cacheableMappingLocations) {\n+\t\t\t\tsfb.addCacheableFile(resource.getFile());\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (this.mappingJarLocations != null) {\n+\t\t\t// Register given Hibernate mapping definitions, contained in jar files.\n+\t\t\tfor (Resource resource : this.mappingJarLocations) {\n+\t\t\t\tsfb.addJar(resource.getFile());\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (this.mappingDirectoryLocations != null) {\n+\t\t\t// Register all Hibernate mapping definitions in the given directories.\n+\t\t\tfor (Resource resource : this.mappingDirectoryLocations) {\n+\t\t\t\tFile file = resource.getFile();\n+\t\t\t\tif (!file.isDirectory()) {\n+\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\"Mapping directory location [\" + resource + \"] does not denote a directory\");\n+\t\t\t\t}\n+\t\t\t\tsfb.addDirectory(file);\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (this.entityInterceptor != null) {\n+\t\t\tsfb.setInterceptor(this.entityInterceptor);\n+\t\t}\n+\n+\t\tif (this.namingStrategy != null) {\n+\t\t\tsfb.setNamingStrategy(this.namingStrategy);\n+\t\t}\n+\n+\t\tif (this.hibernateProperties != null) {\n+\t\t\tsfb.addProperties(this.hibernateProperties);\n+\t\t}\n+\n+\t\tif (this.annotatedClasses != null) {\n+\t\t\tsfb.addAnnotatedClasses(this.annotatedClasses);\n+\t\t}\n+\n+\t\tif (this.annotatedPackages != null) {\n+\t\t\tsfb.addPackages(this.annotatedPackages);\n+\t\t}\n+\n+\t\tif (this.packagesToScan != null) {\n+\t\t\tsfb.scanPackages(this.packagesToScan);\n+\t\t}\n+\n+\t\tthis.sessionFactory = sfb.buildSessionFactory();\n+\t}\n+\n+\n+\tpublic SessionFactory getObject() {\n+\t\treturn this.sessionFactory;\n+\t}\n+\n+\tpublic Class<?> getObjectType() {\n+\t\treturn (this.sessionFactory != null ? this.sessionFactory.getClass() : SessionFactory.class);\n+\t}\n+\n+\tpublic boolean isSingleton() {\n+\t\treturn true;\n+\t}\n+\n+\n+\tpublic void destroy() {\n+\t\tthis.sessionFactory.close();\n+\t}\n+\n+}",
      "parent_sha": "9506f8d883d4d2543784e459663e041c2afd2dfa"
    }
  },
  {
    "oid": "3d1a709a5e1b0ddb7f2b0d94e0944acc5ccb870c",
    "message": "fixed buildExceptionMessage to avoid potential NPE (SPR-5275)",
    "date": "2008-11-20T22:18:21Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/3d1a709a5e1b0ddb7f2b0d94e0944acc5ccb870c",
    "details": {
      "sha": "09cfd184def25832e27dfe645b2584b0dfffcd99",
      "filename": "org.springframework.jms/src/main/java/org/springframework/jms/support/JmsUtils.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/3d1a709a5e1b0ddb7f2b0d94e0944acc5ccb870c/org.springframework.jms%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fjms%2Fsupport%2FJmsUtils.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/3d1a709a5e1b0ddb7f2b0d94e0944acc5ccb870c/org.springframework.jms%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fjms%2Fsupport%2FJmsUtils.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.jms%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fjms%2Fsupport%2FJmsUtils.java?ref=3d1a709a5e1b0ddb7f2b0d94e0944acc5ccb870c",
      "patch": "@@ -252,8 +252,13 @@ public static void rollbackIfNecessary(Session session) throws JMSException {\n \tpublic static String buildExceptionMessage(JMSException ex) {\n \t\tString message = ex.getMessage();\n \t\tException linkedEx = ex.getLinkedException();\n-\t\tif (linkedEx != null && message.indexOf(linkedEx.getMessage()) == -1) {\n-\t\t\tmessage = message + \"; nested exception is \" + linkedEx;\n+\t\tif (linkedEx != null) {\n+\t\t\tif (message == null) {\n+\t\t\t\tmessage = linkedEx.toString();\n+\t\t\t}\n+\t\t\telse if (!message.contains(linkedEx.getMessage())) {\n+\t\t\t\tmessage = message + \"; nested exception is \" + linkedEx;\n+\t\t\t}\n \t\t}\n \t\treturn message;\n \t}",
      "parent_sha": "0038aaa6975567083281d6c376e010ccb37aa870"
    }
  },
  {
    "oid": "37ab8a700bd790ed9428a0c707ded7766f674772",
    "message": "Doc: no \"useCodeAsDefaultMessage\" for setValidationMessageSource\n\nIssue: SPR-15986",
    "date": "2018-01-26T09:35:37Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/37ab8a700bd790ed9428a0c707ded7766f674772",
    "details": {
      "sha": "fbb2f2e606a0ea777c794858e0c9b2357ec667a7",
      "filename": "spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/37ab8a700bd790ed9428a0c707ded7766f674772/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fvalidation%2Fbeanvalidation%2FLocalValidatorFactoryBean.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/37ab8a700bd790ed9428a0c707ded7766f674772/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fvalidation%2Fbeanvalidation%2FLocalValidatorFactoryBean.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fvalidation%2Fbeanvalidation%2FLocalValidatorFactoryBean.java?ref=37ab8a700bd790ed9428a0c707ded7766f674772",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2017 the original author or authors.\n+ * Copyright 2002-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -157,6 +157,11 @@ public void setMessageInterpolator(MessageInterpolator messageInterpolator) {\n \t * not both. If you would like to build a custom MessageInterpolator, consider deriving from\n \t * Hibernate Validator's {@link ResourceBundleMessageInterpolator} and passing in a\n \t * Spring-based {@code ResourceBundleLocator} when constructing your interpolator.\n+\t * <p>In order for Hibernate's default validation messages to be resolved still, your\n+\t * {@link MessageSource} must be configured for optional resolution (usually the default).\n+\t * In particular, the {@code MessageSource} instance specified here should not apply\n+\t * {@link org.springframework.context.support.AbstractMessageSource#setUseCodeAsDefaultMessage\n+\t * \"useCodeAsDefaultMessage\"} behavior. Please double-check your setup accordingly.\n \t * @see ResourceBundleMessageInterpolator\n \t */\n \tpublic void setValidationMessageSource(MessageSource messageSource) {",
      "parent_sha": "e49198d49fa235186f10817dd93bbee53950ddb4"
    }
  },
  {
    "oid": "0f22e22ff36010d9b9b9281c439726dd9061bdda",
    "message": "Javadoc",
    "date": "2009-07-02T11:31:44Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/0f22e22ff36010d9b9b9281c439726dd9061bdda",
    "details": {
      "sha": "197ab4b608a8f66e0e270a8cd35a5e5985daf1ea",
      "filename": "org.springframework.web/src/main/java/org/springframework/http/converter/HttpMessageConverter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/0f22e22ff36010d9b9b9281c439726dd9061bdda/org.springframework.web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2FHttpMessageConverter.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/0f22e22ff36010d9b9b9281c439726dd9061bdda/org.springframework.web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2FHttpMessageConverter.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2FHttpMessageConverter.java?ref=0f22e22ff36010d9b9b9281c439726dd9061bdda",
      "patch": "@@ -24,7 +24,7 @@\n import org.springframework.http.MediaType;\n \n /**\n- * Strategy interface that specifies a converter can convert from and to HTTP requests and responses.\n+ * Strategy interface that specifies a converter that can convert from and to HTTP requests and responses.\n  *\n  * @author Arjen Poutsma\n  * @since 3.0",
      "parent_sha": "474ffaac63bad9d5942b7096cae6faf986f7c5c1"
    }
  },
  {
    "oid": "ec7c3aa349f1f25cc98ad516d84d07c7ea525983",
    "message": "Correct RFC 4648 references in method-level javadoc\n\nIssue: SPR-14067",
    "date": "2016-03-18T14:30:33Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/ec7c3aa349f1f25cc98ad516d84d07c7ea525983",
    "details": {
      "sha": "17c48614b83d9c700810e2c385c4fd5dcbc68ff1",
      "filename": "spring-core/src/main/java/org/springframework/util/Base64Utils.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/ec7c3aa349f1f25cc98ad516d84d07c7ea525983/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Futil%2FBase64Utils.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/ec7c3aa349f1f25cc98ad516d84d07c7ea525983/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Futil%2FBase64Utils.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Futil%2FBase64Utils.java?ref=ec7c3aa349f1f25cc98ad516d84d07c7ea525983",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -99,7 +99,7 @@ public static byte[] decode(byte[] src) {\n \t}\n \n \t/**\n-\t * Base64-encode the given byte array using the RFC 4868\n+\t * Base64-encode the given byte array using the RFC 4648\n \t * \"URL and Filename Safe Alphabet\".\n \t * @param src the original byte array (may be {@code null})\n \t * @return the encoded byte array (or {@code null} if the input was {@code null})\n@@ -113,7 +113,7 @@ public static byte[] encodeUrlSafe(byte[] src) {\n \t}\n \n \t/**\n-\t * Base64-decode the given byte array using the RFC 4868\n+\t * Base64-decode the given byte array using the RFC 4648\n \t * \"URL and Filename Safe Alphabet\".\n \t * @param src the encoded byte array (may be {@code null})\n \t * @return the original byte array (or {@code null} if the input was {@code null})\n@@ -174,7 +174,7 @@ public static byte[] decodeFromString(String src) {\n \t}\n \n \t/**\n-\t * Base64-encode the given byte array to a String using the RFC 4868\n+\t * Base64-encode the given byte array to a String using the RFC 4648\n \t * \"URL and Filename Safe Alphabet\".\n \t * @param src the original byte array (may be {@code null})\n \t * @return the encoded byte array as a UTF-8 String\n@@ -188,7 +188,7 @@ public static String encodeToUrlSafeString(byte[] src) {\n \t}\n \n \t/**\n-\t * Base64-decode the given byte array from an UTF-8 String using the RFC 4868\n+\t * Base64-decode the given byte array from an UTF-8 String using the RFC 4648\n \t * \"URL and Filename Safe Alphabet\".\n \t * @param src the encoded UTF-8 String (may be {@code null})\n \t * @return the original byte array (or {@code null} if the input was {@code null})",
      "parent_sha": "a95bf6e0fc5206c662e81811d3bb964c9003aad0"
    }
  },
  {
    "oid": "af3c3ef15c5e79be78ae2cf3087658c408157a07",
    "message": "Only call EhCacheManagerFactoryBean's destroy() method when actually initialized",
    "date": "2013-03-20T09:05:56Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/af3c3ef15c5e79be78ae2cf3087658c408157a07",
    "details": {
      "sha": "09a42c9e1fb609a617b62a20b5b4de8702b6b04c",
      "filename": "spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/af3c3ef15c5e79be78ae2cf3087658c408157a07/spring-context-support%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcache%2Fehcache%2FEhCacheSupportTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/af3c3ef15c5e79be78ae2cf3087658c408157a07/spring-context-support%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcache%2Fehcache%2FEhCacheSupportTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-context-support%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fcache%2Fehcache%2FEhCacheSupportTests.java?ref=af3c3ef15c5e79be78ae2cf3087658c408157a07",
      "patch": "@@ -81,6 +81,7 @@ public void testEhCacheFactoryBeanWithExplicitCacheManager() throws Exception {\n \tprivate void doTestEhCacheFactoryBean(boolean useCacheManagerFb) throws Exception {\n \t\tCache cache;\n \t\tEhCacheManagerFactoryBean cacheManagerFb = null;\n+\t\tboolean cacheManagerFbInitialized = false;\n \t\ttry {\n \t\t\tEhCacheFactoryBean cacheFb = new EhCacheFactoryBean();\n \t\t\tClass<? extends Ehcache> objectType = cacheFb.getObjectType();\n@@ -90,6 +91,7 @@ private void doTestEhCacheFactoryBean(boolean useCacheManagerFb) throws Exceptio\n \t\t\t\tcacheManagerFb = new EhCacheManagerFactoryBean();\n \t\t\t\tcacheManagerFb.setConfigLocation(new ClassPathResource(\"testEhcache.xml\", getClass()));\n \t\t\t\tcacheManagerFb.afterPropertiesSet();\n+\t\t\t\tcacheManagerFbInitialized = true;\n \t\t\t\tcacheFb.setCacheManager(cacheManagerFb.getObject());\n \t\t\t}\n \n@@ -144,7 +146,7 @@ private void doTestEhCacheFactoryBean(boolean useCacheManagerFb) throws Exceptio\n \t\t\tassertTrue(\"overridden diskExpiryThreadIntervalSeconds is correct\", config.getDiskExpiryThreadIntervalSeconds() == 10);\n \t\t}\n \t\tfinally {\n-\t\t\tif (useCacheManagerFb && cacheManagerFb != null) {\n+\t\t\tif (cacheManagerFbInitialized) {\n \t\t\t\tcacheManagerFb.destroy();\n \t\t\t}\n \t\t\telse {",
      "parent_sha": "5472e975f63df78d5cbb06dd5240552e60c968e5"
    }
  },
  {
    "oid": "cf147a82ef0c5592041ddfdde3d1340fd47e89aa",
    "message": "Fix issue with incorrect class import\n\nIssue: SPR-9112",
    "date": "2012-07-10T00:34:05Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/cf147a82ef0c5592041ddfdde3d1340fd47e89aa",
    "details": {
      "sha": "741a48b53ad23e9a443b791257390d50215e1999",
      "filename": "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/cf147a82ef0c5592041ddfdde3d1340fd47e89aa/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fmvc%2Fmethod%2Fannotation%2FExceptionHandlerExceptionResolver.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/cf147a82ef0c5592041ddfdde3d1340fd47e89aa/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fmvc%2Fmethod%2Fannotation%2FExceptionHandlerExceptionResolver.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webmvc%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Fservlet%2Fmvc%2Fmethod%2Fannotation%2FExceptionHandlerExceptionResolver.java?ref=cf147a82ef0c5592041ddfdde3d1340fd47e89aa",
      "patch": "@@ -18,6 +18,7 @@\n \n import java.lang.reflect.Method;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n@@ -58,8 +59,6 @@\n import org.springframework.web.servlet.View;\n import org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver;\n \n-import edu.emory.mathcs.backport.java.util.Collections;\n-\n /**\n  * An {@link AbstractHandlerMethodExceptionResolver} that resolves exceptions\n  * through {@code @ExceptionHandler} methods.",
      "parent_sha": "c846198e4697f2ac5d79f0f4f62d25fa7d62fa26"
    }
  },
  {
    "oid": "5d6e143ff4ec3e10a4b8755cfa971b382fcaaddb",
    "message": "Remove invalid configuration in RequestMappingViewResolutionIntegrationTests\n\nPrior to this commit, RequestMappingViewResolutionIntegrationTests\ninvoked the following:\n\nconfigurer.setTemplateLoaderPath(\n\t\"classpath*:org/springframework/web/reactive/view/freemarker/\");\n\nHowever, that configuration is invalid since `classpath*:` is not\nsupported for a `templateLoaderPath`.\n\nDespite that, the tests still passed since FreeMarkerConfigurer already\nregisters a new ClassTemplateLoader(FreeMarkerConfigurer.class, \"\"),\nwhich automatically finds template files in the same package as\nFreeMarkerConfigurer (for the \"spring.ftl\" macro library support) and\ncoincidentally RequestMappingViewResolutionIntegrationTests as well\n(which resides in the same package).\n\nThis commit therefore removes the invalid configuration and adds a\ncomment to explain what's going on.",
    "date": "2024-06-25T14:56:21Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/5d6e143ff4ec3e10a4b8755cfa971b382fcaaddb",
    "details": {
      "sha": "266e492c6cbe5b3a0d748904f5d9c1491a51c966",
      "filename": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingViewResolutionIntegrationTests.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/5d6e143ff4ec3e10a4b8755cfa971b382fcaaddb/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fresult%2Fmethod%2Fannotation%2FRequestMappingViewResolutionIntegrationTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/5d6e143ff4ec3e10a4b8755cfa971b382fcaaddb/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fresult%2Fmethod%2Fannotation%2FRequestMappingViewResolutionIntegrationTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Fresult%2Fmethod%2Fannotation%2FRequestMappingViewResolutionIntegrationTests.java?ref=5d6e143ff4ec3e10a4b8755cfa971b382fcaaddb",
      "patch": "@@ -111,10 +111,11 @@ public void configureViewResolvers(ViewResolverRegistry registry) {\n \n \t\t@Bean\n \t\tpublic FreeMarkerConfigurer freeMarkerConfig() {\n-\t\t\tFreeMarkerConfigurer configurer = new FreeMarkerConfigurer();\n-\t\t\tconfigurer.setPreferFileSystemAccess(false);\n-\t\t\tconfigurer.setTemplateLoaderPath(\"classpath*:org/springframework/web/reactive/view/freemarker/\");\n-\t\t\treturn configurer;\n+\t\t\t// No need to configure a custom template loader path via setTemplateLoaderPath(),\n+\t\t\t// since FreeMarkerConfigurer already registers a\n+\t\t\t// new ClassTemplateLoader(FreeMarkerConfigurer.class, \"\"), which automatically\n+\t\t\t// finds template files in the same package as this test class.\n+\t\t\treturn new FreeMarkerConfigurer();\n \t\t}\n \t}\n ",
      "parent_sha": "4e2fb308f6516cc8e2617ecef195dccdbb680ed9"
    }
  },
  {
    "oid": "7aa956a92029835f4306f3707ad36dcc90fa747b",
    "message": "Polish",
    "date": "2017-09-18T12:06:31Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/7aa956a92029835f4306f3707ad36dcc90fa747b",
    "details": {
      "sha": "4eed03e395c74cf54ff6fb6d10cfc19b523ba346",
      "filename": "spring-jms/src/test/java/org/springframework/jms/core/JmsMessagingTemplateTests.java",
      "status": "modified",
      "additions": 163,
      "deletions": 168,
      "changes": 331,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/7aa956a92029835f4306f3707ad36dcc90fa747b/spring-jms%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fjms%2Fcore%2FJmsMessagingTemplateTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/7aa956a92029835f4306f3707ad36dcc90fa747b/spring-jms%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fjms%2Fcore%2FJmsMessagingTemplateTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-jms%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fjms%2Fcore%2FJmsMessagingTemplateTests.java?ref=7aa956a92029835f4306f3707ad36dcc90fa747b",
      "patch": "@@ -54,6 +54,8 @@\n import static org.mockito.BDDMockito.*;\n \n /**\n+ * Tests for {@link JmsMessagingTemplate}.\n+ * \n  * @author Stephane Nicoll\n  */\n public class JmsMessagingTemplateTests {\n@@ -73,136 +75,136 @@ public class JmsMessagingTemplateTests {\n \t@Before\n \tpublic void setup() {\n \t\tMockitoAnnotations.initMocks(this);\n-\t\tmessagingTemplate = new JmsMessagingTemplate(jmsTemplate);\n+\t\tthis.messagingTemplate = new JmsMessagingTemplate(this.jmsTemplate);\n \t}\n \n \t@Test\n \tpublic void validateJmsTemplate() {\n-\t\tassertSame(this.jmsTemplate, messagingTemplate.getJmsTemplate());\n+\t\tassertSame(this.jmsTemplate, this.messagingTemplate.getJmsTemplate());\n \t}\n \n \t@Test\n \tpublic void send() {\n \t\tDestination destination = new Destination() {};\n \t\tMessage<String> message = createTextMessage();\n \n-\t\tmessagingTemplate.send(destination, message);\n-\t\tverify(jmsTemplate).send(eq(destination), messageCreator.capture());\n-\t\tassertTextMessage(messageCreator.getValue());\n+\t\tthis.messagingTemplate.send(destination, message);\n+\t\tverify(this.jmsTemplate).send(eq(destination), this.messageCreator.capture());\n+\t\tassertTextMessage(this.messageCreator.getValue());\n \t}\n \n \t@Test\n \tpublic void sendName() {\n \t\tMessage<String> message = createTextMessage();\n \n-\t\tmessagingTemplate.send(\"myQueue\", message);\n-\t\tverify(jmsTemplate).send(eq(\"myQueue\"), messageCreator.capture());\n-\t\tassertTextMessage(messageCreator.getValue());\n+\t\tthis.messagingTemplate.send(\"myQueue\", message);\n+\t\tverify(this.jmsTemplate).send(eq(\"myQueue\"), this.messageCreator.capture());\n+\t\tassertTextMessage(this.messageCreator.getValue());\n \t}\n \n \t@Test\n \tpublic void sendDefaultDestination() {\n \t\tDestination destination = new Destination() {};\n-\t\tmessagingTemplate.setDefaultDestination(destination);\n+\t\tthis.messagingTemplate.setDefaultDestination(destination);\n \t\tMessage<String> message = createTextMessage();\n \n-\t\tmessagingTemplate.send(message);\n-\t\tverify(jmsTemplate).send(eq(destination), messageCreator.capture());\n-\t\tassertTextMessage(messageCreator.getValue());\n+\t\tthis.messagingTemplate.send(message);\n+\t\tverify(this.jmsTemplate).send(eq(destination), this.messageCreator.capture());\n+\t\tassertTextMessage(this.messageCreator.getValue());\n \t}\n \n \t@Test\n \tpublic void sendDefaultDestinationName() {\n-\t\tmessagingTemplate.setDefaultDestinationName(\"myQueue\");\n+\t\tthis.messagingTemplate.setDefaultDestinationName(\"myQueue\");\n \t\tMessage<String> message = createTextMessage();\n \n-\t\tmessagingTemplate.send(message);\n-\t\tverify(jmsTemplate).send(eq(\"myQueue\"), messageCreator.capture());\n-\t\tassertTextMessage(messageCreator.getValue());\n+\t\tthis.messagingTemplate.send(message);\n+\t\tverify(this.jmsTemplate).send(eq(\"myQueue\"), this.messageCreator.capture());\n+\t\tassertTextMessage(this.messageCreator.getValue());\n \t}\n \n \t@Test\n \tpublic void sendNoDefaultSet() {\n \t\tMessage<String> message = createTextMessage();\n \n-\t\tthrown.expect(IllegalStateException.class);\n-\t\tmessagingTemplate.send(message);\n+\t\tthis.thrown.expect(IllegalStateException.class);\n+\t\tthis.messagingTemplate.send(message);\n \t}\n \n \t@Test\n \tpublic void sendPropertyInjection() {\n \t\tJmsMessagingTemplate t = new JmsMessagingTemplate();\n-\t\tt.setJmsTemplate(jmsTemplate);\n+\t\tt.setJmsTemplate(this.jmsTemplate);\n \t\tt.setDefaultDestinationName(\"myQueue\");\n \t\tt.afterPropertiesSet();\n \t\tMessage<String> message = createTextMessage();\n \n \t\tt.send(message);\n-\t\tverify(jmsTemplate).send(eq(\"myQueue\"), messageCreator.capture());\n-\t\tassertTextMessage(messageCreator.getValue());\n+\t\tverify(this.jmsTemplate).send(eq(\"myQueue\"), this.messageCreator.capture());\n+\t\tassertTextMessage(this.messageCreator.getValue());\n \t}\n \n \t@Test\n \tpublic void convertAndSendPayload() throws JMSException {\n \t\tDestination destination = new Destination() {};\n \n-\t\tmessagingTemplate.convertAndSend(destination, \"my Payload\");\n-\t\tverify(jmsTemplate).send(eq(destination), messageCreator.capture());\n-\t\tTextMessage textMessage = createTextMessage(messageCreator.getValue());\n+\t\tthis.messagingTemplate.convertAndSend(destination, \"my Payload\");\n+\t\tverify(this.jmsTemplate).send(eq(destination), this.messageCreator.capture());\n+\t\tTextMessage textMessage = createTextMessage(this.messageCreator.getValue());\n \t\tassertEquals(\"my Payload\", textMessage.getText());\n \t}\n \n \t@Test\n \tpublic void convertAndSendPayloadName() throws JMSException {\n-\t\tmessagingTemplate.convertAndSend(\"myQueue\", \"my Payload\");\n-\t\tverify(jmsTemplate).send(eq(\"myQueue\"), messageCreator.capture());\n-\t\tTextMessage textMessage = createTextMessage(messageCreator.getValue());\n+\t\tthis.messagingTemplate.convertAndSend(\"myQueue\", \"my Payload\");\n+\t\tverify(this.jmsTemplate).send(eq(\"myQueue\"), this.messageCreator.capture());\n+\t\tTextMessage textMessage = createTextMessage(this.messageCreator.getValue());\n \t\tassertEquals(\"my Payload\", textMessage.getText());\n \t}\n \n \t@Test\n \tpublic void convertAndSendDefaultDestination() throws JMSException {\n \t\tDestination destination = new Destination() {};\n-\t\tmessagingTemplate.setDefaultDestination(destination);\n+\t\tthis.messagingTemplate.setDefaultDestination(destination);\n \n-\t\tmessagingTemplate.convertAndSend(\"my Payload\");\n-\t\tverify(jmsTemplate).send(eq(destination), messageCreator.capture());\n-\t\tTextMessage textMessage = createTextMessage(messageCreator.getValue());\n+\t\tthis.messagingTemplate.convertAndSend(\"my Payload\");\n+\t\tverify(this.jmsTemplate).send(eq(destination), this.messageCreator.capture());\n+\t\tTextMessage textMessage = createTextMessage(this.messageCreator.getValue());\n \t\tassertEquals(\"my Payload\", textMessage.getText());\n \t}\n \n \t@Test\n \tpublic void convertAndSendDefaultDestinationName() throws JMSException {\n-\t\tmessagingTemplate.setDefaultDestinationName(\"myQueue\");\n+\t\tthis.messagingTemplate.setDefaultDestinationName(\"myQueue\");\n \n-\t\tmessagingTemplate.convertAndSend(\"my Payload\");\n-\t\tverify(jmsTemplate).send(eq(\"myQueue\"), messageCreator.capture());\n-\t\tTextMessage textMessage = createTextMessage(messageCreator.getValue());\n+\t\tthis.messagingTemplate.convertAndSend(\"my Payload\");\n+\t\tverify(this.jmsTemplate).send(eq(\"myQueue\"), this.messageCreator.capture());\n+\t\tTextMessage textMessage = createTextMessage(this.messageCreator.getValue());\n \t\tassertEquals(\"my Payload\", textMessage.getText());\n \t}\n \n \t@Test\n \tpublic void convertAndSendNoDefaultSet() throws JMSException {\n-\t\tthrown.expect(IllegalStateException.class);\n-\t\tmessagingTemplate.convertAndSend(\"my Payload\");\n+\t\tthis.thrown.expect(IllegalStateException.class);\n+\t\tthis.messagingTemplate.convertAndSend(\"my Payload\");\n \t}\n \n \t@Test\n \tpublic void convertAndSendCustomJmsMessageConverter() throws JMSException {\n-\t\tmessagingTemplate.setJmsMessageConverter(new SimpleMessageConverter() {\n+\t\tthis.messagingTemplate.setJmsMessageConverter(new SimpleMessageConverter() {\n \t\t\t@Override\n \t\t\tpublic javax.jms.Message toMessage(Object object, Session session)\n \t\t\t\t\tthrows JMSException, org.springframework.jms.support.converter.MessageConversionException {\n \t\t\t\tthrow new org.springframework.jms.support.converter.MessageConversionException(\"Test exception\");\n \t\t\t}\n \t\t});\n \n-\t\tmessagingTemplate.convertAndSend(\"myQueue\", \"msg to convert\");\n-\t\tverify(jmsTemplate).send(eq(\"myQueue\"), messageCreator.capture());\n+\t\tthis.messagingTemplate.convertAndSend(\"myQueue\", \"msg to convert\");\n+\t\tverify(this.jmsTemplate).send(eq(\"myQueue\"), this.messageCreator.capture());\n \n-\t\tthrown.expect(org.springframework.messaging.converter.MessageConversionException.class);\n-\t\tthrown.expectMessage(new StringContains(\"Test exception\"));\n-\t\tmessageCreator.getValue().createMessage(mock(Session.class));\n+\t\tthis.thrown.expect(org.springframework.messaging.converter.MessageConversionException.class);\n+\t\tthis.thrown.expectMessage(new StringContains(\"Test exception\"));\n+\t\tthis.messageCreator.getValue().createMessage(mock(Session.class));\n \t}\n \n \t@Test\n@@ -211,247 +213,247 @@ public void convertAndSendPayloadAndHeaders() throws JMSException {\n \t\tMap<String, Object> headers = new HashMap<>();\n \t\theaders.put(\"foo\", \"bar\");\n \n-\t\tmessagingTemplate.convertAndSend(destination, \"Hello\", headers);\n-\t\tverify(jmsTemplate).send(eq(destination), messageCreator.capture());\n-\t\tassertTextMessage(messageCreator.getValue()); // see createTextMessage\n+\t\tthis.messagingTemplate.convertAndSend(destination, \"Hello\", headers);\n+\t\tverify(this.jmsTemplate).send(eq(destination), this.messageCreator.capture());\n+\t\tassertTextMessage(this.messageCreator.getValue()); // see createTextMessage\n \t}\n \n \t@Test\n \tpublic void convertAndSendPayloadAndHeadersName() throws JMSException {\n \t\tMap<String, Object> headers = new HashMap<>();\n \t\theaders.put(\"foo\", \"bar\");\n \n-\t\tmessagingTemplate.convertAndSend(\"myQueue\", \"Hello\", headers);\n-\t\tverify(jmsTemplate).send(eq(\"myQueue\"), messageCreator.capture());\n-\t\tassertTextMessage(messageCreator.getValue()); // see createTextMessage\n+\t\tthis.messagingTemplate.convertAndSend(\"myQueue\", \"Hello\", headers);\n+\t\tverify(this.jmsTemplate).send(eq(\"myQueue\"), this.messageCreator.capture());\n+\t\tassertTextMessage(this.messageCreator.getValue()); // see createTextMessage\n \t}\n \n \t@Test\n \tpublic void receive() {\n \t\tDestination destination = new Destination() {};\n \t\tjavax.jms.Message jmsMessage = createJmsTextMessage();\n-\t\tgiven(jmsTemplate.receive(destination)).willReturn(jmsMessage);\n+\t\tgiven(this.jmsTemplate.receive(destination)).willReturn(jmsMessage);\n \n-\t\tMessage<?> message = messagingTemplate.receive(destination);\n-\t\tverify(jmsTemplate).receive(destination);\n+\t\tMessage<?> message = this.messagingTemplate.receive(destination);\n+\t\tverify(this.jmsTemplate).receive(destination);\n \t\tassertTextMessage(message);\n \t}\n \n \t@Test\n \tpublic void receiveName() {\n \t\tjavax.jms.Message jmsMessage = createJmsTextMessage();\n-\t\tgiven(jmsTemplate.receive(\"myQueue\")).willReturn(jmsMessage);\n+\t\tgiven(this.jmsTemplate.receive(\"myQueue\")).willReturn(jmsMessage);\n \n-\t\tMessage<?> message = messagingTemplate.receive(\"myQueue\");\n-\t\tverify(jmsTemplate).receive(\"myQueue\");\n+\t\tMessage<?> message = this.messagingTemplate.receive(\"myQueue\");\n+\t\tverify(this.jmsTemplate).receive(\"myQueue\");\n \t\tassertTextMessage(message);\n \t}\n \n \t@Test\n \tpublic void receiveDefaultDestination() {\n \t\tDestination destination = new Destination() {};\n-\t\tmessagingTemplate.setDefaultDestination(destination);\n+\t\tthis.messagingTemplate.setDefaultDestination(destination);\n \t\tjavax.jms.Message jmsMessage = createJmsTextMessage();\n-\t\tgiven(jmsTemplate.receive(destination)).willReturn(jmsMessage);\n+\t\tgiven(this.jmsTemplate.receive(destination)).willReturn(jmsMessage);\n \n-\t\tMessage<?> message = messagingTemplate.receive();\n-\t\tverify(jmsTemplate).receive(destination);\n+\t\tMessage<?> message = this.messagingTemplate.receive();\n+\t\tverify(this.jmsTemplate).receive(destination);\n \t\tassertTextMessage(message);\n \t}\n \n \t@Test\n \tpublic void receiveDefaultDestinationName() {\n-\t\tmessagingTemplate.setDefaultDestinationName(\"myQueue\");\n+\t\tthis.messagingTemplate.setDefaultDestinationName(\"myQueue\");\n \t\tjavax.jms.Message jmsMessage = createJmsTextMessage();\n-\t\tgiven(jmsTemplate.receive(\"myQueue\")).willReturn(jmsMessage);\n+\t\tgiven(this.jmsTemplate.receive(\"myQueue\")).willReturn(jmsMessage);\n \n-\t\tMessage<?> message = messagingTemplate.receive();\n-\t\tverify(jmsTemplate).receive(\"myQueue\");\n+\t\tMessage<?> message = this.messagingTemplate.receive();\n+\t\tverify(this.jmsTemplate).receive(\"myQueue\");\n \t\tassertTextMessage(message);\n \t}\n \n \t@Test\n \tpublic void receiveNoDefaultSet() {\n-\t\tthrown.expect(IllegalStateException.class);\n-\t\tmessagingTemplate.receive();\n+\t\tthis.thrown.expect(IllegalStateException.class);\n+\t\tthis.messagingTemplate.receive();\n \t}\n \n \t@Test\n \tpublic void receiveAndConvert() {\n \t\tDestination destination = new Destination() {};\n \t\tjavax.jms.Message jmsMessage = createJmsTextMessage(\"my Payload\");\n-\t\tgiven(jmsTemplate.receive(destination)).willReturn(jmsMessage);\n+\t\tgiven(this.jmsTemplate.receive(destination)).willReturn(jmsMessage);\n \n-\t\tString payload = messagingTemplate.receiveAndConvert(destination, String.class);\n+\t\tString payload = this.messagingTemplate.receiveAndConvert(destination, String.class);\n \t\tassertEquals(\"my Payload\", payload);\n-\t\tverify(jmsTemplate).receive(destination);\n+\t\tverify(this.jmsTemplate).receive(destination);\n \t}\n \n \t@Test\n \tpublic void receiveAndConvertName() {\n \t\tjavax.jms.Message jmsMessage = createJmsTextMessage(\"my Payload\");\n-\t\tgiven(jmsTemplate.receive(\"myQueue\")).willReturn(jmsMessage);\n+\t\tgiven(this.jmsTemplate.receive(\"myQueue\")).willReturn(jmsMessage);\n \n-\t\tString payload = messagingTemplate.receiveAndConvert(\"myQueue\", String.class);\n+\t\tString payload = this.messagingTemplate.receiveAndConvert(\"myQueue\", String.class);\n \t\tassertEquals(\"my Payload\", payload);\n-\t\tverify(jmsTemplate).receive(\"myQueue\");\n+\t\tverify(this.jmsTemplate).receive(\"myQueue\");\n \t}\n \n \t@Test\n \tpublic void receiveAndConvertDefaultDestination() {\n \t\tDestination destination = new Destination() {};\n-\t\tmessagingTemplate.setDefaultDestination(destination);\n+\t\tthis.messagingTemplate.setDefaultDestination(destination);\n \t\tjavax.jms.Message jmsMessage = createJmsTextMessage(\"my Payload\");\n-\t\tgiven(jmsTemplate.receive(destination)).willReturn(jmsMessage);\n+\t\tgiven(this.jmsTemplate.receive(destination)).willReturn(jmsMessage);\n \n-\t\tString payload = messagingTemplate.receiveAndConvert(String.class);\n+\t\tString payload = this.messagingTemplate.receiveAndConvert(String.class);\n \t\tassertEquals(\"my Payload\", payload);\n-\t\tverify(jmsTemplate).receive(destination);\n+\t\tverify(this.jmsTemplate).receive(destination);\n \t}\n \n \t@Test\n \tpublic void receiveAndConvertDefaultDestinationName() {\n-\t\tmessagingTemplate.setDefaultDestinationName(\"myQueue\");\n+\t\tthis.messagingTemplate.setDefaultDestinationName(\"myQueue\");\n \t\tjavax.jms.Message jmsMessage = createJmsTextMessage(\"my Payload\");\n-\t\tgiven(jmsTemplate.receive(\"myQueue\")).willReturn(jmsMessage);\n+\t\tgiven(this.jmsTemplate.receive(\"myQueue\")).willReturn(jmsMessage);\n \n-\t\tString payload = messagingTemplate.receiveAndConvert(String.class);\n+\t\tString payload = this.messagingTemplate.receiveAndConvert(String.class);\n \t\tassertEquals(\"my Payload\", payload);\n-\t\tverify(jmsTemplate).receive(\"myQueue\");\n+\t\tverify(this.jmsTemplate).receive(\"myQueue\");\n \t}\n \n \t@Test\n \tpublic void receiveAndConvertWithConversion() {\n \t\tjavax.jms.Message jmsMessage = createJmsTextMessage(\"123\");\n-\t\tgiven(jmsTemplate.receive(\"myQueue\")).willReturn(jmsMessage);\n+\t\tgiven(this.jmsTemplate.receive(\"myQueue\")).willReturn(jmsMessage);\n \n-\t\tmessagingTemplate.setMessageConverter(new GenericMessageConverter());\n+\t\tthis.messagingTemplate.setMessageConverter(new GenericMessageConverter());\n \n-\t\tInteger payload = messagingTemplate.receiveAndConvert(\"myQueue\", Integer.class);\n+\t\tInteger payload = this.messagingTemplate.receiveAndConvert(\"myQueue\", Integer.class);\n \t\tassertEquals(Integer.valueOf(123), payload);\n-\t\tverify(jmsTemplate).receive(\"myQueue\");\n+\t\tverify(this.jmsTemplate).receive(\"myQueue\");\n \t}\n \n \t@Test\n \tpublic void receiveAndConvertNoConverter() {\n \t\tjavax.jms.Message jmsMessage = createJmsTextMessage(\"Hello\");\n-\t\tgiven(jmsTemplate.receive(\"myQueue\")).willReturn(jmsMessage);\n+\t\tgiven(this.jmsTemplate.receive(\"myQueue\")).willReturn(jmsMessage);\n \n-\t\tthrown.expect(org.springframework.messaging.converter.MessageConversionException.class);\n-\t\tmessagingTemplate.receiveAndConvert(\"myQueue\", Writer.class);\n+\t\tthis.thrown.expect(org.springframework.messaging.converter.MessageConversionException.class);\n+\t\tthis.messagingTemplate.receiveAndConvert(\"myQueue\", Writer.class);\n \t}\n \n \t@Test\n \tpublic void receiveAndConvertNoInput() {\n-\t\tgiven(jmsTemplate.receive(\"myQueue\")).willReturn(null);\n+\t\tgiven(this.jmsTemplate.receive(\"myQueue\")).willReturn(null);\n \n-\t\tassertNull(messagingTemplate.receiveAndConvert(\"myQueue\", String.class));\n+\t\tassertNull(this.messagingTemplate.receiveAndConvert(\"myQueue\", String.class));\n \t}\n \n \t@Test\n \tpublic void sendAndReceive() {\n \t\tDestination destination = new Destination() {};\n \t\tMessage<String> request = createTextMessage();\n \t\tjavax.jms.Message replyJmsMessage = createJmsTextMessage();\n-\t\tgiven(jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);\n+\t\tgiven(this.jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);\n \n-\t\tMessage<?> actual = messagingTemplate.sendAndReceive(destination, request);\n-\t\tverify(jmsTemplate, times(1)).sendAndReceive(eq(destination), any());\n+\t\tMessage<?> actual = this.messagingTemplate.sendAndReceive(destination, request);\n+\t\tverify(this.jmsTemplate, times(1)).sendAndReceive(eq(destination), any());\n \t\tassertTextMessage(actual);\n \t}\n \n \t@Test\n \tpublic void sendAndReceiveName() {\n \t\tMessage<String> request = createTextMessage();\n \t\tjavax.jms.Message replyJmsMessage = createJmsTextMessage();\n-\t\tgiven(jmsTemplate.sendAndReceive(eq(\"myQueue\"), any())).willReturn(replyJmsMessage);\n+\t\tgiven(this.jmsTemplate.sendAndReceive(eq(\"myQueue\"), any())).willReturn(replyJmsMessage);\n \n-\t\tMessage<?> actual = messagingTemplate.sendAndReceive(\"myQueue\", request);\n-\t\tverify(jmsTemplate, times(1)).sendAndReceive(eq(\"myQueue\"), any());\n+\t\tMessage<?> actual = this.messagingTemplate.sendAndReceive(\"myQueue\", request);\n+\t\tverify(this.jmsTemplate, times(1)).sendAndReceive(eq(\"myQueue\"), any());\n \t\tassertTextMessage(actual);\n \t}\n \n \t@Test\n \tpublic void sendAndReceiveDefaultDestination() {\n \t\tDestination destination = new Destination() {};\n-\t\tmessagingTemplate.setDefaultDestination(destination);\n+\t\tthis.messagingTemplate.setDefaultDestination(destination);\n \t\tMessage<String> request = createTextMessage();\n \t\tjavax.jms.Message replyJmsMessage = createJmsTextMessage();\n-\t\tgiven(jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);\n+\t\tgiven(this.jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);\n \n-\t\tMessage<?> actual = messagingTemplate.sendAndReceive(request);\n-\t\tverify(jmsTemplate, times(1)).sendAndReceive(eq(destination), any());\n+\t\tMessage<?> actual = this.messagingTemplate.sendAndReceive(request);\n+\t\tverify(this.jmsTemplate, times(1)).sendAndReceive(eq(destination), any());\n \t\tassertTextMessage(actual);\n \t}\n \n \t@Test\n \tpublic void sendAndReceiveDefaultDestinationName() {\n-\t\tmessagingTemplate.setDefaultDestinationName(\"myQueue\");\n+\t\tthis.messagingTemplate.setDefaultDestinationName(\"myQueue\");\n \t\tMessage<String> request = createTextMessage();\n \t\tjavax.jms.Message replyJmsMessage = createJmsTextMessage();\n-\t\tgiven(jmsTemplate.sendAndReceive(eq(\"myQueue\"), any())).willReturn(replyJmsMessage);\n+\t\tgiven(this.jmsTemplate.sendAndReceive(eq(\"myQueue\"), any())).willReturn(replyJmsMessage);\n \n-\t\tMessage<?> actual = messagingTemplate.sendAndReceive(request);\n-\t\tverify(jmsTemplate, times(1)).sendAndReceive(eq(\"myQueue\"), any());\n+\t\tMessage<?> actual = this.messagingTemplate.sendAndReceive(request);\n+\t\tverify(this.jmsTemplate, times(1)).sendAndReceive(eq(\"myQueue\"), any());\n \t\tassertTextMessage(actual);\n \t}\n \n \t@Test\n \tpublic void sendAndReceiveNoDefaultSet() {\n \t\tMessage<String> message = createTextMessage();\n \n-\t\tthrown.expect(IllegalStateException.class);\n-\t\tmessagingTemplate.sendAndReceive(message);\n+\t\tthis.thrown.expect(IllegalStateException.class);\n+\t\tthis.messagingTemplate.sendAndReceive(message);\n \t}\n \n \t@Test\n \tpublic void convertSendAndReceivePayload() throws JMSException {\n \t\tDestination destination = new Destination() {};\n \t\tjavax.jms.Message replyJmsMessage = createJmsTextMessage(\"My reply\");\n-\t\tgiven(jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);\n+\t\tgiven(this.jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);\n \n-\t\tString reply = messagingTemplate.convertSendAndReceive(destination, \"my Payload\", String.class);\n-\t\tverify(jmsTemplate, times(1)).sendAndReceive(eq(destination), any());\n+\t\tString reply = this.messagingTemplate.convertSendAndReceive(destination, \"my Payload\", String.class);\n+\t\tverify(this.jmsTemplate, times(1)).sendAndReceive(eq(destination), any());\n \t\tassertEquals(\"My reply\", reply);\n \t}\n \n \t@Test\n \tpublic void convertSendAndReceivePayloadName() throws JMSException {\n \t\tjavax.jms.Message replyJmsMessage = createJmsTextMessage(\"My reply\");\n-\t\tgiven(jmsTemplate.sendAndReceive(eq(\"myQueue\"), any())).willReturn(replyJmsMessage);\n+\t\tgiven(this.jmsTemplate.sendAndReceive(eq(\"myQueue\"), any())).willReturn(replyJmsMessage);\n \n-\t\tString reply = messagingTemplate.convertSendAndReceive(\"myQueue\", \"my Payload\", String.class);\n-\t\tverify(jmsTemplate, times(1)).sendAndReceive(eq(\"myQueue\"), any());\n+\t\tString reply = this.messagingTemplate.convertSendAndReceive(\"myQueue\", \"my Payload\", String.class);\n+\t\tverify(this.jmsTemplate, times(1)).sendAndReceive(eq(\"myQueue\"), any());\n \t\tassertEquals(\"My reply\", reply);\n \t}\n \n \t@Test\n \tpublic void convertSendAndReceiveDefaultDestination() throws JMSException {\n \t\tDestination destination = new Destination() {};\n-\t\tmessagingTemplate.setDefaultDestination(destination);\n+\t\tthis.messagingTemplate.setDefaultDestination(destination);\n \t\tjavax.jms.Message replyJmsMessage = createJmsTextMessage(\"My reply\");\n-\t\tgiven(jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);\n+\t\tgiven(this.jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage);\n \n-\t\tString reply = messagingTemplate.convertSendAndReceive(\"my Payload\", String.class);\n-\t\tverify(jmsTemplate, times(1)).sendAndReceive(eq(destination), any());\n+\t\tString reply = this.messagingTemplate.convertSendAndReceive(\"my Payload\", String.class);\n+\t\tverify(this.jmsTemplate, times(1)).sendAndReceive(eq(destination), any());\n \t\tassertEquals(\"My reply\", reply);\n \t}\n \n \t@Test\n \tpublic void convertSendAndReceiveDefaultDestinationName() throws JMSException {\n-\t\tmessagingTemplate.setDefaultDestinationName(\"myQueue\");\n+\t\tthis.messagingTemplate.setDefaultDestinationName(\"myQueue\");\n \t\tjavax.jms.Message replyJmsMessage = createJmsTextMessage(\"My reply\");\n-\t\tgiven(jmsTemplate.sendAndReceive(eq(\"myQueue\"), any())).willReturn(replyJmsMessage);\n+\t\tgiven(this.jmsTemplate.sendAndReceive(eq(\"myQueue\"), any())).willReturn(replyJmsMessage);\n \n-\t\tString reply = messagingTemplate.convertSendAndReceive(\"my Payload\", String.class);\n-\t\tverify(jmsTemplate, times(1)).sendAndReceive(eq(\"myQueue\"), any());\n+\t\tString reply = this.messagingTemplate.convertSendAndReceive(\"my Payload\", String.class);\n+\t\tverify(this.jmsTemplate, times(1)).sendAndReceive(eq(\"myQueue\"), any());\n \t\tassertEquals(\"My reply\", reply);\n \t}\n \n \t@Test\n \tpublic void convertSendAndReceiveNoDefaultSet() throws JMSException {\n-\t\tthrown.expect(IllegalStateException.class);\n-\t\tmessagingTemplate.convertSendAndReceive(\"my Payload\", String.class);\n+\t\tthis.thrown.expect(IllegalStateException.class);\n+\t\tthis.messagingTemplate.convertSendAndReceive(\"my Payload\", String.class);\n \t}\n \n \t@Test\n@@ -460,11 +462,11 @@ public void convertMessageConversionExceptionOnSend() throws JMSException {\n \t\tMessageConverter messageConverter = mock(MessageConverter.class);\n \t\twillThrow(org.springframework.jms.support.converter.MessageConversionException.class)\n \t\t\t\t.given(messageConverter).toMessage(eq(message), any());\n-\t\tmessagingTemplate.setJmsMessageConverter(messageConverter);\n-\t\tinvokeMessageCreator(\"myQueue\");\n+\t\tthis.messagingTemplate.setJmsMessageConverter(messageConverter);\n+\t\tinvokeMessageCreator();\n \n-\t\tthrown.expect(org.springframework.messaging.converter.MessageConversionException.class);\n-\t\tmessagingTemplate.send(\"myQueue\", message);\n+\t\tthis.thrown.expect(org.springframework.messaging.converter.MessageConversionException.class);\n+\t\tthis.messagingTemplate.send(\"myQueue\", message);\n \t}\n \n \t@Test\n@@ -473,89 +475,86 @@ public void convertMessageConversionExceptionOnReceive() throws JMSException {\n \t\tMessageConverter messageConverter = mock(MessageConverter.class);\n \t\twillThrow(org.springframework.jms.support.converter.MessageConversionException.class)\n \t\t\t\t.given(messageConverter).fromMessage(message);\n-\t\tmessagingTemplate.setJmsMessageConverter(messageConverter);\n-\t\tgiven(jmsTemplate.receive(\"myQueue\")).willReturn(message);\n+\t\tthis.messagingTemplate.setJmsMessageConverter(messageConverter);\n+\t\tgiven(this.jmsTemplate.receive(\"myQueue\")).willReturn(message);\n \n-\t\tthrown.expect(org.springframework.messaging.converter.MessageConversionException.class);\n-\t\tmessagingTemplate.receive(\"myQueue\");\n+\t\tthis.thrown.expect(org.springframework.messaging.converter.MessageConversionException.class);\n+\t\tthis.messagingTemplate.receive(\"myQueue\");\n \t}\n \n \t@Test\n \tpublic void convertMessageNotReadableException() throws JMSException {\n-\t\twillThrow(MessageNotReadableException.class).given(jmsTemplate).receive(\"myQueue\");\n+\t\twillThrow(MessageNotReadableException.class).given(this.jmsTemplate).receive(\"myQueue\");\n \n-\t\tthrown.expect(MessagingException.class);\n-\t\tmessagingTemplate.receive(\"myQueue\");\n+\t\tthis.thrown.expect(MessagingException.class);\n+\t\tthis.messagingTemplate.receive(\"myQueue\");\n \t}\n \n \t@Test\n \tpublic void convertDestinationResolutionExceptionOnSend() {\n \t\tDestination destination = new Destination() {};\n-\t\twillThrow(DestinationResolutionException.class).given(jmsTemplate).send(eq(destination), any());\n+\t\twillThrow(DestinationResolutionException.class).given(this.jmsTemplate).send(eq(destination), any());\n \n-\t\tthrown.expect(org.springframework.messaging.core.DestinationResolutionException.class);\n-\t\tmessagingTemplate.send(destination, createTextMessage());\n+\t\tthis.thrown.expect(org.springframework.messaging.core.DestinationResolutionException.class);\n+\t\tthis.messagingTemplate.send(destination, createTextMessage());\n \t}\n \n \t@Test\n \tpublic void convertDestinationResolutionExceptionOnReceive() {\n \t\tDestination destination = new Destination() {};\n-\t\twillThrow(DestinationResolutionException.class).given(jmsTemplate).receive(destination);\n+\t\twillThrow(DestinationResolutionException.class).given(this.jmsTemplate).receive(destination);\n \n-\t\tthrown.expect(org.springframework.messaging.core.DestinationResolutionException.class);\n-\t\tmessagingTemplate.receive(destination);\n+\t\tthis.thrown.expect(org.springframework.messaging.core.DestinationResolutionException.class);\n+\t\tthis.messagingTemplate.receive(destination);\n \t}\n \n \t@Test\n \tpublic void convertMessageFormatException() throws JMSException {\n \t\tMessage<String> message = createTextMessage();\n \t\tMessageConverter messageConverter = mock(MessageConverter.class);\n \t\twillThrow(MessageFormatException.class).given(messageConverter).toMessage(eq(message), any());\n-\t\tmessagingTemplate.setJmsMessageConverter(messageConverter);\n-\t\tinvokeMessageCreator(\"myQueue\");\n+\t\tthis.messagingTemplate.setJmsMessageConverter(messageConverter);\n+\t\tinvokeMessageCreator();\n \n-\t\tthrown.expect(org.springframework.messaging.converter.MessageConversionException.class);\n-\t\tmessagingTemplate.send(\"myQueue\", message);\n+\t\tthis.thrown.expect(org.springframework.messaging.converter.MessageConversionException.class);\n+\t\tthis.messagingTemplate.send(\"myQueue\", message);\n \t}\n \n \t@Test\n \tpublic void convertMessageNotWritableException() throws JMSException {\n \t\tMessage<String> message = createTextMessage();\n \t\tMessageConverter messageConverter = mock(MessageConverter.class);\n \t\twillThrow(MessageNotWriteableException.class).given(messageConverter).toMessage(eq(message), any());\n-\t\tmessagingTemplate.setJmsMessageConverter(messageConverter);\n-\t\tinvokeMessageCreator(\"myQueue\");\n+\t\tthis.messagingTemplate.setJmsMessageConverter(messageConverter);\n+\t\tinvokeMessageCreator();\n \n-\t\tthrown.expect(org.springframework.messaging.converter.MessageConversionException.class);\n-\t\tmessagingTemplate.send(\"myQueue\", message);\n+\t\tthis.thrown.expect(org.springframework.messaging.converter.MessageConversionException.class);\n+\t\tthis.messagingTemplate.send(\"myQueue\", message);\n \t}\n \n \t@Test\n \tpublic void convertInvalidDestinationExceptionOnSendAndReceiveWithName() {\n-\t\twillThrow(InvalidDestinationException.class).given(jmsTemplate).sendAndReceive(eq(\"unknownQueue\"), any());\n+\t\twillThrow(InvalidDestinationException.class).given(this.jmsTemplate).sendAndReceive(eq(\"unknownQueue\"), any());\n \n-\t\tthrown.expect(org.springframework.messaging.core.DestinationResolutionException.class);\n-\t\tmessagingTemplate.sendAndReceive(\"unknownQueue\", createTextMessage());\n+\t\tthis.thrown.expect(org.springframework.messaging.core.DestinationResolutionException.class);\n+\t\tthis.messagingTemplate.sendAndReceive(\"unknownQueue\", createTextMessage());\n \t}\n \n \t@Test\n \tpublic void convertInvalidDestinationExceptionOnSendAndReceive() {\n \t\tDestination destination = new Destination() {};\n-\t\twillThrow(InvalidDestinationException.class).given(jmsTemplate).sendAndReceive(eq(destination), any());\n+\t\twillThrow(InvalidDestinationException.class).given(this.jmsTemplate).sendAndReceive(eq(destination), any());\n \n-\t\tthrown.expect(org.springframework.messaging.core.DestinationResolutionException.class);\n-\t\tmessagingTemplate.sendAndReceive(destination, createTextMessage());\n+\t\tthis.thrown.expect(org.springframework.messaging.core.DestinationResolutionException.class);\n+\t\tthis.messagingTemplate.sendAndReceive(destination, createTextMessage());\n \t}\n \n-\tprivate void invokeMessageCreator(String destinationName) {\n-\t\twillAnswer(new Answer<Object>() {\n-\t\t\t@Override\n-\t\t\tpublic Object answer(InvocationOnMock invocation) throws Throwable {\n-\t\t\t\tMessageCreator messageCreator = (MessageCreator) invocation.getArguments()[1];\n-\t\t\t\tmessageCreator.createMessage(null);\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}).given(jmsTemplate).send(eq(\"myQueue\"), any());\n+\tprivate void invokeMessageCreator() {\n+\t\twillAnswer(invocation -> {\n+\t\t\tMessageCreator messageCreator = (MessageCreator) invocation.getArguments()[1];\n+\t\t\tmessageCreator.createMessage(null);\n+\t\t\treturn null;\n+\t\t}).given(this.jmsTemplate).send(eq(\"myQueue\"), any());\n \t}\n \n \n@@ -604,15 +603,11 @@ private void assertTextMessage(Message<?> message) {\n \n \tprotected TextMessage createTextMessage(MessageCreator creator) throws JMSException {\n \t\tSession mock = mock(Session.class);\n-\t\tgiven(mock.createTextMessage(BDDMockito.<String> any())).willAnswer(\n-\t\t\t\tnew Answer<TextMessage>() {\n-\t\t\t@Override\n-\t\t\tpublic TextMessage answer(InvocationOnMock invocation) throws Throwable {\n-\t\t\t\treturn new StubTextMessage((String) invocation.getArguments()[0]);\n-\t\t\t}\n-\t\t});\n+\t\tgiven(mock.createTextMessage(BDDMockito.any())).willAnswer(\n+\t\t\t\t(Answer<TextMessage>) invocation ->\n+\t\t\t\t\t\tnew StubTextMessage((String) invocation.getArguments()[0]));\n \t\tjavax.jms.Message message = creator.createMessage(mock);\n-\t\tverify(mock).createTextMessage(BDDMockito.<String> any());\n+\t\tverify(mock).createTextMessage(BDDMockito.any());\n \t\treturn TextMessage.class.cast(message);\n \t}\n ",
      "parent_sha": "c5ba55ffc2a1f4ccc5e435e5efdfc90e7e8a32a1"
    }
  },
  {
    "oid": "779cf8d240941118e0097aa47984c9b414e45050",
    "message": "ConcurrentReferenceHashMap caches EntrySet in volatile field\n\nIncludes an efficient implementation of isEmpty(), not relying on a full entry count but rather backing out once a non-empty hash segment has been found.\n\nIssue: SPR-16994",
    "date": "2018-07-02T20:32:57Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/779cf8d240941118e0097aa47984c9b414e45050",
    "details": {
      "sha": "8cc76024110657c7a2b656f371e00d84c57f8b77",
      "filename": "spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java",
      "status": "modified",
      "additions": 64,
      "deletions": 54,
      "changes": 118,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/779cf8d240941118e0097aa47984c9b414e45050/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Futil%2FConcurrentReferenceHashMap.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/779cf8d240941118e0097aa47984c9b414e45050/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Futil%2FConcurrentReferenceHashMap.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Futil%2FConcurrentReferenceHashMap.java?ref=779cf8d240941118e0097aa47984c9b414e45050",
      "patch": "@@ -98,7 +98,7 @@ public class ConcurrentReferenceHashMap<K, V> extends AbstractMap<K, V> implemen\n \t * Late binding entry set.\n \t */\n \t@Nullable\n-\tprivate Set<Map.Entry<K, V>> entrySet;\n+\tprivate volatile Set<Map.Entry<K, V>> entrySet;\n \n \n \t/**\n@@ -167,8 +167,8 @@ public ConcurrentReferenceHashMap(int initialCapacity, float loadFactor, int con\n \t * @param referenceType the reference type used for entries (soft or weak)\n \t */\n \t@SuppressWarnings(\"unchecked\")\n-\tpublic ConcurrentReferenceHashMap(int initialCapacity, float loadFactor, int concurrencyLevel,\n-\t\t\tReferenceType referenceType) {\n+\tpublic ConcurrentReferenceHashMap(\n+\t\t\tint initialCapacity, float loadFactor, int concurrencyLevel, ReferenceType referenceType) {\n \n \t\tAssert.isTrue(initialCapacity >= 0, \"Initial capacity must not be negative\");\n \t\tAssert.isTrue(loadFactor > 0f, \"Load factor must be positive\");\n@@ -215,7 +215,7 @@ protected ReferenceManager createReferenceManager() {\n \t * @return the resulting hash code\n \t */\n \tprotected int getHash(@Nullable Object o) {\n-\t\tint hash = o == null ? 0 : o.hashCode();\n+\t\tint hash = (o != null ? o.hashCode() : 0);\n \t\thash += (hash << 15) ^ 0xffffcd7d;\n \t\thash ^= (hash >>> 10);\n \t\thash += (hash << 3);\n@@ -247,8 +247,8 @@ public boolean containsKey(@Nullable Object key) {\n \n \t@Nullable\n \tprivate Entry<K, V> getEntryIfAvailable(@Nullable Object key) {\n-\t\tReference<K, V> reference = getReference(key, Restructure.WHEN_NECESSARY);\n-\t\treturn (reference != null ? reference.get() : null);\n+\t\tReference<K, V> ref = getReference(key, Restructure.WHEN_NECESSARY);\n+\t\treturn (ref != null ? ref.get() : null);\n \t}\n \n \t/**\n@@ -281,7 +281,7 @@ private V put(@Nullable final K key, @Nullable final V value, final boolean over\n \t\treturn doTask(key, new Task<V>(TaskOption.RESTRUCTURE_BEFORE, TaskOption.RESIZE) {\n \t\t\t@Override\n \t\t\t@Nullable\n-\t\t\tprotected V execute(@Nullable Reference<K, V> reference, @Nullable Entry<K, V> entry, @Nullable Entries entries) {\n+\t\t\tprotected V execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry, @Nullable Entries entries) {\n \t\t\t\tif (entry != null) {\n \t\t\t\t\tV oldValue = entry.getValue();\n \t\t\t\t\tif (overwriteExisting) {\n@@ -302,10 +302,10 @@ public V remove(Object key) {\n \t\treturn doTask(key, new Task<V>(TaskOption.RESTRUCTURE_AFTER, TaskOption.SKIP_IF_EMPTY) {\n \t\t\t@Override\n \t\t\t@Nullable\n-\t\t\tprotected V execute(@Nullable Reference<K, V> reference, @Nullable Entry<K, V> entry) {\n+\t\t\tprotected V execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry) {\n \t\t\t\tif (entry != null) {\n-\t\t\t\t\tif (reference != null) {\n-\t\t\t\t\t\treference.release();\n+\t\t\t\t\tif (ref != null) {\n+\t\t\t\t\t\tref.release();\n \t\t\t\t\t}\n \t\t\t\t\treturn entry.value;\n \t\t\t\t}\n@@ -318,10 +318,10 @@ protected V execute(@Nullable Reference<K, V> reference, @Nullable Entry<K, V> e\n \tpublic boolean remove(Object key, final Object value) {\n \t\tBoolean result = doTask(key, new Task<Boolean>(TaskOption.RESTRUCTURE_AFTER, TaskOption.SKIP_IF_EMPTY) {\n \t\t\t@Override\n-\t\t\tprotected Boolean execute(@Nullable Reference<K, V> reference, @Nullable Entry<K, V> entry) {\n+\t\t\tprotected Boolean execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry) {\n \t\t\t\tif (entry != null && ObjectUtils.nullSafeEquals(entry.getValue(), value)) {\n-\t\t\t\t\tif (reference != null) {\n-\t\t\t\t\t\treference.release();\n+\t\t\t\t\tif (ref != null) {\n+\t\t\t\t\t\tref.release();\n \t\t\t\t\t}\n \t\t\t\t\treturn true;\n \t\t\t\t}\n@@ -335,7 +335,7 @@ protected Boolean execute(@Nullable Reference<K, V> reference, @Nullable Entry<K\n \tpublic boolean replace(K key, final V oldValue, final V newValue) {\n \t\tBoolean result = doTask(key, new Task<Boolean>(TaskOption.RESTRUCTURE_BEFORE, TaskOption.SKIP_IF_EMPTY) {\n \t\t\t@Override\n-\t\t\tprotected Boolean execute(@Nullable Reference<K, V> reference, @Nullable Entry<K, V> entry) {\n+\t\t\tprotected Boolean execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry) {\n \t\t\t\tif (entry != null && ObjectUtils.nullSafeEquals(entry.getValue(), oldValue)) {\n \t\t\t\t\tentry.setValue(newValue);\n \t\t\t\t\treturn true;\n@@ -352,7 +352,7 @@ public V replace(K key, final V value) {\n \t\treturn doTask(key, new Task<V>(TaskOption.RESTRUCTURE_BEFORE, TaskOption.SKIP_IF_EMPTY) {\n \t\t\t@Override\n \t\t\t@Nullable\n-\t\t\tprotected V execute(@Nullable Reference<K, V> reference, @Nullable Entry<K, V> entry) {\n+\t\t\tprotected V execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry) {\n \t\t\t\tif (entry != null) {\n \t\t\t\t\tV oldValue = entry.getValue();\n \t\t\t\t\tentry.setValue(value);\n@@ -393,11 +393,23 @@ public int size() {\n \t}\n \n \t@Override\n-\tpublic Set<java.util.Map.Entry<K, V>> entrySet() {\n-\t\tif (this.entrySet == null) {\n-\t\t\tthis.entrySet = new EntrySet();\n+\tpublic boolean isEmpty() {\n+\t\tfor (Segment segment : this.segments) {\n+\t\t\tif (segment.getCount() > 0) {\n+\t\t\t\treturn false;\n+\t\t\t}\n \t\t}\n-\t\treturn this.entrySet;\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic Set<Map.Entry<K, V>> entrySet() {\n+\t\tSet<Map.Entry<K, V>> entrySet = this.entrySet;\n+\t\tif (entrySet == null) {\n+\t\t\tentrySet = new EntrySet();\n+\t\t\tthis.entrySet = entrySet;\n+\t\t}\n+\t\treturn entrySet;\n \t}\n \n \t@Nullable\n@@ -512,8 +524,8 @@ public <T> T doTask(final int hash, @Nullable final Object key, final Task<T> ta\n \t\t\ttry {\n \t\t\t\tfinal int index = getIndex(hash, this.references);\n \t\t\t\tfinal Reference<K, V> head = this.references[index];\n-\t\t\t\tReference<K, V> reference = findInChain(head, key, hash);\n-\t\t\t\tEntry<K, V> entry = (reference != null ? reference.get() : null);\n+\t\t\t\tReference<K, V> ref = findInChain(head, key, hash);\n+\t\t\t\tEntry<K, V> entry = (ref != null ? ref.get() : null);\n \t\t\t\tEntries entries = new Entries() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void add(@Nullable V value) {\n@@ -524,7 +536,7 @@ public void add(@Nullable V value) {\n \t\t\t\t\t\tSegment.this.count++;\n \t\t\t\t\t}\n \t\t\t\t};\n-\t\t\t\treturn task.execute(reference, entry, entries);\n+\t\t\t\treturn task.execute(ref, entry, entries);\n \t\t\t}\n \t\t\tfinally {\n \t\t\t\tunlock();\n@@ -559,19 +571,18 @@ public void clear() {\n \t\t * @param allowResize if resizing is permitted\n \t\t */\n \t\tprotected final void restructureIfNecessary(boolean allowResize) {\n-\t\t\tboolean needsResize = ((this.count > 0) && (this.count >= this.resizeThreshold));\n-\t\t\tReference<K, V> reference = this.referenceManager.pollForPurge();\n-\t\t\tif ((reference != null) || (needsResize && allowResize)) {\n+\t\t\tboolean needsResize = (this.count > 0 && this.count >= this.resizeThreshold);\n+\t\t\tReference<K, V> ref = this.referenceManager.pollForPurge();\n+\t\t\tif (ref != null || (needsResize && allowResize)) {\n \t\t\t\tlock();\n \t\t\t\ttry {\n \t\t\t\t\tint countAfterRestructure = this.count;\n-\n \t\t\t\t\tSet<Reference<K, V>> toPurge = Collections.emptySet();\n-\t\t\t\t\tif (reference != null) {\n+\t\t\t\t\tif (ref != null) {\n \t\t\t\t\t\ttoPurge = new HashSet<>();\n-\t\t\t\t\t\twhile (reference != null) {\n-\t\t\t\t\t\t\ttoPurge.add(reference);\n-\t\t\t\t\t\t\treference = this.referenceManager.pollForPurge();\n+\t\t\t\t\t\twhile (ref != null) {\n+\t\t\t\t\t\t\ttoPurge.add(ref);\n+\t\t\t\t\t\t\tref = this.referenceManager.pollForPurge();\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\tcountAfterRestructure -= toPurge.size();\n@@ -587,24 +598,25 @@ protected final void restructureIfNecessary(boolean allowResize) {\n \t\t\t\t\t}\n \n \t\t\t\t\t// Either create a new table or reuse the existing one\n-\t\t\t\t\tReference<K, V>[] restructured = (resizing ? createReferenceArray(restructureSize) : this.references);\n+\t\t\t\t\tReference<K, V>[] restructured =\n+\t\t\t\t\t\t\t(resizing ? createReferenceArray(restructureSize) : this.references);\n \n \t\t\t\t\t// Restructure\n \t\t\t\t\tfor (int i = 0; i < this.references.length; i++) {\n-\t\t\t\t\t\treference = this.references[i];\n+\t\t\t\t\t\tref = this.references[i];\n \t\t\t\t\t\tif (!resizing) {\n \t\t\t\t\t\t\trestructured[i] = null;\n \t\t\t\t\t\t}\n-\t\t\t\t\t\twhile (reference != null) {\n-\t\t\t\t\t\t\tif (!toPurge.contains(reference)) {\n-\t\t\t\t\t\t\t\tEntry<K, V> entry = reference.get();\n+\t\t\t\t\t\twhile (ref != null) {\n+\t\t\t\t\t\t\tif (!toPurge.contains(ref)) {\n+\t\t\t\t\t\t\t\tEntry<K, V> entry = ref.get();\n \t\t\t\t\t\t\t\tif (entry != null) {\n-\t\t\t\t\t\t\t\t\tint index = getIndex(reference.getHash(), restructured);\n+\t\t\t\t\t\t\t\t\tint index = getIndex(ref.getHash(), restructured);\n \t\t\t\t\t\t\t\t\trestructured[index] = this.referenceManager.createReference(\n-\t\t\t\t\t\t\t\t\t\t\tentry, reference.getHash(), restructured[index]);\n+\t\t\t\t\t\t\t\t\t\t\tentry, ref.getHash(), restructured[index]);\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\treference = reference.getNext();\n+\t\t\t\t\t\t\tref = ref.getNext();\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \n@@ -622,8 +634,8 @@ protected final void restructureIfNecessary(boolean allowResize) {\n \t\t}\n \n \t\t@Nullable\n-\t\tprivate Reference<K, V> findInChain(Reference<K, V> reference, @Nullable Object key, int hash) {\n-\t\t\tReference<K, V> currRef = reference;\n+\t\tprivate Reference<K, V> findInChain(Reference<K, V> ref, @Nullable Object key, int hash) {\n+\t\t\tReference<K, V> currRef = ref;\n \t\t\twhile (currRef != null) {\n \t\t\t\tif (currRef.getHash() == hash) {\n \t\t\t\t\tEntry<K, V> entry = currRef.get();\n@@ -667,7 +679,6 @@ public final int getCount() {\n \t/**\n \t * A reference to an {@link Entry} contained in the map. Implementations are usually\n \t * wrappers around specific Java reference implementations (e.g., {@link SoftReference}).\n-\t *\n \t * @param <K> the key type\n \t * @param <V> the value type\n \t */\n@@ -700,7 +711,6 @@ protected interface Reference<K, V> {\n \n \t/**\n \t * A single map entry.\n-\t *\n \t * @param <K> the key type\n \t * @param <V> the value type\n \t */\n@@ -780,26 +790,26 @@ public boolean hasOption(TaskOption option) {\n \n \t\t/**\n \t\t * Execute the task.\n-\t\t * @param reference the found reference or {@code null}\n-\t\t * @param entry the found entry or {@code null}\n+\t\t * @param ref the found reference (or {@code null})\n+\t\t * @param entry the found entry (or {@code null})\n \t\t * @param entries access to the underlying entries\n \t\t * @return the result of the task\n \t\t * @see #execute(Reference, Entry)\n \t\t */\n \t\t@Nullable\n-\t\tprotected T execute(@Nullable Reference<K, V> reference, @Nullable Entry<K, V> entry, @Nullable Entries entries) {\n-\t\t\treturn execute(reference, entry);\n+\t\tprotected T execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry, @Nullable Entries entries) {\n+\t\t\treturn execute(ref, entry);\n \t\t}\n \n \t\t/**\n \t\t * Convenience method that can be used for tasks that do not need access to {@link Entries}.\n-\t\t * @param reference the found reference or {@code null}\n-\t\t * @param entry the found entry or {@code null}\n+\t\t * @param ref the found reference (or {@code null})\n+\t\t * @param entry the found entry (or {@code null})\n \t\t * @return the result of the task\n \t\t * @see #execute(Reference, Entry, Entries)\n \t\t */\n \t\t@Nullable\n-\t\tprotected T execute(@Nullable Reference<K, V> reference, @Nullable Entry<K, V> entry) {\n+\t\tprotected T execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry) {\n \t\t\treturn null;\n \t\t}\n \t}\n@@ -840,9 +850,9 @@ public Iterator<Map.Entry<K, V>> iterator() {\n \t\t@Override\n \t\tpublic boolean contains(@Nullable Object o) {\n \t\t\tif (o instanceof Map.Entry<?, ?>) {\n-\t\t\t\tMap.Entry<?, ?> entry = (java.util.Map.Entry<?, ?>) o;\n-\t\t\t\tReference<K, V> reference = ConcurrentReferenceHashMap.this.getReference(entry.getKey(), Restructure.NEVER);\n-\t\t\t\tEntry<K, V> otherEntry = (reference != null ? reference.get() : null);\n+\t\t\t\tMap.Entry<?, ?> entry = (Map.Entry<?, ?>) o;\n+\t\t\t\tReference<K, V> ref = ConcurrentReferenceHashMap.this.getReference(entry.getKey(), Restructure.NEVER);\n+\t\t\t\tEntry<K, V> otherEntry = (ref != null ? ref.get() : null);\n \t\t\t\tif (otherEntry != null) {\n \t\t\t\t\treturn ObjectUtils.nullSafeEquals(otherEntry.getValue(), otherEntry.getValue());\n \t\t\t\t}\n@@ -1003,7 +1013,7 @@ public Reference<K, V> pollForPurge() {\n \n \n \t/**\n-\t * Internal {@link Reference} implementation for {@link SoftReference Reference} implementation for {@link SoftReferences}.\n+\t * Internal {@link Reference} implementation for {@link SoftReference SoftReferences}.\n \t */\n \tprivate static final class SoftEntryReference<K, V> extends SoftReference<Entry<K, V>> implements Reference<K, V> {\n \n@@ -1040,7 +1050,7 @@ public void release() {\n \n \n \t/**\n-\t * Internal {@link Reference} implementation for {@link WeakReference Reference} implementation for {@link WeakReferences}.\n+\t * Internal {@link Reference} implementation for {@link WeakReference WeakReferences}.\n \t */\n \tprivate static final class WeakEntryReference<K, V> extends WeakReference<Entry<K, V>> implements Reference<K, V> {\n ",
      "parent_sha": "06f9fb9aeb24c751d75721ff776e579d2c0b084e"
    }
  },
  {
    "oid": "90e3dbb0f5d3406e4b8136c50c3d2c9e9c96afc7",
    "message": "BufferedImageHttpMessageConverter ignores empty MIME types\n\nIssue: SPR-11581",
    "date": "2014-03-21T13:43:03Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/90e3dbb0f5d3406e4b8136c50c3d2c9e9c96afc7",
    "details": {
      "sha": "7df72035e3363deacb8d12ae3608826c432d52b1",
      "filename": "spring-web/src/main/java/org/springframework/http/converter/BufferedImageHttpMessageConverter.java",
      "status": "modified",
      "additions": 30,
      "deletions": 18,
      "changes": 48,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/90e3dbb0f5d3406e4b8136c50c3d2c9e9c96afc7/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2FBufferedImageHttpMessageConverter.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/90e3dbb0f5d3406e4b8136c50c3d2c9e9c96afc7/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2FBufferedImageHttpMessageConverter.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2FBufferedImageHttpMessageConverter.java?ref=90e3dbb0f5d3406e4b8136c50c3d2c9e9c96afc7",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2013 the original author or authors.\n+ * Copyright 2002-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -42,20 +42,24 @@\n import org.springframework.http.HttpOutputMessage;\n import org.springframework.http.MediaType;\n import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n \n /**\n- * Implementation of {@link HttpMessageConverter} that can read and write {@link BufferedImage BufferedImages}.\n+ * Implementation of {@link HttpMessageConverter} that can read and write\n+ * {@link BufferedImage BufferedImages}.\n  *\n- * <p>By default, this converter can read all media types that are supported by the {@linkplain\n- * ImageIO#getReaderMIMETypes() registered image readers}, and writes using the media type of the first available\n- * {@linkplain javax.imageio.ImageIO#getWriterMIMETypes() registered image writer}. This behavior can be overriden by\n- * setting the #setContentType(org.springframework.http.MediaType) contentType} properties.\n+ * <p>By default, this converter can read all media types that are supported\n+ * by the {@linkplain ImageIO#getReaderMIMETypes() registered image readers},\n+ * and writes using the media type of the first available\n+ * {@linkplain javax.imageio.ImageIO#getWriterMIMETypes() registered image writer}.\n+ * The latter can be overridden by setting the\n+ * {@link #setDefaultContentType defaultContentType} property.\n  *\n- * <p>If the {@link #setCacheDir(java.io.File) cacheDir} property is set to an existing directory, this converter will\n- * cache image data.\n+ * <p>If the {@link #setCacheDir cacheDir} property is set, this converter\n+ * will cache image data.\n  *\n- * <p>The {@link #process(ImageReadParam)} and {@link #process(ImageWriteParam)} template methods allow subclasses to\n- * override Image I/O parameters.\n+ * <p>The {@link #process(ImageReadParam)} and {@link #process(ImageWriteParam)}\n+ * template methods allow subclasses to override Image I/O parameters.\n  *\n  * @author Arjen Poutsma\n  * @since 3.0\n@@ -72,15 +76,21 @@ public class BufferedImageHttpMessageConverter implements HttpMessageConverter<B\n \tpublic BufferedImageHttpMessageConverter() {\n \t\tString[] readerMediaTypes = ImageIO.getReaderMIMETypes();\n \t\tfor (String mediaType : readerMediaTypes) {\n-\t\t\tthis.readableMediaTypes.add(MediaType.parseMediaType(mediaType));\n+\t\t\tif (StringUtils.hasText(mediaType)) {\n+\t\t\t\tthis.readableMediaTypes.add(MediaType.parseMediaType(mediaType));\n+\t\t\t}\n \t\t}\n \n \t\tString[] writerMediaTypes = ImageIO.getWriterMIMETypes();\n-\t\tif (writerMediaTypes.length > 0) {\n-\t\t\tthis.defaultContentType = MediaType.parseMediaType(writerMediaTypes[0]);\n+\t\tfor (String mediaType : writerMediaTypes) {\n+\t\t\tif (StringUtils.hasText(mediaType)) {\n+\t\t\t\tthis.defaultContentType = MediaType.parseMediaType(mediaType);\n+\t\t\t\tbreak;\n+\t\t\t}\n \t\t}\n \t}\n \n+\n \t/**\n \t * Sets the default {@code Content-Type} to be used for writing.\n \t * @throws IllegalArgumentException if the given content type is not supported by the Java Image I/O API\n@@ -90,7 +100,7 @@ public void setDefaultContentType(MediaType defaultContentType) {\n \t\tIterator<ImageWriter> imageWriters = ImageIO.getImageWritersByMIMEType(defaultContentType.toString());\n \t\tif (!imageWriters.hasNext()) {\n \t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\"ContentType [\" + defaultContentType + \"] is not supported by the Java Image I/O API\");\n+\t\t\t\t\t\"Content-Type [\" + defaultContentType + \"] is not supported by the Java Image I/O API\");\n \t\t}\n \n \t\tthis.defaultContentType = defaultContentType;\n@@ -245,15 +255,17 @@ private ImageOutputStream createImageOutputStream(OutputStream os) throws IOExce\n \n \n \t/**\n-\t * Template method that allows for manipulating the {@link ImageReadParam} before it is used to read an image.\n-\t * <p>Default implementation is empty.\n+\t * Template method that allows for manipulating the {@link ImageReadParam}\n+\t * before it is used to read an image.\n+\t * <p>The default implementation is empty.\n \t */\n \tprotected void process(ImageReadParam irp) {\n \t}\n \n \t/**\n-\t * Template method that allows for manipulating the {@link ImageWriteParam} before it is used to write an image.\n-\t * <p>Default implementation is empty.\n+\t * Template method that allows for manipulating the {@link ImageWriteParam}\n+\t * before it is used to write an image.\n+\t * <p>The default implementation is empty.\n \t */\n \tprotected void process(ImageWriteParam iwp) {\n \t}",
      "parent_sha": "3aff973d13f9b82d3de511faae667424c637fa38"
    }
  },
  {
    "oid": "96b9cf6ca9f459668fa9d027fe82f263cfcc034e",
    "message": "DefaultJdoDialect supports JDO 3.0 query timeout facility (as supported by DataNucleus 2.1)",
    "date": "2010-07-08T11:47:30Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/96b9cf6ca9f459668fa9d027fe82f263cfcc034e",
    "details": {
      "sha": "4588559289d26d75a96075f539b25e1ebe14e218",
      "filename": "org.springframework.orm/src/main/java/org/springframework/orm/jdo/DefaultJdoDialect.java",
      "status": "modified",
      "additions": 18,
      "deletions": 5,
      "changes": 23,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/96b9cf6ca9f459668fa9d027fe82f263cfcc034e/org.springframework.orm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjdo%2FDefaultJdoDialect.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/96b9cf6ca9f459668fa9d027fe82f263cfcc034e/org.springframework.orm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjdo%2FDefaultJdoDialect.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/org.springframework.orm%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjdo%2FDefaultJdoDialect.java?ref=96b9cf6ca9f459668fa9d027fe82f263cfcc034e",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2010 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,6 +16,7 @@\n \n package org.springframework.orm.jdo;\n \n+import java.lang.reflect.Method;\n import java.sql.Connection;\n import java.sql.SQLException;\n import javax.jdo.JDOException;\n@@ -34,6 +35,8 @@\n import org.springframework.transaction.InvalidIsolationLevelException;\n import org.springframework.transaction.TransactionDefinition;\n import org.springframework.transaction.TransactionException;\n+import org.springframework.util.ClassUtils;\n+import org.springframework.util.ReflectionUtils;\n \n /**\n  * Default implementation of the {@link JdoDialect} interface.\n@@ -66,6 +69,10 @@\n  */\n public class DefaultJdoDialect implements JdoDialect, PersistenceExceptionTranslator {\n \n+\t// JDO 3.0 setTimeoutMillis method available?\n+\tprivate static final Method setTimeoutMillisMethod =\n+\t\t\tClassUtils.getMethodIfAvailable(Query.class, \"setTimeoutMillis\", Integer.class);\n+\n \tprotected final Log logger = LogFactory.getLog(getClass());\n \n \tprivate SQLExceptionTranslator jdbcExceptionTranslator;\n@@ -181,13 +188,19 @@ public void releaseJdbcConnection(ConnectionHandle conHandle, PersistenceManager\n \t}\n \n \t/**\n-\t * This implementation sets the JPA 2.0 query hints \"javax.persistence.lock.timeout\"\n-\t * and \"javax.persistence.query.timeout\", assuming that JDO 2.1 providers are often\n+\t * This implementation applies a JDO 3.0 query timeout, if available. Otherwise,\n+\t * it sets the JPA 2.0 query hints \"javax.persistence.lock.timeout\" and\n+\t * \"javax.persistence.query.timeout\", assuming that JDO providers are often\n \t * JPA providers as well.\n \t */\n \tpublic void applyQueryTimeout(Query query, int remainingTimeInSeconds) throws JDOException {\n-\t\tquery.addExtension(\"javax.persistence.lock.timeout\", remainingTimeInSeconds);\n-\t\tquery.addExtension(\"javax.persistence.query.timeout\", remainingTimeInSeconds);\n+\t\tif (setTimeoutMillisMethod != null) {\n+\t\t\tReflectionUtils.invokeMethod(setTimeoutMillisMethod, query, remainingTimeInSeconds);\n+\t\t}\n+\t\telse {\n+\t\t\tquery.addExtension(\"javax.persistence.lock.timeout\", remainingTimeInSeconds);\n+\t\t\tquery.addExtension(\"javax.persistence.query.timeout\", remainingTimeInSeconds);\n+\t\t}\n \t}\n \n ",
      "parent_sha": "3918518779f9a76f9a5d7017a284b0fb0ca4337e"
    }
  },
  {
    "oid": "ab8e388412858339099e299f7db34dffcbde8460",
    "message": "Fix duplicate invoke method of transformedBeanName",
    "date": "2019-06-07T20:48:19Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/ab8e388412858339099e299f7db34dffcbde8460",
    "details": {
      "sha": "9145c73f097eadede142c71367ce9dca4e34b303",
      "filename": "spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/ab8e388412858339099e299f7db34dffcbde8460/spring-beans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbeans%2Ffactory%2Fsupport%2FAbstractBeanFactory.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/ab8e388412858339099e299f7db34dffcbde8460/spring-beans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbeans%2Ffactory%2Fsupport%2FAbstractBeanFactory.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-beans%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fbeans%2Ffactory%2Fsupport%2FAbstractBeanFactory.java?ref=ab8e388412858339099e299f7db34dffcbde8460",
      "patch": "@@ -1648,7 +1648,7 @@ protected Object getObjectForBeanInstance(\n \t\t\t\treturn beanInstance;\n \t\t\t}\n \t\t\tif (!(beanInstance instanceof FactoryBean)) {\n-\t\t\t\tthrow new BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());\n+                throw new BeanIsNotAFactoryException(beanName, beanInstance.getClass());\n \t\t\t}\n \t\t}\n ",
      "parent_sha": "b296545af82f0bd1e35e77dcdf897386d6bbcc5c"
    }
  },
  {
    "oid": "fb0aa5abb3ffbcaec68ed74e14d9b98faba92262",
    "message": "Fix WebClientIntegrationTests flaky Jetty tests\n\nEnsure the port used by the client in malformedResponseChunksOnBodilessEntity\nand malformedResponseChunksOnEntityWithBody has correctly been set.\n\nCloses gh-29862",
    "date": "2023-01-20T10:38:22Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/fb0aa5abb3ffbcaec68ed74e14d9b98faba92262",
    "details": {
      "sha": "880dbcc000e66fe8821231336e3c5a64a8ee400c",
      "filename": "spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java",
      "status": "modified",
      "additions": 11,
      "deletions": 9,
      "changes": 20,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/fb0aa5abb3ffbcaec68ed74e14d9b98faba92262/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Ffunction%2Fclient%2FWebClientIntegrationTests.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/fb0aa5abb3ffbcaec68ed74e14d9b98faba92262/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Ffunction%2Fclient%2FWebClientIntegrationTests.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-webflux%2Fsrc%2Ftest%2Fjava%2Forg%2Fspringframework%2Fweb%2Freactive%2Ffunction%2Fclient%2FWebClientIntegrationTests.java?ref=fb0aa5abb3ffbcaec68ed74e14d9b98faba92262",
      "patch": "@@ -34,7 +34,6 @@\n import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.atomic.AtomicInteger;\n import java.util.function.Consumer;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n@@ -50,6 +49,7 @@\n import org.junit.jupiter.params.provider.MethodSource;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n+import reactor.core.publisher.Sinks;\n import reactor.netty.http.client.HttpClient;\n import reactor.netty.resources.ConnectionProvider;\n import reactor.test.StepVerifier;\n@@ -1281,12 +1281,13 @@ void retrieveTextDecodedToFlux(ClientHttpConnector connector) {\n \tprivate <T> Mono<T> doMalformedChunkedResponseTest(\n \t\t\tClientHttpConnector connector, Function<ResponseSpec, Mono<T>> handler) {\n \n-\t\tAtomicInteger port = new AtomicInteger();\n+\t\tSinks.One<Integer> portSink = Sinks.one();\n \n \t\tThread serverThread = new Thread(() -> {\n \t\t\t// No way to simulate a malformed chunked response through MockWebServer.\n \t\t\ttry (ServerSocket serverSocket = new ServerSocket(0)) {\n-\t\t\t\tport.set(serverSocket.getLocalPort());\n+\t\t\t\tSinks.EmitResult result = portSink.tryEmitValue(serverSocket.getLocalPort());\n+\t\t\t\tassertThat(result).isEqualTo(Sinks.EmitResult.OK);\n \t\t\t\tSocket socket = serverSocket.accept();\n \t\t\t\tInputStream is = socket.getInputStream();\n \n@@ -1310,12 +1311,13 @@ private <T> Mono<T> doMalformedChunkedResponseTest(\n \n \t\tserverThread.start();\n \n-\t\tWebClient client = WebClient.builder()\n-\t\t\t\t.clientConnector(connector)\n-\t\t\t\t.baseUrl(\"http://localhost:\" + port)\n-\t\t\t\t.build();\n-\n-\t\treturn handler.apply(client.post().retrieve());\n+\t\treturn portSink.asMono().flatMap(port -> {\n+\t\t\tWebClient client = WebClient.builder()\n+\t\t\t\t\t.clientConnector(connector)\n+\t\t\t\t\t.baseUrl(\"http://localhost:\" + port)\n+\t\t\t\t\t.build();\n+\t\t\treturn handler.apply(client.post().retrieve());\n+\t\t});\n \t}\n \n \tprivate void prepareResponse(Consumer<MockResponse> consumer) {",
      "parent_sha": "86a40716bd1555e477996c41f0675ab0c65be06b"
    }
  },
  {
    "oid": "4b31feb2438a7e542b0995a341041f6ae99490b0",
    "message": "Clarify Jackson2ObjectMapper.modules(ToInstall) semantics\n\nCloses gh-22747",
    "date": "2019-05-06T20:09:56Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/4b31feb2438a7e542b0995a341041f6ae99490b0",
    "details": {
      "sha": "07307713239aaa91648849d6d190849a3ace2d7c",
      "filename": "spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/4b31feb2438a7e542b0995a341041f6ae99490b0/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2Fjson%2FJackson2ObjectMapperBuilder.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/4b31feb2438a7e542b0995a341041f6ae99490b0/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2Fjson%2FJackson2ObjectMapperBuilder.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2Fconverter%2Fjson%2FJackson2ObjectMapperBuilder.java?ref=4b31feb2438a7e542b0995a341041f6ae99490b0",
      "patch": "@@ -497,6 +497,8 @@ public Jackson2ObjectMapperBuilder featuresToDisable(Object... featuresToDisable\n \n \t/**\n \t * Specify one or more modules to be registered with the {@link ObjectMapper}.\n+\t * Multiple invocations are not additive, the last one defines the modules to\n+\t * register.\n \t * <p>Note: If this is set, no finding of modules is going to happen - not by\n \t * Jackson, and not by Spring either (see {@link #findModulesViaServiceLoader}).\n \t * As a consequence, specifying an empty list here will suppress any kind of\n@@ -512,6 +514,8 @@ public Jackson2ObjectMapperBuilder modules(Module... modules) {\n \n \t/**\n \t * Set a complete list of modules to be registered with the {@link ObjectMapper}.\n+\t * Multiple invocations are not additive, the last one defines the modules to\n+\t * register.\n \t * <p>Note: If this is set, no finding of modules is going to happen - not by\n \t * Jackson, and not by Spring either (see {@link #findModulesViaServiceLoader}).\n \t * As a consequence, specifying an empty list here will suppress any kind of\n@@ -529,6 +533,8 @@ public Jackson2ObjectMapperBuilder modules(List<Module> modules) {\n \n \t/**\n \t * Specify one or more modules to be registered with the {@link ObjectMapper}.\n+\t * Multiple invocations are not additive, the last one defines the modules\n+\t * to register.\n \t * <p>Modules specified here will be registered after\n \t * Spring's autodetection of JSR-310 and Joda-Time, or Jackson's\n \t * finding of modules (see {@link #findModulesViaServiceLoader}),\n@@ -545,7 +551,8 @@ public Jackson2ObjectMapperBuilder modulesToInstall(Module... modules) {\n \n \t/**\n \t * Specify one or more modules by class to be registered with\n-\t * the {@link ObjectMapper}.\n+\t * the {@link ObjectMapper}. Multiple invocations are not additive,\n+\t * the last one defines the modules to register.\n \t * <p>Modules specified here will be registered after\n \t * Spring's autodetection of JSR-310 and Joda-Time, or Jackson's\n \t * finding of modules (see {@link #findModulesViaServiceLoader}),",
      "parent_sha": "293188c797c82a72cb5836acde223ac5f57e3080"
    }
  },
  {
    "oid": "77832a6da905f63b75ffa5ee450b914f9b933230",
    "message": "Apply \"instanceof pattern matching\" in HttpHeaders",
    "date": "2023-01-09T17:27:13Z",
    "url": "https://github.com/spring-projects/spring-framework/commit/77832a6da905f63b75ffa5ee450b914f9b933230",
    "details": {
      "sha": "fe0688004d4cc62938b8f79148e4e8aa3f32f7ec",
      "filename": "spring-web/src/main/java/org/springframework/http/HttpHeaders.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/spring-projects/spring-framework/blob/77832a6da905f63b75ffa5ee450b914f9b933230/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2FHttpHeaders.java",
      "raw_url": "https://github.com/spring-projects/spring-framework/raw/77832a6da905f63b75ffa5ee450b914f9b933230/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2FHttpHeaders.java",
      "contents_url": "https://api.github.com/repos/spring-projects/spring-framework/contents/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fhttp%2FHttpHeaders.java?ref=77832a6da905f63b75ffa5ee450b914f9b933230",
      "patch": "@@ -1773,19 +1773,19 @@ public Set<Entry<String, List<String>>> entrySet() {\n \n \n \t@Override\n-\tpublic boolean equals(@Nullable Object other) {\n-\t\tif (this == other) {\n+\tpublic boolean equals(@Nullable Object obj) {\n+\t\tif (this == obj) {\n \t\t\treturn true;\n \t\t}\n-\t\tif (!(other instanceof HttpHeaders)) {\n+\t\tif (!(obj instanceof HttpHeaders other)) {\n \t\t\treturn false;\n \t\t}\n-\t\treturn unwrap(this).equals(unwrap((HttpHeaders) other));\n+\t\treturn unwrap(this).equals(unwrap(other));\n \t}\n \n \tprivate static MultiValueMap<String, String> unwrap(HttpHeaders headers) {\n-\t\twhile (headers.headers instanceof HttpHeaders) {\n-\t\t\theaders = (HttpHeaders) headers.headers;\n+\t\twhile (headers.headers instanceof HttpHeaders httpHeaders) {\n+\t\t\theaders = httpHeaders;\n \t\t}\n \t\treturn headers.headers;\n \t}\n@@ -1810,8 +1810,8 @@ public String toString() {\n \t * @since 5.3\n \t */\n \tpublic static HttpHeaders readOnlyHttpHeaders(MultiValueMap<String, String> headers) {\n-\t\treturn (headers instanceof HttpHeaders ?\n-\t\t\t\treadOnlyHttpHeaders((HttpHeaders) headers) : new ReadOnlyHttpHeaders(headers));\n+\t\treturn (headers instanceof HttpHeaders httpHeaders ? readOnlyHttpHeaders(httpHeaders) :\n+\t\t\t\tnew ReadOnlyHttpHeaders(headers));\n \t}\n \n \t/**",
      "parent_sha": "ce1f6cf0bff59eb6fac27588dc28f0175e45267a"
    }
  }
]