[
  {
    "oid": "d5edad8d934df9e87074652cc6ca221d425486fb",
    "message": "func private",
    "date": "2021-06-18T03:34:40Z",
    "url": "https://github.com/Tencent/matrix/commit/d5edad8d934df9e87074652cc6ca221d425486fb",
    "details": {
      "sha": "3a407ca6dae2d2d8a561f50ebe751c502c6911e7",
      "filename": "matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/OpenglLeakPlugin.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/d5edad8d934df9e87074652cc6ca221d425486fb/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2FOpenglLeakPlugin.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/d5edad8d934df9e87074652cc6ca221d425486fb/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2FOpenglLeakPlugin.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2FOpenglLeakPlugin.java?ref=d5edad8d934df9e87074652cc6ca221d425486fb",
      "patch": "@@ -50,7 +50,7 @@ public void run() {\n         }).start();\n     }\n \n-    public void _start() {\n+    private void _start() {\n         Intent service = new Intent(context, OpenglIndexDetectorService.class);\n         context.bindService(service, new ServiceConnection() {\n             @Override",
      "parent_sha": "d486d272f7106ccd088cc60540e8900582fcb0eb"
    }
  },
  {
    "oid": "185d8e05bb4e885b57fee6c179304e7830476ea8",
    "message": "fix confict",
    "date": "2021-08-13T06:28:05Z",
    "url": "https://github.com/Tencent/matrix/commit/185d8e05bb4e885b57fee6c179304e7830476ea8",
    "details": {
      "sha": "52c2d4301a149a6dc137bf3135d87adee559c0d2",
      "filename": "matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/OpenglLeakPlugin.java",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/Tencent/matrix/blob/185d8e05bb4e885b57fee6c179304e7830476ea8/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2FOpenglLeakPlugin.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/185d8e05bb4e885b57fee6c179304e7830476ea8/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2FOpenglLeakPlugin.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2FOpenglLeakPlugin.java?ref=185d8e05bb4e885b57fee6c179304e7830476ea8",
      "patch": "@@ -7,6 +7,7 @@\n import android.content.ServiceConnection;\n import android.os.IBinder;\n import android.os.RemoteException;\n+import android.util.Log;\n \n import com.tencent.matrix.openglleak.comm.FuncNameString;\n import com.tencent.matrix.openglleak.detector.IOpenglIndexDetector;\n@@ -103,10 +104,9 @@ private void executeHook(IBinder iBinder) {\n \n     private void startImpl() {\n         Intent service = new Intent(context, OpenglIndexDetectorService.class);\n-        context.bindService(service, new ServiceConnection() {\n+        boolean result = context.bindService(service, new ServiceConnection() {\n             @Override\n             public void onServiceConnected(ComponentName componentName, final IBinder iBinder) {\n-                OpenglLeakPlugin.sCallback.onExpProcessSuccess();\n                 new Thread(new Runnable() {\n                     @Override\n                     public void run() {\n@@ -118,9 +118,16 @@ public void run() {\n             @Override\n             public void onServiceDisconnected(ComponentName componentName) {\n                 context.unbindService(this);\n-                OpenglLeakPlugin.sCallback.onExpProcessFail();\n             }\n         }, context.BIND_AUTO_CREATE);\n+\n+        Log.e(TAG, \"bindService result = \" + result);\n+        if(result) {\n+            OpenglLeakPlugin.sCallback.onExpProcessSuccess();\n+        } else {\n+            OpenglLeakPlugin.sCallback.onExpProcessFail();\n+        }\n+\n     }\n \n     @Override",
      "parent_sha": "db429431fb5aef8349eeb1c53cb187709949a2d0"
    }
  },
  {
    "oid": "70f480781225a8ecd6ce0fa332df05b365155442",
    "message": "fix bug",
    "date": "2019-08-13T13:03:23Z",
    "url": "https://github.com/Tencent/matrix/commit/70f480781225a8ecd6ce0fa332df05b365155442",
    "details": {
      "sha": "e953b8efc8e81a92d4771bc29c4402f4ef83dff2",
      "filename": "matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/plugin/Plugin.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/70f480781225a8ecd6ce0fa332df05b365155442/matrix%2Fmatrix-android%2Fmatrix-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fplugin%2FPlugin.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/70f480781225a8ecd6ce0fa332df05b365155442/matrix%2Fmatrix-android%2Fmatrix-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fplugin%2FPlugin.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fplugin%2FPlugin.java?ref=70f480781225a8ecd6ce0fa332df05b365155442",
      "patch": "@@ -72,7 +72,7 @@ public void onDetectIssue(Issue issue) {\n             if (issue.getTag() != null) {\n                 content.put(Issue.ISSUE_REPORT_TAG, issue.getTag());\n             }\n-            if (issue.getType() != null) {\n+            if (issue.getType() != 0) {\n                 content.put(Issue.ISSUE_REPORT_TYPE, issue.getType());\n             }\n             content.put(Issue.ISSUE_REPORT_PROCESS, MatrixUtil.getProcessName(application));",
      "parent_sha": "f1c5a182f7aa308fc6837430d3bef2caa757fd73"
    }
  },
  {
    "oid": "61e7f64df5e99efb6b758c2137d715d69b8f6559",
    "message": "more focusable log",
    "date": "2020-01-03T11:58:32Z",
    "url": "https://github.com/Tencent/matrix/commit/61e7f64df5e99efb6b758c2137d715d69b8f6559",
    "details": {
      "sha": "55b19a689b097bee753550a432f49da58bdc5e49",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/StartupTracer.java",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/Tencent/matrix/blob/61e7f64df5e99efb6b758c2137d715d69b8f6559/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FStartupTracer.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/61e7f64df5e99efb6b758c2137d715d69b8f6559/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FStartupTracer.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FStartupTracer.java?ref=61e7f64df5e99efb6b758c2137d715d69b8f6559",
      "patch": "@@ -106,26 +106,23 @@ public void onActivityFocused(String activity) {\n             return;\n         }\n \n-        boolean isCreatedByLaunchActivity = ActivityThreadHacker.isCreatedByLaunchActivity();\n-        MatrixLog.i(TAG, \"activity:%s, splashActivities:%s, size:%d, isCreatedByLaunchActivity:%b, hasShowSplashActivity:%b, isColdStartup:%b\",\n-                activity, splashActivities, splashActivities.size(), isCreatedByLaunchActivity, hasShowSplashActivity, isColdStartup());\n         if (isColdStartup()) {\n+            boolean isCreatedByLaunchActivity = ActivityThreadHacker.isCreatedByLaunchActivity();\n+            MatrixLog.i(TAG, \"#ColdStartup# activity:%s, splashActivities:%s, empty:%b, isCreatedByLaunchActivity:%b, hasShowSplashActivity:%b, firstScreenCost:%d\",\n+                    activity, splashActivities, splashActivities.isEmpty(), isCreatedByLaunchActivity, hasShowSplashActivity, firstScreenCost);\n+\n             if (firstScreenCost == 0) {\n                 this.firstScreenCost = uptimeMillis() - ActivityThreadHacker.getEggBrokenTime();\n             }\n             if (hasShowSplashActivity) {\n                 coldCost = uptimeMillis() - ActivityThreadHacker.getEggBrokenTime();\n             } else {\n-                MatrixLog.i(TAG, \"pre-load by os,  activity[%s], splashActivities=%s, size:%d\", activity, splashActivities, splashActivities.size());\n-\n                 if (splashActivities.contains(activity)) {\n                     hasShowSplashActivity = true;\n                 } else if (splashActivities.isEmpty()) { //process which is has activity but not main UI process\n-                    MatrixLog.i(TAG, \"default splash activity[%s]\", activity);\n                     if (isCreatedByLaunchActivity) {\n                         coldCost = firstScreenCost;\n                     } else {\n-                        firstScreenCost = 0;\n                         coldCost = ActivityThreadHacker.getApplicationCost();\n                     }\n                 } else {\n@@ -144,6 +141,7 @@ public void onActivityFocused(String activity) {\n         } else if (isWarmStartUp()) {\n             isWarmStartUp = false;\n             long warmCost = uptimeMillis() - ActivityThreadHacker.getLastLaunchActivityTime();\n+            MatrixLog.i(TAG, \"#WarmStartup#  warmCost:%d\", activity, warmCost);\n             if (warmCost > 0) {\n                 analyse(0, 0, warmCost, true);\n             }",
      "parent_sha": "fba0bf39b88b7d10b688c79482fdf8571e3e246c"
    }
  },
  {
    "oid": "e00966780544e7a44b7857c555d18dd8c4814081",
    "message": "Update UIThreadMonitor.java (#332)\n\n\u5982\u679cisDevEnv\u4e3atrue\uff0c\u90a3\u4e48\u4f1a\u8fdb\u5165addObserver\u4e2d\uff0c\u6b64\u65f6\u521d\u59cb\u5316\u8fd8\u6ca1\u6709\u5b8c\u6bd5\uff0c\u4f1a\u6267\u884conStart\uff0c\u6b64\u65f6isInit\u4e3afalse\uff0c\u4f1a\u629b\u51fa\u5f02\u5e38",
    "date": "2019-09-23T03:19:34Z",
    "url": "https://github.com/Tencent/matrix/commit/e00966780544e7a44b7857c555d18dd8c4814081",
    "details": {
      "sha": "fdf4b72affeb3725dc6c74551a2b676ee0b0825d",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/UIThreadMonitor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/Tencent/matrix/blob/e00966780544e7a44b7857c555d18dd8c4814081/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fcore%2FUIThreadMonitor.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/e00966780544e7a44b7857c555d18dd8c4814081/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fcore%2FUIThreadMonitor.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fcore%2FUIThreadMonitor.java?ref=e00966780544e7a44b7857c555d18dd8c4814081",
      "patch": "@@ -111,17 +111,17 @@ public void dispatchEnd() {\n             }\n \n         });\n-\n+        this.isInit = true;\n+        MatrixLog.i(TAG, \"[UIThreadMonitor] %s %s %s %s %s frameIntervalNanos:%s\", callbackQueueLock == null, callbackQueues == null, addInputQueue == null, addTraversalQueue == null, addAnimationQueue == null, frameIntervalNanos);\n+        \n         if (config.isDevEnv()) {\n             addObserver(new LooperObserver() {\n                 @Override\n                 public void doFrame(String focusedActivityName, long start, long end, long frameCostMs, long inputCost, long animationCost, long traversalCost) {\n                     MatrixLog.i(TAG, \"activityName[%s] frame cost:%sms [%s|%s|%s]ns\", focusedActivityName, frameCostMs, inputCost, animationCost, traversalCost);\n                 }\n             });\n-        }\n-        MatrixLog.i(TAG, \"[UIThreadMonitor] %s %s %s %s %s frameIntervalNanos:%s\", callbackQueueLock == null, callbackQueues == null, addInputQueue == null, addTraversalQueue == null, addAnimationQueue == null, frameIntervalNanos);\n-        this.isInit = true;\n+        }        \n     }\n \n     private synchronized void addFrameCallback(int type, Runnable callback, boolean isAddHeader) {",
      "parent_sha": "9213d9cb3504b5dc9aa043c04e907f3887eca703"
    }
  },
  {
    "oid": "f72b1595be6dd5874322fab967367e11d0e2b1a2",
    "message": "fix exception:java.lang.NullPointerException: Attempt to invoke virtual method 'boolean java.lang.String.isEmpty()' on a null object reference",
    "date": "2019-08-14T02:11:41Z",
    "url": "https://github.com/Tencent/matrix/commit/f72b1595be6dd5874322fab967367e11d0e2b1a2",
    "details": {
      "sha": "7cb5dce15945cc26af002eb9ea51e951a5df6e58",
      "filename": "matrix/matrix-android/matrix-memory-canary/src/main/java/com/tencent/matrix/memorycanary/core/MemoryCanaryCore.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/f72b1595be6dd5874322fab967367e11d0e2b1a2/matrix%2Fmatrix-android%2Fmatrix-memory-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fmemorycanary%2Fcore%2FMemoryCanaryCore.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/f72b1595be6dd5874322fab967367e11d0e2b1a2/matrix%2Fmatrix-android%2Fmatrix-memory-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fmemorycanary%2Fcore%2FMemoryCanaryCore.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-memory-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fmemorycanary%2Fcore%2FMemoryCanaryCore.java?ref=f72b1595be6dd5874322fab967367e11d0e2b1a2",
      "patch": "@@ -398,7 +398,7 @@ private void fillMemoryInfo(JSONObject json, final MatrixMemoryInfo matrixMemory\n         inner.put(SharePluginInfo.ISSUE_DALVIK_HEAP, matrixMemoryInfo.mDalvikHeap);\n         inner.put(SharePluginInfo.ISSUE_NATIVE_HEAP, matrixMemoryInfo.mNativeHeap);\n         inner.put(SharePluginInfo.ISSUE_VMSIZE, DeviceUtil.getVmSize());\n-        if (!activity.isEmpty()) {\n+        if (null != activity && !activity.isEmpty()) {\n             inner.put(SharePluginInfo.ISSUE_ACTIVITY, activity);\n         }\n         json.put(tag, inner);",
      "parent_sha": "70f480781225a8ecd6ce0fa332df05b365155442"
    }
  },
  {
    "oid": "799600a3d30855c4107e80647ba2a48ba55a9b79",
    "message": "merge-wxperf: FIX: protect from unregistering receiver twice.",
    "date": "2021-04-15T13:39:42Z",
    "url": "https://github.com/Tencent/matrix/commit/799600a3d30855c4107e80647ba2a48ba55a9b79",
    "details": {
      "sha": "4176907cff7f6075efcd54bc4b644c335f769b1f",
      "filename": "matrix/matrix-android/matrix-backtrace/src/main/java/com/tencent/components/backtrace/WarmUpDelegate.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/Tencent/matrix/blob/799600a3d30855c4107e80647ba2a48ba55a9b79/matrix%2Fmatrix-android%2Fmatrix-backtrace%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fcomponents%2Fbacktrace%2FWarmUpDelegate.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/799600a3d30855c4107e80647ba2a48ba55a9b79/matrix%2Fmatrix-android%2Fmatrix-backtrace%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fcomponents%2Fbacktrace%2FWarmUpDelegate.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-backtrace%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fcomponents%2Fbacktrace%2FWarmUpDelegate.java?ref=799600a3d30855c4107e80647ba2a48ba55a9b79",
      "patch": "@@ -505,7 +505,11 @@ public void onReceive(final Context context, final Intent intent) {\n                 case ACTION_WARMED_UP:\n                     WeChatBacktraceNative.setWarmedUp(true);\n                     updateBacktraceMode(mCurrentBacktraceMode);\n-                    context.unregisterReceiver(this);\n+                    try {\n+                        context.unregisterReceiver(this);\n+                    } catch (Throwable e) {\n+                        MatrixLog.printErrStackTrace(TAG, e, \"Unregister receiver twice.\");\n+                    }\n                     break;\n             }\n         }",
      "parent_sha": "0fdce4090a3de409d35e16d798ec917a8ccf5db7"
    }
  },
  {
    "oid": "9bdbffc502d2b522eb1b1e1e2b4a314f8df0e175",
    "message": "Update healthstats feat with proc stats count",
    "date": "2023-01-10T07:32:57Z",
    "url": "https://github.com/Tencent/matrix/commit/9bdbffc502d2b522eb1b1e1e2b4a314f8df0e175",
    "details": {
      "sha": "0d81da45e04358911088bc06c9df8c65ffbc7c45",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/stats/HealthStatsFeature.java",
      "status": "modified",
      "additions": 31,
      "deletions": 1,
      "changes": 32,
      "blob_url": "https://github.com/Tencent/matrix/blob/9bdbffc502d2b522eb1b1e1e2b4a314f8df0e175/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fstats%2FHealthStatsFeature.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/9bdbffc502d2b522eb1b1e1e2b4a314f8df0e175/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fstats%2FHealthStatsFeature.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fstats%2FHealthStatsFeature.java?ref=9bdbffc502d2b522eb1b1e1e2b4a314f8df0e175",
      "patch": "@@ -259,6 +259,11 @@ public HealthStatsSnapshot currHealthStatsSnapshot() {\n                                 snapshot.procStatsCpuFgTimeMs = new HashMap<>();\n                             }\n                             snapshot.procStatsCpuFgTimeMs.put(pkg, DigitEntry.of(HealthStatsHelper.getMeasure(procStats, ProcessHealthStats.MEASUREMENT_FOREGROUND_MS)));\n+\n+                            if (snapshot.procStatsStartCount.isEmpty()) {\n+                                snapshot.procStatsStartCount = new HashMap<>();\n+                            }\n+                            snapshot.procStatsStartCount.put(pkg, DigitEntry.of(HealthStatsHelper.getMeasure(procStats, ProcessHealthStats.MEASUREMENT_STARTS_COUNT)));\n                         }\n                     }\n                 }\n@@ -356,10 +361,13 @@ public static class HealthStatsSnapshot extends Snapshot<HealthStatsSnapshot> {\n         public DigitEntry<Long> procBgMs = DigitEntry.of(0L);\n         public DigitEntry<Long> procCacheMs = DigitEntry.of(0L);\n \n-        // Map\n+        // Map: Nested data in collections\n+        //      Process\n         public Map<String, DigitEntry<Long>> procStatsCpuUsrTimeMs = Collections.emptyMap();\n         public Map<String, DigitEntry<Long>> procStatsCpuSysTimeMs = Collections.emptyMap();\n         public Map<String, DigitEntry<Long>> procStatsCpuFgTimeMs = Collections.emptyMap();\n+        public Map<String, DigitEntry<Long>> procStatsStartCount = Collections.emptyMap();\n+        //     Wakelocks\n         public Map<String, DigitEntry<Long>> tagWakelocksPartialMs = Collections.emptyMap();\n         public Map<String, DigitEntry<Long>> tagWakelocksFullMs = Collections.emptyMap();\n \n@@ -525,6 +533,20 @@ protected HealthStatsSnapshot computeDelta() {\n                         }\n                         delta.procStatsCpuFgTimeMs = map;\n                     }\n+                    {\n+                        Map<String, DigitEntry<Long>> map = new HashMap<>();\n+                        for (Map.Entry<String, DigitEntry<Long>> entry : end.procStatsStartCount.entrySet()) {\n+                            String key = entry.getKey();\n+                            DigitEntry<Long> endEntry = entry.getValue();\n+                            long bgnValue = 0L;\n+                            DigitEntry<Long> bgnEntry = bgn.procStatsStartCount.get(key);\n+                            if (bgnEntry != null) {\n+                                bgnValue = bgnEntry.get();\n+                            }\n+                            map.put(key, Differ.DigitDiffer.globalDiff(DigitEntry.of(bgnValue), endEntry));\n+                        }\n+                        delta.procStatsStartCount = map;\n+                    }\n                     {\n                         Map<String, DigitEntry<Long>> map = new HashMap<>();\n                         for (Map.Entry<String, DigitEntry<Long>> entry : end.tagWakelocksPartialMs.entrySet()) {\n@@ -565,6 +587,7 @@ public Delta<HealthStatsSnapshot> diff(HealthStatsSnapshot bgn) {\n             delta.dlt.procStatsCpuUsrTimeMs = decrease(procStatsCpuUsrTimeMs);\n             delta.dlt.procStatsCpuSysTimeMs = decrease(procStatsCpuSysTimeMs);\n             delta.dlt.procStatsCpuFgTimeMs = decrease(procStatsCpuFgTimeMs);\n+            delta.dlt.procStatsStartCount = decrease(procStatsStartCount);\n             delta.dlt.tagWakelocksPartialMs = decrease(tagWakelocksPartialMs);\n             delta.dlt.tagWakelocksFullMs = decrease(tagWakelocksFullMs);\n             return delta;\n@@ -606,6 +629,7 @@ public AccCollector(HealthStatsSnapshot bgn) {\n                 accDelta.procStatsCpuUsrTimeMs = new HashMap<>();\n                 accDelta.procStatsCpuSysTimeMs = new HashMap<>();\n                 accDelta.procStatsCpuFgTimeMs = new HashMap<>();\n+                accDelta.procStatsStartCount = new HashMap<>();\n                 accDelta.tagWakelocksPartialMs = new HashMap<>();\n                 accDelta.tagWakelocksFullMs = new HashMap<>();\n             }\n@@ -706,6 +730,12 @@ public Delta<HealthStatsSnapshot> collect(HealthStatsSnapshot curr) {\n                         DigitEntry<Long> acc = accDelta.procStatsCpuFgTimeMs.get(key);\n                         accDelta.procStatsCpuFgTimeMs.put(key, DigitEntry.of(val.get() + (acc == null ? 0 : acc.get())));\n                     }\n+                    for (Map.Entry<String, DigitEntry<Long>> entry : delta.dlt.procStatsStartCount.entrySet()) {\n+                        String key = entry.getKey();\n+                        DigitEntry<Long> val = entry.getValue();\n+                        DigitEntry<Long> acc = accDelta.procStatsStartCount.get(key);\n+                        accDelta.procStatsStartCount.put(key, DigitEntry.of(val.get() + (acc == null ? 0 : acc.get())));\n+                    }\n                     for (Map.Entry<String, DigitEntry<Long>> entry : delta.dlt.tagWakelocksPartialMs.entrySet()) {\n                         String key = entry.getKey();\n                         DigitEntry<Long> val = entry.getValue();",
      "parent_sha": "828dc3581d3dc7391667bfbe116621bc476464a4"
    }
  },
  {
    "oid": "9ddbff501e0a4e1fc7f98d95c8d26c1cc1eeb6c7",
    "message": "ResourcePlugin: add issue publishing when processed manual_dump",
    "date": "2021-03-25T13:40:36Z",
    "url": "https://github.com/Tencent/matrix/commit/9ddbff501e0a4e1fc7f98d95c8d26c1cc1eeb6c7",
    "details": {
      "sha": "c8f39b2e97c514e79b67d8c821132c7d98f3d64d",
      "filename": "matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/ManualDumpProcessor.java",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/Tencent/matrix/blob/9ddbff501e0a4e1fc7f98d95c8d26c1cc1eeb6c7/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-android%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2Fprocessor%2FManualDumpProcessor.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/9ddbff501e0a4e1fc7f98d95c8d26c1cc1eeb6c7/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-android%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2Fprocessor%2FManualDumpProcessor.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-android%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2Fprocessor%2FManualDumpProcessor.java?ref=9ddbff501e0a4e1fc7f98d95c8d26c1cc1eeb6c7",
      "patch": "@@ -102,8 +102,9 @@ public boolean process(DestroyedActivityInfo destroyedActivityInfo) {\n         Notification notification = builder.build();\n \n         mNotificationManager.notify(NOTIFICATION_ID + destroyedActivityInfo.mKey.hashCode(), notification);\n+\n+        publishIssue(destroyedActivityInfo.mActivityName, destroyedActivityInfo.mKey);\n         MatrixLog.i(TAG, \"shown notification!!!3\");\n-//        getWatcher().markPublished(destroyedActivityInfo.mActivityName, false); we notify for every leaked instance\n         return true;\n     }\n \n@@ -140,7 +141,7 @@ private ManualDumpData dumpAndAnalyse(String activity, String refString) {\n \n         File file = getHeapDumper().dumpHeap(false);\n         if (file == null || file.length() <= 0) {\n-            publishIssue(SharePluginInfo.IssueType.ERR_FILE_NOT_FOUND, activity, refString, \"file is null\", \"0\");\n+//            publishIssue(SharePluginInfo.IssueType.ERR_FILE_NOT_FOUND, activity, refString, \"file is null\", \"0\");\n             MatrixLog.e(TAG, \"file is null!\");\n             return null;\n         }\n@@ -154,22 +155,22 @@ private ManualDumpData dumpAndAnalyse(String activity, String refString) {\n \n             String refChain = result.toString();\n             if (result.mLeakFound) {\n-                publishIssue(SharePluginInfo.IssueType.LEAK_FOUND, activity, refString, refChain, String.valueOf(System.currentTimeMillis() - dumpBegin));\n+//                publishIssue(SharePluginInfo.IssueType.LEAK_FOUND, activity, refString, refChain, String.valueOf(System.currentTimeMillis() - dumpBegin));\n                 MatrixLog.i(TAG, \"leakFound,refcChain = %s\",refChain);\n                 return new ManualDumpData(file.getAbsolutePath(), refChain);\n             } else {\n                 MatrixLog.i(TAG, \"leak not found\");\n                 return new ManualDumpData(file.getAbsolutePath(), null);\n             }\n         } catch (OutOfMemoryError error) {\n-            publishIssue(SharePluginInfo.IssueType.ERR_ANALYSE_OOM, activity, refString, \"OutOfMemoryError\", \"0\");\n+//            publishIssue(SharePluginInfo.IssueType.ERR_ANALYSE_OOM, activity, refString, \"OutOfMemoryError\", \"0\");\n             MatrixLog.printErrStackTrace(TAG, error.getCause(), \"\");\n         }\n         return null;\n     }\n \n-    private void publishIssue(int issueType, String activity, String refKey, String detail, String cost) {\n-        publishIssue(issueType, ResourceConfig.DumpMode.MANUAL_DUMP, activity, refKey, detail, cost);\n+    private void publishIssue(String activity, String refKey) {\n+        publishIssue(SharePluginInfo.IssueType.LEAK_FOUND, ResourceConfig.DumpMode.MANUAL_DUMP, activity, refKey, \"manual_dump\", \"0\");\n     }\n \n     /**",
      "parent_sha": "1bc29e93fdb3040f61aa3602f2a732ba70debf67"
    }
  },
  {
    "oid": "1fe72232ec63cdd8f6de31a7bb225afb3508f1ad",
    "message": "onAnrDetected callback add cpuset params",
    "date": "2021-12-13T16:22:41Z",
    "url": "https://github.com/Tencent/matrix/commit/1fe72232ec63cdd8f6de31a7bb225afb3508f1ad",
    "details": {
      "sha": "0a6ee352d65e3f2cc725047aaabe5e4ea95e7130",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/SignalAnrTracer.java",
      "status": "modified",
      "additions": 20,
      "deletions": 2,
      "changes": 22,
      "blob_url": "https://github.com/Tencent/matrix/blob/1fe72232ec63cdd8f6de31a7bb225afb3508f1ad/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FSignalAnrTracer.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/1fe72232ec63cdd8f6de31a7bb225afb3508f1ad/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FSignalAnrTracer.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FSignalAnrTracer.java?ref=1fe72232ec63cdd8f6de31a7bb225afb3508f1ad",
      "patch": "@@ -44,6 +44,9 @@\n import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.InputStreamReader;\n import java.lang.reflect.Field;\n import java.util.List;\n \n@@ -66,6 +69,7 @@ public class SignalAnrTracer extends Tracer {\n     public static boolean hasInstance = false;\n     private static long anrMessageWhen = 0L;\n     private static String anrMessageString = \"\";\n+    private static String cpuset = \"\";\n \n     static {\n         System.loadLibrary(\"trace-canary\");\n@@ -110,10 +114,24 @@ public void setSignalAnrDetectedListener(SignalAnrDetectedListener listener) {\n         sSignalAnrDetectedListener = listener;\n     }\n \n+    public static String readCpuSet() {\n+        try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(\"/proc/self/cgroup\")))) {\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                if (line.contains(\"cpuset\") || line.contains(\"cpu\")) {\n+                    return line;\n+                }\n+            }\n+        } catch (Throwable t) {\n+            t.printStackTrace();\n+        }\n+        return \"\";\n+    }\n \n     @RequiresApi(api = Build.VERSION_CODES.M)\n     @Keep\n     private static void onANRDumped() {\n+        cpuset = readCpuSet();\n         currentForeground = AppForegroundUtil.isInterestingToUser();\n         boolean needReport = isMainThreadBlocked();\n \n@@ -151,7 +169,7 @@ private static void report(boolean fromProcessErrorState) {\n         try {\n             String stackTrace = Utils.getMainThreadJavaStackTrace();\n             if (sSignalAnrDetectedListener != null) {\n-                sSignalAnrDetectedListener.onAnrDetected(stackTrace, anrMessageString, anrMessageWhen, fromProcessErrorState);\n+                sSignalAnrDetectedListener.onAnrDetected(stackTrace, anrMessageString, anrMessageWhen, fromProcessErrorState, cpuset);\n                 return;\n             }\n \n@@ -282,6 +300,6 @@ public static void printTrace() {\n     private static native void nativePrintTrace();\n \n     public interface SignalAnrDetectedListener {\n-        void onAnrDetected(String stackTrace, String mMessageString, long mMessageWhen, boolean fromProcessErrorState);\n+        void onAnrDetected(String stackTrace, String mMessageString, long mMessageWhen, boolean fromProcessErrorState, String cpuset);\n     }\n }",
      "parent_sha": "4e6b024cddfb9739e5a99d6e448e35741d384b4d"
    }
  },
  {
    "oid": "7e8d765d5ee2fb988eed51fa87c99b7cf68f581e",
    "message": "fix UnusedResourcesTask const resource id",
    "date": "2019-03-08T08:42:23Z",
    "url": "https://github.com/Tencent/matrix/commit/7e8d765d5ee2fb988eed51fa87c99b7cf68f581e",
    "details": {
      "sha": "45edffab0ed1c424e28d1a130debcc369c01c0c2",
      "filename": "matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnusedResourcesTask.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/Tencent/matrix/blob/7e8d765d5ee2fb988eed51fa87c99b7cf68f581e/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Ftask%2FUnusedResourcesTask.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/7e8d765d5ee2fb988eed51fa87c99b7cf68f581e/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Ftask%2FUnusedResourcesTask.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Ftask%2FUnusedResourcesTask.java?ref=7e8d765d5ee2fb988eed51fa87c99b7cf68f581e",
      "patch": "@@ -332,15 +332,15 @@ private void readSmaliLines(String[] lines) {\n             if (!Util.isNullOrNil(line)) {\n                 if (line.startsWith(\"const\")) {\n                     String[] columns = line.split(\",\");\n-                    if (columns.length == 2) {\n+                    if (columns.length >= 2) {\n                         final String resId = parseResourceId(columns[1].trim());\n                         if (!Util.isNullOrNil(resId) && resourceDefMap.containsKey(resId)) {\n                             resourceRefSet.add(resourceDefMap.get(resId));\n                         }\n                     }\n                 } else if (line.startsWith(\"sget\")) {\n                     String[] columns = line.split(\" \");\n-                    if (columns.length == 3) {\n+                    if (columns.length >= 3) {\n                         final String resourceRef = parseResourceNameFromProguard(columns[2]);\n                         if (!Util.isNullOrNil(resourceRef)) {\n                             Log.d(TAG, \"find resource reference %s\", resourceRef);",
      "parent_sha": "86543cbbb15d6d7b40dece225cce869267aeeaeb"
    }
  },
  {
    "oid": "c61e0b57a9dafa8c8f9ae720c92ae4c5a77bda8b",
    "message": "Fix ClassCastException",
    "date": "2021-06-18T05:43:12Z",
    "url": "https://github.com/Tencent/matrix/commit/c61e0b57a9dafa8c8f9ae720c92ae4c5a77bda8b",
    "details": {
      "sha": "50039a00c41dbe96217264ec49802a87649c0906",
      "filename": "matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/report/FilePublisher.java",
      "status": "modified",
      "additions": 13,
      "deletions": 7,
      "changes": 20,
      "blob_url": "https://github.com/Tencent/matrix/blob/c61e0b57a9dafa8c8f9ae720c92ae4c5a77bda8b/matrix%2Fmatrix-android%2Fmatrix-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Freport%2FFilePublisher.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/c61e0b57a9dafa8c8f9ae720c92ae4c5a77bda8b/matrix%2Fmatrix-android%2Fmatrix-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Freport%2FFilePublisher.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Freport%2FFilePublisher.java?ref=c61e0b57a9dafa8c8f9ae720c92ae4c5a77bda8b",
      "patch": "@@ -19,6 +19,7 @@\n import android.content.Context;\n import android.content.SharedPreferences;\n \n+import com.tencent.matrix.util.MatrixLog;\n import com.tencent.matrix.util.MatrixUtil;\n \n import java.util.HashMap;\n@@ -42,7 +43,8 @@ public FilePublisher(Context context, long expire, String tag, OnIssueDetectList\n         super(issueDetectListener);\n         this.mContext = context;\n         mExpiredTime = expire;\n-        SharedPreferences sharedPreferences = context.getSharedPreferences(tag + MatrixUtil.getProcessName(context), Context.MODE_PRIVATE);\n+        final String spName = \"Matrix_\" + tag + MatrixUtil.getProcessName(context);\n+        SharedPreferences sharedPreferences = context.getSharedPreferences(spName, Context.MODE_PRIVATE);\n         mPublishedMap = new HashMap<>();\n         long current = System.currentTimeMillis();\n         mEditor = sharedPreferences.edit();\n@@ -52,12 +54,16 @@ public FilePublisher(Context context, long expire, String tag, OnIssueDetectList\n         }\n         if (null != spKeys) {\n             for (String key : spKeys) {\n-                long start = sharedPreferences.getLong(key, 0);\n-                long costTime = current - start;\n-                if (start <= 0 || costTime > mExpiredTime) {\n-                    mEditor.remove(key);\n-                } else {\n-                    mPublishedMap.put(key, start);\n+                try {\n+                    long start = sharedPreferences.getLong(key, 0);\n+                    long costTime = current - start;\n+                    if (start <= 0 || costTime > mExpiredTime) {\n+                        mEditor.remove(key);\n+                    } else {\n+                        mPublishedMap.put(key, start);\n+                    }\n+                } catch (ClassCastException e) {\n+                    MatrixLog.printErrStackTrace(TAG, e, \"might be polluted - sp: %s, key: %s, value : %s\", spName, key, sharedPreferences.getAll().get(key));\n                 }\n             }\n         }",
      "parent_sha": "642691667bc37896f8ba70d5a5b45964b1803f86"
    }
  },
  {
    "oid": "7be298ca1d3b4adb48c54854bafb47ba95a38731",
    "message": "Remove hardcode",
    "date": "2020-12-25T09:31:19Z",
    "url": "https://github.com/Tencent/matrix/commit/7be298ca1d3b4adb48c54854bafb47ba95a38731",
    "details": {
      "sha": "c18f16f0ffa205359a3353ee2331b491443e8fdd",
      "filename": "wxperf-backtrace/src/main/java/com/tencent/components/backtrace/WeChatBacktrace.java",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/Tencent/matrix/blob/7be298ca1d3b4adb48c54854bafb47ba95a38731/wxperf-backtrace%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fcomponents%2Fbacktrace%2FWeChatBacktrace.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/7be298ca1d3b4adb48c54854bafb47ba95a38731/wxperf-backtrace%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fcomponents%2Fbacktrace%2FWeChatBacktrace.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/wxperf-backtrace%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fcomponents%2Fbacktrace%2FWeChatBacktrace.java?ref=7be298ca1d3b4adb48c54854bafb47ba95a38731",
      "patch": "@@ -74,7 +74,7 @@ public static String getSystemLibraryPath() {\n     private final static int MSG_WARM_UP = 1;\n     private final static int MSG_CONSUME_REQ_QUT = 2;\n     private final static int MSG_CLEAN_UP = 3;\n-    private final static int MSG_WARM_UP_FAKE = 4;\n+//    private final static int MSG_WARM_UP_FAKE = 4;\n \n     private volatile boolean mInitialized;\n     private volatile boolean mConfigured;\n@@ -95,7 +95,8 @@ public interface LibraryLoader {\n     public boolean handleMessage(Message msg) {\n         switch (msg.what) {\n             case MSG_WARM_UP:\n-            case MSG_WARM_UP_FAKE: {    // MSG_WARM_UP_FAKE will be removed later\n+//            case MSG_WARM_UP_FAKE: // MSG_WARM_UP_FAKE will be removed later\n+            {\n                 CancellationSignal cs = (CancellationSignal) msg.obj;\n                 warmingUp(cs);\n                 break;\n@@ -359,14 +360,14 @@ private void iterateTargetDirectory(File target, CancellationSignal cs, FileFilt\n         }\n     }\n \n-    // TODO For debug\n-    final CancellationSignal fakeCS = new CancellationSignal();\n+//    // TODO For debug\n+//    final CancellationSignal fakeCS = new CancellationSignal();\n \n     private void warmingUp(final CancellationSignal cs) {\n \n-        if (fakeCS != cs) {\n-            return;\n-        }\n+//        if (fakeCS != cs) {\n+//            return;\n+//        }\n \n         mThreadTaskExecutor.arrangeTask(new Runnable() {\n             @Override\n@@ -722,12 +723,12 @@ private void configure(Configuration configuration) {\n \n         mConfigured = true;\n \n-        if (configuration.mIsWarmUpProcess && !hasWarmedUp()) {\n-            mIdleHandler.sendMessageDelayed(\n-                    Message.obtain(mIdleHandler, MSG_WARM_UP_FAKE, fakeCS),\n-                    DELAY_WARM_UP * 1\n-            );\n-        }\n+//        if (configuration.mIsWarmUpProcess && !hasWarmedUp()) {\n+//            mIdleHandler.sendMessageDelayed(\n+//                    Message.obtain(mIdleHandler, MSG_WARM_UP_FAKE, fakeCS),\n+//                    DELAY_WARM_UP * 1\n+//            );\n+//        }\n     }\n \n     public enum Mode {",
      "parent_sha": "a5676152015c86e1800e6051644c6b79950642a2"
    }
  },
  {
    "oid": "f8a55208b5a017f1333c65f54ee7461bac10ce4f",
    "message": "change matrixlog",
    "date": "2021-06-17T15:19:13Z",
    "url": "https://github.com/Tencent/matrix/commit/f8a55208b5a017f1333c65f54ee7461bac10ce4f",
    "details": {
      "sha": "e8f4602415b989c375db4c07c12541a0f184ff4b",
      "filename": "matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/OpenglLeakPlugin.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/Tencent/matrix/blob/f8a55208b5a017f1333c65f54ee7461bac10ce4f/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2FOpenglLeakPlugin.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/f8a55208b5a017f1333c65f54ee7461bac10ce4f/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2FOpenglLeakPlugin.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2FOpenglLeakPlugin.java?ref=f8a55208b5a017f1333c65f54ee7461bac10ce4f",
      "patch": "@@ -15,11 +15,11 @@\n import com.tencent.matrix.openglleak.hook.OpenGLInfo;\n import com.tencent.matrix.openglleak.listener.LeakMonitor;\n import com.tencent.matrix.openglleak.utils.EGLHelper;\n-import com.tencent.matrix.openglleak.utils.OpenGLLeakMonitorLog;\n import com.tencent.matrix.plugin.Plugin;\n import com.tencent.matrix.plugin.PluginListener;\n \n import com.tencent.matrix.openglleak.detector.OpenglIndexDetectorService;\n+import com.tencent.matrix.util.MatrixLog;\n \n import java.util.Map;\n \n@@ -50,27 +50,27 @@ public void run() {\n         }).start();\n     }\n \n-    public void _start() {\n+    private void _start() {\n         Intent service = new Intent(context, OpenglIndexDetectorService.class);\n         context.bindService(service, new ServiceConnection() {\n             @Override\n             public void onServiceConnected(ComponentName componentName, IBinder iBinder) {\n-                OpenGLLeakMonitorLog.i(TAG, \"onServiceConnected\");\n+                MatrixLog.i(TAG, \"onServiceConnected\");\n                 IOpenglIndexDetector ipc = IOpenglIndexDetector.Stub.asInterface(iBinder);\n \n                 try {\n                     // \u901a\u8fc7\u5b9e\u9a8c\u8fdb\u7a0b\u83b7\u53d6 index\n                     Map<String, Integer> map = ipc.seekIndex();\n                     if (map == null) {\n-                        OpenGLLeakMonitorLog.e(TAG, \"indexMap null\");\n+                        MatrixLog.e(TAG, \"indexMap null\");\n                         return;\n                     }\n-                    OpenGLLeakMonitorLog.i(TAG, \"indexMap:\" + map);\n+                    MatrixLog.i(TAG, \"indexMap:\" + map);\n \n                     // \u521d\u59cb\u5316\n                     EGLHelper.initOpenGL();\n                     OpenGLHook.getInstance().init();\n-                    OpenGLLeakMonitorLog.i(TAG, \"init env\");\n+                    MatrixLog.i(TAG, \"init env\");\n \n                     // hook\n                     OpenGLHook.getInstance().hook(FuncNameString.GL_GEN_TEXTURES, map.get(FuncNameString.GL_GEN_TEXTURES));\n@@ -81,7 +81,7 @@ public void onServiceConnected(ComponentName componentName, IBinder iBinder) {\n                     OpenGLHook.getInstance().hook(FuncNameString.GL_DELETE_FRAMEBUFFERS, map.get(FuncNameString.GL_DELETE_FRAMEBUFFERS));\n                     OpenGLHook.getInstance().hook(FuncNameString.GL_GEN_RENDERBUFFERS, map.get(FuncNameString.GL_GEN_RENDERBUFFERS));\n                     OpenGLHook.getInstance().hook(FuncNameString.GL_DELETE_RENDERBUFFERS, map.get(FuncNameString.GL_DELETE_RENDERBUFFERS));\n-                    OpenGLLeakMonitorLog.i(TAG, \"hook finish\");\n+                    MatrixLog.i(TAG, \"hook finish\");\n \n                     // \u6cc4\u6f0f\u76d1\u63a7\n                     LeakMonitor.getInstance().start((Application) context.getApplicationContext());\n@@ -101,7 +101,7 @@ public void onLeak(OpenGLInfo info) {\n                 } finally {\n                     // \u9500\u6bc1\u5b9e\u9a8c\u8fdb\u7a0b\n                     try {\n-                        OpenGLLeakMonitorLog.i(TAG, \"destory test process\");\n+                        MatrixLog.i(TAG, \"destory test process\");\n                         ipc.destory();\n                     } catch (RemoteException e) {\n                         e.printStackTrace();",
      "parent_sha": "8609909be7d6dbb051a08bbb847a0bc9dc1233e9"
    }
  },
  {
    "oid": "f9638c90293800d8902bad45859df8b9031d97d3",
    "message": "Feature/dev williamjin (#352)\n\n* fix removeUnusedResources variant\r\n\r\n* fix UnusedResourcesTask array-data",
    "date": "2019-09-12T09:20:58Z",
    "url": "https://github.com/Tencent/matrix/commit/f9638c90293800d8902bad45859df8b9031d97d3",
    "details": {
      "sha": "f440ca634523d164e1a23f4a75fab2f323aee692",
      "filename": "matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnusedResourcesTask.java",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/Tencent/matrix/blob/f9638c90293800d8902bad45859df8b9031d97d3/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Ftask%2FUnusedResourcesTask.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/f9638c90293800d8902bad45859df8b9031d97d3/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Ftask%2FUnusedResourcesTask.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Ftask%2FUnusedResourcesTask.java?ref=f9638c90293800d8902bad45859df8b9031d97d3",
      "patch": "@@ -332,7 +332,7 @@ private void readSmaliLines(String[] lines) {\n                 } else if (line.startsWith(\"sget\")) {\n                     String[] columns = line.split(\" \");\n                     if (columns.length >= 3) {\n-                        final String resourceRef = parseResourceNameFromProguard(columns[2]);\n+                        final String resourceRef = parseResourceNameFromProguard(columns[2].trim());\n                         if (!Util.isNullOrNil(resourceRef)) {\n                             Log.d(TAG, \"find resource reference %s\", resourceRef);\n                             if (styleableMap.containsKey(resourceRef)) {\n@@ -351,10 +351,13 @@ private void readSmaliLines(String[] lines) {\n                     arrayData = false;\n                 } else  {\n                     if (arrayData) {\n-                        final String resId = parseResourceId(line);\n-                        if (!Util.isNullOrNil(resId) && resourceDefMap.containsKey(resId)) {\n-                            Log.d(TAG, \"array field resource, %s\", resId);\n-                            resourceRefSet.add(resourceDefMap.get(resId));\n+                        String[] columns = line.split(\" \");\n+                        if (columns.length > 0) {\n+                            final String resId = parseResourceId(columns[0].trim());\n+                            if (!Util.isNullOrNil(resId) && resourceDefMap.containsKey(resId)) {\n+                                Log.d(TAG, \"array field resource, %s\", resId);\n+                                resourceRefSet.add(resourceDefMap.get(resId));\n+                            }\n                         }\n                     }\n                 }",
      "parent_sha": "722f1d015d93ea28f396e5b4bc99dc8b46b65fc9"
    }
  },
  {
    "oid": "7d29406d98f2177d3cd89e5ca7d5489b5e33feff",
    "message": "fix ConcurrentModificationException crash",
    "date": "2021-12-02T03:35:14Z",
    "url": "https://github.com/Tencent/matrix/commit/7d29406d98f2177d3cd89e5ca7d5489b5e33feff",
    "details": {
      "sha": "f46451a23111e2a412ef33be4f432ac05daecc1c",
      "filename": "matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/ResRecordManager.java",
      "status": "modified",
      "additions": 22,
      "deletions": 12,
      "changes": 34,
      "blob_url": "https://github.com/Tencent/matrix/blob/7d29406d98f2177d3cd89e5ca7d5489b5e33feff/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FResRecordManager.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/7d29406d98f2177d3cd89e5ca7d5489b5e33feff/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FResRecordManager.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FResRecordManager.java?ref=7d29406d98f2177d3cd89e5ca7d5489b5e33feff",
      "patch": "@@ -37,9 +37,11 @@ public void run() {\n                     mInfoList.add(gen);\n                 }\n \n-                for (Callback cb : mCallbackList) {\n-                    if (null != cb) {\n-                        cb.gen(gen);\n+                synchronized (mCallbackList) {\n+                    for (Callback cb : mCallbackList) {\n+                        if (null != cb) {\n+                            cb.gen(gen);\n+                        }\n                     }\n                 }\n             }\n@@ -75,9 +77,11 @@ public void run() {\n                     mInfoList.remove(del);\n                 }\n \n-                for (Callback cb : mCallbackList) {\n-                    if (null != cb) {\n-                        cb.delete(del);\n+                synchronized (mCallbackList) {\n+                    for (Callback cb : mCallbackList) {\n+                        if (null != cb) {\n+                            cb.delete(del);\n+                        }\n                     }\n                 }\n             }\n@@ -113,18 +117,22 @@ protected void registerCallback(Callback callback) {\n             return;\n         }\n \n-        if (mCallbackList.contains(callback)) {\n-            return;\n-        }\n+        synchronized (mCallbackList) {\n+            if (mCallbackList.contains(callback)) {\n+                return;\n+            }\n \n-        mCallbackList.add(callback);\n+            mCallbackList.add(callback);\n+        }\n     }\n \n     protected void unregisterCallback(Callback callback) {\n         if (null == callback) {\n             return;\n         }\n-        mCallbackList.remove(callback);\n+        synchronized (mCallbackList) {\n+            mCallbackList.remove(callback);\n+        }\n     }\n \n     public boolean isGLInfoRelease(OpenGLInfo item) {\n@@ -134,7 +142,9 @@ public boolean isGLInfoRelease(OpenGLInfo item) {\n     }\n \n     public void clear() {\n-        mInfoList.clear();\n+        synchronized (mInfoList) {\n+            mInfoList.clear();\n+        }\n     }\n \n     interface Callback {",
      "parent_sha": "ae753ec2052f4811b11d570e2b41fe2c0d126dcf"
    }
  },
  {
    "oid": "22eeff9483a266858997ce49cd130c6c1dd50158",
    "message": "update matrix version for build opt",
    "date": "2019-03-20T03:44:52Z",
    "url": "https://github.com/Tencent/matrix/commit/22eeff9483a266858997ce49cd130c6c1dd50158",
    "details": {
      "sha": "3fb536430d854a6acd8e28db93a26e802e80c272",
      "filename": "matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/transform/MatrixTraceTransform.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/Tencent/matrix/blob/22eeff9483a266858997ce49cd130c6c1dd50158/matrix%2Fmatrix-android%2Fmatrix-gradle-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftransform%2FMatrixTraceTransform.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/22eeff9483a266858997ce49cd130c6c1dd50158/matrix%2Fmatrix-android%2Fmatrix-gradle-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftransform%2FMatrixTraceTransform.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-gradle-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftransform%2FMatrixTraceTransform.java?ref=22eeff9483a266858997ce49cd130c6c1dd50158",
      "patch": "@@ -437,7 +437,7 @@ private void handle() throws IllegalAccessException, NoSuchFieldException, Class\n                 }\n \n             } else {\n-                Log.i(TAG,\"Special case for WeChat AutoDex. Its rootInput jar file is actually a txt file contains path list.\");\n+                Log.i(TAG, \"Special case for WeChat AutoDex. Its rootInput jar file is actually a txt file contains path list.\");\n                 // Special case for WeChat AutoDex. Its rootInput jar file is actually\n                 // a txt file contains path list.\n                 BufferedReader br = null;\n@@ -450,18 +450,18 @@ private void handle() throws IllegalAccessException, NoSuchFieldException, Class\n                         // src jar.\n                         final File realJarInput = new File(realJarInputFullPath);\n                         // dest jar, moved to extra guard intermediate output dir.\n-                        File realJarOutput = new File(traceClassOut, realJarInput.getName());\n+                        final File realJarOutput = new File(traceClassOut, getUniqueJarName(realJarInput));\n \n                         if (realJarInput.exists() && IOUtil.isRealZipOrJar(realJarInput)) {\n                             jarInputOutMap.put(realJarInput, realJarOutput);\n                         } else {\n                             realJarOutput.delete();\n                             if (realJarInput.exists() && realJarInput.isDirectory()) {\n-                                realJarOutput = new File(traceClassOut, realJarInput.getName());\n+                                File realJarOutputDir = new File(traceClassOut, realJarInput.getName());\n                                 if (!realJarOutput.exists()) {\n                                     realJarOutput.mkdirs();\n                                 }\n-                                dirInputOutMap.put(realJarInput, realJarOutput);\n+                                dirInputOutMap.put(realJarInput, realJarOutputDir);\n                             }\n \n                         }",
      "parent_sha": "f4c247484da79bc016f2ec7a8786ef4f85711941"
    }
  },
  {
    "oid": "951df4711c1fd8038ce5f0810dd7cd462e8859dd",
    "message": "fix FindNonAlphaPngTask NullPointerException",
    "date": "2019-01-03T12:34:44Z",
    "url": "https://github.com/Tencent/matrix/commit/951df4711c1fd8038ce5f0810dd7cd462e8859dd",
    "details": {
      "sha": "a554e491bc4ca1cf99652ef8c5a49db8d5231b52",
      "filename": "matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/FindNonAlphaPngTask.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/951df4711c1fd8038ce5f0810dd7cd462e8859dd/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Ftask%2FFindNonAlphaPngTask.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/951df4711c1fd8038ce5f0810dd7cd462e8859dd/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Ftask%2FFindNonAlphaPngTask.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Ftask%2FFindNonAlphaPngTask.java?ref=951df4711c1fd8038ce5f0810dd7cd462e8859dd",
      "patch": "@@ -97,7 +97,7 @@ private void findNonAlphaPng(File file) throws IOException {\n                 }\n             } else if (file.isFile() && file.getName().endsWith(ApkConstants.PNG_FILE_SUFFIX) && !file.getName().endsWith(ApkConstants.NINE_PNG)) {\n                 BufferedImage bufferedImage = ImageIO.read(file);\n-                if (!bufferedImage.getColorModel().hasAlpha()) {\n+                if (bufferedImage != null && bufferedImage.getColorModel() != null && !bufferedImage.getColorModel().hasAlpha()) {\n                     String filename = file.getAbsolutePath().substring(inputFile.getAbsolutePath().length() + 1);\n                     if (entryNameMap.containsKey(filename)) {\n                         filename = entryNameMap.get(filename);",
      "parent_sha": "36afa0a663c1ae19e7dbf9153f2d2ec9b0c34ccc"
    }
  },
  {
    "oid": "faf4af598b7a35d259e1c7314cfd325b25efa2c5",
    "message": "modify ReflectUtils",
    "date": "2020-03-20T13:19:46Z",
    "url": "https://github.com/Tencent/matrix/commit/faf4af598b7a35d259e1c7314cfd325b25efa2c5",
    "details": {
      "sha": "2c09b90dc228b44f4febcc382ecc5916d328c687",
      "filename": "matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/ReflectUtils.java",
      "status": "modified",
      "additions": 33,
      "deletions": 16,
      "changes": 49,
      "blob_url": "https://github.com/Tencent/matrix/blob/faf4af598b7a35d259e1c7314cfd325b25efa2c5/matrix%2Fmatrix-android%2Fmatrix-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Futil%2FReflectUtils.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/faf4af598b7a35d259e1c7314cfd325b25efa2c5/matrix%2Fmatrix-android%2Fmatrix-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Futil%2FReflectUtils.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Futil%2FReflectUtils.java?ref=faf4af598b7a35d259e1c7314cfd325b25efa2c5",
      "patch": "@@ -27,41 +27,58 @@ public static <T> T invoke(Class<?> clazz, String methodName, Object instance, O\n     }\n \n \n-    public static <T> T reflectObject(Object instance, String name, T defaultValue) {\n+    public static <T> T reflectObject(Object instance, String name, T defaultValue, boolean isHard) {\n         if (null == instance) return defaultValue;\n-        try {\n-            Field field = instance.getClass().getDeclaredField(name);\n-            field.setAccessible(true);\n-            return (T) field.get(instance);\n-        } catch (Exception e) {\n+        if (isHard) {\n             try {\n                 Method getDeclaredField = Class.class.getDeclaredMethod(\"getDeclaredField\", String.class);\n                 Field field = (Field) getDeclaredField.invoke(instance.getClass(), name);\n                 field.setAccessible(true);\n                 return (T) field.get(instance);\n-            } catch (Exception ex) {\n-                MatrixLog.e(TAG, ex.toString() + \"\\n%s\", MatrixUtil.printException(ex));\n+            } catch (Exception e) {\n+                MatrixLog.e(TAG, e.toString() + \"isHard=%s\\n%s\", true, MatrixUtil.printException(e));\n+            }\n+        } else {\n+            try {\n+                Field field = instance.getClass().getDeclaredField(name);\n+                field.setAccessible(true);\n+                return (T) field.get(instance);\n+            } catch (Exception e) {\n+                MatrixLog.e(TAG, e.toString() + \"isHard=%s\\n%s\", false, MatrixUtil.printException(e));\n             }\n         }\n         return defaultValue;\n     }\n \n-    public static Method reflectMethod(Object instance, String name, Class<?>... argTypes) {\n-        try {\n-            Method method = instance.getClass().getDeclaredMethod(name, argTypes);\n-            method.setAccessible(true);\n-            return method;\n-        } catch (Exception e) {\n+    public static <T> T reflectObject(Object instance, String name, T defaultValue) {\n+        return reflectObject(instance, name, defaultValue);\n+    }\n+\n+    public static Method reflectMethod(Object instance, boolean isHard, String name, Class<?>... argTypes) {\n+        if (isHard) {\n             try {\n                 Method getDeclaredMethod = Class.class.getDeclaredMethod(\"getDeclaredMethod\", String.class, Class[].class);\n                 Method method = (Method) getDeclaredMethod.invoke(instance.getClass(), name, argTypes);\n                 method.setAccessible(true);\n                 return method;\n-            } catch (Exception ex) {\n-                MatrixLog.e(TAG, ex.toString() + \"\\n%s\", MatrixUtil.printException(ex));\n+            } catch (Exception e) {\n+                MatrixLog.e(TAG, e.toString() + \"isHard=%s\\n%s\", true, MatrixUtil.printException(e));\n             }\n+        } else {\n+            try {\n+                Method method = instance.getClass().getDeclaredMethod(name, argTypes);\n+                method.setAccessible(true);\n+                return method;\n+            } catch (Exception e) {\n+                MatrixLog.e(TAG, e.toString() + \"isHard=%s\\n%s\", false, MatrixUtil.printException(e));\n+            }\n+\n         }\n         return null;\n     }\n \n+    public static Method reflectMethod(Object instance, String name, Class<?>... argTypes) {\n+        return reflectMethod(instance, true, name, argTypes);\n+    }\n+\n }",
      "parent_sha": "d4afb3920c025770c8186036c08ec9956571f83e"
    }
  },
  {
    "oid": "8d9329e9b30a1225149b07326d8bb8bf57f31415",
    "message": "Update indicator proc cfg",
    "date": "2022-02-25T12:45:02Z",
    "url": "https://github.com/Tencent/matrix/commit/8d9329e9b30a1225149b07326d8bb8bf57f31415",
    "details": {
      "sha": "9a1329cd2843d185cdcf92de647b3d9f5273c858",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/shell/ui/TopThreadIndicator.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/Tencent/matrix/blob/8d9329e9b30a1225149b07326d8bb8bf57f31415/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fshell%2Fui%2FTopThreadIndicator.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/8d9329e9b30a1225149b07326d8bb8bf57f31415/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fshell%2Fui%2FTopThreadIndicator.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fshell%2Fui%2FTopThreadIndicator.java?ref=8d9329e9b30a1225149b07326d8bb8bf57f31415",
      "patch": "@@ -231,9 +231,10 @@ public boolean show(Context context) {\n                 entryItemView.setVisibility(View.GONE);\n                 entryGroup.addView(entryItemView, layoutParams);\n             }\n-\n             final TextView tvPid = mRootView.findViewById(R.id.tv_pid);\n             tvPid.setText(String.valueOf(mCurrProc.first));\n+            final TextView tvProc = mRootView.findViewById(R.id.tv_proc);\n+            tvProc.setText(mCurrProc.second);\n \n             // drag\n             mRootView.setOnTouchListener(new View.OnTouchListener() {",
      "parent_sha": "f0404db6befba5c0a9b1f11f0c84fdc5db8d2711"
    }
  },
  {
    "oid": "0f7a32773ae0ac02b836bd9be7bb6f7f468eb7fb",
    "message": "fix MethodTracer trace exception",
    "date": "2019-01-03T12:17:48Z",
    "url": "https://github.com/Tencent/matrix/commit/0f7a32773ae0ac02b836bd9be7bb6f7f468eb7fb",
    "details": {
      "sha": "769e611d2843aef75f11a63dcc382f471f8490ae",
      "filename": "matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/MethodTracer.java",
      "status": "modified",
      "additions": 15,
      "deletions": 2,
      "changes": 17,
      "blob_url": "https://github.com/Tencent/matrix/blob/0f7a32773ae0ac02b836bd9be7bb6f7f468eb7fb/matrix%2Fmatrix-android%2Fmatrix-gradle-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2FMethodTracer.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/0f7a32773ae0ac02b836bd9be7bb6f7f468eb7fb/matrix%2Fmatrix-android%2Fmatrix-gradle-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2FMethodTracer.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-gradle-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2FMethodTracer.java?ref=0f7a32773ae0ac02b836bd9be7bb6f7f468eb7fb",
      "patch": "@@ -31,7 +31,10 @@\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n+import java.io.IOException;\n import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.StandardCopyOption;\n import java.util.ArrayList;\n import java.util.Enumeration;\n import java.util.HashMap;\n@@ -133,7 +136,12 @@ private void innerTraceMethodFromSrc(File input, File output) {\n                     FileUtil.copyFileUsingStream(classFile, changedFileOutput);\n                 }\n             } catch (Exception e) {\n-                e.printStackTrace();\n+                Log.e(TAG, \"[innerTraceMethodFromSrc] input:%s e:%s\", input.getName(), e);\n+                try {\n+                    Files.copy(input.toPath(), output.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+                } catch (Exception e1) {\n+                    e1.printStackTrace();\n+                }\n             } finally {\n                 try {\n                     is.close();\n@@ -172,7 +180,12 @@ private void innerTraceMethodFromJar(File input, File output) {\n                 }\n             }\n         } catch (Exception e) {\n-            Log.e(TAG, \"[traceMethodFromJar] err! %s\", output.getAbsolutePath());\n+            Log.e(TAG, \"[innerTraceMethodFromJar] input:%s e:%s\", input.getName(), e);\n+            try {\n+                Files.copy(input.toPath(), output.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+            } catch (Exception e1) {\n+                e1.printStackTrace();\n+            }\n         } finally {\n             try {\n                 if (zipOutputStream != null) {",
      "parent_sha": "6ddd99fa900518d5f66f21529b14f08812e6d1b5"
    }
  },
  {
    "oid": "227bcafa2ed77cf2012a1d9f9b1d30e113fc5027",
    "message": "Update battery ble hook with protect",
    "date": "2021-02-07T06:48:35Z",
    "url": "https://github.com/Tencent/matrix/commit/227bcafa2ed77cf2012a1d9f9b1d30e113fc5027",
    "details": {
      "sha": "17471b0e04d0d6077a3a651c6e338e21db739341",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/utils/BluetoothManagerServiceHooker.java",
      "status": "modified",
      "additions": 20,
      "deletions": 10,
      "changes": 30,
      "blob_url": "https://github.com/Tencent/matrix/blob/227bcafa2ed77cf2012a1d9f9b1d30e113fc5027/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FBluetoothManagerServiceHooker.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/227bcafa2ed77cf2012a1d9f9b1d30e113fc5027/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FBluetoothManagerServiceHooker.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FBluetoothManagerServiceHooker.java?ref=227bcafa2ed77cf2012a1d9f9b1d30e113fc5027",
      "patch": "@@ -142,38 +142,42 @@ private static void checkUnHook() {\n     }\n \n     private static Object proxyBluetooth(final Object delegate) {\n-        Object proxy = null;\n         try {\n             @SuppressLint(\"PrivateApi\")\n             final Class<?> clazz = Class.forName(\"android.bluetooth.IBluetooth\");\n             final Class<?>[] interfaces = new Class<?>[]{IBinder.class, IInterface.class, clazz};\n             final ClassLoader loader = delegate.getClass().getClassLoader();\n             final InvocationHandler handler = new InvocationHandler() {\n                 @Override\n-                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+                public Object invoke(Object proxy, Method method, Object[] args) {\n                     if (\"startDiscovery\".equals(method.getName())) {\n                         dispatchStartDiscovery();\n                     }\n-                    return method.invoke(delegate, args);\n+\n+                    try {\n+                        return method.invoke(proxy, args);\n+                    } catch (Throwable e) {\n+                        MatrixLog.printErrStackTrace(TAG, e, \"invokeBluetooth fail\");\n+                        return null;\n+                    }\n                 }\n             };\n-            proxy = Proxy.newProxyInstance(loader, interfaces, handler);\n+            return Proxy.newProxyInstance(loader, interfaces, handler);\n         } catch (Throwable e) {\n             MatrixLog.printErrStackTrace(TAG, e, \"proxyBluetooth fail\");\n         }\n-        return proxy;\n+        return null;\n     }\n \n     private static Object proxyBluetoothGatt(final Object delegate) {\n-        Object proxy = null;\n         try {\n             @SuppressLint(\"PrivateApi\")\n             final Class<?> clazz = Class.forName(\"android.bluetooth.IBluetoothGatt\");\n             final Class<?>[] interfaces = new Class<?>[]{IBinder.class, IInterface.class, clazz};\n             final ClassLoader loader = delegate.getClass().getClassLoader();\n             final InvocationHandler handler = new InvocationHandler() {\n                 @Override\n-                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+                public Object invoke(Object proxy, Method method, Object[] args) {\n                     if (\"registerScanner\".equals(method.getName())) {\n                         dispatchRegisterScanner();\n \n@@ -204,14 +208,20 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n                         }\n                         dispatchStartScanForIntent(scanSettings);\n                     }\n-                    return method.invoke(delegate, args);\n+\n+                    try {\n+                        return method.invoke(proxy, args);\n+                    } catch (Throwable e) {\n+                        MatrixLog.printErrStackTrace(TAG, e, \"invokeBluetoothGatt fail\");\n+                        return null;\n+                    }\n                 }\n             };\n-            proxy = Proxy.newProxyInstance(loader, interfaces, handler);\n+            return Proxy.newProxyInstance(loader, interfaces, handler);\n         } catch (Throwable e) {\n             MatrixLog.printErrStackTrace(TAG, e, \"proxyBluetoothGatt fail\");\n         }\n-        return proxy;\n+        return null;\n     }\n \n     private static void dispatchStartDiscovery() {",
      "parent_sha": "95521845c120d0341ed85b0b5ea68e068e4d99b6"
    }
  },
  {
    "oid": "e715e5ee764c544282ec27ea2b26285527c96423",
    "message": "fix UnusedResourcesTask array-data",
    "date": "2019-09-12T07:16:07Z",
    "url": "https://github.com/Tencent/matrix/commit/e715e5ee764c544282ec27ea2b26285527c96423",
    "details": {
      "sha": "f440ca634523d164e1a23f4a75fab2f323aee692",
      "filename": "matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnusedResourcesTask.java",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/Tencent/matrix/blob/e715e5ee764c544282ec27ea2b26285527c96423/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Ftask%2FUnusedResourcesTask.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/e715e5ee764c544282ec27ea2b26285527c96423/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Ftask%2FUnusedResourcesTask.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Ftask%2FUnusedResourcesTask.java?ref=e715e5ee764c544282ec27ea2b26285527c96423",
      "patch": "@@ -332,7 +332,7 @@ private void readSmaliLines(String[] lines) {\n                 } else if (line.startsWith(\"sget\")) {\n                     String[] columns = line.split(\" \");\n                     if (columns.length >= 3) {\n-                        final String resourceRef = parseResourceNameFromProguard(columns[2]);\n+                        final String resourceRef = parseResourceNameFromProguard(columns[2].trim());\n                         if (!Util.isNullOrNil(resourceRef)) {\n                             Log.d(TAG, \"find resource reference %s\", resourceRef);\n                             if (styleableMap.containsKey(resourceRef)) {\n@@ -351,10 +351,13 @@ private void readSmaliLines(String[] lines) {\n                     arrayData = false;\n                 } else  {\n                     if (arrayData) {\n-                        final String resId = parseResourceId(line);\n-                        if (!Util.isNullOrNil(resId) && resourceDefMap.containsKey(resId)) {\n-                            Log.d(TAG, \"array field resource, %s\", resId);\n-                            resourceRefSet.add(resourceDefMap.get(resId));\n+                        String[] columns = line.split(\" \");\n+                        if (columns.length > 0) {\n+                            final String resId = parseResourceId(columns[0].trim());\n+                            if (!Util.isNullOrNil(resId) && resourceDefMap.containsKey(resId)) {\n+                                Log.d(TAG, \"array field resource, %s\", resId);\n+                                resourceRefSet.add(resourceDefMap.get(resId));\n+                            }\n                         }\n                     }\n                 }",
      "parent_sha": "2bebbf407fd2e764c5fe7e510ed407d65da0f818"
    }
  },
  {
    "oid": "d45e7fc309ccbeb5ea9e5ad179662f7408e919c5",
    "message": "remove some unnecessary steps in UIThreadMonitor",
    "date": "2021-09-09T07:48:56Z",
    "url": "https://github.com/Tencent/matrix/commit/d45e7fc309ccbeb5ea9e5ad179662f7408e919c5",
    "details": {
      "sha": "29d2b19dadf5ef0d88733612875e30134b56c37b",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/UIThreadMonitor.java",
      "status": "modified",
      "additions": 19,
      "deletions": 13,
      "changes": 32,
      "blob_url": "https://github.com/Tencent/matrix/blob/d45e7fc309ccbeb5ea9e5ad179662f7408e919c5/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fcore%2FUIThreadMonitor.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/d45e7fc309ccbeb5ea9e5ad179662f7408e919c5/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fcore%2FUIThreadMonitor.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fcore%2FUIThreadMonitor.java?ref=d45e7fc309ccbeb5ea9e5ad179662f7408e919c5",
      "patch": "@@ -253,25 +253,30 @@ private void dispatchEnd() {\n         if (config.isDevEnv()) {\n             traceBegin = System.nanoTime();\n         }\n-        long startNs = token;\n-        long intendedFrameTimeNs = startNs;\n-        if (isVsyncFrame) {\n-            doFrameEnd(token);\n-            intendedFrameTimeNs = getIntendedFrameTimeNs(startNs);\n-        }\n \n-        long endNs = System.nanoTime();\n+        if (config.isFPSEnable()) {\n+            long startNs = token;\n+            long intendedFrameTimeNs = startNs;\n+            if (isVsyncFrame) {\n+                doFrameEnd(token);\n+                intendedFrameTimeNs = getIntendedFrameTimeNs(startNs);\n+            }\n \n-        synchronized (observers) {\n-            for (LooperObserver observer : observers) {\n-                if (observer.isDispatchBegin()) {\n-                    observer.doFrame(AppMethodBeat.getVisibleScene(), startNs, endNs, isVsyncFrame, intendedFrameTimeNs, queueCost[CALLBACK_INPUT], queueCost[CALLBACK_ANIMATION], queueCost[CALLBACK_TRAVERSAL]);\n+            long endNs = System.nanoTime();\n+\n+            synchronized (observers) {\n+                for (LooperObserver observer : observers) {\n+                    if (observer.isDispatchBegin()) {\n+                        observer.doFrame(AppMethodBeat.getVisibleScene(), startNs, endNs, isVsyncFrame, intendedFrameTimeNs, queueCost[CALLBACK_INPUT], queueCost[CALLBACK_ANIMATION], queueCost[CALLBACK_TRAVERSAL]);\n+                    }\n                 }\n             }\n         }\n \n-        dispatchTimeMs[3] = SystemClock.currentThreadTimeMillis();\n-        dispatchTimeMs[1] = System.nanoTime();\n+        if (config.isEvilMethodTraceEnable() || config.isDevEnv()) {\n+            dispatchTimeMs[3] = SystemClock.currentThreadTimeMillis();\n+            dispatchTimeMs[1] = System.nanoTime();\n+        }\n \n         AppMethodBeat.o(AppMethodBeat.METHOD_ID_DISPATCH);\n \n@@ -282,6 +287,7 @@ private void dispatchEnd() {\n                 }\n             }\n         }\n+\n         this.isVsyncFrame = false;\n \n         if (config.isDevEnv()) {",
      "parent_sha": "ebb0026c10e6286c997e69f3de3ff158153d0ff6"
    }
  },
  {
    "oid": "ad0dc9350bd36062bd0740d74cff8fc93320487a",
    "message": "print longMsg when checks error state",
    "date": "2021-12-12T17:31:52Z",
    "url": "https://github.com/Tencent/matrix/commit/ad0dc9350bd36062bd0740d74cff8fc93320487a",
    "details": {
      "sha": "b335f85dcc554909aff262477411203388806d18",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/SignalAnrTracer.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/Tencent/matrix/blob/ad0dc9350bd36062bd0740d74cff8fc93320487a/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FSignalAnrTracer.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/ad0dc9350bd36062bd0740d74cff8fc93320487a/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FSignalAnrTracer.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FSignalAnrTracer.java?ref=ad0dc9350bd36062bd0740d74cff8fc93320487a",
      "patch": "@@ -252,6 +252,8 @@ private static boolean checkErrorState() {\n                     continue;\n                 }\n \n+                MatrixLog.i(TAG, \"error sate longMsg = %s\", proc.longMsg);\n+\n                 return true;\n             }\n             return false;\n@@ -280,6 +282,6 @@ public static void printTrace() {\n     private static native void nativePrintTrace();\n \n     public interface SignalAnrDetectedListener {\n-        void onAnrDetected(String stackTrace, String mMessageString, long mMessageWhen, boolean fromProcessErrorState);\n+        void onAnrDetected(String stackTrace, String mMessageString, long mMessageWhen, boolean fromProcessErrorState) throws InterruptedException;\n     }\n }",
      "parent_sha": "5958384cf12f4591bb184bff7c35f5969c66497a"
    }
  },
  {
    "oid": "7d12bbfba52fe19514ad8785c3f16fa9821293c5",
    "message": "Update battery stats",
    "date": "2021-12-10T15:00:12Z",
    "url": "https://github.com/Tencent/matrix/commit/7d12bbfba52fe19514ad8785c3f16fa9821293c5",
    "details": {
      "sha": "6ecef012ccd4c1ee982a0e4f89cf0ab2a04ef021",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/stats/BatteryStatsFeature.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/7d12bbfba52fe19514ad8785c3f16fa9821293c5/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fstats%2FBatteryStatsFeature.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/7d12bbfba52fe19514ad8785c3f16fa9821293c5/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fstats%2FBatteryStatsFeature.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fstats%2FBatteryStatsFeature.java?ref=7d12bbfba52fe19514ad8785c3f16fa9821293c5",
      "patch": "@@ -196,7 +196,7 @@ public void accept(Delta<CpuStateSnapshot> delta) {\n                                     final PowerProfile powerProfile = cpuStatFeature.getPowerProfile();\n                                     double procSipBgn = delta.bgn.configureProcSip(powerProfile, jiffiesDelta.bgn.totalJiffies.get());\n                                     double procSipEnd = delta.end.configureProcSip(powerProfile, jiffiesDelta.end.totalJiffies.get());\n-                                    entryInfo.entries.put(\"Cpu Load\", String.format(Locale.US, \"%.2f mAh\", procSipEnd - procSipBgn));\n+                                    entryInfo.entries.put(\"Cpu Power\", String.format(Locale.US, \"%.2f mAh\", procSipEnd - procSipBgn));\n                                 }\n                             }\n                         });",
      "parent_sha": "0d10d3dd79452a7b7a38acee71f8536cb2b0474b"
    }
  },
  {
    "oid": "5b7404a69cf01fcddb469fa003679761be500aa8",
    "message": "Add onFrameMetricsAvailableListener in onActivityResumed",
    "date": "2022-02-14T09:11:54Z",
    "url": "https://github.com/Tencent/matrix/commit/5b7404a69cf01fcddb469fa003679761be500aa8",
    "details": {
      "sha": "6c5f79f4fd8fd974dc179370a6a85da0c6f4b04c",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/FrameTracer.java",
      "status": "modified",
      "additions": 36,
      "deletions": 13,
      "changes": 49,
      "blob_url": "https://github.com/Tencent/matrix/blob/5b7404a69cf01fcddb469fa003679761be500aa8/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FFrameTracer.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/5b7404a69cf01fcddb469fa003679761be500aa8/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FFrameTracer.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FFrameTracer.java?ref=5b7404a69cf01fcddb469fa003679761be500aa8",
      "patch": "@@ -49,6 +49,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.Executor;\n \n public class FrameTracer extends Tracer implements Application.ActivityLifecycleCallbacks {\n@@ -70,7 +71,7 @@ public class FrameTracer extends Tracer implements Application.ActivityLifecycle\n     private int droppedSum = 0;\n     private long durationSum = 0;\n     private Map<String, Long> lastResumeTimeMap = new HashMap<>();\n-    private Map<Integer, Window.OnFrameMetricsAvailableListener> frameListenerMap = new HashMap<>();\n+    private Map<Integer, Window.OnFrameMetricsAvailableListener> frameListenerMap = new ConcurrentHashMap<>();\n \n     public FrameTracer(TraceConfig config, boolean supportFrameMetrics) {\n         useFrameMetrics = supportFrameMetrics;\n@@ -112,6 +113,22 @@ public void onAlive() {\n         }\n     }\n \n+    public void forceEnable() {\n+        MatrixLog.i(TAG, \"forceEnable\");\n+        if (!useFrameMetrics) {\n+            UIThreadMonitor.getMonitor().addObserver(this);\n+        }\n+        Matrix.with().getApplication().registerActivityLifecycleCallbacks(this);\n+    }\n+\n+    public void forceDisable() {\n+        MatrixLog.i(TAG, \"forceDisable\");\n+        removeDropFrameListener();\n+        UIThreadMonitor.getMonitor().removeObserver(this);\n+        Matrix.with().getApplication().unregisterActivityLifecycleCallbacks(this);\n+        frameListenerMap.clear();\n+    }\n+\n     @Override\n     public void onDead() {\n         super.onDead();\n@@ -365,10 +382,26 @@ public interface DropFrameListener {\n         void dropFrame(int droppedFrame, long jitter, String scene, long lastResumeTime);\n     }\n \n-    @RequiresApi(api = Build.VERSION_CODES.N)\n+\n     @Override\n     public void onActivityCreated(final Activity activity, Bundle savedInstanceState) {\n+\n+    }\n+\n+    @Override\n+    public void onActivityStarted(Activity activity) {\n+\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.N)\n+    @Override\n+    public void onActivityResumed(Activity activity) {\n+        lastResumeTimeMap.put(activity.getClass().getName(), System.currentTimeMillis());\n+\n         if (useFrameMetrics) {\n+            if (frameListenerMap.containsKey(activity.hashCode())) {\n+                return;\n+            }\n             this.refreshRate = (int) activity.getWindowManager().getDefaultDisplay().getRefreshRate();\n             this.frameIntervalNs = Constants.TIME_SECOND_TO_NANO / (long) refreshRate;\n             Window.OnFrameMetricsAvailableListener onFrameMetricsAvailableListener = new Window.OnFrameMetricsAvailableListener() {\n@@ -384,20 +417,10 @@ public void onFrameMetricsAvailable(Window window, FrameMetrics frameMetrics, in\n             };\n             this.frameListenerMap.put(activity.hashCode(), onFrameMetricsAvailableListener);\n             activity.getWindow().addOnFrameMetricsAvailableListener(onFrameMetricsAvailableListener, new Handler());\n-            MatrixLog.i(TAG, \"onActivityCreated addOnFrameMetricsAvailableListener\");\n+            MatrixLog.i(TAG, \"onActivityResumed addOnFrameMetricsAvailableListener\");\n         }\n     }\n \n-    @Override\n-    public void onActivityStarted(Activity activity) {\n-\n-    }\n-\n-    @Override\n-    public void onActivityResumed(Activity activity) {\n-        lastResumeTimeMap.put(activity.getClass().getName(), System.currentTimeMillis());\n-    }\n-\n     @Override\n     public void onActivityPaused(Activity activity) {\n ",
      "parent_sha": "e5f99e43dec026a4570a394297cce7cceda63a7f"
    }
  },
  {
    "oid": "a9be8edb0d84cf586b1fb430ca9b5287ec2551dc",
    "message": "Update battery cpu power calc",
    "date": "2022-08-03T08:01:41Z",
    "url": "https://github.com/Tencent/matrix/commit/a9be8edb0d84cf586b1fb430ca9b5287ec2551dc",
    "details": {
      "sha": "f5870dddde24625ed7f87bdd5abd2c5c823cd290",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/stats/HealthStatsHelper.java",
      "status": "modified",
      "additions": 137,
      "deletions": 23,
      "changes": 160,
      "blob_url": "https://github.com/Tencent/matrix/blob/a9be8edb0d84cf586b1fb430ca9b5287ec2551dc/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fstats%2FHealthStatsHelper.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/a9be8edb0d84cf586b1fb430ca9b5287ec2551dc/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fstats%2FHealthStatsHelper.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fstats%2FHealthStatsHelper.java?ref=a9be8edb0d84cf586b1fb430ca9b5287ec2551dc",
      "patch": "@@ -24,6 +24,7 @@\n import androidx.annotation.ChecksSdkIntAtLeast;\n import androidx.annotation.Nullable;\n import androidx.annotation.RequiresApi;\n+import androidx.annotation.VisibleForTesting;\n \n /**\n  * totalPowerMah = usagePowerMah + wifiPowerMah + gpsPowerMah + cpuPowerMah +\n@@ -128,42 +129,144 @@ public static double calcCpuPower(PowerProfile powerProfile, HealthStats healthS\n              *               + core_power.cluster1 * num running cores in cluster 1\n              */\n             long cpuTimeMs = getMeasure(healthStats, UidHealthStats.MEASUREMENT_USER_CPU_TIME_MS) + getMeasure(healthStats, UidHealthStats.MEASUREMENT_SYSTEM_CPU_TIME_MS);\n-            power = estimateCpuPowerByCpuStats(powerProfile, cpuTimeMs);\n+            power += estimateCpuActivePower(powerProfile, cpuTimeMs);\n+            CpuStatFeature feat = BatteryCanary.getMonitorFeature(CpuStatFeature.class);\n+            if (feat != null && feat.isSupported()) {\n+                CpuStatFeature.CpuStateSnapshot snapshot = feat.currentCpuStateSnapshot();\n+                if (snapshot != null) {\n+                    power += estimateCpuClustersPowerByUidStats(powerProfile, snapshot, cpuTimeMs, false);\n+                    power += estimateCpuCoresPowerByUidStats(powerProfile, snapshot, cpuTimeMs, false);\n+                }\n+            }\n         }\n         return power;\n     }\n \n-    private static double estimateCpuPowerByCpuStats(PowerProfile powerProfile, long cpuTimeMs) {\n+    @VisibleForTesting\n+    public static double estimateCpuActivePower(PowerProfile powerProfile, long cpuTimeMs) {\n+        //noinspection UnnecessaryLocalVariable\n+        long timeMs = cpuTimeMs;\n+        double powerMa = powerProfile.getAveragePowerUni(PowerProfile.POWER_CPU_ACTIVE);\n+        return new UsageBasedPowerEstimator(powerMa).calculatePower(timeMs);\n+    }\n+\n+    @VisibleForTesting\n+    public static double estimateCpuClustersPowerByUidStats(PowerProfile powerProfile, CpuStatFeature.CpuStateSnapshot snapshot, long cpuTimeMs, boolean scaled) {\n         if (cpuTimeMs > 0) {\n-            CpuStatFeature feat = BatteryCanary.getMonitorFeature(CpuStatFeature.class);\n-            if (feat != null && feat.isSupported()) {\n-                CpuStatFeature.CpuStateSnapshot cpuStateSnapshot = feat.currentCpuStateSnapshot();\n-                if (cpuStateSnapshot != null) {\n-                    long jiffySum = 0;\n-                    for (MonitorFeature.Snapshot.Entry.ListEntry<MonitorFeature.Snapshot.Entry.DigitEntry<Long>> stepJiffies : cpuStateSnapshot.procCpuCoreStates) {\n-                        for (MonitorFeature.Snapshot.Entry.DigitEntry<Long> item : stepJiffies.getList()) {\n-                            jiffySum += item.get();\n-                        }\n-                    }\n-                    double powerMah = 0;\n-                    for (int i = 0; i < cpuStateSnapshot.procCpuCoreStates.size(); i++) {\n-                        List<MonitorFeature.Snapshot.Entry.DigitEntry<Long>> stepJiffies = cpuStateSnapshot.procCpuCoreStates.get(i).getList();\n-                        for (int j = 0; j < stepJiffies.size(); j++) {\n-                            long jiffy = stepJiffies.get(j).get();\n-                            long figuredCpuTimeMs = (long) ((jiffy * 1.0f / jiffySum) * cpuTimeMs);\n-                            double powerMa = powerProfile.getAveragePowerForCpuCore(i, j);\n-                            powerMah += new UsageBasedPowerEstimator(powerMa).calculatePower(figuredCpuTimeMs);\n-                        }\n+            long jiffySum = 0;\n+            for (int i = 0; i < snapshot.procCpuCoreStates.size(); i++) {\n+                List<MonitorFeature.Snapshot.Entry.DigitEntry<Long>> stepJiffies = snapshot.procCpuCoreStates.get(i).getList();\n+                int scale = scaled ? powerProfile.getNumCoresInCpuCluster(i) : 1;\n+                for (MonitorFeature.Snapshot.Entry.DigitEntry<Long> item : stepJiffies) {\n+                    jiffySum += item.get() * scale;\n+                }\n+            }\n+            double powerMah = 0;\n+            for (int i = 0; i < snapshot.procCpuCoreStates.size(); i++) {\n+                List<MonitorFeature.Snapshot.Entry.DigitEntry<Long>> stepJiffies = snapshot.procCpuCoreStates.get(i).getList();\n+                int scale = scaled ? powerProfile.getNumCoresInCpuCluster(i) : 1;\n+                long jiffySumInCluster = 0;\n+                for (int j = 0; j < stepJiffies.size(); j++) {\n+                    long jiffy = stepJiffies.get(j).get();\n+                    jiffySumInCluster += jiffy * scale;\n+                }\n+                long figuredCpuTimeMs = (long) ((jiffySumInCluster * 1.0f / jiffySum) * cpuTimeMs);\n+                double powerMa = powerProfile.getAveragePowerForCpuCluster(i);\n+                powerMah += new UsageBasedPowerEstimator(powerMa).calculatePower(figuredCpuTimeMs);\n+            }\n+            return powerMah;\n+        }\n+        return 0;\n+    }\n+\n+    @VisibleForTesting\n+    public static double estimateCpuCoresPowerByUidStats(PowerProfile powerProfile, CpuStatFeature.CpuStateSnapshot snapshot, long cpuTimeMs, boolean scaled) {\n+        if (cpuTimeMs > 0) {\n+            long jiffySum = 0;\n+            for (int i = 0; i < snapshot.procCpuCoreStates.size(); i++) {\n+                List<MonitorFeature.Snapshot.Entry.DigitEntry<Long>> stepJiffies = snapshot.procCpuCoreStates.get(i).getList();\n+                int scale = scaled ? powerProfile.getNumCoresInCpuCluster(i) : 1;\n+                for (MonitorFeature.Snapshot.Entry.DigitEntry<Long> item : stepJiffies) {\n+                    jiffySum += item.get() * scale;\n+                }\n+            }\n+            double powerMah = 0;\n+            for (int i = 0; i < snapshot.procCpuCoreStates.size(); i++) {\n+                List<MonitorFeature.Snapshot.Entry.DigitEntry<Long>> stepJiffies = snapshot.procCpuCoreStates.get(i).getList();\n+                int scale = scaled ? powerProfile.getNumCoresInCpuCluster(i) : 1;\n+                for (int j = 0; j < stepJiffies.size(); j++) {\n+                    long jiffy = stepJiffies.get(j).get();\n+                    long figuredCpuTimeMs = (long) ((jiffy * scale * 1.0f / jiffySum) * cpuTimeMs);\n+                    double powerMa = powerProfile.getAveragePowerForCpuCore(i, j);\n+                    powerMah += new UsageBasedPowerEstimator(powerMa).calculatePower(figuredCpuTimeMs);\n+                }\n+            }\n+            return powerMah;\n+        }\n+        return 0;\n+    }\n+\n+    @VisibleForTesting\n+    public static double estimateCpuClustersPowerByDevStats(PowerProfile powerProfile, CpuStatFeature.CpuStateSnapshot snapshot, long cpuTimeMs) {\n+        if (cpuTimeMs > 0) {\n+            long jiffySum = 0;\n+            for (int i = 0; i < snapshot.cpuCoreStates.size(); i++) {\n+                List<MonitorFeature.Snapshot.Entry.DigitEntry<Long>> stepJiffies = snapshot.cpuCoreStates.get(i).getList();\n+                for (MonitorFeature.Snapshot.Entry.DigitEntry<Long> item : stepJiffies) {\n+                    jiffySum += item.get();\n+                }\n+            }\n+            double powerMah = 0;\n+            for (int i = 0; i < snapshot.cpuCoreStates.size(); i++) {\n+                List<MonitorFeature.Snapshot.Entry.DigitEntry<Long>> stepJiffies = snapshot.cpuCoreStates.get(i).getList();\n+                long jiffySumInCluster = 0;\n+                for (int j = 0; j < stepJiffies.size(); j++) {\n+                    long jiffy = stepJiffies.get(j).get();\n+                    jiffySumInCluster += jiffy;\n+                }\n+                long figuredCpuTimeMs = (long) ((jiffySumInCluster * 1.0f / jiffySum) * cpuTimeMs);\n+                int clusterNum = powerProfile.getClusterByCpuNum(i);\n+                if (clusterNum >= 0 && clusterNum < powerProfile.getNumCpuClusters()) {\n+                    double powerMa = powerProfile.getAveragePowerForCpuCluster(clusterNum);\n+                    powerMah += new UsageBasedPowerEstimator(powerMa).calculatePower(figuredCpuTimeMs);\n+                }\n+            }\n+            return powerMah;\n+        }\n+        return 0;\n+    }\n+\n+    @VisibleForTesting\n+    public static double estimateCpuCoresPowerByDevStats(PowerProfile powerProfile, CpuStatFeature.CpuStateSnapshot snapshot, long cpuTimeMs) {\n+        if (cpuTimeMs > 0) {\n+            long jiffySum = 0;\n+            for (int i = 0; i < snapshot.cpuCoreStates.size(); i++) {\n+                List<MonitorFeature.Snapshot.Entry.DigitEntry<Long>> stepJiffies = snapshot.cpuCoreStates.get(i).getList();\n+                for (MonitorFeature.Snapshot.Entry.DigitEntry<Long> item : stepJiffies) {\n+                    jiffySum += item.get();\n+                }\n+            }\n+            double powerMah = 0;\n+            for (int i = 0; i < snapshot.cpuCoreStates.size(); i++) {\n+                List<MonitorFeature.Snapshot.Entry.DigitEntry<Long>> stepJiffies = snapshot.cpuCoreStates.get(i).getList();\n+                for (int j = 0; j < stepJiffies.size(); j++) {\n+                    long jiffy = stepJiffies.get(j).get();\n+                    long figuredCpuTimeMs = (long) ((jiffy * 1.0f / jiffySum) * cpuTimeMs);\n+                    int clusterNum = powerProfile.getClusterByCpuNum(i);\n+                    if (clusterNum >= 0 && clusterNum < powerProfile.getNumCpuClusters()) {\n+                        double powerMa = powerProfile.getAveragePowerForCpuCore(clusterNum, j);\n+                        powerMah += new UsageBasedPowerEstimator(powerMa).calculatePower(figuredCpuTimeMs);\n                     }\n-                    return powerMah;\n                 }\n             }\n+            return powerMah;\n         }\n         return 0;\n     }\n \n     /**\n      * WIP\n+     *\n      * @see com.android.internal.os.MemoryPowerCalculator\n      */\n     public static double calcMemoryPower(PowerProfile powerProfile) {\n@@ -444,6 +547,7 @@ public static double calcScreenPower(PowerProfile powerProfile, HealthStats heal\n      */\n     @RequiresApi(api = Build.VERSION_CODES.N)\n     public static double calcSystemServicePower(PowerProfile powerProfile, HealthStats healthStats) {\n+        double power = 0;\n         long timeMs = 0;\n         if (healthStats.hasTimers(UidHealthStats.TIMERS_JOBS)) {\n             Map<String, TimerStat> timers = healthStats.getTimers(UidHealthStats.TIMERS_JOBS);\n@@ -457,7 +561,17 @@ public static double calcSystemServicePower(PowerProfile powerProfile, HealthSta\n                 timeMs += item.getTime();\n             }\n         }\n-        return estimateCpuPowerByCpuStats(powerProfile, timeMs);\n+\n+        power += estimateCpuActivePower(powerProfile, timeMs);\n+        CpuStatFeature feat = BatteryCanary.getMonitorFeature(CpuStatFeature.class);\n+        if (feat != null && feat.isSupported()) {\n+            CpuStatFeature.CpuStateSnapshot snapshot = feat.currentCpuStateSnapshot();\n+            if (snapshot != null) {\n+                power += estimateCpuClustersPowerByUidStats(powerProfile, snapshot, timeMs, false);\n+                power += estimateCpuCoresPowerByUidStats(powerProfile, snapshot, timeMs, false);\n+            }\n+        }\n+        return power;\n     }\n \n     /**",
      "parent_sha": "1cd67217bafe6e46af02d0d0c3c4c20e681b6a1f"
    }
  },
  {
    "oid": "5167d76c9e467a76d93b34d2cec079cb0e5bcce5",
    "message": "Update battery event with data filter",
    "date": "2022-03-21T07:17:53Z",
    "url": "https://github.com/Tencent/matrix/commit/5167d76c9e467a76d93b34d2cec079cb0e5bcce5",
    "details": {
      "sha": "982d503d7b7b108459394714a301c738a112e8dd",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/BatteryEventDelegate.java",
      "status": "modified",
      "additions": 18,
      "deletions": 14,
      "changes": 32,
      "blob_url": "https://github.com/Tencent/matrix/blob/5167d76c9e467a76d93b34d2cec079cb0e5bcce5/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2FBatteryEventDelegate.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/5167d76c9e467a76d93b34d2cec079cb0e5bcce5/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2FBatteryEventDelegate.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2FBatteryEventDelegate.java?ref=5167d76c9e467a76d93b34d2cec079cb0e5bcce5",
      "patch": "@@ -158,28 +158,32 @@ public void onReceive(Context context, final Intent intent) {\n                                 public void run() {\n                                     // Power percentage\n                                     int currPct = BatteryCanaryUtil.getBatteryPercentage(mContext);\n-                                    if (Math.abs(currPct - mLastBatteryPowerPct) >= BATTERY_POWER_GRADUATION) {\n-                                        mLastBatteryPowerPct = currPct;\n-                                        if (mCore != null) {\n-                                            BatteryStatsFeature feat = mCore.getMonitorFeature(BatteryStatsFeature.class);\n-                                            if (feat != null) {\n-                                                feat.statsBatteryEvent(currPct);\n+                                    if (currPct >= 0 && currPct <= 1000) {\n+                                        if (Math.abs(currPct - mLastBatteryPowerPct) >= BATTERY_POWER_GRADUATION) {\n+                                            mLastBatteryPowerPct = currPct;\n+                                            if (mCore != null) {\n+                                                BatteryStatsFeature feat = mCore.getMonitorFeature(BatteryStatsFeature.class);\n+                                                if (feat != null) {\n+                                                    feat.statsBatteryEvent(currPct);\n+                                                }\n                                             }\n+                                            onBatteryPowerChanged(currPct);\n                                         }\n-                                        onBatteryPowerChanged(currPct);\n                                     }\n                                     // Battery temperature\n                                     try {\n                                         int currTemp = intent.getIntExtra(BatteryManager.EXTRA_TEMPERATURE, -1);\n-                                        if (currTemp != -1 && Math.abs(currTemp - mLastBatteryTemp) >= BATTERY_TEMPERATURE_GRADUATION) {\n-                                            mLastBatteryTemp = currTemp;\n-                                            if (mCore != null) {\n-                                                BatteryStatsFeature feat = mCore.getMonitorFeature(BatteryStatsFeature.class);\n-                                                if (feat != null) {\n-                                                    feat.statsBatteryTempEvent(currTemp);\n+                                        if (currTemp >= 0 && currPct <= 1000) {\n+                                            if (Math.abs(currTemp - mLastBatteryTemp) >= BATTERY_TEMPERATURE_GRADUATION) {\n+                                                mLastBatteryTemp = currTemp;\n+                                                if (mCore != null) {\n+                                                    BatteryStatsFeature feat = mCore.getMonitorFeature(BatteryStatsFeature.class);\n+                                                    if (feat != null) {\n+                                                        feat.statsBatteryTempEvent(currTemp);\n+                                                    }\n                                                 }\n+                                                onBatteryTemperatureChanged(currTemp);\n                                             }\n-                                            onBatteryTemperatureChanged(currTemp);\n                                         }\n                                     } catch (Exception e) {\n                                         MatrixLog.w(TAG, \"get EXTRA_TEMPERATURE failed: \" + e.getMessage());",
      "parent_sha": "2939c24e11e8dbb60a80e0dedb2a0c4b8187a41e"
    }
  },
  {
    "oid": "4a5e4bd9d2dc3546fddcb4f182857e7f6caff83f",
    "message": "crash fix",
    "date": "2021-07-14T11:21:02Z",
    "url": "https://github.com/Tencent/matrix/commit/4a5e4bd9d2dc3546fddcb4f182857e7f6caff83f",
    "details": {
      "sha": "ffce419ff720788289ac6df3f900ba00818d4c89",
      "filename": "matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/LeakMonitor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/4a5e4bd9d2dc3546fddcb4f182857e7f6caff83f/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2FLeakMonitor.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/4a5e4bd9d2dc3546fddcb4f182857e7f6caff83f/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2FLeakMonitor.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2FLeakMonitor.java?ref=4a5e4bd9d2dc3546fddcb4f182857e7f6caff83f",
      "patch": "@@ -169,7 +169,7 @@ private boolean findLeak(List<Integer> createList, List<Integer> destroyList) {\n             if (isLeak) {\n                 OpenGLInfo leakInfo = OpenGLResRecorder.getInstance().getItemByHashCode(destroy);\n \n-                if (!leakInfo.getMaybeLeak()) {\n+                if ((leakInfo != null) && !leakInfo.getMaybeLeak()) {\n                     OpenGLResRecorder.getInstance().getNativeStack(leakInfo);\n                     OpenGLResRecorder.getInstance().setMaybeLeak(leakInfo);\n ",
      "parent_sha": "76ed0f9f213f9a6cb7bdda41706c97acfe8343f4"
    }
  },
  {
    "oid": "68b3c96a6b0ef3e15b48db93851a6f26339ec082",
    "message": "JiffiesMonitorPlugin: fix read name bug",
    "date": "2020-05-18T13:08:29Z",
    "url": "https://github.com/Tencent/matrix/commit/68b3c96a6b0ef3e15b48db93851a6f26339ec082",
    "details": {
      "sha": "6e5e2862278dc2aad40bba7dc939c092a740c07c",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/plugin/JiffiesMonitorPlugin.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/Tencent/matrix/blob/68b3c96a6b0ef3e15b48db93851a6f26339ec082/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2Fplugin%2FJiffiesMonitorPlugin.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/68b3c96a6b0ef3e15b48db93851a6f26339ec082/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2Fplugin%2FJiffiesMonitorPlugin.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2Fplugin%2FJiffiesMonitorPlugin.java?ref=68b3c96a6b0ef3e15b48db93851a6f26339ec082",
      "patch": "@@ -349,7 +349,7 @@ private Set<ThreadInfo> getThreadsInfo2(int pid) {\n     private static void parseJiffiesInfo(String path, ThreadInfo info) {\n         final int readBytes = readProcStat(path, sBuffer);\n \n-        MatrixLog.d(TAG, \"%d: %s\", readBytes, sBuffer);\n+        MatrixLog.d(TAG, \"%d: %s\", readBytes, new String(sBuffer));\n \n         for (int i = 0, spaceIdx = 0; i < readBytes;) {\n             if (Character.isSpaceChar(sBuffer[i])) {\n@@ -360,7 +360,7 @@ private static void parseJiffiesInfo(String path, ThreadInfo info) {\n \n             switch (spaceIdx) {\n                 case 1: { // read thread name\n-                    int begin = i + 1;\n+                    int begin = i;\n                     int length = 0;\n \n                     for (;i < readBytes && !Character.isSpaceChar(sBuffer[i]); i++, length++);\n@@ -378,7 +378,7 @@ private static void parseJiffiesInfo(String path, ThreadInfo info) {\n                         info.name = new String(sBuffer, begin, length);\n                     }\n \n-                    MatrixLog.d(TAG, \"read name = %s\", info.name);\n+                    MatrixLog.d(TAG, \"read name = %s, begin = %d, length = %d\", info.name, begin, length);\n \n                     break;\n                 }",
      "parent_sha": "108ec8b73102b64348289b3ff600d9320215a6a9"
    }
  },
  {
    "oid": "1170b7a0ef3f79fb0212cbe18295c7a590eb025b",
    "message": "fix AppMethodBeat throw index of Constants.BUFFER_SIZE data",
    "date": "2019-10-16T02:48:23Z",
    "url": "https://github.com/Tencent/matrix/commit/1170b7a0ef3f79fb0212cbe18295c7a590eb025b",
    "details": {
      "sha": "2a9aafba02c88322807899e371a21b271ba88621",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/Tencent/matrix/blob/1170b7a0ef3f79fb0212cbe18295c7a590eb025b/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fcore%2FAppMethodBeat.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/1170b7a0ef3f79fb0212cbe18295c7a590eb025b/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fcore%2FAppMethodBeat.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fcore%2FAppMethodBeat.java?ref=1170b7a0ef3f79fb0212cbe18295c7a590eb025b",
      "patch": "@@ -230,7 +230,8 @@ public static void i(int methodId) {\n             if (sIndex < Constants.BUFFER_SIZE) {\n                 mergeData(methodId, sIndex, true);\n             } else {\n-                sIndex = -1;\n+                sIndex = 0;\n+                mergeData(methodId, sIndex, true);\n             }\n             ++sIndex;\n             assertIn = false;\n@@ -253,7 +254,8 @@ public static void o(int methodId) {\n             if (sIndex < Constants.BUFFER_SIZE) {\n                 mergeData(methodId, sIndex, false);\n             } else {\n-                sIndex = -1;\n+                sIndex = 0;\n+                mergeData(methodId, sIndex, false);\n             }\n             ++sIndex;\n         }",
      "parent_sha": "7bac7ff722954b962fada1c9d6b7bc123661e22a"
    }
  },
  {
    "oid": "a21667c721fcdb24238b96cfd54c2a6159b1ecd6",
    "message": "morelog",
    "date": "2020-01-15T08:07:44Z",
    "url": "https://github.com/Tencent/matrix/commit/a21667c721fcdb24238b96cfd54c2a6159b1ecd6",
    "details": {
      "sha": "3fa24c5916fecc51bc5966ee5d02628046983e47",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/StartupTracer.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/Tencent/matrix/blob/a21667c721fcdb24238b96cfd54c2a6159b1ecd6/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FStartupTracer.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/a21667c721fcdb24238b96cfd54c2a6159b1ecd6/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FStartupTracer.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FStartupTracer.java?ref=a21667c721fcdb24238b96cfd54c2a6159b1ecd6",
      "patch": "@@ -145,7 +145,7 @@ hasShowSplashActivity, firstScreenCost, uptimeMillis(),\n         } else if (isWarmStartUp()) {\n             isWarmStartUp = false;\n             long warmCost = uptimeMillis() - lastCreateActivity;\n-            MatrixLog.i(TAG, \"#WarmStartup# activity:%s, warmCost:%d\", activity, warmCost);\n+            MatrixLog.i(TAG, \"#WarmStartup# activity:%s, warmCost:%d, now:%d, lastCreateActivity:%d\", activity, warmCost, uptimeMillis(), lastCreateActivity);\n \n             if (warmCost > 0) {\n                 analyse(0, 0, warmCost, true);\n@@ -295,6 +295,7 @@ public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n         MatrixLog.i(TAG, \"activeActivityCount:%d, coldCost:%d\", activeActivityCount, coldCost);\n         if (activeActivityCount == 0 && coldCost > 0) {\n             lastCreateActivity = uptimeMillis();\n+            MatrixLog.i(TAG, \"lastCreateActivity:%d\", lastCreateActivity);\n             isWarmStartUp = true;\n         }\n         activeActivityCount++;",
      "parent_sha": "7ed2f1db859463ad67efe7cb92e9a7e28f06c321"
    }
  },
  {
    "oid": "0b1892d79d38b446c1c0f5c4ac24e04c1493b286",
    "message": "fix count total size error",
    "date": "2021-12-06T14:36:41Z",
    "url": "https://github.com/Tencent/matrix/commit/0b1892d79d38b446c1c0f5c4ac24e04c1493b286",
    "details": {
      "sha": "1e04b1252718677207f46efe0eeecb0e3d854ac9",
      "filename": "matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/OpenGLReportInfo.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/Tencent/matrix/blob/0b1892d79d38b446c1c0f5c4ac24e04c1493b286/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FOpenGLReportInfo.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/0b1892d79d38b446c1c0f5c4ac24e04c1493b286/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FOpenGLReportInfo.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FOpenGLReportInfo.java?ref=0b1892d79d38b446c1c0f5c4ac24e04c1493b286",
      "patch": "@@ -19,14 +19,17 @@ public OpenGLReportInfo(OpenGLInfo innerInfo) {\n         this.innerInfo = innerInfo;\n         idList.add(innerInfo.getId());\n         appendParamsInfos(innerInfo.getMemoryInfo());\n+        if (innerInfo.getMemoryInfo() != null) {\n+            totalSize += innerInfo.getMemoryInfo().getSize();\n+        }\n     }\n \n     public void appendParamsInfos(MemoryInfo memoryInfo) {\n         if (memoryInfo == null) {\n             return;\n         }\n         OpenGLInfo.TYPE resType = memoryInfo.getResType();\n-        totalSize += innerInfo.getMemoryInfo().getSize();\n+\n         if (resType == OpenGLInfo.TYPE.TEXTURE) {\n             FaceInfo[] faces = memoryInfo.getFaces();\n             for (FaceInfo faceInfo : faces) {",
      "parent_sha": "a3ef3a00c3da17f7a5cef9cedf5321e1a2a5f37a"
    }
  },
  {
    "oid": "c167fb90e446e8bf3d19d8b68f97bebe007039b6",
    "message": "fix crash",
    "date": "2019-11-22T06:16:51Z",
    "url": "https://github.com/Tencent/matrix/commit/c167fb90e446e8bf3d19d8b68f97bebe007039b6",
    "details": {
      "sha": "a67d46509a3ddc39a68f174d0f7db469c2af532a",
      "filename": "matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/watcher/AndroidHeapDumper.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/c167fb90e446e8bf3d19d8b68f97bebe007039b6/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-android%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2Fwatcher%2FAndroidHeapDumper.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/c167fb90e446e8bf3d19d8b68f97bebe007039b6/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-android%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2Fwatcher%2FAndroidHeapDumper.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-android%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2Fwatcher%2FAndroidHeapDumper.java?ref=c167fb90e446e8bf3d19d8b68f97bebe007039b6",
      "patch": "@@ -91,7 +91,7 @@ public File dumpHeap() {\n             Debug.dumpHprofData(hprofFile.getAbsolutePath());\n             cancelToast(waitingForToast.get());\n             return hprofFile;\n-        } catch (IOException e) {\n+        } catch (Exception e) {\n             MatrixLog.printErrStackTrace(TAG, e, \"failed to dump heap into file: %s.\", hprofFile.getAbsolutePath());\n             return null;\n         }",
      "parent_sha": "e1503ca06f1ff2a3186d0dd03df089e487c804ef"
    }
  },
  {
    "oid": "24fd55628b188122092818c8d11acca231738cc0",
    "message": "fix npe",
    "date": "2019-04-22T02:57:47Z",
    "url": "https://github.com/Tencent/matrix/commit/24fd55628b188122092818c8d11acca231738cc0",
    "details": {
      "sha": "46e1794f6d42e41ac2359a14ad8eacb3c3cbe570",
      "filename": "matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/plugin/DefaultPluginListener.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/24fd55628b188122092818c8d11acca231738cc0/matrix%2Fmatrix-android%2Fmatrix-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fplugin%2FDefaultPluginListener.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/24fd55628b188122092818c8d11acca231738cc0/matrix%2Fmatrix-android%2Fmatrix-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fplugin%2FDefaultPluginListener.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fplugin%2FDefaultPluginListener.java?ref=24fd55628b188122092818c8d11acca231738cc0",
      "patch": "@@ -56,7 +56,7 @@ public void onDestroy(Plugin plugin) {\n \n     @Override\n     public void onReportIssue(Issue issue) {\n-        MatrixLog.i(TAG, \"report issue content: %s\", issue);\n+        MatrixLog.i(TAG, \"report issue content: %s\", issue == null ? \"\" : issue);\n     }\n \n }",
      "parent_sha": "94f071b97dba266d5a375f51abd8efd45488ae69"
    }
  },
  {
    "oid": "40ee60e8f18d9d4e4a7490ba63048d3deaf82e63",
    "message": "fix(opengl):change allInfos collect time",
    "date": "2022-04-07T08:41:21Z",
    "url": "https://github.com/Tencent/matrix/commit/40ee60e8f18d9d4e4a7490ba63048d3deaf82e63",
    "details": {
      "sha": "7445636a8ec28668a172728bbfd8a447eb213057",
      "filename": "matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/LeakMonitorForBackstage.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/40ee60e8f18d9d4e4a7490ba63048d3deaf82e63/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2FLeakMonitorForBackstage.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/40ee60e8f18d9d4e4a7490ba63048d3deaf82e63/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2FLeakMonitorForBackstage.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2FLeakMonitorForBackstage.java?ref=40ee60e8f18d9d4e4a7490ba63048d3deaf82e63",
      "patch": "@@ -68,9 +68,9 @@ public void run() {\n                         if (null != mLeakListener) {\n                             if (!ResRecordManager.getInstance().isGLInfoRelease(item)) {\n                                 mLeakListener.onLeak(item);\n+                                allInfos.add(item);\n                             }\n                         }\n-                        allInfos.add(item);\n                         it.remove();\n                     }\n                 }",
      "parent_sha": "6a35faad36831f4152399106dacef9baee15041c"
    }
  },
  {
    "oid": "abc89e01a8e3dd53c8b2747803e5b42713d2e681",
    "message": "Power must not be negative",
    "date": "2022-08-16T08:37:19Z",
    "url": "https://github.com/Tencent/matrix/commit/abc89e01a8e3dd53c8b2747803e5b42713d2e681",
    "details": {
      "sha": "64dd74c59f00ed80504099e8495455e75a951d8f",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/stats/HealthStatsHelper.java",
      "status": "modified",
      "additions": 47,
      "deletions": 10,
      "changes": 57,
      "blob_url": "https://github.com/Tencent/matrix/blob/abc89e01a8e3dd53c8b2747803e5b42713d2e681/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fstats%2FHealthStatsHelper.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/abc89e01a8e3dd53c8b2747803e5b42713d2e681/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fstats%2FHealthStatsHelper.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fstats%2FHealthStatsHelper.java?ref=abc89e01a8e3dd53c8b2747803e5b42713d2e681",
      "patch": "@@ -545,7 +545,10 @@ public static double calcBlueToothPower(PowerProfile powerProfile, HealthStats h\n             double powerMa = powerProfile.getAveragePowerUni(PowerProfile.POWER_BLUETOOTH_CONTROLLER_TX);\n             power += new UsageBasedPowerEstimator(powerMa).calculatePower(timeMs);\n         }\n-        return power;\n+        if (power > 0) {\n+            return power;\n+        }\n+        return 0;\n     }\n \n     /**\n@@ -566,7 +569,11 @@ public static double calcGpsPower(PowerProfile powerProfile, HealthStats healthS\n                 powerMa = sumMa / num;\n             }\n         }\n-        return new UsageBasedPowerEstimator(powerMa).calculatePower(timeMs);\n+        double power = new UsageBasedPowerEstimator(powerMa).calculatePower(timeMs);\n+        if (power > 0) {\n+            return power;\n+        }\n+        return 0;\n     }\n \n     /**\n@@ -605,7 +612,10 @@ public static double calcSensorsPower(Context context, HealthStats healthStats)\n                 }\n             }\n         }\n-        return power;\n+        if (power > 0) {\n+            return power;\n+        }\n+        return 0;\n     }\n \n     /**\n@@ -615,7 +625,11 @@ public static double calcSensorsPower(Context context, HealthStats healthStats)\n     public static double calcCameraPower(PowerProfile powerProfile, HealthStats healthStats) {\n         long timeMs = getTimerTime(healthStats, UidHealthStats.TIMER_CAMERA);\n         double powerMa = powerProfile.getAveragePowerUni(PowerProfile.POWER_CAMERA);\n-        return new UsageBasedPowerEstimator(powerMa).calculatePower(timeMs);\n+        double power = new UsageBasedPowerEstimator(powerMa).calculatePower(timeMs);\n+        if (power > 0) {\n+            return power;\n+        }\n+        return 0;\n     }\n \n     /**\n@@ -625,7 +639,11 @@ public static double calcCameraPower(PowerProfile powerProfile, HealthStats heal\n     public static double calcFlashLightPower(PowerProfile powerProfile, HealthStats healthStats) {\n         long timeMs = getTimerTime(healthStats, UidHealthStats.TIMER_FLASHLIGHT);\n         double powerMa = powerProfile.getAveragePowerUni(PowerProfile.POWER_FLASHLIGHT);\n-        return new UsageBasedPowerEstimator(powerMa).calculatePower(timeMs);\n+        double power = new UsageBasedPowerEstimator(powerMa).calculatePower(timeMs);\n+        if (power > 0) {\n+            return power;\n+        }\n+        return 0;\n     }\n \n     /**\n@@ -635,7 +653,11 @@ public static double calcFlashLightPower(PowerProfile powerProfile, HealthStats\n     public static double calcAudioPower(PowerProfile powerProfile, HealthStats healthStats) {\n         long timeMs = getTimerTime(healthStats, UidHealthStats.TIMER_AUDIO);\n         double powerMa = powerProfile.getAveragePowerUni(PowerProfile.POWER_AUDIO);\n-        return new UsageBasedPowerEstimator(powerMa).calculatePower(timeMs);\n+        double power = new UsageBasedPowerEstimator(powerMa).calculatePower(timeMs);\n+        if (power > 0) {\n+            return power;\n+        }\n+        return 0;\n     }\n \n     /**\n@@ -645,7 +667,11 @@ public static double calcAudioPower(PowerProfile powerProfile, HealthStats healt\n     public static double calcVideoPower(PowerProfile powerProfile, HealthStats healthStats) {\n         long timeMs = getTimerTime(healthStats, UidHealthStats.TIMER_VIDEO);\n         double powerMa = powerProfile.getAveragePowerUni(PowerProfile.POWER_VIDEO);\n-        return new UsageBasedPowerEstimator(powerMa).calculatePower(timeMs);\n+        double power = new UsageBasedPowerEstimator(powerMa).calculatePower(timeMs);\n+        if (power > 0) {\n+            return power;\n+        }\n+        return 0;\n     }\n \n     /**\n@@ -657,7 +683,11 @@ public static double calcScreenPower(PowerProfile powerProfile, HealthStats heal\n         long fgActivityMs = getTimerTime(healthStats, UidHealthStats.TIMER_FOREGROUND_ACTIVITY);\n         long screenOnTimeMs = Math.min(topAppMs, fgActivityMs);\n         double powerMa = powerProfile.getAveragePowerUni(PowerProfile.POWER_SCREEN_ON);\n-        return new UsageBasedPowerEstimator(powerMa).calculatePower(screenOnTimeMs);\n+        double power = new UsageBasedPowerEstimator(powerMa).calculatePower(screenOnTimeMs);\n+        if (power > 0) {\n+            return power;\n+        }\n+        return 0;\n     }\n \n     /**\n@@ -689,7 +719,10 @@ public static double calcSystemServicePower(PowerProfile powerProfile, HealthSta\n                 power += estimateCpuCoresPower(powerProfile, snapshot, timeMs, false);\n             }\n         }\n-        return power;\n+        if (power > 0) {\n+            return power;\n+        }\n+        return 0;\n     }\n \n     /**\n@@ -701,6 +734,10 @@ public static double calcIdlePower(PowerProfile powerProfile, HealthStats health\n         long batteryUptimeMs = getMeasure(healthStats, UidHealthStats.MEASUREMENT_UPTIME_BATTERY_MS);\n         double suspendPowerMah = new UsageBasedPowerEstimator(powerProfile.getAveragePowerUni(PowerProfile.POWER_CPU_SUSPEND)).calculatePower(batteryRealtimeMs);\n         double idlePowerMah = new UsageBasedPowerEstimator(powerProfile.getAveragePowerUni(PowerProfile.POWER_CPU_IDLE)).calculatePower(batteryUptimeMs);\n-        return suspendPowerMah + idlePowerMah;\n+        double power = suspendPowerMah + idlePowerMah;\n+        if (power > 0) {\n+            return power;\n+        }\n+        return 0;\n     }\n }",
      "parent_sha": "6bbc01f461a285641504c109e66064e39431ed3e"
    }
  },
  {
    "oid": "d005af8d51d1fc00bf49ead5dfa35d4acab58f17",
    "message": "fix onWindowfocuschange",
    "date": "2019-03-14T02:34:47Z",
    "url": "https://github.com/Tencent/matrix/commit/d005af8d51d1fc00bf49ead5dfa35d4acab58f17",
    "details": {
      "sha": "01947b96837f990cc798337bb218d3a801df1f43",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/Tencent/matrix/blob/d005af8d51d1fc00bf49ead5dfa35d4acab58f17/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fcore%2FAppMethodBeat.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/d005af8d51d1fc00bf49ead5dfa35d4acab58f17/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fcore%2FAppMethodBeat.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fcore%2FAppMethodBeat.java?ref=d005af8d51d1fc00bf49ead5dfa35d4acab58f17",
      "patch": "@@ -169,12 +169,11 @@ public static void at(Activity activity, boolean isFocus) {\n         String activityName = activity.getClass().getName();\n         if (isFocus) {\n             sFocusedActivity = activityName;\n-            if (!sFocusActivitySet.add(activityName)) {\n-                MatrixLog.w(TAG, \"[at] maybe wrong! why has two same focused activity[%s]!\", activityName);\n-            }\n-            synchronized (listeners) {\n-                for (IAppMethodBeatListener listener : listeners) {\n-                    listener.onActivityFocused(activityName);\n+            if (sFocusActivitySet.add(activityName)) {\n+                synchronized (listeners) {\n+                    for (IAppMethodBeatListener listener : listeners) {\n+                        listener.onActivityFocused(activityName);\n+                    }\n                 }\n             }\n         } else {\n@@ -264,7 +263,7 @@ private static void checkPileup(int index) {\n             if (indexRecord.index == index || (indexRecord.index == -1 && sLastIndex == Constants.BUFFER_SIZE - 1)) {\n                 indexRecord.isValid = false;\n                 sIndexRecordHead = indexRecord = indexRecord.next;\n-                MatrixLog.w(TAG, \"[checkPileup] index:%s\", index);\n+                MatrixLog.w(TAG, \"[checkPileup] %s\", indexRecord.toString());\n             } else {\n                 break;\n             }",
      "parent_sha": "69e2107672c353ddb8310c504945e2b98bdd7a31"
    }
  },
  {
    "oid": "a3ef3a00c3da17f7a5cef9cedf5321e1a2a5f37a",
    "message": "fix null point",
    "date": "2021-12-06T14:31:35Z",
    "url": "https://github.com/Tencent/matrix/commit/a3ef3a00c3da17f7a5cef9cedf5321e1a2a5f37a",
    "details": {
      "sha": "46ca199128ef7e30f93f5206750d42dc5b71da81",
      "filename": "matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/OpenGLReportInfo.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/a3ef3a00c3da17f7a5cef9cedf5321e1a2a5f37a/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FOpenGLReportInfo.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/a3ef3a00c3da17f7a5cef9cedf5321e1a2a5f37a/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FOpenGLReportInfo.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FOpenGLReportInfo.java?ref=a3ef3a00c3da17f7a5cef9cedf5321e1a2a5f37a",
      "patch": "@@ -19,14 +19,14 @@ public OpenGLReportInfo(OpenGLInfo innerInfo) {\n         this.innerInfo = innerInfo;\n         idList.add(innerInfo.getId());\n         appendParamsInfos(innerInfo.getMemoryInfo());\n-        totalSize += innerInfo.getMemoryInfo().getSize();\n     }\n \n     public void appendParamsInfos(MemoryInfo memoryInfo) {\n         if (memoryInfo == null) {\n             return;\n         }\n         OpenGLInfo.TYPE resType = memoryInfo.getResType();\n+        totalSize += innerInfo.getMemoryInfo().getSize();\n         if (resType == OpenGLInfo.TYPE.TEXTURE) {\n             FaceInfo[] faces = memoryInfo.getFaces();\n             for (FaceInfo faceInfo : faces) {",
      "parent_sha": "31dc956bbf5c1a442f7780b5b6e17cdb77801312"
    }
  },
  {
    "oid": "f3f42f025741697747ec9de299d23333ec2f9960",
    "message": "Add thread blocked checker",
    "date": "2021-01-05T07:42:54Z",
    "url": "https://github.com/Tencent/matrix/commit/f3f42f025741697747ec9de299d23333ec2f9960",
    "details": {
      "sha": "69aef051e1611ed1403f048ae87bb3b77f378c82",
      "filename": "wxperf-backtrace/src/main/java/com/tencent/components/backtrace/WeChatBacktrace.java",
      "status": "modified",
      "additions": 59,
      "deletions": 4,
      "changes": 63,
      "blob_url": "https://github.com/Tencent/matrix/blob/f3f42f025741697747ec9de299d23333ec2f9960/wxperf-backtrace%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fcomponents%2Fbacktrace%2FWeChatBacktrace.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/f3f42f025741697747ec9de299d23333ec2f9960/wxperf-backtrace%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fcomponents%2Fbacktrace%2FWeChatBacktrace.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/wxperf-backtrace%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fcomponents%2Fbacktrace%2FWeChatBacktrace.java?ref=f3f42f025741697747ec9de299d23333ec2f9960",
      "patch": "@@ -38,7 +38,7 @@ public class WeChatBacktrace implements Handler.Callback {\n     private final static String SYSTEM_LIBRARY_PATH = \"/system/lib/\";\n     private final static String SYSTEM_LIBRARY_PATH_64 = \"/system/lib64/\";\n \n-    private final static String ISOLATE_PROCESS_SUFFIX = \":wechatbacktrace\";\n+    public final static String ISOLATE_PROCESS_SUFFIX = \":wechatbacktrace\";\n \n     public static boolean is64BitRuntime() {\n         final String currRuntimeABI = Build.CPU_ABI;\n@@ -92,10 +92,18 @@ public static String getSystemLibraryPath() {\n \n     private Mode mCurrentBacktraceMode;\n \n+    public interface IThreadBlockedCallback {\n+        void callback(boolean blocked);\n+    }\n+\n     public interface LibraryLoader {\n         void load(String library);\n     }\n \n+    public static void setThreadBlockedCallback(IThreadBlockedCallback callback) {\n+        ThreadTaskExecutor.setThreadBlockedCallback(callback);\n+    }\n+\n     @Override\n     public boolean handleMessage(Message msg) {\n         switch (msg.what) {\n@@ -223,16 +231,32 @@ public void onReceive(Context context, final Intent intent) {\n         }\n     }\n \n-    private final static class ThreadTaskExecutor implements Runnable {\n+    private final static class ThreadTaskExecutor implements Runnable, Handler.Callback {\n         private String mThreadName;\n         private Thread mThreadExecutor;\n         private HashMap<String, Runnable> mRunnableTasks = new HashMap<>();\n         private Queue<String> mTaskQueue = new LinkedList<>();\n \n+        private Handler mBlockedChecker = new Handler(Looper.getMainLooper(), this);\n+        private final static int MSG_BLOCKED_CHECK = 1;\n+        private final static long BLOCKED_CHECK_INTERVAL = 600 * 1000;\n+\n+        private boolean mThreadBlocked = false;\n+\n+        private static IThreadBlockedCallback sCallback = null;\n+\n         public ThreadTaskExecutor(String threadName) {\n             mThreadName = threadName;\n         }\n \n+        public static void setThreadBlockedCallback(IThreadBlockedCallback callback) {\n+            sCallback = callback;\n+        }\n+\n+        public boolean isThreadBlocked() {\n+            return mThreadBlocked;\n+        }\n+\n         public void arrangeTask(Runnable runnable, String tag) {\n             synchronized (mTaskQueue) {\n                 if (mTaskQueue.contains(tag)) {\n@@ -247,27 +271,50 @@ public void arrangeTask(Runnable runnable, String tag) {\n                     mThreadExecutor = new Thread(this, mThreadName);\n                     mThreadExecutor.setPriority(Thread.NORM_PRIORITY);\n                     mThreadExecutor.start();\n+                    mBlockedChecker.removeMessages(MSG_BLOCKED_CHECK);\n+                    mBlockedChecker.sendEmptyMessageDelayed(MSG_BLOCKED_CHECK, BLOCKED_CHECK_INTERVAL);\n                 }\n             }\n         }\n \n         @Override\n         public void run() {\n+\n+            mThreadBlocked = false;\n+\n             Runnable runnable = null;\n+            String tag = null;\n             do {\n \n                 if (runnable != null) {\n+                    Log.i(TAG, \"Before '%s' task execution..\", tag);\n                     runnable.run();\n+                    Log.i(TAG, \"After '%s' task execution..\", tag);\n                 }\n \n                 synchronized (mTaskQueue) {\n-                    String tag = mTaskQueue.poll();\n+                    tag = mTaskQueue.poll();\n                     if (tag == null) {\n                         return;\n                     }\n                     runnable = mRunnableTasks.remove(tag);\n                 }\n             } while (runnable != null);\n+\n+            mBlockedChecker.removeMessages(MSG_BLOCKED_CHECK);\n+        }\n+\n+        @Override\n+        public boolean handleMessage(Message msg) {\n+            if (msg.what == MSG_BLOCKED_CHECK) {\n+                mThreadBlocked = true;\n+\n+                IThreadBlockedCallback callback = sCallback;\n+                if (callback != null) {\n+                    callback.callback(true);\n+                }\n+            }\n+            return false;\n         }\n     }\n \n@@ -279,6 +326,14 @@ public static WeChatBacktrace instance() {\n         return Singleton.INSTANCE;\n     }\n \n+    public boolean isBacktraceThreadBlocked() {\n+        if (mThreadTaskExecutor != null) {\n+            return mThreadTaskExecutor.isThreadBlocked();\n+        }\n+\n+        return true;\n+    }\n+\n     public boolean hasWarmedUp() {\n         if (!mInitialized) {\n             return false;\n@@ -388,7 +443,7 @@ private void iterateTargetDirectory(File target, CancellationSignal cs, FileFilt\n         }\n     }\n \n-    private final static boolean sFakeTest = true;\n+    private final static boolean sFakeTest = false;\n \n     // TODO For debug\n     final CancellationSignal fakeCS = new CancellationSignal();",
      "parent_sha": "374e9fb3abb1fae227edb5774fdad29e3e07ffe1"
    }
  },
  {
    "oid": "7c5941e392436690ada2787bce7feaff63771c4c",
    "message": "fix TraceDataUtils bug",
    "date": "2019-07-05T03:26:45Z",
    "url": "https://github.com/Tencent/matrix/commit/7c5941e392436690ada2787bce7feaff63771c4c",
    "details": {
      "sha": "ceb221b9c3c7a90fbee994eac628fbded361c0e8",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/constants/Constants.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/7c5941e392436690ada2787bce7feaff63771c4c/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fconstants%2FConstants.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/7c5941e392436690ada2787bce7feaff63771c4c/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fconstants%2FConstants.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fconstants%2FConstants.java?ref=7c5941e392436690ada2787bce7feaff63771c4c",
      "patch": "@@ -27,7 +27,7 @@ public class Constants {\n     public static final int FILTER_STACK_MAX_COUNT = 60;\n     public static final float FILTER_STACK_KEY_ALL_PERCENT = .3F;\n     public static final float FILTER_STACK_KEY_PATENT_PERCENT = .8F;\n-    public static final int DEFAULT_EVIL_METHOD_THRESHOLD_MS = 1000;\n+    public static final int DEFAULT_EVIL_METHOD_THRESHOLD_MS = 700;\n     public static final int DEFAULT_FPS_TIME_SLICE_ALIVE_MS = 10 * 1000;\n     public static final int TIME_MILLIS_TO_NANO = 1000000;\n     public static final int DEFAULT_ANR = 5 * 1000;",
      "parent_sha": "d2c98d5f934f41ee5c4a3fa0d2965e2453afad29"
    }
  },
  {
    "oid": "84be67daafbafb9387287aacb29fc3738f4d1685",
    "message": "Fix battery util casting issue",
    "date": "2022-08-11T08:20:35Z",
    "url": "https://github.com/Tencent/matrix/commit/84be67daafbafb9387287aacb29fc3738f4d1685",
    "details": {
      "sha": "d6e162a08f9df43c203fbd5b8623370b935260df",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/utils/BatteryCanaryUtil.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/Tencent/matrix/blob/84be67daafbafb9387287aacb29fc3738f4d1685/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FBatteryCanaryUtil.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/84be67daafbafb9387287aacb29fc3738f4d1685/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FBatteryCanaryUtil.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FBatteryCanaryUtil.java?ref=84be67daafbafb9387287aacb29fc3738f4d1685",
      "patch": "@@ -685,7 +685,8 @@ public static int getBatteryCapacityImmediately(Context context) {\n             Method method;\n             try {\n                 method = profileClass.getMethod(\"getAveragePower\", String.class);\n-                return (int) method.invoke(profileObject, PowerProfile.POWER_BATTERY_CAPACITY);\n+                double capacity = (double) method.invoke(profileObject, PowerProfile.POWER_BATTERY_CAPACITY);\n+                return (int) capacity;\n             } catch (Throwable e) {\n                 MatrixLog.w(TAG, \"get PowerProfile failed: \" + e.getMessage());\n             }",
      "parent_sha": "ad47c93603072acf0942e067598a336db25cdc48"
    }
  },
  {
    "oid": "aa8abc87ffa33f0f0e0453a1128b2d7bb48e3d09",
    "message": "fix bug",
    "date": "2020-01-20T03:59:52Z",
    "url": "https://github.com/Tencent/matrix/commit/aa8abc87ffa33f0f0e0453a1128b2d7bb48e3d09",
    "details": {
      "sha": "81ab3e67dde2ff702ab7ad6c80e4eb443819481c",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/Tencent/matrix/blob/aa8abc87ffa33f0f0e0453a1128b2d7bb48e3d09/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fcore%2FAppMethodBeat.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/aa8abc87ffa33f0f0e0453a1128b2d7bb48e3d09/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fcore%2FAppMethodBeat.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fcore%2FAppMethodBeat.java?ref=aa8abc87ffa33f0f0e0453a1128b2d7bb48e3d09",
      "patch": "@@ -343,17 +343,14 @@ public IndexRecord maskIndex(String source) {\n                         indexRecord.next = tmp;\n                     } else {\n                         IndexRecord tmp = last.next;\n-                        if (null != last.next) {\n-                            last.next = indexRecord;\n-                        }\n+                        last.next = indexRecord;\n                         indexRecord.next = tmp;\n                     }\n                     return indexRecord;\n                 }\n                 last = record;\n                 record = record.next;\n             }\n-\n             last.next = indexRecord;\n \n             return indexRecord;",
      "parent_sha": "19a4cd431e12ae2cf5fa00fd897af4c7cd7a3bf0"
    }
  },
  {
    "oid": "a01432dc2acb387af001b9568205417ec712b287",
    "message": "fix so name",
    "date": "2020-07-17T09:30:46Z",
    "url": "https://github.com/Tencent/matrix/commit/a01432dc2acb387af001b9568205417ec712b287",
    "details": {
      "sha": "fbb2da9d3a4019767bee8d6229346e256f6d3d93",
      "filename": "wxperf-hook/src/main/java/com/tencent/wxperf/jni/HookManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/a01432dc2acb387af001b9568205417ec712b287/wxperf-hook%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fwxperf%2Fjni%2FHookManager.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/a01432dc2acb387af001b9568205417ec712b287/wxperf-hook%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fwxperf%2Fjni%2FHookManager.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/wxperf-hook%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fwxperf%2Fjni%2FHookManager.java?ref=a01432dc2acb387af001b9568205417ec712b287",
      "patch": "@@ -21,7 +21,7 @@ public class HookManager {\n \n     private HookManager(){\n         try {\n-            System.loadLibrary(\"wxperf\");\n+            System.loadLibrary(\"wxperf-jni\");\n         } catch (Throwable e) {\n             Log.printStack(Log.ERROR, TAG, e);\n         }",
      "parent_sha": "c0cefea462338cdb5216b314501cd7cfcf90109b"
    }
  },
  {
    "oid": "e373e08572790aa16ec1b881afd72e8a2ddcc028",
    "message": "Perform trimming when vmsize is above the critical level only.",
    "date": "2021-07-09T08:22:07Z",
    "url": "https://github.com/Tencent/matrix/commit/e373e08572790aa16ec1b881afd72e8a2ddcc028",
    "details": {
      "sha": "dd3986b3e963d5996e4782e09cf57630c0a646b5",
      "filename": "matrix/matrix-android/matrix-hooks/src/main/java/com/tencent/matrix/hook/memory/GCSemiSpaceTrimmer.java",
      "status": "modified",
      "additions": 85,
      "deletions": 4,
      "changes": 89,
      "blob_url": "https://github.com/Tencent/matrix/blob/e373e08572790aa16ec1b881afd72e8a2ddcc028/matrix%2Fmatrix-android%2Fmatrix-hooks%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fhook%2Fmemory%2FGCSemiSpaceTrimmer.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/e373e08572790aa16ec1b881afd72e8a2ddcc028/matrix%2Fmatrix-android%2Fmatrix-hooks%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fhook%2Fmemory%2FGCSemiSpaceTrimmer.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-hooks%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fhook%2Fmemory%2FGCSemiSpaceTrimmer.java?ref=e373e08572790aa16ec1b881afd72e8a2ddcc028",
      "patch": "@@ -1,16 +1,33 @@\n package com.tencent.matrix.hook.memory;\n \n+import android.os.Handler;\n+import android.os.HandlerThread;\n+import android.os.Looper;\n+\n import androidx.annotation.Nullable;\n \n import com.tencent.matrix.hook.HookManager.NativeLibraryLoader;\n import com.tencent.matrix.util.MatrixLog;\n \n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.InputStreamReader;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Pattern;\n+\n public final class GCSemiSpaceTrimmer {\n     private static final String TAG = \"Matrix.GCSemiSpaceTrimmer\";\n \n     public static final GCSemiSpaceTrimmer INSTANCE = new GCSemiSpaceTrimmer();\n \n+    private static final Pattern NOT_NUM_PATTERN = Pattern.compile(\"[^0-9]\");\n+    private static final long DEFAULT_VMSIZE_SAMPLE_INTERVAL = TimeUnit.MINUTES.toMillis(3);\n+\n     private NativeLibraryLoader mNativeLibLoader = null;\n+    private float mCriticalVmSizeRatio = 0.0f;\n+    private long mVmSizeSampleInterval = DEFAULT_VMSIZE_SAMPLE_INTERVAL;\n+    private HandlerThread mSampleThread = null;\n+    private Handler mSampleHandler = null;\n     private boolean mNativeLibLoaded = false;\n     private boolean mInstalled = false;\n \n@@ -50,20 +67,84 @@ public boolean isCompatible() {\n         }\n     }\n \n-    public boolean install() {\n+    public boolean install(float criticalVmSizeRatio, long vmsizeSampleInterval, @Nullable Looper vmSampleLooper) {\n         synchronized (this) {\n             if (mInstalled) {\n-                MatrixLog.e(TAG, \"Alreay installed.\");\n+                MatrixLog.e(TAG, \"Already installed.\");\n                 return true;\n             }\n             if (!ensureNativeLibLoaded()) {\n+                MatrixLog.e(TAG, \"Fail to load native library.\");\n+                return false;\n+            }\n+            mCriticalVmSizeRatio = criticalVmSizeRatio;\n+            if (vmsizeSampleInterval > 0) {\n+                mVmSizeSampleInterval = vmsizeSampleInterval;\n+            } else if (vmsizeSampleInterval == 0) {\n+                mVmSizeSampleInterval = DEFAULT_VMSIZE_SAMPLE_INTERVAL;\n+            } else {\n+                MatrixLog.e(TAG, \"vmsizeSampleInterval cannot less than zero. (value: \" + vmsizeSampleInterval + \")\");\n                 return false;\n             }\n-            mInstalled = nativeInstall();\n-            return mInstalled;\n+            if (vmSampleLooper != null) {\n+                mSampleHandler = new Handler(vmSampleLooper);\n+            } else {\n+                mSampleThread = new HandlerThread(\"Matrix.GCSST\");\n+                mSampleThread.start();\n+                mSampleHandler = new Handler(mSampleThread.getLooper());\n+            }\n+            mSampleHandler.postDelayed(mSampleTask, mVmSizeSampleInterval);\n+            MatrixLog.i(TAG, \"Installed, critcal_vmsize_ratio: %s, vmsize_sample_interval: %s\",\n+                    criticalVmSizeRatio, vmsizeSampleInterval);\n+            return true;\n+        }\n+    }\n+\n+    private static long readVmSize() {\n+        long vssSize = -1L;\n+        try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\"/proc/self/status\")))) {\n+            String content;\n+            while ((content = br.readLine()) != null) {\n+                content = content.toLowerCase();\n+                if (content.contains(\"vmsize\")) {\n+                    // current vss size\n+                    vssSize = Long.parseLong(NOT_NUM_PATTERN.matcher(content).replaceAll(\"\").trim()) * 1024;\n+                    break;\n+                }\n+            }\n+        } catch (Throwable thr) {\n+            MatrixLog.printErrStackTrace(TAG, thr, \"read proc status failed.\");\n         }\n+        return vssSize;\n     }\n \n+    private final Runnable mSampleTask = new Runnable() {\n+        @Override\n+        public void run() {\n+            final long vmSize = readVmSize();\n+            if (vmSize < 0) {\n+                MatrixLog.e(TAG, \"Fail to read vss size, skip checking this time.\");\n+                mSampleHandler.postDelayed(this, mVmSizeSampleInterval);\n+            } else {\n+                // (vmsize / 4G > ratio) => (vmsize > ratio * 4G)\n+                if (vmSize > 4L * 1024 * 1024 * 1024 * mCriticalVmSizeRatio) {\n+                    MatrixLog.i(TAG, \"VmSize usage reaches above critical level, trigger native install.\"\n+                            + \" vmsize: %s, critical_ratio: %s\", vmSize, mCriticalVmSizeRatio);\n+                    final boolean nativeInstallRes = nativeInstall();\n+                    if (nativeInstallRes) {\n+                        MatrixLog.i(TAG, \"nativeInstall triggered successfully.\");\n+                    } else {\n+                        MatrixLog.i(TAG, \"Fail to trigger nativeInstall.\");\n+                    }\n+                } else {\n+                    MatrixLog.i(TAG, \"VmSize usage is under critical level, check next time.\"\n+                            + \" vmsize: %s, critical_ratio: %s\", vmSize, mCriticalVmSizeRatio);\n+                    mSampleHandler.postDelayed(this, mVmSizeSampleInterval);\n+                }\n+            }\n+        }\n+    };\n+\n     private native boolean nativeIsCompatible();\n     private native boolean nativeInstall();\n ",
      "parent_sha": "fbf3b463032c2f3006cd103756869f277abbd3c7"
    }
  },
  {
    "oid": "3c0435066398934a5c162469d33397fb269bb422",
    "message": "Update battery canary with procStat benchmark",
    "date": "2020-11-12T06:36:43Z",
    "url": "https://github.com/Tencent/matrix/commit/3c0435066398934a5c162469d33397fb269bb422",
    "details": {
      "sha": "e389f10eda0f452aed1765e02863664a91ccdcad",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/androidTest/java/com/tencent/matrix/batterycanary/utils/ProcessCpuTrackUtilsTest.java",
      "status": "modified",
      "additions": 88,
      "deletions": 1,
      "changes": 89,
      "blob_url": "https://github.com/Tencent/matrix/blob/3c0435066398934a5c162469d33397fb269bb422/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2FandroidTest%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FProcessCpuTrackUtilsTest.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/3c0435066398934a5c162469d33397fb269bb422/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2FandroidTest%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FProcessCpuTrackUtilsTest.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2FandroidTest%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FProcessCpuTrackUtilsTest.java?ref=3c0435066398934a5c162469d33397fb269bb422",
      "patch": "@@ -33,9 +33,12 @@\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n+import java.io.BufferedReader;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n \n /**\n  * Instrumented test, which will execute on an Android device.\n@@ -141,6 +144,28 @@ public void testGetMyProcThreadStatOpt() {\n         }\n     }\n \n+    @SuppressWarnings(\"ConstantConditions\")\n+    @Test\n+    public void testGetMyProcThreadStatOptR2() {\n+        String dirPath = \"/proc/\" + Process.myPid() + \"/task\";\n+        for (File item : new File(dirPath).listFiles()) {\n+            if (item.isDirectory()) {\n+                String catPath = new File(item, \"stat\").getAbsolutePath();\n+                String cat = BatteryCanaryUtil.cat(catPath);\n+                Assert.assertFalse(TextUtils.isEmpty(cat));\n+\n+                ProcStatInfo stat = parseJiffiesInfoWithBufferForPathR2(catPath);\n+                Assert.assertNotNull(stat.comm);\n+                Assert.assertTrue(stat.utime >= 0);\n+                Assert.assertTrue(stat.stime >= 0);\n+                Assert.assertTrue(stat.cutime >= 0);\n+                Assert.assertTrue(stat.cstime >= 0);\n+                long jiffies = stat.utime + stat.stime + stat.cutime + stat.cstime;\n+                Assert.assertTrue(jiffies >= 0);\n+            }\n+        }\n+    }\n+\n     @SuppressWarnings(\"ConstantConditions\")\n     @Test\n     public void testGetMyProcThreadStatAndCompare() {\n@@ -157,6 +182,15 @@ public void testGetMyProcThreadStatAndCompare() {\n                 Assert.assertEquals(statInfo1.stime, statInfo2.stime);\n                 Assert.assertEquals(statInfo1.cutime, statInfo2.cutime);\n                 Assert.assertEquals(statInfo1.cstime, statInfo2.cstime);\n+\n+                cat = getProStatText(catPath);\n+                statInfo1 = parseJiffiesInfoWithSplits(cat);\n+                statInfo2 = parseJiffiesInfoWithBuffer(cat.getBytes());\n+                Assert.assertEquals(statInfo1.comm, statInfo2.comm);\n+                Assert.assertEquals(statInfo1.utime, statInfo2.utime);\n+                Assert.assertEquals(statInfo1.stime, statInfo2.stime);\n+                Assert.assertEquals(statInfo1.cutime, statInfo2.cutime);\n+                Assert.assertEquals(statInfo1.cstime, statInfo2.cstime);\n             }\n         }\n     }\n@@ -188,7 +222,19 @@ public void testGetMyProcThreadStatBenchmark() {\n         }\n         long timeConsumed2 = SystemClock.uptimeMillis() - current;\n \n-        Assert.fail(\"TIME CONSUMED: \" + timeConsumed1 + \" vs \" + timeConsumed2);\n+        current = SystemClock.uptimeMillis();\n+        for (int i = 0; i < times; i++) {\n+            String dirPath = \"/proc/\" + Process.myPid() + \"/task\";\n+            for (File item : new File(dirPath).listFiles()) {\n+                if (item.isDirectory()) {\n+                    String catPath = new File(item, \"stat\").getAbsolutePath();\n+                    parseJiffiesInfoWithBufferForPathR2(catPath);\n+                }\n+            }\n+        }\n+        long timeConsumed3 = SystemClock.uptimeMillis() - current;\n+\n+        Assert.fail(\"TIME CONSUMED: \" + timeConsumed1 + \" vs \" + timeConsumed2 + \" vs \" + timeConsumed3);\n     }\n \n     public static class ProcStatInfo {\n@@ -241,6 +287,47 @@ static ProcStatInfo parseJiffiesInfoWithBufferForPath(String path, byte[] buffer\n         return parseJiffiesInfoWithBuffer(buffer);\n     }\n \n+\n+    static ProcStatInfo parseJiffiesInfoWithBufferForPathR2(String path) {\n+        String text = getProStatText(path);\n+        if (TextUtils.isEmpty(text)) return null;\n+        //noinspection ConstantConditions\n+        return parseJiffiesInfoWithBuffer(text.getBytes());\n+    }\n+\n+    static String getProStatText(String path) {\n+        File file = new File(path);\n+        if (!file.exists()) {\n+            return null;\n+        }\n+\n+        StringBuilder sb = new StringBuilder();\n+        int spaceCount = 0;\n+        int readBytes;\n+        try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8))) {\n+            while ((readBytes = reader.read()) != -1) {\n+                char character = (char) readBytes;\n+                sb.append(character);\n+                if (' ' == character) {\n+                    spaceCount++;\n+                    if (spaceCount > 16) {\n+                        break;\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            MatrixLog.printErrStackTrace(TAG, e, \"read buffer from file fail\");\n+            readBytes = -1;\n+        }\n+\n+        if (readBytes <= 0) {\n+            return null;\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+\n     static ProcStatInfo parseJiffiesInfoWithBuffer(byte[] statBuffer) {\n         /*\n          * \u6837\u672c:",
      "parent_sha": "59ae69638a245b460965e0989f05a9ed69b5e35d"
    }
  },
  {
    "oid": "ee0fcc7ffe64f81de9293c6b412dc12f2bd6a0f5",
    "message": "opengl-hook: fix removing record failed",
    "date": "2022-12-13T02:38:35Z",
    "url": "https://github.com/Tencent/matrix/commit/ee0fcc7ffe64f81de9293c6b412dc12f2bd6a0f5",
    "details": {
      "sha": "610949f454049d3b53e1a6e4fe044cd58b865aac",
      "filename": "matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/ResRecordManager.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/Tencent/matrix/blob/ee0fcc7ffe64f81de9293c6b412dc12f2bd6a0f5/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FResRecordManager.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/ee0fcc7ffe64f81de9293c6b412dc12f2bd6a0f5/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FResRecordManager.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FResRecordManager.java?ref=ee0fcc7ffe64f81de9293c6b412dc12f2bd6a0f5",
      "patch": "@@ -90,6 +90,8 @@ public void delete(OpenGLInfo del) {\n             return;\n         }\n \n+        OpenGLInfo infoDel;\n+\n         synchronized (mInfoList) {\n             // \u4e4b\u524d\u53ef\u80fd\u91ca\u653e\u8fc7\n             int index = mInfoList.indexOf(del);\n@@ -117,6 +119,8 @@ public void delete(OpenGLInfo del) {\n                 return;\n             }\n \n+            infoDel = info;\n+\n             AtomicInteger counter = info.getCounter();\n             counter.set(counter.get() - 1);\n             if (counter.get() == 0) {\n@@ -141,7 +145,7 @@ public void delete(OpenGLInfo del) {\n         synchronized (mCallbackList) {\n             for (Callback cb : mCallbackList) {\n                 if (null != cb) {\n-                    cb.delete(del);\n+                    cb.delete(infoDel);\n                 }\n             }\n         }",
      "parent_sha": "60edc461781f1f8828e4e1fa7d7512bb2cba3d40"
    }
  },
  {
    "oid": "d12b91adb34a08872f9e7f8ee6287c9081f44d56",
    "message": "Update battery printer format",
    "date": "2021-02-22T13:21:47Z",
    "url": "https://github.com/Tencent/matrix/commit/d12b91adb34a08872f9e7f8ee6287c9081f44d56",
    "details": {
      "sha": "a8ac12b1df42eedd3f77f4f42f6f3f4ce1951ea9",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/BatteryMonitorCallback.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/d12b91adb34a08872f9e7f8ee6287c9081f44d56/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2FBatteryMonitorCallback.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/d12b91adb34a08872f9e7f8ee6287c9081f44d56/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2FBatteryMonitorCallback.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2FBatteryMonitorCallback.java?ref=d12b91adb34a08872f9e7f8ee6287c9081f44d56",
      "patch": "@@ -557,7 +557,7 @@ protected void onReportLocation(@NonNull Delta<LocationSnapshot> delta) {}\n          */\n         @SuppressWarnings(\"UnusedReturnValue\")\n         public static class Printer {\n-            private final StringBuilder sb = new StringBuilder(\"\\t\\n\");\n+            private final StringBuilder sb = new StringBuilder();\n \n             public Printer() {\n             }",
      "parent_sha": "0184efae147eade9b6389762e61b655ff133684a"
    }
  },
  {
    "oid": "91699ea533a0e7bbf60929b41754fcce27aed1bc",
    "message": "tmp commit for Thread Report",
    "date": "2020-03-13T14:12:56Z",
    "url": "https://github.com/Tencent/matrix/commit/91699ea533a0e7bbf60929b41754fcce27aed1bc",
    "details": {
      "sha": "a5b2b5cf35f7d5c84c73b06f588804b93491d010",
      "filename": "matrix/matrix-android/matrix-thread-canary/src/main/java/com/tencent/matrix/threadcanary/ThreadMonitor.java",
      "status": "modified",
      "additions": 24,
      "deletions": 1,
      "changes": 25,
      "blob_url": "https://github.com/Tencent/matrix/blob/91699ea533a0e7bbf60929b41754fcce27aed1bc/matrix%2Fmatrix-android%2Fmatrix-thread-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fthreadcanary%2FThreadMonitor.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/91699ea533a0e7bbf60929b41754fcce27aed1bc/matrix%2Fmatrix-android%2Fmatrix-thread-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fthreadcanary%2FThreadMonitor.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-thread-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fthreadcanary%2FThreadMonitor.java?ref=91699ea533a0e7bbf60929b41754fcce27aed1bc",
      "patch": "@@ -154,6 +154,7 @@ public void next(ThreadInfo threadInfo) {\n                         threadInfo.stackTrace = appThreadInfo.stackTrace;\n                         threadInfo.isHandlerThread = appThreadInfo.isHandlerThread;\n                         threadInfo.target = appThreadInfo.target;\n+                        threadInfo.isJavaThread = true;\n                     } else {\n                         threadInfo.name = threadInfo.name.replaceAll(\"-?[0-9]\\\\d*\", \"?\");\n                     }\n@@ -292,6 +293,7 @@ public void next(ThreadInfo threadInfo) {\n                     threadInfo.stackTrace = appThreadInfo.stackTrace;\n                     threadInfo.isHandlerThread = appThreadInfo.isHandlerThread;\n                     threadInfo.target = appThreadInfo.target;\n+                    threadInfo.isJavaThread = true;\n                 } else {\n                     threadInfo.name = threadInfo.name.replaceAll(\"-?[0-9]\\\\d*\", \"?\");\n                 }\n@@ -455,6 +457,7 @@ public static class ThreadInfo {\n         String state;\n         int stackTrace;\n         String target;\n+        boolean isJavaThread;\n \n         @Override\n         public boolean equals(Object obj) {\n@@ -466,6 +469,22 @@ public boolean equals(Object obj) {\n             }\n         }\n \n+        public String getName() {\n+            return name;\n+        }\n+\n+        public long getTid() {\n+            return tid;\n+        }\n+\n+        public boolean isHandlerThread() {\n+            return isHandlerThread;\n+        }\n+\n+        public boolean isJavaThread() {\n+            return isJavaThread;\n+        }\n+\n         @Override\n         public int hashCode() {\n             return (int) tid;\n@@ -477,7 +496,7 @@ public String toString() {\n         }\n     }\n \n-    private static class ThreadGroupInfo {\n+    public static class ThreadGroupInfo {\n         String name;\n         List<ThreadInfo> list = new LinkedList<>();\n \n@@ -486,6 +505,10 @@ private static class ThreadGroupInfo {\n             this.name = name;\n         }\n \n+        public String getName() {\n+            return name;\n+        }\n+\n         public int getSize() {\n             return list.size();\n         }",
      "parent_sha": "d4afb3920c025770c8186036c08ec9956571f83e"
    }
  },
  {
    "oid": "48b5c2c4a1f431497589989bb9f865311bb7d650",
    "message": "fix crash",
    "date": "2020-04-20T06:27:01Z",
    "url": "https://github.com/Tencent/matrix/commit/48b5c2c4a1f431497589989bb9f865311bb7d650",
    "details": {
      "sha": "dc5548aa9ee929b0d12321338663a22991bb46a9",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/BatteryPrinter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/48b5c2c4a1f431497589989bb9f865311bb7d650/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2FBatteryPrinter.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/48b5c2c4a1f431497589989bb9f865311bb7d650/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2FBatteryPrinter.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2FBatteryPrinter.java?ref=48b5c2c4a1f431497589989bb9f865311bb7d650",
      "patch": "@@ -26,7 +26,7 @@ public void onJiffies(JiffiesMonitorPlugin.JiffiesResult result) {\n                 .append(\"\\t\\t\").append(\"diff(jiffies)=\").append(result.jiffiesDiff).append(\"<\").append(result.jiffiesDiff2)\n                 .append(\"\\t\\t\").append(\"average(jiffies/min)=\").append(result.jiffiesDiff2 / Math.max(1, result.upTimeDiff / ONE_MIN)).append(\"\\n\");\n         sb.append(\"==============================================================================================\").append(\"\\n\");\n-        for (JiffiesMonitorPlugin.ThreadResult threadResult : result.threadResults.subList(0, Math.min(result.threadResults.size, 8))) {\n+        for (JiffiesMonitorPlugin.ThreadResult threadResult : result.threadResults.subList(0, Math.min(result.threadResults.size(), 8))) {\n             if (threadResult.jiffiesDiff <= 0) {\n                 sb.append(\"|\\t\\t......\\n\");\n                 break;",
      "parent_sha": "fc78020d13f8ff96ffc54c6126f0d79e815f9329"
    }
  },
  {
    "oid": "3bfb2533cd9fda05cd91b84d61d6b40e74ca4e3b",
    "message": "fix checkstyle error",
    "date": "2021-12-01T10:04:32Z",
    "url": "https://github.com/Tencent/matrix/commit/3bfb2533cd9fda05cd91b84d61d6b40e74ca4e3b",
    "details": {
      "sha": "b08059ba32e1f387ede74c4bb1dfe10e5b2ac81d",
      "filename": "matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/OpenGLInfo.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/Tencent/matrix/blob/3bfb2533cd9fda05cd91b84d61d6b40e74ca4e3b/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FOpenGLInfo.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/3bfb2533cd9fda05cd91b84d61d6b40e74ca4e3b/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FOpenGLInfo.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FOpenGLInfo.java?ref=3bfb2533cd9fda05cd91b84d61d6b40e74ca4e3b",
      "patch": "@@ -1,6 +1,7 @@\n package com.tencent.matrix.openglleak.statistics.resource;\n \n import com.tencent.matrix.openglleak.utils.ActivityRecorder;\n+\n import java.util.Objects;\n import java.util.concurrent.atomic.AtomicInteger;\n \n@@ -97,7 +98,7 @@ public long getNativeStackPtr() {\n         return nativeStackPtr;\n     }\n \n-    public ActivityRecorder.ActivityInfo getActivityInfo(){\n+    public ActivityRecorder.ActivityInfo getActivityInfo() {\n         return activityInfo;\n     }\n ",
      "parent_sha": "2dd8831edaa18cab1d83c37bedb8f8bb84d0145e"
    }
  },
  {
    "oid": "f10eb03a54cbe82332178fc65635d679eb86b30e",
    "message": "Update battery jiffies status tracing",
    "date": "2021-03-12T13:40:08Z",
    "url": "https://github.com/Tencent/matrix/commit/f10eb03a54cbe82332178fc65635d679eb86b30e",
    "details": {
      "sha": "9481de5b13581c6adf15df45239f12a3b6fbcdca",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/BatteryMonitorCallback.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/Tencent/matrix/blob/f10eb03a54cbe82332178fc65635d679eb86b30e/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2FBatteryMonitorCallback.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/f10eb03a54cbe82332178fc65635d679eb86b30e/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2FBatteryMonitorCallback.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2FBatteryMonitorCallback.java?ref=f10eb03a54cbe82332178fc65635d679eb86b30e",
      "patch": "@@ -297,7 +297,13 @@ protected void onWritingJiffiesSection(AppStats appStats) {\n \n                 long minute = appStats.getMinute();\n                 for (ThreadJiffiesEntry threadJiffies : delta.dlt.threadEntries.getList()) {\n-                    // Watching thread state\n+                    if (!threadJiffies.stat.toUpperCase().contains(\"R\")) {\n+                        continue;\n+                    }\n+                    // Watching thread state when thread is:\n+                    // 1. still running (status 'R')\n+                    // 2. runing time > 10min\n+                    // 3. avgJiffies > THRESHOLD\n                     long avgJiffies = threadJiffies.get() / minute;\n                     if (appStats.isForeground()) {\n                         if (minute > 10 && avgJiffies > getMonitor().getConfig().fgThreadWatchingLimit) {",
      "parent_sha": "df70ebe948e50f48690e4c5045e671c0206c780d"
    }
  },
  {
    "oid": "e836bbc475a914a22566a1e31e27afafe97b1e19",
    "message": "Fix checkstyle",
    "date": "2021-10-29T04:57:41Z",
    "url": "https://github.com/Tencent/matrix/commit/e836bbc475a914a22566a1e31e27afafe97b1e19",
    "details": {
      "sha": "38d12cb1e42a1c0d7f7dc823e89fe68e2f4066fc",
      "filename": "matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/TraceClassWriter.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/Tencent/matrix/blob/e836bbc475a914a22566a1e31e27afafe97b1e19/matrix%2Fmatrix-android%2Fmatrix-gradle-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2FTraceClassWriter.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/e836bbc475a914a22566a1e31e27afafe97b1e19/matrix%2Fmatrix-android%2Fmatrix-gradle-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2FTraceClassWriter.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-gradle-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2FTraceClassWriter.java?ref=e836bbc475a914a22566a1e31e27afafe97b1e19",
      "patch": "@@ -24,12 +24,12 @@\n  */\n class TraceClassWriter extends ClassWriter {\n     private ClassLoader mClassLoader;\n-    public TraceClassWriter(int flags, ClassLoader classLoader) {\n+    TraceClassWriter(int flags, ClassLoader classLoader) {\n         super(flags);\n         mClassLoader = classLoader;\n     }\n \n-    public TraceClassWriter(ClassReader classReader, int flags, ClassLoader classLoader) {\n+    TraceClassWriter(ClassReader classReader, int flags, ClassLoader classLoader) {\n         super(classReader, flags);\n         mClassLoader = classLoader;\n     }",
      "parent_sha": "e6df151525a17161c491a7ffc2f43743494d412d"
    }
  },
  {
    "oid": "93dbb0206109b00878c3f70da9768f924b6eaf31",
    "message": "fix bug",
    "date": "2020-03-22T15:03:43Z",
    "url": "https://github.com/Tencent/matrix/commit/93dbb0206109b00878c3f70da9768f924b6eaf31",
    "details": {
      "sha": "17f87150f749230fa3fb97de301fd58510653ccd",
      "filename": "matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/util/ReflectUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/93dbb0206109b00878c3f70da9768f924b6eaf31/matrix%2Fmatrix-android%2Fmatrix-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Futil%2FReflectUtils.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/93dbb0206109b00878c3f70da9768f924b6eaf31/matrix%2Fmatrix-android%2Fmatrix-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Futil%2FReflectUtils.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Futil%2FReflectUtils.java?ref=93dbb0206109b00878c3f70da9768f924b6eaf31",
      "patch": "@@ -51,7 +51,7 @@ public static <T> T reflectObject(Object instance, String name, T defaultValue,\n     }\n \n     public static <T> T reflectObject(Object instance, String name, T defaultValue) {\n-        return reflectObject(instance, name, defaultValue);\n+        return reflectObject(instance, name, defaultValue, true);\n     }\n \n     public static Method reflectMethod(Object instance, boolean isHard, String name, Class<?>... argTypes) {",
      "parent_sha": "441a566acedfb0d7da492cbe11a1302634c5427c"
    }
  },
  {
    "oid": "100b6f3d5a9ae1299586aabc1fa2d1516f556428",
    "message": "un hook gl bind & gl memory interface",
    "date": "2021-12-20T10:59:29Z",
    "url": "https://github.com/Tencent/matrix/commit/100b6f3d5a9ae1299586aabc1fa2d1516f556428",
    "details": {
      "sha": "9dcc521756930cb1ea64abfcaf92a57722559342",
      "filename": "matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/OpenglLeakPlugin.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/Tencent/matrix/blob/100b6f3d5a9ae1299586aabc1fa2d1516f556428/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2FOpenglLeakPlugin.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/100b6f3d5a9ae1299586aabc1fa2d1516f556428/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2FOpenglLeakPlugin.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2FOpenglLeakPlugin.java?ref=100b6f3d5a9ae1299586aabc1fa2d1516f556428",
      "patch": "@@ -108,14 +108,14 @@ private void executeHook(IBinder iBinder) {\n             OpenGLHook.getInstance().hook(FuncNameString.GL_DELETE_FRAMEBUFFERS, map.get(FuncNameString.GL_DELETE_FRAMEBUFFERS));\n             OpenGLHook.getInstance().hook(FuncNameString.GL_GEN_RENDERBUFFERS, map.get(FuncNameString.GL_GEN_RENDERBUFFERS));\n             OpenGLHook.getInstance().hook(FuncNameString.GL_DELETE_RENDERBUFFERS, map.get(FuncNameString.GL_DELETE_RENDERBUFFERS));\n-            OpenGLHook.getInstance().hook(FuncNameString.GL_TEX_IMAGE_2D, map.get(FuncNameString.GL_TEX_IMAGE_2D));\n-            OpenGLHook.getInstance().hook(FuncNameString.GL_TEX_IMAGE_3D, map.get(FuncNameString.GL_TEX_IMAGE_3D));\n-            OpenGLHook.getInstance().hook(FuncNameString.GL_BIND_TEXTURE, map.get(FuncNameString.GL_BIND_TEXTURE));\n-            OpenGLHook.getInstance().hook(FuncNameString.GL_BIND_BUFFER, map.get(FuncNameString.GL_BIND_BUFFER));\n+//            OpenGLHook.getInstance().hook(FuncNameString.GL_TEX_IMAGE_2D, map.get(FuncNameString.GL_TEX_IMAGE_2D));\n+//            OpenGLHook.getInstance().hook(FuncNameString.GL_TEX_IMAGE_3D, map.get(FuncNameString.GL_TEX_IMAGE_3D));\n+//            OpenGLHook.getInstance().hook(FuncNameString.GL_BIND_TEXTURE, map.get(FuncNameString.GL_BIND_TEXTURE));\n+//            OpenGLHook.getInstance().hook(FuncNameString.GL_BIND_BUFFER, map.get(FuncNameString.GL_BIND_BUFFER));\n //            OpenGLHook.getInstance().hook(FuncNameString.GL_BIND_FRAMEBUFFER, map.get(FuncNameString.GL_BIND_FRAMEBUFFER));\n-            OpenGLHook.getInstance().hook(FuncNameString.GL_BIND_RENDERBUFFER, map.get(FuncNameString.GL_BIND_RENDERBUFFER));\n-            OpenGLHook.getInstance().hook(FuncNameString.GL_BUFFER_DATA, map.get(FuncNameString.GL_BUFFER_DATA));\n-            OpenGLHook.getInstance().hook(FuncNameString.GL_RENDER_BUFFER_STORAGE, map.get(FuncNameString.GL_RENDER_BUFFER_STORAGE));\n+//            OpenGLHook.getInstance().hook(FuncNameString.GL_BIND_RENDERBUFFER, map.get(FuncNameString.GL_BIND_RENDERBUFFER));\n+//            OpenGLHook.getInstance().hook(FuncNameString.GL_BUFFER_DATA, map.get(FuncNameString.GL_BUFFER_DATA));\n+//            OpenGLHook.getInstance().hook(FuncNameString.GL_RENDER_BUFFER_STORAGE, map.get(FuncNameString.GL_RENDER_BUFFER_STORAGE));\n             MatrixLog.e(TAG, \"hook finish\");\n         } catch (Throwable e) {\n             e.printStackTrace();",
      "parent_sha": "a41aeba0acc07338cc220da6115ada5c3f0523d7"
    }
  },
  {
    "oid": "cc59c1b84b7d9a1e7b6f3b12b47306c04ad83e1d",
    "message": "report cgroup",
    "date": "2021-12-14T04:25:03Z",
    "url": "https://github.com/Tencent/matrix/commit/cc59c1b84b7d9a1e7b6f3b12b47306c04ad83e1d",
    "details": {
      "sha": "ab7d0dd6d17b2ab81842598068d3cd451f11dc5d",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/SignalAnrTracer.java",
      "status": "modified",
      "additions": 21,
      "deletions": 8,
      "changes": 29,
      "blob_url": "https://github.com/Tencent/matrix/blob/cc59c1b84b7d9a1e7b6f3b12b47306c04ad83e1d/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FSignalAnrTracer.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/cc59c1b84b7d9a1e7b6f3b12b47306c04ad83e1d/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FSignalAnrTracer.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FSignalAnrTracer.java?ref=cc59c1b84b7d9a1e7b6f3b12b47306c04ad83e1d",
      "patch": "@@ -69,7 +69,7 @@ public class SignalAnrTracer extends Tracer {\n     public static boolean hasInstance = false;\n     private static long anrMessageWhen = 0L;\n     private static String anrMessageString = \"\";\n-    private static String cpuset = \"\";\n+    private static String cgroup = \"\";\n \n     static {\n         System.loadLibrary(\"trace-canary\");\n@@ -114,24 +114,37 @@ public void setSignalAnrDetectedListener(SignalAnrDetectedListener listener) {\n         sSignalAnrDetectedListener = listener;\n     }\n \n-    public static String readCpuSet() {\n+//    public static String readCpuSet() {\n+//        try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(\"/proc/self/cgroup\")))) {\n+//            String line;\n+//            while ((line = reader.readLine()) != null) {\n+//                if (line.contains(\"cpuset\") || line.contains(\"cpu\")) {\n+//                    return line;\n+//                }\n+//            }\n+//        } catch (Throwable t) {\n+//            t.printStackTrace();\n+//        }\n+//        return \"\";\n+//    }\n+\n+    public static String readCgroup() {\n+        StringBuilder ret = new StringBuilder();\n         try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(\"/proc/self/cgroup\")))) {\n             String line;\n             while ((line = reader.readLine()) != null) {\n-                if (line.contains(\"cpuset\") || line.contains(\"cpu\")) {\n-                    return line;\n-                }\n+                ret.append(line).append(\"\\n\");\n             }\n         } catch (Throwable t) {\n             t.printStackTrace();\n         }\n-        return \"\";\n+        return ret.toString();\n     }\n \n     @RequiresApi(api = Build.VERSION_CODES.M)\n     @Keep\n     private static void onANRDumped() {\n-        cpuset = readCpuSet();\n+        cgroup = readCgroup();\n         currentForeground = AppForegroundUtil.isInterestingToUser();\n         boolean needReport = isMainThreadBlocked();\n \n@@ -169,7 +182,7 @@ private static void report(boolean fromProcessErrorState) {\n         try {\n             String stackTrace = Utils.getMainThreadJavaStackTrace();\n             if (sSignalAnrDetectedListener != null) {\n-                sSignalAnrDetectedListener.onAnrDetected(stackTrace, anrMessageString, anrMessageWhen, fromProcessErrorState, cpuset);\n+                sSignalAnrDetectedListener.onAnrDetected(stackTrace, anrMessageString, anrMessageWhen, fromProcessErrorState, cgroup);\n                 return;\n             }\n ",
      "parent_sha": "1fe72232ec63cdd8f6de31a7bb225afb3508f1ad"
    }
  },
  {
    "oid": "bc7d9e2be91e6f8db63d93a7a5d110c9997a7cce",
    "message": "Revert \"[matrix-hook] Add NativeLibraryLoader to adapt custom native library loading routine in main project.\"\n\nThis reverts commit fb40ea891fa7cfe62d8cf85ab06bde99ee108698.",
    "date": "2021-05-10T06:31:27Z",
    "url": "https://github.com/Tencent/matrix/commit/bc7d9e2be91e6f8db63d93a7a5d110c9997a7cce",
    "details": {
      "sha": "0cd3a4149b60347f573a7d71703469bbe8405ef1",
      "filename": "matrix/matrix-android/matrix-hooks/src/main/java/com/tencent/matrix/hook/HookManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 17,
      "changes": 18,
      "blob_url": "https://github.com/Tencent/matrix/blob/bc7d9e2be91e6f8db63d93a7a5d110c9997a7cce/matrix%2Fmatrix-android%2Fmatrix-hooks%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fhook%2FHookManager.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/bc7d9e2be91e6f8db63d93a7a5d110c9997a7cce/matrix%2Fmatrix-android%2Fmatrix-hooks%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fhook%2FHookManager.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-hooks%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fhook%2FHookManager.java?ref=bc7d9e2be91e6f8db63d93a7a5d110c9997a7cce",
      "patch": "@@ -2,7 +2,6 @@\n \n \n import androidx.annotation.Keep;\n-import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n import com.tencent.matrix.util.MatrixLog;\n@@ -21,12 +20,6 @@ public class HookManager {\n     private volatile boolean hasHooked;\n     private Set<AbsHook> mHooks = new HashSet<>();\n \n-    private NativeLibraryLoader mNativeLibLoader = null;\n-\n-    public interface NativeLibraryLoader {\n-        void loadLibrary(@NonNull String libName);\n-    }\n-\n     private HookManager(){\n     }\n \n@@ -49,11 +42,7 @@ public void commitHooks() throws HookFailedException {\n         }\n \n         try {\n-            if (mNativeLibLoader != null) {\n-                mNativeLibLoader.loadLibrary(\"matrix-hooks\");\n-            } else {\n-                System.loadLibrary(\"matrix-hooks\");\n-            }\n+            System.loadLibrary(\"matrix-hooks\");\n         } catch (Throwable e) {\n             MatrixLog.printErrStackTrace(TAG, e, \"\");\n             return;\n@@ -68,11 +57,6 @@ public void commitHooks() throws HookFailedException {\n         exclusiveHook();\n     }\n \n-    public HookManager setNativeLibraryLoader(@Nullable NativeLibraryLoader loader) {\n-        mNativeLibLoader = loader;\n-        return this;\n-    }\n-\n     public HookManager addHook(@Nullable AbsHook hook) {\n         if (hook != null) {\n             mHooks.add(hook);",
      "parent_sha": "b8fa5a04c7558c241029510349ea9ae258972e1c"
    }
  },
  {
    "oid": "447740987ffd1bd9308742be4a37d06309123345",
    "message": "JeCtl: synchronized",
    "date": "2020-07-17T10:03:50Z",
    "url": "https://github.com/Tencent/matrix/commit/447740987ffd1bd9308742be4a37d06309123345",
    "details": {
      "sha": "6dfa788535dc7272022e062832615346d2d8449e",
      "filename": "wxperf-jectl/src/main/java/com/tencent/wxperf/jectl/JeCtl.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/447740987ffd1bd9308742be4a37d06309123345/wxperf-jectl%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fwxperf%2Fjectl%2FJeCtl.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/447740987ffd1bd9308742be4a37d06309123345/wxperf-jectl%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fwxperf%2Fjectl%2FJeCtl.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/wxperf-jectl%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fwxperf%2Fjectl%2FJeCtl.java?ref=447740987ffd1bd9308742be4a37d06309123345",
      "patch": "@@ -21,7 +21,7 @@ public static int tryDisableRetain() {\n         return tryDisableRetainNative();\n     }\n \n-    public static int checkRetain() {\n+    public synchronized static int checkRetain() {\n         return checkRetainNative();\n     }\n ",
      "parent_sha": "cd7159160930770b54404c9e2afcfb240da33f77"
    }
  },
  {
    "oid": "646e8db377ffc4d3d785dbc22f54dde633c2de59",
    "message": "fix: Fix remove unused resources resguard-mapping parsing error.",
    "date": "2022-11-15T15:01:21Z",
    "url": "https://github.com/Tencent/matrix/commit/646e8db377ffc4d3d785dbc22f54dde633c2de59",
    "details": {
      "sha": "63c440dc1fc85dc879575a06d23a770d2f074c58",
      "filename": "matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/shrinker/ApkUtil.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/646e8db377ffc4d3d785dbc22f54dde633c2de59/matrix%2Fmatrix-android%2Fmatrix-gradle-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fshrinker%2FApkUtil.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/646e8db377ffc4d3d785dbc22f54dde633c2de59/matrix%2Fmatrix-android%2Fmatrix-gradle-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fshrinker%2FApkUtil.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-gradle-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fshrinker%2FApkUtil.java?ref=646e8db377ffc4d3d785dbc22f54dde633c2de59",
      "patch": "@@ -93,7 +93,7 @@ public static String parseEntryResourceType(String entry) {\n         int prefixLength = entry.indexOf('/');\n         if (prefixLength == -1) return \"\";\n         if (!Util.isNullOrNil(entry)) {\n-            String typeName = entry.substring(prefixLength, entry.lastIndexOf('/'));\n+            String typeName = entry.substring(prefixLength + 1, entry.lastIndexOf('/'));\n             if (!Util.isNullOrNil(typeName)) {\n                 int index = typeName.indexOf('-');\n                 if (index >= 0) {",
      "parent_sha": "974c08c3402b67d80d9510d0995395a299c24ee1"
    }
  },
  {
    "oid": "e5e527bba6b0117c6e41acfea0329aa193b40e73",
    "message": "fix null point",
    "date": "2021-12-01T13:19:47Z",
    "url": "https://github.com/Tencent/matrix/commit/e5e527bba6b0117c6e41acfea0329aa193b40e73",
    "details": {
      "sha": "ce94026ffaa0eb4f438a26d30cd19d49a3db9881",
      "filename": "matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/OpenGLResRecorder.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/Tencent/matrix/blob/e5e527bba6b0117c6e41acfea0329aa193b40e73/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2FOpenGLResRecorder.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/e5e527bba6b0117c6e41acfea0329aa193b40e73/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2FOpenGLResRecorder.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2FOpenGLResRecorder.java?ref=e5e527bba6b0117c6e41acfea0329aa193b40e73",
      "patch": "@@ -11,6 +11,7 @@\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.OutputStreamWriter;\n+\n import com.tencent.matrix.openglleak.utils.ExecuteCenter;\n \n import java.util.ArrayList;\n@@ -310,7 +311,7 @@ private String getResListString(List<OpenGLInfo> resList) {\n                     .append(\"\\n\")\n                     .append(String.format(\" native stack = %s\", res.getNativeStack()))\n                     .append(\"\\n\")\n-                    .append(String.format(\" memory info = %s\", res.getMemoryInfo().toString()))\n+                    .append(String.format(\" memory info = %s\", res.getMemoryInfo() == null ? \"\" : res.getMemoryInfo().toString()))\n                     .append(\"\\n\");\n         }\n         return result.toString();",
      "parent_sha": "c85e6aa7ddaec5c4b31fa27eb9a2c45721bff916"
    }
  },
  {
    "oid": "32d01542eedc37b4e6f38ec1c2e22aa881167c25",
    "message": "Update cpuCalculator tests",
    "date": "2022-08-03T12:19:07Z",
    "url": "https://github.com/Tencent/matrix/commit/32d01542eedc37b4e6f38ec1c2e22aa881167c25",
    "details": {
      "sha": "c6f2e66bba1ec52e6c326ffdb28b8172d6fbf910",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/androidTest/java/com/tencent/matrix/batterycanary/stats/HealthStatsTest.java",
      "status": "modified",
      "additions": 19,
      "deletions": 33,
      "changes": 52,
      "blob_url": "https://github.com/Tencent/matrix/blob/32d01542eedc37b4e6f38ec1c2e22aa881167c25/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2FandroidTest%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fstats%2FHealthStatsTest.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/32d01542eedc37b4e6f38ec1c2e22aa881167c25/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2FandroidTest%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fstats%2FHealthStatsTest.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2FandroidTest%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fstats%2FHealthStatsTest.java?ref=32d01542eedc37b4e6f38ec1c2e22aa881167c25",
      "patch": "@@ -251,37 +251,26 @@ public void testEstimateCpuPowerByCpuStats() throws IOException {\n         healthStats.hasMeasurement(UidHealthStats.MEASUREMENT_USER_CPU_TIME_MS);\n         healthStats.hasMeasurement(UidHealthStats.MEASUREMENT_SYSTEM_CPU_TIME_MS);\n         long cpuTimeMs = healthStats.getMeasurement(UidHealthStats.MEASUREMENT_USER_CPU_TIME_MS) +  healthStats.getMeasurement(UidHealthStats.MEASUREMENT_SYSTEM_CPU_TIME_MS);\n-        double powerMah = estimateCpuPowerByCpuStats(feature, cpuTimeMs);\n-        Assert.assertTrue(powerMah >= 0);\n \n-        double calcCpuPower = HealthStatsHelper.calcCpuPower(feature.getPowerProfile(), healthStats);\n-        Assert.assertEquals(powerMah, calcCpuPower, 1d);\n-    }\n+        double powerMahByUid = 0, powerMahByDev = 0;\n+        double activePower = HealthStatsHelper.estimateCpuActivePower(feature.getPowerProfile(), cpuTimeMs);\n+        Assert.assertTrue(activePower >= 0);\n+        powerMahByUid += activePower;\n+        powerMahByDev += activePower;\n \n-    private static double estimateCpuPowerByCpuStats(CpuStatFeature feat, long cpuTimeMs) {\n-        if (feat != null && feat.isSupported()) {\n-            CpuStatFeature.CpuStateSnapshot cpuStateSnapshot = feat.currentCpuStateSnapshot();\n-            if (cpuStateSnapshot != null) {\n-                long jiffySum = 0;\n-                for (MonitorFeature.Snapshot.Entry.ListEntry<MonitorFeature.Snapshot.Entry.DigitEntry<Long>> stepJiffies : cpuStateSnapshot.procCpuCoreStates) {\n-                    for (MonitorFeature.Snapshot.Entry.DigitEntry<Long> item : stepJiffies.getList()) {\n-                        jiffySum += item.get();\n-                    }\n-                }\n-                double powerMah = 0;\n-                for (int i = 0; i < cpuStateSnapshot.procCpuCoreStates.size(); i++) {\n-                    List<MonitorFeature.Snapshot.Entry.DigitEntry<Long>> stepJiffies = cpuStateSnapshot.procCpuCoreStates.get(i).getList();\n-                    for (int j = 0; j < stepJiffies.size(); j++) {\n-                        long jiffy = stepJiffies.get(j).get();\n-                        long figuredCpuTimeMs = (long) ((jiffy * 1.0f / jiffySum) * cpuTimeMs);\n-                        double powerMa = feat.getPowerProfile().getAveragePowerForCpuCore(i, j);\n-                        powerMah += new UsageBasedPowerEstimator(powerMa).calculatePower(figuredCpuTimeMs);\n-                    }\n-                }\n-                return powerMah;\n-            }\n-        }\n-        return 0;\n+\n+        powerMahByUid += HealthStatsHelper.estimateCpuClustersPowerByUidStats(feature.getPowerProfile(), cpuStateSnapshot, cpuTimeMs, false);\n+        Assert.assertTrue(powerMahByUid >= 0);\n+        powerMahByUid += HealthStatsHelper.estimateCpuCoresPowerByUidStats(feature.getPowerProfile(), cpuStateSnapshot, cpuTimeMs, false);\n+        Assert.assertTrue(powerMahByUid >= 0);\n+\n+        powerMahByDev += HealthStatsHelper.estimateCpuClustersPowerByDevStats(feature.getPowerProfile(), cpuStateSnapshot, cpuTimeMs);\n+        Assert.assertTrue(powerMahByDev >= 0);\n+        powerMahByDev += HealthStatsHelper.estimateCpuCoresPowerByDevStats(feature.getPowerProfile(), cpuStateSnapshot, cpuTimeMs);\n+        Assert.assertTrue(powerMahByDev >= 0);\n+\n+        double calcCpuPower = HealthStatsHelper.calcCpuPower(feature.getPowerProfile(), healthStats);\n+        Assert.assertEquals(powerMahByDev, calcCpuPower, 1d);\n     }\n \n     @Test\n@@ -637,10 +626,7 @@ public void testEstimateSystemServicePower() throws IOException {\n             }\n         }\n \n-        double calcPower = estimateCpuPowerByCpuStats(feature, timeMs);\n-        Assert.assertTrue(calcPower >= 0);\n-\n-        calcPower = HealthStatsHelper.calcSystemServicePower(powerProfile, healthStats);\n+        double calcPower = HealthStatsHelper.calcSystemServicePower(powerProfile, healthStats);\n         Assert.assertTrue(calcPower >= 0);\n     }\n ",
      "parent_sha": "07cfe4c142f216493c12011305e6ce391510ce5d"
    }
  },
  {
    "oid": "f88511603161fa955188f570ebae3a1f01381a1e",
    "message": "Fix battery wakelock feat npe bug",
    "date": "2021-03-03T07:03:52Z",
    "url": "https://github.com/Tencent/matrix/commit/f88511603161fa955188f570ebae3a1f01381a1e",
    "details": {
      "sha": "0e11943027d3eccda9d6da1845be18719ae4b5f5",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/WakeLockMonitorFeature.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/Tencent/matrix/blob/f88511603161fa955188f570ebae3a1f01381a1e/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2Ffeature%2FWakeLockMonitorFeature.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/f88511603161fa955188f570ebae3a1f01381a1e/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2Ffeature%2FWakeLockMonitorFeature.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2Ffeature%2FWakeLockMonitorFeature.java?ref=f88511603161fa955188f570ebae3a1f01381a1e",
      "patch": "@@ -356,19 +356,19 @@ public WakeLockSnapshot getSnapshot() {\n             WakeLockSnapshot snapshot = new WakeLockSnapshot();\n             snapshot.totalWakeLockTime = Snapshot.Entry.DigitEntry.of(getTimeMillis());\n             snapshot.totalWakeLockCount = Snapshot.Entry.DigitEntry.of(getTotalCount());\n+            snapshot.totalWakeLockRecords = Snapshot.Entry.ListEntry.ofEmpty();\n             snapshot.totalAcquireCount = Snapshot.Entry.DigitEntry.of(mTotalCount);\n             snapshot.totalReleaseCount = Snapshot.Entry.DigitEntry.of(mTracingCount);\n-            snapshot.totalWakeLockRecords = Snapshot.Entry.ListEntry.ofEmpty();\n             return snapshot;\n         }\n     }\n \n     public static class WakeLockSnapshot extends Snapshot<WakeLockSnapshot> {\n         public Entry.DigitEntry<Long> totalWakeLockTime;\n         public Entry.DigitEntry<Integer> totalWakeLockCount;\n+        public Entry.ListEntry<BeanEntry<WakeLockTrace.WakeLockRecord>> totalWakeLockRecords;\n         public Entry.DigitEntry<Integer> totalAcquireCount;\n         public Entry.DigitEntry<Integer> totalReleaseCount;\n-        public Entry.ListEntry<BeanEntry<WakeLockTrace.WakeLockRecord>> totalWakeLockRecords;\n \n         WakeLockSnapshot() {}\n \n@@ -381,6 +381,8 @@ protected WakeLockSnapshot computeDelta() {\n                     delta.totalWakeLockTime = Differ.DigitDiffer.globalDiff(bgn.totalWakeLockTime, end.totalWakeLockTime);\n                     delta.totalWakeLockCount = Differ.DigitDiffer.globalDiff(bgn.totalWakeLockCount, end.totalWakeLockCount);\n                     delta.totalWakeLockRecords = Differ.ListDiffer.globalDiff(bgn.totalWakeLockRecords, end.totalWakeLockRecords);\n+                    delta.totalAcquireCount = Differ.DigitDiffer.globalDiff(bgn.totalAcquireCount, end.totalAcquireCount);\n+                    delta.totalReleaseCount = Differ.DigitDiffer.globalDiff(bgn.totalReleaseCount, end.totalReleaseCount);\n                     return delta;\n                 }\n             };",
      "parent_sha": "f4ea0e53abd635b5b6f3fb6616f41ea94a647665"
    }
  },
  {
    "oid": "760a5a80a54a339724a215e70ac05c2d5a35a792",
    "message": "ActivityLeakFixer: remove contentView only for devices that is split-supported",
    "date": "2022-08-16T10:46:43Z",
    "url": "https://github.com/Tencent/matrix/commit/760a5a80a54a339724a215e70ac05c2d5a35a792",
    "details": {
      "sha": "4e8a0f7033ddf21045f32a840fcb0691bf9ac211",
      "filename": "matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/ActivityLeakFixer.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/Tencent/matrix/blob/760a5a80a54a339724a215e70ac05c2d5a35a792/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-android%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2FActivityLeakFixer.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/760a5a80a54a339724a215e70ac05c2d5a35a792/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-android%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2FActivityLeakFixer.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-android%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2FActivityLeakFixer.java?ref=760a5a80a54a339724a215e70ac05c2d5a35a792",
      "patch": "@@ -130,12 +130,17 @@ public static void fixInputMethodManagerLeak(Context destContext) {\n         MatrixLog.i(TAG, \"fixInputMethodManagerLeak done, cost: %s ms.\", System.currentTimeMillis() - startTick);\n     }\n \n+    public static boolean sSupportSplit = false;\n+\n     public static void unbindDrawables(Activity ui) {\n         final long startTick = System.currentTimeMillis();\n         if (ui != null && ui.getWindow() != null && ui.getWindow().peekDecorView() != null) {\n-            final View viewRoot = ui.getWindow().peekDecorView().getRootView();\n+            View viewRoot = ui.getWindow().peekDecorView().getRootView();\n             try {\n                 unbindDrawablesAndRecycle(viewRoot);\n+                if (Build.VERSION.SDK_INT >= 31 && sSupportSplit) {\n+                    viewRoot = ui.getWindow().getDecorView().findViewById(android.R.id.content);\n+                }\n                 if (viewRoot instanceof ViewGroup) {\n                     ((ViewGroup) viewRoot).removeAllViews();\n                 }",
      "parent_sha": "753181f783bbbf432c6d45a7d573fe1052218898"
    }
  },
  {
    "oid": "8e80e452d7100be9e67d4f6d9678aa4bcf88b73c",
    "message": "bugfix",
    "date": "2019-08-08T09:41:14Z",
    "url": "https://github.com/Tencent/matrix/commit/8e80e452d7100be9e67d4f6d9678aa4bcf88b73c",
    "details": {
      "sha": "ab7a1a51a2e526ff70b95c1a4c1b32fb69636d9a",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/core/AppMethodBeat.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/8e80e452d7100be9e67d4f6d9678aa4bcf88b73c/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fcore%2FAppMethodBeat.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/8e80e452d7100be9e67d4f6d9678aa4bcf88b73c/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fcore%2FAppMethodBeat.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fcore%2FAppMethodBeat.java?ref=8e80e452d7100be9e67d4f6d9678aa4bcf88b73c",
      "patch": "@@ -204,7 +204,7 @@ public static void i(int methodId) {\n         }\n \n         if (status == STATUS_DEFAULT) {\n-            synchronized (statunnnnnnnsLock) {\n+            synchronized (statusLock) {\n                 if (status == STATUS_DEFAULT) {\n                     realExecute();\n                     status = STATUS_READY;",
      "parent_sha": "8d4726386fcc9076e42dfcc506c7257e74db908a"
    }
  },
  {
    "oid": "9fc351ee1812ae139473042b72fbae10f9dac554",
    "message": "Update battery util with immediate method",
    "date": "2021-06-17T07:57:49Z",
    "url": "https://github.com/Tencent/matrix/commit/9fc351ee1812ae139473042b72fbae10f9dac554",
    "details": {
      "sha": "8ba5894be2ea40fd7623a4a8f12bfaa83d3a508e",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/utils/BatteryCanaryUtil.java",
      "status": "modified",
      "additions": 31,
      "deletions": 15,
      "changes": 46,
      "blob_url": "https://github.com/Tencent/matrix/blob/9fc351ee1812ae139473042b72fbae10f9dac554/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FBatteryCanaryUtil.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/9fc351ee1812ae139473042b72fbae10f9dac554/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FBatteryCanaryUtil.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FBatteryCanaryUtil.java?ref=9fc351ee1812ae139473042b72fbae10f9dac554",
      "patch": "@@ -125,10 +125,7 @@ public int getAppStat(Context context, boolean isForeground) {\n             if (mLastAppStat != null && !mLastAppStat.isExpired()) {\n                 return mLastAppStat.value;\n             }\n-            int value = APP_STAT_BACKGROUND; // \u540e\u53f0\n-            if (hasForegroundService(context)) {\n-                value = APP_STAT_FOREGROUND_SERVICE; // \u540e\u53f0\uff08\u6709\u524d\u53f0\u670d\u52a1\uff09\n-            }\n+            int value = getAppStatImmediately(context, false);\n             mLastAppStat = new ExpireRef(value, DEFAULT_AMS_CACHE_MILLIS);\n             return mLastAppStat.value;\n         }\n@@ -138,17 +135,7 @@ public int getDevStat(Context context) {\n             if (mLastDevStat != null && !mLastDevStat.isExpired()) {\n                 return mLastDevStat.value;\n             }\n-            int value = DEV_STAT_UN_CHARGING;\n-            if (isDeviceCharging(context)) {\n-                value = DEV_STAT_CHARGING; // \u5145\u7535\u4e2d\n-            }\n-            // \u672a\u5145\u7535\u72b6\u6001\u7ec6\u5206:\n-            if (!isDeviceScreenOn(context)) {\n-                value = DEV_STAT_SCREEN_OFF; // \u606f\u5c4f\n-            }\n-            if (isDeviceOnPowerSave(context)) {\n-                value = DEV_STAT_SAVE_POWER_MODE; // \u7701\u7535\u6a21\u5f0f\u5f00\u542f\n-            }\n+            int value = getDeviceStatImmediately(context);\n             mLastDevStat = new ExpireRef(value, DEFAULT_AMS_CACHE_MILLIS);\n             return mLastDevStat.value;\n         }\n@@ -158,6 +145,10 @@ public static void setProxy(Proxy stub) {\n         sCacheStub = stub;\n     }\n \n+    public static Proxy getProxy() {\n+        return sCacheStub;\n+    }\n+\n     public static String getProcessName() {\n         return sCacheStub.getProcessName();\n     }\n@@ -305,11 +296,36 @@ public static int getAppStat(Context context, boolean isForeground) {\n         return sCacheStub.getAppStat(context, isForeground);\n     }\n \n+    @AppStats.AppStatusDef\n+    public static int getAppStatImmediately(Context context, boolean isForeground) {\n+        if (isForeground) return APP_STAT_FOREGROUND; // \u524d\u53f0\n+        if (hasForegroundService(context)) {\n+            return APP_STAT_FOREGROUND_SERVICE; // \u540e\u53f0\uff08\u6709\u524d\u53f0\u670d\u52a1\uff09\n+        }\n+        return APP_STAT_BACKGROUND; // \u540e\u53f0\n+    }\n+\n     @AppStats.DevStatusDef\n     public static int getDeviceStat(Context context) {\n         return sCacheStub.getDevStat(context);\n     }\n \n+    @AppStats.DevStatusDef\n+    public static int getDeviceStatImmediately(Context context) {\n+        if (isDeviceCharging(context)) {\n+            return DEV_STAT_CHARGING; // \u5145\u7535\u4e2d\n+        }\n+\n+        // \u672a\u5145\u7535\u72b6\u6001\u7ec6\u5206:\n+        if (!isDeviceScreenOn(context)) {\n+            return DEV_STAT_SCREEN_OFF; // \u606f\u5c4f\n+        }\n+        if (isDeviceOnPowerSave(context)) {\n+            return DEV_STAT_SAVE_POWER_MODE; // \u7701\u7535\u6a21\u5f0f\u5f00\u542f\n+        }\n+        return DEV_STAT_UN_CHARGING;\n+    }\n+\n     public static String convertAppStat(@AppStats.AppStatusDef int appStat) {\n         switch (appStat) {\n             case APP_STAT_FOREGROUND:",
      "parent_sha": "08ad49427a8db5d038c92cee2c63d78005677aca"
    }
  },
  {
    "oid": "e883c5202a8687b18d8480a1da363bf1687a315a",
    "message": "optimize if order",
    "date": "2021-07-09T11:34:14Z",
    "url": "https://github.com/Tencent/matrix/commit/e883c5202a8687b18d8480a1da363bf1687a315a",
    "details": {
      "sha": "6bac5007b32668e7b0bd550d0e9397a1dab230c8",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/hacker/ActivityThreadHacker.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/Tencent/matrix/blob/e883c5202a8687b18d8480a1da363bf1687a315a/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fhacker%2FActivityThreadHacker.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/e883c5202a8687b18d8480a1da363bf1687a315a/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fhacker%2FActivityThreadHacker.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fhacker%2FActivityThreadHacker.java?ref=e883c5202a8687b18d8480a1da363bf1687a315a",
      "patch": "@@ -124,14 +124,14 @@ private final static class HackCallback implements Handler.Callback {\n \n         @Override\n         public boolean handleMessage(Message msg) {\n-            if (Build.VERSION.SDK_INT >= 21 && Build.VERSION.SDK_INT <= 25) {\n-                if (msg.what == SERIVCE_ARGS || msg.what == STOP_SERVICE\n-                        || msg.what == STOP_ACTIVITY_SHOW || msg.what == STOP_ACTIVITY_HIDE\n-                        || msg.what == SLEEPING) {\n-                    if (IssueFixConfig.getsInstance().isEnableFixSpApply()) {\n-                        MatrixLog.i(TAG, \"Fix SP ANR is enabled\");\n-                        fix();\n-                    }\n+            if (IssueFixConfig.getsInstance().isEnableFixSpApply()) {\n+                if (Build.VERSION.SDK_INT >= 21 && Build.VERSION.SDK_INT <= 25) {\n+                    if (msg.what == SERIVCE_ARGS || msg.what == STOP_SERVICE\n+                            || msg.what == STOP_ACTIVITY_SHOW || msg.what == STOP_ACTIVITY_HIDE\n+                            || msg.what == SLEEPING) {\n+                            MatrixLog.i(TAG, \"Fix SP ANR is enabled\");\n+                            fix();\n+                        }\n                 }\n             }\n ",
      "parent_sha": "67ea0745b0ca448fe636d79d8b3097b615f5c564"
    }
  },
  {
    "oid": "fc1bc83177651c4f59803e40417da6994860a6a7",
    "message": "\u6839\u636eanr trace\u68c0\u6d4b\u6b7b\u9501\uff0c\u540c\u65f6\u9488\u5bf9\u4e3b\u7ebf\u7a0bnativePollOnce\u7684\u60c5\u51b5\u8fdb\u884c\u5168\u5806\u6808(java+native)\u4e0a\u62a5\u3002",
    "date": "2023-01-12T08:04:52Z",
    "url": "https://github.com/Tencent/matrix/commit/fc1bc83177651c4f59803e40417da6994860a6a7",
    "details": {
      "sha": "459b6ed2180a9179fb872dcae5ed2ead875de49d",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/SignalAnrTracer.java",
      "status": "modified",
      "additions": 187,
      "deletions": 1,
      "changes": 188,
      "blob_url": "https://github.com/Tencent/matrix/blob/fc1bc83177651c4f59803e40417da6994860a6a7/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FSignalAnrTracer.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/fc1bc83177651c4f59803e40417da6994860a6a7/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FSignalAnrTracer.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FSignalAnrTracer.java?ref=fc1bc83177651c4f59803e40417da6994860a6a7",
      "patch": "@@ -26,6 +26,7 @@\n import android.os.SystemClock;\n \n import androidx.annotation.Keep;\n+import androidx.annotation.NonNull;\n import androidx.annotation.RequiresApi;\n \n import com.tencent.matrix.AppActiveMatrixDelegate;\n@@ -45,12 +46,19 @@\n import org.json.JSONObject;\n \n import java.io.BufferedReader;\n+import java.io.File;\n import java.io.FileInputStream;\n import java.io.InputStreamReader;\n import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n import java.util.List;\n+import java.util.Map;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n public class SignalAnrTracer extends Tracer {\n     private static final String TAG = \"SignalAnrTracer\";\n@@ -83,6 +91,161 @@ public class SignalAnrTracer extends Tracer {\n         System.loadLibrary(\"trace-canary\");\n     }\n \n+    private static class SimpleDeadLockDetector {\n+        static class ThreadNode {\n+            int threadId;\n+            String info;\n+            List<Integer> waitingList;\n+            int visit;  // 0 not visited, 1 visiting, 2 visited\n+\n+            ThreadNode(int a, String b, List<Integer> c) {\n+                threadId = a;\n+                info = b;\n+                waitingList = c;\n+            }\n+        }\n+\n+        private final Pattern threadPattern = Pattern.compile(\"^\\\"(.*?)\\\" .*? tid=(\\\\d+) \\\\w+$\");\n+        private final Pattern lockHeldPattern = Pattern.compile(\"^  - .*? held by thread (\\\\d+)$\");\n+        private int currentThreadId;\n+        private final StringBuilder currentSb = new StringBuilder();\n+        private final HashMap<Integer, ThreadNode> threadsWaitingForHeldLock = new HashMap<>();\n+        private List<Integer> waitingList;\n+        private String mainThreadInfo = \"\";\n+        private boolean threadInfoBegin = false;\n+\n+        public void parseLine(String line) {\n+\n+            if (line.isEmpty()) {\n+                // thread info end\n+                threadInfoBegin = false;\n+\n+                if (currentSb.length() > 0 && waitingList != null && waitingList.size() > 0) {\n+                    String threadInfo = currentSb.toString();\n+                    if (currentThreadId == 1) {\n+                        // \"currentThreadId\" is a thin lock thread id. This is a small integer used by the\n+                        // thin lock implementation. This is not to be confused with the native thread's tid,\n+                        // nor is it the value returned by java.lang.Thread.getId --- this is a distinct value,\n+                        // used only for locking. usually, 0 is reserved to mean \"invalid\", 1 for main thread.\n+                        mainThreadInfo = threadInfo;\n+                    }\n+\n+                    threadsWaitingForHeldLock.put(currentThreadId, new ThreadNode(currentThreadId, threadInfo, waitingList));\n+                    waitingList = null;\n+                }\n+\n+            } else if (!threadInfoBegin) {\n+                Matcher m = threadPattern.matcher(line);\n+                if (m.find()) {\n+                    // new thread info begin\n+                    threadInfoBegin = true;\n+\n+                    currentSb.setLength(0);\n+                    currentSb.append(line).append('\\n');\n+                    waitingList = waitingList == null ? new ArrayList<Integer>(4) : waitingList;\n+                    try {\n+                        currentThreadId = Integer.parseInt(m.group(2));\n+                    } catch (Exception e) {\n+                        MatrixLog.e(TAG, e.toString());\n+                    }\n+                }\n+            } else {\n+                Matcher m = lockHeldPattern.matcher(line);\n+                if (m.find()) {\n+                    try {\n+                        int peerId = Integer.parseInt(m.group(1));\n+                        waitingList.add(peerId);\n+                    } catch (Exception e) {\n+                        MatrixLog.e(TAG, e.toString());\n+                    }\n+                }\n+                currentSb.append(line).append('\\n');\n+            }\n+        }\n+\n+        public boolean hasDeadLock() {\n+            parseLine(\"\");  // ensure thread info parse complete\n+            return checkDeadLock();\n+        }\n+\n+        @NonNull\n+        public String getMainThreadInfo() {\n+            return mainThreadInfo;\n+        }\n+\n+        @NonNull\n+        public String getLockHeldThread1Info() {\n+            if (waitingList == null || waitingList.size() == 0) {\n+                return \"\";\n+            }\n+            int threadId = waitingList.get(0);\n+            ThreadNode node = threadsWaitingForHeldLock.get(threadId);\n+            return node == null ? \"\" : node.info;\n+        }\n+\n+        @NonNull\n+        public String getLockHeldThread2Info() {\n+            if (waitingList == null || waitingList.size() == 0) {\n+                return \"\";\n+            }\n+            int threadId = waitingList.get(waitingList.size() - 1);\n+            ThreadNode node = threadsWaitingForHeldLock.get(threadId);\n+            return node == null ? \"\" : node.info;\n+        }\n+\n+        @NonNull\n+        public List<Integer> getWaitingList() {\n+            return waitingList == null ? new ArrayList<Integer>() : waitingList;\n+        }\n+\n+        private boolean checkDeadLock() {\n+            LinkedList<Integer> path = new LinkedList<>();\n+            for (Map.Entry<Integer, ThreadNode> nodeEntry : threadsWaitingForHeldLock.entrySet()) {\n+                if (nodeEntry.getValue().visit == 0) {\n+                    int ret;\n+                    if ((ret = dfsSearch(path, nodeEntry.getValue())) != -1) {\n+                        // retrieve cycle from path and save it in waitingList\n+                        while (path.size() > 0 && path.getFirst() != ret) {\n+                            path.removeFirst();\n+                        }\n+                        waitingList = path;\n+                        return true;\n+                    }\n+                }\n+            }\n+\n+            // no cycle\n+            if (waitingList != null) {\n+                waitingList.clear();\n+            }\n+            return false;\n+        }\n+\n+        // return the entry point if a cycle is found, else return -1.\n+        private int dfsSearch(LinkedList<Integer> path, ThreadNode node) {\n+            path.addLast(node.threadId);\n+            node.visit = 1;\n+\n+            for (Integer peer : node.waitingList) {\n+                ThreadNode peerNode = threadsWaitingForHeldLock.get(peer);\n+                if (peerNode != null) {\n+                    if (peerNode.visit == 1) {\n+                        return peerNode.threadId;\n+                    }\n+\n+                    int ret;\n+                    if (peerNode.visit == 0 && (ret = dfsSearch(path, peerNode)) != -1) {\n+                        return ret;\n+                    }\n+                }\n+            }\n+\n+            node.visit = 2;\n+            path.removeLast();\n+            return -1;\n+        }\n+    }\n+\n     @Override\n     protected void onAlive() {\n         super.onAlive();\n@@ -185,7 +348,25 @@ public void run() {\n     @Keep\n     private static void onANRDumpTrace() {\n         try {\n-            MatrixUtil.printFileByLine(TAG, sAnrTraceFilePath);\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(new File(sAnrTraceFilePath)), \"UTF-8\"))) {\n+                String line;\n+                SimpleDeadLockDetector detector = new SimpleDeadLockDetector();\n+                while ((line = reader.readLine()) != null) {\n+                    detector.parseLine(line);\n+                    MatrixLog.i(TAG, line);\n+                }\n+                if (sSignalAnrDetectedListener != null) {\n+                    if (detector.hasDeadLock()) {\n+                        sSignalAnrDetectedListener.onDeadLockAnrDetected(\n+                                detector.getMainThreadInfo(), detector.getLockHeldThread1Info(),\n+                                detector.getLockHeldThread2Info(), detector.getWaitingList());\n+                    } else if (detector.getMainThreadInfo().contains(\"android.os.MessageQueue.nativePollOnce\")) {\n+                        sSignalAnrDetectedListener.onMainThreadStuckAtNativePollOnce(detector.getMainThreadInfo());\n+                    }\n+                }\n+            } catch (Throwable t) {\n+                MatrixLog.e(TAG, \"printFileByLine failed e : \" + t.getMessage());\n+            }\n         } catch (Throwable t) {\n             MatrixLog.e(TAG, \"onANRDumpTrace error: %s\", t.getMessage());\n         }\n@@ -368,6 +549,11 @@ public static void printTrace() {\n \n     public interface SignalAnrDetectedListener {\n         void onAnrDetected(String stackTrace, String mMessageString, long mMessageWhen, boolean fromProcessErrorState, String cpuset);\n+\n         void onNativeBacktraceDetected(String backtrace, String mMessageString, long mMessageWhen, boolean fromProcessErrorState);\n+\n+        void onDeadLockAnrDetected(String mainThreadStackTrace, String lockHeldThread1, String lockHeldThread2, List<Integer> waitingList);\n+\n+        void onMainThreadStuckAtNativePollOnce(String mainThreadStackTrace);\n     }\n }",
      "parent_sha": "70e0b421c55a2000657c52a2f6e243bf93a2dc2b"
    }
  },
  {
    "oid": "8abf9a80e033cc9e726f924c1af22761072adcea",
    "message": "\u533a\u5206 Java / native \u7ebf\u7a0b\u540d",
    "date": "2020-03-27T05:27:13Z",
    "url": "https://github.com/Tencent/matrix/commit/8abf9a80e033cc9e726f924c1af22761072adcea",
    "details": {
      "sha": "d5242fcf38d95bbb581e3e13105a91e3f9698d1d",
      "filename": "matrix/matrix-android/matrix-thread-canary/src/main/java/com/tencent/matrix/threadcanary/ThreadMonitor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/Tencent/matrix/blob/8abf9a80e033cc9e726f924c1af22761072adcea/matrix%2Fmatrix-android%2Fmatrix-thread-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fthreadcanary%2FThreadMonitor.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/8abf9a80e033cc9e726f924c1af22761072adcea/matrix%2Fmatrix-android%2Fmatrix-thread-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fthreadcanary%2FThreadMonitor.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-thread-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fthreadcanary%2FThreadMonitor.java?ref=8abf9a80e033cc9e726f924c1af22761072adcea",
      "patch": "@@ -149,7 +149,7 @@ public void next(ThreadInfo threadInfo) {\n                         if (threadInfo.tid == mainTid) {\n                             threadInfo.name = \"main\";\n                         } else {\n-                            threadInfo.name = appThreadInfo.name.replaceAll(\"-?[0-9]\\\\d*\", \"?\");\n+                            threadInfo.name = appThreadInfo.name.replaceAll(\"-?[0-9]\\\\d*\", \"?\") + \"J\";\n                         }\n                         threadInfo.stackTrace = appThreadInfo.stackTrace;\n                         threadInfo.isHandlerThread = appThreadInfo.isHandlerThread;\n@@ -289,7 +289,7 @@ public static List<ThreadGroupInfo> getThreadList() {\n             public void next(ThreadInfo threadInfo) {\n                 ThreadInfo appThreadInfo = appThreadsMap.get(threadInfo.tid);\n                 if (null != appThreadInfo) {\n-                    threadInfo.name = appThreadInfo.name.replaceAll(\"-?[0-9]\\\\d*\", \"?\");\n+                    threadInfo.name = appThreadInfo.name.replaceAll(\"-?[0-9]\\\\d*\", \"?\") + \"J\";\n                     threadInfo.stackTrace = appThreadInfo.stackTrace;\n                     threadInfo.isHandlerThread = appThreadInfo.isHandlerThread;\n                     threadInfo.target = appThreadInfo.target;\n@@ -492,12 +492,9 @@ public int hashCode() {\n \n         @Override\n         public String toString() {\n-            return String.format(\"%s J=%s\", name, isJavaThread);\n-        }\n-\n-        public String toDetailString() {\n             return String.format(\"name=%s tid=%s state=%s isHandlerThread=%s isJavaThread=%s\", name, tid, state, isHandlerThread, isJavaThread);\n         }\n+\n     }\n \n     public static class ThreadGroupInfo {\n@@ -542,7 +539,7 @@ public int hashCode() {\n \n         @Override\n         public String toString() {\n-            return name + \"=\" + getSize() + \"J\" + (isJavaThread() ? 1 : 0);\n+            return name + \"=\" + getSize();\n         }\n     }\n ",
      "parent_sha": "f2c0944f560f55b0a9dc33e7f0d669c4cf7671b7"
    }
  },
  {
    "oid": "f847a358657023d2f40f2da088a69708db202ce0",
    "message": "retrieve class(or type) of lock object from waiting circle.",
    "date": "2023-01-31T07:28:33Z",
    "url": "https://github.com/Tencent/matrix/commit/f847a358657023d2f40f2da088a69708db202ce0",
    "details": {
      "sha": "2b05be2841ef57eb2f9725e2af472639e4cd8b2d",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/SignalAnrTracer.java",
      "status": "modified",
      "additions": 44,
      "deletions": 51,
      "changes": 95,
      "blob_url": "https://github.com/Tencent/matrix/blob/f847a358657023d2f40f2da088a69708db202ce0/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FSignalAnrTracer.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/f847a358657023d2f40f2da088a69708db202ce0/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FSignalAnrTracer.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FSignalAnrTracer.java?ref=f847a358657023d2f40f2da088a69708db202ce0",
      "patch": "@@ -24,6 +24,7 @@\n import android.os.Message;\n import android.os.MessageQueue;\n import android.os.SystemClock;\n+import android.util.Pair;\n \n import androidx.annotation.Keep;\n import androidx.annotation.NonNull;\n@@ -55,6 +56,7 @@\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n import java.util.regex.Matcher;\n@@ -95,43 +97,39 @@ private static class SimpleDeadLockDetector {\n         static class ThreadNode {\n             int threadId;\n             String info;\n-            List<Integer> waitingList;\n-            int visit;  // 0 not visited, 1 visiting, 2 visited\n-\n-            ThreadNode(int a, String b, List<Integer> c) {\n-                threadId = a;\n-                info = b;\n-                waitingList = c;\n-            }\n+            String lockObjCls;\n+            int peerId = -1;\n+            int visit = 0;  // 0 not visited, 1 visiting, 2 visited\n         }\n \n         private final Pattern threadPattern = Pattern.compile(\"^\\\"(.*?)\\\" .*? tid=(\\\\d+) \\\\w+$\");\n-        private final Pattern lockHeldPattern = Pattern.compile(\"^  - .*? held by thread (\\\\d+)$\");\n-        private int currentThreadId;\n+        private final Pattern lockHeldPattern = Pattern.compile(\"^  - .*?\\\\(a (.*?)\\\\) held by thread (\\\\d+)$\");\n         private final StringBuilder currentSb = new StringBuilder();\n         private final HashMap<Integer, ThreadNode> threadsWaitingForHeldLock = new HashMap<>();\n-        private List<Integer> waitingList;\n+        private LinkedList<ThreadNode> waitingList = new LinkedList<>();\n         private String mainThreadInfo = \"\";\n         private boolean threadInfoBegin = false;\n+        private ThreadNode currentThreadInfo = new ThreadNode();\n \n         public void parseLine(String line) {\n \n             if (line.isEmpty()) {\n                 // thread info end\n                 threadInfoBegin = false;\n \n-                if (currentSb.length() > 0 && waitingList != null && waitingList.size() > 0) {\n+                if (currentSb.length() > 0 && currentThreadInfo.peerId >= 0) {\n                     String threadInfo = currentSb.toString();\n-                    if (currentThreadId == 1) {\n+                    if (currentThreadInfo.threadId == 1) {\n                         // \"currentThreadId\" is a thin lock thread id. This is a small integer used by the\n                         // thin lock implementation. This is not to be confused with the native thread's tid,\n                         // nor is it the value returned by java.lang.Thread.getId --- this is a distinct value,\n                         // used only for locking. usually, 0 is reserved to mean \"invalid\", 1 for main thread.\n                         mainThreadInfo = threadInfo;\n                     }\n \n-                    threadsWaitingForHeldLock.put(currentThreadId, new ThreadNode(currentThreadId, threadInfo, waitingList));\n-                    waitingList = null;\n+                    currentThreadInfo.info = threadInfo;\n+                    threadsWaitingForHeldLock.put(currentThreadInfo.threadId, currentThreadInfo);\n+                    currentThreadInfo = new ThreadNode();\n                 }\n \n             } else if (!threadInfoBegin) {\n@@ -142,9 +140,8 @@ public void parseLine(String line) {\n \n                     currentSb.setLength(0);\n                     currentSb.append(line).append('\\n');\n-                    waitingList = waitingList == null ? new ArrayList<Integer>(4) : waitingList;\n                     try {\n-                        currentThreadId = Integer.parseInt(m.group(2));\n+                        currentThreadInfo.threadId = Integer.parseInt(Objects.requireNonNull(m.group(2)));\n                     } catch (Exception e) {\n                         MatrixLog.e(TAG, e.toString());\n                     }\n@@ -153,8 +150,8 @@ public void parseLine(String line) {\n                 Matcher m = lockHeldPattern.matcher(line);\n                 if (m.find()) {\n                     try {\n-                        int peerId = Integer.parseInt(m.group(1));\n-                        waitingList.add(peerId);\n+                        currentThreadInfo.lockObjCls = m.group(1);\n+                        currentThreadInfo.peerId = Integer.parseInt(Objects.requireNonNull(m.group(2)));\n                     } catch (Exception e) {\n                         MatrixLog.e(TAG, e.toString());\n                     }\n@@ -178,7 +175,7 @@ public String getLockHeldThread1Info() {\n             if (waitingList == null || waitingList.size() == 0) {\n                 return \"\";\n             }\n-            int threadId = waitingList.get(0);\n+            int threadId = waitingList.get(0).threadId;\n             ThreadNode node = threadsWaitingForHeldLock.get(threadId);\n             return node == null ? \"\" : node.info;\n         }\n@@ -188,61 +185,57 @@ public String getLockHeldThread2Info() {\n             if (waitingList == null || waitingList.size() == 0) {\n                 return \"\";\n             }\n-            int threadId = waitingList.get(waitingList.size() - 1);\n+            int threadId = waitingList.get(waitingList.size() - 1).threadId;\n             ThreadNode node = threadsWaitingForHeldLock.get(threadId);\n             return node == null ? \"\" : node.info;\n         }\n \n         @NonNull\n-        public List<Integer> getWaitingList() {\n-            return waitingList == null ? new ArrayList<Integer>() : waitingList;\n+        public List<Pair<Integer, String>> getWaitingList() {\n+            List<Pair<Integer, String>> list = new ArrayList<>();\n+            for (ThreadNode threadNode : waitingList) {\n+                list.add(new Pair<>(threadNode.threadId, threadNode.lockObjCls));\n+            }\n+            return list;\n         }\n \n         private boolean checkDeadLock() {\n-            LinkedList<Integer> path = new LinkedList<>();\n+            waitingList.clear();\n             for (Map.Entry<Integer, ThreadNode> nodeEntry : threadsWaitingForHeldLock.entrySet()) {\n-                if (nodeEntry.getValue().visit == 0) {\n-                    int ret;\n-                    if ((ret = dfsSearch(path, nodeEntry.getValue())) != -1) {\n+                ThreadNode node = nodeEntry.getValue();\n+                if (node.visit == 0) {\n+                    if (dfsSearch(node) != null) {\n                         // retrieve cycle from path and save it in waitingList\n-                        while (path.size() > 0 && path.getFirst() != ret) {\n-                            path.removeFirst();\n+                        while (waitingList.size() > 0 && waitingList.getFirst() != node) {\n+                            waitingList.removeFirst();\n                         }\n-                        waitingList = path;\n                         return true;\n                     }\n                 }\n             }\n-\n-            // no cycle\n-            if (waitingList != null) {\n-                waitingList.clear();\n-            }\n             return false;\n         }\n \n-        // return the entry point if a cycle is found, else return -1.\n-        private int dfsSearch(LinkedList<Integer> path, ThreadNode node) {\n-            path.addLast(node.threadId);\n+        // Return the entry point if a cycle is found, else return null.\n+        private ThreadNode dfsSearch(ThreadNode node) {\n+            waitingList.addLast(node);\n             node.visit = 1;\n \n-            for (Integer peer : node.waitingList) {\n-                ThreadNode peerNode = threadsWaitingForHeldLock.get(peer);\n-                if (peerNode != null) {\n-                    if (peerNode.visit == 1) {\n-                        return peerNode.threadId;\n-                    }\n+            ThreadNode peerNode = threadsWaitingForHeldLock.get(node.peerId);\n+            if (peerNode != null) {\n+                if (peerNode.visit == 1) {\n+                    return peerNode;\n+                }\n \n-                    int ret;\n-                    if (peerNode.visit == 0 && (ret = dfsSearch(path, peerNode)) != -1) {\n-                        return ret;\n-                    }\n+                ThreadNode ret;\n+                if (peerNode.visit == 0 && (ret = dfsSearch(peerNode)) != null) {\n+                    return ret;\n                 }\n             }\n \n             node.visit = 2;\n-            path.removeLast();\n-            return -1;\n+            waitingList.removeLast();\n+            return null;\n         }\n     }\n \n@@ -552,7 +545,7 @@ public interface SignalAnrDetectedListener {\n \n         void onNativeBacktraceDetected(String backtrace, String mMessageString, long mMessageWhen, boolean fromProcessErrorState);\n \n-        void onDeadLockAnrDetected(String mainThreadStackTrace, String lockHeldThread1, String lockHeldThread2, List<Integer> waitingList);\n+        void onDeadLockAnrDetected(String mainThreadStackTrace, String lockHeldThread1, String lockHeldThread2, List<Pair<Integer, String>> waitingList);\n \n         void onMainThreadStuckAtNativePollOnce(String mainThreadStackTrace);\n     }",
      "parent_sha": "75d4b2d205c6c283cad53f3d80cdd0c81c9f783b"
    }
  },
  {
    "oid": "16f2b29513665ae10e9d09d54513d41f6de42ffb",
    "message": "stop detecting task if there's no any recorded destroyed activity or we've been switched to background.",
    "date": "2019-04-04T06:13:04Z",
    "url": "https://github.com/Tencent/matrix/commit/16f2b29513665ae10e9d09d54513d41f6de42ffb",
    "details": {
      "sha": "260e993a025e30e15f78b588a450d164e949a681",
      "filename": "matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/watcher/ActivityRefWatcher.java",
      "status": "modified",
      "additions": 43,
      "deletions": 4,
      "changes": 47,
      "blob_url": "https://github.com/Tencent/matrix/blob/16f2b29513665ae10e9d09d54513d41f6de42ffb/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-android%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2Fwatcher%2FActivityRefWatcher.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/16f2b29513665ae10e9d09d54513d41f6de42ffb/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-android%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2Fwatcher%2FActivityRefWatcher.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-android%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2Fwatcher%2FActivityRefWatcher.java?ref=16f2b29513665ae10e9d09d54513d41f6de42ffb",
      "patch": "@@ -143,14 +143,46 @@ private ActivityRefWatcher(Application app,\n     }\n \n     private final Application.ActivityLifecycleCallbacks mRemovedActivityMonitor = new ActivityLifeCycleCallbacksAdapter() {\n+        private int mAppStatusCounter = 0;\n+        private int mUIConfigChangeCounter = 0;\n+\n         @Override\n         public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n             mCurrentCreatedActivityCount.incrementAndGet();\n         }\n \n+        @Override\n+        public void onActivityStarted(Activity activity) {\n+            if (mAppStatusCounter <= 0) {\n+                MatrixLog.i(TAG, \"we are in foreground, start watcher task.\");\n+                mDetectExecutor.executeInBackground(mScanDestroyedActivitiesTask);\n+            }\n+            if (mUIConfigChangeCounter < 0) {\n+                ++mUIConfigChangeCounter;\n+            } else {\n+                ++mAppStatusCounter;\n+            }\n+        }\n+\n+        @Override\n+        public void onActivityStopped(Activity activity) {\n+            if (activity.isChangingConfigurations()) {\n+                --mUIConfigChangeCounter;\n+            } else {\n+                --mAppStatusCounter;\n+                if (mAppStatusCounter <= 0) {\n+                    MatrixLog.i(TAG, \"we are in background, stop watcher task.\");\n+                    mDetectExecutor.clearTasks();\n+                }\n+            }\n+        }\n+\n         @Override\n         public void onActivityDestroyed(Activity activity) {\n             pushDestroyedActivityInfo(activity);\n+            synchronized (mDestroyedActivityInfos) {\n+                mDestroyedActivityInfos.notifyAll();\n+            }\n         }\n     };\n \n@@ -215,16 +247,23 @@ private void unscheduleDetectProcedure() {\n \n         @Override\n         public Status execute() {\n+            // If destroyed activity list is empty, just wait to save power.\n+            while (mDestroyedActivityInfos.isEmpty()) {\n+                synchronized (mDestroyedActivityInfos) {\n+                    try {\n+                        mDestroyedActivityInfos.wait();\n+                    } catch (Throwable ignored) {\n+                        // Ignored.\n+                    }\n+                }\n+            }\n+\n             // Fake leaks will be generated when debugger is attached.\n             if (Debug.isDebuggerConnected() && !mResourcePlugin.getConfig().getDetectDebugger()) {\n                 MatrixLog.w(TAG, \"debugger is connected, to avoid fake result, detection was delayed.\");\n                 return Status.RETRY;\n             }\n \n-            if (mDestroyedActivityInfos.isEmpty()) {\n-                return Status.RETRY;\n-            }\n-\n             final WeakReference<Object> sentinelRef = new WeakReference<>(new Object());\n             triggerGc();\n             if (sentinelRef.get() != null) {",
      "parent_sha": "4a92921124592e96ce1b02de7e93c75aa908bfc7"
    }
  },
  {
    "oid": "d6e7ed2314cf8e4a1a2e4a5ccfa1137fb28ae111",
    "message": "update api level",
    "date": "2019-01-07T13:02:50Z",
    "url": "https://github.com/Tencent/matrix/commit/d6e7ed2314cf8e4a1a2e4a5ccfa1137fb28ae111",
    "details": {
      "sha": "1fa90ae950ddaf911221e0712b88494264230f24",
      "filename": "matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-analyzer/src/main/java/com/tencent/matrix/resource/analyzer/utils/VersionCodes.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/Tencent/matrix/blob/d6e7ed2314cf8e4a1a2e4a5ccfa1137fb28ae111/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-analyzer%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2Fanalyzer%2Futils%2FVersionCodes.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/d6e7ed2314cf8e4a1a2e4a5ccfa1137fb28ae111/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-analyzer%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2Fanalyzer%2Futils%2FVersionCodes.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-analyzer%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2Fanalyzer%2Futils%2FVersionCodes.java?ref=d6e7ed2314cf8e4a1a2e4a5ccfa1137fb28ae111",
      "patch": "@@ -73,5 +73,11 @@ public final class VersionCodes {\n \n     public static final int N = 24;\n \n-    public static final int O = 25;\n+    public static final int Nougat_MR1 = 25;\n+\n+    public static final int O = 26;\n+\n+    public static final int Oreo_MR1 = 27;\n+\n+    public static final int Pie = 28;\n }",
      "parent_sha": "7bb9743ce4b7c216e8362a7044cd99fde875ac7b"
    }
  },
  {
    "oid": "5da4ba5cdb46a651209b81a6683547bc259e6311",
    "message": "Update power profile",
    "date": "2021-09-10T05:57:59Z",
    "url": "https://github.com/Tencent/matrix/commit/5da4ba5cdb46a651209b81a6683547bc259e6311",
    "details": {
      "sha": "cd90eec26bded167749db5744ee54885a858e5ab",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/utils/PowerProfile.java",
      "status": "modified",
      "additions": 28,
      "deletions": 5,
      "changes": 33,
      "blob_url": "https://github.com/Tencent/matrix/blob/5da4ba5cdb46a651209b81a6683547bc259e6311/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FPowerProfile.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/5da4ba5cdb46a651209b81a6683547bc259e6311/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FPowerProfile.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FPowerProfile.java?ref=5da4ba5cdb46a651209b81a6683547bc259e6311",
      "patch": "@@ -11,6 +11,7 @@\n import java.util.ArrayList;\n import java.util.HashMap;\n \n+import androidx.annotation.Nullable;\n import androidx.annotation.RestrictTo;\n \n /**\n@@ -21,29 +22,51 @@\n public class PowerProfile {\n     private static PowerProfile sInstance = null;\n \n+    @Nullable\n     public static PowerProfile getInstance() {\n         return sInstance;\n     }\n \n     public static PowerProfile init(Context context) throws IOException {\n         synchronized (sLock) {\n             try {\n-                sInstance = new PowerProfile(context);\n+                sInstance = new PowerProfile(context).smoke();\n                 return sInstance;\n             } catch (Throwable e) {\n                 throw new IOException(e);\n             }\n         }\n     }\n \n-    public boolean isSupported() {\n+    public PowerProfile smoke() throws IOException {\n         if (getNumCpuClusters() <= 0) {\n-            return false;\n+            throw new IOException(\"Invalid cpu clusters: \" + getNumCpuClusters());\n+        }\n+        for (int i = 0; i < getNumCpuClusters(); i++) {\n+            if (getNumSpeedStepsInCpuCluster(i) <= 0) {\n+                throw new IOException(\"Invalid cpu cluster speed-steps: cluster = \" + i\n+                        +  \", steps = \" + getNumSpeedStepsInCpuCluster(i));\n+            }\n+        }\n+        int cpuCoreNum = BatteryCanaryUtil.getCpuCoreNum();\n+        int cpuCoreNumInProfile = 0;\n+        for (int i = 0; i < getNumCpuClusters(); i++) {\n+            cpuCoreNumInProfile += getNumCoresInCpuCluster(i);\n         }\n-        if (getNumSpeedStepsInCpuCluster(0) <= 0) {\n+        if (cpuCoreNum != cpuCoreNumInProfile) {\n+            throw new IOException(\"Unmatched cpu core num, sys = \" + cpuCoreNum\n+                    +  \", profile = \" + cpuCoreNumInProfile);\n+        }\n+        return this;\n+    }\n+\n+    public boolean isSupported() {\n+        try {\n+            smoke();\n+            return true;\n+        } catch (IOException ignored) {\n             return false;\n         }\n-        return true;\n     }\n \n     public int getClusterByCpuNum(int cpuCoreNum) {",
      "parent_sha": "cdedcba1cf0043bb370d5742ed23153344bfd263"
    }
  },
  {
    "oid": "17e19d49202617a9dcef629bc671d2a6c829b616",
    "message": "#fix# kts can not set matrix trace",
    "date": "2022-02-11T09:38:12Z",
    "url": "https://github.com/Tencent/matrix/commit/17e19d49202617a9dcef629bc671d2a6c829b616",
    "details": {
      "sha": "f23e1d1fd5765f27bee64e732f0992d5292716c0",
      "filename": "matrix/matrix-android/matrix-gradle-plugin/src/main/java/com/tencent/matrix/trace/extension/MatrixTraceExtension.java",
      "status": "modified",
      "additions": 24,
      "deletions": 4,
      "changes": 28,
      "blob_url": "https://github.com/Tencent/matrix/blob/17e19d49202617a9dcef629bc671d2a6c829b616/matrix%2Fmatrix-android%2Fmatrix-gradle-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fextension%2FMatrixTraceExtension.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/17e19d49202617a9dcef629bc671d2a6c829b616/matrix%2Fmatrix-android%2Fmatrix-gradle-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fextension%2FMatrixTraceExtension.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-gradle-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Fextension%2FMatrixTraceExtension.java?ref=17e19d49202617a9dcef629bc671d2a6c829b616",
      "patch": "@@ -9,10 +9,30 @@ public class MatrixTraceExtension {\n \n     boolean enable;\n \n-//    public void setEnable(boolean enable) {\n-//        this.enable = enable;\n-//        onTraceEnabled(enable);\n-//    }\n+    public void setEnable(boolean enable) {\n+        this.enable = enable;\n+        onTraceEnabled(enable);\n+    }\n+\n+    public void setBlackListFile(String blackListFile) {\n+        this.blackListFile = blackListFile\n+    }\n+\n+    public void setCustomDexTransformName(String customDexTransformName) {\n+        this.customDexTransformName = customDexTransformName\n+    }\n+\n+    public void setBaseMethodMapFile(String baseMethodMapFile) {\n+        this.baseMethodMapFile = baseMethodMapFile\n+    }\n+\n+    public void setTransformInjectionForced(boolean transformInjectionForced) {\n+        this.transformInjectionForced = transformInjectionForced\n+    }\n+\n+    public void setSkipCheckClass(boolean skipCheckClass) {\n+        this.skipCheckClass = skipCheckClass\n+    }\n \n     public String getBaseMethodMapFile() {\n         return baseMethodMapFile;",
      "parent_sha": "c7c07b18d8e8b0032f0d1eec1c92b973ab8dd28b"
    }
  },
  {
    "oid": "0e37e97d152474c2b07f1d89dc69640d8d2d2303",
    "message": "fix checkstyle",
    "date": "2021-06-09T14:57:57Z",
    "url": "https://github.com/Tencent/matrix/commit/0e37e97d152474c2b07f1d89dc69640d8d2d2303",
    "details": {
      "sha": "f21e8a501787737fee54f47d7f05af4c21aaffe2",
      "filename": "matrix/matrix-android/matrix-backtrace/src/main/java/com/tencent/components/backtrace/WarmUpDelegate.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/Tencent/matrix/blob/0e37e97d152474c2b07f1d89dc69640d8d2d2303/matrix%2Fmatrix-android%2Fmatrix-backtrace%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fcomponents%2Fbacktrace%2FWarmUpDelegate.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/0e37e97d152474c2b07f1d89dc69640d8d2d2303/matrix%2Fmatrix-android%2Fmatrix-backtrace%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fcomponents%2Fbacktrace%2FWarmUpDelegate.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-backtrace%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fcomponents%2Fbacktrace%2FWarmUpDelegate.java?ref=0e37e97d152474c2b07f1d89dc69640d8d2d2303",
      "patch": "@@ -550,15 +550,15 @@ final static class ThreadTaskExecutor implements Runnable, Handler.Callback {\n \n         private boolean mThreadBlocked = false;\n \n-        public ThreadTaskExecutor(String threadName) {\n+        ThreadTaskExecutor(String threadName) {\n             mThreadName = threadName;\n         }\n \n-        public boolean isThreadBlocked() {\n+        boolean isThreadBlocked() {\n             return mThreadBlocked;\n         }\n \n-        public void arrangeTask(Runnable runnable, String tag) {\n+        void arrangeTask(Runnable runnable, String tag) {\n             synchronized (mTaskQueue) {\n                 if (mTaskQueue.contains(tag)) {\n                     return;",
      "parent_sha": "9eb07d289641c758cd2b89baeb3c83464c2499c5"
    }
  },
  {
    "oid": "28dae1e703b339d134aab84833eebb298718cf23",
    "message": "Fix ANR Report",
    "date": "2021-07-09T11:24:42Z",
    "url": "https://github.com/Tencent/matrix/commit/28dae1e703b339d134aab84833eebb298718cf23",
    "details": {
      "sha": "0bb1722ee59425d8f4e17cf49c0f3d2e71cb5425",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/SignalAnrTracer.java",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/Tencent/matrix/blob/28dae1e703b339d134aab84833eebb298718cf23/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FSignalAnrTracer.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/28dae1e703b339d134aab84833eebb298718cf23/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FSignalAnrTracer.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FSignalAnrTracer.java?ref=28dae1e703b339d134aab84833eebb298718cf23",
      "patch": "@@ -64,6 +64,7 @@ public class SignalAnrTracer extends Tracer {\n     private static Application sApplication;\n     private static boolean hasInit = false;\n     public static boolean hasInstance = false;\n+    private static boolean hasReported = false;\n \n \n     static {\n@@ -112,11 +113,13 @@ public void setSignalAnrDetectedListener(SignalAnrDetectedListener listener) {\n     @RequiresApi(api = Build.VERSION_CODES.M)\n     @Keep\n     private static void onANRDumped() {\n+        hasReported = false;\n         currentForeground = AppForegroundUtil.isInterestingToUser();\n-        boolean needReport = firstCheckMessage();\n+        boolean needReport = isMainThreadBlocked();\n \n         if (needReport) {\n             report();\n+            hasReported = true;\n         } else {\n             checkErrorStateCycle();\n         }\n@@ -179,7 +182,7 @@ private static void report() {\n     }\n \n \n-    private static boolean firstCheckMessage() {\n+    private static boolean isMainThreadBlocked() {\n         try {\n             MessageQueue mainQueue = Looper.getMainLooper().getQueue();\n             Field field = mainQueue.getClass().getDeclaredField(\"mMessages\");\n@@ -209,7 +212,8 @@ private static void checkErrorStateCycle() {\n         while (checkErrorStateCount < CHECK_ERROR_STATE_COUNT) {\n             checkErrorStateCount++;\n             boolean myAnr = checkErrorState();\n-            if (myAnr) {\n+            if (myAnr && !hasReported) {\n+                report();\n                 break;\n             }\n         }",
      "parent_sha": "a61c6f8bc05585ad31c15baf66eafdc5f46541c9"
    }
  },
  {
    "oid": "b8e7349d6266b0b539e0b6f3c62345355c676256",
    "message": "Add devCpuLoad",
    "date": "2022-05-24T13:04:54Z",
    "url": "https://github.com/Tencent/matrix/commit/b8e7349d6266b0b539e0b6f3c62345355c676256",
    "details": {
      "sha": "cd22a76e5a219129e2c409d5b00aa7f56cecb718",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/CompositeMonitors.java",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/Tencent/matrix/blob/b8e7349d6266b0b539e0b6f3c62345355c676256/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2Ffeature%2FCompositeMonitors.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/b8e7349d6266b0b539e0b6f3c62345355c676256/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2Ffeature%2FCompositeMonitors.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2Ffeature%2FCompositeMonitors.java?ref=b8e7349d6266b0b539e0b6f3c62345355c676256",
      "patch": "@@ -156,7 +156,6 @@ public int getCpuLoad() {\n             MatrixLog.w(TAG, \"AppStats should not be null to get CpuLoad\");\n             return -1;\n         }\n-\n         Delta<JiffiesSnapshot> appJiffies = getDelta(JiffiesSnapshot.class);\n         if (appJiffies == null) {\n             MatrixLog.w(TAG, JiffiesSnapshot.class + \" should be metrics to get CpuLoad\");\n@@ -169,6 +168,23 @@ public int getCpuLoad() {\n         return (int) (cpuLoad * 100);\n     }\n \n+    public int getDevCpuLoad() {\n+        if (mAppStats == null) {\n+            MatrixLog.w(TAG, \"AppStats should not be null to get CpuLoad\");\n+            return -1;\n+        }\n+        Delta<CpuStatFeature.CpuStateSnapshot> cpuJiffies = getDelta(CpuStatFeature.CpuStateSnapshot.class);\n+        if (cpuJiffies == null) {\n+            MatrixLog.w(TAG, \"Configure CpuLoad by uptime\");\n+            return -1;\n+        }\n+\n+        long cpuJiffiesDelta = cpuJiffies.dlt.totalCpuJiffies();\n+        long devJiffiesDelta = mAppStats.duringMillis;\n+        float cpuLoad = devJiffiesDelta > 0 ? (float) (cpuJiffiesDelta * 10) / devJiffiesDelta : 0;\n+        return (int) (cpuLoad * 100);\n+    }\n+\n     public <T extends Snapshot<T>> boolean isOverHeat(Class<T> snapshotClass) {\n         AppStats appStats = getAppStats();\n         Delta<?> delta = getDelta(snapshotClass);",
      "parent_sha": "51f1f983c590c75e89e3c62a8800d0bfcc1ff191"
    }
  },
  {
    "oid": "47eb10681cc21d8b3f4f59f8822d82824c9fa04f",
    "message": "Update battery with monitor test cases",
    "date": "2020-11-12T06:36:43Z",
    "url": "https://github.com/Tencent/matrix/commit/47eb10681cc21d8b3f4f59f8822d82824c9fa04f",
    "details": {
      "sha": "37bb9f53b0f0852aa2551717235d0ab68fd43d5e",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/androidTest/java/com/tencent/matrix/batterycanary/monitor/MonitorCoreTest.java",
      "status": "modified",
      "additions": 122,
      "deletions": 71,
      "changes": 193,
      "blob_url": "https://github.com/Tencent/matrix/blob/47eb10681cc21d8b3f4f59f8822d82824c9fa04f/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2FandroidTest%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2FMonitorCoreTest.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/47eb10681cc21d8b3f4f59f8822d82824c9fa04f/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2FandroidTest%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2FMonitorCoreTest.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2FandroidTest%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2FMonitorCoreTest.java?ref=47eb10681cc21d8b3f4f59f8822d82824c9fa04f",
      "patch": "@@ -24,6 +24,8 @@\n import android.support.test.runner.AndroidJUnit4;\n \n import com.tencent.matrix.Matrix;\n+import com.tencent.matrix.batterycanary.monitor.feature.AlarmMonitorFeature;\n+import com.tencent.matrix.batterycanary.monitor.feature.DeviceStatMonitorFeature;\n import com.tencent.matrix.batterycanary.monitor.feature.JiffiesMonitorFeature;\n import com.tencent.matrix.batterycanary.monitor.feature.LooperTaskMonitorFeature;\n import com.tencent.matrix.batterycanary.monitor.feature.WakeLockMonitorFeature;\n@@ -81,10 +83,12 @@ public void shutDown() {\n     @Test\n     public void testInitCore() throws InterruptedException {\n         BatteryMonitorConfig config = new BatteryMonitorConfig.Builder()\n+                .enable(LooperTaskMonitorFeature.class)\n                 .enable(JiffiesMonitorFeature.class)\n+                .enable(DeviceStatMonitorFeature.class)\n                 .enable(WakeLockMonitorFeature.class)\n-                .enable(LooperTaskMonitorFeature.class)\n-                .enableBuiltinForegroundNotify(false)\n+                .enable(AlarmMonitorFeature.class)\n+                .enableBuiltinForegroundNotify(true)\n                 .enableForegroundMode(true)\n                 .setCallback(spyCallback)\n                 .wakelockTimeout(1000)\n@@ -97,98 +101,145 @@ public void testInitCore() throws InterruptedException {\n     }\n \n     @Test\n-    public void testJiffiesFeatures() throws InterruptedException {\n-        Thread thread = new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                while (true) {\n-                    new Handler(Looper.getMainLooper());\n-                }\n-            }\n-        });\n-        thread.setPriority(Thread.MAX_PRIORITY);\n-        thread.setName(\"test-jiffies-thread\");\n-        thread.start();\n+    public void testInitCoreWithCustomCfg0() throws InterruptedException {\n+        BatteryMonitorConfig config = new BatteryMonitorConfig.Builder()\n+                .enable(LooperTaskMonitorFeature.class)\n+                .enable(JiffiesMonitorFeature.class)\n+                .enable(DeviceStatMonitorFeature.class)\n+                .enable(WakeLockMonitorFeature.class)\n+                .enable(AlarmMonitorFeature.class)\n+                .enableBuiltinForegroundNotify(true)\n+                .enableForegroundMode(true)\n+                .setCallback(spyCallback)\n+                .wakelockTimeout(300)\n+                .greyJiffiesTime(100)\n+                .foregroundLoopCheckTime(2000)\n+                .build();\n+\n+        final BatteryMonitorCore core = new BatteryMonitorCore(config);\n+        core.start();\n+        Thread.sleep(1000L);\n+    }\n \n-        Matrix.init(new Matrix.Builder(((Application) mContext.getApplicationContext())).build());\n+    @Test\n+    public void testInitCoreWithCustomCfg1() throws InterruptedException {\n         BatteryMonitorConfig config = new BatteryMonitorConfig.Builder()\n+                // .enable(LooperTaskMonitorFeature.class)\n+                // .enable(JiffiesMonitorFeature.class)\n+                // .enable(DeviceStatMonitorFeature.class)\n+                // .enable(WakeLockMonitorFeature.class)\n+                // .enable(AlarmMonitorFeature.class)\n+                .enableBuiltinForegroundNotify(true)\n+                .enableForegroundMode(true)\n+                .setCallback(spyCallback)\n+                .wakelockTimeout(300)\n+                .greyJiffiesTime(100)\n+                .foregroundLoopCheckTime(2000)\n+                .build();\n+\n+        final BatteryMonitorCore core = new BatteryMonitorCore(config);\n+        core.start();\n+        Thread.sleep(1000L);\n+    }\n+\n+    @Test\n+    public void testInitCoreWithCustomCfg3() throws InterruptedException {\n+        BatteryMonitorConfig config = new BatteryMonitorConfig.Builder()\n+                // .enable(LooperTaskMonitorFeature.class)\n                 .enable(JiffiesMonitorFeature.class)\n-                .enableBuiltinForegroundNotify(false)\n-                .enableForegroundMode(false)\n+                .enable(DeviceStatMonitorFeature.class)\n+                .enable(WakeLockMonitorFeature.class)\n+                .enable(AlarmMonitorFeature.class)\n+                .enableBuiltinForegroundNotify(true)\n+                .enableForegroundMode(true)\n                 .setCallback(spyCallback)\n-                .wakelockTimeout(1000)\n+                .wakelockTimeout(300)\n                 .greyJiffiesTime(100)\n-                .foregroundLoopCheckTime(1000)\n+                .foregroundLoopCheckTime(2000)\n                 .build();\n \n         final BatteryMonitorCore core = new BatteryMonitorCore(config);\n-        mockForegroundSwitching(core);\n         core.start();\n-        Thread.sleep(10000L);\n+        Thread.sleep(1000L);\n     }\n+    @Test\n+    public void testInitCoreWithCustomCfg4() throws InterruptedException {\n+        BatteryMonitorConfig config = new BatteryMonitorConfig.Builder()\n+                .enable(LooperTaskMonitorFeature.class)\n+                // .enable(JiffiesMonitorFeature.class)\n+                .enable(DeviceStatMonitorFeature.class)\n+                .enable(WakeLockMonitorFeature.class)\n+                .enable(AlarmMonitorFeature.class)\n+                .enableBuiltinForegroundNotify(true)\n+                .enableForegroundMode(true)\n+                .setCallback(spyCallback)\n+                .wakelockTimeout(300)\n+                .greyJiffiesTime(100)\n+                .foregroundLoopCheckTime(2000)\n+                .build();\n \n+        final BatteryMonitorCore core = new BatteryMonitorCore(config);\n+        core.start();\n+        Thread.sleep(1000L);\n+    }\n     @Test\n-    public void testJiffiesFeaturesWithForegroundLoopCheck() throws InterruptedException {\n-        Thread thread = new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                while (true) {\n-                    new Handler(Looper.getMainLooper());\n-                }\n-            }\n-        });\n-        thread.setPriority(Thread.MAX_PRIORITY);\n-        thread.setName(\"test-jiffies-thread\");\n-        thread.start();\n+    public void testInitCoreWithCustomCfg5() throws InterruptedException {\n+        BatteryMonitorConfig config = new BatteryMonitorConfig.Builder()\n+                .enable(LooperTaskMonitorFeature.class)\n+                .enable(JiffiesMonitorFeature.class)\n+                // .enable(DeviceStatMonitorFeature.class)\n+                .enable(WakeLockMonitorFeature.class)\n+                .enable(AlarmMonitorFeature.class)\n+                .enableBuiltinForegroundNotify(true)\n+                .enableForegroundMode(true)\n+                .setCallback(spyCallback)\n+                .wakelockTimeout(300)\n+                .greyJiffiesTime(100)\n+                .foregroundLoopCheckTime(2000)\n+                .build();\n \n-        Matrix.init(new Matrix.Builder(((Application) mContext.getApplicationContext())).build());\n+        final BatteryMonitorCore core = new BatteryMonitorCore(config);\n+        core.start();\n+        Thread.sleep(1000L);\n+    }\n+    @Test\n+    public void testInitCoreWithCustomCfg6() throws InterruptedException {\n         BatteryMonitorConfig config = new BatteryMonitorConfig.Builder()\n+                .enable(LooperTaskMonitorFeature.class)\n                 .enable(JiffiesMonitorFeature.class)\n-                .enableBuiltinForegroundNotify(false)\n+                .enable(DeviceStatMonitorFeature.class)\n+                // .enable(WakeLockMonitorFeature.class)\n+                .enable(AlarmMonitorFeature.class)\n+                .enableBuiltinForegroundNotify(true)\n                 .enableForegroundMode(true)\n                 .setCallback(spyCallback)\n-                .wakelockTimeout(1000)\n+                .wakelockTimeout(300)\n                 .greyJiffiesTime(100)\n-                .foregroundLoopCheckTime(1000)\n+                .foregroundLoopCheckTime(2000)\n                 .build();\n \n         final BatteryMonitorCore core = new BatteryMonitorCore(config);\n         core.start();\n-        Handler handler = new Handler(Looper.getMainLooper());\n-        handler.post(new Runnable() {\n-            @Override\n-            public void run() {\n-                core.onForeground(true);\n-            }\n-        });\n-        Thread.sleep(10000L);\n+        Thread.sleep(1000L);\n     }\n+    @Test\n+    public void testInitCoreWithCustomCfg7() throws InterruptedException {\n+        BatteryMonitorConfig config = new BatteryMonitorConfig.Builder()\n+                .enable(LooperTaskMonitorFeature.class)\n+                .enable(JiffiesMonitorFeature.class)\n+                .enable(DeviceStatMonitorFeature.class)\n+                .enable(WakeLockMonitorFeature.class)\n+                // .enable(AlarmMonitorFeature.class)\n+                .enableBuiltinForegroundNotify(true)\n+                .enableForegroundMode(true)\n+                .setCallback(spyCallback)\n+                .wakelockTimeout(300)\n+                .greyJiffiesTime(100)\n+                .foregroundLoopCheckTime(2000)\n+                .build();\n \n-    private void mockForegroundSwitching(final BatteryMonitorCore core) {\n-        Handler handler = new Handler(Looper.getMainLooper());\n-        handler.post(new Runnable() {\n-            @Override\n-            public void run() {\n-                core.onForeground(false);\n-            }\n-        });\n-        handler.postDelayed(new Runnable() {\n-            @Override\n-            public void run() {\n-                core.onForeground(true);\n-            }\n-        }, 2000L);\n-        handler.postDelayed(new Runnable() {\n-            @Override\n-            public void run() {\n-                core.onForeground(false);\n-            }\n-        }, 5000L);\n-        handler.postDelayed(new Runnable() {\n-            @Override\n-            public void run() {\n-                core.onForeground(true);\n-            }\n-        }, 9000L);\n+        final BatteryMonitorCore core = new BatteryMonitorCore(config);\n+        core.start();\n+        Thread.sleep(1000L);\n     }\n }",
      "parent_sha": "c2138649c4fc4f30e88156ccf00401902ea31d2c"
    }
  },
  {
    "oid": "b20f11909a2a0de2afe1c201210b1a0f52a6ac61",
    "message": "Remove useless code",
    "date": "2020-12-25T14:57:12Z",
    "url": "https://github.com/Tencent/matrix/commit/b20f11909a2a0de2afe1c201210b1a0f52a6ac61",
    "details": {
      "sha": "5074637e956432052efc64f542ff8d2bee4a1f4e",
      "filename": "wxperf-backtrace/src/main/java/com/tencent/components/backtrace/WeChatBacktrace.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/Tencent/matrix/blob/b20f11909a2a0de2afe1c201210b1a0f52a6ac61/wxperf-backtrace%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fcomponents%2Fbacktrace%2FWeChatBacktrace.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/b20f11909a2a0de2afe1c201210b1a0f52a6ac61/wxperf-backtrace%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fcomponents%2Fbacktrace%2FWeChatBacktrace.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/wxperf-backtrace%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fcomponents%2Fbacktrace%2FWeChatBacktrace.java?ref=b20f11909a2a0de2afe1c201210b1a0f52a6ac61",
      "patch": "@@ -360,12 +360,14 @@ private void iterateTargetDirectory(File target, CancellationSignal cs, FileFilt\n         }\n     }\n \n+    private final static boolean sFakeTest = false;\n+\n     // TODO For debug\n     final CancellationSignal fakeCS = new CancellationSignal();\n \n     private void warmingUp(final CancellationSignal cs) {\n \n-        if (fakeCS != cs) {\n+        if (sFakeTest && fakeCS != cs) {\n             return;\n         }\n \n@@ -723,7 +725,7 @@ private void configure(Configuration configuration) {\n \n         mConfigured = true;\n \n-        if (configuration.mIsWarmUpProcess && !hasWarmedUp()) {\n+        if (sFakeTest && configuration.mIsWarmUpProcess && !hasWarmedUp()) {\n             mIdleHandler.sendMessageDelayed(\n                     Message.obtain(mIdleHandler, MSG_WARM_UP_FAKE, fakeCS),\n                     DELAY_WARM_UP * 1",
      "parent_sha": "0bdbf1ca10619839080c18065b831e9f721e5710"
    }
  },
  {
    "oid": "1e5fc015e49d03b7ae77372e4281656690453f91",
    "message": "ResourcePlugin: fix NPE",
    "date": "2021-03-16T10:34:25Z",
    "url": "https://github.com/Tencent/matrix/commit/1e5fc015e49d03b7ae77372e4281656690453f91",
    "details": {
      "sha": "3f8fc6620e85af77d60a3a87ba436a587995dfe8",
      "filename": "matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/ResourcePlugin.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/Tencent/matrix/blob/1e5fc015e49d03b7ae77372e4281656690453f91/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-android%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2FResourcePlugin.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/1e5fc015e49d03b7ae77372e4281656690453f91/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-android%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2FResourcePlugin.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-android%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2FResourcePlugin.java?ref=1e5fc015e49d03b7ae77372e4281656690453f91",
      "patch": "@@ -106,7 +106,9 @@ public String getTag() {\n     @Override\n     public void onForeground(boolean isForeground) {\n         MatrixLog.d(TAG, \"onForeground: %s\", isForeground);\n-        mWatcher.onForeground(isForeground);\n+        if (isPluginStarted() && mWatcher != null) {\n+            mWatcher.onForeground(isForeground);\n+        }\n     }\n \n     public ResourceConfig getConfig() {",
      "parent_sha": "3132b2161f221211ffd37256d660cdfd0dd85b27"
    }
  },
  {
    "oid": "fb40ea891fa7cfe62d8cf85ab06bde99ee108698",
    "message": "[matrix-hook] Add NativeLibraryLoader to adapt custom native library loading routine in main project.",
    "date": "2021-05-06T06:28:14Z",
    "url": "https://github.com/Tencent/matrix/commit/fb40ea891fa7cfe62d8cf85ab06bde99ee108698",
    "details": {
      "sha": "9c98821886d00ffc59a94c0fc0cd0f600624ec7f",
      "filename": "matrix/matrix-android/matrix-hooks/src/main/java/com/tencent/matrix/hook/HookManager.java",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/Tencent/matrix/blob/fb40ea891fa7cfe62d8cf85ab06bde99ee108698/matrix%2Fmatrix-android%2Fmatrix-hooks%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fhook%2FHookManager.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/fb40ea891fa7cfe62d8cf85ab06bde99ee108698/matrix%2Fmatrix-android%2Fmatrix-hooks%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fhook%2FHookManager.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-hooks%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fhook%2FHookManager.java?ref=fb40ea891fa7cfe62d8cf85ab06bde99ee108698",
      "patch": "@@ -2,6 +2,7 @@\n \n \n import androidx.annotation.Keep;\n+import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n import com.tencent.matrix.util.MatrixLog;\n@@ -20,6 +21,12 @@ public class HookManager {\n     private volatile boolean hasHooked;\n     private Set<AbsHook> mHooks = new HashSet<>();\n \n+    private NativeLibraryLoader mNativeLibLoader = null;\n+\n+    public interface NativeLibraryLoader {\n+        void loadLibrary(@NonNull String libName);\n+    }\n+\n     private HookManager(){\n     }\n \n@@ -42,7 +49,11 @@ public void commitHooks() throws HookFailedException {\n         }\n \n         try {\n-            System.loadLibrary(\"matrix-hooks\");\n+            if (mNativeLibLoader != null) {\n+                mNativeLibLoader.loadLibrary(\"matrix-hooks\");\n+            } else {\n+                System.loadLibrary(\"matrix-hooks\");\n+            }\n         } catch (Throwable e) {\n             MatrixLog.printErrStackTrace(TAG, e, \"\");\n             return;\n@@ -57,6 +68,11 @@ public void commitHooks() throws HookFailedException {\n         exclusiveHook();\n     }\n \n+    public HookManager setNativeLibraryLoader(@Nullable NativeLibraryLoader loader) {\n+        mNativeLibLoader = loader;\n+        return this;\n+    }\n+\n     public HookManager addHook(@Nullable AbsHook hook) {\n         if (hook != null) {\n             mHooks.add(hook);",
      "parent_sha": "197eb31b75a769623c9426075565e0cd4d879363"
    }
  },
  {
    "oid": "727db2a60c72c12c1e5f40f52a1b9c2672416faf",
    "message": "fix size get bug",
    "date": "2021-12-10T09:16:58Z",
    "url": "https://github.com/Tencent/matrix/commit/727db2a60c72c12c1e5f40f52a1b9c2672416faf",
    "details": {
      "sha": "a7a2190c16fa51fb6e04cb04ca43b256a5cd8ce9",
      "filename": "matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/MemoryInfo.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/Tencent/matrix/blob/727db2a60c72c12c1e5f40f52a1b9c2672416faf/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FMemoryInfo.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/727db2a60c72c12c1e5f40f52a1b9c2672416faf/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FMemoryInfo.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FMemoryInfo.java?ref=727db2a60c72c12c1e5f40f52a1b9c2672416faf",
      "patch": "@@ -152,14 +152,17 @@ public FaceInfo[] getFaces() {\n     }\n \n     public long getSize() {\n+        long actualSize = 0L;\n         if (this.resType == OpenGLInfo.TYPE.TEXTURE) {\n             for (FaceInfo faceInfo : faces) {\n                 if (faceInfo != null) {\n-                    this.size += faceInfo.getSize();\n+                    actualSize += faceInfo.getSize();\n                 }\n             }\n+        } else {\n+            actualSize = size;\n         }\n-        return size;\n+        return actualSize;\n     }\n \n     public long getEglContextId() {",
      "parent_sha": "04bcc13f5e603a4afe0c5c06807181161e26961b"
    }
  },
  {
    "oid": "2d41daf90802349b6abcee1657e749eed39fcb2f",
    "message": "Update battery with task tracing  feat",
    "date": "2021-03-24T08:04:40Z",
    "url": "https://github.com/Tencent/matrix/commit/2d41daf90802349b6abcee1657e749eed39fcb2f",
    "details": {
      "sha": "1a3c1fb279e2f1992799cb9102914015ff20fda3",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/AbsTaskMonitorFeature.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/Tencent/matrix/blob/2d41daf90802349b6abcee1657e749eed39fcb2f/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2Ffeature%2FAbsTaskMonitorFeature.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/2d41daf90802349b6abcee1657e749eed39fcb2f/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2Ffeature%2FAbsTaskMonitorFeature.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2Ffeature%2FAbsTaskMonitorFeature.java?ref=2d41daf90802349b6abcee1657e749eed39fcb2f",
      "patch": "@@ -13,6 +13,7 @@\n import android.util.SparseArray;\n \n import com.tencent.matrix.batterycanary.BuildConfig;\n+import com.tencent.matrix.batterycanary.monitor.AppStats;\n import com.tencent.matrix.batterycanary.monitor.BatteryMonitorCore;\n import com.tencent.matrix.batterycanary.monitor.feature.MonitorFeature.Snapshot.Delta;\n import com.tencent.matrix.batterycanary.monitor.feature.MonitorFeature.Snapshot.Entry.DigitEntry;\n@@ -31,6 +32,7 @@\n import java.util.concurrent.Callable;\n import java.util.concurrent.ConcurrentHashMap;\n \n+import static com.tencent.matrix.batterycanary.monitor.AppStats.*;\n import static com.tencent.matrix.batterycanary.monitor.BatteryMonitorConfig.DEF_STAMP_OVERHEAT;\n \n @SuppressWarnings(\"NotNullFieldNotInitialized\")\n@@ -305,7 +307,7 @@ protected void updateDeltas(TaskJiffiesSnapshot bgn, TaskJiffiesSnapshot end) {\n \n         // Compute task jiffies consumed\n         Delta<TaskJiffiesSnapshot> delta = end.diff(bgn);\n-        if (!BuildConfig.DEBUG && (delta.during <= 1000L || delta.dlt.jiffies.get() <= 100L)) {\n+        if (!shouldTraceTask(delta)) {\n             return;\n         }\n \n@@ -349,6 +351,10 @@ protected void updateDeltas(TaskJiffiesSnapshot bgn, TaskJiffiesSnapshot end) {\n         }\n     }\n \n+    protected boolean shouldTraceTask(Delta<TaskJiffiesSnapshot> delta) {\n+        return BuildConfig.DEBUG || (delta.during > 1000L && delta.dlt.jiffies.get() / Math.max(1, delta.during / ONE_MIN) > 100L);\n+    }\n+\n     protected void updateDeltas(Delta<TaskJiffiesSnapshot> delta) {\n         synchronized (mDeltaList) {\n             // remove pre records of current task",
      "parent_sha": "59c8c22bc8e51b34fb996270ca4636ef92735f72"
    }
  },
  {
    "oid": "59ae69638a245b460965e0989f05a9ed69b5e35d",
    "message": "Update battery canary with benchmark tests",
    "date": "2020-11-12T06:36:43Z",
    "url": "https://github.com/Tencent/matrix/commit/59ae69638a245b460965e0989f05a9ed69b5e35d",
    "details": {
      "sha": "fa060eb859a3e0456df83e823ff8412a313d7bdc",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/androidTest/java/com/tencent/matrix/batterycanary/utils/ProcessCpuTrackUtilsTest.java",
      "status": "modified",
      "additions": 153,
      "deletions": 40,
      "changes": 193,
      "blob_url": "https://github.com/Tencent/matrix/blob/59ae69638a245b460965e0989f05a9ed69b5e35d/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2FandroidTest%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FProcessCpuTrackUtilsTest.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/59ae69638a245b460965e0989f05a9ed69b5e35d/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2FandroidTest%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FProcessCpuTrackUtilsTest.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2FandroidTest%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FProcessCpuTrackUtilsTest.java?ref=59ae69638a245b460965e0989f05a9ed69b5e35d",
      "patch": "@@ -18,6 +18,8 @@\n \n import android.content.Context;\n import android.os.Process;\n+import android.os.SystemClock;\n+import android.support.annotation.Nullable;\n import android.support.test.InstrumentationRegistry;\n import android.support.test.runner.AndroidJUnit4;\n import android.text.TextUtils;\n@@ -40,6 +42,7 @@\n  *\n  * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n  */\n+@SuppressWarnings(\"SpellCheckingInspection\")\n @RunWith(AndroidJUnit4.class)\n public class ProcessCpuTrackUtilsTest {\n     static final String TAG = \"Matrix.test.ProcessCpuTrackUtilsTest\";\n@@ -59,13 +62,13 @@ public void shutDown() {\n      * cat: /proc/loadavg\n      */\n     @Test\n-    public void testGetCpuLoad() throws InterruptedException {\n+    public void testGetCpuLoad() {\n         String cat = BatteryCanaryUtil.cat(\"/proc/loadavg\");\n         Assert.assertTrue(TextUtils.isEmpty(cat));\n     }\n \n     @Test\n-    public void testGetCpuLoad2() throws InterruptedException {\n+    public void testGetCpuLoad2() {\n         ProcessCpuTrackUtils.CpuLoad cpuLoad = ProcessCpuTrackUtils.getCpuLoad();\n         Assert.assertNotNull(cpuLoad);\n     }\n@@ -103,26 +106,142 @@ public void testGetMyProcThreadStat() {\n                 String catPath = new File(item, \"stat\").getAbsolutePath();\n                 String cat = BatteryCanaryUtil.cat(catPath);\n                 Assert.assertFalse(TextUtils.isEmpty(cat));\n-                parseJiffiesInfoWithBuffer(catPath, new byte[2 * 1024]);\n+\n+                ProcStatInfo stat = parseJiffiesInfoWithSplitsForPath(catPath);\n+                Assert.assertNotNull(stat.comm);\n+                Assert.assertTrue(stat.utime >= 0);\n+                Assert.assertTrue(stat.stime >= 0);\n+                Assert.assertTrue(stat.cutime >= 0);\n+                Assert.assertTrue(stat.cstime >= 0);\n+                long jiffies = stat.utime + stat.stime + stat.cutime + stat.cstime;\n+                Assert.assertTrue(jiffies >= 0);\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"ConstantConditions\")\n+    @Test\n+    public void testGetMyProcThreadStatOpt() {\n+        String dirPath = \"/proc/\" + Process.myPid() + \"/task\";\n+        for (File item : new File(dirPath).listFiles()) {\n+            if (item.isDirectory()) {\n+                String catPath = new File(item, \"stat\").getAbsolutePath();\n+                String cat = BatteryCanaryUtil.cat(catPath);\n+                Assert.assertFalse(TextUtils.isEmpty(cat));\n+\n+                ProcStatInfo stat = parseJiffiesInfoWithBufferForPath(catPath, new byte[2 * 1024]);\n+                Assert.assertNotNull(stat.comm);\n+                Assert.assertTrue(stat.utime >= 0);\n+                Assert.assertTrue(stat.stime >= 0);\n+                Assert.assertTrue(stat.cutime >= 0);\n+                Assert.assertTrue(stat.cstime >= 0);\n+                long jiffies = stat.utime + stat.stime + stat.cutime + stat.cstime;\n+                Assert.assertTrue(jiffies >= 0);\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"ConstantConditions\")\n+    @Test\n+    public void testGetMyProcThreadStatAndCompare() {\n+        String dirPath = \"/proc/\" + Process.myPid() + \"/task\";\n+        for (File item : new File(dirPath).listFiles()) {\n+            if (item.isDirectory()) {\n+                String catPath = new File(item, \"stat\").getAbsolutePath();\n+                String cat = BatteryCanaryUtil.cat(catPath);\n+                Assert.assertFalse(TextUtils.isEmpty(cat));\n+                ProcStatInfo statInfo1 = parseJiffiesInfoWithSplits(cat);\n+                ProcStatInfo statInfo2 = parseJiffiesInfoWithBuffer(cat.getBytes());\n+                Assert.assertEquals(statInfo1.comm, statInfo2.comm);\n+                Assert.assertEquals(statInfo1.utime, statInfo2.utime);\n+                Assert.assertEquals(statInfo1.stime, statInfo2.stime);\n+                Assert.assertEquals(statInfo1.cutime, statInfo2.cutime);\n+                Assert.assertEquals(statInfo1.cstime, statInfo2.cstime);\n             }\n         }\n     }\n \n-    static int readProcStat(String path, byte[] buffer) {\n-        int readBytes = -1;\n+    @Test\n+    public void testGetMyProcThreadStatBenchmark() {\n+        int times = 100;\n+        long current = SystemClock.uptimeMillis();\n+        for (int i = 0; i < times; i++) {\n+            String dirPath = \"/proc/\" + Process.myPid() + \"/task\";\n+            for (File item : new File(dirPath).listFiles()) {\n+                if (item.isDirectory()) {\n+                    String catPath = new File(item, \"stat\").getAbsolutePath();\n+                    parseJiffiesInfoWithSplitsForPath(catPath);\n+                }\n+            }\n+        }\n+        long timeConsumed1 = SystemClock.uptimeMillis() - current;\n+\n+        current = SystemClock.uptimeMillis();\n+        for (int i = 0; i < times; i++) {\n+            String dirPath = \"/proc/\" + Process.myPid() + \"/task\";\n+            for (File item : new File(dirPath).listFiles()) {\n+                if (item.isDirectory()) {\n+                    String catPath = new File(item, \"stat\").getAbsolutePath();\n+                    parseJiffiesInfoWithBufferForPath(catPath, new byte[2 * 1024]);\n+                }\n+            }\n+        }\n+        long timeConsumed2 = SystemClock.uptimeMillis() - current;\n+\n+        Assert.fail(\"TIME CONSUMED: \" + timeConsumed1 + \" vs \" + timeConsumed2);\n+    }\n+\n+    public static class ProcStatInfo {\n+        @Nullable\n+        public String comm;\n+        public long utime = -1;\n+        public long stime = -1;\n+        public long cutime = -1;\n+        public long cstime = -1;\n+    }\n+\n+    static ProcStatInfo parseJiffiesInfoWithSplitsForPath(String path) {\n+        return parseJiffiesInfoWithSplits(BatteryCanaryUtil.cat(path));\n+    }\n+\n+    static ProcStatInfo parseJiffiesInfoWithSplits(String cat) {\n+        // cat = cat.substring(0, cat.length() / 2);\n+        ProcStatInfo stat = new ProcStatInfo();\n+        if (!TextUtils.isEmpty(cat)) {\n+            String[] splits = cat.split(\" \");\n+            String name = splits[1];\n+            if (name.startsWith(\"(\")) name = name.substring(1);\n+            if (name.endsWith(\")\")) name = name.substring(0, name.length() - 1);\n+            stat.comm = name;\n+            stat.utime = MatrixUtil.parseLong(splits[13], 0);\n+            stat.stime = MatrixUtil.parseLong(splits[14], 0);\n+            stat.cutime = MatrixUtil.parseLong(splits[15], 0);\n+            stat.cstime = MatrixUtil.parseLong(splits[16], 0);\n+        }\n+        return stat;\n+    }\n+\n+    static ProcStatInfo parseJiffiesInfoWithBufferForPath(String path, byte[] buffer) {\n         File file = new File(path);\n-        if (!file.exists()) { return readBytes; }\n+        if (!file.exists()) {\n+            return null;\n+        }\n \n+        int readBytes;\n         try (FileInputStream fis = new FileInputStream(file)) {\n             readBytes = fis.read(buffer);\n         } catch (IOException e) {\n             MatrixLog.printErrStackTrace(TAG, e, \"read buffer from file fail\");\n             readBytes = -1;\n         }\n-        return readBytes;\n+        if (readBytes <= 0) {\n+            return null;\n+        }\n+\n+        return parseJiffiesInfoWithBuffer(buffer);\n     }\n \n-    static void parseJiffiesInfoWithBuffer(String path, byte[] buffer) {\n+    static ProcStatInfo parseJiffiesInfoWithBuffer(byte[] statBuffer) {\n         /*\n          * \u6837\u672c:\n          * 10966 (terycanary.test) S 699 699 0 0 -1 1077952832 6187 0 0 0 22 2 0 0 20 0 17 0 9087400 5414273024\n@@ -168,17 +287,10 @@ static void parseJiffiesInfoWithBuffer(String path, byte[] buffer) {\n          * sigignore: \u88ab\u5ffd\u7565\u7684\u4fe1\u53f7, \u5341\u8fdb\u5236, \u6b64\u5904\u7b49\u4e8e36088\n          */\n \n-        String name = null;\n-        long utime = -1;\n-        long stime = -1;\n-        long cutime = -1;\n-        long cstime = -1;\n-\n-        int statBytes = readProcStat(path, buffer);\n-\n-\n+        ProcStatInfo stat = new ProcStatInfo();\n+        int statBytes = statBuffer.length;\n         for (int i = 0, spaceIdx = 0; i < statBytes; ) {\n-            if (Character.isSpaceChar(buffer[i])) {\n+            if (Character.isSpaceChar(statBuffer[i])) {\n                 spaceIdx++;\n                 i++;\n                 continue;\n@@ -189,16 +301,16 @@ static void parseJiffiesInfoWithBuffer(String path, byte[] buffer) {\n                     int readIdx = i, window = 0;\n                     // seek next space\n                     // noinspection StatementWithEmptyBody\n-                    for (; i < statBytes && !Character.isSpaceChar(buffer[i]); i++, window++) ;\n-                    if ('(' == buffer[readIdx]) {\n+                    for (; i < statBytes && !Character.isSpaceChar(statBuffer[i]); i++, window++) ;\n+                    if ('(' == statBuffer[readIdx]) {\n                         readIdx++;\n                         window--;\n                     }\n-                    if (')' == buffer[readIdx + window - 1]) {\n+                    if (')' == statBuffer[readIdx + window - 1]) {\n                         window--;\n                     }\n                     if (window > 0) {\n-                        name = new String(buffer, readIdx, window);\n+                        stat.comm = new String(statBuffer, readIdx, window);\n                     }\n                     break;\n                 }\n@@ -207,36 +319,36 @@ static void parseJiffiesInfoWithBuffer(String path, byte[] buffer) {\n                     int readIdx = i, window = 0;\n                     // seek next space\n                     // noinspection StatementWithEmptyBody\n-                    for (; i < statBytes && !Character.isSpaceChar(buffer[i]); i++, window++) ;\n-                    String num = new String(buffer, readIdx, window);\n-                    utime = MatrixUtil.parseLong(num, 0);\n+                    for (; i < statBytes && !Character.isSpaceChar(statBuffer[i]); i++, window++) ;\n+                    String num = new String(statBuffer, readIdx, window);\n+                    stat.utime = MatrixUtil.parseLong(num, 0);\n                     break;\n                 }\n                 case 14: { // stime\n                     int readIdx = i, window = 0;\n                     // seek next space\n                     // noinspection StatementWithEmptyBody\n-                    for (; i < statBytes && !Character.isSpaceChar(buffer[i]); i++, window++) ;\n-                    String num = new String(buffer, readIdx, window);\n-                    stime = MatrixUtil.parseLong(num, 0);\n+                    for (; i < statBytes && !Character.isSpaceChar(statBuffer[i]); i++, window++) ;\n+                    String num = new String(statBuffer, readIdx, window);\n+                    stat.stime = MatrixUtil.parseLong(num, 0);\n                     break;\n                 }\n                 case 15: { // cutime\n                     int readIdx = i, window = 0;\n                     // seek next space\n                     // noinspection StatementWithEmptyBody\n-                    for (; i < statBytes && !Character.isSpaceChar(buffer[i]); i++, window++) ;\n-                    String num = new String(buffer, readIdx, window);\n-                    cutime = MatrixUtil.parseLong(num, 0);\n+                    for (; i < statBytes && !Character.isSpaceChar(statBuffer[i]); i++, window++) ;\n+                    String num = new String(statBuffer, readIdx, window);\n+                    stat.cutime = MatrixUtil.parseLong(num, 0);\n                     break;\n                 }\n                 case 16: { // cstime\n                     int readIdx = i, window = 0;\n                     // seek next space\n                     // noinspection StatementWithEmptyBody\n-                    for (; i < statBytes && !Character.isSpaceChar(buffer[i]); i++, window++) ;\n-                    String num = new String(buffer, readIdx, window);\n-                    cstime = MatrixUtil.parseLong(num, 0);\n+                    for (; i < statBytes && !Character.isSpaceChar(statBuffer[i]); i++, window++) ;\n+                    String num = new String(statBuffer, readIdx, window);\n+                    stat.cstime = MatrixUtil.parseLong(num, 0);\n                     break;\n                 }\n \n@@ -245,13 +357,14 @@ static void parseJiffiesInfoWithBuffer(String path, byte[] buffer) {\n             }\n         }\n \n-        Assert.assertNotNull(name);\n-        Assert.assertTrue(utime >= 0);\n-        Assert.assertTrue(stime >= 0);\n-        Assert.assertTrue(cutime >= 0);\n-        Assert.assertTrue(cstime >= 0);\n+        Assert.assertNotNull(stat.comm);\n+        Assert.assertTrue(stat.utime >= 0);\n+        Assert.assertTrue(stat.stime >= 0);\n+        Assert.assertTrue(stat.cutime >= 0);\n+        Assert.assertTrue(stat.cstime >= 0);\n \n-        long jiffies = utime + stime + cutime + cstime;\n+        long jiffies = stat.utime + stat.stime + stat.cutime + stat.cstime;\n         Assert.assertTrue(jiffies >= 0);\n+        return stat;\n     }\n }",
      "parent_sha": "29d599e80c09ff5aaf505e3d79803aab0cf53f2d"
    }
  },
  {
    "oid": "c13b9d76cb0057a631d4bf1669f3255665165612",
    "message": "disable isEglContextReleased",
    "date": "2022-11-01T09:35:12Z",
    "url": "https://github.com/Tencent/matrix/commit/c13b9d76cb0057a631d4bf1669f3255665165612",
    "details": {
      "sha": "8fb17fcf37e90764aa8e870417c0e0238685826d",
      "filename": "matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/statistics/resource/ResRecordManager.java",
      "status": "modified",
      "additions": 19,
      "deletions": 18,
      "changes": 37,
      "blob_url": "https://github.com/Tencent/matrix/blob/c13b9d76cb0057a631d4bf1669f3255665165612/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FResRecordManager.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/c13b9d76cb0057a631d4bf1669f3255665165612/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FResRecordManager.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2Fstatistics%2Fresource%2FResRecordManager.java?ref=c13b9d76cb0057a631d4bf1669f3255665165612",
      "patch": "@@ -178,24 +178,25 @@ public void clear() {\n     }\n \n     public boolean isEglContextReleased(OpenGLInfo info) {\n-        synchronized (mReleaseContext) {\n-            long eglContextNativeHandle = info.getEglContextNativeHandle();\n-            if (0L == eglContextNativeHandle) {\n-                return true;\n-            }\n-\n-            for (long item : mReleaseContext) {\n-                if (item == eglContextNativeHandle) {\n-                    return true;\n-                }\n-            }\n-\n-            boolean alive = OpenGLHook.isEglContextAlive(info.getEglContextNativeHandle());\n-            if (!alive) {\n-                mReleaseContext.add(info.getEglContextNativeHandle());\n-            }\n-            return !alive;\n-        }\n+        return false;\n+//        synchronized (mReleaseContext) {\n+//            long eglContextNativeHandle = info.getEglContextNativeHandle();\n+//            if (0L == eglContextNativeHandle) {\n+//                return true;\n+//            }\n+//\n+//            for (long item : mReleaseContext) {\n+//                if (item == eglContextNativeHandle) {\n+//                    return true;\n+//                }\n+//            }\n+//\n+//            boolean alive = OpenGLHook.isEglContextAlive(info.getEglContextNativeHandle());\n+//            if (!alive) {\n+//                mReleaseContext.add(info.getEglContextNativeHandle());\n+//            }\n+//            return !alive;\n+//        }\n     }\n \n     public boolean isEglSurfaceReleased(OpenGLInfo info) {",
      "parent_sha": "324bbeb5fc42fcc193d697864da5261a1b6c3597"
    }
  },
  {
    "oid": "8c6930799b134ead1cabc73743e1af8b4cc05df0",
    "message": "protect rule",
    "date": "2018-12-26T11:16:55Z",
    "url": "https://github.com/Tencent/matrix/commit/8c6930799b134ead1cabc73743e1af8b4cc05df0",
    "details": {
      "sha": "39a450d61aebaeeae0fc96d7e7e6b64ebd03218c",
      "filename": "matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/job/ApkJob.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/Tencent/matrix/blob/8c6930799b134ead1cabc73743e1af8b4cc05df0/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Fjob%2FApkJob.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/8c6930799b134ead1cabc73743e1af8b4cc05df0/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Fjob%2FApkJob.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Fjob%2FApkJob.java?ref=8c6930799b134ead1cabc73743e1af8b4cc05df0",
      "patch": "@@ -464,7 +464,12 @@ public void run() throws  Exception {\n             ApkTask unzipTask = TaskFactory.factory(TaskFactory.TASK_TYPE_UNZIP, jobConfig, new HashMap<String, String>());\n             preTasks.add(unzipTask);\n             for (String format : jobConfig.getOutputFormatList()) {\n-                jobResults.add(JobResultFactory.factory(format, jobConfig));\n+                JobResult result = JobResultFactory.factory(format, jobConfig);\n+                if (result != null) {\n+                    jobResults.add(result);\n+                } else {\n+                    Log.w(TAG, \"Unknown output format name '%s' !\", format);\n+                }\n             }\n             execute();\n         } else {",
      "parent_sha": "096c5401602c0485aa14fdd70f3182209a9ee707"
    }
  },
  {
    "oid": "ad9fe7e35ac355039020d3f3ed23a898b7f5cbc9",
    "message": "UnusedResourcesTask find resource cycle",
    "date": "2019-01-08T03:42:21Z",
    "url": "https://github.com/Tencent/matrix/commit/ad9fe7e35ac355039020d3f3ed23a898b7f5cbc9",
    "details": {
      "sha": "a4d1daa80f82646c76c5c7683e07a8501f816ec4",
      "filename": "matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnusedResourcesTask.java",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/Tencent/matrix/blob/ad9fe7e35ac355039020d3f3ed23a898b7f5cbc9/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Ftask%2FUnusedResourcesTask.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/ad9fe7e35ac355039020d3f3ed23a898b7f5cbc9/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Ftask%2FUnusedResourcesTask.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Ftask%2FUnusedResourcesTask.java?ref=ad9fe7e35ac355039020d3f3ed23a898b7f5cbc9",
      "patch": "@@ -51,6 +51,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.Stack;\n+\n import brut.androlib.AndrolibException;\n \n \n@@ -75,6 +77,7 @@ public class UnusedResourcesTask extends ApkTask {\n     private final Set<String> unusedResSet;\n     private final Set<String> ignoreSet;\n     private final Map<String, Set<String>> nonValueReferences;\n+    private Stack<String> visitPath;\n \n     public UnusedResourcesTask(JobConfig config, Map<String, String> params) {\n         super(config, params);\n@@ -88,6 +91,7 @@ public UnusedResourcesTask(JobConfig config, Map<String, String> params) {\n         resourceRefSet = new HashSet<>();\n         unusedResSet = new HashSet<>();\n         nonValueReferences = new HashMap<>();\n+        visitPath = new Stack<String>();\n     }\n \n     @Override\n@@ -394,13 +398,20 @@ private boolean ignoreResource(String name) {\n         return false;\n     }\n \n-    private void readChildReference(String resource) {\n+    private void readChildReference(String resource) throws IllegalStateException {\n         if (nonValueReferences.containsKey(resource)) {\n+            visitPath.push(resource);\n             Set<String> childReference = nonValueReferences.get(resource);\n             unusedResSet.removeAll(childReference);\n             for (String reference : childReference) {\n-                readChildReference(reference);\n+                if (!visitPath.contains(reference)) {\n+                    readChildReference(reference);\n+                } else {\n+                    visitPath.push(reference);\n+                    throw new IllegalStateException(\"Found resource cycle! \" + visitPath.toString());\n+                }\n             }\n+            visitPath.pop();\n         }\n     }\n ",
      "parent_sha": "8840625e096efd84707c18641b73a64f4b181e64"
    }
  },
  {
    "oid": "e995aaeaf540927daff916b7318aed2b3db3b16a",
    "message": "fix FrameTracer doFrame bug\n\n# Conflicts:\n#\tmatrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/FrameTracer.java",
    "date": "2019-02-20T12:12:47Z",
    "url": "https://github.com/Tencent/matrix/commit/e995aaeaf540927daff916b7318aed2b3db3b16a",
    "details": {
      "sha": "b091441fdec32f691279a83e0afc02a055b36cc8",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/FrameTracer.java",
      "status": "modified",
      "additions": 5,
      "deletions": 13,
      "changes": 18,
      "blob_url": "https://github.com/Tencent/matrix/blob/e995aaeaf540927daff916b7318aed2b3db3b16a/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FFrameTracer.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/e995aaeaf540927daff916b7318aed2b3db3b16a/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FFrameTracer.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FFrameTracer.java?ref=e995aaeaf540927daff916b7318aed2b3db3b16a",
      "patch": "@@ -53,19 +53,11 @@ public void doFrame(final long lastFrameNanos, final long frameNanos) {\n         }\n         isDrawing = false;\n         final int droppedCount = (int) ((frameNanos - lastFrameNanos) / REFRESH_RATE_MS);\n-        if (droppedCount > 1) {\n-            for (final IDoFrameListener listener : mDoFrameListenerList) {\n-                listener.doFrameSync(lastFrameNanos, frameNanos, getScene(), droppedCount);\n-                if (null != listener.getHandler()) {\n-                    listener.getHandler().post(new Runnable() {\n-                        @Override\n-                        public void run() {\n-                            listener.getHandler().post(new AsyncDoFrameTask(listener,\n-                                    lastFrameNanos, frameNanos, getScene(), droppedCount));\n-                        }\n-                    });\n-\n-                }\n+        for (final IDoFrameListener listener : mDoFrameListenerList) {\n+            listener.doFrameSync(lastFrameNanos, frameNanos, getScene(), droppedCount);\n+            if (null != listener.getHandler()) {\n+                listener.getHandler().post(new AsyncDoFrameTask(listener,\n+                        lastFrameNanos, frameNanos, getScene(), droppedCount));\n             }\n         }\n     }",
      "parent_sha": "2736a2e29abb815f21ec1fd6afc3be9c45b4508f"
    }
  },
  {
    "oid": "82e15efb10969e9d68c0a266f3da3e67a99bc211",
    "message": "fix ignoreResources",
    "date": "2019-12-05T12:30:26Z",
    "url": "https://github.com/Tencent/matrix/commit/82e15efb10969e9d68c0a266f3da3e67a99bc211",
    "details": {
      "sha": "46fb778fc0eda42215333012542b118810a703bb",
      "filename": "matrix/matrix-android/matrix-apk-canary/src/main/java/com/tencent/matrix/apk/model/task/UnusedResourcesTask.java",
      "status": "modified",
      "additions": 4,
      "deletions": 12,
      "changes": 16,
      "blob_url": "https://github.com/Tencent/matrix/blob/82e15efb10969e9d68c0a266f3da3e67a99bc211/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Ftask%2FUnusedResourcesTask.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/82e15efb10969e9d68c0a266f3da3e67a99bc211/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Ftask%2FUnusedResourcesTask.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-apk-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fapk%2Fmodel%2Ftask%2FUnusedResourcesTask.java?ref=82e15efb10969e9d68c0a266f3da3e67a99bc211",
      "patch": "@@ -405,16 +405,15 @@ private void decodeResources() throws IOException, InterruptedException, Androli\n             }\n         }\n \n-        for (String resource : resourceRefSet) {\n-            readChildReference(resource);\n-        }\n-\n         for (String resource : unusedResSet) {\n             if (ignoreResource(resource)) {\n                 resourceRefSet.add(resource);\n-                ignoreChildResource(resource);\n             }\n         }\n+\n+        for (String resource : resourceRefSet) {\n+            readChildReference(resource);\n+        }\n     }\n \n     private boolean ignoreResource(String name) {\n@@ -443,13 +442,6 @@ private void readChildReference(String resource) throws IllegalStateException {\n         }\n     }\n \n-    private void ignoreChildResource(String resource) {\n-        if (nonValueReferences.containsKey(resource)) {\n-            Set<String> childReference = nonValueReferences.get(resource);\n-            resourceRefSet.addAll(childReference);\n-        }\n-    }\n-\n \n     @Override\n     public TaskResult call() throws TaskExecuteException {",
      "parent_sha": "d1d8c9e401aba49e9f772f6973dbc1ac638295ca"
    }
  },
  {
    "oid": "a7d67ce7cb011704e89a4712cf29819ebfc04197",
    "message": "Append commit",
    "date": "2021-11-03T11:55:43Z",
    "url": "https://github.com/Tencent/matrix/commit/a7d67ce7cb011704e89a4712cf29819ebfc04197",
    "details": {
      "sha": "1851b90f5f6b962703dd4467dc3bc01f60286fbe",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/CompositeMonitors.java",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/Tencent/matrix/blob/a7d67ce7cb011704e89a4712cf29819ebfc04197/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2Ffeature%2FCompositeMonitors.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/a7d67ce7cb011704e89a4712cf29819ebfc04197/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2Ffeature%2FCompositeMonitors.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2Ffeature%2FCompositeMonitors.java?ref=a7d67ce7cb011704e89a4712cf29819ebfc04197",
      "patch": "@@ -396,10 +396,14 @@ public Number call() {\n \n     @Override\n     public String toString() {\n-        return \"CompositeMonitors{\" +\n-                \"Metrics=\" + mBgnSnapshots +\n-                \", BgnSnapshots=\" + mMetrics +\n-                \", Deltas=\" + mDeltas +\n+        return \"CompositeMonitors{\" + \"\\n\" +\n+                \"Metrics=\" + mMetrics + \"\\n\" +\n+                \", BgnSnapshots=\" + mBgnSnapshots + \"\\n\" +\n+                \", Deltas=\" + mDeltas + \"\\n\" +\n+                \", SampleRegs=\" + mSampleRegs + \"\\n\" +\n+                \", Samplers=\" + mSamplers + \"\\n\" +\n+                \", SampleResults=\" + mSampleResults + \"\\n\" +\n+                \", AppStats=\" + mAppStats + \"\\n\" +\n                 '}';\n     }\n }",
      "parent_sha": "73fc5e9e36f17462f906b2010faa88188cbaa879"
    }
  },
  {
    "oid": "f2fc504ee8a261d1364394aa4d1c01f72e9dccd2",
    "message": "Update battery util with broadcast regs protect",
    "date": "2020-12-21T06:28:47Z",
    "url": "https://github.com/Tencent/matrix/commit/f2fc504ee8a261d1364394aa4d1c01f72e9dccd2",
    "details": {
      "sha": "043f5a1f0b4cb4a533e438ec6cbc6c732f700dce",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/utils/BatteryCanaryUtil.java",
      "status": "modified",
      "additions": 15,
      "deletions": 7,
      "changes": 22,
      "blob_url": "https://github.com/Tencent/matrix/blob/f2fc504ee8a261d1364394aa4d1c01f72e9dccd2/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FBatteryCanaryUtil.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/f2fc504ee8a261d1364394aa4d1c01f72e9dccd2/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FBatteryCanaryUtil.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FBatteryCanaryUtil.java?ref=f2fc504ee8a261d1364394aa4d1c01f72e9dccd2",
      "patch": "@@ -195,9 +195,13 @@ public static String cat(String path) {\n     }\n \n     public static int getBatteryTemperature(Context context) {\n-        Intent batIntent = context.registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));\n-        if (batIntent == null) return 0;\n-        return batIntent.getIntExtra(BatteryManager.EXTRA_TEMPERATURE, 0);\n+        try {\n+            Intent batIntent = context.registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));\n+            if (batIntent == null) return 0;\n+            return batIntent.getIntExtra(BatteryManager.EXTRA_TEMPERATURE, 0);\n+        } catch (Throwable ignored) {\n+            return 0;\n+        }\n     }\n \n     public static int getAppStat(Context context, boolean isForeground) {\n@@ -230,10 +234,14 @@ public static boolean isDeviceCharging(Context context) {\n                 return myBatteryManager.isCharging();\n             }\n         }\n-        Intent batIntent = context.registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));\n-        if (batIntent == null) return false;\n-        int plugged = batIntent.getIntExtra(BatteryManager.EXTRA_PLUGGED, -1);\n-        return plugged == BatteryManager.BATTERY_PLUGGED_AC || plugged == BatteryManager.BATTERY_PLUGGED_USB || plugged == BatteryManager.BATTERY_PLUGGED_WIRELESS;\n+        try {\n+            Intent batIntent = context.registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));\n+            if (batIntent == null) return false;\n+            int plugged = batIntent.getIntExtra(BatteryManager.EXTRA_PLUGGED, -1);\n+            return plugged == BatteryManager.BATTERY_PLUGGED_AC || plugged == BatteryManager.BATTERY_PLUGGED_USB || plugged == BatteryManager.BATTERY_PLUGGED_WIRELESS;\n+        } catch (Throwable ignored) {\n+            return false;\n+        }\n     }\n \n     public static boolean isDeviceScreenOn(Context context) {",
      "parent_sha": "c2a464c7b2585bad8a56ea22debb76ef52da21af"
    }
  },
  {
    "oid": "cfe09aad3e3cc6c10fd9c85e0e80f4c4666149b8",
    "message": "Fix thread watch bug",
    "date": "2021-04-06T07:40:48Z",
    "url": "https://github.com/Tencent/matrix/commit/cfe09aad3e3cc6c10fd9c85e0e80f4c4666149b8",
    "details": {
      "sha": "7c0fa9c4e82116370bb895b966ba120aac92d0d2",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/BatteryMonitorCallback.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/Tencent/matrix/blob/cfe09aad3e3cc6c10fd9c85e0e80f4c4666149b8/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2FBatteryMonitorCallback.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/cfe09aad3e3cc6c10fd9c85e0e80f4c4666149b8/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2FBatteryMonitorCallback.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2FBatteryMonitorCallback.java?ref=cfe09aad3e3cc6c10fd9c85e0e80f4c4666149b8",
      "patch": "@@ -234,8 +234,9 @@ public void onWatchingThreads(ListEntry<? extends ThreadJiffiesEntry> threadJiff\n             }\n \n             // Dump thread stacks if need\n+            printer.createSection(\"stacks\");\n             boolean dumpStacks = getMonitor().getConfig().isAggressiveMode;\n-            if (!dumpStacks && !getMonitor().getConfig().threadWatchList.isEmpty()) {\n+            if (!dumpStacks || !getMonitor().getConfig().threadWatchList.isEmpty()) {\n                 for (String item : getMonitor().getConfig().threadWatchList) {\n                     for (ThreadJiffiesEntry threadJiffies : threadJiffiesList.getList()) {\n                         if (item.equalsIgnoreCase(threadJiffies.name) || threadJiffies.name.startsWith(item)) {\n@@ -246,9 +247,7 @@ public void onWatchingThreads(ListEntry<? extends ThreadJiffiesEntry> threadJiff\n                 }\n             }\n             if (dumpStacks) {\n-                printer.createSection(\"stacks\");\n                 Map<Thread, StackTraceElement[]> stackTraces = Thread.getAllStackTraces();\n-                //noinspection ConstantConditions\n                 if (stackTraces != null) {\n                     for (Map.Entry<Thread, StackTraceElement[]> entry : stackTraces.entrySet()) {\n                         String threadName = entry.getKey().getName();\n@@ -266,6 +265,8 @@ public void onWatchingThreads(ListEntry<? extends ThreadJiffiesEntry> threadJiff\n                         }\n                     }\n                 }\n+            } else {\n+                printer.append(\"|   disabled\").append(\"\\n\");\n             }\n \n             printer.writeEnding();",
      "parent_sha": "385ac08739208200b4e7edc1c79845deab638a67"
    }
  },
  {
    "oid": "78695656f482f4bd902f82ce438215119a35e8eb",
    "message": "fix: Fix mute mode in manual dump processor.",
    "date": "2021-12-03T10:14:42Z",
    "url": "https://github.com/Tencent/matrix/commit/78695656f482f4bd902f82ce438215119a35e8eb",
    "details": {
      "sha": "ae1efb5a54cc14f5916f9fb982ce88c10e182e25",
      "filename": "matrix/matrix-android/matrix-resource-canary/matrix-resource-canary-android/src/main/java/com/tencent/matrix/resource/processor/ManualDumpProcessor.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/Tencent/matrix/blob/78695656f482f4bd902f82ce438215119a35e8eb/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-android%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2Fprocessor%2FManualDumpProcessor.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/78695656f482f4bd902f82ce438215119a35e8eb/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-android%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2Fprocessor%2FManualDumpProcessor.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-resource-canary%2Fmatrix-resource-canary-android%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fresource%2Fprocessor%2FManualDumpProcessor.java?ref=78695656f482f4bd902f82ce438215119a35e8eb",
      "patch": "@@ -77,8 +77,12 @@ public boolean process(final DestroyedActivityInfo destroyedActivityInfo) {\n             @Override\n             public void onDumpComplete(@Nullable ManualDumpData data) {\n                 if (data != null) {\n-                    MatrixLog.i(TAG, \"shown notification!!!3\");\n-                    publishResult(destroyedActivityInfo, data);\n+                    if (!isMuted) {\n+                        MatrixLog.i(TAG, \"shown notification!!!3\");\n+                        publishResult(destroyedActivityInfo, data);\n+                    } else {\n+                        MatrixLog.i(TAG, \"mute mode, notification will not be shown.\");\n+                    }\n                 }\n             }\n         });",
      "parent_sha": "f5f26c2e73d63b959dc4f8ea81b1ab50cb5ebdc6"
    }
  },
  {
    "oid": "a0749a70fa08601c40a6bb85def21484cf3365b3",
    "message": "verify TOTAL_DURATION of frame metrics.",
    "date": "2023-02-10T02:51:01Z",
    "url": "https://github.com/Tencent/matrix/commit/a0749a70fa08601c40a6bb85def21484cf3365b3",
    "details": {
      "sha": "6bcd185b0af3238ff0260e81aad07745b702850d",
      "filename": "matrix/matrix-android/matrix-trace-canary/src/main/java/com/tencent/matrix/trace/tracer/FrameTracer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/Tencent/matrix/blob/a0749a70fa08601c40a6bb85def21484cf3365b3/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FFrameTracer.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/a0749a70fa08601c40a6bb85def21484cf3365b3/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FFrameTracer.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-trace-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Ftrace%2Ftracer%2FFrameTracer.java?ref=a0749a70fa08601c40a6bb85def21484cf3365b3",
      "patch": "@@ -348,10 +348,6 @@ public static String stringify(long[] durations) {\n             for (FrameDuration item : values()) {\n                 sb.append(item.name()).append('=').append(durations[item.ordinal()]).append(\"; \");\n             }\n-\n-            if (FrameTracer.sdkInt >= Build.VERSION_CODES.S) {\n-                sb.append(\"gpu_duration=\").append(durations[GPU_DURATION.ordinal()]).append(\"; \");\n-            }\n             sb.setLength(sb.length() - 2);    // remove the last \"; \"\n             sb.append(\"}\");\n \n@@ -541,7 +537,7 @@ private void updateRefreshRate() {\n             public void onFrameMetricsAvailable(Window window, FrameMetrics frameMetrics, int dropCountSinceLastInvocation) {\n                 if (isForeground()) {\n                     // skip not available metrics.\n-                    for (int i = FrameDuration.UNKNOWN_DELAY_DURATION.ordinal(); i < FrameDuration.TOTAL_DURATION.ordinal(); i++) {\n+                    for (int i = FrameDuration.UNKNOWN_DELAY_DURATION.ordinal(); i <= FrameDuration.TOTAL_DURATION.ordinal(); i++) {\n                         long v = frameMetrics.getMetric(FrameDuration.indices[i]);\n                         if (v < 0 || v >= HALF_MAX) {\n                             // some devices will produce outliers, especially the Honor series, eg: NTH-AN00, ANY-AN00, etc.",
      "parent_sha": "f4e9412ed9bfb88d3d0150a1bf7d110c6d3c4e18"
    }
  },
  {
    "oid": "7fd27217f943bb8aefa8ca6f9455b7d62d07ed4a",
    "message": "trim style",
    "date": "2021-08-13T06:21:22Z",
    "url": "https://github.com/Tencent/matrix/commit/7fd27217f943bb8aefa8ca6f9455b7d62d07ed4a",
    "details": {
      "sha": "b94d105ff29c9135b9be23c6b9ae415058131a38",
      "filename": "matrix/matrix-android/matrix-opengl-leak/src/main/java/com/tencent/matrix/openglleak/OpenglLeakPlugin.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/7fd27217f943bb8aefa8ca6f9455b7d62d07ed4a/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2FOpenglLeakPlugin.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/7fd27217f943bb8aefa8ca6f9455b7d62d07ed4a/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2FOpenglLeakPlugin.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-opengl-leak%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fopenglleak%2FOpenglLeakPlugin.java?ref=7fd27217f943bb8aefa8ca6f9455b7d62d07ed4a",
      "patch": "@@ -33,7 +33,7 @@ public OpenglLeakPlugin(Context c) {\n     }\n \n     public void registerReportCallback(OpenglReportCallback callback) {\n-        if(sCallback != null) {\n+        if (sCallback != null) {\n             MatrixLog.e(TAG, \"OpenglReportCallback register again, May be overwrite !!!\");\n         }\n         sCallback = callback;",
      "parent_sha": "61d1bd3168fa5dc17e509a27403307cf688f114d"
    }
  },
  {
    "oid": "10effbeed29754580105343601298c45f60ba6fa",
    "message": "Append commit",
    "date": "2020-12-08T13:46:32Z",
    "url": "https://github.com/Tencent/matrix/commit/10effbeed29754580105343601298c45f60ba6fa",
    "details": {
      "sha": "b0372d9a6aaf664c4e75294e93b21ca5cc6bbb86",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/monitor/feature/DeviceStatMonitorFeature.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/10effbeed29754580105343601298c45f60ba6fa/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2Ffeature%2FDeviceStatMonitorFeature.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/10effbeed29754580105343601298c45f60ba6fa/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2Ffeature%2FDeviceStatMonitorFeature.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Fmonitor%2Ffeature%2FDeviceStatMonitorFeature.java?ref=10effbeed29754580105343601298c45f60ba6fa",
      "patch": "@@ -69,7 +69,7 @@ public BatteryTmpSnapshot currentBatteryTemperature(Context context) {\n     }\n \n     @Nullable\n-    protected RadioStatSnapshot currentRadioSnapshot(Context context) {\n+    public RadioStatSnapshot currentRadioSnapshot(Context context) {\n         RadioStatUtil.RadioStat stat = RadioStatUtil.getCurrentStat(context);\n         if (stat == null) {\n             return null;",
      "parent_sha": "809cc4b4bda3405aa28a4a7b1574e0f5d0c9947d"
    }
  },
  {
    "oid": "1f4c6f781e91f2bb361403f7843c999129b53aa5",
    "message": "bugfix\uff1a ERROR Key",
    "date": "2019-11-06T09:16:36Z",
    "url": "https://github.com/Tencent/matrix/commit/1f4c6f781e91f2bb361403f7843c999129b53aa5",
    "details": {
      "sha": "91d087434855b54d783dabc03f49c0a2618de056",
      "filename": "matrix/matrix-android/matrix-io-canary/src/main/java/com/tencent/matrix/iocanary/config/IOConfig.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/1f4c6f781e91f2bb361403f7843c999129b53aa5/matrix%2Fmatrix-android%2Fmatrix-io-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fiocanary%2Fconfig%2FIOConfig.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/1f4c6f781e91f2bb361403f7843c999129b53aa5/matrix%2Fmatrix-android%2Fmatrix-io-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fiocanary%2Fconfig%2FIOConfig.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-io-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fiocanary%2Fconfig%2FIOConfig.java?ref=1f4c6f781e91f2bb361403f7843c999129b53aa5",
      "patch": "@@ -80,7 +80,7 @@ public int getFileMainThreadTriggerThreshold() {\n     }\n \n     public int getFileBufferSmallThreshold() {\n-        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_io_small_buffer_operator_times.name(), DEFAULT_FILE_BUFFER_SMALL_THRESHOLD);\n+        return mDynamicConfig.get(IDynamicConfig.ExptEnum.clicfg_matrix_io_small_buffer_threshold.name(), DEFAULT_FILE_BUFFER_SMALL_THRESHOLD);\n     }\n \n     public int getFilBufferSmallOpTimes() {",
      "parent_sha": "5cd5426427d19f37334d971f15326a81a96c4b39"
    }
  },
  {
    "oid": "f63123e8ba22c81f91226a54047e0a0797433f69",
    "message": "fix crash npe",
    "date": "2019-05-07T04:00:14Z",
    "url": "https://github.com/Tencent/matrix/commit/f63123e8ba22c81f91226a54047e0a0797433f69",
    "details": {
      "sha": "447a16bb728d167fd8de8202f308e405dfaa5e34",
      "filename": "matrix/matrix-android/matrix-android-lib/src/main/java/com/tencent/matrix/AppActiveMatrixDelegate.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/matrix/blob/f63123e8ba22c81f91226a54047e0a0797433f69/matrix%2Fmatrix-android%2Fmatrix-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2FAppActiveMatrixDelegate.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/f63123e8ba22c81f91226a54047e0a0797433f69/matrix%2Fmatrix-android%2Fmatrix-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2FAppActiveMatrixDelegate.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2FAppActiveMatrixDelegate.java?ref=f63123e8ba22c81f91226a54047e0a0797433f69",
      "patch": "@@ -177,7 +177,7 @@ private void updateScene(Activity activity) {\n     }\n \n     private void updateScene(String currentFragmentName) {\n-        StringBuilder ss = new StringBuilder(currentActivityName);\n+        StringBuilder ss = new StringBuilder(currentActivityName == null ? \"?\" : currentActivityName);\n         if (!TextUtils.isEmpty(currentFragmentName)) {\n             ss.append(\"#\").append(currentFragmentName);\n         }",
      "parent_sha": "2380a5d7c9531d6a55c12fc94258bfd678323fee"
    }
  },
  {
    "oid": "1a15578930b9d81fb724f407b2bb609329afa338",
    "message": "Fix battery get bps compat issue",
    "date": "2022-12-02T08:43:38Z",
    "url": "https://github.com/Tencent/matrix/commit/1a15578930b9d81fb724f407b2bb609329afa338",
    "details": {
      "sha": "58499fc7f266c664595d1743e8ea04b054da42d2",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/utils/RadioStatUtil.java",
      "status": "modified",
      "additions": 14,
      "deletions": 9,
      "changes": 23,
      "blob_url": "https://github.com/Tencent/matrix/blob/1a15578930b9d81fb724f407b2bb609329afa338/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FRadioStatUtil.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/1a15578930b9d81fb724f407b2bb609329afa338/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FRadioStatUtil.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FRadioStatUtil.java?ref=1a15578930b9d81fb724f407b2bb609329afa338",
      "patch": "@@ -97,15 +97,20 @@ public static RadioBps getCurrentBps(Context context) {\n         if (android.os.Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {\n             return null;\n         }\n-        RadioBps stat = new RadioBps();\n-        Pair<Long, Long> wifi = getCurrentBps(context, \"WIFI\");\n-        stat.wifiRxBps = wifi.first == null ? 0 : wifi.first;\n-        stat.wifiTxBps = wifi.second == null ? 0 : wifi.second;\n-\n-        Pair<Long, Long> mobile = getCurrentBps(context, \"MOBILE\");\n-        stat.mobileRxBps = mobile.first == null ? 0 : mobile.first;\n-        stat.mobileTxBps = mobile.second == null ? 0 : mobile.second;\n-        return stat;\n+        try {\n+            RadioBps stat = new RadioBps();\n+            Pair<Long, Long> wifi = getCurrentBps(context, \"WIFI\");\n+            stat.wifiRxBps = wifi.first == null ? 0 : wifi.first;\n+            stat.wifiTxBps = wifi.second == null ? 0 : wifi.second;\n+\n+            Pair<Long, Long> mobile = getCurrentBps(context, \"MOBILE\");\n+            stat.mobileRxBps = mobile.first == null ? 0 : mobile.first;\n+            stat.mobileTxBps = mobile.second == null ? 0 : mobile.second;\n+            return stat;\n+        } catch (Exception e) {\n+            MatrixLog.w(TAG, \"getBps err: \" + e.getMessage());\n+            return null;\n+        }\n     }\n \n     @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)",
      "parent_sha": "52fc2acb3e412da0799901b1546d8bd608130c0b"
    }
  },
  {
    "oid": "7ad65c379004610320ea2b3f0ecc3a1dfb13dafc",
    "message": "Fix pro stat util bytes to string bug",
    "date": "2021-01-13T07:19:03Z",
    "url": "https://github.com/Tencent/matrix/commit/7ad65c379004610320ea2b3f0ecc3a1dfb13dafc",
    "details": {
      "sha": "f98e41c5ad10a4bb35e8786fe8e8fb34e01e0e3a",
      "filename": "matrix/matrix-android/matrix-battery-canary/src/main/java/com/tencent/matrix/batterycanary/utils/ProcStatUtil.java",
      "status": "modified",
      "additions": 14,
      "deletions": 5,
      "changes": 19,
      "blob_url": "https://github.com/Tencent/matrix/blob/7ad65c379004610320ea2b3f0ecc3a1dfb13dafc/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FProcStatUtil.java",
      "raw_url": "https://github.com/Tencent/matrix/raw/7ad65c379004610320ea2b3f0ecc3a1dfb13dafc/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FProcStatUtil.java",
      "contents_url": "https://api.github.com/repos/Tencent/matrix/contents/matrix%2Fmatrix-android%2Fmatrix-battery-canary%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Fmatrix%2Fbatterycanary%2Futils%2FProcStatUtil.java?ref=7ad65c379004610320ea2b3f0ecc3a1dfb13dafc",
      "patch": "@@ -11,6 +11,9 @@\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.StandardCharsets;\n \n /**\n  * see {@linkplain com.android.internal.os.ProcessCpuTracker}\n@@ -158,7 +161,7 @@ static ProcStat parseWithBuffer(byte[] statBuffer) {\n                         window--;\n                     }\n                     if (window > 0) {\n-                        stat.comm = new String(statBuffer, readIdx, window);\n+                        stat.comm = safeBytesToString(statBuffer, readIdx, window);\n                     }\n                     spaceIdx = 2;\n                     break;\n@@ -170,7 +173,7 @@ static ProcStat parseWithBuffer(byte[] statBuffer) {\n                     // noinspection StatementWithEmptyBody\n                     for (; i < statBytes && !Character.isSpaceChar(statBuffer[i]); i++, window++)\n                         ;\n-                    String num = new String(statBuffer, readIdx, window);\n+                    String num = safeBytesToString(statBuffer, readIdx, window);\n                     stat.utime = MatrixUtil.parseLong(num, 0);\n                     break;\n                 }\n@@ -180,7 +183,7 @@ static ProcStat parseWithBuffer(byte[] statBuffer) {\n                     // noinspection StatementWithEmptyBody\n                     for (; i < statBytes && !Character.isSpaceChar(statBuffer[i]); i++, window++)\n                         ;\n-                    String num = new String(statBuffer, readIdx, window);\n+                    String num = safeBytesToString(statBuffer, readIdx, window);\n                     stat.stime = MatrixUtil.parseLong(num, 0);\n                     break;\n                 }\n@@ -190,7 +193,7 @@ static ProcStat parseWithBuffer(byte[] statBuffer) {\n                     // noinspection StatementWithEmptyBody\n                     for (; i < statBytes && !Character.isSpaceChar(statBuffer[i]); i++, window++)\n                         ;\n-                    String num = new String(statBuffer, readIdx, window);\n+                    String num = safeBytesToString(statBuffer, readIdx, window);\n                     stat.cutime = MatrixUtil.parseLong(num, 0);\n                     break;\n                 }\n@@ -200,7 +203,7 @@ static ProcStat parseWithBuffer(byte[] statBuffer) {\n                     // noinspection StatementWithEmptyBody\n                     for (; i < statBytes && !Character.isSpaceChar(statBuffer[i]); i++, window++)\n                         ;\n-                    String num = new String(statBuffer, readIdx, window);\n+                    String num = safeBytesToString(statBuffer, readIdx, window);\n                     stat.cstime = MatrixUtil.parseLong(num, 0);\n                     break;\n                 }\n@@ -233,6 +236,12 @@ static ProcStat parseWithSplits(String cat) {\n         return stat;\n     }\n \n+    @VisibleForTesting\n+    static String safeBytesToString(byte[] buffer, int offset, int length) {\n+        CharBuffer charBuffer = StandardCharsets.UTF_8.decode(ByteBuffer.wrap(buffer, offset, length));\n+        return String.valueOf(charBuffer.array(), 0, charBuffer.limit());\n+    }\n+\n     @SuppressWarnings(\"SpellCheckingInspection\")\n     public static class ProcStat {\n         public String comm = \"\";",
      "parent_sha": "691c46f1d474167ad46e45f9f358a1058db1d645"
    }
  }
]