[
  {
    "oid": "abe58452ec6ff24f869f02fdd9a63d4aa65a1209",
    "message": "Use a software layer instead of no layer\n\n#260",
    "date": "2017-05-07T23:08:01Z",
    "url": "https://github.com/airbnb/lottie-android/commit/abe58452ec6ff24f869f02fdd9a63d4aa65a1209",
    "details": {
      "sha": "6759e3109475a6e439c3ce746c953019622aaacb",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/abe58452ec6ff24f869f02fdd9a63d4aa65a1209/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/abe58452ec6ff24f869f02fdd9a63d4aa65a1209/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java?ref=abe58452ec6ff24f869f02fdd9a63d4aa65a1209",
      "patch": "@@ -119,7 +119,6 @@ private void init(@Nullable AttributeSet attrs) {\n           R.styleable.LottieAnimationView_lottie_colorFilter, Color.TRANSPARENT)));\n     }\n     ta.recycle();\n-    setLayerType(LAYER_TYPE_SOFTWARE, null);\n \n     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n     float systemAnimationScale = Settings.Global.getFloat(getContext().getContentResolver(),\n@@ -128,6 +127,8 @@ private void init(@Nullable AttributeSet attrs) {\n         lottieDrawable.systemAnimationsAreDisabled();\n       }\n     }\n+\n+    enableOrDisableHardwareLayer();\n   }\n \n   @Override public void setImageResource(int resId) {\n@@ -523,7 +524,7 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n \n   private void enableOrDisableHardwareLayer() {\n     boolean useHardwareLayer = this.useHardwareLayer && lottieDrawable.isAnimating();\n-    setLayerType(useHardwareLayer ? LAYER_TYPE_HARDWARE : LAYER_TYPE_NONE, null);\n+    setLayerType(useHardwareLayer ? LAYER_TYPE_HARDWARE : LAYER_TYPE_SOFTWARE, null);\n   }\n \n   private static class SavedState extends BaseSavedState {",
      "parent_sha": "404653c47efa5effdbbc75154048aeaf06aa7658"
    }
  },
  {
    "oid": "7340d68dd808bc1c940be18af30668df8826a283",
    "message": "Fix image scaling when the display scale changes (#2475)",
    "date": "2024-03-04T00:17:06Z",
    "url": "https://github.com/airbnb/lottie-android/commit/7340d68dd808bc1c940be18af30668df8826a283",
    "details": {
      "sha": "a03e392101d0203ec6b32a64129142e5b1f178a0",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieComposition.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/7340d68dd808bc1c940be18af30668df8826a283/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieComposition.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/7340d68dd808bc1c940be18af30668df8826a283/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieComposition.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieComposition.java?ref=7340d68dd808bc1c940be18af30668df8826a283",
      "patch": "@@ -219,13 +219,13 @@ public boolean hasImages() {\n   public Map<String, LottieImageAsset> getImages() {\n     float dpScale = Utils.dpScale();\n     if (dpScale != imagesDpScale) {\n-      imagesDpScale = dpScale;\n       Set<Map.Entry<String, LottieImageAsset>> entries = images.entrySet();\n \n       for (Map.Entry<String, LottieImageAsset> entry : entries) {\n         images.put(entry.getKey(), entry.getValue().copyWithScale(imagesDpScale / dpScale));\n       }\n     }\n+    imagesDpScale = dpScale;\n     return images;\n   }\n ",
      "parent_sha": "4530351f8bd394c6c2f66d04baefceb4f4a12400"
    }
  },
  {
    "oid": "d5f141dbbe6c7e1ab90e7ca94bb0b38af561fec5",
    "message": "Only update an animation when the animation value actually changes",
    "date": "2017-06-26T16:27:16Z",
    "url": "https://github.com/airbnb/lottie-android/commit/d5f141dbbe6c7e1ab90e7ca94bb0b38af561fec5",
    "details": {
      "sha": "1391c885a72854984179205e4ebc1d1e30413902",
      "filename": "lottie/src/main/java/com/airbnb/lottie/BaseKeyframeAnimation.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/d5f141dbbe6c7e1ab90e7ca94bb0b38af561fec5/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FBaseKeyframeAnimation.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/d5f141dbbe6c7e1ab90e7ca94bb0b38af561fec5/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FBaseKeyframeAnimation.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FBaseKeyframeAnimation.java?ref=d5f141dbbe6c7e1ab90e7ca94bb0b38af561fec5",
      "patch": "@@ -18,6 +18,7 @@ interface AnimationListener {\n   // This is not a Set because we don't want to create an iterator object on every setProgress.\n   final List<AnimationListener> listeners = new ArrayList<>();\n   private boolean isDiscrete = false;\n+  @Nullable private A previousValue;\n \n   private final List<? extends Keyframe<K>> keyframes;\n   private float progress = 0f;\n@@ -48,8 +49,12 @@ void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     }\n     this.progress = progress;\n \n-    for (int i = 0; i < listeners.size(); i++) {\n-      listeners.get(i).onValueChanged();\n+    A value = getValue();\n+    if (previousValue == null || !previousValue.equals(value)) {\n+      previousValue = value;\n+      for (int i = 0; i < listeners.size(); i++) {\n+        listeners.get(i).onValueChanged();\n+      }\n     }\n   }\n ",
      "parent_sha": "b02e45856dcdb2ae0cee8daf288e1329dd1e43bb"
    }
  },
  {
    "oid": "fe412fa6c2a5612b4379538e9a9bea14bb415569",
    "message": "Fix LottieTask leak (#2465)\n\nI investigated leaks with `RememberLottieComposition` and `LottieAnimationView`, initially thinking that we might need to stop listening to LottieTask when a view or composition gets detached / removed.\r\n\r\nHowever, after looking at a heap dump, I realized that the LottieTask was actually finished. It had delivered its result so it didn't have any reason to stay in memory.\r\n\r\nThis moved my suspicion to SynchronousQueue as Android has had issues with queues & worker threads on several occasions (see code for details).\r\n\r\nAlso updated the cached thread pool to create threads named \"lottie\".\r\n\r\nLeaks:\r\n\r\n```\r\n\u252c\u2500\u2500\u2500\r\n\u2502 GC Root: Thread object\r\n\u2502\r\n\u251c\u2500 java.lang.Thread instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 6.2 MB in 181913 objects\r\n\u2502    Thread name: 'pool-88-thread-2'\r\n\u2502    \u2193 Thread<Java Local>\r\n\u2502            ~~~~~~~~~~~~\r\n\u251c\u2500 java.util.concurrent.SynchronousQueue$TransferStack$SNode instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 6.2 MB in 181909 objects\r\n\u2502    \u2193 SynchronousQueue$TransferStack$SNode.match\r\n\u2502                                           ~~~~~\r\n\u251c\u2500 java.util.concurrent.SynchronousQueue$TransferStack$SNode instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 6.2 MB in 181908 objects\r\n\u2502    \u2193 SynchronousQueue$TransferStack$SNode.item\r\n\u2502                                           ~~~~\r\n\u251c\u2500 com.airbnb.lottie.LottieTask$LottieFutureTask instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 6.2 MB in 181907 objects\r\n\u2502    \u2193 LottieTask$LottieFutureTask.this$0\r\n\u2502                                  ~~~~~~\r\n\u251c\u2500 com.airbnb.lottie.LottieTask instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 6.2 MB in 181905 objects\r\n\u2502    \u2193 LottieTask.failureListeners\r\n\u2502                 ~~~~~~~~~~~~~~~~\r\n\u251c\u2500 java.util.LinkedHashSet instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 113 B in 5 objects\r\n\u2502    \u2193 LinkedHashSet[element()]\r\n\u2502                   ~~~~~~~~~~~\r\n\u251c\u2500 com.airbnb.lottie.compose.RememberLottieCompositionKt$await$2$2 instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 12 B in 1 objects\r\n\u2502    Anonymous class implementing com.airbnb.lottie.LottieListener\r\n\u2502    \u2193 RememberLottieCompositionKt$await$2$2.$cont\r\n\u2502                                            ~~~~~\r\n\u251c\u2500 kotlinx.coroutines.CancellableContinuationImpl instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 6.2 MB in 181892 objects\r\n\u2502    \u2193 CancellableContinuationImpl.delegate\r\n\u2502                                  ~~~~~~~~\r\n\u251c\u2500 androidx.compose.ui.test.FrameDeferringContinuationInterceptor$FrameDeferredContinuation instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 6.2 MB in 181888 objects\r\n\u2502    \u2193 FrameDeferringContinuationInterceptor$FrameDeferredContinuation.continuation\r\n\u2502                                                                      ~~~~~~~~~~~~\r\n\u251c\u2500 androidx.compose.ui.test.ApplyingContinuationInterceptor$SendApplyContinuation instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 6.2 MB in 181887 objects\r\n\u2502    \u2193 ApplyingContinuationInterceptor$SendApplyContinuation.continuation\r\n\u2502                                                            ~~~~~~~~~~~~\r\n\u251c\u2500 com.airbnb.lottie.compose.RememberLottieCompositionKt$lottieComposition$1 instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 6.2 MB in 181886 objects\r\n\u2502    Anonymous subclass of kotlin.coroutines.jvm.internal.ContinuationImpl\r\n\u2502    \u2193 BaseContinuationImpl.completion\r\n\u2502                           ~~~~~~~~~~\r\n\u251c\u2500 com.airbnb.lottie.compose.RememberLottieCompositionKt$rememberLottieComposition$3 instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 6.2 MB in 181885 objects\r\n\u2502    Anonymous subclass of kotlin.coroutines.jvm.internal.SuspendLambda\r\n\u2502    $context instance of com.squareup.ui.market.core.theme.MarketContextWrapper, wrapping activity com.squareup.ui.main.MainActivity with mDestroyed = true\r\n\u2502    \u2193 RememberLottieCompositionKt$rememberLottieComposition$3.$context\r\n\u2502                                                              ~~~~~~~~\r\n\u2570\u2192 com.squareup.ui.market.core.theme.MarketContextWrapper instance\r\n\u200b     Leaking: YES (MarketContextWrapper wraps an Activity with Activity.mDestroyed true)\r\n\u200b     Retaining 6.2 MB in 181845 objects\r\n\u200b     mBase instance of com.squareup.ui.market.core.theme.MarketContextWrapper, wrapping activity com.squareup.ui.main.MainActivity with mDestroyed = true\r\n```\r\n\r\n```\r\n\u252c\u2500\u2500\u2500\r\n\u2502 GC Root: Thread object\r\n\u2502\r\n\u251c\u2500 java.lang.Thread instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 8.1 MB in 257497 objects\r\n\u2502    Thread name: 'pool-38-thread-1'\r\n\u2502    \u2193 Thread<Java Local>\r\n\u2502            ~~~~~~~~~~~~\r\n\u251c\u2500 java.util.concurrent.SynchronousQueue$TransferStack$SNode instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 8.1 MB in 257493 objects\r\n\u2502    \u2193 SynchronousQueue$TransferStack$SNode.match\r\n\u2502                                           ~~~~~\r\n\u251c\u2500 java.util.concurrent.SynchronousQueue$TransferStack$SNode instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 8.1 MB in 257492 objects\r\n\u2502    \u2193 SynchronousQueue$TransferStack$SNode.item\r\n\u2502                                           ~~~~\r\n\u251c\u2500 com.airbnb.lottie.LottieTask$LottieFutureTask instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 8.1 MB in 257491 objects\r\n\u2502    \u2193 LottieTask$LottieFutureTask.this$0\r\n\u2502                                  ~~~~~~\r\n\u251c\u2500 com.airbnb.lottie.LottieTask instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 8.1 MB in 257489 objects\r\n\u2502    \u2193 LottieTask.failureListeners\r\n\u2502                 ~~~~~~~~~~~~~~~~\r\n\u251c\u2500 java.util.LinkedHashSet instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 101 B in 4 objects\r\n\u2502    \u2193 LinkedHashSet[element()]\r\n\u2502                   ~~~~~~~~~~~\r\n\u251c\u2500 com.airbnb.lottie.LottieAnimationView$1 instance\r\n\u2502    Leaking: UNKNOWN\r\n\u2502    Retaining 12 B in 1 objects\r\n\u2502    Anonymous class implementing com.airbnb.lottie.LottieListener\r\n\u2502    \u2193 LottieAnimationView$1.this$0\r\n\u2502                            ~~~~~~\r\n\u2570\u2192 com.airbnb.lottie.LottieAnimationView instance\r\n\u200b     Leaking: YES (View.mContext references a destroyed activity)\r\n\u200b     Retaining 8.1 MB in 257476 objects\r\n\u200b     View not part of a window view hierarchy\r\n\u200b     View.mAttachInfo is null (view detached)\r\n\u200b     View.mWindowAttachCount = 1\r\n\u200b     mContext instance of flow.path.FlowPathContextWrapper, wrapping activity com.squareup.ui.main.MainActivity with mDestroyed = true\r\n```",
    "date": "2024-02-18T19:15:49Z",
    "url": "https://github.com/airbnb/lottie-android/commit/fe412fa6c2a5612b4379538e9a9bea14bb415569",
    "details": {
      "sha": "a602ec707ddf6d3267c1e30a25b6bc6e60fb151a",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieTask.java",
      "status": "modified",
      "additions": 36,
      "deletions": 12,
      "changes": 48,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/fe412fa6c2a5612b4379538e9a9bea14bb415569/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieTask.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/fe412fa6c2a5612b4379538e9a9bea14bb415569/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieTask.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieTask.java?ref=fe412fa6c2a5612b4379538e9a9bea14bb415569",
      "patch": "@@ -7,6 +7,7 @@\n import androidx.annotation.RestrictTo;\n \n import com.airbnb.lottie.utils.Logger;\n+import com.airbnb.lottie.utils.LottieThreadFactory;\n \n import java.util.ArrayList;\n import java.util.LinkedHashSet;\n@@ -35,7 +36,7 @@ public class LottieTask<T> {\n    * You may change this to run deserialization synchronously for testing.\n    */\n   @SuppressWarnings(\"WeakerAccess\")\n-  public static Executor EXECUTOR = Executors.newCachedThreadPool();\n+  public static Executor EXECUTOR = Executors.newCachedThreadPool(new LottieThreadFactory());\n \n   /* Preserve add order. */\n   private final Set<LottieListener<T>> successListeners = new LinkedHashSet<>(1);\n@@ -64,7 +65,7 @@ public LottieTask(T result) {\n         setResult(new LottieResult<>(e));\n       }\n     } else {\n-      EXECUTOR.execute(new LottieFutureTask(runnable));\n+      EXECUTOR.execute(new LottieFutureTask<T>(this, runnable));\n     }\n   }\n \n@@ -173,22 +174,45 @@ private synchronized void notifyFailureListeners(Throwable e) {\n     }\n   }\n \n-  private class LottieFutureTask extends FutureTask<LottieResult<T>> {\n-    LottieFutureTask(Callable<LottieResult<T>> callable) {\n+  private static class LottieFutureTask<T> extends FutureTask<LottieResult<T>> {\n+\n+    private LottieTask<T> lottieTask;\n+\n+    LottieFutureTask(LottieTask<T> task, Callable<LottieResult<T>> callable) {\n       super(callable);\n+      lottieTask = task;\n     }\n \n     @Override\n     protected void done() {\n-      if (isCancelled()) {\n-        // We don't need to notify and listeners if the task is cancelled.\n-        return;\n-      }\n-\n       try {\n-        setResult(get());\n-      } catch (InterruptedException | ExecutionException e) {\n-        setResult(new LottieResult<>(e));\n+        if (isCancelled()) {\n+          // We don't need to notify and listeners if the task is cancelled.\n+          return;\n+        }\n+\n+        try {\n+          lottieTask.setResult(get());\n+        } catch (InterruptedException | ExecutionException e) {\n+          lottieTask.setResult(new LottieResult<>(e));\n+        }\n+      } finally {\n+        // LottieFutureTask can be held in memory for up to 60 seconds after the task is done, which would\n+        // result in holding on to the associated LottieTask instance and leaking its listeners. To avoid\n+        // that, we clear our the reference to the LottieTask instance.\n+        //\n+        // How is LottieFutureTask held for up to 60 seconds? It's a bug in how the VM cleans up stack\n+        // local variables. When you have a loop that polls a blocking queue and assigns the result\n+        // to a local variable, after looping the local variable will still reference the previous value\n+        // until the queue returns the next result.\n+        //\n+        // Executors.newCachedThreadPool() relies on a SynchronousQueue and creates a cached thread pool\n+        // with a default keep alice of 60 seconds. After a given worker thread runs a task, that thread\n+        // will wait for up to 60 seconds for a new task to come, and while waiting it's also accidentally\n+        // keeping a reference to the previous task.\n+        //\n+        // See commit d577e728e9bccbafc707af3060ea914caa73c14f in AOSP for how that was fixed for Looper.\n+        lottieTask = null;\n       }\n     }\n   }",
      "parent_sha": "504bbdc9a438415f6539edfec3d916f1d8e86e3b"
    }
  },
  {
    "oid": "2ca5196e77e0a42136d11a416d69b3fe201b193b",
    "message": "Use the correct cache key when parsing NetworkFetcher animations (#2198)\n\nFixes #2187",
    "date": "2022-12-05T05:18:29Z",
    "url": "https://github.com/airbnb/lottie-android/commit/2ca5196e77e0a42136d11a416d69b3fe201b193b",
    "details": {
      "sha": "0d37823136f37387646d8c61e6e8f8ae8427efc9",
      "filename": "lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/2ca5196e77e0a42136d11a416d69b3fe201b193b/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fnetwork%2FNetworkFetcher.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/2ca5196e77e0a42136d11a416d69b3fe201b193b/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fnetwork%2FNetworkFetcher.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fnetwork%2FNetworkFetcher.java?ref=2ca5196e77e0a42136d11a416d69b3fe201b193b",
      "patch": "@@ -60,9 +60,9 @@ private LottieComposition fetchFromCache(Context context, @NonNull String url, @\n     InputStream inputStream = cacheResult.second;\n     LottieResult<LottieComposition> result;\n     if (extension == FileExtension.ZIP) {\n-      result = LottieCompositionFactory.fromZipStreamSync(context, new ZipInputStream(inputStream), url);\n+      result = LottieCompositionFactory.fromZipStreamSync(context, new ZipInputStream(inputStream), cacheKey);\n     } else {\n-      result = LottieCompositionFactory.fromJsonInputStreamSync(inputStream, url);\n+      result = LottieCompositionFactory.fromJsonInputStreamSync(inputStream, cacheKey);\n     }\n     if (result.getValue() != null) {\n       return result.getValue();",
      "parent_sha": "e752a109a4ed15d127eaaf38c5237157cb62f95a"
    }
  },
  {
    "oid": "1e3f4130977f6e5d1ede8588a79430e84b2bf57b",
    "message": "Add KeyframesWrapper to improve setProgress() performance (#1426)\n\nTo improve performance of BaseKeyframeAnimation.getCurrentKeyframe() called by setProgress() of BaseKeyframeAnimation who has only one Keyframe, SingleKeyframeWrapper was implemented with KeyframeWrapper interface.\r\nAt LottieLogo1.json, processing time of setProgress() was reduced about 70%.",
    "date": "2019-11-24T01:05:48Z",
    "url": "https://github.com/airbnb/lottie-android/commit/1e3f4130977f6e5d1ede8588a79430e84b2bf57b",
    "details": {
      "sha": "65599ab65d6748a0c4d019a0c88c63070331509c",
      "filename": "lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java",
      "status": "modified",
      "additions": 185,
      "deletions": 41,
      "changes": 226,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/1e3f4130977f6e5d1ede8588a79430e84b2bf57b/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FBaseKeyframeAnimation.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/1e3f4130977f6e5d1ede8588a79430e84b2bf57b/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FBaseKeyframeAnimation.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FBaseKeyframeAnimation.java?ref=1e3f4130977f6e5d1ede8588a79430e84b2bf57b",
      "patch": "@@ -1,18 +1,16 @@\n package com.airbnb.lottie.animation.keyframe;\n \n-import android.util.Log;\n+import androidx.annotation.FloatRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n \n import com.airbnb.lottie.L;\n import com.airbnb.lottie.value.Keyframe;\n import com.airbnb.lottie.value.LottieValueCallback;\n \n-import java.security.Key;\n import java.util.ArrayList;\n import java.util.List;\n \n-import androidx.annotation.FloatRange;\n-import androidx.annotation.Nullable;\n-\n /**\n  * @param <K> Keyframe type\n  * @param <A> Animation type\n@@ -26,21 +24,17 @@ public interface AnimationListener {\n   final List<AnimationListener> listeners = new ArrayList<>(1);\n   private boolean isDiscrete = false;\n \n-  private final List<? extends Keyframe<K>> keyframes;\n+  private final KeyframesWrapper<K> keyframesWrapper;\n   private float progress = 0f;\n   @Nullable protected LottieValueCallback<A> valueCallback;\n \n-  @Nullable private Keyframe<K> cachedKeyframe;\n-\n-  @Nullable private Keyframe<K> cachedGetValueKeyframe;\n-  private float cachedGetValueProgress = -1f;\n   @Nullable private A cachedGetValue = null;\n \n   private float cachedStartDelayProgress = -1f;\n   private float cachedEndProgress = -1f;\n \n   BaseKeyframeAnimation(List<? extends Keyframe<K>> keyframes) {\n-    this.keyframes = keyframes;\n+    keyframesWrapper = wrap(keyframes);\n   }\n \n   public void setIsDiscrete() {\n@@ -52,12 +46,9 @@ public void addUpdateListener(AnimationListener listener) {\n   }\n \n   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n-    if (keyframes.isEmpty()) {\n+    if (keyframesWrapper.isEmpty()) {\n       return;\n     }\n-    // Must use hashCode() since the actual object instance will be returned\n-    // from getValue() below with the new values.\n-    Keyframe<K> previousKeyframe = getCurrentKeyframe();\n     if (progress < getStartDelayProgress()) {\n       progress = getStartDelayProgress();\n     } else if (progress > getEndProgress()) {\n@@ -68,10 +59,7 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n       return;\n     }\n     this.progress = progress;\n-    // Just trigger a change but don't compute values if there is a value callback.\n-    Keyframe<K> newKeyframe = getCurrentKeyframe();\n-\n-    if (previousKeyframe != newKeyframe || !newKeyframe.isStatic()) {\n+    if (keyframesWrapper.isValueChanged(progress)) {\n       notifyListeners();\n     }\n   }\n@@ -84,22 +72,7 @@ public void notifyListeners() {\n \n   protected Keyframe<K> getCurrentKeyframe() {\n     L.beginSection(\"BaseKeyframeAnimation#getCurrentKeyframe\");\n-    if (cachedKeyframe != null && cachedKeyframe.containsProgress(progress)) {\n-      L.endSection(\"BaseKeyframeAnimation#getCurrentKeyframe\");\n-      return cachedKeyframe;\n-    }\n-\n-    Keyframe<K> keyframe = keyframes.get(keyframes.size() - 1);\n-    if (progress < keyframe.getStartProgress()) {\n-      for (int i = keyframes.size() - 1; i >= 0; i--) {\n-        keyframe = keyframes.get(i);\n-        if (keyframe.containsProgress(progress)) {\n-          break;\n-        }\n-      }\n-    }\n-\n-    cachedKeyframe = keyframe;\n+    final Keyframe<K> keyframe = keyframesWrapper.getCurrentKeyframe();\n     L.endSection(\"BaseKeyframeAnimation#getCurrentKeyframe\");\n     return keyframe;\n   }\n@@ -138,28 +111,26 @@ protected float getInterpolatedCurrentKeyframeProgress() {\n   @FloatRange(from = 0f, to = 1f)\n   private float getStartDelayProgress() {\n       if (cachedStartDelayProgress == -1f) {\n-            cachedStartDelayProgress = keyframes.isEmpty() ? 0f : keyframes.get(0).getStartProgress();\n+        cachedStartDelayProgress = keyframesWrapper.getStartDelayProgress();\n       }\n       return cachedStartDelayProgress;\n   }\n \n   @FloatRange(from = 0f, to = 1f)\n   float getEndProgress() {\n       if (cachedEndProgress == -1f) {\n-        cachedEndProgress = keyframes.isEmpty() ? 1f : keyframes.get(keyframes.size() - 1).getEndProgress();\n+        cachedEndProgress = keyframesWrapper.getEndProgress();\n       }\n       return cachedEndProgress;\n   }\n \n   public A getValue() {\n-    Keyframe<K> keyframe = getCurrentKeyframe();\n     float progress = getInterpolatedCurrentKeyframeProgress();\n-    if (valueCallback == null && keyframe == cachedGetValueKeyframe && cachedGetValueProgress == progress) {\n+    if (valueCallback == null && keyframesWrapper.isCachedValueEnabled(progress)) {\n       return cachedGetValue;\n     }\n \n-    cachedGetValueKeyframe = keyframe;\n-    cachedGetValueProgress = progress;\n+    final Keyframe<K> keyframe = getCurrentKeyframe();\n     A value = getValue(keyframe, progress);\n     cachedGetValue = value;\n \n@@ -185,4 +156,177 @@ public void setValueCallback(@Nullable LottieValueCallback<A> valueCallback) {\n    * should be able to handle values outside of that range.\n    */\n   abstract A getValue(Keyframe<K> keyframe, float keyframeProgress);\n+\n+  private static <T> KeyframesWrapper<T> wrap(List<? extends Keyframe<T>> keyframes) {\n+    if (keyframes.isEmpty()) {\n+      return new EmptyKeyframeWrapper<>();\n+    }\n+    if (keyframes.size() == 1) {\n+      return new SingleKeyframeWrapper<>(keyframes);\n+    }\n+    return new KeyframesWrapperImpl<>(keyframes);\n+  }\n+\n+  private interface KeyframesWrapper<T> {\n+    boolean isEmpty();\n+\n+    boolean isValueChanged(float progress);\n+\n+    Keyframe<T> getCurrentKeyframe();\n+\n+    @FloatRange(from = 0f, to = 1f)\n+    float getStartDelayProgress();\n+\n+    @FloatRange(from = 0f, to = 1f)\n+    float getEndProgress();\n+\n+    boolean isCachedValueEnabled(float interpolatedProgress);\n+  }\n+\n+  private static final class EmptyKeyframeWrapper<T> implements KeyframesWrapper<T> {\n+    @Override\n+    public boolean isEmpty() {\n+      return true;\n+    }\n+\n+    @Override\n+    public boolean isValueChanged(float progress) {\n+      return false;\n+    }\n+\n+    @Override\n+    public Keyframe<T> getCurrentKeyframe() {\n+      throw new IllegalStateException(\"not implemented\");\n+    }\n+\n+    @Override\n+    public float getStartDelayProgress() {\n+      return 0f;\n+    }\n+\n+    @Override\n+    public float getEndProgress() {\n+      return 1f;\n+    }\n+\n+    @Override\n+    public boolean isCachedValueEnabled(float interpolatedProgress) {\n+      throw new IllegalStateException(\"not implemented\");\n+    }\n+  }\n+\n+  private static final class SingleKeyframeWrapper<T> implements KeyframesWrapper<T> {\n+    @NonNull\n+    private final Keyframe<T> keyframe;\n+    private float cachedInterpolatedProgress = -1f;\n+\n+    SingleKeyframeWrapper(List<? extends Keyframe<T>> keyframes) {\n+      this.keyframe = keyframes.get(0);\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+      return false;\n+    }\n+\n+    @Override\n+    public boolean isValueChanged(float progress) {\n+      return !keyframe.isStatic();\n+    }\n+\n+    @Override\n+    public Keyframe<T> getCurrentKeyframe() {\n+      return keyframe;\n+    }\n+\n+    @Override\n+    public float getStartDelayProgress() {\n+      return keyframe.getStartProgress();\n+    }\n+\n+    @Override\n+    public float getEndProgress() {\n+      return keyframe.getEndProgress();\n+    }\n+\n+    @Override\n+    public boolean isCachedValueEnabled(float interpolatedProgress) {\n+      if (cachedInterpolatedProgress == interpolatedProgress) {\n+        return true;\n+      }\n+      cachedInterpolatedProgress = interpolatedProgress;\n+      return false;\n+    }\n+  }\n+\n+  private static final class KeyframesWrapperImpl<T> implements KeyframesWrapper<T> {\n+    private final List<? extends Keyframe<T>> keyframes;\n+    @NonNull\n+    private Keyframe<T> currentKeyframe;\n+    private Keyframe<T> cachedCurrentKeyframe = null;\n+    private float cachedInterpolatedProgress = -1f;\n+\n+    KeyframesWrapperImpl(List<? extends Keyframe<T>> keyframes) {\n+      this.keyframes = keyframes;\n+      currentKeyframe = findKeyframe(0);\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+      return false;\n+    }\n+\n+    @Override\n+    public boolean isValueChanged(float progress) {\n+      if (currentKeyframe.containsProgress(progress)) {\n+        return !currentKeyframe.isStatic();\n+      }\n+      currentKeyframe = findKeyframe(progress);\n+      return true;\n+    }\n+\n+    private Keyframe<T> findKeyframe(float progress) {\n+      Keyframe<T> keyframe = keyframes.get(keyframes.size() - 1);\n+      if (progress >= keyframe.getStartProgress()) {\n+        return keyframe;\n+      }\n+      for (int i = keyframes.size() - 2; i >= 1; i--) {\n+        keyframe = keyframes.get(i);\n+        if (currentKeyframe == keyframe) {\n+          continue;\n+        }\n+        if (keyframe.containsProgress(progress)) {\n+          return keyframe;\n+        }\n+      }\n+      return keyframes.get(0);\n+    }\n+\n+    @Override\n+    @NonNull\n+    public Keyframe<T> getCurrentKeyframe() {\n+      return currentKeyframe;\n+    }\n+\n+    @Override\n+    public float getStartDelayProgress() {\n+      return keyframes.get(0).getStartProgress();\n+    }\n+\n+    @Override\n+    public float getEndProgress() {\n+      return keyframes.get(keyframes.size() - 1).getEndProgress();\n+    }\n+\n+    @Override\n+    public boolean isCachedValueEnabled(float interpolatedProgress) {\n+      if (cachedCurrentKeyframe == currentKeyframe\n+              && cachedInterpolatedProgress == interpolatedProgress) {\n+        return true;\n+      }\n+      cachedCurrentKeyframe = currentKeyframe;\n+      cachedInterpolatedProgress = interpolatedProgress;\n+      return false;\n+    }\n+  }\n }",
      "parent_sha": "a92b460cc4bc73b7fc338b897f0a8f1331d19cc7"
    }
  },
  {
    "oid": "f970d3a8947e2f5eeaf8c852ec3648137f343732",
    "message": "Close JsonReader after parsing (#1101)\n\nOther streams are closed so this makes it consistent with that.\r\n\r\nFixes #1068",
    "date": "2019-02-03T06:53:29Z",
    "url": "https://github.com/airbnb/lottie-android/commit/f970d3a8947e2f5eeaf8c852ec3648137f343732",
    "details": {
      "sha": "97d4deb5747758e59c7e0ffd73692262e4298a96",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/f970d3a8947e2f5eeaf8c852ec3648137f343732/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieCompositionFactory.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/f970d3a8947e2f5eeaf8c852ec3648137f343732/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieCompositionFactory.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieCompositionFactory.java?ref=f970d3a8947e2f5eeaf8c852ec3648137f343732",
      "patch": "@@ -238,12 +238,21 @@ public static LottieTask<LottieComposition> fromJsonReader(final JsonReader read\n    */\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromJsonReaderSync(JsonReader reader, @Nullable String cacheKey) {\n+    return fromJsonReaderSyncInternal(reader, cacheKey, true);\n+  }\n+\n+  private static LottieResult<LottieComposition> fromJsonReaderSyncInternal(\n+          JsonReader reader, @Nullable String cacheKey, boolean close) {\n     try {\n       LottieComposition composition = LottieCompositionParser.parse(reader);\n       LottieCompositionCache.getInstance().put(cacheKey, composition);\n       return new LottieResult<>(composition);\n     } catch (Exception e) {\n       return new LottieResult<>(e);\n+    } finally {\n+      if (close) {\n+        closeQuietly(reader);\n+      }\n     }\n   }\n \n@@ -280,7 +289,8 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(ZipInpu\n         if (entry.getName().contains(\"__MACOSX\")) {\n           inputStream.closeEntry();\n         } else if (entry.getName().contains(\".json\")) {\n-          composition = LottieCompositionFactory.fromJsonInputStreamSync(inputStream, cacheKey, false).getValue();\n+          JsonReader reader = new JsonReader(new InputStreamReader(inputStream));\n+          composition = LottieCompositionFactory.fromJsonReaderSyncInternal(reader, null, false).getValue();\n         } else if (entry.getName().contains(\".png\")) {\n           String[] splitName = entry.getName().split(\"/\");\n           String name = splitName[splitName.length - 1];",
      "parent_sha": "b52dce3872e06d7888c424d0ec320cf55a15f670"
    }
  },
  {
    "oid": "ca7e4f06a51edc62c49ab4954e48abdcd9056a3c",
    "message": "Fix small test issue. (#722)",
    "date": "2018-04-09T16:24:56Z",
    "url": "https://github.com/airbnb/lottie-android/commit/ca7e4f06a51edc62c49ab4954e48abdcd9056a3c",
    "details": {
      "sha": "800c2850827df811a9a670762dd1ef0f2327796d",
      "filename": "lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/ca7e4f06a51edc62c49ab4954e48abdcd9056a3c/lottie%2Fsrc%2Ftest%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieValueAnimatorUnitTest.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/ca7e4f06a51edc62c49ab4954e48abdcd9056a3c/lottie%2Fsrc%2Ftest%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieValueAnimatorUnitTest.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Ftest%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieValueAnimatorUnitTest.java?ref=ca7e4f06a51edc62c49ab4954e48abdcd9056a3c",
      "patch": "@@ -241,7 +241,7 @@ public void testLoopingAnimatorOnceReverse() {\n \n   @Test\n   public void setMinFrameSmallerThanComposition() {\n-    animator.setMaxFrame(-9000);\n+    animator.setMinFrame(-9000);\n     assertEquals(animator.getMinFrame(), composition.getStartFrame());\n   }\n ",
      "parent_sha": "2ba29e14f1e6975620b0db25eaa98c3f3b6a84c7"
    }
  },
  {
    "oid": "17126835279e87c14c714d5de927d387e653cbe6",
    "message": "Only store application context in ImageAssetManager (#2163)\n\nFixes #2108",
    "date": "2022-11-14T05:50:17Z",
    "url": "https://github.com/airbnb/lottie-android/commit/17126835279e87c14c714d5de927d387e653cbe6",
    "details": {
      "sha": "f36fc6b80f0dbd875cdd73150047c8ae87a8beac",
      "filename": "lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/17126835279e87c14c714d5de927d387e653cbe6/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmanager%2FImageAssetManager.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/17126835279e87c14c714d5de927d387e653cbe6/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmanager%2FImageAssetManager.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmanager%2FImageAssetManager.java?ref=17126835279e87c14c714d5de927d387e653cbe6",
      "patch": "@@ -38,7 +38,7 @@ public ImageAssetManager(Drawable.Callback callback, String imagesFolder,\n       return;\n     }\n \n-    context = ((View) callback).getContext();\n+    context = ((View) callback).getContext().getApplicationContext();\n     this.imageAssets = imageAssets;\n     setDelegate(delegate);\n   }",
      "parent_sha": "592c5f635e7b9f6fc1ae1f2f162c4535430283b3"
    }
  },
  {
    "oid": "14ea5d74cc311318783c7a1c9bfda57d86a56a46",
    "message": "Updated max size logic",
    "date": "2016-10-14T21:03:55Z",
    "url": "https://github.com/airbnb/lottie-android/commit/14ea5d74cc311318783c7a1c9bfda57d86a56a46",
    "details": {
      "sha": "3255fb9768ba185f1f882291b906fc49551137ce",
      "filename": "lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/14ea5d74cc311318783c7a1c9bfda57d86a56a46/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2FLottieComposition.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/14ea5d74cc311318783c7a1c9bfda57d86a56a46/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2FLottieComposition.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2FLottieComposition.java?ref=14ea5d74cc311318783c7a1c9bfda57d86a56a46",
      "patch": "@@ -15,12 +15,12 @@\n \n public class LottieComposition {\n     /**\n-     * The largest bitmap drawing cache can be is 8,294,400 bytes. There are 4 bytes per pixell leaving ~2.3M pixels available.\n+     * The largest bitmap drawing cache can be is 8,294,400 bytes. There are 4 bytes per pixel leaving ~2.3M pixels available.\n      * Reduce the number a little bit for safety.\n      *\n      * Hopefully this can be hardware accelerated someday.\n      */\n-    private static final int MAX_PIXELS = 2000000;\n+    private static final int MAX_PIXELS = 1000;\n \n     public static LottieComposition fromJson(JSONObject json) {\n         LottieComposition composition = new LottieComposition();\n@@ -37,7 +37,7 @@ public static LottieComposition fromJson(JSONObject json) {\n             int scaledWidth = (int) (width * L.SCALE);\n             int scaledHeight = (int) (height * L.SCALE);\n             if (scaledWidth * scaledHeight > MAX_PIXELS) {\n-                float factor = (float) Math.sqrt(MAX_PIXELS / (float) (scaledWidth * scaledHeight));\n+                float factor = (float) MAX_PIXELS / (float) Math.max(scaledWidth, scaledHeight);\n                 scaledWidth *= factor;\n                 scaledHeight *= factor;\n                 L.SCALE *= factor;",
      "parent_sha": "9f0bce820ded5f666e1f3b48fa97c0e7c94d916d"
    }
  },
  {
    "oid": "0bba13ea34270360f1125259e8a0a3cba825d2b7",
    "message": "Fix a rare NPE race condition in TransformKeyframeAnimation (#1955)\n\nFixes #1945",
    "date": "2021-11-28T03:51:41Z",
    "url": "https://github.com/airbnb/lottie-android/commit/0bba13ea34270360f1125259e8a0a3cba825d2b7",
    "details": {
      "sha": "fcab96c1019625deb8e64bf295484ad384a1d5cb",
      "filename": "lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/0bba13ea34270360f1125259e8a0a3cba825d2b7/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FTransformKeyframeAnimation.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/0bba13ea34270360f1125259e8a0a3cba825d2b7/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FTransformKeyframeAnimation.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FTransformKeyframeAnimation.java?ref=0bba13ea34270360f1125259e8a0a3cba825d2b7",
      "patch": "@@ -169,7 +169,7 @@ public Matrix getMatrix() {\n     BaseKeyframeAnimation<?, PointF> position = this.position;\n     if (position != null) {\n       PointF positionValue = position.getValue();\n-      if (positionValue.x != 0 || positionValue.y != 0) {\n+      if (positionValue != null && (positionValue.x != 0 || positionValue.y != 0)) {\n         matrix.preTranslate(positionValue.x, positionValue.y);\n       }\n     }",
      "parent_sha": "d884a67d525965d369a73659b9a7a0164c7ea06c"
    }
  },
  {
    "oid": "de498aa4289058278cea4e60bcf26d10f967f2d0",
    "message": "Delay setProgress(...) if animation is loading",
    "date": "2016-11-08T22:29:16Z",
    "url": "https://github.com/airbnb/lottie-android/commit/de498aa4289058278cea4e60bcf26d10f967f2d0",
    "details": {
      "sha": "7056a3980511c7a78b1e61bab0e541f902eb6d89",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java",
      "status": "modified",
      "additions": 20,
      "deletions": 2,
      "changes": 22,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/de498aa4289058278cea4e60bcf26d10f967f2d0/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/de498aa4289058278cea4e60bcf26d10f967f2d0/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java?ref=de498aa4289058278cea4e60bcf26d10f967f2d0",
      "patch": "@@ -59,9 +59,11 @@ public static LottieAnimationView forScreenshotTest(Context context) {\n \n     private final LongSparseArray<LayerView> layerMap = new LongSparseArray<>();\n     private final RootAnimatableLayer rootAnimatableLayer = new RootAnimatableLayer(this);\n+    @FloatRange(from=0f, to=1f) private float progress;\n     private String animationName;\n     private boolean isScreenshotTest;\n     private boolean isAnimationLoading;\n+    private boolean setProgressWhenCompositionSet;\n     private boolean playAnimationWhenCompositionSet;\n     @Nullable private AsyncTask fileToJsonTask;\n     @Nullable private AsyncTask jsonToCompositionTask;\n@@ -193,6 +195,8 @@ public void recycleBitmaps() {\n      */\n     public void setAnimation(final String animationName) {\n         isAnimationLoading = true;\n+        setProgressWhenCompositionSet = false;\n+        playAnimationWhenCompositionSet = false;\n \n         this.animationName = animationName;\n \n@@ -295,6 +299,7 @@ private void setJsonSync(JSONObject json) {\n \n     private void onAnimationLoadingFail() {\n         isAnimationLoading = false;\n+        setProgressWhenCompositionSet = false;\n         playAnimationWhenCompositionSet = false;\n     }\n \n@@ -303,8 +308,16 @@ private void setComposition(@NonNull Composition composition) {\n             return;\n         }\n \n+        isAnimationLoading = false;\n+\n         clearComposition();\n-        setProgress(0f);\n+\n+        if (setProgressWhenCompositionSet) {\n+            setProgressWhenCompositionSet = false;\n+            setProgress(progress);\n+        } else {\n+            setProgress(0f);\n+        }\n \n         this.composition = composition;\n         rootAnimatableLayer.setCompDuration(composition.getDuration());\n@@ -313,7 +326,6 @@ private void setComposition(@NonNull Composition composition) {\n         requestLayout();\n         setImageDrawable(rootAnimatableLayer);\n \n-        isAnimationLoading = false;\n         if (playAnimationWhenCompositionSet) {\n             playAnimationWhenCompositionSet = false;\n             playAnimation();\n@@ -405,11 +417,17 @@ public void playAnimation() {\n     }\n \n     public void cancelAnimation() {\n+        setProgressWhenCompositionSet = false;\n         playAnimationWhenCompositionSet = false;\n         rootAnimatableLayer.cancelAnimation();\n     }\n \n     public void setProgress(@FloatRange(from=0f, to=1f) float progress) {\n+        this.progress = progress;\n+        if (isAnimationLoading) {\n+            setProgressWhenCompositionSet = true;\n+            return;\n+        }\n         rootAnimatableLayer.setProgress(progress);\n     }\n ",
      "parent_sha": "3ad920b6011b0abc9192f03c985d77976498f5db"
    }
  },
  {
    "oid": "3b6bab2b56e243a9d7ac2065adb62ce7d6e08237",
    "message": "Fix asyncUpdates for Nougat and below (#2380)\n\nFixes #2355",
    "date": "2023-09-03T00:42:05Z",
    "url": "https://github.com/airbnb/lottie-android/commit/3b6bab2b56e243a9d7ac2065adb62ce7d6e08237",
    "details": {
      "sha": "8234e741909da32d170ddd341d99575666033b3c",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java",
      "status": "modified",
      "additions": 37,
      "deletions": 7,
      "changes": 44,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/3b6bab2b56e243a9d7ac2065adb62ce7d6e08237/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/3b6bab2b56e243a9d7ac2065adb62ce7d6e08237/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java?ref=3b6bab2b56e243a9d7ac2065adb62ce7d6e08237",
      "patch": "@@ -16,6 +16,8 @@\n import android.graphics.drawable.Animatable;\n import android.graphics.drawable.Drawable;\n import android.os.Build;\n+import android.os.Handler;\n+import android.os.Looper;\n import android.view.View;\n import android.view.ViewGroup;\n import android.view.ViewParent;\n@@ -83,6 +85,13 @@ private enum OnVisibleAction {\n     RESUME,\n   }\n \n+  /**\n+   * Prior to Oreo, you could only call invalidateDrawable() from the main thread.\n+   * This means that when async updates are enabled, we must post the invalidate call to the main thread.\n+   * Newer devices can call invalidate directly from whatever thread asyncUpdates runs on.\n+   */\n+  private static final boolean invalidateSelfOnMainThread = Build.VERSION.SDK_INT <= Build.VERSION_CODES.N_MR1;\n+\n   private LottieComposition composition;\n   private final LottieValueAnimator animator = new LottieValueAnimator();\n \n@@ -146,6 +155,13 @@ private enum OnVisibleAction {\n   private Matrix softwareRenderingOriginalCanvasMatrix;\n   private Matrix softwareRenderingOriginalCanvasMatrixInverse;\n \n+  /**\n+   * True if the drawable has not been drawn since the last invalidateSelf.\n+   * We can do this to prevent things like bounds from getting recalculated\n+   * many times.\n+   */\n+  private boolean isDirty = false;\n+\n   /** Use the getter so that it can fall back to {@link L#getDefaultAsyncUpdates()}. */\n   @Nullable private AsyncUpdates asyncUpdates;\n   private final ValueAnimator.AnimatorUpdateListener progressUpdateListener = animation -> {\n@@ -181,6 +197,9 @@ private enum OnVisibleAction {\n    */\n   private static final Executor setProgressExecutor = new ThreadPoolExecutor(0, 2, 35, TimeUnit.MILLISECONDS,\n       new LinkedBlockingQueue<>(), new LottieThreadFactory());\n+  private Handler mainThreadHandler;\n+  private Runnable invalidateSelfRunnable;\n+\n   private final Runnable updateProgressRunnable = () -> {\n     CompositionLayer compositionLayer = this.compositionLayer;\n     if (compositionLayer == null) {\n@@ -189,6 +208,19 @@ private enum OnVisibleAction {\n     try {\n       setProgressDrawLock.acquire();\n       compositionLayer.setProgress(animator.getAnimatedValueAbsolute());\n+      // Refer to invalidateSelfOnMainThread for more info.\n+      if (invalidateSelfOnMainThread && isDirty) {\n+        if (mainThreadHandler == null) {\n+          mainThreadHandler = new Handler(Looper.getMainLooper());\n+          invalidateSelfRunnable = () -> {\n+            final Callback callback = getCallback();\n+            if (callback != null) {\n+              callback.invalidateDrawable(this);\n+            }\n+          };\n+        }\n+        mainThreadHandler.post(invalidateSelfRunnable);\n+      }\n     } catch (InterruptedException e) {\n       // Do nothing.\n     } finally {\n@@ -198,13 +230,6 @@ private enum OnVisibleAction {\n   private float lastDrawnProgress = -Float.MAX_VALUE;\n   private static final float MAX_DELTA_MS_ASYNC_SET_PROGRESS = 3 / 60f * 1000;\n \n-  /**\n-   * True if the drawable has not been drawn since the last invalidateSelf.\n-   * We can do this to prevent things like bounds from getting recalculated\n-   * many times.\n-   */\n-  private boolean isDirty = false;\n-\n   @IntDef({RESTART, REVERSE})\n   @Retention(RetentionPolicy.SOURCE)\n   public @interface RepeatMode {\n@@ -561,6 +586,11 @@ public void invalidateSelf() {\n       return;\n     }\n     isDirty = true;\n+\n+    // Refer to invalidateSelfOnMainThread for more info.\n+    if (invalidateSelfOnMainThread && Looper.getMainLooper() != Looper.myLooper()) {\n+      return;\n+    }\n     final Callback callback = getCallback();\n     if (callback != null) {\n       callback.invalidateDrawable(this);",
      "parent_sha": "5d3763af2f32a766ab2b70192d765b9eaac5b608"
    }
  },
  {
    "oid": "ae9317b3f6e7fc2818ea1d50cc798cafd3188461",
    "message": "Add cacheKey to LottieCompositionFactory call (#1617)\n\nFixes #1556",
    "date": "2020-08-28T21:49:50Z",
    "url": "https://github.com/airbnb/lottie-android/commit/ae9317b3f6e7fc2818ea1d50cc798cafd3188461",
    "details": {
      "sha": "8d6fb95042f773c5be3853aac6442edb496eb207",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/ae9317b3f6e7fc2818ea1d50cc798cafd3188461/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieCompositionFactory.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/ae9317b3f6e7fc2818ea1d50cc798cafd3188461/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieCompositionFactory.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieCompositionFactory.java?ref=ae9317b3f6e7fc2818ea1d50cc798cafd3188461",
      "patch": "@@ -207,7 +207,7 @@ public static LottieTask<LottieComposition> fromRawRes(Context context, @RawRes\n    *\n    * Pass null as the cache key to skip caching.\n    */\n-  public static LottieTask<LottieComposition> fromRawRes(Context context, @RawRes final int rawRes, @Nullable String cacheKey) {\n+  public static LottieTask<LottieComposition> fromRawRes(Context context, @RawRes final int rawRes, @Nullable final String cacheKey) {\n     // Prevent accidentally leaking an Activity.\n     final WeakReference<Context> contextRef = new WeakReference<>(context);\n     final Context appContext = context.getApplicationContext();\n@@ -216,7 +216,7 @@ public static LottieTask<LottieComposition> fromRawRes(Context context, @RawRes\n       public LottieResult<LottieComposition> call() {\n         @Nullable Context originalContext = contextRef.get();\n         Context context = originalContext != null ? originalContext : appContext;\n-        return fromRawResSync(context, rawRes);\n+        return fromRawResSync(context, rawRes, cacheKey);\n       }\n     });\n   }",
      "parent_sha": "ba6d6ee11822e55571ce6e7864ca361b677d5bae"
    }
  },
  {
    "oid": "78dd109f2847bd19984beef6128fab9273b003ff",
    "message": "Add close param to LottieCompositionFactory.fromJsonReader (#2342)",
    "date": "2023-07-25T15:57:01Z",
    "url": "https://github.com/airbnb/lottie-android/commit/78dd109f2847bd19984beef6128fab9273b003ff",
    "details": {
      "sha": "07454f2f8c4c1926ae991cca10af0903bbb6d6f8",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java",
      "status": "modified",
      "additions": 6,
      "deletions": 11,
      "changes": 17,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/78dd109f2847bd19984beef6128fab9273b003ff/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieCompositionFactory.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/78dd109f2847bd19984beef6128fab9273b003ff/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieCompositionFactory.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieCompositionFactory.java?ref=78dd109f2847bd19984beef6128fab9273b003ff",
      "patch": "@@ -333,22 +333,14 @@ public static LottieResult<LottieComposition> fromJsonInputStreamSync(InputStrea\n     return fromJsonInputStreamSync(stream, cacheKey, true);\n   }\n \n-\n   /**\n    * Return a LottieComposition for the given InputStream to json.\n    */\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromJsonInputStreamSync(InputStream stream, @Nullable String cacheKey, boolean close) {\n-    try {\n-      return fromJsonReaderSync(JsonReader.of(buffer(source(stream))), cacheKey);\n-    } finally {\n-      if (close) {\n-        closeQuietly(stream);\n-      }\n-    }\n+    return fromJsonReaderSync(JsonReader.of(buffer(source(stream))), cacheKey, close);\n   }\n \n-\n   /**\n    * @see #fromJsonSync(JSONObject, String)\n    */\n@@ -394,12 +386,15 @@ public static LottieTask<LottieComposition> fromJsonReader(final JsonReader read\n     return cache(cacheKey, () -> fromJsonReaderSync(reader, cacheKey), () -> Utils.closeQuietly(reader));\n   }\n \n-\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromJsonReaderSync(com.airbnb.lottie.parser.moshi.JsonReader reader, @Nullable String cacheKey) {\n-    return fromJsonReaderSyncInternal(reader, cacheKey, true);\n+    return fromJsonReaderSync(reader, cacheKey, true);\n   }\n \n+  @WorkerThread\n+  public static LottieResult<LottieComposition> fromJsonReaderSync(com.airbnb.lottie.parser.moshi.JsonReader reader, @Nullable String cacheKey, boolean close) {\n+    return fromJsonReaderSyncInternal(reader, cacheKey, close);\n+  }\n \n   private static LottieResult<LottieComposition> fromJsonReaderSyncInternal(\n       com.airbnb.lottie.parser.moshi.JsonReader reader, @Nullable String cacheKey, boolean close) {",
      "parent_sha": "6c26b9fe7561df8a651aa7a53a17088137af6aa6"
    }
  },
  {
    "oid": "28f4e5a5087196e2ebb0923bba35c84175b3b39a",
    "message": "Play, not resume, animation when playAnimation() is called when isShown() is false (#1521)\n\nFixes #1517",
    "date": "2020-02-22T18:45:27Z",
    "url": "https://github.com/airbnb/lottie-android/commit/28f4e5a5087196e2ebb0923bba35c84175b3b39a",
    "details": {
      "sha": "1404f001ed05323e121007c3b883be5af3aee2e8",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/28f4e5a5087196e2ebb0923bba35c84175b3b39a/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/28f4e5a5087196e2ebb0923bba35c84175b3b39a/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java?ref=28f4e5a5087196e2ebb0923bba35c84175b3b39a",
      "patch": "@@ -98,8 +98,11 @@ public void onResult(Throwable result) {\n   private boolean isInitialized;\n   private String animationName;\n   private @RawRes int animationResId;\n+\n+  private boolean playAnimationWhenShown = false;\n   private boolean wasAnimatingWhenNotShown = false;\n   private boolean wasAnimatingWhenDetached = false;\n+\n   private boolean autoPlay = false;\n   private boolean cacheComposition = true;\n   private RenderMode renderMode = RenderMode.AUTOMATIC;\n@@ -299,8 +302,11 @@ protected void onVisibilityChanged(@NonNull View changedView, int visibility) {\n     if (isShown()) {\n       if (wasAnimatingWhenNotShown) {\n         resumeAnimation();\n-        wasAnimatingWhenNotShown = false;\n+      } else if (playAnimationWhenShown) {\n+        playAnimation();\n       }\n+      wasAnimatingWhenNotShown = false;\n+      playAnimationWhenShown = false;\n     } else {\n       if (isAnimating()) {\n         pauseAnimation();\n@@ -543,7 +549,7 @@ public void playAnimation() {\n       lottieDrawable.playAnimation();\n       enableOrDisableHardwareLayer();\n     } else {\n-      wasAnimatingWhenNotShown = true;\n+      playAnimationWhenShown = true;\n     }\n   }\n \n@@ -557,6 +563,7 @@ public void resumeAnimation() {\n       lottieDrawable.resumeAnimation();\n       enableOrDisableHardwareLayer();\n     } else {\n+      playAnimationWhenShown = false;\n       wasAnimatingWhenNotShown = true;\n     }\n   }\n@@ -895,7 +902,9 @@ public float getScale() {\n \n   @MainThread\n   public void cancelAnimation() {\n+    wasAnimatingWhenDetached = false;\n     wasAnimatingWhenNotShown = false;\n+    playAnimationWhenShown = false;\n     lottieDrawable.cancelAnimation();\n     enableOrDisableHardwareLayer();\n   }\n@@ -905,6 +914,7 @@ public void pauseAnimation() {\n     autoPlay = false;\n     wasAnimatingWhenDetached = false;\n     wasAnimatingWhenNotShown = false;\n+    playAnimationWhenShown = false;\n     lottieDrawable.pauseAnimation();\n     enableOrDisableHardwareLayer();\n   }",
      "parent_sha": "0ca5227776c9057911ffdbc8448f7fbfd441b38e"
    }
  },
  {
    "oid": "318b8ea21c220924b2f65ebfcf43bb225acbce5e",
    "message": "Fix LottieDrawable#start for non-View callbacks (#2056)\n\nPreviously, the start function would be a noop if your callback was something other than a View instance.\r\n\r\nWith this change, if you use a non-View Callback (such as a Drawable), start will still call playAnimation; if the Callback was a View, it must still not be in edit mode to call playAnimation.",
    "date": "2022-04-13T19:52:31Z",
    "url": "https://github.com/airbnb/lottie-android/commit/318b8ea21c220924b2f65ebfcf43bb225acbce5e",
    "details": {
      "sha": "637e494460ec709e1aa2e3ba687776fa92e728ef",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/318b8ea21c220924b2f65ebfcf43bb225acbce5e/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/318b8ea21c220924b2f65ebfcf43bb225acbce5e/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java?ref=318b8ea21c220924b2f65ebfcf43bb225acbce5e",
      "patch": "@@ -549,11 +549,12 @@ public void draw(Canvas canvas, Matrix matrix) {\n   @MainThread\n   @Override\n   public void start() {\n-    // Don't auto play when in edit mode.\n     Callback callback = getCallback();\n-    if (callback instanceof View && !((View) callback).isInEditMode()) {\n-      playAnimation();\n+    if (callback instanceof View && ((View) callback).isInEditMode()) {\n+      // Don't auto play when in edit mode.\n+      return;\n     }\n+    playAnimation();\n   }\n \n   @MainThread",
      "parent_sha": "bda22a1c6fa26926cb8913ba7a809a37c4e8a305"
    }
  },
  {
    "oid": "cbd88e93ac83c5b6515c94c7984893a9e0cfec77",
    "message": "Fix hashCode calculation\n\nFixes #394",
    "date": "2017-07-21T03:18:54Z",
    "url": "https://github.com/airbnb/lottie-android/commit/cbd88e93ac83c5b6515c94c7984893a9e0cfec77",
    "details": {
      "sha": "1e72b33c3f90f3125d85715bcc3b59a38196e88b",
      "filename": "lottie/src/main/java/com/airbnb/lottie/Utils.java",
      "status": "modified",
      "additions": 12,
      "deletions": 4,
      "changes": 16,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/cbd88e93ac83c5b6515c94c7984893a9e0cfec77/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FUtils.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/cbd88e93ac83c5b6515c94c7984893a9e0cfec77/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FUtils.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FUtils.java?ref=cbd88e93ac83c5b6515c94c7984893a9e0cfec77",
      "patch": "@@ -181,10 +181,18 @@ static boolean isAtLeastVersion(LottieComposition composition, int major, int mi\n \n   static int hashFor(float a, float b, float c, float d) {\n     int result = 17;\n-    result = (int) (31 * result * a);\n-    result = (int) (31 * result * b);\n-    result = (int) (31 * result * c);\n-    result = (int) (31 * result * d);\n+    if (a != 0) {\n+      result = (int) (31 * result * a);\n+    }\n+    if (b != 0) {\n+      result = (int) (31 * result * b);\n+    }\n+    if (c != 0) {\n+      result = (int) (31 * result * c);\n+    }\n+    if (d != 0) {\n+      result = (int) (31 * result * d);\n+    }\n     return result;\n   }\n }",
      "parent_sha": "a8f3896ca5fc5fb42ad098af2f399f0945c8ec69"
    }
  },
  {
    "oid": "5989f6777d481a8c833578bb399f2c149e7c65b0",
    "message": "Fail quietly if ImageAssetManager fails to decode a bitmap (#1729)\n\nFixes #1718",
    "date": "2021-01-17T03:50:04Z",
    "url": "https://github.com/airbnb/lottie-android/commit/5989f6777d481a8c833578bb399f2c149e7c65b0",
    "details": {
      "sha": "20d239e227c3e9b178ee161b972ac4e9aa356c38",
      "filename": "lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/5989f6777d481a8c833578bb399f2c149e7c65b0/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmanager%2FImageAssetManager.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/5989f6777d481a8c833578bb399f2c149e7c65b0/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmanager%2FImageAssetManager.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmanager%2FImageAssetManager.java?ref=5989f6777d481a8c833578bb399f2c149e7c65b0",
      "patch": "@@ -113,7 +113,12 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n       Logger.warning(\"Unable to open asset.\", e);\n       return null;\n     }\n-    bitmap = BitmapFactory.decodeStream(is, null, opts);\n+    try {\n+      bitmap = BitmapFactory.decodeStream(is, null, opts);\n+    } catch (IllegalArgumentException e) {\n+      Logger.warning(\"Unable to decode image.\", e);\n+      return null;\n+    }\n     bitmap = Utils.resizeBitmapIfNeeded(bitmap, asset.getWidth(), asset.getHeight());\n     return putBitmap(id, bitmap);\n   }",
      "parent_sha": "03760ad2004b8c22cd1b4892f40c3e40bc296aa7"
    }
  },
  {
    "oid": "bb23817c8d45170fd775c6cc3ce60d8831ef6171",
    "message": "Make Layer name and refId public (#2188)\n\nI'm running tests against my animation json files and I want to make sure that all the layers I expect to be there are actually there, but I'm hitting issues with the visibility of these two functions.",
    "date": "2022-11-29T02:15:54Z",
    "url": "https://github.com/airbnb/lottie-android/commit/bb23817c8d45170fd775c6cc3ce60d8831ef6171",
    "details": {
      "sha": "3358661269ed59486afc91edfc6707fb24900c66",
      "filename": "lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/bb23817c8d45170fd775c6cc3ce60d8831ef6171/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FLayer.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/bb23817c8d45170fd775c6cc3ce60d8831ef6171/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FLayer.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FLayer.java?ref=bb23817c8d45170fd775c6cc3ce60d8831ef6171",
      "patch": "@@ -116,11 +116,11 @@ public long getId() {\n     return layerId;\n   }\n \n-  String getName() {\n+  public String getName() {\n     return layerName;\n   }\n \n-  @Nullable String getRefId() {\n+  public @Nullable String getRefId() {\n     return refId;\n   }\n ",
      "parent_sha": "1cfb73e3646fee951237f68c8eb6034075e3499a"
    }
  },
  {
    "oid": "3a7f0a1ad231858d574889855b4135a23a304032",
    "message": "Prevent interpolating before the start color/after the end color (#1027)",
    "date": "2018-12-09T22:41:56Z",
    "url": "https://github.com/airbnb/lottie-android/commit/3a7f0a1ad231858d574889855b4135a23a304032",
    "details": {
      "sha": "53400cb874b54de9d9266c1aad141cb3bc928e8f",
      "filename": "lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ColorKeyframeAnimation.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/3a7f0a1ad231858d574889855b4135a23a304032/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FColorKeyframeAnimation.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/3a7f0a1ad231858d574889855b4135a23a304032/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FColorKeyframeAnimation.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FColorKeyframeAnimation.java?ref=3a7f0a1ad231858d574889855b4135a23a304032",
      "patch": "@@ -1,6 +1,7 @@\n package com.airbnb.lottie.animation.keyframe;\n \n import com.airbnb.lottie.utils.GammaEvaluator;\n+import com.airbnb.lottie.utils.MiscUtils;\n import com.airbnb.lottie.value.Keyframe;\n \n import java.util.List;\n@@ -27,6 +28,6 @@ public ColorKeyframeAnimation(List<Keyframe<Integer>> keyframes) {\n       }\n     }\n \n-    return GammaEvaluator.evaluate(keyframeProgress, startColor, endColor);\n+    return GammaEvaluator.evaluate(MiscUtils.clamp(keyframeProgress, 0f, 1f), startColor, endColor);\n   }\n }",
      "parent_sha": "0a980ac7a1220539b444e9854f2d64c51018c191"
    }
  },
  {
    "oid": "16e95c483f5d8c6e7d51a87f88b8240b01c57d6b",
    "message": "Remove LottieAnimationView.composition so it doesn't get out of sync (#2468)\n\nFixes #2467",
    "date": "2024-02-27T01:27:20Z",
    "url": "https://github.com/airbnb/lottie-android/commit/16e95c483f5d8c6e7d51a87f88b8240b01c57d6b",
    "details": {
      "sha": "d1f4cd497a178435dbbaef53a787ba2fa6048faf",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java",
      "status": "modified",
      "additions": 14,
      "deletions": 12,
      "changes": 26,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/16e95c483f5d8c6e7d51a87f88b8240b01c57d6b/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/16e95c483f5d8c6e7d51a87f88b8240b01c57d6b/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java?ref=16e95c483f5d8c6e7d51a87f88b8240b01c57d6b",
      "patch": "@@ -43,7 +43,7 @@\n \n /**\n  * This view will load, deserialize, and display an After Effects animation exported with\n- * bodymovin (https://github.com/bodymovin/bodymovin).\n+ * bodymovin (<a href=\"https://github.com/airbnb/lottie-web\">github.com/airbnb/lottie-web</a>).\n  * <p>\n  * You may set the animation in one of two ways:\n  * 1) Attrs: {@link R.styleable#LottieAnimationView_lottie_fileName}\n@@ -139,10 +139,6 @@ public WeakFailureListener(LottieAnimationView target) {\n   private final Set<LottieOnCompositionLoadedListener> lottieOnCompositionLoadedListeners = new HashSet<>();\n \n   @Nullable private LottieTask<LottieComposition> compositionTask;\n-  /**\n-   * Can be null because it is created async\n-   */\n-  @Nullable private LottieComposition composition;\n \n   public LottieAnimationView(Context context) {\n     super(context);\n@@ -269,16 +265,22 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n   }\n \n   @Override public void setImageResource(int resId) {\n+    this.animationResId = 0;\n+    animationName = null;\n     cancelLoaderTask();\n     super.setImageResource(resId);\n   }\n \n   @Override public void setImageDrawable(Drawable drawable) {\n+    this.animationResId = 0;\n+    animationName = null;\n     cancelLoaderTask();\n     super.setImageDrawable(drawable);\n   }\n \n   @Override public void setImageBitmap(Bitmap bm) {\n+    this.animationResId = 0;\n+    animationName = null;\n     cancelLoaderTask();\n     super.setImageBitmap(bm);\n   }\n@@ -607,7 +609,8 @@ public void setFallbackResource(@DrawableRes int fallbackResource) {\n \n   private void setCompositionTask(LottieTask<LottieComposition> compositionTask) {\n     LottieResult<LottieComposition> result = compositionTask.getResult();\n-    if (result != null && result.getValue() == composition) {\n+    LottieDrawable lottieDrawable = this.lottieDrawable;\n+    if (result != null && lottieDrawable == getDrawable() && lottieDrawable.getComposition() == result.getValue()) {\n       return;\n     }\n     userActionsTaken.add(UserActionTaken.SET_ANIMATION);\n@@ -636,7 +639,6 @@ public void setComposition(@NonNull LottieComposition composition) {\n     }\n     lottieDrawable.setCallback(this);\n \n-    this.composition = composition;\n     ignoreUnschedule = true;\n     boolean isNewComposition = lottieDrawable.setComposition(composition);\n     ignoreUnschedule = false;\n@@ -663,7 +665,7 @@ public void setComposition(@NonNull LottieComposition composition) {\n   }\n \n   @Nullable public LottieComposition getComposition() {\n-    return composition;\n+    return getDrawable() == lottieDrawable ? lottieDrawable.getComposition() : null;\n   }\n \n   /**\n@@ -930,7 +932,7 @@ public boolean isAnimating() {\n    * Be wary if you are using many images, however. Lottie is designed to work with vector shapes\n    * from After Effects. If your images look like they could be represented with vector shapes,\n    * see if it is possible to convert them to shape layers and re-export your animation. Check\n-   * the documentation at http://airbnb.io/lottie for more information about importing shapes from\n+   * the documentation at <a href=\"http://airbnb.io/lottie\">airbnb.io/lottie</a> for more information about importing shapes from\n    * Sketch or Illustrator to avoid this.\n    */\n   public void setImageAssetsFolder(String imageAssetsFolder) {\n@@ -981,7 +983,7 @@ public Bitmap updateBitmap(String id, @Nullable Bitmap bitmap) {\n    * Be wary if you are using many images, however. Lottie is designed to work with vector shapes\n    * from After Effects. If your images look like they could be represented with vector shapes,\n    * see if it is possible to convert them to shape layers and re-export your animation. Check\n-   * the documentation at http://airbnb.io/lottie for more information about importing shapes from\n+   * the documentation at <a href=\"http://airbnb.io/lottie\">airbnb.io/lottie</a> for more information about importing shapes from\n    * Sketch or Illustrator to avoid this.\n    */\n   public void setImageAssetDelegate(ImageAssetDelegate assetDelegate) {\n@@ -1122,6 +1124,7 @@ private void setProgressInternal(\n   }\n \n   public long getDuration() {\n+    LottieComposition composition = getComposition();\n     return composition != null ? (long) composition.getDuration() : 0;\n   }\n \n@@ -1135,7 +1138,6 @@ public PerformanceTracker getPerformanceTracker() {\n   }\n \n   private void clearComposition() {\n-    composition = null;\n     lottieDrawable.clearComposition();\n   }\n \n@@ -1247,7 +1249,7 @@ public void disableExtraScaleModeInFitXY() {\n   }\n \n   public boolean addLottieOnCompositionLoadedListener(@NonNull LottieOnCompositionLoadedListener lottieOnCompositionLoadedListener) {\n-    LottieComposition composition = this.composition;\n+    LottieComposition composition = getComposition();\n     if (composition != null) {\n       lottieOnCompositionLoadedListener.onCompositionLoaded(composition);\n     }",
      "parent_sha": "fe412fa6c2a5612b4379538e9a9bea14bb415569"
    }
  },
  {
    "oid": "891e73fa1146196b4cde7c7873ca1a352fc40a58",
    "message": "Fix copy paste error (#1245)\n\nFixes #1242",
    "date": "2019-05-30T20:20:22Z",
    "url": "https://github.com/airbnb/lottie-android/commit/891e73fa1146196b4cde7c7873ca1a352fc40a58",
    "details": {
      "sha": "d16c6715310f2f7c385d5cfbcd9bda1f02026a2f",
      "filename": "lottie/src/main/java/com/airbnb/lottie/PerformanceTracker.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/891e73fa1146196b4cde7c7873ca1a352fc40a58/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FPerformanceTracker.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/891e73fa1146196b4cde7c7873ca1a352fc40a58/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FPerformanceTracker.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FPerformanceTracker.java?ref=891e73fa1146196b4cde7c7873ca1a352fc40a58",
      "patch": "@@ -64,7 +64,7 @@ public void addFrameListener(FrameListener frameListener) {\n   }\n \n   @SuppressWarnings(\"unused\") public void removeFrameListener(FrameListener frameListener) {\n-    frameListeners.add(frameListener);\n+    frameListeners.remove(frameListener);\n   }\n \n   public void clearRenderTimes() {",
      "parent_sha": "2d39d0f174c61e033618ad34cbf7da4576cfdc89"
    }
  },
  {
    "oid": "1bd63e28e51fbc476122a038427cb5936b81ff7c",
    "message": "Cleaned up logic for initializing bitmaps",
    "date": "2016-10-06T23:03:26Z",
    "url": "https://github.com/airbnb/lottie-android/commit/1bd63e28e51fbc476122a038427cb5936b81ff7c",
    "details": {
      "sha": "0a8ca17d3983d85d6a68f6bade066b7ee1f510bf",
      "filename": "lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java",
      "status": "modified",
      "additions": 14,
      "deletions": 11,
      "changes": 25,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/1bd63e28e51fbc476122a038427cb5936b81ff7c/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2FLotteAnimationView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/1bd63e28e51fbc476122a038427cb5936b81ff7c/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2FLotteAnimationView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2FLotteAnimationView.java?ref=1bd63e28e51fbc476122a038427cb5936b81ff7c",
      "patch": "@@ -36,11 +36,11 @@ public class LotteAnimationView extends ImageView {\n     /** Can be null because it is created async */\n     @Nullable private LotteComposition composition;\n     private boolean hasInvalidatedThisFrame;\n-    @Nullable private Bitmap mainBitmap;\n-    @Nullable private Bitmap maskBitmap;\n-    @Nullable private Bitmap matteBitmap;\n-    @Nullable private Bitmap mainBitmapForMatte;\n-    @Nullable private Bitmap maskBitmapForMatte;\n+    @Nullable private Bitmap mainBitmap = null;\n+    @Nullable private Bitmap maskBitmap = null;\n+    @Nullable private Bitmap matteBitmap = null;\n+    @Nullable private Bitmap mainBitmapForMatte = null;\n+    @Nullable private Bitmap maskBitmapForMatte = null;\n \n     public LotteAnimationView(Context context) {\n         super(context);\n@@ -204,12 +204,15 @@ private void buildSubviewsForComposition() {\n         Collections.reverse(reversedLayers);\n \n         Rect bounds = composition.getBounds();\n-        mainBitmap = (composition.hasMasks() || composition.hasMattes()) ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;\n-        maskBitmap = composition.hasMasks() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8) : null;\n-        matteBitmap = composition.hasMattes() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;\n-\n-        mainBitmapForMatte = null;\n-        maskBitmapForMatte = null;\n+        if (composition.hasMasks() || composition.hasMattes()) {\n+            mainBitmap = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888);\n+        }\n+        if (composition.hasMasks()) {\n+            maskBitmap = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8);\n+        }\n+        if (composition.hasMattes()) {\n+            matteBitmap = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888);\n+        }\n         LotteLayerView maskedLayer = null;\n         for (int i = 0; i < reversedLayers.size(); i++) {\n             LotteLayer layer = reversedLayers.get(i);",
      "parent_sha": "13be6c7cf20140b8c0bf216bab81a405d9b54e66"
    }
  },
  {
    "oid": "645d5eab971cd6a5fa09d92b62b7d4285404398f",
    "message": "Added a grid option to the list fragment to display multiple files at the same time\n\nTODO: implement the fragment",
    "date": "2016-10-06T23:03:15Z",
    "url": "https://github.com/airbnb/lottie-android/commit/645d5eab971cd6a5fa09d92b62b7d4285404398f",
    "details": {
      "sha": "f49efba886d0b7c0d0a8abece90d104a3efbe579",
      "filename": "LotteSample/src/main/java/com/airbnb/lotte/samples/ListFragment.java",
      "status": "modified",
      "additions": 31,
      "deletions": 12,
      "changes": 43,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/645d5eab971cd6a5fa09d92b62b7d4285404398f/LotteSample%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2Fsamples%2FListFragment.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/645d5eab971cd6a5fa09d92b62b7d4285404398f/LotteSample%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2Fsamples%2FListFragment.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/LotteSample%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2Fsamples%2FListFragment.java?ref=645d5eab971cd6a5fa09d92b62b7d4285404398f",
      "patch": "@@ -11,6 +11,7 @@\n import android.view.View;\n import android.view.ViewGroup;\n import android.widget.TextView;\n+import android.widget.Toast;\n \n import java.io.IOException;\n \n@@ -57,8 +58,13 @@ private void onFileClicked(String fileName) {\n                 .commit();\n     }\n \n-    final class FileAdapter extends RecyclerView.Adapter<FileViewHolder> {\n+    private void onGridClicked() {\n+        Toast.makeText(getContext(), \"Grid\", Toast.LENGTH_SHORT).show();\n+    }\n \n+    final class FileAdapter extends RecyclerView.Adapter<StringViewHolder> {\n+        static final int VIEW_TYPE_GRID = 1;\n+        static final int VIEW_TYPE_FILE = 2;\n \n         @Nullable private String[] files = null;\n \n@@ -68,37 +74,50 @@ void setFiles(@Nullable String[] files) {\n         }\n \n         @Override\n-        public FileViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n-            return new FileViewHolder(parent);\n+        public StringViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n+            return new StringViewHolder(parent);\n         }\n \n         @Override\n-        public void onBindViewHolder(FileViewHolder holder, int position) {\n-            //noinspection ConstantConditions\n-            holder.bind(files[position]);\n+        public void onBindViewHolder(StringViewHolder holder, int position) {\n+            if (holder.getItemViewType() == VIEW_TYPE_GRID) {\n+                holder.bind(\"Grid\");\n+            } else {\n+                //noinspection ConstantConditions\n+                holder.bind(files[position]);\n+            }\n         }\n \n         @Override\n         public int getItemCount() {\n-            return files == null ? 0 : files.length;\n+            return (files == null ? 0 : files.length) + 1;\n+        }\n+\n+        @Override\n+        public int getItemViewType(int position) {\n+            return position == 0 ? VIEW_TYPE_GRID : VIEW_TYPE_FILE;\n         }\n     }\n \n-    final class FileViewHolder extends RecyclerView.ViewHolder {\n+    final class StringViewHolder extends RecyclerView.ViewHolder {\n \n         @BindView(R.id.file_name) TextView fileNameView;\n \n-        FileViewHolder(ViewGroup parent) {\n+        StringViewHolder(ViewGroup parent) {\n             super(LayoutInflater.from(parent.getContext()).inflate(R.layout.view_holder_file, parent, false));\n             ButterKnife.bind(this, itemView);\n         }\n \n-        void bind(final String fileName) {\n-            fileNameView.setText(fileName);\n+        void bind(final String name) {\n+            fileNameView.setText(name);\n             itemView.setOnClickListener(new View.OnClickListener() {\n                 @Override\n                 public void onClick(View v) {\n-                    onFileClicked(fileName);\n+                    if (getItemViewType() == FileAdapter.VIEW_TYPE_GRID) {\n+                        onGridClicked();\n+                    } else {\n+                        onFileClicked(name);\n+                    }\n                 }\n             });\n         }",
      "parent_sha": "1f53f4ed673efa96d6cb7872242cfb5259444d14"
    }
  },
  {
    "oid": "e892251411c095b70aae319f6b075f615392d3fb",
    "message": "Turn off debug mode",
    "date": "2016-10-06T23:03:26Z",
    "url": "https://github.com/airbnb/lottie-android/commit/e892251411c095b70aae319f6b075f615392d3fb",
    "details": {
      "sha": "f91c4c21320098ab3d10b584bbf2222dbf461e51",
      "filename": "lotte/src/main/java/com/airbnb/lotte/L.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/e892251411c095b70aae319f6b075f615392d3fb/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2FL.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/e892251411c095b70aae319f6b075f615392d3fb/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2FL.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2FL.java?ref=e892251411c095b70aae319f6b075f615392d3fb",
      "patch": "@@ -1,5 +1,5 @@\n package com.airbnb.lotte;\n \n public class L {\n-    public static boolean DBG = true;\n+    public static boolean DBG = false;\n }",
      "parent_sha": "808a5e8a742fab6156093b96ea651e23e31c40be"
    }
  },
  {
    "oid": "bd8818896b0cecce41e0540b831e31466f4ecec2",
    "message": "Only add the first path group if it is non-null\n\nFixes #210",
    "date": "2017-03-24T19:05:29Z",
    "url": "https://github.com/airbnb/lottie-android/commit/bd8818896b0cecce41e0540b831e31466f4ecec2",
    "details": {
      "sha": "f8d1db608545c3bb6fc54dc1daaf4a0ebb2dbada",
      "filename": "lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/bd8818896b0cecce41e0540b831e31466f4ecec2/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FBaseStrokeContent.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/bd8818896b0cecce41e0540b831e31466f4ecec2/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FBaseStrokeContent.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FBaseStrokeContent.java?ref=bd8818896b0cecce41e0540b831e31466f4ecec2",
      "patch": "@@ -104,7 +104,9 @@ abstract class BaseStrokeContent implements DrawingContent, BaseKeyframeAnimatio\n         currentPathGroup.paths.add((PathContent) content);\n       }\n     }\n-    pathGroups.add(currentPathGroup);\n+    if (currentPathGroup != null) {\n+      pathGroups.add(currentPathGroup);\n+    }\n   }\n \n   @Override public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {",
      "parent_sha": "b7bd9630384e427b4fc3b40a84a65de193ba63f7"
    }
  },
  {
    "oid": "88d776e81b17db586a5f14643383e8b3246b9699",
    "message": "Use save and restore instead of manually restoring clipRect\n\nViews/drawables/canvases are not supposed to be able to expand their\nclip rect so that views can properly clip their children.\nSee these docs for more info: https://developer.android.com/reference/android/graphics/Canvas.html#clipRect(android.graphics.RectF, android.graphics.Region.Op)\n\nWe were relying on undesired behavior before to restore the clip\nrect which seemed to work fine for software accelerated canvases\nbut not hardware accelerated ones. Swiching to save/restore is not\nonly more accurate but fixes clipping issues.\nFixes #457",
    "date": "2017-09-20T01:49:45Z",
    "url": "https://github.com/airbnb/lottie-android/commit/88d776e81b17db586a5f14643383e8b3246b9699",
    "details": {
      "sha": "62c2227ecf1b5cfaa8f041df21dcdd4bc04c18ab",
      "filename": "lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/88d776e81b17db586a5f14643383e8b3246b9699/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FCompositionLayer.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/88d776e81b17db586a5f14643383e8b3246b9699/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FCompositionLayer.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FCompositionLayer.java?ref=88d776e81b17db586a5f14643383e8b3246b9699",
      "patch": "@@ -3,9 +3,7 @@\n import android.graphics.Canvas;\n import android.graphics.ColorFilter;\n import android.graphics.Matrix;\n-import android.graphics.Rect;\n import android.graphics.RectF;\n-import android.graphics.Region;\n import android.support.annotation.FloatRange;\n import android.support.annotation.Nullable;\n import android.support.v4.util.LongSparseArray;\n@@ -23,7 +21,6 @@ public class CompositionLayer extends BaseLayer {\n   @Nullable private final BaseKeyframeAnimation<Float, Float> timeRemapping;\n   private final List<BaseLayer> layers = new ArrayList<>();\n   private final RectF rect = new RectF();\n-  private final Rect originalClipRect = new Rect();\n   private final RectF newClipRect = new RectF();\n \n   @Nullable private Boolean hasMatte;\n@@ -79,7 +76,7 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La\n \n   @Override void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {\n     L.beginSection(\"CompositionLayer#draw\");\n-    canvas.getClipBounds(originalClipRect);\n+    canvas.save();\n     newClipRect.set(0, 0, layerModel.getPreCompWidth(), layerModel.getPreCompHeight());\n     parentMatrix.mapRect(newClipRect);\n \n@@ -93,9 +90,7 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La\n         layer.draw(canvas, parentMatrix, parentAlpha);\n       }\n     }\n-    if (!originalClipRect.isEmpty()) {\n-      canvas.clipRect(originalClipRect, Region.Op.REPLACE);\n-    }\n+    canvas.restore();\n     L.endSection(\"CompositionLayer#draw\");\n   }\n ",
      "parent_sha": "b226b33398d4b3eeea3b4ca4695e0905b41ec818"
    }
  },
  {
    "oid": "a621fff578ebbe02f8c9222304f379e58ef6e9e6",
    "message": "Fixed a bug with path animations on Jellybean\n\nPointF didn't have an `equals(PointF other)` method until jb-mr2.\nPrior to that, you had to use `equals(float x, float y)`. This\nbroke path animations which relied on that method.\nThis commit uses the backwards compatible `equals(float x, float y)`\nmethod.\n\nFixes #227",
    "date": "2017-03-30T05:38:38Z",
    "url": "https://github.com/airbnb/lottie-android/commit/a621fff578ebbe02f8c9222304f379e58ef6e9e6",
    "details": {
      "sha": "a9387970848be51f8a3a8e2d6a63186770087543",
      "filename": "lottie/src/main/java/com/airbnb/lottie/PathKeyframe.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/a621fff578ebbe02f8c9222304f379e58ef6e9e6/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FPathKeyframe.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/a621fff578ebbe02f8c9222304f379e58ef6e9e6/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FPathKeyframe.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FPathKeyframe.java?ref=a621fff578ebbe02f8c9222304f379e58ef6e9e6",
      "patch": "@@ -37,8 +37,10 @@ static PathKeyframe newInstance(JSONObject json, LottieComposition composition,\n       PathKeyframe pathKeyframe = new PathKeyframe(composition, keyframe.startValue,\n           keyframe.endValue, keyframe.interpolator, keyframe.startFrame, keyframe.endFrame);\n \n+      boolean equals = keyframe.endValue != null && keyframe.startValue != null &&\n+          keyframe.startValue.equals(keyframe.endValue.x, keyframe.endValue.y);\n       //noinspection ConstantConditions\n-      if (keyframe.endValue != null && !keyframe.startValue.equals(keyframe.endValue)) {\n+      if (pathKeyframe.endValue != null && !equals) {\n         pathKeyframe.path = Utils.createPath(keyframe.startValue, keyframe.endValue, cp1, cp2);\n       }\n       return pathKeyframe;",
      "parent_sha": "246b2565327a5bddd9d3f7f1afba31038abab70e"
    }
  },
  {
    "oid": "df4c46fd17a83208ac3af10f625818b7ef0ba8c4",
    "message": "Expose cancelAnimation on LottieDrawable\n\nFixes #180",
    "date": "2017-03-13T06:05:55Z",
    "url": "https://github.com/airbnb/lottie-android/commit/df4c46fd17a83208ac3af10f625818b7ef0ba8c4",
    "details": {
      "sha": "839d9e070d1a99e916a6293e77a3806b8e844a21",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/df4c46fd17a83208ac3af10f625818b7ef0ba8c4/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/df4c46fd17a83208ac3af10f625818b7ef0ba8c4/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java?ref=df4c46fd17a83208ac3af10f625818b7ef0ba8c4",
      "patch": "@@ -291,7 +291,7 @@ private void updateBounds() {\n         (int) (composition.getBounds().height() * scale));\n   }\n \n-  void cancelAnimation() {\n+  @SuppressWarnings(\"WeakerAccess\") public void cancelAnimation() {\n     playAnimationWhenCompositionAdded = false;\n     reverseAnimationWhenCompositionAdded = false;\n     animator.cancel();",
      "parent_sha": "aee7eb45a55e22ecde135b82c4a558b6badbd9bc"
    }
  },
  {
    "oid": "d884a67d525965d369a73659b9a7a0164c7ea06c",
    "message": "Add x-zip and x-zip-compressed as recognized .zip header mime types (#1954)\n\nFixes #1950",
    "date": "2021-11-28T03:51:21Z",
    "url": "https://github.com/airbnb/lottie-android/commit/d884a67d525965d369a73659b9a7a0164c7ea06c",
    "details": {
      "sha": "c9ae2616cb7f1880410a9cdd03183d68fa66857c",
      "filename": "lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/d884a67d525965d369a73659b9a7a0164c7ea06c/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fnetwork%2FNetworkFetcher.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/d884a67d525965d369a73659b9a7a0164c7ea06c/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fnetwork%2FNetworkFetcher.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fnetwork%2FNetworkFetcher.java?ref=d884a67d525965d369a73659b9a7a0164c7ea06c",
      "patch": "@@ -107,7 +107,10 @@ private LottieResult<LottieComposition> fromInputStream(@NonNull String url, @No\n       // in the result which is more useful than failing here.\n       contentType = \"application/json\";\n     }\n-    if (contentType.contains(\"application/zip\") || url.split(\"\\\\?\")[0].endsWith(\".lottie\")) {\n+    if (contentType.contains(\"application/zip\") ||\n+        contentType.contains(\"application/x-zip\") ||\n+        contentType.contains(\"application/x-zip-compressed\") ||\n+        url.split(\"\\\\?\")[0].endsWith(\".lottie\")) {\n       Logger.debug(\"Handling zip response.\");\n       extension = FileExtension.ZIP;\n       result = fromZipStream(url, inputStream, cacheKey);",
      "parent_sha": "37893c8b2913de93388be35f690a24aa298b556c"
    }
  },
  {
    "oid": "ebb61868874554717b1fedd96cb34edf28105293",
    "message": "Prevent a crash when receiving an unexpected gradient length\n\n#236",
    "date": "2017-03-30T16:41:25Z",
    "url": "https://github.com/airbnb/lottie-android/commit/ebb61868874554717b1fedd96cb34edf28105293",
    "details": {
      "sha": "51b0bf17e48247ad385621fc97e5fa3a106db143",
      "filename": "lottie/src/main/java/com/airbnb/lottie/AnimatableGradientColorValue.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/ebb61868874554717b1fedd96cb34edf28105293/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FAnimatableGradientColorValue.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/ebb61868874554717b1fedd96cb34edf28105293/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FAnimatableGradientColorValue.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FAnimatableGradientColorValue.java?ref=ebb61868874554717b1fedd96cb34edf28105293",
      "patch": "@@ -1,6 +1,7 @@\n package com.airbnb.lottie;\n \n import android.graphics.Color;\n+import android.util.Log;\n \n import org.json.JSONArray;\n import org.json.JSONObject;\n@@ -48,7 +49,13 @@ private ValueFactory() {\n       GradientColor gradientColor = new GradientColor(positions, colors);\n       int r = 0;\n       int g = 0;\n-      for (int i = 0; i < array.length(); i++) {\n+      if (array.length() != size * 4) {\n+        Log.w(L.TAG, \"Unexpected gradient length: \" + array.length() +\n+            \". Expected \" + (size * 4) + \". This may affect the appearance of the gradient. \" +\n+            \"Make sure to save your After Effects file before exporting an animation with \" +\n+            \"gradients.\");\n+      }\n+      for (int i = 0; i < size * 4; i++) {\n         int colorIndex = i / 4;\n         double value = array.optDouble(i);\n         switch (i % 4) {",
      "parent_sha": "57f8b733d34f74d0d508a24f02fbdabaf32eccc2"
    }
  },
  {
    "oid": "8e5887a5320946a262a036d46bb0d736436035a1",
    "message": "Prevent a crash for letters that have no shapes\n\nFixes #445",
    "date": "2017-09-05T16:37:28Z",
    "url": "https://github.com/airbnb/lottie-android/commit/8e5887a5320946a262a036d46bb0d736436035a1",
    "details": {
      "sha": "17fe4010283926019df4d6ce60f042625ab0494e",
      "filename": "lottie/src/main/java/com/airbnb/lottie/model/FontCharacter.java",
      "status": "modified",
      "additions": 11,
      "deletions": 6,
      "changes": 17,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/8e5887a5320946a262a036d46bb0d736436035a1/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2FFontCharacter.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/8e5887a5320946a262a036d46bb0d736436035a1/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2FFontCharacter.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2FFontCharacter.java?ref=8e5887a5320946a262a036d46bb0d736436035a1",
      "patch": "@@ -61,15 +61,20 @@ public static FontCharacter newInstance(JSONObject json, LottieComposition compo\n       double width = json.optDouble(\"w\");\n       String style = json.optString(\"style\");\n       String fontFamily = json.optString(\"fFamily\");\n-      JSONArray shapesJson = json.optJSONObject(\"data\").optJSONArray(\"shapes\");\n+      JSONObject data = json.optJSONObject(\"data\");\n       List<ShapeGroup> shapes = Collections.emptyList();\n-      if (shapesJson != null) {\n-        shapes = new ArrayList<>(shapesJson.length());\n-        for (int i = 0; i < shapesJson.length(); i++) {\n-          shapes.add(\n-              (ShapeGroup) ShapeGroup.shapeItemWithJson(shapesJson.optJSONObject(i), composition));\n+\n+      if (data != null) {\n+        JSONArray shapesJson = data.optJSONArray(\"shapes\");\n+        if (shapesJson != null) {\n+          shapes = new ArrayList<>(shapesJson.length());\n+          for (int i = 0; i < shapesJson.length(); i++) {\n+            shapes.add(\n+                (ShapeGroup) ShapeGroup.shapeItemWithJson(shapesJson.optJSONObject(i), composition));\n+          }\n         }\n       }\n+\n       return new FontCharacter(shapes, character, size, width, style, fontFamily);\n     }\n   }",
      "parent_sha": "51381075077d0d0914b4b668e12a498fed4e433c"
    }
  },
  {
    "oid": "ddd1ac0a7f1929d59c4b5bd2a84aa16ca947ef75",
    "message": "Fix progress calculation logic when the layer is time-remapped layer (#1368)\n\nThere are 2 problem on progress calculating with the layer that is applied time-remapping.\r\n\r\nIf the layer with time-remapping is placed on the way of animation, the progress calculation becomes wrong.\r\nThe value that is got from timeRemapping is already adjusted with layerModel.getStartProgress().\r\nIf the root layer is started from on the way (LottieComposition#startFrame isn't 0), the child layer with time-remapping is drawn wrongly.\r\nThe value that is got from timeRemapping isn't adjusted with LottieComposition#startFrame",
    "date": "2019-08-27T20:02:02Z",
    "url": "https://github.com/airbnb/lottie-android/commit/ddd1ac0a7f1929d59c4b5bd2a84aa16ca947ef75",
    "details": {
      "sha": "28e6e85c2f286cb99148d84c72099e3ef1aee046",
      "filename": "lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/ddd1ac0a7f1929d59c4b5bd2a84aa16ca947ef75/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FCompositionLayer.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/ddd1ac0a7f1929d59c4b5bd2a84aa16ca947ef75/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FCompositionLayer.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FCompositionLayer.java?ref=ddd1ac0a7f1929d59c4b5bd2a84aa16ca947ef75",
      "patch": "@@ -117,14 +117,17 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La\n     super.setProgress(progress);\n     if (timeRemapping != null) {\n       float duration = lottieDrawable.getComposition().getDuration();\n-      long remappedTime = (long) (timeRemapping.getValue() * 1000);\n+      float compositionDelayTime = layerModel.getComposition().getStartFrame() / layerModel.getComposition().getFrameRate() * 1000;\n+      long remappedTime = (long) (timeRemapping.getValue() * 1000 - compositionDelayTime);\n       progress = remappedTime / duration;\n     }\n     if (layerModel.getTimeStretch() != 0) {\n       progress /= layerModel.getTimeStretch();\n     }\n \n-    progress -= layerModel.getStartProgress();\n+    if (timeRemapping == null) {\n+      progress -= layerModel.getStartProgress();\n+    }\n     for (int i = layers.size() - 1; i >= 0; i--) {\n       layers.get(i).setProgress(progress);\n     }",
      "parent_sha": "e2b0041a285c08ecb34d4055e66650664aef92d2"
    }
  },
  {
    "oid": "79cd11e26e1c70f812501a7770b213b126fdf6ea",
    "message": "Only set the mattePaint xfer mode once",
    "date": "2016-10-16T03:01:19Z",
    "url": "https://github.com/airbnb/lottie-android/commit/79cd11e26e1c70f812501a7770b213b126fdf6ea",
    "details": {
      "sha": "89e78c6f63b8e317ba64b946fe7c649030c101b9",
      "filename": "lottie/src/main/java/com/airbnb/lottie/layers/LottieLayerView.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/79cd11e26e1c70f812501a7770b213b126fdf6ea/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Flayers%2FLottieLayerView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/79cd11e26e1c70f812501a7770b213b126fdf6ea/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Flayers%2FLottieLayerView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Flayers%2FLottieLayerView.java?ref=79cd11e26e1c70f812501a7770b213b126fdf6ea",
      "patch": "@@ -65,6 +65,7 @@ public LottieLayerView(LottieLayer layerModel, LottieComposition composition, Ca\n         this.maskBitmap = maskBitmap;\n         this.matteBitmap = matteBitmap;\n         this.contentBitmap = mainBitmap;\n+        mattePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));\n         setBounds(composition.getBounds());\n         if (contentBitmap != null) {\n             contentCanvas = new Canvas(contentBitmap);\n@@ -242,7 +243,6 @@ public void draw(@NonNull Canvas mainCanvas) {\n \n         if (matteCanvas != null && matteBitmap != null && matte != null) {\n             matte.draw(matteCanvas);\n-            mattePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));\n             //noinspection ConstantConditions\n             matteCanvas.drawBitmap(mainBitmap, 0, 0, mattePaint);\n             mainCanvas.drawBitmap(matteBitmap, 0, 0, mainCanvasPaint);",
      "parent_sha": "ad30062811b0214ca6595164e8ed23f59fd0b685"
    }
  },
  {
    "oid": "2ca720a16a1345b3b65079e285dcc1ee152c0545",
    "message": "Be more lenient when getCallback() is not set",
    "date": "2017-05-29T18:47:56Z",
    "url": "https://github.com/airbnb/lottie-android/commit/2ca720a16a1345b3b65079e285dcc1ee152c0545",
    "details": {
      "sha": "ae866029c326c9f4b009914890ccfe3684f6d845",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/2ca720a16a1345b3b65079e285dcc1ee152c0545/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/2ca720a16a1345b3b65079e285dcc1ee152c0545/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java?ref=2ca720a16a1345b3b65079e285dcc1ee152c0545",
      "patch": "@@ -139,14 +139,6 @@ boolean enableMergePathsForKitKatAndAbove() {\n    * @return True if the composition is different from the previously set composition, false otherwise.\n    */\n   @SuppressWarnings(\"WeakerAccess\") public boolean setComposition(LottieComposition composition) {\n-    if (getCallback() == null) {\n-      throw new IllegalStateException(\n-          \"You or your view must set a Drawable.Callback before setting the composition. This \" +\n-              \"gets done automatically when added to an ImageView. \" +\n-              \"Either call ImageView.setImageDrawable() before setComposition() or call \" +\n-              \"setCallback(yourView.getCallback()) first.\");\n-    }\n-\n     if (this.composition == composition) {\n       return false;\n     }\n@@ -449,10 +441,19 @@ private void updateBounds() {\n \n   @Nullable\n   Bitmap getImageAsset(String id) {\n-    return getImageAssetBitmapManager().bitmapForId(id);\n+    ImageAssetBitmapManager bm = getImageAssetBitmapManager();\n+    if (bm != null) {\n+      return bm.bitmapForId(id);\n+    }\n+    return null;\n   }\n \n   private ImageAssetBitmapManager getImageAssetBitmapManager() {\n+    if (getCallback() == null) {\n+      // We can't get a bitmap since we can't get a Context from the callback.\n+      return null;\n+    }\n+\n     if (imageAssetBitmapManager != null && !imageAssetBitmapManager.hasSameContext(getContext())) {\n       imageAssetBitmapManager.recycleBitmaps();\n       imageAssetBitmapManager = null;",
      "parent_sha": "ee71393acf578cf040a69c30743415a30d0fd223"
    }
  },
  {
    "oid": "504bbdc9a438415f6539edfec3d916f1d8e86e3b",
    "message": "Better tangent extrapolation implementation when using bounce easings (#2459)",
    "date": "2024-02-02T23:14:55Z",
    "url": "https://github.com/airbnb/lottie-android/commit/504bbdc9a438415f6539edfec3d916f1d8e86e3b",
    "details": {
      "sha": "7418405d46d1687ec02b9110091300a2960e149a",
      "filename": "lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java",
      "status": "modified",
      "additions": 8,
      "deletions": 11,
      "changes": 19,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/504bbdc9a438415f6539edfec3d916f1d8e86e3b/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FPathKeyframeAnimation.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/504bbdc9a438415f6539edfec3d916f1d8e86e3b/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FPathKeyframeAnimation.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FPathKeyframeAnimation.java?ref=504bbdc9a438415f6539edfec3d916f1d8e86e3b",
      "patch": "@@ -45,17 +45,14 @@ pathKeyframe.startValue, pathKeyframe.endValue, getLinearCurrentKeyframeProgress\n \n     float length = pathMeasure.getLength();\n \n-    if (keyframeProgress < 0) {\n-      pathMeasure.getPosTan(0, pos, tangent);\n-      float tangentAmount = keyframeProgress * length;\n-      point.set(pos[0] + tangent[0] * tangentAmount, pos[1] + tangent[1] * tangentAmount);\n-    } else if (keyframeProgress > 1) {\n-      pathMeasure.getPosTan(length, pos, tangent);\n-      float tangentAmount = (keyframeProgress - 1) * length;\n-      point.set(pos[0] + tangent[0] * tangentAmount, pos[1] + tangent[1] * tangentAmount);\n-    } else {\n-      pathMeasure.getPosTan(keyframeProgress * length, pos, null);\n-      point.set(pos[0], pos[1]);\n+    float distance =  keyframeProgress * length;\n+    pathMeasure.getPosTan(distance, pos, tangent);\n+    point.set(pos[0], pos[1]);\n+\n+    if (distance < 0) {\n+      point.offset(tangent[0] * distance, tangent[1] * distance);\n+    } else if (distance > length) {\n+      point.offset(tangent[0] * (distance - length), tangent[1] * (distance - length));\n     }\n     return point;\n   }",
      "parent_sha": "a9d3a1649c2d9d8f1d1d56311f0898b0b5502780"
    }
  },
  {
    "oid": "1835b403428e86e7d06e9cab6f9d4bf230ff3c6f",
    "message": "Fix race condition with min/max frame (#694)\n\nComposition can be loaded after we have set a custom minFrame and/or maxFrame.\r\nThe composition will override custom values.",
    "date": "2018-03-21T01:36:11Z",
    "url": "https://github.com/airbnb/lottie-android/commit/1835b403428e86e7d06e9cab6f9d4bf230ff3c6f",
    "details": {
      "sha": "4080c6a06cf525b20a0f102ea3864868e608aeb2",
      "filename": "lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/1835b403428e86e7d06e9cab6f9d4bf230ff3c6f/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Futils%2FLottieValueAnimator.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/1835b403428e86e7d06e9cab6f9d4bf230ff3c6f/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Futils%2FLottieValueAnimator.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Futils%2FLottieValueAnimator.java?ref=1835b403428e86e7d06e9cab6f9d4bf230ff3c6f",
      "patch": "@@ -121,7 +121,11 @@ private float getFrameDurationNs() {\n \n   public void setComposition(LottieComposition composition) {\n     this.composition = composition;\n-    setMinAndMaxFrames((int) composition.getStartFrame(), (int) composition.getEndFrame());\n+\n+    setMinAndMaxFrames(\n+        (int) Math.max(this.minFrame, composition.getStartFrame()),\n+        (int) Math.min(this.maxFrame, composition.getEndFrame())\n+    );\n     setFrame((int) frame);\n     lastFrameTimeNs = System.nanoTime();\n   }",
      "parent_sha": "c8cd302fec221fd3f084f5c4cccd09c2717f7818"
    }
  },
  {
    "oid": "e686cb75ac099d87d974c1393f83b28f5ebee871",
    "message": "Reverted ShapeLayer#trimPath because it was broken",
    "date": "2016-12-07T00:20:48Z",
    "url": "https://github.com/airbnb/lottie-android/commit/e686cb75ac099d87d974c1393f83b28f5ebee871",
    "details": {
      "sha": "793fa7b9b30cbb8502bf18d0c13386b5900f60f2",
      "filename": "lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java",
      "status": "modified",
      "additions": 16,
      "deletions": 20,
      "changes": 36,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/e686cb75ac099d87d974c1393f83b28f5ebee871/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Flayers%2FShapeLayer.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/e686cb75ac099d87d974c1393f83b28f5ebee871/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Flayers%2FShapeLayer.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Flayers%2FShapeLayer.java?ref=e686cb75ac099d87d974c1393f83b28f5ebee871",
      "patch": "@@ -13,7 +13,6 @@\n import android.support.annotation.IntRange;\n import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n-import android.util.Log;\n \n import com.airbnb.lottie.animation.KeyframeAnimation;\n import com.airbnb.lottie.model.ShapeStroke;\n@@ -166,28 +165,25 @@ private void onPathPropertiesChanged() {\n             currentPath.transform(scaleMatrix, currentPath);\n         }\n \n-        if (needsStrokeStart || needsStrokeEnd || needsStrokeOffset) {\n+        if (needsStrokeStart || needsStrokeEnd) {\n             tempPath.set(currentPath);\n             pathMeasure.setPath(tempPath, false);\n-            currentPathStrokeOffset = strokeOffset.getValue();\n-            currentPathStrokeStart = strokeStart.getValue();\n-            currentPathStrokeEnd = strokeEnd.getValue();\n             float length = pathMeasure.getLength();\n-            if (length > 0) {\n-                float offset = length * currentPathStrokeOffset / 100f;\n-                float start = (length * currentPathStrokeStart / 100f + offset);\n-                float end = (length * currentPathStrokeEnd / 100f + offset);\n-\n-                currentPath.reset();\n-                // Workaround to get hardware acceleration on KitKat\n-                // https://developer.android.com/reference/android/graphics/PathMeasure.html#getSegment(float, float, android.graphics.Path, boolean)\n-                currentPath.rLineTo(0, 0);\n-                pathMeasure.getSegment(\n-                        Math.min(start, end),\n-                        Math.max(start, end),\n-                        currentPath,\n-                        true);\n-            }\n+            float start = length * strokeStart.getValue() / 100f;\n+            float end = length * strokeEnd.getValue() / 100f;\n+            // TODO: use offset.\n+\n+            currentPath.reset();\n+            // Workaround to get hardware acceleration on KitKat\n+            // https://developer.android.com/reference/android/graphics/PathMeasure.html#getSegment(float, float, android.graphics.Path, boolean)\n+            currentPath.rLineTo(0, 0);\n+            currentPathStrokeStart = Math.min(start, end);\n+            currentPathStrokeEnd = Math.max(start, end);\n+            pathMeasure.getSegment(\n+                    currentPathStrokeStart,\n+                    currentPathStrokeEnd,\n+                    currentPath,\n+                    true);\n         }\n \n         invalidateSelf();",
      "parent_sha": "803ff0daea908a5f2fcae05eafd5ee0539c5901d"
    }
  },
  {
    "oid": "6ac86a7e4dff12308bb2100feb510687cc30049c",
    "message": "Display last animated text value (#1689)\n\nWhen using animated text, the last value was not shown. Issue can be reproduce with this json: https://assets7.lottiefiles.com/packages/lf20_fteywrno.json\r\n\r\nCo-authored-by: Frantisek Nagy <frantisek.nagy@erstegroup.com>",
    "date": "2020-11-27T23:35:41Z",
    "url": "https://github.com/airbnb/lottie-android/commit/6ac86a7e4dff12308bb2100feb510687cc30049c",
    "details": {
      "sha": "0c09f94a5027d4ba1d6edbdcde7e79e99c457213",
      "filename": "lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TextKeyframeAnimation.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/6ac86a7e4dff12308bb2100feb510687cc30049c/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FTextKeyframeAnimation.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/6ac86a7e4dff12308bb2100feb510687cc30049c/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FTextKeyframeAnimation.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FTextKeyframeAnimation.java?ref=6ac86a7e4dff12308bb2100feb510687cc30049c",
      "patch": "@@ -11,6 +11,9 @@ public TextKeyframeAnimation(List<Keyframe<DocumentData>> keyframes) {\n   }\n \n   @Override DocumentData getValue(Keyframe<DocumentData> keyframe, float keyframeProgress) {\n-    return keyframe.startValue;\n+    if (keyframeProgress != 1.0f || keyframe.endValue == null)\n+      return keyframe.startValue;\n+    else\n+      return keyframe.endValue;\n   }\n }",
      "parent_sha": "6259afbd530ba3352f613608b526a5b52b5f14db"
    }
  },
  {
    "oid": "16062cb69f65e43eb1227e4ee4a926a8ef219487",
    "message": "Set the value callback value even if the animation is not set yet\n\nThis fixed an issue where the original addValueCallback has been deferred as\na lazy composition task while the composition is loading so the animation has\nnot yet been set on the value callback.\nFixes #640",
    "date": "2018-03-11T07:41:04Z",
    "url": "https://github.com/airbnb/lottie-android/commit/16062cb69f65e43eb1227e4ee4a926a8ef219487",
    "details": {
      "sha": "883f5cdf8b5c698d4a265a7c546a43df2beca0f4",
      "filename": "lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/16062cb69f65e43eb1227e4ee4a926a8ef219487/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fvalue%2FLottieValueCallback.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/16062cb69f65e43eb1227e4ee4a926a8ef219487/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fvalue%2FLottieValueCallback.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fvalue%2FLottieValueCallback.java?ref=16062cb69f65e43eb1227e4ee4a926a8ef219487",
      "patch": "@@ -40,8 +40,8 @@ public T getValue(LottieFrameInfo<T> frameInfo) {\n   }\n \n   public final void setValue(@Nullable T value) {\n+    this.value = value;\n     if (animation != null) {\n-      this.value = value;\n       animation.notifyListeners();\n     }\n   }",
      "parent_sha": "3aaeb63315304f3627775ee18e5676537e9c3d89"
    }
  },
  {
    "oid": "2b097d7ff858b850e55d1e4674a1b997d0308b40",
    "message": "Don't udpate progress or observable if the value hasn't changed",
    "date": "2016-10-06T23:03:25Z",
    "url": "https://github.com/airbnb/lottie-android/commit/2b097d7ff858b850e55d1e4674a1b997d0308b40",
    "details": {
      "sha": "30d895ea117ac68bb59cf2379c468bb449dfef49",
      "filename": "lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/2b097d7ff858b850e55d1e4674a1b997d0308b40/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2Futils%2FLotteKeyframeAnimation.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/2b097d7ff858b850e55d1e4674a1b997d0308b40/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2Futils%2FLotteKeyframeAnimation.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2Futils%2FLotteKeyframeAnimation.java?ref=2b097d7ff858b850e55d1e4674a1b997d0308b40",
      "patch": "@@ -66,11 +66,14 @@ public void addUpdateListener(AnimationListener<T> listener) {\n     public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n         if (progress < getStartDelayProgress()) {\n             progress = 0f;\n-        } else if (progress > getDurationEndProgress()){\n+        } else if (progress > getDurationEndProgress()) {\n             progress = 1f;\n         } else {\n             progress = (progress - getStartDelayProgress()) / getDurationRangeProgress();\n         }\n+        if (progress == this.progress) {\n+            return;\n+        }\n         this.progress = progress;\n \n         for (int i = 0; i < listeners.size(); i++) {",
      "parent_sha": "0b3506bed35fae5b90015a00cd18e5d006972ef1"
    }
  },
  {
    "oid": "018425f68aafbf061bb189c3d00745503d07e073",
    "message": "Fixed a bug in inheriting layer alpha from parent layers",
    "date": "2017-01-23T21:53:18Z",
    "url": "https://github.com/airbnb/lottie-android/commit/018425f68aafbf061bb189c3d00745503d07e073",
    "details": {
      "sha": "705df1e55979dd748047df9fcbdea34c11dedcc2",
      "filename": "lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/018425f68aafbf061bb189c3d00745503d07e073/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Flayers%2FAnimatableLayer.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/018425f68aafbf061bb189c3d00745503d07e073/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Flayers%2FAnimatableLayer.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Flayers%2FAnimatableLayer.java?ref=018425f68aafbf061bb189c3d00745503d07e073",
      "patch": "@@ -172,7 +172,8 @@ void setAlpha(KeyframeAnimation<Integer> alpha) {\n \n     @Override\n     public int getAlpha() {\n-        return (int) (alpha == null ? 255 : alpha.getValue() * (parentLayer == null ? 1f : parentLayer.getAlpha() / 255f));\n+        return (int) ((int) (alpha == null ? 1f : alpha.getValue()) *\n+                (parentLayer == null ? 1f : parentLayer.getAlpha() / 255f) * 255);\n     }\n \n     @Override",
      "parent_sha": "8af17ab35d3d577856a11c4c28d4b8e31ee5e75b"
    }
  },
  {
    "oid": "7ed1adb5124d0704085204abf73385e46cb44af5",
    "message": "Update the initial value of the inOutAnimation",
    "date": "2016-10-06T23:03:20Z",
    "url": "https://github.com/airbnb/lottie-android/commit/7ed1adb5124d0704085204abf73385e46cb44af5",
    "details": {
      "sha": "7263ecd3d2da00fbb1b69c9f0a0962e379ffa255",
      "filename": "lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/7ed1adb5124d0704085204abf73385e46cb44af5/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2Flayers%2FLotteLayerView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/7ed1adb5124d0704085204abf73385e46cb44af5/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2Flayers%2FLotteLayerView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2Flayers%2FLotteLayerView.java?ref=7ed1adb5124d0704085204abf73385e46cb44af5",
      "patch": "@@ -159,13 +159,10 @@ private void buildAnimations() {\n             inOutAnimation.addUpdateListener(new LotteKeyframeAnimation.AnimationListener() {\n                 @Override\n                 public void onValueChanged(Object progress) {\n-                    if ((float) progress == 1f) {\n-                        setVisible(true, false);\n-                    } else {\n-                        setVisible(false, false);\n-                    }\n+                    setVisible((float) progress == 1f, false);\n                 }\n             });\n+            setVisible(inOutAnimation.getValueForProgress(0f) == 1f, false);\n             List<LotteKeyframeAnimation> animations = new ArrayList<>(1);\n             animations.add(inOutAnimation);\n             addAnimation(new LotteAnimationGroup(animations));",
      "parent_sha": "13073ebe409bc09aa71afec25f391fd3a340588a"
    }
  },
  {
    "oid": "d0526c4fe4ca19cc254b01fa9ab2a5c5e0eda64b",
    "message": "Fixed a misaligned block in AnimatableColorValue",
    "date": "2016-10-06T23:03:19Z",
    "url": "https://github.com/airbnb/lottie-android/commit/d0526c4fe4ca19cc254b01fa9ab2a5c5e0eda64b",
    "details": {
      "sha": "8a090edca0a390683b9eba69a91ea9903d25c9ae",
      "filename": "lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/d0526c4fe4ca19cc254b01fa9ab2a5c5e0eda64b/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2Fanimation%2FLotteAnimatableColorValue.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/d0526c4fe4ca19cc254b01fa9ab2a5c5e0eda64b/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2Fanimation%2FLotteAnimatableColorValue.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2Fanimation%2FLotteAnimatableColorValue.java?ref=d0526c4fe4ca19cc254b01fa9ab2a5c5e0eda64b",
      "patch": "@@ -136,14 +136,14 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {\n                         timingFunction = new LinearInterpolator();\n                     }\n                     timingFunctions.add(timingFunction);\n+                }\n \n-                    keyTimes.add(timePercentage);\n+                keyTimes.add(timePercentage);\n \n-                    if (keyframe.has(\"h\") && keyframe.getBoolean(\"h\")) {\n-                        outColor = startColor;\n-                        addStartValue = true;\n-                        addTimePadding = true;\n-                    }\n+                if (keyframe.has(\"h\") && keyframe.getBoolean(\"h\")) {\n+                    outColor = startColor;\n+                    addStartValue = true;\n+                    addTimePadding = true;\n                 }\n             }\n         } catch (JSONException e) {",
      "parent_sha": "8e7efb9c9a03b0ab12150c61c9ed58b525425e3b"
    }
  },
  {
    "oid": "50ffc1aa1bba3fe61d07107c1d9e4d451d087a4c",
    "message": "Disable hardware acceleration",
    "date": "2017-03-10T07:45:54Z",
    "url": "https://github.com/airbnb/lottie-android/commit/50ffc1aa1bba3fe61d07107c1d9e4d451d087a4c",
    "details": {
      "sha": "29d0f8ab7b7b00082fb2b9010bf44962cc14c0f5",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/50ffc1aa1bba3fe61d07107c1d9e4d451d087a4c/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/50ffc1aa1bba3fe61d07107c1d9e4d451d087a4c/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java?ref=50ffc1aa1bba3fe61d07107c1d9e4d451d087a4c",
      "patch": "@@ -107,7 +107,7 @@ private void init(@Nullable AttributeSet attrs) {\n         CacheStrategy.None.ordinal());\n     defaultCacheStrategy = CacheStrategy.values()[cacheStrategy];\n     ta.recycle();\n-    setLayerType(LAYER_TYPE_HARDWARE, null);\n+    setLayerType(LAYER_TYPE_SOFTWARE, null);\n \n     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n     float systemAnimationScale = Settings.Global.getFloat(getContext().getContentResolver(),",
      "parent_sha": "70efea2e0ac59d22e5ebb4192757741453d8ea8e"
    }
  },
  {
    "oid": "423665df93a4717090526b7e6492236c4b93a7fa",
    "message": "Fix Potential NPE In NetworkCache.clearCache (#2364)\n\nCo-authored-by: Nathan Shurtz <n.shurtz@fetchrewards.com>",
    "date": "2023-08-19T20:59:50Z",
    "url": "https://github.com/airbnb/lottie-android/commit/423665df93a4717090526b7e6492236c4b93a7fa",
    "details": {
      "sha": "d6a83ef0dfc746068bb900419a25ac9df440f041",
      "filename": "lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/423665df93a4717090526b7e6492236c4b93a7fa/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fnetwork%2FNetworkCache.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/423665df93a4717090526b7e6492236c4b93a7fa/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fnetwork%2FNetworkCache.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fnetwork%2FNetworkCache.java?ref=423665df93a4717090526b7e6492236c4b93a7fa",
      "patch": "@@ -38,7 +38,7 @@ public void clear() {\n     if (parentDir.exists()) {\n       File[] files = parentDir.listFiles();\n       if (files != null && files.length > 0) {\n-        for (File file : parentDir.listFiles()) {\n+        for (File file : files) {\n           file.delete();\n         }\n       }",
      "parent_sha": "0014ef6c3002cbea3d1bb36f13d886e3d2e3a9da"
    }
  },
  {
    "oid": "9dde5b09718163ee2aed00f530871dd04744e2b1",
    "message": "Fix LottieAnimationView.setProgress called from the view init method prevents the progress from being restored from the saved state (#2072)",
    "date": "2022-11-26T01:20:48Z",
    "url": "https://github.com/airbnb/lottie-android/commit/9dde5b09718163ee2aed00f530871dd04744e2b1",
    "details": {
      "sha": "166e59a8b1c27162a70a65c5efb0f78b37b951fb",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java",
      "status": "modified",
      "additions": 14,
      "deletions": 3,
      "changes": 17,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/9dde5b09718163ee2aed00f530871dd04744e2b1/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/9dde5b09718163ee2aed00f530871dd04744e2b1/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java?ref=9dde5b09718163ee2aed00f530871dd04744e2b1",
      "patch": "@@ -184,7 +184,10 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n     }\n \n     setImageAssetsFolder(ta.getString(R.styleable.LottieAnimationView_lottie_imageAssetsFolder));\n-    setProgress(ta.getFloat(R.styleable.LottieAnimationView_lottie_progress, 0));\n+\n+    boolean hasProgress = ta.hasValue(R.styleable.LottieAnimationView_lottie_progress);\n+    setProgressInternal(ta.getFloat(R.styleable.LottieAnimationView_lottie_progress, 0f), hasProgress);\n+\n     enableMergePathsForKitKatAndAbove(ta.getBoolean(\n         R.styleable.LottieAnimationView_lottie_enableMergePathsForKitKatAndAbove, false));\n     if (ta.hasValue(R.styleable.LottieAnimationView_lottie_colorFilter)) {\n@@ -294,7 +297,7 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {\n       setAnimation(animationResId);\n     }\n     if (!userActionsTaken.contains(UserActionTaken.SET_PROGRESS)) {\n-      setProgress(ss.progress);\n+      setProgressInternal(ss.progress, false);\n     }\n     if (!userActionsTaken.contains(UserActionTaken.PLAY_OPTION) && ss.isAnimating) {\n       playAnimation();\n@@ -996,7 +999,15 @@ public int getFrame() {\n   }\n \n   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n-    userActionsTaken.add(UserActionTaken.SET_PROGRESS);\n+    setProgressInternal(progress, true);\n+  }\n+\n+  private void setProgressInternal(\n+      @FloatRange(from = 0f, to = 1f) float progress,\n+      boolean fromUser) {\n+    if (fromUser) {\n+      userActionsTaken.add(UserActionTaken.SET_PROGRESS);\n+    }\n     lottieDrawable.setProgress(progress);\n   }\n ",
      "parent_sha": "26c9089d30e2492d9fb6455fbcb1f1875b72bcaa"
    }
  },
  {
    "oid": "404653c47efa5effdbbc75154048aeaf06aa7658",
    "message": "Expose LottieComposition#fromFileSync\n\nFixes #282",
    "date": "2017-05-07T20:51:40Z",
    "url": "https://github.com/airbnb/lottie-android/commit/404653c47efa5effdbbc75154048aeaf06aa7658",
    "details": {
      "sha": "be56c32cd997c7ecd0598528d339cc77526cfa7f",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieComposition.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/404653c47efa5effdbbc75154048aeaf06aa7658/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieComposition.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/404653c47efa5effdbbc75154048aeaf06aa7658/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieComposition.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieComposition.java?ref=404653c47efa5effdbbc75154048aeaf06aa7658",
      "patch": "@@ -129,7 +129,8 @@ public static Cancellable fromInputStream(Context context, InputStream stream,\n       return loader;\n     }\n \n-    static LottieComposition fromFileSync(Context context, String fileName) {\n+    @SuppressWarnings(\"WeakerAccess\")\n+    public static LottieComposition fromFileSync(Context context, String fileName) {\n       InputStream stream;\n       try {\n         stream = context.getAssets().open(fileName);",
      "parent_sha": "938b3f6af17830146097c96aab56f662c0068240"
    }
  },
  {
    "oid": "3c18f4c3166a29f6827f9401fac1a33fea4c7990",
    "message": "Prevent NPE in ImageLayer.getBounds() (#2578)\n\nCo-authored-by: Allen Chen <allen.chen@airbnb.com>",
    "date": "2025-03-04T01:34:57Z",
    "url": "https://github.com/airbnb/lottie-android/commit/3c18f4c3166a29f6827f9401fac1a33fea4c7990",
    "details": {
      "sha": "3dfd8080252e30e9a120bf242e35292efb59be54",
      "filename": "lottie/src/main/java/com/airbnb/lottie/model/layer/ImageLayer.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/3c18f4c3166a29f6827f9401fac1a33fea4c7990/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FImageLayer.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/3c18f4c3166a29f6827f9401fac1a33fea4c7990/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FImageLayer.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FImageLayer.java?ref=3c18f4c3166a29f6827f9401fac1a33fea4c7990",
      "patch": "@@ -107,7 +107,13 @@ public class ImageLayer extends BaseLayer {\n       if (lottieDrawable.getMaintainOriginalImageBounds()) {\n         outBounds.set(0, 0, lottieImageAsset.getWidth() * scale, lottieImageAsset.getHeight() * scale);\n       } else {\n-        outBounds.set(0, 0, getBitmap().getWidth() * scale, getBitmap().getHeight() * scale);\n+        Bitmap bitmap = getBitmap();\n+        if (bitmap != null) {\n+          outBounds.set(0, 0, bitmap.getWidth() * scale, bitmap.getHeight() * scale);\n+        } else {\n+          // If the bitmap is null, we aren't rendering anything, so set outBounds to an empty rectangle\n+          outBounds.set(0, 0, 0, 0);\n+        }\n       }\n       boundsMatrix.mapRect(outBounds);\n     }",
      "parent_sha": "ac2599cce07d6386b08c749c8e4799a9d1da1d74"
    }
  },
  {
    "oid": "a9d3c0d70e710e2b9fd734bc06fe26a40eee3f82",
    "message": "Add layers that are in assets",
    "date": "2016-12-09T23:33:34Z",
    "url": "https://github.com/airbnb/lottie-android/commit/a9d3c0d70e710e2b9fd734bc06fe26a40eee3f82",
    "details": {
      "sha": "fa837f3d54918f6da6999785c1454744a080bade",
      "filename": "lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java",
      "status": "modified",
      "additions": 26,
      "deletions": 8,
      "changes": 34,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/a9d3c0d70e710e2b9fd734bc06fe26a40eee3f82/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2FLottieComposition.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/a9d3c0d70e710e2b9fd734bc06fe26a40eee3f82/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2FLottieComposition.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2FLottieComposition.java?ref=a9d3c0d70e710e2b9fd734bc06fe26a40eee3f82",
      "patch": "@@ -142,23 +142,41 @@ public static LottieComposition fromJsonSync(Resources res, JSONObject json) {\n             JSONArray jsonLayers = json.getJSONArray(\"layers\");\n             for (int i = 0; i < jsonLayers.length(); i++) {\n                 Layer layer = Layer.fromJson(jsonLayers.getJSONObject(i), composition);\n-                composition.layers.add(layer);\n-                composition.layerMap.put(layer.getId(), layer);\n-                if (!layer.getMasks().isEmpty()) {\n-                    composition.hasMasks = true;\n-                }\n-                if (layer.getMatteType() != null && layer.getMatteType() != Layer.MatteType.None) {\n-                    composition.hasMattes = true;\n-                }\n+                addLayer(composition, layer);\n             }\n         } catch (JSONException e) {\n             throw new IllegalStateException(\"Unable to find layers.\", e);\n         }\n \n+        try {\n+            JSONArray assets = json.getJSONArray(\"assets\");\n+            for (int i = 0; i < assets.length(); i++) {\n+                JSONObject asset = assets.getJSONObject(i);\n+                JSONArray layers = asset.getJSONArray(\"layers\");\n+                for (int j = 0; j < layers.length(); j++) {\n+                    Layer layer = Layer.fromJson(layers.getJSONObject(j), composition);\n+                    addLayer(composition, layer);\n+                }\n+            }\n+        } catch (JSONException e) {\n+            // Do nothing.\n+        }\n+\n \n         return composition;\n     }\n \n+    private static void addLayer(LottieComposition composition, Layer layer) {\n+        composition.layers.add(layer);\n+        composition.layerMap.put(layer.getId(), layer);\n+        if (!layer.getMasks().isEmpty()) {\n+            composition.hasMasks = true;\n+        }\n+        if (layer.getMatteType() != null && layer.getMatteType() != Layer.MatteType.None) {\n+            composition.hasMattes = true;\n+        }\n+    }\n+\n     private final LongSparseArray<Layer> layerMap = new LongSparseArray<>();\n     private final List<Layer> layers = new ArrayList<>();\n     private Rect bounds;",
      "parent_sha": "e4fca353601e8847612e1bfdc888bb7b301c13f5"
    }
  },
  {
    "oid": "2281a22aaef6ead001b87a13c0119075cfc27c96",
    "message": "Fix an issue with rounded rectangles\n\nFixes #242",
    "date": "2017-04-08T07:05:52Z",
    "url": "https://github.com/airbnb/lottie-android/commit/2281a22aaef6ead001b87a13c0119075cfc27c96",
    "details": {
      "sha": "541f743e03c3b6fbf01c64c4237d98849c509eb1",
      "filename": "lottie/src/main/java/com/airbnb/lottie/RectangleContent.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/2281a22aaef6ead001b87a13c0119075cfc27c96/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FRectangleContent.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/2281a22aaef6ead001b87a13c0119075cfc27c96/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FRectangleContent.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FRectangleContent.java?ref=2281a22aaef6ead001b87a13c0119075cfc27c96",
      "patch": "@@ -101,7 +101,7 @@ private void invalidate() {\n       path.arcTo(rect, 90, 90, false);\n     }\n \n-    path.lineTo(position.x - halfWidth, position.y - halfHeight + 2 * radius);\n+    path.lineTo(position.x - halfWidth, position.y - halfHeight + radius);\n \n     if (radius > 0) {\n       rect.set(position.x - halfWidth,\n@@ -111,7 +111,7 @@ private void invalidate() {\n       path.arcTo(rect, 180, 90, false);\n     }\n \n-    path.lineTo(position.x + halfWidth - 2 * radius, position.y - halfHeight);\n+    path.lineTo(position.x + halfWidth - radius, position.y - halfHeight);\n \n     if (radius > 0) {\n       rect.set(position.x + halfWidth - 2 * radius,",
      "parent_sha": "e711fcd2f16bc6c6c3654b54792fba702bea509e"
    }
  },
  {
    "oid": "151fcf9d067d554281d676d16b67c9ed0d7bee1c",
    "message": "Don't cancel animations animations are disabled.\n\nCanceling wasn't necessary and actually caused a crash on Jelly Bean.\n\nFixes #382",
    "date": "2017-08-27T20:44:23Z",
    "url": "https://github.com/airbnb/lottie-android/commit/151fcf9d067d554281d676d16b67c9ed0d7bee1c",
    "details": {
      "sha": "8a461678b78460761e3c60d46c28c73aa8178f54",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/151fcf9d067d554281d676d16b67c9ed0d7bee1c/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/151fcf9d067d554281d676d16b67c9ed0d7bee1c/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java?ref=151fcf9d067d554281d676d16b67c9ed0d7bee1c",
      "patch": "@@ -67,7 +67,6 @@ public LottieDrawable() {\n     animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n       @Override public void onAnimationUpdate(ValueAnimator animation) {\n         if (systemAnimationsAreDisabled) {\n-          animator.cancel();\n           setProgress(1f);\n         } else {\n           setProgress((float) animation.getAnimatedValue());\n@@ -336,7 +335,7 @@ private void addColorFilterInternal(@Nullable String layerName, @Nullable String\n   }\n \n   void systemAnimationsAreDisabled() {\n-    systemAnimationsAreDisabled = true;\n+    // systemAnimationsAreDisabled = true;\n   }\n \n   public void loop(boolean loop) {",
      "parent_sha": "723335377cc70cc3a7f9c9ec5bf6890e07695b0f"
    }
  },
  {
    "oid": "ca28d432eefc335f6228af0922858366ddc1763d",
    "message": "Optimize start and end progress (#1049)",
    "date": "2018-12-16T01:09:22Z",
    "url": "https://github.com/airbnb/lottie-android/commit/ca28d432eefc335f6228af0922858366ddc1763d",
    "details": {
      "sha": "72fc100b85e089cf652135690667b8bdcef5144a",
      "filename": "lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/ca28d432eefc335f6228af0922858366ddc1763d/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FBaseKeyframeAnimation.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/ca28d432eefc335f6228af0922858366ddc1763d/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FBaseKeyframeAnimation.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FBaseKeyframeAnimation.java?ref=ca28d432eefc335f6228af0922858366ddc1763d",
      "patch": "@@ -34,6 +34,9 @@ public interface AnimationListener {\n   private float cachedGetValueProgress = -1f;\n   @Nullable private A cachedGetValue = null;\n \n+  private float cachedStartDelayProgress = -1f;\n+  private float cachedEndProgress = -1f;\n+\n   BaseKeyframeAnimation(List<? extends Keyframe<K>> keyframes) {\n     this.keyframes = keyframes;\n   }\n@@ -126,12 +129,18 @@ protected float getInterpolatedCurrentKeyframeProgress() {\n \n   @FloatRange(from = 0f, to = 1f)\n   private float getStartDelayProgress() {\n-    return keyframes.isEmpty() ? 0f : keyframes.get(0).getStartProgress();\n+      if (cachedStartDelayProgress == -1f) {\n+            cachedStartDelayProgress = keyframes.isEmpty() ? 0f : keyframes.get(0).getStartProgress();\n+      }\n+      return cachedStartDelayProgress;\n   }\n \n   @FloatRange(from = 0f, to = 1f)\n   float getEndProgress() {\n-    return keyframes.isEmpty() ? 1f : keyframes.get(keyframes.size() - 1).getEndProgress();\n+      if (cachedEndProgress == -1f) {\n+        cachedEndProgress = keyframes.isEmpty() ? 1f : keyframes.get(keyframes.size() - 1).getEndProgress();\n+      }\n+      return cachedEndProgress;\n   }\n \n   public A getValue() {",
      "parent_sha": "0d14e919f5423599e04b25519841e429de86ec61"
    }
  },
  {
    "oid": "16d0fac5e14693abeede43eb1ac32072218aba42",
    "message": "Make LottieDrawable constructor public\n\nFixes #93",
    "date": "2017-02-20T08:49:10Z",
    "url": "https://github.com/airbnb/lottie-android/commit/16d0fac5e14693abeede43eb1ac32072218aba42",
    "details": {
      "sha": "a10d24a21f211d5530c3c3fa184c509e3b1d7ef8",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/16d0fac5e14693abeede43eb1ac32072218aba42/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/16d0fac5e14693abeede43eb1ac32072218aba42/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java?ref=16d0fac5e14693abeede43eb1ac32072218aba42",
      "patch": "@@ -32,7 +32,7 @@ public class LottieDrawable extends AnimatableLayer implements Drawable.Callback\n   private boolean reverseAnimationWhenLayerAdded;\n   private boolean systemAnimationsAreDisabled;\n \n-  LottieDrawable() {\n+  @SuppressWarnings(\"WeakerAccess\") public LottieDrawable() {\n     super(null);\n \n     animator.setRepeatCount(0);",
      "parent_sha": "cf517f4bb8a39185ef2398034d2ac6b760fc8525"
    }
  },
  {
    "oid": "39e2a3b21171178f6b44ca0194f18dd97f07b7a7",
    "message": "Default null content type to application/json (#1223)",
    "date": "2019-05-20T04:02:41Z",
    "url": "https://github.com/airbnb/lottie-android/commit/39e2a3b21171178f6b44ca0194f18dd97f07b7a7",
    "details": {
      "sha": "c3d31c7af4ae2ab95a025e30bbac852c107f7158",
      "filename": "lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/39e2a3b21171178f6b44ca0194f18dd97f07b7a7/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fnetwork%2FNetworkFetcher.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/39e2a3b21171178f6b44ca0194f18dd97f07b7a7/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fnetwork%2FNetworkFetcher.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fnetwork%2FNetworkFetcher.java?ref=39e2a3b21171178f6b44ca0194f18dd97f07b7a7",
      "patch": "@@ -135,7 +135,13 @@ private LottieResult<LottieComposition> getResultFromConnection(HttpURLConnectio\n     File file;\n     FileExtension extension;\n     LottieResult<LottieComposition> result = null;\n-    switch (connection.getContentType()) {\n+    String contentType = connection.getContentType();\n+    if (contentType == null) {\n+      // Assume JSON for best effort parsing. If it fails, it will just deliver the parse exception\n+      // in the result which is more useful than failing here.\n+      contentType = \"application/json\";\n+    }\n+    switch (contentType) {\n       case \"application/zip\":\n         Logger.debug(\"Handling zip response.\");\n         extension = FileExtension.ZIP;",
      "parent_sha": "174ce16ec59b1ab11b074460c23b0286f7da08eb"
    }
  },
  {
    "oid": "0ca5227776c9057911ffdbc8448f7fbfd441b38e",
    "message": "Properly clear canvas for masks pre-Pie (#1505)\n\nFixes #1489",
    "date": "2020-02-16T17:58:36Z",
    "url": "https://github.com/airbnb/lottie-android/commit/0ca5227776c9057911ffdbc8448f7fbfd441b38e",
    "details": {
      "sha": "2a238d8da630bc93039ec1f194aaa0ac5d98faae",
      "filename": "lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/0ca5227776c9057911ffdbc8448f7fbfd441b38e/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FBaseLayer.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/0ca5227776c9057911ffdbc8448f7fbfd441b38e/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FBaseLayer.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FBaseLayer.java?ref=0ca5227776c9057911ffdbc8448f7fbfd441b38e",
      "patch": "@@ -375,7 +375,7 @@ private void applyMasks(Canvas canvas, Matrix matrix) {\n     if (Build.VERSION.SDK_INT < Build.VERSION_CODES.P) {\n       // Pre-Pie, offscreen buffers were opaque which meant that outer border of a mask\n       // might get drawn depending on the result of float rounding.\n-      canvas.drawColor(Color.TRANSPARENT);\n+      clearCanvas(canvas);\n     }\n     L.endSection(\"Layer#saveLayer\");\n     for (int i = 0; i < mask.getMasks().size(); i++) {",
      "parent_sha": "e82e63c79fbdeda06b7a9caeb870872583e0801b"
    }
  },
  {
    "oid": "a51606cd8116f61923610d1569c05f0460305582",
    "message": "Don't cache dpScale in Utils (#1915)\n\nIt's possible for the screen density to change when moving between windows or screens. In this case lottie renders animations the wrong size. Android already does a pretty good job of caching and updating the system context so just let it do it's job.",
    "date": "2021-12-28T05:08:40Z",
    "url": "https://github.com/airbnb/lottie-android/commit/a51606cd8116f61923610d1569c05f0460305582",
    "details": {
      "sha": "dc07d4bced8ba353b02fb88da19dc2ee2a883aba",
      "filename": "lottie/src/main/java/com/airbnb/lottie/utils/Utils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/a51606cd8116f61923610d1569c05f0460305582/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Futils%2FUtils.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/a51606cd8116f61923610d1569c05f0460305582/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Futils%2FUtils.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Futils%2FUtils.java?ref=a51606cd8116f61923610d1569c05f0460305582",
      "patch": "@@ -66,7 +66,6 @@ protected float[] initialValue() {\n   };\n \n   private static final float INV_SQRT_2 = (float) (Math.sqrt(2) / 2.0);\n-  private static float dpScale = -1;\n \n   private Utils() {\n   }\n@@ -250,10 +249,7 @@ public static int hashFor(float a, float b, float c, float d) {\n   }\n \n   public static float dpScale() {\n-    if (dpScale == -1) {\n-      dpScale = Resources.getSystem().getDisplayMetrics().density;\n-    }\n-    return dpScale;\n+    return Resources.getSystem().getDisplayMetrics().density;\n   }\n \n   public static float getAnimationScale(Context context) {",
      "parent_sha": "fbea07d24136d75e45981db4345f7cc5a9d6b6e4"
    }
  },
  {
    "oid": "2695bc625bfeb89d5d0dd3fb247ef203eca659d6",
    "message": "CompositionLayer: Add support for targetSdkVersion = 28 (#919)\n\n* clipRect is deprecated with a Region.Op other than Region.Op.INTERSECT and Region.Op.DIFFERENCE\r\n\r\nSigned-off-by: Brandon McAnsh <bmcansh@powerley.com>",
    "date": "2018-09-03T23:52:32Z",
    "url": "https://github.com/airbnb/lottie-android/commit/2695bc625bfeb89d5d0dd3fb247ef203eca659d6",
    "details": {
      "sha": "1aa8c8a729e91640c0bf707eeb12d880a174b1c9",
      "filename": "lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/2695bc625bfeb89d5d0dd3fb247ef203eca659d6/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FCompositionLayer.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/2695bc625bfeb89d5d0dd3fb247ef203eca659d6/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FCompositionLayer.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FCompositionLayer.java?ref=2695bc625bfeb89d5d0dd3fb247ef203eca659d6",
      "patch": "@@ -3,6 +3,7 @@\n import android.graphics.Canvas;\n import android.graphics.Matrix;\n import android.graphics.RectF;\n+import android.os.Build;\n import android.support.annotation.FloatRange;\n import android.support.annotation.Nullable;\n import android.support.v4.util.LongSparseArray;\n@@ -93,7 +94,11 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La\n     for (int i = layers.size() - 1; i >= 0 ; i--) {\n       boolean nonEmptyClip = true;\n       if (!newClipRect.isEmpty()) {\n-        nonEmptyClip = canvas.clipRect(newClipRect);\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+            nonEmptyClip = canvas.clipOutRect(newClipRect);\n+        } else {\n+            nonEmptyClip = canvas.clipRect(newClipRect);\n+        }\n       }\n       if (nonEmptyClip) {\n         BaseLayer layer = layers.get(i);",
      "parent_sha": "df59c11ce2628a0fb687dedce7769eded0637582"
    }
  },
  {
    "oid": "593a05a0baab4d9fbebd4a19f476a4a027a844a3",
    "message": "Disable debug mode",
    "date": "2017-03-19T21:54:34Z",
    "url": "https://github.com/airbnb/lottie-android/commit/593a05a0baab4d9fbebd4a19f476a4a027a844a3",
    "details": {
      "sha": "9c650355e52cb10fc6745491a6b7550041ef657d",
      "filename": "lottie/src/main/java/com/airbnb/lottie/L.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/593a05a0baab4d9fbebd4a19f476a4a027a844a3/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FL.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/593a05a0baab4d9fbebd4a19f476a4a027a844a3/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FL.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FL.java?ref=593a05a0baab4d9fbebd4a19f476a4a027a844a3",
      "patch": "@@ -2,5 +2,5 @@\n \n public class L {\n   static final String TAG = \"LOTTIE\";\n-  public static final boolean DBG = true;\n+  public static final boolean DBG = false;\n }",
      "parent_sha": "b90164e41ae212148501655ba7d15fe4b31abb17"
    }
  },
  {
    "oid": "ea36953ccbe9a5b0b8cf0fa755a4ada711031cfb",
    "message": "Fix blur scale (#1861)\n\nFixed empirically. Probably needs more tuning though.",
    "date": "2021-08-02T13:20:29Z",
    "url": "https://github.com/airbnb/lottie-android/commit/ea36953ccbe9a5b0b8cf0fa755a4ada711031cfb",
    "details": {
      "sha": "437da4b1c9dd950927fb387502bc50b7f1d31b69",
      "filename": "lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/ea36953ccbe9a5b0b8cf0fa755a4ada711031cfb/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FBaseLayer.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/ea36953ccbe9a5b0b8cf0fa755a4ada711031cfb/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FBaseLayer.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmodel%2Flayer%2FBaseLayer.java?ref=ea36953ccbe9a5b0b8cf0fa755a4ada711031cfb",
      "patch": "@@ -601,7 +601,7 @@ public BlurMaskFilter getBlurMaskFilter(float radius) {\n     if (blurMaskFilterRadius == radius) {\n       return blurMaskFilter;\n     }\n-    blurMaskFilter = new BlurMaskFilter(radius, BlurMaskFilter.Blur.NORMAL);\n+    blurMaskFilter = new BlurMaskFilter(radius / 2f, BlurMaskFilter.Blur.NORMAL);\n     blurMaskFilterRadius = radius;\n     return blurMaskFilter;\n   }",
      "parent_sha": "c52e752ce93b27af56483dce23600d5edb587a14"
    }
  },
  {
    "oid": "0966d1bdeed35f55ed9456b3047555b36d8f490f",
    "message": "fix : close AppIntroActivity when DONE pressed (#32)",
    "date": "2017-02-02T19:12:45Z",
    "url": "https://github.com/airbnb/lottie-android/commit/0966d1bdeed35f55ed9456b3047555b36d8f490f",
    "details": {
      "sha": "ec1c56361b123b19af5d159d34d03bb31258c7de",
      "filename": "LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroActivity.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/0966d1bdeed35f55ed9456b3047555b36d8f490f/LottieSample%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fsamples%2FAppIntroActivity.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/0966d1bdeed35f55ed9456b3047555b36d8f490f/LottieSample%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fsamples%2FAppIntroActivity.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/LottieSample%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fsamples%2FAppIntroActivity.java?ref=0966d1bdeed35f55ed9456b3047555b36d8f490f",
      "patch": "@@ -68,7 +68,7 @@ public void onPageScrollStateChanged(int state) { }\n     protected IntroButton.Behaviour generateFinalButtonBehaviour() {\n         return new IntroButton.Behaviour() {\n             @Override\n-            public void setActivity(IntroActivity activity) { }\n+            public void setActivity(IntroActivity activity) { finish();}\n \n             @Override\n             public IntroActivity getActivity() {",
      "parent_sha": "665854ad1d2b9da09e75f7d3c4642c30712fb5a3"
    }
  },
  {
    "oid": "6078d2f47710cc3820348c77fb6e2074a8847fee",
    "message": "Fix not animating the first time (#1125)",
    "date": "2019-02-18T02:35:54Z",
    "url": "https://github.com/airbnb/lottie-android/commit/6078d2f47710cc3820348c77fb6e2074a8847fee",
    "details": {
      "sha": "6033dad93afdf9cf8f64863dc289d3de2c486546",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/6078d2f47710cc3820348c77fb6e2074a8847fee/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/6078d2f47710cc3820348c77fb6e2074a8847fee/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java?ref=6078d2f47710cc3820348c77fb6e2074a8847fee",
      "patch": "@@ -232,14 +232,14 @@ private void init(@Nullable AttributeSet attrs) {\n \n   @Override\n   protected void onVisibilityChanged(@NonNull View changedView, int visibility) {\n-    if (visibility == VISIBLE && wasAnimatingWhenVisibilityChanged) {\n-      resumeAnimation();\n+    if (visibility == VISIBLE) {\n+      if (wasAnimatingWhenVisibilityChanged) {\n+        resumeAnimation();\n+      }\n     } else {\n+      wasAnimatingWhenVisibilityChanged = isAnimating();\n       if (isAnimating()) {\n-        wasAnimatingWhenVisibilityChanged = true;\n         pauseAnimation();\n-      } else {\n-        wasAnimatingWhenVisibilityChanged = false;\n       }\n     }\n   }",
      "parent_sha": "60a7912604bf2dea39beddd555d2c12f12bfe83f"
    }
  },
  {
    "oid": "5dc7d6ce0533c01aad3599bb13e598ab5f9a0c16",
    "message": "Fixed an issue when tracing beyond the max trace depth",
    "date": "2017-07-01T18:54:34Z",
    "url": "https://github.com/airbnb/lottie-android/commit/5dc7d6ce0533c01aad3599bb13e598ab5f9a0c16",
    "details": {
      "sha": "4339ef5551e119543321eab5ee1cb21c4ff8e812",
      "filename": "lottie/src/main/java/com/airbnb/lottie/L.java",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/5dc7d6ce0533c01aad3599bb13e598ab5f9a0c16/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FL.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/5dc7d6ce0533c01aad3599bb13e598ab5f9a0c16/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FL.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FL.java?ref=5dc7d6ce0533c01aad3599bb13e598ab5f9a0c16",
      "patch": "@@ -11,6 +11,7 @@ public class L {\n   private static String[] sections;\n   private static long[] startTimeNs;\n   private static int traceDepth = 0;\n+  private static int depthPastMaxDepth = 0;\n \n   public static void setTraceEnabled(boolean enabled) {\n     if (traceEnabled == enabled) {\n@@ -24,7 +25,11 @@ public static void setTraceEnabled(boolean enabled) {\n   }\n \n   static void beginSection(String section) {\n-    if (!traceEnabled || traceDepth >= MAX_DEPTH) {\n+    if (!traceEnabled) {\n+      return;\n+    }\n+    if (traceDepth == MAX_DEPTH) {\n+      depthPastMaxDepth++;\n       return;\n     }\n     sections[traceDepth] = section;\n@@ -34,6 +39,10 @@ static void beginSection(String section) {\n   }\n \n   static float endSection(String section) {\n+    if (depthPastMaxDepth > 0) {\n+      depthPastMaxDepth--;\n+      return 0;\n+    }\n     if (!traceEnabled) {\n       return 0;\n     }\n@@ -46,6 +55,6 @@ static float endSection(String section) {\n           \". Expected \" + sections[traceDepth] + \".\");\n     }\n     TraceCompat.endSection();\n-    return (System.nanoTime() - startTimeNs[traceDepth + 1]) / 1000000f;\n+    return (System.nanoTime() - startTimeNs[traceDepth]) / 1000000f;\n   }\n }",
      "parent_sha": "810ac8e72da5498c9024f67ae44d6a115295fad9"
    }
  },
  {
    "oid": "c93c6e0a0e5273afa95a7ffee7988b0ef4fe110e",
    "message": "Updated mask to use ALPHA_8",
    "date": "2016-10-06T23:03:15Z",
    "url": "https://github.com/airbnb/lottie-android/commit/c93c6e0a0e5273afa95a7ffee7988b0ef4fe110e",
    "details": {
      "sha": "dc14955974dff4cbd50c6051a3f1a37d32cf58da",
      "filename": "lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java",
      "status": "modified",
      "additions": 3,
      "deletions": 12,
      "changes": 15,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/c93c6e0a0e5273afa95a7ffee7988b0ef4fe110e/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2Flayers%2FLotteLayerView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/c93c6e0a0e5273afa95a7ffee7988b0ef4fe110e/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2Flayers%2FLotteLayerView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2Flayers%2FLotteLayerView.java?ref=c93c6e0a0e5273afa95a7ffee7988b0ef4fe110e",
      "patch": "@@ -5,8 +5,6 @@\n import android.graphics.Canvas;\n import android.graphics.Paint;\n import android.graphics.PointF;\n-import android.graphics.PorterDuff;\n-import android.graphics.PorterDuffXfermode;\n import android.graphics.Shader;\n import android.support.annotation.NonNull;\n \n@@ -130,7 +128,7 @@ private void setupForModel() {\n \n         if (layerModel.getMasks() != null) {\n             mask = new LotteMaskLayer(layerModel.getMasks(), composition);\n-            maskBitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ARGB_8888);\n+            maskBitmap = Bitmap.createBitmap(composition.getBounds().width(), composition.getBounds().height(), Bitmap.Config.ALPHA_8);\n             maskCanvas = new Canvas(maskBitmap);\n         }\n         buildAnimations();\n@@ -141,36 +139,29 @@ public void draw(@NonNull Canvas canvas) {\n         super.draw(this.canvas);\n \n         if (mask != null && !mask.getMasks().isEmpty()) {\n-            int saveCount = this.canvas.save();\n             int maskSaveCount = maskCanvas.save();\n             if (childContainerLayer.position != null) {\n-                this.canvas.translate(childContainerLayer.position.x, childContainerLayer.position.y);\n                 maskCanvas.translate(childContainerLayer.position.x, childContainerLayer.position.y);\n             }\n             if (childContainerLayer.transform != null) {\n-                this.canvas.scale(childContainerLayer.transform.getScaleX(), childContainerLayer.transform.getScaleY());\n                 maskCanvas.scale(childContainerLayer.transform.getScaleX(), childContainerLayer.transform.getScaleY());\n             }\n \n             if (childContainerLayer.sublayerTransform != null) {\n-                this.canvas.rotate(childContainerLayer.sublayerTransform.getRotationZ());\n                 maskCanvas.rotate(childContainerLayer.sublayerTransform.getRotationZ());\n             }\n \n             if (childContainerLayer.anchorPoint != null) {\n-                this.canvas.translate(-childContainerLayer.anchorPoint.x, -childContainerLayer.anchorPoint.y);\n                 maskCanvas.translate(-childContainerLayer.anchorPoint.x, -childContainerLayer.anchorPoint.y);\n             }\n \n             for (LotteMask m : mask.getMasks()) {\n                 maskCanvas.drawPath(m.getMaskPath().getInitialShape(), new Paint());\n             }\n-            this.canvas.restoreToCount(saveCount);\n             maskCanvas.restoreToCount(maskSaveCount);\n             Paint paint = new Paint();\n-            paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));\n-            maskCanvas.drawBitmap(bitmap, 0, 0, paint);\n-            canvas.drawBitmap(maskBitmap, 0, 0, new Paint());\n+            paint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));\n+            canvas.drawBitmap(maskBitmap, 0, 0, paint);\n         } else {\n             canvas.drawBitmap(bitmap, 0, 0, null);\n         }",
      "parent_sha": "661c8895ce21c674b5a13aa0d40d01f4e010f3b8"
    }
  },
  {
    "oid": "f71402c8959cf7e65b8674d39112de2dc43ce0a2",
    "message": "Gracefully degrade when null bitmaps are set (#912)\n\nFixes #586\r\nFixes #900",
    "date": "2018-08-30T16:35:48Z",
    "url": "https://github.com/airbnb/lottie-android/commit/f71402c8959cf7e65b8674d39112de2dc43ce0a2",
    "details": {
      "sha": "1630613df26ac6cf6e5613ef4b112e3374403859",
      "filename": "lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java",
      "status": "modified",
      "additions": 11,
      "deletions": 9,
      "changes": 20,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/f71402c8959cf7e65b8674d39112de2dc43ce0a2/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmanager%2FImageAssetManager.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/f71402c8959cf7e65b8674d39112de2dc43ce0a2/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmanager%2FImageAssetManager.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmanager%2FImageAssetManager.java?ref=f71402c8959cf7e65b8674d39112de2dc43ce0a2",
      "patch": "@@ -66,25 +66,24 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n   }\n \n   @Nullable public Bitmap bitmapForId(String id) {\n-    Bitmap bitmap = imageAssets.get(id).getBitmap();\n+    LottieImageAsset asset = imageAssets.get(id);\n+    if (asset == null) {\n+      return null;\n+    }\n+    Bitmap bitmap = asset.getBitmap();\n     if (bitmap != null) {\n       return bitmap;\n     }\n \n-    LottieImageAsset imageAsset = imageAssets.get(id);\n-    if (imageAsset == null) {\n-      return null;\n-    }\n-\n     if (delegate != null) {\n-      bitmap = delegate.fetchBitmap(imageAsset);\n+      bitmap = delegate.fetchBitmap(asset);\n       if (bitmap != null) {\n         putBitmap(id, bitmap);\n       }\n       return bitmap;\n     }\n \n-    String filename = imageAsset.getFileName();\n+    String filename = asset.getFileName();\n     BitmapFactory.Options opts = new BitmapFactory.Options();\n     opts.inScaled = true;\n     opts.inDensity = 160;\n@@ -122,7 +121,10 @@ public void recycleBitmaps() {\n       Iterator<Map.Entry<String, LottieImageAsset>> it = imageAssets.entrySet().iterator();\n       while (it.hasNext()) {\n         Map.Entry<String, LottieImageAsset> entry = it.next();\n-        entry.getValue().getBitmap().recycle();\n+        Bitmap bitmap = entry.getValue().getBitmap();\n+        if (bitmap != null) {\n+          bitmap.recycle();\n+        }\n         it.remove();\n       }\n     }",
      "parent_sha": "9be40fb1c03f3bba53597f5cb2db823dbd8c97bb"
    }
  },
  {
    "oid": "89839861debcba45fa7d7f39b179c3350de7f563",
    "message": "Fixed test",
    "date": "2018-11-06T17:28:46Z",
    "url": "https://github.com/airbnb/lottie-android/commit/89839861debcba45fa7d7f39b179c3350de7f563",
    "details": {
      "sha": "8a582ade7fe8271bbf29d179bbd492c33a937586",
      "filename": "lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/89839861debcba45fa7d7f39b179c3350de7f563/lottie%2Fsrc%2Ftest%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieValueAnimatorUnitTest.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/89839861debcba45fa7d7f39b179c3350de7f563/lottie%2Fsrc%2Ftest%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieValueAnimatorUnitTest.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Ftest%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieValueAnimatorUnitTest.java?ref=89839861debcba45fa7d7f39b179c3350de7f563",
      "patch": "@@ -169,10 +169,10 @@ public void testSetFrameIntegrity() {\n \n     // setFrame < minFrame should clamp to minFrame\n     animator.setFrame(100);\n-    assertEquals(200, animator.getFrame());\n+    assertEquals(200f, animator.getFrame());\n \n     animator.setFrame(900);\n-    assertEquals(800, animator.getFrame());\n+    assertEquals(800f, animator.getFrame());\n   }\n \n   @Test(expected = IllegalArgumentException.class)",
      "parent_sha": "3cefa99e461b1dab54b50fff40a4202bb365ef30"
    }
  },
  {
    "oid": "4c805889968bfa2eba6c87cd99a093aa5261beb3",
    "message": "Fix a NPE in ColorKeyframeAnimation (#2407)\n\nIt is not clear to me why or how this would happen. endFrame is technically nullable because of the order that parsing happens but it should be non-null by the time parsing finishes. This should be safe enough to add to fix this NPE though.\r\n\r\nFixes #2361",
    "date": "2023-10-30T04:19:13Z",
    "url": "https://github.com/airbnb/lottie-android/commit/4c805889968bfa2eba6c87cd99a093aa5261beb3",
    "details": {
      "sha": "93bf944845d6431ea053834ec794a790f951456b",
      "filename": "lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ColorKeyframeAnimation.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/4c805889968bfa2eba6c87cd99a093aa5261beb3/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FColorKeyframeAnimation.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/4c805889968bfa2eba6c87cd99a093aa5261beb3/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FColorKeyframeAnimation.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FColorKeyframeAnimation.java?ref=4c805889968bfa2eba6c87cd99a093aa5261beb3",
      "patch": "@@ -25,7 +25,10 @@ public int getIntValue(Keyframe<Integer> keyframe, float keyframeProgress) {\n       throw new IllegalStateException(\"Missing values for keyframe.\");\n     }\n \n-    if (valueCallback != null) {\n+    // keyframe.endFrame should not be null under normal operation.\n+    // It is not clear why this would be null and when it does, it seems to be extremely rare.\n+    // https://github.com/airbnb/lottie-android/issues/2361\n+    if (valueCallback != null && keyframe.endFrame != null) {\n       //noinspection ConstantConditions\n       Integer value = valueCallback.getValueInternal(keyframe.startFrame, keyframe.endFrame, keyframe.startValue,\n           keyframe.endValue, keyframeProgress, getLinearCurrentKeyframeProgress(), getProgress());",
      "parent_sha": "f20394bb686d803d5ff57ddfda9a027eac314772"
    }
  },
  {
    "oid": "6c6e5ff71ffdc46c920348a573dc3ce6bbe25f59",
    "message": "Add an additional null check in BaseKeyframeAnimation (#2486)\n\nFixes #2483",
    "date": "2024-04-01T23:56:40Z",
    "url": "https://github.com/airbnb/lottie-android/commit/6c6e5ff71ffdc46c920348a573dc3ce6bbe25f59",
    "details": {
      "sha": "5f94a927bc30e70266112fea89f55c34f64956ce",
      "filename": "lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/6c6e5ff71ffdc46c920348a573dc3ce6bbe25f59/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FBaseKeyframeAnimation.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/6c6e5ff71ffdc46c920348a573dc3ce6bbe25f59/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FBaseKeyframeAnimation.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FBaseKeyframeAnimation.java?ref=6c6e5ff71ffdc46c920348a573dc3ce6bbe25f59",
      "patch": "@@ -112,7 +112,8 @@ protected float getInterpolatedCurrentKeyframeProgress() {\n     Keyframe<K> keyframe = getCurrentKeyframe();\n     // Keyframe should not be null here but there seems to be a Xiaomi Android 10 specific crash.\n     // https://github.com/airbnb/lottie-android/issues/2050\n-    if (keyframe == null || keyframe.isStatic()) {\n+    // https://github.com/airbnb/lottie-android/issues/2483\n+    if (keyframe == null || keyframe.isStatic() || keyframe.interpolator == null) {\n       return 0f;\n     }\n     //noinspection ConstantConditions",
      "parent_sha": "b7b536100c3cb4860b39963703089c5692cd27bc"
    }
  },
  {
    "oid": "54c2775bf2c8b67c8d24840424c13968255caea7",
    "message": "Make ref strong before checking it (#406)\n\nPotentially unsafe WeakReference handling",
    "date": "2017-07-31T22:35:50Z",
    "url": "https://github.com/airbnb/lottie-android/commit/54c2775bf2c8b67c8d24840424c13968255caea7",
    "details": {
      "sha": "a829cc0f00632c2e9b49b7d21f1adec435e04d72",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/54c2775bf2c8b67c8d24840424c13968255caea7/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/54c2775bf2c8b67c8d24840424c13968255caea7/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java?ref=54c2775bf2c8b67c8d24840424c13968255caea7",
      "patch": "@@ -311,8 +311,9 @@ public void useExperimentalHardwareAcceleration(boolean use) {\n     this.animationName = animationName;\n     if (weakRefCache.containsKey(animationName)) {\n       WeakReference<LottieComposition> compRef = weakRefCache.get(animationName);\n-      if (compRef.get() != null) {\n-        setComposition(compRef.get());\n+      LottieComposition ref = compRef.get();\n+      if (ref != null) {\n+        setComposition(ref);\n         return;\n       }\n     } else if (strongRefCache.containsKey(animationName)) {",
      "parent_sha": "d5bef71fecfbd470d434c930172f8ce3877d952e"
    }
  },
  {
    "oid": "108b1be70f115cda3c62d46d9f9808e6d465a3c0",
    "message": "Fix ImageAssetManager.bitmapForId NPE crash (#2117)\n\nIn Android docs, BitmapFactory.decodeStream may return null so it must be handled correctly.\r\n\r\nCo-authored-by: TechQI <TechQI@126.com>",
    "date": "2022-08-10T16:24:42Z",
    "url": "https://github.com/airbnb/lottie-android/commit/108b1be70f115cda3c62d46d9f9808e6d465a3c0",
    "details": {
      "sha": "afda3b5304a521522f53287afaa226e74442c29e",
      "filename": "lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/108b1be70f115cda3c62d46d9f9808e6d465a3c0/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmanager%2FImageAssetManager.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/108b1be70f115cda3c62d46d9f9808e6d465a3c0/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmanager%2FImageAssetManager.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fmanager%2FImageAssetManager.java?ref=108b1be70f115cda3c62d46d9f9808e6d465a3c0",
      "patch": "@@ -118,7 +118,11 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {\n     try {\n       bitmap = BitmapFactory.decodeStream(is, null, opts);\n     } catch (IllegalArgumentException e) {\n-      Logger.warning(\"Unable to decode image.\", e);\n+      Logger.warning(\"Unable to decode image `\" + id + \"`.\", e);\n+      return null;\n+    }\n+    if (bitmap == null) {\n+      Logger.warning(\"Decoded image `\" + id + \"` is null.\");\n       return null;\n     }\n     bitmap = Utils.resizeBitmapIfNeeded(bitmap, asset.getWidth(), asset.getHeight());",
      "parent_sha": "adbd366b1d8fb6ee99420ed239ed74686a8c0b60"
    }
  },
  {
    "oid": "335b06861dbcf23a8a1eb0ab821bf915f6b594db",
    "message": "Fixed looping in AnimationFragment",
    "date": "2017-02-09T20:56:08Z",
    "url": "https://github.com/airbnb/lottie-android/commit/335b06861dbcf23a8a1eb0ab821bf915f6b594db",
    "details": {
      "sha": "3646fe321b5ec695440adda4ffafaf309cff051b",
      "filename": "LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/335b06861dbcf23a8a1eb0ab821bf915f6b594db/LottieSample%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fsamples%2FAnimationFragment.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/335b06861dbcf23a8a1eb0ab821bf915f6b594db/LottieSample%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fsamples%2FAnimationFragment.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/LottieSample%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fsamples%2FAnimationFragment.java?ref=335b06861dbcf23a8a1eb0ab821bf915f6b594db",
      "patch": "@@ -187,7 +187,7 @@ void onPlayClicked() {\n   @OnClick(R.id.loop)\n   void onLoopChanged() {\n     loopButton.setActivated(!loopButton.isActivated());\n-    animationView.loop(loopButton.isEnabled());\n+    animationView.loop(loopButton.isActivated());\n   }\n \n   @OnClick(R.id.restart)",
      "parent_sha": "43278eea6e5a8e7f34f0c63509968c01b56e2364"
    }
  },
  {
    "oid": "75504741d5f24ead3b13652c2543a1229c14708c",
    "message": "Add a default gradient fill type (#1042)\n\nFixes #1032",
    "date": "2018-12-15T21:05:32Z",
    "url": "https://github.com/airbnb/lottie-android/commit/75504741d5f24ead3b13652c2543a1229c14708c",
    "details": {
      "sha": "b99ca1be5e0587c97c2e8329d2c95fd735013d3f",
      "filename": "lottie/src/main/java/com/airbnb/lottie/parser/GradientFillParser.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/75504741d5f24ead3b13652c2543a1229c14708c/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fparser%2FGradientFillParser.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/75504741d5f24ead3b13652c2543a1229c14708c/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fparser%2FGradientFillParser.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fparser%2FGradientFillParser.java?ref=75504741d5f24ead3b13652c2543a1229c14708c",
      "patch": "@@ -24,7 +24,7 @@ static GradientFill parse(\n     GradientType gradientType = null;\n     AnimatablePointValue startPoint = null;\n     AnimatablePointValue endPoint = null;\n-    Path.FillType fillType = null;\n+    Path.FillType fillType = Path.FillType.WINDING;\n     boolean hidden = false;\n \n     while (reader.hasNext()) {",
      "parent_sha": "bdbb2cd8e49101dde476c14a9340f244673f1ece"
    }
  },
  {
    "oid": "c4502c147864aa3ce8e38caff47fd07c44445af6",
    "message": "Code copied from SDK refactored to comply with project licensing. (#732)",
    "date": "2018-04-20T15:57:04Z",
    "url": "https://github.com/airbnb/lottie-android/commit/c4502c147864aa3ce8e38caff47fd07c44445af6",
    "details": {
      "sha": "45b31be22bbdb10c89d39301d5782eca7c71a7d7",
      "filename": "lottie/src/main/java/com/airbnb/lottie/utils/MiscUtils.java",
      "status": "modified",
      "additions": 4,
      "deletions": 9,
      "changes": 13,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/c4502c147864aa3ce8e38caff47fd07c44445af6/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Futils%2FMiscUtils.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/c4502c147864aa3ce8e38caff47fd07c44445af6/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Futils%2FMiscUtils.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Futils%2FMiscUtils.java?ref=c4502c147864aa3ce8e38caff47fd07c44445af6",
      "patch": "@@ -61,20 +61,15 @@ static int floorMod(float x, float y) {\n     return floorMod((int) x, (int) y);\n   }\n \n-  /**\n-   * Copied from Math.floorMod in the Android platform.\n-   */\n   private static int floorMod(int x, int y) {\n-    return x - floorDiv(x, y) * y;\n+    return x - y * floorDiv(x, y);\n   }\n \n-  /**\n-   * Copied from Math.floorDiv in the Android platform.\n-   */\n   private static int floorDiv(int x, int y) {\n     int r = x / y;\n-    // if the signs are different and modulo not zero, round down\n-    if ((x ^ y) < 0 && (r * y != x)) {\n+    boolean sameSign = (x ^ y) >= 0;\n+    int mod = x % y;\n+    if (!sameSign && mod != 0) {\n       r--;\n     }\n     return r;",
      "parent_sha": "e8dc98b1a2f68f8af79ae36d7afdeaee0be0e33a"
    }
  },
  {
    "oid": "d1464d701114e788e9884ed50ad32c97481b264e",
    "message": "Improved the font demo",
    "date": "2016-12-07T00:20:48Z",
    "url": "https://github.com/airbnb/lottie-android/commit/d1464d701114e788e9884ed50ad32c97481b264e",
    "details": {
      "sha": "d605e21eca8bad1169500710ab71637d71bf3913",
      "filename": "LottieSample/src/main/java/com/airbnb/lottie/samples/FontActivity.java",
      "status": "modified",
      "additions": 28,
      "deletions": 11,
      "changes": 39,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/d1464d701114e788e9884ed50ad32c97481b264e/LottieSample%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fsamples%2FFontActivity.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/d1464d701114e788e9884ed50ad32c97481b264e/LottieSample%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fsamples%2FFontActivity.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/LottieSample%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fsamples%2FFontActivity.java?ref=d1464d701114e788e9884ed50ad32c97481b264e",
      "patch": "@@ -9,15 +9,19 @@\n import android.view.KeyEvent;\n import android.widget.TextView;\n \n-import com.airbnb.lottie.LottieAnimationView;\n import com.airbnb.lottie.layers.LottieDrawable;\n import com.airbnb.lottie.model.LottieComposition;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n import butterknife.BindView;\n import butterknife.ButterKnife;\n \n public class FontActivity extends AppCompatActivity {\n \n+    private Map<Character, LottieComposition> compositionMap = new HashMap<>();\n+\n     @BindView(R.id.text_view) TextView textView;\n \n     private final SpannableStringBuilder ssb = new SpannableStringBuilder();\n@@ -47,14 +51,20 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {\n             return false;\n         }\n \n-        char letter = Character.toUpperCase((char) event.getUnicodeChar());\n-        String fileName = \"Amelie/\" + letter + \".json\";\n-        LottieComposition.fromFile(this, fileName, new LottieComposition.OnCompositionLoadedListener() {\n-            @Override\n-            public void onCompositionLoaded(LottieComposition composition) {\n-                addComposition(composition);\n-            }\n-        });\n+\n+        final char letter = Character.toUpperCase((char) event.getUnicodeChar());\n+        if (compositionMap.containsKey(letter)) {\n+            addComposition(compositionMap.get(letter));\n+        } else {\n+            String fileName = \"Amelie/\" + letter + \".json\";\n+            LottieComposition.fromFile(this, fileName, new LottieComposition.OnCompositionLoadedListener() {\n+                @Override\n+                public void onCompositionLoaded(LottieComposition composition) {\n+                    compositionMap.put(letter, composition);\n+                    addComposition(composition);\n+                }\n+            });\n+        }\n \n         return true;\n     }\n@@ -63,7 +73,13 @@ private void addComposition(LottieComposition composition) {\n         LottieDrawable drawable = new LottieDrawable(composition, new Drawable.Callback() {\n             @Override\n             public void invalidateDrawable(Drawable who) {\n-                textView.setText(ssb);\n+                textView.post(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        // This may not render the last frame if we don't post this.\n+                        textView.setText(ssb);\n+                    }\n+                });\n             }\n \n             @Override\n@@ -79,7 +95,8 @@ public void unscheduleDrawable(Drawable who, Runnable what) {\n         drawable.playAnimation();\n         drawable.setBounds(0, 0, 100, 100);\n         ImageSpan span = new ImageSpan(drawable);\n-        ssb.append(\"A\", span, 0);\n+        ssb.append(\"_\");\n+        ssb.setSpan(span, ssb.length() - 1, ssb.length(), 0);\n         textView.setText(ssb);\n     }\n }",
      "parent_sha": "1e29b6ecacc5e0e68076fcc8aa8b230242832f44"
    }
  },
  {
    "oid": "4a6840b5495baa422e7a485621c01d47a66fe37d",
    "message": "Fix Typos in LottieAnimationView (#938)",
    "date": "2018-09-09T15:21:33Z",
    "url": "https://github.com/airbnb/lottie-android/commit/4a6840b5495baa422e7a485621c01d47a66fe37d",
    "details": {
      "sha": "77650291a00431d2fe9df8cfb99dc4cfcc594407",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/4a6840b5495baa422e7a485621c01d47a66fe37d/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/4a6840b5495baa422e7a485621c01d47a66fe37d/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java?ref=4a6840b5495baa422e7a485621c01d47a66fe37d",
      "patch": "@@ -41,7 +41,7 @@\n  * <p>\n  * You may set the animation in one of two ways:\n  * 1) Attrs: {@link R.styleable#LottieAnimationView_lottie_fileName}\n- * 2) Programatically: {@link #setAnimation(String)}, {@link #setComposition(LottieComposition)},\n+ * 2) Programmatically: {@link #setAnimation(String)}, {@link #setComposition(LottieComposition)},\n  * or {@link #setAnimation(JsonReader)}.\n  * <p>\n  * You can set a default cache strategy with {@link R.attr#lottie_cacheStrategy}.\n@@ -119,7 +119,7 @@ private void init(@Nullable AttributeSet attrs) {\n       boolean hasUrl = ta.hasValue(R.styleable.LottieAnimationView_lottie_url);\n       if (hasRawRes && hasFileName) {\n         throw new IllegalArgumentException(\"lottie_rawRes and lottie_fileName cannot be used at \" +\n-            \"the same time. Please use use only one at once.\");\n+            \"the same time. Please use only one at once.\");\n       } else if (hasRawRes) {\n         int rawResId = ta.getResourceId(R.styleable.LottieAnimationView_lottie_rawRes, 0);\n         if (rawResId != 0) {\n@@ -427,7 +427,7 @@ public void setAnimationFromJson(String jsonString) {\n \n   /**\n    * Sets the animation from json string. This is the ideal API to use when loading an animation\n-   * over the network because you can use the raw response body here and a converstion to a\n+   * over the network because you can use the raw response body here and a conversion to a\n    * JSONObject never has to be done.\n    */\n   public void setAnimationFromJson(String jsonString, @Nullable String cacheKey) {\n@@ -458,7 +458,7 @@ public void setAnimation(JsonReader reader, @Nullable String cacheKey) {\n   }\n \n   /**\n-   * Load a lottie animation from a url. The url can be a json file or a zip file. Use a zip file if you have images. Simply zip them togethre and lottie\n+   * Load a lottie animation from a url. The url can be a json file or a zip file. Use a zip file if you have images. Simply zip them together and lottie\n    * will unzip and link the images automatically.\n    *\n    * Under the hood, Lottie uses Java HttpURLConnection because it doesn't require any transitive networking dependencies. It will download the file\n@@ -782,7 +782,7 @@ public void setTextDelegate(TextDelegate textDelegate) {\n    * Takes a {@link KeyPath}, potentially with wildcards or globstars and resolve it to a list of\n    * zero or more actual {@link KeyPath Keypaths} that exist in the current animation.\n    *\n-   * If you want to set value callbacks for any of these values, it is recommend to use the\n+   * If you want to set value callbacks for any of these values, it is recommended to use the\n    * returned {@link KeyPath} objects because they will be internally resolved to their content\n    * and won't trigger a tree walk of the animation contents when applied.\n    */\n@@ -791,8 +791,8 @@ public List<KeyPath> resolveKeyPath(KeyPath keyPath) {\n   }\n \n   /**\n-   * Add an property callback for the specified {@link KeyPath}. This {@link KeyPath} can resolve\n-   * to multiple contents. In that case, the callbacks's value will apply to all of them.\n+   * Add a property callback for the specified {@link KeyPath}. This {@link KeyPath} can resolve\n+   * to multiple contents. In that case, the callback's value will apply to all of them.\n    *\n    * Internally, this will check if the {@link KeyPath} has already been resolved with\n    * {@link #resolveKeyPath(KeyPath)} and will resolve it if it hasn't.",
      "parent_sha": "074176b4574ce41fadf3fba09213e902ede914ac"
    }
  },
  {
    "oid": "e6f37cef2dd7904a7113b4c0bccd50f77009dc04",
    "message": "Prevent a feedback loop between an animation and the seekbar in the sample app",
    "date": "2017-02-14T19:06:13Z",
    "url": "https://github.com/airbnb/lottie-android/commit/e6f37cef2dd7904a7113b4c0bccd50f77009dc04",
    "details": {
      "sha": "d10115141df8e57fc7cf19a9ade57fdddc5efea3",
      "filename": "LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/e6f37cef2dd7904a7113b4c0bccd50f77009dc04/LottieSample%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fsamples%2FAnimationFragment.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/e6f37cef2dd7904a7113b4c0bccd50f77009dc04/LottieSample%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fsamples%2FAnimationFragment.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/LottieSample%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fsamples%2FAnimationFragment.java?ref=e6f37cef2dd7904a7113b4c0bccd50f77009dc04",
      "patch": "@@ -120,7 +120,9 @@ public void onAnimationUpdate(ValueAnimator animation) {\n \n     seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n       @Override public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n-        animationView.setProgress(progress / 100f);\n+        if (!animationView.isAnimating()) {\n+          animationView.setProgress(progress / 100f);\n+        }\n       }\n \n       @Override public void onStartTrackingTouch(SeekBar seekBar) {",
      "parent_sha": "958e27c7b5110c62d0658f31e0f9e97666a78ca6"
    }
  },
  {
    "oid": "a9dcdf8d0ce8dc56b0f3f2e6a1b619fcde93207f",
    "message": "Skip listeners based on keyframes (#1061)",
    "date": "2018-12-18T21:31:58Z",
    "url": "https://github.com/airbnb/lottie-android/commit/a9dcdf8d0ce8dc56b0f3f2e6a1b619fcde93207f",
    "details": {
      "sha": "42c3a7e07c9a5c34830ca6ea4c80ca240324bec3",
      "filename": "lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/a9dcdf8d0ce8dc56b0f3f2e6a1b619fcde93207f/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FBaseKeyframeAnimation.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/a9dcdf8d0ce8dc56b0f3f2e6a1b619fcde93207f/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FBaseKeyframeAnimation.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2Fkeyframe%2FBaseKeyframeAnimation.java?ref=a9dcdf8d0ce8dc56b0f3f2e6a1b619fcde93207f",
      "patch": "@@ -5,6 +5,7 @@\n import com.airbnb.lottie.value.Keyframe;\n import com.airbnb.lottie.value.LottieValueCallback;\n \n+import java.security.Key;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -52,7 +53,7 @@ public void addUpdateListener(AnimationListener listener) {\n   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     // Must use hashCode() since the actual object instance will be returned\n     // from getValue() below with the new values.\n-    int previousValue = valueCallback == null ? getValue().hashCode() : 0;\n+    Keyframe<K> previousKeyframe = getCurrentKeyframe();\n     if (progress < getStartDelayProgress()) {\n       progress = getStartDelayProgress();\n     } else if (progress > getEndProgress()) {\n@@ -64,9 +65,9 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {\n     }\n     this.progress = progress;\n     // Just trigger a change but don't compute values if there is a value callback.\n-    int newValue = valueCallback == null ? getValue().hashCode() : -1;\n+    Keyframe<K> newKeyframe = getCurrentKeyframe();\n \n-    if (previousValue != newValue) {\n+    if (previousKeyframe != newKeyframe || !newKeyframe.isStatic()) {\n       notifyListeners();\n     }\n   }",
      "parent_sha": "72f25bffb497612f28bbd481a3d7d96b92b56b57"
    }
  },
  {
    "oid": "19cf3f0bc18a03be40106512fae053afd561beda",
    "message": "Cache compositions loaded by url in memory (#1657)\n\nFixes #1648",
    "date": "2020-10-24T22:12:37Z",
    "url": "https://github.com/airbnb/lottie-android/commit/19cf3f0bc18a03be40106512fae053afd561beda",
    "details": {
      "sha": "0c686f72026f1826e96ebdd531b032434f45e8fb",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/19cf3f0bc18a03be40106512fae053afd561beda/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieCompositionFactory.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/19cf3f0bc18a03be40106512fae053afd561beda/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieCompositionFactory.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieCompositionFactory.java?ref=19cf3f0bc18a03be40106512fae053afd561beda",
      "patch": "@@ -86,7 +86,11 @@ public static LottieTask<LottieComposition> fromUrl(final Context context, final\n     return cache(cacheKey, new Callable<LottieResult<LottieComposition>>() {\n       @Override\n       public LottieResult<LottieComposition> call() {\n-        return L.networkFetcher(context).fetchSync(url, cacheKey);\n+        LottieResult<LottieComposition> result = L.networkFetcher(context).fetchSync(url, cacheKey);\n+        if (cacheKey != null && result.getValue() != null) {\n+          LottieCompositionCache.getInstance().put(cacheKey, result.getValue());\n+        }\n+        return result;\n       }\n     });\n   }\n@@ -109,7 +113,11 @@ public static LottieResult<LottieComposition> fromUrlSync(Context context, Strin\n    */\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromUrlSync(Context context, String url, @Nullable String cacheKey) {\n-    return L.networkFetcher(context).fetchSync(url, cacheKey);\n+    LottieResult<LottieComposition> result = L.networkFetcher(context).fetchSync(url, cacheKey);\n+    if (cacheKey != null && result.getValue() != null) {\n+      LottieCompositionCache.getInstance().put(cacheKey, result.getValue());\n+    }\n+    return result;\n   }\n \n   /**",
      "parent_sha": "b27f6d32cc10580c95019df82a9b606b1c5e49f0"
    }
  },
  {
    "oid": "5038e4a7ea4e46d150b15e34bbf02675005188ed",
    "message": "Wrap lazy composition tasks with a null check (#1711)\n\nI can't figure out why this would happen but if it is happening, it's better to potentially have an undesirable animation missing some lazy composition tasks rather than crash.\r\n\r\nFixes #1702",
    "date": "2020-12-27T22:49:04Z",
    "url": "https://github.com/airbnb/lottie-android/commit/5038e4a7ea4e46d150b15e34bbf02675005188ed",
    "details": {
      "sha": "d846b697a32cb449a87e2dab89aac81e43358852",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/5038e4a7ea4e46d150b15e34bbf02675005188ed/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/5038e4a7ea4e46d150b15e34bbf02675005188ed/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java?ref=5038e4a7ea4e46d150b15e34bbf02675005188ed",
      "patch": "@@ -226,7 +226,11 @@ public boolean setComposition(LottieComposition composition) {\n     Iterator<LazyCompositionTask> it = new ArrayList<>(lazyCompositionTasks).iterator();\n     while (it.hasNext()) {\n       LazyCompositionTask t = it.next();\n-      t.run(composition);\n+      // The task should never be null but it appears to happen in rare cases. Maybe it's an oem-specific or ART bug.\n+      // https://github.com/airbnb/lottie-android/issues/1702\n+      if (t != null) {\n+        t.run(composition);\n+      }\n       it.remove();\n     }\n     lazyCompositionTasks.clear();",
      "parent_sha": "accd634bd25588e4f0ef90c83194e54291e274a6"
    }
  },
  {
    "oid": "298081109b4ba4c133b8703a602c9fb47e20f8e6",
    "message": "Fall back to gradient array length when p is missing\n\nFixes #309",
    "date": "2017-07-20T02:07:40Z",
    "url": "https://github.com/airbnb/lottie-android/commit/298081109b4ba4c133b8703a602c9fb47e20f8e6",
    "details": {
      "sha": "92604f3cd9f9099fb4442d14c7e6b1890533267b",
      "filename": "lottie/src/main/java/com/airbnb/lottie/AnimatableGradientColorValue.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/298081109b4ba4c133b8703a602c9fb47e20f8e6/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FAnimatableGradientColorValue.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/298081109b4ba4c133b8703a602c9fb47e20f8e6/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FAnimatableGradientColorValue.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FAnimatableGradientColorValue.java?ref=298081109b4ba4c133b8703a602c9fb47e20f8e6",
      "patch": "@@ -28,8 +28,9 @@ private Factory() {\n \n     static AnimatableGradientColorValue newInstance(\n         JSONObject json, LottieComposition composition) {\n+      int points = json.optInt(\"p\", json.optJSONArray(\"k\").length() / 4);\n       AnimatableValueParser.Result<GradientColor> result = AnimatableValueParser\n-          .newInstance(json, 1, composition, new ValueFactory(json.optInt(\"p\")))\n+          .newInstance(json, 1, composition, new ValueFactory(points))\n           .parseJson();\n       GradientColor initialValue = result.initialValue;\n       return new AnimatableGradientColorValue(result.keyframes, initialValue);",
      "parent_sha": "5e069e8d158673257a7585571d577604a8aa305c"
    }
  },
  {
    "oid": "d2c47a78f4579b1eb25a3417a3a8902521263994",
    "message": "Ensure that the starting frame is set when setting a new composition",
    "date": "2018-03-10T23:16:07Z",
    "url": "https://github.com/airbnb/lottie-android/commit/d2c47a78f4579b1eb25a3417a3a8902521263994",
    "details": {
      "sha": "ecaf1c4d82518db542c077e2291ab6cdd3313fa3",
      "filename": "lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/d2c47a78f4579b1eb25a3417a3a8902521263994/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Futils%2FLottieValueAnimator.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/d2c47a78f4579b1eb25a3417a3a8902521263994/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Futils%2FLottieValueAnimator.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Futils%2FLottieValueAnimator.java?ref=d2c47a78f4579b1eb25a3417a3a8902521263994",
      "patch": "@@ -125,7 +125,7 @@ private float getFrameDurationNs() {\n \n   public void setComposition(LottieComposition composition) {\n     this.composition = composition;\n-    frame = getMinFrame();\n+    setFrame((int) frame);\n     frameTime = System.nanoTime();\n   }\n ",
      "parent_sha": "c0228361d63b7d87a2a34c893913e3662e93636f"
    }
  },
  {
    "oid": "d74aab32207d0de24a837ca34055e1814d53a0a0",
    "message": "Bugfix - Render LottieAnimationView in edit mode (#42)\n\n* Changes the init() method of the LottieAnimationView so the animation is only set if the view is not in edit mode (e.g. layout preview).\r\n\r\n* Reverts code formatting.",
    "date": "2017-02-02T19:13:49Z",
    "url": "https://github.com/airbnb/lottie-android/commit/d74aab32207d0de24a837ca34055e1814d53a0a0",
    "details": {
      "sha": "717d4b58c5383b53eb485468353ff0b614da6152",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/d74aab32207d0de24a837ca34055e1814d53a0a0/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/d74aab32207d0de24a837ca34055e1814d53a0a0/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java?ref=d74aab32207d0de24a837ca34055e1814d53a0a0",
      "patch": "@@ -90,7 +90,7 @@ public LottieAnimationView(Context context, AttributeSet attrs, int defStyleAttr\n     private void init(@Nullable AttributeSet attrs) {\n         TypedArray ta = getContext().obtainStyledAttributes(attrs, R.styleable.LottieAnimationView);\n         String fileName = ta.getString(R.styleable.LottieAnimationView_lottie_fileName);\n-        if (fileName != null) {\n+        if (!isInEditMode() && fileName != null) {\n             setAnimation(fileName);\n         }\n         if (ta.getBoolean(R.styleable.LottieAnimationView_lottie_autoPlay, false)) {",
      "parent_sha": "864198bb204e48b843eb27f28c1b4e53e6405231"
    }
  },
  {
    "oid": "6b6047a5290f6aadc9f6866adada00d745b111d8",
    "message": "Add back but deprecate fromJsonSync(Resources, JSONObject)\n\n#612",
    "date": "2018-02-10T22:39:57Z",
    "url": "https://github.com/airbnb/lottie-android/commit/6b6047a5290f6aadc9f6866adada00d745b111d8",
    "details": {
      "sha": "db0fa994c33d4f89290f055f21722878f88197c6",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieComposition.java",
      "status": "modified",
      "additions": 26,
      "deletions": 1,
      "changes": 27,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/6b6047a5290f6aadc9f6866adada00d745b111d8/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieComposition.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/6b6047a5290f6aadc9f6866adada00d745b111d8/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieComposition.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieComposition.java?ref=6b6047a5290f6aadc9f6866adada00d745b111d8",
      "patch": "@@ -1,6 +1,7 @@\n package com.airbnb.lottie;\n \n import android.content.Context;\n+import android.content.res.Resources;\n import android.graphics.Rect;\n import android.os.AsyncTask;\n import android.support.annotation.Nullable;\n@@ -13,10 +14,12 @@\n \n import com.airbnb.lottie.model.Font;\n import com.airbnb.lottie.model.FontCharacter;\n-import com.airbnb.lottie.parser.AsyncCompositionLoader;\n import com.airbnb.lottie.model.layer.Layer;\n+import com.airbnb.lottie.parser.AsyncCompositionLoader;\n import com.airbnb.lottie.parser.LottieCompositionParser;\n \n+import org.json.JSONObject;\n+\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n@@ -237,6 +240,28 @@ public static LottieComposition fromInputStreamSync(InputStream stream) {\n       return composition;\n     }\n \n+    /**\n+     * Lottie now uses a streaming json parser. Prefer {@link #fromJsonSync(JsonReader)} if possible.\n+     * <p>\n+     * This will call toString() on your entire JSONObject.\n+     */\n+    @Deprecated\n+    public static LottieComposition fromJsonSync(@SuppressWarnings(\"unused\") Resources res, JSONObject json) {\n+      return fromJsonSync(json.toString());\n+    }\n+\n+    /**\n+     * Prefer using a JsonReader directly when possible. Reference the source for the async\n+     * factory methods above.\n+     */\n+    public static LottieComposition fromJsonSync(String string) {\n+      try {\n+        return fromJsonSync(new JsonReader(new StringReader(string)));\n+      } catch (IOException e) {\n+        throw new IllegalArgumentException(e);\n+      }\n+    }\n+\n     public static LottieComposition fromJsonSync(JsonReader reader) throws IOException {\n       return LottieCompositionParser.parse(reader);\n     }",
      "parent_sha": "58659eb6f68224261ad11e58b11c17e47fea81a2"
    }
  },
  {
    "oid": "181620ba3abfecc6bf4a87fc35773da7057dd0d8",
    "message": "Reenabled shape start-delays",
    "date": "2016-10-14T21:04:06Z",
    "url": "https://github.com/airbnb/lottie-android/commit/181620ba3abfecc6bf4a87fc35773da7057dd0d8",
    "details": {
      "sha": "37ed0eca76865b02dc458820934e3a58eff4e0f9",
      "filename": "lottie/src/main/java/com/airbnb/lottie/animation/LottieAnimatableShapeValue.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/181620ba3abfecc6bf4a87fc35773da7057dd0d8/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2FLottieAnimatableShapeValue.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/181620ba3abfecc6bf4a87fc35773da7057dd0d8/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2FLottieAnimatableShapeValue.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fanimation%2FLottieAnimatableShapeValue.java?ref=181620ba3abfecc6bf4a87fc35773da7057dd0d8",
      "patch": "@@ -133,8 +133,7 @@ private PointF vertexAtIndex(int idx, JSONArray points) {\n     @Override\n     public LottieKeyframeAnimation animationForKeyPath() {\n         LottieShapeKeyframeAnimation animation = new LottieShapeKeyframeAnimation(duration, compDuration, keyTimes, keyValues, interpolators);\n-        // TODO: use this\n-//        animation.setStartDelay(delay);\n+        animation.setStartDelay(delay);\n         animation.addUpdateListener(new LottieKeyframeAnimation.AnimationListener<Path>() {\n             @Override\n             public void onValueChanged(Path progress) {",
      "parent_sha": "14ea5d74cc311318783c7a1c9bfda57d86a56a46"
    }
  },
  {
    "oid": "f7403f445cd3d9897d683dd2b59ec8d2804de17b",
    "message": "Annotate composition as nullable",
    "date": "2016-10-06T23:03:26Z",
    "url": "https://github.com/airbnb/lottie-android/commit/f7403f445cd3d9897d683dd2b59ec8d2804de17b",
    "details": {
      "sha": "707afdacdf4b8b0fe0579cb7ba66831428b02f5d",
      "filename": "lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/f7403f445cd3d9897d683dd2b59ec8d2804de17b/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2FLotteAnimationView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/f7403f445cd3d9897d683dd2b59ec8d2804de17b/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2FLotteAnimationView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2FLotteAnimationView.java?ref=f7403f445cd3d9897d683dd2b59ec8d2804de17b",
      "patch": "@@ -10,6 +10,7 @@\n import android.graphics.drawable.Drawable;\n import android.os.AsyncTask;\n import android.support.annotation.FloatRange;\n+import android.support.annotation.NonNull;\n import android.support.annotation.Nullable;\n import android.util.AttributeSet;\n import android.util.LongSparseArray;\n@@ -32,7 +33,8 @@ public class LotteAnimationView extends ImageView {\n     private final LongSparseArray<LotteLayerView> layerMap = new LongSparseArray<>();\n     private final RootLotteAnimatableLayer rootAnimatableLayer = new RootLotteAnimatableLayer(this);\n \n-    private LotteComposition composition;\n+    /** Can be null because it is created async */\n+    @Nullable private LotteComposition composition;\n     private boolean hasInvalidatedThisFrame;\n     @Nullable private Bitmap mainBitmap;\n     @Nullable private Bitmap maskBitmap;\n@@ -80,12 +82,12 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n     }\n \n     @Override\n-    protected boolean verifyDrawable(Drawable drawable) {\n+    protected boolean verifyDrawable(@NonNull Drawable drawable) {\n         return true;\n     }\n \n     @Override\n-    public void invalidateDrawable(Drawable dr) {\n+    public void invalidateDrawable(@NonNull Drawable dr) {\n         if (!hasInvalidatedThisFrame) {\n             super.invalidateDrawable(rootAnimatableLayer);\n             hasInvalidatedThisFrame = true;\n@@ -191,7 +193,7 @@ private void setJsonSync(JSONObject json) {\n         setComposition(composition);\n     }\n \n-    public void setComposition(LotteComposition composition) {\n+    public void setComposition(@NonNull LotteComposition composition) {\n         this.composition = composition;\n         rootAnimatableLayer.setCompDuration(composition.getDuration());\n         rootAnimatableLayer.setBounds(0, 0, composition.getBounds().width(), composition.getBounds().height());\n@@ -201,6 +203,7 @@ public void setComposition(LotteComposition composition) {\n     }\n \n     private void buildSubviewsForComposition() {\n+        //noinspection ConstantConditions\n         List<LotteLayer> reversedLayers = composition.getLayers();\n         Collections.reverse(reversedLayers);\n \n@@ -278,10 +281,10 @@ public void setProgress(@FloatRange(from=0f, to=1f) float progress) {\n     }\n \n     public int getFrameRate() {\n-        return composition.getFrameRate();\n+        return composition != null ? composition.getFrameRate() : 60;\n     }\n \n     public long getDuration() {\n-        return composition.getDuration();\n+        return composition != null ? composition.getDuration() : 0;\n     }\n }",
      "parent_sha": "20abd832eeeef7bc41b70c3fa9cd50275e633ca2"
    }
  },
  {
    "oid": "1d8eb6a60bee43066a76a89efabb658de2c41bd8",
    "message": "Always use original context (Activity) when obtaining cache key and resource stream to correctly load and handle raw-night resources when the dark mode is on (#1361)\n\nApplication context isn't reliable source of information about dark mode (uiMode is UI_MODE_NIGHT_NO when the dark mode is on - Activity carries the correct information) and can incorrectly return default resource instead of the -night variant.\r\n\r\nFixes #1305",
    "date": "2019-10-08T18:35:26Z",
    "url": "https://github.com/airbnb/lottie-android/commit/1d8eb6a60bee43066a76a89efabb658de2c41bd8",
    "details": {
      "sha": "f2972796cd0f9468087b546b1edb88b9701ad2bf",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java",
      "status": "modified",
      "additions": 15,
      "deletions": 6,
      "changes": 21,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/1d8eb6a60bee43066a76a89efabb658de2c41bd8/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieCompositionFactory.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/1d8eb6a60bee43066a76a89efabb658de2c41bd8/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieCompositionFactory.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieCompositionFactory.java?ref=1d8eb6a60bee43066a76a89efabb658de2c41bd8",
      "patch": "@@ -18,6 +18,7 @@\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.lang.ref.WeakReference;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.concurrent.Callable;\n@@ -128,14 +129,19 @@ public static LottieResult<LottieComposition> fromAssetSync(Context context, Str\n    * Parse an animation from raw/res. This is recommended over putting your animation in assets because\n    * it uses a hard reference to R.\n    * The resource id will be used as a cache key so future usages won't parse the json again.\n+   * Note: to correctly load dark mode (-night) resources, make sure you pass Activity as a context (instead of e.g. the application context).\n+   * The Activity won't be leaked.\n    */\n   public static LottieTask<LottieComposition> fromRawRes(Context context, @RawRes final int rawRes) {\n     // Prevent accidentally leaking an Activity.\n+    final WeakReference<Context> contextRef = new WeakReference<>(context);\n     final Context appContext = context.getApplicationContext();\n     return cache(rawResCacheKey(context, rawRes), new Callable<LottieResult<LottieComposition>>() {\n       @Override\n       public LottieResult<LottieComposition> call() {\n-        return fromRawResSync(appContext, rawRes);\n+        @Nullable Context originalContext = contextRef.get();\n+        Context context = originalContext != null ? originalContext : appContext;\n+        return fromRawResSync(context, rawRes);\n       }\n     });\n   }\n@@ -144,6 +150,8 @@ public LottieResult<LottieComposition> call() {\n    * Parse an animation from raw/res. This is recommended over putting your animation in assets because\n    * it uses a hard reference to R.\n    * The resource id will be used as a cache key so future usages won't parse the json again.\n+   * Note: to correctly load dark mode (-night) resources, make sure you pass Activity as a context (instead of e.g. the application context).\n+   * The Activity won't be leaked.\n    */\n   @WorkerThread\n   public static LottieResult<LottieComposition> fromRawResSync(Context context, @RawRes int rawRes) {\n@@ -270,7 +278,9 @@ private static LottieResult<LottieComposition> fromJsonReaderSyncInternal(\n       com.airbnb.lottie.parser.moshi.JsonReader reader, @Nullable String cacheKey, boolean close) {\n     try {\n       LottieComposition composition = LottieCompositionMoshiParser.parse(reader);\n-      LottieCompositionCache.getInstance().put(cacheKey, composition);\n+      if (cacheKey != null) {\n+        LottieCompositionCache.getInstance().put(cacheKey, composition);\n+      }\n       return new LottieResult<>(composition);\n     } catch (Exception e) {\n       return new LottieResult<>(e);\n@@ -352,7 +362,9 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(ZipInpu\n       }\n     }\n \n-    LottieCompositionCache.getInstance().put(cacheKey, composition);\n+    if (cacheKey != null) {\n+      LottieCompositionCache.getInstance().put(cacheKey, composition);\n+    }\n     return new LottieResult<>(composition);\n   }\n \n@@ -390,9 +402,6 @@ public LottieResult<LottieComposition> call() {\n     task.addListener(new LottieListener<LottieComposition>() {\n       @Override\n       public void onResult(LottieComposition result) {\n-        if (cacheKey != null) {\n-          LottieCompositionCache.getInstance().put(cacheKey, result);\n-        }\n         taskCache.remove(cacheKey);\n       }\n     });",
      "parent_sha": "2fb3143fb54b9f65d0bf7d2ad5667f0a77147117"
    }
  },
  {
    "oid": "5eb81c00292f470e92842e53cc1085dffdaff1b3",
    "message": "[Compose] Fix safe mode for Compose (#2557)",
    "date": "2024-09-29T07:06:12Z",
    "url": "https://github.com/airbnb/lottie-android/commit/5eb81c00292f470e92842e53cc1085dffdaff1b3",
    "details": {
      "sha": "5a0de484205558175765dfdb8a6e92fd4fcba0dc",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java",
      "status": "modified",
      "additions": 28,
      "deletions": 11,
      "changes": 39,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/5eb81c00292f470e92842e53cc1085dffdaff1b3/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/5eb81c00292f470e92842e53cc1085dffdaff1b3/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java?ref=5eb81c00292f470e92842e53cc1085dffdaff1b3",
      "patch": "@@ -70,7 +70,9 @@\n  */\n @SuppressWarnings({\"WeakerAccess\"})\n public class LottieDrawable extends Drawable implements Drawable.Callback, Animatable {\n+\n   private interface LazyCompositionTask {\n+\n     void run(LottieComposition composition);\n   }\n \n@@ -96,10 +98,10 @@ private enum OnVisibleAction {\n   /**\n    * The marker to use if \"reduced motion\" is enabled.\n    * Supported marker names are case insensitive, and include:\n-   *   - reduced motion\n-   *   - reducedMotion\n-   *   - reduced_motion\n-   *   - reduced-motion\n+   * - reduced motion\n+   * - reducedMotion\n+   * - reduced_motion\n+   * - reduced-motion\n    */\n   private static final List<String> ALLOWED_REDUCED_MOTION_MARKERS = Arrays.asList(\n       \"reduced motion\",\n@@ -179,7 +181,9 @@ private enum OnVisibleAction {\n    */\n   private boolean isDirty = false;\n \n-  /** Use the getter so that it can fall back to {@link L#getDefaultAsyncUpdates()}. */\n+  /**\n+   * Use the getter so that it can fall back to {@link L#getDefaultAsyncUpdates()}.\n+   */\n   @Nullable private AsyncUpdates asyncUpdates;\n   private final ValueAnimator.AnimatorUpdateListener progressUpdateListener = animation -> {\n     if (getAsyncUpdatesEnabled()) {\n@@ -250,6 +254,7 @@ private enum OnVisibleAction {\n   @IntDef({RESTART, REVERSE})\n   @Retention(RetentionPolicy.SOURCE)\n   public @interface RepeatMode {\n+\n   }\n \n   /**\n@@ -766,13 +771,14 @@ public void draw(Canvas canvas, Matrix matrix) {\n         }\n       }\n \n-      if (useSoftwareRendering) {\n-        canvas.save();\n-        canvas.concat(matrix);\n-        renderAndDrawAsBitmap(canvas, compositionLayer);\n-        canvas.restore();\n+      if (safeMode) {\n+        try {\n+          draw(canvas, matrix, compositionLayer, alpha);\n+        } catch (Throwable e) {\n+          Logger.error(\"Lottie crashed in draw!\", e);\n+        }\n       } else {\n-        compositionLayer.draw(canvas, matrix, alpha);\n+        draw(canvas, matrix, compositionLayer, alpha);\n       }\n       isDirty = false;\n     } catch (InterruptedException e) {\n@@ -787,6 +793,17 @@ public void draw(Canvas canvas, Matrix matrix) {\n     }\n   }\n \n+  private void draw(Canvas canvas, Matrix matrix, CompositionLayer compositionLayer, int alpha) {\n+    if (useSoftwareRendering) {\n+      canvas.save();\n+      canvas.concat(matrix);\n+      renderAndDrawAsBitmap(canvas, compositionLayer);\n+      canvas.restore();\n+    } else {\n+      compositionLayer.draw(canvas, matrix, alpha);\n+    }\n+  }\n+\n   // <editor-fold desc=\"animator\">\n \n   @MainThread",
      "parent_sha": "b851583359b9892aa875171726bd2c8d0bbbce23"
    }
  },
  {
    "oid": "40eace73c1102477c4bb7b86a5e9843c230ebf11",
    "message": "Use a different method for splitting the version string\n\nI think some devices have a broken regex function that causes\nsplit to fail on the current regex. This version may work better.\nFixes #559",
    "date": "2017-12-12T03:38:34Z",
    "url": "https://github.com/airbnb/lottie-android/commit/40eace73c1102477c4bb7b86a5e9843c230ebf11",
    "details": {
      "sha": "b98528f0322e33374c99b671f711cb6e417334a0",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieComposition.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/40eace73c1102477c4bb7b86a5e9843c230ebf11/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieComposition.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/40eace73c1102477c4bb7b86a5e9843c230ebf11/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieComposition.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieComposition.java?ref=40eace73c1102477c4bb7b86a5e9843c230ebf11",
      "patch": "@@ -278,7 +278,7 @@ public static LottieComposition fromJsonSync(Resources res, JSONObject json) {\n       long endFrame = json.optLong(\"op\", 0);\n       float frameRate = (float) json.optDouble(\"fr\", 0);\n       String version = json.optString(\"v\");\n-      String[] versions = version.split(\"[.]\");\n+      String[] versions = version.split(\"\\\\.\");\n       int major = Integer.parseInt(versions[0]);\n       int minor = Integer.parseInt(versions[1]);\n       int patch = Integer.parseInt(versions[2]);",
      "parent_sha": "3c9e39175c0d9a1d8ab0031fafbc20dabf66db8c"
    }
  },
  {
    "oid": "ec1e960c9b49718f1038d2b41281a71c955e0fdd",
    "message": "Guard against Bitmap allocations of size 0 (#2626)\n\nFixes https://github.com/airbnb/lottie-android/issues/2620, which only occurs on Android 12 devices.",
    "date": "2025-04-02T23:38:56Z",
    "url": "https://github.com/airbnb/lottie-android/commit/ec1e960c9b49718f1038d2b41281a71c955e0fdd",
    "details": {
      "sha": "af7788c37803c8f804483ccee211ee07e0abacc7",
      "filename": "lottie/src/main/java/com/airbnb/lottie/utils/OffscreenLayer.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/ec1e960c9b49718f1038d2b41281a71c955e0fdd/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Futils%2FOffscreenLayer.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/ec1e960c9b49718f1038d2b41281a71c955e0fdd/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Futils%2FOffscreenLayer.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Futils%2FOffscreenLayer.java?ref=ec1e960c9b49718f1038d2b41281a71c955e0fdd",
      "patch": "@@ -186,7 +186,11 @@ private Bitmap allocateBitmap(RectF bounds, Bitmap.Config cfg) {\n     // still being relatively speedy to blit and operate on.\n     int width = (int)Math.ceil(bounds.width() * 1.05);\n     int height = (int)Math.ceil(bounds.height() * 1.05);\n-    return Bitmap.createBitmap(width, height, cfg);\n+\n+    // In certain cases the provided bounds can have a width or height of 0, which will cause a runtime crash\n+    // when we try to allocate a Bitmap. To guard against this, use a minimum size of 1x1.\n+    // See https://github.com/airbnb/lottie-android/issues/2620\n+    return Bitmap.createBitmap(Math.max(width, 1), Math.max(height, 1), cfg);\n   }\n \n   private void deallocateBitmap(Bitmap bitmap) {",
      "parent_sha": "ccff9af9c869e168fbccda7d0e0eb96894bd708d"
    }
  },
  {
    "oid": "827931b200b65533842e78de37c6035832fdf288",
    "message": "Fixed a crash with GroupLayerView position setting with a transform applied",
    "date": "2016-10-06T23:03:18Z",
    "url": "https://github.com/airbnb/lottie-android/commit/827931b200b65533842e78de37c6035832fdf288",
    "details": {
      "sha": "208f83426726fc91e056d838d71208c3e16cf810",
      "filename": "lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/827931b200b65533842e78de37c6035832fdf288/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2Flayers%2FLotteGroupLayerView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/827931b200b65533842e78de37c6035832fdf288/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2Flayers%2FLotteGroupLayerView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lotte%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flotte%2Flayers%2FLotteGroupLayerView.java?ref=827931b200b65533842e78de37c6035832fdf288",
      "patch": "@@ -44,7 +44,7 @@ private void setupShapeGroupWithFill(LotteShapeFill previousFill,\n         if (shapeTransform != null) {\n             setBounds(shapeTransform.getCompBounds());\n             anchorPoint = shapeTransform.getAnchor().getObservable();\n-            position.setValue(shapeTransform.getPosition().getInitialPoint());\n+            position = shapeTransform.getPosition().getObservable();\n             setAlpha((int) (shapeTransform.getOpacity().getInitialValue()));\n             transform = shapeTransform.getScale().getObservable();\n             sublayerTransform = new Observable<>(new LotteTransform3D());",
      "parent_sha": "5e4663dce9be2d7515439ed83e731426fe8115b2"
    }
  },
  {
    "oid": "9d3e45b7e4230b1483cf26cde8c7e0d42215ce23",
    "message": "Fix unbalanced trace endSection call\n\nFixes #357",
    "date": "2017-06-29T02:34:36Z",
    "url": "https://github.com/airbnb/lottie-android/commit/9d3e45b7e4230b1483cf26cde8c7e0d42215ce23",
    "details": {
      "sha": "b91a123abfc301cd3db55280d506f9b5b7b9fb13",
      "filename": "lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/9d3e45b7e4230b1483cf26cde8c7e0d42215ce23/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FBaseStrokeContent.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/9d3e45b7e4230b1483cf26cde8c7e0d42215ce23/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FBaseStrokeContent.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FBaseStrokeContent.java?ref=9d3e45b7e4230b1483cf26cde8c7e0d42215ce23",
      "patch": "@@ -150,8 +150,8 @@ private static final class TraceSections {\n           path.addPath(pathGroup.paths.get(j).getPath(), parentMatrix);\n         }\n         canvas.drawPath(path, paint);\n+        L.endSection(traceSections.drawPath);\n       }\n-      L.endSection(traceSections.drawPath);\n     }\n     L.endSection(traceSections.draw);\n   }",
      "parent_sha": "5cf67028e882659af366b4504096d77427a879a8"
    }
  },
  {
    "oid": "4902a9a8963a2c050b94af3d5df15d3bf210f67e",
    "message": "Updated setAnimation(JSONObject) docs",
    "date": "2016-10-31T05:36:55Z",
    "url": "https://github.com/airbnb/lottie-android/commit/4902a9a8963a2c050b94af3d5df15d3bf210f67e",
    "details": {
      "sha": "d58af507a8e6a0a6471af3edaa8c5035ea2e3bc2",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/4902a9a8963a2c050b94af3d5df15d3bf210f67e/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/4902a9a8963a2c050b94af3d5df15d3bf210f67e/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java?ref=4902a9a8963a2c050b94af3d5df15d3bf210f67e",
      "patch": "@@ -40,7 +40,7 @@\n  *\n  * You may set the animation in one of two ways:\n  * 1) Attrs: {@link R.styleable#LottieAnimationView_lottie_fileName}\n- * 2) Programatically: {@link #setAnimation(String)}\n+ * 2) Programatically: {@link #setAnimation(String)} or {@link #setAnimation(JSONObject)}.\n  *\n  * You may manually set the progress of the animation with {@link #setProgress(float)}\n  */\n@@ -204,6 +204,9 @@ protected void onPostExecute(JSONObject jsonObject) {\n         }.execute(file);\n     }\n \n+    /**\n+     * Sets the animation using the raw JSON Object.\n+     */\n     public void setAnimation(JSONObject json) {\n         // TODO: cancel these if the iew gets detached.\n         new AsyncTask<JSONObject, Void, Composition>() {",
      "parent_sha": "45273dc673ce24843ae6248e7ab9e21a24e63538"
    }
  },
  {
    "oid": "c972ebe82505732733be70052f45b466039e53d0",
    "message": "Reverted cache strategy. Compositions aren't reusable yet.",
    "date": "2016-11-28T18:29:48Z",
    "url": "https://github.com/airbnb/lottie-android/commit/c972ebe82505732733be70052f45b466039e53d0",
    "details": {
      "sha": "d025dba2712799c8883d6285fd64700eb63ad9c3",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java",
      "status": "modified",
      "additions": 10,
      "deletions": 53,
      "changes": 63,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/c972ebe82505732733be70052f45b466039e53d0/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/c972ebe82505732733be70052f45b466039e53d0/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java?ref=c972ebe82505732733be70052f45b466039e53d0",
      "patch": "@@ -25,12 +25,8 @@\n import com.airbnb.lottie.model.Layer;\n import com.airbnb.lottie.model.LottieComposition;\n \n-import java.lang.ref.WeakReference;\n-import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n \n /**\n  * This view will load, deserialize, and display an After Effects animation exported with\n@@ -44,16 +40,6 @@\n  */\n public class LottieAnimationView extends ImageView {\n \n-    /**\n-     * Caching strategy for compositions that will be reused frequently.\n-     * Weak or Strong indicates the GC reference strength of the composition in the cache.\n-     */\n-    public enum CacheStrategy {\n-        None,\n-        Weak,\n-        Strong\n-    }\n-\n \n     /**\n      * Returns a {@link LottieAnimationView} that will allow it to be used without being attached to a window.\n@@ -66,8 +52,12 @@ public static LottieAnimationView forScreenshotTest(Context context) {\n         return view;\n     }\n \n-    @Nullable private static Map<String, LottieComposition> strongRefCache;\n-    @Nullable private static Map<String, WeakReference<LottieComposition>> weakRefCache;\n+    private final LottieComposition.OnCompositionLoadedListener loadedListener = new LottieComposition.OnCompositionLoadedListener() {\n+        @Override\n+        public void onCompositionLoaded(LottieComposition composition) {\n+            setComposition(composition);\n+        }\n+    };\n \n     private final LongSparseArray<LayerView> layerMap = new LongSparseArray<>();\n     private final RootAnimatableLayer rootAnimatableLayer = new RootAnimatableLayer(this);\n@@ -199,50 +189,17 @@ public void recycleBitmaps() {\n         }\n     }\n \n-    public void setAnimation(String animationName) {\n-        setAnimation(animationName, CacheStrategy.None);\n-    }\n-\n     /**\n      * Sets the animation from a file in the assets directory.\n      * This will load and deserialize the file asynchronously.\n      */\n-    @SuppressWarnings(\"WeakerAccess\")\n-    public void setAnimation(final String animationName, final CacheStrategy cacheStrategy) {\n-        this.animationName = animationName;\n-        if (weakRefCache != null && weakRefCache.containsKey(animationName)) {\n-            WeakReference<LottieComposition> compRef = weakRefCache.get(animationName);\n-            if (compRef.get() != null) {\n-                setComposition(compRef.get());\n-                return;\n-            }\n-        } else if (strongRefCache != null && strongRefCache.containsKey(animationName)) {\n-            setComposition(strongRefCache.get(animationName));\n-            return;\n-        }\n-\n+    public void setAnimation(final String animationName) {\n         isAnimationLoading = true;\n         setProgressWhenCompositionSet = false;\n         playAnimationWhenCompositionSet = false;\n \n-        LottieComposition.fromFile(getContext(), animationName, new LottieComposition.OnCompositionLoadedListener() {\n-            @Override\n-            public void onCompositionLoaded(LottieComposition composition) {\n-                if (cacheStrategy == CacheStrategy.Strong) {\n-                    if (strongRefCache == null) {\n-                        strongRefCache = new HashMap<>();\n-                    }\n-                    strongRefCache.put(animationName, composition);\n-                } else if (cacheStrategy == CacheStrategy.Weak) {\n-                    if (weakRefCache == null) {\n-                        weakRefCache = new HashMap<>();\n-                    }\n-                    weakRefCache.put(animationName, new WeakReference<>(composition));\n-                }\n-\n-                setComposition(composition);\n-            }\n-        });\n+        this.animationName = animationName;\n+        LottieComposition.fromFile(getContext(), animationName, loadedListener);\n     }\n \n     public void setComposition(@NonNull LottieComposition composition) {\n@@ -276,7 +233,7 @@ public void setComposition(@NonNull LottieComposition composition) {\n \n     private void buildSubviewsForComposition() {\n         //noinspection ConstantConditions\n-        List<Layer> reversedLayers = new ArrayList<>(composition.getLayers());\n+        List<Layer> reversedLayers = composition.getLayers();\n         Collections.reverse(reversedLayers);\n \n         Rect bounds = composition.getBounds();",
      "parent_sha": "8fe24c309238b5f3d28b65e3c70604e7f71c0a59"
    }
  },
  {
    "oid": "a483b7695e2a9ec5e8ea4b50b1223f806e890ca5",
    "message": "Fix issues about visibility changes (#1174)\n\n1) The animation could be played although it is not visible.\r\nonVisibilityChanged callback will be called even when\r\nthe visibility of an ancestor of the view has changed.\r\nSo we need to check the visibility with isShown(),\r\nnot with visibility == View.VISIBLE in onVisibilityChanged callback.\r\n\r\n2) playAnimation() and resumeAnimation() could be called while not visible.\r\nplayAnimation() and resumeAnimation() should be blocked\r\nif the view is not visible, and the animation should be\r\nresumed when the view goes visible.\r\nSo, we need to set wasAnimatingWhenNotShown=true\r\nin playAnimation() and resumeAnimation() when the view is not visible.\r\n\r\n3) pauseAnimation() and cancelAnimation() were not worked when the activity is in background.\r\nThe animation could be resumed by onVisibilityChanged() callback.\r\nWe need to reset wasAnimatingWhenNotShown=false in pauseAnimation() and cancelAnimation().\r\n\r\nFixes #1173",
    "date": "2019-04-10T10:27:39Z",
    "url": "https://github.com/airbnb/lottie-android/commit/a483b7695e2a9ec5e8ea4b50b1223f806e890ca5",
    "details": {
      "sha": "3a15402ec937fcada2a78f2c4d5cd499d51a0ee0",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java",
      "status": "modified",
      "additions": 19,
      "deletions": 8,
      "changes": 27,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/a483b7695e2a9ec5e8ea4b50b1223f806e890ca5/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/a483b7695e2a9ec5e8ea4b50b1223f806e890ca5/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java?ref=a483b7695e2a9ec5e8ea4b50b1223f806e890ca5",
      "patch": "@@ -72,7 +72,7 @@\n   private final LottieDrawable lottieDrawable = new LottieDrawable();\n   private String animationName;\n   private @RawRes int animationResId;\n-  private boolean wasAnimatingWhenVisibilityChanged = false;\n+  private boolean wasAnimatingWhenNotShown = false;\n   private boolean wasAnimatingWhenDetached = false;\n   private boolean autoPlay = false;\n   private RenderMode renderMode = RenderMode.AUTOMATIC;\n@@ -238,14 +238,15 @@ protected void onVisibilityChanged(@NonNull View changedView, int visibility) {\n     if (lottieDrawable == null) {\n       return;\n     }\n-    if (visibility == VISIBLE) {\n-      if (wasAnimatingWhenVisibilityChanged) {\n+    if (isShown()) {\n+      if (wasAnimatingWhenNotShown) {\n         resumeAnimation();\n+        wasAnimatingWhenNotShown = false;\n       }\n     } else {\n-      wasAnimatingWhenVisibilityChanged = isAnimating();\n       if (isAnimating()) {\n         pauseAnimation();\n+        wasAnimatingWhenNotShown = true;\n       }\n     }\n   }\n@@ -411,8 +412,12 @@ public boolean hasMatte() {\n    */\n   @MainThread\n   public void playAnimation() {\n-    lottieDrawable.playAnimation();\n-    enableOrDisableHardwareLayer();\n+    if (isShown()) {\n+      lottieDrawable.playAnimation();\n+      enableOrDisableHardwareLayer();\n+    } else {\n+      wasAnimatingWhenNotShown = true;\n+    }\n   }\n \n   /**\n@@ -421,8 +426,12 @@ public void playAnimation() {\n    */\n   @MainThread\n   public void resumeAnimation() {\n-    lottieDrawable.resumeAnimation();\n-    enableOrDisableHardwareLayer();\n+    if (isShown()) {\n+      lottieDrawable.resumeAnimation();\n+      enableOrDisableHardwareLayer();\n+    } else {\n+      wasAnimatingWhenNotShown = true;\n+    }\n   }\n \n   /**\n@@ -740,12 +749,14 @@ public float getScale() {\n \n   @MainThread\n   public void cancelAnimation() {\n+    wasAnimatingWhenNotShown = false;\n     lottieDrawable.cancelAnimation();\n     enableOrDisableHardwareLayer();\n   }\n \n   @MainThread\n   public void pauseAnimation() {\n+    wasAnimatingWhenNotShown = false;\n     lottieDrawable.pauseAnimation();\n     enableOrDisableHardwareLayer();\n   }",
      "parent_sha": "d7e044f21ee2fde0b69dde068f76503aa23fa5a8"
    }
  },
  {
    "oid": "b9dc5baa0ef22bf201f235de877e643dd72d3dc7",
    "message": "Check for lottieDrawable in some ImageView methods\n\nFixes #159",
    "date": "2017-03-06T06:40:20Z",
    "url": "https://github.com/airbnb/lottie-android/commit/b9dc5baa0ef22bf201f235de877e643dd72d3dc7",
    "details": {
      "sha": "3e0369d7ce52834a235a0e1e31b1afb6eb6005f7",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java",
      "status": "modified",
      "additions": 17,
      "deletions": 3,
      "changes": 20,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/b9dc5baa0ef22bf201f235de877e643dd72d3dc7/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/b9dc5baa0ef22bf201f235de877e643dd72d3dc7/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java?ref=b9dc5baa0ef22bf201f235de877e643dd72d3dc7",
      "patch": "@@ -119,10 +119,24 @@ private void init(@Nullable AttributeSet attrs) {\n     }\n   }\n \n+  @Override public void setImageResource(int resId) {\n+    super.setImageResource(resId);\n+    recycleBitmaps();\n+  }\n+\n+  @Override public void setImageDrawable(Drawable drawable) {\n+    if (drawable != lottieDrawable) {\n+      recycleBitmaps();\n+    }\n+    super.setImageDrawable(drawable);\n+  }\n+\n   @Override public void invalidateDrawable(Drawable dr) {\n-    // We always want to invalidate the root drawable to it redraws the whole drawable.\n-    // Eventually it would be great to be able to invalidate just the changed region.\n-    super.invalidateDrawable(lottieDrawable);\n+    if (getDrawable() == lottieDrawable) {\n+      // We always want to invalidate the root drawable to it redraws the whole drawable.\n+      // Eventually it would be great to be able to invalidate just the changed region.\n+      super.invalidateDrawable(lottieDrawable);\n+    }\n   }\n \n   @Override protected Parcelable onSaveInstanceState() {",
      "parent_sha": "01031d26993c60557130fa9b1f2cc4181ed2b12e"
    }
  },
  {
    "oid": "56640b09df56270029afd0c5fff6e93b41009815",
    "message": "Default layer names to UNSET rather than crashing when unset\n\nSee code comment for more info\nFixes #951",
    "date": "2018-09-24T06:17:29Z",
    "url": "https://github.com/airbnb/lottie-android/commit/56640b09df56270029afd0c5fff6e93b41009815",
    "details": {
      "sha": "87ee5178e46b57aba1f2a5bbeb98e1a54068bf97",
      "filename": "lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/56640b09df56270029afd0c5fff6e93b41009815/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fparser%2FLayerParser.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/56640b09df56270029afd0c5fff6e93b41009815/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fparser%2FLayerParser.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2Fparser%2FLayerParser.java?ref=56640b09df56270029afd0c5fff6e93b41009815",
      "patch": "@@ -35,7 +35,9 @@ public static Layer parse(LottieComposition composition) {\n   }\n \n   public static Layer parse(JsonReader reader, LottieComposition composition) throws IOException {\n-    String layerName = null;\n+    // This should always be set by After Effects. However, if somebody wants to minify\n+    // and optimize their json, the name isn't critical for most cases so it can be removed.\n+    String layerName = \"UNSET\";\n     Layer.LayerType layerType = null;\n     String refId = null;\n     long layerId = 0;",
      "parent_sha": "5922b3660cc0ae8b18fea51a67946e40465d9bfc"
    }
  },
  {
    "oid": "f9690d7dc371f021e56dc1b07f88407369df78ac",
    "message": "Make LottieDrawable#setComposition public",
    "date": "2017-02-28T19:22:46Z",
    "url": "https://github.com/airbnb/lottie-android/commit/f9690d7dc371f021e56dc1b07f88407369df78ac",
    "details": {
      "sha": "a4b3bb1f43f4159e70867310775c2616cd865d2c",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/f9690d7dc371f021e56dc1b07f88407369df78ac/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/f9690d7dc371f021e56dc1b07f88407369df78ac/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java?ref=f9690d7dc371f021e56dc1b07f88407369df78ac",
      "patch": "@@ -116,7 +116,7 @@ public class LottieDrawable extends AnimatableLayer implements Drawable.Callback\n   /**\n    * @return True if the composition is different from the previously set composition, false otherwise.\n    */\n-  boolean setComposition(LottieComposition composition) {\n+  @SuppressWarnings(\"WeakerAccess\") public boolean setComposition(LottieComposition composition) {\n     if (getCallback() == null) {\n       throw new IllegalStateException(\n           \"You or your view must set a Drawable.Callback before setting the composition. This \" +",
      "parent_sha": "a83c26a45269d4e72cdb854ddd65fa98d53b6581"
    }
  },
  {
    "oid": "9bd3f87c0405cb3ecb32b0ec9780185d026d67e5",
    "message": "Added an option to setDrawable without recycling bitmaps\n\nThis prevents scaling an animation from recycling bitmaps",
    "date": "2018-03-10T19:09:41Z",
    "url": "https://github.com/airbnb/lottie-android/commit/9bd3f87c0405cb3ecb32b0ec9780185d026d67e5",
    "details": {
      "sha": "02eed8b715791aab17275e4db643226813c944b6",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/9bd3f87c0405cb3ecb32b0ec9780185d026d67e5/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/9bd3f87c0405cb3ecb32b0ec9780185d026d67e5/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieAnimationView.java?ref=9bd3f87c0405cb3ecb32b0ec9780185d026d67e5",
      "patch": "@@ -177,7 +177,11 @@ private void init(@Nullable AttributeSet attrs) {\n   }\n \n   @Override public void setImageDrawable(Drawable drawable) {\n-    if (drawable != lottieDrawable) {\n+    setImageDrawable(drawable, true);\n+  }\n+\n+  private void setImageDrawable(Drawable drawable, boolean recycle) {\n+    if (recycle && drawable != lottieDrawable) {\n       recycleBitmaps();\n     }\n     cancelLoaderTask();\n@@ -780,8 +784,8 @@ public <T> void addValueCallback(KeyPath keyPath, T property,\n   public void setScale(float scale) {\n     lottieDrawable.setScale(scale);\n     if (getDrawable() == lottieDrawable) {\n-      setImageDrawable(null);\n-      setImageDrawable(lottieDrawable);\n+      setImageDrawable(null, false);\n+      setImageDrawable(lottieDrawable, false);\n     }\n   }\n ",
      "parent_sha": "f3c3e42c3426f9ae7abeab86c5920a7cfe3916b2"
    }
  },
  {
    "oid": "012cbc5b1405b8555b93aa95c85c33d9d5b4d3d3",
    "message": "Default the scale to 1",
    "date": "2017-05-29T18:48:22Z",
    "url": "https://github.com/airbnb/lottie-android/commit/012cbc5b1405b8555b93aa95c85c33d9d5b4d3d3",
    "details": {
      "sha": "b1d9bf6909afb3dbd04f291ee8c66bfc30b48140",
      "filename": "lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/airbnb/lottie-android/blob/012cbc5b1405b8555b93aa95c85c33d9d5b4d3d3/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "raw_url": "https://github.com/airbnb/lottie-android/raw/012cbc5b1405b8555b93aa95c85c33d9d5b4d3d3/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java",
      "contents_url": "https://api.github.com/repos/airbnb/lottie-android/contents/lottie%2Fsrc%2Fmain%2Fjava%2Fcom%2Fairbnb%2Flottie%2FLottieDrawable.java?ref=012cbc5b1405b8555b93aa95c85c33d9d5b4d3d3",
      "patch": "@@ -37,7 +37,7 @@ public class LottieDrawable extends Drawable implements Drawable.Callback {\n   private final ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);\n   private float speed = 1f;\n   private float progress = 0f;\n-  @Nullable private Float scale;\n+  private float scale = 1f;\n \n   private final Set<ColorFilterData> colorFilterData = new HashSet<>();\n   @Nullable private ImageAssetBitmapManager imageAssetBitmapManager;\n@@ -146,9 +146,6 @@ boolean enableMergePathsForKitKatAndAbove() {\n     clearComposition();\n     this.composition = composition;\n     setSpeed(speed);\n-    if (scale == null) {\n-      setScale(1f);\n-    }\n     updateBounds();\n     buildCompositionLayer();\n     applyColorFilters();",
      "parent_sha": "2ca720a16a1345b3b65079e285dcc1ee152c0545"
    }
  }
]