[
  {
    "oid": "3b20605b26c45045c995b7ec3276b9dfbb187152",
    "message": "Fix file formating by applying spring-javaformat:apply (#1685)",
    "date": "2021-03-30T13:47:12Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/3b20605b26c45045c995b7ec3276b9dfbb187152",
    "details": {
      "sha": "db2ebb1275630a90e0f0f2a7469394fe5df5865d",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerNotifierAutoConfiguration.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/3b20605b26c45045c995b7ec3276b9dfbb187152/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fconfig%2FAdminServerNotifierAutoConfiguration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/3b20605b26c45045c995b7ec3276b9dfbb187152/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fconfig%2FAdminServerNotifierAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fconfig%2FAdminServerNotifierAutoConfiguration.java?ref=3b20605b26c45045c995b7ec3276b9dfbb187152",
      "patch": "@@ -319,7 +319,8 @@ public static class DingTalkNotifierConfiguration {\n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n \t\t@ConfigurationProperties(\"spring.boot.admin.notify.dingtalk\")\n-\t\tpublic DingTalkNotifier dingTalkNotifier(InstanceRepository repository, NotifierProxyProperties proxyProperties) {\n+\t\tpublic DingTalkNotifier dingTalkNotifier(InstanceRepository repository,\n+\t\t\t\tNotifierProxyProperties proxyProperties) {\n \t\t\treturn new DingTalkNotifier(repository, createNotifierRestTemplate(proxyProperties));\n \t\t}\n ",
      "parent_sha": "d8d3038d7de374b9d74afd73afaf77cc346f4ccb"
    }
  },
  {
    "oid": "b10cd2efdcc42125bf3abf3f7546485d2afbd28b",
    "message": "refactor: use Base64 instead of Base64Utils (#3858)\n\nSpringBoot 3.4 will remove Base64Utils",
    "date": "2024-11-22T08:01:57Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/b10cd2efdcc42125bf3abf3f7546485d2afbd28b",
    "details": {
      "sha": "9a1ab988dd8d00ea53515ba27602558e6822bcec",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/BasicAuthHttpHeaderProvider.java",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/b10cd2efdcc42125bf3abf3f7546485d2afbd28b/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Fclient%2FBasicAuthHttpHeaderProvider.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/b10cd2efdcc42125bf3abf3f7546485d2afbd28b/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Fclient%2FBasicAuthHttpHeaderProvider.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Fclient%2FBasicAuthHttpHeaderProvider.java?ref=b10cd2efdcc42125bf3abf3f7546485d2afbd28b",
      "patch": "@@ -17,12 +17,12 @@\n package de.codecentric.boot.admin.server.web.client;\n \n import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n import java.util.Collections;\n import java.util.Map;\n \n import org.springframework.http.HttpHeaders;\n import org.springframework.lang.Nullable;\n-import org.springframework.util.Base64Utils;\n import org.springframework.util.StringUtils;\n \n import de.codecentric.boot.admin.server.domain.entities.Instance;\n@@ -86,7 +86,7 @@ public HttpHeaders getHeaders(Instance instance) {\n \t}\n \n \tprotected String encode(String username, String password) {\n-\t\tString token = Base64Utils.encodeToString((username + \":\" + password).getBytes(StandardCharsets.UTF_8));\n+\t\tString token = base64Encode((username + \":\" + password).getBytes(StandardCharsets.UTF_8));\n \t\treturn \"Basic \" + token;\n \t}\n \n@@ -101,6 +101,14 @@ protected String encode(String username, String password) {\n \t\treturn null;\n \t}\n \n+\tprivate static String base64Encode(byte[] src) {\n+\t\tif (src.length == 0) {\n+\t\t\treturn \"\";\n+\t\t}\n+\t\tbyte[] dest = Base64.getEncoder().encode(src);\n+\t\treturn new String(dest, StandardCharsets.UTF_8);\n+\t}\n+\n \t@lombok.Data\n \t@lombok.NoArgsConstructor\n \t@lombok.AllArgsConstructor",
      "parent_sha": "e3c46fdd8c89572b2478614e78e5cf44217e40ff"
    }
  },
  {
    "oid": "0fe1585a398881dcb371813186cf265458d815b8",
    "message": "Reduce buffer size when proxying\n\ncloses #713",
    "date": "2018-04-24T10:11:44Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/0fe1585a398881dcb371813186cf265458d815b8",
    "details": {
      "sha": "db7a0c7956afdd17676e140cc07050bc6c701e2d",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/servlet/InstancesProxyController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/0fe1585a398881dcb371813186cf265458d815b8/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Fservlet%2FInstancesProxyController.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/0fe1585a398881dcb371813186cf265458d815b8/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Fservlet%2FInstancesProxyController.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Fservlet%2FInstancesProxyController.java?ref=0fe1585a398881dcb371813186cf265458d815b8",
      "patch": "@@ -84,7 +84,7 @@ public Mono<Void> endpointProxy(@PathVariable(\"instanceId\") String instanceId,\n         //otherwise the FrameworkServlet will add wrong Allow header for OPTIONS request\n         ClientResponse clientResponse = super.forward(instanceId, uri, request.getMethod(), request.getHeaders(),\n             () -> BodyInserters.fromDataBuffers(\n-                DataBufferUtils.readInputStream(request::getBody, this.bufferFactory, 16384))).block();\n+                DataBufferUtils.readInputStream(request::getBody, this.bufferFactory, 4096))).block();\n \n         response.setStatusCode(clientResponse.statusCode());\n         response.getHeaders().addAll(filterHeaders(clientResponse.headers().asHttpHeaders()));",
      "parent_sha": "c2e6b41e721e83be5b1885fbf93faf1db7f3b75d"
    }
  },
  {
    "oid": "121d47556c930506917b80c4a73a04d0d2bc295b",
    "message": "Include the invalid URL value in the message \n\nThis helps to quickly track down configuration problems, especially in systems that generate the config rather than depend on flat files.",
    "date": "2017-11-29T18:53:30Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/121d47556c930506917b80c4a73a04d0d2bc295b",
    "details": {
      "sha": "f1069acb15b798fd358d5afaab6b8abc7461403f",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/registry/ApplicationRegistry.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/121d47556c930506917b80c4a73a04d0d2bc295b/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fregistry%2FApplicationRegistry.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/121d47556c930506917b80c4a73a04d0d2bc295b/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fregistry%2FApplicationRegistry.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fregistry%2FApplicationRegistry.java?ref=121d47556c930506917b80c4a73a04d0d2bc295b",
      "patch": "@@ -58,13 +58,13 @@ public Application register(Application application) {\n \t\tAssert.notNull(application, \"Application must not be null\");\n \t\tAssert.hasText(application.getName(), \"Name must not be null\");\n \t\tAssert.hasText(application.getHealthUrl(), \"Health-URL must not be null\");\n-\t\tAssert.isTrue(checkUrl(application.getHealthUrl()), \"Health-URL is not valid\");\n+\t\tAssert.isTrue(checkUrl(application.getHealthUrl()), \"Health-URL is not valid: \" + application.getHealthUrl());\n \t\tAssert.isTrue(\n \t\t\t\tStringUtils.isEmpty(application.getManagementUrl())\n-\t\t\t\t\t\t|| checkUrl(application.getManagementUrl()), \"URL is not valid\");\n+\t\t\t\t\t\t|| checkUrl(application.getManagementUrl()), \"URL is not valid: \" + application.getManagementUrl());\n \t\tAssert.isTrue(\n \t\t\t\tStringUtils.isEmpty(application.getServiceUrl())\n-\t\t\t\t\t\t|| checkUrl(application.getServiceUrl()), \"URL is not valid\");\n+\t\t\t\t\t\t|| checkUrl(application.getServiceUrl()), \"URL is not valid: \" + application.getServiceUrl());\n \n \t\tString applicationId = generator.generateId(application);\n \t\tAssert.notNull(applicationId, \"ID must not be null\");",
      "parent_sha": "e8c49782c799ee31cb5bc073676c6864f908e3d9"
    }
  },
  {
    "oid": "343345a77b78b0eed8e97a417d5690d403581f12",
    "message": "fix formatting",
    "date": "2023-01-10T11:56:32Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/343345a77b78b0eed8e97a417d5690d403581f12",
    "details": {
      "sha": "12b08a6b9091aa3daa0fabb82a4e424a6f64aeaa",
      "filename": "spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/config/AdminServerUiAutoConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/343345a77b78b0eed8e97a417d5690d403581f12/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fconfig%2FAdminServerUiAutoConfiguration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/343345a77b78b0eed8e97a417d5690d403581f12/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fconfig%2FAdminServerUiAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fconfig%2FAdminServerUiAutoConfiguration.java?ref=343345a77b78b0eed8e97a417d5690d403581f12",
      "patch": "@@ -74,8 +74,7 @@ public class AdminServerUiAutoConfiguration {\n \t * path patterns that will be excluded from forwarding to the homepage (webapp), can\n \t * be extended via property: spring.boot.admin.ui.additionalRouteExcludes\n \t */\n-\tprivate static final List<String> DEFAULT_UI_ROUTE_EXCLUDES = asList(\"/extensions/**\",\n-\t\t\t\"/instances/*/actuator/**\");\n+\tprivate static final List<String> DEFAULT_UI_ROUTE_EXCLUDES = asList(\"/extensions/**\", \"/instances/*/actuator/**\");\n \n \tprivate final AdminServerUiProperties adminUi;\n ",
      "parent_sha": "a1f1aea49fa0a4a4d27255b22107c4e1f89e47e5"
    }
  },
  {
    "oid": "b2bee48af83b904a25d41da03b9be4d7922dd3dc",
    "message": "Fix test",
    "date": "2016-12-10T19:54:45Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/b2bee48af83b904a25d41da03b9be4d7922dd3dc",
    "details": {
      "sha": "ac84e7899705a0ed9627287edfa80da0821dc7fd",
      "filename": "spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/config/DiscoveryClientConfigurationTest.java",
      "status": "modified",
      "additions": 18,
      "deletions": 4,
      "changes": 22,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/b2bee48af83b904a25d41da03b9be4d7922dd3dc/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FDiscoveryClientConfigurationTest.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/b2bee48af83b904a25d41da03b9be4d7922dd3dc/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FDiscoveryClientConfigurationTest.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FDiscoveryClientConfigurationTest.java?ref=b2bee48af83b904a25d41da03b9be4d7922dd3dc",
      "patch": "@@ -6,17 +6,19 @@\n \n import org.junit.After;\n import org.junit.Test;\n+import org.mockito.Mockito;\n import org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;\n import org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration;\n import org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration.RestTemplateConfiguration;\n import org.springframework.cloud.client.ServiceInstance;\n+import org.springframework.cloud.client.discovery.DiscoveryClient;\n import org.springframework.cloud.client.discovery.noop.NoopDiscoveryClientAutoConfiguration;\n-import org.springframework.cloud.commons.util.UtilAutoConfiguration;\n-import org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;\n \n+import com.netflix.discovery.EurekaClient;\n+\n import de.codecentric.boot.admin.discovery.DefaultServiceInstanceConverter;\n import de.codecentric.boot.admin.discovery.EurekaServiceInstanceConverter;\n import de.codecentric.boot.admin.discovery.ServiceInstanceConverter;\n@@ -42,7 +44,7 @@ public void defaultServiceInstanceConverter() {\n \n \t@Test\n \tpublic void eurekaServiceInstanceConverter() {\n-\t\tload(UtilAutoConfiguration.class, EurekaClientAutoConfiguration.class);\n+\t\tload(EurekaClientConfig.class);\n \t\tassertThat(context.getBean(ServiceInstanceConverter.class),\n \t\t\t\tis(instanceOf(EurekaServiceInstanceConverter.class)));\n \t}\n@@ -55,7 +57,6 @@ public void customServiceInstanceConverter() {\n \t\t\t\tis(instanceOf(CustomServiceInstanceConverter.class)));\n \t}\n \n-\n \t@Configuration\n \tstatic class TestCustomServiceInstanceConverterConfig {\n \t\t@Bean\n@@ -71,6 +72,19 @@ public Application convert(ServiceInstance instance) {\n \t\t}\n \t}\n \n+\t@Configuration\n+\tprotected static class EurekaClientConfig {\n+\t\t@Bean\n+\t\tpublic EurekaClient eurekaClient() {\n+\t\t\treturn Mockito.mock(EurekaClient.class);\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic DiscoveryClient discoveryClient() {\n+\t\t\treturn Mockito.mock(DiscoveryClient.class);\n+\t\t}\n+\t}\n+\n \tprivate void load(Class<?>... configs) {\n \t\tAnnotationConfigWebApplicationContext applicationContext = new AnnotationConfigWebApplicationContext();\n \t\tfor (Class<?> config : configs) {",
      "parent_sha": "db292d9c8c81a675d532175a48f29c2ef9c6a44b"
    }
  },
  {
    "oid": "06e1423fe6a45eaf4db4e510b1d3956999439084",
    "message": "Fix findbugs warning",
    "date": "2015-10-26T20:24:39Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/06e1423fe6a45eaf4db4e510b1d3956999439084",
    "details": {
      "sha": "d10bf5a28d3aea94a303c26afab110e3d26efcad",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/notify/MailNotifier.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/06e1423fe6a45eaf4db4e510b1d3956999439084/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fnotify%2FMailNotifier.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/06e1423fe6a45eaf4db4e510b1d3956999439084/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fnotify%2FMailNotifier.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fnotify%2FMailNotifier.java?ref=06e1423fe6a45eaf4db4e510b1d3956999439084",
      "patch": "@@ -120,11 +120,11 @@ public void setSender(JavaMailSender sender) {\n \t}\n \n \tpublic void setTo(String[] to) {\n-\t\tthis.to = to;\n+\t\tthis.to = Arrays.copyOf(to, to.length);\n \t}\n \n \tpublic void setCc(String[] cc) {\n-\t\tthis.cc = cc;\n+\t\tthis.cc = Arrays.copyOf(cc, cc.length);\n \t}\n \n \tpublic void setFrom(String from) {",
      "parent_sha": "dc940c12922473ebcb123f5e6a471516fced2b8f"
    }
  },
  {
    "oid": "5807037576096dbe0b35372eaf26fe1f1bc05644",
    "message": "Bugfix/1646 (#1661)\n\n* #1646: retry on FAIL_NON_SERIALIZED (serialization ist not handled by UnicastProcessor anymore)\r\n\r\n* #1646: retry on FAIL_NON_SERIALIZED (serialization ist not handled by UnicastProcessor anymore)",
    "date": "2021-03-19T07:52:04Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/5807037576096dbe0b35372eaf26fe1f1bc05644",
    "details": {
      "sha": "94e45754cb1a7bc32f69ce73607d5bd9c9eeeecb",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/eventstore/InstanceEventPublisher.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/5807037576096dbe0b35372eaf26fe1f1bc05644/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Feventstore%2FInstanceEventPublisher.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/5807037576096dbe0b35372eaf26fe1f1bc05644/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Feventstore%2FInstanceEventPublisher.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Feventstore%2FInstanceEventPublisher.java?ref=5807037576096dbe0b35372eaf26fe1f1bc05644",
      "patch": "@@ -35,6 +35,9 @@ public class InstanceEventPublisher implements Publisher<InstanceEvent> {\n \n \tprivate final Sinks.Many<InstanceEvent> unicast;\n \n+\tprivate final Sinks.EmitFailureHandler emitFailureHandler = (signalType, emitResult) -> emitResult\n+\t\t\t.equals(Sinks.EmitResult.FAIL_NON_SERIALIZED);\n+\n \tprotected InstanceEventPublisher() {\n \t\tthis.unicast = Sinks.many().unicast().onBackpressureBuffer();\n \t\tthis.publishedFlux = this.unicast.asFlux().publish().autoConnect(0);\n@@ -43,7 +46,7 @@ protected InstanceEventPublisher() {\n \tprotected void publish(List<InstanceEvent> events) {\n \t\tevents.forEach((event) -> {\n \t\t\tlog.debug(\"Event published {}\", event);\n-\t\t\tthis.unicast.tryEmitNext(event);\n+\t\t\tthis.unicast.emitNext(event, emitFailureHandler);\n \t\t});\n \t}\n ",
      "parent_sha": "35211dddf0371d58b748db8232c2cdf72cebd99d"
    }
  },
  {
    "oid": "3ae8b72686a3ba592cc296767c224845a17db642",
    "message": "Fixing typos",
    "date": "2019-12-13T12:52:32Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/3ae8b72686a3ba592cc296767c224845a17db642",
    "details": {
      "sha": "adab38034b8078c8ed62247fcac8fb639c4d4751",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/eventstore/ConcurrentMapEventStore.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/3ae8b72686a3ba592cc296767c224845a17db642/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Feventstore%2FConcurrentMapEventStore.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/3ae8b72686a3ba592cc296767c224845a17db642/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Feventstore%2FConcurrentMapEventStore.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Feventstore%2FConcurrentMapEventStore.java?ref=3ae8b72686a3ba592cc296767c224845a17db642",
      "patch": "@@ -109,7 +109,7 @@ protected boolean doAppend(List<InstanceEvent> events) {\n \t\t\treturn true;\n \t\t}\n \n-\t\tlog.debug(\"Unsuccessful attempot append the events {} \", events);\n+\t\tlog.debug(\"Unsuccessful attempt append the events {} \", events);\n \t\treturn false;\n \t}\n \n@@ -122,7 +122,7 @@ private void compact(List<InstanceEvent> events) {\n \n \tprivate OptimisticLockingException createOptimisticLockException(InstanceEvent event, long lastVersion) {\n \t\treturn new OptimisticLockingException(\n-\t\t\t\t\"Verison \" + event.getVersion() + \" was overtaken by \" + lastVersion + \" for \" + event.getInstance());\n+\t\t\t\t\"Version \" + event.getVersion() + \" was overtaken by \" + lastVersion + \" for \" + event.getInstance());\n \t}\n \n \tprotected static long getLastVersion(List<InstanceEvent> events) {",
      "parent_sha": "3a37c4db048edbd67c662ebd1dda121e57a570a6"
    }
  },
  {
    "oid": "8805b265a52d30a0f9fe114a4e05fc2fdf3254a3",
    "message": "Fix wron mime type for sba-settings.js\n\nfixes #1176",
    "date": "2019-05-30T10:50:48Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/8805b265a52d30a0f9fe114a4e05fc2fdf3254a3",
    "details": {
      "sha": "14701443867cb51313c05e1c731b202c930ca267",
      "filename": "spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/UiController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/8805b265a52d30a0f9fe114a4e05fc2fdf3254a3/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fweb%2FUiController.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/8805b265a52d30a0f9fe114a4e05fc2fdf3254a3/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fweb%2FUiController.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fweb%2FUiController.java?ref=8805b265a52d30a0f9fe114a4e05fc2fdf3254a3",
      "patch": "@@ -106,7 +106,7 @@ public String index() {\n         return \"index\";\n     }\n \n-    @GetMapping(path = \"/sba-settings.js\", produces = MediaType.APPLICATION_JSON_VALUE)\n+    @GetMapping(path = \"/sba-settings.js\", produces = \"text/javascript\")\n     public String sbaSettings() {\n         return \"sba-settings.js\";\n     }",
      "parent_sha": "0ec9ca918880d758fa3fd513916fb4c2b544aa01"
    }
  },
  {
    "oid": "946f3bd63bb661fcffc670805a9cfb3998fb3277",
    "message": "EnableConfigurationProperties only when AdminClient is active",
    "date": "2015-07-17T11:39:39Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/946f3bd63bb661fcffc670805a9cfb3998fb3277",
    "details": {
      "sha": "e1afa809018437f8820b354cf55f790d845cebad",
      "filename": "spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/config/SpringBootAdminClientAutoConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/946f3bd63bb661fcffc670805a9cfb3998fb3277/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FSpringBootAdminClientAutoConfiguration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/946f3bd63bb661fcffc670805a9cfb3998fb3277/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FSpringBootAdminClientAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FSpringBootAdminClientAutoConfiguration.java?ref=946f3bd63bb661fcffc670805a9cfb3998fb3277",
      "patch": "@@ -39,10 +39,10 @@\n  * spring-boot-admin application. If not, it registers itself.\n  */\n @Configuration\n-@EnableConfigurationProperties({ AdminProperties.class, AdminClientProperties.class })\n public class SpringBootAdminClientAutoConfiguration {\n \n \t@ConditionalOnProperty(\"spring.boot.admin.url\")\n+\t@EnableConfigurationProperties({ AdminProperties.class, AdminClientProperties.class })\n \tpublic static class AdminClientRegistrationConfig {\n \t\t/**\n \t\t * Task that registers the application at the spring-boot-admin",
      "parent_sha": "b910b19e14e90af15e544d5fe7dd50e5d0a7b44f"
    }
  },
  {
    "oid": "7097358d277513be9d6451bc3f331bf6d2343680",
    "message": "Fix typo in javadoc of InstanceRegistry.register()",
    "date": "2019-07-01T05:43:13Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/7097358d277513be9d6451bc3f331bf6d2343680",
    "details": {
      "sha": "dc1374a6fb33ff6f2940f4e1bc1c81f489c2c852",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/InstanceRegistry.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/7097358d277513be9d6451bc3f331bf6d2343680/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fservices%2FInstanceRegistry.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/7097358d277513be9d6451bc3f331bf6d2343680/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fservices%2FInstanceRegistry.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fservices%2FInstanceRegistry.java?ref=7097358d277513be9d6451bc3f331bf6d2343680",
      "patch": "@@ -43,7 +43,7 @@ public InstanceRegistry(InstanceRepository repository, InstanceIdGenerator gener\n      * Register instance.\n      *\n      * @param registration instance to be registered.\n-     * @return the if of the registered instance.\n+     * @return the id of the registered instance.\n      */\n     public Mono<InstanceId> register(Registration registration) {\n         Assert.notNull(registration, \"'registration' must not be null\");",
      "parent_sha": "bb906045b9b129e794d208cce3a3693c4e1f22b6"
    }
  },
  {
    "oid": "82b7d1f193c8e1835ca16dd9db884c963f5b9c92",
    "message": "Configure AdminServerDiscoveryAutoConfiguration after Eureka\n\nfixes #647",
    "date": "2018-02-16T10:20:51Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/82b7d1f193c8e1835ca16dd9db884c963f5b9c92",
    "details": {
      "sha": "b246fdbb62f90b08eaa60a7a97f979350dbbd65b",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerDiscoveryAutoConfiguration.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/82b7d1f193c8e1835ca16dd9db884c963f5b9c92/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fconfig%2FAdminServerDiscoveryAutoConfiguration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/82b7d1f193c8e1835ca16dd9db884c963f5b9c92/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fconfig%2FAdminServerDiscoveryAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fconfig%2FAdminServerDiscoveryAutoConfiguration.java?ref=82b7d1f193c8e1835ca16dd9db884c963f5b9c92",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2014-2017 the original author or authors.\n+ * Copyright 2014-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -29,7 +29,6 @@\n import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.cloud.client.discovery.DiscoveryClient;\n-import org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import com.netflix.discovery.EurekaClient;\n@@ -38,7 +37,9 @@\n @ConditionalOnSingleCandidate(DiscoveryClient.class)\n @ConditionalOnBean(AdminServerMarkerConfiguration.Marker.class)\n @ConditionalOnProperty(prefix = \"spring.boot.admin.discovery\", name = \"enabled\", matchIfMissing = true)\n-@AutoConfigureAfter({AdminServerAutoConfiguration.class, SimpleDiscoveryClientAutoConfiguration.class})\n+@AutoConfigureAfter(value = AdminServerAutoConfiguration.class, name = {\n+        \"org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration\",\n+        \"org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration\"})\n public class AdminServerDiscoveryAutoConfiguration {\n \n     @Bean",
      "parent_sha": "1770b4c0a58ddf4761b7341dd9e1748794914306"
    }
  },
  {
    "oid": "354a0509ae5f59e8425931e4778622423e8b2b3b",
    "message": "org.apache.tomcat.util.net.URL -> java.net.URL",
    "date": "2014-09-29T01:33:49Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/354a0509ae5f59e8425931e4778622423e8b2b3b",
    "details": {
      "sha": "056097bc8083a980c198c24b5038663d93759368",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/service/ApplicationRegistry.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/354a0509ae5f59e8425931e4778622423e8b2b3b/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fservice%2FApplicationRegistry.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/354a0509ae5f59e8425931e4778622423e8b2b3b/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fservice%2FApplicationRegistry.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fservice%2FApplicationRegistry.java?ref=354a0509ae5f59e8425931e4778622423e8b2b3b",
      "patch": "@@ -16,13 +16,13 @@\n package de.codecentric.boot.admin.service;\n \n import java.net.MalformedURLException;\n+import java.net.URL;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n import org.apache.commons.lang3.Validate;\n-import org.apache.tomcat.util.net.URL;\n import org.springframework.stereotype.Service;\n \n import de.codecentric.boot.admin.model.Application;",
      "parent_sha": "1586a4f8536990989936ba9b9abf8ad25a3412fe"
    }
  },
  {
    "oid": "a1e7108b5d18ea2c755524cdaa8a6a3327487b2f",
    "message": "No sleep in RegistrationApplicationListenerTest",
    "date": "2016-03-02T20:32:32Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/a1e7108b5d18ea2c755524cdaa8a6a3327487b2f",
    "details": {
      "sha": "bc010266ad1d7c0e2ae514bbbd70223585d4c24a",
      "filename": "spring-boot-admin-starter-client/src/test/java/de/codecentric/boot/admin/services/RegistrationApplicationListenerTest.java",
      "status": "modified",
      "additions": 58,
      "deletions": 8,
      "changes": 66,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/a1e7108b5d18ea2c755524cdaa8a6a3327487b2f/spring-boot-admin-starter-client%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fservices%2FRegistrationApplicationListenerTest.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/a1e7108b5d18ea2c755524cdaa8a6a3327487b2f/spring-boot-admin-starter-client%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fservices%2FRegistrationApplicationListenerTest.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-starter-client%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fservices%2FRegistrationApplicationListenerTest.java?ref=a1e7108b5d18ea2c755524cdaa8a6a3327487b2f",
      "patch": "@@ -1,46 +1,94 @@\n package de.codecentric.boot.admin.services;\n \n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Matchers.isA;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.concurrent.ScheduledFuture;\n \n import org.junit.Test;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.context.embedded.EmbeddedWebApplicationContext;\n import org.springframework.boot.context.event.ApplicationReadyEvent;\n import org.springframework.context.event.ContextClosedEvent;\n+import org.springframework.scheduling.TaskScheduler;\n \n public class RegistrationApplicationListenerTest {\n \n \t@Test\n \tpublic void test_register() throws Exception {\n \t\tApplicationRegistrator registrator = mock(ApplicationRegistrator.class);\n-\t\tRegistrationApplicationListener listener = new RegistrationApplicationListener(registrator);\n+\t\tTaskScheduler scheduler = mock(TaskScheduler.class);\n+\t\tRegistrationApplicationListener listener = new RegistrationApplicationListener(registrator,\n+\t\t\t\tscheduler);\n \n \t\tlistener.onApplicationReady(\n \t\t\t\tnew ApplicationReadyEvent(mock(SpringApplication.class), null, null));\n \n-\t\tThread.sleep(500);\n-\t\tverify(registrator).register();\n+\t\tverify(scheduler).scheduleAtFixedRate(isA(Runnable.class), eq(10_000L));\n \t}\n \n \t@Test\n \tpublic void test_no_register() throws Exception {\n \t\tApplicationRegistrator registrator = mock(ApplicationRegistrator.class);\n-\t\tRegistrationApplicationListener listener = new RegistrationApplicationListener(registrator);\n+\t\tTaskScheduler scheduler = mock(TaskScheduler.class);\n+\t\tRegistrationApplicationListener listener = new RegistrationApplicationListener(registrator,\n+\t\t\t\tscheduler);\n \t\tlistener.setAutoRegister(false);\n \n \t\tlistener.onApplicationReady(\n \t\t\t\tnew ApplicationReadyEvent(mock(SpringApplication.class), null, null));\n \n-\t\tThread.sleep(500);\n-\t\tverify(registrator, never()).register();\n+\t\tverify(scheduler, never()).scheduleAtFixedRate(isA(Runnable.class), eq(10_000L));\n+\t}\n+\n+\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+\t@Test\n+\tpublic void test_no_register_after_close() throws Exception {\n+\t\tApplicationRegistrator registrator = mock(ApplicationRegistrator.class);\n+\t\tTaskScheduler scheduler = mock(TaskScheduler.class);\n+\t\tRegistrationApplicationListener listener = new RegistrationApplicationListener(registrator,\n+\t\t\t\tscheduler);\n+\n+\t\tScheduledFuture task = mock(ScheduledFuture.class);\n+\t\twhen(scheduler.scheduleAtFixedRate(isA(Runnable.class), eq(10_000L))).thenReturn(task);\n+\n+\t\tlistener.onApplicationReady(\n+\t\t\t\tnew ApplicationReadyEvent(mock(SpringApplication.class), null, null));\n+\n+\t\tverify(scheduler).scheduleAtFixedRate(isA(Runnable.class), eq(10_000L));\n+\n+\t\tlistener.onClosedContext(new ContextClosedEvent(mock(EmbeddedWebApplicationContext.class)));\n+\t\tverify(task).cancel(true);\n+\t}\n+\n+\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+\t@Test\n+\tpublic void test_start_stop() throws Exception {\n+\t\tApplicationRegistrator registrator = mock(ApplicationRegistrator.class);\n+\t\tTaskScheduler scheduler = mock(TaskScheduler.class);\n+\t\tRegistrationApplicationListener listener = new RegistrationApplicationListener(registrator,\n+\t\t\t\tscheduler);\n+\n+\t\tScheduledFuture task = mock(ScheduledFuture.class);\n+\t\twhen(scheduler.scheduleAtFixedRate(isA(Runnable.class), eq(10_000L))).thenReturn(task);\n+\n+\t\tlistener.startRegisterTask();\n+\t\tverify(scheduler).scheduleAtFixedRate(isA(Runnable.class), eq(10_000L));\n+\n+\t\tlistener.stopRegisterTask();\n+\t\tverify(task).cancel(true);\n \t}\n \n \t@Test\n \tpublic void test_no_deregister() throws Exception {\n \t\tApplicationRegistrator registrator = mock(ApplicationRegistrator.class);\n-\t\tRegistrationApplicationListener listener = new RegistrationApplicationListener(registrator);\n+\t\tTaskScheduler scheduler = mock(TaskScheduler.class);\n+\t\tRegistrationApplicationListener listener = new RegistrationApplicationListener(registrator,\n+\t\t\t\tscheduler);\n \n \t\tlistener.onClosedContext(new ContextClosedEvent(mock(EmbeddedWebApplicationContext.class)));\n \n@@ -50,7 +98,9 @@ public void test_no_deregister() throws Exception {\n \t@Test\n \tpublic void test_deregister() throws Exception {\n \t\tApplicationRegistrator registrator = mock(ApplicationRegistrator.class);\n-\t\tRegistrationApplicationListener listener = new RegistrationApplicationListener(registrator);\n+\t\tTaskScheduler scheduler = mock(TaskScheduler.class);\n+\t\tRegistrationApplicationListener listener = new RegistrationApplicationListener(registrator,\n+\t\t\t\tscheduler);\n \t\tlistener.setAutoDeregister(true);\n \n \t\tlistener.onClosedContext(new ContextClosedEvent(mock(EmbeddedWebApplicationContext.class)));",
      "parent_sha": "84cfa693b1e9bac0b555ec3829e3b985fe379d5b"
    }
  },
  {
    "oid": "e9bf3cc7fae31209c3cce3f69863d65b8639b67e",
    "message": "Remove activiti endpoint from the default proxified endpoints\n\nRemove the activiti endpoint from the default set of proxified endpoints.\nThis aligns with the non present defaults for hystrix.",
    "date": "2016-09-04T13:48:50Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/e9bf3cc7fae31209c3cce3f69863d65b8639b67e",
    "details": {
      "sha": "0a77aac10bed9e9c7c93552f29a7bf74aa456131",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/zuul/ApplicationRouteLocator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/e9bf3cc7fae31209c3cce3f69863d65b8639b67e/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fzuul%2FApplicationRouteLocator.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/e9bf3cc7fae31209c3cce3f69863d65b8639b67e/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fzuul%2FApplicationRouteLocator.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fzuul%2FApplicationRouteLocator.java?ref=e9bf3cc7fae31209c3cce3f69863d65b8639b67e",
      "patch": "@@ -53,7 +53,7 @@ public class ApplicationRouteLocator implements RefreshableRouteLocator {\n \t * Endpoints to be proxified by spring boot admin.\n \t */\n \tprivate String[] endpoints = { \"env\", \"metrics\", \"trace\", \"dump\", \"jolokia\", \"info\", \"trace\",\n-\t\t\t\"activiti\", \"logfile\", \"refresh\", \"flyway\", \"liquibase\", \"heapdump\" };\n+\t\t\t\"logfile\", \"refresh\", \"flyway\", \"liquibase\", \"heapdump\" };\n \n \tpublic ApplicationRouteLocator(String servletPath, ApplicationRegistry registry,\n \t\t\tString prefix) {",
      "parent_sha": "6fd800728dfee80b53eb47e782a554317cdb58e5"
    }
  },
  {
    "oid": "a7bcfb9bdf19410e0dfc073b1d65083bb2369d59",
    "message": "Replace SpringJUnit4ClassRunner with SpringRunner",
    "date": "2016-08-28T17:17:20Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/a7bcfb9bdf19410e0dfc073b1d65083bb2369d59",
    "details": {
      "sha": "18dc1f26cb5d3291985ee613efc6dd459e09a466",
      "filename": "spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/AdminApplicationTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/a7bcfb9bdf19410e0dfc073b1d65083bb2369d59/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2FAdminApplicationTest.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/a7bcfb9bdf19410e0dfc073b1d65083bb2369d59/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2FAdminApplicationTest.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2FAdminApplicationTest.java?ref=a7bcfb9bdf19410e0dfc073b1d65083bb2369d59",
      "patch": "@@ -30,7 +30,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.junit4.SpringRunner;\n \n import de.codecentric.boot.admin.AdminApplicationTest.TestAdminApplication;\n import de.codecentric.boot.admin.config.EnableAdminServer;\n@@ -41,7 +41,7 @@\n  *\n  * @author Dennis Schulte\n  */\n-@RunWith(SpringJUnit4ClassRunner.class)\n+@RunWith(SpringRunner.class)\n @SpringBootTest(classes = TestAdminApplication.class, webEnvironment = WebEnvironment.RANDOM_PORT, properties = {\n \t\t\"spring.cloud.config.enabled=false\" })\n public class AdminApplicationTest {",
      "parent_sha": "32e368f52557fbf80d20ceef3c48fcc7a452f924"
    }
  },
  {
    "oid": "7999ff4ecc065fe758bce4ecf37ec8d077e9628d",
    "message": "Also probe for new endpoint names\n\nWhen the base-path for the actuator is set to `/` on spring boot 2 the\nendpoints can't be queried via the actuator index and need to be probed.\nTherefore we need to probe not only for the old names but also for the\nnames in boot 2.0.\n\nfixes #793",
    "date": "2018-06-19T17:28:16Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/7999ff4ecc065fe758bce4ecf37ec8d077e9628d",
    "details": {
      "sha": "febd2ad4d0e655e8aa9dd2a68054d734a8ec0f90",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerProperties.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/7999ff4ecc065fe758bce4ecf37ec8d077e9628d/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fconfig%2FAdminServerProperties.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/7999ff4ecc065fe758bce4ecf37ec8d077e9628d/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fconfig%2FAdminServerProperties.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fconfig%2FAdminServerProperties.java?ref=7999ff4ecc065fe758bce4ecf37ec8d077e9628d",
      "patch": "@@ -51,8 +51,9 @@ public class AdminServerProperties {\n      * For Spring Boot 1.x applications SBA probes for the specified endpoints using an OPTIONS request.\n      * If the path differs from the id you can specify this as id:path (e.g. health:ping).\n      */\n-    private String[] probedEndpoints = {\"health\", \"env\", \"metrics\", \"httptrace:trace\", \"threaddump:dump\", \"jolokia\",\n-        \"info\", \"logfile\", \"refresh\", \"flyway\", \"liquibase\", \"heapdump\", \"loggers\", \"auditevents\"};\n+    private String[] probedEndpoints = {\"health\", \"env\", \"metrics\", \"httptrace:trace\", \"httptrace\", \"threaddump:dump\",\n+        \"threaddump\", \"jolokia\", \"info\", \"logfile\", \"refresh\", \"flyway\", \"liquibase\", \"heapdump\", \"loggers\",\n+        \"auditevents\"};\n \n     public void setContextPath(String contextPath) {\n         this.contextPath = PathUtils.normalizePath(contextPath);",
      "parent_sha": "44846dd49e68296bc2d7af86c83375ffdf9785f9"
    }
  },
  {
    "oid": "11eeb284e94d13ca50f9ccd1291039839db73e50",
    "message": "#1786: do not invoke next filter accidentally by preparing fallback (#1802)\n\nThe fallback solution for not having an instance is to skip\r\nthe filter and invoke the next one.\r\nThis fallback is already executed during preparation of the\r\nOptional, so the next filter is getting triggered even if not needed.\r\n\r\nSolution is to wrap the invocation of the next filter in a lambda\r\nwhich is only executed when needed.",
    "date": "2021-09-03T13:35:55Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/11eeb284e94d13ca50f9ccd1291039839db73e50",
    "details": {
      "sha": "dd3365a264854a2f3d81614f9ca0c90b6669d7d5",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/InstanceWebClient.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/11eeb284e94d13ca50f9ccd1291039839db73e50/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Fclient%2FInstanceWebClient.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/11eeb284e94d13ca50f9ccd1291039839db73e50/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Fclient%2FInstanceWebClient.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Fclient%2FInstanceWebClient.java?ref=11eeb284e94d13ca50f9ccd1291039839db73e50",
      "patch": "@@ -62,9 +62,11 @@ private static ExchangeFilterFunction setInstance(Mono<Instance> instance) {\n \t}\n \n \tprivate static ExchangeFilterFunction toExchangeFilterFunction(InstanceExchangeFilterFunction filter) {\n-\t\treturn (request, next) -> request.attribute(ATTRIBUTE_INSTANCE).filter(Instance.class::isInstance)\n-\t\t\t\t.map(Instance.class::cast).map((instance) -> filter.filter(instance, request, next))\n-\t\t\t\t.orElse(next.exchange(request));\n+\t\treturn (request, next) -> request.attribute(ATTRIBUTE_INSTANCE)\n+\t\t\t.filter(Instance.class::isInstance)\n+\t\t\t.map(Instance.class::cast)\n+\t\t\t.map((instance) -> filter.filter(instance, request, next))\n+\t\t\t.orElseGet(() -> next.exchange(request));\n \t}\n \n \tpublic static class Builder {",
      "parent_sha": "9257bf233144fa342a2b963879a62e2a6bcdf7e6"
    }
  },
  {
    "oid": "019f13db1643b12048428b3f0a58393e87e8ab39",
    "message": "case insensitive header filtering",
    "date": "2018-01-29T16:18:24Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/019f13db1643b12048428b3f0a58393e87e8ab39",
    "details": {
      "sha": "e77d2e39f84b23483e74770f5aa6b6e49001ff1f",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/AbstractInstancesProxyController.java",
      "status": "modified",
      "additions": 11,
      "deletions": 9,
      "changes": 20,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/019f13db1643b12048428b3f0a58393e87e8ab39/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2FAbstractInstancesProxyController.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/019f13db1643b12048428b3f0a58393e87e8ab39/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2FAbstractInstancesProxyController.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2FAbstractInstancesProxyController.java?ref=019f13db1643b12048428b3f0a58393e87e8ab39",
      "patch": "@@ -24,11 +24,12 @@\n \n import java.net.ConnectException;\n import java.net.URI;\n-import java.util.HashSet;\n-import java.util.List;\n+import java.util.Arrays;\n import java.util.Map;\n import java.util.Set;\n import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpHeaders;\n@@ -41,14 +42,13 @@\n import org.springframework.web.reactive.function.client.WebClient;\n import org.springframework.web.server.ResponseStatusException;\n \n-import static java.util.Arrays.asList;\n import static java.util.stream.Collectors.toMap;\n \n public class AbstractInstancesProxyController {\n     protected static final String REQUEST_MAPPING_PATH = \"/instances/{instanceId}/actuator/**\";\n-    protected static final List<String> HOP_BY_HOP_HEADERS = asList(\"Host\", \"Connection\", \"Keep-Alive\",\n+    protected static final String[] HOP_BY_HOP_HEADERS = new String[]{\"Host\", \"Connection\", \"Keep-Alive\",\n             \"Proxy-Authenticate\", \"Proxy-Authorization\", \"TE\", \"Trailer\", \"Transfer-Encoding\", \"Upgrade\",\n-            \"X-Application-Context\");\n+            \"X-Application-Context\"};\n     private static final Logger log = LoggerFactory.getLogger(AbstractInstancesProxyController.class);\n \n     private final InstanceRegistry registry;\n@@ -58,8 +58,10 @@ public class AbstractInstancesProxyController {\n     public AbstractInstancesProxyController(Set<String> ignoredHeaders,\n                                             InstanceRegistry registry,\n                                             InstanceWebClient instanceWebClient) {\n-        this.ignoredHeaders = new HashSet<>(ignoredHeaders);\n-        this.ignoredHeaders.addAll(HOP_BY_HOP_HEADERS);\n+        this.ignoredHeaders = Stream.concat(ignoredHeaders.stream(), Arrays.stream(HOP_BY_HOP_HEADERS))\n+                                    .map(String::toLowerCase)\n+                                    .collect(Collectors.toSet());\n+\n         this.registry = registry;\n         this.instanceWebClient = instanceWebClient;\n     }\n@@ -107,8 +109,8 @@ protected HttpHeaders filterHeaders(HttpHeaders headers) {\n         return filtered;\n     }\n \n-    private boolean includeHeader(String headers) {\n-        return !ignoredHeaders.contains(headers);\n+    private boolean includeHeader(String header) {\n+        return !ignoredHeaders.contains(header.toLowerCase());\n     }\n \n     private boolean requiresBody(HttpMethod method) {",
      "parent_sha": "1b47cc062684f4a72fc5568e53fe44a129a6bc3f"
    }
  },
  {
    "oid": "82c8d819a4f980ebd6f6df5f6f9d337c4eac24d4",
    "message": "No ignoreUnknownFields=false in AdminClientProps\n\nThere is a problem with the relaxed binding for system environment variables in\nspring boot and ignoreUnknownFields for ConfigurationProperties. So we need to\nremove it for now.\n\nfixes #135",
    "date": "2015-12-14T19:09:30Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/82c8d819a4f980ebd6f6df5f6f9d337c4eac24d4",
    "details": {
      "sha": "f0e4788ad51d07c7aecd6a28c008261c4d0348bb",
      "filename": "spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/config/AdminClientProperties.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/82c8d819a4f980ebd6f6df5f6f9d337c4eac24d4/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FAdminClientProperties.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/82c8d819a4f980ebd6f6df5f6f9d337c4eac24d4/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FAdminClientProperties.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FAdminClientProperties.java?ref=82c8d819a4f980ebd6f6df5f6f9d337c4eac24d4",
      "patch": "@@ -25,13 +25,10 @@\n import org.springframework.boot.context.event.ApplicationReadyEvent;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.context.event.EventListener;\n-import org.springframework.core.Ordered;\n-import org.springframework.core.annotation.Order;\n import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n \n-@ConfigurationProperties(prefix = \"spring.boot.admin.client\", ignoreUnknownFields = false)\n-@Order(Ordered.LOWEST_PRECEDENCE - 100)\n+@ConfigurationProperties(prefix = \"spring.boot.admin.client\")\n public class AdminClientProperties {\n \n \t/**",
      "parent_sha": "502a4dab42ec2818e9ba265887e845a419b65918"
    }
  },
  {
    "oid": "454cedceae87ea01fbc4b6947ffce2279455aa40",
    "message": "1551: Fix failing tests by reusing server instance",
    "date": "2020-12-11T14:31:09Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/454cedceae87ea01fbc4b6947ffce2279455aa40",
    "details": {
      "sha": "ec6dbacdb0a07c2bee144b4b745725919fc9a46e",
      "filename": "spring-boot-admin-server-ui/src/test/java/de/codecentric/boot/admin/server/ui/AdminUiReactiveApplicationTest.java",
      "status": "modified",
      "additions": 20,
      "deletions": 12,
      "changes": 32,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/454cedceae87ea01fbc4b6947ffce2279455aa40/spring-boot-admin-server-ui%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2FAdminUiReactiveApplicationTest.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/454cedceae87ea01fbc4b6947ffce2279455aa40/spring-boot-admin-server-ui%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2FAdminUiReactiveApplicationTest.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-ui%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2FAdminUiReactiveApplicationTest.java?ref=454cedceae87ea01fbc4b6947ffce2279455aa40",
      "patch": "@@ -16,7 +16,8 @@\n \n package de.codecentric.boot.admin.server.ui;\n \n-import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.BeforeEach;\n import org.springframework.boot.SpringBootConfiguration;\n import org.springframework.boot.WebApplicationType;\n@@ -31,21 +32,28 @@\n \n public class AdminUiReactiveApplicationTest extends AbstractAdminUiApplicationTest {\n \n-\tprivate ConfigurableApplicationContext instance;\n+\tprivate static ConfigurableApplicationContext instance;\n \n-\t@BeforeEach\n-\tpublic void setUp() {\n-\t\tthis.instance = new SpringApplicationBuilder().sources(TestAdminApplication.class)\n-\t\t\t\t.web(WebApplicationType.REACTIVE).run(\"--server.port=0\",\n-\t\t\t\t\t\t\"--spring.boot.admin.ui.extension-resource-locations=classpath:/META-INF/test-extensions/\",\n-\t\t\t\t\t\t\"--spring.boot.admin.ui.available-languages=de\");\n+\tprivate static Integer port;\n+\n+\t@BeforeAll\n+\tpublic static void setUp() {\n+\t\tinstance = new SpringApplicationBuilder().sources(TestAdminApplication.class).web(WebApplicationType.REACTIVE)\n+\t\t\t.run(\"--server.port=0\",\n+\t\t\t\t\"--spring.boot.admin.ui.extension-resource-locations=classpath:/META-INF/test-extensions/\",\n+\t\t\t\t\"--spring.boot.admin.ui.available-languages=de\");\n \n-\t\tsuper.setUp(this.instance.getEnvironment().getProperty(\"local.server.port\", Integer.class, 0));\n+\t\tport = instance.getEnvironment().getProperty(\"local.server.port\", Integer.class, 0);\n \t}\n \n-\t@AfterEach\n-\tpublic void shutdown() {\n-\t\tthis.instance.close();\n+\t@AfterAll\n+\tpublic static void shutdown() {\n+\t\tinstance.close();\n+\t}\n+\n+\t@BeforeEach\n+\tpublic void setupEach() {\n+\t\tsuper.setUp(port);\n \t}\n \n \t@EnableAdminServer",
      "parent_sha": "64a9d044d4f102992304de53fbfa9a5719f06d33"
    }
  },
  {
    "oid": "6967ddd54444af097663990479100eb67593f294",
    "message": "Make StatusUpdater more robust\n\nCheck if the status field is a String and don't propagate any Exception\nfrom the StatusUpdater, so that the application don't fail like in #120",
    "date": "2015-10-31T08:56:14Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/6967ddd54444af097663990479100eb67593f294",
    "details": {
      "sha": "ad2c76f7813f8ad36bb7d6e67a251edbdd6a7387",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/registry/StatusUpdater.java",
      "status": "modified",
      "additions": 6,
      "deletions": 9,
      "changes": 15,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/6967ddd54444af097663990479100eb67593f294/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fregistry%2FStatusUpdater.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/6967ddd54444af097663990479100eb67593f294/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fregistry%2FStatusUpdater.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fregistry%2FStatusUpdater.java?ref=6967ddd54444af097663990479100eb67593f294",
      "patch": "@@ -22,7 +22,6 @@\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.context.ApplicationEventPublisherAware;\n import org.springframework.http.ResponseEntity;\n-import org.springframework.web.client.RestClientException;\n import org.springframework.web.client.RestTemplate;\n \n import de.codecentric.boot.admin.event.ClientApplicationStatusChangedEvent;\n@@ -34,7 +33,7 @@\n  * The StatusUpdater is responsible for updatig the status of all or a single\n  * application querying the healthUrl.\n  *\n- * @author Johannes Stelzer\n+ * @author Johannes Edmeier\n  *\n  */\n public class StatusUpdater implements ApplicationEventPublisherAware {\n@@ -50,7 +49,6 @@ public class StatusUpdater implements ApplicationEventPublisherAware {\n \t */\n \tprivate long statusLifetime = 30_000L;\n \n-\n \tpublic StatusUpdater(RestTemplate restTemplate, ApplicationStore store) {\n \t\tthis.restTemplate = restTemplate;\n \t\tthis.store = store;\n@@ -59,7 +57,7 @@ public StatusUpdater(RestTemplate restTemplate, ApplicationStore store) {\n \tpublic void updateStatusForAllApplications() {\n \t\tlong now = System.currentTimeMillis();\n \t\tfor (Application application : store.findAll()) {\n-\t\t\tif ( now - statusLifetime > application.getStatusInfo().getTimestamp()) {\n+\t\t\tif (now - statusLifetime > application.getStatusInfo().getTimestamp()) {\n \t\t\t\tupdateStatus(application);\n \t\t\t}\n \t\t}\n@@ -85,18 +83,18 @@ private StatusInfo queryStatus(Application application) {\n \n \t\ttry {\n \t\t\t@SuppressWarnings(\"unchecked\")\n-\t\t\tResponseEntity<Map<String, String>> response = restTemplate.getForEntity(application.getHealthUrl(), (Class<Map<String, String>>)(Class<?>) Map.class);\n+\t\t\tResponseEntity<Map<String, Object>> response = restTemplate.getForEntity(application.getHealthUrl(), (Class<Map<String, Object>>)(Class<?>) Map.class);\n \t\t\tLOGGER.debug(\"/health for {} responded with {}\", application, response);\n \n-\t\t\tif (response.hasBody() && response.getBody().get(\"status\") != null ) {\n-\t\t\t\treturn StatusInfo.valueOf(response.getBody().get(\"status\"));\n+\t\t\tif (response.hasBody() && response.getBody().get(\"status\") instanceof String) {\n+\t\t\t\treturn StatusInfo.valueOf((String) response.getBody().get(\"status\"));\n \t\t\t} else if (response.getStatusCode().is2xxSuccessful()) {\n \t\t\t\treturn StatusInfo.ofUp();\n \t\t\t} else {\n \t\t\t\treturn StatusInfo.ofDown();\n \t\t\t}\n \n-\t\t} catch (RestClientException ex){\n+\t\t} catch (Exception ex){\n \t\t\tLOGGER.warn(\"Couldn't retrieve status for {}\", application, ex);\n \t\t\treturn StatusInfo.ofOffline();\n \t\t}\n@@ -111,5 +109,4 @@ public void setApplicationEventPublisher(ApplicationEventPublisher publisher) {\n \t\tthis.publisher = publisher;\n \t}\n \n-\n }",
      "parent_sha": "47262852a2055c5b27b4ff2b68b25687212a67c6"
    }
  },
  {
    "oid": "0db4fe168fd72f3e95803440b7ceb363ca26c1a2",
    "message": "Reduce duplicated ZuulConfiguration by inheriting",
    "date": "2015-11-11T18:42:31Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/0db4fe168fd72f3e95803440b7ceb363ca26c1a2",
    "details": {
      "sha": "8b10dd1c399f941bd5614edce841292b81970c2d",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/RevereseZuulProxyConfiguration.java",
      "status": "modified",
      "additions": 21,
      "deletions": 62,
      "changes": 83,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/0db4fe168fd72f3e95803440b7ceb363ca26c1a2/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FRevereseZuulProxyConfiguration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/0db4fe168fd72f3e95803440b7ceb363ca26c1a2/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FRevereseZuulProxyConfiguration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FRevereseZuulProxyConfiguration.java?ref=0db4fe168fd72f3e95803440b7ceb363ca26c1a2",
      "patch": "@@ -15,26 +15,18 @@\n  */\n package de.codecentric.boot.admin.config;\n \n-import java.util.Map;\n-\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.actuate.trace.TraceRepository;\n import org.springframework.boot.autoconfigure.web.ServerProperties;\n-import org.springframework.cloud.netflix.zuul.ZuulFilterInitializer;\n+import org.springframework.cloud.netflix.zuul.ZuulConfiguration;\n import org.springframework.cloud.netflix.zuul.filters.ProxyRequestHelper;\n-import org.springframework.cloud.netflix.zuul.filters.post.SendErrorFilter;\n-import org.springframework.cloud.netflix.zuul.filters.post.SendResponseFilter;\n-import org.springframework.cloud.netflix.zuul.filters.pre.DebugFilter;\n-import org.springframework.cloud.netflix.zuul.filters.pre.FormBodyWrapperFilter;\n-import org.springframework.cloud.netflix.zuul.filters.pre.Servlet30WrapperFilter;\n import org.springframework.cloud.netflix.zuul.filters.route.SimpleHostRoutingFilter;\n-import org.springframework.cloud.netflix.zuul.web.ZuulController;\n import org.springframework.cloud.netflix.zuul.web.ZuulHandlerMapping;\n+import org.springframework.context.ApplicationEvent;\n+import org.springframework.context.ApplicationListener;\n+import org.springframework.context.PayloadApplicationEvent;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.event.EventListener;\n-\n-import com.netflix.zuul.ZuulFilter;\n \n import de.codecentric.boot.admin.controller.RegistryController;\n import de.codecentric.boot.admin.event.RoutesOutdatedEvent;\n@@ -43,7 +35,7 @@\n import de.codecentric.boot.admin.zuul.PreDecorationFilter;\n \n @Configuration\n-public class RevereseZuulProxyConfiguration {\n+public class RevereseZuulProxyConfiguration extends ZuulConfiguration {\n \n \t@Autowired(required = false)\n \tprivate TraceRepository traces;\n@@ -55,6 +47,7 @@ public class RevereseZuulProxyConfiguration {\n \tprivate ApplicationRegistry registry;\n \n \t@Bean\n+\t@Override\n \tpublic ApplicationRouteLocator routeLocator() {\n \t\treturn new ApplicationRouteLocator(this.server.getServletPrefix(), registry,\n \t\t\t\tRegistryController.PATH);\n@@ -75,59 +68,25 @@ public SimpleHostRoutingFilter simpleHostRoutingFilter() {\n \t}\n \n \t@Bean\n-\tpublic ZuulController zuulController() {\n-\t\treturn new ZuulController();\n-\t}\n-\n-\t@Bean\n-\tpublic ZuulHandlerMapping zuulHandlerMapping() {\n-\t\treturn new ZuulHandlerMapping(routeLocator(), zuulController());\n-\t}\n-\n-\t// pre filters\n-\n-\t@Bean\n-\tpublic FormBodyWrapperFilter formBodyWrapperFilter() {\n-\t\treturn new FormBodyWrapperFilter();\n-\t}\n-\n-\t@Bean\n-\tpublic DebugFilter debugFilter() {\n-\t\treturn new DebugFilter();\n-\t}\n-\n-\t@Bean\n-\tpublic Servlet30WrapperFilter servlet30WrapperFilter() {\n-\t\treturn new Servlet30WrapperFilter();\n+\t@Override\n+\tpublic ApplicationListener<ApplicationEvent> zuulRefreshRoutesListener() {\n+\t\treturn new ZuulRefreshListener();\n \t}\n \n-\t// post filters\n-\n-\t@Bean\n-\tpublic SendResponseFilter sendResponseFilter() {\n-\t\treturn new SendResponseFilter();\n-\t}\n-\n-\t@Bean\n-\tpublic SendErrorFilter sendErrorFilter() {\n-\t\treturn new SendErrorFilter();\n-\t}\n-\n-\t@Configuration\n-\tprotected static class ZuulFilterConfiguration {\n+\tprivate static class ZuulRefreshListener implements ApplicationListener<ApplicationEvent> {\n \t\t@Autowired\n-\t\tprivate Map<String, ZuulFilter> filters;\n+\t\tprivate ZuulHandlerMapping zuulHandlerMapping;\n \n-\t\t@Bean\n-\t\tpublic ZuulFilterInitializer zuulFilterInitializer() {\n-\t\t\treturn new ZuulFilterInitializer(this.filters);\n+\t\t@Autowired\n+\t\tprivate ApplicationRouteLocator routeLocator;\n+\n+\t\t@Override\n+\t\tpublic void onApplicationEvent(ApplicationEvent event) {\n+\t\t\tif (event instanceof PayloadApplicationEvent && ((PayloadApplicationEvent<?>) event)\n+\t\t\t\t\t.getPayload() instanceof RoutesOutdatedEvent) {\n+\t\t\t\trouteLocator.resetRoutes();\n+\t\t\t\tzuulHandlerMapping.registerHandlers();\n+\t\t\t}\n \t\t}\n \t}\n-\n-\t@EventListener\n-\tpublic void onRoutesOutdatedEvent(RoutesOutdatedEvent event) {\n-\t\trouteLocator().resetRoutes();\n-\t\tzuulHandlerMapping().registerHandlers();\n-\t}\n-\n }",
      "parent_sha": "8a6cdfa9361a9b2ba9851c30cf47e1d46910b7c1"
    }
  },
  {
    "oid": "3b5263db5071a8940fface15c4947c98ac963329",
    "message": "fix: Fix FileNotFoundException in the mail path (#2619)",
    "date": "2023-07-21T07:52:17Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/3b5263db5071a8940fface15c4947c98ac963329",
    "details": {
      "sha": "da71bc86336497756f644ab66e4a7921f3bdcea6",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MailNotifier.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/3b5263db5071a8940fface15c4947c98ac963329/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fnotify%2FMailNotifier.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/3b5263db5071a8940fface15c4947c98ac963329/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fnotify%2FMailNotifier.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fnotify%2FMailNotifier.java?ref=3b5263db5071a8940fface15c4947c98ac963329",
      "patch": "@@ -76,7 +76,7 @@ public class MailNotifier extends AbstractStatusChangeNotifier {\n \t/**\n \t * Thymleaf template for mail\n \t */\n-\tprivate String template = \"classpath:/META-INF/spring-boot-admin-server/mail/status-changed.html\";\n+\tprivate String template = \"META-INF/spring-boot-admin-server/mail/status-changed.html\";\n \n \tpublic MailNotifier(JavaMailSender mailSender, InstanceRepository repository, TemplateEngine templateEngine) {\n \t\tsuper(repository);",
      "parent_sha": "58d7067b01b3bc5c52410d23671f21d49c6c1407"
    }
  },
  {
    "oid": "5b5212b68c06ef6ae7cffbdd6627e2473c8b3014",
    "message": "fix formatting",
    "date": "2020-05-01T20:18:37Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/5b5212b68c06ef6ae7cffbdd6627e2473c8b3014",
    "details": {
      "sha": "c4627511c7fd7d34067c834bbf7c584557a2ee6c",
      "filename": "spring-boot-admin-server-cloud/src/test/java/de/codecentric/boot/admin/server/cloud/discovery/InstanceDiscoveryListenerTest.java",
      "status": "modified",
      "additions": 20,
      "deletions": 16,
      "changes": 36,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/5b5212b68c06ef6ae7cffbdd6627e2473c8b3014/spring-boot-admin-server-cloud%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FInstanceDiscoveryListenerTest.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/5b5212b68c06ef6ae7cffbdd6627e2473c8b3014/spring-boot-admin-server-cloud%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FInstanceDiscoveryListenerTest.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-cloud%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FInstanceDiscoveryListenerTest.java?ref=5b5212b68c06ef6ae7cffbdd6627e2473c8b3014",
      "patch": "@@ -93,8 +93,8 @@ public void should_not_register_instance_when_serviceId_is_ignored() {\n \t@Test\n \tpublic void should_not_register_instance_when_instanceMetadata_is_ignored() {\n \t\twhen(this.discovery.getServices()).thenReturn(singletonList(\"service\"));\n-\t\twhen(this.discovery.getInstances(\"service\")).thenReturn(singletonList(new DefaultServiceInstance(\"test-1\", \"service\",\n-\t\t\t\t\"localhost\", 80, false, Collections.singletonMap(\"monitoring\", \"false\"))));\n+\t\twhen(this.discovery.getInstances(\"service\")).thenReturn(singletonList(new DefaultServiceInstance(\"test-1\",\n+\t\t\t\t\"service\", \"localhost\", 80, false, Collections.singletonMap(\"monitoring\", \"false\"))));\n \n \t\tthis.listener.setIgnoredInstancesMetadata(Collections.singletonMap(\"monitoring\", \"false\"));\n \t\tthis.listener.onInstanceRegistered(new InstanceRegisteredEvent<>(new Object(), null));\n@@ -117,8 +117,8 @@ public void should_register_instance_when_serviceId_is_not_ignored() {\n \t@Test\n \tpublic void should_register_instance_when_instanceMetadata_is_not_ignored() {\n \t\twhen(this.discovery.getServices()).thenReturn(singletonList(\"service\"));\n-\t\twhen(this.discovery.getInstances(\"service\")).thenReturn(singletonList(new DefaultServiceInstance(\"test-1\", \"service\",\n-\t\t\t\t\"localhost\", 80, false, Collections.singletonMap(\"monitoring\", \"true\"))));\n+\t\twhen(this.discovery.getInstances(\"service\")).thenReturn(singletonList(new DefaultServiceInstance(\"test-1\",\n+\t\t\t\t\"service\", \"localhost\", 80, false, Collections.singletonMap(\"monitoring\", \"true\"))));\n \n \t\tthis.listener.setInstancesMetadata(Collections.singletonMap(\"monitoring\", \"false\"));\n \t\tthis.listener.onInstanceRegistered(new InstanceRegisteredEvent<>(new Object(), null));\n@@ -142,12 +142,14 @@ public void should_not_register_instance_when_serviceId_matches_ignored_pattern(\n \t@Test\n \tpublic void should_not_register_instance_when_instanceMetadata_matches_ignored_metadata() {\n \t\twhen(this.discovery.getServices()).thenReturn(asList(\"service\", \"rabbit-1\", \"rabbit-2\"));\n-\t\twhen(this.discovery.getInstances(\"service\")).thenReturn(singletonList(new DefaultServiceInstance(\"test-1\", \"service\",\n-\t\t\t\t\"localhost\", 80, false, Collections.singletonMap(\"monitoring\", \"true\"))));\n-\t\twhen(this.discovery.getInstances(\"rabbit-1\")).thenReturn(singletonList(new DefaultServiceInstance(\"rabbit-test-1\",\n-\t\t\t\t\"rabbit-1\", \"localhost\", 80, false, Collections.singletonMap(\"monitoring\", \"false\"))));\n-\t\twhen(this.discovery.getInstances(\"rabbit-2\")).thenReturn(singletonList(new DefaultServiceInstance(\"rabbit-test-1\",\n-\t\t\t\t\"rabbit-2\", \"localhost\", 80, false, Collections.singletonMap(\"monitoring\", \"false\"))));\n+\t\twhen(this.discovery.getInstances(\"service\")).thenReturn(singletonList(new DefaultServiceInstance(\"test-1\",\n+\t\t\t\t\"service\", \"localhost\", 80, false, Collections.singletonMap(\"monitoring\", \"true\"))));\n+\t\twhen(this.discovery.getInstances(\"rabbit-1\"))\n+\t\t\t\t.thenReturn(singletonList(new DefaultServiceInstance(\"rabbit-test-1\", \"rabbit-1\", \"localhost\", 80,\n+\t\t\t\t\t\tfalse, Collections.singletonMap(\"monitoring\", \"false\"))));\n+\t\twhen(this.discovery.getInstances(\"rabbit-2\"))\n+\t\t\t\t.thenReturn(singletonList(new DefaultServiceInstance(\"rabbit-test-1\", \"rabbit-2\", \"localhost\", 80,\n+\t\t\t\t\t\tfalse, Collections.singletonMap(\"monitoring\", \"false\"))));\n \n \t\tthis.listener.setIgnoredInstancesMetadata(Collections.singletonMap(\"monitoring\", \"false\"));\n \t\tthis.listener.onInstanceRegistered(new InstanceRegisteredEvent<>(new Object(), null));\n@@ -172,12 +174,14 @@ public void should_register_instances_when_serviceId_matches_wanted_pattern() {\n \t@Test\n \tpublic void should_register_instances_when_instanceMetadata_matches_wanted_metadata() {\n \t\twhen(this.discovery.getServices()).thenReturn(asList(\"service\", \"rabbit-1\", \"rabbit-2\"));\n-\t\twhen(this.discovery.getInstances(\"service\")).thenReturn(singletonList(new DefaultServiceInstance(\"test-1\", \"service\",\n-\t\t\t\t\"localhost\", 80, false, Collections.singletonMap(\"monitoring\", \"true\"))));\n-\t\twhen(this.discovery.getInstances(\"rabbit-1\")).thenReturn(singletonList(new DefaultServiceInstance(\"rabbit-test-1\",\n-\t\t\t\t\"rabbit-1\", \"localhost\", 80, false, Collections.singletonMap(\"monitoring\", \"false\"))));\n-\t\twhen(this.discovery.getInstances(\"rabbit-2\")).thenReturn(singletonList(new DefaultServiceInstance(\"rabbit-test-1\",\n-\t\t\t\t\"rabbit-2\", \"localhost\", 80, false, Collections.singletonMap(\"monitoring\", \"false\"))));\n+\t\twhen(this.discovery.getInstances(\"service\")).thenReturn(singletonList(new DefaultServiceInstance(\"test-1\",\n+\t\t\t\t\"service\", \"localhost\", 80, false, Collections.singletonMap(\"monitoring\", \"true\"))));\n+\t\twhen(this.discovery.getInstances(\"rabbit-1\"))\n+\t\t\t\t.thenReturn(singletonList(new DefaultServiceInstance(\"rabbit-test-1\", \"rabbit-1\", \"localhost\", 80,\n+\t\t\t\t\t\tfalse, Collections.singletonMap(\"monitoring\", \"false\"))));\n+\t\twhen(this.discovery.getInstances(\"rabbit-2\"))\n+\t\t\t\t.thenReturn(singletonList(new DefaultServiceInstance(\"rabbit-test-1\", \"rabbit-2\", \"localhost\", 80,\n+\t\t\t\t\t\tfalse, Collections.singletonMap(\"monitoring\", \"false\"))));\n \n \t\tthis.listener.setInstancesMetadata(Collections.singletonMap(\"monitoring\", \"true\"));\n \t\tthis.listener.onInstanceRegistered(new InstanceRegisteredEvent<>(new Object(), null));",
      "parent_sha": "ed0b42d8fab6b9a8a40ae7d2adbbffc3ae2a215a"
    }
  },
  {
    "oid": "c2ee1f5efb35ecc450c3cdcbacc243bfdacc2164",
    "message": "fixed calling of filter method twice\n\ncloses #1523",
    "date": "2020-11-05T18:56:44Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/c2ee1f5efb35ecc450c3cdcbacc243bfdacc2164",
    "details": {
      "sha": "20c49a88912a17a33bc675fced8a465e3e8f997c",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/FilteringNotifier.java",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/c2ee1f5efb35ecc450c3cdcbacc243bfdacc2164/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fnotify%2Ffilter%2FFilteringNotifier.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/c2ee1f5efb35ecc450c3cdcbacc243bfdacc2164/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fnotify%2Ffilter%2FFilteringNotifier.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fnotify%2Ffilter%2FFilteringNotifier.java?ref=c2ee1f5efb35ecc450c3cdcbacc243bfdacc2164",
      "patch": "@@ -68,12 +68,7 @@ protected boolean shouldNotify(InstanceEvent event, Instance instance) {\n \n \t@Override\n \tpublic Mono<Void> doNotify(InstanceEvent event, Instance instance) {\n-\t\tif (!filter(event, instance)) {\n-\t\t\treturn delegate.notify(event);\n-\t\t}\n-\t\telse {\n-\t\t\treturn Mono.empty();\n-\t\t}\n+\t\treturn delegate.notify(event);\n \t}\n \n \tprivate boolean filter(InstanceEvent event, Instance instance) {",
      "parent_sha": "5a45b6ba213e27c11a5611584ed8ab738baf7799"
    }
  },
  {
    "oid": "d308cdc7c0ca2bb188d2d5c0388128286a0ee2be",
    "message": "Improve wording of registration notification message",
    "date": "2018-06-07T16:02:19Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/d308cdc7c0ca2bb188d2d5c0388128286a0ee2be",
    "details": {
      "sha": "086437402a9fa1f1ce718bed35adc3b678f8630c",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/d308cdc7c0ca2bb188d2d5c0388128286a0ee2be/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fnotify%2FMicrosoftTeamsNotifier.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/d308cdc7c0ca2bb188d2d5c0388128286a0ee2be/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fnotify%2FMicrosoftTeamsNotifier.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fnotify%2FMicrosoftTeamsNotifier.java?ref=d308cdc7c0ca2bb188d2d5c0388128286a0ee2be",
      "patch": "@@ -65,7 +65,7 @@ public class MicrosoftTeamsNotifier extends AbstractStatusChangeNotifier {\n      * Message will be used as title of the Activity section of the Teams message when an app\n      * registers\n      */\n-    private String registerActivitySubtitlePattern = \"%s with id %s has registered from Spring Boot Admin\";\n+    private String registerActivitySubtitlePattern = \"%s with id %s has registered with Spring Boot Admin\";\n \n     /**\n      * Message will be used as title of the Activity section of the Teams message when an app",
      "parent_sha": "2224a939df91cf2bc696b20c3e47b084a20b3406"
    }
  },
  {
    "oid": "2f321ad9649f8a3ff7a2070a2ed4d010dca6eb8e",
    "message": "Fix InstanceExchangeFilterFunction sample: Don't log multiple times",
    "date": "2019-05-05T19:50:59Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/2f321ad9649f8a3ff7a2070a2ed4d010dca6eb8e",
    "details": {
      "sha": "8c41ebcced6f627e668f0abc3ac8afb8cb8f19cb",
      "filename": "spring-boot-admin-samples/spring-boot-admin-sample-servlet/src/main/java/de/codecentric/boot/admin/SpringBootAdminServletApplication.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/2f321ad9649f8a3ff7a2070a2ed4d010dca6eb8e/spring-boot-admin-samples%2Fspring-boot-admin-sample-servlet%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2FSpringBootAdminServletApplication.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/2f321ad9649f8a3ff7a2070a2ed4d010dca6eb8e/spring-boot-admin-samples%2Fspring-boot-admin-sample-servlet%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2FSpringBootAdminServletApplication.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-samples%2Fspring-boot-admin-sample-servlet%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2FSpringBootAdminServletApplication.java?ref=2f321ad9649f8a3ff7a2070a2ed4d010dca6eb8e",
      "patch": "@@ -45,12 +45,11 @@ public static void main(String[] args) {\n     // tag::customization-instance-exchange-filter-function[]\n     @Bean\n     public InstanceExchangeFilterFunction auditLog() {\n-        return (instance, request, next) -> {\n+        return (instance, request, next) -> next.exchange(request).doOnSubscribe(s -> {\n             if (HttpMethod.DELETE.equals(request.method()) || HttpMethod.POST.equals(request.method())) {\n                 log.info(\"{} for {} on {}\", request.method(), instance.getId(), request.url());\n             }\n-            return next.exchange(request);\n-        };\n+        });\n     }\n     // end::customization-instance-exchange-filter-function[]\n ",
      "parent_sha": "d46e97d3cf5b75d0ea3dd68e0a71fc5d7a349383"
    }
  },
  {
    "oid": "ac44e026471b12e86fc48c52d27ca1b55b7e7d56",
    "message": "Fixed variable typo",
    "date": "2018-10-22T15:14:53Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/ac44e026471b12e86fc48c52d27ca1b55b7e7d56",
    "details": {
      "sha": "66d1946934c5fee91d151adbd441bf12104b6aa9",
      "filename": "spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/DefaultServiceInstanceConverter.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/ac44e026471b12e86fc48c52d27ca1b55b7e7d56/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FDefaultServiceInstanceConverter.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/ac44e026471b12e86fc48c52d27ca1b55b7e7d56/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FDefaultServiceInstanceConverter.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FDefaultServiceInstanceConverter.java?ref=ac44e026471b12e86fc48c52d27ca1b55b7e7d56",
      "patch": "@@ -94,9 +94,9 @@ protected URI getHealthUrl(ServiceInstance instance) {\n     }\n \n     protected URI getManagementUrl(ServiceInstance instance) {\n-        String managamentPath = instance.getMetadata().get(KEY_MANAGEMENT_PATH);\n-        if (isEmpty(managamentPath)) {\n-            managamentPath = managementContextPath;\n+        String managementPath = instance.getMetadata().get(KEY_MANAGEMENT_PATH);\n+        if (isEmpty(managementPath)) {\n+            managementPath = managementContextPath;\n         }\n \n         URI serviceUrl = getServiceUrl(instance);\n@@ -106,16 +106,16 @@ protected URI getManagementUrl(ServiceInstance instance) {\n             managementServerAddress = serviceUrl.getHost();\n         }\n \n-        String managamentPort = instance.getMetadata().get(KEY_MANAGEMENT_PORT);\n-        if (isEmpty(managamentPort)) {\n-            managamentPort = String.valueOf(serviceUrl.getPort());\n+        String managementPort = instance.getMetadata().get(KEY_MANAGEMENT_PORT);\n+        if (isEmpty(managementPort)) {\n+            managementPort = String.valueOf(serviceUrl.getPort());\n         }\n \n         return UriComponentsBuilder.fromUri(serviceUrl)\n                                    .host(managementServerAddress)\n-                                   .port(managamentPort)\n+                                   .port(managementPort)\n                                    .path(\"/\")\n-                                   .path(managamentPath)\n+                                   .path(managementPath)\n                                    .build()\n                                    .toUri();\n     }",
      "parent_sha": "36a144e1a2f33909ee61b63442c591e5633b0814"
    }
  },
  {
    "oid": "56cb7948a01a3733b8a796c09d645ba5f9f6f046",
    "message": "register application with correct spring-boot management path",
    "date": "2014-11-06T17:36:09Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/56cb7948a01a3733b8a796c09d645ba5f9f6f046",
    "details": {
      "sha": "94c36802eb0e387e2e14d58ae1855171c40b8981",
      "filename": "spring-boot-starter-admin-client/src/main/java/de/codecentric/boot/admin/services/SpringBootAdminRegistratorTask.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/56cb7948a01a3733b8a796c09d645ba5f9f6f046/spring-boot-starter-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fservices%2FSpringBootAdminRegistratorTask.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/56cb7948a01a3733b8a796c09d645ba5f9f6f046/spring-boot-starter-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fservices%2FSpringBootAdminRegistratorTask.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-starter-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fservices%2FSpringBootAdminRegistratorTask.java?ref=56cb7948a01a3733b8a796c09d645ba5f9f6f046",
      "patch": "@@ -69,13 +69,16 @@ public void run() {\n \t\t\t\t}\n \t\t\t}\n \t\t\t// register the application with the used URL and port\n-\t\t\tString url = new URL(\"http\", InetAddress.getLocalHost().getCanonicalHostName(), port, \"\").toString();\n+\t\t\tString managementPath = env.getProperty(\"management.context-path\", \"\");\n+\t\t\tString url = new URL(\"http\", InetAddress.getLocalHost().getCanonicalHostName(), port, managementPath)\n+\t\t\t.toString();\n \t\t\tApplication app = new Application();\n \t\t\tapp.setId(id);\n \t\t\tapp.setUrl(url);\n \t\t\ttemplate.postForObject(adminUrl + \"/api/applications\", app, String.class);\n \t\t\tLOGGER.info(\"Application registered itself at the admin application with ID '{}' and URL '{}'\", id, url);\n-\t\t} catch (Exception e) {\n+\t\t}\n+\t\tcatch (Exception e) {\n \t\t\tLOGGER.warn(\"Failed to register application at spring-boot-admin, message={}\", e.getMessage());\n \t\t}\n \t}",
      "parent_sha": "d10b5bf3b5d29b9ebc36b3a217869d20c05672c8"
    }
  },
  {
    "oid": "d86fd8dc125abc4830452183bf4e85df23e48825",
    "message": "Add missing getters in MicrosoftTeamsNotifier\n\nfixes #902",
    "date": "2018-08-28T18:51:36Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/d86fd8dc125abc4830452183bf4e85df23e48825",
    "details": {
      "sha": "2d147a6d97bcdc696b39067acf6f0aa50bed6dd6",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
      "status": "modified",
      "additions": 27,
      "deletions": 9,
      "changes": 36,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/d86fd8dc125abc4830452183bf4e85df23e48825/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fnotify%2FMicrosoftTeamsNotifier.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/d86fd8dc125abc4830452183bf4e85df23e48825/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fnotify%2FMicrosoftTeamsNotifier.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fnotify%2FMicrosoftTeamsNotifier.java?ref=d86fd8dc125abc4830452183bf4e85df23e48825",
      "patch": "@@ -109,17 +109,18 @@ protected Mono<Void> doNotify(InstanceEvent event, Instance instance) {\n             message = getDeregisteredMessage(instance);\n         } else if (event instanceof InstanceStatusChangedEvent) {\n             InstanceStatusChangedEvent statusChangedEvent = (InstanceStatusChangedEvent) event;\n-            message = getStatusChangedMessage(instance, getLastStatus(event.getInstance()),\n-                statusChangedEvent.getStatusInfo().getStatus());\n+            message = getStatusChangedMessage(instance,\n+                getLastStatus(event.getInstance()),\n+                statusChangedEvent.getStatusInfo().getStatus()\n+            );\n         } else {\n             return Mono.empty();\n         }\n \n         HttpHeaders headers = new HttpHeaders();\n         headers.setContentType(MediaType.APPLICATION_JSON);\n \n-        return Mono.fromRunnable(() -> this.restTemplate.postForEntity(\n-            webhookUrl,\n+        return Mono.fromRunnable(() -> this.restTemplate.postForEntity(webhookUrl,\n             new HttpEntity<Object>(message, headers),\n             Void.class\n         ));\n@@ -134,19 +135,27 @@ protected boolean shouldNotify(InstanceEvent event, Instance instance) {\n \n     protected Message getDeregisteredMessage(Instance instance) {\n         String activitySubtitle = this.safeFormat(deregisterActivitySubtitlePattern,\n-            instance.getRegistration().getName(), instance.getId());\n+            instance.getRegistration().getName(),\n+            instance.getId()\n+        );\n         return createMessage(instance, deRegisteredTitle, activitySubtitle);\n     }\n \n     protected Message getRegisteredMessage(Instance instance) {\n-        String activitySubtitle = this.safeFormat(registerActivitySubtitlePattern, instance.getRegistration().getName(),\n-            instance.getId());\n+        String activitySubtitle = this.safeFormat(registerActivitySubtitlePattern,\n+            instance.getRegistration().getName(),\n+            instance.getId()\n+        );\n         return createMessage(instance, registeredTitle, activitySubtitle);\n     }\n \n     protected Message getStatusChangedMessage(Instance instance, String statusFrom, String statusTo) {\n-        String activitySubtitle = this.safeFormat(statusActivitySubtitlePattern, instance.getRegistration().getName(),\n-            instance.getId(), statusFrom, statusTo);\n+        String activitySubtitle = this.safeFormat(statusActivitySubtitlePattern,\n+            instance.getRegistration().getName(),\n+            instance.getId(),\n+            statusFrom,\n+            statusTo\n+        );\n         return createMessage(instance, statusChangedTitle, activitySubtitle);\n     }\n \n@@ -184,10 +193,18 @@ public void setWebhookUrl(URI webhookUrl) {\n         this.webhookUrl = webhookUrl;\n     }\n \n+    public URI getWebhookUrl() {\n+        return webhookUrl;\n+    }\n+\n     public void setThemeColor(String themeColor) {\n         this.themeColor = themeColor;\n     }\n \n+    public String getThemeColor() {\n+        return themeColor;\n+    }\n+\n     public String getDeregisterActivitySubtitlePattern() {\n         return deregisterActivitySubtitlePattern;\n     }\n@@ -212,6 +229,7 @@ public void setStatusActivitySubtitlePattern(String statusActivitySubtitlePatter\n         this.statusActivitySubtitlePattern = statusActivitySubtitlePattern;\n     }\n \n+\n     public String getDeRegisteredTitle() {\n         return deRegisteredTitle;\n     }",
      "parent_sha": "f874763b519d9e7db17182f2bee7609c514e83ef"
    }
  },
  {
    "oid": "cf2a9eee0eba51021d31df56b388220cf245086f",
    "message": "Don't log the full response body after successful registration.\n\nfixes #590 (new client - old server)",
    "date": "2017-11-16T15:51:14Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/cf2a9eee0eba51021d31df56b388220cf245086f",
    "details": {
      "sha": "662fcf781f89b49e859f7934613a43ccc729caf2",
      "filename": "spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/client/registration/ApplicationRegistrator.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/cf2a9eee0eba51021d31df56b388220cf245086f/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FApplicationRegistrator.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/cf2a9eee0eba51021d31df56b388220cf245086f/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FApplicationRegistrator.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FApplicationRegistrator.java?ref=cf2a9eee0eba51021d31df56b388220cf245086f",
      "patch": "@@ -70,9 +70,9 @@ public boolean register() {\n \n                 if (response.getStatusCode().equals(HttpStatus.CREATED)) {\n                     if (registeredId.compareAndSet(null, response.getBody().get(\"id\").toString())) {\n-                        LOGGER.info(\"Application registered itself as {}\", response.getBody());\n+                        LOGGER.info(\"Application registered itself as {}\", response.getBody().get(\"id\").toString());\n                     } else {\n-                        LOGGER.debug(\"Application refreshed itself as {}\", response.getBody());\n+                        LOGGER.debug(\"Application refreshed itself as {}\", response.getBody().get(\"id\").toString());\n                     }\n \n                     isRegistrationSuccessful = true;",
      "parent_sha": "ad0a38c7eabcac72549125b54708df24e4f1510f"
    }
  },
  {
    "oid": "791fe64212dee5eea0639a0fd5819f0caf0114cf",
    "message": "Create error responses only when necessary and reuse the exchangeStrategies\n\n..to gain more performance and reduce gc pressure\n\nfixes #713",
    "date": "2018-04-25T19:29:15Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/791fe64212dee5eea0639a0fd5819f0caf0114cf",
    "details": {
      "sha": "534022094408898e7cc220fb8d4e76bebb478e3b",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/AbstractInstancesProxyController.java",
      "status": "modified",
      "additions": 12,
      "deletions": 10,
      "changes": 22,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/791fe64212dee5eea0639a0fd5819f0caf0114cf/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2FAbstractInstancesProxyController.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/791fe64212dee5eea0639a0fd5819f0caf0114cf/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2FAbstractInstancesProxyController.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2FAbstractInstancesProxyController.java?ref=791fe64212dee5eea0639a0fd5819f0caf0114cf",
      "patch": "@@ -42,8 +42,8 @@\n import org.springframework.util.AntPathMatcher;\n import org.springframework.web.reactive.function.BodyInserter;\n import org.springframework.web.reactive.function.client.ClientResponse;\n+import org.springframework.web.reactive.function.client.ExchangeStrategies;\n import org.springframework.web.reactive.function.client.WebClient;\n-import org.springframework.web.server.ResponseStatusException;\n \n import static java.util.stream.Collectors.toMap;\n \n@@ -56,6 +56,7 @@ public class AbstractInstancesProxyController {\n     private final InstanceWebClient instanceWebClient;\n     private final Set<String> ignoredHeaders;\n     private final Duration readTimeout;\n+    private final ExchangeStrategies strategies = ExchangeStrategies.withDefaults();\n \n     public AbstractInstancesProxyController(String adminContextPath,\n                                             Set<String> ignoredHeaders,\n@@ -80,7 +81,8 @@ protected Mono<ClientResponse> forward(String instanceId,\n \n         return registry.getInstance(InstanceId.of(instanceId))\n                        .flatMap(instance -> forward(instance, uri, method, headers, bodyInserter))\n-                       .defaultIfEmpty(ClientResponse.create(HttpStatus.SERVICE_UNAVAILABLE).build());\n+                       .switchIfEmpty(Mono.fromSupplier(\n+                           () -> ClientResponse.create(HttpStatus.SERVICE_UNAVAILABLE, strategies).build()));\n     }\n \n     private Mono<ClientResponse> forward(Instance instance,\n@@ -104,14 +106,14 @@ private Mono<ClientResponse> forward(Instance instance,\n         }\n \n         return headersSpec.exchange()\n-                          .timeout(this.readTimeout,\n-                              Mono.just(ClientResponse.create(HttpStatus.GATEWAY_TIMEOUT).build()))\n-                          .onErrorMap(ResolveEndpointException.class,\n-                              error -> new ResponseStatusException(HttpStatus.NOT_FOUND, null, error))\n-                          .onErrorResume(IOException.class,\n-                              ex -> Mono.just(ClientResponse.create(HttpStatus.BAD_GATEWAY).build()))\n-                          .onErrorResume(ConnectException.class,\n-                              ex -> Mono.just(ClientResponse.create(HttpStatus.BAD_GATEWAY).build()));\n+                          .timeout(this.readTimeout, Mono.fromSupplier(\n+                              () -> ClientResponse.create(HttpStatus.GATEWAY_TIMEOUT, strategies).build()))\n+                          .onErrorResume(ResolveEndpointException.class, ex -> Mono.fromSupplier(\n+                              () -> ClientResponse.create(HttpStatus.NOT_FOUND, strategies).build()))\n+                          .onErrorResume(IOException.class, ex -> Mono.fromSupplier(\n+                              () -> ClientResponse.create(HttpStatus.BAD_GATEWAY, strategies).build()))\n+                          .onErrorResume(ConnectException.class, ex -> Mono.fromSupplier(\n+                              () -> ClientResponse.create(HttpStatus.BAD_GATEWAY, strategies).build()));\n     }\n \n     protected String getEndpointLocalPath(String pathWithinApplication) {",
      "parent_sha": "e25e24e1117ae90a6554a716359d0485f5f593a4"
    }
  },
  {
    "oid": "b7c363f124b8c5d9d601547aa833250aa455b05a",
    "message": "Fix: Server sent event on registration for application is not emmitted",
    "date": "2018-09-21T18:01:03Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/b7c363f124b8c5d9d601547aa833250aa455b05a",
    "details": {
      "sha": "35deabbbcd1b19ff6c42f3002703a45027c9692a",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/ApplicationsController.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/b7c363f124b8c5d9d601547aa833250aa455b05a/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2FApplicationsController.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/b7c363f124b8c5d9d601547aa833250aa455b05a/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2FApplicationsController.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2FApplicationsController.java?ref=b7c363f124b8c5d9d601547aa833250aa455b05a",
      "patch": "@@ -75,6 +75,7 @@ public Flux<Application> applications() {\n     @GetMapping(path = \"/applications/{name}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public Mono<ResponseEntity<Application>> application(@PathVariable(\"name\") String name) {\n         return this.toApplication(name, registry.getInstances(name).filter(Instance::isRegistered))\n+                   .filter(a -> !a.getInstances().isEmpty())\n                    .map(ResponseEntity::ok)\n                    .defaultIfEmpty(ResponseEntity.notFound().build());\n     }\n@@ -106,7 +107,7 @@ protected Tuple2<String, Flux<Instance>> getApplicationForInstance(Instance inst\n     }\n \n     protected Mono<Application> toApplication(String name, Flux<Instance> instances) {\n-        return instances.collectList().filter(instanceList -> !instanceList.isEmpty()).map(instanceList -> {\n+        return instances.collectList().map(instanceList -> {\n             Application group = new Application(name);\n             group.setInstances(instanceList);\n             group.setBuildVersion(getBuildVersion(instanceList));",
      "parent_sha": "8b6ca8b829a1cf9cf70b07c637f99b2290fad6c2"
    }
  },
  {
    "oid": "755307d004bc7cee2eecd476bcd5cb6a646a80f7",
    "message": "Fix formatting by running spring-javaformat:apply",
    "date": "2020-12-12T19:32:50Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/755307d004bc7cee2eecd476bcd5cb6a646a80f7",
    "details": {
      "sha": "85090706d0497116e9f5f78ae537a1eeea6b189c",
      "filename": "spring-boot-admin-server-ui/src/test/java/de/codecentric/boot/admin/server/ui/AdminUiReactiveApplicationTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/755307d004bc7cee2eecd476bcd5cb6a646a80f7/spring-boot-admin-server-ui%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2FAdminUiReactiveApplicationTest.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/755307d004bc7cee2eecd476bcd5cb6a646a80f7/spring-boot-admin-server-ui%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2FAdminUiReactiveApplicationTest.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-ui%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2FAdminUiReactiveApplicationTest.java?ref=755307d004bc7cee2eecd476bcd5cb6a646a80f7",
      "patch": "@@ -39,9 +39,9 @@ public class AdminUiReactiveApplicationTest extends AbstractAdminUiApplicationTe\n \t@BeforeAll\n \tpublic static void setUp() {\n \t\tinstance = new SpringApplicationBuilder().sources(TestAdminApplication.class).web(WebApplicationType.REACTIVE)\n-\t\t\t.run(\"--server.port=0\",\n-\t\t\t\t\"--spring.boot.admin.ui.extension-resource-locations=classpath:/META-INF/test-extensions/\",\n-\t\t\t\t\"--spring.boot.admin.ui.available-languages=de\");\n+\t\t\t\t.run(\"--server.port=0\",\n+\t\t\t\t\t\t\"--spring.boot.admin.ui.extension-resource-locations=classpath:/META-INF/test-extensions/\",\n+\t\t\t\t\t\t\"--spring.boot.admin.ui.available-languages=de\");\n \n \t\tport = instance.getEnvironment().getProperty(\"local.server.port\", Integer.class, 0);\n \t}",
      "parent_sha": "454cedceae87ea01fbc4b6947ffce2279455aa40"
    }
  },
  {
    "oid": "a04187e20eb5a979bd76f9da9aa305b5ac3c0999",
    "message": "Make MailNotifierConfiguration Spring Native compatible (#1743) (#1763)",
    "date": "2021-08-07T14:08:06Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/a04187e20eb5a979bd76f9da9aa305b5ac3c0999",
    "details": {
      "sha": "e8d571837b90d56436d92033e0e4f9a7288db219",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/config/AdminServerNotifierAutoConfiguration.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/a04187e20eb5a979bd76f9da9aa305b5ac3c0999/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fconfig%2FAdminServerNotifierAutoConfiguration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/a04187e20eb5a979bd76f9da9aa305b5ac3c0999/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fconfig%2FAdminServerNotifierAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fconfig%2FAdminServerNotifierAutoConfiguration.java?ref=a04187e20eb5a979bd76f9da9aa305b5ac3c0999",
      "patch": "@@ -167,8 +167,9 @@ public MailNotifierConfiguration(ApplicationContext applicationContext) {\n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n \t\t@ConfigurationProperties(\"spring.boot.admin.notify.mail\")\n-\t\tpublic MailNotifier mailNotifier(JavaMailSender mailSender, InstanceRepository repository) {\n-\t\t\treturn new MailNotifier(mailSender, repository, mailNotifierTemplateEngine());\n+\t\tpublic MailNotifier mailNotifier(JavaMailSender mailSender, InstanceRepository repository,\n+\t\t\t\tTemplateEngine mailNotifierTemplateEngine) {\n+\t\t\treturn new MailNotifier(mailSender, repository, mailNotifierTemplateEngine);\n \t\t}\n \n \t\t@Bean",
      "parent_sha": "5a61c73fbd515625a7247e38df7a56e7833853b3"
    }
  },
  {
    "oid": "5e9b1eb681539312155d56cff9ddec4e838d5a5b",
    "message": "Don't json serialize the principal\n\nSince the principal not necessarily is json-searializable we need to\navoid this and just pass the wanted properties to thymeleaf\n\nfixes #799",
    "date": "2018-06-26T17:39:53Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/5e9b1eb681539312155d56cff9ddec4e838d5a5b",
    "details": {
      "sha": "9415c8b0d2bee3dea292698ad3e7d0af9545baed",
      "filename": "spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/UiController.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/5e9b1eb681539312155d56cff9ddec4e838d5a5b/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fweb%2FUiController.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/5e9b1eb681539312155d56cff9ddec4e838d5a5b/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fweb%2FUiController.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fweb%2FUiController.java?ref=5e9b1eb681539312155d56cff9ddec4e838d5a5b",
      "patch": "@@ -25,6 +25,9 @@\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.ModelAttribute;\n \n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n @AdminController\n public class UiController {\n     private final String adminContextPath;\n@@ -48,8 +51,11 @@ public Map<String, Object> getUiSettings() {\n     }\n \n     @ModelAttribute(value = \"user\", binding = false)\n-    public Principal getUiSettings(Principal principal) {\n-        return principal;\n+    public Map<String, Object> getUiSettings(Principal principal) {\n+        if (principal != null) {\n+            return singletonMap(\"name\", principal.getName());\n+        }\n+        return emptyMap();\n     }\n \n     @GetMapping(path = \"/\", produces = MediaType.TEXT_HTML_VALUE)",
      "parent_sha": "15c852066fd5aa9df6f6ecc202cc0ac1b1511d11"
    }
  },
  {
    "oid": "f3492d6a8c527ac8148a574f3dd8a422d090fd7c",
    "message": "Fix property name in JavaDoc and ConditionOutcome",
    "date": "2018-05-18T17:03:19Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/f3492d6a8c527ac8148a574f3dd8a422d090fd7c",
    "details": {
      "sha": "fad37970718989d3bcedb987bf179d68b8c7568d",
      "filename": "spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientEnabledCondition.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/f3492d6a8c527ac8148a574f3dd8a422d090fd7c/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fconfig%2FSpringBootAdminClientEnabledCondition.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/f3492d6a8c527ac8148a574f3dd8a422d090fd7c/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fconfig%2FSpringBootAdminClientEnabledCondition.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fconfig%2FSpringBootAdminClientEnabledCondition.java?ref=f3492d6a8c527ac8148a574f3dd8a422d090fd7c",
      "patch": "@@ -25,7 +25,7 @@\n \n /**\n  * This condition checks if the client should be enabled. Two properties are checked:\n- * spring.boot.admin.client.enabled and spring.boot.admin.url. The following table shows under which conditions the\n+ * spring.boot.admin.client.enabled and spring.boot.admin.client.url. The following table shows under which conditions the\n  * client is active.\n  * <pre>\n  *           | enabled: false | enabled: true (default) |\n@@ -48,7 +48,7 @@ public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeM\n \n         if (clientProperties.getUrl().length == 0) {\n             return ConditionOutcome.noMatch(\n-                \"Spring Boot Client is disabled, because 'spring.boot.admin.url' is empty.\");\n+                \"Spring Boot Client is disabled, because 'spring.boot.admin.client.url' is empty.\");\n         }\n \n         return ConditionOutcome.match();",
      "parent_sha": "105d79075a72bf71e633b126b57a01b66963fac3"
    }
  },
  {
    "oid": "d880eb85dc3633ab69c1d9e0f0680bfb196f9515",
    "message": "Fix typo",
    "date": "2017-03-20T05:13:19Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/d880eb85dc3633ab69c1d9e0f0680bfb196f9515",
    "details": {
      "sha": "badb0ffae51a0f701f86afc67b53a1e7a1d201ab",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/notify/PagerdutyNotifier.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/d880eb85dc3633ab69c1d9e0f0680bfb196f9515/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fnotify%2FPagerdutyNotifier.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/d880eb85dc3633ab69c1d9e0f0680bfb196f9515/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fnotify%2FPagerdutyNotifier.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fnotify%2FPagerdutyNotifier.java?ref=d880eb85dc3633ab69c1d9e0f0680bfb196f9515",
      "patch": "@@ -83,7 +83,7 @@ protected Map<String, Object> createPagerdutyEvent(ClientApplicationEvent event)\n \t\tresult.put(\"service_key\", serviceKey);\n \t\tresult.put(\"incident_key\",\n \t\t\t\tevent.getApplication().getName() + \"/\" + event.getApplication().getId());\n-\t\tresult.put(\"description\", getDescirption(event));\n+\t\tresult.put(\"description\", getDescription(event));\n \n \t\tMap<String, Object> details = getDetails(event);\n \t\tresult.put(\"details\", details);\n@@ -111,7 +111,7 @@ protected Map<String, Object> createPagerdutyEvent(ClientApplicationEvent event)\n \t\treturn result;\n \t}\n \n-\tprotected String getDescirption(ClientApplicationEvent event) {\n+\tprotected String getDescription(ClientApplicationEvent event) {\n \t\treturn description.getValue(event, String.class);\n \t}\n ",
      "parent_sha": "08746e55fdedd78a508c15f7ff608eb89ba14388"
    }
  },
  {
    "oid": "31537a4c4c06f6fc06e655aa2ba029b8f463574c",
    "message": "Restore Servlet 3.1 compatibility\n\nfixes #1387",
    "date": "2020-03-30T06:38:18Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/31537a4c4c06f6fc06e655aa2ba029b8f463574c",
    "details": {
      "sha": "b5ef0ac3d0b03bab75a9d24ee4bf05927c5892bb",
      "filename": "spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/servlet/HomepageForwardingFilter.java",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/31537a4c4c06f6fc06e655aa2ba029b8f463574c/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fweb%2Fservlet%2FHomepageForwardingFilter.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/31537a4c4c06f6fc06e655aa2ba029b8f463574c/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fweb%2Fservlet%2FHomepageForwardingFilter.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fweb%2Fservlet%2FHomepageForwardingFilter.java?ref=31537a4c4c06f6fc06e655aa2ba029b8f463574c",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2014-2019 the original author or authors.\n+ * Copyright 2014-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -21,6 +21,7 @@\n \n import javax.servlet.Filter;\n import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n import javax.servlet.ServletException;\n import javax.servlet.ServletRequest;\n import javax.servlet.ServletResponse;\n@@ -42,7 +43,6 @@\n  * history mode</a>\n  */\n public class HomepageForwardingFilter implements Filter {\n-\n \tprivate static final Logger log = LoggerFactory.getLogger(HomepageForwardingFilter.class);\n \n \tprivate final String homepage;\n@@ -72,4 +72,11 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n \t\tchain.doFilter(request, response);\n \t}\n \n+\t@Override\n+\tpublic void init(FilterConfig filterConfig) {\n+\t}\n+\n+\t@Override\n+\tpublic void destroy() {\n+\t}\n }",
      "parent_sha": "a567f29c6eb6815cee36664bde9e45bcee8fc831"
    }
  },
  {
    "oid": "1439f85d31ed17fa25244e6cc7a01a291391720e",
    "message": "Start the registration task independent of wether it's the main context\n\n...otherwise it won't play nice with the bootstrap context",
    "date": "2018-02-06T07:43:30Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/1439f85d31ed17fa25244e6cc7a01a291391720e",
    "details": {
      "sha": "941924bb37dbf123ec1b110ae365902073dba8cb",
      "filename": "spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/RegistrationApplicationListener.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/1439f85d31ed17fa25244e6cc7a01a291391720e/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FRegistrationApplicationListener.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/1439f85d31ed17fa25244e6cc7a01a291391720e/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FRegistrationApplicationListener.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FRegistrationApplicationListener.java?ref=1439f85d31ed17fa25244e6cc7a01a291391720e",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2014-2017 the original author or authors.\n+ * Copyright 2014-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -49,7 +49,7 @@ public RegistrationApplicationListener(ApplicationRegistrator registrator, TaskS\n     @EventListener\n     @Order(Ordered.LOWEST_PRECEDENCE)\n     public void onApplicationReady(ApplicationReadyEvent event) {\n-        if (event.getApplicationContext().getParent() == null && autoRegister) {\n+        if (autoRegister) {\n             startRegisterTask();\n         }\n     }",
      "parent_sha": "62c1ee44c3a2601055eb018d1f23bb3deac73614"
    }
  },
  {
    "oid": "3f1de78f41392cd8158e27f5704d73506a6e7cb5",
    "message": "Log with debug if application is known to be offline\n\nTo not pollute the log with warnings when an app is offline log the exception with\ndebug when the application status already was offline before the check. So only the\nfirst exception when the state changes to offline will be logged.\n\ncloses #125",
    "date": "2015-11-16T20:52:34Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/3f1de78f41392cd8158e27f5704d73506a6e7cb5",
    "details": {
      "sha": "2186d8040527002431b1c6075db2bd0444b559e4",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/registry/StatusUpdater.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/3f1de78f41392cd8158e27f5704d73506a6e7cb5/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fregistry%2FStatusUpdater.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/3f1de78f41392cd8158e27f5704d73506a6e7cb5/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fregistry%2FStatusUpdater.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fregistry%2FStatusUpdater.java?ref=3f1de78f41392cd8158e27f5704d73506a6e7cb5",
      "patch": "@@ -92,7 +92,11 @@ private StatusInfo queryStatus(Application application) {\n \t\t\t}\n \n \t\t} catch (Exception ex) {\n-\t\t\tLOGGER.warn(\"Couldn't retrieve status for {}\", application, ex);\n+\t\t\tif (\"OFFLINE\".equals(application.getStatusInfo().getStatus())) {\n+\t\t\t\tLOGGER.debug(\"Couldn't retrieve status for {}\", application, ex);\n+\t\t\t} else {\n+\t\t\t\tLOGGER.warn(\"Couldn't retrieve status for {}\", application, ex);\n+\t\t\t}\n \t\t\treturn StatusInfo.ofOffline();\n \t\t}\n \t}",
      "parent_sha": "440a342af6711fce8cddfdd5b8949c8eb04c4117"
    }
  },
  {
    "oid": "c9a103055e4f20671ed37840487a591aac932b2d",
    "message": "fix comment",
    "date": "2015-05-26T20:24:59Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/c9a103055e4f20671ed37840487a591aac932b2d",
    "details": {
      "sha": "162e92670db64f1d3a905333e7ffdb65ec3a74a1",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/registry/store/ApplicationStore.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/c9a103055e4f20671ed37840487a591aac932b2d/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fregistry%2Fstore%2FApplicationStore.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/c9a103055e4f20671ed37840487a591aac932b2d/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fregistry%2Fstore%2FApplicationStore.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fregistry%2Fstore%2FApplicationStore.java?ref=c9a103055e4f20671ed37840487a591aac932b2d",
      "patch": "@@ -25,7 +25,7 @@\n public interface ApplicationStore {\n \n \t/**\n-\t * Inserts a new Application into the store. If the Id is already present in the store the Application is NOT stored.\n+\t * Inserts a new Application into the store. If the Id is already present in the store the old Application is replaced.\n \t * \n \t * @param app Application to store\n \t * @return the Application associated previosly with the applications id.",
      "parent_sha": "7a9362d116733e57aa604b9e7f3f7a628d6d59e6"
    }
  },
  {
    "oid": "65b95047e820f90e65e7ba44553aa6c4192f3cf5",
    "message": "Polish test",
    "date": "2018-06-09T22:55:13Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/65b95047e820f90e65e7ba44553aa6c4192f3cf5",
    "details": {
      "sha": "91892d68ebdcea936ef7e5ca084b3c5626eac82f",
      "filename": "spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/StatusUpdaterTest.java",
      "status": "modified",
      "additions": 19,
      "deletions": 7,
      "changes": 26,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/65b95047e820f90e65e7ba44553aa6c4192f3cf5/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fservices%2FStatusUpdaterTest.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/65b95047e820f90e65e7ba44553aa6c4192f3cf5/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fservices%2FStatusUpdaterTest.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fservices%2FStatusUpdaterTest.java?ref=65b95047e820f90e65e7ba44553aa6c4192f3cf5",
      "patch": "@@ -25,6 +25,7 @@\n import de.codecentric.boot.admin.server.eventstore.ConcurrentMapEventStore;\n import de.codecentric.boot.admin.server.eventstore.InMemoryEventStore;\n import de.codecentric.boot.admin.server.web.client.InstanceWebClient;\n+import reactor.core.publisher.Mono;\n import reactor.test.StepVerifier;\n \n import java.time.Duration;\n@@ -36,8 +37,10 @@\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n import com.github.tomakehurst.wiremock.core.Options;\n+import com.github.tomakehurst.wiremock.http.Fault;\n import com.github.tomakehurst.wiremock.junit.WireMockClassRule;\n \n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n import static com.github.tomakehurst.wiremock.client.WireMock.get;\n import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n import static com.github.tomakehurst.wiremock.client.WireMock.okForContentType;\n@@ -66,7 +69,7 @@ public void setup() {\n         StepVerifier.create(repository.save(instance)).expectNextCount(1).verifyComplete();\n \n         updater = new StatusUpdater(repository,\n-            new InstanceWebClient(instance -> HttpHeaders.EMPTY, Duration.ofSeconds(5), Duration.ofSeconds(20)));\n+            new InstanceWebClient(instance -> HttpHeaders.EMPTY, Duration.ofSeconds(5), Duration.ofSeconds(10)));\n     }\n \n     @Test\n@@ -93,6 +96,16 @@ public void test_update_statusChanged() {\n         StepVerifier.create(repository.find(instance.getId()))\n                     .assertNext(app -> assertThat(app.getStatusInfo().getStatus()).isEqualTo(\"UP\"))\n                     .verifyComplete();\n+\n+        StepVerifier.create(\n+            repository.computeIfPresent(instance.getId(), (key, instance) -> Mono.just(instance.deregister())))\n+                    .then(() -> StepVerifier.create(updater.updateStatus(instance.getId())).verifyComplete())\n+                    .thenCancel()\n+                    .verify();\n+\n+        StepVerifier.create(repository.find(instance.getId()))\n+                    .assertNext(app -> assertThat(app.getStatusInfo().getStatus()).isEqualTo(\"UNKNOWN\"))\n+                    .verifyComplete();\n     }\n \n     @Test\n@@ -168,21 +181,20 @@ public void test_update_down_noBody() {\n \n     @Test\n     public void test_update_offline() {\n-        Instance offlineInstance = Instance.create(InstanceId.of(\"offline\"))\n-                                           .register(Registration.create(\"foo\", \"http://0.0.0.0/health\").build());\n-\n-        StepVerifier.create(repository.save(offlineInstance)).expectNextCount(1).verifyComplete();\n+        wireMock.stubFor(get(\"/health\").willReturn(aResponse().withFault(Fault.CONNECTION_RESET_BY_PEER)));\n \n         StepVerifier.create(eventStore)\n                     .expectSubscription()\n-                    .then(() -> StepVerifier.create(updater.updateStatus(offlineInstance.getId())).verifyComplete())\n+                    .then(() -> StepVerifier.create(updater.updateStatus(instance.getId())).verifyComplete())\n                     .assertNext(event -> assertThat(event).isInstanceOf(InstanceStatusChangedEvent.class))\n                     .thenCancel()\n                     .verify();\n \n-        StepVerifier.create(repository.find(offlineInstance.getId())).assertNext(app -> {\n+        StepVerifier.create(repository.find(instance.getId())).assertNext(app -> {\n             assertThat(app.getStatusInfo().getStatus()).isEqualTo(\"OFFLINE\");\n             assertThat(app.getStatusInfo().getDetails()).containsKeys(\"message\", \"exception\");\n         }).verifyComplete();\n+\n+        StepVerifier.create(updater.updateStatus(instance.getId())).verifyComplete();\n     }\n }",
      "parent_sha": "b7aa64ee867b72f74d1dae58750737bf2c69ee2c"
    }
  },
  {
    "oid": "e1017ad116d706df410e50d905afb5d747527154",
    "message": "Fix applications endpoint hang when there are more then 256 apps",
    "date": "2019-04-11T16:09:29Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/e1017ad116d706df410e50d905afb5d747527154",
    "details": {
      "sha": "58e33bd3a75a5a2bceb59ed8a1c16e8de3693280",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/ApplicationsController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/e1017ad116d706df410e50d905afb5d747527154/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2FApplicationsController.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/e1017ad116d706df410e50d905afb5d747527154/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2FApplicationsController.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2FApplicationsController.java?ref=e1017ad116d706df410e50d905afb5d747527154",
      "patch": "@@ -71,7 +71,7 @@ public Flux<Application> applications() {\n         return registry.getInstances()\n                        .filter(Instance::isRegistered)\n                        .groupBy(instance -> instance.getRegistration().getName())\n-                       .flatMap(grouped -> toApplication(grouped.key(), grouped));\n+                       .flatMap(grouped -> toApplication(grouped.key(), grouped), Integer.MAX_VALUE);\n     }\n \n ",
      "parent_sha": "c2707b93206605124d85ace8fbaf76e9065e03b8"
    }
  },
  {
    "oid": "c8be9561fd44ed323ff3707b4d5e94e7ab15f4fc",
    "message": "Use the SimpleClientHttpRequestFactory\n\nApparently when the Netty4ClientHttpRequestFactory is being used the content-\nlenght header is not being set in the POST request. Therefore the simple one is\nnow being hardcoded to override decetion by the RestTemplateBuilder.\n\nfixes #248",
    "date": "2016-08-26T12:29:20Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/c8be9561fd44ed323ff3707b4d5e94e7ab15f4fc",
    "details": {
      "sha": "d523d596f24b7925c72299418512c1e9d57f5c64",
      "filename": "spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/config/SpringBootAdminClientAutoConfiguration.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/c8be9561fd44ed323ff3707b4d5e94e7ab15f4fc/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FSpringBootAdminClientAutoConfiguration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/c8be9561fd44ed323ff3707b4d5e94e7ab15f4fc/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FSpringBootAdminClientAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FSpringBootAdminClientAutoConfiguration.java?ref=c8be9561fd44ed323ff3707b4d5e94e7ab15f4fc",
      "patch": "@@ -22,6 +22,7 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.http.client.SimpleClientHttpRequestFactory;\n import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n \n import de.codecentric.boot.admin.services.ApplicationRegistrator;\n@@ -48,7 +49,8 @@ public class SpringBootAdminClientAutoConfiguration {\n \t@ConditionalOnMissingBean\n \tpublic ApplicationRegistrator registrator() {\n \t\tRestTemplateBuilder builder = restTemplBuilder\n-\t\t\t\t.messageConverters(new MappingJackson2HttpMessageConverter());\n+\t\t\t\t.messageConverters(new MappingJackson2HttpMessageConverter())\n+\t\t\t\t.requestFactory(SimpleClientHttpRequestFactory.class);\n \t\tif (admin.getUsername() != null) {\n \t\t\tbuilder = builder.basicAuthorization(admin.getUsername(), admin.getPassword());\n \t\t}",
      "parent_sha": "99369f27aec0a9f625be8cca454fc526bda655d5"
    }
  },
  {
    "oid": "d322b0a4025334493e242a0fe06a946b51cebe97",
    "message": "Polish RevereseZuulProxyConfiguration",
    "date": "2016-11-06T14:06:04Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/d322b0a4025334493e242a0fe06a946b51cebe97",
    "details": {
      "sha": "57eb6794a01100752baf4e5da5cccb5aa2f56faf",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/RevereseZuulProxyConfiguration.java",
      "status": "modified",
      "additions": 11,
      "deletions": 12,
      "changes": 23,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/d322b0a4025334493e242a0fe06a946b51cebe97/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FRevereseZuulProxyConfiguration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/d322b0a4025334493e242a0fe06a946b51cebe97/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FRevereseZuulProxyConfiguration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FRevereseZuulProxyConfiguration.java?ref=d322b0a4025334493e242a0fe06a946b51cebe97",
      "patch": "@@ -59,8 +59,11 @@ public class RevereseZuulProxyConfiguration extends ZuulConfiguration {\n \t@Autowired\n \tprivate AdminServerProperties adminServer;\n \n-\t@Autowired\n-\tprivate ZuulHandlerMapping zuulHandlerMapping;\n+\t@Bean\n+\t@Primary\n+\tpublic CompositeRouteLocator compositeRouteLocator(List<RouteLocator> locators) {\n+\t\treturn new CompositeRouteLocator(locators);\n+\t}\n \n \t@Bean\n \t@Order(0)\n@@ -72,15 +75,11 @@ public ApplicationRouteLocator applicationRouteLocator() {\n \t\treturn routeLocator;\n \t}\n \n-\t@Bean\n-\t@Primary\n-\tpublic CompositeRouteLocator routeLocator(List<RouteLocator> locators) {\n-\t\treturn new CompositeRouteLocator(locators);\n-\t}\n-\n \t@Override\n+\t@Bean\n+\t@Order(-100)\n \tpublic RouteLocator routeLocator() {\n-\t\treturn null;\n+\t\treturn super.routeLocator();\n \t}\n \n \t@Bean\n@@ -102,8 +101,8 @@ public ProxyRequestHelper proxyRequestHelper() {\n \n \t// pre filters\n \t@Bean\n-\tpublic PreDecorationFilter preDecorationFilter() {\n-\t\treturn new PreDecorationFilter(routeLocator(), this.server.getServletPrefix(),\n+\tpublic PreDecorationFilter preDecorationFilter(RouteLocator routeLocator) {\n+\t\treturn new PreDecorationFilter(routeLocator, this.server.getServletPrefix(),\n \t\t\t\tzuulProperties, proxyRequestHelper());\n \t}\n \n@@ -120,7 +119,7 @@ public SendResponseFilter sendResponseFilter() {\n \t@Bean\n \t@Override\n \tpublic ApplicationListener<ApplicationEvent> zuulRefreshRoutesListener() {\n-\t\treturn new ZuulRefreshListener(zuulHandlerMapping);\n+\t\treturn new ZuulRefreshListener(zuulHandlerMapping(null));\n \t}\n \n \t@Configuration",
      "parent_sha": "d6c97130196862fa8a33899d45570223909107b7"
    }
  },
  {
    "oid": "1cc0586b644664253b584305d88951c9e9baeffb",
    "message": "Allow InstanceWebClient to be extended",
    "date": "2019-02-05T11:26:36Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/1cc0586b644664253b584305d88951c9e9baeffb",
    "details": {
      "sha": "d9095b6d9ce5ee2c2e4ca7231c2833c2e0878dc1",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/InstanceWebClient.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/1cc0586b644664253b584305d88951c9e9baeffb/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Fclient%2FInstanceWebClient.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/1cc0586b644664253b584305d88951c9e9baeffb/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Fclient%2FInstanceWebClient.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Fclient%2FInstanceWebClient.java?ref=1cc0586b644664253b584305d88951c9e9baeffb",
      "patch": "@@ -39,7 +39,7 @@\n public class InstanceWebClient {\n     private final WebClient webClient;\n \n-    private InstanceWebClient(WebClient webClient) {\n+    protected InstanceWebClient(WebClient webClient) {\n         this.webClient = webClient;\n     }\n ",
      "parent_sha": "d3fa70a197b5b0016021163e06f86ac4db1034a9"
    }
  },
  {
    "oid": "3dbea6bf14cea276122d8ef24d53409defae3263",
    "message": "Fix content-type parsing in SimleHostRoutingFilter\n\nPosting via zuul doesnt work in case the Content-Type has a charset\nspecified.\nApplied fix from spring-cloud/spring-cloud-netflix#1663\n\nfixes #403",
    "date": "2017-02-10T13:16:10Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/3dbea6bf14cea276122d8ef24d53409defae3263",
    "details": {
      "sha": "803f72ce0d4128a825de602e4c902c920772081c",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/zuul/filters/route/SimpleHostRoutingFilter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/3dbea6bf14cea276122d8ef24d53409defae3263/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fzuul%2Ffilters%2Froute%2FSimpleHostRoutingFilter.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/3dbea6bf14cea276122d8ef24d53409defae3263/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fzuul%2Ffilters%2Froute%2FSimpleHostRoutingFilter.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fzuul%2Ffilters%2Froute%2FSimpleHostRoutingFilter.java?ref=3dbea6bf14cea276122d8ef24d53409defae3263",
      "patch": "@@ -282,7 +282,7 @@ private CloseableHttpResponse forward(CloseableHttpClient httpclient, String ver\n \t\tint contentLength = request.getContentLength();\n \t\tInputStreamEntity entity = new InputStreamEntity(requestEntity, contentLength,\n \t\t\t\trequest.getContentType() != null\n-\t\t\t\t\t\t? ContentType.create(request.getContentType()) : null);\n+\t\t\t\t\t\t? ContentType.parse(request.getContentType()) : null);\n \t\tswitch (verb.toUpperCase()) {\n \t\tcase \"POST\":\n \t\t\tHttpPost httpPost = new HttpPost(uri + this.helper.getQueryString(params));",
      "parent_sha": "9ea178e41cc94f795515d40538e5595e3abea25a"
    }
  },
  {
    "oid": "5dd80067d4f9ce082b362da2bddb7326b25c2545",
    "message": "Bugfix #1845 (#1848)",
    "date": "2021-10-29T09:54:45Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/5dd80067d4f9ce082b362da2bddb7326b25c2545",
    "details": {
      "sha": "f2ba5b9b3c4ac759de4b9d307b99804ba7e7873d",
      "filename": "spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/config/AdminServerUiAutoConfiguration.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/5dd80067d4f9ce082b362da2bddb7326b25c2545/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fconfig%2FAdminServerUiAutoConfiguration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/5dd80067d4f9ce082b362da2bddb7326b25c2545/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fconfig%2FAdminServerUiAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fconfig%2FAdminServerUiAutoConfiguration.java?ref=5dd80067d4f9ce082b362da2bddb7326b25c2545",
      "patch": "@@ -132,8 +132,8 @@ public HomepageForwardingFilterConfig homepageForwardingFilterConfig() throws IO\n \t\t\t\t.scan(this.adminUi.getExtensionResourceLocations());\n \t\tList<String> routesIncludes = Stream.concat(DEFAULT_UI_ROUTES.stream(), extensionRoutes.stream())\n \t\t\t\t.map(this.adminServer::path).collect(Collectors.toList());\n-\t\tList<String> routesExcludes = Stream.concat(DEFAULT_UI_ROUTE_EXCLUDES.stream(), extensionRoutes.stream())\n-\t\t\t\t.map(this.adminServer::path).collect(Collectors.toList());\n+\t\tList<String> routesExcludes = DEFAULT_UI_ROUTE_EXCLUDES.stream().map(this.adminServer::path)\n+\t\t\t\t.collect(Collectors.toList());\n \n \t\treturn new HomepageForwardingFilterConfig(homepage, routesIncludes, routesExcludes);\n \t}",
      "parent_sha": "bd1b21e8e1e1a8c518311409a25123c69e8d933f"
    }
  },
  {
    "oid": "5dde24d3f63eac3125627e94d6859852e2d99f0d",
    "message": "Improved execution of grouped assertions (#1674)",
    "date": "2021-03-31T18:00:57Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/5dde24d3f63eac3125627e94d6859852e2d99f0d",
    "details": {
      "sha": "711be448360cfbb057449e2d12dffe32f8f058c0",
      "filename": "spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/registration/CloudFoundryApplicationFactoryTest.java",
      "status": "modified",
      "additions": 11,
      "deletions": 7,
      "changes": 18,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/5dde24d3f63eac3125627e94d6859852e2d99f0d/spring-boot-admin-client%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FCloudFoundryApplicationFactoryTest.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/5dde24d3f63eac3125627e94d6859852e2d99f0d/spring-boot-admin-client%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FCloudFoundryApplicationFactoryTest.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-client%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FCloudFoundryApplicationFactoryTest.java?ref=5dde24d3f63eac3125627e94d6859852e2d99f0d",
      "patch": "@@ -16,6 +16,7 @@\n \n package de.codecentric.boot.admin.client.registration;\n \n+import org.assertj.core.api.SoftAssertions;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;\n@@ -29,7 +30,6 @@\n \n import static java.util.Collections.singletonList;\n import static java.util.Collections.singletonMap;\n-import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n@@ -63,9 +63,11 @@ public void should_use_application_uri() {\n \n \t\tApplication app = this.factory.createApplication();\n \n-\t\tassertThat(app.getManagementUrl()).isEqualTo(\"http://application/Uppercase/actuator\");\n-\t\tassertThat(app.getHealthUrl()).isEqualTo(\"http://application/Uppercase/actuator/health\");\n-\t\tassertThat(app.getServiceUrl()).isEqualTo(\"http://application/Uppercase/\");\n+\t\tSoftAssertions softly = new SoftAssertions();\n+\t\tsoftly.assertThat(app.getManagementUrl()).isEqualTo(\"http://application/Uppercase/actuator\");\n+\t\tsoftly.assertThat(app.getHealthUrl()).isEqualTo(\"http://application/Uppercase/actuator/health\");\n+\t\tsoftly.assertThat(app.getServiceUrl()).isEqualTo(\"http://application/Uppercase/\");\n+\t\tsoftly.assertAll();\n \t}\n \n \t@Test\n@@ -76,9 +78,11 @@ public void should_use_service_base_uri() {\n \n \t\tApplication app = this.factory.createApplication();\n \n-\t\tassertThat(app.getManagementUrl()).isEqualTo(\"https://serviceBaseUrl/actuator\");\n-\t\tassertThat(app.getHealthUrl()).isEqualTo(\"https://serviceBaseUrl/actuator/health\");\n-\t\tassertThat(app.getServiceUrl()).isEqualTo(\"https://serviceBaseUrl/\");\n+\t\tSoftAssertions softly = new SoftAssertions();\n+\t\tsoftly.assertThat(app.getManagementUrl()).isEqualTo(\"https://serviceBaseUrl/actuator\");\n+\t\tsoftly.assertThat(app.getHealthUrl()).isEqualTo(\"https://serviceBaseUrl/actuator/health\");\n+\t\tsoftly.assertThat(app.getServiceUrl()).isEqualTo(\"https://serviceBaseUrl/\");\n+\t\tsoftly.assertAll();\n \t}\n \n }",
      "parent_sha": "260fe11e73f677d8e011ebc21893b4184d4afbfa"
    }
  },
  {
    "oid": "bed8c95ae6044bdecaf5fe4ca47ba597a8b6b5fd",
    "message": "changed constructor visibility from private to protected in order to be able to derive from Application",
    "date": "2015-08-19T17:05:37Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/bed8c95ae6044bdecaf5fe4ca47ba597a8b6b5fd",
    "details": {
      "sha": "3fc6610b3520ed2ee5db8af83fe83b8754b2b453",
      "filename": "spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/model/Application.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/bed8c95ae6044bdecaf5fe4ca47ba597a8b6b5fd/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fmodel%2FApplication.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/bed8c95ae6044bdecaf5fe4ca47ba597a8b6b5fd/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fmodel%2FApplication.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fmodel%2FApplication.java?ref=bed8c95ae6044bdecaf5fe4ca47ba597a8b6b5fd",
      "patch": "@@ -36,7 +36,7 @@ public class Application implements Serializable {\n \tprivate final String serviceUrl;\n \tprivate final StatusInfo statusInfo;\n \n-\tprivate Application(String healthUrl, String managementUrl,\n+\tprotected Application(String healthUrl, String managementUrl,\n \t\t\tString serviceUrl, String name, String id, StatusInfo statusInfo) {\n \t\tthis.healthUrl = healthUrl;\n \t\tthis.managementUrl = managementUrl;",
      "parent_sha": "3ef5c86faac2109d1c32c6fddc527fa8c3d9751d"
    }
  },
  {
    "oid": "1753dcb22da4424bb88645e3684e7155a144edcf",
    "message": "Improve the caching of request body when running in reactive mode \n\nalign with  org.springframework.http.codec.FormHttpMessageReader#readMono",
    "date": "2020-06-14T13:01:03Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/1753dcb22da4424bb88645e3684e7155a144edcf",
    "details": {
      "sha": "914d13d2e30d32e7bda715031cf804fb90202b08",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/reactive/InstancesProxyController.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/1753dcb22da4424bb88645e3684e7155a144edcf/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Freactive%2FInstancesProxyController.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/1753dcb22da4424bb88645e3684e7155a144edcf/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Freactive%2FInstancesProxyController.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Freactive%2FInstancesProxyController.java?ref=1753dcb22da4424bb88645e3684e7155a144edcf",
      "patch": "@@ -23,7 +23,6 @@\n import org.springframework.core.io.buffer.DataBufferFactory;\n import org.springframework.core.io.buffer.DataBufferUtils;\n import org.springframework.core.io.buffer.DefaultDataBufferFactory;\n-import org.springframework.core.io.buffer.PooledDataBuffer;\n import org.springframework.http.server.reactive.ServerHttpRequest;\n import org.springframework.http.server.reactive.ServerHttpResponse;\n import org.springframework.util.AntPathMatcher;\n@@ -102,8 +101,11 @@ public Flux<InstanceWebProxy.InstanceResponse> endpointProxy(\n \t\tURI uri = UriComponentsBuilder.fromPath(endpointLocalPath).query(request.getURI().getRawQuery()).build(true)\n \t\t\t\t.toUri();\n \n-\t\tFlux<DataBuffer> cachedBody = request.getBody().map((b) -> this.bufferFactory.wrap(b.asByteBuffer()))\n-\t\t\t\t.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release).cache();\n+\t\tFlux<DataBuffer> cachedBody = request.getBody().map((b) -> {\n+\t\t\tDataBuffer wrap = this.bufferFactory.wrap(b.asByteBuffer());\n+\t\t\tDataBufferUtils.release(b);\n+\t\t\treturn wrap;\n+\t\t}).cache();\n \n \t\treturn this.instanceWebProxy.forward(this.registry.getInstances(applicationName), uri, request.getMethod(),\n \t\t\t\tthis.httpHeadersFilter.filterHeaders(request.getHeaders()), BodyInserters.fromDataBuffers(cachedBody));",
      "parent_sha": "4f980c64563e6dd214cb01ef86fa95e372d084c6"
    }
  },
  {
    "oid": "1d0839e896e7e1166c2f9554614c2340f0bb2a88",
    "message": "Fix message for missing parameters when deleting filters\n\nThe parameters for DELETE /notifications/filters have been renamed while\nthe error message still used the old parameter names.",
    "date": "2019-02-24T14:54:22Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/1d0839e896e7e1166c2f9554614c2340f0bb2a88",
    "details": {
      "sha": "d9bd3f96a27c2dfee64d1b9c10b42465fd2ebc34",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/filter/web/NotificationFilterController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/1d0839e896e7e1166c2f9554614c2340f0bb2a88/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fnotify%2Ffilter%2Fweb%2FNotificationFilterController.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/1d0839e896e7e1166c2f9554614c2340f0bb2a88/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fnotify%2Ffilter%2Fweb%2FNotificationFilterController.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fnotify%2Ffilter%2Fweb%2FNotificationFilterController.java?ref=1d0839e896e7e1166c2f9554614c2340f0bb2a88",
      "patch": "@@ -63,7 +63,7 @@ public ResponseEntity<?> addFilter(@RequestParam(name = \"instanceId\", required =\n             filteringNotifier.addFilter(filter);\n             return ResponseEntity.ok(filter);\n         } else {\n-            return ResponseEntity.badRequest().body(\"Either 'id' or 'name' must be set\");\n+            return ResponseEntity.badRequest().body(\"Either 'instanceId' or 'applicationName' must be set\");\n         }\n     }\n ",
      "parent_sha": "b5b29b2c27074b30b5f91ac594a6672863a078b3"
    }
  },
  {
    "oid": "8ace426e48142b205c61a13ae0fc868e9cba48ac",
    "message": "Correct custom json deserializer's base class.\n\nIt's indended by the Jackson developers to extend StdDeserializer and\nnot the JsonDeserializer",
    "date": "2017-09-22T16:42:35Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/8ace426e48142b205c61a13ae0fc868e9cba48ac",
    "details": {
      "sha": "d9e48255927440030eb74a15a27989451dd2abba",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/Registration.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/8ace426e48142b205c61a13ae0fc868e9cba48ac/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fdomain%2Fvalues%2FRegistration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/8ace426e48142b205c61a13ae0fc868e9cba48ac/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fdomain%2Fvalues%2FRegistration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fdomain%2Fvalues%2FRegistration.java?ref=8ace426e48142b205c61a13ae0fc868e9cba48ac",
      "patch": "@@ -30,11 +30,11 @@\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.databind.DeserializationContext;\n-import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n /**\n@@ -139,7 +139,11 @@ private String sanitize(String key, String value) {\n         }\n     }\n \n-    public static class Deserializer extends JsonDeserializer<Registration> {\n+    public static class Deserializer extends StdDeserializer<Registration> {\n+        protected Deserializer() {\n+            super(Registration.class);\n+        }\n+\n         @Override\n         public Registration deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n             JsonNode node = p.readValueAsTree();",
      "parent_sha": "378348b938d2d67c57d7f5c934d171c7eeba2e03"
    }
  },
  {
    "oid": "01b09c55ab2b026b91075080651274dc74da03c7",
    "message": "chore(ApplicationRegistry): add missing tests for getStatus (#1970)",
    "date": "2022-01-31T13:25:35Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/01b09c55ab2b026b91075080651274dc74da03c7",
    "details": {
      "sha": "8bc295796db532068664dd19814dc5ca77a872dc",
      "filename": "spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/ApplicationRegistryTest.java",
      "status": "modified",
      "additions": 31,
      "deletions": 4,
      "changes": 35,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/01b09c55ab2b026b91075080651274dc74da03c7/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fservices%2FApplicationRegistryTest.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/01b09c55ab2b026b91075080651274dc74da03c7/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fservices%2FApplicationRegistryTest.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fservices%2FApplicationRegistryTest.java?ref=01b09c55ab2b026b91075080651274dc74da03c7",
      "patch": "@@ -22,6 +22,8 @@\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n import reactor.test.StepVerifier;\n@@ -31,6 +33,7 @@\n import de.codecentric.boot.admin.server.domain.values.BuildVersion;\n import de.codecentric.boot.admin.server.domain.values.InstanceId;\n import de.codecentric.boot.admin.server.domain.values.Registration;\n+import de.codecentric.boot.admin.server.domain.values.StatusInfo;\n import de.codecentric.boot.admin.server.eventstore.InstanceEventPublisher;\n \n import static org.assertj.core.api.Assertions.assertThat;\n@@ -43,15 +46,13 @@ public class ApplicationRegistryTest {\n \n \tprivate InstanceRegistry instanceRegistry;\n \n-\tprivate InstanceEventPublisher instanceEventPublisher;\n-\n \tprivate ApplicationRegistry applicationRegistry;\n \n \t@BeforeEach\n \tpublic void setUp() {\n \t\tthis.instanceRegistry = mock(InstanceRegistry.class);\n-\t\tthis.instanceEventPublisher = mock(InstanceEventPublisher.class);\n-\t\tthis.applicationRegistry = new ApplicationRegistry(this.instanceRegistry, this.instanceEventPublisher);\n+\t\tInstanceEventPublisher instanceEventPublisher = mock(InstanceEventPublisher.class);\n+\t\tthis.applicationRegistry = new ApplicationRegistry(this.instanceRegistry, instanceEventPublisher);\n \t}\n \n \t@Test\n@@ -149,6 +150,32 @@ public void getBuildVersion() {\n \t\t\t\t.isEqualTo(BuildVersion.valueOf(\"0.1 ... 0.2\"));\n \t}\n \n+\t@ParameterizedTest\n+\t@CsvSource({\n+\t\t\"UP, UP, UP\",\n+\t\t\"DOWN, DOWN, DOWN\",\n+\t\t\"UNKNOWN, UNKNOWN, UNKNOWN\",\n+\t\t\"UP, DOWN, RESTRICTED\",\n+\t\t\"UP, UNKNOWN, RESTRICTED\",\n+\t\t\"UP, OUT_OF_SERVICE, RESTRICTED\",\n+\t\t\"UP, OFFLINE, RESTRICTED\",\n+\t\t\"UP, RESTRICTED, RESTRICTED\",\n+\t\t\"DOWN, UP, RESTRICTED\"\n+\t})\n+\tpublic void getStatus(String instance1Status, String instance2Status, String expectedApplicationStatus) {\n+\t\tInstance instance1 = getInstance(\"App1\").withStatusInfo(StatusInfo.valueOf(instance1Status));\n+\t\tInstance instance2 = getInstance(\"App1\").withStatusInfo(StatusInfo.valueOf(instance2Status));\n+\n+\t\twhen(this.instanceRegistry.getInstances()).thenReturn(Flux.just(instance1, instance2));\n+\n+\t\tStepVerifier.create(this.applicationRegistry.getApplications())\n+\t\t\t.recordWith(ArrayList::new)\n+\t\t\t.thenConsumeWhile((a) -> true)\n+\t\t\t.consumeRecordedWith((applications) -> assertThat(applications.stream().map(Application::getStatus))\n+\t\t\t\t.containsExactly(expectedApplicationStatus))\n+\t\t\t.verifyComplete();\n+\t}\n+\n \tprivate Instance getInstance(String applicationName, String version) {\n \t\tRegistration registration = Registration.create(applicationName, \"http://localhost:8080/health\")\n \t\t\t\t.metadata(\"version\", version).build();",
      "parent_sha": "50d702596eb3328dd9c75175425624588606dc72"
    }
  },
  {
    "oid": "46bd004e88fa95878cd3b632306be75aaf1ec733",
    "message": "Fix error in creating RestTemplate\n\nThe RestTamplateBuilder doesn't save the arguments, it returns a new Builder instance, with the saved arguments. So you have to save the builder everytime you call a function on it.",
    "date": "2016-08-10T16:04:25Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/46bd004e88fa95878cd3b632306be75aaf1ec733",
    "details": {
      "sha": "5757076f674729a06ff9507ebafbc7c5632873a5",
      "filename": "spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/config/SpringBootAdminClientAutoConfiguration.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/46bd004e88fa95878cd3b632306be75aaf1ec733/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FSpringBootAdminClientAutoConfiguration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/46bd004e88fa95878cd3b632306be75aaf1ec733/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FSpringBootAdminClientAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FSpringBootAdminClientAutoConfiguration.java?ref=46bd004e88fa95878cd3b632306be75aaf1ec733",
      "patch": "@@ -47,9 +47,9 @@ public class SpringBootAdminClientAutoConfiguration {\n \t@Bean\n \t@ConditionalOnMissingBean\n \tpublic ApplicationRegistrator registrator() {\n-\t\tbuilder.messageConverters(new MappingJackson2HttpMessageConverter());\n+\t\tbuilder = builder.messageConverters(new MappingJackson2HttpMessageConverter());\n \t\tif (admin.getUsername() != null) {\n-\t\t\tbuilder.basicAuthorization(admin.getUsername(), admin.getPassword());\n+\t\t\tbuilder = builder.basicAuthorization(admin.getUsername(), admin.getPassword());\n \t\t}\n \t\treturn new ApplicationRegistrator(builder.build(), admin, client);\n \t}",
      "parent_sha": "848d77bf1b6701b8116f4a40f45e0fad2009e452"
    }
  },
  {
    "oid": "3b408e05d923c7cc49e61776dcbfccdfdd21385d",
    "message": "Fix log info of registration task\n\nCo-authored-by: zhouhaojie <zhouhaojie@iboxpay.com>",
    "date": "2020-09-02T16:51:53Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/3b408e05d923c7cc49e61776dcbfccdfdd21385d",
    "details": {
      "sha": "9aa4f678752ca597355ddae795c0efba97cb33c3",
      "filename": "spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/RegistrationApplicationListener.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/3b408e05d923c7cc49e61776dcbfccdfdd21385d/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FRegistrationApplicationListener.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/3b408e05d923c7cc49e61776dcbfccdfdd21385d/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FRegistrationApplicationListener.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FRegistrationApplicationListener.java?ref=3b408e05d923c7cc49e61776dcbfccdfdd21385d",
      "patch": "@@ -99,7 +99,7 @@ public void startRegisterTask() {\n \t\t}\n \n \t\tscheduledTask = taskScheduler.scheduleAtFixedRate(registrator::register, registerPeriod);\n-\t\tLOGGER.debug(\"Scheduled registration task for every {}s\", registerPeriod.getSeconds());\n+\t\tLOGGER.debug(\"Scheduled registration task for every {}ms\", registerPeriod.toMillis());\n \t}\n \n \tpublic void stopRegisterTask() {",
      "parent_sha": "2d8bc2e37c2e2e80ea85037494410539e45b1187"
    }
  },
  {
    "oid": "13f5726873ed92ee3c85777005f0b57bd360b81e",
    "message": "increase timeouts in tests",
    "date": "2021-01-29T08:58:30Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/13f5726873ed92ee3c85777005f0b57bd360b81e",
    "details": {
      "sha": "6911039c46b650bef31c060667d35aaf9542567d",
      "filename": "spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/web/reactive/InstancesProxyControllerIntegrationTest.java",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/13f5726873ed92ee3c85777005f0b57bd360b81e/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Freactive%2FInstancesProxyControllerIntegrationTest.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/13f5726873ed92ee3c85777005f0b57bd360b81e/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Freactive%2FInstancesProxyControllerIntegrationTest.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Freactive%2FInstancesProxyControllerIntegrationTest.java?ref=13f5726873ed92ee3c85777005f0b57bd360b81e",
      "patch": "@@ -19,6 +19,7 @@\n import javax.annotation.Nullable;\n \n import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.BeforeEach;\n import org.springframework.boot.WebApplicationType;\n import org.springframework.boot.builder.SpringApplicationBuilder;\n@@ -27,16 +28,26 @@\n import de.codecentric.boot.admin.server.AdminReactiveApplicationTest;\n import de.codecentric.boot.admin.server.web.AbstractInstancesProxyControllerIntegrationTest;\n \n+import reactor.test.StepVerifier;\n+\n+import java.time.Duration;\n+\n public class InstancesProxyControllerIntegrationTest extends AbstractInstancesProxyControllerIntegrationTest {\n \n \t@Nullable\n \tprivate static ConfigurableApplicationContext context;\n \n+\n+\t@BeforeAll\n+\tpublic static void setUp() {\n+\t\tStepVerifier.setDefaultTimeout(Duration.ofSeconds(60));\n+\t}\n+\n \t@BeforeEach\n \tpublic void setUpClient() {\n \t\tcontext = new SpringApplicationBuilder().sources(AdminReactiveApplicationTest.TestAdminApplication.class)\n \t\t\t\t.web(WebApplicationType.REACTIVE)\n-\t\t\t\t.run(\"--server.port=0\", \"--spring.boot.admin.monitor.default-timeout=5000\");\n+\t\t\t\t.run(\"--server.port=0\", \"--spring.boot.admin.monitor.default-timeout=2500\");\n \n \t\tsuper.setUpClient(context);\n \t}",
      "parent_sha": "f976334d2cc2a03a446e5acf2c79ea1229758d65"
    }
  },
  {
    "oid": "bb906045b9b129e794d208cce3a3693c4e1f22b6",
    "message": "Use application/javascript",
    "date": "2019-06-17T07:22:24Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/bb906045b9b129e794d208cce3a3693c4e1f22b6",
    "details": {
      "sha": "d00b31839039457dba96840faca7672debf732a8",
      "filename": "spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/web/UiController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/bb906045b9b129e794d208cce3a3693c4e1f22b6/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fweb%2FUiController.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/bb906045b9b129e794d208cce3a3693c4e1f22b6/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fweb%2FUiController.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fweb%2FUiController.java?ref=bb906045b9b129e794d208cce3a3693c4e1f22b6",
      "patch": "@@ -100,7 +100,7 @@ public String index() {\n         return \"index\";\n     }\n \n-    @GetMapping(path = \"/sba-settings.js\", produces = \"text/javascript\")\n+    @GetMapping(path = \"/sba-settings.js\", produces = \"application/javascript\")\n     public String sbaSettings() {\n         return \"sba-settings.js\";\n     }",
      "parent_sha": "8abc0d57cab9d1607e5a5a69b5533c0e3dc5386d"
    }
  },
  {
    "oid": "a307b36afb516ab57e6ec46cb516a7994200feea",
    "message": "Switch to WebApplicationContextRunner in customBlockingClientInBlockingEnvironment.",
    "date": "2022-03-18T08:22:31Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/a307b36afb516ab57e6ec46cb516a7994200feea",
    "details": {
      "sha": "b6e14ac8221839b0c931373239ad7508d022ad10",
      "filename": "spring-boot-admin-client/src/test/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientAutoConfigurationTest.java",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/a307b36afb516ab57e6ec46cb516a7994200feea/spring-boot-admin-client%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fconfig%2FSpringBootAdminClientAutoConfigurationTest.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/a307b36afb516ab57e6ec46cb516a7994200feea/spring-boot-admin-client%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fconfig%2FSpringBootAdminClientAutoConfigurationTest.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-client%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fconfig%2FSpringBootAdminClientAutoConfigurationTest.java?ref=a307b36afb516ab57e6ec46cb516a7994200feea",
      "patch": "@@ -88,6 +88,7 @@ public void customBlockingClientInReactiveEnvironment() {\n \t\t\t\t.withConfiguration(UserConfigurations.of(CustomBlockingConfiguration.class)).withConfiguration(\n \t\t\t\t\t\tAutoConfigurations.of(EndpointAutoConfiguration.class, WebEndpointAutoConfiguration.class,\n \t\t\t\t\t\t\t\tWebClientAutoConfiguration.class, SpringBootAdminClientAutoConfiguration.class));\n+\n \t\treactiveContextRunner.withPropertyValues(\"spring.boot.admin.client.url:http://localhost:8081\")\n \t\t\t\t.run((context) -> {\n \t\t\t\t\tassertThat(context).hasSingleBean(ApplicationRegistrator.class);\n@@ -98,11 +99,13 @@ public void customBlockingClientInReactiveEnvironment() {\n \n \t@Test\n \tpublic void customBlockingClientInBlockingEnvironment() {\n-\t\tReactiveWebApplicationContextRunner reactiveContextRunner = new ReactiveWebApplicationContextRunner()\n-\t\t\t\t.withConfiguration(UserConfigurations.of(CustomBlockingConfiguration.class)).withConfiguration(\n-\t\t\t\t\t\tAutoConfigurations.of(EndpointAutoConfiguration.class, WebEndpointAutoConfiguration.class,\n-\t\t\t\t\t\t\t\tRestTemplateAutoConfiguration.class, SpringBootAdminClientAutoConfiguration.class));\n-\t\treactiveContextRunner.withPropertyValues(\"spring.boot.admin.client.url:http://localhost:8081\")\n+\t\tWebApplicationContextRunner webApplicationContextRunner = new WebApplicationContextRunner()\n+\t\t\t\t.withConfiguration(UserConfigurations.of(CustomBlockingConfiguration.class))\n+\t\t\t\t.withConfiguration(AutoConfigurations.of(EndpointAutoConfiguration.class,\n+\t\t\t\t\t\tWebEndpointAutoConfiguration.class, DispatcherServletAutoConfiguration.class,\n+\t\t\t\t\t\tRestTemplateAutoConfiguration.class, SpringBootAdminClientAutoConfiguration.class));\n+\n+\t\twebApplicationContextRunner.withPropertyValues(\"spring.boot.admin.client.url:http://localhost:8081\")\n \t\t\t\t.run((context) -> {\n \t\t\t\t\tassertThat(context).hasSingleBean(ApplicationRegistrator.class);\n \t\t\t\t\tassertThat(context).getBean(\"registrationClient\")",
      "parent_sha": "81eb97bca46797b72a0b02bb20a456e8693131f7"
    }
  },
  {
    "oid": "83b369ae30d9febb849af8f27fcb34c632f6047a",
    "message": "change deprecated rawStatusCode() method, already removed from spring (#2821)",
    "date": "2023-10-17T12:57:13Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/83b369ae30d9febb849af8f27fcb34c632f6047a",
    "details": {
      "sha": "efec27e1c8a291ba41bc13ade6acb75747deba7a",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/endpoints/ProbeEndpointsStrategy.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/83b369ae30d9febb849af8f27fcb34c632f6047a/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fservices%2Fendpoints%2FProbeEndpointsStrategy.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/83b369ae30d9febb849af8f27fcb34c632f6047a/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fservices%2Fendpoints%2FProbeEndpointsStrategy.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fservices%2Fendpoints%2FProbeEndpointsStrategy.java?ref=83b369ae30d9febb849af8f27fcb34c632f6047a",
      "patch": "@@ -97,7 +97,7 @@ protected Function<ClientResponse, Mono<DetectedEndpoint>> convert(InstanceId in\n \t\t\t}\n \t\t\telse {\n \t\t\t\tlog.debug(\"Endpoint probe for instance {} on endpoint '{}' failed with status {}.\", instanceId, uri,\n-\t\t\t\t\t\tresponse.rawStatusCode());\n+\t\t\t\t\t\tresponse.statusCode().value());\n \t\t\t}\n \t\t\treturn response.releaseBody().then(endpoint);\n \t\t};",
      "parent_sha": "72ea166a9e7b995d390c43dadb9337277b4fdda2"
    }
  },
  {
    "oid": "2d8bc2e37c2e2e80ea85037494410539e45b1187",
    "message": "Fix log message of startRegisterTask\n\nCo-authored-by: zhouhaojie <zhouhaojie@iboxpay.com>",
    "date": "2020-09-02T09:22:02Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/2d8bc2e37c2e2e80ea85037494410539e45b1187",
    "details": {
      "sha": "5e80cc862571b56307de877c5b83e5ecf8020994",
      "filename": "spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/RegistrationApplicationListener.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/2d8bc2e37c2e2e80ea85037494410539e45b1187/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FRegistrationApplicationListener.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/2d8bc2e37c2e2e80ea85037494410539e45b1187/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FRegistrationApplicationListener.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FRegistrationApplicationListener.java?ref=2d8bc2e37c2e2e80ea85037494410539e45b1187",
      "patch": "@@ -99,7 +99,7 @@ public void startRegisterTask() {\n \t\t}\n \n \t\tscheduledTask = taskScheduler.scheduleAtFixedRate(registrator::register, registerPeriod);\n-\t\tLOGGER.debug(\"Scheduled registration task for every {}ms\", registerPeriod);\n+\t\tLOGGER.debug(\"Scheduled registration task for every {}s\", registerPeriod.getSeconds());\n \t}\n \n \tpublic void stopRegisterTask() {",
      "parent_sha": "d4b1c2d2969532894d4097b159a5a1b2785de325"
    }
  },
  {
    "oid": "0bd7eee3cd2c0ba5c6a4ef453e376309a539214a",
    "message": "polish",
    "date": "2015-08-24T19:28:12Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/0bd7eee3cd2c0ba5c6a4ef453e376309a539214a",
    "details": {
      "sha": "5df88701168728f3a026f2715c01898da078aebd",
      "filename": "spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/config/SpringBootAdminClientAutoConfiguration.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/0bd7eee3cd2c0ba5c6a4ef453e376309a539214a/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FSpringBootAdminClientAutoConfiguration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/0bd7eee3cd2c0ba5c6a4ef453e376309a539214a/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FSpringBootAdminClientAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FSpringBootAdminClientAutoConfiguration.java?ref=0bd7eee3cd2c0ba5c6a4ef453e376309a539214a",
      "patch": "@@ -90,8 +90,8 @@ public void run() {\n \t\t * ApplicationListener triggering registration after refresh/shutdown\n \t\t */\n \t\t@Bean\n-\t\tpublic RegistrationApplicationListener registrationListener(final ApplicationRegistrator registrator,\n-\t\t\t\tfinal AdminProperties admin) {\n+\t\tpublic RegistrationApplicationListener registrationListener(\n+\t\t\t\tApplicationRegistrator registrator, AdminProperties admin) {\n \t\t\treturn new RegistrationApplicationListener(admin, registrator);\n \t\t}\n ",
      "parent_sha": "bfa1fe6b37e743f25447959a4ad34ee00cb3f947"
    }
  },
  {
    "oid": "7c3130b4453f56a1a22348b5d27a3efecbe46791",
    "message": "Log subsequent registration errors on DEBUG level\n\nIn order to reduce the noise in the application log, only the first\nfailure when registering is logged on the WARN level. All further\nattempts are logged using the DEBUG level.\n\ncloses #490",
    "date": "2017-07-24T16:23:30Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/7c3130b4453f56a1a22348b5d27a3efecbe46791",
    "details": {
      "sha": "817e2899e043be3e5676cfc2653be0a72a664193",
      "filename": "spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/client/registration/ApplicationRegistrator.java",
      "status": "modified",
      "additions": 102,
      "deletions": 88,
      "changes": 190,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/7c3130b4453f56a1a22348b5d27a3efecbe46791/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FApplicationRegistrator.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/7c3130b4453f56a1a22348b5d27a3efecbe46791/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FApplicationRegistrator.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-starter-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FApplicationRegistrator.java?ref=7c3130b4453f56a1a22348b5d27a3efecbe46791",
      "patch": "@@ -1,11 +1,11 @@\n /*\n- * Copyright 2014 the original author or authors.\n+ * Copyright 2014-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -15,10 +15,12 @@\n  */\n package de.codecentric.boot.admin.client.registration;\n \n+import de.codecentric.boot.admin.client.config.AdminProperties;\n+\n import java.util.Collections;\n import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicReference;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpEntity;\n@@ -28,101 +30,113 @@\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.client.RestTemplate;\n \n-import de.codecentric.boot.admin.client.config.AdminProperties;\n-\n /**\n  * Registers the client application at spring-boot-admin-server\n  */\n public class ApplicationRegistrator {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ApplicationRegistrator.class);\n+    private static final HttpHeaders HTTP_HEADERS = createHttpHeaders();\n+    private final AtomicInteger unsuccessfulAttempts = new AtomicInteger(0);\n+    private final AtomicReference<String> registeredId = new AtomicReference<>();\n+    private final AdminProperties admin;\n+    private final RestTemplate template;\n+    private final ApplicationFactory applicationFactory;\n \n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ApplicationRegistrator.class);\n-\tprivate static final HttpHeaders HTTP_HEADERS = createHttpHeaders();\n-\tprivate final AtomicReference<String> registeredId = new AtomicReference<>();\n-\tprivate final AdminProperties admin;\n-\tprivate final RestTemplate template;\n-\tprivate final ApplicationFactory applicationFactory;\n-\n-\tpublic ApplicationRegistrator(RestTemplate template, AdminProperties admin, ApplicationFactory applicationFactory) {\n-\t\tthis.admin = admin;\n-\t\tthis.template = template;\n-\t\tthis.applicationFactory = applicationFactory;\n-\t}\n+    public ApplicationRegistrator(RestTemplate template, AdminProperties admin, ApplicationFactory applicationFactory) {\n+        this.admin = admin;\n+        this.template = template;\n+        this.applicationFactory = applicationFactory;\n+    }\n \n-\tprivate static HttpHeaders createHttpHeaders() {\n-\t\tHttpHeaders headers = new HttpHeaders();\n-\t\theaders.setContentType(MediaType.APPLICATION_JSON);\n-\t\theaders.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n-\t\treturn HttpHeaders.readOnlyHttpHeaders(headers);\n-\t}\n+    private static HttpHeaders createHttpHeaders() {\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.setContentType(MediaType.APPLICATION_JSON);\n+        headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+        return HttpHeaders.readOnlyHttpHeaders(headers);\n+    }\n \n-\t/**\n-\t * Registers the client application at spring-boot-admin-server.\n-\t *\n-\t * @return true if successful registration on at least one admin server\n-\t */\n-\tpublic boolean register() {\n-\t\tboolean isRegistrationSuccessful = false;\n-\t\tApplication self = createApplication();\n-\t\tfor (String adminUrl : admin.getAdminUrl()) {\n-\t\t\ttry {\n-\t\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\t\tResponseEntity<Map> response = template.postForEntity(adminUrl,\n-\t\t\t\t\t\tnew HttpEntity<>(self, HTTP_HEADERS), Map.class);\n+    /**\n+     * Registers the client application at spring-boot-admin-server.\n+     *\n+     * @return true if successful registration on at least one admin server\n+     */\n+    public boolean register() {\n+        boolean isRegistrationSuccessful = false;\n+        Application self = createApplication();\n+        for (String adminUrl : admin.getAdminUrl()) {\n+            try {\n+                @SuppressWarnings(\"rawtypes\") ResponseEntity<Map> response = template.postForEntity(adminUrl,\n+                        new HttpEntity<>(self, HTTP_HEADERS), Map.class);\n \n-\t\t\t\tif (response.getStatusCode().equals(HttpStatus.CREATED)) {\n-\t\t\t\t\tif (registeredId.compareAndSet(null, response.getBody().get(\"id\").toString())) {\n-\t\t\t\t\t\tLOGGER.info(\"Application registered itself as {}\", response.getBody());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tLOGGER.debug(\"Application refreshed itself as {}\", response.getBody());\n-\t\t\t\t\t}\n+                if (response.getStatusCode().equals(HttpStatus.CREATED)) {\n+                    if (registeredId.compareAndSet(null, response.getBody().get(\"id\").toString())) {\n+                        LOGGER.info(\"Application registered itself as {}\", response.getBody());\n+                    } else {\n+                        LOGGER.debug(\"Application refreshed itself as {}\", response.getBody());\n+                    }\n \n-\t\t\t\t\tisRegistrationSuccessful = true;\n-\t\t\t\t\tif (admin.isRegisterOnce()) {\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tLOGGER.warn(\"Application failed to registered itself as {}. Response: {}\", self,\n-\t\t\t\t\t\t\tresponse.toString());\n-\t\t\t\t}\n-\t\t\t} catch (Exception ex) {\n-\t\t\t\tLOGGER.warn(\"Failed to register application as {} at spring-boot-admin ({}): {}\",\n-\t\t\t\t\t\tself, admin.getAdminUrl(), ex.getMessage());\n-\t\t\t}\n-\t\t}\n+                    isRegistrationSuccessful = true;\n+                    if (admin.isRegisterOnce()) {\n+                        break;\n+                    }\n+                } else {\n+                    if (unsuccessfulAttempts.get() == 0) {\n+                        LOGGER.warn(\n+                                \"Application failed to registered itself as {}. Response: {}. Further attempts are logged on DEBUG level\",\n+                                self, response.toString());\n+                    } else {\n+                        LOGGER.debug(\"Application failed to registered itself as {}. Response: {}\", self,\n+                                response.toString());\n+                    }\n+                }\n+            } catch (Exception ex) {\n+                if (unsuccessfulAttempts.get() == 0) {\n+                    LOGGER.warn(\n+                            \"Failed to register application as {} at spring-boot-admin ({}): {}. Further attempts are logged on DEBUG level\",\n+                            self, admin.getAdminUrl(), ex.getMessage());\n+                } else {\n+                    LOGGER.debug(\"Failed to register application as {} at spring-boot-admin ({}): {}\", self,\n+                            admin.getAdminUrl(), ex.getMessage());\n+                }\n+            }\n+        }\n+        if (!isRegistrationSuccessful) {\n+            unsuccessfulAttempts.incrementAndGet();\n+        } else {\n+            unsuccessfulAttempts.set(0);\n+        }\n+        return isRegistrationSuccessful;\n+    }\n \n-\t\treturn isRegistrationSuccessful;\n-\t}\n+    public void deregister() {\n+        String id = registeredId.get();\n+        if (id != null) {\n+            for (String adminUrl : admin.getAdminUrl()) {\n+                try {\n+                    template.delete(adminUrl + \"/\" + id);\n+                    registeredId.compareAndSet(id, null);\n+                    if (admin.isRegisterOnce()) {\n+                        break;\n+                    }\n+                } catch (Exception ex) {\n+                    LOGGER.warn(\"Failed to deregister application (id={}) at spring-boot-admin ({}): {}\", id, adminUrl,\n+                            ex.getMessage());\n+                }\n+            }\n+        }\n+    }\n \n-\tpublic void deregister() {\n-\t\tString id = registeredId.get();\n-\t\tif (id != null) {\n-\t\t\tfor (String adminUrl : admin.getAdminUrl()) {\n-\t\t\t\ttry {\n-\t\t\t\t\ttemplate.delete(adminUrl + \"/\" + id);\n-\t\t\t\t\tregisteredId.compareAndSet(id, null);\n-\t\t\t\t\tif (admin.isRegisterOnce()) {\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t} catch (Exception ex) {\n-\t\t\t\t\tLOGGER.warn(\n-\t\t\t\t\t\t\t\"Failed to deregister application (id={}) at spring-boot-admin ({}): {}\",\n-\t\t\t\t\t\t\tid, adminUrl, ex.getMessage());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t\n-\t/**\n-\t * Returns the id of this client as given by the admin server.\n-\t * Returns null if the client has not registered against the admin server yet.\n-\t *\n-\t * @return\n-\t */\n-\tpublic String getRegisteredId() {\n-\t\treturn registeredId.get();\n-\t}\n+    /**\n+     * Returns the id of this client as given by the admin server.\n+     * Returns null if the client has not registered against the admin server yet.\n+     *\n+     * @return\n+     */\n+    public String getRegisteredId() {\n+        return registeredId.get();\n+    }\n \n-\tprotected Application createApplication() {\n-\t\treturn applicationFactory.createApplication();\n-\t}\n+    protected Application createApplication() {\n+        return applicationFactory.createApplication();\n+    }\n }",
      "parent_sha": "2848a637f19eff2cde483d70ae8617b2c020d892"
    }
  },
  {
    "oid": "ad48e8ffeb4a71a6b4daeb52f205d1e9bab861b2",
    "message": "Less verbose info logging for finding routes",
    "date": "2015-11-17T07:10:57Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/ad48e8ffeb4a71a6b4daeb52f205d1e9bab861b2",
    "details": {
      "sha": "0aec15feb93e606268d5f9ac317816345306204f",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/zuul/ApplicationRouteLocator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/ad48e8ffeb4a71a6b4daeb52f205d1e9bab861b2/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fzuul%2FApplicationRouteLocator.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/ad48e8ffeb4a71a6b4daeb52f205d1e9bab861b2/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fzuul%2FApplicationRouteLocator.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fzuul%2FApplicationRouteLocator.java?ref=ad48e8ffeb4a71a6b4daeb52f205d1e9bab861b2",
      "patch": "@@ -76,7 +76,7 @@ private void addRoute(LinkedHashMap<String, ZuulRoute> locateRoutes, String path\n \t}\n \n \tpublic ProxyRouteSpec getMatchingRoute(String path) {\n-\t\tLOGGER.info(\"Finding route for path: {}\", path);\n+\t\tLOGGER.debug(\"Finding route for path: {}\", path);\n \t\tLOGGER.debug(\"servletPath={}\", this.servletPath);\n \t\tif (StringUtils.hasText(this.servletPath) && !this.servletPath.equals(\"/\")\n \t\t\t\t&& path.startsWith(this.servletPath)) {",
      "parent_sha": "3f1de78f41392cd8158e27f5704d73506a6e7cb5"
    }
  },
  {
    "oid": "d8ea3ae43c669deb390bf113ada22e877bc99f92",
    "message": "fix unstable tests",
    "date": "2018-03-09T22:30:10Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/d8ea3ae43c669deb390bf113ada22e877bc99f92",
    "details": {
      "sha": "3d17a0dc84f18121ebfbca5a1122e10c80211e5e",
      "filename": "spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/config/AdminServerNotifierAutoConfigurationTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/d8ea3ae43c669deb390bf113ada22e877bc99f92/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fconfig%2FAdminServerNotifierAutoConfigurationTest.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/d8ea3ae43c669deb390bf113ada22e877bc99f92/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fconfig%2FAdminServerNotifierAutoConfigurationTest.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fconfig%2FAdminServerNotifierAutoConfigurationTest.java?ref=d8ea3ae43c669deb390bf113ada22e877bc99f92",
      "patch": "@@ -63,17 +63,18 @@ public void close() {\n     }\n \n     @Test\n-    public void test_notifierListener() {\n+    public void test_notifierListener() throws InterruptedException {\n         load(TestSingleNotifierConfig.class);\n         InstanceEventStore store = context.getBean(InstanceEventStore.class);\n \n         StepVerifier.create(store)\n                     .expectSubscription()\n                     .then(() -> StepVerifier.create(store.append(Collections.singletonList(APP_DOWN))).verifyComplete())\n                     .expectNext(APP_DOWN)\n-                    .then(() -> assertThat(context.getBean(TestNotifier.class).getEvents()).containsOnly(APP_DOWN))\n                     .thenCancel()\n                     .verify();\n+        Thread.sleep(50); //wait for the notifications in different thread\n+        assertThat(context.getBean(TestNotifier.class).getEvents()).containsOnly(APP_DOWN);\n     }\n \n     @Test\n@@ -163,7 +164,6 @@ public static class TestSingleNotifierConfig {\n         public Notifier testNotifier() {\n             return new TestNotifier();\n         }\n-\n     }\n \n     private static class MailSenderConfig {",
      "parent_sha": "403b3258116d5b4c87634bd460d8d94b162db614"
    }
  },
  {
    "oid": "8361429148ee3600d0c8cbd83911bf4a721f5bb8",
    "message": "using security properties to configure credentials",
    "date": "2021-01-14T16:23:00Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/8361429148ee3600d0c8cbd83911bf4a721f5bb8",
    "details": {
      "sha": "b550ffa9c07c786237b598468e69e7156f8d6952",
      "filename": "spring-boot-admin-samples/spring-boot-admin-sample-servlet/src/main/java/de/codecentric/boot/admin/SecuritySecureConfig.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/8361429148ee3600d0c8cbd83911bf4a721f5bb8/spring-boot-admin-samples%2Fspring-boot-admin-sample-servlet%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2FSecuritySecureConfig.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/8361429148ee3600d0c8cbd83911bf4a721f5bb8/spring-boot-admin-samples%2Fspring-boot-admin-sample-servlet%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2FSecuritySecureConfig.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-samples%2Fspring-boot-admin-sample-servlet%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2FSecuritySecureConfig.java?ref=8361429148ee3600d0c8cbd83911bf4a721f5bb8",
      "patch": "@@ -18,6 +18,7 @@\n \n import java.util.UUID;\n \n+import org.springframework.boot.autoconfigure.security.SecurityProperties;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Profile;\n import org.springframework.http.HttpMethod;\n@@ -38,8 +39,11 @@ public class SecuritySecureConfig extends WebSecurityConfigurerAdapter {\n \n \tprivate final AdminServerProperties adminServer;\n \n-\tpublic SecuritySecureConfig(AdminServerProperties adminServer) {\n+\tprivate final SecurityProperties security;\n+\n+\tpublic SecuritySecureConfig(AdminServerProperties adminServer, SecurityProperties security) {\n \t\tthis.adminServer = adminServer;\n+\t\tthis.security = security;\n \t}\n \n \t@Override\n@@ -68,7 +72,8 @@ protected void configure(HttpSecurity http) throws Exception {\n \t// Required to provide UserDetailsService for \"remember functionality\"\n \t@Override\n \tprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\n-\t\tauth.inMemoryAuthentication().withUser(\"user\").password(\"{noop}password\").roles(\"USER\");\n+\t\tauth.inMemoryAuthentication().withUser(security.getUser().getName())\n+\t\t\t\t.password(\"{noop}\" + security.getUser().getPassword()).roles(\"USER\");\n \t}\n \n }",
      "parent_sha": "876391d50fe60465429efd273a2e8e4aa43b1d92"
    }
  },
  {
    "oid": "1cdb3b3bafd5df1aa153dc797b39ce616aef99ab",
    "message": "chore: add TODO to remove workaround",
    "date": "2022-04-29T08:01:35Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/1cdb3b3bafd5df1aa153dc797b39ce616aef99ab",
    "details": {
      "sha": "82f64e2f41f05c987dec2b67ef38cbec7f30198f",
      "filename": "spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/DefaultServiceInstanceConverter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/1cdb3b3bafd5df1aa153dc797b39ce616aef99ab/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FDefaultServiceInstanceConverter.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/1cdb3b3bafd5df1aa153dc797b39ce616aef99ab/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FDefaultServiceInstanceConverter.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FDefaultServiceInstanceConverter.java?ref=1cdb3b3bafd5df1aa153dc797b39ce616aef99ab",
      "patch": "@@ -144,7 +144,7 @@ protected String getManagementPath(ServiceInstance instance) {\n \t}\n \n \tprotected URI getServiceUrl(ServiceInstance instance) {\n-\n+\t\t// TODO: Mitigates an issue that is fixed in Spring Cloud Commons 3.1.2. We will remove this as soon as Spring Cloud includes the fix.\n \t\tif (instance.getPort() == -1) {\n \t\t\treturn UriComponentsBuilder.newInstance().scheme(instance.isSecure() ? \"https\" : \"http\")\n \t\t\t\t\t.host(instance.getHost()).build().toUri();",
      "parent_sha": "b905f0c9b84f433063d622a7fe4f40df7164c5de"
    }
  },
  {
    "oid": "5bb3d178c68c9e5249c3b1f0aa30f5759e587713",
    "message": "fix unstable tests",
    "date": "2018-03-12T16:22:39Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/5bb3d178c68c9e5249c3b1f0aa30f5759e587713",
    "details": {
      "sha": "cb6b97c7b2782029d19fd08bb1c7cd0d20ddb80a",
      "filename": "spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/config/AdminServerNotifierAutoConfigurationTest.java",
      "status": "modified",
      "additions": 28,
      "deletions": 16,
      "changes": 44,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/5bb3d178c68c9e5249c3b1f0aa30f5759e587713/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fconfig%2FAdminServerNotifierAutoConfigurationTest.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/5bb3d178c68c9e5249c3b1f0aa30f5759e587713/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fconfig%2FAdminServerNotifierAutoConfigurationTest.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fconfig%2FAdminServerNotifierAutoConfigurationTest.java?ref=5bb3d178c68c9e5249c3b1f0aa30f5759e587713",
      "patch": "@@ -32,14 +32,16 @@\n import de.codecentric.boot.admin.server.notify.PagerdutyNotifier;\n import de.codecentric.boot.admin.server.notify.SlackNotifier;\n import de.codecentric.boot.admin.server.notify.TelegramNotifier;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxSink;\n import reactor.core.publisher.Mono;\n+import reactor.core.publisher.UnicastProcessor;\n import reactor.test.StepVerifier;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.List;\n import org.junit.After;\n import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration;\n import org.springframework.boot.test.util.TestPropertyValues;\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n@@ -63,18 +65,16 @@ public void close() {\n     }\n \n     @Test\n-    public void test_notifierListener() throws InterruptedException {\n+    public void test_notifierListener() {\n         load(TestSingleNotifierConfig.class);\n         InstanceEventStore store = context.getBean(InstanceEventStore.class);\n \n-        StepVerifier.create(store)\n+        StepVerifier.create(context.getBean(TestNotifier.class).getFlux())\n                     .expectSubscription()\n                     .then(() -> StepVerifier.create(store.append(Collections.singletonList(APP_DOWN))).verifyComplete())\n                     .expectNext(APP_DOWN)\n                     .thenCancel()\n                     .verify();\n-        Thread.sleep(100); //wait for the notifications in different thread\n-        assertThat(context.getBean(TestNotifier.class).getEvents()).containsOnly(APP_DOWN);\n     }\n \n     @Test\n@@ -161,7 +161,8 @@ private void load(Class<?> config, String... environment) {\n \n     public static class TestSingleNotifierConfig {\n         @Bean\n-        public Notifier testNotifier() {\n+        @Qualifier(\"testNotifier\")\n+        public TestNotifier testNotifier() {\n             return new TestNotifier();\n         }\n     }\n@@ -175,40 +176,51 @@ public JavaMailSenderImpl mailSender() {\n \n     private static class TestMultipleNotifierConfig {\n         @Bean\n-        public Notifier testNotifier1() {\n+        @Qualifier(\"testNotifier1\")\n+        public TestNotifier testNotifier1() {\n             return new TestNotifier();\n         }\n \n         @Bean\n-        public Notifier testNotifier2() {\n+        @Qualifier(\"testNotifier2\")\n+        public TestNotifier testNotifier2() {\n             return new TestNotifier();\n         }\n     }\n \n     private static class TestMultipleWithPrimaryNotifierConfig {\n         @Bean\n         @Primary\n-        public Notifier testNotifierPrimary() {\n+        @Qualifier(\"testNotifier\")\n+        public TestNotifier testNotifierPrimary() {\n             return new TestNotifier();\n         }\n \n         @Bean\n-        public Notifier testNotifier2() {\n+        @Qualifier(\"testNotifier3\")\n+        public TestNotifier testNotifier2() {\n             return new TestNotifier();\n         }\n     }\n \n     private static class TestNotifier implements Notifier {\n-        private List<InstanceEvent> events = new ArrayList<>();\n+        private final Flux<InstanceEvent> publishedFlux;\n+        private final FluxSink<InstanceEvent> sink;\n+\n+        private TestNotifier() {\n+            UnicastProcessor<InstanceEvent> unicastProcessor = UnicastProcessor.create();\n+            this.publishedFlux = unicastProcessor.publish().autoConnect(0);\n+            this.sink = unicastProcessor.sink();\n+        }\n \n         @Override\n         public Mono<Void> notify(InstanceEvent event) {\n-            this.events.add(event);\n-            return null;\n+            this.sink.next(event);\n+            return Mono.empty();\n         }\n \n-        public List<InstanceEvent> getEvents() {\n-            return events;\n+        public Flux<InstanceEvent> getFlux() {\n+            return publishedFlux;\n         }\n     }\n }",
      "parent_sha": "38452e4578f0aa9bfc83d41ebc3d04f98f4b1e7c"
    }
  },
  {
    "oid": "0d3c667247a9f1ddcaa400811f8c0fc5a5d7c915",
    "message": "Fix formatting violations",
    "date": "2022-06-19T22:27:15Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/0d3c667247a9f1ddcaa400811f8c0fc5a5d7c915",
    "details": {
      "sha": "41900aab4f1560762b95e7915f0d10a04614c3e6",
      "filename": "spring-boot-admin-samples/spring-boot-admin-sample-reactive/src/main/java/de/codecentric/boot/admin/SpringBootAdminReactiveApplication.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/0d3c667247a9f1ddcaa400811f8c0fc5a5d7c915/spring-boot-admin-samples%2Fspring-boot-admin-sample-reactive%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2FSpringBootAdminReactiveApplication.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/0d3c667247a9f1ddcaa400811f8c0fc5a5d7c915/spring-boot-admin-samples%2Fspring-boot-admin-sample-reactive%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2FSpringBootAdminReactiveApplication.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-samples%2Fspring-boot-admin-sample-reactive%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2FSpringBootAdminReactiveApplication.java?ref=0d3c667247a9f1ddcaa400811f8c0fc5a5d7c915",
      "patch": "@@ -58,8 +58,8 @@ public SecurityWebFilterChain securityWebFilterChainSecure(ServerHttpSecurity ht\n \t\treturn http\n \t\t\t\t.authorizeExchange((authorizeExchange) -> authorizeExchange\n \t\t\t\t\t\t.pathMatchers(this.adminServer.path(\"/assets/**\")).permitAll()\n-\t\t\t\t\t\t.pathMatchers(\"/actuator/health/**\").permitAll()\n-\t\t\t\t\t\t.pathMatchers(this.adminServer.path(\"/login\")).permitAll().anyExchange().authenticated())\n+\t\t\t\t\t\t.pathMatchers(\"/actuator/health/**\").permitAll().pathMatchers(this.adminServer.path(\"/login\"))\n+\t\t\t\t\t\t.permitAll().anyExchange().authenticated())\n \t\t\t\t.formLogin((formLogin) -> formLogin.loginPage(this.adminServer.path(\"/login\")))\n \t\t\t\t.logout((logout) -> logout.logoutUrl(this.adminServer.path(\"/logout\")))\n \t\t\t\t.httpBasic(Customizer.withDefaults()).csrf(ServerHttpSecurity.CsrfSpec::disable).build();",
      "parent_sha": "586bf657fe7041724fe0e04d363a9db1c2ff4277"
    }
  },
  {
    "oid": "e5a91d06e8ba788044ab843bf9769220d60a956a",
    "message": "Use full property name in error message.",
    "date": "2018-06-22T05:40:24Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/e5a91d06e8ba788044ab843bf9769220d60a956a",
    "details": {
      "sha": "8c8f2dfc6ecacdab44dbb6752bf257748506f3f8",
      "filename": "spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/registration/DefaultApplicationFactory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/e5a91d06e8ba788044ab843bf9769220d60a956a/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FDefaultApplicationFactory.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/e5a91d06e8ba788044ab843bf9769220d60a956a/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FDefaultApplicationFactory.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fregistration%2FDefaultApplicationFactory.java?ref=e5a91d06e8ba788044ab843bf9769220d60a956a",
      "patch": "@@ -95,7 +95,7 @@ protected String getServiceBaseUrl() {\n         }\n \n         if (getLocalServerPort() == null) {\n-            throw new IllegalStateException(\"couldn't determine local port. Please supply service-base-url.\");\n+            throw new IllegalStateException(\"couldn't determine local port. Please set spring.boot.admin.client.instance.service-base-url.\");\n         }\n \n         return UriComponentsBuilder.newInstance()",
      "parent_sha": "87ac57488a61b487d4ca2abe8646cdb1cec64c42"
    }
  },
  {
    "oid": "7f605ff0371a09d19145858bb7f5e48aca5a22d6",
    "message": "Make methods in StatusUpdater protected.\n\nFor easier cusotmization. E.g. converting some of the data fechted\nfrom the /info endpoint or to filter it.",
    "date": "2017-01-25T16:37:01Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/7f605ff0371a09d19145858bb7f5e48aca5a22d6",
    "details": {
      "sha": "f76020a1af80b3fa95df00230e34beb53a97c1bb",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/registry/StatusUpdater.java",
      "status": "modified",
      "additions": 13,
      "deletions": 5,
      "changes": 18,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/7f605ff0371a09d19145858bb7f5e48aca5a22d6/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fregistry%2FStatusUpdater.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/7f605ff0371a09d19145858bb7f5e48aca5a22d6/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fregistry%2FStatusUpdater.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fregistry%2FStatusUpdater.java?ref=7f605ff0371a09d19145858bb7f5e48aca5a22d6",
      "patch": "@@ -80,23 +80,31 @@ public void updateStatus(Application application) {\n \t\t}\n \t}\n \n-\tprivate Info queryInfo(Application application) {\n+\tprotected Info queryInfo(Application application) {\n \t\ttry {\n \t\t\tResponseEntity<Map<String, Serializable>> response = applicationOps\n \t\t\t\t\t.getInfo(application);\n \t\t\tif (response.getStatusCode().is2xxSuccessful() && response.hasBody()) {\n-\t\t\t\treturn Info.from(response.getBody());\n+\t\t\t\treturn convertInfo(response);\n \t\t\t} else {\n \t\t\t\tLOGGER.info(\"Couldn't retrieve info for {}: {} - {}\", application,\n \t\t\t\t\t\tresponse.getStatusCode(), response.getBody());\n \t\t\t\treturn Info.empty();\n \t\t\t}\n \t\t} catch (Exception ex) {\n \t\t\tLOGGER.warn(\"Couldn't retrieve info for {}\", application, ex);\n-\t\t\treturn Info.empty();\n+\t\t\treturn convertInfo(ex);\n \t\t}\n \t}\n \n+\tprotected Info convertInfo(ResponseEntity<Map<String, Serializable>> response) {\n+\t\treturn Info.from(response.getBody());\n+\t}\n+\n+\tprotected Info convertInfo(Exception ex) {\n+\t\treturn Info.empty();\n+\t}\n+\n \tprotected StatusInfo queryStatus(Application application) {\n \t\tLOGGER.trace(\"Updating status for {}\", application);\n \t\ttry {\n@@ -111,7 +119,7 @@ protected StatusInfo queryStatus(Application application) {\n \t\t}\n \t}\n \n-\tprivate StatusInfo convertStatusInfo(ResponseEntity<Map<String, Serializable>> response) {\n+\tprotected StatusInfo convertStatusInfo(ResponseEntity<Map<String, Serializable>> response) {\n \t\tif (response.hasBody() && response.getBody().get(\"status\") instanceof String) {\n \t\t\treturn StatusInfo.valueOf((String) response.getBody().get(\"status\"),\n \t\t\t\t\tresponse.getBody());\n@@ -128,7 +136,7 @@ private StatusInfo convertStatusInfo(ResponseEntity<Map<String, Serializable>> r\n \t\treturn StatusInfo.ofDown(details);\n \t}\n \n-\tprivate StatusInfo convertStatusInfo(Exception ex) {\n+\tprotected StatusInfo convertStatusInfo(Exception ex) {\n \t\tMap<String, Serializable> details = new HashMap<>();\n \t\tdetails.put(\"message\", ex.getMessage());\n \t\tdetails.put(\"exception\", ex.getClass().getName());",
      "parent_sha": "ab1079f4429fbfe01213ff987cb07a20692aa4c7"
    }
  },
  {
    "oid": "2a1ec2a1f8f973d3dd16bf37ec3414f0da6d054d",
    "message": "Ignore the templated actuator endpoints",
    "date": "2017-09-22T16:43:31Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/2a1ec2a1f8f973d3dd16bf37ec3414f0da6d054d",
    "details": {
      "sha": "54d19a23d041573522f9362c65c9a693d0704c66",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/services/endpoints/QueryIndexEndpointStrategy.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/2a1ec2a1f8f973d3dd16bf37ec3414f0da6d054d/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fservices%2Fendpoints%2FQueryIndexEndpointStrategy.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/2a1ec2a1f8f973d3dd16bf37ec3414f0da6d054d/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fservices%2Fendpoints%2FQueryIndexEndpointStrategy.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fservices%2Fendpoints%2FQueryIndexEndpointStrategy.java?ref=2a1ec2a1f8f973d3dd16bf37ec3414f0da6d054d",
      "patch": "@@ -60,7 +60,7 @@ private Mono<Endpoints> convert(Response response) {\n         List<Endpoint> endpoints = response.get_links()\n                                            .entrySet()\n                                            .stream()\n-                                           .filter(e -> !e.getKey().equals(\"self\"))\n+                                           .filter(e -> !e.getKey().equals(\"self\") && !e.getValue().isTemplated())\n                                            .map(e -> Endpoint.of(e.getKey(), e.getValue().getHref()))\n                                            .collect(Collectors.toList());\n         if (endpoints.isEmpty()) {\n@@ -77,6 +77,7 @@ static class Response {\n         @Data\n         static class EndpointRef {\n             private String href;\n+            private boolean templated;\n         }\n     }\n }",
      "parent_sha": "8ace426e48142b205c61a13ae0fc868e9cba48ac"
    }
  },
  {
    "oid": "71c1f1e61e01296d5f040555fb6c24786a3b5719",
    "message": "Rename `spring.boot.admin.notify` to `spring.boot.admin.notify.mail`",
    "date": "2015-11-01T20:13:07Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/71c1f1e61e01296d5f040555fb6c24786a3b5719",
    "details": {
      "sha": "3efcce26c7734c94cd2376e0d4defde15978f2b4",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/MailNotifierConfiguration.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/71c1f1e61e01296d5f040555fb6c24786a3b5719/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FMailNotifierConfiguration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/71c1f1e61e01296d5f040555fb6c24786a3b5719/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FMailNotifierConfiguration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FMailNotifierConfiguration.java?ref=71c1f1e61e01296d5f040555fb6c24786a3b5719",
      "patch": "@@ -38,8 +38,8 @@ public class MailNotifierConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\t@ConditionalOnProperty(prefix = \"spring.boot.admin.notify\", name = \"enabled\", matchIfMissing = true)\n-\t@ConfigurationProperties(\"spring.boot.admin.notify\")\n+\t@ConditionalOnProperty(prefix = \"spring.boot.admin.notify.mail\", name = \"enabled\", matchIfMissing = true)\n+\t@ConfigurationProperties(\"spring.boot.admin.notify.mail\")\n \tpublic MailNotifier mailNotifier() {\n \t\treturn new MailNotifier(mailSender);\n \t}",
      "parent_sha": "b04064503d9e980f2db643a3f51aaf3a833790a9"
    }
  },
  {
    "oid": "ee89236fdc245c2169ca945e1dcbe2b16df38257",
    "message": "all requests to /instances/*/actuator/** should be proxied (allow custom actuator endpoint return files and other staff with different content-type) (#2176)",
    "date": "2023-01-09T21:32:10Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/ee89236fdc245c2169ca945e1dcbe2b16df38257",
    "details": {
      "sha": "38cd0069d431a7be747c54e563a08d1463ecc0f3",
      "filename": "spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/config/AdminServerUiAutoConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/ee89236fdc245c2169ca945e1dcbe2b16df38257/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fconfig%2FAdminServerUiAutoConfiguration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/ee89236fdc245c2169ca945e1dcbe2b16df38257/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fconfig%2FAdminServerUiAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fconfig%2FAdminServerUiAutoConfiguration.java?ref=ee89236fdc245c2169ca945e1dcbe2b16df38257",
      "patch": "@@ -75,7 +75,7 @@ public class AdminServerUiAutoConfiguration {\n \t * be extended via property: spring.boot.admin.ui.additionalRouteExcludes\n \t */\n \tprivate static final List<String> DEFAULT_UI_ROUTE_EXCLUDES = asList(\"/extensions/**\",\n-\t\t\t\"/instances/*/actuator/heapdump\", \"/instances/*/actuator/logfile\");\n+\t\t\t\"/instances/*/actuator/**\");\n \n \tprivate final AdminServerUiProperties adminUi;\n ",
      "parent_sha": "553ad9706d61a870731b47e929c414d3fc84e4fd"
    }
  },
  {
    "oid": "184b41dd08b998b31c81fa007020fb21329adc8f",
    "message": "Polish",
    "date": "2019-02-27T06:45:35Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/184b41dd08b998b31c81fa007020fb21329adc8f",
    "details": {
      "sha": "89844fd174804fa1933bc0cc46dac9ae6c41b332",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/entities/EventsourcingInstanceRepository.java",
      "status": "modified",
      "additions": 1,
      "deletions": 8,
      "changes": 9,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/184b41dd08b998b31c81fa007020fb21329adc8f/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fdomain%2Fentities%2FEventsourcingInstanceRepository.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/184b41dd08b998b31c81fa007020fb21329adc8f/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fdomain%2Fentities%2FEventsourcingInstanceRepository.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fdomain%2Fentities%2FEventsourcingInstanceRepository.java?ref=184b41dd08b998b31c81fa007020fb21329adc8f",
      "patch": "@@ -24,9 +24,7 @@\n import reactor.core.publisher.Mono;\n import reactor.retry.Retry;\n \n-import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.BiFunction;\n-import java.util.function.Supplier;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -63,12 +61,7 @@ public Flux<Instance> findAll() {\n \n     @Override\n     public Mono<Instance> find(InstanceId id) {\n-        //hmm a simple reduce doesn't return empty when not found...\n-        return this.eventStore.find(id)\n-                              .collect((Supplier<AtomicReference<Instance>>) AtomicReference::new, (ref, event) -> {\n-            Instance instance = ref.get() != null ? ref.get() : Instance.create(id);\n-            ref.set(instance.apply(event));\n-        }).flatMap(ref -> Mono.justOrEmpty(ref.get()));\n+        return this.eventStore.find(id).collectList().filter(e -> !e.isEmpty()).map(e -> Instance.create(id).apply(e));\n     }\n \n     @Override",
      "parent_sha": "99d82c32df27a3f10be35e6ebcc1ef2d85cf385a"
    }
  },
  {
    "oid": "80cf4749dd0ba0d66f76986d4a745cf707610feb",
    "message": "changed HipchatNotifierConfiguration to be a static class, otherwise application context doesn't start up when hipchat notification is enabled.",
    "date": "2016-03-24T09:57:50Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/80cf4749dd0ba0d66f76986d4a745cf707610feb",
    "details": {
      "sha": "2193831535681307719753b39c187cc07f66a65e",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/NotifierConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/80cf4749dd0ba0d66f76986d4a745cf707610feb/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FNotifierConfiguration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/80cf4749dd0ba0d66f76986d4a745cf707610feb/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FNotifierConfiguration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FNotifierConfiguration.java?ref=80cf4749dd0ba0d66f76986d4a745cf707610feb",
      "patch": "@@ -82,7 +82,7 @@ public PagerdutyNotifier pagerdutyNotifier() {\n \t@Configuration\n \t@ConditionalOnProperty(prefix = \"spring.boot.admin.notify.hipchat\", name = \"url\")\n \t@AutoConfigureBefore({ NotifierListenerConfiguration.class })\n-\tpublic class HipchatNotifierConfiguration {\n+\tpublic static class HipchatNotifierConfiguration {\n \t    @Bean\n \t    @ConditionalOnMissingBean\n \t    @ConditionalOnProperty(prefix = \"spring.boot.admin.notify.hipchat\", name = \"enabled\", matchIfMissing = true)",
      "parent_sha": "e1aadeb2f231b69cb8c10e6b1cf3439ad4723e7a"
    }
  },
  {
    "oid": "6d310da93f58db789c11477f3a619b1058485546",
    "message": "chore: reformat code",
    "date": "2022-07-30T12:46:45Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/6d310da93f58db789c11477f3a619b1058485546",
    "details": {
      "sha": "dd9ed2863bc54bc88441ee44dcc6ec55bc5ec492",
      "filename": "spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/DefaultServiceInstanceConverter.java",
      "status": "modified",
      "additions": 13,
      "deletions": 16,
      "changes": 29,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/6d310da93f58db789c11477f3a619b1058485546/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FDefaultServiceInstanceConverter.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/6d310da93f58db789c11477f3a619b1058485546/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FDefaultServiceInstanceConverter.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FDefaultServiceInstanceConverter.java?ref=6d310da93f58db789c11477f3a619b1058485546",
      "patch": "@@ -47,15 +47,15 @@ public class DefaultServiceInstanceConverter implements ServiceInstanceConverter\n \n \tprivate static final Logger LOGGER = LoggerFactory.getLogger(DefaultServiceInstanceConverter.class);\n \n-\tprivate static final String[] KEYS_MANAGEMENT_SCHEME = {\"management.scheme\", \"management-scheme\"};\n+\tprivate static final String[] KEYS_MANAGEMENT_SCHEME = { \"management.scheme\", \"management-scheme\" };\n \n-\tprivate static final String[] KEYS_MANAGEMENT_ADDRESS = {\"management.address\", \"management-address\"};\n+\tprivate static final String[] KEYS_MANAGEMENT_ADDRESS = { \"management.address\", \"management-address\" };\n \n-\tprivate static final String[] KEYS_MANAGEMENT_PORT = {\"management.port\", \"management-port\"};\n+\tprivate static final String[] KEYS_MANAGEMENT_PORT = { \"management.port\", \"management-port\" };\n \n-\tprivate static final String[] KEYS_MANAGEMENT_PATH = {\"management.context-path\", \"management-context-path\"};\n+\tprivate static final String[] KEYS_MANAGEMENT_PATH = { \"management.context-path\", \"management-context-path\" };\n \n-\tprivate static final String[] KEYS_HEALTH_PATH = {\"health.path\", \"health-path\"};\n+\tprivate static final String[] KEYS_HEALTH_PATH = { \"health.path\", \"health-path\" };\n \n \t/**\n \t * Default context-path to be appended to the url of the discovered service for the\n@@ -83,22 +83,19 @@ public class DefaultServiceInstanceConverter implements ServiceInstanceConverter\n \t@Override\n \tpublic Registration convert(ServiceInstance instance) {\n \t\tLOGGER.debug(\"Converting service '{}' running at '{}' with metadata {}\", instance.getServiceId(),\n-\t\t\tinstance.getUri(), instance.getMetadata());\n+\t\t\t\tinstance.getUri(), instance.getMetadata());\n \n \t\tString healthUrl = getHealthUrl(instance).toString();\n \t\tString managementUrl = getManagementUrl(instance).toString();\n \t\tString serviceUrl = getServiceUrl(instance).toString();\n \n-\t\treturn Registration.create(instance.getServiceId(), healthUrl)\n-\t\t\t.managementUrl(managementUrl)\n-\t\t\t.serviceUrl(serviceUrl)\n-\t\t\t.metadata(getMetadata(instance))\n-\t\t\t.build();\n+\t\treturn Registration.create(instance.getServiceId(), healthUrl).managementUrl(managementUrl)\n+\t\t\t\t.serviceUrl(serviceUrl).metadata(getMetadata(instance)).build();\n \t}\n \n \tprotected URI getHealthUrl(ServiceInstance instance) {\n \t\treturn UriComponentsBuilder.fromUri(getManagementUrl(instance)).path(\"/\").path(getHealthPath(instance)).build()\n-\t\t\t.toUri();\n+\t\t\t\t.toUri();\n \t}\n \n \tprotected String getHealthPath(ServiceInstance instance) {\n@@ -117,7 +114,7 @@ protected URI getManagementUrl(ServiceInstance instance) {\n \n \t\tUriComponentsBuilder builder;\n \t\tif (serviceUrl.getHost().equals(managementHost) && serviceUrl.getScheme().equals(managementScheme)\n-\t\t\t&& serviceUrl.getPort() == managementPort) {\n+\t\t\t\t&& serviceUrl.getPort() == managementPort) {\n \t\t\tbuilder = UriComponentsBuilder.fromUri(serviceUrl);\n \t\t}\n \t\telse {\n@@ -168,9 +165,9 @@ protected URI getServiceUrl(ServiceInstance instance) {\n \n \tprotected Map<String, String> getMetadata(ServiceInstance instance) {\n \t\treturn (instance.getMetadata() != null)\n-\t\t\t? instance.getMetadata().entrySet().stream().filter((e) -> e.getKey() != null && e.getValue() != null)\n-\t\t\t.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))\n-\t\t\t: emptyMap();\n+\t\t\t\t? instance.getMetadata().entrySet().stream().filter((e) -> e.getKey() != null && e.getValue() != null)\n+\t\t\t\t\t\t.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))\n+\t\t\t\t: emptyMap();\n \t}\n \n \tpublic String getManagementContextPath() {",
      "parent_sha": "1511f2cbf8ba2bd57d02c4d5460a2923026a87ca"
    }
  },
  {
    "oid": "5c592cb93565fee7392420197f8285e5a4e997ad",
    "message": "chore: apply formatting",
    "date": "2022-07-22T17:45:31Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/5c592cb93565fee7392420197f8285e5a4e997ad",
    "details": {
      "sha": "e8ecb2da6055857582ad526abd037845d57f67ff",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/StatusInfo.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/5c592cb93565fee7392420197f8285e5a4e997ad/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fdomain%2Fvalues%2FStatusInfo.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/5c592cb93565fee7392420197f8285e5a4e997ad/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fdomain%2Fvalues%2FStatusInfo.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fdomain%2Fvalues%2FStatusInfo.java?ref=5c592cb93565fee7392420197f8285e5a4e997ad",
      "patch": "@@ -127,8 +127,8 @@ public static StatusInfo from(Map<String, ?> body) {\n \t\tMap<String, ?> details = Collections.emptyMap();\n \n \t\t/*\n-\t\t * Key \"details\" is present when accessing Spring Boot Actuator Health\n-\t\t * using Accept-Header {@link org.springframework.boot.actuate.endpoint.ApiVersion#V2}.\n+\t\t * Key \"details\" is present when accessing Spring Boot Actuator Health using\n+\t\t * Accept-Header {@link org.springframework.boot.actuate.endpoint.ApiVersion#V2}.\n \t\t */\n \t\tif (body.containsKey(\"details\")) {\n \t\t\tdetails = (Map<String, ?>) body.get(\"details\");",
      "parent_sha": "73fadf6dbeb9c0559b1d938d56ab21bb8afb6710"
    }
  },
  {
    "oid": "90fa80c77dffd91ee4fb4f044f5260ee4dbb77e9",
    "message": "formatted with spring-javaformat:apply",
    "date": "2021-09-10T07:23:30Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/90fa80c77dffd91ee4fb4f044f5260ee4dbb77e9",
    "details": {
      "sha": "096c247ab8d7dbc8550ba0e7ba1c05ef83ec4d2d",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/InstanceWebClient.java",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/90fa80c77dffd91ee4fb4f044f5260ee4dbb77e9/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Fclient%2FInstanceWebClient.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/90fa80c77dffd91ee4fb4f044f5260ee4dbb77e9/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Fclient%2FInstanceWebClient.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Fclient%2FInstanceWebClient.java?ref=90fa80c77dffd91ee4fb4f044f5260ee4dbb77e9",
      "patch": "@@ -62,11 +62,9 @@ private static ExchangeFilterFunction setInstance(Mono<Instance> instance) {\n \t}\n \n \tprivate static ExchangeFilterFunction toExchangeFilterFunction(InstanceExchangeFilterFunction filter) {\n-\t\treturn (request, next) -> request.attribute(ATTRIBUTE_INSTANCE)\n-\t\t\t.filter(Instance.class::isInstance)\n-\t\t\t.map(Instance.class::cast)\n-\t\t\t.map((instance) -> filter.filter(instance, request, next))\n-\t\t\t.orElseGet(() -> next.exchange(request));\n+\t\treturn (request, next) -> request.attribute(ATTRIBUTE_INSTANCE).filter(Instance.class::isInstance)\n+\t\t\t\t.map(Instance.class::cast).map((instance) -> filter.filter(instance, request, next))\n+\t\t\t\t.orElseGet(() -> next.exchange(request));\n \t}\n \n \tpublic static class Builder {",
      "parent_sha": "e7abba024aeb8dd771dae6a07d39f576542a3de1"
    }
  },
  {
    "oid": "9787b9702ac4a749bdfa5f9f75662165b627eaaf",
    "message": "Add null guard for instance metadata in ServiceInstanceConverter\n\nDue to https://github.com/spring-cloud/spring-cloud-kubernetes/issues/247\n\ncloses #962",
    "date": "2018-10-09T05:43:50Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/9787b9702ac4a749bdfa5f9f75662165b627eaaf",
    "details": {
      "sha": "312632dfe45fac6d9aaeb7baea676e359cda745f",
      "filename": "spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/DefaultServiceInstanceConverter.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/9787b9702ac4a749bdfa5f9f75662165b627eaaf/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FDefaultServiceInstanceConverter.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/9787b9702ac4a749bdfa5f9f75662165b627eaaf/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FDefaultServiceInstanceConverter.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FDefaultServiceInstanceConverter.java?ref=9787b9702ac4a749bdfa5f9f75662165b627eaaf",
      "patch": "@@ -26,6 +26,7 @@\n import org.springframework.cloud.client.ServiceInstance;\n import org.springframework.web.util.UriComponentsBuilder;\n \n+import static java.util.Collections.emptyMap;\n import static org.springframework.util.StringUtils.isEmpty;\n \n /**\n@@ -56,7 +57,8 @@ public class DefaultServiceInstanceConverter implements ServiceInstanceConverter\n \n     @Override\n     public Registration convert(ServiceInstance instance) {\n-        LOGGER.debug(\"Converting service '{}' running at '{}' with metadata {}\",\n+        LOGGER.debug(\n+            \"Converting service '{}' running at '{}' with metadata {}\",\n             instance.getServiceId(),\n             instance.getUri(),\n             instance.getMetadata()\n@@ -123,7 +125,7 @@ protected URI getServiceUrl(ServiceInstance instance) {\n     }\n \n     protected Map<String, String> getMetadata(ServiceInstance instance) {\n-        return instance.getMetadata();\n+        return instance.getMetadata() != null ? instance.getMetadata() : emptyMap();\n     }\n \n ",
      "parent_sha": "b4738f638935f0e1049192f9c59d86d85e0f00e3"
    }
  },
  {
    "oid": "a5b9bcaeb61f7b6a6ddd257e4d3d8e010b3e4f39",
    "message": "Don't use configure RestTemplateBuilder from application context\n\nAs we don't want to pickup any customizations for the RestTemplate we\nshouldn't pick up any preconfigured RestTemplateBuilder in our client\nconfiguration.\n\ncloses #1157",
    "date": "2019-05-07T11:28:02Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/a5b9bcaeb61f7b6a6ddd257e4d3d8e010b3e4f39",
    "details": {
      "sha": "cc94e69d51ae3e7639d2c2def8321fa7d8959761",
      "filename": "spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientAutoConfiguration.java",
      "status": "modified",
      "additions": 4,
      "deletions": 10,
      "changes": 14,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/a5b9bcaeb61f7b6a6ddd257e4d3d8e010b3e4f39/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fconfig%2FSpringBootAdminClientAutoConfiguration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/a5b9bcaeb61f7b6a6ddd257e4d3d8e010b3e4f39/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fconfig%2FSpringBootAdminClientAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fconfig%2FSpringBootAdminClientAutoConfiguration.java?ref=a5b9bcaeb61f7b6a6ddd257e4d3d8e010b3e4f39",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2014-2018 the original author or authors.\n+ * Copyright 2014-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -46,8 +46,6 @@\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Primary;\n-import org.springframework.http.client.SimpleClientHttpRequestFactory;\n-import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n \n import static org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;\n \n@@ -107,13 +105,9 @@ public ApplicationFactory applicationFactory(InstanceProperties instance,\n \n     @Bean\n     @ConditionalOnMissingBean\n-    public ApplicationRegistrator registrator(ClientProperties client,\n-                                              ApplicationFactory applicationFactory,\n-                                              RestTemplateBuilder restTemplBuilder) {\n-        RestTemplateBuilder builder = restTemplBuilder.messageConverters(new MappingJackson2HttpMessageConverter())\n-                                                      .requestFactory(SimpleClientHttpRequestFactory.class)\n-                                                      .setConnectTimeout(client.getConnectTimeout())\n-                                                      .setReadTimeout(client.getReadTimeout());\n+    public ApplicationRegistrator registrator(ClientProperties client, ApplicationFactory applicationFactory) {\n+        RestTemplateBuilder builder = new RestTemplateBuilder().setConnectTimeout(client.getConnectTimeout())\n+                                                               .setReadTimeout(client.getReadTimeout());\n         if (client.getUsername() != null) {\n             builder = builder.basicAuthentication(client.getUsername(), client.getPassword());\n         }",
      "parent_sha": "22794393991ffbf57a0b18322c6565bceb2279d6"
    }
  },
  {
    "oid": "c4203e5c6ac2fd8f274540c71213bc43c81f90dd",
    "message": "Fix tests to run on OSX Sierra",
    "date": "2017-01-08T21:55:09Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/c4203e5c6ac2fd8f274540c71213bc43c81f90dd",
    "details": {
      "sha": "5d271d8caa712af2b2156d1aac7bbc3c9dcb1ae6",
      "filename": "spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/AdminApplicationHazelcastTest.java",
      "status": "modified",
      "additions": 16,
      "deletions": 6,
      "changes": 22,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/c4203e5c6ac2fd8f274540c71213bc43c81f90dd/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2FAdminApplicationHazelcastTest.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/c4203e5c6ac2fd8f274540c71213bc43c81f90dd/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2FAdminApplicationHazelcastTest.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2FAdminApplicationHazelcastTest.java?ref=c4203e5c6ac2fd8f274540c71213bc43c81f90dd",
      "patch": "@@ -15,6 +15,7 @@\n  */\n package de.codecentric.boot.admin;\n \n+import static java.util.Arrays.asList;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n@@ -42,6 +43,7 @@\n import com.hazelcast.config.EvictionPolicy;\n import com.hazelcast.config.ListConfig;\n import com.hazelcast.config.MapConfig;\n+import com.hazelcast.config.TcpIpConfig;\n \n import de.codecentric.boot.admin.config.EnableAdminServer;\n \n@@ -73,7 +75,7 @@ public void shutdown() {\n \t}\n \n \t@Test\n-\tpublic void test() {\n+\tpublic void test() throws Exception {\n \t\t// publish app on instance1\n \t\tResponseEntity<Map<String, String>> postResponse = registerApp(\"Hazelcast Test\",\n \t\t\t\t\"http://127.0.0.1/health\", instance1);\n@@ -151,11 +153,19 @@ private ResponseEntity<Collection<Map<String, String>>> getAppByName(String name\n \tpublic static class TestAdminApplication {\n \t\t@Bean\n \t\tpublic Config hazelcastConfig() {\n-\t\t\treturn new Config()\n-\t\t\t\t\t.addMapConfig(new MapConfig(\"spring-boot-admin-application-store\")\n-\t\t\t\t\t\t\t.setBackupCount(1).setEvictionPolicy(EvictionPolicy.NONE))\n-\t\t\t\t\t.addListConfig(new ListConfig(\"spring-boot-admin-application-store\")\n-\t\t\t\t\t\t\t.setBackupCount(1).setMaxSize(1000));\n+\t\t\tConfig config = new Config();\n+\n+\t\t\tconfig.addMapConfig(new MapConfig(\"spring-boot-admin-application-store\")\n+\t\t\t\t\t.setBackupCount(1).setEvictionPolicy(EvictionPolicy.NONE));\n+\n+\t\t\tconfig.addListConfig(new ListConfig(\"spring-boot-admin-application-store\")\n+\t\t\t\t\t.setBackupCount(1).setMaxSize(1000));\n+\n+\t\t\tconfig.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);\n+\t\t\tTcpIpConfig tcpIpConfig = config.getNetworkConfig().getJoin().getTcpIpConfig();\n+\t\t\ttcpIpConfig.setEnabled(true);\n+\t\t\ttcpIpConfig.setMembers(asList(\"127.0.0.1\"));\n+\t\t\treturn config;\n \t\t}\n \t}\n ",
      "parent_sha": "4bc9d3a93553b83bca87e0fa2b65179dcae606bb"
    }
  },
  {
    "oid": "ab05b73bc1bc7f620d0b529b89335b88591b482c",
    "message": "Optimize the issue of default version for BuildVersion Constructor . (#2060)",
    "date": "2022-07-01T06:56:25Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/ab05b73bc1bc7f620d0b529b89335b88591b482c",
    "details": {
      "sha": "969614720c3d30e41742fc01e0a1639ec942c657",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/domain/values/BuildVersion.java",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/ab05b73bc1bc7f620d0b529b89335b88591b482c/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fdomain%2Fvalues%2FBuildVersion.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/ab05b73bc1bc7f620d0b529b89335b88591b482c/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fdomain%2Fvalues%2FBuildVersion.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fdomain%2Fvalues%2FBuildVersion.java?ref=ab05b73bc1bc7f620d0b529b89335b88591b482c",
      "patch": "@@ -22,16 +22,21 @@\n \n import javax.annotation.Nullable;\n \n-import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n \n @lombok.Data\n public final class BuildVersion implements Serializable, Comparable<BuildVersion> {\n \n+\tprivate static final String DEFAULT_VERSION = \"UNKNOWN\";\n+\n \tprivate final String value;\n \n \tprivate BuildVersion(String value) {\n-\t\tAssert.hasText(value, \"'value' must not be empty\");\n-\t\tthis.value = value;\n+\t\tif(!StringUtils.hasText(value)) {\n+\t\t\tthis.value = DEFAULT_VERSION;\n+\t\t} else {\n+\t\t\tthis.value = value;\n+\t\t}\n \t}\n \n \tpublic static BuildVersion valueOf(String s) {",
      "parent_sha": "05e7b30244a8cadfc51ba9663348d5184cd97db1"
    }
  },
  {
    "oid": "f0c52443d8e6fee40004fb3b7cd80f96b3505332",
    "message": "Be lenient to other services in the EurekaServiceInstanceConverter\n\nWhen using eureka in combination with other service discovery implementations,\nwe are more lenient by just using the default conversion for the health-url.\n\nfixes #1448",
    "date": "2020-06-05T09:54:51Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/f0c52443d8e6fee40004fb3b7cd80f96b3505332",
    "details": {
      "sha": "9295cd1db3c624652d517969a76ffcb6311eff37",
      "filename": "spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/EurekaServiceInstanceConverter.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/f0c52443d8e6fee40004fb3b7cd80f96b3505332/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FEurekaServiceInstanceConverter.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/f0c52443d8e6fee40004fb3b7cd80f96b3505332/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FEurekaServiceInstanceConverter.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FEurekaServiceInstanceConverter.java?ref=f0c52443d8e6fee40004fb3b7cd80f96b3505332",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2014-2019 the original author or authors.\n+ * Copyright 2014-2020 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -21,7 +21,6 @@\n import com.netflix.appinfo.InstanceInfo;\n import org.springframework.cloud.client.ServiceInstance;\n import org.springframework.cloud.netflix.eureka.EurekaServiceInstance;\n-import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n \n import de.codecentric.boot.admin.server.domain.entities.Instance;\n@@ -35,8 +34,9 @@ public class EurekaServiceInstanceConverter extends DefaultServiceInstanceConver\n \n \t@Override\n \tprotected URI getHealthUrl(ServiceInstance instance) {\n-\t\tAssert.isInstanceOf(EurekaServiceInstance.class, instance,\n-\t\t\t\t\"serviceInstance must be of type EurekaServiceInstance\");\n+\t\tif (!(instance instanceof EurekaServiceInstance)) {\n+\t\t\treturn super.getHealthUrl(instance);\n+\t\t}\n \n \t\tInstanceInfo instanceInfo = ((EurekaServiceInstance) instance).getInstanceInfo();\n \t\tString healthUrl = instanceInfo.getSecureHealthCheckUrl();",
      "parent_sha": "801e82b755d1c130475fdbf49fd80ab718ccb993"
    }
  },
  {
    "oid": "f580717db2b1703281e3da16f1c65d05e75b3269",
    "message": "chore: replace deprecations (#3933)",
    "date": "2024-12-20T09:28:07Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/f580717db2b1703281e3da16f1c65d05e75b3269",
    "details": {
      "sha": "bc568660c04b973c21653c62a9501bf770fe8a1c",
      "filename": "spring-boot-admin-client/src/main/java/de/codecentric/boot/admin/client/config/SpringBootAdminClientAutoConfiguration.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/f580717db2b1703281e3da16f1c65d05e75b3269/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fconfig%2FSpringBootAdminClientAutoConfiguration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/f580717db2b1703281e3da16f1c65d05e75b3269/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fconfig%2FSpringBootAdminClientAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-client%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fclient%2Fconfig%2FSpringBootAdminClientAutoConfiguration.java?ref=f580717db2b1703281e3da16f1c65d05e75b3269",
      "patch": "@@ -139,8 +139,8 @@ public static class BlockingRegistrationClientConfig {\n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n \t\tpublic RegistrationClient registrationClient(ClientProperties client) {\n-\t\t\tRestTemplateBuilder builder = new RestTemplateBuilder().setConnectTimeout(client.getConnectTimeout())\n-\t\t\t\t.setReadTimeout(client.getReadTimeout());\n+\t\t\tRestTemplateBuilder builder = new RestTemplateBuilder().connectTimeout(client.getConnectTimeout())\n+\t\t\t\t.readTimeout(client.getReadTimeout());\n \n \t\t\tif (client.getUsername() != null && client.getPassword() != null) {\n \t\t\t\tbuilder = builder.basicAuthentication(client.getUsername(), client.getPassword());",
      "parent_sha": "b90a11f5f91f0429868ec5b6b0f68ad34798f79c"
    }
  },
  {
    "oid": "88156edddf6fe5246ee628dc4122bea2874eacc9",
    "message": "Fix for #1638 (#1673)\n\ncloses #1638",
    "date": "2021-04-09T07:48:11Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/88156edddf6fe5246ee628dc4122bea2874eacc9",
    "details": {
      "sha": "694441d116a5dd1eac742bc043983873b7801e7d",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/client/InstanceExchangeFilterFunctions.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/88156edddf6fe5246ee628dc4122bea2874eacc9/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Fclient%2FInstanceExchangeFilterFunctions.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/88156edddf6fe5246ee628dc4122bea2874eacc9/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Fclient%2FInstanceExchangeFilterFunctions.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2Fclient%2FInstanceExchangeFilterFunctions.java?ref=88156edddf6fe5246ee628dc4122bea2874eacc9",
      "patch": "@@ -27,7 +27,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.boot.actuate.endpoint.http.ActuatorMediaType;\n-import org.springframework.core.io.buffer.DataBuffer;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n@@ -141,7 +140,7 @@ private static ClientResponse convertLegacyResponse(LegacyEndpointConverter conv\n \t\treturn response.mutate().headers((headers) -> {\n \t\t\theaders.replace(HttpHeaders.CONTENT_TYPE, singletonList(ActuatorMediaType.V2_JSON));\n \t\t\theaders.remove(HttpHeaders.CONTENT_LENGTH);\n-\t\t}).body(response.bodyToFlux(DataBuffer.class).transform(converter::convert)).build();\n+\t\t}).body(converter::convert).build();\n \t}\n \n \tpublic static InstanceExchangeFilterFunction setDefaultAcceptHeader() {",
      "parent_sha": "6dce3685eebd18befde1662875dc26408a04fc0a"
    }
  },
  {
    "oid": "6b55c5119c2ab12b1ffd14e4410453bc9da15097",
    "message": "Schedule update task after ApplicationReadyEvent\n\ncloses #201",
    "date": "2016-05-30T15:36:37Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/6b55c5119c2ab12b1ffd14e4410453bc9da15097",
    "details": {
      "sha": "b5b03b2ccb4c8bec944501f207226e359acd2e0f",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/AdminServerWebConfiguration.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/6b55c5119c2ab12b1ffd14e4410453bc9da15097/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FAdminServerWebConfiguration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/6b55c5119c2ab12b1ffd14e4410453bc9da15097/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FAdminServerWebConfiguration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fconfig%2FAdminServerWebConfiguration.java?ref=6b55c5119c2ab12b1ffd14e4410453bc9da15097",
      "patch": "@@ -20,6 +20,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.web.ServerProperties;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ApplicationContextAware;\n@@ -181,16 +182,18 @@ public void onClientApplicationDeregistered(ClientApplicationDeregisteredEvent e\n \n \t@Bean\n \tpublic ScheduledTaskRegistrar updateTaskRegistrar() {\n-\t\tScheduledTaskRegistrar registrar = new ScheduledTaskRegistrar();\n+\t\treturn new ScheduledTaskRegistrar();\n+\t}\n \n-\t\tregistrar.addFixedRateTask(new Runnable() {\n+\t@EventListener\n+\tpublic void onApplicationReadyEvent(ApplicationReadyEvent event) {\n+\t\tupdateTaskRegistrar().addFixedRateTask(new Runnable() {\n \t\t\t@Override\n \t\t\tpublic void run() {\n \t\t\t\tstatusUpdater().updateStatusForAllApplications();\n \t\t\t}\n \t\t}, adminServerProperties().getMonitor().getPeriod());\n-\n-\t\treturn registrar;\n+\t\tupdateTaskRegistrar().afterPropertiesSet();\n \t}\n \n \t@Bean",
      "parent_sha": "2bb883042d393996b3c8732ead11120ab1b3d152"
    }
  },
  {
    "oid": "0f9e2dd96a2a130be8cc4355412d988ac0a98f53",
    "message": "Changed the hazelcast eviction max size policy (Fixes #1552)\n\n- upgrading to hazelcast 4.x changed the eviction policy for maps\n- the default value ENTRY_COUNT is not valid",
    "date": "2020-12-22T07:16:25Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/0f9e2dd96a2a130be8cc4355412d988ac0a98f53",
    "details": {
      "sha": "e4579506fabb7e472584e7866733c462338642d7",
      "filename": "spring-boot-admin-samples/spring-boot-admin-sample-hazelcast/src/main/java/de/codecentric/boot/admin/SpringBootAdminHazelcastApplication.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/0f9e2dd96a2a130be8cc4355412d988ac0a98f53/spring-boot-admin-samples%2Fspring-boot-admin-sample-hazelcast%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2FSpringBootAdminHazelcastApplication.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/0f9e2dd96a2a130be8cc4355412d988ac0a98f53/spring-boot-admin-samples%2Fspring-boot-admin-sample-hazelcast%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2FSpringBootAdminHazelcastApplication.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-samples%2Fspring-boot-admin-sample-hazelcast%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2FSpringBootAdminHazelcastApplication.java?ref=0f9e2dd96a2a130be8cc4355412d988ac0a98f53",
      "patch": "@@ -21,6 +21,7 @@\n import com.hazelcast.config.EvictionPolicy;\n import com.hazelcast.config.InMemoryFormat;\n import com.hazelcast.config.MapConfig;\n+import com.hazelcast.config.MaxSizePolicy;\n import com.hazelcast.config.MergePolicyConfig;\n import com.hazelcast.config.TcpIpConfig;\n import com.hazelcast.spi.merge.PutIfAbsentMergePolicy;\n@@ -75,7 +76,8 @@ public Config hazelcastConfig() {\n \t\t// the same notification to be sent by multiple instances\n \t\tMapConfig sentNotificationsMap = new MapConfig(DEFAULT_NAME_SENT_NOTIFICATIONS_MAP)\n \t\t\t\t.setInMemoryFormat(InMemoryFormat.OBJECT).setBackupCount(1)\n-\t\t\t\t.setEvictionConfig(new EvictionConfig().setEvictionPolicy(EvictionPolicy.LRU))\n+\t\t\t\t.setEvictionConfig(new EvictionConfig().setEvictionPolicy(EvictionPolicy.LRU)\n+\t\t\t\t\t\t.setMaxSizePolicy(MaxSizePolicy.PER_NODE))\n \t\t\t\t.setMergePolicyConfig(new MergePolicyConfig(PutIfAbsentMergePolicy.class.getName(), 100));\n \n \t\tConfig config = new Config();",
      "parent_sha": "b9206622073ac3077b8980aceabf5a485c8d01a0"
    }
  },
  {
    "oid": "cc7d25c9974ab1080d088cc1bacd5787628a8ac9",
    "message": "Try to fix flaky test",
    "date": "2019-03-10T16:10:33Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/cc7d25c9974ab1080d088cc1bacd5787628a8ac9",
    "details": {
      "sha": "f16ef0aa238b7f9b1f604f07d2ade17153dccfca",
      "filename": "spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/web/AbstractInstancesProxyControllerIntegrationTest.java",
      "status": "modified",
      "additions": 93,
      "deletions": 89,
      "changes": 182,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/cc7d25c9974ab1080d088cc1bacd5787628a8ac9/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2FAbstractInstancesProxyControllerIntegrationTest.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/cc7d25c9974ab1080d088cc1bacd5787628a8ac9/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2FAbstractInstancesProxyControllerIntegrationTest.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Ftest%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2FAbstractInstancesProxyControllerIntegrationTest.java?ref=cc7d25c9974ab1080d088cc1bacd5787628a8ac9",
      "patch": "@@ -70,8 +70,8 @@ public abstract class AbstractInstancesProxyControllerIntegrationTest {\n                                                                          .dynamicPort()\n                                                                          .extensions(new ConnectionCloseExtension()));\n \n-    private static WebTestClient client;\n-    private static String instanceId;\n+    private WebTestClient client;\n+    private String instanceId;\n \n     @BeforeClass\n     public static void setUp() {\n@@ -85,12 +85,12 @@ public static void tearDown() {\n \n     public void setUpClient(ConfigurableApplicationContext context) {\n         int localPort = context.getEnvironment().getProperty(\"local.server.port\", Integer.class, 0);\n-        client = WebTestClient.bindToServer()\n-                              .baseUrl(\"http://localhost:\" + localPort)\n-                              .responseTimeout(Duration.ofSeconds(10))\n-                              .build();\n+        this.client = WebTestClient.bindToServer()\n+                                   .baseUrl(\"http://localhost:\" + localPort)\n+                                   .responseTimeout(Duration.ofSeconds(10))\n+                                   .build();\n \n-        String managementUrl = \"http://localhost:\" + wireMock.port() + \"/mgmt\";\n+        String managementUrl = \"http://localhost:\" + this.wireMock.port() + \"/mgmt\";\n         //@formatter:off\n         String actuatorIndex = \"{ \\\"_links\\\": { \" +\n                                \"\\\"env\\\": { \\\"href\\\": \\\"\" + managementUrl + \"/env\\\", \\\"templated\\\": false },\" +\n@@ -99,128 +99,132 @@ public void setUpClient(ConfigurableApplicationContext context) {\n                                \"\\\"timeout\\\": { \\\"href\\\": \\\"\" + managementUrl + \"/timeout\\\", \\\"templated\\\": false }\" +\n                                \" } }\";\n         //@formatter:on\n-        wireMock.stubFor(get(urlEqualTo(\"/mgmt/health\")).willReturn(ok(\"{ \\\"status\\\" : \\\"UP\\\" }\").withHeader(CONTENT_TYPE,\n+        this.wireMock.stubFor(get(urlEqualTo(\"/mgmt/health\")).willReturn(ok(\"{ \\\"status\\\" : \\\"UP\\\" }\").withHeader(\n+            CONTENT_TYPE,\n             ActuatorMediaType.V2_JSON\n         )));\n-        wireMock.stubFor(get(urlEqualTo(\"/mgmt/info\")).willReturn(ok(\"{ }\").withHeader(CONTENT_TYPE,\n+        this.wireMock.stubFor(get(urlEqualTo(\"/mgmt/info\")).willReturn(ok(\"{ }\").withHeader(\n+            CONTENT_TYPE,\n             ACTUATOR_CONTENT_TYPE\n         )));\n-        wireMock.stubFor(options(urlEqualTo(\"/mgmt/env\")).willReturn(ok().withHeader(ALLOW,\n+        this.wireMock.stubFor(options(urlEqualTo(\"/mgmt/env\")).willReturn(ok().withHeader(\n+            ALLOW,\n             HttpMethod.HEAD.name(),\n             HttpMethod.GET.name(),\n             HttpMethod.OPTIONS.name()\n         )));\n-        wireMock.stubFor(get(urlEqualTo(\"/mgmt\")).willReturn(ok(actuatorIndex).withHeader(CONTENT_TYPE,\n+        this.wireMock.stubFor(get(urlEqualTo(\"/mgmt\")).willReturn(ok(actuatorIndex).withHeader(\n+            CONTENT_TYPE,\n             ACTUATOR_CONTENT_TYPE\n         )));\n-        wireMock.stubFor(get(urlEqualTo(\"/mgmt/invalid\")).willReturn(aResponse().withFault(Fault.EMPTY_RESPONSE)));\n-        wireMock.stubFor(get(urlEqualTo(\"/mgmt/timeout\")).willReturn(ok().withFixedDelay(10000)));\n-        wireMock.stubFor(get(urlEqualTo(\"/mgmt/test\")).willReturn(ok(\"{ \\\"foo\\\" : \\\"bar\\\" }\").withHeader(CONTENT_TYPE,\n+        this.wireMock.stubFor(get(urlEqualTo(\"/mgmt/invalid\")).willReturn(aResponse().withFault(Fault.EMPTY_RESPONSE)));\n+        this.wireMock.stubFor(get(urlEqualTo(\"/mgmt/timeout\")).willReturn(ok().withFixedDelay(10000)));\n+        this.wireMock.stubFor(get(urlEqualTo(\"/mgmt/test\")).willReturn(ok(\"{ \\\"foo\\\" : \\\"bar\\\" }\").withHeader(\n+            CONTENT_TYPE,\n             ACTUATOR_CONTENT_TYPE\n         )));\n-        wireMock.stubFor(get(urlEqualTo(\"/mgmt/test/has%20spaces\")).willReturn(ok(\"{ \\\"foo\\\" : \\\"bar-with-spaces\\\" }\").withHeader(CONTENT_TYPE,\n-            ACTUATOR_CONTENT_TYPE\n-        )));\n-        wireMock.stubFor(post(urlEqualTo(\"/mgmt/test\")).willReturn(ok()));\n-        wireMock.stubFor(delete(urlEqualTo(\"/mgmt/test\")).willReturn(serverError().withBody(\n+        this.wireMock.stubFor(get(urlEqualTo(\"/mgmt/test/has%20spaces\")).willReturn(ok(\n+            \"{ \\\"foo\\\" : \\\"bar-with-spaces\\\" }\").withHeader(CONTENT_TYPE, ACTUATOR_CONTENT_TYPE)));\n+        this.wireMock.stubFor(post(urlEqualTo(\"/mgmt/test\")).willReturn(ok()));\n+        this.wireMock.stubFor(delete(urlEqualTo(\"/mgmt/test\")).willReturn(serverError().withBody(\n             \"{\\\"error\\\": \\\"You're doing it wrong!\\\"}\").withHeader(CONTENT_TYPE, ACTUATOR_CONTENT_TYPE)));\n \n-        instanceId = registerInstance(managementUrl);\n+        this.instanceId = registerInstance(managementUrl);\n     }\n \n     @Test\n     public void should_return_status_503_404() {\n         //503 on invalid instance\n-        client.get()\n-              .uri(\"/instances/{instanceId}/actuator/info\", \"UNKNOWN\")\n-              .accept(ACTUATOR_V2_MEDIATYPE)\n-              .exchange()\n-              .expectStatus()\n-              .isEqualTo(HttpStatus.SERVICE_UNAVAILABLE);\n+        this.client.get()\n+                   .uri(\"/instances/{instanceId}/actuator/info\", \"UNKNOWN\")\n+                   .accept(ACTUATOR_V2_MEDIATYPE)\n+                   .exchange()\n+                   .expectStatus()\n+                   .isEqualTo(HttpStatus.SERVICE_UNAVAILABLE);\n \n         //404 on non-existent endpoint\n-        client.get()\n-              .uri(\"/instances/{instanceId}/actuator/not-exist\", instanceId)\n-              .accept(ACTUATOR_V2_MEDIATYPE)\n-              .exchange()\n-              .expectStatus()\n-              .isEqualTo(HttpStatus.NOT_FOUND);\n+        this.client.get()\n+                   .uri(\"/instances/{instanceId}/actuator/not-exist\", this.instanceId)\n+                   .accept(ACTUATOR_V2_MEDIATYPE)\n+                   .exchange()\n+                   .expectStatus()\n+                   .isEqualTo(HttpStatus.NOT_FOUND);\n     }\n \n     @Test\n     public void should_return_status_502_504() {\n         //502 on invalid response\n-        client.get()\n-              .uri(\"/instances/{instanceId}/actuator/invalid\", instanceId)\n-              .accept(ACTUATOR_V2_MEDIATYPE)\n-              .exchange()\n-              .expectStatus()\n-              .isEqualTo(HttpStatus.BAD_GATEWAY);\n+        this.client.get()\n+                   .uri(\"/instances/{instanceId}/actuator/invalid\", this.instanceId)\n+                   .accept(ACTUATOR_V2_MEDIATYPE)\n+                   .exchange()\n+                   .expectStatus()\n+                   .isEqualTo(HttpStatus.BAD_GATEWAY);\n \n         //504 on read timeout\n-        client.get()\n-              .uri(\"/instances/{instanceId}/actuator/timeout\", instanceId)\n-              .accept(ACTUATOR_V2_MEDIATYPE)\n-              .exchange()\n-              .expectStatus()\n-              .isEqualTo(HttpStatus.GATEWAY_TIMEOUT);\n+        this.client.get()\n+                   .uri(\"/instances/{instanceId}/actuator/timeout\", this.instanceId)\n+                   .accept(ACTUATOR_V2_MEDIATYPE)\n+                   .exchange()\n+                   .expectStatus()\n+                   .isEqualTo(HttpStatus.GATEWAY_TIMEOUT);\n     }\n \n     @Test\n     public void should_forward_requests() {\n-        client.options()\n-              .uri(\"/instances/{instanceId}/actuator/env\", instanceId)\n-              .accept(ACTUATOR_V2_MEDIATYPE)\n-              .exchange()\n-              .expectStatus()\n-              .isEqualTo(HttpStatus.OK)\n-              .expectHeader()\n-              .valueEquals(ALLOW, HttpMethod.HEAD.name(), HttpMethod.GET.name(), HttpMethod.OPTIONS.name());\n+        this.client.options()\n+                   .uri(\"/instances/{instanceId}/actuator/env\", this.instanceId)\n+                   .accept(ACTUATOR_V2_MEDIATYPE)\n+                   .exchange()\n+                   .expectStatus()\n+                   .isEqualTo(HttpStatus.OK)\n+                   .expectHeader()\n+                   .valueEquals(ALLOW, HttpMethod.HEAD.name(), HttpMethod.GET.name(), HttpMethod.OPTIONS.name());\n \n-        client.get()\n-              .uri(\"/instances/{instanceId}/actuator/test\", instanceId)\n-              .accept(ACTUATOR_V2_MEDIATYPE)\n-              .exchange()\n-              .expectStatus()\n-              .isEqualTo(HttpStatus.OK)\n-              .expectBody(String.class)\n-              .isEqualTo(\"{ \\\"foo\\\" : \\\"bar\\\" }\");\n+        this.client.get()\n+                   .uri(\"/instances/{instanceId}/actuator/test\", this.instanceId)\n+                   .accept(ACTUATOR_V2_MEDIATYPE)\n+                   .exchange()\n+                   .expectStatus()\n+                   .isEqualTo(HttpStatus.OK)\n+                   .expectBody(String.class)\n+                   .isEqualTo(\"{ \\\"foo\\\" : \\\"bar\\\" }\");\n \n-        client.post()\n-              .uri(\"/instances/{instanceId}/actuator/test\", instanceId)\n-              .syncBody(\"PAYLOAD\")\n-              .exchange()\n-              .expectStatus()\n-              .isEqualTo(HttpStatus.OK);\n+        this.client.post()\n+                   .uri(\"/instances/{instanceId}/actuator/test\", this.instanceId)\n+                   .syncBody(\"PAYLOAD\")\n+                   .exchange()\n+                   .expectStatus()\n+                   .isEqualTo(HttpStatus.OK);\n \n-        wireMock.verify(postRequestedFor(urlEqualTo(\"/mgmt/test\")).withRequestBody(equalTo(\"PAYLOAD\")));\n+        this.wireMock.verify(postRequestedFor(urlEqualTo(\"/mgmt/test\")).withRequestBody(equalTo(\"PAYLOAD\")));\n \n-        client.delete()\n-              .uri(\"/instances/{instanceId}/actuator/test\", instanceId)\n-              .exchange()\n-              .expectStatus()\n-              .isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR)\n-              .expectBody(String.class)\n-              .isEqualTo(\"{\\\"error\\\": \\\"You're doing it wrong!\\\"}\");\n+        this.client.delete()\n+                   .uri(\"/instances/{instanceId}/actuator/test\", this.instanceId)\n+                   .exchange()\n+                   .expectStatus()\n+                   .isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR)\n+                   .expectBody(String.class)\n+                   .isEqualTo(\"{\\\"error\\\": \\\"You're doing it wrong!\\\"}\");\n \n-        wireMock.verify(postRequestedFor(urlEqualTo(\"/mgmt/test\")).withRequestBody(equalTo(\"PAYLOAD\")));\n+        this.wireMock.verify(postRequestedFor(urlEqualTo(\"/mgmt/test\")).withRequestBody(equalTo(\"PAYLOAD\")));\n     }\n \n     @Test\n     public void should_forward_requests_with_spaces_in_path() {\n-        client.get()\n-              .uri(\"/instances/{instanceId}/actuator/test/has spaces\", instanceId)\n-              .accept(ACTUATOR_V2_MEDIATYPE)\n-              .exchange()\n-              .expectStatus()\n-              .isEqualTo(HttpStatus.OK)\n-              .expectBody(String.class)\n-              .isEqualTo(\"{ \\\"foo\\\" : \\\"bar-with-spaces\\\" }\");\n+        this.client.get()\n+                   .uri(\"/instances/{instanceId}/actuator/test/has spaces\", this.instanceId)\n+                   .accept(ACTUATOR_V2_MEDIATYPE)\n+                   .exchange()\n+                   .expectStatus()\n+                   .isEqualTo(HttpStatus.OK)\n+                   .expectBody(String.class)\n+                   .isEqualTo(\"{ \\\"foo\\\" : \\\"bar-with-spaces\\\" }\");\n \n-        wireMock.verify(getRequestedFor(urlEqualTo(\"/mgmt/test/has%20spaces\")));\n+        this.wireMock.verify(getRequestedFor(urlEqualTo(\"/mgmt/test/has%20spaces\")));\n     }\n \n-    private static String registerInstance(String managementUrl) {\n+    private String registerInstance(String managementUrl) {\n         AtomicReference<String> instanceId = new AtomicReference<>();\n         StepVerifier.create(getEventStream())\n                     .expectSubscription()\n@@ -232,14 +236,14 @@ private static String registerInstance(String managementUrl) {\n         return instanceId.get();\n     }\n \n-    private static String sendRegistration(String managementUrl) {\n+    private String sendRegistration(String managementUrl) {\n         String registration = \"{ \\\"name\\\": \\\"test\\\", \\\"healthUrl\\\": \\\"\" +\n                               managementUrl +\n                               \"/health\\\", \\\"managementUrl\\\": \\\"\" +\n                               managementUrl +\n                               \"\\\" }\";\n         //@formatter:off\n-        EntityExchangeResult<Map<String, Object>> result = client.post()\n+        EntityExchangeResult<Map<String, Object>> result = this.client.post()\n                                                                 .uri(\"/instances\")\n                                                                 .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON)\n                                                                 .syncBody(registration)\n@@ -252,9 +256,9 @@ private static String sendRegistration(String managementUrl) {\n         return result.getResponseBody().get(\"id\").toString();\n     }\n \n-    private static Flux<Map<String, Object>> getEventStream() {\n+    private Flux<Map<String, Object>> getEventStream() {\n         //@formatter:off\n-        return client.get().uri(\"/instances/events\").accept(MediaType.TEXT_EVENT_STREAM)\n+        return this.client.get().uri(\"/instances/events\").accept(MediaType.TEXT_EVENT_STREAM)\n                         .exchange()\n                         .expectStatus().isOk()\n                         .returnResult(RESPONSE_TYPE).getResponseBody();",
      "parent_sha": "c4a35373a89e09ef3b8ff0bef6cf5fad88145152"
    }
  },
  {
    "oid": "6e254225db6d243db94c038d31230aa41dc903be",
    "message": "fix formatting",
    "date": "2020-05-01T18:37:41Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/6e254225db6d243db94c038d31230aa41dc903be",
    "details": {
      "sha": "f802172dc4b7193580cc90179c8b25fe74d0fc33",
      "filename": "spring-boot-admin-server-ui/src/main/java/de/codecentric/boot/admin/server/ui/config/AdminServerUiAutoConfiguration.java",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/6e254225db6d243db94c038d31230aa41dc903be/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fconfig%2FAdminServerUiAutoConfiguration.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/6e254225db6d243db94c038d31230aa41dc903be/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fconfig%2FAdminServerUiAutoConfiguration.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-ui%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fui%2Fconfig%2FAdminServerUiAutoConfiguration.java?ref=6e254225db6d243db94c038d31230aa41dc903be",
      "patch": "@@ -60,8 +60,8 @@ public class AdminServerUiAutoConfiguration {\n \tprivate static final List<String> DEFAULT_UI_ROUTES = asList(\"/about/**\", \"/applications/**\", \"/instances/**\",\n \t\t\t\"/journal/**\", \"/wallboard/**\", \"/external/**\");\n \n-\tprivate static final List<String> DEFAULT_UI_ROUTE_EXCLUDES = asList(\"/extensions/**\", \"/instances/*/actuator/heapdump\",\n-\t\t\t\"/instances/*/actuator/logfile\");\n+\tprivate static final List<String> DEFAULT_UI_ROUTE_EXCLUDES = asList(\"/extensions/**\",\n+\t\t\t\"/instances/*/actuator/heapdump\", \"/instances/*/actuator/logfile\");\n \n \tprivate final AdminServerUiProperties adminUi;\n \n@@ -159,8 +159,7 @@ public de.codecentric.boot.admin.server.ui.web.reactive.HomepageForwardingFilter\n \t\t\t\t\t\t.map(this.adminServer::path).collect(Collectors.toList());\n \t\t\t\tString homepage = this.adminServer.path(\"/\");\n \t\t\t\treturn new de.codecentric.boot.admin.server.ui.web.reactive.HomepageForwardingFilter(homepage, routes,\n-\t\t\t\t\tDEFAULT_UI_ROUTE_EXCLUDES\n-\t\t\t\t);\n+\t\t\t\t\t\tDEFAULT_UI_ROUTE_EXCLUDES);\n \t\t\t}\n \n \t\t}\n@@ -208,8 +207,7 @@ public de.codecentric.boot.admin.server.ui.web.servlet.HomepageForwardingFilter\n \t\t\t\t\t\t.map(this.adminServer::path).collect(Collectors.toList());\n \t\t\t\tString homepage = this.adminServer.path(\"/\");\n \t\t\t\treturn new de.codecentric.boot.admin.server.ui.web.servlet.HomepageForwardingFilter(homepage, routes,\n-\t\t\t\t\tDEFAULT_UI_ROUTE_EXCLUDES\n-\t\t\t\t);\n+\t\t\t\t\t\tDEFAULT_UI_ROUTE_EXCLUDES);\n \t\t\t}\n \n \t\t}",
      "parent_sha": "18e295bdb6983e1a6b8817f84457c60b9b357a47"
    }
  },
  {
    "oid": "bc0b1d16bfcdf88137e1fb8301ec235b28a72008",
    "message": "fix: formatting",
    "date": "2022-04-29T09:52:07Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/bc0b1d16bfcdf88137e1fb8301ec235b28a72008",
    "details": {
      "sha": "612cbaa8f2f1d432a47a3746e80941ff38fc9068",
      "filename": "spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/DefaultServiceInstanceConverter.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/bc0b1d16bfcdf88137e1fb8301ec235b28a72008/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FDefaultServiceInstanceConverter.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/bc0b1d16bfcdf88137e1fb8301ec235b28a72008/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FDefaultServiceInstanceConverter.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FDefaultServiceInstanceConverter.java?ref=bc0b1d16bfcdf88137e1fb8301ec235b28a72008",
      "patch": "@@ -144,7 +144,8 @@ protected String getManagementPath(ServiceInstance instance) {\n \t}\n \n \tprotected URI getServiceUrl(ServiceInstance instance) {\n-\t\t// TODO: Mitigates an issue that is fixed in Spring Cloud Commons 3.1.2. We will remove this as soon as Spring Cloud includes the fix.\n+\t\t// TODO: Mitigates an issue that is fixed in Spring Cloud Commons 3.1.2. We will\n+\t\t// remove this as soon as Spring Cloud includes the fix.\n \t\tif (instance.getPort() == -1) {\n \t\t\treturn UriComponentsBuilder.newInstance().scheme(instance.isSecure() ? \"https\" : \"http\")\n \t\t\t\t\t.host(instance.getHost()).build().toUri();",
      "parent_sha": "1cdb3b3bafd5df1aa153dc797b39ce616aef99ab"
    }
  },
  {
    "oid": "813aae08f7538f401f076f3202bb216fd7586657",
    "message": "Make StatusUpdater easier to extend\n\ncloses #321",
    "date": "2016-11-07T20:17:14Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/813aae08f7538f401f076f3202bb216fd7586657",
    "details": {
      "sha": "066bf5dbd6c1da079141bd58b8c415431f6654a9",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/registry/StatusUpdater.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/813aae08f7538f401f076f3202bb216fd7586657/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fregistry%2FStatusUpdater.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/813aae08f7538f401f076f3202bb216fd7586657/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fregistry%2FStatusUpdater.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fregistry%2FStatusUpdater.java?ref=813aae08f7538f401f076f3202bb216fd7586657",
      "patch": "@@ -30,7 +30,7 @@\n import de.codecentric.boot.admin.registry.store.ApplicationStore;\n \n /**\n- * The StatusUpdater is responsible for updatig the status of all or a single application querying\n+ * The StatusUpdater is responsible for updating the status of all or a single application querying\n  * the healthUrl.\n  *\n  * @author Johannes Edmeier\n@@ -70,7 +70,7 @@ public void updateStatus(Application application) {\n \t\t}\n \t}\n \n-\tprivate StatusInfo queryStatus(Application application) {\n+\tprotected StatusInfo queryStatus(Application application) {\n \t\tLOGGER.trace(\"Updating status for {}\", application);\n \n \t\ttry {\n@@ -101,6 +101,10 @@ public void setStatusLifetime(long statusLifetime) {\n \t\tthis.statusLifetime = statusLifetime;\n \t}\n \n+\tpublic long getStatusLifetime() {\n+\t\treturn statusLifetime;\n+\t}\n+\n \t@Override\n \tpublic void setApplicationEventPublisher(ApplicationEventPublisher publisher) {\n \t\tthis.publisher = publisher;",
      "parent_sha": "0909ade45b6004e6c45ab9f1905066a6f34f3795"
    }
  },
  {
    "oid": "1e3018d8b641823c57fcc0cdfa55f95155823a47",
    "message": "Improved logging for InstanceDiscoveryListener",
    "date": "2019-02-22T08:38:33Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/1e3018d8b641823c57fcc0cdfa55f95155823a47",
    "details": {
      "sha": "4885be4660573bc1f663bca6a6f069878772187a",
      "filename": "spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/InstanceDiscoveryListener.java",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/1e3018d8b641823c57fcc0cdfa55f95155823a47/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FInstanceDiscoveryListener.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/1e3018d8b641823c57fcc0cdfa55f95155823a47/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FInstanceDiscoveryListener.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FInstanceDiscoveryListener.java?ref=1e3018d8b641823c57fcc0cdfa55f95155823a47",
      "patch": "@@ -101,6 +101,7 @@ private void discoverIfNeeded(Object value) {\n     }\n \n     protected void discover() {\n+        log.debug(\"Discovering new instances from DiscoveryClient\");\n         Flux.fromIterable(discoveryClient.getServices())\n             .filter(this::shouldRegisterService)\n             .flatMapIterable(discoveryClient::getInstances)\n@@ -116,15 +117,18 @@ protected Mono<Void> removeStaleInstances(Set<InstanceId> registeredInstanceIds)\n                          .filter(instance -> SOURCE.equals(instance.getRegistration().getSource()))\n                          .map(Instance::getId)\n                          .filter(id -> !registeredInstanceIds.contains(id))\n-                         .doOnNext(id -> log.info(\"Instance ({}) missing in DiscoveryClient services \", id))\n+                         .doOnNext(id -> log.info(\n+                             \"Instance '{}' missing in DiscoveryClient services and will be removed.\",\n+                             id\n+                         ))\n                          .flatMap(registry::deregister)\n                          .then();\n     }\n \n     protected boolean shouldRegisterService(final String serviceId) {\n         boolean shouldRegister = matchesPattern(serviceId, services) && !matchesPattern(serviceId, ignoredServices);\n         if (!shouldRegister) {\n-            log.debug(\"Ignoring discovered service {}\", serviceId);\n+            log.debug(\"Ignoring service '{}' from discovery.\", serviceId);\n         }\n         return shouldRegister;\n     }\n@@ -139,9 +143,9 @@ protected Mono<InstanceId> registerInstance(ServiceInstance instance) {\n             log.debug(\"Registering discovered instance {}\", registration);\n             return registry.register(registration);\n         } catch (Exception ex) {\n-            log.error(\"Couldn't register instance for service ({})\", toString(instance), ex);\n+            log.error(\"Couldn't register instance for discovered instance ({})\", toString(instance), ex);\n+            return Mono.empty();\n         }\n-        return Mono.empty();\n     }\n \n     protected String toString(ServiceInstance instance) {",
      "parent_sha": "b8293ae9d154c669a66601d647abec9ba8860602"
    }
  },
  {
    "oid": "d149b8a414123b41b95b2109078c0b3309528be9",
    "message": "fix formatting",
    "date": "2022-01-03T06:42:24Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/d149b8a414123b41b95b2109078c0b3309528be9",
    "details": {
      "sha": "f35492ec48d9787d3295e78a45133b011500f3f1",
      "filename": "spring-boot-admin-server-cloud/src/main/java/de/codecentric/boot/admin/server/cloud/discovery/DefaultServiceInstanceConverter.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/d149b8a414123b41b95b2109078c0b3309528be9/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FDefaultServiceInstanceConverter.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/d149b8a414123b41b95b2109078c0b3309528be9/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FDefaultServiceInstanceConverter.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server-cloud%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fcloud%2Fdiscovery%2FDefaultServiceInstanceConverter.java?ref=d149b8a414123b41b95b2109078c0b3309528be9",
      "patch": "@@ -148,8 +148,9 @@ protected URI getServiceUrl(ServiceInstance instance) {\n \t}\n \n \tprotected Map<String, String> getMetadata(ServiceInstance instance) {\n-\t\treturn (instance.getMetadata() != null) ? instance.getMetadata().entrySet().stream()\n-\t\t\t\t.filter((e) -> e.getKey() != null && e.getValue() != null).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))\n+\t\treturn (instance.getMetadata() != null)\n+\t\t\t\t? instance.getMetadata().entrySet().stream().filter((e) -> e.getKey() != null && e.getValue() != null)\n+\t\t\t\t\t\t.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))\n \t\t\t\t: emptyMap();\n \t}\n ",
      "parent_sha": "1549dc19d9560b60a3cbf243287f73d917c93aa0"
    }
  },
  {
    "oid": "306f03265769b412945e37fa8841649c04411058",
    "message": "warning fix",
    "date": "2018-04-11T05:35:09Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/306f03265769b412945e37fa8841649c04411058",
    "details": {
      "sha": "6e186acb98f1ebfb165ef426a3511d5f560590fc",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/306f03265769b412945e37fa8841649c04411058/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fnotify%2FOpsGenieNotifier.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/306f03265769b412945e37fa8841649c04411058/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fnotify%2FOpsGenieNotifier.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fnotify%2FOpsGenieNotifier.java?ref=306f03265769b412945e37fa8841649c04411058",
      "patch": "@@ -110,7 +110,7 @@ protected String buildUrl(InstanceEvent event, Instance instance) {\n         return url.toString();\n     }\n \n-    protected HttpEntity createRequest(InstanceEvent event, Instance instance) {\n+    protected HttpEntity<?> createRequest(InstanceEvent event, Instance instance) {\n         Map<String, Object> body = new HashMap<>();\n \n         if (user != null) {",
      "parent_sha": "c2b85bfb32553d4b51b47c0a08beb2f13e0f32b3"
    }
  },
  {
    "oid": "c43b2e92a8066f72add6a94569f1ab41e71c7233",
    "message": "Add `/applications/{name}` endpoint\n\ncloses #849",
    "date": "2018-07-26T06:44:50Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/c43b2e92a8066f72add6a94569f1ab41e71c7233",
    "details": {
      "sha": "5deb146fa829749d493db4ae551a80245f21c09d",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/web/ApplicationsController.java",
      "status": "modified",
      "additions": 15,
      "deletions": 6,
      "changes": 21,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/c43b2e92a8066f72add6a94569f1ab41e71c7233/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2FApplicationsController.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/c43b2e92a8066f72add6a94569f1ab41e71c7233/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2FApplicationsController.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fserver%2Fweb%2FApplicationsController.java?ref=c43b2e92a8066f72add6a94569f1ab41e71c7233",
      "patch": "@@ -71,6 +71,14 @@ public Flux<Application> applications() {\n                        .flatMap(grouped -> toApplication(grouped.key(), grouped));\n     }\n \n+\n+    @GetMapping(path = \"/applications/{name}\", produces = MediaType.APPLICATION_JSON_VALUE)\n+    public Mono<ResponseEntity<Application>> application(@PathVariable(\"name\") String name) {\n+        return this.toApplication(name, registry.getInstances(name).filter(Instance::isRegistered))\n+                   .map(ResponseEntity::ok)\n+                   .defaultIfEmpty(ResponseEntity.notFound().build());\n+    }\n+\n     @GetMapping(path = \"/applications\", produces = MediaType.TEXT_EVENT_STREAM_VALUE)\n     public Flux<ServerSentEvent<Application>> applicationsStream() {\n         return Flux.from(eventPublisher)\n@@ -87,10 +95,9 @@ public Mono<ResponseEntity<Void>> unregister(@PathVariable(\"name\") String name)\n         return registry.getInstances(name)\n                        .flatMap(instance -> registry.deregister(instance.getId()))\n                        .collectList()\n-                       .map(\n-                           deregistered -> !deregistered.isEmpty() ? ResponseEntity.noContent().build() : ResponseEntity\n-                               .notFound()\n-                               .build());\n+                       .map(deregistered -> !deregistered.isEmpty() ? ResponseEntity.noContent()\n+                                                                                    .build() : ResponseEntity.notFound()\n+                                                                                                             .build());\n     }\n \n     protected Tuple2<String, Flux<Instance>> getApplicationForInstance(Instance instance) {\n@@ -99,7 +106,7 @@ protected Tuple2<String, Flux<Instance>> getApplicationForInstance(Instance inst\n     }\n \n     protected Mono<Application> toApplication(String name, Flux<Instance> instances) {\n-        return instances.collectList().map(instanceList -> {\n+        return instances.collectList().filter(instanceList -> !instanceList.isEmpty()).map(instanceList -> {\n             Application group = new Application(name);\n             group.setInstances(instanceList);\n             group.setBuildVersion(getBuildVersion(instanceList));\n@@ -130,7 +137,9 @@ protected Tuple2<String, Instant> getStatus(List<Instance> instances) {\n         //TODO: Correct is just a second readmodel for groups\n         Map<String, Instant> statusWithTime = instances.stream()\n                                                        .collect(toMap(instance -> instance.getStatusInfo().getStatus(),\n-                                                           Instance::getStatusTimestamp, this::getMax));\n+                                                           Instance::getStatusTimestamp,\n+                                                           this::getMax\n+                                                       ));\n         if (statusWithTime.size() == 1) {\n             Map.Entry<String, Instant> e = statusWithTime.entrySet().iterator().next();\n             return Tuples.of(e.getKey(), e.getValue());",
      "parent_sha": "ad0afd4f4238cc08b3a4f528f1ca2e7e49be4f20"
    }
  },
  {
    "oid": "3f02e73f0727472346cb1dde34c7ed1a2270bf9a",
    "message": "Add getters to LetsChatNotifier\n\nin order to get the ConfigurationProperties correctly recognized we need\nto provide some getters for the properties.\n\nfixes #493",
    "date": "2017-07-23T16:54:13Z",
    "url": "https://github.com/codecentric/spring-boot-admin/commit/3f02e73f0727472346cb1dde34c7ed1a2270bf9a",
    "details": {
      "sha": "98a1fc3d828db83b1133f428c3a154c05203ad5f",
      "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/notify/LetsChatNotifier.java",
      "status": "modified",
      "additions": 103,
      "deletions": 81,
      "changes": 184,
      "blob_url": "https://github.com/codecentric/spring-boot-admin/blob/3f02e73f0727472346cb1dde34c7ed1a2270bf9a/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fnotify%2FLetsChatNotifier.java",
      "raw_url": "https://github.com/codecentric/spring-boot-admin/raw/3f02e73f0727472346cb1dde34c7ed1a2270bf9a/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fnotify%2FLetsChatNotifier.java",
      "contents_url": "https://api.github.com/repos/codecentric/spring-boot-admin/contents/spring-boot-admin-server%2Fsrc%2Fmain%2Fjava%2Fde%2Fcodecentric%2Fboot%2Fadmin%2Fnotify%2FLetsChatNotifier.java?ref=3f02e73f0727472346cb1dde34c7ed1a2270bf9a",
      "patch": "@@ -38,85 +38,107 @@\n  * @author Rico Pahlisch\n  */\n public class LetsChatNotifier extends AbstractStatusChangeNotifier {\n-\tprivate static final String DEFAULT_MESSAGE = \"*#{application.name}* (#{application.id}) is *#{to.status}*\";\n-\n-\tprivate final SpelExpressionParser parser = new SpelExpressionParser();\n-\tprivate RestTemplate restTemplate = new RestTemplate();\n-\n-\t/**\n-\t * Host URL for Let\u00b4s Chat\n-\t */\n-\tprivate URI url;\n-\n-\t/**\n-\t * Name of the room\n-\t */\n-\tprivate String room;\n-\n-\t/**\n-\t * Token for the Let\u00b4s chat API\n-\t */\n-\tprivate String token;\n-\n-\t/**\n-\t * username which sends notification\n-\t */\n-\tprivate String username = \"Spring Boot Admin\";\n-\n-\t/**\n-\t * Message template. SpEL template using event as root\n-\t */\n-\tprivate Expression message;\n-\n-\tpublic LetsChatNotifier() {\n-\t\tthis.message = parser.parseExpression(DEFAULT_MESSAGE, ParserContext.TEMPLATE_EXPRESSION);\n-\t}\n-\n-\t@Override\n-\tprotected void doNotify(ClientApplicationEvent event) throws Exception {\n-\t\tHttpHeaders headers = new HttpHeaders();\n-\t\theaders.setContentType(MediaType.APPLICATION_JSON);\n-\t\t// Let's Chat requiers the token as basic username, the password can be an arbitrary string.\n-\t\tString auth = Base64Utils.encodeToString(String.format(\"%s:%s\", token, username).getBytes());\n-\t\theaders.add(HttpHeaders.AUTHORIZATION, String.format(\"Basic %s\", auth));\n-\t\trestTemplate.exchange(createUrl(), HttpMethod.POST, new HttpEntity<>(createMessage(event), headers), Void.class);\n-\t}\n-\n-\tprivate URI createUrl() {\n-\t\treturn URI.create(String.format(\"%s/rooms/%s/messages\", url, room));\n-\t}\n-\n-\tpublic void setRestTemplate(RestTemplate restTemplate) {\n-\t\tthis.restTemplate = restTemplate;\n-\t}\n-\n-\tpublic void setUrl(URI url) {\n-\t\tthis.url = url;\n-\t}\n-\n-\tpublic void setUsername(String username) {\n-\t\tthis.username = username;\n-\t}\n-\n-\tpublic void setRoom(String room) {\n-\t\tthis.room = room;\n-\t}\n-\n-\tpublic void setToken(String token) {\n-\t\tthis.token = token;\n-\t}\n-\n-\tpublic void setMessage(String message) {\n-\t\tthis.message = parser.parseExpression(message, ParserContext.TEMPLATE_EXPRESSION);\n-\t}\n-\n-\tprotected Object createMessage(ClientApplicationEvent event) {\n-\t\tMap<String, String> messageJson = new HashMap<>();\n-\t\tmessageJson.put(\"text\", getText(event));\n-\t\treturn messageJson;\n-\t}\n-\n-\tprotected String getText(ClientApplicationEvent event) {\n-\t\treturn message.getValue(event, String.class);\n-\t}\n+    private static final String DEFAULT_MESSAGE = \"*#{application.name}* (#{application.id}) is *#{to.status}*\";\n+\n+    private final SpelExpressionParser parser = new SpelExpressionParser();\n+    private RestTemplate restTemplate = new RestTemplate();\n+\n+    /**\n+     * Host URL for Let\u00b4s Chat\n+     */\n+    private URI url;\n+\n+    /**\n+     * Name of the room\n+     */\n+    private String room;\n+\n+    /**\n+     * Token for the Let\u00b4s chat API\n+     */\n+    private String token;\n+\n+    /**\n+     * username which sends notification\n+     */\n+    private String username = \"Spring Boot Admin\";\n+\n+    /**\n+     * Message template. SpEL template using event as root\n+     */\n+    private Expression message;\n+\n+    public LetsChatNotifier() {\n+        this.message = parser.parseExpression(DEFAULT_MESSAGE, ParserContext.TEMPLATE_EXPRESSION);\n+    }\n+\n+    @Override\n+    protected void doNotify(ClientApplicationEvent event) throws Exception {\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.setContentType(MediaType.APPLICATION_JSON);\n+        // Let's Chat requiers the token as basic username, the password can be an arbitrary string.\n+        String auth = Base64Utils.encodeToString(String.format(\"%s:%s\", token, username).getBytes());\n+        headers.add(HttpHeaders.AUTHORIZATION, String.format(\"Basic %s\", auth));\n+        restTemplate.exchange(createUrl(), HttpMethod.POST, new HttpEntity<>(createMessage(event), headers),\n+                Void.class);\n+    }\n+\n+    private URI createUrl() {\n+        return URI.create(String.format(\"%s/rooms/%s/messages\", url, room));\n+    }\n+\n+    public void setRestTemplate(RestTemplate restTemplate) {\n+        this.restTemplate = restTemplate;\n+    }\n+\n+    public void setUrl(URI url) {\n+        this.url = url;\n+    }\n+\n+    public void setUsername(String username) {\n+        this.username = username;\n+    }\n+\n+    public void setRoom(String room) {\n+        this.room = room;\n+    }\n+\n+    public void setToken(String token) {\n+        this.token = token;\n+    }\n+\n+    public void setMessage(String message) {\n+        this.message = parser.parseExpression(message, ParserContext.TEMPLATE_EXPRESSION);\n+    }\n+\n+    protected Object createMessage(ClientApplicationEvent event) {\n+        Map<String, String> messageJson = new HashMap<>();\n+        messageJson.put(\"text\", getText(event));\n+        return messageJson;\n+    }\n+\n+    protected String getText(ClientApplicationEvent event) {\n+        return message.getValue(event, String.class);\n+    }\n+\n+\n+    public URI getUrl() {\n+        return url;\n+    }\n+\n+    public String getRoom() {\n+        return room;\n+    }\n+\n+    public String getToken() {\n+        return token;\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public String getMessage() {\n+        return message.getExpressionString();\n+    }\n }",
      "parent_sha": "21082226904b0a4e651bb0ba9daf94c7029b4a9e"
    }
  }
]