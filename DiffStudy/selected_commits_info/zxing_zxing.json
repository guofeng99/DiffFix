[
  {
    "oid": "6ae11863c7082cfeb62fa5075a488ec9588a01e6",
    "message": "Add hint to correct wrong dimension (#1901)\n\n* Add hint to correct wrong dimension\n\nFix issue #1900\n\n* Revert \"Add hint to correct wrong dimension\"\n\nThis reverts commit 16723b3434a78ab49894f611cfb57c3e712b9b97.\n\n* Correct wrong dimension to lower value\n\nFix issue #1900\n\n* Cleanup code\n\n---------\n\nCo-authored-by: Matthias Agethle <matthias.agethle@elca.ch>",
    "date": "2025-02-04T16:18:13Z",
    "url": "https://github.com/zxing/zxing/commit/6ae11863c7082cfeb62fa5075a488ec9588a01e6",
    "details": {
      "sha": "c284b61e7581dfab48874e576c9f055e4125fb41",
      "filename": "core/src/main/java/com/google/zxing/qrcode/detector/Detector.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/zxing/zxing/blob/6ae11863c7082cfeb62fa5075a488ec9588a01e6/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdetector%2FDetector.java",
      "raw_url": "https://github.com/zxing/zxing/raw/6ae11863c7082cfeb62fa5075a488ec9588a01e6/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdetector%2FDetector.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdetector%2FDetector.java?ref=6ae11863c7082cfeb62fa5075a488ec9588a01e6",
      "patch": "@@ -211,7 +211,8 @@ private static int computeDimension(ResultPoint topLeft,\n         dimension--;\n         break;\n       case 3:\n-        throw NotFoundException.getNotFoundInstance();\n+        dimension -= 2;\n+        break;\n     }\n     return dimension;\n   }",
      "parent_sha": "2dfb2054af1e1872ac5354e6d8218931fb88e021"
    }
  },
  {
    "oid": "674783b8dd9167a1b338ea73c959ec0725f26019",
    "message": "Fix RS encoder test, per hwkns\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2236 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2012-03-28T18:01:52Z",
    "url": "https://github.com/zxing/zxing/commit/674783b8dd9167a1b338ea73c959ec0725f26019",
    "details": {
      "sha": "2ed1856d7897a20d1bcb4d1a351c3e62f601cf67",
      "filename": "core/test/src/com/google/zxing/common/reedsolomon/ReedSolomonEncoderQRCodeTestCase.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/zxing/zxing/blob/674783b8dd9167a1b338ea73c959ec0725f26019/core%2Ftest%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2Freedsolomon%2FReedSolomonEncoderQRCodeTestCase.java",
      "raw_url": "https://github.com/zxing/zxing/raw/674783b8dd9167a1b338ea73c959ec0725f26019/core%2Ftest%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2Freedsolomon%2FReedSolomonEncoderQRCodeTestCase.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Ftest%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2Freedsolomon%2FReedSolomonEncoderQRCodeTestCase.java?ref=674783b8dd9167a1b338ea73c959ec0725f26019",
      "patch": "@@ -45,7 +45,7 @@ public void testQRCodeVersusDecoder() throws Exception {\n     ReedSolomonEncoder encoder = new ReedSolomonEncoder(GenericGF.QR_CODE_FIELD_256);\n     ReedSolomonDecoder decoder = new ReedSolomonDecoder(GenericGF.QR_CODE_FIELD_256);\n     for (int i = 0; i < 100; i++) {\n-      int size = 1 + random.nextInt(1000);\n+      int size = 2 + random.nextInt(254);\n       int[] toEncode = new int[size];\n       int ecBytes = 1 + random.nextInt(2 * (1 + size / 8));\n       ecBytes = Math.min(ecBytes, size - 1);\n@@ -56,6 +56,7 @@ public void testQRCodeVersusDecoder() throws Exception {\n       int[] original = new int[dataBytes];\n       System.arraycopy(toEncode, 0, original, 0, dataBytes);\n       encoder.encode(toEncode, ecBytes);\n+      corrupt(toEncode, ecBytes / 2, random);\n       decoder.decode(toEncode, ecBytes);\n       assertArraysEqual(original, 0, toEncode, 0, dataBytes);\n     }",
      "parent_sha": "75d26706c2ae2f96451eb13dae370d9c434242fd"
    }
  },
  {
    "oid": "84d08ef61f0a455071a25fa5bed4321a818e5f5b",
    "message": "Revert inadvertent change to non-private API",
    "date": "2016-05-08T08:30:51Z",
    "url": "https://github.com/zxing/zxing/commit/84d08ef61f0a455071a25fa5bed4321a818e5f5b",
    "details": {
      "sha": "bdb7e10850612b0b234defc7e73db72f3341201a",
      "filename": "core/src/main/java/com/google/zxing/oned/rss/expanded/decoders/AbstractExpandedDecoder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/84d08ef61f0a455071a25fa5bed4321a818e5f5b/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Foned%2Frss%2Fexpanded%2Fdecoders%2FAbstractExpandedDecoder.java",
      "raw_url": "https://github.com/zxing/zxing/raw/84d08ef61f0a455071a25fa5bed4321a818e5f5b/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Foned%2Frss%2Fexpanded%2Fdecoders%2FAbstractExpandedDecoder.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Foned%2Frss%2Fexpanded%2Fdecoders%2FAbstractExpandedDecoder.java?ref=84d08ef61f0a455071a25fa5bed4321a818e5f5b",
      "patch": "@@ -48,7 +48,7 @@ protected final BitArray getInformation() {\n     return information;\n   }\n \n-  final GeneralAppIdDecoder getGeneralDecoder() {\n+  protected final GeneralAppIdDecoder getGeneralDecoder() {\n     return generalDecoder;\n   }\n ",
      "parent_sha": "30bb62bf4f8f9e837e611a1cb577af1a31b92b58"
    }
  },
  {
    "oid": "a79fad4b9cb7adb6fb600a36c0b88ab8d3a14eec",
    "message": "Quick shortening of a method in FinderPatternFinder that I just noticed\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@523 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2008-07-21T21:52:43Z",
    "url": "https://github.com/zxing/zxing/commit/a79fad4b9cb7adb6fb600a36c0b88ab8d3a14eec",
    "details": {
      "sha": "6ec97b1f8fd91d7e2489ae31a5e6d4fcec3f348d",
      "filename": "core/src/com/google/zxing/qrcode/detector/FinderPatternFinder.java",
      "status": "modified",
      "additions": 12,
      "deletions": 21,
      "changes": 33,
      "blob_url": "https://github.com/zxing/zxing/blob/a79fad4b9cb7adb6fb600a36c0b88ab8d3a14eec/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdetector%2FFinderPatternFinder.java",
      "raw_url": "https://github.com/zxing/zxing/raw/a79fad4b9cb7adb6fb600a36c0b88ab8d3a14eec/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdetector%2FFinderPatternFinder.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdetector%2FFinderPatternFinder.java?ref=a79fad4b9cb7adb6fb600a36c0b88ab8d3a14eec",
      "patch": "@@ -473,28 +473,19 @@ private FinderPattern[] selectBestPatterns() throws ReaderException {\n       throw new ReaderException(\"Could not find three finder patterns\");\r\n     }\r\n \r\n-    if (size == 3) {\r\n-      // Found just enough -- hope these are good!\r\n-      return new FinderPattern[]{\r\n-          (FinderPattern) possibleCenters.elementAt(0),\r\n-          (FinderPattern) possibleCenters.elementAt(1),\r\n-          (FinderPattern) possibleCenters.elementAt(2)\r\n-      };\r\n-    }\r\n-\r\n-    possibleCenters.setSize(size);\r\n-\r\n-    // Hmm, multiple found. We need to pick the best three. Find the most\r\n-    // popular ones whose module size is nearest the average\r\n-\r\n-    float averageModuleSize = 0.0f;\r\n-    for (int i = 0; i < size; i++) {\r\n-      averageModuleSize += ((FinderPattern) possibleCenters.elementAt(i)).getEstimatedModuleSize();\r\n+    if (size > 3) {\r\n+      // Throw away all but those first size candidate points we found.\r\n+      possibleCenters.setSize(size);\r\n+      //  We need to pick the best three. Find the most\r\n+      // popular ones whose module size is nearest the average\r\n+      float averageModuleSize = 0.0f;\r\n+      for (int i = 0; i < size; i++) {\r\n+        averageModuleSize += ((FinderPattern) possibleCenters.elementAt(i)).getEstimatedModuleSize();\r\n+      }\r\n+      averageModuleSize /= (float) size;\r\n+      // We don't have java.util.Collections in J2ME\r\n+      Collections.insertionSort(possibleCenters, new ClosestToAverageComparator(averageModuleSize));\r\n     }\r\n-    averageModuleSize /= (float) size;\r\n-\r\n-    // We don't have java.util.Collections in J2ME\r\n-    Collections.insertionSort(possibleCenters, new ClosestToAverageComparator(averageModuleSize));\r\n \r\n     return new FinderPattern[]{\r\n         (FinderPattern) possibleCenters.elementAt(0),\r",
      "parent_sha": "5c8b0558e1d38de9957d77886b53a48291a4c0e7"
    }
  },
  {
    "oid": "737fee3e6970bd8087e42b8662810c87d3aa7efd",
    "message": "Add the nopass handling in the Android client.\n\nTODO:\n1. Document the encoding.\n2. Test out the interaction with appspot.com with escaped semicolons and colons\n\n\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@1440 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2010-06-17T04:33:59Z",
    "url": "https://github.com/zxing/zxing/commit/737fee3e6970bd8087e42b8662810c87d3aa7efd",
    "details": {
      "sha": "344e3fdb639e13fd377a204dbb68646476d2d00f",
      "filename": "android/src/com/google/zxing/client/android/wifi/WifiActivity.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/zxing/zxing/blob/737fee3e6970bd8087e42b8662810c87d3aa7efd/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fwifi%2FWifiActivity.java",
      "raw_url": "https://github.com/zxing/zxing/raw/737fee3e6970bd8087e42b8662810c87d3aa7efd/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fwifi%2FWifiActivity.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fwifi%2FWifiActivity.java?ref=737fee3e6970bd8087e42b8662810c87d3aa7efd",
      "patch": "@@ -45,12 +45,14 @@ public class WifiActivity extends Activity  {\n   private ConnectedReceiver connectedReceiver;\n \n   public enum NetworkType {\n-    NETWORK_WEP, NETWORK_WPA,\n+    NETWORK_WEP, NETWORK_WPA, NETWORK_NOPASS,\n   }\n \n   private int changeNetwork(NetworkSetting setting) {\n     // If the password is empty, this is an unencrypted network\n-    if (setting.getPassword() == null || setting.getPassword().length() == 0) {\n+    if (setting.getPassword() == null || setting.getPassword().length() == 0 ||\n+        setting.getNetworkType() == null ||\n+        setting.getNetworkType() == NetworkType.NETWORK_NOPASS) {\n       return changeNetworkUnEncrypted(setting);\n     }\n     if (setting.getNetworkType() == NetworkType.NETWORK_WPA) {\n@@ -157,6 +159,8 @@ protected void onCreate(Bundle savedInstanceState) {\n       networkT = NetworkType.NETWORK_WPA;\n     } else if (networkType.contains(\"WEP\")) {\n       networkT = NetworkType.NETWORK_WEP;\n+    } else if (networkType.contains(\"nopass\")) {\n+     networkT = NetworkType.NETWORK_NOPASS; \n     } else {\n       // Got an incorrect network type\n       finish();",
      "parent_sha": "c938a5d196259334905ef87e4285de6f87419bca"
    }
  },
  {
    "oid": "b14a77502d826ae3dfa8d81c4ac213f6d79d6ee2",
    "message": "One more change to accommodate differences in jpeg libraries. Some machines will report this test as too lax by one image.\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@1568 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2010-08-26T14:58:03Z",
    "url": "https://github.com/zxing/zxing/commit/b14a77502d826ae3dfa8d81c4ac213f6d79d6ee2",
    "details": {
      "sha": "00f1e3ba989ce1f48e69d9287394fd11afc7d8d4",
      "filename": "core/test/src/com/google/zxing/oned/EAN13BlackBox1TestCase.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/b14a77502d826ae3dfa8d81c4ac213f6d79d6ee2/core%2Ftest%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FEAN13BlackBox1TestCase.java",
      "raw_url": "https://github.com/zxing/zxing/raw/b14a77502d826ae3dfa8d81c4ac213f6d79d6ee2/core%2Ftest%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FEAN13BlackBox1TestCase.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Ftest%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FEAN13BlackBox1TestCase.java?ref=b14a77502d826ae3dfa8d81c4ac213f6d79d6ee2",
      "patch": "@@ -27,7 +27,7 @@ public final class EAN13BlackBox1TestCase extends AbstractBlackBoxTestCase {\n \n   public EAN13BlackBox1TestCase() {\n     super(\"test/data/blackbox/ean13-1\", new MultiFormatReader(), BarcodeFormat.EAN_13);\n-    addTest(30, 32, 0.0f);\n+    addTest(29, 32, 0.0f);\n     addTest(27, 32, 180.0f);\n   }\n ",
      "parent_sha": "1ba5eceeb2ab16586a50809ebaa54e0649d139a5"
    }
  },
  {
    "oid": "a2159ed0f4d0a2860692f733eca1eaab3eb325da",
    "message": "change the comment\n\nChange the comment",
    "date": "2015-10-01T16:23:07Z",
    "url": "https://github.com/zxing/zxing/commit/a2159ed0f4d0a2860692f733eca1eaab3eb325da",
    "details": {
      "sha": "cdf3af682cb9659651eb5a8bca6a336a0834465f",
      "filename": "core/src/test/java/com/google/zxing/BufferedImageLuminanceSource.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/zxing/zxing/blob/a2159ed0f4d0a2860692f733eca1eaab3eb325da/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fzxing%2FBufferedImageLuminanceSource.java",
      "raw_url": "https://github.com/zxing/zxing/raw/a2159ed0f4d0a2860692f733eca1eaab3eb325da/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fzxing%2FBufferedImageLuminanceSource.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fzxing%2FBufferedImageLuminanceSource.java?ref=a2159ed0f4d0a2860692f733eca1eaab3eb325da",
      "patch": "@@ -68,7 +68,9 @@ public BufferedImageLuminanceSource(BufferedImage image, int left, int top, int\n             pixel = 0xFFFFFFFF; // = white\n           }\n \n-          // .229R + 0.587G + 0.114B (YUV/YIQ for PAL and NTSC)\n+          // .299R + 0.587G + 0.114B (YUV/YIQ for PAL and NTSC), \n+          // (306*R) >> 10 is approximately equal to R*0.299, and so on.\n+          // 0x200 >> 10 is 0.5, it implements rounding.\n           buffer[x] =\n               (306 * ((pixel >> 16) & 0xFF) +\n                601 * ((pixel >> 8) & 0xFF) +",
      "parent_sha": "b5e9cffeba47a5bdd4fe78a661cbc4b664b067c6"
    }
  },
  {
    "oid": "09ce5db11de91c8da01a7bdabde25a7990d9ae47",
    "message": "Workaround (I think) for bizarre array corruption problem on Sun WTK and some SE phones\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@619 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2008-10-15T11:29:22Z",
    "url": "https://github.com/zxing/zxing/commit/09ce5db11de91c8da01a7bdabde25a7990d9ae47",
    "details": {
      "sha": "04d0ca39be78db5818386ae1026e318add273ac2",
      "filename": "javame/src/com/google/zxing/client/j2me/LCDUIImageMonochromeBitmapSource.java",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/zxing/zxing/blob/09ce5db11de91c8da01a7bdabde25a7990d9ae47/javame%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2me%2FLCDUIImageMonochromeBitmapSource.java",
      "raw_url": "https://github.com/zxing/zxing/raw/09ce5db11de91c8da01a7bdabde25a7990d9ae47/javame%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2me%2FLCDUIImageMonochromeBitmapSource.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/javame%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2me%2FLCDUIImageMonochromeBitmapSource.java?ref=09ce5db11de91c8da01a7bdabde25a7990d9ae47",
      "patch": "@@ -30,7 +30,8 @@ public final class LCDUIImageMonochromeBitmapSource extends BaseMonochromeBitmap\n   private final Image image;\n   private final int height;\n   private final int width;\n-  private final int[] rgbRow;\n+  // For why this isn't final, see below\n+  private int[] rgbRow;\n   private final int[] pixelHolder;\n   private int cachedRow;\n \n@@ -52,8 +53,13 @@ public int getWidth() {\n   }\n \n   public int getLuminance(int x, int y) {\n+\n+    // Below, why the check for rgbRow being the right size? it should never change size\n+    // or need to be reallocated. But bizarrely we have seen a but on Sun's WTK, and on\n+    // some phones, where the array becomes zero-sized somehow. So we keep making sure the\n+    // array is OK.\n     int pixel;\n-    if (cachedRow == y) {\n+    if (cachedRow == y && rgbRow.length == width) {\n       pixel = rgbRow[x];\n     } else {\n       image.getRGB(pixelHolder, 0, width, x, y, 1, 1);\n@@ -79,6 +85,10 @@ public int getLuminance(int x, int y) {\n \n   public void cacheRowForLuminance(int y) {\n     if (y != cachedRow) {\n+      // See explanation above\n+      if (rgbRow.length != width) {\n+        rgbRow = new int[width];\n+      }\n       image.getRGB(rgbRow, 0, width, 0, y, width, 1);\n       cachedRow = y;\n     }",
      "parent_sha": "edcf34f0c527ac8bee748385706c94ae076b0ea5"
    }
  },
  {
    "oid": "c42131e86660def8b8ccd1cd6bcce421a8d62b40",
    "message": "Issue #41 : Handle null barcode metadata in PDF417 in corner case",
    "date": "2014-01-29T13:22:32Z",
    "url": "https://github.com/zxing/zxing/commit/c42131e86660def8b8ccd1cd6bcce421a8d62b40",
    "details": {
      "sha": "5ef02973028c2180c4cc99b5eb7c7455f38ca687",
      "filename": "core/src/main/java/com/google/zxing/pdf417/decoder/PDF417ScanningDecoder.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/zxing/zxing/blob/c42131e86660def8b8ccd1cd6bcce421a8d62b40/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fpdf417%2Fdecoder%2FPDF417ScanningDecoder.java",
      "raw_url": "https://github.com/zxing/zxing/raw/c42131e86660def8b8ccd1cd6bcce421a8d62b40/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fpdf417%2Fdecoder%2FPDF417ScanningDecoder.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fpdf417%2Fdecoder%2FPDF417ScanningDecoder.java?ref=c42131e86660def8b8ccd1cd6bcce421a8d62b40",
      "patch": "@@ -183,14 +183,16 @@ private static int getMax(int[] values) {\n \n   private static BarcodeMetadata getBarcodeMetadata(DetectionResultRowIndicatorColumn leftRowIndicatorColumn,\n                                                     DetectionResultRowIndicatorColumn rightRowIndicatorColumn) {\n-    if (leftRowIndicatorColumn == null || leftRowIndicatorColumn.getBarcodeMetadata() == null) {\n+    BarcodeMetadata leftBarcodeMetadata;\n+    if (leftRowIndicatorColumn == null ||\n+        (leftBarcodeMetadata = leftRowIndicatorColumn.getBarcodeMetadata()) == null) {\n       return rightRowIndicatorColumn == null ? null : rightRowIndicatorColumn.getBarcodeMetadata();\n     }\n-    if (rightRowIndicatorColumn == null || rightRowIndicatorColumn.getBarcodeMetadata() == null) {\n-      return leftRowIndicatorColumn.getBarcodeMetadata();\n+    BarcodeMetadata rightBarcodeMetadata;\n+    if (rightRowIndicatorColumn == null ||\n+        (rightBarcodeMetadata = rightRowIndicatorColumn.getBarcodeMetadata()) == null) {\n+      return leftBarcodeMetadata;\n     }\n-    BarcodeMetadata leftBarcodeMetadata = leftRowIndicatorColumn.getBarcodeMetadata();\n-    BarcodeMetadata rightBarcodeMetadata = rightRowIndicatorColumn.getBarcodeMetadata();\n \n     if (leftBarcodeMetadata.getColumnCount() != rightBarcodeMetadata.getColumnCount() &&\n         leftBarcodeMetadata.getErrorCorrectionLevel() != rightBarcodeMetadata.getErrorCorrectionLevel() &&",
      "parent_sha": "8e2e0bc94db5124a66d9673443eb491afbb0655a"
    }
  },
  {
    "oid": "77aabfc4572fb22c228e00c4681aa3070f6f7e6e",
    "message": "Issue #147 : handle corner case as normal failed read rather than AIOOBE",
    "date": "2014-05-15T12:26:04Z",
    "url": "https://github.com/zxing/zxing/commit/77aabfc4572fb22c228e00c4681aa3070f6f7e6e",
    "details": {
      "sha": "56ead37cbace64296da461a2594a08ca069e4d4a",
      "filename": "core/src/main/java/com/google/zxing/pdf417/decoder/PDF417ScanningDecoder.java",
      "status": "modified",
      "additions": 16,
      "deletions": 12,
      "changes": 28,
      "blob_url": "https://github.com/zxing/zxing/blob/77aabfc4572fb22c228e00c4681aa3070f6f7e6e/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fpdf417%2Fdecoder%2FPDF417ScanningDecoder.java",
      "raw_url": "https://github.com/zxing/zxing/raw/77aabfc4572fb22c228e00c4681aa3070f6f7e6e/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fpdf417%2Fdecoder%2FPDF417ScanningDecoder.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fpdf417%2Fdecoder%2FPDF417ScanningDecoder.java?ref=77aabfc4572fb22c228e00c4681aa3070f6f7e6e",
      "patch": "@@ -326,27 +326,31 @@ private static DecoderResult createDecoderResultFromAmbiguousValues(int ecLevel,\n     throw ChecksumException.getChecksumInstance();\n   }\n \n-  private static BarcodeValue[][] createBarcodeMatrix(DetectionResult detectionResult) {\n-    BarcodeValue[][] barcodeMatrix = new BarcodeValue[detectionResult.getBarcodeRowCount()][detectionResult\n-        .getBarcodeColumnCount() + 2];\n+  private static BarcodeValue[][] createBarcodeMatrix(DetectionResult detectionResult) throws FormatException {\n+    BarcodeValue[][] barcodeMatrix =\n+        new BarcodeValue[detectionResult.getBarcodeRowCount()][detectionResult.getBarcodeColumnCount() + 2];\n     for (int row = 0; row < barcodeMatrix.length; row++) {\n       for (int column = 0; column < barcodeMatrix[row].length; column++) {\n         barcodeMatrix[row][column] = new BarcodeValue();\n       }\n     }\n \n-    int column = -1;\n+    int column = 0;\n     for (DetectionResultColumn detectionResultColumn : detectionResult.getDetectionResultColumns()) {\n-      column++;\n-      if (detectionResultColumn == null) {\n-        continue;\n-      }\n-      for (Codeword codeword : detectionResultColumn.getCodewords()) {\n-        if (codeword == null || codeword.getRowNumber() == -1) {\n-          continue;\n+      if (detectionResultColumn != null) {\n+        for (Codeword codeword : detectionResultColumn.getCodewords()) {\n+          if (codeword != null) {\n+            int rowNumber = codeword.getRowNumber();\n+            if (rowNumber >= 0) {\n+              if (rowNumber >= barcodeMatrix.length) {\n+                throw FormatException.getFormatInstance();\n+              }\n+              barcodeMatrix[rowNumber][column].setValue(codeword.getValue());\n+            }\n+          }\n         }\n-        barcodeMatrix[codeword.getRowNumber()][column].setValue(codeword.getValue());\n       }\n+      column++;\n     }\n     return barcodeMatrix;\n   }",
      "parent_sha": "2a8cd871bc38b4c52155a059c32e3b73fbcf79ca"
    }
  },
  {
    "oid": "42cfa9ca3edaf561c91098207a0f65d7f1713146",
    "message": "Closes Issue #37 : don't respond to (invalid?) UPC-E codes that aren't 8 digits",
    "date": "2014-01-23T22:14:26Z",
    "url": "https://github.com/zxing/zxing/commit/42cfa9ca3edaf561c91098207a0f65d7f1713146",
    "details": {
      "sha": "bed1a7dc1e2265ab45251d7011d109f95dee452e",
      "filename": "core/src/main/java/com/google/zxing/client/result/ProductResultParser.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/42cfa9ca3edaf561c91098207a0f65d7f1713146/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fresult%2FProductResultParser.java",
      "raw_url": "https://github.com/zxing/zxing/raw/42cfa9ca3edaf561c91098207a0f65d7f1713146/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fresult%2FProductResultParser.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fresult%2FProductResultParser.java?ref=42cfa9ca3edaf561c91098207a0f65d7f1713146",
      "patch": "@@ -43,7 +43,7 @@ public ProductParsedResult parse(Result result) {\n \n     String normalizedProductID;\n     // Expand UPC-E for purposes of searching\n-    if (format == BarcodeFormat.UPC_E) {\n+    if (format == BarcodeFormat.UPC_E && rawText.length() == 8) {\n       normalizedProductID = UPCEReader.convertUPCEtoUPCA(rawText);\n     } else {\n       normalizedProductID = rawText;",
      "parent_sha": "d7c78074ecf5e8ca1ed7170a90826b2a48194e57"
    }
  },
  {
    "oid": "4f0766724b43c19afdd98c1d096901edff328f39",
    "message": "Allow selection of larger preview size; keep max reticle size the same\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2319 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2012-06-24T16:01:11Z",
    "url": "https://github.com/zxing/zxing/commit/4f0766724b43c19afdd98c1d096901edff328f39",
    "details": {
      "sha": "6dbc7700792fabb73f9549c5be2bf684dceeba00",
      "filename": "android/src/com/google/zxing/client/android/camera/CameraConfigurationManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/4f0766724b43c19afdd98c1d096901edff328f39/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fcamera%2FCameraConfigurationManager.java",
      "raw_url": "https://github.com/zxing/zxing/raw/4f0766724b43c19afdd98c1d096901edff328f39/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fcamera%2FCameraConfigurationManager.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fcamera%2FCameraConfigurationManager.java?ref=4f0766724b43c19afdd98c1d096901edff328f39",
      "patch": "@@ -45,7 +45,7 @@ final class CameraConfigurationManager {\n   // below will still select the default (presumably 320x240) size for these. This prevents\n   // accidental selection of very low resolution on some devices.\n   private static final int MIN_PREVIEW_PIXELS = 470 * 320; // normal screen\n-  private static final int MAX_PREVIEW_PIXELS = 800 * 600; // more than large/HD screen\n+  private static final int MAX_PREVIEW_PIXELS = 960 * 720; // uses full screen resolution on all 'large' screens\n \n   private final Context context;\n   private Point screenResolution;",
      "parent_sha": "585318cb22d4cd165ecd1017514c1a7687fb8243"
    }
  },
  {
    "oid": "be03860ec97f1193149de460b1b4fc1bcb5e5ad7",
    "message": "Typo fix - mixed up x/y!\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2037 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2011-11-16T10:00:28Z",
    "url": "https://github.com/zxing/zxing/commit/be03860ec97f1193149de460b1b4fc1bcb5e5ad7",
    "details": {
      "sha": "18392a8e8e542702978321093fce7638d0156b42",
      "filename": "javase/src/com/google/zxing/client/j2se/BufferedImageLuminanceSource.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/zxing/zxing/blob/be03860ec97f1193149de460b1b4fc1bcb5e5ad7/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FBufferedImageLuminanceSource.java",
      "raw_url": "https://github.com/zxing/zxing/raw/be03860ec97f1193149de460b1b4fc1bcb5e5ad7/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FBufferedImageLuminanceSource.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FBufferedImageLuminanceSource.java?ref=be03860ec97f1193149de460b1b4fc1bcb5e5ad7",
      "patch": "@@ -51,10 +51,10 @@ public BufferedImageLuminanceSource(BufferedImage image, int left, int top, int\n     // The color of fully-transparent pixels is irrelevant. They are often, technically, fully-transparent\n     // black (0 alpha, and then 0 RGB). They are often used, of course as the \"white\" area in a\n     // barcode image. Force any such pixel to be white:\n-    for (int i = top; i < top + height; i++) {\n-      for (int j = left; j < left + width; j++) {\n-        if ((image.getRGB(i, j) & 0xFF000000) == 0) {\n-          image.setRGB(i, j, 0xFFFFFFFF); // = white\n+    for (int y = top; y < top + height; y++) {\n+      for (int x = left; x < left + width; x++) {\n+        if ((image.getRGB(x, y) & 0xFF000000) == 0) {\n+          image.setRGB(x, y, 0xFFFFFFFF); // = white\n         }\n       }\n     }",
      "parent_sha": "505b14de04065f31256b9ee168347d3ffdfadf4b"
    }
  },
  {
    "oid": "4a683a8266e76b2db1ad14d7e75387f50d8efcd2",
    "message": "Fix possible strange NPE on EncodeActivity\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2359 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2012-07-23T09:20:42Z",
    "url": "https://github.com/zxing/zxing/commit/4a683a8266e76b2db1ad14d7e75387f50d8efcd2",
    "details": {
      "sha": "9db886cc5c115d768b5faa066619aa13482c7126",
      "filename": "android/src/com/google/zxing/client/android/encode/EncodeActivity.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/zxing/zxing/blob/4a683a8266e76b2db1ad14d7e75387f50d8efcd2/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fencode%2FEncodeActivity.java",
      "raw_url": "https://github.com/zxing/zxing/raw/4a683a8266e76b2db1ad14d7e75387f50d8efcd2/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fencode%2FEncodeActivity.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fencode%2FEncodeActivity.java?ref=4a683a8266e76b2db1ad14d7e75387f50d8efcd2",
      "patch": "@@ -94,8 +94,11 @@ public boolean onOptionsItemSelected(MenuItem item) {\n         return true;\n       case R.id.menu_encode:\n         Intent intent = getIntent();\n+        if (intent == null) {\n+          return false;\n+        }\n         intent.putExtra(USE_VCARD_KEY, !qrCodeEncoder.isUseVCard());\n-        startActivity(getIntent());\n+        startActivity(intent);\n         finish();\n         return true;\n       default:",
      "parent_sha": "99c99f73140d4f15a14ca07db17cd2f960511f9a"
    }
  },
  {
    "oid": "5287b54bb20d53da4f5dbdc4675fe0997c257749",
    "message": "Issue 1184 treat semicolon field separator as newline\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2214 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2012-03-02T23:41:09Z",
    "url": "https://github.com/zxing/zxing/commit/5287b54bb20d53da4f5dbdc4675fe0997c257749",
    "details": {
      "sha": "b5493e3a4feb14add4643b90e1859f8cbdadbf61",
      "filename": "core/src/com/google/zxing/client/result/VCardResultParser.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/zxing/zxing/blob/5287b54bb20d53da4f5dbdc4675fe0997c257749/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fresult%2FVCardResultParser.java",
      "raw_url": "https://github.com/zxing/zxing/raw/5287b54bb20d53da4f5dbdc4675fe0997c257749/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fresult%2FVCardResultParser.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fresult%2FVCardResultParser.java?ref=5287b54bb20d53da4f5dbdc4675fe0997c257749",
      "patch": "@@ -41,6 +41,7 @@ public final class VCardResultParser extends ResultParser {\n   private static final Pattern VCARD_ESCAPES = Pattern.compile(\"\\\\\\\\([,;\\\\\\\\])\");\n   private static final Pattern EQUALS = Pattern.compile(\"=\");\n   private static final Pattern SEMICOLON = Pattern.compile(\";\");\n+  private static final Pattern SEMICOLONS = Pattern.compile(\";+\");\n \n   @Override\n   public AddressBookParsedResult parse(Result result) {\n@@ -64,7 +65,10 @@ public AddressBookParsedResult parse(Result result) {\n     List<List<String>> addresses = matchVCardPrefixedField(\"ADR\", rawText, true);\n     if (addresses != null) {\n       for (List<String> list : addresses) {\n-        list.set(0, list.get(0));\n+        String adr = list.get(0);\n+        // Semicolon separators -- just make them a newline\n+        adr = SEMICOLONS.matcher(adr).replaceAll(\"\\n\").trim();\n+        list.set(0, adr);\n       }\n     }\n     List<String> org = matchSingleVCardPrefixedField(\"ORG\", rawText, true);",
      "parent_sha": "240424bec089eefd017a13d79209cf576235caa4"
    }
  },
  {
    "oid": "2935184135890f5c350e19e2b05d268014907d4d",
    "message": "Issue 1742 fix back-tick in text encodation set\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2850 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2013-07-28T09:49:23Z",
    "url": "https://github.com/zxing/zxing/commit/2935184135890f5c350e19e2b05d268014907d4d",
    "details": {
      "sha": "598a8ede770063704100198b3e990e2f0d28e0ca",
      "filename": "core/src/com/google/zxing/datamatrix/decoder/DecodedBitStreamParser.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/2935184135890f5c350e19e2b05d268014907d4d/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fdatamatrix%2Fdecoder%2FDecodedBitStreamParser.java",
      "raw_url": "https://github.com/zxing/zxing/raw/2935184135890f5c350e19e2b05d268014907d4d/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fdatamatrix%2Fdecoder%2FDecodedBitStreamParser.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fdatamatrix%2Fdecoder%2FDecodedBitStreamParser.java?ref=2935184135890f5c350e19e2b05d268014907d4d",
      "patch": "@@ -72,7 +72,7 @@ private enum Mode {\n   };\n \n   private static final char[] TEXT_SHIFT3_SET_CHARS = {\n-    '\\'', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\n+    '`', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\n     'O',  'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '{', '|', '}', '~', (char) 127\n   };\n ",
      "parent_sha": "7c3f66d7daed7960c9aeae054295d87c615a2b2a"
    }
  },
  {
    "oid": "79b8454186506396e017ac373bf7b423288ab962",
    "message": "Update ITFWriter.java\n\nFixed spelling of text within \"invalid input\" exception.",
    "date": "2015-12-03T00:05:48Z",
    "url": "https://github.com/zxing/zxing/commit/79b8454186506396e017ac373bf7b423288ab962",
    "details": {
      "sha": "a33d6896c837d8482d932b7d67d56837f2960e54",
      "filename": "core/src/main/java/com/google/zxing/oned/ITFWriter.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/zxing/zxing/blob/79b8454186506396e017ac373bf7b423288ab962/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Foned%2FITFWriter.java",
      "raw_url": "https://github.com/zxing/zxing/raw/79b8454186506396e017ac373bf7b423288ab962/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Foned%2FITFWriter.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Foned%2FITFWriter.java?ref=79b8454186506396e017ac373bf7b423288ab962",
      "patch": "@@ -50,7 +50,7 @@ public BitMatrix encode(String contents,\n   public boolean[] encode(String contents) {\n     int length = contents.length();\n     if (length % 2 != 0) {\n-      throw new IllegalArgumentException(\"The lenght of the input should be even\");\n+      throw new IllegalArgumentException(\"The length of the input should be even\");\n     }\n     if (length > 80) {\n       throw new IllegalArgumentException(\n@@ -73,4 +73,4 @@ public boolean[] encode(String contents) {\n     return result;\n   }\n \n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "2b0ab611288463bb559722780157374aa87e487b"
    }
  },
  {
    "oid": "4ed7e4ac9680c47cc7694b42990218b4aac3f846",
    "message": "Make sure checkboxes are enabled correctly on first load\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@1479 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2010-07-13T10:34:13Z",
    "url": "https://github.com/zxing/zxing/commit/4ed7e4ac9680c47cc7694b42990218b4aac3f846",
    "details": {
      "sha": "04e1441045662f73a6951ea44d029601c67f4df9",
      "filename": "android/src/com/google/zxing/client/android/PreferencesActivity.java",
      "status": "modified",
      "additions": 15,
      "deletions": 5,
      "changes": 20,
      "blob_url": "https://github.com/zxing/zxing/blob/4ed7e4ac9680c47cc7694b42990218b4aac3f846/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FPreferencesActivity.java",
      "raw_url": "https://github.com/zxing/zxing/raw/4ed7e4ac9680c47cc7694b42990218b4aac3f846/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FPreferencesActivity.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FPreferencesActivity.java?ref=4ed7e4ac9680c47cc7694b42990218b4aac3f846",
      "patch": "@@ -56,16 +56,26 @@ protected void onCreate(Bundle icicle) {\n     preferences.getSharedPreferences().registerOnSharedPreferenceChangeListener(this);\n     decode1D = (CheckBoxPreference) preferences.findPreference(KEY_DECODE_1D);\n     decodeQR = (CheckBoxPreference) preferences.findPreference(KEY_DECODE_QR);\n+    disableLastCheckedPref();\n   }\n \n-  // Prevent the user from turning off both decode options\n   public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\n-    if (key.equals(KEY_DECODE_1D)) {\n-      decodeQR.setEnabled(decode1D.isChecked());\n+    disableLastCheckedPref();\n+  }\n+\n+  private void disableLastCheckedPref() {\n+    if (decode1D.isChecked()) {\n+      decodeQR.setEnabled(true);\n+    } else {\n+      decodeQR.setEnabled(false);\n       decodeQR.setChecked(true);\n-    } else if (key.equals(KEY_DECODE_QR)) {\n-      decode1D.setEnabled(decodeQR.isChecked());\n+    }\n+    if (decodeQR.isChecked()) {\n+      decode1D.setEnabled(true);\n+    } else {\n+      decode1D.setEnabled(false);\n       decode1D.setChecked(true);\n     }\n   }\n+\n }",
      "parent_sha": "e46c6f1e9f02c396e2813e2f47f331be7d07539b"
    }
  },
  {
    "oid": "af555d2409e6cf83d488e3d86412263bde9e91d7",
    "message": "Renaming two member variables so they no longer share names with their getters.\n\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@606 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2008-10-08T20:42:04Z",
    "url": "https://github.com/zxing/zxing/commit/af555d2409e6cf83d488e3d86412263bde9e91d7",
    "details": {
      "sha": "f36caa756db4211c825eec62537c54bf79946ea1",
      "filename": "core/src/com/google/zxing/common/reedsolomon/GF256.java",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/zxing/zxing/blob/af555d2409e6cf83d488e3d86412263bde9e91d7/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2Freedsolomon%2FGF256.java",
      "raw_url": "https://github.com/zxing/zxing/raw/af555d2409e6cf83d488e3d86412263bde9e91d7/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2Freedsolomon%2FGF256.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2Freedsolomon%2FGF256.java?ref=af555d2409e6cf83d488e3d86412263bde9e91d7",
      "patch": "@@ -31,8 +31,8 @@ public final class GF256 {\n   public static final GF256 QR_CODE_FIELD = new GF256(0x011D); // x^8 + x^4 + x^3 + x^2 + 1\n   public static final GF256 DATA_MATRIX_FIELD = new GF256(0x012D); // x^8 + x^5 + x^3 + x^2 + 1\n \n-  private final int[] exp;\n-  private final int[] log;\n+  private final int[] exp_table;\n+  private final int[] log_table;\n   private final GF256Poly zero;\n   private final GF256Poly one;\n \n@@ -44,18 +44,18 @@ public final class GF256 {\n    *  coefficient\n    */\n   private GF256(int primitive) {\n-    exp = new int[256];\n-    log = new int[256];\n+    exp_table = new int[256];\n+    log_table = new int[256];\n     int x = 1;\n     for (int i = 0; i < 256; i++) {\n-      exp[i] = x;\n+      exp_table[i] = x;\n       x <<= 1; // x = x * 2; we're assuming the generator alpha is 2\n       if (x >= 0x100) {\n         x ^= primitive;\n       }\n     }\n     for (int i = 0; i < 255; i++) {\n-      log[exp[i]] = i;\n+      log_table[exp_table[i]] = i;\n     }\n     // log[0] == 0 but this should never be used\n     zero = new GF256Poly(this, new int[]{0});\n@@ -98,7 +98,7 @@ static int addOrSubtract(int a, int b) {\n    * @return 2 to the power of a in GF(256)\n    */\n   int exp(int a) {\n-    return exp[a];\n+    return exp_table[a];\n   }\n \n   /**\n@@ -108,7 +108,7 @@ int log(int a) {\n     if (a == 0) {\n       throw new IllegalArgumentException();\n     }\n-    return log[a];\n+    return log_table[a];\n   }\n \n   /**\n@@ -118,7 +118,7 @@ int inverse(int a) {\n     if (a == 0) {\n       throw new ArithmeticException();\n     }\n-    return exp[255 - log[a]];\n+    return exp_table[255 - log_table[a]];\n   }\n \n   /**\n@@ -136,7 +136,7 @@ int multiply(int a, int b) {\n     if (b == 1) {\n       return a;\n     }\n-    return exp[(log[a] + log[b]) % 255];\n+    return exp_table[(log_table[a] + log_table[b]) % 255];\n   }\n \n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "45677f2bb29d7d3c2c868402c9fd610aaa982e67"
    }
  },
  {
    "oid": "7eb68cb75ac146a2a7c3240d6e2455bdec559662",
    "message": "Use RGB not ARGB so that ImageIO can write more image formats\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2105 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2012-01-07T05:19:57Z",
    "url": "https://github.com/zxing/zxing/commit/7eb68cb75ac146a2a7c3240d6e2455bdec559662",
    "details": {
      "sha": "fec965e3962695984d24cf0ddf4f73b25760791b",
      "filename": "javase/src/com/google/zxing/client/j2se/MatrixToImageWriter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/7eb68cb75ac146a2a7c3240d6e2455bdec559662/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FMatrixToImageWriter.java",
      "raw_url": "https://github.com/zxing/zxing/raw/7eb68cb75ac146a2a7c3240d6e2455bdec559662/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FMatrixToImageWriter.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FMatrixToImageWriter.java?ref=7eb68cb75ac146a2a7c3240d6e2455bdec559662",
      "patch": "@@ -45,7 +45,7 @@ private MatrixToImageWriter() {}\n   public static BufferedImage toBufferedImage(BitMatrix matrix) {\n     int width = matrix.getWidth();\n     int height = matrix.getHeight();\n-    BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n+    BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n     for (int x = 0; x < width; x++) {\n       for (int y = 0; y < height; y++) {\n         image.setRGB(x, y, matrix.get(x, y) ? BLACK : WHITE);",
      "parent_sha": "86a7fb3bb34f9d31d391a897eb03e62561a69d71"
    }
  },
  {
    "oid": "5d8e64fdbf60ae51a2dffc558652042804b40f5d",
    "message": "Oops, another code typo fix\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@223 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2008-02-22T19:13:15Z",
    "url": "https://github.com/zxing/zxing/commit/5d8e64fdbf60ae51a2dffc558652042804b40f5d",
    "details": {
      "sha": "1d910283bdce51a9fd52ec83495744c440ce1228",
      "filename": "core/src/com/google/zxing/oned/Code39Reader.java",
      "status": "modified",
      "additions": 27,
      "deletions": 19,
      "changes": 46,
      "blob_url": "https://github.com/zxing/zxing/blob/5d8e64fdbf60ae51a2dffc558652042804b40f5d/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FCode39Reader.java",
      "raw_url": "https://github.com/zxing/zxing/raw/5d8e64fdbf60ae51a2dffc558652042804b40f5d/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FCode39Reader.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FCode39Reader.java?ref=5d8e64fdbf60ae51a2dffc558652042804b40f5d",
      "patch": "@@ -38,9 +38,9 @@ public final class Code39Reader extends AbstractOneDReader {\n    * with 1s representing \"wide\" and 0s representing narrow.\n    */\n   private static final int[] CHARACTER_ENCODINGS = {\n-      0x038, 0x121, 0x061, 0x160, 0x031, 0x130, 0x070, 0x025, 0x124, 0x064, // 0-9\n+      0x034, 0x121, 0x061, 0x160, 0x031, 0x130, 0x070, 0x025, 0x124, 0x064, // 0-9\n       0x109, 0x049, 0x148, 0x019, 0x118, 0x058, 0x00D, 0x10C, 0x04C, 0x01C, // A-J\n-      0x103, 0x043, 0x142, 0x013, 0x112, 0x052, 0x007, 0x106, 0x046, 0x016,  // K-T\n+      0x103, 0x043, 0x142, 0x013, 0x112, 0x052, 0x007, 0x106, 0x046, 0x016, // K-T\n       0x181, 0x0C1, 0x1C0, 0x091, 0x190, 0x0D0, 0x085, 0x184, 0x0C4, 0x094, // U-*\n       0x0A8, 0x0A2, 0x08A, 0x02A // $-%\n   };\n@@ -174,6 +174,8 @@ private static int[] findAsteriskPattern(BitArray row) throws ReaderException {\n           for (int y = 2; y < patternLength; y++) {\n             counters[y - 2] = counters[y];\n           }\n+          counters[patternLength - 2] = 0;\n+          counters[patternLength - 1] = 0;\n           counterPosition--;\n         } else {\n           counterPosition++;\n@@ -186,25 +188,31 @@ private static int[] findAsteriskPattern(BitArray row) throws ReaderException {\n   }\n \n   private static int toNarrowWidePattern(int[] counters) throws ReaderException {\n-    int minCounter = Integer.MAX_VALUE;\n-    for (int i = 0; i < counters.length; i++) {\n-      if (counters[i] < minCounter) {\n-        minCounter = counters[i];\n+    int numCounters = counters.length;\n+    int maxNarrowCounter = 0;\n+    int wideCounters;\n+    do {\n+      int minCounter = Integer.MAX_VALUE;\n+      for (int i = 0; i < numCounters; i++) {\n+        int counter = counters[i];\n+        if (counter < minCounter && counter > maxNarrowCounter) {\n+          minCounter = counter;\n+        }\n       }\n-    }\n-    int maxNarrowCounter = (int) (minCounter * 1.5f);\n-    int wideCounters = 0;\n-    int pattern = 0;\n-    for (int i = 0; i < counters.length; i++) {\n-      if (counters[i] > maxNarrowCounter) {\n-        pattern |= 1 << (counters.length - 1 - i);\n-        wideCounters++;\n+      maxNarrowCounter = minCounter;\n+      wideCounters = 0;\n+      int pattern = 0;\n+      for (int i = 0; i < numCounters; i++) {\n+        if (counters[i] > maxNarrowCounter) {\n+          pattern |= 1 << (numCounters - 1 - i);\n+          wideCounters++;\n+        }\n       }\n-    }\n-    if (wideCounters != 3) {\n-      throw new ReaderException(\"Can't find 3 wide bars/spaces out of 9\");\n-    }\n-    return pattern;\n+      if (wideCounters == 3) {\n+        return pattern;\n+      }\n+    } while (wideCounters > 3);\n+    throw new ReaderException(\"Can't find 3 wide bars/spaces out of 9\");\n   }\n \n   private static char patternToChar(int pattern) throws ReaderException {",
      "parent_sha": "e8553801b15c92c355759dba6f474846a769c98e"
    }
  },
  {
    "oid": "f74fc09d54110bfd7de1c8dcaad55bf967a54b4b",
    "message": "Issue 1213 add 'raw' param to send back raw barcode text not processed form\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2229 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2012-03-15T14:46:03Z",
    "url": "https://github.com/zxing/zxing/commit/f74fc09d54110bfd7de1c8dcaad55bf967a54b4b",
    "details": {
      "sha": "58b5d727ffd640bd36fb638423934cad8c04f94a",
      "filename": "android/src/com/google/zxing/client/android/CaptureActivity.java",
      "status": "modified",
      "additions": 12,
      "deletions": 9,
      "changes": 21,
      "blob_url": "https://github.com/zxing/zxing/blob/f74fc09d54110bfd7de1c8dcaad55bf967a54b4b/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FCaptureActivity.java",
      "raw_url": "https://github.com/zxing/zxing/raw/f74fc09d54110bfd7de1c8dcaad55bf967a54b4b/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FCaptureActivity.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FCaptureActivity.java?ref=f74fc09d54110bfd7de1c8dcaad55bf967a54b4b",
      "patch": "@@ -100,6 +100,7 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal\n   private static final String[] ZXING_URLS = { \"http://zxing.appspot.com/scan\", \"zxing://scan/\" };\n   private static final String RETURN_CODE_PLACEHOLDER = \"{CODE}\";\n   private static final String RETURN_URL_PARAM = \"ret\";\n+  private static final String RAW_PARAM = \"raw\";\n \n   public static final int HISTORY_REQUEST_CODE = 0x0000bacc;\n \n@@ -121,6 +122,7 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal\n   private IntentSource source;\n   private String sourceUrl;\n   private String returnUrlTemplate;\n+  private boolean returnRaw;\n   private Collection<BarcodeFormat> decodeFormats;\n   private String characterSet;\n   private String versionName;\n@@ -130,13 +132,13 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal\n \n   private final DialogInterface.OnClickListener aboutListener =\n       new DialogInterface.OnClickListener() {\n-    @Override\n-    public void onClick(DialogInterface dialogInterface, int i) {\n-      Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(getString(R.string.zxing_url)));\n-      intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);\n-      startActivity(intent);\n-    }\n-  };\n+        @Override\n+        public void onClick(DialogInterface dialogInterface, int i) {\n+          Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(getString(R.string.zxing_url)));\n+          intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);\n+          startActivity(intent);\n+        }\n+      };\n \n   ViewfinderView getViewfinderView() {\n     return viewfinderView;\n@@ -257,6 +259,7 @@ protected void onResume() {\n         sourceUrl = dataString;\n         Uri inputUri = Uri.parse(sourceUrl);\n         returnUrlTemplate = inputUri.getQueryParameter(RETURN_URL_PARAM);\n+        returnRaw = inputUri.getQueryParameter(RAW_PARAM) != null;\n         decodeFormats = DecodeFormatManager.parseDecodeFormats(inputUri);\n \n       }\n@@ -663,9 +666,9 @@ private void handleDecodeExternally(Result rawResult, ResultHandler resultHandle\n       // Replace each occurrence of RETURN_CODE_PLACEHOLDER in the returnUrlTemplate\n       // with the scanned code. This allows both queries and REST-style URLs to work.\n       if (returnUrlTemplate != null) {\n-        String codeReplacement = String.valueOf(resultHandler.getDisplayContents());\n+        CharSequence codeReplacement = returnRaw ? rawResult.getText() : resultHandler.getDisplayContents();\n         try {\n-          codeReplacement = URLEncoder.encode(codeReplacement, \"UTF-8\");\n+          codeReplacement = URLEncoder.encode(codeReplacement.toString(), \"UTF-8\");\n         } catch (UnsupportedEncodingException e) {\n           // can't happen; UTF-8 is always supported. Continue, I guess, without encoding\n         }",
      "parent_sha": "9f45bab33c438bc3fc6e37ea99bbf09c9623adc4"
    }
  },
  {
    "oid": "b81c9ea01268da0dab04aad2190c64f51bd52abe",
    "message": "Generalize handling of non-fatal SQL exceptions in Android app",
    "date": "2017-01-06T13:29:36Z",
    "url": "https://github.com/zxing/zxing/commit/b81c9ea01268da0dab04aad2190c64f51bd52abe",
    "details": {
      "sha": "f1fbc12e11bbff6e3a0a95dfd3093ef584caa5ed",
      "filename": "android/src/com/google/zxing/client/android/history/HistoryManager.java",
      "status": "modified",
      "additions": 14,
      "deletions": 3,
      "changes": 17,
      "blob_url": "https://github.com/zxing/zxing/blob/b81c9ea01268da0dab04aad2190c64f51bd52abe/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fhistory%2FHistoryManager.java",
      "raw_url": "https://github.com/zxing/zxing/raw/b81c9ea01268da0dab04aad2190c64f51bd52abe/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fhistory%2FHistoryManager.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fhistory%2FHistoryManager.java?ref=b81c9ea01268da0dab04aad2190c64f51bd52abe",
      "patch": "@@ -16,7 +16,7 @@\n \n package com.google.zxing.client.android.history;\n \n-import android.database.sqlite.SQLiteException;\n+import android.database.SQLException;\n import com.google.zxing.BarcodeFormat;\n import com.google.zxing.Result;\n import com.google.zxing.client.android.Intents;\n@@ -42,6 +42,7 @@\n import java.text.DateFormat;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.regex.Pattern;\n \n /**\n  * <p>Manages functionality related to scan history.</p>\n@@ -66,6 +67,7 @@ public final class HistoryManager {\n \n   private static final String[] ID_COL_PROJECTION = { DBHelper.ID_COL };\n   private static final String[] ID_DETAIL_COL_PROJECTION = { DBHelper.ID_COL, DBHelper.DETAILS_COL };\n+  private static final Pattern DOUBLE_QUOTE = Pattern.compile(\"\\\"\", Pattern.LITERAL);\n \n   private final Activity activity;\n   private final boolean enableHistory;\n@@ -85,6 +87,9 @@ public boolean hasHistoryItems() {\n       cursor = db.query(DBHelper.TABLE_NAME, COUNT_COLUMN, null, null, null, null, null);\n       cursor.moveToFirst();\n       return cursor.getInt(0) > 0;\n+    } catch (SQLException sqle) {\n+      Log.w(TAG, sqle);\n+      return false;\n     } finally {\n       close(cursor, db);\n     }\n@@ -145,6 +150,8 @@ public void deleteHistoryItem(int number) {\n                         DBHelper.TIMESTAMP_COL + \" DESC\");\n       cursor.move(number + 1);\n       db.delete(DBHelper.TABLE_NAME, DBHelper.ID_COL + '=' + cursor.getString(0), null);\n+    } catch (SQLException sqle) {\n+      Log.w(TAG, sqle);\n     } finally {\n       close(cursor, db);\n     }\n@@ -230,6 +237,8 @@ private void deletePrevious(String text) {\n     try {\n       db = helper.getWritableDatabase();      \n       db.delete(DBHelper.TABLE_NAME, DBHelper.TEXT_COL + \"=?\", new String[] { text });\n+    } catch (SQLException sqle) {\n+      Log.w(TAG, sqle);\n     } finally {\n       close(null, db);\n     }\n@@ -251,7 +260,7 @@ public void trimHistory() {\n         Log.i(TAG, \"Deleting scan history ID \" + id);\n         db.delete(DBHelper.TABLE_NAME, DBHelper.ID_COL + '=' + id, null);\n       }\n-    } catch (SQLiteException sqle) {\n+    } catch (SQLException sqle) {\n       // We're seeing an error here when called in CaptureActivity.onCreate() in rare cases\n       // and don't understand it. First theory is that it's transient so can be safely ignored.\n       Log.w(TAG, sqle);\n@@ -316,6 +325,8 @@ void clearHistory() {\n     try {\n       db = helper.getWritableDatabase();      \n       db.delete(DBHelper.TABLE_NAME, null, null);\n+    } catch (SQLException sqle) {\n+      Log.w(TAG, sqle);\n     } finally {\n       close(null, db);\n     }\n@@ -349,7 +360,7 @@ static Uri saveHistory(String history) {\n   }\n \n   private static String massageHistoryField(String value) {\n-    return value == null ? \"\" : value.replace(\"\\\"\",\"\\\"\\\"\");\n+    return value == null ? \"\" : DOUBLE_QUOTE.matcher(value).replaceAll(\"\\\"\\\"\");\n   }\n   \n   private static void close(Cursor cursor, SQLiteDatabase database) {",
      "parent_sha": "f5b5c3a97ed1d3be6156cb4d27f0428b95ec4275"
    }
  },
  {
    "oid": "1b79e9748c46cf2f0c242e195494d4f48539390e",
    "message": "Fix class description\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@3002 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2013-12-21T20:40:53Z",
    "url": "https://github.com/zxing/zxing/commit/1b79e9748c46cf2f0c242e195494d4f48539390e",
    "details": {
      "sha": "509b8133737e0e820ddaf319572f0a23a089d89a",
      "filename": "android/src/com/google/zxing/client/android/result/WifiResultHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/1b79e9748c46cf2f0c242e195494d4f48539390e/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fresult%2FWifiResultHandler.java",
      "raw_url": "https://github.com/zxing/zxing/raw/1b79e9748c46cf2f0c242e195494d4f48539390e/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fresult%2FWifiResultHandler.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fresult%2FWifiResultHandler.java?ref=1b79e9748c46cf2f0c242e195494d4f48539390e",
      "patch": "@@ -30,7 +30,7 @@\n import com.google.zxing.client.result.WifiParsedResult;\n \n /**\n- * Handles address book entries.\n+ * Handles wifi access information.\n  *\n  * @author Vikram Aggarwal\n  * @author Sean Owen",
      "parent_sha": "6463455d2630c14971212f3ad4e0845db6927f13"
    }
  },
  {
    "oid": "6815ab5ea17aef84d929526150810a969ca15027",
    "message": "Another change for Issue 112\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@1249 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2010-03-21T13:49:49Z",
    "url": "https://github.com/zxing/zxing/commit/6815ab5ea17aef84d929526150810a969ca15027",
    "details": {
      "sha": "2d9b014e26c7297d5c2304f4b702ba9ab60a1da4",
      "filename": "android/src/com/google/zxing/client/android/CaptureActivity.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/zxing/zxing/blob/6815ab5ea17aef84d929526150810a969ca15027/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FCaptureActivity.java",
      "raw_url": "https://github.com/zxing/zxing/raw/6815ab5ea17aef84d929526150810a969ca15027/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FCaptureActivity.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FCaptureActivity.java?ref=6815ab5ea17aef84d929526150810a969ca15027",
      "patch": "@@ -107,7 +107,7 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal\n     PRODUCT_FORMATS.add(BarcodeFormat.UPC_E);\n     PRODUCT_FORMATS.add(BarcodeFormat.EAN_13);\n     PRODUCT_FORMATS.add(BarcodeFormat.EAN_8);\n-    //PRODUCT_FORMATS.add(BarcodeFormat.RSS14);\n+    PRODUCT_FORMATS.add(BarcodeFormat.RSS14);\n     ONE_D_FORMATS = new Vector<BarcodeFormat>(PRODUCT_FORMATS.size() + 3);\n     ONE_D_FORMATS.addAll(PRODUCT_FORMATS);\n     ONE_D_FORMATS.add(BarcodeFormat.CODE_39);\n@@ -255,6 +255,7 @@ private static Vector<BarcodeFormat> parseDecodeFormats(Intent intent) {\n         for (String format : COMMA_PATTERN.split(scanFormats)) {\n           formats.add(BarcodeFormat.valueOf(format));\n         }\n+        return formats;\n       } catch (IllegalArgumentException iae) {\n         // ignore it then\n       }",
      "parent_sha": "4b865c1339c0b7301ae7adb0fbd5d167a7a107be"
    }
  },
  {
    "oid": "089cc3ac44aadd55d8063f2d2fa80b1a8b0c3d3e",
    "message": "Fix Issue 143, failure on invalid geo: URIs\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@842 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2009-02-06T13:30:10Z",
    "url": "https://github.com/zxing/zxing/commit/089cc3ac44aadd55d8063f2d2fa80b1a8b0c3d3e",
    "details": {
      "sha": "b4a032555a403c91897bbdf305dba1e9cb786f44",
      "filename": "core/src/com/google/zxing/client/result/GeoResultParser.java",
      "status": "modified",
      "additions": 13,
      "deletions": 10,
      "changes": 23,
      "blob_url": "https://github.com/zxing/zxing/blob/089cc3ac44aadd55d8063f2d2fa80b1a8b0c3d3e/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fresult%2FGeoResultParser.java",
      "raw_url": "https://github.com/zxing/zxing/raw/089cc3ac44aadd55d8063f2d2fa80b1a8b0c3d3e/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fresult%2FGeoResultParser.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fresult%2FGeoResultParser.java?ref=089cc3ac44aadd55d8063f2d2fa80b1a8b0c3d3e",
      "patch": "@@ -48,16 +48,19 @@ public static GeoParsedResult parse(Result result) {\n     if (latitudeEnd < 0) {\n       return null;\n     }\n-    double latitude = Double.parseDouble(geoURIWithoutQuery.substring(0, latitudeEnd));\n-    int longitudeEnd = geoURIWithoutQuery.indexOf(',', latitudeEnd + 1);\n-    double longitude;\n-    double altitude; // in meters\n-    if (longitudeEnd < 0) {\n-      longitude = Double.parseDouble(geoURIWithoutQuery.substring(latitudeEnd + 1));\n-      altitude = 0.0;\n-    } else {\n-      longitude = Double.parseDouble(geoURIWithoutQuery.substring(latitudeEnd + 1, longitudeEnd));\n-      altitude = Double.parseDouble(geoURIWithoutQuery.substring(longitudeEnd + 1));\n+    int longitudeEnd = geoURIWithoutQuery.indexOf(',', latitudeEnd + 1);    \n+    double latitude, longitude, altitude;\n+    try {\n+      latitude = Double.parseDouble(geoURIWithoutQuery.substring(0, latitudeEnd));\n+      if (longitudeEnd < 0) {\n+        longitude = Double.parseDouble(geoURIWithoutQuery.substring(latitudeEnd + 1));\n+        altitude = 0.0;\n+      } else {\n+        longitude = Double.parseDouble(geoURIWithoutQuery.substring(latitudeEnd + 1, longitudeEnd));\n+        altitude = Double.parseDouble(geoURIWithoutQuery.substring(longitudeEnd + 1));\n+      }\n+    } catch (NumberFormatException nfe) {\n+      return null;\n     }\n     return new GeoParsedResult(rawText, latitude, longitude, altitude);\n   }",
      "parent_sha": "1c539c66a4c5cb36070b1e1c1fd92633480b6b4d"
    }
  },
  {
    "oid": "9b176a1a5f0153af305315d146bc6d0f913f11aa",
    "message": "Issue 851 NPE for invalid network type\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@1804 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2011-05-30T19:19:03Z",
    "url": "https://github.com/zxing/zxing/commit/9b176a1a5f0153af305315d146bc6d0f913f11aa",
    "details": {
      "sha": "0654d868040e8da2e0dffb3f92f80f7a99ac974e",
      "filename": "android/src/com/google/zxing/client/android/wifi/WifiActivity.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/zxing/zxing/blob/9b176a1a5f0153af305315d146bc6d0f913f11aa/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fwifi%2FWifiActivity.java",
      "raw_url": "https://github.com/zxing/zxing/raw/9b176a1a5f0153af305315d146bc6d0f913f11aa/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fwifi%2FWifiActivity.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fwifi%2FWifiActivity.java?ref=9b176a1a5f0153af305315d146bc6d0f913f11aa",
      "patch": "@@ -216,10 +216,9 @@ protected void onCreate(Bundle savedInstanceState) {\n     } else if (\"WEP\".equals(networkType)) {\n       networkT = NetworkType.NETWORK_WEP;\n     } else if (\"nopass\".equals(networkType)) {\n-     networkT = NetworkType.NETWORK_NOPASS;\n+      networkT = NetworkType.NETWORK_NOPASS;\n     } else {\n-      doError(R.string.wifi_type_incorrect);\n-      return;\n+      networkT = NetworkType.NETWORK_INVALID;\n     }\n \n     // This is not available before onCreate",
      "parent_sha": "e9d5024e46034a2f0db1068fc83a378229d32517"
    }
  },
  {
    "oid": "abe6cdc573b184896e12cc590b71cf1d44ece711",
    "message": "Refactored the CommandLineRunner a bit.\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@1755 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2011-05-03T15:33:42Z",
    "url": "https://github.com/zxing/zxing/commit/abe6cdc573b184896e12cc590b71cf1d44ece711",
    "details": {
      "sha": "8c67267a522f5184bb5c88e0cbdbf180dff46fcd",
      "filename": "javase/src/com/google/zxing/client/j2se/CommandLineRunner.java",
      "status": "modified",
      "additions": 82,
      "deletions": 79,
      "changes": 161,
      "blob_url": "https://github.com/zxing/zxing/blob/abe6cdc573b184896e12cc590b71cf1d44ece711/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FCommandLineRunner.java",
      "raw_url": "https://github.com/zxing/zxing/raw/abe6cdc573b184896e12cc590b71cf1d44ece711/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FCommandLineRunner.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FCommandLineRunner.java?ref=abe6cdc573b184896e12cc590b71cf1d44ece711",
      "patch": "@@ -16,21 +16,6 @@\n \n package com.google.zxing.client.j2se;\n \n-import javax.imageio.ImageIO;\n-import java.awt.image.BufferedImage;\n-import java.io.File;\n-import java.io.FileNotFoundException;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.OutputStream;\n-import java.io.OutputStreamWriter;\n-import java.io.Writer;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.nio.charset.Charset;\n-import java.util.Hashtable;\n-import java.util.Vector;\n-\n import com.google.zxing.BarcodeFormat;\n import com.google.zxing.BinaryBitmap;\n import com.google.zxing.DecodeHintType;\n@@ -46,16 +31,45 @@\n import com.google.zxing.common.HybridBinarizer;\n import com.google.zxing.multi.GenericMultipleBarcodeReader;\n \n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.Charset;\n+import java.util.Hashtable;\n+import java.util.Vector;\n+\n+import javax.imageio.ImageIO;\n+\n /**\n- * <p>This simple command line utility decodes files, directories of files, or URIs which are passed as arguments. By\n- * default it uses the normal decoding algorithms, but you can pass --try_harder to request that hint. The raw text of\n- * each barcode is printed, and when running against directories, summary statistics are also displayed.</p>\n+ * This simple command line utility decodes files, directories of files, or URIs which are passed\n+ * as arguments. By default it uses the normal decoding algorithms, but you can pass --try_harder\n+ * to request that hint. The raw text of each barcode is printed, and when running against\n+ * directories, summary statistics are also displayed.\n  *\n  * @author Sean Owen\n  * @author dswitkin@google.com (Daniel Switkin)\n  */\n public final class CommandLineRunner {\n \n+  private static class Config {\n+    public boolean tryHarder = false;\n+    public boolean pureBarcode = false;\n+    public boolean productsOnly = false;\n+    public boolean dumpResults = false;\n+    public boolean dumpBlackPoint = false;\n+    public boolean multi = false;\n+    public int[] crop = null;\n+  }\n+\n+  private static Config config = new Config();\n+\n   private CommandLineRunner() {\n   }\n \n@@ -65,31 +79,24 @@ public static void main(String[] args) throws Exception {\n       return;\n     }\n \n-    boolean tryHarder = false;\n-    boolean pureBarcode = false;\n-    boolean productsOnly = false;\n-    boolean dumpResults = false;\n-    boolean dumpBlackPoint = false;\n-    boolean multi = false;\n-    int[] crop = null;\n     for (String arg : args) {\n       if (\"--try_harder\".equals(arg)) {\n-        tryHarder = true;\n+        config.tryHarder = true;\n       } else if (\"--pure_barcode\".equals(arg)) {\n-        pureBarcode = true;\n+        config.pureBarcode = true;\n       } else if (\"--products_only\".equals(arg)) {\n-        productsOnly = true;\n+        config.productsOnly = true;\n       } else if (\"--dump_results\".equals(arg)) {\n-        dumpResults = true;\n+        config.dumpResults = true;\n       } else if (\"--dump_black_point\".equals(arg)) {\n-        dumpBlackPoint = true;\n+        config.dumpBlackPoint = true;\n       } else if (\"--multi\".equals(arg)) {\n-        multi = true;\n+        config.multi = true;\n       } else if (arg.startsWith(\"--crop\")) {\n-        crop = new int[4];\n+        config.crop = new int[4];\n         String[] tokens = arg.substring(7).split(\",\");\n-        for (int i = 0; i < crop.length; i++) {\n-          crop[i] = Integer.parseInt(tokens[i]);\n+        for (int i = 0; i < config.crop.length; i++) {\n+          config.crop[i] = Integer.parseInt(tokens[i]);\n         }\n       } else if (arg.startsWith(\"-\")) {\n         System.err.println(\"Unknown command line option \" + arg);\n@@ -98,26 +105,24 @@ public static void main(String[] args) throws Exception {\n       }\n     }\n \n-    Hashtable<DecodeHintType, Object> hints = buildHints(tryHarder, pureBarcode, productsOnly);\n+    Hashtable<DecodeHintType, Object> hints = buildHints();\n     for (String arg : args) {\n       if (!arg.startsWith(\"--\")) {\n-        decodeOneArgument(arg, hints, dumpResults, dumpBlackPoint, crop, multi);\n+        decodeOneArgument(arg, hints);\n       }\n     }\n   }\n \n   // Manually turn on all formats, even those not yet considered production quality.\n-  private static Hashtable<DecodeHintType, Object> buildHints(boolean tryHarder,\n-                                                              boolean pureBarcode,\n-                                                              boolean productsOnly) {\n+  private static Hashtable<DecodeHintType, Object> buildHints() {\n     Hashtable<DecodeHintType, Object> hints = new Hashtable<DecodeHintType, Object>(3);\n     Vector<BarcodeFormat> vector = new Vector<BarcodeFormat>(8);\n     vector.addElement(BarcodeFormat.UPC_A);\n     vector.addElement(BarcodeFormat.UPC_E);\n     vector.addElement(BarcodeFormat.EAN_13);\n     vector.addElement(BarcodeFormat.EAN_8);\n     vector.addElement(BarcodeFormat.RSS14);\n-    if (!productsOnly) {\n+    if (!config.productsOnly) {\n       vector.addElement(BarcodeFormat.CODE_39);\n       vector.addElement(BarcodeFormat.CODE_93);\n       vector.addElement(BarcodeFormat.CODE_128);\n@@ -129,10 +134,10 @@ private static Hashtable<DecodeHintType, Object> buildHints(boolean tryHarder,\n       vector.addElement(BarcodeFormat.CODABAR);\n     }\n     hints.put(DecodeHintType.POSSIBLE_FORMATS, vector);\n-    if (tryHarder) {\n+    if (config.tryHarder) {\n       hints.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);\n     }\n-    if (pureBarcode) {\n+    if (config.pureBarcode) {\n       hints.put(DecodeHintType.PURE_BARCODE, Boolean.TRUE);\n     }\n     return hints;\n@@ -150,12 +155,8 @@ private static void printUsage() {\n     System.err.println(\"  --multi: Scans image for multiple barcodes\");\n   }\n \n-  private static void decodeOneArgument(String argument,\n-                                        Hashtable<DecodeHintType, Object> hints,\n-                                        boolean dumpResults,\n-                                        boolean dumpBlackPoint,\n-                                        int[] crop,\n-                                        boolean multi) throws IOException, URISyntaxException {\n+  private static void decodeOneArgument(String argument, Hashtable<DecodeHintType, Object> hints)\n+      throws IOException, URISyntaxException {\n \n     File inputFile = new File(argument);\n     if (inputFile.exists()) {\n@@ -172,19 +173,19 @@ private static void decodeOneArgument(String argument,\n           if (filename.contains(\".mono.png\")) {\n             continue;\n           }\n-          if (multi) {\n-            Result[] results = decodeMulti(input.toURI(), hints, dumpBlackPoint, crop);\n+          if (config.multi) {\n+            Result[] results = decodeMulti(input.toURI(), hints);\n             if (results != null) {\n               successful++;\n-              if (dumpResults) {\n+              if (config.dumpResults) {\n                 dumpResultMulti(input, results);\n               }\n             }\n           } else {\n-            Result result = decode(input.toURI(), hints, dumpBlackPoint, crop);\n+            Result result = decode(input.toURI(), hints);\n             if (result != null) {\n               successful++;\n-              if (dumpResults) {\n+              if (config.dumpResults) {\n                 dumpResult(input, result);\n               }\n             }\n@@ -194,20 +195,20 @@ private static void decodeOneArgument(String argument,\n         System.out.println(\"\\nDecoded \" + successful + \" files out of \" + total +\n                                \" successfully (\" + (successful * 100 / total) + \"%)\\n\");\n       } else {\n-        if (multi) {\n-          Result[] results = decodeMulti(inputFile.toURI(), hints, dumpBlackPoint, crop);\n-          if (dumpResults) {\n+        if (config.multi) {\n+          Result[] results = decodeMulti(inputFile.toURI(), hints);\n+          if (config.dumpResults) {\n             dumpResultMulti(inputFile, results);\n           }\n         } else {\n-          Result result = decode(inputFile.toURI(), hints, dumpBlackPoint, crop);\n-          if (dumpResults) {\n+          Result result = decode(inputFile.toURI(), hints);\n+          if (config.dumpResults) {\n             dumpResult(inputFile, result);\n           }\n         }\n       }\n     } else {\n-      decode(new URI(argument), hints, dumpBlackPoint, crop);\n+      decode(new URI(argument), hints);\n     }\n   }\n \n@@ -253,10 +254,8 @@ private static void writeResultsToFile(Result[] results, File file) throws IOExc\n     }\n   }\n \n-  private static Result decode(URI uri,\n-                               Hashtable<DecodeHintType, Object> hints,\n-                               boolean dumpBlackPoint,\n-                               int[] crop) throws IOException {\n+  private static Result decode(URI uri, Hashtable<DecodeHintType, Object> hints)\n+      throws IOException {\n     BufferedImage image;\n     try {\n       image = ImageIO.read(uri.toURL());\n@@ -269,20 +268,21 @@ private static Result decode(URI uri,\n     }\n     try {\n       LuminanceSource source;\n-      if (crop == null) {\n+      if (config.crop == null) {\n         source = new BufferedImageLuminanceSource(image);\n       } else {\n-        source = new BufferedImageLuminanceSource(image, crop[0], crop[1], crop[2], crop[3]);\n+        source = new BufferedImageLuminanceSource(image, config.crop[0], config.crop[1],\n+            config.crop[2], config.crop[3]);\n       }\n       BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));\n-      if (dumpBlackPoint) {\n+      if (config.dumpBlackPoint) {\n         dumpBlackPoint(uri, image, bitmap);\n       }\n       Result result = new MultiFormatReader().decode(bitmap, hints);\n       ParsedResult parsedResult = ResultParser.parseResult(result);\n-      System.out.println(uri.toString() + \" (format: \" + result.getBarcodeFormat() +\n-                             \", type: \" + parsedResult.getType() + \"):\\nRaw result:\\n\" + result.getText() +\n-                             \"\\nParsed result:\\n\" + parsedResult.getDisplayResult());\n+      System.out.println(uri.toString() + \" (format: \" + result.getBarcodeFormat() + \", type: \" +\n+          parsedResult.getType() + \"):\\nRaw result:\\n\" + result.getText() + \"\\nParsed result:\\n\" +\n+          parsedResult.getDisplayResult());\n \n       System.out.println(\"Also, there were \" + result.getResultPoints().length + \" result points.\");\n       for (int i = 0; i < result.getResultPoints().length; i++) {\n@@ -301,10 +301,8 @@ private static Result decode(URI uri,\n     }\n   }\n \n-  private static Result[] decodeMulti(URI uri,\n-                                      Hashtable<DecodeHintType, Object> hints,\n-                                      boolean dumpBlackPoint,\n-                                      int[] crop) throws IOException {\n+  private static Result[] decodeMulti(URI uri, Hashtable<DecodeHintType, Object> hints)\n+      throws IOException {\n     BufferedImage image;\n     try {\n       image = ImageIO.read(uri.toURL());\n@@ -317,14 +315,14 @@ private static Result[] decodeMulti(URI uri,\n     }\n     try {\n       LuminanceSource source;\n-      if (crop == null) {\n+      if (config.crop == null) {\n         source = new BufferedImageLuminanceSource(image);\n       } else {\n-        source = new BufferedImageLuminanceSource(image, crop[0],\n-                                                  crop[1], crop[2], crop[3]);\n+        source = new BufferedImageLuminanceSource(image, config.crop[0], config.crop[1],\n+            config.crop[2], config.crop[3]);\n       }\n       BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));\n-      if (dumpBlackPoint) {\n+      if (config.dumpBlackPoint) {\n         dumpBlackPoint(uri, image, bitmap);\n       }\n \n@@ -340,7 +338,7 @@ private static Result[] decodeMulti(URI uri,\n                                + parsedResult.getType() + \"):\\nRaw result:\\n\"\n                                + result.getText() + \"\\nParsed result:\\n\"\n                                + parsedResult.getDisplayResult());\n-        System.out.println(\"Also, there were \" + result.getResultPoints().length + \" result points.\");\n+        System.out.println(\"Found \" + result.getResultPoints().length + \" result points.\");\n         for (int i = 0; i < result.getResultPoints().length; i++) {\n           ResultPoint rp = result.getResultPoints()[i];\n           System.out.println(\"  Point \" + i + \": (\" + rp.getX() + ',' + rp.getY() + ')');\n@@ -415,6 +413,11 @@ private static void dumpBlackPoint(URI uri, BufferedImage image, BinaryBitmap bi\n     } catch (NotFoundException nfe) {\n     }\n \n+    writeResultImage(stride, height, pixels, uri, inputName, \".mono.png\");\n+  }\n+\n+  private static void writeResultImage(int stride, int height, int[] pixels, URI uri,\n+      String inputName, String suffix) {\n     // Write the result\n     BufferedImage result = new BufferedImage(stride, height, BufferedImage.TYPE_INT_ARGB);\n     result.setRGB(0, 0, stride, height, pixels, 0, stride);\n@@ -431,7 +434,7 @@ private static void dumpBlackPoint(URI uri, BufferedImage image, BinaryBitmap bi\n     if (pos > 0) {\n       resultName = resultName.substring(0, pos);\n     }\n-    resultName += \".mono.png\";\n+    resultName += suffix;\n     OutputStream outStream = null;\n     try {\n       outStream = new FileOutputStream(resultName);",
      "parent_sha": "d65d3e0d4be54c94fffea0439e888854a9ddef72"
    }
  },
  {
    "oid": "a26e5fbc10b23fe91bc13b74156fad161a35eded",
    "message": "Forge ahead with detection even if we missed an alignment pattern -- can still decode in some cases without it\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@929 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2009-05-03T19:52:03Z",
    "url": "https://github.com/zxing/zxing/commit/a26e5fbc10b23fe91bc13b74156fad161a35eded",
    "details": {
      "sha": "a933f069a438d6985f8dc1af54619021fc60b578",
      "filename": "core/src/com/google/zxing/qrcode/detector/Detector.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/zxing/zxing/blob/a26e5fbc10b23fe91bc13b74156fad161a35eded/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdetector%2FDetector.java",
      "raw_url": "https://github.com/zxing/zxing/raw/a26e5fbc10b23fe91bc13b74156fad161a35eded/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdetector%2FDetector.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdetector%2FDetector.java?ref=a26e5fbc10b23fe91bc13b74156fad161a35eded",
      "patch": "@@ -106,10 +106,7 @@ public DetectorResult detect(Hashtable hints) throws ReaderException {\n           // try next round\n         }\n       }\n-      if (alignmentPattern == null) {\n-        throw ReaderException.getInstance();\n-      }\n-\n+      // If we didn't find alignment pattern... well try anyway without it\n     }\n \n     BitMatrix bits = sampleGrid(image, topLeft, topRight, bottomLeft, alignmentPattern, dimension);",
      "parent_sha": "89121c71bb04e26998d6e8a7e480a1f1a88adc9e"
    }
  },
  {
    "oid": "e9bcd9befb79796f0ebc43eff4af298a9b4e92c1",
    "message": "Fix some obvious errors in TLD mappings. Key on country, not country-language, so it actually works in most cases!\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@1888 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2011-08-17T19:52:50Z",
    "url": "https://github.com/zxing/zxing/commit/e9bcd9befb79796f0ebc43eff4af298a9b4e92c1",
    "details": {
      "sha": "4784a8b0e8f2d29ecb5443f8fb72dfd260906d40",
      "filename": "android/src/com/google/zxing/client/android/LocaleManager.java",
      "status": "modified",
      "additions": 64,
      "deletions": 57,
      "changes": 121,
      "blob_url": "https://github.com/zxing/zxing/blob/e9bcd9befb79796f0ebc43eff4af298a9b4e92c1/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FLocaleManager.java",
      "raw_url": "https://github.com/zxing/zxing/raw/e9bcd9befb79796f0ebc43eff4af298a9b4e92c1/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FLocaleManager.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FLocaleManager.java?ref=e9bcd9befb79796f0ebc43eff4af298a9b4e92c1",
      "patch": "@@ -26,64 +26,78 @@\n  * @author Sean Owen\n  */\n public final class LocaleManager {\n+\n   private static final String DEFAULT_TLD = \"com\";\n+  private static final String DEFAULT_COUNTRY = \"US\";\n \n-  // Locales where Google web search is available. These should be kept in sync with our\n-  // translations. The format for the manual countries is:\n-  // Language, Country, unused, Google domain suffix\n-  private static final Map<Locale,String> GOOGLE_COUNTRY_TLD;\n+  private static final String COUNTRY;\n   static {\n-    GOOGLE_COUNTRY_TLD = new HashMap<Locale,String>();\n-    GOOGLE_COUNTRY_TLD.put(new Locale(\"en\", \"AU\", \"\"), \"com.au\"); // AUSTRALIA\n-    GOOGLE_COUNTRY_TLD.put(new Locale(\"bg\", \"BG\", \"\"), \"com.br\"); // BULGARIA\n-    GOOGLE_COUNTRY_TLD.put(Locale.CANADA, \"ca\");\n-    GOOGLE_COUNTRY_TLD.put(Locale.CHINA, \"cn\");\n-    GOOGLE_COUNTRY_TLD.put(new Locale(\"cs\", \"CZ\", \"\"), \"cz\"); // CZECH REPUBLIC\n-    GOOGLE_COUNTRY_TLD.put(new Locale(\"da\", \"DK\", \"\"), \"dk\"); // DENMARK\n-    GOOGLE_COUNTRY_TLD.put(new Locale(\"fi\", \"FI\", \"\"), \"fi\"); // FINLAND\n-    GOOGLE_COUNTRY_TLD.put(Locale.FRANCE, \"fr\");\n-    GOOGLE_COUNTRY_TLD.put(Locale.GERMANY, \"de\");\n-    GOOGLE_COUNTRY_TLD.put(new Locale(\"hu\", \"HU\", \"\"), \"hu\"); // HUNGARY\n-    GOOGLE_COUNTRY_TLD.put(new Locale(\"he\", \"IL\", \"\"), \"co.il\"); // ISRAEL\n-    GOOGLE_COUNTRY_TLD.put(Locale.ITALY, \"it\");\n-    GOOGLE_COUNTRY_TLD.put(Locale.JAPAN, \"co.jp\");\n-    GOOGLE_COUNTRY_TLD.put(Locale.KOREA, \"co.kr\");\n-    GOOGLE_COUNTRY_TLD.put(new Locale(\"nl\", \"NL\", \"\"), \"nl\"); // NETHERLANDS\n-    GOOGLE_COUNTRY_TLD.put(new Locale(\"pl\", \"PL\", \"\"), \"pl\"); // POLAND\n-    GOOGLE_COUNTRY_TLD.put(new Locale(\"pt\", \"PT\", \"\"), \"pt\"); // PORTUGAL\n-    GOOGLE_COUNTRY_TLD.put(new Locale(\"ru\", \"RU\", \"\"), \"nl\"); // RUSSIA\n-    GOOGLE_COUNTRY_TLD.put(new Locale(\"sk\", \"SK\", \"\"), \"sk\"); // SLOVAK REPUBLIC\n-    GOOGLE_COUNTRY_TLD.put(new Locale(\"sl\", \"SI\", \"\"), \"si\"); // SLOVENIA\n-    GOOGLE_COUNTRY_TLD.put(new Locale(\"es\", \"ES\", \"\"), \"es\"); // SPAIN\n-    GOOGLE_COUNTRY_TLD.put(new Locale(\"sv\", \"SE\", \"\"), \"se\"); // SWEDEN\n-    GOOGLE_COUNTRY_TLD.put(Locale.TAIWAN, \"de\");\n-    GOOGLE_COUNTRY_TLD.put(new Locale(\"tr\", \"TR\", \"\"), \"com.tr\"); // TURKEY\n-    GOOGLE_COUNTRY_TLD.put(Locale.UK, \"co.uk\");\n+    Locale locale = Locale.getDefault();\n+    COUNTRY = locale == null ? DEFAULT_COUNTRY : locale.getCountry();\n   }\n \n-  // Google Product Search for mobile is available in fewer countries than web search. See here:\n-  // http://www.google.com/support/merchants/bin/answer.py?answer=160619\n-  private static final Map<Locale,String> GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD;\n+  /**\n+   * Locales (well, countries) where Google web search is available.\n+   * These should be kept in sync with our translations.\n+   */\n+  private static final Map<String,String> GOOGLE_COUNTRY_TLD;\n   static {\n-    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD = new HashMap<Locale,String>();\n-    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(new Locale(\"en\", \"AU\", \"\"), \"com.au\"); // AUSTRALIA\n-    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(Locale.CHINA, \"cn\");\n-    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(Locale.FRANCE, \"fr\");\n-    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(Locale.GERMANY, \"de\");\n-    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(Locale.ITALY, \"it\");\n-    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(Locale.JAPAN, \"co.jp\");\n-    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(new Locale(\"nl\", \"NL\", \"\"), \"nl\"); // NETHERLANDS\n-    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(new Locale(\"es\", \"ES\", \"\"), \"es\"); // SPAIN\n-    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(Locale.UK, \"co.uk\");\n+    GOOGLE_COUNTRY_TLD = new HashMap<String,String>();\n+    GOOGLE_COUNTRY_TLD.put(\"AR\", \"com.ar\"); // ARGENTINA\n+    GOOGLE_COUNTRY_TLD.put(\"AU\", \"com.au\"); // AUSTRALIA\n+    GOOGLE_COUNTRY_TLD.put(\"BG\", \"com.br\"); // BULGARIA\n+    GOOGLE_COUNTRY_TLD.put(Locale.CANADA.getCountry(), \"ca\");\n+    GOOGLE_COUNTRY_TLD.put(Locale.CHINA.getCountry(), \"cn\");\n+    GOOGLE_COUNTRY_TLD.put(\"CZ\", \"cz\"); // CZECH REPUBLIC\n+    GOOGLE_COUNTRY_TLD.put(\"DK\", \"dk\"); // DENMARK\n+    GOOGLE_COUNTRY_TLD.put(\"FI\", \"fi\"); // FINLAND\n+    GOOGLE_COUNTRY_TLD.put(Locale.FRANCE.getCountry(), \"fr\");\n+    GOOGLE_COUNTRY_TLD.put(Locale.GERMANY.getCountry(), \"de\");\n+    GOOGLE_COUNTRY_TLD.put(\"GR\", \"gr\"); // GREECE\n+    GOOGLE_COUNTRY_TLD.put(\"HU\", \"hu\"); // HUNGARY\n+    GOOGLE_COUNTRY_TLD.put(\"ID\", \"co.id\"); // INDONESIA\n+    GOOGLE_COUNTRY_TLD.put(\"IL\", \"co.il\"); // ISRAEL\n+    GOOGLE_COUNTRY_TLD.put(Locale.ITALY.getCountry(), \"it\");\n+    GOOGLE_COUNTRY_TLD.put(Locale.JAPAN.getCountry(), \"co.jp\");\n+    GOOGLE_COUNTRY_TLD.put(Locale.KOREA.getCountry(), \"co.kr\");\n+    GOOGLE_COUNTRY_TLD.put(\"NL\", \"nl\"); // NETHERLANDS\n+    GOOGLE_COUNTRY_TLD.put(\"PL\", \"pl\"); // POLAND\n+    GOOGLE_COUNTRY_TLD.put(\"PT\", \"pt\"); // PORTUGAL\n+    GOOGLE_COUNTRY_TLD.put(\"RU\", \"ru\"); // RUSSIA\n+    GOOGLE_COUNTRY_TLD.put(\"SK\", \"sk\"); // SLOVAK REPUBLIC\n+    GOOGLE_COUNTRY_TLD.put(\"SI\", \"si\"); // SLOVENIA\n+    GOOGLE_COUNTRY_TLD.put(\"ES\", \"es\"); // SPAIN\n+    GOOGLE_COUNTRY_TLD.put(\"SE\", \"se\"); // SWEDEN\n+    GOOGLE_COUNTRY_TLD.put(Locale.TAIWAN.getCountry(), \"tw\");\n+    GOOGLE_COUNTRY_TLD.put(\"TR\", \"com.tr\"); // TURKEY\n+    GOOGLE_COUNTRY_TLD.put(Locale.UK.getCountry(), \"co.uk\");\n+    GOOGLE_COUNTRY_TLD.put(Locale.US.getCountry(), \"com\");\n   }\n \n-  // Book search is offered everywhere that web search is available.\n-  private static final Map<Locale,String> GOOGLE_BOOK_SEARCH_COUNTRY_TLD;\n+  /**\n+   * Google Product Search for mobile is available in fewer countries than web search. See here:\n+   * http://www.google.com/support/merchants/bin/answer.py?answer=160619\n+   */\n+  private static final Map<String,String> GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD;\n   static {\n-    GOOGLE_BOOK_SEARCH_COUNTRY_TLD = new HashMap<Locale,String>();\n-    GOOGLE_BOOK_SEARCH_COUNTRY_TLD.putAll(GOOGLE_COUNTRY_TLD);\n+    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD = new HashMap<String,String>();\n+    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(\"AU\", \"com.au\"); // AUSTRALIA\n+    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(Locale.CHINA.getCountry(), \"cn\");\n+    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(Locale.FRANCE.getCountry(), \"fr\");\n+    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(Locale.GERMANY.getCountry(), \"de\");\n+    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(Locale.ITALY.getCountry(), \"it\");\n+    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(Locale.JAPAN.getCountry(), \"co.jp\");\n+    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(\"NL\", \"nl\"); // NETHERLANDS\n+    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(\"ES\", \"es\"); // SPAIN\n+    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(Locale.UK.getCountry(), \"co.uk\");\n+    GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD.put(Locale.US.getCountry(), \"com\");\n   }\n \n+  /**\n+   * Book search is offered everywhere that web search is available.\n+   */\n+  private static final Map<String,String> GOOGLE_BOOK_SEARCH_COUNTRY_TLD = GOOGLE_COUNTRY_TLD;\n+\n   private LocaleManager() {}\n \n   /**\n@@ -120,15 +134,8 @@ public static boolean isBookSearchUrl(String url) {\n     return url.startsWith(\"http://google.com/books\") || url.startsWith(\"http://books.google.\");\n   }\n \n-  private static String doGetTLD(Map<Locale,String> map) {\n-    Locale locale = Locale.getDefault();\n-    if (locale == null) {\n-      return DEFAULT_TLD;\n-    }\n-    String tld = map.get(locale);\n-    if (tld == null) {\n-      return DEFAULT_TLD;\n-    }\n-    return tld;\n+  private static String doGetTLD(Map<String,String> map) {\n+    String tld = map.get(COUNTRY);\n+    return tld == null ? DEFAULT_TLD : tld;\n   }\n }",
      "parent_sha": "b27dc8eb28a052d3a4dd7e78c1a2cacabe96c55c"
    }
  },
  {
    "oid": "9ad25e25b7e8ca1fb264735e65f7e1005265c03f",
    "message": "Double-check to avoid exception clicking on stale item\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2261 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2012-04-26T16:31:31Z",
    "url": "https://github.com/zxing/zxing/commit/9ad25e25b7e8ca1fb264735e65f7e1005265c03f",
    "details": {
      "sha": "b847112811d6003062cf5cf1950b54990bbf1d68",
      "filename": "android/src/com/google/zxing/client/android/book/BrowseBookListener.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/zxing/zxing/blob/9ad25e25b7e8ca1fb264735e65f7e1005265c03f/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fbook%2FBrowseBookListener.java",
      "raw_url": "https://github.com/zxing/zxing/raw/9ad25e25b7e8ca1fb264735e65f7e1005265c03f/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fbook%2FBrowseBookListener.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fbook%2FBrowseBookListener.java?ref=9ad25e25b7e8ca1fb264735e65f7e1005265c03f",
      "patch": "@@ -40,7 +40,11 @@ public void onItemClick(AdapterView<?> parent, View v, int position, long id) {\n       // Clicked header, ignore it\n       return;\n     }\n-    String pageId = items.get(position - 1).getPageId();\n+    int itemOffset = position - 1;\n+    if (itemOffset >= items.size()) {\n+      return;\n+    }\n+    String pageId = items.get(itemOffset).getPageId();\n     String query = SearchBookContentsResult.getQuery();\n     if (LocaleManager.isBookSearchUrl(activity.getISBN()) && pageId.length() > 0) {\n       String uri = activity.getISBN();",
      "parent_sha": "8f461afd0998234eb88357305a854fcd304bc4af"
    }
  },
  {
    "oid": "7561941341284c2f0886fc0dc5012242a9306d23",
    "message": "Tiny optimization to reverse()\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@880 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2009-03-09T15:56:08Z",
    "url": "https://github.com/zxing/zxing/commit/7561941341284c2f0886fc0dc5012242a9306d23",
    "details": {
      "sha": "ce4ea080636561db608c43e2806e216a5db52e11",
      "filename": "core/src/com/google/zxing/common/BitArray.java",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/zxing/zxing/blob/7561941341284c2f0886fc0dc5012242a9306d23/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2FBitArray.java",
      "raw_url": "https://github.com/zxing/zxing/raw/7561941341284c2f0886fc0dc5012242a9306d23/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2FBitArray.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2FBitArray.java?ref=7561941341284c2f0886fc0dc5012242a9306d23",
      "patch": "@@ -133,11 +133,7 @@ public int[] getBitArray() {\n    * Reverses all bits in the array.\r\n    */\r\n   public void reverse() {\r\n-    int[] newBits = makeArray(size);\r\n-    int max = newBits.length;\r\n-    for (int i = 0; i < max; i++) {\r\n-      newBits[i] = 0;\r\n-    }\r\n+    int[] newBits = new int[bits.length];\r\n     int size = this.size;\r\n     for (int i = 0; i < size; i++) {\r\n       if (get(size - i - 1)) {\r\n@@ -158,7 +154,7 @@ private static int[] makeArray(int size) {\n   public String toString() {\r\n     StringBuffer result = new StringBuffer(size);\r\n     for (int i = 0; i < size; i++) {\r\n-      if (i % 8 == 0) {\r\n+      if ((i & 0x07) == 0) {\r\n         result.append(' ');\r\n       }\r\n       result.append(get(i) ? 'X' : '.');\r",
      "parent_sha": "04ff9c43b59298cab59f83cc4e5c49be4de5e0ee"
    }
  },
  {
    "oid": "d4db46ecf61c07834ea57c924ddd13c0e3be317a",
    "message": "Avoid ANFE when nothing can handle a SEND intent, like on an emulator\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2360 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2012-07-23T18:14:30Z",
    "url": "https://github.com/zxing/zxing/commit/d4db46ecf61c07834ea57c924ddd13c0e3be317a",
    "details": {
      "sha": "240967261bd4dc2db335b567924660a7980db608",
      "filename": "android/src/com/google/zxing/client/android/history/HistoryActivity.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/zxing/zxing/blob/d4db46ecf61c07834ea57c924ddd13c0e3be317a/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fhistory%2FHistoryActivity.java",
      "raw_url": "https://github.com/zxing/zxing/raw/d4db46ecf61c07834ea57c924ddd13c0e3be317a/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fhistory%2FHistoryActivity.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fhistory%2FHistoryActivity.java?ref=d4db46ecf61c07834ea57c924ddd13c0e3be317a",
      "patch": "@@ -19,10 +19,12 @@\n import android.app.Activity;\n import android.app.AlertDialog;\n import android.app.ListActivity;\n+import android.content.ActivityNotFoundException;\n import android.content.DialogInterface;\n import android.content.Intent;\n import android.net.Uri;\n import android.os.Bundle;\n+import android.util.Log;\n import android.view.ContextMenu;\n import android.view.Menu;\n import android.view.MenuInflater;\n@@ -38,6 +40,8 @@\n \n public final class HistoryActivity extends ListActivity {\n \n+  private static final String TAG = HistoryActivity.class.getSimpleName();\n+\n   private HistoryManager historyManager;\n   private HistoryItemAdapter adapter;\n   \n@@ -120,7 +124,11 @@ public boolean onOptionsItemSelected(MenuItem item) {\n           intent.putExtra(Intent.EXTRA_TEXT, subject);\n           intent.putExtra(Intent.EXTRA_STREAM, historyFile);\n           intent.setType(\"text/csv\");\n-          startActivity(intent);\n+          try {\n+            startActivity(intent);\n+          } catch (ActivityNotFoundException anfe) {\n+            Log.w(TAG, anfe.toString());\n+          }\n         }\n         break;\n       case R.id.menu_history_clear_text:",
      "parent_sha": "4a683a8266e76b2db1ad14d7e75387f50d8efcd2"
    }
  },
  {
    "oid": "e74c041e46e9de20243ef4b80c67adf43b734e13",
    "message": "Improve URL detection rule to exclude stuff like \"Hi.\"\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@913 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2009-04-18T08:02:08Z",
    "url": "https://github.com/zxing/zxing/commit/e74c041e46e9de20243ef4b80c67adf43b734e13",
    "details": {
      "sha": "837eeedb63cbf7986e98317b32ddc730e47915f8",
      "filename": "core/src/com/google/zxing/client/result/URIResultParser.java",
      "status": "modified",
      "additions": 14,
      "deletions": 6,
      "changes": 20,
      "blob_url": "https://github.com/zxing/zxing/blob/e74c041e46e9de20243ef4b80c67adf43b734e13/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fresult%2FURIResultParser.java",
      "raw_url": "https://github.com/zxing/zxing/raw/e74c041e46e9de20243ef4b80c67adf43b734e13/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fresult%2FURIResultParser.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fresult%2FURIResultParser.java?ref=e74c041e46e9de20243ef4b80c67adf43b734e13",
      "patch": "@@ -30,13 +30,13 @@ private URIResultParser() {\n \n   public static URIParsedResult parse(Result result) {\n     String rawText = result.getText();\n-    if (!isBasicallyValidURI(rawText)) {\n-      return null;\n-    }\n     // We specifically handle the odd \"URL\" scheme here for simplicity\n-    if (rawText.startsWith(\"URL:\")) {\n+    if (rawText != null && rawText.startsWith(\"URL:\")) {\n       rawText = rawText.substring(4);\n     }\n+    if (!isBasicallyValidURI(rawText)) {\n+      return null;\n+    }\n     return new URIParsedResult(rawText, null);\n   }\n \n@@ -46,8 +46,16 @@ public static URIParsedResult parse(Result result) {\n    * need to know when a string is obviously not a URI.\n    */\n   static boolean isBasicallyValidURI(String uri) {\n-    return uri != null && uri.indexOf(' ') < 0 && uri.indexOf('\\n') < 0 &&\n-           (uri.indexOf(':') >= 0 || uri.indexOf('.') >= 0);\n+\n+    if (uri == null || uri.indexOf(' ') >= 0 || uri.indexOf('\\n') >= 0) {\n+      return false;\n+    }\n+    int period = uri.indexOf('.');\n+    // Look for period in a domain but followed by at least a two-char TLD\n+    if (period >= uri.length() - 2) {\n+      return false;\n+    }\n+    return period >= 0 || uri.indexOf(':') >= 0;\n   }\n \n }\n\\ No newline at end of file",
      "parent_sha": "7f2685af2f96864193ef6e05899246634c544e72"
    }
  },
  {
    "oid": "10a90bfecfb94de71bc8281c47fa37272f371625",
    "message": "Some formatting changes, and a few tiny optimizations\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@768 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2008-12-02T00:10:46Z",
    "url": "https://github.com/zxing/zxing/commit/10a90bfecfb94de71bc8281c47fa37272f371625",
    "details": {
      "sha": "cf1e23baa2e1eda6cf838e3db0c42e6e3208b300",
      "filename": "core/test/src/com/google/zxing/common/AbstractNegativeBlackBoxTestCase.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/10a90bfecfb94de71bc8281c47fa37272f371625/core%2Ftest%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2FAbstractNegativeBlackBoxTestCase.java",
      "raw_url": "https://github.com/zxing/zxing/raw/10a90bfecfb94de71bc8281c47fa37272f371625/core%2Ftest%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2FAbstractNegativeBlackBoxTestCase.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Ftest%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2FAbstractNegativeBlackBoxTestCase.java?ref=10a90bfecfb94de71bc8281c47fa37272f371625",
      "patch": "@@ -116,7 +116,7 @@ private boolean checkForFalsePositives(BufferedImage image, float rotationInDegr\n     } catch (ReaderException re) {\n     }\n \n-    // Try \"try harder\" mode\n+    // Try \"try harder\" getMode\n     try {\n       result = getReader().decode(source, TRY_HARDER_HINT);\n       System.out.println(\"Try harder found false positive: '\" + result.getText() + \"' with format '\" +",
      "parent_sha": "36e9361184bb8445b0d1872489fb377b528bb6ea"
    }
  },
  {
    "oid": "952dc0ea77c8a1b58a8fd595bc3a49319d948cde",
    "message": "Added a --dump_results flag to the J2SE client, which will create a text file of the contents of each file scanned. This is very useful for adding golden results for new blackbox images tests.\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@657 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2008-10-31T17:57:31Z",
    "url": "https://github.com/zxing/zxing/commit/952dc0ea77c8a1b58a8fd595bc3a49319d948cde",
    "details": {
      "sha": "90f32d77599e820c862a918dbb931af1ce593148",
      "filename": "javase/src/com/google/zxing/client/j2se/CommandLineRunner.java",
      "status": "modified",
      "additions": 27,
      "deletions": 9,
      "changes": 36,
      "blob_url": "https://github.com/zxing/zxing/blob/952dc0ea77c8a1b58a8fd595bc3a49319d948cde/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FCommandLineRunner.java",
      "raw_url": "https://github.com/zxing/zxing/raw/952dc0ea77c8a1b58a8fd595bc3a49319d948cde/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FCommandLineRunner.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FCommandLineRunner.java?ref=952dc0ea77c8a1b58a8fd595bc3a49319d948cde",
      "patch": "@@ -25,8 +25,9 @@\n import javax.imageio.ImageIO;\n import java.awt.image.BufferedImage;\n import java.io.File;\n-import java.io.IOException;\n import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n import java.net.URI;\n import java.util.Hashtable;\n \n@@ -45,24 +46,28 @@ private CommandLineRunner() {\n \n   public static void main(String[] args) throws Exception {\n     Hashtable<DecodeHintType, Object> hints = null;\n+    boolean dumpResults = false;\n     for (String arg : args) {\n       if (\"--try_harder\".equals(arg)) {\n         hints = new Hashtable<DecodeHintType, Object>(3);\n         hints.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);\n+      } else if (\"--dump_results\".equals(arg)) {\n+        dumpResults = true;\n       } else if (arg.startsWith(\"--\")) {\n         System.out.println(\"Unknown command line option \" + arg);\n         return;\n       }\n     }\n     for (String arg : args) {\n       if (!arg.startsWith(\"--\")) {\n-        decodeOneArgument(arg, hints);\n+        decodeOneArgument(arg, hints, dumpResults);\n       }\n     }\n   }\n \n-  private static void decodeOneArgument(String argument, Hashtable<DecodeHintType, Object> hints)\n-      throws Exception {\n+  private static void decodeOneArgument(String argument, Hashtable<DecodeHintType, Object> hints,\n+      boolean dumpResults) throws Exception {\n+\n     File inputFile = new File(argument);\n     if (inputFile.exists()) {\n       if (inputFile.isDirectory()) {\n@@ -74,8 +79,21 @@ private static void decodeOneArgument(String argument, Hashtable<DecodeHintType,\n           if (filename.startsWith(\".\") || filename.endsWith(\".txt\")) {\n             continue;\n           }\n-          if (decode(input.toURI(), hints)) {\n+          Result result = decode(input.toURI(), hints);\n+          if (result != null) {\n             successful++;\n+            if (dumpResults) {\n+              String name = input.getAbsolutePath();\n+              int pos = name.lastIndexOf('.');\n+              if (pos > 0) {\n+                name = name.substring(0, pos);\n+              }\n+              File dump = new File(name + \".txt\");\n+              dump.createNewFile();\n+              FileOutputStream stream = new FileOutputStream(dump);\n+              stream.write(result.getText().getBytes());\n+              stream.close();\n+            }\n           }\n           total++;\n         }\n@@ -89,7 +107,7 @@ private static void decodeOneArgument(String argument, Hashtable<DecodeHintType,\n     }\n   }\n \n-  private static boolean decode(URI uri, Hashtable<DecodeHintType, Object> hints) throws IOException {\n+  private static Result decode(URI uri, Hashtable<DecodeHintType, Object> hints) throws IOException {\n     BufferedImage image;\n     try {\n       image = ImageIO.read(uri.toURL());\n@@ -98,17 +116,17 @@ private static boolean decode(URI uri, Hashtable<DecodeHintType, Object> hints)\n     }\n     if (image == null) {\n       System.err.println(uri.toString() + \": Could not load image\");\n-      return false;\n+      return null;\n     }\n     try {\n       MonochromeBitmapSource source = new BufferedImageMonochromeBitmapSource(image);\n       Result result = new MultiFormatReader().decode(source, hints);\n       System.out.println(uri.toString() + \" (format: \" + result.getBarcodeFormat() + \"):\\n\" +\n           result.getText());\n-      return true;\n+      return result;\n     } catch (ReaderException e) {\n       System.out.println(uri.toString() + \": No barcode found\");\n-      return false;\n+      return null;\n     }\n   }\n ",
      "parent_sha": "8671371c59e4cb6f31a10652c0fd192c3abb23ac"
    }
  },
  {
    "oid": "b53b6f27cc2ef3b38408228a10dfded6f6624b19",
    "message": "Should fix problems decoding tiny QR codes without any alignment pattern\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@63 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2007-11-20T18:51:40Z",
    "url": "https://github.com/zxing/zxing/commit/b53b6f27cc2ef3b38408228a10dfded6f6624b19",
    "details": {
      "sha": "89ddbc6a79464aa0e09c98cd5a2fceeed5aeedc1",
      "filename": "core/src/com/google/zxing/qrcode/detector/DefaultGridSampler.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/zxing/zxing/blob/b53b6f27cc2ef3b38408228a10dfded6f6624b19/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdetector%2FDefaultGridSampler.java",
      "raw_url": "https://github.com/zxing/zxing/raw/b53b6f27cc2ef3b38408228a10dfded6f6624b19/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdetector%2FDefaultGridSampler.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdetector%2FDefaultGridSampler.java?ref=b53b6f27cc2ef3b38408228a10dfded6f6624b19",
      "patch": "@@ -31,25 +31,27 @@ protected BitMatrix sampleGrid(MonochromeBitmapSource image,\n                                  FinderPattern bottomLeft,\n                                  AlignmentPattern alignmentPattern,\n                                  int dimension) throws ReaderException {\n-    float bottomRightX;\n-    float bottomRightY;\n+    float dimMinusThree = (float) dimension - 3.5f;\n+    float bottomRightX, bottomRightY;\n+    float sourceBottomRightX, sourceBottomRightY;\n     if (alignmentPattern != null) {\n       bottomRightX = alignmentPattern.getX();\n       bottomRightY = alignmentPattern.getY();\n+      sourceBottomRightX = sourceBottomRightY = dimMinusThree - 3.0f;\n     } else {\n       // Don't have an alignment pattern, just make up the bottom-right point\n       bottomRightX = (topRight.getX() - topLeft.getX()) + bottomLeft.getX();\n       bottomRightY = (topRight.getY() - topLeft.getY()) + bottomLeft.getY();\n+      sourceBottomRightX = sourceBottomRightY = dimMinusThree;\n     }\n \n-    float dimMinusThree = (float) dimension - 3.5f;\n     PerspectiveTransform transform = PerspectiveTransform.quadrilateralToQuadrilateral(\n         3.5f,\n         3.5f,\n         dimMinusThree,\n         3.5f,\n-        dimMinusThree - 3.0f,\n-        dimMinusThree - 3.0f,\n+        sourceBottomRightX,\n+        sourceBottomRightY,\n         3.5f,\n         dimMinusThree,\n         topLeft.getX(),",
      "parent_sha": "a164858fe47e9d734c1206e3140e6088ae47b471"
    }
  },
  {
    "oid": "a1a51de290b744d9f4bc106ca7ef3b5b45928b67",
    "message": "Oops, fix fat finger typo from last change",
    "date": "2016-06-24T09:48:25Z",
    "url": "https://github.com/zxing/zxing/commit/a1a51de290b744d9f4bc106ca7ef3b5b45928b67",
    "details": {
      "sha": "535ba02f2a871785361480e46f7d79c126a53c3e",
      "filename": "core/src/main/java/com/google/zxing/pdf417/decoder/ec/ModulusGF.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/a1a51de290b744d9f4bc106ca7ef3b5b45928b67/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fpdf417%2Fdecoder%2Fec%2FModulusGF.java",
      "raw_url": "https://github.com/zxing/zxing/raw/a1a51de290b744d9f4bc106ca7ef3b5b45928b67/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fpdf417%2Fdecoder%2Fec%2FModulusGF.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fpdf417%2Fdecoder%2Fec%2FModulusGF.java?ref=a1a51de290b744d9f4bc106ca7ef3b5b45928b67",
      "patch": "@@ -43,7 +43,7 @@ private ModulusGF(int modulus, int generator) {\n       expTable[i] = x;\n       x = (x * generator) % modulus;\n     }\n-    for (int i = 0; i < modulus - e1; i++) {\n+    for (int i = 0; i < modulus - 1; i++) {\n       logTable[expTable[i]] = i;\n     }\n     // logTable[0] == 0 but this should never be used",
      "parent_sha": "08e5431d995a88d443c06406520e62e2e0d02034"
    }
  },
  {
    "oid": "843a181d7315699259baa59bce12799104d5d4ec",
    "message": "Another HTTP exception workaround\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2593 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2013-03-24T12:06:52Z",
    "url": "https://github.com/zxing/zxing/commit/843a181d7315699259baa59bce12799104d5d4ec",
    "details": {
      "sha": "4769a94153d11d6c3250c07024a5388f20522c21",
      "filename": "android/src/com/google/zxing/client/android/HttpHelper.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/zxing/zxing/blob/843a181d7315699259baa59bce12799104d5d4ec/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FHttpHelper.java",
      "raw_url": "https://github.com/zxing/zxing/raw/843a181d7315699259baa59bce12799104d5d4ec/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FHttpHelper.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FHttpHelper.java?ref=843a181d7315699259baa59bce12799104d5d4ec",
      "patch": "@@ -216,10 +216,10 @@ private static int safelyConnect(String uri, HttpURLConnection connection) throw\n       // this is maybe this Android bug: http://code.google.com/p/android/issues/detail?id=15554\n       Log.w(TAG, \"Bad URI? \" + uri);\n       throw new IOException(npe.toString());\n-    } catch (NumberFormatException nfe) {\n-      // Again seen this in the wild for bad header fields in the server response!\n+    } catch (IllegalArgumentException iae) {\n+      // Again seen this in the wild for bad header fields in the server response! or bad reads\n       Log.w(TAG, \"Bad server status? \" + uri);\n-      throw new IOException(nfe.toString());\n+      throw new IOException(iae.toString());\n     }\n   }\n ",
      "parent_sha": "4dc5f1abaca83fae4acc38c7bce69e04661d85ed"
    }
  },
  {
    "oid": "672bd4095882539e7c3ba897fff62bb237e77570",
    "message": "Prevent --raw CLR option from failing if result.getRawBytes() is null (#1683)\n\nFixes https://github.com/zxing/zxing/issues/1682",
    "date": "2023-09-07T01:58:06Z",
    "url": "https://github.com/zxing/zxing/commit/672bd4095882539e7c3ba897fff62bb237e77570",
    "details": {
      "sha": "4e1948a5515e3c5f9855efbf5b42079395a67f2f",
      "filename": "javase/src/main/java/com/google/zxing/client/j2se/DecodeWorker.java",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/zxing/zxing/blob/672bd4095882539e7c3ba897fff62bb237e77570/javase%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FDecodeWorker.java",
      "raw_url": "https://github.com/zxing/zxing/raw/672bd4095882539e7c3ba897fff62bb237e77570/javase%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FDecodeWorker.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/javase%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FDecodeWorker.java?ref=672bd4095882539e7c3ba897fff62bb237e77570",
      "patch": "@@ -168,14 +168,17 @@ private Result[] decode(URI uri, Map<DecodeHintType,?> hints) throws IOException\n \n         if (config.outputRaw) {\n           StringBuilder rawData = new StringBuilder();\n+          byte[] rawBytes = result.getRawBytes();\n \n-          for (byte b : result.getRawBytes()) {\n-            rawData.append(String.format(\"%02X\", b & 0xff));\n-            rawData.append(\" \");\n-          }\n-          rawData.setLength(rawData.length() - 1);  // chop off final space\n+          if (rawBytes != null) {\n+            for (byte b : rawBytes) {\n+              rawData.append(String.format(\"%02X\", b & 0xff));\n+              rawData.append(\" \");\n+            }\n+            rawData.setLength(rawData.length() - 1);  // chop off final space\n \n-          output.write(\"Raw bits:\\n\" + rawData + \"\\n\");\n+            output.write(\"Raw bits:\\n\" + rawData + \"\\n\");            \n+          }\n         }\n \n         ResultPoint[] resultPoints = result.getResultPoints();",
      "parent_sha": "557b5fcf0e22a6cf2541a54bd830116712fec51d"
    }
  },
  {
    "oid": "a0c53e0558a8280a8fc5460163eb053415ec973f",
    "message": "Issue #179 : add default start/end guard to Codabar if not specified, for symmetry with decoder",
    "date": "2014-07-03T22:19:28Z",
    "url": "https://github.com/zxing/zxing/commit/a0c53e0558a8280a8fc5460163eb053415ec973f",
    "details": {
      "sha": "d27a166f1cf5775f1dd80de6f1f611e6c431a591",
      "filename": "core/src/main/java/com/google/zxing/oned/CodaBarWriter.java",
      "status": "modified",
      "additions": 29,
      "deletions": 17,
      "changes": 46,
      "blob_url": "https://github.com/zxing/zxing/blob/a0c53e0558a8280a8fc5460163eb053415ec973f/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Foned%2FCodaBarWriter.java",
      "raw_url": "https://github.com/zxing/zxing/raw/a0c53e0558a8280a8fc5460163eb053415ec973f/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Foned%2FCodaBarWriter.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Foned%2FCodaBarWriter.java?ref=a0c53e0558a8280a8fc5460163eb053415ec973f",
      "patch": "@@ -16,8 +16,6 @@\n \n package com.google.zxing.oned;\n \n-import java.util.Arrays;\n-\n /**\n  * This class renders CodaBar as {@code boolean[]}.\n  *\n@@ -28,26 +26,40 @@ public final class CodaBarWriter extends OneDimensionalCodeWriter {\n   private static final char[] START_END_CHARS = {'A', 'B', 'C', 'D'};\n   private static final char[] ALT_START_END_CHARS = {'T', 'N', '*', 'E'};\n   private static final char[] CHARS_WHICH_ARE_TEN_LENGTH_EACH_AFTER_DECODED = {'/', ':', '+', '.'};\n+  private static final char DEFAULT_GUARD = START_END_CHARS[0];\n \n   @Override\n   public boolean[] encode(String contents) {\n \n     if (contents.length() < 2) {\n-      throw new IllegalArgumentException(\"Codabar should start/end with start/stop symbols\");\n-    }\n-    // Verify input and calculate decoded length.\n-    char firstChar = Character.toUpperCase(contents.charAt(0));\n-    char lastChar = Character.toUpperCase(contents.charAt(contents.length() - 1));\n-    boolean startsEndsNormal = \n-        CodaBarReader.arrayContains(START_END_CHARS, firstChar) && \n-        CodaBarReader.arrayContains(START_END_CHARS, lastChar);\n-    boolean startsEndsAlt = \n-        CodaBarReader.arrayContains(ALT_START_END_CHARS, firstChar) && \n-        CodaBarReader.arrayContains(ALT_START_END_CHARS, lastChar);\n-    if (!(startsEndsNormal || startsEndsAlt)) {\n-      throw new IllegalArgumentException(\n-          \"Codabar should start/end with \" + Arrays.toString(START_END_CHARS) + \n-          \", or start/end with \" + Arrays.toString(ALT_START_END_CHARS));\n+      // Can't have a start/end guard, so tentatively add default guards\n+      contents = DEFAULT_GUARD + contents + DEFAULT_GUARD;\n+    } else {\n+      // Verify input and calculate decoded length.\n+      char firstChar = Character.toUpperCase(contents.charAt(0));\n+      char lastChar = Character.toUpperCase(contents.charAt(contents.length() - 1));\n+      boolean startsNormal = CodaBarReader.arrayContains(START_END_CHARS, firstChar);\n+      boolean endsNormal = CodaBarReader.arrayContains(START_END_CHARS, lastChar);\n+      boolean startsAlt = CodaBarReader.arrayContains(ALT_START_END_CHARS, firstChar);\n+      boolean endsAlt = CodaBarReader.arrayContains(ALT_START_END_CHARS, lastChar);\n+      if (startsNormal) {\n+        if (!endsNormal) {\n+          throw new IllegalArgumentException(\"Invalid start/end guards: \" + contents);\n+        }\n+        // else already has valid start/end\n+      } else if (startsAlt) {\n+        if (!endsAlt) {\n+          throw new IllegalArgumentException(\"Invalid start/end guards: \" + contents);\n+        }\n+        // else already has valid start/end\n+      } else {\n+        // Doesn't start with a guard\n+        if (endsNormal || endsAlt) {\n+          throw new IllegalArgumentException(\"Invalid start/end guards: \" + contents);\n+        }\n+        // else doesn't end with guard either, so add a default\n+        contents = DEFAULT_GUARD + contents + DEFAULT_GUARD;\n+      }\n     }\n \n     // The start character and the end character are decoded to 10 length each.",
      "parent_sha": "47d877d80a5bae17fdd03c932926cf29b031f30e"
    }
  },
  {
    "oid": "895775efa5ad91732a370bcf3a653cfc851b4359",
    "message": "Possible fix for https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=38181 ; disallow encodings not supported by the JVM",
    "date": "2021-09-06T12:23:27Z",
    "url": "https://github.com/zxing/zxing/commit/895775efa5ad91732a370bcf3a653cfc851b4359",
    "details": {
      "sha": "5865445e2e1b2679f5b96612ba23aefde30e45e4",
      "filename": "core/src/main/java/com/google/zxing/common/CharacterSetECI.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/zxing/zxing/blob/895775efa5ad91732a370bcf3a653cfc851b4359/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2FCharacterSetECI.java",
      "raw_url": "https://github.com/zxing/zxing/raw/895775efa5ad91732a370bcf3a653cfc851b4359/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2FCharacterSetECI.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2FCharacterSetECI.java?ref=895775efa5ad91732a370bcf3a653cfc851b4359",
      "patch": "@@ -38,14 +38,14 @@ public enum CharacterSetECI {\n   ISO8859_3(5, \"ISO-8859-3\"),\n   ISO8859_4(6, \"ISO-8859-4\"),\n   ISO8859_5(7, \"ISO-8859-5\"),\n-  ISO8859_6(8, \"ISO-8859-6\"),\n+  // ISO8859_6(8, \"ISO-8859-6\"),\n   ISO8859_7(9, \"ISO-8859-7\"),\n-  ISO8859_8(10, \"ISO-8859-8\"),\n+  // ISO8859_8(10, \"ISO-8859-8\"),\n   ISO8859_9(11, \"ISO-8859-9\"),\n-  ISO8859_10(12, \"ISO-8859-10\"),\n-  ISO8859_11(13, \"ISO-8859-11\"),\n+  // ISO8859_10(12, \"ISO-8859-10\"),\n+  // ISO8859_11(13, \"ISO-8859-11\"),\n   ISO8859_13(15, \"ISO-8859-13\"),\n-  ISO8859_14(16, \"ISO-8859-14\"),\n+  // ISO8859_14(16, \"ISO-8859-14\"),\n   ISO8859_15(17, \"ISO-8859-15\"),\n   ISO8859_16(18, \"ISO-8859-16\"),\n   SJIS(20, \"Shift_JIS\"),",
      "parent_sha": "f04ab98f9710dd6094834d3c4be32b553ef42b5a"
    }
  },
  {
    "oid": "144321067c4d30e2223d1eb73aa47e9a1763c2fa",
    "message": "Fix encoding of certain Intents that don't have EXTRA_TEXT or EXTRA_STREAM\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2388 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2012-08-13T07:09:02Z",
    "url": "https://github.com/zxing/zxing/commit/144321067c4d30e2223d1eb73aa47e9a1763c2fa",
    "details": {
      "sha": "191d1405f799ba2efaa7ba3696634f0e79e5a25e",
      "filename": "android/src/com/google/zxing/client/android/encode/QRCodeEncoder.java",
      "status": "modified",
      "additions": 21,
      "deletions": 7,
      "changes": 28,
      "blob_url": "https://github.com/zxing/zxing/blob/144321067c4d30e2223d1eb73aa47e9a1763c2fa/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fencode%2FQRCodeEncoder.java",
      "raw_url": "https://github.com/zxing/zxing/raw/144321067c4d30e2223d1eb73aa47e9a1763c2fa/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fencode%2FQRCodeEncoder.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fencode%2FQRCodeEncoder.java?ref=144321067c4d30e2223d1eb73aa47e9a1763c2fa",
      "patch": "@@ -131,18 +131,32 @@ private boolean encodeContentsFromZXingIntent(Intent intent) {\n   // Handles send intents from multitude of Android applications\n   private void encodeContentsFromShareIntent(Intent intent) throws WriterException {\n     // Check if this is a plain text encoding, or contact\n-    if (intent.hasExtra(Intent.EXTRA_TEXT)) {\n-      encodeContentsFromShareIntentPlainText(intent);\n+    if (intent.hasExtra(Intent.EXTRA_STREAM)) {\n+      encodeFromStreamExtra(intent);\n     } else {\n-      // Attempt default sharing.\n-      encodeContentsFromShareIntentDefault(intent);\n+      encodeFromTextExtras(intent);\n     }\n   }\n \n-  private void encodeContentsFromShareIntentPlainText(Intent intent) throws WriterException {\n+  private void encodeFromTextExtras(Intent intent) throws WriterException {\n     // Notice: Google Maps shares both URL and details in one text, bummer!\n     String theContents = ContactEncoder.trim(intent.getStringExtra(Intent.EXTRA_TEXT));\n-    // We only support non-empty and non-blank texts.\n+    if (theContents == null) {\n+      theContents = ContactEncoder.trim(intent.getStringExtra(\"android.intent.extra.HTML_TEXT\"));\n+      // Intent.EXTRA_HTML_TEXT\n+      if (theContents == null) {\n+        theContents = ContactEncoder.trim(intent.getStringExtra(Intent.EXTRA_SUBJECT));\n+        if (theContents == null) {\n+          String[] emails = intent.getStringArrayExtra(Intent.EXTRA_EMAIL);\n+          if (emails != null) {\n+            theContents = ContactEncoder.trim(emails[0]);\n+          } else {\n+            theContents = \"?\";\n+          }\n+        }\n+      }\n+    }\n+\n     // Trim text to avoid URL breaking.\n     if (theContents == null || theContents.length() == 0) {\n       throw new WriterException(\"Empty EXTRA_TEXT\");\n@@ -161,7 +175,7 @@ private void encodeContentsFromShareIntentPlainText(Intent intent) throws Writer\n   }\n \n   // Handles send intents from the Contacts app, retrieving a contact as a VCARD.\n-  private void encodeContentsFromShareIntentDefault(Intent intent) throws WriterException {\n+  private void encodeFromStreamExtra(Intent intent) throws WriterException {\n     format = BarcodeFormat.QR_CODE;\n     Bundle bundle = intent.getExtras();\n     if (bundle == null) {",
      "parent_sha": "9add6f3992456e1d8af9aef29dcf43c8cb9674a8"
    }
  },
  {
    "oid": "a4af21a0fe05a96f53019bc30189bcbe8482a033",
    "message": "Issue #108 : avoid accessing system property directly to avoid a potential security exception",
    "date": "2014-03-31T12:57:48Z",
    "url": "https://github.com/zxing/zxing/commit/a4af21a0fe05a96f53019bc30189bcbe8482a033",
    "details": {
      "sha": "9ea1d822e498d9e587521eb2551bbbd0d9ec03a9",
      "filename": "core/src/main/java/com/google/zxing/common/StringUtils.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/zxing/zxing/blob/a4af21a0fe05a96f53019bc30189bcbe8482a033/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2FStringUtils.java",
      "raw_url": "https://github.com/zxing/zxing/raw/a4af21a0fe05a96f53019bc30189bcbe8482a033/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2FStringUtils.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2FStringUtils.java?ref=a4af21a0fe05a96f53019bc30189bcbe8482a033",
      "patch": "@@ -16,6 +16,7 @@\n \n package com.google.zxing.common;\n \n+import java.nio.charset.Charset;\n import java.util.Map;\n \n import com.google.zxing.DecodeHintType;\n@@ -28,8 +29,7 @@\n  */\n public final class StringUtils {\n \n-  private static final String PLATFORM_DEFAULT_ENCODING =\n-      System.getProperty(\"file.encoding\");\n+  private static final String PLATFORM_DEFAULT_ENCODING = Charset.defaultCharset().name();\n   public static final String SHIFT_JIS = \"SJIS\";\n   public static final String GB2312 = \"GB2312\";\n   private static final String EUC_JP = \"EUC_JP\";",
      "parent_sha": "b09290c7dc63a047bd8a41991a20d343bee2b76b"
    }
  },
  {
    "oid": "002aa47e01d084cde454a1bf25478fed627f7d0e",
    "message": "To be safe, avoid static DateFormat even in single-thread Android context",
    "date": "2014-04-22T17:44:17Z",
    "url": "https://github.com/zxing/zxing/commit/002aa47e01d084cde454a1bf25478fed627f7d0e",
    "details": {
      "sha": "04956f249e7353920ca7c2e15cfb0627abd2a785",
      "filename": "android/src/com/google/zxing/client/android/history/HistoryManager.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/zxing/zxing/blob/002aa47e01d084cde454a1bf25478fed627f7d0e/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fhistory%2FHistoryManager.java",
      "raw_url": "https://github.com/zxing/zxing/raw/002aa47e01d084cde454a1bf25478fed627f7d0e/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fhistory%2FHistoryManager.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fhistory%2FHistoryManager.java?ref=002aa47e01d084cde454a1bf25478fed627f7d0e",
      "patch": "@@ -67,8 +67,6 @@ public final class HistoryManager {\n \n   private static final String[] ID_COL_PROJECTION = { DBHelper.ID_COL };\n   private static final String[] ID_DETAIL_COL_PROJECTION = { DBHelper.ID_COL, DBHelper.DETAILS_COL };\n-  private static final DateFormat EXPORT_DATE_TIME_FORMAT =\n-      DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);\n \n   private final Activity activity;\n \n@@ -286,6 +284,7 @@ CharSequence buildHistory() {\n                         null, null, null, null,\n                         DBHelper.TIMESTAMP_COL + \" DESC\");\n \n+      DateFormat format = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);\n       StringBuilder historyText = new StringBuilder(1000);\n       while (cursor.moveToNext()) {\n \n@@ -297,7 +296,7 @@ CharSequence buildHistory() {\n         // Add timestamp again, formatted\n         long timestamp = cursor.getLong(3);\n         historyText.append('\"').append(massageHistoryField(\n-            EXPORT_DATE_TIME_FORMAT.format(new Date(timestamp)))).append(\"\\\",\");\n+            format.format(new Date(timestamp)))).append(\"\\\",\");\n \n         // Above we're preserving the old ordering of columns which had formatted data in position 5\n ",
      "parent_sha": "a9cf1e91ec29374f7e80e983fe7451a974e4d761"
    }
  },
  {
    "oid": "6573f932a1ed28579f2e9223cef217b7a59ea580",
    "message": "Avoid NPE on null action\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2262 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2012-04-26T16:34:51Z",
    "url": "https://github.com/zxing/zxing/commit/6573f932a1ed28579f2e9223cef217b7a59ea580",
    "details": {
      "sha": "5911f2dcc6c1637fc86b04790c3597b50321d3ff",
      "filename": "android/src/com/google/zxing/client/android/encode/EncodeActivity.java",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/zxing/zxing/blob/6573f932a1ed28579f2e9223cef217b7a59ea580/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fencode%2FEncodeActivity.java",
      "raw_url": "https://github.com/zxing/zxing/raw/6573f932a1ed28579f2e9223cef217b7a59ea580/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fencode%2FEncodeActivity.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fencode%2FEncodeActivity.java?ref=6573f932a1ed28579f2e9223cef217b7a59ea580",
      "patch": "@@ -63,16 +63,17 @@ public final class EncodeActivity extends Activity {\n   @Override\n   public void onCreate(Bundle icicle) {\n     super.onCreate(icicle);\n-\n     Intent intent = getIntent();\n-    if (intent != null) {\n+    if (intent == null) {\n+      finish();\n+    } else {\n       String action = intent.getAction();\n-      if (action.equals(Intents.Encode.ACTION) || action.equals(Intent.ACTION_SEND)) {\n+      if (Intents.Encode.ACTION.equals(action) || Intent.ACTION_SEND.equals(action)) {\n         setContentView(R.layout.encode);\n-        return;\n+      } else {\n+        finish();\n       }\n     }\n-    finish();\n   }\n \n   @Override",
      "parent_sha": "9ad25e25b7e8ca1fb264735e65f7e1005265c03f"
    }
  },
  {
    "oid": "1afa8c80d4e16f4a9f7f8f9ba7b603a4975820bc",
    "message": "Check more directly for Shopper; saw a strange ActivityNotFoundException here\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2099 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2011-12-29T04:00:14Z",
    "url": "https://github.com/zxing/zxing/commit/1afa8c80d4e16f4a9f7f8f9ba7b603a4975820bc",
    "details": {
      "sha": "f1ffa57f2260974d9494a266e0fe6d8691521321",
      "filename": "android/src/com/google/zxing/client/android/result/ResultHandler.java",
      "status": "modified",
      "additions": 14,
      "deletions": 7,
      "changes": 21,
      "blob_url": "https://github.com/zxing/zxing/blob/1afa8c80d4e16f4a9f7f8f9ba7b603a4975820bc/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fresult%2FResultHandler.java",
      "raw_url": "https://github.com/zxing/zxing/raw/1afa8c80d4e16f4a9f7f8f9ba7b603a4975820bc/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fresult%2FResultHandler.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fresult%2FResultHandler.java?ref=1afa8c80d4e16f4a9f7f8f9ba7b603a4975820bc",
      "patch": "@@ -44,6 +44,7 @@\n import java.text.ParsePosition;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n+import java.util.Collection;\n import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.Locale;\n@@ -488,14 +489,20 @@ final void webSearch(String query) {\n   }\n \n   final void openGoogleShopper(String query) {\n-    try {\n-      activity.getPackageManager().getPackageInfo(GOOGLE_SHOPPER_PACKAGE, 0);\n-      // If we didn't throw, Shopper is installed, so launch it.\n-      Intent intent = new Intent(Intent.ACTION_SEARCH);\n-      intent.setClassName(GOOGLE_SHOPPER_PACKAGE, GOOGLE_SHOPPER_ACTIVITY);\n-      intent.putExtra(SearchManager.QUERY, query);\n+\n+    // Construct Intent to launch Shopper\n+    Intent intent = new Intent(Intent.ACTION_SEARCH);\n+    intent.setClassName(GOOGLE_SHOPPER_PACKAGE, GOOGLE_SHOPPER_ACTIVITY);\n+    intent.putExtra(SearchManager.QUERY, query);\n+\n+    // Is it available?\n+    PackageManager pm = activity.getPackageManager();\n+    Collection<?> availableApps = pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);\n+\n+    if (availableApps != null && !availableApps.isEmpty()) {\n+      // If something can handle it, start it\n       activity.startActivity(intent);\n-    } catch (PackageManager.NameNotFoundException e) {\n+    } else {\n       // Otherwise offer to install it from Market.\n       AlertDialog.Builder builder = new AlertDialog.Builder(activity);\n       builder.setTitle(R.string.msg_google_shopper_missing);",
      "parent_sha": "4af95ab471169d6b2064efeb621d0763ceb08f01"
    }
  },
  {
    "oid": "5659a711a2bb60762b16efd7a6338ea744620f2d",
    "message": "Can now instantiate this to represent a region of a BufferedImage rather than the whole thing.\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@349 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2008-04-07T20:05:11Z",
    "url": "https://github.com/zxing/zxing/commit/5659a711a2bb60762b16efd7a6338ea744620f2d",
    "details": {
      "sha": "bfe97bc8d93d32f47f96a23782ad171a73d091ce",
      "filename": "javase/src/com/google/zxing/client/j2se/BufferedImageMonochromeBitmapSource.java",
      "status": "modified",
      "additions": 49,
      "deletions": 11,
      "changes": 60,
      "blob_url": "https://github.com/zxing/zxing/blob/5659a711a2bb60762b16efd7a6338ea744620f2d/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FBufferedImageMonochromeBitmapSource.java",
      "raw_url": "https://github.com/zxing/zxing/raw/5659a711a2bb60762b16efd7a6338ea744620f2d/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FBufferedImageMonochromeBitmapSource.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FBufferedImageMonochromeBitmapSource.java?ref=5659a711a2bb60762b16efd7a6338ea744620f2d",
      "patch": "@@ -32,11 +32,19 @@\n  * underlying image as if it were a monochrome image. Behind the scenes, it is evaluating\n  * the luminance of the underlying image by retrieving its pixels' RGB values.</p>\n  *\n+ * <p>This may also be used to construct a {@link MonochromeBitmapSource}\n+ * based on a region of a {@link BufferedImage}; see\n+ * {@link #BufferedImageMonochromeBitmapSource(BufferedImage, int, int, int, int)}.</p>\n+ *\n  * @author srowen@google.com (Sean Owen), Daniel Switkin (dswitkin@google.com)\n  */\n public final class BufferedImageMonochromeBitmapSource implements MonochromeBitmapSource {\n \n   private final BufferedImage image;\n+  private final int left;\n+  private final int top;\n+  private final int width;\n+  private final int height;\n   private int blackPoint;\n   private BlackPointEstimationMethod lastMethod;\n   private int lastArgument;\n@@ -46,18 +54,43 @@ public final class BufferedImageMonochromeBitmapSource implements MonochromeBitm\n   private static final int LUMINANCE_BUCKETS = 1 << LUMINANCE_BITS;\n \n   public BufferedImageMonochromeBitmapSource(BufferedImage image) {\n+    this(image, 0, 0, image.getWidth(), image.getHeight());\n+  }\n+\n+  public BufferedImageMonochromeBitmapSource(BufferedImage image, int left, int top, int right, int bottom) {\n     this.image = image;\n     blackPoint = 0x7F;\n     lastMethod = null;\n     lastArgument = 0;\n+    int sourceHeight = image.getHeight();\n+    int sourceWidth = image.getWidth();\n+    if (left < 0 || top < 0 || right >= sourceWidth || bottom >= sourceHeight || right <= left || bottom <= top) {\n+      throw new IllegalArgumentException(\"Invalid bounds: (\" + top + ',' + left + \") (\" + right + ',' + bottom + ')');\n+    }\n+    this.left = left;\n+    this.top = top;\n+    this.width = right - left;\n+    this.height = bottom - top;\n   }\n \n+  /**\n+   * @return underlying {@link BufferedImage} behind this instance. Note that even if this instance\n+   *  only uses a subset of the full image, the returned value here represents the entire backing image.\n+   */\n   public BufferedImage getImage() {\n     return image;\n   }\n \n+  private int getRGB(int x, int y) {\n+    return image.getRGB(left + x, top + y);\n+  }\n+\n+  private void getRGBRow(int startX, int startY, int[] result) {\n+    image.getRGB(left + startX, top + startY, result.length, 1, result, 0, result.length);\n+  }\n+\n   public boolean isBlack(int x, int y) {\n-    return computeRGBLuminance(image.getRGB(x, y)) < blackPoint;\n+    return computeRGBLuminance(getRGB(x, y)) < blackPoint;\n   }\n \n   public BitArray getBlackRow(int y, BitArray row, int startX, int getWidth) {\n@@ -66,7 +99,8 @@ public BitArray getBlackRow(int y, BitArray row, int startX, int getWidth) {\n     } else {\n       row.clear();\n     }\n-    int[] pixelRow = image.getRGB(startX, y, getWidth, 1, null, 0, getWidth);\n+    int[] pixelRow = new int[getWidth];\n+    getRGBRow(startX, y, pixelRow);\n     for (int i = 0; i < getWidth; i++) {\n       if (computeRGBLuminance(pixelRow[i]) < blackPoint) {\n         row.set(i);\n@@ -76,32 +110,30 @@ public BitArray getBlackRow(int y, BitArray row, int startX, int getWidth) {\n   }\n \n   public int getHeight() {\n-    return image.getHeight();\n+    return height;\n   }\n \n   public int getWidth() {\n-    return image.getWidth();\n+    return width;\n   }\n \n   public void estimateBlackPoint(BlackPointEstimationMethod method, int argument) throws ReaderException {\n     if (!method.equals(lastMethod) || argument != lastArgument) {\n-      int width = image.getWidth();\n-      int height = image.getHeight();\n       int[] histogram = new int[LUMINANCE_BUCKETS];\n       if (method.equals(BlackPointEstimationMethod.TWO_D_SAMPLING)) {\n         int minDimension = width < height ? width : height;\n         int startI = height == minDimension ? 0 : (height - width) >> 1;\n         int startJ = width == minDimension ? 0 : (width - height) >> 1;\n         for (int n = 0; n < minDimension; n++) {\n-          int pixel = image.getRGB(startJ + n, startI + n);\n+          int pixel = getRGB(startJ + n, startI + n);\n           histogram[computeRGBLuminance(pixel) >> LUMINANCE_SHIFT]++;\n         }\n       } else if (method.equals(BlackPointEstimationMethod.ROW_SAMPLING)) {\n         if (argument < 0 || argument >= height) {\n           throw new IllegalArgumentException(\"Row is not within the image: \" + argument);\n         }\n         int[] rgbArray = new int[width];\n-        image.getRGB(0, argument, width, 1, rgbArray, 0, width);\n+        getRGBRow(0, argument, rgbArray);\n         for (int x = 0; x < width; x++) {\n           histogram[computeRGBLuminance(rgbArray[x]) >> LUMINANCE_SHIFT]++;\n         }\n@@ -122,13 +154,19 @@ public MonochromeBitmapSource rotateCounterClockwise() {\n     if (!isRotateSupported()) {\n       throw new IllegalStateException(\"Rotate not supported\");\n     }\n+    int sourceWidth = image.getWidth();\n+    int sourceHeight = image.getHeight();\n     // 90 degrees counterclockwise:\n-    AffineTransform transform = new AffineTransform(0.0, -1.0, 1.0, 0.0, 0.0, image.getWidth());\n+    AffineTransform transform = new AffineTransform(0.0, -1.0, 1.0, 0.0, 0.0, sourceWidth);\n     BufferedImageOp op = new AffineTransformOp(transform, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);\n     // Note width/height are flipped since we are rotating 90 degrees:\n-    BufferedImage rotatedImage = new BufferedImage(image.getHeight(), image.getWidth(), image.getType());\n+    BufferedImage rotatedImage = new BufferedImage(sourceHeight, sourceWidth, image.getType());\n     op.filter(image, rotatedImage);\n-    return new BufferedImageMonochromeBitmapSource(rotatedImage);\n+    return new BufferedImageMonochromeBitmapSource(rotatedImage,\n+                                                   top,\n+                                                   sourceWidth - (left + width),\n+                                                   top + height,\n+                                                   sourceWidth - left);\n   }\n \n   public boolean isRotateSupported() {",
      "parent_sha": "a5b385e7640b0d0a920d4416b7b3400fbb63bc3d"
    }
  },
  {
    "oid": "ea00f5a51c07ecfa6c3021960854802d476c9e5d",
    "message": "minSize from provided sizes\n\ncreate minSize Dimension from provided width and height",
    "date": "2014-12-17T14:41:33Z",
    "url": "https://github.com/zxing/zxing/commit/ea00f5a51c07ecfa6c3021960854802d476c9e5d",
    "details": {
      "sha": "7a11a6797929fb5bfa387a449249184691ca017a",
      "filename": "core/src/main/java/com/google/zxing/datamatrix/DataMatrixWriter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/ea00f5a51c07ecfa6c3021960854802d476c9e5d/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fdatamatrix%2FDataMatrixWriter.java",
      "raw_url": "https://github.com/zxing/zxing/raw/ea00f5a51c07ecfa6c3021960854802d476c9e5d/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fdatamatrix%2FDataMatrixWriter.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fdatamatrix%2FDataMatrixWriter.java?ref=ea00f5a51c07ecfa6c3021960854802d476c9e5d",
      "patch": "@@ -60,7 +60,7 @@ public BitMatrix encode(String contents, BarcodeFormat format, int width, int he\n \n     // Try to get force shape & min / max size\n     SymbolShapeHint shape = SymbolShapeHint.FORCE_NONE;\n-    Dimension minSize = null;\n+    Dimension minSize = new Dimension(width, height);\n     Dimension maxSize = null;\n     if (hints != null) {\n       SymbolShapeHint requestedShape = (SymbolShapeHint) hints.get(EncodeHintType.DATA_MATRIX_SHAPE);",
      "parent_sha": "ce1fbe1b76f46fe3a9e59d69b2f482725a308e41"
    }
  },
  {
    "oid": "6c0ef1a5be8b4fae3eb94a926f7c2aaaa037880f",
    "message": "Ensure share clipboard sends String not SpannableText\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@1244 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2010-03-15T09:41:03Z",
    "url": "https://github.com/zxing/zxing/commit/6c0ef1a5be8b4fae3eb94a926f7c2aaaa037880f",
    "details": {
      "sha": "084f84c204b4111a501b5750a2f1ff6b8b2fb9a7",
      "filename": "android/src/com/google/zxing/client/android/share/ShareActivity.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/6c0ef1a5be8b4fae3eb94a926f7c2aaaa037880f/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fshare%2FShareActivity.java",
      "raw_url": "https://github.com/zxing/zxing/raw/6c0ef1a5be8b4fae3eb94a926f7c2aaaa037880f/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fshare%2FShareActivity.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fshare%2FShareActivity.java?ref=6c0ef1a5be8b4fae3eb94a926f7c2aaaa037880f",
      "patch": "@@ -97,7 +97,7 @@ public void onClick(View v) {\n         Intent intent = new Intent(Intents.Encode.ACTION);\n         intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);\n         intent.putExtra(Intents.Encode.TYPE, Contents.Type.TEXT);\n-        intent.putExtra(Intents.Encode.DATA, clipboard.getText());\n+        intent.putExtra(Intents.Encode.DATA, clipboard.getText().toString());\n         intent.putExtra(Intents.Encode.FORMAT, Contents.Format.QR_CODE);\n         startActivity(intent);\n       }",
      "parent_sha": "59fbd6564eb6d22aabe200c3786cfc4d4418d8b5"
    }
  },
  {
    "oid": "fa19d4758f38daa5d0ea6557af9a64721cfcce07",
    "message": "Possible fix for https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=38486#c10",
    "date": "2022-09-24T14:23:49Z",
    "url": "https://github.com/zxing/zxing/commit/fa19d4758f38daa5d0ea6557af9a64721cfcce07",
    "details": {
      "sha": "b86a147d84edcca95eb8e6d99e3392db4fdcc4b7",
      "filename": "core/src/main/java/com/google/zxing/pdf417/decoder/DecodedBitStreamParser.java",
      "status": "modified",
      "additions": 20,
      "deletions": 4,
      "changes": 24,
      "blob_url": "https://github.com/zxing/zxing/blob/fa19d4758f38daa5d0ea6557af9a64721cfcce07/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fpdf417%2Fdecoder%2FDecodedBitStreamParser.java",
      "raw_url": "https://github.com/zxing/zxing/raw/fa19d4758f38daa5d0ea6557af9a64721cfcce07/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fpdf417%2Fdecoder%2FDecodedBitStreamParser.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fpdf417%2Fdecoder%2FDecodedBitStreamParser.java?ref=fa19d4758f38daa5d0ea6557af9a64721cfcce07",
      "patch": "@@ -220,22 +220,38 @@ static int decodeMacroBlock(int[] codewords, int codeIndex, PDF417ResultMetadata\n             case MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT:\n               ECIStringBuilder segmentCount = new ECIStringBuilder();\n               codeIndex = numericCompaction(codewords, codeIndex + 1, segmentCount);\n-              resultMetadata.setSegmentCount(Integer.parseInt(segmentCount.toString()));\n+              try {\n+                resultMetadata.setSegmentCount(Integer.parseInt(segmentCount.toString()));\n+              } catch (NumberFormatException nfe) {\n+                throw FormatException.getFormatInstance();\n+              }\n               break;\n             case MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP:\n               ECIStringBuilder timestamp = new ECIStringBuilder();\n               codeIndex = numericCompaction(codewords, codeIndex + 1, timestamp);\n-              resultMetadata.setTimestamp(Long.parseLong(timestamp.toString()));\n+              try {\n+                resultMetadata.setTimestamp(Long.parseLong(timestamp.toString()));\n+              } catch (NumberFormatException nfe) {\n+                throw FormatException.getFormatInstance();\n+              }\n               break;\n             case MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM:\n               ECIStringBuilder checksum = new ECIStringBuilder();\n               codeIndex = numericCompaction(codewords, codeIndex + 1, checksum);\n-              resultMetadata.setChecksum(Integer.parseInt(checksum.toString()));\n+              try {\n+                resultMetadata.setChecksum(Integer.parseInt(checksum.toString()));\n+              } catch (NumberFormatException nfe) {\n+                throw FormatException.getFormatInstance();\n+              }\n               break;\n             case MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE:\n               ECIStringBuilder fileSize = new ECIStringBuilder();\n               codeIndex = numericCompaction(codewords, codeIndex + 1, fileSize);\n-              resultMetadata.setFileSize(Long.parseLong(fileSize.toString()));\n+              try {\n+                resultMetadata.setFileSize(Long.parseLong(fileSize.toString()));\n+              } catch (NumberFormatException nfe) {\n+                throw FormatException.getFormatInstance();\n+              }\n               break;\n             default:\n               throw FormatException.getFormatInstance();",
      "parent_sha": "a6273e3bc788135e4ad755fe6a7c1a4bf74fcdc9"
    }
  },
  {
    "oid": "dbc98a7a22f80f352ad1da7733032dd9b7aa3fed",
    "message": "Made sure otpauth: is recognized as a valid URI.\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@1811 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2011-06-07T15:24:31Z",
    "url": "https://github.com/zxing/zxing/commit/dbc98a7a22f80f352ad1da7733032dd9b7aa3fed",
    "details": {
      "sha": "d1c607fd4aef87c7cdfa140533595007bf4e1b95",
      "filename": "core/test/src/com/google/zxing/client/result/URIParsedResultTestCase.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/zxing/zxing/blob/dbc98a7a22f80f352ad1da7733032dd9b7aa3fed/core%2Ftest%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fresult%2FURIParsedResultTestCase.java",
      "raw_url": "https://github.com/zxing/zxing/raw/dbc98a7a22f80f352ad1da7733032dd9b7aa3fed/core%2Ftest%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fresult%2FURIParsedResultTestCase.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Ftest%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fresult%2FURIParsedResultTestCase.java?ref=dbc98a7a22f80f352ad1da7733032dd9b7aa3fed",
      "patch": "@@ -31,7 +31,7 @@ public final class URIParsedResultTestCase extends Assert {\n   @Test\n   public void testBookmarkDocomo() {\n     doTest(\"MEBKM:URL:google.com;;\", \"http://google.com\", null);\n-    doTest(\"MEBKM:URL:http://google.com;;\", \"http://google.com\", null);    \n+    doTest(\"MEBKM:URL:http://google.com;;\", \"http://google.com\", null);\n     doTest(\"MEBKM:URL:google.com;TITLE:Google;\", \"http://google.com\", \"Google\");\n   }\n \n@@ -44,12 +44,15 @@ public void testURI() {\n     doTest(\"https://www.google.com/calendar/hosted/google.com/embed?mode=AGENDA&force_login=true&src=google.com_726f6f6d5f6265707075@resource.calendar.google.com\",\n            \"https://www.google.com/calendar/hosted/google.com/embed?mode=AGENDA&force_login=true&src=google.com_726f6f6d5f6265707075@resource.calendar.google.com\",\n            null);\n+    doTest(\"otpauth://remoteaccess?devaddr=00%a1b2%c3d4&devname=foo&key=bar\",\n+           \"otpauth://remoteaccess?devaddr=00%a1b2%c3d4&devname=foo&key=bar\",\n+           null);\n   }\n \n   @Test\n   public void testURLTO() {\n     doTest(\"urlto::bar.com\", \"http://bar.com\", null);\n-    doTest(\"urlto::http://bar.com\", \"http://bar.com\", null);    \n+    doTest(\"urlto::http://bar.com\", \"http://bar.com\", null);\n     doTest(\"urlto:foo:bar.com\", \"http://bar.com\", \"foo\");\n   }\n \n@@ -69,7 +72,7 @@ public void testIsPossiblyMalicious() {\n     doTestIsPossiblyMalicious(\"http://google.com:@evil.com\", true);\n     doTestIsPossiblyMalicious(\"google.com:@evil.com\", true);\n     doTestIsPossiblyMalicious(\"https://google.com:443\", false);\n-    doTestIsPossiblyMalicious(\"http://google.com/foo@bar\", false);    \n+    doTestIsPossiblyMalicious(\"http://google.com/foo@bar\", false);\n   }\n \n   private static void doTest(String contents, String uri, String title) {",
      "parent_sha": "5299b189429204fbf4e88fffde85be3e38efeaf6"
    }
  },
  {
    "oid": "67217d4337cfc6d48cbcb3269dfbba6215881769",
    "message": "Indentation wtf",
    "date": "2014-05-01T12:36:44Z",
    "url": "https://github.com/zxing/zxing/commit/67217d4337cfc6d48cbcb3269dfbba6215881769",
    "details": {
      "sha": "1126ca6d6b8f4bc6d01ce76a087c6f04af0e12bc",
      "filename": "android/src/com/google/zxing/client/android/camera/open/OpenCameraInterface.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/zxing/zxing/blob/67217d4337cfc6d48cbcb3269dfbba6215881769/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fcamera%2Fopen%2FOpenCameraInterface.java",
      "raw_url": "https://github.com/zxing/zxing/raw/67217d4337cfc6d48cbcb3269dfbba6215881769/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fcamera%2Fopen%2FOpenCameraInterface.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fcamera%2Fopen%2FOpenCameraInterface.java?ref=67217d4337cfc6d48cbcb3269dfbba6215881769",
      "patch": "@@ -34,27 +34,27 @@ private OpenCameraInterface() {\n    * @return handle to {@link Camera} that was opened\n    */\n   public static Camera open(int cameraId) {\n-\tif (cameraId < 0) {\n-\t\tLog.w(TAG, \"Requested invalid camera ID: \" + cameraId);\n-\t\treturn null;\n-\t}\n+  \tif (cameraId < 0) {\n+  \t  Log.w(TAG, \"Requested invalid camera ID: \" + cameraId);\n+  \t  return null;\n+  \t}\n \t\n     int numCameras = Camera.getNumberOfCameras();\n \t\n-\tif (numCameras == 0) {\n+    if (numCameras == 0) {\n       Log.w(TAG, \"No cameras!\");\n       return null;\n     }\n \t\n-\tCamera camera;\n+    Camera camera;\n     if (cameraId < numCameras) {\n       Log.i(TAG, \"Opening camera #\" + cameraId);\n       camera = Camera.open(cameraId);\n     } else {\n       Log.w(TAG, \"Requested camera does not exist: \" + cameraId);\n       camera = null;\n     }\n-\n+    \n     return camera;\n   }\n   ",
      "parent_sha": "5c840a50011f98dbd30bd2d9496c7603dd6820a0"
    }
  },
  {
    "oid": "5384255cae91d91349de0f8a5be07c7223363b4a",
    "message": "Issue 1325 Encoder clarifications\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2374 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2012-08-06T13:19:13Z",
    "url": "https://github.com/zxing/zxing/commit/5384255cae91d91349de0f8a5be07c7223363b4a",
    "details": {
      "sha": "4120e41e008f73371626607ad53910d63f6e7caa",
      "filename": "core/src/com/google/zxing/qrcode/encoder/MaskUtil.java",
      "status": "modified",
      "additions": 71,
      "deletions": 71,
      "changes": 142,
      "blob_url": "https://github.com/zxing/zxing/blob/5384255cae91d91349de0f8a5be07c7223363b4a/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fencoder%2FMaskUtil.java",
      "raw_url": "https://github.com/zxing/zxing/raw/5384255cae91d91349de0f8a5be07c7223363b4a/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fencoder%2FMaskUtil.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fencoder%2FMaskUtil.java?ref=5384255cae91d91349de0f8a5be07c7223363b4a",
      "patch": "@@ -17,49 +17,63 @@\n package com.google.zxing.qrcode.encoder;\n \n /**\n- * @author satorux@google.com (Satoru Takabayashi) - creator\n- * @author dswitkin@google.com (Daniel Switkin) - ported from C++\n+ * @author Satoru Takabayashi\n+ * @author Daniel Switkin\n+ * @author Sean Owen\n  */\n final class MaskUtil {\n \n+  // Penalty weights from section 6.8.2.1\n+  private static final int N1 = 3;\n+  private static final int N2 = 3;\n+  private static final int N3 = 40;\n+  private static final int N4 = 10;\n+\n   private MaskUtil() {\n     // do nothing\n   }\n \n-  // Apply mask penalty rule 1 and return the penalty. Find repetitive cells with the same color and\n-  // give penalty to them. Example: 00000 or 11111.\n+  /**\n+   * Apply mask penalty rule 1 and return the penalty. Find repetitive cells with the same color and\n+   * give penalty to them. Example: 00000 or 11111.\n+   */\n   static int applyMaskPenaltyRule1(ByteMatrix matrix) {\n     return applyMaskPenaltyRule1Internal(matrix, true) + applyMaskPenaltyRule1Internal(matrix, false);\n   }\n \n-  // Apply mask penalty rule 2 and return the penalty. Find 2x2 blocks with the same color and give\n-  // penalty to them.\n+  /**\n+   * Apply mask penalty rule 2 and return the penalty. Find 2x2 blocks with the same color and give\n+   * penalty to them. This is actually equivalent to the spec's rule, which is to find MxN blocks and give a\n+   * penalty proportional to (M-1)x(N-1), because this is the number of 2x2 blocks inside such a block.\n+   */\n   static int applyMaskPenaltyRule2(ByteMatrix matrix) {\n     int penalty = 0;\n     byte[][] array = matrix.getArray();\n     int width = matrix.getWidth();\n     int height = matrix.getHeight();\n-    for (int y = 0; y < height - 1; ++y) {\n-      for (int x = 0; x < width - 1; ++x) {\n+    for (int y = 0; y < height - 1; y++) {\n+      for (int x = 0; x < width - 1; x++) {\n         int value = array[y][x];\n         if (value == array[y][x + 1] && value == array[y + 1][x] && value == array[y + 1][x + 1]) {\n-          penalty += 3;\n+          penalty++;\n         }\n       }\n     }\n-    return penalty;\n+    return N2 * penalty;\n   }\n \n-  // Apply mask penalty rule 3 and return the penalty. Find consecutive cells of 00001011101 or\n-  // 10111010000, and give penalty to them.  If we find patterns like 000010111010000, we give\n-  // penalties twice (i.e. 40 * 2).\n+  /**\n+   * Apply mask penalty rule 3 and return the penalty. Find consecutive cells of 00001011101 or\n+   * 10111010000, and give penalty to them.  If we find patterns like 000010111010000, we give\n+   * penalties twice (i.e. 40 * 2).\n+   */\n   static int applyMaskPenaltyRule3(ByteMatrix matrix) {\n     int penalty = 0;\n     byte[][] array = matrix.getArray();\n     int width = matrix.getWidth();\n     int height = matrix.getHeight();\n-    for (int y = 0; y < height; ++y) {\n-      for (int x = 0; x < width; ++x) {\n+    for (int y = 0; y < height; y++) {\n+      for (int x = 0; x < width; x++) {\n         // Tried to simplify following conditions but failed.\n         if (x + 6 < width &&\n             array[y][x] == 1 &&\n@@ -74,12 +88,12 @@ static int applyMaskPenaltyRule3(ByteMatrix matrix) {\n                 array[y][x +  8] == 0 &&\n                 array[y][x +  9] == 0 &&\n                 array[y][x + 10] == 0) ||\n-                (x - 4 >= 0 &&\n-                    array[y][x -  1] == 0 &&\n-                    array[y][x -  2] == 0 &&\n-                    array[y][x -  3] == 0 &&\n-                    array[y][x -  4] == 0))) {\n-          penalty += 40;\n+             (x - 4 >= 0 &&\n+                array[y][x -  1] == 0 &&\n+                array[y][x -  2] == 0 &&\n+                array[y][x -  3] == 0 &&\n+                array[y][x -  4] == 0))) {\n+          penalty += N3;\n         }\n         if (y + 6 < height &&\n             array[y][x] == 1  &&\n@@ -94,50 +108,46 @@ static int applyMaskPenaltyRule3(ByteMatrix matrix) {\n                 array[y +  8][x] == 0 &&\n                 array[y +  9][x] == 0 &&\n                 array[y + 10][x] == 0) ||\n-                (y - 4 >= 0 &&\n-                    array[y -  1][x] == 0 &&\n-                    array[y -  2][x] == 0 &&\n-                    array[y -  3][x] == 0 &&\n-                    array[y -  4][x] == 0))) {\n-          penalty += 40;\n+             (y - 4 >= 0 &&\n+                array[y -  1][x] == 0 &&\n+                array[y -  2][x] == 0 &&\n+                array[y -  3][x] == 0 &&\n+                array[y -  4][x] == 0))) {\n+          penalty += N3;\n         }\n       }\n     }\n     return penalty;\n   }\n \n-  // Apply mask penalty rule 4 and return the penalty. Calculate the ratio of dark cells and give\n-  // penalty if the ratio is far from 50%. It gives 10 penalty for 5% distance. Examples:\n-  // -   0% => 100\n-  // -  40% =>  20\n-  // -  45% =>  10\n-  // -  50% =>   0\n-  // -  55% =>  10\n-  // -  55% =>  20\n-  // - 100% => 100\n+  /**\n+   * Apply mask penalty rule 4 and return the penalty. Calculate the ratio of dark cells and give\n+   * penalty if the ratio is far from 50%. It gives 10 penalty for 5% distance.\n+   */\n   static int applyMaskPenaltyRule4(ByteMatrix matrix) {\n     int numDarkCells = 0;\n     byte[][] array = matrix.getArray();\n     int width = matrix.getWidth();\n     int height = matrix.getHeight();\n-    for (int y = 0; y < height; ++y) {\n-      for (int x = 0; x < width; ++x) {\n-        if (array[y][x] == 1) {\n-          numDarkCells += 1;\n+    for (int y = 0; y < height; y++) {\n+      byte[] arrayY = array[y];\n+      for (int x = 0; x < width; x++) {\n+        if (arrayY[x] == 1) {\n+          numDarkCells++;\n         }\n       }\n     }\n     int numTotalCells = matrix.getHeight() * matrix.getWidth();\n     double darkRatio = (double) numDarkCells / numTotalCells;\n-    return Math.abs((int) (darkRatio * 100 - 50)) / 5 * 10;\n+    int fivePercentVariances = (int) (Math.abs(darkRatio - 0.5) * 20.0); // * 100.0 / 5.0\n+    return fivePercentVariances * N4;\n   }\n \n-  // Return the mask bit for \"getMaskPattern\" at \"x\" and \"y\". See 8.8 of JISX0510:2004 for mask\n-  // pattern conditions.\n+  /**\n+   * Return the mask bit for \"getMaskPattern\" at \"x\" and \"y\". See 8.8 of JISX0510:2004 for mask\n+   * pattern conditions.\n+   */\n   static boolean getDataMaskBit(int maskPattern, int x, int y) {\n-    if (!QRCode.isValidMaskPattern(maskPattern)) {\n-      throw new IllegalArgumentException(\"Invalid mask pattern\");\n-    }\n     int intermediate;\n     int temp;\n     switch (maskPattern) {\n@@ -174,43 +184,33 @@ static boolean getDataMaskBit(int maskPattern, int x, int y) {\n     return intermediate == 0;\n   }\n \n-  // Helper function for applyMaskPenaltyRule1. We need this for doing this calculation in both\n-  // vertical and horizontal orders respectively.\n+  /**\n+   * Helper function for applyMaskPenaltyRule1. We need this for doing this calculation in both\n+   * vertical and horizontal orders respectively.\n+   */\n   private static int applyMaskPenaltyRule1Internal(ByteMatrix matrix, boolean isHorizontal) {\n     int penalty = 0;\n-    int numSameBitCells = 0;\n-    int prevBit = -1;\n-    // Horizontal mode:\n-    //   for (int i = 0; i < matrix.height(); ++i) {\n-    //     for (int j = 0; j < matrix.width(); ++j) {\n-    //       int bit = matrix.get(i, j);\n-    // Vertical mode:\n-    //   for (int i = 0; i < matrix.width(); ++i) {\n-    //     for (int j = 0; j < matrix.height(); ++j) {\n-    //       int bit = matrix.get(j, i);\n     int iLimit = isHorizontal ? matrix.getHeight() : matrix.getWidth();\n     int jLimit = isHorizontal ? matrix.getWidth() : matrix.getHeight();\n     byte[][] array = matrix.getArray();\n-    for (int i = 0; i < iLimit; ++i) {\n-      for (int j = 0; j < jLimit; ++j) {\n+    for (int i = 0; i < iLimit; i++) {\n+      int numSameBitCells = 0;\n+      int prevBit = -1;\n+      for (int j = 0; j < jLimit; j++) {\n         int bit = isHorizontal ? array[i][j] : array[j][i];\n         if (bit == prevBit) {\n-          numSameBitCells += 1;\n-          // Found five repetitive cells with the same color (bit).\n-          // We'll give penalty of 3.\n-          if (numSameBitCells == 5) {\n-            penalty += 3;\n-          } else if (numSameBitCells > 5) {\n-            // After five repetitive cells, we'll add the penalty one\n-            // by one.\n-            penalty += 1;\n-          }\n+          numSameBitCells++;\n         } else {\n+          if (numSameBitCells >= 5) {\n+            penalty += N1 + (numSameBitCells - 5);\n+          }\n           numSameBitCells = 1;  // Include the cell itself.\n           prevBit = bit;\n         }\n       }\n-      numSameBitCells = 0;  // Clear at each row/column.\n+      if (numSameBitCells > 5) {\n+        penalty += N1 + (numSameBitCells - 5);\n+      }\n     }\n     return penalty;\n   }",
      "parent_sha": "17882315dd3090af6f79d9112c4c9a9fe66600dc"
    }
  },
  {
    "oid": "3e5b13abeba6c40665e62cd995e750a478cc9485",
    "message": "Take more advantage of TRY_HARDER\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@233 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2008-02-25T23:22:01Z",
    "url": "https://github.com/zxing/zxing/commit/3e5b13abeba6c40665e62cd995e750a478cc9485",
    "details": {
      "sha": "f107a485246eaa70c751cfbcc68368958970bc8b",
      "filename": "core/src/com/google/zxing/oned/AbstractOneDReader.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/zxing/zxing/blob/3e5b13abeba6c40665e62cd995e750a478cc9485/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FAbstractOneDReader.java",
      "raw_url": "https://github.com/zxing/zxing/raw/3e5b13abeba6c40665e62cd995e750a478cc9485/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FAbstractOneDReader.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FAbstractOneDReader.java?ref=3e5b13abeba6c40665e62cd995e750a478cc9485",
      "patch": "@@ -40,6 +40,8 @@ public final Result decode(MonochromeBitmapSource image) throws ReaderException\n \n   public final Result decode(MonochromeBitmapSource image, Hashtable hints) throws ReaderException {\n \n+    boolean tryHarder = hints != null && hints.contains(DecodeHintType.TRY_HARDER);\n+\n     int width = image.getWidth();\n     int height = image.getHeight();\n \n@@ -53,7 +55,8 @@ public final Result decode(MonochromeBitmapSource image, Hashtable hints) throws\n     // that moving up and down by about 1/16 of the image is pretty good.\n     int middle = height >> 1;\n     int rowStep = Math.max(1, height >> 4);\n-    for (int x = 0; x < 7; x++) {\n+    int maxLines = tryHarder ? 15 : 7;\n+    for (int x = 0; x < maxLines; x++) {\n \n       int rowStepsAboveOrBelow = (x + 1) >> 1;\n       boolean isAbove = (x & 0x01) == 0; // i.e. is x even?\n@@ -68,7 +71,7 @@ public final Result decode(MonochromeBitmapSource image, Hashtable hints) throws\n       try {\n         return decodeRow(rowNumber, row, hints);\n       } catch (ReaderException re) {\n-        if (hints != null && hints.contains(DecodeHintType.TRY_HARDER)) {\n+        if (tryHarder) {\n           row.reverse(); // try scanning the row backwards\n           try {\n             return decodeRow(rowNumber, row, hints);",
      "parent_sha": "1f442884aa1454bf8f5d18c9429d6a3ae20ae349"
    }
  },
  {
    "oid": "50ead4f6582e37c7b3986551f5dfbb5bf22cd3c4",
    "message": "Another possible improvement against https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=37905&q=label%3AProj-zxing",
    "date": "2021-09-02T02:31:36Z",
    "url": "https://github.com/zxing/zxing/commit/50ead4f6582e37c7b3986551f5dfbb5bf22cd3c4",
    "details": {
      "sha": "1d0cd4b322af0809faa390a451d907c2c7d362fb",
      "filename": "core/src/main/java/com/google/zxing/aztec/encoder/HighLevelEncoder.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/zxing/zxing/blob/50ead4f6582e37c7b3986551f5dfbb5bf22cd3c4/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Faztec%2Fencoder%2FHighLevelEncoder.java",
      "raw_url": "https://github.com/zxing/zxing/raw/50ead4f6582e37c7b3986551f5dfbb5bf22cd3c4/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Faztec%2Fencoder%2FHighLevelEncoder.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Faztec%2Fencoder%2FHighLevelEncoder.java?ref=50ead4f6582e37c7b3986551f5dfbb5bf22cd3c4",
      "patch": "@@ -25,6 +25,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.Deque;\n import java.util.Iterator;\n import java.util.LinkedList;\n \n@@ -301,7 +302,7 @@ private static void updateStateForPair(State state, int index, int pairCode, Col\n   }\n \n   private static Collection<State> simplifyStates(Iterable<State> states) {\n-    Collection<State> result = new LinkedList<>();\n+    Deque<State> result = new LinkedList<>();\n     for (State newState : states) {\n       boolean add = true;\n       for (Iterator<State> iterator = result.iterator(); iterator.hasNext();) {\n@@ -315,7 +316,7 @@ private static Collection<State> simplifyStates(Iterable<State> states) {\n         }\n       }\n       if (add) {\n-        result.add(newState);\n+        result.addFirst(newState);\n       }\n     }\n     return result;",
      "parent_sha": "490769e75fe58c034e6f0dada5f82e3f0b37b857"
    }
  },
  {
    "oid": "80f273976ed9e353c7fa63a1cc623c63ebc196d1",
    "message": "Quote hex-like SSIDs as (at least) they must appear this way in Android or else it will be interpreted as a hex SSID. Assuming that nobody actually wants to generate such an SSID in 2012.\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2230 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2012-03-21T17:52:25Z",
    "url": "https://github.com/zxing/zxing/commit/80f273976ed9e353c7fa63a1cc623c63ebc196d1",
    "details": {
      "sha": "5f50128e6f05009313d65a45600b1c813e966f5c",
      "filename": "zxing.appspot.com/src/com/google/zxing/web/generator/client/WifiGenerator.java",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/zxing/zxing/blob/80f273976ed9e353c7fa63a1cc623c63ebc196d1/zxing.appspot.com%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fweb%2Fgenerator%2Fclient%2FWifiGenerator.java",
      "raw_url": "https://github.com/zxing/zxing/raw/80f273976ed9e353c7fa63a1cc623c63ebc196d1/zxing.appspot.com%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fweb%2Fgenerator%2Fclient%2FWifiGenerator.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/zxing.appspot.com%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fweb%2Fgenerator%2Fclient%2FWifiGenerator.java?ref=80f273976ed9e353c7fa63a1cc623c63ebc196d1",
      "patch": "@@ -94,7 +94,8 @@ private String getSsidField() throws GeneratorException {\n     if (input.length() < 1) {\n       throw new GeneratorException(\"SSID must be at least 1 character.\");\n     }\n-    return parseTextField(\"SSID\", ssid);\n+    String parsed = parseTextField(\"SSID\", ssid);\n+    return quoteHex(parsed); // Android needs hex-like SSIDs quoted or will be read as hex\n   }\n   \n   private String getPasswordField() throws GeneratorException {\n@@ -141,4 +142,15 @@ public void validate(Widget widget) throws GeneratorException {\n   public void setFocus() {\n     ssid.setFocus(true);\n   }\n+\n+  private static String quoteHex(String value) {\n+    if (value != null && value.matches(\"[0-9A-Fa-f]+\")) {\n+      if (value.charAt(0) == '\"' && value.charAt(value.length() - 1) == '\"') {\n+        return value;\n+      }\n+      return '\\\"' + value + '\\\"';\n+    }\n+    return value;\n+  }\n+\n }",
      "parent_sha": "f74fc09d54110bfd7de1c8dcaad55bf967a54b4b"
    }
  },
  {
    "oid": "4b84ad8a40dba3461dc9aec0b0a79f41ec575841",
    "message": "Add length 20 per user request\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@1736 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2011-04-05T08:20:47Z",
    "url": "https://github.com/zxing/zxing/commit/4b84ad8a40dba3461dc9aec0b0a79f41ec575841",
    "details": {
      "sha": "691c0f92c58342606e86c19e05cc6f586da94274",
      "filename": "core/src/com/google/zxing/oned/ITFReader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/4b84ad8a40dba3461dc9aec0b0a79f41ec575841/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FITFReader.java",
      "raw_url": "https://github.com/zxing/zxing/raw/4b84ad8a40dba3461dc9aec0b0a79f41ec575841/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FITFReader.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FITFReader.java?ref=4b84ad8a40dba3461dc9aec0b0a79f41ec575841",
      "patch": "@@ -50,7 +50,7 @@ public final class ITFReader extends OneDReader {\n   private static final int W = 3; // Pixel width of a wide line\r\n   private static final int N = 1; // Pixed width of a narrow line\r\n \r\n-  private static final int[] DEFAULT_ALLOWED_LENGTHS = { 6, 10, 12, 14, 16, 24, 44 };\r\n+  private static final int[] DEFAULT_ALLOWED_LENGTHS = { 6, 10, 12, 14, 16, 20, 24, 44 };\r\n \r\n   // Stores the actual narrow line width of the image being decoded.\r\n   private int narrowLineWidth = -1;\r",
      "parent_sha": "69c61da1d7451117d6cfac07ca933e7ee27a00eb"
    }
  },
  {
    "oid": "f3c2b44e35ce974d773eadbacc38e8fa1765c709",
    "message": "fix: 1358 - rolled back to old-fashioned Collections.sort for android 23 (#1595)\n\ncf. https://developer.android.com/reference/java/util/List#sort(java.util.Comparator%3C?%20super%20E%3E), \"added in API level 24\"",
    "date": "2023-03-23T17:48:54Z",
    "url": "https://github.com/zxing/zxing/commit/f3c2b44e35ce974d773eadbacc38e8fa1765c709",
    "details": {
      "sha": "17ca88b8fc3adc9571f231629f5708a0a63279c2",
      "filename": "core/src/main/java/com/google/zxing/qrcode/detector/FinderPatternFinder.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/zxing/zxing/blob/f3c2b44e35ce974d773eadbacc38e8fa1765c709/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdetector%2FFinderPatternFinder.java",
      "raw_url": "https://github.com/zxing/zxing/raw/f3c2b44e35ce974d773eadbacc38e8fa1765c709/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdetector%2FFinderPatternFinder.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdetector%2FFinderPatternFinder.java?ref=f3c2b44e35ce974d773eadbacc38e8fa1765c709",
      "patch": "@@ -25,6 +25,7 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Comparator;\n import java.util.Iterator;\n import java.util.List;\n@@ -628,7 +629,10 @@ private FinderPattern[] selectBestPatterns() throws NotFoundException {\n       }\n     }\n \n-    possibleCenters.sort(moduleComparator);\n+    // A more up-to-date version would be \"possibleCenters.sort(moduleComparator);\"\n+    // But we need this old syntax for android API 23 (Marshmallow) and below\n+    // cf. https://github.com/zxing/zxing/issues/1358\n+    Collections.sort(possibleCenters, moduleComparator);\n \n     double distortion = Double.MAX_VALUE;\n     FinderPattern[] bestPatterns = new FinderPattern[3];",
      "parent_sha": "40fc4d545d32fb292d2ecfdc27bdec1176150382"
    }
  },
  {
    "oid": "95e08d9538a885daec0c5a79f29f45bce0f8573a",
    "message": "Turn on RSS 14\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@1310 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2010-04-19T07:42:20Z",
    "url": "https://github.com/zxing/zxing/commit/95e08d9538a885daec0c5a79f29f45bce0f8573a",
    "details": {
      "sha": "3eea85efa4a3e89ffccfd5edeb2d5f256350a8f4",
      "filename": "android/src/com/google/zxing/client/android/CaptureActivity.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/95e08d9538a885daec0c5a79f29f45bce0f8573a/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FCaptureActivity.java",
      "raw_url": "https://github.com/zxing/zxing/raw/95e08d9538a885daec0c5a79f29f45bce0f8573a/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FCaptureActivity.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FCaptureActivity.java?ref=95e08d9538a885daec0c5a79f29f45bce0f8573a",
      "patch": "@@ -113,7 +113,7 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal\n     PRODUCT_FORMATS.add(BarcodeFormat.UPC_E);\n     PRODUCT_FORMATS.add(BarcodeFormat.EAN_13);\n     PRODUCT_FORMATS.add(BarcodeFormat.EAN_8);\n-    //PRODUCT_FORMATS.add(BarcodeFormat.RSS14);\n+    PRODUCT_FORMATS.add(BarcodeFormat.RSS14);\n     ONE_D_FORMATS = new Vector<BarcodeFormat>(PRODUCT_FORMATS.size() + 3);\n     ONE_D_FORMATS.addAll(PRODUCT_FORMATS);\n     ONE_D_FORMATS.add(BarcodeFormat.CODE_39);",
      "parent_sha": "484fc75f44c6fd33ad22f29823693662de8a77df"
    }
  },
  {
    "oid": "4fcdac3ae7d3440d3fe08126499e9e90f955e3c5",
    "message": "Change assert to an exception since this facility would not be available in J2ME. I vote for removing use of Debug anyway.\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@711 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2008-11-16T12:03:11Z",
    "url": "https://github.com/zxing/zxing/commit/4fcdac3ae7d3440d3fe08126499e9e90f955e3c5",
    "details": {
      "sha": "7ce5416a39962462ee9ae53c6199b007f3dbeca0",
      "filename": "core/src/com/google/zxing/qrcode/encoder/Debug.java",
      "status": "modified",
      "additions": 16,
      "deletions": 14,
      "changes": 30,
      "blob_url": "https://github.com/zxing/zxing/blob/4fcdac3ae7d3440d3fe08126499e9e90f955e3c5/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fencoder%2FDebug.java",
      "raw_url": "https://github.com/zxing/zxing/raw/4fcdac3ae7d3440d3fe08126499e9e90f955e3c5/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fencoder%2FDebug.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fencoder%2FDebug.java?ref=4fcdac3ae7d3440d3fe08126499e9e90f955e3c5",
      "patch": "@@ -24,36 +24,38 @@\n  */\n public class Debug {\n \n-  public static final void LOG_ERROR(String message) {\n+  public static void LOG_ERROR(String message) {\n     // TODO: Implement\n   }\n \n-  public static final void LOG_INFO(String message) {\n+  public static void LOG_INFO(String message) {\n     // TODO: Implement\n   }\n \n-  public static final void DCHECK(boolean condition) {\n-    assert(condition);\n+  public static void DCHECK(boolean condition) {\n+    if (!condition) {\n+      throw new IllegalStateException();\n+    }\n   }\n \n-  public static final void DCHECK_LT(int a, int b) {\n-    assert(a < b);\n+  public static void DCHECK_LT(int a, int b) {\n+    DCHECK(a < b);\n   }\n \n-  public static final void DCHECK_LE(int a, int b) {\n-    assert(a <= b);\n+  public static void DCHECK_LE(int a, int b) {\n+    DCHECK(a <= b);\n   }\n \n-  public static final void DCHECK_GT(int a, int b) {\n-    assert(a > b);\n+  public static void DCHECK_GT(int a, int b) {\n+    DCHECK(a > b);\n   }\n \n-  public static final void DCHECK_GE(int a, int b) {\n-    assert(a >= b);\n+  public static void DCHECK_GE(int a, int b) {\n+    DCHECK(a >= b);\n   }\n \n-  public static final void DCHECK_EQ(int a, int b) {\n-    assert(a == b);\n+  public static void DCHECK_EQ(int a, int b) {\n+    DCHECK(a == b);\n   }\n \n }",
      "parent_sha": "ecc05c1ef3c9b3cbab46f05aa552f828297ae25d"
    }
  },
  {
    "oid": "921ba43cb7fab82587e205e80d1ee58b5dafb7fd",
    "message": "Tiny fix -- synchronized on arg, not list\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2133 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2012-01-28T15:07:32Z",
    "url": "https://github.com/zxing/zxing/commit/921ba43cb7fab82587e205e80d1ee58b5dafb7fd",
    "details": {
      "sha": "de789adcf13a325ddd2a04ebd0f12ec4ed0e42aa",
      "filename": "android/src/com/google/zxing/client/android/ViewfinderView.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/921ba43cb7fab82587e205e80d1ee58b5dafb7fd/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FViewfinderView.java",
      "raw_url": "https://github.com/zxing/zxing/raw/921ba43cb7fab82587e205e80d1ee58b5dafb7fd/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FViewfinderView.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FViewfinderView.java?ref=921ba43cb7fab82587e205e80d1ee58b5dafb7fd",
      "patch": "@@ -181,7 +181,7 @@ public void drawResultBitmap(Bitmap barcode) {\n \n   public void addPossibleResultPoint(ResultPoint point) {\n     List<ResultPoint> points = possibleResultPoints;\n-    synchronized (point) {\n+    synchronized (points) {\n       points.add(point);\n       int size = points.size();\n       if (size > MAX_RESULT_POINTS) {",
      "parent_sha": "29f5002aa689dc482a1c2fe83e9b0611dc5e8c29"
    }
  },
  {
    "oid": "a9f8293724c5f03f442097c3d383a7c88af3e1e7",
    "message": "Ignores exception when trying to stop auto-focus to handle devices that don't support this\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@168 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2008-02-06T16:13:12Z",
    "url": "https://github.com/zxing/zxing/commit/a9f8293724c5f03f442097c3d383a7c88af3e1e7",
    "details": {
      "sha": "cbbb0049ddd034c61d5239b63ee9a8b850149ea1",
      "filename": "javame/src/com/google/zxing/client/j2me/AdvancedMultimediaManager.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/zxing/zxing/blob/a9f8293724c5f03f442097c3d383a7c88af3e1e7/javame%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2me%2FAdvancedMultimediaManager.java",
      "raw_url": "https://github.com/zxing/zxing/raw/a9f8293724c5f03f442097c3d383a7c88af3e1e7/javame%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2me%2FAdvancedMultimediaManager.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/javame%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2me%2FAdvancedMultimediaManager.java?ref=a9f8293724c5f03f442097c3d383a7c88af3e1e7",
      "patch": "@@ -37,6 +37,7 @@ final class AdvancedMultimediaManager {\n \n   private static final int NO_ZOOM = 100;\n   private static final int MAX_ZOOM = 200;\n+  private static final long FOCUS_TIME_MS = 1000L;\n \n   private AdvancedMultimediaManager() {\n     // do nothing\n@@ -51,8 +52,12 @@ static void setFocus(Controllable player) throws MediaException, InterruptedExce\n       }\n       if (focusControl.isAutoFocusSupported()) {\n         focusControl.setFocus(FocusControl.AUTO);\n-        Thread.sleep(1000L); // let it focus...\n-        focusControl.setFocus(FocusControl.AUTO_LOCK);\n+        Thread.sleep(FOCUS_TIME_MS); // let it focus...\n+        try {\n+          focusControl.setFocus(FocusControl.AUTO_LOCK);\n+        } catch (MediaException me) {\n+          // continue; some phones like the SE K850 don't support this?\n+        }\n       }\n     }\n   }",
      "parent_sha": "77ce643b6101a108e5e42e0d11cf34f704b54496"
    }
  },
  {
    "oid": "47e67ae1459685cc63511ccfb2e0e765d609cddc",
    "message": "Better bytes-to-String method for verbose output\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@491 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2008-06-27T19:19:18Z",
    "url": "https://github.com/zxing/zxing/commit/47e67ae1459685cc63511ccfb2e0e765d609cddc",
    "details": {
      "sha": "5c5affb6928dd8450b4bdb4b8984aeafa1508601",
      "filename": "zxingorg/src/com/google/zxing/web/DecodeServlet.java",
      "status": "modified",
      "additions": 23,
      "deletions": 2,
      "changes": 25,
      "blob_url": "https://github.com/zxing/zxing/blob/47e67ae1459685cc63511ccfb2e0e765d609cddc/zxingorg%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fweb%2FDecodeServlet.java",
      "raw_url": "https://github.com/zxing/zxing/raw/47e67ae1459685cc63511ccfb2e0e765d609cddc/zxingorg%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fweb%2FDecodeServlet.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/zxingorg%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fweb%2FDecodeServlet.java?ref=47e67ae1459685cc63511ccfb2e0e765d609cddc",
      "patch": "@@ -60,7 +60,6 @@\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.net.UnknownHostException;\n-import java.util.Arrays;\n import java.util.Hashtable;\n import java.util.List;\n import java.util.Timer;\n@@ -240,7 +239,7 @@ private static void processStream(InputStream is, HttpServletRequest request, Ht\n       request.setAttribute(\"result\", result);\n       byte[] rawBytes = result.getRawBytes();\n       if (rawBytes != null) {\n-        request.setAttribute(\"rawBytesString\", Arrays.toString(rawBytes));\n+        request.setAttribute(\"rawBytesString\", arrayToString(rawBytes));\n       } else {\n         request.setAttribute(\"rawBytesString\", \"(Not applicable)\");\n       }\n@@ -261,6 +260,28 @@ private static boolean isSizeOK(HttpMessage getResponse) {\n     return true;\n   }\n \n+  private static String arrayToString(byte[] bytes) {\n+    int length = bytes.length;\n+    StringBuilder result = new StringBuilder(length << 2);\n+    int i = 0;\n+    while (i < length) {\n+      int max = Math.min(i + 8, length);\n+      for (int j = i; j < max; j++) {\n+        int value = bytes[j] & 0xFF;\n+        result.append(Integer.toHexString(value / 16));\n+        result.append(Integer.toHexString(value % 16));\n+        result.append(' ');\n+      }\n+      result.append('\\n');\n+      i += 8;\n+    }\n+    for (int j = i - 8; j < length; j++) {\n+      result.append(Integer.toHexString(bytes[j] & 0xFF));\n+      result.append(' ');\n+    }\n+    return result.toString();\n+  }\n+\n   @Override\n   public void destroy() {\n     log.config(\"DecodeServlet shutting down...\");",
      "parent_sha": "0e311f40c9829e4639d4e0cab6c2d854bed9ddc6"
    }
  },
  {
    "oid": "c3e5f1fcfd1e4e35896a1520d6fae4660ba76f6d",
    "message": "Modified the CommandLineRunner to use all available decoders, even the ones which aren't considered production quality yet.\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@1000 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2009-06-26T20:03:10Z",
    "url": "https://github.com/zxing/zxing/commit/c3e5f1fcfd1e4e35896a1520d6fae4660ba76f6d",
    "details": {
      "sha": "90d525c8c9d7cdbf0f477b6bc4819dd5bdeb4c32",
      "filename": "javase/src/com/google/zxing/client/j2se/CommandLineRunner.java",
      "status": "modified",
      "additions": 21,
      "deletions": 2,
      "changes": 23,
      "blob_url": "https://github.com/zxing/zxing/blob/c3e5f1fcfd1e4e35896a1520d6fae4660ba76f6d/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FCommandLineRunner.java",
      "raw_url": "https://github.com/zxing/zxing/raw/c3e5f1fcfd1e4e35896a1520d6fae4660ba76f6d/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FCommandLineRunner.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FCommandLineRunner.java?ref=c3e5f1fcfd1e4e35896a1520d6fae4660ba76f6d",
      "patch": "@@ -22,6 +22,7 @@\n import com.google.zxing.MultiFormatReader;\n import com.google.zxing.ReaderException;\n import com.google.zxing.Result;\n+import com.google.zxing.BarcodeFormat;\n import com.google.zxing.client.result.ParsedResult;\n import com.google.zxing.client.result.ResultParser;\n import com.google.zxing.common.BitArray;\n@@ -40,6 +41,7 @@\n import java.net.URISyntaxException;\n import java.nio.charset.Charset;\n import java.util.Hashtable;\n+import java.util.Vector;\n \n import javax.imageio.ImageIO;\n \n@@ -62,12 +64,11 @@ public static void main(String[] args) throws Exception {\n       printUsage();\n       return;\n     }\n-    Hashtable<DecodeHintType, Object> hints = null;\n+    Hashtable<DecodeHintType, Object> hints = buildHints();\n     boolean dumpResults = false;\n     boolean dumpBlackPoint = false;\n     for (String arg : args) {\n       if (\"--try_harder\".equals(arg)) {\n-        hints = new Hashtable<DecodeHintType, Object>(3);\n         hints.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);\n       } else if (\"--dump_results\".equals(arg)) {\n         dumpResults = true;\n@@ -86,6 +87,24 @@ public static void main(String[] args) throws Exception {\n     }\n   }\n \n+  // Manually turn on all formats, even those not yet considered production quality.\n+  private static Hashtable<DecodeHintType, Object> buildHints() {\n+    Hashtable<DecodeHintType, Object> hints = new Hashtable<DecodeHintType, Object>(3);\n+    Vector<BarcodeFormat> vector = new Vector<BarcodeFormat>(8);\n+    vector.addElement(BarcodeFormat.UPC_A);\n+    vector.addElement(BarcodeFormat.UPC_E);\n+    vector.addElement(BarcodeFormat.EAN_13);\n+    vector.addElement(BarcodeFormat.EAN_8);\n+    vector.addElement(BarcodeFormat.CODE_39);\n+    vector.addElement(BarcodeFormat.CODE_128);\n+    vector.addElement(BarcodeFormat.ITF);\n+    vector.addElement(BarcodeFormat.QR_CODE);\n+    vector.addElement(BarcodeFormat.DATAMATRIX);\n+    vector.addElement(BarcodeFormat.PDF417);\n+    hints.put(DecodeHintType.POSSIBLE_FORMATS, vector);\n+    return hints;\n+  }\n+\n   private static void printUsage() {\n     System.out.println(\"Decode barcode images using the ZXing library\\n\");\n     System.out.println(\"usage: CommandLineRunner { file | dir | url } [ options ]\");",
      "parent_sha": "550511d760bbadfdb6f09cf8c17376fd86748757"
    }
  },
  {
    "oid": "5af1cad965ff7439ebf992afc6e20f73548663a8",
    "message": "Don't crash on unsupported barcode format like CODE_93\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2266 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2012-04-26T17:15:28Z",
    "url": "https://github.com/zxing/zxing/commit/5af1cad965ff7439ebf992afc6e20f73548663a8",
    "details": {
      "sha": "9084716164189f7f04db77f8ab08d7cb7e450224",
      "filename": "android/src/com/google/zxing/client/android/encode/QRCodeEncoder.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/zxing/zxing/blob/5af1cad965ff7439ebf992afc6e20f73548663a8/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fencode%2FQRCodeEncoder.java",
      "raw_url": "https://github.com/zxing/zxing/raw/5af1cad965ff7439ebf992afc6e20f73548663a8/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fencode%2FQRCodeEncoder.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fencode%2FQRCodeEncoder.java?ref=5af1cad965ff7439ebf992afc6e20f73548663a8",
      "patch": "@@ -313,7 +313,13 @@ Bitmap encodeAsBitmap() throws WriterException {\n       hints.put(EncodeHintType.CHARACTER_SET, encoding);\n     }\n     MultiFormatWriter writer = new MultiFormatWriter();\n-    BitMatrix result = writer.encode(contentsToEncode, format, dimension, dimension, hints);\n+    BitMatrix result;\n+    try {\n+      result = writer.encode(contentsToEncode, format, dimension, dimension, hints);\n+    } catch (IllegalArgumentException iae) {\n+      // Unsupported format\n+      return null;\n+    }\n     int width = result.getWidth();\n     int height = result.getHeight();\n     int[] pixels = new int[width * height];",
      "parent_sha": "18c3b38a9a72e0fdce1f9e790e6db46e4058d5b9"
    }
  },
  {
    "oid": "852669ced64b6d09a90d669e2d9b08abbe913960",
    "message": "Don't calculate 1st digit unless checkBothParities is true\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@102 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2007-12-07T21:06:26Z",
    "url": "https://github.com/zxing/zxing/commit/852669ced64b6d09a90d669e2d9b08abbe913960",
    "details": {
      "sha": "493f771bdc2a7ff922cb6b55c9aa9ae1ccf0388a",
      "filename": "core/src/com/google/zxing/upc/UPCDecoder.java",
      "status": "modified",
      "additions": 17,
      "deletions": 11,
      "changes": 28,
      "blob_url": "https://github.com/zxing/zxing/blob/852669ced64b6d09a90d669e2d9b08abbe913960/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fupc%2FUPCDecoder.java",
      "raw_url": "https://github.com/zxing/zxing/raw/852669ced64b6d09a90d669e2d9b08abbe913960/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fupc%2FUPCDecoder.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fupc%2FUPCDecoder.java?ref=852669ced64b6d09a90d669e2d9b08abbe913960",
      "patch": "@@ -251,18 +251,24 @@ private int decodeOneSide(BitArray rowData, int rowOffset, boolean checkBothPari\n       }\n       result.append(foundChar.character);\n     }\n-    char firstDigit = '-';\n-    for (int i = 0; i < FIRST_DIGIT_ENCODINGS.length; i++) {\n-      if (firstDigitPattern == FIRST_DIGIT_ENCODINGS[i]) {\n-        firstDigit = (char)((int)'0' + i);\n-        break;\n+    // If checkBothParities is true then we're potentially looking at the left\n+    // hand side of an EAN-13 barcode, where the first digit is encoded by the\n+    // parity pattern. In that case, calculate the first digit by checking\n+    // the parity patterns.\n+    if (checkBothParities) {\n+      char firstDigit = '-';\n+      for (int i = 0; i < FIRST_DIGIT_ENCODINGS.length; i++) {\n+        if (firstDigitPattern == FIRST_DIGIT_ENCODINGS[i]) {\n+          firstDigit = (char)((int)'0' + i);\n+          break;\n+        }\n+      }\n+      if (firstDigit == '-') {\n+        return -1;\n+      }\n+      if (firstDigit != '0') {\n+        result.insert(0, firstDigit);\n       }\n-    }\n-    if (firstDigit == '-') {\n-      return -1;\n-    }\n-    if (firstDigit != '0') {\n-      result.insert(0, firstDigit);\n     }\n     return rowOffset;\n   }",
      "parent_sha": "776c3db869b92814802586ddd6479877bd2bc7af"
    }
  },
  {
    "oid": "2de9d7ceaff09135b04c355dd4f7e7d812559df2",
    "message": "I've seen some codes with the type set to WPA2 (#650)",
    "date": "2016-08-22T09:35:13Z",
    "url": "https://github.com/zxing/zxing/commit/2de9d7ceaff09135b04c355dd4f7e7d812559df2",
    "details": {
      "sha": "6a9e5a46873668316abe1bba73971bbf6d4194f2",
      "filename": "android/src/com/google/zxing/client/android/wifi/NetworkType.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/zxing/zxing/blob/2de9d7ceaff09135b04c355dd4f7e7d812559df2/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fwifi%2FNetworkType.java",
      "raw_url": "https://github.com/zxing/zxing/raw/2de9d7ceaff09135b04c355dd4f7e7d812559df2/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fwifi%2FNetworkType.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fwifi%2FNetworkType.java?ref=2de9d7ceaff09135b04c355dd4f7e7d812559df2",
      "patch": "@@ -26,7 +26,8 @@ static NetworkType forIntentValue(String networkTypeString) {\n     if (networkTypeString == null) {\n       return NO_PASSWORD;\n     }\n-    if (\"WPA\".equals(networkTypeString)) {\n+    if (\"WPA\".equals(networkTypeString) ||\n+        \"WPA2\".equals(networkTypeString)) {\n       return WPA;\n     }\n     if (\"WEP\".equals(networkTypeString)) {",
      "parent_sha": "70db62d11b0004afdec4ef85b1e6aa09c0b13aeb"
    }
  },
  {
    "oid": "436ee016d38bacb6a3202cab9f4f9f4cfccdcf98",
    "message": "Fix Contact qrcode generator on appengine.\n\n\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@936 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2009-05-11T18:16:40Z",
    "url": "https://github.com/zxing/zxing/commit/436ee016d38bacb6a3202cab9f4f9f4cfccdcf98",
    "details": {
      "sha": "af6d599d420ec989c1f4a985574890e5a3387985",
      "filename": "zxing.appspot.com/generator/src/com/google/zxing/web/generator/client/ContactInfoGenerator.java",
      "status": "modified",
      "additions": 12,
      "deletions": 8,
      "changes": 20,
      "blob_url": "https://github.com/zxing/zxing/blob/436ee016d38bacb6a3202cab9f4f9f4cfccdcf98/zxing.appspot.com%2Fgenerator%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fweb%2Fgenerator%2Fclient%2FContactInfoGenerator.java",
      "raw_url": "https://github.com/zxing/zxing/raw/436ee016d38bacb6a3202cab9f4f9f4cfccdcf98/zxing.appspot.com%2Fgenerator%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fweb%2Fgenerator%2Fclient%2FContactInfoGenerator.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/zxing.appspot.com%2Fgenerator%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fweb%2Fgenerator%2Fclient%2FContactInfoGenerator.java?ref=436ee016d38bacb6a3202cab9f4f9f4cfccdcf98",
      "patch": "@@ -116,26 +116,30 @@ private String getVCard(String name, String company, String tel, String url,\n   }\n   */\n \n-  private static String parseTextField(TextBox textBox) throws GeneratorException {\n+  private static String parseTextField(String name, TextBox textBox) throws GeneratorException {\n     String input = textBox.getText();\n     if (input.length() < 1) {\n       return \"\";\n     }\n     if (input.contains(\"\\n\")) {\n-      throw new GeneratorException(\"Field must not contain \\\\n characters.\");\n+      throw new GeneratorException(name + \" field must not contain \\\\n characters.\");\n     }\n     if (input.contains(\";\")) {\n-      throw new GeneratorException(\"Field must not contains ; characters\");\n+      throw new GeneratorException(name + \" field must not contains ; characters\");\n     }\n     return input;\n   }\n   \n   private String getNameField() throws GeneratorException {\n-    return parseTextField(name);\n+    String input = name.getText();\n+    if (input.length() < 1) {\n+      throw new GeneratorException(\"Name must be at least 1 character.\");\n+    }\n+    return parseTextField(\"Name\", name);\n   }\n   \n   private String getCompanyField() throws GeneratorException {\n-    return parseTextField(company);\n+    return parseTextField(\"Company\", company);\n   }\n \n   private String getTelField() throws GeneratorException {\n@@ -171,15 +175,15 @@ private String getEmailField() throws GeneratorException {\n   }\n   \n   private String getAddressField() throws GeneratorException {\n-    return parseTextField(address);\n+    return parseTextField(\"Address\", address);\n   }\n \n   private String getAddress2Field() throws GeneratorException {\n-    return parseTextField(address2);\n+    return parseTextField(\"Address 2\", address2);\n   }\n   \n   private String getMemoField() throws GeneratorException {\n-    return parseTextField(memo);\n+    return parseTextField(\"Memo\", memo);\n   }\n   \n   public Grid getWidget() {",
      "parent_sha": "9ab5dc84ab21b8bb03fa6c062bb6fb11855d8206"
    }
  },
  {
    "oid": "cc8254bfc3064a1aec64beb1f1ff49aad55497bf",
    "message": "Reduce test warning about newlines to info\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2914 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2013-11-21T12:34:36Z",
    "url": "https://github.com/zxing/zxing/commit/cc8254bfc3064a1aec64beb1f1ff49aad55497bf",
    "details": {
      "sha": "b938c1c49f2a0477b307daedb5047f8f77877b35",
      "filename": "core/test/src/com/google/zxing/common/AbstractBlackBoxTestCase.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/cc8254bfc3064a1aec64beb1f1ff49aad55497bf/core%2Ftest%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2FAbstractBlackBoxTestCase.java",
      "raw_url": "https://github.com/zxing/zxing/raw/cc8254bfc3064a1aec64beb1f1ff49aad55497bf/core%2Ftest%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2FAbstractBlackBoxTestCase.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Ftest%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2FAbstractBlackBoxTestCase.java?ref=cc8254bfc3064a1aec64beb1f1ff49aad55497bf",
      "patch": "@@ -310,7 +310,7 @@ protected static String readFileAsString(File file, Charset charset) throws IOEx\n     }\n     String stringContents = result.toString();\n     if (stringContents.endsWith(\"\\n\")) {\n-      log.warning(\"String contents of file \" + file + \" end with a newline. \" +\n+      log.info(\"String contents of file \" + file + \" end with a newline. \" +\n                   \"This may not be intended and cause a test failure\");\n     }\n     return stringContents;",
      "parent_sha": "8e909ddb514045680497c09664362b487df1e19f"
    }
  },
  {
    "oid": "ea1c78af59e00468c339dcbce4bf41a286219896",
    "message": "Issue 1712 fix test case too\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2821 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2013-06-18T16:58:29Z",
    "url": "https://github.com/zxing/zxing/commit/ea1c78af59e00468c339dcbce4bf41a286219896",
    "details": {
      "sha": "d621fb88499f1162e6af91d42ab2529a7bdedee1",
      "filename": "core/test/src/com/google/zxing/oned/CodaBarWriterTestCase.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/ea1c78af59e00468c339dcbce4bf41a286219896/core%2Ftest%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FCodaBarWriterTestCase.java",
      "raw_url": "https://github.com/zxing/zxing/raw/ea1c78af59e00468c339dcbce4bf41a286219896/core%2Ftest%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FCodaBarWriterTestCase.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Ftest%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FCodaBarWriterTestCase.java?ref=ea1c78af59e00468c339dcbce4bf41a286219896",
      "patch": "@@ -34,7 +34,7 @@ public void testEncode() throws WriterException {\n     String resultStr = \"0000000000\" +\n         \"1001001011011010100101010110010110101001010100110101100101010110110101101001001011\"\n         + \"0000000000\";\n-    BitMatrix result = new CodaBarWriter().encode(\"B515-3/N\", BarcodeFormat.CODABAR, resultStr.length(), 0);\n+    BitMatrix result = new CodaBarWriter().encode(\"B515-3/B\", BarcodeFormat.CODABAR, resultStr.length(), 0);\n     for (int i = 0; i < resultStr.length(); i++) {\n       assertEquals(\"Element \" + i, resultStr.charAt(i) == '1', result.get(i, 0));\n     }",
      "parent_sha": "732d34cc5ad3925af3d8357a38e4d8c6f253d632"
    }
  },
  {
    "oid": "dee32b13237659986314f0508d4de4388dde5ab0",
    "message": "Fix typo introduced at the last second before commit. Watch that 'a' key!\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@381 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2008-05-02T18:41:05Z",
    "url": "https://github.com/zxing/zxing/commit/dee32b13237659986314f0508d4de4388dde5ab0",
    "details": {
      "sha": "35c7abb9e63dd7c5337dfbd8d8861b78dba8601d",
      "filename": "android/src/com/google/zxing/client/android/ResultHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/dee32b13237659986314f0508d4de4388dde5ab0/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FResultHandler.java",
      "raw_url": "https://github.com/zxing/zxing/raw/dee32b13237659986314f0508d4de4388dde5ab0/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FResultHandler.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FResultHandler.java?ref=dee32b13237659986314f0508d4de4388dde5ab0",
      "patch": "@@ -42,7 +42,7 @@\n  * @author srowen@google.com (Sean Owen)\n  * @author dswitkin@google.com (Daniel Switkin)\n  */\n-final class ResultHandler implements Button.OnClickListenear {\n+final class ResultHandler implements Button.OnClickListener {\n \n   private static final String TAG = \"ResultHandler\";\n ",
      "parent_sha": "188c7fbecb753afb7a98ddcef06a0aed4aaf0898"
    }
  },
  {
    "oid": "9567698f631dac64a508b7fd0a1dd20aa60c86a2",
    "message": "Small commit for issue #27, and part of a test",
    "date": "2014-01-26T22:47:13Z",
    "url": "https://github.com/zxing/zxing/commit/9567698f631dac64a508b7fd0a1dd20aa60c86a2",
    "details": {
      "sha": "991d941f72a2dc86cd4887c594ca8ea9785193e3",
      "filename": "core/src/main/java/com/google/zxing/pdf417/encoder/PDF417HighLevelEncoder.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/zxing/zxing/blob/9567698f631dac64a508b7fd0a1dd20aa60c86a2/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fpdf417%2Fencoder%2FPDF417HighLevelEncoder.java",
      "raw_url": "https://github.com/zxing/zxing/raw/9567698f631dac64a508b7fd0a1dd20aa60c86a2/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fpdf417%2Fencoder%2FPDF417HighLevelEncoder.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fpdf417%2Fencoder%2FPDF417HighLevelEncoder.java?ref=9567698f631dac64a508b7fd0a1dd20aa60c86a2",
      "patch": "@@ -23,6 +23,7 @@\n import com.google.zxing.WriterException;\n \n import java.math.BigInteger;\n+import java.nio.charset.Charset;\n import java.util.Arrays;\n \n /**\n@@ -108,6 +109,8 @@ final class PDF417HighLevelEncoder {\n   private static final byte[] MIXED = new byte[128];\n   private static final byte[] PUNCTUATION = new byte[128];\n \n+  static final Charset DEFAULT_ENCODING = Charset.forName(\"Cp437\");\n+\n   private PDF417HighLevelEncoder() {\n   }\n \n@@ -130,14 +133,14 @@ private PDF417HighLevelEncoder() {\n   }\n \n   /**\n-   * Converts the message to a byte array using the default encoding (cp437) as defined by the\n+   * Converts the message to a byte array using the default encoding (Cp437) as defined by the\n    * specification\n    *\n    * @param msg the message\n    * @return the byte array of the message\n    */\n   private static byte[] getBytesForMessage(String msg) {\n-    return msg.getBytes();\n+    return msg.getBytes(DEFAULT_ENCODING);\n   }\n \n   /**",
      "parent_sha": "077ae83bc32d096d40fe61caffdec818655427b2"
    }
  },
  {
    "oid": "b8873b8007d4a02c96b8c61cc3789956becea309",
    "message": "Issue 1653 consistent interpretation of mask penalty i: applied when 5+i=5 (i=0) consecutive modules are the same\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2600 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2013-03-30T09:27:04Z",
    "url": "https://github.com/zxing/zxing/commit/b8873b8007d4a02c96b8c61cc3789956becea309",
    "details": {
      "sha": "9a4a7f11191d89b30e40e0f08eed625bdde2299f",
      "filename": "core/src/com/google/zxing/qrcode/encoder/MaskUtil.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/b8873b8007d4a02c96b8c61cc3789956becea309/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fencoder%2FMaskUtil.java",
      "raw_url": "https://github.com/zxing/zxing/raw/b8873b8007d4a02c96b8c61cc3789956becea309/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fencoder%2FMaskUtil.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fencoder%2FMaskUtil.java?ref=b8873b8007d4a02c96b8c61cc3789956becea309",
      "patch": "@@ -208,7 +208,7 @@ private static int applyMaskPenaltyRule1Internal(ByteMatrix matrix, boolean isHo\n           prevBit = bit;\n         }\n       }\n-      if (numSameBitCells > 5) {\n+      if (numSameBitCells >= 5) {\n         penalty += N1 + (numSameBitCells - 5);\n       }\n     }",
      "parent_sha": "fc42aacc43436d9b1148988f90712a924ef0fa58"
    }
  },
  {
    "oid": "71d7987c285f25dd97cb8dc34a26a17c6f30499d",
    "message": "Issue 1694 NPE when no hints\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2812 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2013-05-29T11:46:20Z",
    "url": "https://github.com/zxing/zxing/commit/71d7987c285f25dd97cb8dc34a26a17c6f30499d",
    "details": {
      "sha": "4e304c182f76349330480c2d66409c147431d23f",
      "filename": "core/src/com/google/zxing/aztec/AztecWriter.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/zxing/zxing/blob/71d7987c285f25dd97cb8dc34a26a17c6f30499d/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Faztec%2FAztecWriter.java",
      "raw_url": "https://github.com/zxing/zxing/raw/71d7987c285f25dd97cb8dc34a26a17c6f30499d/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Faztec%2FAztecWriter.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Faztec%2FAztecWriter.java?ref=71d7987c285f25dd97cb8dc34a26a17c6f30499d",
      "patch": "@@ -37,8 +37,8 @@ public BitMatrix encode(String contents, BarcodeFormat format, int width, int he\n \n   @Override\n   public BitMatrix encode(String contents, BarcodeFormat format, int width, int height, Map<EncodeHintType,?> hints) {\n-    String charset = (String) hints.get(EncodeHintType.CHARACTER_SET);\n-    Number eccPercent = (Number) hints.get(EncodeHintType.ERROR_CORRECTION);\n+    String charset = hints == null ? null : (String) hints.get(EncodeHintType.CHARACTER_SET);\n+    Number eccPercent = hints == null ? null : (Number) hints.get(EncodeHintType.ERROR_CORRECTION);\n     return encode(contents, \n                   format, \n                   charset == null ? DEFAULT_CHARSET : Charset.forName(charset),",
      "parent_sha": "2ecec34f74f211e9bb3419a4b1ff0f3dc8b584dd"
    }
  },
  {
    "oid": "6067089669386891388b3136d9883598b97a4865",
    "message": "Slightly increase max preview size, preclude very small preview sizes unless no other choice, properly favor large preview sizes in general and correctly prioritize on aspect ratio in all cases\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2259 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2012-04-25T19:45:53Z",
    "url": "https://github.com/zxing/zxing/commit/6067089669386891388b3136d9883598b97a4865",
    "details": {
      "sha": "6b708642507460e567cac5ac1a75f563aebb812a",
      "filename": "android/src/com/google/zxing/client/android/camera/CameraConfigurationManager.java",
      "status": "modified",
      "additions": 34,
      "deletions": 22,
      "changes": 56,
      "blob_url": "https://github.com/zxing/zxing/blob/6067089669386891388b3136d9883598b97a4865/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fcamera%2FCameraConfigurationManager.java",
      "raw_url": "https://github.com/zxing/zxing/raw/6067089669386891388b3136d9883598b97a4865/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fcamera%2FCameraConfigurationManager.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fcamera%2FCameraConfigurationManager.java?ref=6067089669386891388b3136d9883598b97a4865",
      "patch": "@@ -27,7 +27,10 @@\n \n import com.google.zxing.client.android.PreferencesActivity;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n import java.util.List;\n \n /**\n@@ -37,8 +40,12 @@\n final class CameraConfigurationManager {\n \n   private static final String TAG = \"CameraConfiguration\";\n-  private static final int MIN_PREVIEW_PIXELS = 320 * 240; // small screen\n-  private static final int MAX_PREVIEW_PIXELS = 854 * 480; // large/HD screen (Droid 2 in particular)\n+\n+  // This is bigger than the size of a small screen, which is still supported. The routine\n+  // below will still select the default (presumably 320x240) size for these. This prevents\n+  // accidental selection of very low resolution on some devices.\n+  private static final int MIN_PREVIEW_PIXELS = 470 * 320; // normal screen\n+  private static final int MAX_PREVIEW_PIXELS = 800 * 600; // more than large/HD screen\n \n   private final Context context;\n   private Point screenResolution;\n@@ -136,7 +143,22 @@ private static void doSetTorch(Camera.Parameters parameters, boolean newSetting)\n \n   private Point findBestPreviewSizeValue(Camera.Parameters parameters, Point screenResolution) {\n \n-    List<Camera.Size> supportedPreviewSizes = parameters.getSupportedPreviewSizes();\n+    // Sort by size, descending\n+    List<Camera.Size> supportedPreviewSizes = new ArrayList<Camera.Size>(parameters.getSupportedPreviewSizes());\n+    Collections.sort(supportedPreviewSizes, new Comparator<Camera.Size>() {\n+      @Override\n+      public int compare(Camera.Size a, Camera.Size b) {\n+        int aPixels = a.height * a.width;\n+        int bPixels = b.height * b.width;\n+        if (bPixels < aPixels) {\n+          return -1;\n+        }\n+        if (bPixels > aPixels) {\n+          return 1;\n+        }\n+        return 0;\n+      }\n+    });\n \n     if (Log.isLoggable(TAG, Log.INFO)) {\n       StringBuilder previewSizesString = new StringBuilder();\n@@ -147,24 +169,10 @@ private Point findBestPreviewSizeValue(Camera.Parameters parameters, Point scree\n       Log.i(TAG, \"Supported preview sizes: \" + previewSizesString);\n     }\n \n-    for (Camera.Size supportedPreviewSize : supportedPreviewSizes) {\n-      int realWidth = supportedPreviewSize.width;\n-      int realHeight = supportedPreviewSize.height;\n-      int pixels = realWidth * realHeight;\n-      if (pixels < MIN_PREVIEW_PIXELS || pixels > MAX_PREVIEW_PIXELS) {\n-        continue;\n-      }\n-      boolean isCandidatePortrait = realWidth < realHeight;\n-      int maybeFlippedWidth = isCandidatePortrait ? realHeight : realWidth;\n-      int maybeFlippedHeight = isCandidatePortrait ? realWidth : realHeight;\n-      if (maybeFlippedWidth == screenResolution.x && maybeFlippedHeight == screenResolution.y) {\n-        return new Point(realWidth, realHeight);\n-      }\n-    }\n-\n     Point bestSize = null;\n+    float screenAspectRatio = (float) screenResolution.x / (float) screenResolution.y;\n \n-    int diff = Integer.MAX_VALUE;\n+    float diff = Float.POSITIVE_INFINITY;\n     for (Camera.Size supportedPreviewSize : supportedPreviewSizes) {\n       int realWidth = supportedPreviewSize.width;\n       int realHeight = supportedPreviewSize.height;\n@@ -175,10 +183,13 @@ private Point findBestPreviewSizeValue(Camera.Parameters parameters, Point scree\n       boolean isCandidatePortrait = realWidth < realHeight;\n       int maybeFlippedWidth = isCandidatePortrait ? realHeight : realWidth;\n       int maybeFlippedHeight = isCandidatePortrait ? realWidth : realHeight;\n-      int newDiff = Math.abs(screenResolution.x * maybeFlippedHeight - screenResolution.y * maybeFlippedWidth);\n-      if (newDiff == 0) {\n-        return new Point(realWidth, realHeight);\n+      if (maybeFlippedWidth == screenResolution.x && maybeFlippedHeight == screenResolution.y) {\n+        Point exactPoint = new Point(realWidth, realHeight);\n+        Log.i(TAG, \"Found preview size exactly matching screen size: \" + exactPoint);\n+        return exactPoint;\n       }\n+      float aspectRatio = (float) maybeFlippedWidth / (float) maybeFlippedHeight;\n+      float newDiff = Math.abs(aspectRatio - screenAspectRatio);\n       if (newDiff < diff) {\n         bestSize = new Point(realWidth, realHeight);\n         diff = newDiff;\n@@ -191,6 +202,7 @@ private Point findBestPreviewSizeValue(Camera.Parameters parameters, Point scree\n       Log.i(TAG, \"No suitable preview sizes, using default: \" + bestSize);\n     }\n \n+    Log.i(TAG, \"Found best approximate preview size: \" + bestSize);\n     return bestSize;\n   }\n ",
      "parent_sha": "26d5ff4355c8f0b58b9e9a73aa283839d5e162fd"
    }
  },
  {
    "oid": "636c00e84470b90fb1a1c0d93fcb71bdbda456b9",
    "message": "Another tweak to get some valid ISO-8859-1 strings like \"fr\u00e9d\u00e9ric\" to be guessed correctly\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@1021 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2009-07-17T09:30:46Z",
    "url": "https://github.com/zxing/zxing/commit/636c00e84470b90fb1a1c0d93fcb71bdbda456b9",
    "details": {
      "sha": "012b837543afb5b26a19958d47b17d8d096a6f8e",
      "filename": "core/src/com/google/zxing/qrcode/decoder/DecodedBitStreamParser.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/zxing/zxing/blob/636c00e84470b90fb1a1c0d93fcb71bdbda456b9/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdecoder%2FDecodedBitStreamParser.java",
      "raw_url": "https://github.com/zxing/zxing/raw/636c00e84470b90fb1a1c0d93fcb71bdbda456b9/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdecoder%2FDecodedBitStreamParser.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdecoder%2FDecodedBitStreamParser.java?ref=636c00e84470b90fb1a1c0d93fcb71bdbda456b9",
      "patch": "@@ -258,7 +258,7 @@ private static String guessEncoding(byte[] bytes) {\n     int length = bytes.length;\n     boolean canBeISO88591 = true;\n     boolean canBeShiftJIS = true;\n-    boolean sawDoubleByteStart = false;\n+    int maybeDoubleByteCount = 0;\n     int maybeSingleByteKatakanaCount = 0;\n     boolean sawLatin1Supplement = false;\n     boolean lastWasPossibleDoubleByteStart = false;\n@@ -305,7 +305,7 @@ private static String guessEncoding(byte[] bytes) {\n             if (nextValue < 0x40 || nextValue > 0xFC) {\n               canBeShiftJIS = false;\n             } else {\n-              sawDoubleByteStart = true;\n+              maybeDoubleByteCount++;\n             }\n             // There is some conflicting information out there about which bytes can follow which in\n             // double-byte Shift_JIS characters. The rule above seems to be the one that matches practice.\n@@ -317,10 +317,10 @@ private static String guessEncoding(byte[] bytes) {\n     }\n     // Distinguishing Shift_JIS and ISO-8859-1 can be a little tough. The crude heuristic is:\n     // - If we saw\n-    //   - at least one byte that starts a double-byte value (bytes that are rare in ISO-8859-1), or\n+    //   - at least three byte that starts a double-byte value (bytes that are rare in ISO-8859-1), or\n     //   - over 5% of bytes that could be single-byte Katakana (also rare in ISO-8859-1),\n     // - and, saw no sequences that are invalid in Shift_JIS, then we conclude Shift_JIS\n-    if (canBeShiftJIS && (sawDoubleByteStart || 20 * maybeSingleByteKatakanaCount > length)) {\n+    if (canBeShiftJIS && (maybeDoubleByteCount >= 3 || 20 * maybeSingleByteKatakanaCount > length)) {\n       return SHIFT_JIS;\n     }\n     // Otherwise, we default to ISO-8859-1 unless we know it can't be",
      "parent_sha": "38f73bca6418105af3e742331630a6daaccfa27b"
    }
  },
  {
    "oid": "8319cf209749d3885aad380d09261b21b4dd0e5f",
    "message": "\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@404 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2008-05-27T17:58:59Z",
    "url": "https://github.com/zxing/zxing/commit/8319cf209749d3885aad380d09261b21b4dd0e5f",
    "details": {
      "sha": "fce5b23d1250e56fc1d00f54a1e0034a8c3a0f60",
      "filename": "zxingorg/src/com/google/zxing/web/DecodeServlet.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/zxing/zxing/blob/8319cf209749d3885aad380d09261b21b4dd0e5f/zxingorg%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fweb%2FDecodeServlet.java",
      "raw_url": "https://github.com/zxing/zxing/raw/8319cf209749d3885aad380d09261b21b4dd0e5f/zxingorg%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fweb%2FDecodeServlet.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/zxingorg%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fweb%2FDecodeServlet.java?ref=8319cf209749d3885aad380d09261b21b4dd0e5f",
      "patch": "@@ -58,6 +58,7 @@\n import java.io.Writer;\n import java.net.URI;\n import java.net.URISyntaxException;\n+import java.net.UnknownHostException;\n import java.util.Hashtable;\n import java.util.List;\n import java.util.Timer;\n@@ -72,7 +73,7 @@\n public final class DecodeServlet extends HttpServlet {\n \n   private static final long MAX_IMAGE_SIZE = 500000L;\n-  private static final long EMAIL_CHECK_INTERVAL = 60000L;\n+  private static final long EMAIL_CHECK_INTERVAL = 2L * 60 * 1000;\n \n   private static final Logger log = Logger.getLogger(DecodeServlet.class.getName());\n \n@@ -163,6 +164,9 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response) t\n     } catch (HttpException he) {\n       getRequest.abort();\n       response.sendRedirect(\"badurl.jspx\");\n+    } catch (UnknownHostException uhe) {\n+      getRequest.abort();\n+      response.sendRedirect(\"badurl.jspx\");\n     }\n \n   }",
      "parent_sha": "3a5bed7681e0a34cc01bcc1d7de1ac4444bacfe8"
    }
  },
  {
    "oid": "fa1c1ededf03e31470194e811d0e8b45f4d8e2cd",
    "message": "Reintroduce basic DoS filter in web app",
    "date": "2015-05-13T11:14:01Z",
    "url": "https://github.com/zxing/zxing/commit/fa1c1ededf03e31470194e811d0e8b45f4d8e2cd",
    "details": {
      "sha": "fabd413aff87a662f4beefdd77906d32b834b6bf",
      "filename": "zxingorg/src/main/java/com/google/zxing/web/DecodeServlet.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/zxing/zxing/blob/fa1c1ededf03e31470194e811d0e8b45f4d8e2cd/zxingorg%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fweb%2FDecodeServlet.java",
      "raw_url": "https://github.com/zxing/zxing/raw/fa1c1ededf03e31470194e811d0e8b45f4d8e2cd/zxingorg%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fweb%2FDecodeServlet.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/zxingorg%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fweb%2FDecodeServlet.java?ref=fa1c1ededf03e31470194e811d0e8b45f4d8e2cd",
      "patch": "@@ -84,7 +84,7 @@\n     maxRequestSize = 10_000_000,\n     fileSizeThreshold = 1_000_000,\n     location = \"/tmp\")\n-@WebServlet(\"/w/decode\")\n+@WebServlet(value = \"/w/decode\", loadOnStartup = 1)\n public final class DecodeServlet extends HttpServlet {\n \n   private static final Logger log = Logger.getLogger(DecodeServlet.class.getName());\n@@ -204,13 +204,13 @@ protected void doGet(HttpServletRequest request,\n \n     try {\n       connection.connect();\n-    } catch (IOException ioe) {\n+    } catch (IOException | IllegalArgumentException e) {\n       // Encompasses lots of stuff, including\n       //  java.net.SocketException, java.net.UnknownHostException,\n       //  javax.net.ssl.SSLPeerUnverifiedException,\n       //  org.apache.http.NoHttpResponseException,\n       //  org.apache.http.client.ClientProtocolException,\n-      log.info(ioe.toString());\n+      log.info(e.toString());\n       errorResponse(request, response, \"badurl\");\n       return;\n     }",
      "parent_sha": "77746832475df47508cb6b51b4f1484dd2896dfd"
    }
  },
  {
    "oid": "2170a1cb0bf6a1182ecabfd8c7ab2b205b4f5cc4",
    "message": "Catch weird openConnection() NPE in Android\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2568 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2013-02-07T10:13:35Z",
    "url": "https://github.com/zxing/zxing/commit/2170a1cb0bf6a1182ecabfd8c7ab2b205b4f5cc4",
    "details": {
      "sha": "737cf37e63453800c6319b14fbca10fde94d25e1",
      "filename": "android/src/com/google/zxing/client/android/HttpHelper.java",
      "status": "modified",
      "additions": 17,
      "deletions": 11,
      "changes": 28,
      "blob_url": "https://github.com/zxing/zxing/blob/2170a1cb0bf6a1182ecabfd8c7ab2b205b4f5cc4/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FHttpHelper.java",
      "raw_url": "https://github.com/zxing/zxing/raw/2170a1cb0bf6a1182ecabfd8c7ab2b205b4f5cc4/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FHttpHelper.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FHttpHelper.java?ref=2170a1cb0bf6a1182ecabfd8c7ab2b205b4f5cc4",
      "patch": "@@ -90,11 +90,7 @@ public static CharSequence downloadViaHttp(String uri, ContentType type, int max\n   private static CharSequence downloadViaHttp(String uri, String contentTypes, int maxChars) throws IOException {\n     Log.i(TAG, \"Downloading \" + uri);\n     URL url = new URL(uri);\n-    URLConnection conn = url.openConnection();\n-    if (!(conn instanceof HttpURLConnection)) {\n-      throw new IOException();\n-    }\n-    HttpURLConnection connection = (HttpURLConnection) conn;\n+    HttpURLConnection connection = safelyOpenConnection(url);\n     connection.setRequestProperty(\"Accept\", contentTypes);\n     connection.setRequestProperty(\"Accept-Charset\", \"utf-8,*\");\n     connection.setRequestProperty(\"User-Agent\", \"ZXing (Android)\");\n@@ -151,12 +147,7 @@ public static URI unredirect(URI uri) throws IOException {\n       return uri;\n     }\n     URL url = uri.toURL();\n-\n-    URLConnection conn = url.openConnection();\n-    if (!(conn instanceof HttpURLConnection)) {\n-      throw new IOException();\n-    }\n-    HttpURLConnection connection = (HttpURLConnection) conn;\n+    HttpURLConnection connection = safelyOpenConnection(url);\n     connection.setInstanceFollowRedirects(false);\n     connection.setDoInput(false);\n     connection.setRequestMethod(\"HEAD\");\n@@ -183,6 +174,21 @@ public static URI unredirect(URI uri) throws IOException {\n       connection.disconnect();\n     }\n   }\n+  \n+  private static HttpURLConnection safelyOpenConnection(URL url) throws IOException {\n+    URLConnection conn;\n+    try {\n+      conn = url.openConnection();\n+    } catch (NullPointerException npe) {\n+      // Another strange bug in Android?\n+      Log.w(TAG, \"Bad URI? \" + url);\n+      throw new IOException(npe.toString());\n+    }\n+    if (!(conn instanceof HttpURLConnection)) {\n+      throw new IOException();\n+    }\n+    return (HttpURLConnection) conn;\n+  }\n \n   private static int safelyConnect(String uri, HttpURLConnection connection) throws IOException {\n     try {",
      "parent_sha": "64e69a3e3517187074e2cbe1a045ff8dd3ae281c"
    }
  },
  {
    "oid": "7e022edf66cc7783351c6c0af90c124568ff83ac",
    "message": "Improved error message when file/URI is mistyped.\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@598 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2008-10-04T10:12:17Z",
    "url": "https://github.com/zxing/zxing/commit/7e022edf66cc7783351c6c0af90c124568ff83ac",
    "details": {
      "sha": "cac8e4ff797e2bb50f53855e724cc63efb1e2e7d",
      "filename": "javase/src/com/google/zxing/client/j2se/CommandLineRunner.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/zxing/zxing/blob/7e022edf66cc7783351c6c0af90c124568ff83ac/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FCommandLineRunner.java",
      "raw_url": "https://github.com/zxing/zxing/raw/7e022edf66cc7783351c6c0af90c124568ff83ac/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FCommandLineRunner.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FCommandLineRunner.java?ref=7e022edf66cc7783351c6c0af90c124568ff83ac",
      "patch": "@@ -26,6 +26,7 @@\n import java.awt.image.BufferedImage;\n import java.io.File;\n import java.io.IOException;\n+import java.io.FileNotFoundException;\n import java.net.URI;\n import java.util.Hashtable;\n \n@@ -89,7 +90,12 @@ private static void decodeOneArgument(String argument, Hashtable<DecodeHintType,\n   }\n \n   private static boolean decode(URI uri, Hashtable<DecodeHintType, Object> hints) throws IOException {\n-    BufferedImage image = ImageIO.read(uri.toURL());\n+    BufferedImage image;\n+    try {\n+      image = ImageIO.read(uri.toURL());\n+    } catch (IllegalArgumentException iae) {\n+      throw new FileNotFoundException(\"Resource not found: \" + uri);\n+    }\n     if (image == null) {\n       System.err.println(uri.toString() + \": Could not load image\");\n       return false;",
      "parent_sha": "6f8a5f49ca0da108b30ea60388391ff255d8038a"
    }
  },
  {
    "oid": "bb7328d4b00f5f10eb0eb9a781fb3916ff9c1e13",
    "message": "Minor cleanup of CommandLineRunner\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2579 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2013-02-25T15:27:28Z",
    "url": "https://github.com/zxing/zxing/commit/bb7328d4b00f5f10eb0eb9a781fb3916ff9c1e13",
    "details": {
      "sha": "ff8982e475458dc2c6d7ba7aa1d9830a633c9591",
      "filename": "javase/src/com/google/zxing/client/j2se/CommandLineRunner.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/zxing/zxing/blob/bb7328d4b00f5f10eb0eb9a781fb3916ff9c1e13/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FCommandLineRunner.java",
      "raw_url": "https://github.com/zxing/zxing/raw/bb7328d4b00f5f10eb0eb9a781fb3916ff9c1e13/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FCommandLineRunner.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/javase%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FCommandLineRunner.java?ref=bb7328d4b00f5f10eb0eb9a781fb3916ff9c1e13",
      "patch": "@@ -24,14 +24,14 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.EnumMap;\n-import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.Queue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n+import java.util.regex.Pattern;\n \n /**\n  * This simple command line utility decodes files, directories of files, or URIs which are passed\n@@ -43,6 +43,8 @@\n  */\n public final class CommandLineRunner {\n \n+  private static final Pattern COMMA = Pattern.compile(\",\");\n+\n   private CommandLineRunner() {\n   }\n \n@@ -74,7 +76,7 @@ public static void main(String[] args) throws Exception {\n         config.setRecursive(true);\n       } else if (arg.startsWith(\"--crop\")) {\n         int[] crop = new int[4];\n-        String[] tokens = arg.substring(7).split(\",\");\n+        String[] tokens = COMMA.split(arg.substring(7));\n         for (int i = 0; i < crop.length; i++) {\n           crop[i] = Integer.parseInt(tokens[i]);\n         }\n@@ -95,7 +97,7 @@ public static void main(String[] args) throws Exception {\n \n     int numThreads = Runtime.getRuntime().availableProcessors();\n     ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n-    List<Future<Integer>> futures = new ArrayList<Future<Integer>>(numThreads);\n+    Collection<Future<Integer>> futures = new ArrayList<Future<Integer>>(numThreads);\n     for (int x = 0; x < numThreads; x++) {\n       futures.add(executor.submit(new DecodeWorker(config, inputs)));\n     }\n@@ -179,7 +181,8 @@ private static Map<DecodeHintType,?> buildHints(Config config) {\n   }\n \n   private static void printUsage() {\n-    System.err.println(\"Decode barcode images using the ZXing library\\n\");\n+    System.err.println(\"Decode barcode images using the ZXing library\");\n+    System.err.println();\n     System.err.println(\"usage: CommandLineRunner { file | dir | url } [ options ]\");\n     System.err.println(\"  --try_harder: Use the TRY_HARDER hint, default is normal (mobile) mode\");\n     System.err.println(\"  --pure_barcode: Input image is a pure monochrome barcode image, not a photo\");\n@@ -190,7 +193,6 @@ private static void printUsage() {\n     System.err.println(\"  --brief: Only output one line per file, omitting the contents\");\n     System.err.println(\"  --recursive: Descend into subdirectories\");\n     System.err.println(\"  --crop=left,top,width,height: Only examine cropped region of input image(s)\");\n-    System.err.println(\"  --threads=n: The number of threads to use while decoding\");\n   }\n \n }",
      "parent_sha": "7a39922b3010a4fa8f07d3242108967ae04d911f"
    }
  },
  {
    "oid": "20df62a8afd150da1530935f72c541a8d6a82b5d",
    "message": "Made this more like RGBMonochromBitmapSource, caching a row instead of the whole image\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@425 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2008-06-12T16:29:04Z",
    "url": "https://github.com/zxing/zxing/commit/20df62a8afd150da1530935f72c541a8d6a82b5d",
    "details": {
      "sha": "aebe9a29668fb5a1ba64a0d23a8be20cc2dea01f",
      "filename": "javame/src/com/google/zxing/client/j2me/LCDUIImageMonochromeBitmapSource.java",
      "status": "modified",
      "additions": 21,
      "deletions": 8,
      "changes": 29,
      "blob_url": "https://github.com/zxing/zxing/blob/20df62a8afd150da1530935f72c541a8d6a82b5d/javame%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2me%2FLCDUIImageMonochromeBitmapSource.java",
      "raw_url": "https://github.com/zxing/zxing/raw/20df62a8afd150da1530935f72c541a8d6a82b5d/javame%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2me%2FLCDUIImageMonochromeBitmapSource.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/javame%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2me%2FLCDUIImageMonochromeBitmapSource.java?ref=20df62a8afd150da1530935f72c541a8d6a82b5d",
      "patch": "@@ -27,15 +27,20 @@\n  */\n public final class LCDUIImageMonochromeBitmapSource extends BaseMonochromeBitmapSource {\n \n-  private final int[] rgbPixels;\n-  private final int width;\n+  private final Image image;\n   private final int height;\n+  private final int width;\n+  private final int[] rgbRow;\n+  private final int[] pixelHolder;\n+  private int cachedRow;\n \n   public LCDUIImageMonochromeBitmapSource(Image image) {\n-    width = image.getWidth();\n+    this.image = image;\n     height = image.getHeight();\n-    rgbPixels = new int[width * height];\n-    image.getRGB(rgbPixels, 0, width, 0, 0, width, height);\n+    width = image.getWidth();\n+    rgbRow = new int[width];\n+    pixelHolder = new int[1];\n+    cachedRow = -1;\n   }\n \n   public int getHeight() {\n@@ -47,7 +52,13 @@ public int getWidth() {\n   }\n \n   public int getLuminance(int x, int y) {\n-    int pixel = rgbPixels[y * width + x];\n+    int pixel;\n+    if (cachedRow == y) {\n+      pixel = rgbRow[x];\n+    } else {\n+      image.getRGB(pixelHolder, 0, width, x, y, 1, 1);\n+      pixel = pixelHolder[0];\n+    }\n \n     // Instead of multiplying by 306, 601, 117, we multiply by 256, 512, 256, so that\n     // the multiplies can be implemented as shifts.\n@@ -66,9 +77,11 @@ public int getLuminance(int x, int y) {\n              (pixel & 0x000000FF       )) >> 2;\n   }\n \n-  // Nothing to do, since we have direct access to the image data.\n   public void cacheRowForLuminance(int y) {\n-\n+    if (y != cachedRow) {\n+      image.getRGB(rgbRow, 0, width, 0, y, width, 1);\n+      cachedRow = y;\n+    }\n   }\n \n }\n\\ No newline at end of file",
      "parent_sha": "d77371d5fc2c8a0c981c586d745dc5eaa6bd3017"
    }
  },
  {
    "oid": "6352a421a301cf8f2860643c92127b2823cd4c70",
    "message": "Codabar optimization\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2515 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2012-11-12T20:12:04Z",
    "url": "https://github.com/zxing/zxing/commit/6352a421a301cf8f2860643c92127b2823cd4c70",
    "details": {
      "sha": "e966df7fdd76bb5f471c8c0fd86ea06ae4ee6d03",
      "filename": "core/src/com/google/zxing/oned/CodaBarReader.java",
      "status": "modified",
      "additions": 27,
      "deletions": 15,
      "changes": 42,
      "blob_url": "https://github.com/zxing/zxing/blob/6352a421a301cf8f2860643c92127b2823cd4c70/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FCodaBarReader.java",
      "raw_url": "https://github.com/zxing/zxing/raw/6352a421a301cf8f2860643c92127b2823cd4c70/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FCodaBarReader.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FCodaBarReader.java?ref=6352a421a301cf8f2860643c92127b2823cd4c70",
      "patch": "@@ -291,29 +291,41 @@ private int toNarrowWidePattern(int position) {\n     if (end >= counterLength) {\r\n       return -1;\r\n     }\r\n-    // First element is for bars, second is for spaces.\r\n-    int[] maxes = {0, 0};\r\n-    int[] mins = {Integer.MAX_VALUE, Integer.MAX_VALUE};\r\n-    int[] thresholds = {0, 0};\r\n \r\n-    for (int i = 0; i < 2; i++) {\r\n-      for (int j = position + i; j < end; j += 2) {\r\n-        if (counters[j] < mins[i]) {\r\n-          mins[i] = counters[j];\r\n-        }\r\n-        if (counters[j] > maxes[i]) {\r\n-          maxes[i] = counters[j];\r\n-        }\r\n+    int[] theCounters = counters;\r\n+\r\n+    int maxBar = 0;\r\n+    int minBar = Integer.MAX_VALUE;\r\n+    for (int j = position; j < end; j += 2) {\r\n+      int currentCounter = theCounters[j];\r\n+      if (currentCounter < minBar) {\r\n+        minBar = currentCounter;\r\n+      }\r\n+      if (currentCounter > maxBar) {\r\n+        maxBar = currentCounter;\r\n+      }\r\n+    }\r\n+    int thresholdBar = (minBar + maxBar) / 2;\r\n+\r\n+    int maxSpace = 0;\r\n+    int minSpace = Integer.MAX_VALUE;\r\n+    for (int j = position + 1; j < end; j += 2) {\r\n+      int currentCounter = theCounters[j];\r\n+      if (currentCounter < minSpace) {\r\n+        minSpace = currentCounter;\r\n+      }\r\n+      if (currentCounter > maxSpace) {\r\n+        maxSpace = currentCounter;\r\n       }\r\n-      thresholds[i] = (mins[i] + maxes[i]) / 2;\r\n     }\r\n+    int thresholdSpace = (minSpace + maxSpace) / 2;\r\n \r\n     int bitmask = 1 << 7;\r\n     int pattern = 0;\r\n     for (int i = 0; i < 7; i++) {\r\n-      int barOrSpace = i & 1;\r\n+      int threshold = (i & 1) == 0 ? thresholdBar : thresholdSpace;\r\n       bitmask >>= 1;\r\n-      if (counters[position + i] > thresholds[barOrSpace]) {\r\n+      if (theCounters[position + i] > threshold) {\r\n         pattern |= bitmask;\r\n       }\r\n     }\r",
      "parent_sha": "ef33d458095acd7d282fb8ecdf027ba1a393f644"
    }
  },
  {
    "oid": "146511ea006f92877653495f90f90f0f11151375",
    "message": "Bumped the history DB version for the rare case where there is an entry with the old RSS14 format string.\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@1780 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2011-05-17T20:51:52Z",
    "url": "https://github.com/zxing/zxing/commit/146511ea006f92877653495f90f90f0f11151375",
    "details": {
      "sha": "43515d26ded0f5e7f6c44633ca34366da3e20dcb",
      "filename": "android/src/com/google/zxing/client/android/history/DBHelper.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/146511ea006f92877653495f90f90f0f11151375/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fhistory%2FDBHelper.java",
      "raw_url": "https://github.com/zxing/zxing/raw/146511ea006f92877653495f90f90f0f11151375/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fhistory%2FDBHelper.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fhistory%2FDBHelper.java?ref=146511ea006f92877653495f90f90f0f11151375",
      "patch": "@@ -25,7 +25,7 @@\n  */\n final class DBHelper extends SQLiteOpenHelper {\n \n-  private static final int DB_VERSION = 3;\n+  private static final int DB_VERSION = 4;\n   private static final String DB_NAME = \"barcode_scanner_history.db\";\n   static final String TABLE_NAME = \"history\";\n   static final String ID_COL = \"id\";",
      "parent_sha": "ab003c16863f4297b2d84302ee32ebd667f78c3a"
    }
  },
  {
    "oid": "cb247250ac2b7526196943b1be616f0ccf989ec9",
    "message": "'Blacklist' Geeksphone as they don't seem to report expected camera params\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@1264 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2010-03-30T16:28:44Z",
    "url": "https://github.com/zxing/zxing/commit/cb247250ac2b7526196943b1be616f0ccf989ec9",
    "details": {
      "sha": "d10d4d002dba0c9902626938a65878477f5b8103",
      "filename": "android/src/com/google/zxing/client/android/HelpActivity.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/cb247250ac2b7526196943b1be616f0ccf989ec9/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FHelpActivity.java",
      "raw_url": "https://github.com/zxing/zxing/raw/cb247250ac2b7526196943b1be616f0ccf989ec9/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FHelpActivity.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FHelpActivity.java?ref=cb247250ac2b7526196943b1be616f0ccf989ec9",
      "patch": "@@ -39,7 +39,7 @@ public final class HelpActivity extends Activity {\n \n   private static final String TAG = HelpActivity.class.getName();\n \n-  private static final String[] BUGGY_MODEL_SUBSTRINGS = {\"Behold II\", \"Pulse\"};\n+  private static final String[] BUGGY_MODEL_SUBSTRINGS = {\"Behold II\", \"Pulse\", \"Geeksphone\"};\n   private static final Uri BUGGY_URI =\n       Uri.parse(\"http://code.google.com/p/zxing/wiki/FrequentlyAskedQuestions\");\n ",
      "parent_sha": "73063a9f209e9b1be61ab6e9bd5c736522f825c6"
    }
  },
  {
    "oid": "77ce643b6101a108e5e42e0d11cf34f704b54496",
    "message": "Minor javadoc fix\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@167 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2008-02-05T22:01:36Z",
    "url": "https://github.com/zxing/zxing/commit/77ce643b6101a108e5e42e0d11cf34f704b54496",
    "details": {
      "sha": "ac5f7e7ed741d39bfa7e9cced4a8da05d0f0404f",
      "filename": "core/src/com/google/zxing/oned/AbstractUPCEANReader.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/zxing/zxing/blob/77ce643b6101a108e5e42e0d11cf34f704b54496/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FAbstractUPCEANReader.java",
      "raw_url": "https://github.com/zxing/zxing/raw/77ce643b6101a108e5e42e0d11cf34f704b54496/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FAbstractUPCEANReader.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FAbstractUPCEANReader.java?ref=77ce643b6101a108e5e42e0d11cf34f704b54496",
      "patch": "@@ -128,9 +128,12 @@ protected static boolean isWhiteRange(BitArray row, int start, int end) {\n   }\n \n   /**\n-   * Computes the UPC/EAN checksum on a string of digits\n-   * @param s\n-   * @return\n+   * Computes the UPC/EAN checksum on a string of digits, and reports\n+   * whether the checksum is correct or not.\n+   *\n+   * @param s string of digits to check\n+   * @return true iff string of digits passes the UPC/EAN checksum algorithm\n+   * @throws ReaderException if the string does not contain only digits\n    */\n   protected boolean checkChecksum(String s) throws ReaderException {\n     int sum = 0;",
      "parent_sha": "7ba2b30d438dd201be7dff0c6fb6a8727df96ca2"
    }
  },
  {
    "oid": "a75bc5d021fc17f296789a9971e8e5873a04573b",
    "message": "Minor whitespace and comment cleanup.\n\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@1968 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2011-10-13T19:09:31Z",
    "url": "https://github.com/zxing/zxing/commit/a75bc5d021fc17f296789a9971e8e5873a04573b",
    "details": {
      "sha": "8c253612dcb28092c182fafaacb902178301af5d",
      "filename": "android/src/com/google/zxing/client/android/camera/CameraConfigurationManager.java",
      "status": "modified",
      "additions": 10,
      "deletions": 12,
      "changes": 22,
      "blob_url": "https://github.com/zxing/zxing/blob/a75bc5d021fc17f296789a9971e8e5873a04573b/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fcamera%2FCameraConfigurationManager.java",
      "raw_url": "https://github.com/zxing/zxing/raw/a75bc5d021fc17f296789a9971e8e5873a04573b/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fcamera%2FCameraConfigurationManager.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fcamera%2FCameraConfigurationManager.java?ref=a75bc5d021fc17f296789a9971e8e5873a04573b",
      "patch": "@@ -26,6 +26,10 @@\n \n import java.util.regex.Pattern;\n \n+/**\n+ * A class which deals with reading, parsing, and setting the camera parameters which are used to\n+ * configure the camera hardware.\n+ */\n final class CameraConfigurationManager {\n \n   private static final String TAG = CameraConfigurationManager.class.getSimpleName();\n@@ -91,25 +95,22 @@ String getPreviewFormatString() {\n \n   private static Point getCameraResolution(Camera.Parameters parameters, Point screenResolution) {\n     String previewSizeValueString = parameters.get(\"preview-size-values\");\n-    // saw this on Xperia\n+\n+    // This string is wrong but was seen on the Sony Xperia.\n     if (previewSizeValueString == null) {\n       previewSizeValueString = parameters.get(\"preview-size-value\");\n     }\n \n     Point cameraResolution = null;\n-\n     if (previewSizeValueString != null) {\n       Log.d(TAG, \"preview-size-values parameter: \" + previewSizeValueString);\n       cameraResolution = findBestPreviewSizeValue(previewSizeValueString, screenResolution);\n     }\n \n     if (cameraResolution == null) {\n       // Ensure that the camera resolution is a multiple of 8, as the screen may not be.\n-      cameraResolution = new Point(\n-          (screenResolution.x >> 3) << 3,\n-          (screenResolution.y >> 3) << 3);\n+      cameraResolution = new Point((screenResolution.x >> 3) << 3, (screenResolution.y >> 3) << 3);\n     }\n-\n     return cameraResolution;\n   }\n \n@@ -119,7 +120,6 @@ private static Point findBestPreviewSizeValue(CharSequence previewSizeValueStrin\n     int bestY = 0;\n     int diff = Integer.MAX_VALUE;\n     for (String previewSize : COMMA_PATTERN.split(previewSizeValueString)) {\n-\n       previewSize = previewSize.trim();\n       int dimPosition = previewSize.indexOf('x');\n       if (dimPosition < 0) {\n@@ -147,7 +147,6 @@ private static Point findBestPreviewSizeValue(CharSequence previewSizeValueStrin\n         bestY = newY;\n         diff = newDiff;\n       }\n-\n     }\n \n     if (bestX > 0 && bestY > 0) {\n@@ -193,7 +192,6 @@ private void setZoom(Camera.Parameters parameters) {\n     }\n \n     int tenDesiredZoom = TEN_DESIRED_ZOOM;\n-\n     String maxZoomString = parameters.get(\"max-zoom\");\n     if (maxZoomString != null) {\n       try {\n@@ -236,14 +234,14 @@ private void setZoom(Camera.Parameters parameters) {\n       }\n     }\n \n-    // Set zoom. This helps encourage the user to pull back.\n-    // Some devices like the Behold have a zoom parameter\n+    // Sets the zoom which helps encourage the user to pull back.\n+    // Some devices like the Behold have a zoom parameter.\n     if (maxZoomString != null || motZoomValuesString != null) {\n       parameters.set(\"zoom\", String.valueOf(tenDesiredZoom / 10.0));\n     }\n \n     // Most devices, like the Hero, appear to expose this zoom parameter.\n-    // It takes on values like \"27\" which appears to mean 2.7x zoom\n+    // It takes on values like \"27\" which appears to mean 2.7x zoom.\n     if (takingPictureZoomMaxString != null) {\n       parameters.set(\"taking-picture-zoom\", tenDesiredZoom);\n     }",
      "parent_sha": "e65b1394474d903239f349fdd39ffca320f8663d"
    }
  },
  {
    "oid": "5f22834653caec48b2e828b0d2a6f0a5594d71ae",
    "message": "Make light off by default\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@1260 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2010-03-26T16:22:20Z",
    "url": "https://github.com/zxing/zxing/commit/5f22834653caec48b2e828b0d2a6f0a5594d71ae",
    "details": {
      "sha": "3643ac442b46edd893a8d246e1472f66c73dc254",
      "filename": "android/src/com/google/zxing/client/android/CameraManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/5f22834653caec48b2e828b0d2a6f0a5594d71ae/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FCameraManager.java",
      "raw_url": "https://github.com/zxing/zxing/raw/5f22834653caec48b2e828b0d2a6f0a5594d71ae/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FCameraManager.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2FCameraManager.java?ref=5f22834653caec48b2e828b0d2a6f0a5594d71ae",
      "patch": "@@ -160,7 +160,7 @@ public void openDriver(SurfaceHolder holder) throws IOException {\n \n       setCameraParameters();\n       SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n-      if (prefs.getBoolean(PreferencesActivity.KEY_FRONT_LIGHT, true)) {\n+      if (prefs.getBoolean(PreferencesActivity.KEY_FRONT_LIGHT, false)) {\n         FlashlightManager.enableFlashlight();\n       }\n     }",
      "parent_sha": "fbd48c4c741c56fa68ba8dc639fa6256b7aab31d"
    }
  },
  {
    "oid": "83c01f0ceec92535200432df4608d8002421dcb6",
    "message": "Camel-cased log_table, exp_table vars\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@609 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2008-10-09T12:17:37Z",
    "url": "https://github.com/zxing/zxing/commit/83c01f0ceec92535200432df4608d8002421dcb6",
    "details": {
      "sha": "5bf9896286eba4c418468177820774d444127acb",
      "filename": "core/src/com/google/zxing/common/reedsolomon/GF256.java",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/zxing/zxing/blob/83c01f0ceec92535200432df4608d8002421dcb6/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2Freedsolomon%2FGF256.java",
      "raw_url": "https://github.com/zxing/zxing/raw/83c01f0ceec92535200432df4608d8002421dcb6/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2Freedsolomon%2FGF256.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2Freedsolomon%2FGF256.java?ref=83c01f0ceec92535200432df4608d8002421dcb6",
      "patch": "@@ -31,8 +31,8 @@ public final class GF256 {\n   public static final GF256 QR_CODE_FIELD = new GF256(0x011D); // x^8 + x^4 + x^3 + x^2 + 1\n   public static final GF256 DATA_MATRIX_FIELD = new GF256(0x012D); // x^8 + x^5 + x^3 + x^2 + 1\n \n-  private final int[] exp_table;\n-  private final int[] log_table;\n+  private final int[] expTable;\n+  private final int[] logTable;\n   private final GF256Poly zero;\n   private final GF256Poly one;\n \n@@ -44,20 +44,20 @@ public final class GF256 {\n    *  coefficient\n    */\n   private GF256(int primitive) {\n-    exp_table = new int[256];\n-    log_table = new int[256];\n+    expTable = new int[256];\n+    logTable = new int[256];\n     int x = 1;\n     for (int i = 0; i < 256; i++) {\n-      exp_table[i] = x;\n+      expTable[i] = x;\n       x <<= 1; // x = x * 2; we're assuming the generator alpha is 2\n       if (x >= 0x100) {\n         x ^= primitive;\n       }\n     }\n     for (int i = 0; i < 255; i++) {\n-      log_table[exp_table[i]] = i;\n+      logTable[expTable[i]] = i;\n     }\n-    // log_table[0] == 0 but this should never be used\n+    // logTable[0] == 0 but this should never be used\n     zero = new GF256Poly(this, new int[]{0});\n     one = new GF256Poly(this, new int[]{1});\n   }\n@@ -98,7 +98,7 @@ static int addOrSubtract(int a, int b) {\n    * @return 2 to the power of a in GF(256)\n    */\n   int exp(int a) {\n-    return exp_table[a];\n+    return expTable[a];\n   }\n \n   /**\n@@ -108,7 +108,7 @@ int log(int a) {\n     if (a == 0) {\n       throw new IllegalArgumentException();\n     }\n-    return log_table[a];\n+    return logTable[a];\n   }\n \n   /**\n@@ -118,7 +118,7 @@ int inverse(int a) {\n     if (a == 0) {\n       throw new ArithmeticException();\n     }\n-    return exp_table[255 - log_table[a]];\n+    return expTable[255 - logTable[a]];\n   }\n \n   /**\n@@ -136,7 +136,7 @@ int multiply(int a, int b) {\n     if (b == 1) {\n       return a;\n     }\n-    return exp_table[(log_table[a] + log_table[b]) % 255];\n+    return expTable[(logTable[a] + logTable[b]) % 255];\n   }\n \n }",
      "parent_sha": "76b4fa1910125d566fb20c973874edfab60bf6f3"
    }
  },
  {
    "oid": "ccf169425ffebc0023c8a9fb1cb793408ff5f4a6",
    "message": "Catch strange RuntimeExceptino from inside autoFocus() in Android 4.0.x+\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2107 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2012-01-11T14:30:55Z",
    "url": "https://github.com/zxing/zxing/commit/ccf169425ffebc0023c8a9fb1cb793408ff5f4a6",
    "details": {
      "sha": "2925c7defbe337d604048981b01cd1c441aa6041",
      "filename": "android/src/com/google/zxing/client/android/camera/CameraManager.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/zxing/zxing/blob/ccf169425ffebc0023c8a9fb1cb793408ff5f4a6/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fcamera%2FCameraManager.java",
      "raw_url": "https://github.com/zxing/zxing/raw/ccf169425ffebc0023c8a9fb1cb793408ff5f4a6/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fcamera%2FCameraManager.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fcamera%2FCameraManager.java?ref=ccf169425ffebc0023c8a9fb1cb793408ff5f4a6",
      "patch": "@@ -165,7 +165,12 @@ public void requestPreviewFrame(Handler handler, int message) {\n   public void requestAutoFocus(Handler handler, int message) {\n     if (camera != null && previewing) {\n       autoFocusCallback.setHandler(handler, message);\n-      camera.autoFocus(autoFocusCallback);\n+      try {\n+        camera.autoFocus(autoFocusCallback);\n+      } catch (RuntimeException re) {\n+        // Have heard RuntimeException reported in Android 4.0.x+; continue?\n+        Log.w(TAG, \"Unexpected exception while focusing\", re);\n+      }\n     }\n   }\n ",
      "parent_sha": "5cc9295451a3a2ccb83f1560067be0f278fec134"
    }
  },
  {
    "oid": "7119d3878baee91c3ce29e631127ecb31af1ec9f",
    "message": "Issue 679 allow much more history\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@1700 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2011-01-11T15:41:44Z",
    "url": "https://github.com/zxing/zxing/commit/7119d3878baee91c3ce29e631127ecb31af1ec9f",
    "details": {
      "sha": "2d6ff03458cd01cd54cad1a2f59b0ee1ac86c3a9",
      "filename": "android/src/com/google/zxing/client/android/history/HistoryManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/7119d3878baee91c3ce29e631127ecb31af1ec9f/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fhistory%2FHistoryManager.java",
      "raw_url": "https://github.com/zxing/zxing/raw/7119d3878baee91c3ce29e631127ecb31af1ec9f/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fhistory%2FHistoryManager.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/android%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fandroid%2Fhistory%2FHistoryManager.java?ref=7119d3878baee91c3ce29e631127ecb31af1ec9f",
      "patch": "@@ -57,7 +57,7 @@ public final class HistoryManager {\n \n   private static final String TAG = HistoryManager.class.getSimpleName();\n \n-  private static final int MAX_ITEMS = 50;\n+  private static final int MAX_ITEMS = 500;\n   //private static final String[] TEXT_COL_PROJECTION = { DBHelper.TEXT_COL };\n   private static final String[] GET_ITEM_COL_PROJECTION = {\n       DBHelper.TEXT_COL,",
      "parent_sha": "e6d969b6f428b8b0635da3d7d02d36f12e864116"
    }
  },
  {
    "oid": "0e7872020c8f6293d499655392526cfe19217836",
    "message": "Another fix to ensure that 2 barcodes with the same info are counted separately.\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@338 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2008-04-03T15:39:06Z",
    "url": "https://github.com/zxing/zxing/commit/0e7872020c8f6293d499655392526cfe19217836",
    "details": {
      "sha": "a818cbb878a39c966cd7e025f80460868aaf3f98",
      "filename": "core/src/com/google/zxing/oned/AbstractOneDReader.java",
      "status": "modified",
      "additions": 23,
      "deletions": 6,
      "changes": 29,
      "blob_url": "https://github.com/zxing/zxing/blob/0e7872020c8f6293d499655392526cfe19217836/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FAbstractOneDReader.java",
      "raw_url": "https://github.com/zxing/zxing/raw/0e7872020c8f6293d499655392526cfe19217836/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FAbstractOneDReader.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FAbstractOneDReader.java?ref=0e7872020c8f6293d499655392526cfe19217836",
      "patch": "@@ -86,7 +86,11 @@ private Result doDecode(MonochromeBitmapSource image, Hashtable hints, boolean t\n       maxLines = 7;\n     }\n \n-    Hashtable lastResults = null;\n+    // Remember last barcode to avoid thinking we've found a new barcode when\n+    // we just rescanned the last one. Actually remember two, the last one\n+    // found above and below.\n+    String lastResultAboveText = null;\n+    String lastResultBelowText = null;\n     boolean skippingSomeBarcodes =\n       hints != null &&\n       hints.containsKey(DecodeHintType.SKIP_N_BARCODES) &&\n@@ -126,24 +130,30 @@ private Result doDecode(MonochromeBitmapSource image, Hashtable hints, boolean t\n \n           // Look for a barcode\n           Result result = decodeRow(rowNumber, row, hints);\n+          String resultText = result.getText();\n \n-          if (lastResults != null && lastResults.containsKey(result.getText())) {\n+          // make sure we terminate inner loop after this because we found something\n+          attempt = 1;\n+          // See if we should skip and keep looking\n+          if (( isAbove && resultText.equals(lastResultAboveText)) ||\n+              (!isAbove && resultText.equals(lastResultBelowText))) {\n             // Just saw the last barcode again, proceed\n             continue;\n           }\n \n-          if (skippingSomeBarcodes) { // See if we should skip and keep looking\n+          if (skippingSomeBarcodes) {\n             int oldValue = ((Integer) hints.get(DecodeHintType.SKIP_N_BARCODES)).intValue();\n             if (oldValue > 1) {\n               hints.put(DecodeHintType.SKIP_N_BARCODES, new Integer(oldValue - 1));\n             } else {\n               hints.remove(DecodeHintType.SKIP_N_BARCODES);\n               skippingSomeBarcodes = false;\n             }\n-            if (lastResults == null) {\n-              lastResults = new Hashtable(3);\n+            if (isAbove) {\n+              lastResultAboveText = resultText;\n+            } else {\n+              lastResultBelowText = resultText;\n             }\n-            lastResults.put(result.getText(), Boolean.TRUE); // Remember what we just saw\n           } else {\n             // We found our barcode\n             if (attempt == 1) {\n@@ -155,6 +165,13 @@ private Result doDecode(MonochromeBitmapSource image, Hashtable hints, boolean t\n \n         } catch (ReaderException re) {\n           // continue -- just couldn't decode this row\n+          if (skippingSomeBarcodes) {\n+            if (isAbove) {\n+              lastResultAboveText = null;\n+            } else {\n+              lastResultBelowText = null;\n+            }\n+          }\n         }\n \n       }",
      "parent_sha": "01075819c59d2ea48fa4e3f4a0ed38485ccba0fc"
    }
  },
  {
    "oid": "44267115986e7fdcb2a9629fd7986f65ab9a2670",
    "message": "Update dimension ratio change to new location (updates DMRE PR #323) (#1350)\n\n* Update dimension ratio change to new location\r\n\r\n* changing threshold to 6\r\n\r\nas discussed in #1350",
    "date": "2021-01-19T19:40:59Z",
    "url": "https://github.com/zxing/zxing/commit/44267115986e7fdcb2a9629fd7986f65ab9a2670",
    "details": {
      "sha": "c40a20e91350346a5ceef72d3ff71a62ef5780a2",
      "filename": "core/src/main/java/com/google/zxing/datamatrix/detector/Detector.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/44267115986e7fdcb2a9629fd7986f65ab9a2670/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fdatamatrix%2Fdetector%2FDetector.java",
      "raw_url": "https://github.com/zxing/zxing/raw/44267115986e7fdcb2a9629fd7986f65ab9a2670/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fdatamatrix%2Fdetector%2FDetector.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fdatamatrix%2Fdetector%2FDetector.java?ref=44267115986e7fdcb2a9629fd7986f65ab9a2670",
      "patch": "@@ -71,7 +71,7 @@ public DetectorResult detect() throws NotFoundException {\n       dimensionRight += 1;\n     }\n \n-    if (4 * dimensionTop < 7 * dimensionRight && 4 * dimensionRight < 7 * dimensionTop) {\n+    if (4 * dimensionTop < 6 * dimensionRight && 4 * dimensionRight < 6 * dimensionTop) {\n       // The matrix is square\n       dimensionTop = dimensionRight = Math.max(dimensionTop, dimensionRight);\n     }",
      "parent_sha": "395dc6b83f4793a73d2fe69c42a7c9ee6b1273ee"
    }
  },
  {
    "oid": "a88da9d00257c798f8fc8a9b351fc1e828dd9aab",
    "message": "Issue 1194 small bug fix in array expanding comparisons\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@2212 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2012-03-02T21:38:34Z",
    "url": "https://github.com/zxing/zxing/commit/a88da9d00257c798f8fc8a9b351fc1e828dd9aab",
    "details": {
      "sha": "724ff798c9be80716c40f05e24db647eb86c685a",
      "filename": "core/src/com/google/zxing/oned/CodaBarReader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/zxing/zxing/blob/a88da9d00257c798f8fc8a9b351fc1e828dd9aab/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FCodaBarReader.java",
      "raw_url": "https://github.com/zxing/zxing/raw/a88da9d00257c798f8fc8a9b351fc1e828dd9aab/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FCodaBarReader.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Foned%2FCodaBarReader.java?ref=a88da9d00257c798f8fc8a9b351fc1e828dd9aab",
      "patch": "@@ -249,7 +249,7 @@ private void setCounters(BitArray row) throws NotFoundException {\n   private void counterAppend(int e) {\r\n     counters[counterLength] = e;\r\n     counterLength++;\r\n-    if (counterLength >= counterLength) {\r\n+    if (counterLength >= counters.length) {\r\n       int[] temp = new int[counterLength * 2];\r\n       System.arraycopy(counters, 0, temp, 0, counterLength);\r\n       counters = temp;\r",
      "parent_sha": "3b90a727277a40fd0be37652a6c1211084c29120"
    }
  },
  {
    "oid": "1cc5cbe961de3606287a53765e6cde3dea24660e",
    "message": "Don't run Aztec test 1000 times pointlessly",
    "date": "2019-07-29T19:33:58Z",
    "url": "https://github.com/zxing/zxing/commit/1cc5cbe961de3606287a53765e6cde3dea24660e",
    "details": {
      "sha": "5e24a36050f6a9ed3e21c2e5701936f473cf64f1",
      "filename": "core/src/test/java/com/google/zxing/aztec/encoder/EncoderTest.java",
      "status": "modified",
      "additions": 31,
      "deletions": 33,
      "changes": 64,
      "blob_url": "https://github.com/zxing/zxing/blob/1cc5cbe961de3606287a53765e6cde3dea24660e/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Faztec%2Fencoder%2FEncoderTest.java",
      "raw_url": "https://github.com/zxing/zxing/raw/1cc5cbe961de3606287a53765e6cde3dea24660e/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Faztec%2Fencoder%2FEncoderTest.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Faztec%2Fencoder%2FEncoderTest.java?ref=1cc5cbe961de3606287a53765e6cde3dea24660e",
      "patch": "@@ -77,7 +77,7 @@ public void testEncode1() {\n         \"        X X     X   X X   X   X   X       X X \\n\" +\n         \"  X   X   X X       X   X         X X X     X \\n\");\n   }\n-  \n+\n   @Test\n   public void testEncode2() {\n     testEncode(\"Aztec Code is a public domain 2D matrix barcode symbology\" +\n@@ -128,52 +128,50 @@ public void testEncode2() {\n \n   @Test\n   public void testAztecWriter() throws Exception {\n-    for (int i = 0; i < 1000; i++) {\n-      testWriter(\"\\u20AC 1 sample data.\", \"ISO-8859-1\", 25, true, 2);\n-      testWriter(\"\\u20AC 1 sample data.\", \"ISO-8859-15\", 25, true, 2);\n-      testWriter(\"\\u20AC 1 sample data.\", \"UTF-8\", 25, true, 2);\n-      testWriter(\"\\u20AC 1 sample data.\", \"UTF-8\", 100, true, 3);\n-      testWriter(\"\\u20AC 1 sample data.\", \"UTF-8\", 300, true, 4);\n-      testWriter(\"\\u20AC 1 sample data.\", \"UTF-8\", 500, false, 5);\n-      // Test AztecWriter defaults\n-      String data = \"In ut magna vel mauris malesuada\";\n-      AztecWriter writer = new AztecWriter();\n-      BitMatrix matrix = writer.encode(data, BarcodeFormat.AZTEC, 0, 0);\n-      AztecCode aztec = Encoder.encode(data.getBytes(StandardCharsets.ISO_8859_1),\n-          Encoder.DEFAULT_EC_PERCENT, Encoder.DEFAULT_AZTEC_LAYERS);\n-      BitMatrix expectedMatrix = aztec.getMatrix();\n-      assertEquals(matrix, expectedMatrix);\n-    }\n+    testWriter(\"\\u20AC 1 sample data.\", \"ISO-8859-1\", 25, true, 2);\n+    testWriter(\"\\u20AC 1 sample data.\", \"ISO-8859-15\", 25, true, 2);\n+    testWriter(\"\\u20AC 1 sample data.\", \"UTF-8\", 25, true, 2);\n+    testWriter(\"\\u20AC 1 sample data.\", \"UTF-8\", 100, true, 3);\n+    testWriter(\"\\u20AC 1 sample data.\", \"UTF-8\", 300, true, 4);\n+    testWriter(\"\\u20AC 1 sample data.\", \"UTF-8\", 500, false, 5);\n+    // Test AztecWriter defaults\n+    String data = \"In ut magna vel mauris malesuada\";\n+    AztecWriter writer = new AztecWriter();\n+    BitMatrix matrix = writer.encode(data, BarcodeFormat.AZTEC, 0, 0);\n+    AztecCode aztec = Encoder.encode(data.getBytes(StandardCharsets.ISO_8859_1),\n+        Encoder.DEFAULT_EC_PERCENT, Encoder.DEFAULT_AZTEC_LAYERS);\n+    BitMatrix expectedMatrix = aztec.getMatrix();\n+    assertEquals(matrix, expectedMatrix);\n   }\n-  \n+\n   // synthetic tests (encode-decode round-trip)\n \n   @Test\n   public void testEncodeDecode1() throws Exception {\n     testEncodeDecode(\"Abc123!\", true, 1);\n   }\n-  \n+\n   @Test\n   public void testEncodeDecode2() throws Exception {\n     testEncodeDecode(\"Lorem ipsum. http://test/\", true, 2);\n   }\n-  \n+\n   @Test\n   public void testEncodeDecode3() throws Exception {\n     testEncodeDecode(\"AAAANAAAANAAAANAAAANAAAANAAAANAAAANAAAANAAAANAAAAN\", true, 3);\n   }\n-  \n+\n   @Test\n   public void testEncodeDecode4() throws Exception {\n     testEncodeDecode(\"http://test/~!@#*^%&)__ ;:'\\\"[]{}\\\\|-+-=`1029384\", true, 4);\n   }\n-  \n+\n   @Test\n   public void testEncodeDecode5() throws Exception {\n     testEncodeDecode(\"http://test/~!@#*^%&)__ ;:'\\\"[]{}\\\\|-+-=`1029384756<>/?abc\"\n         + \"Four score and seven our forefathers brought forth\", false, 5);\n   }\n-  \n+\n   @Test\n   public void testEncodeDecode10() throws Exception {\n     testEncodeDecode(\"In ut magna vel mauris malesuada dictum. Nulla ullamcorper metus quis diam\" +\n@@ -183,7 +181,7 @@ public void testEncodeDecode10() throws Exception {\n         \" ultrices, elit pellentesque aliquet laoreet, justo erat pulvinar nisi, id\" +\n         \" elementum sapien dolor et diam.\", false, 10);\n   }\n-  \n+\n   @Test\n   public void testEncodeDecode23() throws Exception {\n     testEncodeDecode(\"In ut magna vel mauris malesuada dictum. Nulla ullamcorper metus quis diam\" +\n@@ -307,7 +305,7 @@ public void testHighLevelEncode() {\n             + \"Ygh6utAIgLl1aBVM4EOTQtMQQYH9M2Z3Dp4qnA/fwWuQ+M8L3V8U=\",\n         823);\n   }\n-  \n+\n   @Test\n   public void testHighLevelEncodeBinary() {\n     // binary short form single byte\n@@ -486,7 +484,7 @@ private static void testEncodeDecode(String data, boolean compact, int layers) t\n     assertEquals(\"Unexpected symbol format (compact)\", compact, aztec.isCompact());\n     assertEquals(\"Unexpected nr. of layers\", layers, aztec.getLayers());\n     BitMatrix matrix = aztec.getMatrix();\n-    AztecDetectorResult r = \n+    AztecDetectorResult r =\n         new AztecDetectorResult(matrix, NO_POINTS, aztec.isCompact(), aztec.getCodeWords(), aztec.getLayers());\n     DecoderResult res = new Decoder().decode(r);\n     assertEquals(data, res.getText());\n@@ -501,10 +499,10 @@ private static void testEncodeDecode(String data, boolean compact, int layers) t\n     assertEquals(data, res.getText());\n   }\n \n-  private static void testWriter(String data, \n-                                 String charset, \n-                                 int eccPercent, \n-                                 boolean compact, \n+  private static void testWriter(String data,\n+                                 String charset,\n+                                 int eccPercent,\n+                                 boolean compact,\n                                  int layers) throws FormatException {\n     // 1. Perform an encode-decode round-trip because it can be lossy.\n     // 2. Aztec Decoder currently always decodes the data with a LATIN-1 charset:\n@@ -520,7 +518,7 @@ private static void testWriter(String data,\n     assertEquals(\"Unexpected nr. of layers\", layers, aztec.getLayers());\n     BitMatrix matrix2 = aztec.getMatrix();\n     assertEquals(matrix, matrix2);\n-    AztecDetectorResult r = \n+    AztecDetectorResult r =\n         new AztecDetectorResult(matrix, NO_POINTS, aztec.isCompact(), aztec.getCodeWords(), aztec.getLayers());\n     DecoderResult res = new Decoder().decode(r);\n     assertEquals(expectedData, res.getText());\n@@ -554,7 +552,7 @@ private static void testModeMessage(boolean compact, int layers, int words, Stri\n   private static void testStuffBits(int wordSize, String bits, String expected) {\n     BitArray in = toBitArray(bits);\n     BitArray stuffed = Encoder.stuffBits(in, wordSize);\n-    assertEquals(\"stuffBits() failed for input string: \" + bits, \n+    assertEquals(\"stuffBits() failed for input string: \" + bits,\n                  stripSpace(expected), stripSpace(stuffed.toString()));\n   }\n \n@@ -585,7 +583,7 @@ private static void testHighLevelEncodeString(String s, String expectedBits) {\n   private static void testHighLevelEncodeString(String s, int expectedReceivedBits) {\n     BitArray bits = new HighLevelEncoder(s.getBytes(StandardCharsets.ISO_8859_1)).encode();\n     int receivedBitCount = stripSpace(bits.toString()).length();\n-    assertEquals(\"highLevelEncode() failed for input string: \" + s, \n+    assertEquals(\"highLevelEncode() failed for input string: \" + s,\n                  expectedReceivedBits, receivedBitCount);\n     assertEquals(s, Decoder.highLevelDecode(toBooleanArray(bits)));\n   }",
      "parent_sha": "4d94ac22eb8cc7b0b5ec8176aab6b40db27e8db5"
    }
  },
  {
    "oid": "249d043f91f02048c04eaa7f6decb2b488ab3798",
    "message": "Update BufferedImageLuminanceSource.java",
    "date": "2015-10-01T16:25:39Z",
    "url": "https://github.com/zxing/zxing/commit/249d043f91f02048c04eaa7f6decb2b488ab3798",
    "details": {
      "sha": "6fd5f38be384d8b723250b33e0fabc5809447b3e",
      "filename": "javase/src/main/java/com/google/zxing/client/j2se/BufferedImageLuminanceSource.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/zxing/zxing/blob/249d043f91f02048c04eaa7f6decb2b488ab3798/javase%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FBufferedImageLuminanceSource.java",
      "raw_url": "https://github.com/zxing/zxing/raw/249d043f91f02048c04eaa7f6decb2b488ab3798/javase%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FBufferedImageLuminanceSource.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/javase%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fclient%2Fj2se%2FBufferedImageLuminanceSource.java?ref=249d043f91f02048c04eaa7f6decb2b488ab3798",
      "patch": "@@ -69,13 +69,15 @@ public BufferedImageLuminanceSource(BufferedImage image, int left, int top, int\n           if ((pixel & 0xFF000000) == 0) {\n             pixel = 0xFFFFFFFF; // = white\n           }\n-\n-          // .299R + 0.587G + 0.114B (YUV/YIQ for PAL and NTSC)\n+          \n+          // .299R + 0.587G + 0.114B (YUV/YIQ for PAL and NTSC), \n+          // (306*R) >> 10 is approximately equal to R*0.299, and so on.\n+          // 0x200 >> 10 is 0.5, it implements rounding.\n           buffer[x] =\n               (306 * ((pixel >> 16) & 0xFF) +\n                601 * ((pixel >> 8) & 0xFF) +\n-               117 * (pixel & 0xFF) \n-               ) >> 10;\n+               117 * (pixel & 0xFF) +\n+               0x200) >> 10;\n         }\n         raster.setPixels(left, y, width, 1, buffer);\n       }",
      "parent_sha": "a2159ed0f4d0a2860692f733eca1eaab3eb325da"
    }
  },
  {
    "oid": "be2c5bdd883f9f42e794e4b0e7e1b30f436fc0a7",
    "message": "Fix for https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=38913",
    "date": "2021-09-18T02:46:37Z",
    "url": "https://github.com/zxing/zxing/commit/be2c5bdd883f9f42e794e4b0e7e1b30f436fc0a7",
    "details": {
      "sha": "25934565769ea9d4355f39e5bf26d136691c3a88",
      "filename": "core/src/main/java/com/google/zxing/common/reedsolomon/ReedSolomonDecoder.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/zxing/zxing/blob/be2c5bdd883f9f42e794e4b0e7e1b30f436fc0a7/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2Freedsolomon%2FReedSolomonDecoder.java",
      "raw_url": "https://github.com/zxing/zxing/raw/be2c5bdd883f9f42e794e4b0e7e1b30f436fc0a7/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2Freedsolomon%2FReedSolomonDecoder.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fzxing%2Fcommon%2Freedsolomon%2FReedSolomonDecoder.java?ref=be2c5bdd883f9f42e794e4b0e7e1b30f436fc0a7",
      "patch": "@@ -100,7 +100,7 @@ private GenericGFPoly[] runEuclideanAlgorithm(GenericGFPoly a, GenericGFPoly b,\n     GenericGFPoly t = field.getOne();\n \n     // Run Euclidean algorithm until r's degree is less than R/2\n-    while (r.getDegree() >= R / 2) {\n+    while (2 * r.getDegree() >= R) {\n       GenericGFPoly rLastLast = rLast;\n       GenericGFPoly tLastLast = tLast;\n       rLast = r;\n@@ -125,7 +125,8 @@ private GenericGFPoly[] runEuclideanAlgorithm(GenericGFPoly a, GenericGFPoly b,\n       t = q.multiply(tLast).addOrSubtract(tLastLast);\n \n       if (r.getDegree() >= rLast.getDegree()) {\n-        throw new IllegalStateException(\"Division algorithm failed to reduce polynomial?\");\n+        throw new IllegalStateException(\"Division algorithm failed to reduce polynomial? \" +\n+          \"r: \" + r + \", rLast: \" + rLast);\n       }\n     }\n ",
      "parent_sha": "c6a4e0fa97da88f586fa91baeae472f7f45dffae"
    }
  },
  {
    "oid": "57c5bc3b8e85d2e0aaafc420fcc2d5919b52b88c",
    "message": "Minor improvements\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@47 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2007-11-16T16:56:03Z",
    "url": "https://github.com/zxing/zxing/commit/57c5bc3b8e85d2e0aaafc420fcc2d5919b52b88c",
    "details": {
      "sha": "a834f06c64a9d58d5e1fda9730ef9490319e0c02",
      "filename": "core/src/com/google/zxing/qrcode/detector/FinderPatternFinder.java",
      "status": "modified",
      "additions": 16,
      "deletions": 20,
      "changes": 36,
      "blob_url": "https://github.com/zxing/zxing/blob/57c5bc3b8e85d2e0aaafc420fcc2d5919b52b88c/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdetector%2FFinderPatternFinder.java",
      "raw_url": "https://github.com/zxing/zxing/raw/57c5bc3b8e85d2e0aaafc420fcc2d5919b52b88c/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdetector%2FFinderPatternFinder.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fqrcode%2Fdetector%2FFinderPatternFinder.java?ref=57c5bc3b8e85d2e0aaafc420fcc2d5919b52b88c",
      "patch": "@@ -49,7 +49,7 @@ final class FinderPatternFinder {\n    */\r\n   FinderPatternFinder(MonochromeBitmapSource image) {\r\n     this.image = image;\r\n-    this.possibleCenters = new Vector(5);\r\n+    this.possibleCenters = new Vector();\r\n   }\r\n \r\n   FinderPatternInfo find() throws ReaderException {\r\n@@ -437,12 +437,11 @@ private FinderPattern[] selectBestPatterns() throws ReaderException {\n \r\n     if (size == 3) {\r\n       // Found just enough -- hope these are good!\r\n-      // toArray() is not available\r\n-      FinderPattern[] result = new FinderPattern[possibleCenters.size()];\r\n-      for (int i = 0; i < possibleCenters.size(); i++) {\r\n-        result[i] = (FinderPattern) possibleCenters.elementAt(i);\r\n-      }\r\n-      return result;\r\n+      return new FinderPattern[] {\r\n+        (FinderPattern) possibleCenters.elementAt(0),\r\n+        (FinderPattern) possibleCenters.elementAt(1),\r\n+        (FinderPattern) possibleCenters.elementAt(2) \r\n+      };\r\n     }\r\n \r\n     possibleCenters.setSize(size);\r\n@@ -459,11 +458,11 @@ private FinderPattern[] selectBestPatterns() throws ReaderException {\n     // We don't have java.util.Collections in J2ME\r\n     Collections.insertionSort(possibleCenters, new ClosestToAverageComparator(averageModuleSize));\r\n \r\n-    FinderPattern[] result = new FinderPattern[3];\r\n-    for (int i = 0; i < 3; i++) {\r\n-      result[i] = (FinderPattern) possibleCenters.elementAt(i);\r\n-    }\r\n-    return result;\r\n+    return new FinderPattern[] {\r\n+      (FinderPattern) possibleCenters.elementAt(0),\r\n+      (FinderPattern) possibleCenters.elementAt(1),\r\n+      (FinderPattern) possibleCenters.elementAt(2)\r\n+    };\r\n   }\r\n \r\n   /**\r\n@@ -511,7 +510,7 @@ private static FinderPattern[] orderBestPatterns(FinderPattern[] patterns) {\n       bottomLeft = temp;\r\n     }\r\n \r\n-    return new FinderPattern[]{bottomLeft, topLeft, topRight};\r\n+    return new FinderPattern[] {bottomLeft, topLeft, topRight};\r\n   }\r\n \r\n   /**\r\n@@ -536,17 +535,14 @@ public int compare(Object center1, Object center2) {\n    * <p>Orders by variance from average module size, ascending.</p>\r\n    */\r\n   private static class ClosestToAverageComparator implements Comparator {\r\n-    private float averageModuleSize;\r\n-\r\n+    private final float averageModuleSize;\r\n     private ClosestToAverageComparator(float averageModuleSize) {\r\n       this.averageModuleSize = averageModuleSize;\r\n     }\r\n-\r\n     public int compare(Object center1, Object center2) {\r\n-      return\r\n-          Math.abs(((FinderPattern) center1).getEstimatedModuleSize() - averageModuleSize) <\r\n-              Math.abs(((FinderPattern) center2).getEstimatedModuleSize() - averageModuleSize) ?\r\n-              -1 :\r\n+      return Math.abs(((FinderPattern) center1).getEstimatedModuleSize() - averageModuleSize) <\r\n+             Math.abs(((FinderPattern) center2).getEstimatedModuleSize() - averageModuleSize) ?\r\n+             -1 :\r\n               1;\r\n     }\r\n   }\r",
      "parent_sha": "7ab9de8fd88e1be28d77ce5e2579c6812726954a"
    }
  },
  {
    "oid": "825d99786da62c44999ac01bbd9704e8341a1a00",
    "message": "Off by one error in last change\n\ngit-svn-id: https://zxing.googlecode.com/svn/trunk@949 59b500cc-1b3d-0410-9834-0bbf25fbcc57",
    "date": "2009-05-22T08:19:11Z",
    "url": "https://github.com/zxing/zxing/commit/825d99786da62c44999ac01bbd9704e8341a1a00",
    "details": {
      "sha": "8e3e7504d22225662a5e79d42b1bfaa097e22838",
      "filename": "core/src/com/google/zxing/multi/GenericMultipleBarcodeReader.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/zxing/zxing/blob/825d99786da62c44999ac01bbd9704e8341a1a00/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fmulti%2FGenericMultipleBarcodeReader.java",
      "raw_url": "https://github.com/zxing/zxing/raw/825d99786da62c44999ac01bbd9704e8341a1a00/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fmulti%2FGenericMultipleBarcodeReader.java",
      "contents_url": "https://api.github.com/repos/zxing/zxing/contents/core%2Fsrc%2Fcom%2Fgoogle%2Fzxing%2Fmulti%2FGenericMultipleBarcodeReader.java?ref=825d99786da62c44999ac01bbd9704e8341a1a00",
      "patch": "@@ -108,11 +108,11 @@ private void doDecodeMultiple(MonochromeBitmapSource image,\n     }\n \n     if (minX > 0) {\n-      doDecodeMultiple(new CroppedMonochromeBitmapSource(image, 0, 0, (int) minX - 1, height),\n+      doDecodeMultiple(new CroppedMonochromeBitmapSource(image, 0, 0, (int) minX, height),\n                        hints, results, 0, 0);\n     }\n     if (minY > 0) {\n-      doDecodeMultiple(new CroppedMonochromeBitmapSource(image, 0, 0, width, (int) minY - 1),\n+      doDecodeMultiple(new CroppedMonochromeBitmapSource(image, 0, 0, width, (int) minY),\n                        hints, results, 0, 0);\n     }\n     if (maxX < width - 1) {",
      "parent_sha": "7a8635677a0200b0a9e9e3b02de7b149b5b9da60"
    }
  }
]