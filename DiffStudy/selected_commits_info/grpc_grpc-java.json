[
  {
    "oid": "31321562ee60c50dd34756b8071f21bc1723ac78",
    "message": "xds: Use Rule order instead of RuleChain (#10289)\n\nThis is now the preferred way to specify rule execution order.",
    "date": "2023-06-16T20:39:47Z",
    "url": "https://github.com/grpc/grpc-java/commit/31321562ee60c50dd34756b8071f21bc1723ac78",
    "details": {
      "sha": "16e6d22631fcd713aa44b9eea7893d5636e42692",
      "filename": "xds/src/test/java/io/grpc/xds/FakeControlPlaneXdsIntegrationTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 13,
      "changes": 17,
      "blob_url": "https://github.com/grpc/grpc-java/blob/31321562ee60c50dd34756b8071f21bc1723ac78/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FFakeControlPlaneXdsIntegrationTest.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/31321562ee60c50dd34756b8071f21bc1723ac78/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FFakeControlPlaneXdsIntegrationTest.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FFakeControlPlaneXdsIntegrationTest.java?ref=31321562ee60c50dd34756b8071f21bc1723ac78",
      "patch": "@@ -44,7 +44,6 @@\n import io.grpc.testing.protobuf.SimpleServiceGrpc;\n import org.junit.Rule;\n import org.junit.Test;\n-import org.junit.rules.RuleChain;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n@@ -71,18 +70,10 @@\n @RunWith(JUnit4.class)\n public class FakeControlPlaneXdsIntegrationTest {\n \n-  public ControlPlaneRule controlPlane;\n-  public DataPlaneRule dataPlane;\n-\n-  /**\n-   * The {@link ControlPlaneRule} should run before the {@link DataPlaneRule}.\n-   */\n-  @Rule\n-  public RuleChain ruleChain() {\n-    controlPlane = new ControlPlaneRule();\n-    dataPlane = new DataPlaneRule(controlPlane);\n-    return RuleChain.outerRule(controlPlane).around(dataPlane);\n-  }\n+  @Rule(order = 0)\n+  public ControlPlaneRule controlPlane = new ControlPlaneRule();\n+  @Rule(order = 1)\n+  public DataPlaneRule dataPlane = new DataPlaneRule(controlPlane);\n \n   @Test\n   public void pingPong() throws Exception {",
      "parent_sha": "48192db68e67f40a1f698e3f5bd63ca457398fbd"
    }
  },
  {
    "oid": "2c2d7171ec3fbed7ff19cc65271a2886817a5970",
    "message": "Assert that timeouts didn't occur in Context tests\n\nAlthough it is unlikely the awaits return false, it would be useful\ninformation to know about the failure if they did.\n\nThis should provide more clues in case the test flakes again (#1146)",
    "date": "2015-10-23T21:31:12Z",
    "url": "https://github.com/grpc/grpc-java/commit/2c2d7171ec3fbed7ff19cc65271a2886817a5970",
    "details": {
      "sha": "2aded3cdcd764d5ce51685e09de621595eff9a95",
      "filename": "core/src/test/java/io/grpc/ContextTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/grpc/grpc-java/blob/2c2d7171ec3fbed7ff19cc65271a2886817a5970/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2FContextTest.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/2c2d7171ec3fbed7ff19cc65271a2886817a5970/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2FContextTest.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2FContextTest.java?ref=2c2d7171ec3fbed7ff19cc65271a2886817a5970",
      "patch": "@@ -364,7 +364,7 @@ public void absoluteDeadlineTriggersAndPropagates() throws Exception {\n     child.addListener(cancellationListener, MoreExecutors.directExecutor());\n     assertFalse(base.isCancelled());\n     assertFalse(child.isCancelled());\n-    deadlineLatch.await(2, TimeUnit.SECONDS);\n+    assertTrue(deadlineLatch.await(2, TimeUnit.SECONDS));\n     assertTrue(base.isCancelled());\n     assertTrue(base.cause() instanceof TimeoutException);\n     assertSame(child, listenerNotifedContext);\n@@ -379,7 +379,7 @@ public void relativeDeadlineTriggersAndPropagates() throws Exception {\n     child.addListener(cancellationListener, MoreExecutors.directExecutor());\n     assertFalse(base.isCancelled());\n     assertFalse(child.isCancelled());\n-    deadlineLatch.await(2, TimeUnit.SECONDS);\n+    assertTrue(deadlineLatch.await(2, TimeUnit.SECONDS));\n     assertTrue(base.isCancelled());\n     assertTrue(base.cause() instanceof TimeoutException);\n     assertSame(child, listenerNotifedContext);\n@@ -394,15 +394,15 @@ public void innerDeadlineCompletesBeforeOuter() throws Exception {\n     child.addListener(cancellationListener, MoreExecutors.directExecutor());\n     assertFalse(base.isCancelled());\n     assertFalse(child.isCancelled());\n-    deadlineLatch.await(2, TimeUnit.SECONDS);\n+    assertTrue(deadlineLatch.await(2, TimeUnit.SECONDS));\n     assertFalse(base.isCancelled());\n     assertSame(child, listenerNotifedContext);\n     assertTrue(child.isCancelled());\n     assertTrue(child.cause() instanceof TimeoutException);\n \n     deadlineLatch = new CountDownLatch(1);\n     base.addListener(cancellationListener, MoreExecutors.directExecutor());\n-    deadlineLatch.await(2, TimeUnit.SECONDS);\n+    assertTrue(deadlineLatch.await(2, TimeUnit.SECONDS));\n     assertTrue(base.isCancelled());\n     assertTrue(base.cause() instanceof TimeoutException);\n     assertNotSame(base.cause(), child.cause());",
      "parent_sha": "579e65cb979fbdc878f04b6e88d05d1299287494"
    }
  },
  {
    "oid": "adbc3f7ab9de578c08c56ed0a2032bd92bec6951",
    "message": "doc: add flow-control example to ClientCall javadoc.\n\nResolves #1479",
    "date": "2016-06-23T17:57:18Z",
    "url": "https://github.com/grpc/grpc-java/commit/adbc3f7ab9de578c08c56ed0a2032bd92bec6951",
    "details": {
      "sha": "52f9a54ff45613fc05ea4abc40f2b69a21c1497b",
      "filename": "core/src/main/java/io/grpc/ClientCall.java",
      "status": "modified",
      "additions": 37,
      "deletions": 2,
      "changes": 39,
      "blob_url": "https://github.com/grpc/grpc-java/blob/adbc3f7ab9de578c08c56ed0a2032bd92bec6951/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FClientCall.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/adbc3f7ab9de578c08c56ed0a2032bd92bec6951/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FClientCall.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FClientCall.java?ref=adbc3f7ab9de578c08c56ed0a2032bd92bec6951",
      "patch": "@@ -63,16 +63,51 @@\n  * {@link Status#CANCELLED CANCELLED}. Otherwise, {@link Listener#onClose Listener.onClose()} is\n  * called with whatever status the RPC was finished. We ensure that at most one is called.\n  *\n- * <p>Example: A simple Unary (1 request, 1 response) RPC would look like this:\n+ * <h3>Usage examples</h3>\n+ * <h4>Simple Unary (1 request, 1 response) RPC</h4>\n  * <pre>\n- *   call = channel.newCall(method, callOptions);\n+ *   call = channel.newCall(unaryMethod, callOptions);\n  *   call.start(listener, headers);\n  *   call.sendMessage(message);\n  *   call.halfClose();\n  *   call.request(1);\n  *   // wait for listener.onMessage()\n  * </pre>\n  *\n+ * <h4>Flow-control in Streaming RPC</h4>\n+ *\n+ * <p>The following snippet demonstrates a bi-directional streaming case, where the client sends\n+ * requests produced by a fictional <code>makeNextRequest()</code> in a flow-control-compliant\n+ * manner, and notifies gRPC library to receive additional response after one is consumed by\n+ * a fictional <code>processResponse()</code>.\n+ *\n+ * <p><pre>\n+ *   call = channel.newCall(bidiStreamingMethod, callOptions);\n+ *   listener = new ClientCall.Listener&lt;FooResponse&gt;() {\n+ *     &#64;Override\n+ *     public void onMessage(FooResponse response) {\n+ *       processResponse(response);\n+ *       // Notify gRPC to receive one additional response.\n+ *       call.request(1);\n+ *     }\n+ *\n+ *     &#64;Override\n+ *     public void onReady() {\n+ *       while (call.isReady()) {\n+ *         FooRequest nextRequest = makeNextRequest();\n+ *         if (nextRequest == null) {  // No more requests to send\n+ *           call.halfClose();\n+ *           return;\n+ *         }\n+ *         call.sendMessage(makeNextRequest());\n+ *       }\n+ *     }\n+ *   }\n+ *   call.start(listener, headers);\n+ *   // Notify gRPC to receive one response. Without this line, onMessage() would never be called.\n+ *   call.request(1);\n+ * </pre>\n+ *\n  * @param <ReqT> type of message sent one or more times to the server.\n  * @param <RespT> type of message received one or more times from the server.\n  */",
      "parent_sha": "23f34be64911d268ce2f321c4bf4783961030af3"
    }
  },
  {
    "oid": "b5443833d9633d69b61cf70fa54a730d2f232338",
    "message": "Fixing build issue.",
    "date": "2015-05-07T14:50:33Z",
    "url": "https://github.com/grpc/grpc-java/commit/b5443833d9633d69b61cf70fa54a730d2f232338",
    "details": {
      "sha": "e2940e3cfcbe5460ac33d50af682b91a7445cbb0",
      "filename": "netty/src/main/java/io/grpc/transport/netty/NettyClientHandler.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/grpc/grpc-java/blob/b5443833d9633d69b61cf70fa54a730d2f232338/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftransport%2Fnetty%2FNettyClientHandler.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/b5443833d9633d69b61cf70fa54a730d2f232338/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftransport%2Fnetty%2FNettyClientHandler.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftransport%2Fnetty%2FNettyClientHandler.java?ref=b5443833d9633d69b61cf70fa54a730d2f232338",
      "patch": "@@ -35,8 +35,6 @@\n \n import com.google.common.base.Preconditions;\n \n-import com.sun.istack.internal.logging.Logger;\n-\n import io.grpc.Metadata;\n import io.grpc.Status;\n import io.grpc.transport.HttpUtil;\n@@ -58,14 +56,17 @@\n import io.netty.handler.codec.http2.Http2Stream;\n import io.netty.handler.codec.http2.Http2StreamVisitor;\n \n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n import javax.annotation.Nullable;\n \n /**\n  * Client-side Netty handler for GRPC processing. All event handlers are executed entirely within\n  * the context of the Netty Channel thread.\n  */\n class NettyClientHandler extends Http2ConnectionHandler {\n-  private static final Logger logger = Logger.getLogger(NettyClientHandler.class);\n+  private static final Logger logger = Logger.getLogger(NettyClientHandler.class.getName());\n \n   private final Http2Connection.PropertyKey streamKey;\n   private int connectionWindowSize;\n@@ -220,7 +221,7 @@ public boolean visit(Http2Stream stream) throws Http2Exception {\n   @Override\n   protected void onConnectionError(ChannelHandlerContext ctx, Throwable cause,\n       Http2Exception http2Ex) {\n-    logger.fine(\"Caught a connection error\", cause);\n+    logger.log(Level.FINE, \"Caught a connection error\", cause);\n \n     // Save the error.\n     connectionError = cause;",
      "parent_sha": "f78813e01359f09fb5179235282d41269d555d54"
    }
  },
  {
    "oid": "7faeab6b4516ce92412fd30e45ae0b0dfdace594",
    "message": "Make NanoProtoInputStream package private",
    "date": "2015-08-06T18:12:32Z",
    "url": "https://github.com/grpc/grpc-java/commit/7faeab6b4516ce92412fd30e45ae0b0dfdace594",
    "details": {
      "sha": "1188324141e43af59ad4a9228788351c51901b52",
      "filename": "protobuf-nano/src/main/java/io/grpc/protobuf/nano/NanoProtoInputStream.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/7faeab6b4516ce92412fd30e45ae0b0dfdace594/protobuf-nano%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fprotobuf%2Fnano%2FNanoProtoInputStream.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/7faeab6b4516ce92412fd30e45ae0b0dfdace594/protobuf-nano%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fprotobuf%2Fnano%2FNanoProtoInputStream.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/protobuf-nano%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fprotobuf%2Fnano%2FNanoProtoInputStream.java?ref=7faeab6b4516ce92412fd30e45ae0b0dfdace594",
      "patch": "@@ -45,7 +45,7 @@\n /**\n  * An {@link InputStream} backed by a nano proto.\n  */\n-public class NanoProtoInputStream extends InputStream implements KnownLength {\n+class NanoProtoInputStream extends InputStream implements KnownLength {\n \n   // NanoProtoInputStream is first initialized with a *message*. *partial* is initially null.\n   // Once there has been a read operation on this stream, *message* is serialized to *partial* and",
      "parent_sha": "9992156bd8925e37440bdaf891c2dfeb4617d827"
    }
  },
  {
    "oid": "18e274de658edfdc8356460860e61635bb17863a",
    "message": "xds: Synchronize access to test control plane collections (#10012)\n\nFixes #9938",
    "date": "2023-04-04T21:34:11Z",
    "url": "https://github.com/grpc/grpc-java/commit/18e274de658edfdc8356460860e61635bb17863a",
    "details": {
      "sha": "d7ac5bdd3cb90034baa41e8fc9b459439884ac2d",
      "filename": "xds/src/test/java/io/grpc/xds/XdsTestControlPlaneService.java",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/grpc/grpc-java/blob/18e274de658edfdc8356460860e61635bb17863a/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FXdsTestControlPlaneService.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/18e274de658edfdc8356460860e61635bb17863a/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FXdsTestControlPlaneService.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FXdsTestControlPlaneService.java?ref=18e274de658edfdc8356460860e61635bb17863a",
      "patch": "@@ -29,6 +29,7 @@\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -75,25 +76,24 @@ public void uncaughtException(Thread t, Throwable e) {\n       \"type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment\";\n \n   private final Map<String, HashMap<String, Message>> xdsResources = new HashMap<>();\n-  private ImmutableMap<String, HashMap<StreamObserver<DiscoveryResponse>, Set<String>>> subscribers\n+  private ImmutableMap<String, Map<StreamObserver<DiscoveryResponse>, Set<String>>> subscribers\n       = ImmutableMap.of(\n-          ADS_TYPE_URL_LDS, new HashMap<StreamObserver<DiscoveryResponse>, Set<String>>(),\n-          ADS_TYPE_URL_RDS, new HashMap<StreamObserver<DiscoveryResponse>, Set<String>>(),\n-          ADS_TYPE_URL_CDS, new HashMap<StreamObserver<DiscoveryResponse>, Set<String>>(),\n-          ADS_TYPE_URL_EDS, new HashMap<StreamObserver<DiscoveryResponse>, Set<String>>()\n-          );\n+      ADS_TYPE_URL_LDS, new ConcurrentHashMap<StreamObserver<DiscoveryResponse>, Set<String>>(),\n+      ADS_TYPE_URL_RDS, new ConcurrentHashMap<StreamObserver<DiscoveryResponse>, Set<String>>(),\n+      ADS_TYPE_URL_CDS, new ConcurrentHashMap<StreamObserver<DiscoveryResponse>, Set<String>>(),\n+      ADS_TYPE_URL_EDS, new ConcurrentHashMap<StreamObserver<DiscoveryResponse>, Set<String>>());\n   private final ImmutableMap<String, AtomicInteger> xdsVersions = ImmutableMap.of(\n       ADS_TYPE_URL_LDS, new AtomicInteger(1),\n       ADS_TYPE_URL_RDS, new AtomicInteger(1),\n       ADS_TYPE_URL_CDS, new AtomicInteger(1),\n       ADS_TYPE_URL_EDS, new AtomicInteger(1)\n   );\n-  private final ImmutableMap<String, HashMap<StreamObserver<DiscoveryResponse>, AtomicInteger>>\n+  private final ImmutableMap<String, Map<StreamObserver<DiscoveryResponse>, AtomicInteger>>\n       xdsNonces = ImmutableMap.of(\n-      ADS_TYPE_URL_LDS, new HashMap<StreamObserver<DiscoveryResponse>, AtomicInteger>(),\n-      ADS_TYPE_URL_RDS, new HashMap<StreamObserver<DiscoveryResponse>, AtomicInteger>(),\n-      ADS_TYPE_URL_CDS, new HashMap<StreamObserver<DiscoveryResponse>, AtomicInteger>(),\n-      ADS_TYPE_URL_EDS, new HashMap<StreamObserver<DiscoveryResponse>, AtomicInteger>()\n+      ADS_TYPE_URL_LDS, new ConcurrentHashMap<StreamObserver<DiscoveryResponse>, AtomicInteger>(),\n+      ADS_TYPE_URL_RDS, new ConcurrentHashMap<StreamObserver<DiscoveryResponse>, AtomicInteger>(),\n+      ADS_TYPE_URL_CDS, new ConcurrentHashMap<StreamObserver<DiscoveryResponse>, AtomicInteger>(),\n+      ADS_TYPE_URL_EDS, new ConcurrentHashMap<StreamObserver<DiscoveryResponse>, AtomicInteger>()\n   );\n \n ",
      "parent_sha": "4ae7370646aedcd3a03f076d6ce01306a98c7f11"
    }
  },
  {
    "oid": "7c847acf5765dc5b35e58816a845c4091efcc756",
    "message": "core: clarify EOS dataframe error came from server",
    "date": "2016-08-26T00:59:29Z",
    "url": "https://github.com/grpc/grpc-java/commit/7c847acf5765dc5b35e58816a845c4091efcc756",
    "details": {
      "sha": "e2699caf7098a8626fd166b253e02bbd00b094d4",
      "filename": "core/src/main/java/io/grpc/internal/Http2ClientStream.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/grpc/grpc-java/blob/7c847acf5765dc5b35e58816a845c4091efcc756/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FHttp2ClientStream.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/7c847acf5765dc5b35e58816a845c4091efcc756/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FHttp2ClientStream.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FHttp2ClientStream.java?ref=7c847acf5765dc5b35e58816a845c4091efcc756",
      "patch": "@@ -137,7 +137,8 @@ protected void transportDataReceived(ReadableBuffer frame, boolean endOfStream)\n       inboundDataReceived(frame);\n       if (endOfStream) {\n         // This is a protocol violation as we expect to receive trailers.\n-        transportError = Status.INTERNAL.withDescription(\"Received EOS on DATA frame\");\n+        transportError =\n+            Status.INTERNAL.withDescription(\"Received unexpected EOS on DATA frame from server.\");\n         transportErrorMetadata = new Metadata();\n         inboundTransportError(transportError, transportErrorMetadata);\n       }",
      "parent_sha": "864158bdfb7fb62c53b003d46383552860d9984a"
    }
  },
  {
    "oid": "36349018490a2421c02fd03c69d7cc5f67d2f7bb",
    "message": "gcp-o11y: add default custom tag for metrics exporter\n\nThis PR adds a default custom tag for metrics, irrespective of custom\r\ntags being present in the observability configuration. \r\n\r\nOpenCensus by default adds a custom tag\r\n[opencenus_task](https://docs.google.com/document/d/1sWC-XD277cM0PXxAhzJKY2X0Uj2W7bVoSv-jvnA0N8Q/edit?resourcekey=0-l-wqh1fctxZXHCUrvZv2BQ#heading=h.xy85j580eik0)\r\nfor metrics which gets overriden if custom tags are set.\r\n\r\nThe unique custom tag is required to ensure the uniqueness of the\r\nTimeseries. The format of the default custom tag is:\r\n`java-{PID}@{HOSTNAME}`, if `{PID}` is not available a random number\r\nwill be used.",
    "date": "2023-03-22T23:44:58Z",
    "url": "https://github.com/grpc/grpc-java/commit/36349018490a2421c02fd03c69d7cc5f67d2f7bb",
    "details": {
      "sha": "ff5e12be399cac76a2306e905e7edc75018ad671",
      "filename": "gcp-observability/src/main/java/io/grpc/gcp/observability/GcpObservability.java",
      "status": "modified",
      "additions": 31,
      "deletions": 4,
      "changes": 35,
      "blob_url": "https://github.com/grpc/grpc-java/blob/36349018490a2421c02fd03c69d7cc5f67d2f7bb/gcp-observability%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fgcp%2Fobservability%2FGcpObservability.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/36349018490a2421c02fd03c69d7cc5f67d2f7bb/gcp-observability%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fgcp%2Fobservability%2FGcpObservability.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/gcp-observability%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fgcp%2Fobservability%2FGcpObservability.java?ref=36349018490a2421c02fd03c69d7cc5f67d2f7bb",
      "patch": "@@ -51,7 +51,12 @@\n import io.opencensus.trace.Tracing;\n import io.opencensus.trace.config.TraceConfig;\n import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.security.SecureRandom;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.Map;\n import java.util.concurrent.TimeUnit;\n import java.util.logging.Level;\n@@ -64,10 +69,13 @@ public final class GcpObservability implements AutoCloseable {\n \n   private static final Logger logger = Logger.getLogger(GcpObservability.class.getName());\n   private static final int METRICS_EXPORT_INTERVAL = 30;\n+\n+  static final String DEFAULT_METRIC_CUSTOM_TAG_KEY = \"opencensus_task\";\n   @VisibleForTesting\n   static final ImmutableSet<String> SERVICES_TO_EXCLUDE = ImmutableSet.of(\n       \"google.logging.v2.LoggingServiceV2\", \"google.monitoring.v3.MetricService\",\n       \"google.devtools.cloudtrace.v2.TraceService\");\n+\n   private static GcpObservability instance = null;\n   private final Sink sink;\n   private final ObservabilityConfig config;\n@@ -199,12 +207,17 @@ void registerStackDriverExporter(String projectId, Map<String, String> customTag\n       if (projectId != null) {\n         statsConfigurationBuilder.setProjectId(projectId);\n       }\n+      Map<LabelKey, LabelValue> constantLabels = new HashMap<>();\n+      constantLabels.put(\n+          LabelKey.create(DEFAULT_METRIC_CUSTOM_TAG_KEY, DEFAULT_METRIC_CUSTOM_TAG_KEY),\n+          LabelValue.create(generateDefaultMetricTagValue()));\n       if (customTags != null) {\n-        Map<LabelKey, LabelValue> constantLabels = customTags.entrySet().stream()\n-            .collect(Collectors.toMap(e -> LabelKey.create(e.getKey(), e.getKey()),\n-                e -> LabelValue.create(e.getValue())));\n-        statsConfigurationBuilder.setConstantLabels(constantLabels);\n+        for (Map.Entry<String, String> mapEntry : customTags.entrySet()) {\n+          constantLabels.putIfAbsent(LabelKey.create(mapEntry.getKey(), mapEntry.getKey()),\n+              LabelValue.create(mapEntry.getValue()));\n+        }\n       }\n+      statsConfigurationBuilder.setConstantLabels(constantLabels);\n       statsConfigurationBuilder.setExportInterval(Duration.create(METRICS_EXPORT_INTERVAL, 0));\n       StackdriverStatsExporter.createAndRegister(statsConfigurationBuilder.build());\n     }\n@@ -228,6 +241,20 @@ void registerStackDriverExporter(String projectId, Map<String, String> customTag\n     }\n   }\n \n+  private static String generateDefaultMetricTagValue() {\n+    final String jvmName = ManagementFactory.getRuntimeMXBean().getName();\n+    if (jvmName.indexOf('@') < 1) {\n+      String hostname = \"localhost\";\n+      try {\n+        hostname = InetAddress.getLocalHost().getHostName();\n+      } catch (UnknownHostException e) {\n+        logger.log(Level.INFO, \"Unable to get the hostname.\", e);\n+      }\n+      return \"java-\" + new SecureRandom().nextInt() + \"@\" + hostname;\n+    }\n+    return \"java-\" + jvmName;\n+  }\n+\n   private GcpObservability(\n       Sink sink,\n       ObservabilityConfig config) {",
      "parent_sha": "18a318c6c89e9fe2a4102fe79dde6e2b6b405dd5"
    }
  },
  {
    "oid": "9aa3981adad7d37d9ad631b9e4620c00c676fc94",
    "message": "netty: use varargs logger in ProtocolNegotiators",
    "date": "2019-06-27T22:59:43Z",
    "url": "https://github.com/grpc/grpc-java/commit/9aa3981adad7d37d9ad631b9e4620c00c676fc94",
    "details": {
      "sha": "ba30824e6f540da74eb8760f7ebc00c4a02db02c",
      "filename": "netty/src/main/java/io/grpc/netty/ProtocolNegotiators.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/grpc/grpc-java/blob/9aa3981adad7d37d9ad631b9e4620c00c676fc94/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FProtocolNegotiators.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/9aa3981adad7d37d9ad631b9e4620c00c676fc94/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FProtocolNegotiators.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FProtocolNegotiators.java?ref=9aa3981adad7d37d9ad631b9e4620c00c676fc94",
      "patch": "@@ -904,7 +904,7 @@ protected ProtocolNegotiationHandler(ChannelHandler next) {\n \n     @Override\n     public final void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n-      negotiationLogger(ctx).log(ChannelLogLevel.DEBUG, negotiatorName + \" started\");\n+      negotiationLogger(ctx).log(ChannelLogLevel.DEBUG, \"{0} started\", negotiatorName);\n       handlerAdded0(ctx);\n     }\n \n@@ -945,7 +945,7 @@ protected final void replaceProtocolNegotiationEvent(ProtocolNegotiationEvent pn\n \n     protected final void fireProtocolNegotiationEvent(ChannelHandlerContext ctx) {\n       checkState(pne != null, \"previous protocol negotiation event hasn't triggered\");\n-      negotiationLogger(ctx).log(ChannelLogLevel.INFO, negotiatorName + \" completed\");\n+      negotiationLogger(ctx).log(ChannelLogLevel.INFO, \"{0} completed\", negotiatorName);\n       ctx.pipeline().replace(ctx.name(), /* newName= */ null, next);\n       ctx.fireUserEventTriggered(pne);\n     }",
      "parent_sha": "023b9a3f14710a7d171957e1e45210e8524ccbed"
    }
  },
  {
    "oid": "574fbb43274546e40827ef4232a2bebba7ad57af",
    "message": "stub: Shutdown ThreadlessExecutor only if onClose() is called (#9041)\n\nIt is only safe to shutdown the executor if onClose() is called. Normal\r\nRPC completions (both success and failure) will see the future complete,\r\nso this only avoids shutting down in stranger cases like an interceptor\r\nthrowing an exception.",
    "date": "2022-04-01T15:49:34Z",
    "url": "https://github.com/grpc/grpc-java/commit/574fbb43274546e40827ef4232a2bebba7ad57af",
    "details": {
      "sha": "4fac94bfaefa7ce706285c28564d1b8ff6b408bc",
      "filename": "stub/src/main/java/io/grpc/stub/ClientCalls.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/574fbb43274546e40827ef4232a2bebba7ad57af/stub%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fstub%2FClientCalls.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/574fbb43274546e40827ef4232a2bebba7ad57af/stub%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fstub%2FClientCalls.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/stub%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fstub%2FClientCalls.java?ref=574fbb43274546e40827ef4232a2bebba7ad57af",
      "patch": "@@ -161,6 +161,7 @@ public static <ReqT, RespT> RespT blockingUnaryCall(\n           // Now wait for onClose() to be called, so interceptors can clean up\n         }\n       }\n+      executor.shutdown();\n       return getUnchecked(responseFuture);\n     } catch (RuntimeException e) {\n       // Something very bad happened. All bets are off; it may be dangerous to wait for onClose().\n@@ -169,7 +170,6 @@ public static <ReqT, RespT> RespT blockingUnaryCall(\n       // Something very bad happened. All bets are off; it may be dangerous to wait for onClose().\n       throw cancelThrow(call, e);\n     } finally {\n-      executor.shutdown();\n       if (interrupt) {\n         Thread.currentThread().interrupt();\n       }",
      "parent_sha": "71d38f5cae8e47ee396641e9c1ee4c6b774765c5"
    }
  },
  {
    "oid": "3961a923ac553be623d071902ab42a64d1233d08",
    "message": "core: Log any exception during panic because of exception\n\npanic() calls a good amount of code, so it could get another exception.\nThe SynchronizationContext is running on an arbitrary thread and we\ndon't want to propagate this secondary exception up its stack (to be\nhandled by its UncaughtExceptionHandler); it we wanted that we'd\npropagate the original exception.\n\nThis second exception will only be seen in the logs; the first exception\nwas logged and will be used to fail RPCs.\n\nAlso related to http://yaqs/8493785598685872128 and b692b9d26",
    "date": "2025-03-24T21:32:53Z",
    "url": "https://github.com/grpc/grpc-java/commit/3961a923ac553be623d071902ab42a64d1233d08",
    "details": {
      "sha": "1b51c2dbb32e220b8a27a757c729e2a2fe50a334",
      "filename": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/grpc/grpc-java/blob/3961a923ac553be623d071902ab42a64d1233d08/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FManagedChannelImpl.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/3961a923ac553be623d071902ab42a64d1233d08/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FManagedChannelImpl.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FManagedChannelImpl.java?ref=3961a923ac553be623d071902ab42a64d1233d08",
      "patch": "@@ -187,7 +187,12 @@ public void uncaughtException(Thread t, Throwable e) {\n               Level.SEVERE,\n               \"[\" + getLogId() + \"] Uncaught exception in the SynchronizationContext. Panic!\",\n               e);\n-          panic(e);\n+          try {\n+            panic(e);\n+          } catch (Throwable anotherT) {\n+            logger.log(\n+                Level.SEVERE, \"[\" + getLogId() + \"] Uncaught exception while panicking\", anotherT);\n+          }\n         }\n       });\n ",
      "parent_sha": "1958e42370d58dc313ed8810f2476ba577e8a7df"
    }
  },
  {
    "oid": "1e0928fb7927bef13e1dbc2b47ef8971d16673cb",
    "message": "api: fix javadoc of CallCredentials.applyRequestMetadata\n\nIt is the `Executor appExecutor` that should be given an asynchronous\ntask, not `CallCredentials.MetadataApplier applier`.\n\nSigned-off-by: Eng Zer Jun <engzerjun@gmail.com>",
    "date": "2024-10-17T17:13:12Z",
    "url": "https://github.com/grpc/grpc-java/commit/1e0928fb7927bef13e1dbc2b47ef8971d16673cb",
    "details": {
      "sha": "eb92a6f15fab562f6cd39417f6871a83fd9ffe2b",
      "filename": "api/src/main/java/io/grpc/CallCredentials.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/1e0928fb7927bef13e1dbc2b47ef8971d16673cb/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FCallCredentials.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/1e0928fb7927bef13e1dbc2b47ef8971d16673cb/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FCallCredentials.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FCallCredentials.java?ref=1e0928fb7927bef13e1dbc2b47ef8971d16673cb",
      "patch": "@@ -43,7 +43,7 @@ public abstract class CallCredentials {\n    * <p>It is called for each individual RPC, within the {@link Context} of the call, before the\n    * stream is about to be created on a transport. Implementations should not block in this\n    * method. If metadata is not immediately available, e.g., needs to be fetched from network, the\n-   * implementation may give the {@code applier} to an asynchronous task which will eventually call\n+   * implementation may give the {@code appExecutor} an asynchronous task which will eventually call\n    * the {@code applier}. The RPC proceeds only after the {@code applier} is called.\n    *\n    * @param requestInfo request-related information",
      "parent_sha": "23ebf364d46205bfbc1e25d7d1e57e475731ad97"
    }
  },
  {
    "oid": "40f401d0e70bd7b0ea16f6cc155a83dad19b6b25",
    "message": "api: Clarify setting safe/idempotent may change other value",
    "date": "2019-10-17T17:01:34Z",
    "url": "https://github.com/grpc/grpc-java/commit/40f401d0e70bd7b0ea16f6cc155a83dad19b6b25",
    "details": {
      "sha": "6e3c42918dbebdfd527ff385b5d2dba817072efb",
      "filename": "api/src/main/java/io/grpc/MethodDescriptor.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/grpc/grpc-java/blob/40f401d0e70bd7b0ea16f6cc155a83dad19b6b25/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FMethodDescriptor.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/40f401d0e70bd7b0ea16f6cc155a83dad19b6b25/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FMethodDescriptor.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FMethodDescriptor.java?ref=40f401d0e70bd7b0ea16f6cc155a83dad19b6b25",
      "patch": "@@ -534,7 +534,9 @@ public Builder<ReqT, RespT> setSchemaDescriptor(@Nullable Object schemaDescripto\n \n     /**\n      * Sets whether the method is idempotent.  If true, calling this method more than once doesn't\n-     * have additional side effects. If {@code false}, method is also not safe.\n+     * have additional side effects. If {@code false}, method is also not safe. Note that implies\n+     * calling {@code builder.setIdempotent(false).setIdempotent(true)} will leave {@code\n+     * isSafe() == false}.\n      *\n      * @since 1.1.0\n      */\n@@ -549,7 +551,8 @@ public Builder<ReqT, RespT> setIdempotent(boolean idempotent) {\n \n     /**\n      * Sets whether this method is safe.  If true, calling this method any number of times doesn't\n-     * have side effects. If {@code true}, method is also idempotent.\n+     * have side effects. If {@code true}, method is also idempotent. Note that implies calling\n+     * {@code builder.setSafe(true).setSafe(false)} will leave {@code isIdempotent() == true}.\n      *\n      * @since 1.1.0\n      */",
      "parent_sha": "9a34ceece681ef1b86e39ee45943da247f8e18b6"
    }
  },
  {
    "oid": "c5e59035985129e26889cfe350090d261cb894c5",
    "message": "core: add @nullable annotation\n\nSubchannel can be nullable, add annotation for consitency",
    "date": "2017-03-03T05:39:42Z",
    "url": "https://github.com/grpc/grpc-java/commit/c5e59035985129e26889cfe350090d261cb894c5",
    "details": {
      "sha": "d46d50aab255333675f45de87f1d6bbd66de8bae",
      "filename": "core/src/main/java/io/grpc/LoadBalancer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/c5e59035985129e26889cfe350090d261cb894c5/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FLoadBalancer.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/c5e59035985129e26889cfe350090d261cb894c5/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FLoadBalancer.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FLoadBalancer.java?ref=c5e59035985129e26889cfe350090d261cb894c5",
      "patch": "@@ -199,7 +199,7 @@ public static final class PickResult {\n     // subchannel being null and error being OK means RPC needs to wait\n     private final Status status;\n \n-    private PickResult(Subchannel subchannel, Status status) {\n+    private PickResult(@Nullable Subchannel subchannel, Status status) {\n       this.subchannel = subchannel;\n       this.status = Preconditions.checkNotNull(status, \"status\");\n     }",
      "parent_sha": "f2beea6e9cc288935fec7b87d0995f9a1e80a443"
    }
  },
  {
    "oid": "2ea77cce1e01c68739e68422c8ccfc4800936624",
    "message": "core: Avoid frequently computing inprocess useragent",
    "date": "2017-12-12T00:02:49Z",
    "url": "https://github.com/grpc/grpc-java/commit/2ea77cce1e01c68739e68422c8ccfc4800936624",
    "details": {
      "sha": "cc9aca2737412e3f0de1ca69a75177f9016b1f20",
      "filename": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/grpc/grpc-java/blob/2ea77cce1e01c68739e68422c8ccfc4800936624/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finprocess%2FInProcessTransport.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/2ea77cce1e01c68739e68422c8ccfc4800936624/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finprocess%2FInProcessTransport.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finprocess%2FInProcessTransport.java?ref=2ea77cce1e01c68739e68422c8ccfc4800936624",
      "patch": "@@ -87,7 +87,7 @@ final class InProcessTransport implements ServerTransport, ConnectionClientTrans\n   public InProcessTransport(String name, String authority, String userAgent) {\n     this.name = name;\n     this.authority = authority;\n-    this.userAgent = userAgent;\n+    this.userAgent = GrpcUtil.getGrpcUserAgent(\"inprocess\", userAgent);\n   }\n \n   @CheckReturnValue\n@@ -146,9 +146,7 @@ public void start(ClientStreamListener listener) {\n         }\n       };\n     }\n-    headers.put(\n-        GrpcUtil.USER_AGENT_KEY,\n-        GrpcUtil.getGrpcUserAgent(\"inprocess\", userAgent));\n+    headers.put(GrpcUtil.USER_AGENT_KEY, userAgent);\n     return new InProcessStream(method, headers, callOptions, authority).clientStream;\n   }\n ",
      "parent_sha": "11b5c1a7c116d88e657775c9d74156a962a20986"
    }
  },
  {
    "oid": "0782c0408dac8e429c8bb31ba3d0005d65728007",
    "message": "Catch Exception thrown when query NPN selected protocol on a socket that haven't started hand shake.",
    "date": "2015-05-29T15:59:05Z",
    "url": "https://github.com/grpc/grpc-java/commit/0782c0408dac8e429c8bb31ba3d0005d65728007",
    "details": {
      "sha": "f01bc0f738f311044cafbb6d0c7c0edcd32589cc",
      "filename": "okhttp/src/main/java/com/squareup/okhttp/internal/SelectedProtocolQuerier.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/grpc/grpc-java/blob/0782c0408dac8e429c8bb31ba3d0005d65728007/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2FSelectedProtocolQuerier.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/0782c0408dac8e429c8bb31ba3d0005d65728007/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2FSelectedProtocolQuerier.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsquareup%2Fokhttp%2Finternal%2FSelectedProtocolQuerier.java?ref=0782c0408dac8e429c8bb31ba3d0005d65728007",
      "patch": "@@ -57,7 +57,13 @@ public static String getSelectedProtocol(SSLSocket socket) {\n       // exception.\n     }\n     if (protocol == null && android && GET_NPN_SELECTED_PROTOCOL.isSupported(socket)) {\n-      byte[] result = (byte[]) GET_NPN_SELECTED_PROTOCOL.invokeWithoutCheckedException(socket);\n+      byte[] result = null;\n+      try {\n+        result = (byte[]) GET_NPN_SELECTED_PROTOCOL.invokeWithoutCheckedException(socket);\n+      } catch (Exception e) {\n+        // In some implementations, querying selected protocol before the handshake will fail with\n+        // exception.\n+      }\n       if (result != null) {\n         protocol = new String(result, Util.UTF_8);\n       }",
      "parent_sha": "ac4952c45aa4253c3cf465561e5a30ebae2f360d"
    }
  },
  {
    "oid": "9d214637e6e52f7e21f9f96a0fbd825647d32610",
    "message": "Temporally support Http protocol name \"h2-16\" for OkHttp client.\n\nFixes #22 for real.\n\nManually tested with jdk8 by:\n./run-test-server.sh\n./run-test-client.sh --server_host_override=foo.test.google.fr --use_test_ca=true --use_okhttp=true",
    "date": "2015-04-09T05:50:18Z",
    "url": "https://github.com/grpc/grpc-java/commit/9d214637e6e52f7e21f9f96a0fbd825647d32610",
    "details": {
      "sha": "d982b09872f99a8b125709cf17aeec82d695713f",
      "filename": "netty/src/main/java/io/grpc/transport/netty/Http2Negotiator.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/grpc/grpc-java/blob/9d214637e6e52f7e21f9f96a0fbd825647d32610/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftransport%2Fnetty%2FHttp2Negotiator.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/9d214637e6e52f7e21f9f96a0fbd825647d32610/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftransport%2Fnetty%2FHttp2Negotiator.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftransport%2Fnetty%2FHttp2Negotiator.java?ref=9d214637e6e52f7e21f9f96a0fbd825647d32610",
      "patch": "@@ -68,10 +68,12 @@\n  * endpoint.\n  */\n public class Http2Negotiator {\n+  // TODO(madongfly): Remove \"h2-15\" and \"h2-16\" at a right time.\n   private static final List<String> SUPPORTED_PROTOCOLS = Collections.unmodifiableList(\n       Arrays.asList(\n           Http2OrHttpChooser.SelectedProtocol.HTTP_2.protocolName(),\n-          \"h2-15\"));\n+          \"h2-15\",\n+          \"h2-16\"));\n \n   // Prefer ALPN to NPN so try it first.\n   private static final String[] JETTY_TLS_NEGOTIATION_IMPL =",
      "parent_sha": "775829a1b20bf27024c45e41f2d5a627c58d9a51"
    }
  },
  {
    "oid": "96a5c25056662985b83b0b078e4811b8774b3321",
    "message": "rls: fix routeLookupClient may be null in RlsLoadBalancer.requestConnection() (#8379)",
    "date": "2021-08-10T03:22:44Z",
    "url": "https://github.com/grpc/grpc-java/commit/96a5c25056662985b83b0b078e4811b8774b3321",
    "details": {
      "sha": "289098e2554a5b6acccfcca69b73e368599f529b",
      "filename": "rls/src/main/java/io/grpc/rls/RlsLoadBalancer.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/grpc/grpc-java/blob/96a5c25056662985b83b0b078e4811b8774b3321/rls%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Frls%2FRlsLoadBalancer.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/96a5c25056662985b83b0b078e4811b8774b3321/rls%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Frls%2FRlsLoadBalancer.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/rls%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Frls%2FRlsLoadBalancer.java?ref=96a5c25056662985b83b0b078e4811b8774b3321",
      "patch": "@@ -82,7 +82,9 @@ public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n \n   @Override\n   public void requestConnection() {\n-    routeLookupClient.requestConnection();\n+    if (routeLookupClient != null) {\n+      routeLookupClient.requestConnection();\n+    }\n   }\n \n   @Override",
      "parent_sha": "51d1484c3cd057ba1b57790646e8449bda7a6c80"
    }
  },
  {
    "oid": "52a72e2dcd1b1d65a870213a0b0db9d903aea513",
    "message": "context: Cleanup ContextTest, use final, remove throws, use assertNull (#6941)\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>",
    "date": "2020-04-17T17:38:27Z",
    "url": "https://github.com/grpc/grpc-java/commit/52a72e2dcd1b1d65a870213a0b0db9d903aea513",
    "details": {
      "sha": "7efdf3f5261854f8553a899dccca74c03d3f664a",
      "filename": "context/src/test/java/io/grpc/ContextTest.java",
      "status": "modified",
      "additions": 21,
      "deletions": 20,
      "changes": 41,
      "blob_url": "https://github.com/grpc/grpc-java/blob/52a72e2dcd1b1d65a870213a0b0db9d903aea513/context%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2FContextTest.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/52a72e2dcd1b1d65a870213a0b0db9d903aea513/context%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2FContextTest.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/context%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2FContextTest.java?ref=52a72e2dcd1b1d65a870213a0b0db9d903aea513",
      "patch": "@@ -71,30 +71,31 @@ public class ContextTest {\n \n   private Context listenerNotifedContext;\n   private CountDownLatch deadlineLatch = new CountDownLatch(1);\n-  private Context.CancellationListener cancellationListener = new Context.CancellationListener() {\n-    @Override\n-    public void cancelled(Context context) {\n-      listenerNotifedContext = context;\n-      deadlineLatch.countDown();\n-    }\n-  };\n+  private final Context.CancellationListener cancellationListener =\n+      new Context.CancellationListener() {\n+        @Override\n+        public void cancelled(Context context) {\n+          listenerNotifedContext = context;\n+          deadlineLatch.countDown();\n+        }\n+      };\n \n   private Context observed;\n-  private Runnable runner = new Runnable() {\n+  private final Runnable runner = new Runnable() {\n     @Override\n     public void run() {\n       observed = Context.current();\n     }\n   };\n-  private ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();\n+  private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();\n \n   @Before\n-  public void setUp() throws Exception {\n+  public void setUp() {\n     Context.ROOT.attach();\n   }\n \n   @After\n-  public void tearDown() throws Exception {\n+  public void tearDown()  {\n     scheduler.shutdown();\n     assertEquals(Context.ROOT, Context.current());\n   }\n@@ -450,7 +451,7 @@ public void nonCascadingCancellationDoesNotNotifyForked() {\n   }\n \n   @Test\n-  public void testWrapRunnable() throws Exception {\n+  public void testWrapRunnable() {\n     Context base = Context.current().withValue(PET, \"cat\");\n     Context current = Context.current().withValue(PET, \"fish\");\n     current.attach();\n@@ -521,7 +522,7 @@ public Object call() {\n   }\n \n   @Test\n-  public void currentContextExecutor() throws Exception {\n+  public void currentContextExecutor() {\n     QueuedExecutor queuedExecutor = new QueuedExecutor();\n     Executor executor = Context.currentContextExecutor(queuedExecutor);\n     Context base = Context.current().withValue(PET, \"cat\");\n@@ -537,7 +538,7 @@ public void currentContextExecutor() throws Exception {\n   }\n \n   @Test\n-  public void fixedContextExecutor() throws Exception {\n+  public void fixedContextExecutor() {\n     Context base = Context.current().withValue(PET, \"cat\");\n     QueuedExecutor queuedExecutor = new QueuedExecutor();\n     base.fixedContextExecutor(queuedExecutor).execute(runner);\n@@ -547,7 +548,7 @@ public void fixedContextExecutor() throws Exception {\n   }\n \n   @Test\n-  public void typicalTryFinallyHandling() throws Exception {\n+  public void typicalTryFinallyHandling() {\n     Context base = Context.current().withValue(COLOR, \"blue\");\n     Context previous = base.attach();\n     try {\n@@ -560,7 +561,7 @@ public void typicalTryFinallyHandling() throws Exception {\n   }\n \n   @Test\n-  public void typicalCancellableTryCatchFinallyHandling() throws Exception {\n+  public void typicalCancellableTryCatchFinallyHandling() {\n     Context.CancellableContext base = Context.current().withCancellation();\n     Context previous = base.attach();\n     try {\n@@ -830,7 +831,7 @@ public String call() {\n                 return COLOR.get();\n               }\n             });\n-        assertEquals(null, workerThreadVal.get());\n+        assertNull(workerThreadVal.get());\n \n         assertEquals(\"blue\", COLOR.get());\n         return null;\n@@ -890,11 +891,11 @@ public Context current() {\n \n   @Test\n   public void cancellableAncestorTest() {\n-    assertEquals(null, cancellableAncestor(null));\n+    assertNull(cancellableAncestor(null));\n \n     Context c = Context.current();\n     assertFalse(c.canBeCancelled());\n-    assertEquals(null, cancellableAncestor(c));\n+    assertNull(cancellableAncestor(c));\n \n     Context.CancellableContext withCancellation = c.withCancellation();\n     assertEquals(withCancellation, cancellableAncestor(withCancellation));\n@@ -935,7 +936,7 @@ public void cancellableAncestorFork() {\n   }\n \n   @Test\n-  public void cancellableContext_closeCancelsWithNullCause() throws Exception {\n+  public void cancellableContext_closeCancelsWithNullCause() {\n     Context.CancellableContext cancellable = Context.current().withCancellation();\n     cancellable.close();\n     assertTrue(cancellable.isCancelled());",
      "parent_sha": "54d7e6ba65da6b4e63995d8375ff123ef6e8a117"
    }
  },
  {
    "oid": "ce349ae7ef82792a16870fc99a1988fab05f5851",
    "message": "core: make MethodDescriptor.Builder non experimental",
    "date": "2017-04-11T20:20:12Z",
    "url": "https://github.com/grpc/grpc-java/commit/ce349ae7ef82792a16870fc99a1988fab05f5851",
    "details": {
      "sha": "214a2e44aa5a5313fcdff60be29f0a25285de502",
      "filename": "core/src/main/java/io/grpc/MethodDescriptor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/grpc/grpc-java/blob/ce349ae7ef82792a16870fc99a1988fab05f5851/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FMethodDescriptor.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/ce349ae7ef82792a16870fc99a1988fab05f5851/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FMethodDescriptor.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FMethodDescriptor.java?ref=ce349ae7ef82792a16870fc99a1988fab05f5851",
      "patch": "@@ -381,7 +381,6 @@ public static String extractFullServiceName(String fullMethodName) {\n    * @since 1.1.0\n    */\n   @CheckReturnValue\n-  @ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/2641\")\n   public static <ReqT, RespT> Builder<ReqT, RespT> newBuilder() {\n     return newBuilder(null, null);\n   }\n@@ -392,7 +391,6 @@ public static <ReqT, RespT> Builder<ReqT, RespT> newBuilder() {\n    * @since 1.1.0\n    */\n   @CheckReturnValue\n-  @ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/2641\")\n   public static <ReqT, RespT> Builder<ReqT, RespT> newBuilder(\n       Marshaller<ReqT> requestMarshaller, Marshaller<RespT> responseMarshaller) {\n     return new Builder<ReqT, RespT>()\n@@ -406,7 +404,6 @@ public static <ReqT, RespT> Builder<ReqT, RespT> newBuilder(\n    * @since 1.1.0\n    */\n   @CheckReturnValue\n-  @ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/2641\")\n   public Builder<ReqT, RespT> toBuilder() {\n     return toBuilder(requestMarshaller, responseMarshaller);\n   }\n@@ -417,7 +414,6 @@ public Builder<ReqT, RespT> toBuilder() {\n    * @since 1.1.0\n    */\n   @CheckReturnValue\n-  @ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/2641\")\n   public <NewReqT, NewRespT> Builder<NewReqT, NewRespT> toBuilder(\n       Marshaller<NewReqT> requestMarshaller, Marshaller<NewRespT> responseMarshaller) {\n     return MethodDescriptor.<NewReqT, NewRespT>newBuilder()\n@@ -434,7 +430,6 @@ public <NewReqT, NewRespT> Builder<NewReqT, NewRespT> toBuilder(\n    *\n    * @since 1.1.0\n    */\n-  @ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/2641\")\n   public static final class Builder<ReqT, RespT> {\n \n     private Marshaller<ReqT> requestMarshaller;\n@@ -497,6 +492,7 @@ public Builder<ReqT, RespT> setFullMethodName(String fullMethodName) {\n      *\n      * @since 1.1.0\n      */\n+    @ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/1775\")\n     public Builder<ReqT, RespT> setIdempotent(boolean idempotent) {\n       this.idempotent = idempotent;\n       return this;\n@@ -508,6 +504,7 @@ public Builder<ReqT, RespT> setIdempotent(boolean idempotent) {\n      *\n      * @since 1.1.0\n      */\n+    @ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/1775\")\n     public Builder<ReqT, RespT> setSafe(boolean safe) {\n       this.safe = safe;\n       return this;",
      "parent_sha": "c8dff0d974631822978a7d637c6941ed9545ddd2"
    }
  },
  {
    "oid": "27a3d8e278f7a258bff271d3b0bdb61b3b8c9e38",
    "message": "Eliminate validation so that code path is more heavily exercised (#11005)\n\n* Eliminate validation so that code path is more heavily exercised",
    "date": "2024-03-12T20:41:03Z",
    "url": "https://github.com/grpc/grpc-java/commit/27a3d8e278f7a258bff271d3b0bdb61b3b8c9e38",
    "details": {
      "sha": "3b222eaa1fc345f3970884cd12d39825ce536361",
      "filename": "core/src/main/java/io/grpc/internal/PickFirstLeafLoadBalancer.java",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/grpc/grpc-java/blob/27a3d8e278f7a258bff271d3b0bdb61b3b8c9e38/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FPickFirstLeafLoadBalancer.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/27a3d8e278f7a258bff271d3b0bdb61b3b8c9e38/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FPickFirstLeafLoadBalancer.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FPickFirstLeafLoadBalancer.java?ref=27a3d8e278f7a258bff271d3b0bdb61b3b8c9e38",
      "patch": "@@ -131,14 +131,10 @@ public Status acceptResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n       // If the previous ready subchannel exists in new address list,\n       // keep this connection and don't create new subchannels\n       SocketAddress previousAddress = addressIndex.getCurrentAddress();\n-      Attributes prevEagAttrs = addressIndex.getCurrentEagAttributes();\n       addressIndex.updateGroups(newImmutableAddressGroups);\n       if (addressIndex.seekTo(previousAddress)) {\n-        if (!addressIndex.getCurrentEagAttributes().equals(prevEagAttrs)) {\n-          log.log(Level.FINE, \"EAG attributes changed, need to update subchannel\");\n-          SubchannelData subchannelData = subchannels.get(previousAddress);\n-          subchannelData.getSubchannel().updateAddresses(addressIndex.getCurrentEagAsList());\n-        }\n+        SubchannelData subchannelData = subchannels.get(previousAddress);\n+        subchannelData.getSubchannel().updateAddresses(addressIndex.getCurrentEagAsList());\n         return Status.OK;\n       } else {\n         addressIndex.reset(); // Previous ready subchannel not in the new list of addresses",
      "parent_sha": "b3475a0e4625d518434f7d89eae7965a44a427cf"
    }
  },
  {
    "oid": "3462eb0e7288952afa4e297b7822617223be07d5",
    "message": "Handle OkHttp throwing exception during start()\n\nIdeally OKHttp wouldn't do blocking I/O during start(), but it does and\nfixing it is non-trivial. OkHttp can either throw an exception when it\nencounters an error during start or it can shut itself down. Both\nrequire changes in ChannelImpl, so we just choose to keep OkHttp's\ncurrent behavior and deal with it in ChannelImpl.",
    "date": "2015-05-08T01:52:21Z",
    "url": "https://github.com/grpc/grpc-java/commit/3462eb0e7288952afa4e297b7822617223be07d5",
    "details": {
      "sha": "38c4180eee9c694f534c6ef79393e6361e2fbe1e",
      "filename": "core/src/main/java/io/grpc/ChannelImpl.java",
      "status": "modified",
      "additions": 18,
      "deletions": 2,
      "changes": 20,
      "blob_url": "https://github.com/grpc/grpc-java/blob/3462eb0e7288952afa4e297b7822617223be07d5/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FChannelImpl.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/3462eb0e7288952afa4e297b7822617223be07d5/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FChannelImpl.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FChannelImpl.java?ref=3462eb0e7288952afa4e297b7822617223be07d5",
      "patch": "@@ -191,9 +191,17 @@ private synchronized ClientTransport obtainActiveTransport() {\n     if (activeTransport != null) {\n       return activeTransport;\n     }\n+    // Set activeTransport and add to transports before start() in case start() calls\n+    // transportShutdown() and transportTerminated()\n     activeTransport = transportFactory.newClientTransport();\n     transports.add(activeTransport);\n-    activeTransport.start(new TransportListener(activeTransport));\n+    try {\n+      activeTransport.start(new TransportListener(activeTransport));\n+    } catch (RuntimeException ex) {\n+      transports.remove(activeTransport);\n+      activeTransport = null;\n+      throw ex;\n+    }\n     return activeTransport;\n   }\n \n@@ -253,7 +261,15 @@ public CallImpl(MethodDescriptor<ReqT, RespT> method, SerializingExecutor execut\n     public void start(Listener<RespT> observer, Metadata.Headers headers) {\n       Preconditions.checkState(stream == null, \"Already started\");\n       ClientStreamListener listener = new ClientStreamListenerImpl(observer);\n-      ClientTransport transport = obtainActiveTransport();\n+      ClientTransport transport;\n+      try {\n+        transport = obtainActiveTransport();\n+      } catch (RuntimeException ex) {\n+        stream = new NoopClientStream();\n+        listener.closed(Status.INTERNAL.withDescription(\"Failed starting transport\").withCause(ex),\n+            new Metadata.Trailers());\n+        return;\n+      }\n       if (transport == null) {\n         stream = new NoopClientStream();\n         listener.closed(Status.CANCELLED.withDescription(\"Channel is shutdown\"),",
      "parent_sha": "4e82a1131199e101ff9f42810f64c00f83391a13"
    }
  },
  {
    "oid": "9870db1f479380301cb68be70650f0ca34f0f83a",
    "message": "stub: Document that noop onCancelHandler is useful\n\nsetOnCancelHandler tells gRPC that the application is handling\ncancellation. But it's fine to have noop behavior within the handler\nitself if the application doesn't need it. It is just a way to opt-in to\nthe more recent no-exception-from-onNext behavior. Let's mention this\nuse-case in the docs to make it more obvious it is a possibility.\n\nCame up as part of #8409.",
    "date": "2021-09-08T23:48:20Z",
    "url": "https://github.com/grpc/grpc-java/commit/9870db1f479380301cb68be70650f0ca34f0f83a",
    "details": {
      "sha": "2ac008b269ae2edb4ee5d8171a83d4ece5f0a834",
      "filename": "stub/src/main/java/io/grpc/stub/ServerCallStreamObserver.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/grpc/grpc-java/blob/9870db1f479380301cb68be70650f0ca34f0f83a/stub%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fstub%2FServerCallStreamObserver.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/9870db1f479380301cb68be70650f0ca34f0f83a/stub%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fstub%2FServerCallStreamObserver.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/stub%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fstub%2FServerCallStreamObserver.java?ref=9870db1f479380301cb68be70650f0ca34f0f83a",
      "patch": "@@ -54,7 +54,9 @@ public abstract class ServerCallStreamObserver<V> extends CallStreamObserver<V>\n    * service returns its {@code StreamObserver}.\n    *\n    * <p>Setting the onCancelHandler will suppress the on-cancel exception thrown by\n-   * {@link #onNext}.\n+   * {@link #onNext}. If the caller is already handling cancellation via polling or cannot\n+   * substantially benefit from observing cancellation, using a no-op {@code onCancelHandler} is\n+   * useful just to suppress the {@code onNext()} exception.\n    *\n    * @param onCancelHandler to call when client has cancelled the call.\n    */",
      "parent_sha": "22603810b97ed2a3f7ff82aed1ec7fe136aea7ff"
    }
  },
  {
    "oid": "e0ee52cc223952608a0455208ad8fd0f3bc03d97",
    "message": "grpclb: fix lint warnings (#6670)",
    "date": "2020-02-03T18:34:30Z",
    "url": "https://github.com/grpc/grpc-java/commit/e0ee52cc223952608a0455208ad8fd0f3bc03d97",
    "details": {
      "sha": "a458cb87d55dff1f10cc5ce323bede8ab6ae81e2",
      "filename": "grpclb/src/main/java/io/grpc/grpclb/InternalGrpclbConstantsAccessor.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/grpc/grpc-java/blob/e0ee52cc223952608a0455208ad8fd0f3bc03d97/grpclb%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fgrpclb%2FInternalGrpclbConstantsAccessor.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/e0ee52cc223952608a0455208ad8fd0f3bc03d97/grpclb%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fgrpclb%2FInternalGrpclbConstantsAccessor.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/grpclb%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fgrpclb%2FInternalGrpclbConstantsAccessor.java?ref=e0ee52cc223952608a0455208ad8fd0f3bc03d97",
      "patch": "@@ -26,16 +26,16 @@\n  * team. If you *really* think you need to use this, contact the gRPC team first.\n  */\n @Internal\n-public class InternalGrpclbConstantsAccessor {\n+public final class InternalGrpclbConstantsAccessor {\n \n   // Prevent instantiation.\n   private InternalGrpclbConstantsAccessor() {\n   }\n \n-  public static Attributes.Key<List<EquivalentAddressGroup>> ATTR_LB_ADDRS =\n+  public static final Attributes.Key<List<EquivalentAddressGroup>> ATTR_LB_ADDRS =\n       GrpclbConstants.ATTR_LB_ADDRS;\n \n   @EquivalentAddressGroup.Attr\n-  public static Attributes.Key<String> ATTR_LB_ADDR_AUTHORITY =\n+  public static final Attributes.Key<String> ATTR_LB_ADDR_AUTHORITY =\n       GrpclbConstants.ATTR_LB_ADDR_AUTHORITY;\n }",
      "parent_sha": "295b64b5ff03cf7ec87ec86408436040fa26446d"
    }
  },
  {
    "oid": "cff8bd8d8780dc0c290fff7d8783f1d5ce6a250b",
    "message": "doc: name resolver start() should not throw (#9589)",
    "date": "2022-10-05T23:22:30Z",
    "url": "https://github.com/grpc/grpc-java/commit/cff8bd8d8780dc0c290fff7d8783f1d5ce6a250b",
    "details": {
      "sha": "cfe2e934c0f4a87e0190ebd474659c0a2338763a",
      "filename": "api/src/main/java/io/grpc/NameResolver.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/grpc/grpc-java/blob/cff8bd8d8780dc0c290fff7d8783f1d5ce6a250b/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FNameResolver.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/cff8bd8d8780dc0c290fff7d8783f1d5ce6a250b/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FNameResolver.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FNameResolver.java?ref=cff8bd8d8780dc0c290fff7d8783f1d5ce6a250b",
      "patch": "@@ -73,7 +73,9 @@ public abstract class NameResolver {\n   public abstract String getServiceAuthority();\n \n   /**\n-   * Starts the resolution.\n+   * Starts the resolution. The method is not supposed to throw any exceptions. That might cause the\n+   * Channel that the name resolver is serving to crash. Errors should be propagated\n+   * through {@link Listener#onError}.\n    *\n    * @param listener used to receive updates on the target\n    * @since 1.0.0\n@@ -97,7 +99,9 @@ public void onResult(ResolutionResult resolutionResult) {\n   }\n \n   /**\n-   * Starts the resolution.\n+   * Starts the resolution. The method is not supposed to throw any exceptions. That might cause the\n+   * Channel that the name resolver is serving to crash. Errors should be propagated\n+   * through {@link Listener2#onError}.\n    *\n    * @param listener used to receive updates on the target\n    * @since 1.21.0",
      "parent_sha": "df0a4bdc1b19b416c7c5061b4d3651171388af60"
    }
  },
  {
    "oid": "9148095df4f9d8c0af3f6e9f960bc5bc0822e119",
    "message": "netty: simplify SendGrpcFrameCommand\n\nDefaultByteBufHolder has many perfectly good implementations. It should be enought to implement the replace method.",
    "date": "2023-06-14T15:45:31Z",
    "url": "https://github.com/grpc/grpc-java/commit/9148095df4f9d8c0af3f6e9f960bc5bc0822e119",
    "details": {
      "sha": "9c2507e3686221943c8fbb0f399b9ccc96d73a65",
      "filename": "netty/src/main/java/io/grpc/netty/SendGrpcFrameCommand.java",
      "status": "modified",
      "additions": 2,
      "deletions": 31,
      "changes": 33,
      "blob_url": "https://github.com/grpc/grpc-java/blob/9148095df4f9d8c0af3f6e9f960bc5bc0822e119/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FSendGrpcFrameCommand.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/9148095df4f9d8c0af3f6e9f960bc5bc0822e119/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FSendGrpcFrameCommand.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FSendGrpcFrameCommand.java?ref=9148095df4f9d8c0af3f6e9f960bc5bc0822e119",
      "patch": "@@ -55,37 +55,8 @@ boolean endStream() {\n   }\n \n   @Override\n-  public ByteBufHolder copy() {\n-    return new SendGrpcFrameCommand(stream, content().copy(), endStream);\n-  }\n-\n-  @Override\n-  public ByteBufHolder duplicate() {\n-    return new SendGrpcFrameCommand(stream, content().duplicate(), endStream);\n-  }\n-\n-  @Override\n-  public SendGrpcFrameCommand retain() {\n-    super.retain();\n-    return this;\n-  }\n-\n-  @Override\n-  public SendGrpcFrameCommand retain(int increment) {\n-    super.retain(increment);\n-    return this;\n-  }\n-\n-  @Override\n-  public SendGrpcFrameCommand touch() {\n-    super.touch();\n-    return this;\n-  }\n-\n-  @Override\n-  public SendGrpcFrameCommand touch(Object hint) {\n-    super.touch(hint);\n-    return this;\n+  public ByteBufHolder replace(ByteBuf content) {\n+    return new SendGrpcFrameCommand(stream, content, endStream);\n   }\n \n   @Override",
      "parent_sha": "ae59afb5bf656e52f45437f25da85238ff32b0e7"
    }
  },
  {
    "oid": "0dda74dda4821f2cd0a50b0802020846f31391ff",
    "message": "core: Fix deprecation warning in RoundRobinLoadBalancerFactory",
    "date": "2018-12-05T18:03:02Z",
    "url": "https://github.com/grpc/grpc-java/commit/0dda74dda4821f2cd0a50b0802020846f31391ff",
    "details": {
      "sha": "3116aa11576918b1db942063147a4548ae5ae353",
      "filename": "core/src/main/java/io/grpc/util/RoundRobinLoadBalancerFactory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/0dda74dda4821f2cd0a50b0802020846f31391ff/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Futil%2FRoundRobinLoadBalancerFactory.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/0dda74dda4821f2cd0a50b0802020846f31391ff/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Futil%2FRoundRobinLoadBalancerFactory.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Futil%2FRoundRobinLoadBalancerFactory.java?ref=0dda74dda4821f2cd0a50b0802020846f31391ff",
      "patch": "@@ -27,7 +27,7 @@\n  * A {@link LoadBalancer} that provides round-robin load balancing mechanism over the\n  * addresses.\n  *\n- * @deprecated use {@link io.grpc.LoadBalancerRegistry#getProvider} with \"round-robin\" policy.  This\n+ * @deprecated use {@link io.grpc.LoadBalancerRegistry#getProvider} with \"round_robin\" policy.  This\n  *             class will be deleted soon.\n  */\n @ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/1771\")",
      "parent_sha": "0c95dad0daa8d4e87272b596d7431ec393870e9d"
    }
  },
  {
    "oid": "777bbbb1218c9331ff27cd802b1c8e5d5ac5d7a5",
    "message": "core: TimeProvider should not assume that the clock never changes (#4883)\n\nWe should reflect changes in the system clock.",
    "date": "2018-11-20T19:34:58Z",
    "url": "https://github.com/grpc/grpc-java/commit/777bbbb1218c9331ff27cd802b1c8e5d5ac5d7a5",
    "details": {
      "sha": "b0ea147ada11667a9fe2f677caa4f8cdcfaf7ff5",
      "filename": "core/src/main/java/io/grpc/internal/TimeProvider.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/grpc/grpc-java/blob/777bbbb1218c9331ff27cd802b1c8e5d5ac5d7a5/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FTimeProvider.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/777bbbb1218c9331ff27cd802b1c8e5d5ac5d7a5/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FTimeProvider.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FTimeProvider.java?ref=777bbbb1218c9331ff27cd802b1c8e5d5ac5d7a5",
      "patch": "@@ -27,12 +27,9 @@ public interface TimeProvider {\n   long currentTimeNanos();\n \n   TimeProvider SYSTEM_TIME_PROVIDER = new TimeProvider() {\n-    final long offsetNanos =\n-        TimeUnit.MILLISECONDS.toNanos(System.currentTimeMillis()) - System.nanoTime();\n-\n     @Override\n     public long currentTimeNanos() {\n-      return System.nanoTime() + offsetNanos;\n+      return TimeUnit.MILLISECONDS.toNanos(System.currentTimeMillis());\n     }\n   };\n }",
      "parent_sha": "6b15aa9e4e825505f91e0d3992914f09eab2df8d"
    }
  },
  {
    "oid": "495a8906b297650fe823b5711993a0e73077c335",
    "message": "xds: Fix fallback test FakeClock TSAN failure\n\nd65d3942e increased the test speed of\nconnect_then_mainServerDown_fallbackServerUp by using FakeClock.\nHowever, it introduced a data race because FakeClock is not thread-safe.\nThis change injects a single thread for gRPC callbacks such that\nsyncContext is run on a thread under the test's control.\n\nA simpler approach would be to expose syncContext from XdsClientImpl for\ntesting. However, this test is in a different package and I wanted to\navoid adding a public method.\n\n```\n  Read of size 8 at 0x00008dec9d50 by thread T25:\n    #0 io.grpc.internal.FakeClock$ScheduledExecutorImpl.schedule(Lio/grpc/internal/FakeClock$ScheduledTask;JLjava/util/concurrent/TimeUnit;)V FakeClock.java:140\n    #1 io.grpc.internal.FakeClock$ScheduledExecutorImpl.schedule(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture; FakeClock.java:150\n    #2 io.grpc.SynchronizationContext.schedule(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ScheduledExecutorService;)Lio/grpc/SynchronizationContext$ScheduledHandle; SynchronizationContext.java:153\n    #3 io.grpc.xds.client.ControlPlaneClient$AdsStream.handleRpcStreamClosed(Lio/grpc/Status;)V ControlPlaneClient.java:491\n    #4 io.grpc.xds.client.ControlPlaneClient$AdsStream.lambda$onStatusReceived$0(Lio/grpc/Status;)V ControlPlaneClient.java:429\n    #5 io.grpc.xds.client.ControlPlaneClient$AdsStream$$Lambda+0x00000001004a95d0.run()V ??\n    #6 io.grpc.SynchronizationContext.drain()V SynchronizationContext.java:96\n    #7 io.grpc.SynchronizationContext.execute(Ljava/lang/Runnable;)V SynchronizationContext.java:128\n    #8 io.grpc.xds.client.ControlPlaneClient$AdsStream.onStatusReceived(Lio/grpc/Status;)V ControlPlaneClient.java:428\n    #9 io.grpc.xds.GrpcXdsTransportFactory$EventHandlerToCallListenerAdapter.onClose(Lio/grpc/Status;Lio/grpc/Metadata;)V GrpcXdsTransportFactory.java:149\n    #10 io.grpc.PartialForwardingClientCallListener.onClose(Lio/grpc/Status;Lio/grpc/Metadata;)V PartialForwardingClientCallListener.java:39\n    ...\n\n  Previous write of size 8 at 0x00008dec9d50 by thread T4 (mutexes: write M0, write M1, write M2, write M3):\n    #0 io.grpc.internal.FakeClock.forwardTime(JLjava/util/concurrent/TimeUnit;)I FakeClock.java:368\n    #1 io.grpc.xds.XdsClientFallbackTest.connect_then_mainServerDown_fallbackServerUp()V XdsClientFallbackTest.java:358\n    ...\n```",
    "date": "2025-01-23T00:00:00Z",
    "url": "https://github.com/grpc/grpc-java/commit/495a8906b297650fe823b5711993a0e73077c335",
    "details": {
      "sha": "7cf6280711fffc12cba57cbc484130217eaa9950",
      "filename": "xds/src/test/java/io/grpc/xds/XdsClientFallbackTest.java",
      "status": "modified",
      "additions": 21,
      "deletions": 2,
      "changes": 23,
      "blob_url": "https://github.com/grpc/grpc-java/blob/495a8906b297650fe823b5711993a0e73077c335/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FXdsClientFallbackTest.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/495a8906b297650fe823b5711993a0e73077c335/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FXdsClientFallbackTest.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FXdsClientFallbackTest.java?ref=495a8906b297650fe823b5711993a0e73077c335",
      "patch": "@@ -31,6 +31,8 @@\n \n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n import io.grpc.MetricRecorder;\n import io.grpc.Status;\n import io.grpc.internal.ExponentialBackoffPolicy;\n@@ -43,11 +45,14 @@\n import io.grpc.xds.client.XdsClientImpl;\n import io.grpc.xds.client.XdsClientMetricReporter;\n import io.grpc.xds.client.XdsInitializationException;\n+import io.grpc.xds.client.XdsTransportFactory;\n import java.net.InetSocketAddress;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.Map;\n import java.util.UUID;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -338,9 +343,21 @@ private static void verifyNoSubscribers(ControlPlaneRule rule) {\n   public void connect_then_mainServerDown_fallbackServerUp() throws Exception {\n     mainXdsServer.restartXdsServer();\n     fallbackServer.restartXdsServer();\n+    ExecutorService executor = Executors.newFixedThreadPool(1);\n+    XdsTransportFactory xdsTransportFactory = new XdsTransportFactory() {\n+      @Override\n+      public XdsTransport create(Bootstrapper.ServerInfo serverInfo) {\n+        ChannelCredentials channelCredentials =\n+            (ChannelCredentials) serverInfo.implSpecificConfig();\n+        return new GrpcXdsTransportFactory.GrpcXdsTransport(\n+            Grpc.newChannelBuilder(serverInfo.target(), channelCredentials)\n+              .executor(executor)\n+              .build());\n+      }\n+    };\n     XdsClientImpl xdsClient = CommonBootstrapperTestUtils.createXdsClient(\n         new GrpcBootstrapperImpl().bootstrap(defaultBootstrapOverride()),\n-        DEFAULT_XDS_TRANSPORT_FACTORY, fakeClock, new ExponentialBackoffPolicy.Provider(),\n+        xdsTransportFactory, fakeClock, new ExponentialBackoffPolicy.Provider(),\n         MessagePrinter.INSTANCE, xdsClientMetricReporter);\n \n     xdsClient.watchXdsResource(XdsListenerResource.getInstance(), MAIN_SERVER, ldsWatcher);\n@@ -355,7 +372,8 @@ public void connect_then_mainServerDown_fallbackServerUp() throws Exception {\n     // Sleep for the ADS stream disconnect to be processed and for the retry to fail. Between those\n     // two sleeps we need the fakeClock to progress by 1 second to restart the ADS stream.\n     for (int i = 0; i < 5; i++) {\n-      fakeClock.forwardTime(1000, TimeUnit.MILLISECONDS);\n+      // FakeClock is not thread-safe, and the retry scheduling is concurrent to this test thread\n+      executor.submit(() -> fakeClock.forwardTime(1000, TimeUnit.MILLISECONDS)).get();\n       TimeUnit.SECONDS.sleep(1);\n     }\n \n@@ -393,6 +411,7 @@ public void connect_then_mainServerDown_fallbackServerUp() throws Exception {\n     fakeClock.forwardTime(15000, TimeUnit.MILLISECONDS); // Does not exist timer\n     verify(cdsWatcher2, timeout(5000)).onResourceDoesNotExist(eq(CLUSTER_NAME));\n     xdsClient.shutdown();\n+    executor.shutdown();\n   }\n \n   @Test",
      "parent_sha": "fc86084df5c8c2ea3080554021aa72cea81960b4"
    }
  },
  {
    "oid": "5946eb0d6a245d87bbaa4acd8cb1f9772c1059e1",
    "message": "style fix (#9526)",
    "date": "2022-09-07T21:58:42Z",
    "url": "https://github.com/grpc/grpc-java/commit/5946eb0d6a245d87bbaa4acd8cb1f9772c1059e1",
    "details": {
      "sha": "2a414e792d9e48f415fa21e42f3e3e641c290669",
      "filename": "auth/src/main/java/io/grpc/auth/GoogleAuthLibraryCallCredentials.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/grpc/grpc-java/blob/5946eb0d6a245d87bbaa4acd8cb1f9772c1059e1/auth%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fauth%2FGoogleAuthLibraryCallCredentials.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/5946eb0d6a245d87bbaa4acd8cb1f9772c1059e1/auth%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fauth%2FGoogleAuthLibraryCallCredentials.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/auth%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fauth%2FGoogleAuthLibraryCallCredentials.java?ref=5946eb0d6a245d87bbaa4acd8cb1f9772c1059e1",
      "patch": "@@ -51,9 +51,9 @@ final class GoogleAuthLibraryCallCredentials extends io.grpc.CallCredentials\n       = Logger.getLogger(GoogleAuthLibraryCallCredentials.class.getName());\n   private static final JwtHelper jwtHelper\n       = createJwtHelperOrNull(GoogleAuthLibraryCallCredentials.class.getClassLoader());\n-  private static final Class<? extends Credentials> googleCredentialsClass\n+  private static final Class<? extends Credentials> GOOGLE_CREDENTIALS_CLASS\n       = loadGoogleCredentialsClass();\n-  private static final Class<?> appEngineCredentialsClass\n+  private static final Class<?> APP_ENGINE_CREDENTIALS_CLASS\n       = loadAppEngineCredentials();\n \n   private final boolean requirePrivacy;\n@@ -73,12 +73,12 @@ public GoogleAuthLibraryCallCredentials(Credentials creds) {\n   GoogleAuthLibraryCallCredentials(Credentials creds, JwtHelper jwtHelper) {\n     checkNotNull(creds, \"creds\");\n     boolean requirePrivacy = false;\n-    if (googleCredentialsClass != null) {\n+    if (GOOGLE_CREDENTIALS_CLASS != null) {\n       // All GoogleCredentials instances are bearer tokens and should only be used on private\n       // channels. This catches all return values from GoogleCredentials.getApplicationDefault().\n       // This should be checked before upgrading the Service Account to JWT, as JWT is also a bearer\n       // token.\n-      requirePrivacy = googleCredentialsClass.isInstance(creds);\n+      requirePrivacy = GOOGLE_CREDENTIALS_CLASS.isInstance(creds);\n     }\n     if (jwtHelper != null) {\n       creds = jwtHelper.tryServiceAccountToJwt(creds);\n@@ -379,10 +379,10 @@ public Credentials tryServiceAccountToJwt(Credentials creds) {\n   public boolean isSpecificExecutorRequired() {\n     // Cache the value so we only need to try to load the class once\n     if (requiresSpecificExecutor == null) {\n-      if (appEngineCredentialsClass == null) {\n+      if (APP_ENGINE_CREDENTIALS_CLASS == null) {\n         requiresSpecificExecutor = Boolean.FALSE;\n       } else {\n-        requiresSpecificExecutor = appEngineCredentialsClass.isInstance(creds);\n+        requiresSpecificExecutor = APP_ENGINE_CREDENTIALS_CLASS.isInstance(creds);\n       }\n     }\n ",
      "parent_sha": "0fd57516794b7fc21c7002fe152af10581a5ca7f"
    }
  },
  {
    "oid": "2cb6ecc3b31c63be503e63d03a27bda1ac3ecb85",
    "message": "netty: Backport SETTINGS ACK sequencing fix\n\nThis fix was made in netty/netty#6521. Fixes #2801",
    "date": "2017-03-14T21:21:51Z",
    "url": "https://github.com/grpc/grpc-java/commit/2cb6ecc3b31c63be503e63d03a27bda1ac3ecb85",
    "details": {
      "sha": "a3c9b578d6a355653ae9a1324f77daae329467c3",
      "filename": "netty/third_party/netty/java/io/grpc/netty/FixedHttp2ConnectionDecoder.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/grpc/grpc-java/blob/2cb6ecc3b31c63be503e63d03a27bda1ac3ecb85/netty%2Fthird_party%2Fnetty%2Fjava%2Fio%2Fgrpc%2Fnetty%2FFixedHttp2ConnectionDecoder.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/2cb6ecc3b31c63be503e63d03a27bda1ac3ecb85/netty%2Fthird_party%2Fnetty%2Fjava%2Fio%2Fgrpc%2Fnetty%2FFixedHttp2ConnectionDecoder.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/netty%2Fthird_party%2Fnetty%2Fjava%2Fio%2Fgrpc%2Fnetty%2FFixedHttp2ConnectionDecoder.java?ref=2cb6ecc3b31c63be503e63d03a27bda1ac3ecb85",
      "patch": "@@ -450,11 +450,11 @@ private int calculateMaxStreams(int maxConcurrentStreams) {\n \n         @Override\n         public void onSettingsRead(ChannelHandlerContext ctx, Http2Settings settings) throws Http2Exception {\n-            encoder.remoteSettings(settings);\n-\n             // Acknowledge receipt of the settings.\n             encoder.writeSettingsAck(ctx, ctx.newPromise());\n \n+            encoder.remoteSettings(settings);\n+\n             listener.onSettingsRead(ctx, settings);\n         }\n ",
      "parent_sha": "9ef07916f716a19a534513eed8822d3eee9b8d33"
    }
  },
  {
    "oid": "cb61a5e284861675b325562d0f1a89ac2714c545",
    "message": "benchmarks: Increase timeout of LoadWorkerTest\n\nThis should fix test failures on aarch64.\n```\nexpected to be less than: 0.0\nbut was                 : 0.0\n\tat app//io.grpc.benchmarks.driver.LoadWorkerTest.assertWorkOccurred(LoadWorkerTest.java:198)\n\tat app//io.grpc.benchmarks.driver.LoadWorkerTest.runUnaryBlockingClosedLoop(LoadWorkerTest.java:90)\n```\n\nrunUnaryBlockingClosedLoop() has been failing but the other tests\nsuceeding. The failure is complaining that getCount() == 0, which means\nno RPCs completed. The slowest successful test has a mean RPC time of\n226 ms (the unit was logged incorrectly) and comparing to x86 tests\nrunUnaryBlockingClosedLoop() is ~2x as slow because it executes first.\nSo this is probably _barely_ failing and 4 attempts instead of 3 would\nbe sufficient. While the test tries to wait for 10 RPCs to complete, it\nseems likely it is stopping early even for the successful runs on\naarch64. There are 4 concurrent RPCs, so to get 10 RPCs we need to wait\nfor 3 batches of RPCs to complete which would be 1346 ms (5 loops)\nassuming a 452 ms mean latency. Bumping timeout by 10x to give lots of\nheadroom.",
    "date": "2022-05-02T20:09:34Z",
    "url": "https://github.com/grpc/grpc-java/commit/cb61a5e284861675b325562d0f1a89ac2714c545",
    "details": {
      "sha": "ddcd93d0d253bd753a2a5dbfbc594f05159e3901",
      "filename": "benchmarks/src/test/java/io/grpc/benchmarks/driver/LoadWorkerTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/grpc/grpc-java/blob/cb61a5e284861675b325562d0f1a89ac2714c545/benchmarks%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fbenchmarks%2Fdriver%2FLoadWorkerTest.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/cb61a5e284861675b325562d0f1a89ac2714c545/benchmarks%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fbenchmarks%2Fdriver%2FLoadWorkerTest.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/benchmarks%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fbenchmarks%2Fdriver%2FLoadWorkerTest.java?ref=cb61a5e284861675b325562d0f1a89ac2714c545",
      "patch": "@@ -181,7 +181,7 @@ private void assertWorkOccurred(StreamObserver<Control.ClientArgs> clientObserve\n       throws InterruptedException {\n \n     Stats.ClientStats stat = null;\n-    for (int i = 0; i < 3; i++) {\n+    for (int i = 0; i < 30; i++) {\n       // Poll until we get some stats\n       Thread.sleep(300);\n       clientObserver.onNext(MARK);\n@@ -197,7 +197,7 @@ private void assertWorkOccurred(StreamObserver<Control.ClientArgs> clientObserve\n     assertThat(stat.hasLatencies()).isTrue();\n     assertThat(stat.getLatencies().getCount()).isLessThan(stat.getLatencies().getSum());\n     double mean = stat.getLatencies().getSum() / stat.getLatencies().getCount();\n-    System.out.println(\"Mean \" + mean + \" us\");\n+    System.out.println(\"Mean \" + mean + \" ns\");\n     assertThat(stat.getLatencies().getMinSeen()).isLessThan(mean);\n     assertThat(stat.getLatencies().getMaxSeen()).isGreaterThan(mean);\n   }",
      "parent_sha": "2c3eca57e48d0b48ccb68ad21275dd3a0b56346a"
    }
  },
  {
    "oid": "76eaae26b815064a75ea77a68bd034c9e55884ca",
    "message": "Enable LB and Naming for Netty.forAddress(String,int)\n\nThis swaps to the forTarget() codepath. The constructor is to make it\nmore convenient when extending the builder to disable checkAuthority.",
    "date": "2015-11-14T03:30:21Z",
    "url": "https://github.com/grpc/grpc-java/commit/76eaae26b815064a75ea77a68bd034c9e55884ca",
    "details": {
      "sha": "d343ef764fbf96ce54accd2ef80954df2cdc50c1",
      "filename": "netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/grpc/grpc-java/blob/76eaae26b815064a75ea77a68bd034c9e55884ca/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FNettyChannelBuilder.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/76eaae26b815064a75ea77a68bd034c9e55884ca/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FNettyChannelBuilder.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FNettyChannelBuilder.java?ref=76eaae26b815064a75ea77a68bd034c9e55884ca",
      "patch": "@@ -89,7 +89,7 @@ public static NettyChannelBuilder forAddress(SocketAddress serverAddress) {\n    * Creates a new builder with the given host and port.\n    */\n   public static NettyChannelBuilder forAddress(String host, int port) {\n-    return forAddress(new InetSocketAddress(host, port));\n+    return new NettyChannelBuilder(host, port);\n   }\n \n   /**\n@@ -100,6 +100,10 @@ public static NettyChannelBuilder forTarget(String target) {\n     return new NettyChannelBuilder(target);\n   }\n \n+  protected NettyChannelBuilder(String host, int port) {\n+    this(GrpcUtil.authorityFromHostAndPort(host, port));\n+  }\n+\n   private NettyChannelBuilder(String target) {\n     super(target);\n   }",
      "parent_sha": "01bf56bf8ddfd333ccc09baa0dccdeb5a7df3999"
    }
  },
  {
    "oid": "1386453830046adbe4f682d4ecb0e61025e64a5b",
    "message": "netty: check for stream before freeing flow control bytes on client",
    "date": "2017-08-10T22:02:34Z",
    "url": "https://github.com/grpc/grpc-java/commit/1386453830046adbe4f682d4ecb0e61025e64a5b",
    "details": {
      "sha": "a5df8070a8f39aa3c45ba4303a0e51613b97ed35",
      "filename": "netty/src/main/java/io/grpc/netty/NettyClientStream.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/grpc/grpc-java/blob/1386453830046adbe4f682d4ecb0e61025e64a5b/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FNettyClientStream.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/1386453830046adbe4f682d4ecb0e61025e64a5b/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FNettyClientStream.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FNettyClientStream.java?ref=1386453830046adbe4f682d4ecb0e61025e64a5b",
      "patch": "@@ -152,7 +152,9 @@ public void writeFrame(WritableBuffer frame, boolean endOfStream, boolean flush)\n             channel.newPromise().addListener(new ChannelFutureListener() {\n               @Override\n               public void operationComplete(ChannelFuture future) throws Exception {\n-                if (future.isSuccess()) {\n+                // If the future succeeds when http2stream is null, the stream has been cancelled\n+                // before it began and Netty is purging pending writes from the flow-controller.\n+                if (future.isSuccess() && transportState().http2Stream() != null) {\n                   // Remove the bytes from outbound flow control, optionally notifying\n                   // the client that they can send more bytes.\n                   transportState().onSentBytes(numBytes);",
      "parent_sha": "c8216e45f2a59a73a3733571d573786eced7002b"
    }
  },
  {
    "oid": "26fc6324c4d73f6a259cd433b999cd4778104e3c",
    "message": "core: fix typo in ClientCall.java javadoc",
    "date": "2018-03-15T17:07:30Z",
    "url": "https://github.com/grpc/grpc-java/commit/26fc6324c4d73f6a259cd433b999cd4778104e3c",
    "details": {
      "sha": "a0d995022cf6b4efaf808a31e1ebb07d624ef46c",
      "filename": "core/src/main/java/io/grpc/ClientCall.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/26fc6324c4d73f6a259cd433b999cd4778104e3c/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FClientCall.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/26fc6324c4d73f6a259cd433b999cd4778104e3c/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FClientCall.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FClientCall.java?ref=26fc6324c4d73f6a259cd433b999cd4778104e3c",
      "patch": "@@ -241,7 +241,7 @@ public void setMessageCompression(boolean enabled) {\n   /**\n    * Returns additional properties of the call. May only be called after {@link Listener#onHeaders}\n    * or {@link Listener#onClose}. If called prematurely, the implementation may throw {@code\n-   * IllegalStateException} or return abitrary {@code Attributes}.\n+   * IllegalStateException} or return arbitrary {@code Attributes}.\n    *\n    * <p>{@link Grpc} defines commonly used attributes, but they are not guaranteed to be present.\n    *",
      "parent_sha": "9224d2ab8f026c8b46eedaaae94b7c64fd27e809"
    }
  },
  {
    "oid": "24731102c616474e5dffe8490f10ff6dc865f79c",
    "message": "grpclb: Make ATTR_LB_ADDRS public (#7230)",
    "date": "2020-07-21T19:45:47Z",
    "url": "https://github.com/grpc/grpc-java/commit/24731102c616474e5dffe8490f10ff6dc865f79c",
    "details": {
      "sha": "bda6473b0cc3f3a7da0e40b8dceacbec1a2cdcc1",
      "filename": "grpclb/src/main/java/io/grpc/grpclb/GrpclbConstants.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/24731102c616474e5dffe8490f10ff6dc865f79c/grpclb%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fgrpclb%2FGrpclbConstants.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/24731102c616474e5dffe8490f10ff6dc865f79c/grpclb%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fgrpclb%2FGrpclbConstants.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/grpclb%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fgrpclb%2FGrpclbConstants.java?ref=24731102c616474e5dffe8490f10ff6dc865f79c",
      "patch": "@@ -45,7 +45,7 @@ public final class GrpclbConstants {\n   /**\n    * Attribute key for gRPC LB server addresses.\n    */\n-  static final Attributes.Key<List<EquivalentAddressGroup>> ATTR_LB_ADDRS =\n+  public static final Attributes.Key<List<EquivalentAddressGroup>> ATTR_LB_ADDRS =\n       Attributes.Key.create(\"io.grpc.grpclb.lbAddrs\");\n \n   /**",
      "parent_sha": "4edbe245f1407f9e12d0332831988d7d0dc2dbce"
    }
  },
  {
    "oid": "65bf2dc61b98915f14e0c611756d1de8733c7dc7",
    "message": "xds: Fix hash gen in RingHash when generating more than 10 hashes",
    "date": "2022-06-09T22:50:56Z",
    "url": "https://github.com/grpc/grpc-java/commit/65bf2dc61b98915f14e0c611756d1de8733c7dc7",
    "details": {
      "sha": "f0183e2c2987b1baa6dcf6696d6a45c93de33667",
      "filename": "xds/src/main/java/io/grpc/xds/RingHashLoadBalancer.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/grpc/grpc-java/blob/65bf2dc61b98915f14e0c611756d1de8733c7dc7/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FRingHashLoadBalancer.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/65bf2dc61b98915f14e0c611756d1de8733c7dc7/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FRingHashLoadBalancer.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FRingHashLoadBalancer.java?ref=65bf2dc61b98915f14e0c611756d1de8733c7dc7",
      "patch": "@@ -175,6 +175,7 @@ private static List<RingEntry> buildRing(\n       // TODO(chengyuanzhang): is using the list of socket address correct?\n       StringBuilder sb = new StringBuilder(addrKey.getAddresses().toString());\n       sb.append('_');\n+      int lengthWithoutCounter = sb.length();\n       targetHashes += scale * normalizedWeight;\n       long i = 0L;\n       while (currentHashes < targetHashes) {\n@@ -183,7 +184,7 @@ private static List<RingEntry> buildRing(\n         ring.add(new RingEntry(hash, addrKey));\n         i++;\n         currentHashes++;\n-        sb.setLength(sb.length() - 1);\n+        sb.setLength(lengthWithoutCounter);\n       }\n     }\n     Collections.sort(ring);",
      "parent_sha": "97845fb72e6d1fcb79a9c7d03598d1f85a5ff11d"
    }
  },
  {
    "oid": "ba54513f5ca9f6279b1066b320cf6ec57b271c85",
    "message": "Fix a concurrent modification in BlankFutureProvider.\n\nThe Set from Collections.synchronizedSet() is not protected against\nconcurrent modification during iteration. We copy an ArrayList out of it\nfor iteration.",
    "date": "2016-01-28T19:27:04Z",
    "url": "https://github.com/grpc/grpc-java/commit/ba54513f5ca9f6279b1066b320cf6ec57b271c85",
    "details": {
      "sha": "bbb8aed20df8cf18fbaec8fedc1182e6092bdfe9",
      "filename": "core/src/main/java/io/grpc/internal/BlankFutureProvider.java",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/grpc/grpc-java/blob/ba54513f5ca9f6279b1066b320cf6ec57b271c85/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FBlankFutureProvider.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/ba54513f5ca9f6279b1066b320cf6ec57b271c85/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FBlankFutureProvider.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FBlankFutureProvider.java?ref=ba54513f5ca9f6279b1066b320cf6ec57b271c85",
      "patch": "@@ -39,8 +39,10 @@\n import com.google.common.util.concurrent.ListenableFuture;\n import com.google.common.util.concurrent.SettableFuture;\n \n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.LinkedHashSet;\n+import java.util.List;\n import java.util.Set;\n import java.util.concurrent.CancellationException;\n \n@@ -122,7 +124,7 @@ private FulfillmentBatch(Set<SettableFuture<T>> futures) {\n      * they were created.\n      */\n     public void link(Supplier<ListenableFuture<T>> source) {\n-      for (final SettableFuture<T> future : futures) {\n+      for (final SettableFuture<T> future : copyFutureList()) {\n         ListenableFuture<T> sourceFuture = source.get();\n         Futures.addCallback(sourceFuture, new FutureCallback<T>() {\n           @Override public void onSuccess(T result) {\n@@ -140,10 +142,16 @@ public void link(Supplier<ListenableFuture<T>> source) {\n      * Fails all futures with the given error.\n      */\n     public void fail(Throwable error) {\n-      for (SettableFuture<T> future : futures) {\n+      for (SettableFuture<T> future : copyFutureList()) {\n         future.setException(error);\n       }\n     }\n+\n+    private List<SettableFuture<T>> copyFutureList() {\n+      synchronized (futures) {\n+        return new ArrayList<SettableFuture<T>>(futures);\n+      }\n+    }\n   }\n \n   private static <T> Set<SettableFuture<T>> createSet() {",
      "parent_sha": "e2ed2e8f038a2360b3d191c181e57fd0375d2a5f"
    }
  },
  {
    "oid": "7a33fae8e8cd4d36c4986b0644f13c8d8d2f2d6f",
    "message": "core: fix a deadlock in TransportSet.\n\nResolves #2152",
    "date": "2016-08-10T16:47:25Z",
    "url": "https://github.com/grpc/grpc-java/commit/7a33fae8e8cd4d36c4986b0644f13c8d8d2f2d6f",
    "details": {
      "sha": "025b83276fc981e66ccd16257b8dc64cf185a597",
      "filename": "core/src/main/java/io/grpc/internal/TransportSet.java",
      "status": "modified",
      "additions": 14,
      "deletions": 3,
      "changes": 17,
      "blob_url": "https://github.com/grpc/grpc-java/blob/7a33fae8e8cd4d36c4986b0644f13c8d8d2f2d6f/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FTransportSet.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/7a33fae8e8cd4d36c4986b0644f13c8d8d2f2d6f/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FTransportSet.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FTransportSet.java?ref=7a33fae8e8cd4d36c4986b0644f13c8d8d2f2d6f",
      "patch": "@@ -227,8 +227,10 @@ private Runnable startNewTransport(DelayedClientTransport delayedTransport) {\n    * @param status the causal status when the channel begins transition to\n    *     TRANSIENT_FAILURE.\n    */\n+  @CheckReturnValue\n   @GuardedBy(\"lock\")\n-  private void scheduleBackoff(final DelayedClientTransport delayedTransport, Status status) {\n+  private Runnable scheduleBackoff(\n+      final DelayedClientTransport delayedTransport, final Status status) {\n     Preconditions.checkState(reconnectTask == null, \"previous reconnectTask is not done\");\n \n     if (reconnectPolicy == null) {\n@@ -240,7 +242,6 @@ private void scheduleBackoff(final DelayedClientTransport delayedTransport, Stat\n       log.log(Level.FINE, \"[{0}] Scheduling backoff for {1} ms\",\n           new Object[]{getLogId(), delayMillis});\n     }\n-    delayedTransport.startBackoff(status);\n     class EndOfCurrentBackoff implements Runnable {\n       @Override\n       public void run() {\n@@ -281,6 +282,16 @@ public ClientTransport get() {\n \n     reconnectTask = scheduledExecutor.schedule(\n         new LogExceptionRunnable(new EndOfCurrentBackoff()), delayMillis, TimeUnit.MILLISECONDS);\n+    return new Runnable() {\n+      @Override\n+      public void run() {\n+        // This must be run outside of lock. The TransportSet lock is a channel level lock.\n+        // startBackoff() will acquire the delayed transport lock, which is a transport level\n+        // lock. Our lock ordering mandates transport lock > channel lock.  Otherwise a deadlock\n+        // could happen (https://github.com/grpc/grpc-java/issues/2152).\n+        delayedTransport.startBackoff(status);\n+      }\n+    };\n   }\n \n   /**\n@@ -450,7 +461,7 @@ public void transportShutdown(Status s) {\n             allAddressesFailed = true;\n             // Initiate backoff\n             // Transition to TRANSIENT_FAILURE\n-            scheduleBackoff(delayedTransport, s);\n+            runnable = scheduleBackoff(delayedTransport, s);\n           } else {\n             // Still CONNECTING\n             runnable = startNewTransport(delayedTransport);",
      "parent_sha": "3879c6a8fa4b0ec25f211019ec26b0acee8976cb"
    }
  },
  {
    "oid": "97d4fa6614e85d9946bdcdff1ea4df5d9c6a83c6",
    "message": "xds: fix lint warning for throwing RuntimeException",
    "date": "2019-11-01T23:52:24Z",
    "url": "https://github.com/grpc/grpc-java/commit/97d4fa6614e85d9946bdcdff1ea4df5d9c6a83c6",
    "details": {
      "sha": "69c5e5858bb7c80afa39607b54824bf3d2b7cc0f",
      "filename": "xds/src/main/java/io/grpc/xds/Bootstrapper.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/97d4fa6614e85d9946bdcdff1ea4df5d9c6a83c6/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FBootstrapper.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/97d4fa6614e85d9946bdcdff1ea4df5d9c6a83c6/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FBootstrapper.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FBootstrapper.java?ref=97d4fa6614e85d9946bdcdff1ea4df5d9c6a83c6",
      "patch": "@@ -81,7 +81,7 @@ BootstrapInfo readBootstrap() throws Exception {\n         }\n       }\n       if (failToBootstrapException != null) {\n-        throw new RuntimeException(failToBootstrapException);\n+        throw new IOException(failToBootstrapException);\n       }\n       return bootstrapInfo;\n     }",
      "parent_sha": "8b242e1ca1943395e6e56c958c715d60af7b7254"
    }
  },
  {
    "oid": "49c8bdb60ac8783eda098aa42375b837342edde3",
    "message": "netty: fix getListenSockets race (#4301)\n\nMove registration to separate future and wait for it.",
    "date": "2018-04-05T00:04:29Z",
    "url": "https://github.com/grpc/grpc-java/commit/49c8bdb60ac8783eda098aa42375b837342edde3",
    "details": {
      "sha": "f9efdf03eb9265da27ed6e78e3aa3dc6b5f8813f",
      "filename": "netty/src/main/java/io/grpc/netty/NettyServer.java",
      "status": "modified",
      "additions": 17,
      "deletions": 11,
      "changes": 28,
      "blob_url": "https://github.com/grpc/grpc-java/blob/49c8bdb60ac8783eda098aa42375b837342edde3/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FNettyServer.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/49c8bdb60ac8783eda098aa42375b837342edde3/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FNettyServer.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FNettyServer.java?ref=49c8bdb60ac8783eda098aa42375b837342edde3",
      "patch": "@@ -92,9 +92,9 @@ class NettyServer implements InternalServer, WithLogId {\n   private final List<ServerStreamTracer.Factory> streamTracerFactories;\n   private final TransportTracer.Factory transportTracerFactory;\n   private final Channelz channelz;\n-  // Only set once during start(). This code assumes all listen sockets are created at startup\n-  // and never changed. In the future we may have >1 listen socket.\n-  private ImmutableList<Instrumented<SocketStats>> listenSockets;\n+  // Only modified in event loop but safe to read any time. Set at startup and unset at shutdown.\n+  // In the future we may have >1 listen socket.\n+  private volatile ImmutableList<Instrumented<SocketStats>> listenSockets = ImmutableList.of();\n \n   NettyServer(\n       SocketAddress address, Class<? extends ServerChannel> channelType,\n@@ -240,14 +240,7 @@ public void operationComplete(ChannelFuture future) throws Exception {\n       }\n     });\n     // Bind and start to accept incoming connections.\n-    ChannelFuture future = b.bind(address).addListener(new ChannelFutureListener() {\n-      @Override\n-      public void operationComplete(ChannelFuture f) throws Exception {\n-        Instrumented<SocketStats> listenSocket = new ListenSocket(f.channel());\n-        listenSockets = ImmutableList.of(listenSocket);\n-        channelz.addListenSocket(listenSocket);\n-      }\n-    });\n+    ChannelFuture future = b.bind(address);\n     try {\n       future.await();\n     } catch (InterruptedException ex) {\n@@ -258,6 +251,19 @@ public void operationComplete(ChannelFuture f) throws Exception {\n       throw new IOException(\"Failed to bind\", future.cause());\n     }\n     channel = future.channel();\n+    Future<?> channelzFuture = channel.eventLoop().submit(new Runnable() {\n+      @Override\n+      public void run() {\n+        Instrumented<SocketStats> listenSocket = new ListenSocket(channel);\n+        listenSockets = ImmutableList.of(listenSocket);\n+        channelz.addListenSocket(listenSocket);\n+      }\n+    });\n+    try {\n+      channelzFuture.await();\n+    } catch (InterruptedException ex) {\n+      throw new RuntimeException(\"Interrupted while registering listen socket to channelz\", ex);\n+    }\n   }\n \n   @Override",
      "parent_sha": "9ed84258aa3ead42747ce87fa5a7b428bda72626"
    }
  },
  {
    "oid": "0b82f01260bd8619004739a1ed8934b442a40b5d",
    "message": "api: Fix a typo in ServerInterceptor JavaDoc (#10990)",
    "date": "2024-03-06T18:43:14Z",
    "url": "https://github.com/grpc/grpc-java/commit/0b82f01260bd8619004739a1ed8934b442a40b5d",
    "details": {
      "sha": "9b2e76ef6083fe90260ac786f01ea71705e38ac4",
      "filename": "api/src/main/java/io/grpc/ServerInterceptor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/0b82f01260bd8619004739a1ed8934b442a40b5d/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FServerInterceptor.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/0b82f01260bd8619004739a1ed8934b442a40b5d/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FServerInterceptor.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FServerInterceptor.java?ref=0b82f01260bd8619004739a1ed8934b442a40b5d",
      "patch": "@@ -19,7 +19,7 @@\n import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Interface for intercepting incoming calls before that are dispatched by\n+ * Interface for intercepting incoming calls before they are dispatched by\n  * {@link ServerCallHandler}.\n  *\n  * <p>Implementers use this mechanism to add cross-cutting behavior to server-side calls. Common",
      "parent_sha": "9ee5e9f008ee40dff695b5833ac4ef76cb80f0a3"
    }
  },
  {
    "oid": "cc934b0b67e4a8a2035e3b1057b68de0ab0dc370",
    "message": "testing: Remove accidental cast to char in file IO\n\nAlso add forgotten close() for the InputStream.",
    "date": "2017-01-09T21:52:26Z",
    "url": "https://github.com/grpc/grpc-java/commit/cc934b0b67e4a8a2035e3b1057b68de0ab0dc370",
    "details": {
      "sha": "710200ce9dfea0fbe56a0aec9516daae6330b689",
      "filename": "testing/src/main/java/io/grpc/testing/TestUtils.java",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/grpc/grpc-java/blob/cc934b0b67e4a8a2035e3b1057b68de0ab0dc370/testing%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftesting%2FTestUtils.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/cc934b0b67e4a8a2035e3b1057b68de0ab0dc370/testing%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftesting%2FTestUtils.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/testing%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftesting%2FTestUtils.java?ref=cc934b0b67e4a8a2035e3b1057b68de0ab0dc370",
      "patch": "@@ -31,8 +31,6 @@\n \n package io.grpc.testing;\n \n-import static com.google.common.base.Charsets.UTF_8;\n-\n import io.grpc.ExperimentalApi;\n import io.grpc.ForwardingServerCall.SimpleForwardingServerCall;\n import io.grpc.Metadata;\n@@ -42,13 +40,13 @@\n import io.grpc.Status;\n \n import java.io.BufferedInputStream;\n-import java.io.BufferedWriter;\n+import java.io.BufferedOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.OutputStreamWriter;\n+import java.io.OutputStream;\n import java.net.InetAddress;\n import java.net.InetSocketAddress;\n import java.net.UnknownHostException;\n@@ -255,19 +253,20 @@ public static List<String> preferredTestCiphers() {\n    * @param name  name of a file in src/main/resources/certs.\n    */\n   public static File loadCert(String name) throws IOException {\n-    InputStream in = TestUtils.class.getResourceAsStream(\"/certs/\" + name);\n+    InputStream in = new BufferedInputStream(TestUtils.class.getResourceAsStream(\"/certs/\" + name));\n     File tmpFile = File.createTempFile(name, \"\");\n     tmpFile.deleteOnExit();\n \n-    BufferedWriter writer =\n-        new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tmpFile), UTF_8));\n+    OutputStream os = new BufferedOutputStream(new FileOutputStream(tmpFile));\n     try {\n       int b;\n       while ((b = in.read()) != -1) {\n-        writer.write(b);\n+        os.write(b);\n       }\n+      os.flush();\n     } finally {\n-      writer.close();\n+      in.close();\n+      os.close();\n     }\n \n     return tmpFile;",
      "parent_sha": "fed9be28ca45b5a56691bbfdad2a4a0dc535f850"
    }
  },
  {
    "oid": "3e5fa7c5df67d6820be2cd0c31032e0d4161284b",
    "message": "xds:Fix ConcurrentModificationException in PriorityLoadBalancer (#9728)\n\nFix ConcurrentModificationException in PriorityLoadBalancer by making copy of children values to iterate rather than directly using children in for loop.",
    "date": "2022-12-02T23:15:48Z",
    "url": "https://github.com/grpc/grpc-java/commit/3e5fa7c5df67d6820be2cd0c31032e0d4161284b",
    "details": {
      "sha": "3e539f54b06c4e247f95e0061b1bf828f4440fc7",
      "filename": "xds/src/main/java/io/grpc/xds/PriorityLoadBalancer.java",
      "status": "modified",
      "additions": 17,
      "deletions": 6,
      "changes": 23,
      "blob_url": "https://github.com/grpc/grpc-java/blob/3e5fa7c5df67d6820be2cd0c31032e0d4161284b/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FPriorityLoadBalancer.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/3e5fa7c5df67d6820be2cd0c31032e0d4161284b/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FPriorityLoadBalancer.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FPriorityLoadBalancer.java?ref=3e5fa7c5df67d6820be2cd0c31032e0d4161284b",
      "patch": "@@ -37,6 +37,8 @@\n import io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig.PriorityChildConfig;\n import io.grpc.xds.XdsLogger.XdsLogLevel;\n import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -59,6 +61,8 @@ final class PriorityLoadBalancer extends LoadBalancer {\n \n   // Includes all active and deactivated children. Mutable. New entries are only added from priority\n   // 0 up to the selected priority. An entry is only deleted 15 minutes after its deactivation.\n+  // Note that because all configuration updates should be atomic, updates to children can happen\n+  // outside of the synchronization context.  Therefore copy values before looping over them.\n   private final Map<String, ChildLbState> children = new HashMap<>();\n \n   // Following fields are only null initially.\n@@ -91,15 +95,20 @@ public boolean acceptResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n     priorityNames = config.priorities;\n     priorityConfigs = config.childConfigs;\n     Set<String> prioritySet = new HashSet<>(config.priorities);\n-    for (String priority : children.keySet()) {\n+    ArrayList<String> childKeys = new ArrayList<>(children.keySet());\n+    for (String priority : childKeys) {\n       if (!prioritySet.contains(priority)) {\n-        children.get(priority).deactivate();\n+        ChildLbState childLbState = children.get(priority);\n+        if (childLbState != null) {\n+          childLbState.deactivate();\n+        }\n       }\n     }\n     handlingResolvedAddresses = true;\n     for (String priority : priorityNames) {\n-      if (children.containsKey(priority)) {\n-        children.get(priority).updateResolvedAddresses();\n+      ChildLbState childLbState = children.get(priority);\n+      if (childLbState != null) {\n+        childLbState.updateResolvedAddresses();\n       }\n     }\n     handlingResolvedAddresses = false;\n@@ -111,7 +120,8 @@ public boolean acceptResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n   public void handleNameResolutionError(Status error) {\n     logger.log(XdsLogLevel.WARNING, \"Received name resolution error: {0}\", error);\n     boolean gotoTransientFailure = true;\n-    for (ChildLbState child : children.values()) {\n+    Collection<ChildLbState> childValues = new ArrayList<>(children.values());\n+    for (ChildLbState child : childValues) {\n       if (priorityNames.contains(child.priority)) {\n         child.lb.handleNameResolutionError(error);\n         gotoTransientFailure = false;\n@@ -125,7 +135,8 @@ public void handleNameResolutionError(Status error) {\n   @Override\n   public void shutdown() {\n     logger.log(XdsLogLevel.INFO, \"Shutdown\");\n-    for (ChildLbState child : children.values()) {\n+    Collection<ChildLbState> childValues = new ArrayList<>(children.values());\n+    for (ChildLbState child : childValues) {\n       child.tearDown();\n     }\n     children.clear();",
      "parent_sha": "79f4411d20baa917f119fc603ce3857640feb0dc"
    }
  },
  {
    "oid": "95b847e7995d8c9fed96fcad2cb39e882da917fc",
    "message": "interop-testing: Use separate event loops in RetryTest\n\nThe RetryTest was flaky, and it seems to have been caused by the client\nand server getting assigned to the same event loop. Separating the two\nreduces the flake rate from ~3% to less than 0.1% (no flakes in a 1000).\n\nWhile I was here fixing the executors, I reduced the number of threads\ncreated and shut down the threads after they are no longer used. This\nhad no impact to the flake rate (no flakes in 1000).",
    "date": "2024-02-08T15:26:31Z",
    "url": "https://github.com/grpc/grpc-java/commit/95b847e7995d8c9fed96fcad2cb39e882da917fc",
    "details": {
      "sha": "edd2a57ab9dd1c0e8863244986a7ebc781e41e01",
      "filename": "interop-testing/src/test/java/io/grpc/testing/integration/RetryTest.java",
      "status": "modified",
      "additions": 14,
      "deletions": 5,
      "changes": 19,
      "blob_url": "https://github.com/grpc/grpc-java/blob/95b847e7995d8c9fed96fcad2cb39e882da917fc/interop-testing%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FRetryTest.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/95b847e7995d8c9fed96fcad2cb39e882da917fc/interop-testing%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FRetryTest.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/interop-testing%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FRetryTest.java?ref=95b847e7995d8c9fed96fcad2cb39e882da917fc",
      "patch": "@@ -77,6 +77,7 @@\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import org.junit.After;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -110,7 +111,7 @@ public class RetryTest {\n       mock(ClientCall.Listener.class, delegatesTo(testCallListener));\n \n   private CountDownLatch backoffLatch = new CountDownLatch(1);\n-  private final EventLoopGroup group = new DefaultEventLoopGroup() {\n+  private final EventLoopGroup clientGroup = new DefaultEventLoopGroup(1) {\n     @SuppressWarnings(\"FutureReturnValueIgnored\")\n     @Override\n     public ScheduledFuture<?> schedule(\n@@ -122,7 +123,7 @@ public ScheduledFuture<?> schedule(\n           new Runnable() {\n             @Override\n             public void run() {\n-              group.execute(command);\n+              clientGroup.execute(command);\n             }\n           },\n           delay,\n@@ -137,6 +138,7 @@ public void run() {} // no-op\n           TimeUnit.NANOSECONDS);\n     }\n   };\n+  private final EventLoopGroup serverGroup = new DefaultEventLoopGroup(1);\n   private final FakeStatsRecorder clientStatsRecorder = new FakeStatsRecorder();\n   private final ClientInterceptor statsInterceptor =\n       InternalCensusStatsAccessor.getClientInterceptor(\n@@ -173,11 +175,18 @@ public Listener<String> startCall(ServerCall<String, Integer> call, Metadata hea\n   private Map<String, Object> retryPolicy = null;\n   private long bufferLimit = 1L << 20; // 1M\n \n+  @After\n+  @SuppressWarnings(\"FutureReturnValueIgnored\")\n+  public void tearDown() {\n+    clientGroup.shutdownGracefully();\n+    serverGroup.shutdownGracefully();\n+  }\n+\n   private void startNewServer() throws Exception {\n     localServer = cleanupRule.register(NettyServerBuilder.forAddress(localAddress)\n         .channelType(LocalServerChannel.class)\n-        .bossEventLoopGroup(group)\n-        .workerEventLoopGroup(group)\n+        .bossEventLoopGroup(serverGroup)\n+        .workerEventLoopGroup(serverGroup)\n         .addService(serviceDefinition)\n         .build());\n     localServer.start();\n@@ -196,7 +205,7 @@ private void createNewChannel() {\n     channel = cleanupRule.register(\n         NettyChannelBuilder.forAddress(localAddress)\n             .channelType(LocalChannel.class, LocalAddress.class)\n-            .eventLoopGroup(group)\n+            .eventLoopGroup(clientGroup)\n             .usePlaintext()\n             .enableRetry()\n             .perRpcBufferLimit(bufferLimit)",
      "parent_sha": "7ba0718bb9a61f27bc21ff26eb73bb8d7cb91f27"
    }
  },
  {
    "oid": "1e0875dff717c65beb95f96760add4992fbebee6",
    "message": "core: re-enable panic mode after all affected internal tests have been fixed. (#4245)",
    "date": "2018-03-20T20:06:41Z",
    "url": "https://github.com/grpc/grpc-java/commit/1e0875dff717c65beb95f96760add4992fbebee6",
    "details": {
      "sha": "9298accd80f950eef125cc624c1d568e72283fa5",
      "filename": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/grpc/grpc-java/blob/1e0875dff717c65beb95f96760add4992fbebee6/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FManagedChannelImpl.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/1e0875dff717c65beb95f96760add4992fbebee6/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FManagedChannelImpl.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FManagedChannelImpl.java?ref=1e0875dff717c65beb95f96760add4992fbebee6",
      "patch": "@@ -119,11 +119,7 @@ final class ManagedChannelImpl extends ManagedChannel implements Instrumented<Ch\n       @Override\n       void handleUncaughtThrowable(Throwable t) {\n         super.handleUncaughtThrowable(t);\n-        // Disabled because it breaks some tests, as it detects pre-existing issues.\n-        // See #3293\n-        if (false) {\n-          panic(t);\n-        }\n+        panic(t);\n       }\n     };\n ",
      "parent_sha": "6836b31fb3740237e7f1aa48836447fb2e85b555"
    }
  },
  {
    "oid": "102f0f8ac8b112a3d1e23066aa497d5e152a1305",
    "message": "core: fix linter error",
    "date": "2019-07-24T20:52:52Z",
    "url": "https://github.com/grpc/grpc-java/commit/102f0f8ac8b112a3d1e23066aa497d5e152a1305",
    "details": {
      "sha": "59bfaae2104fac1cce8c636a707ecd8762dd3429",
      "filename": "core/src/test/java/io/grpc/util/GracefulSwitchLoadBalancerTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/grpc/grpc-java/blob/102f0f8ac8b112a3d1e23066aa497d5e152a1305/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Futil%2FGracefulSwitchLoadBalancerTest.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/102f0f8ac8b112a3d1e23066aa497d5e152a1305/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Futil%2FGracefulSwitchLoadBalancerTest.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Futil%2FGracefulSwitchLoadBalancerTest.java?ref=102f0f8ac8b112a3d1e23066aa497d5e152a1305",
      "patch": "@@ -72,8 +72,7 @@ public class GracefulSwitchLoadBalancerTest {\n \n   @Before\n   public void setUp() {\n-    for (int i = 0; i < lbPolicies.length; i++) {\n-      String lbPolicy = lbPolicies[i];\n+    for (String lbPolicy : lbPolicies) {\n       LoadBalancerProvider lbProvider = new FakeLoadBalancerProvider(lbPolicy);\n       lbProviders.put(lbPolicy, lbProvider);\n       lbRegistry.register(lbProvider);",
      "parent_sha": "47b11ab7a141d619a7e70a2a2005d28ad903635a"
    }
  },
  {
    "oid": "9039d4dcff8650f60cb951272150b010744c8055",
    "message": "disable recording real-time metrics using in gcp-o11y",
    "date": "2023-03-21T23:17:30Z",
    "url": "https://github.com/grpc/grpc-java/commit/9039d4dcff8650f60cb951272150b010744c8055",
    "details": {
      "sha": "726472ab9f54e005989cda670bedf7d9e4980890",
      "filename": "gcp-observability/src/main/java/io/grpc/gcp/observability/GcpObservability.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/grpc/grpc-java/blob/9039d4dcff8650f60cb951272150b010744c8055/gcp-observability%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fgcp%2Fobservability%2FGcpObservability.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/9039d4dcff8650f60cb951272150b010744c8055/gcp-observability%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fgcp%2Fobservability%2FGcpObservability.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/gcp-observability%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fgcp%2Fobservability%2FGcpObservability.java?ref=9039d4dcff8650f60cb951272150b010744c8055",
      "patch": "@@ -132,9 +132,9 @@ private void setProducer(\n     }\n     if (config.isEnableCloudMonitoring()) {\n       clientInterceptors.add(getConditionalInterceptor(\n-          InternalCensusStatsAccessor.getClientInterceptor(true, true, true, true)));\n+          InternalCensusStatsAccessor.getClientInterceptor(true, true, false, true)));\n       tracerFactories.add(\n-          InternalCensusStatsAccessor.getServerStreamTracerFactory(true, true, true));\n+          InternalCensusStatsAccessor.getServerStreamTracerFactory(true, true, false));\n     }\n     if (config.isEnableCloudTracing()) {\n       clientInterceptors.add(",
      "parent_sha": "844de39c2640491c05b0fa6102eb46085ba7b3bf"
    }
  },
  {
    "oid": "9bbaa8f46b4d8c15f77477b5a7616fd9fcb14740",
    "message": "interop tests: fix race in Compression tests where MetadataEntry.getParsed was being concurrently called.\n\nMetadata is internally not thread safe, so putting it in a volatile is not enough.",
    "date": "2016-07-01T23:42:05Z",
    "url": "https://github.com/grpc/grpc-java/commit/9bbaa8f46b4d8c15f77477b5a7616fd9fcb14740",
    "details": {
      "sha": "a6a2ee4125374a4562b5c8ef8bfcc61a3d232399",
      "filename": "interop-testing/src/test/java/io/grpc/testing/integration/CompressionTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/grpc/grpc-java/blob/9bbaa8f46b4d8c15f77477b5a7616fd9fcb14740/interop-testing%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FCompressionTest.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/9bbaa8f46b4d8c15f77477b5a7616fd9fcb14740/interop-testing%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FCompressionTest.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/interop-testing%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FCompressionTest.java?ref=9bbaa8f46b4d8c15f77477b5a7616fd9fcb14740",
      "patch": "@@ -281,7 +281,9 @@ public <ReqT, RespT> io.grpc.ServerCall.Listener<ReqT> interceptCall(\n         call.setCompression(\"fzip\");\n       }\n       call.setMessageCompression(enableServerMessageCompression);\n-      serverResponseHeaders = headers;\n+      Metadata headersCopy = new Metadata();\n+      headersCopy.merge(headers);\n+      serverResponseHeaders = headersCopy;\n       return next.startCall(call, headers);\n     }\n   }\n@@ -319,7 +321,9 @@ private ClientHeadersCapture(Listener<RespT> delegate) {\n     @Override\n     public void onHeaders(Metadata headers) {\n       super.onHeaders(headers);\n-      clientResponseHeaders = headers;\n+      Metadata headersCopy = new Metadata();\n+      headersCopy.merge(headers);\n+      clientResponseHeaders = headersCopy;\n     }\n   }\n }",
      "parent_sha": "8d9283116c23f0ad0e05fa8d3b04563e00165eb5"
    }
  },
  {
    "oid": "9dc5eec4d76193334a37418db6114e7ae090d298",
    "message": "xds: resolve conflicts by adding timeout field in parsed RouteAction for v2 tests (#7278)",
    "date": "2020-08-01T01:48:52Z",
    "url": "https://github.com/grpc/grpc-java/commit/9dc5eec4d76193334a37418db6114e7ae090d298",
    "details": {
      "sha": "178fe46bd4221a4863647bf043e81d18fe0b2ada",
      "filename": "xds/src/test/java/io/grpc/xds/XdsClientImplTestV2.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/grpc/grpc-java/blob/9dc5eec4d76193334a37418db6114e7ae090d298/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FXdsClientImplTestV2.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/9dc5eec4d76193334a37418db6114e7ae090d298/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FXdsClientImplTestV2.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FXdsClientImplTestV2.java?ref=9dc5eec4d76193334a37418db6114e7ae090d298",
      "patch": "@@ -752,14 +752,16 @@ public void resolveVirtualHostWithPathMatchingInRdsResponse() {\n             new io.grpc.xds.RouteMatch(\n                 /* prefix= */ null,\n                 /* path= */ \"/service1/method1\"),\n-            new EnvoyProtoData.RouteAction(\"cl1.googleapis.com\", null)));\n+            new EnvoyProtoData.RouteAction(\n+                TimeUnit.SECONDS.toNanos(15L), \"cl1.googleapis.com\", null)));\n     assertThat(routes.get(1)).isEqualTo(\n         new EnvoyProtoData.Route(\n             // path match with weighted cluster route\n             new io.grpc.xds.RouteMatch(\n                 /* prefix= */ null,\n                 /* path= */ \"/service2/method2\"),\n             new EnvoyProtoData.RouteAction(\n+                TimeUnit.SECONDS.toNanos(15L),\n                 null,\n                 ImmutableList.of(\n                     new EnvoyProtoData.ClusterWeight(\"cl21.googleapis.com\", 30),\n@@ -771,15 +773,16 @@ public void resolveVirtualHostWithPathMatchingInRdsResponse() {\n             new io.grpc.xds.RouteMatch(\n                 /* prefix= */ \"/service1/\",\n                 /* path= */ null),\n-            new EnvoyProtoData.RouteAction(\"cl1.googleapis.com\", null)));\n+            new EnvoyProtoData.RouteAction(\n+                TimeUnit.SECONDS.toNanos(15L), \"cl1.googleapis.com\", null)));\n     assertThat(routes.get(3)).isEqualTo(\n         new EnvoyProtoData.Route(\n             // default match with cluster route\n             new io.grpc.xds.RouteMatch(\n                 /* prefix= */ \"\",\n                 /* path= */ null),\n             new EnvoyProtoData.RouteAction(\n-                \"cluster.googleapis.com\", null)));\n+                TimeUnit.SECONDS.toNanos(15L), \"cluster.googleapis.com\", null)));\n   }\n \n   /**",
      "parent_sha": "5bf68ff28c4dd67c1f44c5d156c73cb2c102c903"
    }
  },
  {
    "oid": "02817e2a9dfe0731579bdca09e02bec6848b40fb",
    "message": "core: Stabilize ManagedChannelBuilder.overrideAuthority\n\nThe CallOptions from #1767 are not included, so this is not enough to resolve\r\nthe issue.",
    "date": "2017-11-17T15:23:35Z",
    "url": "https://github.com/grpc/grpc-java/commit/02817e2a9dfe0731579bdca09e02bec6848b40fb",
    "details": {
      "sha": "53dc49a6ab2e822bcbe63e4a119cb419d16e80cb",
      "filename": "core/src/main/java/io/grpc/ManagedChannelBuilder.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/grpc/grpc-java/blob/02817e2a9dfe0731579bdca09e02bec6848b40fb/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FManagedChannelBuilder.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/02817e2a9dfe0731579bdca09e02bec6848b40fb/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FManagedChannelBuilder.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FManagedChannelBuilder.java?ref=02817e2a9dfe0731579bdca09e02bec6848b40fb",
      "patch": "@@ -135,12 +135,12 @@ public static ManagedChannelBuilder<?> forTarget(String target) {\n    * Overrides the authority used with TLS and HTTP virtual hosting. It does not change what host is\n    * actually connected to. Is commonly in the form {@code host:port}.\n    *\n-   * <p>Should only used by tests.\n+   * <p>This method is intended for testing, but may safely be used outside of tests as an\n+   * alternative to DNS overrides.\n    *\n    * @return this\n    * @since 1.0.0\n    */\n-  @ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/1767\")\n   public abstract T overrideAuthority(String authority);\n \n   /**",
      "parent_sha": "da75b02c8fbe1c92ea7fe972893ae07a3782d395"
    }
  },
  {
    "oid": "ffc64b70bbba109f2a5c6a3f6c1a34ada8504f7c",
    "message": "netty: move connection.addListner inside constructor of NettyServerHandler\n\nFor convenience of implementing max connection idle.",
    "date": "2017-04-13T21:34:18Z",
    "url": "https://github.com/grpc/grpc-java/commit/ffc64b70bbba109f2a5c6a3f6c1a34ada8504f7c",
    "details": {
      "sha": "7681dbd71d88678267776ac8e61dba7518215903",
      "filename": "netty/src/main/java/io/grpc/netty/NettyServerHandler.java",
      "status": "modified",
      "additions": 24,
      "deletions": 18,
      "changes": 42,
      "blob_url": "https://github.com/grpc/grpc-java/blob/ffc64b70bbba109f2a5c6a3f6c1a34ada8504f7c/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FNettyServerHandler.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/ffc64b70bbba109f2a5c6a3f6c1a34ada8504f7c/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FNettyServerHandler.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FNettyServerHandler.java?ref=ffc64b70bbba109f2a5c6a3f6c1a34ada8504f7c",
      "patch": "@@ -173,22 +173,6 @@ static NettyServerHandler newHandler(\n     final KeepAliveEnforcer keepAliveEnforcer = new KeepAliveEnforcer(\n         permitKeepAliveWithoutCalls, permitKeepAliveTimeInNanos, TimeUnit.NANOSECONDS);\n \n-    connection.addListener(new Http2ConnectionAdapter() {\n-      @Override\n-      public void onStreamActive(Http2Stream stream) {\n-        if (connection.numActiveStreams() == 1) {\n-          keepAliveEnforcer.onTransportActive();\n-        }\n-      }\n-\n-      @Override\n-      public void onStreamClosed(Http2Stream stream) {\n-        if (connection.numActiveStreams() == 0) {\n-          keepAliveEnforcer.onTransportIdle();\n-        }\n-      }\n-    });\n-\n     // Create the local flow controller configured to auto-refill the connection window.\n     connection.local().flowController(\n         new DefaultHttp2LocalFlowController(connection, DEFAULT_WINDOW_UPDATE_RATIO, true));\n@@ -205,13 +189,18 @@ public void onStreamClosed(Http2Stream stream) {\n     settings.maxHeaderListSize(maxHeaderListSize);\n \n     return new NettyServerHandler(\n-        transportListener, streamTracerFactories, decoder, encoder, settings, maxMessageSize,\n+        connection,\n+        transportListener,\n+        streamTracerFactories,\n+        decoder, encoder, settings,\n+        maxMessageSize,\n         keepAliveTimeInNanos, keepAliveTimeoutInNanos,\n         maxConnectionAgeInNanos, maxConnectionAgeGraceInNanos,\n         keepAliveEnforcer);\n   }\n \n   private NettyServerHandler(\n+      final Http2Connection connection,\n       ServerTransportListener transportListener,\n       List<ServerStreamTracer.Factory> streamTracerFactories,\n       Http2ConnectionDecoder decoder,\n@@ -221,8 +210,25 @@ private NettyServerHandler(\n       long keepAliveTimeoutInNanos,\n       long maxConnectionAgeInNanos,\n       long maxConnectionAgeGraceInNanos,\n-      KeepAliveEnforcer keepAliveEnforcer) {\n+      final KeepAliveEnforcer keepAliveEnforcer) {\n     super(decoder, encoder, settings);\n+\n+    connection.addListener(new Http2ConnectionAdapter() {\n+      @Override\n+      public void onStreamActive(Http2Stream stream) {\n+        if (connection.numActiveStreams() == 1) {\n+          keepAliveEnforcer.onTransportActive();\n+        }\n+      }\n+\n+      @Override\n+      public void onStreamClosed(Http2Stream stream) {\n+        if (connection.numActiveStreams() == 0) {\n+          keepAliveEnforcer.onTransportIdle();\n+        }\n+      }\n+    });\n+\n     checkArgument(maxMessageSize >= 0, \"maxMessageSize must be >= 0\");\n     this.maxMessageSize = maxMessageSize;\n     this.keepAliveTimeInNanos = keepAliveTimeInNanos;",
      "parent_sha": "be61af42e92b24f1a2455d140040dbfd2b9d1973"
    }
  },
  {
    "oid": "40973aedbef9ebbb69684c424112992d282b2a8c",
    "message": "usage of ErrorProne CheckReturnValue",
    "date": "2022-04-28T20:02:43Z",
    "url": "https://github.com/grpc/grpc-java/commit/40973aedbef9ebbb69684c424112992d282b2a8c",
    "details": {
      "sha": "d89e173822e7162185a57de32dbfb2e69482116e",
      "filename": "binder/src/main/java/io/grpc/binder/SecurityPolicies.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/40973aedbef9ebbb69684c424112992d282b2a8c/binder%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fbinder%2FSecurityPolicies.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/40973aedbef9ebbb69684c424112992d282b2a8c/binder%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fbinder%2FSecurityPolicies.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/binder%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fbinder%2FSecurityPolicies.java?ref=40973aedbef9ebbb69684c424112992d282b2a8c",
      "patch": "@@ -25,12 +25,12 @@\n import android.os.Process;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n+import com.google.errorprone.annotations.CheckReturnValue;\n import io.grpc.ExperimentalApi;\n import io.grpc.Status;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n-import javax.annotation.CheckReturnValue;\n \n /** Static factory methods for creating standard security policies. */\n @CheckReturnValue",
      "parent_sha": "f2348b0157cae21074a48d2c0428c9750fc51b2f"
    }
  },
  {
    "oid": "5eb816b3b145e8f5fe411fd99d28a48a9e583171",
    "message": "services: fix channelz javadoc lint for reference not found (#4920)\n\nReferring to the public abstract class seems to be OK, but referring\r\nto the package private impl trips the linter.",
    "date": "2018-10-09T16:23:16Z",
    "url": "https://github.com/grpc/grpc-java/commit/5eb816b3b145e8f5fe411fd99d28a48a9e583171",
    "details": {
      "sha": "70702a89a04640c94f3783fb06ffdf75bb966db7",
      "filename": "services/src/main/java/io/grpc/services/ChannelzService.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/grpc/grpc-java/blob/5eb816b3b145e8f5fe411fd99d28a48a9e583171/services%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fservices%2FChannelzService.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/5eb816b3b145e8f5fe411fd99d28a48a9e583171/services%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fservices%2FChannelzService.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/services%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fservices%2FChannelzService.java?ref=5eb816b3b145e8f5fe411fd99d28a48a9e583171",
      "patch": "@@ -61,7 +61,7 @@ public static ChannelzService newInstance(int maxPageSize) {\n     this.maxPageSize = maxPageSize;\n   }\n \n-  /** Returns top level channel aka {@link io.grpc.internal.ManagedChannelImpl}. */\n+  /** Returns top level channel aka {@link io.grpc.ManagedChannel}. */\n   @Override\n   public void getTopChannels(\n       GetTopChannelsRequest request, StreamObserver<GetTopChannelsResponse> responseObserver) {\n@@ -72,7 +72,7 @@ public void getTopChannels(\n     responseObserver.onCompleted();\n   }\n \n-  /** Returns a top level channel aka {@link io.grpc.internal.ManagedChannelImpl}. */\n+  /** Returns a top level channel aka {@link io.grpc.ManagedChannel}. */\n   @Override\n   public void getChannel(\n       GetChannelRequest request, StreamObserver<GetChannelResponse> responseObserver) {",
      "parent_sha": "f10676c2b4ac6fa614000fbc306c25c6fabc25c9"
    }
  },
  {
    "oid": "114e1dfbf73a4447fa86d4f89d70b6f453375a48",
    "message": "google-c2p resolver: add authority entry to bootstrap config",
    "date": "2022-09-30T22:25:50Z",
    "url": "https://github.com/grpc/grpc-java/commit/114e1dfbf73a4447fa86d4f89d70b6f453375a48",
    "details": {
      "sha": "cfada001d408f349d8c1016b666a1a5fb37f9c1f",
      "filename": "googleapis/src/main/java/io/grpc/googleapis/GoogleCloudToProdNameResolver.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/grpc/grpc-java/blob/114e1dfbf73a4447fa86d4f89d70b6f453375a48/googleapis%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fgoogleapis%2FGoogleCloudToProdNameResolver.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/114e1dfbf73a4447fa86d4f89d70b6f453375a48/googleapis%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fgoogleapis%2FGoogleCloudToProdNameResolver.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/googleapis%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fgoogleapis%2FGoogleCloudToProdNameResolver.java?ref=114e1dfbf73a4447fa86d4f89d70b6f453375a48",
      "patch": "@@ -191,9 +191,14 @@ public void run() {\n     serverBuilder.put(\"channel_creds\",\n         ImmutableList.of(ImmutableMap.of(\"type\", \"google_default\")));\n     serverBuilder.put(\"server_features\", ImmutableList.of(\"xds_v3\"));\n+    ImmutableMap.Builder<String, Object> authoritiesBuilder = ImmutableMap.builder();\n+    authoritiesBuilder.put(\n+        \"traffic-director-c2p.xds.googleapis.com\",\n+        ImmutableMap.of(\"xds_servers\", ImmutableList.of(serverBuilder.buildOrThrow())));\n     return ImmutableMap.of(\n         \"node\", nodeBuilder.buildOrThrow(),\n-        \"xds_servers\", ImmutableList.of(serverBuilder.buildOrThrow()));\n+        \"xds_servers\", ImmutableList.of(serverBuilder.buildOrThrow()),\n+        \"authorities\", authoritiesBuilder.buildOrThrow());\n   }\n \n   @Override",
      "parent_sha": "85bdca45fa989b05ab7f1dae3e58403ff9c3dc7a"
    }
  },
  {
    "oid": "ea4eed57b95d26d219f1a2c00d39e92f25ed4a65",
    "message": "Reduce memory usage in test.",
    "date": "2015-09-24T22:06:35Z",
    "url": "https://github.com/grpc/grpc-java/commit/ea4eed57b95d26d219f1a2c00d39e92f25ed4a65",
    "details": {
      "sha": "3a59f7dbf75afb0828061107bb47e8225975a6e0",
      "filename": "interop-testing/src/test/java/io/grpc/testing/integration/Http2OkHttpTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/ea4eed57b95d26d219f1a2c00d39e92f25ed4a65/interop-testing%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FHttp2OkHttpTest.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/ea4eed57b95d26d219f1a2c00d39e92f25ed4a65/interop-testing%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FHttp2OkHttpTest.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/interop-testing%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FHttp2OkHttpTest.java?ref=ea4eed57b95d26d219f1a2c00d39e92f25ed4a65",
      "patch": "@@ -104,7 +104,7 @@ public void receivedDataForFinishedStream() throws Exception {\n     Messages.StreamingOutputCallRequest.Builder requestBuilder =\n         Messages.StreamingOutputCallRequest.newBuilder()\n             .setResponseType(Messages.PayloadType.COMPRESSABLE);\n-    for (int i = 0; i < 10000; i++) {\n+    for (int i = 0; i < 1000; i++) {\n       requestBuilder.addResponseParameters(responseParameters);\n     }\n ",
      "parent_sha": "5fc954bf047a7fc19be0af4ecf992bb305a10acb"
    }
  },
  {
    "oid": "bd2f3c5b62105983b8f5f8c0510a7f7bc7421c76",
    "message": "examples: Fix comment in RouteGuideServer.java (#5670)",
    "date": "2019-05-06T21:23:49Z",
    "url": "https://github.com/grpc/grpc-java/commit/bd2f3c5b62105983b8f5f8c0510a7f7bc7421c76",
    "details": {
      "sha": "051e2551b22a2b18565f8274a0991c9a638da68f",
      "filename": "examples/src/main/java/io/grpc/examples/routeguide/RouteGuideServer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/bd2f3c5b62105983b8f5f8c0510a7f7bc7421c76/examples%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fexamples%2Frouteguide%2FRouteGuideServer.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/bd2f3c5b62105983b8f5f8c0510a7f7bc7421c76/examples%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fexamples%2Frouteguide%2FRouteGuideServer.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/examples%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fexamples%2Frouteguide%2FRouteGuideServer.java?ref=bd2f3c5b62105983b8f5f8c0510a7f7bc7421c76",
      "patch": "@@ -71,7 +71,7 @@ public void start() throws IOException {\n     Runtime.getRuntime().addShutdownHook(new Thread() {\n       @Override\n       public void run() {\n-        // Use stderr here since the logger may has been reset by its JVM shutdown hook.\n+        // Use stderr here since the logger may have been reset by its JVM shutdown hook.\n         System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n         RouteGuideServer.this.stop();\n         System.err.println(\"*** server shut down\");",
      "parent_sha": "72553433b3bfeab09b14c7bcc8581c820022ae9a"
    }
  },
  {
    "oid": "461dc85ba61f654db4b50d0dd5a750ea52960046",
    "message": "api: Make offload executor's purpose more clear\n\nBlocking can be confused with the blocking stub, which is unrelated. I'm\npurposefully not saying \"it is used only for X,\" as that isn't what we\nneed from the API. But it is still helpful to users to describe the\nsorts of things that use it.\n\nFixes #10508",
    "date": "2023-09-06T14:44:35Z",
    "url": "https://github.com/grpc/grpc-java/commit/461dc85ba61f654db4b50d0dd5a750ea52960046",
    "details": {
      "sha": "2fb9252fbbe4977b878b55faf30a6470d5225073",
      "filename": "api/src/main/java/io/grpc/ManagedChannelBuilder.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/grpc/grpc-java/blob/461dc85ba61f654db4b50d0dd5a750ea52960046/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FManagedChannelBuilder.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/461dc85ba61f654db4b50d0dd5a750ea52960046/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FManagedChannelBuilder.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FManagedChannelBuilder.java?ref=461dc85ba61f654db4b50d0dd5a750ea52960046",
      "patch": "@@ -117,7 +117,9 @@ public static ManagedChannelBuilder<?> forTarget(String target) {\n   public abstract T executor(Executor executor);\n \n   /**\n-   * Provides a custom executor that will be used for operations that block or are expensive.\n+   * Provides a custom executor that will be used for operations that block or are expensive, to\n+   * avoid blocking asynchronous code paths. For example, DNS queries and OAuth token fetching over\n+   * HTTP could use this executor.\n    *\n    * <p>It's an optional parameter. If the user has not provided an executor when the channel is\n    * built, the builder will use a static cached thread pool.",
      "parent_sha": "9ab35b05de0709c0547e38bb0f2d3805dd5618e2"
    }
  },
  {
    "oid": "9a2db9d7d9be0e81f68c56291a0183b14fe1c1a6",
    "message": "Make ChannelImpl.obtainActiveTransport's fast path lock-free\n\nResolves #479",
    "date": "2015-06-26T19:19:41Z",
    "url": "https://github.com/grpc/grpc-java/commit/9a2db9d7d9be0e81f68c56291a0183b14fe1c1a6",
    "details": {
      "sha": "dacd911468905dc16f75b84f5a44ff8ea2c3333d",
      "filename": "core/src/main/java/io/grpc/ChannelImpl.java",
      "status": "modified",
      "additions": 36,
      "deletions": 20,
      "changes": 56,
      "blob_url": "https://github.com/grpc/grpc-java/blob/9a2db9d7d9be0e81f68c56291a0183b14fe1c1a6/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FChannelImpl.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/9a2db9d7d9be0e81f68c56291a0183b14fe1c1a6/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FChannelImpl.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FChannelImpl.java?ref=9a2db9d7d9be0e81f68c56291a0183b14fe1c1a6",
      "patch": "@@ -88,9 +88,11 @@ private static class NoopClientStream implements ClientStream {\n    */\n   @GuardedBy(\"this\")\n   private Collection<ClientTransport> transports = new ArrayList<ClientTransport>();\n-  /** The transport for new outgoing requests. */\n-  @GuardedBy(\"this\")\n-  private ClientTransport activeTransport;\n+  /**\n+   * The transport for new outgoing requests. 'this' lock must be held when assigning to\n+   * activeTransport.\n+   */\n+  private volatile ClientTransport activeTransport;\n   @GuardedBy(\"this\")\n   private boolean shutdown;\n   @GuardedBy(\"this\")\n@@ -202,25 +204,39 @@ public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(MethodDescriptor<ReqT, Resp\n     return new CallImpl<ReqT, RespT>(method, new SerializingExecutor(executor));\n   }\n \n-  private synchronized ClientTransport obtainActiveTransport() {\n-    if (shutdown) {\n-      return null;\n+  private ClientTransport obtainActiveTransport() {\n+    ClientTransport savedActiveTransport = activeTransport;\n+    if (savedActiveTransport != null) {\n+      return savedActiveTransport;\n     }\n-    if (activeTransport != null) {\n-      return activeTransport;\n-    }\n-    // Set activeTransport and add to transports before start() in case start() calls\n-    // transportShutdown() and transportTerminated()\n-    activeTransport = transportFactory.newClientTransport();\n-    transports.add(activeTransport);\n-    try {\n-      activeTransport.start(new TransportListener(activeTransport));\n-    } catch (RuntimeException ex) {\n-      transports.remove(activeTransport);\n-      activeTransport = null;\n-      throw ex;\n+    synchronized (this) {\n+      if (shutdown) {\n+        return null;\n+      }\n+      savedActiveTransport = activeTransport;\n+      if (savedActiveTransport != null) {\n+        return savedActiveTransport;\n+      }\n+      ClientTransport newActiveTransport = transportFactory.newClientTransport();\n+      transports.add(newActiveTransport);\n+      boolean failed = true;\n+      try {\n+        newActiveTransport.start(new TransportListener(newActiveTransport));\n+        failed = false;\n+      } finally {\n+        if (failed) {\n+          transports.remove(newActiveTransport);\n+        }\n+      }\n+      // It's possible that start() called transportShutdown() and transportTerminated(). If so, we\n+      // wouldn't want to make it the active transport.\n+      if (transports.contains(newActiveTransport)) {\n+        // start() must return before we set activeTransport, since activeTransport is accessed\n+        // without a lock.\n+        activeTransport = newActiveTransport;\n+      }\n+      return newActiveTransport;\n     }\n-    return activeTransport;\n   }\n \n   private class TransportListener implements ClientTransport.Listener {",
      "parent_sha": "6e406ac4a57ccc99858c95d66beaff7bc88a688e"
    }
  },
  {
    "oid": "fc03f2be9d3e0858d207015a5ff013a2bf03a77f",
    "message": "Remove extra parenthesis",
    "date": "2023-10-10T00:17:50Z",
    "url": "https://github.com/grpc/grpc-java/commit/fc03f2be9d3e0858d207015a5ff013a2bf03a77f",
    "details": {
      "sha": "c09a0cfeab99a3016819c4a6e3404a05f86afd2d",
      "filename": "interop-testing/src/test/java/io/grpc/testing/integration/StressTestClientTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/fc03f2be9d3e0858d207015a5ff013a2bf03a77f/interop-testing%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FStressTestClientTest.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/fc03f2be9d3e0858d207015a5ff013a2bf03a77f/interop-testing%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FStressTestClientTest.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/interop-testing%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FStressTestClientTest.java?ref=fc03f2be9d3e0858d207015a5ff013a2bf03a77f",
      "patch": "@@ -67,7 +67,7 @@ public void defaults() {\n     assertEquals(1, client.stubsPerChannel());\n     assertEquals(8081, client.metricsPort());\n     assertEquals(-1, client.metricsLogRateSecs());\n-    assertNull((client.customCredentialsType()));\n+    assertNull(client.customCredentialsType());\n   }\n \n   @Test",
      "parent_sha": "501246374c46fc8e33e9c4ad8a5e4d5020870da7"
    }
  },
  {
    "oid": "d4615ff251f3ab8415df4bdd833e737f3f8abbf7",
    "message": "Fix flaky deadline test",
    "date": "2016-03-29T18:20:32Z",
    "url": "https://github.com/grpc/grpc-java/commit/d4615ff251f3ab8415df4bdd833e737f3f8abbf7",
    "details": {
      "sha": "d93c387cca20b1a75899cc48efaaa168ba397503",
      "filename": "interop-testing/src/test/java/io/grpc/stub/StubConfigTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/grpc/grpc-java/blob/d4615ff251f3ab8415df4bdd833e737f3f8abbf7/interop-testing%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fstub%2FStubConfigTest.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/d4615ff251f3ab8415df4bdd833e737f3f8abbf7/interop-testing%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fstub%2FStubConfigTest.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/interop-testing%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fstub%2FStubConfigTest.java?ref=d4615ff251f3ab8415df4bdd833e737f3f8abbf7",
      "patch": "@@ -38,8 +38,9 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNotSame;\n import static org.junit.Assert.assertNull;\n-import static org.mockito.Mockito.any;\n-import static org.mockito.Mockito.same;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.same;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n@@ -110,8 +111,9 @@ public void testConfigureDeadlineNanoTime() {\n     TestServiceGrpc.TestServiceBlockingStub reconfiguredStub = stub.withDeadlineNanoTime(deadline);\n     // New altered config\n     assertNotNull(reconfiguredStub.getCallOptions().getDeadlineNanoTime());\n-    long delta = MILLISECONDS.toNanos(20);\n-    assertEquals(deadline, reconfiguredStub.getCallOptions().getDeadlineNanoTime(), delta);\n+    long maxDelta = MILLISECONDS.toNanos(20);\n+    long actualDelta = Math.abs(reconfiguredStub.getCallOptions().getDeadlineNanoTime() - deadline);\n+    assertTrue(maxDelta + \" < \" + actualDelta, maxDelta >= actualDelta);\n     // Default config unchanged\n     assertNull(stub.getCallOptions().getDeadlineNanoTime());\n   }",
      "parent_sha": "7d49990783dd3db1d2382ae7cf2fde93bb697745"
    }
  },
  {
    "oid": "f2e34d772bb5d9294a633b3cf06bac63d33c889b",
    "message": "testing: Wait for TIMEOUT_MS instead of 100ms\n\nThe transport test flakes at the timeout(100) about .05% of the time.\nThere's really no reason it should have a smaller timeout compared to\nthe other timeouts.\n\nThe timeout(250) wasn't flaking at all, but it should follow the\nconvention.",
    "date": "2018-10-12T19:18:04Z",
    "url": "https://github.com/grpc/grpc-java/commit/f2e34d772bb5d9294a633b3cf06bac63d33c889b",
    "details": {
      "sha": "fc516f41baf82ca466556fc3009e04298b60365f",
      "filename": "testing/src/main/java/io/grpc/internal/testing/AbstractTransportTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/grpc/grpc-java/blob/f2e34d772bb5d9294a633b3cf06bac63d33c889b/testing%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2Ftesting%2FAbstractTransportTest.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/f2e34d772bb5d9294a633b3cf06bac63d33c889b/testing%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2Ftesting%2FAbstractTransportTest.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/testing%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2Ftesting%2FAbstractTransportTest.java?ref=f2e34d772bb5d9294a633b3cf06bac63d33c889b",
      "patch": "@@ -279,7 +279,7 @@ public void frameAfterRstStreamShouldNotBreakClientChannel() throws Exception {\n     serverStreamCreation.stream.writeHeaders(new Metadata());\n     serverStreamCreation.stream.flush();\n \n-    verify(mockClientStreamListener2, timeout(250)).headersRead(any(Metadata.class));\n+    verify(mockClientStreamListener2, timeout(TIMEOUT_MS)).headersRead(any(Metadata.class));\n   }\n \n   @Test\n@@ -1812,7 +1812,7 @@ private static void startTransport(\n       ManagedClientTransport clientTransport,\n       ManagedClientTransport.Listener listener) {\n     runIfNotNull(clientTransport.start(listener));\n-    verify(listener, timeout(100)).transportReady();\n+    verify(listener, timeout(TIMEOUT_MS)).transportReady();\n   }\n \n   private static class MockServerListener implements ServerListener {",
      "parent_sha": "4c5dabf7050a05652bc443f873fc82682fbda1b6"
    }
  },
  {
    "oid": "42b32c64f567a5477ad00d01c41bf3cf5b3db409",
    "message": "interop-testing: Add a configurable warmup phase to fallback test client",
    "date": "2022-03-04T20:18:07Z",
    "url": "https://github.com/grpc/grpc-java/commit/42b32c64f567a5477ad00d01c41bf3cf5b3db409",
    "details": {
      "sha": "8eea59e89525c9a2e1a85c90e2ab9890c5b6fca5",
      "filename": "interop-testing/src/main/java/io/grpc/testing/integration/GrpclbFallbackTestClient.java",
      "status": "modified",
      "additions": 35,
      "deletions": 6,
      "changes": 41,
      "blob_url": "https://github.com/grpc/grpc-java/blob/42b32c64f567a5477ad00d01c41bf3cf5b3db409/interop-testing%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FGrpclbFallbackTestClient.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/42b32c64f567a5477ad00d01c41bf3cf5b3db409/interop-testing%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FGrpclbFallbackTestClient.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/interop-testing%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FGrpclbFallbackTestClient.java?ref=42b32c64f567a5477ad00d01c41bf3cf5b3db409",
      "patch": "@@ -75,6 +75,7 @@ public void run() {\n   private String customCredentialsType;\n   private String testCase;\n   private Boolean skipNetCmd = false;\n+  private int numWarmupRpcs;\n \n   private ManagedChannel channel;\n   private TestServiceGrpc.TestServiceBlockingStub blockingStub;\n@@ -111,6 +112,8 @@ private void parseArgs(String[] args) {\n         customCredentialsType = value;\n       } else if (\"skip_net_cmd\".equals(key)) {\n         skipNetCmd = Boolean.valueOf(value);\n+      } else if (\"num_warmup_rpcs\".equals(key)) {\n+        numWarmupRpcs = Integer.valueOf(value);\n       } else {\n         System.err.println(\"Unknown argument: \" + key);\n         usage = true;\n@@ -136,6 +139,10 @@ private void parseArgs(String[] args) {\n           + \"shell command to allow setting the net config outside of the test \"\n           + \"client. Default: \"\n           + c.skipNetCmd\n+          + \"\\n  --num_warmup_rpcs                     Number of RPCs to perform \"\n+          + \"on a separate warmup channel before the actual test runs (each warmup \"\n+          + \"RPC uses a 1 second deadline). Default: \"\n+          + c.numWarmupRpcs\n           + \"\\n  --test_case=TEST_CASE        Test case to run. Valid options are:\"\n           + \"\\n      fast_fallback_before_startup : fallback before LB connection\"\n           + \"\\n      fast_fallback_after_startup : fallback after startup due to \"\n@@ -197,14 +204,15 @@ private void runShellCmd(String cmd) throws Exception {\n     assertEquals(0, exitCode);\n   }\n \n-  private GrpclbRouteType doRpcAndGetPath(Deadline deadline) {\n+  private GrpclbRouteType doRpcAndGetPath(\n+      TestServiceGrpc.TestServiceBlockingStub stub, Deadline deadline) {\n     logger.info(\"doRpcAndGetPath deadline: \" + deadline);\n     final SimpleRequest request = SimpleRequest.newBuilder()\n         .setFillGrpclbRouteType(true)\n         .build();\n     GrpclbRouteType result = GrpclbRouteType.GRPCLB_ROUTE_TYPE_UNKNOWN;\n     try {\n-      SimpleResponse response = blockingStub\n+      SimpleResponse response = stub\n           .withDeadline(deadline)\n           .unaryCall(request);\n       result = response.getGrpclbRouteType();\n@@ -226,7 +234,7 @@ private void waitForFallbackAndDoRpcs(Deadline fallbackDeadline) throws Exceptio\n     boolean fallBack = false;\n     while (!fallbackDeadline.isExpired()) {\n       GrpclbRouteType grpclbRouteType = doRpcAndGetPath(\n-          Deadline.after(1, TimeUnit.SECONDS));\n+          blockingStub, Deadline.after(1, TimeUnit.SECONDS));\n       if (grpclbRouteType == GrpclbRouteType.GRPCLB_ROUTE_TYPE_BACKEND) {\n         throw new AssertionError(\"Got grpclb route type backend. Backends are \"\n             + \"supposed to be unreachable, so this test is broken\");\n@@ -247,7 +255,7 @@ private void waitForFallbackAndDoRpcs(Deadline fallbackDeadline) throws Exceptio\n     for (int i = 0; i < 30; i++) {\n       assertEquals(\n           GrpclbRouteType.GRPCLB_ROUTE_TYPE_FALLBACK,\n-          doRpcAndGetPath(Deadline.after(20, TimeUnit.SECONDS)));\n+          doRpcAndGetPath(blockingStub, Deadline.after(20, TimeUnit.SECONDS)));\n       Thread.sleep(1000);\n     }\n   }\n@@ -270,7 +278,7 @@ private void runFastFallbackAfterStartup() throws Exception {\n     initStub();\n     assertEquals(\n         GrpclbRouteType.GRPCLB_ROUTE_TYPE_BACKEND,\n-        doRpcAndGetPath(Deadline.after(20, TimeUnit.SECONDS)));\n+        doRpcAndGetPath(blockingStub, Deadline.after(20, TimeUnit.SECONDS)));\n     runShellCmd(unrouteLbAndBackendAddrsCmd);\n     final Deadline fallbackDeadline = Deadline.after(40, TimeUnit.SECONDS);\n     waitForFallbackAndDoRpcs(fallbackDeadline);\n@@ -280,13 +288,34 @@ private void runSlowFallbackAfterStartup() throws Exception {\n     initStub();\n     assertEquals(\n         GrpclbRouteType.GRPCLB_ROUTE_TYPE_BACKEND,\n-        doRpcAndGetPath(Deadline.after(20, TimeUnit.SECONDS)));\n+        doRpcAndGetPath(blockingStub, Deadline.after(20, TimeUnit.SECONDS)));\n     runShellCmd(blackholeLbAndBackendAddrsCmd);\n     final Deadline fallbackDeadline = Deadline.after(40, TimeUnit.SECONDS);\n     waitForFallbackAndDoRpcs(fallbackDeadline);\n   }\n \n+  // The purpose of this warmup method is to get potentially expensive one-per-process\n+  // initialization out of the way, so that we can use aggressive timeouts in the actual\n+  // test cases. Note that the warmup phase is done using a separate channel from the\n+  // actual test cases, so that we don't affect the states of LB policies in the channel\n+  // of the actual test case.\n+  private void warmup() throws Exception {\n+    logger.info(\"Begin warmup, performing \" + numWarmupRpcs + \" RPCs on the warmup channel\");\n+    ManagedChannel channel = createChannel();\n+    TestServiceGrpc.TestServiceBlockingStub stub = TestServiceGrpc.newBlockingStub(channel);\n+    for (int i = 0; i < numWarmupRpcs; i++) {\n+      doRpcAndGetPath(stub, Deadline.after(1, TimeUnit.SECONDS));\n+    }\n+    try {\n+      channel.shutdownNow();\n+      channel.awaitTermination(1, TimeUnit.SECONDS);\n+    } catch (Exception ex) {\n+      throw new RuntimeException(ex);\n+    }\n+  }\n+\n   private void run() throws Exception {\n+    warmup();\n     logger.info(\"Begin test case: \" + testCase);\n     if (testCase.equals(\"fast_fallback_before_startup\")) {\n       runFastFallbackBeforeStartup();",
      "parent_sha": "d00e7ee375c08174d32405fb874d4171ba037e95"
    }
  },
  {
    "oid": "2cd45e7a247a425040913d0a413cb8a98128ac52",
    "message": "rls: forcefully close rls channel when lb is shutdown\n\nRLS RPC deadline is configured by service config, and could be extremely long. When RLS lb is shutdown, any pending RLS PRC should be cancelled. Now using shutdownNow() to forcefully close the RLS channel.",
    "date": "2021-02-08T23:52:53Z",
    "url": "https://github.com/grpc/grpc-java/commit/2cd45e7a247a425040913d0a413cb8a98128ac52",
    "details": {
      "sha": "cff7ece156982cff9cc2b307928601990f117b3b",
      "filename": "rls/src/main/java/io/grpc/rls/CachingRlsLbClient.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/2cd45e7a247a425040913d0a413cb8a98128ac52/rls%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Frls%2FCachingRlsLbClient.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/2cd45e7a247a425040913d0a413cb8a98128ac52/rls%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Frls%2FCachingRlsLbClient.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/rls%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Frls%2FCachingRlsLbClient.java?ref=2cd45e7a247a425040913d0a413cb8a98128ac52",
      "patch": "@@ -253,7 +253,7 @@ void close() {\n       linkedHashLruCache.close();\n       // TODO(creamsoup) maybe cancel all pending requests\n       pendingCallCache.clear();\n-      rlsChannel.shutdown();\n+      rlsChannel.shutdownNow();\n       rlsPicker.close();\n     }\n   }",
      "parent_sha": "b1daad6f30f064d8b1fd423fc9051fc345cb310f"
    }
  },
  {
    "oid": "25531d6257b7a81505b4dd856b8ae5a14555b61a",
    "message": "binder: Invoke onTransportReady() in a round-robin fashion. (#8835)\n\nAlso call onTransportReady() only if isReady() still holds by the time\r\nwe get to a given Inbound. This dramatically reduces timeouts and\r\nimproves throughput when flow control has kicked in.\r\n\r\nThis approach is still not completely fair since each ongoing call might\r\nconsume a different amount of window on its turn, but because of the way\r\nOutbound#writeMessageData() and BlockPool already work, everyone gets to\r\nsend at least 16kb.",
    "date": "2022-01-14T22:06:14Z",
    "url": "https://github.com/grpc/grpc-java/commit/25531d6257b7a81505b4dd856b8ae5a14555b61a",
    "details": {
      "sha": "219651a8b698650b6d2b53a0d24c2394c5c9c75f",
      "filename": "binder/src/main/java/io/grpc/binder/internal/BinderTransport.java",
      "status": "modified",
      "additions": 17,
      "deletions": 3,
      "changes": 20,
      "blob_url": "https://github.com/grpc/grpc-java/blob/25531d6257b7a81505b4dd856b8ae5a14555b61a/binder%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fbinder%2Finternal%2FBinderTransport.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/25531d6257b7a81505b4dd856b8ae5a14555b61a/binder%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fbinder%2Finternal%2FBinderTransport.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/binder%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fbinder%2Finternal%2FBinderTransport.java?ref=25531d6257b7a81505b4dd856b8ae5a14555b61a",
      "patch": "@@ -60,6 +60,8 @@\n import io.grpc.internal.StatsTraceContext;\n import io.grpc.internal.TimeProvider;\n import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.NoSuchElementException;\n@@ -186,6 +188,9 @@ protected enum TransportState {\n \n   protected final ConcurrentHashMap<Integer, Inbound<?>> ongoingCalls;\n \n+  @GuardedBy(\"this\")\n+  private final LinkedHashSet<Integer> callIdsToNotifyWhenReady = new LinkedHashSet<>();\n+\n   @GuardedBy(\"this\")\n   protected Attributes attributes;\n \n@@ -529,9 +534,18 @@ final void handleAcknowledgedBytes(long numBytes) {\n       logger.log(\n           Level.FINE,\n           \"handleAcknowledgedBytes: Transmit Window No-Longer Full. Unblock calls: \" + this);\n-      // We're ready again, and need to poke any waiting transactions.\n-      for (Inbound<?> inbound : ongoingCalls.values()) {\n-        inbound.onTransportReady();\n+\n+      // The LinkedHashSet contract guarantees that an id already present in this collection will\n+      // not lose its priority if we re-insert it here.\n+      callIdsToNotifyWhenReady.addAll(ongoingCalls.keySet());\n+\n+      Iterator<Integer> i = callIdsToNotifyWhenReady.iterator();\n+      while (isReady() && i.hasNext()) {\n+        Inbound<?> inbound = ongoingCalls.get(i.next());\n+        i.remove();\n+        if (inbound != null) { // Calls can be removed out from under us.\n+          inbound.onTransportReady();\n+        }\n       }\n     }\n   }",
      "parent_sha": "e2794799080103095b73913d77c10fdf20063313"
    }
  },
  {
    "oid": "1ca8bda17f83e114e0aa48b6d79d96476b72a36a",
    "message": "xds: fix mistake of taking wrong argument in log message (#7653)",
    "date": "2020-11-21T07:17:03Z",
    "url": "https://github.com/grpc/grpc-java/commit/1ca8bda17f83e114e0aa48b6d79d96476b72a36a",
    "details": {
      "sha": "f9495259251ca8cc40746ab1601fb79f60028136",
      "filename": "xds/src/main/java/io/grpc/xds/AbstractXdsClient.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/1ca8bda17f83e114e0aa48b6d79d96476b72a36a/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FAbstractXdsClient.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/1ca8bda17f83e114e0aa48b6d79d96476b72a36a/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FAbstractXdsClient.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FAbstractXdsClient.java?ref=1ca8bda17f83e114e0aa48b6d79d96476b72a36a",
      "patch": "@@ -709,7 +709,7 @@ void sendDiscoveryRequest(ResourceType type, String versionInfo, Collection<Stri\n       }\n       DiscoveryRequest request = builder.build();\n       requestWriter.onNext(request);\n-      logger.log(XdsLogLevel.DEBUG, \"Sent DiscoveryRequest\\n{0}\", respPrinter);\n+      logger.log(XdsLogLevel.DEBUG, \"Sent DiscoveryRequest\\n{0}\", request);\n     }\n \n     @Override",
      "parent_sha": "a7530efd6ebbe4e255e1e5eef06e76dec2e8708c"
    }
  },
  {
    "oid": "02cc5217a244173cdeab50e8012ebc2a4b3a2e8b",
    "message": "Fixing @GuardedBy annotation to use the correct lock name.",
    "date": "2015-01-22T20:33:24Z",
    "url": "https://github.com/grpc/grpc-java/commit/02cc5217a244173cdeab50e8012ebc2a4b3a2e8b",
    "details": {
      "sha": "fb91939d90fc49f2878e1742abd359542073b9ef",
      "filename": "okhttp/src/main/java/com/google/net/stubby/transport/okhttp/OkHttpClientStream.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/grpc/grpc-java/blob/02cc5217a244173cdeab50e8012ebc2a4b3a2e8b/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fnet%2Fstubby%2Ftransport%2Fokhttp%2FOkHttpClientStream.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/02cc5217a244173cdeab50e8012ebc2a4b3a2e8b/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fnet%2Fstubby%2Ftransport%2Fokhttp%2FOkHttpClientStream.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fnet%2Fstubby%2Ftransport%2Fokhttp%2FOkHttpClientStream.java?ref=02cc5217a244173cdeab50e8012ebc2a4b3a2e8b",
      "patch": "@@ -63,9 +63,9 @@ static OkHttpClientStream newStream(ClientStreamListener listener,\n     return new OkHttpClientStream(listener, frameWriter, transport, outboundFlow);\n   }\n \n-  @GuardedBy(\"executorLock\")\n+  @GuardedBy(\"lock\")\n   private int window = OkHttpClientTransport.DEFAULT_INITIAL_WINDOW_SIZE;\n-  @GuardedBy(\"executorLock\")\n+  @GuardedBy(\"lock\")\n   private int processedWindow = OkHttpClientTransport.DEFAULT_INITIAL_WINDOW_SIZE;\n   private final AsyncFrameWriter frameWriter;\n   private final OutboundFlowController outboundFlow;\n@@ -101,7 +101,7 @@ public void transportHeadersReceived(List<Header> headers, boolean endOfStream)\n   }\n \n   /**\n-   * We synchronized on \"executorLock\" for delivering frames and updating window size, so that\n+   * We synchronized on \"lock\" for delivering frames and updating window size, so that\n    * the future listeners (executed by synchronizedExecutor) will not be executed in the same time.\n    */\n   public void transportDataReceived(okio.Buffer frame, boolean endOfStream) {",
      "parent_sha": "de3a13164f997c3c9316e451ccba1ceb49e2be49"
    }
  },
  {
    "oid": "8b4ecad497d0d8fcdd1d120d1117cc60886425cb",
    "message": "Use \"/\" instead of \".\" as the separator between service name and client name.\n\nChange from /Service.method to /Service/method.\n\nquote from the spec:\nMethod (required): a path identifying the operation to perform on the\nspecified host, conforming to RFC 3986 sec 3.3. E.g\n\u201c/calendar.v1/ListEvents\u201d\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=78288091",
    "date": "2015-01-08T22:42:57Z",
    "url": "https://github.com/grpc/grpc-java/commit/8b4ecad497d0d8fcdd1d120d1117cc60886425cb",
    "details": {
      "sha": "56b14ad2a867af084ad77266a1318138b3fda416",
      "filename": "stub/src/main/java/com/google/net/stubby/stub/Calls.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/8b4ecad497d0d8fcdd1d120d1117cc60886425cb/stub%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fnet%2Fstubby%2Fstub%2FCalls.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/8b4ecad497d0d8fcdd1d120d1117cc60886425cb/stub%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fnet%2Fstubby%2Fstub%2FCalls.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/stub%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fnet%2Fstubby%2Fstub%2FCalls.java?ref=8b4ecad497d0d8fcdd1d120d1117cc60886425cb",
      "patch": "@@ -36,7 +36,7 @@ public static <RequestT, ResponseT> MethodDescriptor<RequestT, ResponseT> create\n       String fullServiceName, Method method) {\n     // TODO(user): if timeout is not defined in proto file, use a default timeout here.\n     // If timeout is defined in proto file, Method should carry the timeout.\n-    return MethodDescriptor.create(method.getType(), fullServiceName + \".\" + method.getName(),\n+    return MethodDescriptor.create(method.getType(), fullServiceName + \"/\" + method.getName(),\n         1, TimeUnit.SECONDS, method.getRequestMarshaller(), method.getResponseMarshaller());\n   }\n ",
      "parent_sha": "1e55c6e3f18431f69f6ab12687fcf373eb17b9cf"
    }
  },
  {
    "oid": "23e2df9a67f241e4f483b4b6abb8c59e134a9a41",
    "message": "Allowing AbstractBufferingHandler to be extended.",
    "date": "2015-10-29T18:06:09Z",
    "url": "https://github.com/grpc/grpc-java/commit/23e2df9a67f241e4f483b4b6abb8c59e134a9a41",
    "details": {
      "sha": "3d8dbac1d94e6c2a45bbaf4906c8e4fc9e54f1d3",
      "filename": "netty/src/main/java/io/grpc/netty/ProtocolNegotiators.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/23e2df9a67f241e4f483b4b6abb8c59e134a9a41/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FProtocolNegotiators.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/23e2df9a67f241e4f483b4b6abb8c59e134a9a41/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FProtocolNegotiators.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fnetty%2FProtocolNegotiators.java?ref=23e2df9a67f241e4f483b4b6abb8c59e134a9a41",
      "patch": "@@ -305,7 +305,7 @@ public abstract static class AbstractBufferingHandler extends ChannelDuplexHandl\n      * @param handlers the ChannelHandlers are added to the pipeline on channelRegistered and\n      *                 before this handler.\n      */\n-    AbstractBufferingHandler(ChannelHandler... handlers) {\n+    protected AbstractBufferingHandler(ChannelHandler... handlers) {\n       this.handlers = handlers;\n     }\n ",
      "parent_sha": "52c9aac1c10859a877cbc67f366b0c24a04cc55f"
    }
  },
  {
    "oid": "06d529669a319bc5ad16a7d5e165fbe183887b83",
    "message": "xds: do not log onError status if RPC stream was shutted down by client (#6541)",
    "date": "2019-12-18T17:01:29Z",
    "url": "https://github.com/grpc/grpc-java/commit/06d529669a319bc5ad16a7d5e165fbe183887b83",
    "details": {
      "sha": "7869599c81bffb3b99f7b1c92bab1dcc19eadb0b",
      "filename": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/grpc/grpc-java/blob/06d529669a319bc5ad16a7d5e165fbe183887b83/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FXdsClientImpl.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/06d529669a319bc5ad16a7d5e165fbe183887b83/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FXdsClientImpl.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FXdsClientImpl.java?ref=06d529669a319bc5ad16a7d5e165fbe183887b83",
      "patch": "@@ -152,6 +152,7 @@ final class XdsClientImpl extends XdsClient {\n \n   @Override\n   void shutdown() {\n+    logger.log(Level.INFO, \"Shutting down XdsClient\");\n     channel.shutdown();\n     if (adsStream != null) {\n       adsStream.close(Status.CANCELLED.withDescription(\"shutdown\").asException());\n@@ -884,11 +885,11 @@ public void run() {\n     }\n \n     private void handleStreamClosed(Status error) {\n-      logger.log(Level.INFO, error.getDescription(), error.getCause());\n       checkArgument(!error.isOk(), \"unexpected OK status\");\n       if (closed) {\n         return;\n       }\n+      logger.log(Level.FINE, error.getDescription(), error.getCause());\n       closed = true;\n       cleanUp();\n       if (responseReceived || retryBackoffPolicy == null) {",
      "parent_sha": "212da14200f9a5dab25ed6a298c3edcc24ea8eee"
    }
  },
  {
    "oid": "7fff088e1974deb0bbb1f9ff573b39c50ef7c4cc",
    "message": "Fix a javadoc warning",
    "date": "2015-07-07T23:02:47Z",
    "url": "https://github.com/grpc/grpc-java/commit/7fff088e1974deb0bbb1f9ff573b39c50ef7c4cc",
    "details": {
      "sha": "0c86d6a97f7390406616ad247a6b0077d6c994c6",
      "filename": "core/src/main/java/io/grpc/Channel.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/7fff088e1974deb0bbb1f9ff573b39c50ef7c4cc/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FChannel.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/7fff088e1974deb0bbb1f9ff573b39c50ef7c4cc/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FChannel.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FChannel.java?ref=7fff088e1974deb0bbb1f9ff573b39c50ef7c4cc",
      "patch": "@@ -53,7 +53,7 @@ public abstract class Channel {\n    *\n    * @param methodDescriptor describes the name and parameter types of the operation to call.\n    * @return a {@link ClientCall} bound to the specified method.\n-   * @deprecated use {@link newCall(MethodDescriptor, CallOptions)}\n+   * @deprecated use {@link #newCall(MethodDescriptor, CallOptions)}\n    *\n    */\n   @Deprecated",
      "parent_sha": "d3c5b00827a8a1c1677ebabd256123d213593322"
    }
  },
  {
    "oid": "a6ecece6f5be27e8688b3cb7cc5e13ca20c5c7bd",
    "message": "doc: more guidelines for LoadBalancer2 implementations. (#2501)",
    "date": "2016-12-16T23:18:59Z",
    "url": "https://github.com/grpc/grpc-java/commit/a6ecece6f5be27e8688b3cb7cc5e13ca20c5c7bd",
    "details": {
      "sha": "2945efbb0971ec4c823693930dc0f474a2f74436",
      "filename": "core/src/main/java/io/grpc/LoadBalancer2.java",
      "status": "modified",
      "additions": 122,
      "deletions": 36,
      "changes": 158,
      "blob_url": "https://github.com/grpc/grpc-java/blob/a6ecece6f5be27e8688b3cb7cc5e13ca20c5c7bd/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FLoadBalancer2.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/a6ecece6f5be27e8688b3cb7cc5e13ca20c5c7bd/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FLoadBalancer2.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FLoadBalancer2.java?ref=a6ecece6f5be27e8688b3cb7cc5e13ca20c5c7bd",
      "patch": "@@ -55,20 +55,21 @@\n  *       from the Channel Executor.  It receives the results from the {@link NameResolver}, updates\n  *       of subchannels' connectivity states, and the channel's request for the LoadBalancer to\n  *       shutdown.</li>\n- *   <li>{@link SubchannelPicker} does the actual load-balancing work.  It selects a\n- *       {@link Subchannel} for each new RPC.</li>\n- *   <li>{@link Factory} creates a new {@link LoadBalancer2} instance.\n+ *   <li>{@link SubchannelPicker SubchannelPicker} does the actual load-balancing work.  It selects\n+ *       a {@link Subchannel Subchannel} for each new RPC.</li>\n+ *   <li>{@link Factory Factory} creates a new {@link LoadBalancer2} instance.\n  * </ol>\n  *\n- * <p>{@link Helper} is implemented by gRPC library and provided to {@link Factory}. It provides\n- * functionalities that a {@code LoadBalancer2} implementation would typically need.</li>\n+ * <p>{@link Helper Helper} is implemented by gRPC library and provided to {@link Factory\n+ * Factory}. It provides functionalities that a {@code LoadBalancer2} implementation would typically\n+ * need.</li>\n  *\n  * <h3>Channel Executor</h3>\n  *\n  * <p>Channel Executor is an internal executor of the channel, which is used to serialize all the\n  * callback methods on the {@link LoadBalancer2} interface, thus the balancer implementation doesn't\n  * need to worry about synchronization among them.  However, the actual thread of the Channel\n- * Executor is typically the network thread, thus following rules must be followed to prevent\n+ * Executor is typically the network thread, thus the following rules must be followed to prevent\n  * blocking or even dead-locking in a network\n  *\n  * <ol>\n@@ -79,29 +80,31 @@\n  *\n  *   <li><strong>Avoid calling into other components with lock held</strong>.  Channel Executor may\n  *   run callbacks under a lock, e.g., the transport lock of OkHttp.  If your LoadBalancer has a\n- *   lock, holds the lock in a callback method (e.g., {@link #handleSubchannelState}) while calling\n- *   into another class that may involve locks, be cautious of deadlock.  Generally you wouldn't\n- *   need any locking in the LoadBalancer.</li>\n+ *   lock, holds the lock in a callback method (e.g., {@link #handleSubchannelState\n+ *   handleSubchannelState()}) while calling into another class that may involve locks, be cautious\n+ *   of deadlock.  Generally you wouldn't need any locking in the LoadBalancer.</li>\n  *\n  * </ol>\n  *\n- * <p>{@link Helper#runSerialized} allows you to schedule a task to be run in the Channel Executor.\n+ * <p>{@link Helper#runSerialized Helper.runSerialized()} allows you to schedule a task to be run in\n+ * the Channel Executor.\n  *\n  * <h3>The canonical implementation pattern</h3>\n  *\n  * <p>A {@link LoadBalancer2} keeps states like the latest addresses from NameResolver, the\n  * Subchannel(s) and their latest connectivity states.  These states are mutated within the Channel\n  * Executor.\n  *\n- * <p>A typical {@link SubchannelPicker} holds a snapshot of these states.  It may have its own\n- * states, e.g., a picker from a round-robin load-balancer may keep a pointer to the next\n- * Subchannel, which are typically mutated by multiple threads.  The picker should only mutate its\n- * own state, and should not mutate or re-acquire the states of the LoadBalancer.  This way\n- * the picker only needs to synchronize its own states, which is typically trivial.\n+ * <p>A typical {@link SubchannelPicker SubchannelPicker} holds a snapshot of these states.  It may\n+ * have its own states, e.g., a picker from a round-robin load-balancer may keep a pointer to the\n+ * next Subchannel, which are typically mutated by multiple threads.  The picker should only mutate\n+ * its own state, and should not mutate or re-acquire the states of the LoadBalancer.  This way the\n+ * picker only needs to synchronize its own states, which is typically trivial to implement.\n  *\n  * <p>When the LoadBalancer states changes, e.g., Subchannels has become or stopped being READY, and\n  * we want subsequent RPCs to use the latest list of READY Subchannels, LoadBalancer would create\n- * a new picker, which holds a snapshot of the latest Subchannel list.\n+ * a new picker, which holds a snapshot of the latest Subchannel list.  Refer to the javadoc of\n+ * {@link #handleSubchannelState handleSubchannelState()} how to do this properly.\n  *\n  * <p>No synchronization should be necessary between LoadBalancer and its pickers if you follow\n  * the pattern above.  It may be possible to implement in a different way, but that would usually\n@@ -133,6 +136,20 @@ public abstract void handleResolvedAddresses(\n   /**\n    * Handles a state change on a Subchannel.\n    *\n+   * <p>The initial state of a Subchannel is IDLE. You won't get a notification for the initial IDLE\n+   * state.\n+   *\n+   * <p>If the new state is not SHUTDOWN, this method should create a new picker and call {@link\n+   * Helper#updatePicker Helper.updatePicker()}.  Failing to do so may result in unnecessary delays\n+   * of RPCs. Please refer to {@link PickResult#withSubchannel PickResult.withSubchannel()}'s\n+   * javadoc for more information.\n+   *\n+   * <p>SHUTDOWN can only happen in two cases.  One is that LoadBalancer called {@link\n+   * Subchannel#shutdown} earlier, thus it should have already discarded this Subchannel.  The other\n+   * is that Channel is doing a {@link ManagedChannel#shutdownNow forced shutdown} or has already\n+   * terminated, thus there won't be further requests to LoadBalancer.  Therefore, SHUTDOWN can be\n+   * safely ignored.\n+   *\n    * @param subchannel the involved Subchannel\n    * @param stateInfo the new state\n    */\n@@ -162,13 +179,25 @@ public abstract static class SubchannelPicker {\n   }\n \n   /**\n-   * A balancing decision made by {@link SubchannelPicker} for an RPC.\n+   * A balancing decision made by {@link SubchannelPicker SubchannelPicker} for an RPC.\n+   *\n+   * <p>The outcome of the decision will be one of the following:\n+   * <ul>\n+   *   <li>Proceed: if a Subchannel is provided via {@link #withSubchannel withSubchannel()}, and is\n+   *       in READY state when the RPC tries to start on it, the RPC will proceed on that\n+   *       Subchannel.</li>\n+   *   <li>Error: if an error is provided via {@link #withError withError()}, and the RPC is not\n+   *       wait-for-ready (i.e., {@link CallOptions#withWaitForReady} was not called), the RPC will\n+   *       fail immediately with the given error.</li>\n+   *   <li>Buffer: in all other cases, the RPC will be buffered in the Channel, until the next\n+   *       picker is provided via {@link Helper#updatePicker Helper.updatePicker()}, when the RPC\n+   *       will go through the same picking process again.</li>\n+   * </ul>\n    */\n   @Immutable\n   public static final class PickResult {\n     private static final PickResult NO_RESULT = new PickResult(null, Status.OK);\n \n-    // A READY channel, or null\n     @Nullable private final Subchannel subchannel;\n     // An error to be propagated to the application if subchannel == null\n     // Or OK if there is no error.\n@@ -181,12 +210,64 @@ private PickResult(Subchannel subchannel, Status status) {\n     }\n \n     /**\n-     * A decision to proceed the RPC on a Subchannel.  The state of the Subchannel is supposed to be\n-     * {@link ConnectivityState#READY}.  However, since such decisions are racy, a non-READY\n-     * Subchannel will not fail the RPC, but will only leave it buffered.\n+     * A decision to proceed the RPC on a Subchannel.\n+     *\n+     * <p>Only Subchannels returned by {@link Helper#createSubchannel Helper.createSubchannel()}\n+     * will work.  DO NOT try to use your own implementations of Subchannels, as they won't work.\n+     *\n+     * <p>When the RPC tries to use the return Subchannel, which is briefly after this method\n+     * returns, the state of the Subchannel will decide where the RPC would go:\n+     *\n+     * <ul>\n+     *   <li>READY: the RPC will proceed on this Subchannel.</li>\n+     *   <li>IDLE: the RPC will be buffered.  Subchannel will attempt to create connection.</li>\n+     *   <li>All other states: the RPC will be buffered.</li>\n+     * </ul>\n+     *\n+     * <p><strong>All buffered RPCs will stay buffered</strong> until the next call of {@link\n+     * Helper#updatePicker Helper.updatePicker()}, which will trigger a new picking process.\n+     *\n+     * <p>Note that Subchannel's state may change at the same time the picker is making the\n+     * decision, which means the decision may be made with (to-be) outdated information.  For\n+     * example, a picker may return a Subchannel known to be READY, but it has become IDLE when is\n+     * about to be used by the RPC, which makes the RPC to be buffered.  The LoadBalancer will soon\n+     * learn about the Subchannels' transition from READY to IDLE, create a new picker and allow the\n+     * RPC to use another READY transport if there is any.\n+     *\n+     * <p>You will want to avoid running into a situation where there are READY Subchannels out\n+     * there but some RPCs are still buffered for longer than a brief time.\n+     * <ul>\n+     *   <li>This can happen if you return Subchannels with states other than READY and IDLE.  For\n+     *       example, suppose you round-robin on 2 Subchannels, in READY and CONNECTING states\n+     *       respectively.  If the picker ignores the state and pick them equally, 50% of RPCs will\n+     *       be stuck in buffered state until both Subchannels are READY.</li>\n+     *   <li>This can also happen if you don't create a new picker at key state changes of\n+     *       Subchannels.  Take the above round-robin example again.  Suppose you do pick only READY\n+     *       and IDLE Subchannels, and initially both Subchannels are READY.  Now one becomes IDLE,\n+     *       then CONNECTING and stays CONNECTING for a long time.  If you don't create a new picker\n+     *       in response to the CONNECTING state to exclude that Subchannel, 50% of RPCs will hit it\n+     *       and be buffered even though the other Subchannel is READY.</li>\n+     * </ul>\n      *\n-     * <p>Only Subchannels returned by {@link Helper#createSubchannel} will work.  DO NOT try to\n-     * use your own implementations of Subchannels, as they won't work.\n+     * <p>In order to prevent unnecessary delay of RPCs, the rules of thumb are:\n+     * <ol>\n+     *   <li>The picker should only pick Subchannels that are known as READY or IDLE.  Whether to\n+     *       pick IDLE Subchannels depends on whether you want Subchannels to connect on-demand or\n+     *       actively:\n+     *       <ul>\n+     *         <li>If you want connect-on-demand, include IDLE Subchannels in your pick results,\n+     *             because when an RPC tries to use an IDLE Subchannel, the Subchannel will try to\n+     *             connect.</li>\n+     *         <li>If you want Subchannels to be always connected even when there is no RPC, you\n+     *             would call {@link Subchannel#requestConnection Subchannel.requestConnection()}\n+     *             whenever the Subchannel has transitioned to IDLE, then you don't need to include\n+     *             IDLE Subchannels in your pick results.</li>\n+     *       </ul></li>\n+     *   <li>Always create a new picker and call {@link Helper#updatePicker Helper.updatePicker()}\n+     *       whenever {@link #handleSubchannelState handleSubchannelState()} is called, unless the\n+     *       new state is SHUTDOWN. See {@code handleSubchannelState}'s javadoc for more\n+     *       details.</li>\n+     * </ol>\n      */\n     public static PickResult withSubchannel(Subchannel subchannel) {\n       return new PickResult(Preconditions.checkNotNull(subchannel, \"subchannel\"), Status.OK);\n@@ -212,16 +293,17 @@ public static PickResult withNoResult() {\n     }\n \n     /**\n-     * The Subchannel if this result was created by {@link #withSubchannel}, or null otherwise.\n+     * The Subchannel if this result was created by {@link #withSubchannel withSubchannel()}, or\n+     * null otherwise.\n      */\n     @Nullable\n     public Subchannel getSubchannel() {\n       return subchannel;\n     }\n \n     /**\n-     * The status associated with this result.  Non-{@code OK} if created with {@link #withError},\n-     * or {@code OK} otherwise.\n+     * The status associated with this result.  Non-{@code OK} if created with {@link #withError\n+     * withError}, or {@code OK} otherwise.\n      */\n     public Status getStatus() {\n       return status;\n@@ -241,7 +323,8 @@ public abstract static class Helper {\n     /**\n      * Creates a Subchannel, which is a logical connection to the given group of addresses which are\n      * considered equivalent.  The {@code attrs} are custom attributes associated with this\n-     * Subchannel, and can be accessed later through {@link Subchannel#getAttributes}.\n+     * Subchannel, and can be accessed later through {@link Subchannel#getAttributes\n+     * Subchannel.getAttributes()}.\n      *\n      * <p>The LoadBalancer is responsible for closing unused Subchannels, and closing all\n      * Subchannels within {@link #shutdown}.\n@@ -261,11 +344,12 @@ public abstract ManagedChannel createOobChannel(\n     /**\n      * Set a new picker to the channel.\n      *\n-     * <p>When a new picker is provided via {@link Helper#updatePicker}, the channel will apply the\n-     * picker on all buffered RPCs, by calling {@link SubchannelPicker#pickSubchannel}.\n+     * <p>When a new picker is provided via {@code updatePicker()}, the channel will apply the\n+     * picker on all buffered RPCs, by calling {@link SubchannelPicker#pickSubchannel\n+     * SubchannelPicker.pickSubchannel()}.\n      *\n-     * <p>The channel will hold the picker and use it for all RPCs, until {@link #updatePicker} is\n-     * called again and a new picker replaces the old one.  If {@link #updatePicker} has never been\n+     * <p>The channel will hold the picker and use it for all RPCs, until {@code updatePicker()} is\n+     * called again and a new picker replaces the old one.  If {@code updatePicker()} has never been\n      * called, the channel will buffer all RPCs until a picker is provided.\n      */\n     public abstract void updatePicker(SubchannelPicker picker);\n@@ -288,20 +372,22 @@ public abstract ManagedChannel createOobChannel(\n   }\n \n   /**\n-   * A logical connection to a server, or a group of equivalent servers represented by an {@link\n+   * A logical connection to a server, or a group of equivalent servers represented by an {@link \n    * EquivalentAddressGroup}.\n    *\n    * <p>It maintains at most one physical connection (aka transport) for sending new RPCs, while\n    * also keeps track of previous transports that has been shut down but not terminated yet.\n    *\n    * <p>If there isn't an active transport yet, and an RPC is assigned to the Subchannel, it will\n    * create a new transport.  It won't actively create transports otherwise.  {@link\n-   * #requestConnection} can be used to ask Subchannel to create a transport if there isn't any.\n+   * #requestConnection requestConnection()} can be used to ask Subchannel to create a transport if\n+   * there isn't any.\n    */\n   @ThreadSafe\n   public abstract static class Subchannel {\n     /**\n-     * Shuts down the Subchannel.  No new RPCs will be accepted.\n+     * Shuts down the Subchannel.  After this method is called, this Subchannel should no longer\n+     * be returned by the latest {@link SubchannelPicker picker}, and can be safely discarded.\n      */\n     public abstract void shutdown();\n \n@@ -316,7 +402,7 @@ public abstract static class Subchannel {\n     public abstract EquivalentAddressGroup getAddresses();\n \n     /**\n-     * The same attributes passed to {@link io.grpc.LoadBalancer2.Helper#createSubchannel}.\n+     * The same attributes passed to {@link Helper#createSubchannel Helper.createSubchannel()}.\n      * LoadBalancer can use it to attach additional information here, e.g., the shard this\n      * Subchannel belongs to.\n      */\n@@ -326,7 +412,7 @@ public abstract static class Subchannel {\n   @ThreadSafe\n   public abstract static class Factory {\n     /**\n-     * Creates a {@link LoadBalancer} that will be used inside a channel.\n+     * Creates a {@link LoadBalancer2} that will be used inside a channel.\n      */\n     public abstract LoadBalancer2 newLoadBalancer(Helper helper);\n   }",
      "parent_sha": "ce9d152dff3bfcd5dc5a234810b6477e91834c11"
    }
  },
  {
    "oid": "12dfecba624b87d0ac87b9fcbb0bae3cf55dcaa2",
    "message": "Chnage mispeling of jvaadoc in wihtLogiD",
    "date": "2016-03-16T17:38:27Z",
    "url": "https://github.com/grpc/grpc-java/commit/12dfecba624b87d0ac87b9fcbb0bae3cf55dcaa2",
    "details": {
      "sha": "bbf3d605bb3f3e5341695d34d0045caf9c471606",
      "filename": "core/src/main/java/io/grpc/internal/WithLogId.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/12dfecba624b87d0ac87b9fcbb0bae3cf55dcaa2/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FWithLogId.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/12dfecba624b87d0ac87b9fcbb0bae3cf55dcaa2/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FWithLogId.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FWithLogId.java?ref=12dfecba624b87d0ac87b9fcbb0bae3cf55dcaa2",
      "patch": "@@ -37,7 +37,7 @@\n public interface WithLogId {\n   /**\n    * Returns an ID that is primarily used in debug logs. It usually contains the class name and a\n-   * numeric ID that is unique among the instances. {@link GprcUtil#getLogId} is a canonical\n+   * numeric ID that is unique among the instances. {@link GrpcUtil#getLogId} is a canonical\n    * implementation.\n    *\n    * <p>The subclasses of this interface usually want to include the log ID in their {@link",
      "parent_sha": "8e3f375e95fc55c3346171e16089dece23ea8d77"
    }
  },
  {
    "oid": "23dfc84ccf9193e269aba730321f5fa49d3a1735",
    "message": "interop-testing: fix dealineExceeded test flakiness by increasing time interval\n\nShould resolve #1399",
    "date": "2017-08-24T21:27:49Z",
    "url": "https://github.com/grpc/grpc-java/commit/23dfc84ccf9193e269aba730321f5fa49d3a1735",
    "details": {
      "sha": "e18b341daa4d070ff2895fc601bdf993055febd3",
      "filename": "interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/grpc/grpc-java/blob/23dfc84ccf9193e269aba730321f5fa49d3a1735/interop-testing%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FAbstractInteropTest.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/23dfc84ccf9193e269aba730321f5fa49d3a1735/interop-testing%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FAbstractInteropTest.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/interop-testing%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FAbstractInteropTest.java?ref=23dfc84ccf9193e269aba730321f5fa49d3a1735",
      "patch": "@@ -994,15 +994,15 @@ public void deadlineNotExceeded() {\n                 .build()).next();\n   }\n \n-  @Test(timeout = 10000)\n+  @Test(timeout = 25000)\n   public void deadlineExceeded() throws Exception {\n     // warm up the channel and JVM\n     blockingStub.emptyCall(Empty.getDefaultInstance());\n     TestServiceGrpc.TestServiceBlockingStub stub =\n         blockingStub.withDeadlineAfter(10, TimeUnit.MILLISECONDS);\n     StreamingOutputCallRequest request = StreamingOutputCallRequest.newBuilder()\n         .addResponseParameters(ResponseParameters.newBuilder()\n-            .setIntervalUs(20000))\n+            .setIntervalUs((int) TimeUnit.SECONDS.toMicros(20)))\n         .build();\n     try {\n       stub.streamingOutputCall(request).next();",
      "parent_sha": "2cbe9ef66af5b8148c9938b263ddae20a6581be7"
    }
  },
  {
    "oid": "c242fc82456eb0e406348b498956a9f318e48001",
    "message": "xds: fix XdsLoadStatsStoreTest.recordingDroppedRequests flaky NPE",
    "date": "2019-05-20T23:00:18Z",
    "url": "https://github.com/grpc/grpc-java/commit/c242fc82456eb0e406348b498956a9f318e48001",
    "details": {
      "sha": "683a81305a406a7eb6113e2f821f49a520bb51ae",
      "filename": "xds/src/test/java/io/grpc/xds/XdsLoadStatsStoreTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/grpc/grpc-java/blob/c242fc82456eb0e406348b498956a9f318e48001/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FXdsLoadStatsStoreTest.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/c242fc82456eb0e406348b498956a9f318e48001/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FXdsLoadStatsStoreTest.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FXdsLoadStatsStoreTest.java?ref=c242fc82456eb0e406348b498956a9f318e48001",
      "patch": "@@ -34,7 +34,6 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Random;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -253,9 +252,8 @@ public void loadReportMatchesSnapshots() {\n \n   @Test\n   public void recordingDroppedRequests() {\n-    Random rand = new Random();\n-    int numLbDrop = rand.nextInt(1000);\n-    int numThrottleDrop = rand.nextInt(1000);\n+    int numLbDrop = 123;\n+    int numThrottleDrop = 456;\n     for (int i = 0; i < numLbDrop; i++) {\n       loadStore.recordDroppedRequest(\"lb\");\n     }",
      "parent_sha": "a2595d9e7dcce2e9a267b20a616b41c3615b89db"
    }
  },
  {
    "oid": "1553aabb2fbfffee84b1837e150c124987ad4b34",
    "message": "Advertise h2-15 in ALPN negotiation.\n\nWe continue to support h2-14 to prevent having a flag-day. Flag-day\nis unnecessary since h2-15 is pretty much the same as h2-14.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=79369997",
    "date": "2015-01-08T22:43:05Z",
    "url": "https://github.com/grpc/grpc-java/commit/1553aabb2fbfffee84b1837e150c124987ad4b34",
    "details": {
      "sha": "7d9bdea8771590f7621a6e38e58281d4d5c80b47",
      "filename": "netty/src/main/java/com/google/net/stubby/transport/netty/Http2Negotiator.java",
      "status": "modified",
      "additions": 11,
      "deletions": 6,
      "changes": 17,
      "blob_url": "https://github.com/grpc/grpc-java/blob/1553aabb2fbfffee84b1837e150c124987ad4b34/netty%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fnet%2Fstubby%2Ftransport%2Fnetty%2FHttp2Negotiator.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/1553aabb2fbfffee84b1837e150c124987ad4b34/netty%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fnet%2Fstubby%2Ftransport%2Fnetty%2FHttp2Negotiator.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/netty%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fnet%2Fstubby%2Ftransport%2Fnetty%2FHttp2Negotiator.java?ref=1553aabb2fbfffee84b1837e150c124987ad4b34",
      "patch": "@@ -26,6 +26,8 @@\n import java.lang.reflect.InvocationHandler;\n import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -37,8 +39,10 @@\n  * endpoint.\n  */\n public class Http2Negotiator {\n-  public static final String HTTP_VERSION_NAME =\n-      Http2OrHttpChooser.SelectedProtocol.HTTP_2.protocolName();\n+  private static final List<String> SUPPORTED_PROTOCOLS = Collections.unmodifiableList(\n+      Arrays.asList(\n+          Http2OrHttpChooser.SelectedProtocol.HTTP_2.protocolName(),\n+          \"h2-15\"));\n \n   // Prefer ALPN to NPN so try it first.\n   private static final String[] JETTY_TLS_NEGOTIATION_IMPL =\n@@ -278,18 +282,19 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n                   // all\n                   removeMethod.invoke(null, engine);\n                   protocolNegotiated.setException(new RuntimeException(\n-                      \"ALPN/NPN protocol \" + HTTP_VERSION_NAME + \" not supported by endpoint\"));\n+                      \"Endpoint does not support any of \" + SUPPORTED_PROTOCOLS\n+                      + \" in ALPN/NPN negotiation\"));\n                   return null;\n                 }\n                 if (\"protocols\".equals(methodName)) {\n                   // ALPN client, NPN server\n-                  return ImmutableList.of(HTTP_VERSION_NAME);\n+                  return SUPPORTED_PROTOCOLS;\n                 }\n                 if (\"selected\".equals(methodName) || \"protocolSelected\".equals(methodName)) {\n                   // ALPN client, NPN server\n                   removeMethod.invoke(null, engine);\n                   String protocol = (String) args[0];\n-                  if (!HTTP_VERSION_NAME.equals(protocol)) {\n+                  if (!SUPPORTED_PROTOCOLS.contains(protocol)) {\n                     RuntimeException e = new RuntimeException(\n                         \"Unsupported protocol selected via ALPN/NPN: \" + protocol);\n                     protocolNegotiated.setException(e);\n@@ -310,7 +315,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n                   @SuppressWarnings(\"unchecked\")\n                   List<String> names = (List<String>) args[0];\n                   for (String name : names) {\n-                    if (name.startsWith(HTTP_VERSION_NAME)) {\n+                    if (SUPPORTED_PROTOCOLS.contains(name)) {\n                       protocolNegotiated.set(null);\n                       return name;\n                     }",
      "parent_sha": "a71d887661022516ee957f005b487da1ba46abb1"
    }
  },
  {
    "oid": "bb3365731fa3cd6c082e6346b81d0ea14646ffc1",
    "message": "stub: Have ClientCalls.ThreadlessExecutor reject Runnables after end of RPC (#8847)\n\nChanges originally proposed as part of #7106.\r\n\r\nFixes #3557\r\n\r\nCo-authored-by: Nick Hill <nickhill@us.ibm.com>",
    "date": "2022-02-11T23:08:11Z",
    "url": "https://github.com/grpc/grpc-java/commit/bb3365731fa3cd6c082e6346b81d0ea14646ffc1",
    "details": {
      "sha": "84417ee7ebf116c7b5c2303abbcfe2bb0e007752",
      "filename": "stub/src/main/java/io/grpc/stub/ClientCalls.java",
      "status": "modified",
      "additions": 35,
      "deletions": 7,
      "changes": 42,
      "blob_url": "https://github.com/grpc/grpc-java/blob/bb3365731fa3cd6c082e6346b81d0ea14646ffc1/stub%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fstub%2FClientCalls.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/bb3365731fa3cd6c082e6346b81d0ea14646ffc1/stub%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fstub%2FClientCalls.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/stub%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fstub%2FClientCalls.java?ref=bb3365731fa3cd6c082e6346b81d0ea14646ffc1",
      "patch": "@@ -39,6 +39,7 @@\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Executor;\n import java.util.concurrent.Future;\n+import java.util.concurrent.RejectedExecutionException;\n import java.util.concurrent.locks.LockSupport;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -161,6 +162,7 @@ public static <ReqT, RespT> RespT blockingUnaryCall(\n       // Something very bad happened. All bets are off; it may be dangerous to wait for onClose().\n       throw cancelThrow(call, e);\n     } finally {\n+      executor.shutdown();\n       if (interrupt) {\n         Thread.currentThread().interrupt();\n       }\n@@ -626,6 +628,9 @@ private Object waitForNext() {\n               // Now wait for onClose() to be called, so interceptors can clean up\n             }\n           }\n+          if (next == this || next instanceof StatusRuntimeException) {\n+            threadless.shutdown();\n+          }\n           return next;\n         }\n       } finally {\n@@ -712,7 +717,10 @@ private static final class ThreadlessExecutor extends ConcurrentLinkedQueue<Runn\n       implements Executor {\n     private static final Logger log = Logger.getLogger(ThreadlessExecutor.class.getName());\n \n-    private volatile Thread waiter;\n+    private static final Object SHUTDOWN = new Object(); // sentinel\n+\n+    // Set to the calling thread while it's parked, SHUTDOWN on RPC completion\n+    private volatile Object waiter;\n \n     // Non private to avoid synthetic class\n     ThreadlessExecutor() {}\n@@ -736,14 +744,29 @@ public void waitAndDrain() throws InterruptedException {\n         }\n       }\n       do {\n-        try {\n-          runnable.run();\n-        } catch (Throwable t) {\n-          log.log(Level.WARNING, \"Runnable threw exception\", t);\n-        }\n+        runQuietly(runnable);\n       } while ((runnable = poll()) != null);\n     }\n \n+    /**\n+     * Called after final call to {@link #waitAndDrain()}, from same thread.\n+     */\n+    public void shutdown() {\n+      waiter = SHUTDOWN;\n+      Runnable runnable;\n+      while ((runnable = poll()) != null) {\n+        runQuietly(runnable);\n+      }\n+    }\n+\n+    private static void runQuietly(Runnable runnable) {\n+      try {\n+        runnable.run();\n+      } catch (Throwable t) {\n+        log.log(Level.WARNING, \"Runnable threw exception\", t);\n+      }\n+    }\n+\n     private static void throwIfInterrupted() throws InterruptedException {\n       if (Thread.interrupted()) {\n         throw new InterruptedException();\n@@ -753,7 +776,12 @@ private static void throwIfInterrupted() throws InterruptedException {\n     @Override\n     public void execute(Runnable runnable) {\n       add(runnable);\n-      LockSupport.unpark(waiter); // no-op if null\n+      Object waiter = this.waiter;\n+      if (waiter != SHUTDOWN) {\n+        LockSupport.unpark((Thread) waiter); // no-op if null\n+      } else if (remove(runnable)) {\n+        throw new RejectedExecutionException();\n+      }\n     }\n   }\n ",
      "parent_sha": "7eeb411b1fbaad3a74c1c0e0d0a44772f1a70c8e"
    }
  },
  {
    "oid": "a94a63c7ae17683d7d611f8ae34f3f8dd8eda5a6",
    "message": "xds: clean up. (#6271)",
    "date": "2019-10-10T23:18:09Z",
    "url": "https://github.com/grpc/grpc-java/commit/a94a63c7ae17683d7d611f8ae34f3f8dd8eda5a6",
    "details": {
      "sha": "c2d4b28593a56cdcb645ef86c3fa8c6d0f2e1bc6",
      "filename": "xds/src/main/java/io/grpc/xds/sds/trust/SdsX509TrustManager.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/grpc/grpc-java/blob/a94a63c7ae17683d7d611f8ae34f3f8dd8eda5a6/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2Fsds%2Ftrust%2FSdsX509TrustManager.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/a94a63c7ae17683d7d611f8ae34f3f8dd8eda5a6/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2Fsds%2Ftrust%2FSdsX509TrustManager.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2Fsds%2Ftrust%2FSdsX509TrustManager.java?ref=a94a63c7ae17683d7d611f8ae34f3f8dd8eda5a6",
      "patch": "@@ -19,6 +19,7 @@\n import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Ascii;\n import io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext;\n import java.net.Socket;\n import java.security.cert.CertificateException;\n@@ -166,7 +167,7 @@ private static boolean verifyDnsNameInSanList(String altNameFromCert,\n    */\n   private static boolean verifyStringInSanList(String stringFromCert, List<String> verifySanList) {\n     for (String sanToVerify : verifySanList) {\n-      if (sanToVerify.equalsIgnoreCase(stringFromCert)) {\n+      if (Ascii.equalsIgnoreCase(sanToVerify, stringFromCert)) {\n         return true;\n       }\n     }\n@@ -199,7 +200,7 @@ private static boolean verifyOneSanInList(List<?> entry, List<String> verifySanL\n   private static void verifySubjectAltNameInLeaf(X509Certificate cert, List<String> verifyList)\n       throws CertificateException {\n     Collection<List<?>> names = cert.getSubjectAlternativeNames();\n-    if (names == null || names.size() == 0) {\n+    if (names == null || names.isEmpty()) {\n       throw new CertificateException(\"Peer certificate SAN check failed\");\n     }\n     for (List<?> name : names) {\n@@ -221,7 +222,7 @@ void verifySubjectAltNameInChain(X509Certificate[] peerCertChain) throws Certifi\n       return;\n     }\n     List<String> verifyList = certContext.getVerifySubjectAltNameList();\n-    if (verifyList == null || verifyList.isEmpty()) {\n+    if (verifyList.isEmpty()) {\n       return;\n     }\n     if (peerCertChain == null || peerCertChain.length < 1) {",
      "parent_sha": "0e25cd8e7c892e998c20812a8c3de3b41e03fb49"
    }
  },
  {
    "oid": "5cfbe1061acefc4a859c9fc85fab8c46f9b7a4b1",
    "message": "api: Fix a small typo in ForwardingChannelBuilderTest",
    "date": "2020-08-27T19:00:13Z",
    "url": "https://github.com/grpc/grpc-java/commit/5cfbe1061acefc4a859c9fc85fab8c46f9b7a4b1",
    "details": {
      "sha": "5ebfef5fb7c27d710a3ae7fefcbbe01028d33a05",
      "filename": "api/src/test/java/io/grpc/ForwardingChannelBuilderTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/5cfbe1061acefc4a859c9fc85fab8c46f9b7a4b1/api%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2FForwardingChannelBuilderTest.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/5cfbe1061acefc4a859c9fc85fab8c46f9b7a4b1/api%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2FForwardingChannelBuilderTest.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/api%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2FForwardingChannelBuilderTest.java?ref=5cfbe1061acefc4a859c9fc85fab8c46f9b7a4b1",
      "patch": "@@ -88,7 +88,7 @@ public void allBuilderMethodsReturnThis() throws Exception {\n   }\n \n   @Test\n-  public void buildReturnsDelegateBuildByDefualt() {\n+  public void buildReturnsDelegateBuildByDefault() {\n     ManagedChannel mockChannel = mock(ManagedChannel.class);\n     doReturn(mockChannel).when(mockDelegate).build();\n ",
      "parent_sha": "26cd69093be36e2e7a36a56667fdec98d0236b00"
    }
  },
  {
    "oid": "67b67f83826195c62d1e25ddbce0b3bc77257b03",
    "message": "Fix outbound message size checking (#10739)\n\nThis fixes two bugs in outbound message size checking:\r\n\r\n* When thet checke failed, the thrown StatusRuntimeException with a status code\r\n  of RESOURCE_EXHAUSTED was been caught and rewrapped in another\r\n  StatusRuntimeException but this time with status code UNKNOWN.\r\n* This applies the max outbound message size check to messages prior to, and\r\n  after compression, since compression of a message that is smaller than the\r\n  maximum send size can result in a larger message that exceeds the maximum\r\n  send size.",
    "date": "2023-12-18T19:02:51Z",
    "url": "https://github.com/grpc/grpc-java/commit/67b67f83826195c62d1e25ddbce0b3bc77257b03",
    "details": {
      "sha": "5e75fa2e6febabd939b4aa85304a98dc1395264d",
      "filename": "core/src/main/java/io/grpc/internal/MessageFramer.java",
      "status": "modified",
      "additions": 10,
      "deletions": 7,
      "changes": 17,
      "blob_url": "https://github.com/grpc/grpc-java/blob/67b67f83826195c62d1e25ddbce0b3bc77257b03/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FMessageFramer.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/67b67f83826195c62d1e25ddbce0b3bc77257b03/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FMessageFramer.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finternal%2FMessageFramer.java?ref=67b67f83826195c62d1e25ddbce0b3bc77257b03",
      "patch": "@@ -27,6 +27,7 @@\n import io.grpc.Drainable;\n import io.grpc.KnownLength;\n import io.grpc.Status;\n+import io.grpc.StatusRuntimeException;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -147,6 +148,8 @@ public void writePayload(InputStream message) {\n           .withDescription(\"Failed to frame message\")\n           .withCause(e)\n           .asRuntimeException();\n+    } catch (StatusRuntimeException e) {\n+      throw e;\n     } catch (RuntimeException e) {\n       throw Status.INTERNAL\n           .withDescription(\"Failed to frame message\")\n@@ -170,13 +173,6 @@ private int writeUncompressed(InputStream message, int messageLength) throws IOE\n     }\n     BufferChainOutputStream bufferChain = new BufferChainOutputStream();\n     int written = writeToOutputStream(message, bufferChain);\n-    if (maxOutboundMessageSize >= 0 && written > maxOutboundMessageSize) {\n-      throw Status.RESOURCE_EXHAUSTED\n-          .withDescription(\n-              String.format(\n-                  Locale.US, \"message too large %d > %d\", written , maxOutboundMessageSize))\n-          .asRuntimeException();\n-    }\n     writeBufferChain(bufferChain, false);\n     return written;\n   }\n@@ -238,6 +234,13 @@ private int writeKnownLengthUncompressed(InputStream message, int messageLength)\n    */\n   private void writeBufferChain(BufferChainOutputStream bufferChain, boolean compressed) {\n     int messageLength = bufferChain.readableBytes();\n+    if (maxOutboundMessageSize >= 0 && messageLength > maxOutboundMessageSize) {\n+      throw Status.RESOURCE_EXHAUSTED\n+          .withDescription(\n+              String.format(\n+                  Locale.US, \"message too large %d > %d\", messageLength , maxOutboundMessageSize))\n+          .asRuntimeException();\n+    }\n     headerScratch.clear();\n     headerScratch.put(compressed ? COMPRESSED : UNCOMPRESSED).putInt(messageLength);\n     WritableBuffer writeableHeader = bufferAllocator.allocate(HEADER_LENGTH);",
      "parent_sha": "0a704a52ee0cfc2deb9cfea4053c03f713123903"
    }
  },
  {
    "oid": "b3475a0e4625d518434f7d89eae7965a44a427cf",
    "message": "api: Remove ExperimentalApi from Attributes.Builder.discard (#11004)\n\nNow tracked together with Attributes:\r\nhttps://github.com/grpc/grpc-java/issues/1764.\r\n\r\nCloses #5777.",
    "date": "2024-03-11T23:15:03Z",
    "url": "https://github.com/grpc/grpc-java/commit/b3475a0e4625d518434f7d89eae7965a44a427cf",
    "details": {
      "sha": "de00e63554c4acd1cf45272d6d82716bec6b7db3",
      "filename": "api/src/main/java/io/grpc/Attributes.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/grpc/grpc-java/blob/b3475a0e4625d518434f7d89eae7965a44a427cf/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FAttributes.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/b3475a0e4625d518434f7d89eae7965a44a427cf/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FAttributes.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FAttributes.java?ref=b3475a0e4625d518434f7d89eae7965a44a427cf",
      "patch": "@@ -236,13 +236,12 @@ public <T> Builder set(Key<T> key, T value) {\n     }\n \n     /**\n-     * Removes the key and associated value from the attribtues.\n+     * Removes the key and associated value from the attributes.\n      *\n      * @since 1.22.0\n      * @param key The key to remove\n      * @return this\n      */\n-    @ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/5777\")\n     public <T> Builder discard(Key<T> key) {\n       if (base.data.containsKey(key)) {\n         IdentityHashMap<Key<?>, Object> newBaseData = new IdentityHashMap<>(base.data);",
      "parent_sha": "0d749c59432e604a566e349d043eaeaadc8120d5"
    }
  },
  {
    "oid": "43b73f34cb0500d2fd47517e85bb78d5aa7a763a",
    "message": "Fix more null proto refs",
    "date": "2016-04-27T21:28:52Z",
    "url": "https://github.com/grpc/grpc-java/commit/43b73f34cb0500d2fd47517e85bb78d5aa7a763a",
    "details": {
      "sha": "e278f77c9f135d280be89599a790f3ef37d13173",
      "filename": "benchmarks/src/main/java/io/grpc/benchmarks/driver/LoadWorker.java",
      "status": "modified",
      "additions": 15,
      "deletions": 10,
      "changes": 25,
      "blob_url": "https://github.com/grpc/grpc-java/blob/43b73f34cb0500d2fd47517e85bb78d5aa7a763a/benchmarks%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fbenchmarks%2Fdriver%2FLoadWorker.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/43b73f34cb0500d2fd47517e85bb78d5aa7a763a/benchmarks%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fbenchmarks%2Fdriver%2FLoadWorker.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/benchmarks%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fbenchmarks%2Fdriver%2FLoadWorker.java?ref=43b73f34cb0500d2fd47517e85bb78d5aa7a763a",
      "patch": "@@ -35,6 +35,9 @@\n \n import io.grpc.Status;\n import io.grpc.benchmarks.proto.Control;\n+import io.grpc.benchmarks.proto.Control.ClientArgs;\n+import io.grpc.benchmarks.proto.Control.ServerArgs;\n+import io.grpc.benchmarks.proto.Control.ServerArgs.ArgtypeCase;\n import io.grpc.benchmarks.proto.WorkerServiceGrpc;\n import io.grpc.internal.ServerImpl;\n import io.grpc.netty.NettyServerBuilder;\n@@ -137,13 +140,14 @@ private class WorkerServiceImpl implements WorkerServiceGrpc.WorkerService {\n     private LoadClient workerClient;\n \n     @Override\n-    public StreamObserver<Control.ServerArgs> runServer(\n+    public StreamObserver<ServerArgs> runServer(\n         final StreamObserver<Control.ServerStatus> responseObserver) {\n-      return new StreamObserver<Control.ServerArgs>() {\n+      return new StreamObserver<ServerArgs>() {\n         @Override\n-        public void onNext(Control.ServerArgs value) {\n+        public void onNext(ServerArgs value) {\n           try {\n-            if (value.getSetup() != null && workerServer == null) {\n+            ArgtypeCase argTypeCase = value.getArgtypeCase();\n+            if (argTypeCase == ServerArgs.ArgtypeCase.SETUP && workerServer == null) {\n               if (serverPort != 0 && value.getSetup().getPort() == 0) {\n                 Control.ServerArgs.Builder builder = value.toBuilder();\n                 builder.getSetupBuilder().setPort(serverPort);\n@@ -155,7 +159,7 @@ public void onNext(Control.ServerArgs value) {\n                   .setPort(workerServer.getPort())\n                   .setCores(workerServer.getCores())\n                   .build());\n-            } else if (value.getMark() != null && workerServer != null) {\n+            } else if (argTypeCase == ArgtypeCase.MARK && workerServer != null) {\n               responseObserver.onNext(Control.ServerStatus.newBuilder()\n                   .setStats(workerServer.getStats())\n                   .build());\n@@ -196,17 +200,18 @@ public void onCompleted() {\n     }\n \n     @Override\n-    public StreamObserver<Control.ClientArgs> runClient(\n+    public StreamObserver<ClientArgs> runClient(\n         final StreamObserver<Control.ClientStatus> responseObserver) {\n-      return new StreamObserver<Control.ClientArgs>() {\n+      return new StreamObserver<ClientArgs>() {\n         @Override\n-        public void onNext(Control.ClientArgs value) {\n+        public void onNext(ClientArgs value) {\n           try {\n-            if (value.getSetup() != null && workerClient == null) {\n+            ClientArgs.ArgtypeCase argTypeCase = value.getArgtypeCase();\n+            if (argTypeCase == ClientArgs.ArgtypeCase.SETUP && workerClient == null) {\n               workerClient = new LoadClient(value.getSetup());\n               workerClient.start();\n               responseObserver.onNext(Control.ClientStatus.newBuilder().build());\n-            } else if (value.getMark() != null && workerClient != null) {\n+            } else if (argTypeCase == ClientArgs.ArgtypeCase.MARK && workerClient != null) {\n               responseObserver.onNext(Control.ClientStatus.newBuilder()\n                   .setStats(workerClient.getStats())\n                   .build());",
      "parent_sha": "8825f355dfd9b72622769388500f71f8b472e57f"
    }
  },
  {
    "oid": "47d545ad70dbf33b3f00052c1b519394ba52e222",
    "message": "api: Fix MethodType documentation overspecification\n\nThe server does not _have_ to wait until half close in CLIENT_STREAMING, and\ncommonly wouldn't in error cases. {client,server}SendsOneMessage were way\nover-specifying the behavior and included unnecessary and incorrect words like\n\"immediately.\" Those methods shouldn't be the defining the behavior in that\nmuch precision anyway; that would be the job of the individual enum values, if\nanything.",
    "date": "2020-03-09T19:16:01Z",
    "url": "https://github.com/grpc/grpc-java/commit/47d545ad70dbf33b3f00052c1b519394ba52e222",
    "details": {
      "sha": "08692592e46c28342ec937409c107292af458f9e",
      "filename": "api/src/main/java/io/grpc/MethodDescriptor.java",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/grpc/grpc-java/blob/47d545ad70dbf33b3f00052c1b519394ba52e222/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FMethodDescriptor.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/47d545ad70dbf33b3f00052c1b519394ba52e222/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FMethodDescriptor.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/api%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FMethodDescriptor.java?ref=47d545ad70dbf33b3f00052c1b519394ba52e222",
      "patch": "@@ -85,7 +85,7 @@ public enum MethodType {\n     UNARY,\n \n     /**\n-     * Zero or more request messages followed by one response message.\n+     * Zero or more request messages with one response message.\n      */\n     CLIENT_STREAMING,\n \n@@ -106,9 +106,8 @@ public enum MethodType {\n     UNKNOWN;\n \n     /**\n-     * Returns {@code true} if the client will immediately send one request message to the server\n-     * after calling {@link ClientCall#start(io.grpc.ClientCall.Listener, io.grpc.Metadata)}\n-     * and then immediately half-close the stream by calling {@link io.grpc.ClientCall#halfClose()}.\n+     * Returns {@code true} for {@code UNARY} and {@code SERVER_STREAMING}, which do not permit the\n+     * client to stream.\n      *\n      * @since 1.0.0\n      */\n@@ -117,9 +116,8 @@ public final boolean clientSendsOneMessage() {\n     }\n \n     /**\n-     * Returns {@code true} if the server will immediately send one response message to the client\n-     * upon receipt of {@link io.grpc.ServerCall.Listener#onHalfClose()} and then immediately\n-     * close the stream by calling {@link ServerCall#close(Status, io.grpc.Metadata)}.\n+     * Returns {@code true} for {@code UNARY} and {@code CLIENT_STREAMING}, which do not permit the\n+     * server to stream.\n      *\n      * @since 1.0.0\n      */",
      "parent_sha": "b348479ac84126c27723ec6e3f214e6703d0f9d6"
    }
  },
  {
    "oid": "17b74c145249951fccc7e05db591c2f5f0b5d78d",
    "message": "protobuf-lite: fix typo. s/Marhsaller/Marshaller",
    "date": "2017-05-14T21:19:47Z",
    "url": "https://github.com/grpc/grpc-java/commit/17b74c145249951fccc7e05db591c2f5f0b5d78d",
    "details": {
      "sha": "146d7b847f73af9c376de907f2a340ab2fc05d9d",
      "filename": "protobuf-lite/src/main/java/io/grpc/protobuf/lite/ProtoLiteUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/17b74c145249951fccc7e05db591c2f5f0b5d78d/protobuf-lite%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fprotobuf%2Flite%2FProtoLiteUtils.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/17b74c145249951fccc7e05db591c2f5f0b5d78d/protobuf-lite%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fprotobuf%2Flite%2FProtoLiteUtils.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/protobuf-lite%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fprotobuf%2Flite%2FProtoLiteUtils.java?ref=17b74c145249951fccc7e05db591c2f5f0b5d78d",
      "patch": "@@ -70,7 +70,7 @@ public class ProtoLiteUtils {\n    * {@link #setExtensionRegistry}, but not to modify the underlying object.\n    *\n    * <p>If you need custom parsing behavior for protos, you will need to make your own\n-   * {@code MethodDescriptor.Marhsaller} for the time being.\n+   * {@code MethodDescriptor.Marshaller} for the time being.\n    *\n    */\n   @ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/1787\")",
      "parent_sha": "28ad3ba335f8212a58f73965e30c897cda73cb69"
    }
  },
  {
    "oid": "8c7440e1414601c67ca339848b87e70281ba3fa6",
    "message": "benchmarks: add NETTY_EPOLL as an option for transport testing",
    "date": "2016-05-18T23:37:42Z",
    "url": "https://github.com/grpc/grpc-java/commit/8c7440e1414601c67ca339848b87e70281ba3fa6",
    "details": {
      "sha": "4629153a8007e33284f0af898beb587e06cf418b",
      "filename": "benchmarks/src/jmh/java/io/grpc/benchmarks/TransportBenchmark.java",
      "status": "modified",
      "additions": 37,
      "deletions": 1,
      "changes": 38,
      "blob_url": "https://github.com/grpc/grpc-java/blob/8c7440e1414601c67ca339848b87e70281ba3fa6/benchmarks%2Fsrc%2Fjmh%2Fjava%2Fio%2Fgrpc%2Fbenchmarks%2FTransportBenchmark.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/8c7440e1414601c67ca339848b87e70281ba3fa6/benchmarks%2Fsrc%2Fjmh%2Fjava%2Fio%2Fgrpc%2Fbenchmarks%2FTransportBenchmark.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/benchmarks%2Fsrc%2Fjmh%2Fjava%2Fio%2Fgrpc%2Fbenchmarks%2FTransportBenchmark.java?ref=8c7440e1414601c67ca339848b87e70281ba3fa6",
      "patch": "@@ -50,6 +50,9 @@\n import io.grpc.netty.NettyChannelBuilder;\n import io.grpc.netty.NettyServerBuilder;\n import io.grpc.okhttp.OkHttpChannelBuilder;\n+import io.netty.channel.Channel;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.ServerChannel;\n import io.netty.channel.local.LocalAddress;\n import io.netty.channel.local.LocalChannel;\n import io.netty.channel.local.LocalServerChannel;\n@@ -71,7 +74,7 @@\n @State(Scope.Benchmark)\n public class TransportBenchmark {\n   public enum Transport {\n-    INPROCESS, NETTY, NETTY_LOCAL, OKHTTP\n+    INPROCESS, NETTY, NETTY_LOCAL, NETTY_EPOLL, OKHTTP\n   }\n \n   @Param({\"INPROCESS\", \"NETTY\", \"NETTY_LOCAL\", \"OKHTTP\"})\n@@ -82,6 +85,7 @@ public enum Transport {\n   private ManagedChannel channel;\n   private Server server;\n   private BenchmarkServiceGrpc.BenchmarkServiceBlockingStub stub;\n+  private volatile EventLoopGroup groupToShutdown;\n \n   @Setup\n   public void setUp() throws Exception {\n@@ -114,6 +118,31 @@ public void setUp() throws Exception {\n             .negotiationType(NegotiationType.PLAINTEXT);\n         break;\n       }\n+      case NETTY_EPOLL:\n+      {\n+        InetSocketAddress address = new InetSocketAddress(\"localhost\", pickUnusedPort());\n+\n+        // Reflection used since they are only available on linux.\n+        Class<?> groupClass = Class.forName(\"io.netty.channel.epoll.EpollEventLoopGroup\");\n+        EventLoopGroup group = (EventLoopGroup) groupClass.newInstance();\n+\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends ServerChannel> serverChannelClass = (Class<? extends ServerChannel>)\n+            Class.forName(\"io.netty.channel.epoll.EpollServerSocketChannel\");\n+        serverBuilder = NettyServerBuilder.forAddress(address)\n+            .bossEventLoopGroup(group)\n+            .workerEventLoopGroup(group)\n+            .channelType(serverChannelClass);\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Channel> channelClass = (Class<? extends Channel>)\n+            Class.forName(\"io.netty.channel.epoll.EpollSocketChannel\");\n+        channelBuilder = NettyChannelBuilder.forAddress(address)\n+            .eventLoopGroup(group)\n+            .channelType(channelClass)\n+            .negotiationType(NegotiationType.PLAINTEXT);\n+        groupToShutdown = group;\n+        break;\n+      }\n       case OKHTTP:\n       {\n         int port = pickUnusedPort();\n@@ -155,6 +184,13 @@ public void tearDown() throws Exception {\n     if (!server.isTerminated()) {\n       throw new Exception(\"failed to shut down server\");\n     }\n+    if (groupToShutdown != null) {\n+      groupToShutdown.shutdownGracefully(0, 1, TimeUnit.SECONDS);\n+      groupToShutdown.awaitTermination(1, TimeUnit.SECONDS);\n+      if (!groupToShutdown.isTerminated()) {\n+        throw new Exception(\"failed to shut down event loop group.\");\n+      }\n+    }\n   }\n \n   private SimpleRequest simpleRequest = SimpleRequest.newBuilder()",
      "parent_sha": "e19848092d0d8ea9878a39cd018213802afb5678"
    }
  },
  {
    "oid": "ada32b0cb13efe312a8be2e9e01e7f60129b9f63",
    "message": "Optimize number of DATA frames for unary requests\n\nResolves #10",
    "date": "2015-01-23T00:45:20Z",
    "url": "https://github.com/grpc/grpc-java/commit/ada32b0cb13efe312a8be2e9e01e7f60129b9f63",
    "details": {
      "sha": "d6a17c2cd1081d914c247604dc1bbce659f475f3",
      "filename": "core/src/main/java/com/google/net/stubby/ChannelImpl.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/grpc/grpc-java/blob/ada32b0cb13efe312a8be2e9e01e7f60129b9f63/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fnet%2Fstubby%2FChannelImpl.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/ada32b0cb13efe312a8be2e9e01e7f60129b9f63/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fnet%2Fstubby%2FChannelImpl.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fnet%2Fstubby%2FChannelImpl.java?ref=ada32b0cb13efe312a8be2e9e01e7f60129b9f63",
      "patch": "@@ -238,11 +238,14 @@ public void running() {}\n   private class CallImpl<ReqT, RespT> extends Call<ReqT, RespT> {\n     private final MethodDescriptor<ReqT, RespT> method;\n     private final SerializingExecutor callExecutor;\n+    private final boolean unaryRequest;\n     private ClientStream stream;\n \n     public CallImpl(MethodDescriptor<ReqT, RespT> method, SerializingExecutor executor) {\n       this.method = method;\n       this.callExecutor = executor;\n+      this.unaryRequest = method.getType() == MethodType.UNARY\n+          || method.getType() == MethodType.SERVER_STREAMING;\n     }\n \n     @Override\n@@ -308,7 +311,12 @@ public void sendPayload(ReqT payload) {\n           cancel();\n         }\n       }\n-      stream.flush();\n+      // For unary requests, we don't flush since we know that halfClose should be coming soon. This\n+      // allows us to piggy-back the END_STREAM=true on the last payload frame without opening the\n+      // possibility of broken applications forgetting to call halfClose without noticing.\n+      if (!unaryRequest) {\n+        stream.flush();\n+      }\n     }\n \n     private class ClientStreamListenerImpl implements ClientStreamListener {",
      "parent_sha": "5e6078594b1a3b248bed17e9f1ed9b8ff634a11a"
    }
  },
  {
    "oid": "acf093dc14f76f42f99086974041ec0e276c783b",
    "message": "android-interop-testing: fix lint\n\nfix JavaStyle and ErrorProne warnings found in internal weekly import",
    "date": "2017-03-04T00:58:58Z",
    "url": "https://github.com/grpc/grpc-java/commit/acf093dc14f76f42f99086974041ec0e276c783b",
    "details": {
      "sha": "2b02ae06f501e3a32883a0a86c214cc39aad4a4b",
      "filename": "android-interop-testing/app/src/main/java/io/grpc/android/integrationtest/InteropTester.java",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/grpc/grpc-java/blob/acf093dc14f76f42f99086974041ec0e276c783b/android-interop-testing%2Fapp%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fandroid%2Fintegrationtest%2FInteropTester.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/acf093dc14f76f42f99086974041ec0e276c783b/android-interop-testing%2Fapp%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fandroid%2Fintegrationtest%2FInteropTester.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/android-interop-testing%2Fapp%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fandroid%2Fintegrationtest%2FInteropTester.java?ref=acf093dc14f76f42f99086974041ec0e276c783b",
      "patch": "@@ -60,7 +60,6 @@\n import io.grpc.testing.StreamRecorder;\n import java.io.PrintWriter;\n import java.io.StringWriter;\n-import java.lang.RuntimeException;\n import java.util.Arrays;\n import java.util.List;\n import java.util.concurrent.ArrayBlockingQueue;\n@@ -79,9 +78,10 @@ final class InteropTester extends AsyncTask<Void, Void, String> {\n   private TestServiceGrpc.TestServiceStub asyncStub;\n   private String testCase;\n   private TestListener listener;\n-  private static int TIMEOUT_MILLIS = 5000;\n+  private static final int TIMEOUT_MILLIS = 5000;\n \n-  class ResponseObserver implements StreamObserver<Messages.StreamingOutputCallResponse> {\n+  private static final class ResponseObserver\n+      implements StreamObserver<Messages.StreamingOutputCallResponse> {\n     public LinkedBlockingQueue<Object> responses = new LinkedBlockingQueue<Object>();\n     final Object magicTailResponse = new Object();\n \n@@ -319,7 +319,6 @@ public void pingPong() throws Exception {\n     goldenResponses[2].payload.body = new byte[2653];\n     goldenResponses[3].payload.body = new byte[58979];\n \n-    @SuppressWarnings(\"unchecked\")\n     ResponseObserver responseObserver = new ResponseObserver();\n     StreamObserver<Messages.StreamingOutputCallRequest> requestObserver\n         = asyncStub.fullDuplexCall(responseObserver);\n@@ -339,7 +338,6 @@ public void pingPong() throws Exception {\n   }\n \n   public void emptyStream() throws Exception {\n-    @SuppressWarnings(\"unchecked\")\n     ResponseObserver responseObserver = new ResponseObserver();\n     StreamObserver<StreamingOutputCallRequest> requestObserver\n         = asyncStub.fullDuplexCall(responseObserver);",
      "parent_sha": "7bb60dc05ce5294e02f9e228fcd7dde668066a06"
    }
  },
  {
    "oid": "95a44e059233e188081dd0f679f058b35efc2e1c",
    "message": "Move retrieval of elapsed time in handleRpcStreamClosed to make TSan happy (#9923)\n\n* In `handleRpcStreamClosed()`, move retry handling to before the call to `xdsResponseHandler.handleStreamClosed()` so that TSan doesn't report a race condition that is completely meaningless.\r\n\r\nfixes #9920",
    "date": "2023-03-02T23:28:37Z",
    "url": "https://github.com/grpc/grpc-java/commit/95a44e059233e188081dd0f679f058b35efc2e1c",
    "details": {
      "sha": "57e0575890b5ba0eec6981a4a4ff980ea1eb4d8c",
      "filename": "xds/src/main/java/io/grpc/xds/AbstractXdsClient.java",
      "status": "modified",
      "additions": 11,
      "deletions": 10,
      "changes": 21,
      "blob_url": "https://github.com/grpc/grpc-java/blob/95a44e059233e188081dd0f679f058b35efc2e1c/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FAbstractXdsClient.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/95a44e059233e188081dd0f679f058b35efc2e1c/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FAbstractXdsClient.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FAbstractXdsClient.java?ref=95a44e059233e188081dd0f679f058b35efc2e1c",
      "patch": "@@ -330,6 +330,17 @@ private void handleRpcStreamClosed(Status error) {\n         return;\n       }\n \n+      if (responseReceived || retryBackoffPolicy == null) {\n+        // Reset the backoff sequence if had received a response, or backoff sequence\n+        // has never been initialized.\n+        retryBackoffPolicy = backoffPolicyProvider.get();\n+      }\n+      // Need this here to avoid tsan race condition in XdsClientImplTestBase.sendToNonexistentHost\n+      long elapsed = stopwatch.elapsed(TimeUnit.NANOSECONDS);\n+      long delayNanos = Math.max(0, retryBackoffPolicy.nextBackoffNanos() - elapsed);\n+      rpcRetryTimer = syncContext.schedule(\n+          new RpcRetryTask(), delayNanos, TimeUnit.NANOSECONDS, timeService);\n+\n       checkArgument(!error.isOk(), \"unexpected OK status\");\n       String errorMsg = error.getDescription() != null\n           && error.getDescription().equals(CLOSED_BY_SERVER)\n@@ -341,17 +352,7 @@ private void handleRpcStreamClosed(Status error) {\n       xdsResponseHandler.handleStreamClosed(error);\n       cleanUp();\n \n-      if (responseReceived || retryBackoffPolicy == null) {\n-        // Reset the backoff sequence if had received a response, or backoff sequence\n-        // has never been initialized.\n-        retryBackoffPolicy = backoffPolicyProvider.get();\n-      }\n-      long delayNanos = Math.max(\n-          0,\n-          retryBackoffPolicy.nextBackoffNanos() - stopwatch.elapsed(TimeUnit.NANOSECONDS));\n       logger.log(XdsLogLevel.INFO, \"Retry ADS stream in {0} ns\", delayNanos);\n-      rpcRetryTimer = syncContext.schedule(\n-          new RpcRetryTask(), delayNanos, TimeUnit.NANOSECONDS, timeService);\n     }\n \n     private void close(Exception error) {",
      "parent_sha": "c367b267c66d773433a158833f7b928004fc5c87"
    }
  },
  {
    "oid": "5d3459939012b65add792f989c6cbfdea483b5dd",
    "message": "Daemonize InProcess threads",
    "date": "2015-09-03T21:57:20Z",
    "url": "https://github.com/grpc/grpc-java/commit/5d3459939012b65add792f989c6cbfdea483b5dd",
    "details": {
      "sha": "2752e11798751e0320c59e46527c68a592113d72",
      "filename": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/grpc/grpc-java/blob/5d3459939012b65add792f989c6cbfdea483b5dd/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finprocess%2FInProcessTransport.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/5d3459939012b65add792f989c6cbfdea483b5dd/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finprocess%2FInProcessTransport.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Finprocess%2FInProcessTransport.java?ref=5d3459939012b65add792f989c6cbfdea483b5dd",
      "patch": "@@ -85,24 +85,30 @@ public synchronized void start(ClientTransport.Listener listener) {\n     if (serverTransportListener == null) {\n       shutdownStatus = Status.UNAVAILABLE.withDescription(\"Could not find server: \" + name);\n       final Status localShutdownStatus = shutdownStatus;\n-      new Thread(new Runnable() {\n+      Thread shutdownThread = new Thread(new Runnable() {\n         @Override\n         public void run() {\n           synchronized (InProcessTransport.this) {\n             notifyShutdown(localShutdownStatus);\n             notifyTerminated();\n           }\n         }\n-      }).start();\n+      });\n+      shutdownThread.setDaemon(true);\n+      shutdownThread.setName(\"grpc-inprocess-shutdown\");\n+      shutdownThread.start();\n     }\n-    new Thread(new Runnable() {\n+    Thread readyThread = new Thread(new Runnable() {\n       @Override\n       public void run() {\n         synchronized (InProcessTransport.this) {\n           clientTransportListener.transportReady();\n         }\n       }\n-    }).start();\n+    });\n+    readyThread.setDaemon(true);\n+    readyThread.setName(\"grpc-inprocess-ready\");\n+    readyThread.start();\n   }\n \n   @Override",
      "parent_sha": "6a782a035ec7ad3d4bbd755b4dd0f751e4f2441c"
    }
  },
  {
    "oid": "62fb1d2c8a26b7891c655a85d460f9478c4de707",
    "message": "Bug fix. frameWriter and frameReader are not initialized when an Exception is thrown in socket creation.\nSo do not touch them in shutdown path if they are null.",
    "date": "2015-02-26T18:48:14Z",
    "url": "https://github.com/grpc/grpc-java/commit/62fb1d2c8a26b7891c655a85d460f9478c4de707",
    "details": {
      "sha": "0adc5e03921fea909528b00475d33b4f2d47433c",
      "filename": "okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpClientTransport.java",
      "status": "modified",
      "additions": 10,
      "deletions": 7,
      "changes": 17,
      "blob_url": "https://github.com/grpc/grpc-java/blob/62fb1d2c8a26b7891c655a85d460f9478c4de707/okhttp%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftransport%2Fokhttp%2FOkHttpClientTransport.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/62fb1d2c8a26b7891c655a85d460f9478c4de707/okhttp%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftransport%2Fokhttp%2FOkHttpClientTransport.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/okhttp%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftransport%2Fokhttp%2FOkHttpClientTransport.java?ref=62fb1d2c8a26b7891c655a85d460f9478c4de707",
      "patch": "@@ -234,8 +234,9 @@ public void shutdown() {\n     if (normalClose) {\n       // Send GOAWAY with lastGoodStreamId of 0, since we don't expect any server-initiated streams.\n       // The GOAWAY is part of graceful shutdown.\n-      frameWriter.goAway(0, ErrorCode.NO_ERROR, new byte[0]);\n-\n+      if (frameWriter != null) {\n+        frameWriter.goAway(0, ErrorCode.NO_ERROR, new byte[0]);\n+      }\n       onGoAway(Integer.MAX_VALUE, Status.INTERNAL.withDescription(\"Transport stopped\"));\n     }\n     stopIfNecessary();\n@@ -321,11 +322,13 @@ void stopIfNecessary() {\n     }\n     if (shouldStop) {\n       // Wait for the frame writer to close.\n-      frameWriter.close();\n-      try {\n-        frameReader.close();\n-      } catch (IOException e) {\n-        throw new RuntimeException(e);\n+      if (frameWriter != null) {\n+        frameWriter.close();\n+        try {\n+          frameReader.close();\n+        } catch (IOException e) {\n+          throw new RuntimeException(e);\n+        }\n       }\n       listener.transportTerminated();\n     }",
      "parent_sha": "6c6789c0a8f7fee66175e030737e38b143eafe65"
    }
  },
  {
    "oid": "5081e60626d952c4ed60ecf57a85668b7b59064e",
    "message": "xds: Replace null check with has value check because proto fields can never be null. (#11675)",
    "date": "2024-11-08T07:47:24Z",
    "url": "https://github.com/grpc/grpc-java/commit/5081e60626d952c4ed60ecf57a85668b7b59064e",
    "details": {
      "sha": "edd8a09e4ca64662ddde979107e013808e4347f0",
      "filename": "xds/src/main/java/io/grpc/xds/GcpAuthenticationFilter.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/grpc/grpc-java/blob/5081e60626d952c4ed60ecf57a85668b7b59064e/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FGcpAuthenticationFilter.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/5081e60626d952c4ed60ecf57a85668b7b59064e/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FGcpAuthenticationFilter.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/xds%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fxds%2FGcpAuthenticationFilter.java?ref=5081e60626d952c4ed60ecf57a85668b7b59064e",
      "patch": "@@ -72,8 +72,8 @@ public ConfigOrError<? extends FilterConfig> parseFilterConfig(Message rawProtoM\n \n     long cacheSize = 10;\n     // Validate cache_config\n-    TokenCacheConfig cacheConfig = gcpAuthnProto.getCacheConfig();\n-    if (cacheConfig != null) {\n+    if (gcpAuthnProto.hasCacheConfig()) {\n+      TokenCacheConfig cacheConfig = gcpAuthnProto.getCacheConfig();\n       cacheSize = cacheConfig.getCacheSize().getValue();\n       if (cacheSize == 0) {\n         return ConfigOrError.fromError(",
      "parent_sha": "d6c80294a736a377a8b39e31c253f918eec5aa1d"
    }
  },
  {
    "oid": "d5f22b77b2e32ce941e60e95d5f05f614c181f66",
    "message": "netty: Assign the result of a @CheckReturnValue'ed constructor to an unused variable\n\nThis fixes a soon-to-be compile error via ErrorProne.\n\nAlternatively, we could use assertThrows() instead of\n@Test(expected = ...), but grpc doesn't yet require Java 8.",
    "date": "2022-01-18T17:27:25Z",
    "url": "https://github.com/grpc/grpc-java/commit/d5f22b77b2e32ce941e60e95d5f05f614c181f66",
    "details": {
      "sha": "8dfeb990e2be4a17a45a8a4c6dc7f751f850612c",
      "filename": "netty/src/test/java/io/grpc/netty/KeepAliveEnforcerTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/grpc/grpc-java/blob/d5f22b77b2e32ce941e60e95d5f05f614c181f66/netty%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fnetty%2FKeepAliveEnforcerTest.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/d5f22b77b2e32ce941e60e95d5f05f614c181f66/netty%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fnetty%2FKeepAliveEnforcerTest.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/netty%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fnetty%2FKeepAliveEnforcerTest.java?ref=d5f22b77b2e32ce941e60e95d5f05f614c181f66",
      "patch": "@@ -32,12 +32,12 @@ public class KeepAliveEnforcerTest {\n \n   @Test(expected = IllegalArgumentException.class)\n   public void negativeTime() {\n-    new KeepAliveEnforcer(true, -1, TimeUnit.NANOSECONDS);\n+    KeepAliveEnforcer unused = new KeepAliveEnforcer(true, -1, TimeUnit.NANOSECONDS);\n   }\n \n   @Test(expected = NullPointerException.class)\n   public void nullTimeUnit() {\n-    new KeepAliveEnforcer(true, 1, null);\n+    KeepAliveEnforcer unused = new KeepAliveEnforcer(true, 1, null);\n   }\n \n   @Test",
      "parent_sha": "d853414ba3dbff6a87255cb5945c616e861355e6"
    }
  },
  {
    "oid": "29172a96657f3875b900879d37f808014cd6b123",
    "message": "interop-testing: fix misleading log message (#8426)\n\n`logger.log(Level.WARNING, \"Rpc failed: {0}\", t)` will just print a literal \"Rpc failed: {0}\" followed by exception details.",
    "date": "2021-08-20T18:02:03Z",
    "url": "https://github.com/grpc/grpc-java/commit/29172a96657f3875b900879d37f808014cd6b123",
    "details": {
      "sha": "087152dca640f2a3c8c8341cde875a4c07ab38f8",
      "filename": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/29172a96657f3875b900879d37f808014cd6b123/interop-testing%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FXdsTestClient.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/29172a96657f3875b900879d37f808014cd6b123/interop-testing%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FXdsTestClient.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/interop-testing%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FXdsTestClient.java?ref=29172a96657f3875b900879d37f808014cd6b123",
      "patch": "@@ -369,7 +369,7 @@ public void onCompleted() {\n                 @Override\n                 public void onError(Throwable t) {\n                   if (printResponse) {\n-                    logger.log(Level.WARNING, \"Rpc failed: {0}\", t);\n+                    logger.log(Level.WARNING, \"Rpc failed\", t);\n                   }\n                   handleRpcError(requestId, config.rpcType, Status.fromThrowable(t),\n                       savedWatchers);",
      "parent_sha": "e32e177d5aad38ba1160adf677798a1298a8f941"
    }
  },
  {
    "oid": "621fbad78c197a0d596f6ca8a8524509be11b3c1",
    "message": "Reduce test flakiness (#10429)",
    "date": "2023-07-28T21:55:37Z",
    "url": "https://github.com/grpc/grpc-java/commit/621fbad78c197a0d596f6ca8a8524509be11b3c1",
    "details": {
      "sha": "62a3618b41694ef2b959a511145b63273385f715",
      "filename": "xds/src/test/java/io/grpc/xds/WeightedRoundRobinLoadBalancerTest.java",
      "status": "modified",
      "additions": 19,
      "deletions": 19,
      "changes": 38,
      "blob_url": "https://github.com/grpc/grpc-java/blob/621fbad78c197a0d596f6ca8a8524509be11b3c1/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FWeightedRoundRobinLoadBalancerTest.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/621fbad78c197a0d596f6ca8a8524509be11b3c1/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FWeightedRoundRobinLoadBalancerTest.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FWeightedRoundRobinLoadBalancerTest.java?ref=621fbad78c197a0d596f6ca8a8524509be11b3c1",
      "patch": "@@ -520,8 +520,8 @@ weightedSubchannel2.new OrcaReportListener(weightedConfig.errorUtilizationPenalt\n     }\n     assertThat(pickCount.size()).isEqualTo(2);\n     // within blackout period, fallback to simple round robin\n-    assertThat(Math.abs(pickCount.get(weightedSubchannel1) / 1000.0 - 0.5)).isAtMost(0.001);\n-    assertThat(Math.abs(pickCount.get(weightedSubchannel2) / 1000.0 - 0.5)).isAtMost(0.001);\n+    assertThat(Math.abs(pickCount.get(weightedSubchannel1) / 1000.0 - 0.5)).isLessThan(0.002);\n+    assertThat(Math.abs(pickCount.get(weightedSubchannel2) / 1000.0 - 0.5)).isLessThan(0.002);\n \n     assertThat(fakeClock.forwardTime(5, TimeUnit.SECONDS)).isEqualTo(1);\n     pickCount = new HashMap<>();\n@@ -532,9 +532,9 @@ weightedSubchannel2.new OrcaReportListener(weightedConfig.errorUtilizationPenalt\n     assertThat(pickCount.size()).isEqualTo(2);\n     // after blackout period\n     assertThat(Math.abs(pickCount.get(weightedSubchannel1) / 1000.0 - 2.0 / 3))\n-            .isAtMost(0.001);\n+            .isLessThan(0.002);\n     assertThat(Math.abs(pickCount.get(weightedSubchannel2) / 1000.0 - 1.0 / 3))\n-            .isAtMost(0.001);\n+            .isLessThan(0.002);\n   }\n \n   @Test\n@@ -632,9 +632,9 @@ weightedSubchannel2.new OrcaReportListener(weightedConfig.errorUtilizationPenalt\n     }\n     assertThat(pickCount.size()).isEqualTo(2);\n     assertThat(Math.abs(pickCount.get(weightedSubchannel1) / 1000.0 - 2.0 / 3))\n-            .isAtMost(0.001);\n+            .isLessThan(0.002);\n     assertThat(Math.abs(pickCount.get(weightedSubchannel2) / 1000.0 - 1.0 / 3))\n-            .isAtMost(0.001);\n+            .isLessThan(0.002);\n \n     // weight expired, fallback to simple round robin\n     assertThat(fakeClock.forwardTime(300, TimeUnit.SECONDS)).isEqualTo(1);\n@@ -645,9 +645,9 @@ weightedSubchannel2.new OrcaReportListener(weightedConfig.errorUtilizationPenalt\n     }\n     assertThat(pickCount.size()).isEqualTo(2);\n     assertThat(Math.abs(pickCount.get(weightedSubchannel1) / 1000.0 - 0.5))\n-            .isAtMost(0.001);\n+            .isLessThan(0.002);\n     assertThat(Math.abs(pickCount.get(weightedSubchannel2) / 1000.0 - 0.5))\n-            .isAtMost(0.001);\n+            .isLessThan(0.002);\n   }\n \n   @Test\n@@ -751,12 +751,12 @@ weightedSubchannel2.new OrcaReportListener(weightedConfig.errorUtilizationPenalt\n     }\n     assertThat(pickCount.size()).isEqualTo(3);\n     assertThat(Math.abs(pickCount.get(weightedSubchannel1) / 1000.0 - 4.0 / 9))\n-            .isAtMost(0.001);\n+            .isLessThan(0.002);\n     assertThat(Math.abs(pickCount.get(weightedSubchannel2) / 1000.0 - 2.0 / 9))\n-            .isAtMost(0.001);\n+            .isLessThan(0.002);\n     // subchannel3's weight is average of subchannel1 and subchannel2\n     assertThat(Math.abs(pickCount.get(weightedSubchannel3) / 1000.0 - 3.0 / 9))\n-            .isAtMost(0.001);\n+            .isLessThan(0.002);\n   }\n \n   @Test\n@@ -817,9 +817,9 @@ public void run() {\n     assertThat(pickCount.size()).isEqualTo(2);\n     // after blackout period\n     assertThat(Math.abs(pickCount.get(weightedSubchannel1).get() / 2000.0 - 2.0 / 3))\n-            .isAtMost(0.001);\n+            .isLessThan(0.002);\n     assertThat(Math.abs(pickCount.get(weightedSubchannel2).get() / 2000.0 - 1.0 / 3))\n-            .isAtMost(0.001);\n+            .isLessThan(0.002);\n   }\n \n   @Test(expected = NullPointerException.class)\n@@ -947,7 +947,7 @@ public void testStaticStrideSchedulerNonIntegers1() {\n     }\n     for (int i = 0; i < 3; i++) {\n       assertThat(Math.abs(pickCount.getOrDefault(i, 0) / 1000.0 - weights[i] / totalWeight))\n-          .isAtMost(0.001);\n+          .isLessThan(0.002);\n     }\n   }\n \n@@ -964,7 +964,7 @@ public void testStaticStrideSchedulerNonIntegers2() {\n     }\n     for (int i = 0; i < 3; i++) {\n       assertThat(Math.abs(pickCount.getOrDefault(i, 0) / 1000.0 - weights[i] / totalWeight))\n-          .isAtMost(0.001);\n+          .isLessThan(0.002);\n     }\n   }\n \n@@ -981,7 +981,7 @@ public void testTwoWeights() {\n     }\n     for (int i = 0; i < 2; i++) {\n       assertThat(Math.abs(pickCount.getOrDefault(i, 0) / 1000.0 - weights[i] / totalWeight))\n-          .isAtMost(0.001);\n+          .isLessThan(0.002);\n     }\n   }\n \n@@ -998,7 +998,7 @@ public void testManyWeights() {\n     }\n     for (int i = 0; i < 5; i++) {\n       assertThat(Math.abs(pickCount.getOrDefault(i, 0) / 1000.0 - weights[i] / totalWeight))\n-          .isAtMost(0.0011);\n+          .isLessThan(0.002);\n     }\n   }\n \n@@ -1052,7 +1052,7 @@ public void testImmediateWraparound() {\n     }\n     for (int i = 0; i < 5; i++) {\n       assertThat(Math.abs(pickCount.getOrDefault(i, 0) / 1000.0 - weights[i] / totalWeight))\n-          .isAtMost(0.001);\n+          .isLessThan(0.002);\n     }\n   }\n   \n@@ -1069,7 +1069,7 @@ public void testWraparound() {\n     }\n     for (int i = 0; i < 5; i++) {\n       assertThat(Math.abs(pickCount.getOrDefault(i, 0) / 1000.0 - weights[i] / totalWeight))\n-          .isAtMost(0.0011);\n+          .isLessThan(0.002);\n     }\n   }\n ",
      "parent_sha": "31d5b4067205626389221595d31fc53eccef38ab"
    }
  },
  {
    "oid": "63271f472995a00bd4b4704d620dd35d695b9015",
    "message": "Fixing a compatibility issue between the GFE and gRPC java client for the V2 protocol.\n\nThe GFE should not be sending DATA frames with endOfStream=true.\nHowever to make things work in the short-term, if we receive one we\nstill need to process the DATA frame.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=80243944",
    "date": "2015-01-08T22:43:09Z",
    "url": "https://github.com/grpc/grpc-java/commit/63271f472995a00bd4b4704d620dd35d695b9015",
    "details": {
      "sha": "59f7df57e7cecf05621ae5bdd45058f8164026f0",
      "filename": "core/src/main/java/com/google/net/stubby/transport/Http2ClientStream.java",
      "status": "modified",
      "additions": 17,
      "deletions": 17,
      "changes": 34,
      "blob_url": "https://github.com/grpc/grpc-java/blob/63271f472995a00bd4b4704d620dd35d695b9015/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fnet%2Fstubby%2Ftransport%2FHttp2ClientStream.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/63271f472995a00bd4b4704d620dd35d695b9015/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fnet%2Fstubby%2Ftransport%2FHttp2ClientStream.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fnet%2Fstubby%2Ftransport%2FHttp2ClientStream.java?ref=63271f472995a00bd4b4704d620dd35d695b9015",
      "patch": "@@ -104,24 +104,24 @@ protected void transportDataReceived(Buffer frame, boolean endOfStream) {\n         }\n       }\n     } else {\n-      if (endOfStream && GRPC_V2_PROTOCOL) {\n-        if (false) {\n-          // This is a protocol violation as we expect to receive trailers.\n-          transportError = Status.INTERNAL.withDescription(\"Recevied EOS on DATA frame\");\n-          frame.close();\n-          inboundTransportError(transportError);\n+      inboundDataReceived(frame);\n+      if (endOfStream) {\n+        if (GRPC_V2_PROTOCOL) {\n+          if (false) {\n+            // This is a protocol violation as we expect to receive trailers.\n+            transportError = Status.INTERNAL.withDescription(\"Recevied EOS on DATA frame\");\n+            frame.close();\n+            inboundTransportError(transportError);\n+          } else {\n+            // TODO(user): Delete this hack when trailers are supported by GFE with v2. Currently\n+            // GFE doesn't support trailers, so when using gRPC v2 protocol GFE will not send any\n+            // status. We paper over this for now by just assuming OK. For all properly functioning\n+            // servers (both v1 and v2), stashedStatus should not be null here.\n+            Metadata.Trailers trailers = new Metadata.Trailers();\n+            trailers.put(Status.CODE_KEY, Status.OK);\n+            inboundTrailersReceived(trailers, Status.OK);\n+          }\n         } else {\n-          // TODO(user): Delete this hack when trailers are supported by GFE with v2. Currently GFE\n-          // doesn't support trailers, so when using gRPC v2 protocol GFE will not send any status.\n-          // We paper over this for now by just assuming OK. For all properly functioning servers\n-          // (both v1 and v2), stashedStatus should not be null here.\n-          Metadata.Trailers trailers = new Metadata.Trailers();\n-          trailers.put(Status.CODE_KEY, Status.OK);\n-          inboundTrailersReceived(trailers, Status.OK);\n-        }\n-      } else {\n-        inboundDataReceived(frame);\n-        if (endOfStream && !GRPC_V2_PROTOCOL) {\n           // Synthesize trailers until we get rid of v1.\n           inboundTrailersReceived(new Metadata.Trailers(), Status.OK);\n         }",
      "parent_sha": "5d953e840bd9a0ef732334fc2fb6eb60605daddc"
    }
  },
  {
    "oid": "ffb70cd433818f8f40be285349bfd6764af9f759",
    "message": "xds: patch unit tests for changes in locality filtering (#6881)\n\nAdd unit test that covers handling EDS responses containing: locality with 0 endpoint, locality with 0 weight.",
    "date": "2020-04-01T01:06:13Z",
    "url": "https://github.com/grpc/grpc-java/commit/ffb70cd433818f8f40be285349bfd6764af9f759",
    "details": {
      "sha": "c6ffe2fca20c1609994b6232f38a3d180e1e5c99",
      "filename": "xds/src/test/java/io/grpc/xds/XdsClientImplTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/grpc/grpc-java/blob/ffb70cd433818f8f40be285349bfd6764af9f759/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FXdsClientImplTest.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/ffb70cd433818f8f40be285349bfd6764af9f759/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FXdsClientImplTest.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/xds%2Fsrc%2Ftest%2Fjava%2Fio%2Fgrpc%2Fxds%2FXdsClientImplTest.java?ref=ffb70cd433818f8f40be285349bfd6764af9f759",
      "patch": "@@ -100,6 +100,7 @@\n import io.grpc.xds.XdsClientImpl.MessagePrinter;\n import java.io.IOException;\n import java.util.ArrayDeque;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Queue;\n@@ -2001,9 +2002,12 @@ public void edsResponseWithMatchingResource() {\n                         buildLbEndpoint(\"192.168.0.1\", 8080, HealthStatus.HEALTHY, 2)),\n                     1, 0),\n                 buildLocalityLbEndpoints(\"region3\", \"zone3\", \"subzone3\",\n+                    Collections.<io.envoyproxy.envoy.api.v2.endpoint.LbEndpoint>emptyList(),\n+                    2, 1), /* locality with 0 endpoint */\n+                buildLocalityLbEndpoints(\"region4\", \"zone4\", \"subzone4\",\n                     ImmutableList.of(\n                         buildLbEndpoint(\"192.168.142.5\", 80, HealthStatus.UNKNOWN, 5)),\n-                    2, 1)),\n+                    0, 2) /* locality with 0 weight */),\n             ImmutableList.of(\n                 buildDropOverload(\"lb\", 200),\n                 buildDropOverload(\"throttle\", 1000)))),\n@@ -2043,10 +2047,7 @@ public void edsResponseWithMatchingResource() {\n                     new LbEndpoint(\"192.168.0.1\", 8080,\n                         2, true)), 1, 0),\n             new Locality(\"region3\", \"zone3\", \"subzone3\"),\n-            new LocalityLbEndpoints(\n-                ImmutableList.of(\n-                    new LbEndpoint(\"192.168.142.5\", 80,\n-                        5, true)), 2, 1));\n+            new LocalityLbEndpoints(Collections.<LbEndpoint>emptyList(), 2, 1));\n   }\n \n   @Test",
      "parent_sha": "5bb5e255833e79fc8be5671aeef6828f93e6a21b"
    }
  },
  {
    "oid": "de0a16cad3ea53947c6a48519ddae308cdf110b3",
    "message": "Use something closer to the appropriate mime-type.\n\nThis is necessary for a C client to talk to the Java server.\n\nTechnically, we should be using application/grpc+proto, but since the\n\"proto\" portion is marshaller-dependent, we will need more plumbing\nbefore we can use the complete form.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=77271620",
    "date": "2015-01-08T22:42:54Z",
    "url": "https://github.com/grpc/grpc-java/commit/de0a16cad3ea53947c6a48519ddae308cdf110b3",
    "details": {
      "sha": "7a84a838958b8046c42a4fd1c58fba181adc9134",
      "filename": "core/src/main/java/com/google/net/stubby/newtransport/HttpUtil.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/grpc/grpc-java/blob/de0a16cad3ea53947c6a48519ddae308cdf110b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fnet%2Fstubby%2Fnewtransport%2FHttpUtil.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/de0a16cad3ea53947c6a48519ddae308cdf110b3/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fnet%2Fstubby%2Fnewtransport%2FHttpUtil.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fnet%2Fstubby%2Fnewtransport%2FHttpUtil.java?ref=de0a16cad3ea53947c6a48519ddae308cdf110b3",
      "patch": "@@ -23,7 +23,7 @@ public final class HttpUtil {\n   /**\n    * Content-Type used for GRPC-over-HTTP/2.\n    */\n-  public static final String CONTENT_TYPE_PROTORPC = \"application/protorpc\";\n+  public static final String CONTENT_TYPE_PROTORPC = \"application/grpc\";\n \n   /**\n    * The HTTP method used for GRPC requests.",
      "parent_sha": "dd7ba53cf8a54749f2125d7083d2fb4d490be641"
    }
  },
  {
    "oid": "9b5575daa189402ea52004adf8c224ccd3506a94",
    "message": "Correct small grammar error in comment.",
    "date": "2015-03-03T00:11:50Z",
    "url": "https://github.com/grpc/grpc-java/commit/9b5575daa189402ea52004adf8c224ccd3506a94",
    "details": {
      "sha": "c41e71d0a234f4d77e8c5d136a82a0c958a11b92",
      "filename": "examples/src/main/java/io/grpc/examples/helloworld/HelloWorldServer.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/grpc/grpc-java/blob/9b5575daa189402ea52004adf8c224ccd3506a94/examples%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fexamples%2Fhelloworld%2FHelloWorldServer.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/9b5575daa189402ea52004adf8c224ccd3506a94/examples%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fexamples%2Fhelloworld%2FHelloWorldServer.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/examples%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Fexamples%2Fhelloworld%2FHelloWorldServer.java?ref=9b5575daa189402ea52004adf8c224ccd3506a94",
      "patch": "@@ -24,7 +24,7 @@ private void start() throws Exception {\n     Runtime.getRuntime().addShutdownHook(new Thread() {\n       @Override\n       public void run() {\n-        // Use stderr here since the logger may has been reset by its JVM shutdown hook.\n+        // Use stderr here since the logger may have been reset by its JVM shutdown hook.\n         System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n         HelloWorldServer.this.stop();\n         System.err.println(\"*** server shut down\");\n@@ -55,4 +55,4 @@ public void sayHello(HelloRequest req, StreamObserver<HelloResponse> responseObs\n       responseObserver.onCompleted();\n     }\n   }\n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "192144eaf952a4967d584044e87232a1181d2953"
    }
  },
  {
    "oid": "87cf40437c575c48abedf1152fb00ec92b5b0694",
    "message": "core: Mark CallOptions' deadline/executor as @Nullable\n\nThey are, but weren't consistently marked like the other members",
    "date": "2018-12-19T23:47:54Z",
    "url": "https://github.com/grpc/grpc-java/commit/87cf40437c575c48abedf1152fb00ec92b5b0694",
    "details": {
      "sha": "469de34abb4255159c4f78f0cd87d7e9af83d2bd",
      "filename": "core/src/main/java/io/grpc/CallOptions.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/grpc/grpc-java/blob/87cf40437c575c48abedf1152fb00ec92b5b0694/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FCallOptions.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/87cf40437c575c48abedf1152fb00ec92b5b0694/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FCallOptions.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2FCallOptions.java?ref=87cf40437c575c48abedf1152fb00ec92b5b0694",
      "patch": "@@ -46,7 +46,10 @@ public final class CallOptions {\n   // Although {@code CallOptions} is immutable, its fields are not final, so that we can initialize\n   // them outside of constructor. Otherwise the constructor will have a potentially long list of\n   // unnamed arguments, which is undesirable.\n+  @Nullable\n   private Deadline deadline;\n+  \n+  @Nullable\n   private Executor executor;\n \n   @Nullable\n@@ -197,7 +200,7 @@ public CallCredentials getCredentials() {\n    * Returns a new {@code CallOptions} with {@code executor} to be used instead of the default\n    * executor specified with {@link ManagedChannelBuilder#executor}.\n    */\n-  public CallOptions withExecutor(Executor executor) {\n+  public CallOptions withExecutor(@Nullable Executor executor) {\n     CallOptions newOptions = new CallOptions(this);\n     newOptions.executor = executor;\n     return newOptions;",
      "parent_sha": "d736dc31c42bef7d7e370abf19128df4a72d8d2d"
    }
  },
  {
    "oid": "d760a5addfddd497094cd1fb27e879f70e079b4f",
    "message": "interop-testing: No census asserts for standalone client\n\nThis prevents an assertion in the cross-language interop test suite:\nException in thread \"main\" java.lang.AssertionError: No record found\n\tat io.grpc.testing.integration.AbstractInteropTest.assertServerMetrics(AbstractInteropTest.java:1176)\n\tat io.grpc.testing.integration.AbstractInteropTest.assertMetrics(AbstractInteropTest.java:1120)\n\tat io.grpc.testing.integration.AbstractInteropTest.largeUnary(AbstractInteropTest.java:228)\n\tat io.grpc.testing.integration.TestServiceClient.runTest(TestServiceClient.java:215)\n\tat io.grpc.testing.integration.TestServiceClient.run(TestServiceClient.java:199)\n\tat io.grpc.testing.integration.TestServiceClient.main(TestServiceClient.java:84)",
    "date": "2016-10-12T18:13:57Z",
    "url": "https://github.com/grpc/grpc-java/commit/d760a5addfddd497094cd1fb27e879f70e079b4f",
    "details": {
      "sha": "2be3d2d5044e8667e0941cf31e21f2887bc88a8b",
      "filename": "interop-testing/src/main/java/io/grpc/testing/integration/TestServiceClient.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/grpc/grpc-java/blob/d760a5addfddd497094cd1fb27e879f70e079b4f/interop-testing%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FTestServiceClient.java",
      "raw_url": "https://github.com/grpc/grpc-java/raw/d760a5addfddd497094cd1fb27e879f70e079b4f/interop-testing%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FTestServiceClient.java",
      "contents_url": "https://api.github.com/repos/grpc/grpc-java/contents/interop-testing%2Fsrc%2Fmain%2Fjava%2Fio%2Fgrpc%2Ftesting%2Fintegration%2FTestServiceClient.java?ref=d760a5addfddd497094cd1fb27e879f70e079b4f",
      "patch": "@@ -314,7 +314,6 @@ protected ManagedChannel createChannel() {\n             .flowControlWindow(65 * 1024)\n             .negotiationType(useTls ? NegotiationType.TLS : NegotiationType.PLAINTEXT)\n             .sslContext(sslContext)\n-            .censusContextFactory(getClientCensusFactory())\n             .build();\n       } else {\n         OkHttpChannelBuilder builder = OkHttpChannelBuilder.forAddress(serverHost, serverPort);\n@@ -337,6 +336,12 @@ protected ManagedChannel createChannel() {\n         return builder.build();\n       }\n     }\n+\n+    @Override\n+    protected boolean metricsExpected() {\n+      // Server-side metrics won't be found, because server is a separate process.\n+      return false;\n+    }\n   }\n \n   private static String validTestCasesHelpText() {",
      "parent_sha": "132f7a9a3385d58d06fbe4b80d3290139c76b14a"
    }
  }
]