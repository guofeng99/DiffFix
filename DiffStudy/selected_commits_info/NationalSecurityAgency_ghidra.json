[
  {
    "oid": "bd00e97bee26f8962c0ee63590541d6dca343892",
    "message": "Added stack trace to exception to get more diagnostic output",
    "date": "2020-10-07T15:46:14Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/bd00e97bee26f8962c0ee63590541d6dca343892",
    "details": {
      "sha": "e18ca98a78f107e3931d58fd1a8a64dc8ad7c11a",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/util/headless/HeadlessAnalyzer.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/bd00e97bee26f8962c0ee63590541d6dca343892/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fheadless%2FHeadlessAnalyzer.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/bd00e97bee26f8962c0ee63590541d6dca343892/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fheadless%2FHeadlessAnalyzer.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fheadless%2FHeadlessAnalyzer.java?ref=bd00e97bee26f8962c0ee63590541d6dca343892",
      "patch": "@@ -1193,7 +1193,8 @@ else if (options.commit && !domFile.isCheckedOutExclusive()) {\n \t\t\t// This can never happen because there is no user interaction in headless!\n \t\t}\n \t\tcatch (Exception exc) {\n-\t\t\tMsg.error(this, domFile.getPathname() + \" Error during analysis: \" + exc.getMessage());\n+\t\t\tMsg.error(this, domFile.getPathname() + \" Error during analysis: \" + exc.getMessage(),\n+\t\t\t\texc);\n \t\t}\n \t\tfinally {\n ",
      "parent_sha": "20a7860856e5f1467decb2f61c27a42f7b82a507"
    }
  },
  {
    "oid": "3dbf930578486c52c364769d4a3db75742ac1497",
    "message": "fixed formatting in DbObjectCache",
    "date": "2020-05-20T17:25:01Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/3dbf930578486c52c364769d4a3db75742ac1497",
    "details": {
      "sha": "b99a9190b2bac88a15a23fbf82fb962755750d58",
      "filename": "Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/DBObjectCache.java",
      "status": "modified",
      "additions": 17,
      "deletions": 19,
      "changes": 36,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/3dbf930578486c52c364769d4a3db75742ac1497/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fdatabase%2FDBObjectCache.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/3dbf930578486c52c364769d4a3db75742ac1497/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fdatabase%2FDBObjectCache.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fdatabase%2FDBObjectCache.java?ref=3dbf930578486c52c364769d4a3db75742ac1497",
      "patch": "@@ -199,19 +199,18 @@ private void deleteSmallKeyRanges(List<KeyRange> keyRanges) {\n \t * @param keyRanges key ranges to delete\n \t */\n \tprivate void deleteLargeKeyRanges(List<KeyRange> keyRanges) {\n-\t\t//@formatter:off\n-\t\tmap.keySet().stream()\n-\t\t\t.filter(key -> keyRangesContain(keyRanges, key))\n-\t\t\t.collect(Collectors.toList())\n-\t\t\t.forEach(key -> {\n-\t\t\t\tKeyedSoftReference ref = map.remove(key);\n-\t\t\t\tDatabaseObject obj = ref.get();\n-\t\t\t\tif (obj != null) {\n-\t\t\t\t\tobj.setDeleted();\n-\t\t\t\t\tref.clear();\n-\t\t\t\t}\n-\t\t\t});\n-\t\t//@formatter:on\n+\t\tmap.keySet()\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(key -> keyRangesContain(keyRanges, key))\n+\t\t\t\t.collect(Collectors.toList())\n+\t\t\t\t.forEach(key -> {\n+\t\t\t\t\tKeyedSoftReference ref = map.remove(key);\n+\t\t\t\t\tDatabaseObject obj = ref.get();\n+\t\t\t\t\tif (obj != null) {\n+\t\t\t\t\t\tobj.setDeleted();\n+\t\t\t\t\t\tref.clear();\n+\t\t\t\t\t}\n+\t\t\t\t});\n \t}\n \n \t/**\n@@ -281,12 +280,11 @@ public synchronized void invalidate(long startKey, long endKey) {\n \t\t\t}\n \t\t}\n \t\telse {\n-\t\t\t//@formatter:off\n-\t\t\tmap.keySet().stream()\n-\t\t\t\t.filter(key -> (key >= startKey && key <= endKey))\n-\t\t\t\t.collect(Collectors.toList())\n-\t\t\t\t.forEach(key -> doInvalidate(key));\n-\t\t\t//@formatter:on\n+\t\t\tmap.keySet()\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.filter(key -> (key >= startKey && key <= endKey))\n+\t\t\t\t\t.collect(Collectors.toList())\n+\t\t\t\t\t.forEach(key -> doInvalidate(key));\n \t\t}\n \t}\n ",
      "parent_sha": "1675f226b381e407e24a591d210c6306c1c3fffe"
    }
  },
  {
    "oid": "0d3d65de235ea1da04eaf7b964d855d589f140a9",
    "message": "GP-3445: Fixed an IllegalStateException that could occur if both \"Load\nLocal Libraries From Disk\" and \"Load System Libraries From Disk\" options\nare used during import, and the same library is found in both local and\nsystem directories",
    "date": "2023-06-05T10:55:50Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/0d3d65de235ea1da04eaf7b964d855d589f140a9",
    "details": {
      "sha": "7ede49de110b3de00494c4f443dbbae6d0c4bb5e",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/AbstractLibrarySupportLoader.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/0d3d65de235ea1da04eaf7b964d855d589f140a9/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fopinion%2FAbstractLibrarySupportLoader.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/0d3d65de235ea1da04eaf7b964d855d589f140a9/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fopinion%2FAbstractLibrarySupportLoader.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fopinion%2FAbstractLibrarySupportLoader.java?ref=0d3d65de235ea1da04eaf7b964d855d589f140a9",
      "patch": "@@ -507,20 +507,22 @@ else if (linkSearchFolder != null &&\n \t\t\t\t\t// options turned off (if shouldSearchAllPaths() is overridden to return true).\n \t\t\t\t\t// In this case, we still want to process those libraries, but we \n \t\t\t\t\t// do not want to save them, so they can be released.\n+\t\t\t\t\tboolean loadedLocal = false;\n \t\t\t\t\tif (!localSearchPaths.isEmpty()) {\n \t\t\t\t\t\tLoaded<Program> loadedLibrary = loadLibraryFromSearchPaths(\n \t\t\t\t\t\t\tlibraryName, provider, localSearchPaths, libraryDestFolderPath,\n \t\t\t\t\t\t\tunprocessed, depth, desiredLoadSpec, options, log, consumer, monitor);\n \t\t\t\t\t\tif (loadedLibrary != null) {\n \t\t\t\t\t\t\tif (loadLocalLibraries) {\n \t\t\t\t\t\t\t\tloadedPrograms.add(loadedLibrary);\n+\t\t\t\t\t\t\t\tloadedLocal = true;\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\telse {\n \t\t\t\t\t\t\t\tloadedLibrary.release(consumer);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t\tif (!systemSearchPaths.isEmpty()) {\n+\t\t\t\t\tif (!loadedLocal && !systemSearchPaths.isEmpty()) {\n \t\t\t\t\t\tLoaded<Program> loadedLibrary = loadLibraryFromSearchPaths(\n \t\t\t\t\t\t\tlibraryName, provider, systemSearchPaths, libraryDestFolderPath,\n \t\t\t\t\t\t\tunprocessed, depth, desiredLoadSpec, options, log, consumer, monitor);",
      "parent_sha": "adf7b1854712f5e58efc327378a2ca2f41351256"
    }
  },
  {
    "oid": "dee526ee333fe956a62a5c3393537d3e544e369b",
    "message": "GP-1372 Fix overwrite of FSRL when importing gzf",
    "date": "2021-10-05T18:58:33Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/dee526ee333fe956a62a5c3393537d3e544e369b",
    "details": {
      "sha": "2330c817da3478a88b2fb979365a3d576089d651",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/plugin/importer/ImporterUtilities.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/dee526ee333fe956a62a5c3393537d3e544e369b/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fplugin%2Fimporter%2FImporterUtilities.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/dee526ee333fe956a62a5c3393537d3e544e369b/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fplugin%2Fimporter%2FImporterUtilities.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fplugin%2Fimporter%2FImporterUtilities.java?ref=dee526ee333fe956a62a5c3393537d3e544e369b",
      "patch": "@@ -15,10 +15,11 @@\n  */\n package ghidra.plugin.importer;\n \n+import java.util.*;\n+\n import java.awt.Window;\n import java.io.Closeable;\n import java.io.IOException;\n-import java.util.*;\n \n import docking.widgets.OptionDialog;\n import ghidra.app.plugin.core.help.AboutDomainObjectUtils;\n@@ -104,7 +105,9 @@ public static void setProgramProperties(Program program, FSRL fsrl, TaskMonitor\n \t\t\tfsrl = fsService.getFullyQualifiedFSRL(fsrl, monitor);\n \n \t\t\tOptions propertyList = program.getOptions(Program.PROGRAM_INFO);\n-\t\t\tpropertyList.setString(ProgramMappingService.PROGRAM_SOURCE_FSRL, fsrl.toString());\n+\t\t\tif (!propertyList.contains(ProgramMappingService.PROGRAM_SOURCE_FSRL)) {\n+\t\t\t\tpropertyList.setString(ProgramMappingService.PROGRAM_SOURCE_FSRL, fsrl.toString());\n+\t\t\t}\n \t\t\tString md5 = program.getExecutableMD5();\n \t\t\tif ((md5 == null || md5.isEmpty()) && fsrl.getMD5() != null) {\n \t\t\t\tprogram.setExecutableMD5(fsrl.getMD5());",
      "parent_sha": "91f94b8155f11d67575c0213ab2d0a70a7fb87c0"
    }
  },
  {
    "oid": "556710d26136527cd15a3d0ea6de7584d1a8f53e",
    "message": "#1494: Fix incorrect handling of relocations for ARM BE8 binaries",
    "date": "2020-07-13T22:35:22Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/556710d26136527cd15a3d0ea6de7584d1a8f53e",
    "details": {
      "sha": "b2785c67daf9b0109ac73ca021b76afa350e6ee2",
      "filename": "Ghidra/Processors/ARM/src/main/java/ghidra/app/util/bin/format/elf/relocation/ARM_ElfRelocationHandler.java",
      "status": "modified",
      "additions": 29,
      "deletions": 27,
      "changes": 56,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/556710d26136527cd15a3d0ea6de7584d1a8f53e/Ghidra%2FProcessors%2FARM%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Felf%2Frelocation%2FARM_ElfRelocationHandler.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/556710d26136527cd15a3d0ea6de7584d1a8f53e/Ghidra%2FProcessors%2FARM%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Felf%2Frelocation%2FARM_ElfRelocationHandler.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FProcessors%2FARM%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Felf%2Frelocation%2FARM_ElfRelocationHandler.java?ref=556710d26136527cd15a3d0ea6de7584d1a8f53e",
      "patch": "@@ -41,7 +41,9 @@ public void relocate(ElfRelocationContext elfRelocationContext, ElfRelocation re\n \t\tProgram program = elfRelocationContext.getProgram();\n \n \t\tMemory memory = program.getMemory();\n-\n+\t\t\n+\t\tboolean instructionBigEndian = program.getLanguage().getLanguageDescription().getInstructionEndian().isBigEndian();\t\t\n+\t\t\n \t\tint type = relocation.getType();\n \t\tif (type == ARM_ElfRelocationConstants.R_ARM_NONE) {\n \t\t\treturn;\n@@ -62,8 +64,8 @@ public void relocate(ElfRelocationContext elfRelocationContext, ElfRelocation re\n \t\tint newValue = 0;\n \n \t\tswitch (type) {\n-\t\t\tcase ARM_ElfRelocationConstants.R_ARM_PC24: {\n-\t\t\t\tint oldValue = memory.getInt(relocationAddress);\n+\t\t\tcase ARM_ElfRelocationConstants.R_ARM_PC24: { // Target class: ARM Instruction\n+\t\t\t\tint oldValue = memory.getInt(relocationAddress, instructionBigEndian);\n \t\t\t\tnewValue = (int) (symbolValue + addend);\n \t\t\t\tnewValue -= (offset + 8);  // PC relative, PC will be 8 bytes after inst start\n \t\t\t\tif (isThumb) {\n@@ -77,10 +79,10 @@ public void relocate(ElfRelocationContext elfRelocationContext, ElfRelocation re\n \t\t\t\telse {\n \t\t\t\t\tnewValue = (oldValue & 0xff000000) | ((newValue >> 2) & 0x00ffffff);\n \t\t\t\t}\n-\t\t\t\tmemory.setInt(relocationAddress, newValue);\n+\t\t\t\tmemory.setInt(relocationAddress, newValue, instructionBigEndian);\n \t\t\t\tbreak;\n \t\t\t}\n-\t\t\tcase ARM_ElfRelocationConstants.R_ARM_ABS32: {\n+\t\t\tcase ARM_ElfRelocationConstants.R_ARM_ABS32: { // Target class: Data\n \t\t\t\tint oldValue = memory.getInt(relocationAddress);\n \t\t\t\tnewValue = (int) (symbolValue + addend + oldValue);\n \t\t\t\tif (isThumb) {\n@@ -89,7 +91,7 @@ public void relocate(ElfRelocationContext elfRelocationContext, ElfRelocation re\n \t\t\t\tmemory.setInt(relocationAddress, newValue);\n \t\t\t\tbreak;\n \t\t\t}\n-\t\t\tcase ARM_ElfRelocationConstants.R_ARM_REL32: {\n+\t\t\tcase ARM_ElfRelocationConstants.R_ARM_REL32: { // // Target class: Data\n \t\t\t\tnewValue = (int) (symbolValue + addend);\n \t\t\t\tnewValue -= (offset + 8);  // PC relative, PC will be 8 bytes after inst start\n \t\t\t\tif (isThumb) {\n@@ -98,33 +100,33 @@ public void relocate(ElfRelocationContext elfRelocationContext, ElfRelocation re\n \t\t\t\tmemory.setInt(relocationAddress, newValue);\n \t\t\t\tbreak;\n \t\t\t}\n-\t\t\tcase ARM_ElfRelocationConstants.R_ARM_LDR_PC_G0: {\n-\t\t\t\tint oldValue = memory.getInt(relocationAddress);\n+\t\t\tcase ARM_ElfRelocationConstants.R_ARM_LDR_PC_G0: { // Target class: ARM Instruction\n+\t\t\t\tint oldValue = memory.getInt(relocationAddress, instructionBigEndian);\n \t\t\t\tnewValue = (int) (symbolValue + addend);\n \t\t\t\tnewValue -= (offset + 8);  // PC relative, PC will be 8 bytes after inst start\n \t\t\t\tnewValue = (oldValue & 0xff7ff000) | ((~(newValue >> 31) & 1) << 23) |\n \t\t\t\t\t((newValue >> 2) & 0xfff);\n-\t\t\t\tmemory.setInt(relocationAddress, newValue);\n+\t\t\t\tmemory.setInt(relocationAddress, newValue, instructionBigEndian);\n \t\t\t\tbreak;\n \t\t\t}\n-\t\t\tcase ARM_ElfRelocationConstants.R_ARM_ABS16: {\n+\t\t\tcase ARM_ElfRelocationConstants.R_ARM_ABS16: { // Target class: Data\n \t\t\t\tshort sValue = (short) (symbolValue + addend);\n \t\t\t\tmemory.setShort(relocationAddress, sValue);\n \t\t\t\tbreak;\n \t\t\t}\n-\t\t\tcase ARM_ElfRelocationConstants.R_ARM_ABS12: {\n-\t\t\t\tint oldValue = memory.getInt(relocationAddress);\n+\t\t\tcase ARM_ElfRelocationConstants.R_ARM_ABS12: { // Target class: ARM Instruction\n+\t\t\t\tint oldValue = memory.getInt(relocationAddress, instructionBigEndian);\n \t\t\t\tnewValue = (int) (symbolValue + addend);\n \t\t\t\tnewValue = (oldValue & 0xfffff000) | (newValue & 0x00000fff);\n-\t\t\t\tmemory.setInt(relocationAddress, newValue);\n+\t\t\t\tmemory.setInt(relocationAddress, newValue, instructionBigEndian);\n \t\t\t\tbreak;\n \t\t\t}\n \t\t\t/*\n \t\t\tcase ARM_ElfRelocationConstants.R_ARM_THM_ABS5: {\n \t\t\t\tbreak;\n \t\t\t}\n \t\t\t*/\n-\t\t\tcase ARM_ElfRelocationConstants.R_ARM_ABS_8: {\n+\t\t\tcase ARM_ElfRelocationConstants.R_ARM_ABS_8: { // Target class: Data\n \t\t\t\tbyte bValue = (byte) (symbolValue + addend);\n \t\t\t\tmemory.setByte(relocationAddress, bValue);\n \t\t\t\tbreak;\n@@ -134,15 +136,15 @@ public void relocate(ElfRelocationContext elfRelocationContext, ElfRelocation re\n \t\t\t\tbreak;\n \t\t\t}\n \t\t\t*/\n-\t\t\tcase ARM_ElfRelocationConstants.R_ARM_THM_JUMP24:\n+\t\t\tcase ARM_ElfRelocationConstants.R_ARM_THM_JUMP24: // // Target class: Thumb32 Instruction\n \t\t\tcase ARM_ElfRelocationConstants.R_ARM_THM_CALL: {\n \n \t\t\t\tnewValue = (int) (symbolValue + addend);\n \t\t\t\t// since it is adding in the oldvalue below, don't need to add in 4 for pc offset\n \t\t\t\tnewValue -= (offset);\n \n-\t\t\t\tshort oldValueH = memory.getShort(relocationAddress);\n-\t\t\t\tshort oldValueL = memory.getShort(relocationAddress.add(2));\n+\t\t\t\tshort oldValueH = memory.getShort(relocationAddress, instructionBigEndian);\n+\t\t\t\tshort oldValueL = memory.getShort(relocationAddress.add(2), instructionBigEndian);\n \t\t\t\tboolean isBLX = (oldValueL & 0x1000) == 0;\n \n \t\t\t\tint s = (oldValueH & (1 << 10)) >> 10;\n@@ -166,17 +168,17 @@ public void relocate(ElfRelocationContext elfRelocationContext, ElfRelocation re\n \t\t\t\t\tnewValueL &= 0xfffe;\n \t\t\t\t}\n \n-\t\t\t\tmemory.setShort(relocationAddress, newValueH);\n-\t\t\t\tmemory.setShort(relocationAddress.add(2), newValueL);\n+\t\t\t\tmemory.setShort(relocationAddress, newValueH, instructionBigEndian);\n+\t\t\t\tmemory.setShort(relocationAddress.add(2), newValueL, instructionBigEndian);\n \t\t\t\tbreak;\n \t\t\t}\n-\t\t\tcase ARM_ElfRelocationConstants.R_ARM_THM_PC8: {\n-\t\t\t\tshort oldValue = memory.getShort(relocationAddress);\n+\t\t\tcase ARM_ElfRelocationConstants.R_ARM_THM_PC8: { // Target class: Thumb16 Instruction\n+\t\t\t\tshort oldValue = memory.getShort(relocationAddress, instructionBigEndian);\n \t\t\t\tnewValue = (int) (symbolValue + addend);\n \t\t\t\tnewValue -= (offset + 4);   // PC relative, PC will be 4 bytes past inst start\n \t\t\t\tnewValue = newValue >> 1;\n \t\t\t\tshort sValue = (short) ((oldValue & 0xff00) | (newValue & 0x00ff));\n-\t\t\t\tmemory.setShort(relocationAddress, sValue);\n+\t\t\t\tmemory.setShort(relocationAddress, sValue, instructionBigEndian);\n \t\t\t\tbreak;\n \t\t\t}\n \t\t\t/*\n@@ -219,7 +221,7 @@ public void relocate(ElfRelocationContext elfRelocationContext, ElfRelocation re\n \t\t\t\tbreak;\n \t\t\t}\n \n-\t\t\tcase ARM_ElfRelocationConstants.R_ARM_JUMP_SLOT: {\n+\t\t\tcase ARM_ElfRelocationConstants.R_ARM_JUMP_SLOT: { // Target class: Data\n \t\t\t\t// Corresponds to lazy dynamically linked external symbols within\n \t\t\t\t// GOT/PLT symbolValue corresponds to PLT entry for which we need to\n \t\t\t\t// create and external function location. Don't bother changing\n@@ -246,7 +248,7 @@ public void relocate(ElfRelocationContext elfRelocationContext, ElfRelocation re\n \t\t\t\tbreak;\n \t\t\t}\n \n-\t\t\tcase ARM_ElfRelocationConstants.R_ARM_RELATIVE: {\n+\t\t\tcase ARM_ElfRelocationConstants.R_ARM_RELATIVE: { // Target class: Data\n \t\t\t\tif (elfRelocationContext.extractAddend()) {\n \t\t\t\t\taddend = memory.getInt(relocationAddress);\n \t\t\t\t}\n@@ -267,10 +269,10 @@ public void relocate(ElfRelocationContext elfRelocationContext, ElfRelocation re\n \t\t\t}\n \t\t\t*/\n \n-\t\t\tcase ARM_ElfRelocationConstants.R_ARM_JUMP24:\n+\t\t\tcase ARM_ElfRelocationConstants.R_ARM_JUMP24: // Target class: ARM Instruction\n \t\t\tcase ARM_ElfRelocationConstants.R_ARM_CALL:\n \t\t\tcase ARM_ElfRelocationConstants.R_ARM_GOT_PLT32:\n-\t\t\t\tint oldValue = memory.getInt(relocationAddress);\n+\t\t\t\tint oldValue = memory.getInt(relocationAddress, instructionBigEndian);\n \t\t\t\tnewValue = (int) (symbolValue + addend);\n \n \t\t\t\tnewValue -= (offset + 8);   // PC relative, PC will be 8 bytes past inst start\n@@ -284,7 +286,7 @@ public void relocate(ElfRelocationContext elfRelocationContext, ElfRelocation re\n \t\t\t\telse {\n \t\t\t\t\tnewValue = (oldValue & 0xff000000) | ((newValue >> 2) & 0x00ffffff);\n \t\t\t\t}\n-\t\t\t\tmemory.setInt(relocationAddress, newValue);\n+\t\t\t\tmemory.setInt(relocationAddress, newValue, instructionBigEndian);\n \t\t\t\tbreak;\n \n \t\t\t/*",
      "parent_sha": "3fec48671c4ac609460caad022d0166aaf6fec0c"
    }
  },
  {
    "oid": "08b54178a0eb45e22e43471395a330ee87d8a176",
    "message": "Edit copy pasted function description",
    "date": "2024-11-19T19:30:33Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/08b54178a0eb45e22e43471395a330ee87d8a176",
    "details": {
      "sha": "0f3066c147a4713386ea0f0cf00329a6f5475f0a",
      "filename": "Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/PcodeSyntaxTree.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/08b54178a0eb45e22e43471395a330ee87d8a176/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fpcode%2FPcodeSyntaxTree.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/08b54178a0eb45e22e43471395a330ee87d8a176/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fpcode%2FPcodeSyntaxTree.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fpcode%2FPcodeSyntaxTree.java?ref=08b54178a0eb45e22e43471395a330ee87d8a176",
      "patch": "@@ -174,7 +174,7 @@ public Iterator<VarnodeAST> getVarnodes(Address addr) {\n \t}\n \n \t/**\n-\t * return all Varnodes that start at a given Address\n+\t * return all Varnodes bounded between two Addresses\n \t * @param min -- Minimum Address of Varnodes\n \t * @param max -- Maximum Address of Varnodes\n \t * @return -- Iterator to Varnodes",
      "parent_sha": "1f06e090d2fd99e2f4acd487a069cdbe36dcc6ec"
    }
  },
  {
    "oid": "0888983439c8b79d52a0a3f7587482c900b82d03",
    "message": "GT-3528 - Small update to defer file chooser creation until needed",
    "date": "2020-02-14T22:43:22Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/0888983439c8b79d52a0a3f7587482c900b82d03",
    "details": {
      "sha": "5c1e29e0ed9691e95899378b1c24604724344f52",
      "filename": "Ghidra/Features/FileFormats/src/main/java/ghidra/plugins/fileformats/FileFormatsPlugin.java",
      "status": "modified",
      "additions": 37,
      "deletions": 31,
      "changes": 68,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/0888983439c8b79d52a0a3f7587482c900b82d03/Ghidra%2FFeatures%2FFileFormats%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fplugins%2Ffileformats%2FFileFormatsPlugin.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/0888983439c8b79d52a0a3f7587482c900b82d03/Ghidra%2FFeatures%2FFileFormats%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fplugins%2Ffileformats%2FFileFormatsPlugin.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FFileFormats%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fplugins%2Ffileformats%2FFileFormatsPlugin.java?ref=0888983439c8b79d52a0a3f7587482c900b82d03",
      "patch": "@@ -70,9 +70,6 @@ public class FileFormatsPlugin extends Plugin implements FrontEndable {\n \n \tpublic FileFormatsPlugin(PluginTool tool) {\n \t\tsuper(tool);\n-\n-\t\tchooserEclipse = new GhidraFileChooser(null);\n-\t\tchooserJarFolder = new GhidraFileChooser(null);\n \t}\n \n \t@Override\n@@ -107,6 +104,9 @@ public void actionPerformed(ActionContext context) {\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n \n+\t\t\t\t\tif (chooserEclipse == null) {\n+\t\t\t\t\t\tchooserEclipse = new GhidraFileChooser(null);\n+\t\t\t\t\t}\n \t\t\t\t\tchooserEclipse.setFileSelectionMode(GhidraFileChooserMode.DIRECTORIES_ONLY);\n \t\t\t\t\tchooserEclipse.setTitle(\"Select Eclipe Project Directory\");\n \t\t\t\t\tchooserEclipse.setApproveButtonText(\"SELECT\");\n@@ -171,35 +171,40 @@ public void actionPerformed(ActionContext context) {\n \t\t\t\tif (context instanceof FSBActionContext) {\n \t\t\t\t\tFSBActionContext fsbContext = (FSBActionContext) context;\n \t\t\t\t\tFSRL jarFSRL = FSBUtils.getFileFSRLFromContext(context);\n-\t\t\t\t\tif (jarFSRL != null) {\n-\t\t\t\t\t\tchooserJarFolder.setFileSelectionMode(\n-\t\t\t\t\t\t\tGhidraFileChooserMode.DIRECTORIES_ONLY);\n-\t\t\t\t\t\tchooserJarFolder.setTitle(\"Select JAR Output Directory\");\n-\t\t\t\t\t\tchooserJarFolder.setApproveButtonText(\"SELECT\");\n-\t\t\t\t\t\tchooserJarFolder.setSelectedFile(null);\n-\t\t\t\t\t\tFile outputDirectory = chooserJarFolder.getSelectedFile();\n-\t\t\t\t\t\tif (outputDirectory == null) {\n-\t\t\t\t\t\t\treturn;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tGTree gTree = fsbContext.getTree();\n-\t\t\t\t\t\tgTree.runTask(monitor -> {\n-\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tJarDecompiler decompiler =\n-\t\t\t\t\t\t\t\t\tnew JarDecompiler(jarFSRL, outputDirectory);\n-\t\t\t\t\t\t\t\tdecompiler.decompile(monitor);\n-\n-\t\t\t\t\t\t\t\tif (decompiler.getLog().getMsgCount() > 0) {\n-\t\t\t\t\t\t\t\t\tMsg.showInfo(this, gTree,\n-\t\t\t\t\t\t\t\t\t\t\"Decompiling Jar \" + jarFSRL.getName(),\n-\t\t\t\t\t\t\t\t\t\tdecompiler.getLog().toString());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tcatch (Exception e) {\n-\t\t\t\t\t\t\t\tFSUtilities.displayException(this, gTree, \"Error Decompiling Jar\",\n-\t\t\t\t\t\t\t\t\te.getMessage(), e);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t});\n+\t\t\t\t\tif (jarFSRL == null) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (chooserJarFolder == null) {\n+\t\t\t\t\t\tchooserJarFolder = new GhidraFileChooser(null);\n+\t\t\t\t\t}\n+\t\t\t\t\tchooserJarFolder.setFileSelectionMode(\n+\t\t\t\t\t\tGhidraFileChooserMode.DIRECTORIES_ONLY);\n+\t\t\t\t\tchooserJarFolder.setTitle(\"Select JAR Output Directory\");\n+\t\t\t\t\tchooserJarFolder.setApproveButtonText(\"SELECT\");\n+\t\t\t\t\tchooserJarFolder.setSelectedFile(null);\n+\t\t\t\t\tFile outputDirectory = chooserJarFolder.getSelectedFile();\n+\t\t\t\t\tif (outputDirectory == null) {\n+\t\t\t\t\t\treturn;\n \t\t\t\t\t}\n+\t\t\t\t\tGTree gTree = fsbContext.getTree();\n+\t\t\t\t\tgTree.runTask(monitor -> {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tJarDecompiler decompiler =\n+\t\t\t\t\t\t\t\tnew JarDecompiler(jarFSRL, outputDirectory);\n+\t\t\t\t\t\t\tdecompiler.decompile(monitor);\n+\n+\t\t\t\t\t\t\tif (decompiler.getLog().getMsgCount() > 0) {\n+\t\t\t\t\t\t\t\tMsg.showInfo(this, gTree,\n+\t\t\t\t\t\t\t\t\t\"Decompiling Jar \" + jarFSRL.getName(),\n+\t\t\t\t\t\t\t\t\tdecompiler.getLog().toString());\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tcatch (Exception e) {\n+\t\t\t\t\t\t\tFSUtilities.displayException(this, gTree, \"Error Decompiling Jar\",\n+\t\t\t\t\t\t\t\te.getMessage(), e);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n \t\t\t\t}\n \t\t\t}\n \n@@ -218,6 +223,7 @@ public boolean isEnabledForContext(ActionContext context) {\n \t\t\tpublic boolean isAddToPopup(ActionContext context) {\n \t\t\t\treturn context instanceof FSBActionContext;\n \t\t\t}\n+\n \t\t};\n \t\taction.setPopupMenuData(\n \t\t\tnew MenuData(new String[] { action.getMenuText() }, ImageManager.JAR, \"J\"));",
      "parent_sha": "b88946787be9549a950558419bcb29c084905f9a"
    }
  },
  {
    "oid": "dba6e117b8280470d420915405151ce4b3cc977d",
    "message": "Tests - fixed test failing due to recent GTree refactor",
    "date": "2019-12-03T20:48:08Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/dba6e117b8280470d420915405151ce4b3cc977d",
    "details": {
      "sha": "46fb25bf6fd4d93e06bf3c76b0d89d340c3d5c01",
      "filename": "Ghidra/Features/Base/src/test.slow/java/ghidra/app/util/datatype/DataTypeSelectionDialogTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/dba6e117b8280470d420915405151ce4b3cc977d/Ghidra%2FFeatures%2FBase%2Fsrc%2Ftest.slow%2Fjava%2Fghidra%2Fapp%2Futil%2Fdatatype%2FDataTypeSelectionDialogTest.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/dba6e117b8280470d420915405151ce4b3cc977d/Ghidra%2FFeatures%2FBase%2Fsrc%2Ftest.slow%2Fjava%2Fghidra%2Fapp%2Futil%2Fdatatype%2FDataTypeSelectionDialogTest.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Ftest.slow%2Fjava%2Fghidra%2Fapp%2Futil%2Fdatatype%2FDataTypeSelectionDialogTest.java?ref=dba6e117b8280470d420915405151ce4b3cc977d",
      "patch": "@@ -743,7 +743,7 @@ private void deleteTypeDefTextBeforePointer(String typeDefText) {\n \n \tprivate void pickSingleDataType(DataTypeChooserDialog chooserDialog) {\n \t\tGTree gTree = (GTree) getInstanceField(\"tree\", chooserDialog);\n-\t\tGTreeNode rootNode = gTree.getModelRoot();\n+\t\tGTreeNode rootNode = gTree.getViewRoot();\n \t\twaitForTree(gTree);\n \t\tList<GTreeNode> children = rootNode.getChildren();\n \t\tassertEquals(1, children.size());// one archive\n@@ -764,7 +764,7 @@ private void pickSingleDataType(DataTypeChooserDialog chooserDialog) {\n \n \tprivate void pickFromMultipleDataTypes(DataTypeChooserDialog chooserDialog) {\n \t\tGTree gTree = (GTree) getInstanceField(\"tree\", chooserDialog);\n-\t\tGTreeNode rootNode = gTree.getModelRoot();\n+\t\tGTreeNode rootNode = gTree.getViewRoot();\n \t\twaitForTree(gTree);\n \t\tList<GTreeNode> children = rootNode.getChildren();\n \t\tassertEquals(2, children.size());// two archives",
      "parent_sha": "063358fc277a87126f9d973120f9e29f483e2585"
    }
  },
  {
    "oid": "458b02e65de5371a890bb039817a93f3634be7fa",
    "message": "Tests - increased merge tests timeout to avoid timeouts in parallel mode",
    "date": "2019-06-06T20:02:34Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/458b02e65de5371a890bb039817a93f3634be7fa",
    "details": {
      "sha": "d495493bfe80d0e1035c10c2f59d5a72eac1966f",
      "filename": "Ghidra/Features/Base/src/test.slow/java/ghidra/app/merge/AbstractMergeTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/458b02e65de5371a890bb039817a93f3634be7fa/Ghidra%2FFeatures%2FBase%2Fsrc%2Ftest.slow%2Fjava%2Fghidra%2Fapp%2Fmerge%2FAbstractMergeTest.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/458b02e65de5371a890bb039817a93f3634be7fa/Ghidra%2FFeatures%2FBase%2Fsrc%2Ftest.slow%2Fjava%2Fghidra%2Fapp%2Fmerge%2FAbstractMergeTest.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Ftest.slow%2Fjava%2Fghidra%2Fapp%2Fmerge%2FAbstractMergeTest.java?ref=458b02e65de5371a890bb039817a93f3634be7fa",
      "patch": "@@ -15,8 +15,7 @@\n  */\n package ghidra.app.merge;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.*;\n \n import java.awt.*;\n import java.util.ArrayList;\n@@ -41,7 +40,7 @@\n public abstract class AbstractMergeTest extends AbstractGhidraHeadedIntegrationTest {\n \n \t// TODO this may need to be modified for parallel mode\n-\tprotected static final int MAX_MERGE_TIMEOUT = 10000;\n+\tprotected static final int MAX_MERGE_TIMEOUT = 20000;\n \n \tprotected MergeTestFacilitator mtf;\n \tprotected Program originalProgram;",
      "parent_sha": "0e83fdbe704929c31333540b67c40bbe0406dfdc"
    }
  },
  {
    "oid": "491b480c4935a34a8e6796d0e66cbbf2b100ce10",
    "message": "Fix typo in PdbUniversalAnalyzer.java\n\n\"Platform-indepent\" -> \"Platform-independent\"",
    "date": "2020-10-13T21:25:21Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/491b480c4935a34a8e6796d0e66cbbf2b100ce10",
    "details": {
      "sha": "2e33b64f2a3a6b4056ba4e7a5a1a32fdb0cf2e18",
      "filename": "Ghidra/Features/PDB/src/main/java/ghidra/app/plugin/core/analysis/PdbUniversalAnalyzer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/491b480c4935a34a8e6796d0e66cbbf2b100ce10/Ghidra%2FFeatures%2FPDB%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fanalysis%2FPdbUniversalAnalyzer.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/491b480c4935a34a8e6796d0e66cbbf2b100ce10/Ghidra%2FFeatures%2FPDB%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fanalysis%2FPdbUniversalAnalyzer.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FPDB%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fanalysis%2FPdbUniversalAnalyzer.java?ref=491b480c4935a34a8e6796d0e66cbbf2b100ce10",
      "patch": "@@ -63,7 +63,7 @@ public class PdbUniversalAnalyzer extends AbstractAnalyzer {\n \t// TODO: decide which PDB Analyzer should be enabled by default for release\n \tstatic final boolean DEFAULT_ENABLEMENT = true;\n \tprivate static final String DESCRIPTION =\n-\t\t\"Platform-indepent PDB analyzer (No XML support).\\n\" +\n+\t\t\"Platform-independent PDB analyzer (No XML support).\\n\" +\n \t\t\t\"NOTE: still undergoing development, so options may change.\";\n \n \t//==============================================================================================",
      "parent_sha": "0639622c867f9e7e3d6476775f5d6a8f0c5c0a84"
    }
  },
  {
    "oid": "4d48d6f180b28fd555326bacfe8eb0cc989546cf",
    "message": "Fixed issue with GTreeModel's fireNodeChanged() method not actually\ntelling the tree which node changed.",
    "date": "2020-07-20T20:57:59Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/4d48d6f180b28fd555326bacfe8eb0cc989546cf",
    "details": {
      "sha": "cf1d4af016826aa0a758d9e5a554104ee86bc3e9",
      "filename": "Ghidra/Framework/Docking/src/main/java/docking/widgets/tree/internal/GTreeModel.java",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/4d48d6f180b28fd555326bacfe8eb0cc989546cf/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Ftree%2Finternal%2FGTreeModel.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/4d48d6f180b28fd555326bacfe8eb0cc989546cf/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Ftree%2Finternal%2FGTreeModel.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Ftree%2Finternal%2FGTreeModel.java?ref=4d48d6f180b28fd555326bacfe8eb0cc989546cf",
      "patch": "@@ -158,7 +158,15 @@ public void fireNodeDataChanged(GTreeNode changedNode) {\n \t\tSystemUtilities.assertThisIsTheSwingThread(\n \t\t\t\"GTreeModel.fireNodeDataChanged() must be \" + \"called from the AWT thread\");\n \n-\t\tTreeModelEvent event = new TreeModelEvent(this, (TreePath) null);\n+\t\tGTreeNode viewNode = convertToViewNode(changedNode);\n+\t\tif (viewNode == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\t// Note - we are passing in the treepath of the node that changed.  The javadocs in \n+\t\t// TreemodelListener seems to imply that you need to pass in the treepath of the parent\n+\t\t// of the node that changed and then the indexes of the children that changed. But this \n+\t\t// works and is cheaper then computing the index of the node that changed.\n+\t\tTreeModelEvent event = new TreeModelEvent(this, viewNode.getTreePath());\n \n \t\tfor (TreeModelListener listener : listeners) {\n \t\t\tlistener.treeNodesChanged(event);",
      "parent_sha": "817052c94ca59b6dc416c496dc4354d95a6b9eb8"
    }
  },
  {
    "oid": "6f9d70fac4db7986f8131f3fcf4405f1a9da4cda",
    "message": "DebugDirectory type is in range 0-20",
    "date": "2022-08-04T10:37:46Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/6f9d70fac4db7986f8131f3fcf4405f1a9da4cda",
    "details": {
      "sha": "57694f854eb7309abf086dbd4bbc6427ce04c51f",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/pe/debug/DebugDirectory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/6f9d70fac4db7986f8131f3fcf4405f1a9da4cda/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Fpe%2Fdebug%2FDebugDirectory.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/6f9d70fac4db7986f8131f3fcf4405f1a9da4cda/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Fpe%2Fdebug%2FDebugDirectory.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Fpe%2Fdebug%2FDebugDirectory.java?ref=6f9d70fac4db7986f8131f3fcf4405f1a9da4cda",
      "patch": "@@ -85,7 +85,7 @@ public class DebugDirectory implements StructConverter, ByteArrayConverter {\n \t\taddressOfRawData = reader.readNextInt();\n \t\tpointerToRawData = reader.readNextInt();\n \n-\t\tif (type < 0 || type > 16 || sizeOfData < 0) {\n+\t\tif (type < 0 || type > 20 || sizeOfData < 0) {\n \t\t\tMsg.error(this, \"Invalid DebugDirectory\");\n \t\t\t\tsizeOfData = 0;\n \t\t\t\treader.setPointerIndex(oldIndex);",
      "parent_sha": "58066601fca642c733f802cda1f51793a9700f91"
    }
  },
  {
    "oid": "14a7baea20fa1d062689f375306cca55aa86b73e",
    "message": "review fix",
    "date": "2023-12-15T16:20:39Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/14a7baea20fa1d062689f375306cca55aa86b73e",
    "details": {
      "sha": "1a403c800cd35b5003067905f887b4a77620b83f",
      "filename": "Ghidra/Framework/Docking/src/main/java/docking/menu/DockingMenuItemUI.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/14a7baea20fa1d062689f375306cca55aa86b73e/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fmenu%2FDockingMenuItemUI.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/14a7baea20fa1d062689f375306cca55aa86b73e/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fmenu%2FDockingMenuItemUI.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fmenu%2FDockingMenuItemUI.java?ref=14a7baea20fa1d062689f375306cca55aa86b73e",
      "patch": "@@ -28,7 +28,6 @@\n \n import javax.accessibility.Accessible;\n import javax.swing.*;\n-import javax.swing.plaf.ComponentUI;\n import javax.swing.plaf.MenuItemUI;\n \n import docking.util.GraphicsUtils;\n@@ -57,7 +56,7 @@ public class DockingMenuItemUI extends MenuItemUI {\n \n \tprotected MenuItemUI ui;\n \n-\tpublic static ComponentUI createUI(JComponent c) {\n+\tpublic static DockingMenuItemUI createUI(JComponent c) {\n \t\tDockingMenuItemUI result = new DockingMenuItemUI();\n \t\tresult.ui = (MenuItemUI) UIManager.getDefaults().getUI(c);\n \t\treturn result;",
      "parent_sha": "4fcaeead0f15dc62ac71952d06cbc0eefd57fa88"
    }
  },
  {
    "oid": "f7495daea1293b7853b7d3bcbf81f2868cdc3ad1",
    "message": "GP-2122_emteere protect use of tmodeReg on processors without one",
    "date": "2022-07-25T05:30:30Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/f7495daea1293b7853b7d3bcbf81f2868cdc3ad1",
    "details": {
      "sha": "b7f0bc6d3c93d4247eb9d1230860eb76d3670662",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/plugin/prototype/analysis/ArmAggressiveInstructionFinderAnalyzer.java",
      "status": "modified",
      "additions": 14,
      "deletions": 11,
      "changes": 25,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/f7495daea1293b7853b7d3bcbf81f2868cdc3ad1/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fprototype%2Fanalysis%2FArmAggressiveInstructionFinderAnalyzer.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/f7495daea1293b7853b7d3bcbf81f2868cdc3ad1/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fprototype%2Fanalysis%2FArmAggressiveInstructionFinderAnalyzer.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fprototype%2Fanalysis%2FArmAggressiveInstructionFinderAnalyzer.java?ref=f7495daea1293b7853b7d3bcbf81f2868cdc3ad1",
      "patch": "@@ -1,6 +1,5 @@\n /* ###\n  * IP: GHIDRA\n- * REVIEWED: YES\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -215,15 +214,17 @@ private boolean doValidStart(Address entry, TaskMonitor monitor) {\n \t\t\tnew PseudoDisassemblerContext(curProgram.getProgramContext());\n \n \t\t// get the current value from the program context\n-\t\tcurValue = curProgram.getProgramContext().getValue(tmodeReg, entry, false);\n-\t\t// if it doesn't have one set, try to get it the last context from the instruction before\n-\t\tif (curValue == null) {\n-\t\t\tInstruction instr = listing.getInstructionBefore(entry);\n-\t\t\tif (instr != null) {\n-\t\t\t\tcurValue =\n-\t\t\t\t\tcurProgram.getProgramContext().getValue(tmodeReg, instr.getMinAddress(), false);\n-\t\t\t\tif (curValue != null) {\n-\t\t\t\t\tpseudoContext.setValue(tmodeReg, entry, curValue);\n+\t\tif (tmodeReg != null) {\n+\t\t\tcurValue = curProgram.getProgramContext().getValue(tmodeReg, entry, false);\n+\t\t\t// if it doesn't have one set, try to get it the last context from the instruction before\n+\t\t\tif (curValue == null) {\n+\t\t\t\tInstruction instr = listing.getInstructionBefore(entry);\n+\t\t\t\tif (instr != null) {\n+\t\t\t\t\tcurValue =\n+\t\t\t\t\t\tcurProgram.getProgramContext().getValue(tmodeReg, instr.getMinAddress(), false);\n+\t\t\t\t\tif (curValue != null) {\n+\t\t\t\t\t\tpseudoContext.setValue(tmodeReg, entry, curValue);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -257,7 +258,9 @@ private boolean doValidStart(Address entry, TaskMonitor monitor) {\n \t\t\taddsInfo = true;\n \t\t}\n \t\tpseudoContext = new PseudoDisassemblerContext(curProgram.getProgramContext());\n-\t\tpseudoContext.setValue(tmodeReg, entry, curValue);\n+\t\tif (tmodeReg != null) {\n+\t\t\tpseudoContext.setValue(tmodeReg, entry, curValue);\n+\t\t}\n \t\tAddressSet body =\n \t\t\tpseudo.followSubFlows(entry, pseudoContext, 1000, new PseudoFlowProcessor() {\n \t\t\t\tObject lastResults[] = null;",
      "parent_sha": "d940355bdedab9896bf8b441f78f13d1baab997e"
    }
  },
  {
    "oid": "af040911b2434d7f75ba8fcb0ab0c391908d68c4",
    "message": "GP-2631 - Updated the Instruction Info window to allow copying from the\ntable",
    "date": "2022-09-29T23:53:53Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/af040911b2434d7f75ba8fcb0ab0c391908d68c4",
    "details": {
      "sha": "28e942a19466ac360162c63050deef82a301ae7d",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/processors/InstructionInfoProvider.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/af040911b2434d7f75ba8fcb0ab0c391908d68c4/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fprocessors%2FInstructionInfoProvider.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/af040911b2434d7f75ba8fcb0ab0c391908d68c4/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fprocessors%2FInstructionInfoProvider.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fprocessors%2FInstructionInfoProvider.java?ref=af040911b2434d7f75ba8fcb0ab0c391908d68c4",
      "patch": "@@ -34,7 +34,7 @@\n import ghidra.util.table.GhidraTable;\n \n /**\n- * Component provider to show the instruction info. \n+ * Component provider to show the instruction info.\n  *\n  */\n class InstructionInfoProvider extends ComponentProviderAdapter implements DomainObjectListener {\n@@ -109,7 +109,6 @@ protected JPanel buildMainPanel(boolean isDynamic) {\n \t\topTable.setFont(fixedWidthFont);\n \t\topTable.setPreferredScrollableViewportSize(new Dimension(425, 105));\n \t\t//opTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);\n-\t\topTable.setRowSelectionAllowed(false);\n \n \t\tpane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, new JScrollPane(instructionText),\n \t\t\tnew JScrollPane(opTable));",
      "parent_sha": "0d5ff7628f1e703ed9a25d576a0ccf58f55d6a84"
    }
  },
  {
    "oid": "fdc3dd080a689582cc083281e221740d98ff4cf6",
    "message": "DyldChainedImport: fix offset mask bug\n\nfix name_offset extraction to support values stored in the high 32 bits that are larger than 2G (highest bit set)\r\n\r\nthis bug may not occur in practice, but is easy to prevent by using a long literal for the masking, rather than integer",
    "date": "2025-03-04T17:39:37Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/fdc3dd080a689582cc083281e221740d98ff4cf6",
    "details": {
      "sha": "b619264993c5cdd4c8dae765beda7e7c3a1e267c",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/macho/commands/chained/DyldChainedImport.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/fdc3dd080a689582cc083281e221740d98ff4cf6/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Fmacho%2Fcommands%2Fchained%2FDyldChainedImport.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/fdc3dd080a689582cc083281e221740d98ff4cf6/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Fmacho%2Fcommands%2Fchained%2FDyldChainedImport.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Fmacho%2Fcommands%2Fchained%2FDyldChainedImport.java?ref=fdc3dd080a689582cc083281e221740d98ff4cf6",
      "patch": "@@ -64,7 +64,7 @@ public class DyldChainedImport implements StructConverter {\n \t\t\t\tlong ival = reader.readNextLong();\n \t\t\t\tlib_ordinal = (int) (ival & 0xffff);\n \t\t\t\tweak_import = ((ival >> 8) & 1) == 1;\n-\t\t\t\tname_offset = (ival >> 32 & 0xffffffff);\n+\t\t\t\tname_offset = ((ival >> 32) & 0xffffffffL);\n \t\t\t\taddend = reader.readNextLong();\n \t\t\t\tbreak;\n \t\t\t}",
      "parent_sha": "136a944796067fc5bbf8a6e0766d6f6cd0310410"
    }
  },
  {
    "oid": "b69088138a88763d802e3ca64d58c0df2eca296e",
    "message": "GP-1418 changed caches to use LRUMap instead of HashMap so that the\ncache will be limited to how much memory is uses.",
    "date": "2021-11-15T18:49:49Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/b69088138a88763d802e3ca64d58c0df2eca296e",
    "details": {
      "sha": "efc1fa24f2f10147019fe598581b7de9ef60ceaa",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/program/util/SymbolicPropogator.java",
      "status": "modified",
      "additions": 15,
      "deletions": 14,
      "changes": 29,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/b69088138a88763d802e3ca64d58c0df2eca296e/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Futil%2FSymbolicPropogator.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/b69088138a88763d802e3ca64d58c0df2eca296e/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Futil%2FSymbolicPropogator.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Futil%2FSymbolicPropogator.java?ref=b69088138a88763d802e3ca64d58c0df2eca296e",
      "patch": "@@ -18,6 +18,8 @@\n import java.math.BigInteger;\n import java.util.*;\n \n+import org.apache.commons.collections4.map.LRUMap;\n+\n import generic.util.UnsignedDataUtils;\n import ghidra.app.cmd.disassemble.DisassembleCommand;\n import ghidra.app.cmd.function.CallDepthChangeInfo;\n@@ -38,7 +40,7 @@\n import ghidra.util.task.TaskMonitor;\n \n public class SymbolicPropogator {\n-\n+\tprivate static int LRU_SIZE = 1024;\n \t// QUESTIONS\n \t// 1. How are \"register-relative\" varnodes distinguished based upon target space ?  Not sure how we handle wrapping/truncation concerns.\n \t//   1) The offset is the only thing that could be used as a reference.\n@@ -78,6 +80,18 @@ public class SymbolicPropogator {\n \n \tprotected static final int MAX_EXACT_INSTRUCTIONS = 100;\n \n+\t// Cache flows from instructions\n+\tMap<Address, Address[]> instructionFlowsCache = new LRUMap<>(LRU_SIZE);\n+\n+\t// Cache PcodeOps so that we won't have to grab them again if we re-visit the node.\n+\tMap<Address, PcodeOp[]> pcodeCache = new LRUMap<>(LRU_SIZE);\n+\n+\t// Cache Instructions looked up by At\n+\tMap<Address, Instruction> instructionAtCache = new LRUMap<>(LRU_SIZE);\n+\n+\t// Cache instructions looked up by containing\n+\tMap<Address, Instruction> instructionContainingCache = new LRUMap<>(LRU_SIZE);\n+\n \tpublic SymbolicPropogator(Program program) {\n \t\tthis.program = program;\n \n@@ -684,10 +698,6 @@ private boolean checkSameInstructionRun(Instruction instr) {\n \t\treturn false;\n \t}\n \n-\t// Cache PcodeOps so that we won't have to grab them again if we re-visit the node.\n-\t//\n-\tHashMap<Address, PcodeOp[]> pcodeCache = new HashMap<>();\n-\n \tprivate PcodeOp[] getInstructionPcode(Instruction instruction) {\n \t\tPcodeOp ops[] = pcodeCache.get(instruction.getMinAddress());\n \t\tif (ops == null) {\n@@ -697,12 +707,6 @@ private PcodeOp[] getInstructionPcode(Instruction instruction) {\n \t\treturn ops;\n \t}\n \n-\t// Cache Instructions looked up by At\n-\tHashMap<Address, Instruction> instructionAtCache = new HashMap<>();\n-\n-\t// Cache instructions looked up by containing\n-\tHashMap<Address, Instruction> instructionContainingCache = new HashMap<>();\n-\n \tprivate Instruction getInstructionAt(Address addr) {\n \t\tInstruction instr = instructionAtCache.get(addr);\n \t\tif (instr != null) {\n@@ -739,9 +743,6 @@ private Instruction getInstructionContaining(Address addr) {\n \t\treturn instr;\n \t}\n \n-\t// Cache flows from instructions\n-\tHashMap<Address, Address[]> instructionFlowsCache = new HashMap<>();\n-\n \tprivate Address[] getInstructionFlows(Instruction instruction) {\n \t\tAddress addr = instruction.getMinAddress();\n ",
      "parent_sha": "fce49f4c0849b5501e4546bad30e89c81b8fec5b"
    }
  },
  {
    "oid": "8afb1e2c69fba3334665b6cec028795e62a6ba20",
    "message": "GP-5090 Corrected FileDataTypeManager.close() issue",
    "date": "2024-11-01T19:00:22Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/8afb1e2c69fba3334665b6cec028795e62a6ba20",
    "details": {
      "sha": "3cb3f27158289f7520095fd150140e824ff7cfc8",
      "filename": "Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/FileDataTypeManager.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/8afb1e2c69fba3334665b6cec028795e62a6ba20/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fdata%2FFileDataTypeManager.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/8afb1e2c69fba3334665b6cec028795e62a6ba20/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fdata%2FFileDataTypeManager.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fdata%2FFileDataTypeManager.java?ref=8afb1e2c69fba3334665b6cec028795e62a6ba20",
      "patch": "@@ -4,9 +4,9 @@\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -288,12 +288,12 @@ public void delete() throws IOException {\n \t}\n \n \t@Override\n-\tpublic void close() {\n+\tpublic synchronized void close() {\n \t\tif (packedDB != null) {\n+\t\t\tsuper.close();\n \t\t\tpackedDB.dispose();\n \t\t\tpackedDB = null;\n \t\t}\n-\t\tsuper.close();\n \t}\n \n \tpublic boolean isClosed() {",
      "parent_sha": "31cd80b647eb691b9b1b424ece0f3f5512dece1a"
    }
  },
  {
    "oid": "c270a5d31e8fb3e8ea167361f98cf8aa1960b951",
    "message": "GP-1066: Making Framework Utility Java 1.8 compatible again",
    "date": "2021-06-22T16:58:14Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/c270a5d31e8fb3e8ea167361f98cf8aa1960b951",
    "details": {
      "sha": "21b692230192e1a4b8fb65dcbeff77a42473a6cc",
      "filename": "Ghidra/Framework/Utility/src/main/java/ghidra/GhidraJarApplicationLayout.java",
      "status": "modified",
      "additions": 13,
      "deletions": 4,
      "changes": 17,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/c270a5d31e8fb3e8ea167361f98cf8aa1960b951/Ghidra%2FFramework%2FUtility%2Fsrc%2Fmain%2Fjava%2Fghidra%2FGhidraJarApplicationLayout.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/c270a5d31e8fb3e8ea167361f98cf8aa1960b951/Ghidra%2FFramework%2FUtility%2Fsrc%2Fmain%2Fjava%2Fghidra%2FGhidraJarApplicationLayout.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FUtility%2Fsrc%2Fmain%2Fjava%2Fghidra%2FGhidraJarApplicationLayout.java?ref=c270a5d31e8fb3e8ea167361f98cf8aa1960b951",
      "patch": "@@ -15,11 +15,9 @@\n  */\n package ghidra;\n \n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n+import java.io.*;\n import java.net.URL;\n import java.net.URLDecoder;\n-import java.nio.charset.StandardCharsets;\n import java.util.*;\n \n import generic.jar.ResourceFile;\n@@ -93,6 +91,17 @@ protected List<ResourceFile> findExtensionInstallationDirectories() {\n \t * @return A {@link ResourceFile} from the given {@link URL}\n \t */\n \tprivate ResourceFile fromUrl(URL url) {\n-\t\treturn new ResourceFile(URLDecoder.decode(url.toExternalForm(), StandardCharsets.UTF_8));\n+\t\tString urlString = url.toExternalForm();\n+\t\ttry {\n+\t\t\t// Decode the URL to replace things like %20 with real spaces.\n+\t\t\t// Note: can't use URLDecoder.decode(String, Charset) because Utility must be \n+\t\t\t// Java 1.8 compatible.\n+\t\t\turlString = URLDecoder.decode(urlString, \"UTF-8\");\n+\t\t}\n+\t\tcatch (UnsupportedEncodingException e) {\n+\t\t\t// Shouldn't happen, but failed to find UTF-8 encoding.\n+\t\t\t// Proceed without decoding, and hope for the best.\n+\t\t}\n+\t\treturn new ResourceFile(urlString);\n \t}\n }",
      "parent_sha": "11149b9ef26f21f565f5bec175cef6bd94de4542"
    }
  },
  {
    "oid": "7abe1b9af1890deb60ce9fbda80e638c7b32ae43",
    "message": "GP-1884: relaunch w/o re-init",
    "date": "2023-01-13T20:10:28Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/7abe1b9af1890deb60ce9fbda80e638c7b32ae43",
    "details": {
      "sha": "430ed2bbfab9d7cdaf96c719b72ecce33a3fab01",
      "filename": "Ghidra/Debug/Debugger-agent-dbgmodel/src/main/java/agent/dbgmodel/model/impl/DbgModel2TargetRootImpl.java",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/7abe1b9af1890deb60ce9fbda80e638c7b32ae43/Ghidra%2FDebug%2FDebugger-agent-dbgmodel%2Fsrc%2Fmain%2Fjava%2Fagent%2Fdbgmodel%2Fmodel%2Fimpl%2FDbgModel2TargetRootImpl.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/7abe1b9af1890deb60ce9fbda80e638c7b32ae43/Ghidra%2FDebug%2FDebugger-agent-dbgmodel%2Fsrc%2Fmain%2Fjava%2Fagent%2Fdbgmodel%2Fmodel%2Fimpl%2FDbgModel2TargetRootImpl.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FDebug%2FDebugger-agent-dbgmodel%2Fsrc%2Fmain%2Fjava%2Fagent%2Fdbgmodel%2Fmodel%2Fimpl%2FDbgModel2TargetRootImpl.java?ref=7abe1b9af1890deb60ce9fbda80e638c7b32ae43",
      "patch": "@@ -179,8 +179,14 @@ public void processAdded(DbgProcess proc, DbgCause cause) {\n \t\t\t\tSystem.err.println(\"processAdded - null\");\n \t\t\t\treturn;\n \t\t\t}\n+\t\t\tDbgModelTargetProcessContainer container =\n+\t\t\t\t(DbgModelTargetProcessContainer) targetProcess.getParent();\n+\t\t\tDelegateDbgModel2TargetObject delegate =\n+\t\t\t\t(DelegateDbgModel2TargetObject) container.getDelegate();\n+\t\t\tdelegate.init();\n+\n \t\t\tbroadcast().event(getProxy(), null, TargetEventType.PROCESS_CREATED,\n-\t\t\t\t\"Process \" + proc.getId() + \" started \" + \"notepad.exe\" + \" pid=\" + proc.getPid(),\n+\t\t\t\t\"Process \" + proc.getId() + \" started \" + \" pid=\" + proc.getPid(),\n \t\t\t\tList.of(targetProcess));\n \t\t});\n \t}\n@@ -193,6 +199,12 @@ public void threadCreated(DbgThread thread, DbgCause cause) {\n \t\t\t\tSystem.err.println(\"threadCreated - null\");\n \t\t\t\treturn;\n \t\t\t}\n+\t\t\tDbgModelTargetThreadContainer container =\n+\t\t\t\t(DbgModelTargetThreadContainer) targetThread.getParent();\n+\t\t\tDelegateDbgModel2TargetObject cdelegate =\n+\t\t\t\t(DelegateDbgModel2TargetObject) container.getDelegate();\n+\t\t\tcdelegate.init();\n+\n \t\t\tbroadcast().event(getProxy(), targetThread, TargetEventType.THREAD_CREATED,\n \t\t\t\t\"Thread \" + thread.getId() + \" started\", List.of(targetThread));\n \t\t\tDelegateDbgModel2TargetObject delegate =",
      "parent_sha": "d55b7e9aa9e667359b097b6f07a077942cd259e8"
    }
  },
  {
    "oid": "cbc614c4cd3b5befff2a73cb623c81a742b87326",
    "message": "GP-0: Fix rare race condition causing NPE.",
    "date": "2025-01-08T17:35:39Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/cbc614c4cd3b5befff2a73cb623c81a742b87326",
    "details": {
      "sha": "fced80404e0fdffd9a3d249c0e752ce17eb004f1",
      "filename": "Ghidra/Debug/Debugger/src/main/java/ghidra/app/plugin/core/debug/gui/model/AbstractQueryTableModel.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/cbc614c4cd3b5befff2a73cb623c81a742b87326/Ghidra%2FDebug%2FDebugger%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdebug%2Fgui%2Fmodel%2FAbstractQueryTableModel.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/cbc614c4cd3b5befff2a73cb623c81a742b87326/Ghidra%2FDebug%2FDebugger%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdebug%2Fgui%2Fmodel%2FAbstractQueryTableModel.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FDebug%2FDebugger%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdebug%2Fgui%2Fmodel%2FAbstractQueryTableModel.java?ref=cbc614c4cd3b5befff2a73cb623c81a742b87326",
      "patch": "@@ -4,9 +4,9 @@\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -302,6 +302,7 @@ public boolean isShowHidden() {\n \t@Override\n \tprotected void doLoad(Accumulator<T> accumulator, TaskMonitor monitor)\n \t\t\tthrows CancelledException {\n+\t\tTrace trace = this.trace;\n \t\tif (trace == null || query == null || trace.getObjectManager().getRootSchema() == null) {\n \t\t\treturn;\n \t\t}",
      "parent_sha": "6c0336443dcf29b737c5a2548f36ee18db02a217"
    }
  },
  {
    "oid": "a7b5738df6d37c7953af8871e24531dd228d43e6",
    "message": "GP-2409 - Fixed help window not showing when missing help",
    "date": "2022-08-04T16:36:58Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/a7b5738df6d37c7953af8871e24531dd228d43e6",
    "details": {
      "sha": "55e64a85e9a7da179c4a48903e850d644f286c84",
      "filename": "Ghidra/Framework/Docking/src/main/java/docking/help/HelpManager.java",
      "status": "modified",
      "additions": 14,
      "deletions": 3,
      "changes": 17,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/a7b5738df6d37c7953af8871e24531dd228d43e6/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fhelp%2FHelpManager.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/a7b5738df6d37c7953af8871e24531dd228d43e6/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fhelp%2FHelpManager.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fhelp%2FHelpManager.java?ref=a7b5738df6d37c7953af8871e24531dd228d43e6",
      "patch": "@@ -142,6 +142,12 @@ public void clearHelp(Object helpObject) {\n \t@Override\n \tpublic void registerHelp(Object helpObject, HelpLocation location) {\n \n+\t\tif (helpObject == null) {\n+\t\t\tThrowable t = ReflectionUtilities.createJavaFilteredThrowable();\n+\t\t\tMsg.debug(this, \"Incorrect use of registerHelp() - 'helpObject' cannot be null\\n\", t);\n+\t\t\treturn;\n+\t\t}\n+\n \t\tif (location == null) {\n \t\t\tThrowable t = ReflectionUtilities.createJavaFilteredThrowable();\n \t\t\tMsg.debug(this, \"Deprecated use of registerHelp() - use excludeFromHelp()\\n\", t);\n@@ -234,7 +240,7 @@ public void showHelp(Object helpObj, boolean infoOnly, Component owner) {\n \n \tprivate void showHelpLocation(HelpLocation loc, Window window) {\n \t\tif (loc == null) {\n-\t\t\tdisplayHelp(mainHS.getHomeID(), window); // show the default help page\n+\t\t\tshowDefaultHelpPage(window);\n \t\t\treturn;\n \t\t}\n \n@@ -246,7 +252,7 @@ private void showHelpLocation(HelpLocation loc, Window window) {\n \n \t\tString helpId = loc.getHelpId();\n \t\tif (helpId == null) {\n-\t\t\tdisplayHelp(mainHS.getHomeID(), window); // show the default help page\n+\t\t\tshowDefaultHelpPage(window);\n \t\t\treturn;\n \t\t}\n \n@@ -256,9 +262,14 @@ private void showHelpLocation(HelpLocation loc, Window window) {\n \t\tcatch (BadIDException e) {\n \t\t\tMsg.info(this, \"Could not find help for ID: \\\"\" + helpId +\n \t\t\t\t\"\\\" from HelpLocation: \" + loc);\n+\t\t\tdisplayHelp(HELP_NOT_FOUND_PAGE_URL, window);\n \t\t}\n \t}\n \n+\tprivate void showDefaultHelpPage(Window w) {\n+\t\tdisplayHelp(mainHS.getHomeID(), w);\n+\t}\n+\n \tprivate Window getBestParent(Component c) {\n \n \t\tif (c == null) {\n@@ -548,7 +559,7 @@ private void displayHelpUrl(Object help, URL helpUrl) {\n \t\t\treturn;\n \t\t}\n \n-\t\tmainHB.setCurrentURL(validateUrl(helpUrl));\n+\t\tmainHB.setCurrentURL(helpUrl);\n \t}\n \n \t/** This forces page to be redisplayed when location has not changed */",
      "parent_sha": "f173285991f8a87af2e4dbf69b9b1fcef5feeca2"
    }
  },
  {
    "oid": "aaf3bcef17ccd7bae18b0783f75ce2842743aa2a",
    "message": "Test fix for splash screen test",
    "date": "2021-02-19T23:19:50Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/aaf3bcef17ccd7bae18b0783f75ce2842743aa2a",
    "details": {
      "sha": "4b7d9b4476dc82ac59c70935afcb6ec578c528fb",
      "filename": "Ghidra/Framework/Docking/src/main/java/docking/DockingWindowManager.java",
      "status": "modified",
      "additions": 15,
      "deletions": 5,
      "changes": 20,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/aaf3bcef17ccd7bae18b0783f75ce2842743aa2a/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2FDockingWindowManager.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/aaf3bcef17ccd7bae18b0783f75ce2842743aa2a/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2FDockingWindowManager.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2FDockingWindowManager.java?ref=aaf3bcef17ccd7bae18b0783f75ce2842743aa2a",
      "patch": "@@ -1735,11 +1735,7 @@ private static void doShowDialog(DialogComponentProvider provider,\n \t\t\t}\n \n \t\t\tComponent bestCenter = getJavaActiveWindow();\n-\t\t\tWindow bestParent = getParentWindow(bestCenter);\n-\n-\t\t\tif (!provider.isModal()) {\n-\t\t\t\tbestParent = getBestNonModalParent(provider, bestParent);\n-\t\t\t}\n+\t\t\tWindow bestParent = getBestParent(provider, bestCenter);\n \n \t\t\t//\n \t\t\t// Note: prefer the active window; allow user's choice of center component when it is\n@@ -1762,6 +1758,20 @@ private static void doShowDialog(DialogComponentProvider provider,\n \t\t}\n \t}\n \n+\tprivate static Window getBestParent(DialogComponentProvider provider, Component component) {\n+\t\tWindow bestParent = getParentWindow(component);\n+\t\tif (!provider.isModal()) {\n+\t\t\tbestParent = getBestNonModalParent(provider, bestParent);\n+\t\t}\n+\n+\t\tif (bestParent == null) {\n+\t\t\tKeyboardFocusManager kfm = KeyboardFocusManager.getCurrentKeyboardFocusManager();\n+\t\t\tbestParent = kfm.getActiveWindow();\n+\t\t}\n+\n+\t\treturn bestParent;\n+\t}\n+\n \tprivate static Window getBestNonModalParent(DialogComponentProvider newProvider,\n \t\t\tWindow bestParent) {\n ",
      "parent_sha": "45927bb9c33330d8dad3597eb459e2e9a35c3323"
    }
  },
  {
    "oid": "0e558caa3dd36a27d4b95e5b90cb684c8842e4cf",
    "message": "Fix null exception in PropagateExternalParametersScript.java",
    "date": "2024-08-21T22:06:25Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/0e558caa3dd36a27d4b95e5b90cb684c8842e4cf",
    "details": {
      "sha": "9ae737c9bf6a061b13c037c148d89929e2bfb870",
      "filename": "Ghidra/Features/Base/ghidra_scripts/PropagateExternalParametersScript.java",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/0e558caa3dd36a27d4b95e5b90cb684c8842e4cf/Ghidra%2FFeatures%2FBase%2Fghidra_scripts%2FPropagateExternalParametersScript.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/0e558caa3dd36a27d4b95e5b90cb684c8842e4cf/Ghidra%2FFeatures%2FBase%2Fghidra_scripts%2FPropagateExternalParametersScript.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fghidra_scripts%2FPropagateExternalParametersScript.java?ref=0e558caa3dd36a27d4b95e5b90cb684c8842e4cf",
      "patch": "@@ -134,8 +134,8 @@ private void processExternalFunction(Listing listing, ReferenceManager refMan,\n \t\tfor (Reference extRef : extRefs) {\n \n \t\t\tAddress refAddr = extRef.getFromAddress();\n-\n \t\t\tString refMnemonic = listing.getCodeUnitAt(refAddr).getMnemonicString();\n+\n \t\t\tFunction calledFromFunc = listing.getFunctionContaining(refAddr);\n \t\t\tif (calledFromFunc == null) {\n \t\t\t\tcontinue;\n@@ -147,8 +147,14 @@ private void processExternalFunction(Listing listing, ReferenceManager refMan,\n \t\t\t\twhile (tempIter.hasNext()) {\n \t\t\t\t\tReference thunkRef = tempIter.next();\n \t\t\t\t\tAddress thunkRefAddr = thunkRef.getFromAddress();\n-\t\t\t\t\tString thunkRefMnemonic =\n-\t\t\t\t\t\tlisting.getCodeUnitAt(thunkRefAddr).getMnemonicString();\n+                                        \n+\t\t\t\t\tCodeUnit cu = listing.getCodeUnitAt(thunkRefAddr);\n+\t\t\t\t\tif(cu == null) {\n+\t\t\t\t\t\t// println(\"Referenced CodeUnit is null: \" + thunkRefAddr);\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\tString thunkRefMnemonic = cu.getMnemonicString();\n+\n \t\t\t\t\tFunction thunkRefFunc = listing.getFunctionContaining(thunkRefAddr);\n \t\t\t\t\tif ((thunkRefMnemonic.equals(new String(\"CALL\")) && (thunkRefFunc != null))) {\n \t\t\t\t\t\tCodeUnitIterator cuIt =\n@@ -297,7 +303,7 @@ else if (cu.getMnemonicString().equals(new String(\"PUSH\"))) {\n \t\t\t\t\tsetEOLComment(cu.getMinAddress(), params[index].getDataType().getDisplayName() +\n \t\t\t\t\t\t\" \" + params[index].getName() + \" for \" + extFuncName);\n \t\t\t\t\t// add the following to the EOL comment to see the value of the optype\n-\t\t\t\t\t//\t+\" \" + toHexString(currentProgram.getListing().getInstructionAt(cu.getMinAddress()).getOperandType(0), false, true)\n+\t\t\t\t\t//\t+ \" | \" + ghidra.program.model.lang.OperandType.toString(currentProgram.getListing().getInstructionAt(cu.getMinAddress()).getOperandType(0))\n \t\t\t\t\taddResult(params[index].getName(), params[index].getDataType(),\n \t\t\t\t\t\tcu.getMinAddress(), extFuncName);\n \t\t\t\t\tindex++;",
      "parent_sha": "6a94f1f7ab21e58e934bb3117d2c1085cfc18604"
    }
  },
  {
    "oid": "603f97f5d7780acdb3bfdc8ab1aaf8a2fccd29ad",
    "message": "GP-146 - fix compile error - missing ZLIB class specifier.",
    "date": "2020-09-08T19:17:59Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/603f97f5d7780acdb3bfdc8ab1aaf8a2fccd29ad",
    "details": {
      "sha": "a14e5ac2966cb579526ec1ddd663ecdbad957991",
      "filename": "Ghidra/Features/FileFormats/src/main/java/ghidra/file/formats/ios/png/CrushedPNGUtil.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/603f97f5d7780acdb3bfdc8ab1aaf8a2fccd29ad/Ghidra%2FFeatures%2FFileFormats%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffile%2Fformats%2Fios%2Fpng%2FCrushedPNGUtil.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/603f97f5d7780acdb3bfdc8ab1aaf8a2fccd29ad/Ghidra%2FFeatures%2FFileFormats%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffile%2Fformats%2Fios%2Fpng%2FCrushedPNGUtil.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FFileFormats%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffile%2Fformats%2Fios%2Fpng%2FCrushedPNGUtil.java?ref=603f97f5d7780acdb3bfdc8ab1aaf8a2fccd29ad",
      "patch": "@@ -104,7 +104,7 @@ else if (Arrays.equals(idBytes, CrushedPNGConstants.IDAT_CHUNK)) {\n \t\t\ttry (ByteArrayOutputStream decompressedOutput = new ByteArrayOutputStream(expectedSize);\n \t\t\t\tInflaterOutputStream inflaterStream = new InflaterOutputStream(decompressedOutput)) {\n \n-\t\t\t\tinflaterStream.write(ZLIB_COMPRESSION_DEFAULT);\n+\t\t\t\tinflaterStream.write(ZLIB.ZLIB_COMPRESSION_DEFAULT);\n \t\t\t\tidatStream.writeTo(inflaterStream);\n \t\t\t\tinflaterStream.finish();\n \t\t\t\tresults = decompressedOutput.toByteArray();",
      "parent_sha": "096ff3bb371cb175b23e8ea806dd0c0b524a4d65"
    }
  },
  {
    "oid": "b5132462574e9945b6af9cd1cbdbaae955e04bc6",
    "message": "GP-2591 indices of added overlay spaces",
    "date": "2022-09-21T16:51:07Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/b5132462574e9945b6af9cd1cbdbaae955e04bc6",
    "details": {
      "sha": "070723a0d7e48aa2e902d09c9c95f424b94d2b7a",
      "filename": "Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/DecompInterface.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/b5132462574e9945b6af9cd1cbdbaae955e04bc6/Ghidra%2FFeatures%2FDecompiler%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fdecompiler%2FDecompInterface.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/b5132462574e9945b6af9cd1cbdbaae955e04bc6/Ghidra%2FFeatures%2FDecompiler%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fdecompiler%2FDecompInterface.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FDecompiler%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fdecompiler%2FDecompInterface.java?ref=b5132462574e9945b6af9cd1cbdbaae955e04bc6",
      "patch": "@@ -276,6 +276,7 @@ else if (!decompProcess.isReady()) {\n \t\txmlEncode.clear();\n \t\tcompilerSpec.encode(xmlEncode);\n \t\tString cspecxml = xmlEncode.toString();\n+\t\tbaseEncodingSet = new EncodeDecodeSet(program);\n \n \t\tdecompCallback.setNativeMessage(null);\n \t\tdecompProcess.registerProgram(decompCallback, pspecxml, cspecxml, tspec, coretypes,\n@@ -370,7 +371,6 @@ public synchronized boolean openProgram(Program prog) {\n \t\tcompilerSpec = spec;\n \n \t\tdtmanage = new PcodeDataTypeManager(prog);\n-\t\tbaseEncodingSet = new EncodeDecodeSet(prog);\n \t\ttry {\n \t\t\tdecompCallback =\n \t\t\t\tnew DecompileCallback(prog, pcodelanguage, program.getCompilerSpec(), dtmanage);",
      "parent_sha": "45165ea16770c3e02aa13e71b240c77cc4fe31e1"
    }
  },
  {
    "oid": "0a3b1c6b49671e450074775692f9ebb93d3c6eed",
    "message": "fix indentation issue",
    "date": "2019-04-20T00:56:47Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/0a3b1c6b49671e450074775692f9ebb93d3c6eed",
    "details": {
      "sha": "00d4d5ddf3d6806e0531c1157f580a166e92817b",
      "filename": "Ghidra/Framework/Docking/src/main/java/docking/widgets/fieldpanel/FieldPanel.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/0a3b1c6b49671e450074775692f9ebb93d3c6eed/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Ffieldpanel%2FFieldPanel.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/0a3b1c6b49671e450074775692f9ebb93d3c6eed/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Ffieldpanel%2FFieldPanel.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Ffieldpanel%2FFieldPanel.java?ref=0a3b1c6b49671e450074775692f9ebb93d3c6eed",
      "patch": "@@ -1431,11 +1431,13 @@ public void mouseWheelMoved(MouseWheelEvent e) {\n \n \t\t\t\tif (e.isShiftDown()) {\n \t\t\t\t\t// horizontal scroll (only move viewport)\n-                    if (viewport != null) {\n+\t\t\t\t\tif (viewport != null) {\n \t\t\t\t\t\tPoint pos = viewport.getViewPosition();\n-\t\t\t\t\t\tviewport.setViewPosition(new Point(Math.max(0, pos.x + scrollAmount), pos.y));\n+\t\t\t\t\t\tviewport.setViewPosition(\n+\t\t\t\t\t\t\tnew Point(Math.max(0, pos.x + scrollAmount), pos.y));\n \t\t\t\t\t}\n-\t\t\t\t} else {\n+\t\t\t\t}\n+\t\t\t\telse {\n \t\t\t\t\tscrollView(scrollAmount);\n \t\t\t\t}\n \t\t\t}",
      "parent_sha": "414bef0ce19c172fdfd5e72310bf7877acb480b3"
    }
  },
  {
    "oid": "04e4fde15dd55f81302980b599df5730d3a16a76",
    "message": "GT-2869: Fixing compilation error.",
    "date": "2019-06-12T19:02:03Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/04e4fde15dd55f81302980b599df5730d3a16a76",
    "details": {
      "sha": "0fd0570a2853bf1123bc4f66664ccccdd1e3e18e",
      "filename": "Ghidra/Features/Decompiler/src/test.slow/java/ghidra/app/plugin/core/decompile/DecompilerClangTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/04e4fde15dd55f81302980b599df5730d3a16a76/Ghidra%2FFeatures%2FDecompiler%2Fsrc%2Ftest.slow%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdecompile%2FDecompilerClangTest.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/04e4fde15dd55f81302980b599df5730d3a16a76/Ghidra%2FFeatures%2FDecompiler%2Fsrc%2Ftest.slow%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdecompile%2FDecompilerClangTest.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FDecompiler%2Fsrc%2Ftest.slow%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdecompile%2FDecompilerClangTest.java?ref=04e4fde15dd55f81302980b599df5730d3a16a76",
      "patch": "@@ -18,6 +18,7 @@\n import static org.junit.Assert.*;\n \n import java.util.List;\n+import java.util.Set;\n \n import org.junit.Test;\n \n@@ -158,8 +159,7 @@ public void testDecompiler_CopyFromSymbolWithoutSelection() throws Exception {\n \n \tprivate void copy() {\n \n-\t\tString fullName = \"Copy (ClipboardPlugin)\";\n-\t\tList<DockingActionIf> actions = tool.getDockingActionsByFullActionName(fullName);\n+\t\tSet<DockingActionIf> actions = getActionsByOwnerAndName(tool, \"ClipboardPlugin\", \"Copy\");\n \t\tfor (DockingActionIf action : actions) {\n \t\t\tObject service = getInstanceField(\"clipboardService\", action);\n \t\t\tif (service.getClass().toString().contains(\"Decomp\")) {",
      "parent_sha": "b107aa233bbcd1f37715f2f91c43fc65ef87d823"
    }
  },
  {
    "oid": "49a426eb3f123cff4f8a83176c8a0ec6fff5aa86",
    "message": "GP-0: Fixing issue with discovering split dyld_shared_cache files",
    "date": "2022-05-17T09:38:24Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/49a426eb3f123cff4f8a83176c8a0ec6fff5aa86",
    "details": {
      "sha": "fc78e88c40aeb137ac39a9afcdca4214608e4d5d",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/DyldCacheUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/49a426eb3f123cff4f8a83176c8a0ec6fff5aa86/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fopinion%2FDyldCacheUtils.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/49a426eb3f123cff4f8a83176c8a0ec6fff5aa86/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fopinion%2FDyldCacheUtils.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fopinion%2FDyldCacheUtils.java?ref=49a426eb3f123cff4f8a83176c8a0ec6fff5aa86",
      "patch": "@@ -195,10 +195,7 @@ private List<File> getSplitDyldCacheFiles(ByteProvider baseProvider,\n \t\t\tif (file != null && shouldCombineSplitFiles) {\n \t\t\t\tString baseName = file.getName();\n \t\t\t\tFile[] splitFiles = file.getParentFile().listFiles(f -> {\n-\t\t\t\t\tif (!f.getName().startsWith(baseName)) {\n-\t\t\t\t\t\treturn false;\n-\t\t\t\t\t}\n-\t\t\t\t\tif (f.getName().equals(baseName)) {\n+\t\t\t\t\tif (!f.getName().startsWith(baseName + \".\")) {\n \t\t\t\t\t\treturn false;\n \t\t\t\t\t}\n \t\t\t\t\tif (f.getName().toLowerCase().endsWith(\".map\")) {",
      "parent_sha": "8a776567b525dc38dcc3362f2fe2925c4a5d4791"
    }
  },
  {
    "oid": "0a74b2b063e0615c40785f90b11aa8699ccbb9c2",
    "message": "Corrected version display when disconnected",
    "date": "2020-02-12T21:19:12Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/0a74b2b063e0615c40785f90b11aa8699ccbb9c2",
    "details": {
      "sha": "726b7b56ed4b7d91a461abc63d96baeb1614ba69",
      "filename": "Ghidra/Framework/Project/src/main/java/ghidra/framework/main/datatable/DomainFileInfo.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/0a74b2b063e0615c40785f90b11aa8699ccbb9c2/Ghidra%2FFramework%2FProject%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fframework%2Fmain%2Fdatatable%2FDomainFileInfo.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/0a74b2b063e0615c40785f90b11aa8699ccbb9c2/Ghidra%2FFramework%2FProject%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fframework%2Fmain%2Fdatatable%2FDomainFileInfo.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FProject%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fframework%2Fmain%2Fdatatable%2FDomainFileInfo.java?ref=0a74b2b063e0615c40785f90b11aa8699ccbb9c2",
      "patch": "@@ -1,6 +1,5 @@\n /* ###\n  * IP: GHIDRA\n- * REVIEWED: YES\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,12 +15,12 @@\n  */\n package ghidra.framework.main.datatable;\n \n-import ghidra.framework.model.DomainFile;\n-\n import java.util.*;\n \n import javax.swing.Icon;\n \n+import ghidra.framework.model.DomainFile;\n+\n public class DomainFileInfo {\n \n \t// TODO: should not hang onto DomainFile since it may not track changes anymore\n@@ -56,7 +55,7 @@ else if (domainFile.isVersioned()) {\n \t\t\tif (domainFile.isCheckedOut()) {\n \t\t\t\tint latestVersionNumber = domainFile.getLatestVersion();\n \t\t\t\tString latestVersionStr = \"\" + latestVersionNumber;\n-\t\t\t\tif (latestVersionNumber < 0) {\n+\t\t\t\tif (latestVersionNumber <= 0) {\n \t\t\t\t\tlatestVersionStr = \"?\";\n \t\t\t\t}\n \t\t\t\tdisplayName += \" (\" + versionStr + \" of \" + latestVersionStr + \")\";",
      "parent_sha": "687ce7f529d17f0fa215c2d8193b39b6ea8f636a"
    }
  },
  {
    "oid": "c96c3eda4014bccb314575ea7e1949fff76e389d",
    "message": "GP-1810 - Action help fix",
    "date": "2022-03-09T18:10:42Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/c96c3eda4014bccb314575ea7e1949fff76e389d",
    "details": {
      "sha": "1dc43a0b7c51bb8d9f005265688ccc6782f972d7",
      "filename": "Ghidra/Framework/Docking/src/main/java/docking/menu/MultiStateDockingAction.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/c96c3eda4014bccb314575ea7e1949fff76e389d/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fmenu%2FMultiStateDockingAction.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/c96c3eda4014bccb314575ea7e1949fff76e389d/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fmenu%2FMultiStateDockingAction.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fmenu%2FMultiStateDockingAction.java?ref=c96c3eda4014bccb314575ea7e1949fff76e389d",
      "patch": "@@ -25,6 +25,7 @@\n import docking.ActionContext;\n import docking.DockingWindowManager;\n import docking.action.*;\n+import docking.help.Help;\n import docking.widgets.EventTrigger;\n import ghidra.util.HelpLocation;\n import ghidra.util.SystemUtilities;\n@@ -390,7 +391,7 @@ private class ActionStateAction extends DockingAction {\n \t\tprivate final ActionState<T> actionState;\n \n \t\tprivate ActionStateAction(ActionState<T> actionState, boolean isSelected) {\n-\t\t\tsuper(actionState.getName(), \"multiStateAction\");\n+\t\t\tsuper(actionState.getName(), \"MultiStateAction\");\n \t\t\tthis.actionState = actionState;\n \n \t\t\tsetMenuBarData(\n@@ -399,6 +400,11 @@ private ActionStateAction(ActionState<T> actionState, boolean isSelected) {\n \t\t\tif (helpLocation != null) {\n \t\t\t\tsetHelpLocation(helpLocation);\n \t\t\t}\n+\t\t\telse {\n+\t\t\t\tHelpLocation parentHelp =\n+\t\t\t\t\tHelp.getHelpService().getHelpLocation(MultiStateDockingAction.this);\n+\t\t\t\tsetHelpLocation(parentHelp);\n+\t\t\t}\n \t\t}\n \n \t\t@Override",
      "parent_sha": "a7e9073798542399a6e684dca4c334ad651694ae"
    }
  },
  {
    "oid": "3dd8441279d7bf812214ed33186529c36361a45f",
    "message": "GP-0: fix for failing tests",
    "date": "2023-09-15T13:36:08Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/3dd8441279d7bf812214ed33186529c36361a45f",
    "details": {
      "sha": "e25fd377a7005771482b79bec6a978b5d30cbcc8",
      "filename": "Ghidra/Test/IntegrationTest/src/test.slow/java/agent/dbgeng/rmi/AbstractDbgEngTraceRmiTest.java",
      "status": "modified",
      "additions": 19,
      "deletions": 39,
      "changes": 58,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/3dd8441279d7bf812214ed33186529c36361a45f/Ghidra%2FTest%2FIntegrationTest%2Fsrc%2Ftest.slow%2Fjava%2Fagent%2Fdbgeng%2Frmi%2FAbstractDbgEngTraceRmiTest.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/3dd8441279d7bf812214ed33186529c36361a45f/Ghidra%2FTest%2FIntegrationTest%2Fsrc%2Ftest.slow%2Fjava%2Fagent%2Fdbgeng%2Frmi%2FAbstractDbgEngTraceRmiTest.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FTest%2FIntegrationTest%2Fsrc%2Ftest.slow%2Fjava%2Fagent%2Fdbgeng%2Frmi%2FAbstractDbgEngTraceRmiTest.java?ref=3dd8441279d7bf812214ed33186529c36361a45f",
      "patch": "@@ -15,55 +15,30 @@\n  */\n package agent.dbgeng.rmi;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.OutputStream;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.net.SocketAddress;\n-import java.net.SocketTimeoutException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Set;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.TimeoutException;\n+import static org.junit.Assert.*;\n+import static org.junit.Assume.*;\n+\n+import java.io.*;\n+import java.net.*;\n+import java.nio.file.*;\n+import java.util.*;\n+import java.util.concurrent.*;\n import java.util.function.Function;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n \n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.junit.Before;\n \n import ghidra.app.plugin.core.debug.gui.AbstractGhidraHeadedDebuggerGUITest;\n-import ghidra.app.plugin.core.debug.service.rmi.trace.RemoteAsyncResult;\n-import ghidra.app.plugin.core.debug.service.rmi.trace.RemoteMethod;\n-import ghidra.app.plugin.core.debug.service.rmi.trace.TraceRmiAcceptor;\n-import ghidra.app.plugin.core.debug.service.rmi.trace.TraceRmiHandler;\n-import ghidra.app.plugin.core.debug.service.rmi.trace.TraceRmiPlugin;\n+import ghidra.app.plugin.core.debug.service.rmi.trace.*;\n import ghidra.app.plugin.core.debug.utils.ManagedDomainObject;\n import ghidra.app.services.TraceRmiService;\n import ghidra.dbg.testutil.DummyProc;\n-import ghidra.framework.Application;\n-import ghidra.framework.OperatingSystem;\n-import ghidra.framework.TestApplicationUtils;\n+import ghidra.framework.*;\n import ghidra.framework.main.ApplicationLevelOnlyPlugin;\n import ghidra.framework.model.DomainFile;\n import ghidra.framework.plugintool.Plugin;\n import ghidra.framework.plugintool.PluginsConfiguration;\n-import ghidra.framework.plugintool.util.PluginDescription;\n-import ghidra.framework.plugintool.util.PluginException;\n-import ghidra.framework.plugintool.util.PluginPackage;\n+import ghidra.framework.plugintool.util.*;\n import ghidra.program.model.address.Address;\n import ghidra.program.model.address.AddressRangeImpl;\n import ghidra.trace.model.Lifespan;\n@@ -92,6 +67,11 @@ public abstract class AbstractDbgEngTraceRmiTest extends AbstractGhidraHeadedDeb\n \tprivate Path outFile;\n \tprivate Path errFile;\n \n+\t@Before\n+\tpublic void assertOS() {\n+\t\tassumeTrue(OperatingSystem.CURRENT_OPERATING_SYSTEM == OperatingSystem.WINDOWS);\n+\t}\n+\n \t//@BeforeClass\n \tpublic static void setupPython() throws Throwable {\n \t\tnew ProcessBuilder(\"gradle\", \"Debugger-agent-dbgeng:assemblePyPackage\")\n@@ -174,10 +154,10 @@ protected ExecInPython execInPython(String script) throws IOException {\n \t\t// If commands come from file, Python will quit after EOF.\n \t\tMsg.info(this, \"outFile: \" + outFile);\n \t\tMsg.info(this, \"errFile: \" + errFile);\n-\t\t\n+\n \t\t//pb.inheritIO();\n \t\tpb.redirectInput(ProcessBuilder.Redirect.PIPE);\n-\t    pb.redirectOutput(outFile.toFile());\n+\t\tpb.redirectOutput(outFile.toFile());\n \t\tpb.redirectError(errFile.toFile());\n \t\tProcess pyproc = pb.start();\n \t\tOutputStream stdin = pyproc.getOutputStream();\n@@ -195,7 +175,7 @@ protected ExecInPython execInPython(String script) throws IOException {\n \t\t\t\t}\n \t\t\t\tMsg.info(this, \"Python exited with code \" + pyproc.exitValue());\n \t\t\t\treturn new PythonResult(false, pyproc.exitValue(), Files.readString(outFile),\n-\t\t\t\t\t\tFiles.readString(errFile));\n+\t\t\t\t\tFiles.readString(errFile));\n \t\t\t}\n \t\t\tcatch (Exception e) {\n \t\t\t\treturn ExceptionUtils.rethrow(e);",
      "parent_sha": "4561e8335d3b62329c4afdf5a91bc6ce113b7002"
    }
  },
  {
    "oid": "243fcec0309f6cba44daa86fdebde4db8df84ddb",
    "message": "GP-4946 fix NPE",
    "date": "2024-09-19T21:16:37Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/243fcec0309f6cba44daa86fdebde4db8df84ddb",
    "details": {
      "sha": "4b6557ab0a8c11492c2460eb6ac2c1e002ea254c",
      "filename": "Ghidra/Features/GnuDemangler/src/main/java/ghidra/app/util/demangler/gnu/GnuDemangler.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/243fcec0309f6cba44daa86fdebde4db8df84ddb/Ghidra%2FFeatures%2FGnuDemangler%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fdemangler%2Fgnu%2FGnuDemangler.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/243fcec0309f6cba44daa86fdebde4db8df84ddb/Ghidra%2FFeatures%2FGnuDemangler%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fdemangler%2Fgnu%2FGnuDemangler.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FGnuDemangler%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fdemangler%2Fgnu%2FGnuDemangler.java?ref=243fcec0309f6cba44daa86fdebde4db8df84ddb",
      "patch": "@@ -77,7 +77,9 @@ public DemangledObject demangle(String mangled, DemanglerOptions demanglerOption\n \tpublic DemangledObject demangle(MangledContext mangledContext)\n \t\t\tthrows DemangledException {\n \t\tDemangledObject demangled = demangleInternal(mangledContext);\n-\t\tdemangled.setMangledContext(mangledContext);\n+\t\tif (demangled != null) {\n+\t\t\tdemangled.setMangledContext(mangledContext);\n+\t\t}\n \t\treturn demangled;\n \t}\n ",
      "parent_sha": "ce53fca3d3a2ce1988bf6f661da4d4edcac816fe"
    }
  },
  {
    "oid": "4f73af4c92398c5842d33da8d01c4459567ffe94",
    "message": "Correct divide-by-zero test issue",
    "date": "2020-02-03T21:42:35Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/4f73af4c92398c5842d33da8d01c4459567ffe94",
    "details": {
      "sha": "0c09879c3c4291f1b2e599b1ffd167d622ddcd65",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/equate/AbstractConvertAction.java",
      "status": "modified",
      "additions": 17,
      "deletions": 7,
      "changes": 24,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/4f73af4c92398c5842d33da8d01c4459567ffe94/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fequate%2FAbstractConvertAction.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/4f73af4c92398c5842d33da8d01c4459567ffe94/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fequate%2FAbstractConvertAction.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fequate%2FAbstractConvertAction.java?ref=4f73af4c92398c5842d33da8d01c4459567ffe94",
      "patch": "@@ -42,10 +42,6 @@ public AbstractConvertAction(EquatePlugin plugin, String actionName, boolean isS\n \t\tthis.isSigned = isSigned;\n \t\tsetPopupMenuData(new MenuData(new String[] { \"Convert\", \"\" }, \"Convert\"));\n \t\tsetEnabled(true);\n-\t\tJMenuItem item = new JMenuItem();\n-\t\tFont font = item.getFont();\n-\t\tmetrics = plugin.getTool().getActiveWindow().getFontMetrics(font);\n-\n \t}\n \n \t@Override\n@@ -132,14 +128,28 @@ protected final boolean isSignedChoice() {\n \t\treturn isSigned;\n \t}\n \n+\tprivate int stringWidth(String s) {\n+\t\tif (metrics == null) {\n+\t\t\tJMenuItem item = new JMenuItem();\n+\t\t\tFont font = item.getFont();\n+\t\t\tmetrics = plugin.getTool().getActiveWindow().getFontMetrics(font);\n+\t\t}\n+\t\tint w = metrics.stringWidth(s);\n+\t\tif (w == 0) {\n+\t\t\t// use default computation if metrics report 0\n+\t\t\treturn 10 * s.length();\n+\t\t}\n+\t\treturn w;\n+\t}\n+\n \tString getStandardLengthString(String baseString) {\n-\t\tint baseWidth = metrics.stringWidth(baseString);\n-\t\tint spaceWidth = metrics.stringWidth(\" \");\n+\t\tint baseWidth = stringWidth(baseString);\n+\t\tint spaceWidth = stringWidth(\" \");\n \t\tint paddingSize = (140 - baseWidth) / spaceWidth;\n \t\tif (paddingSize <= 0) {\n \t\t\treturn baseString;\n \t\t}\n-\t\tStringBuffer buf = new StringBuffer(baseString);\n+\t\tStringBuilder buf = new StringBuilder(baseString);\n \t\tfor (int i = 0; i < paddingSize; i++) {\n \t\t\tbuf.append(\" \");\n \t\t}",
      "parent_sha": "c081a87edeb2ab7442273525c784be280cbd4f53"
    }
  },
  {
    "oid": "61bb1addf228bee43556b2f7daf3052ab54d2aad",
    "message": "GP-1750: Always acquire trace read lock before \"ordered\" in viewport.",
    "date": "2022-03-22T14:37:01Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/61bb1addf228bee43556b2f7daf3052ab54d2aad",
    "details": {
      "sha": "7e356616136be1551b88598ad20cd2de067bd089",
      "filename": "Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/util/DefaultTraceTimeViewport.java",
      "status": "modified",
      "additions": 40,
      "deletions": 28,
      "changes": 68,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/61bb1addf228bee43556b2f7daf3052ab54d2aad/Ghidra%2FDebug%2FFramework-TraceModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ftrace%2Futil%2FDefaultTraceTimeViewport.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/61bb1addf228bee43556b2f7daf3052ab54d2aad/Ghidra%2FDebug%2FFramework-TraceModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ftrace%2Futil%2FDefaultTraceTimeViewport.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FDebug%2FFramework-TraceModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ftrace%2Futil%2FDefaultTraceTimeViewport.java?ref=61bb1addf228bee43556b2f7daf3052ab54d2aad",
      "patch": "@@ -186,12 +186,14 @@ public <T> AddressSet computeVisibleParts(AddressSetView set, Range<Long> lifesp\n \t}\n \n \tprotected boolean isLower(long lower) {\n-\t\tsynchronized (ordered) {\n-\t\t\tRange<Long> range = spanSet.rangeContaining(lower);\n-\t\t\tif (range == null) {\n-\t\t\t\treturn false;\n+\t\ttry (LockHold hold = trace.lockRead()) { // May not be necessary\n+\t\t\tsynchronized (ordered) {\n+\t\t\t\tRange<Long> range = spanSet.rangeContaining(lower);\n+\t\t\t\tif (range == null) {\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t\treturn range.lowerEndpoint().longValue() == lower;\n \t\t\t}\n-\t\t\treturn range.lowerEndpoint().longValue() == lower;\n \t\t}\n \t}\n \n@@ -262,12 +264,12 @@ protected void refreshSnapRanges() {\n \t\tList<Range<Long>> ordered = new ArrayList<>();\n \t\ttry (LockHold hold = trace.lockRead()) {\n \t\t\tcollectForkRanges(trace.getTimeManager(), snap, spanSet, ordered);\n-\t\t}\n-\t\tsynchronized (this.ordered) {\n-\t\t\tthis.spanSet.clear();\n-\t\t\tthis.ordered.clear();\n-\t\t\tthis.spanSet.addAll(spanSet);\n-\t\t\tthis.ordered.addAll(ordered);\n+\t\t\tsynchronized (this.ordered) {\n+\t\t\t\tthis.spanSet.clear();\n+\t\t\t\tthis.ordered.clear();\n+\t\t\t\tthis.spanSet.addAll(spanSet);\n+\t\t\t\tthis.ordered.addAll(ordered);\n+\t\t\t}\n \t\t}\n \t\tassert !ordered.isEmpty();\n \t\tchangeListeners.fire.run();\n@@ -322,41 +324,51 @@ protected boolean checkSnapshotDeletedNeedsRefresh(TraceSnapshot snapshot) {\n \n \t@Override\n \tpublic boolean isForked() {\n-\t\tsynchronized (ordered) {\n-\t\t\treturn ordered.size() > 1;\n+\t\ttry (LockHold hold = trace.lockRead()) { // May not be necessary\n+\t\t\tsynchronized (ordered) {\n+\t\t\t\treturn ordered.size() > 1;\n+\t\t\t}\n \t\t}\n \t}\n \n \tpublic List<Range<Long>> getOrderedSpans() {\n-\t\tsynchronized (ordered) {\n-\t\t\treturn List.copyOf(ordered);\n+\t\ttry (LockHold hold = trace.lockRead()) { // May not be necessary\n+\t\t\tsynchronized (ordered) {\n+\t\t\t\treturn List.copyOf(ordered);\n+\t\t\t}\n \t\t}\n \t}\n \n \tpublic List<Range<Long>> getOrderedSpans(long snap) {\n-\t\tsynchronized (ordered) {\n-\t\t\tsetSnap(snap);\n-\t\t\treturn getOrderedSpans();\n+\t\ttry (LockHold hold = trace.lockRead()) { // setSnap requires this\n+\t\t\tsynchronized (ordered) {\n+\t\t\t\tsetSnap(snap);\n+\t\t\t\treturn getOrderedSpans();\n+\t\t\t}\n \t\t}\n \t}\n \n \t@Override\n \tpublic List<Long> getOrderedSnaps() {\n-\t\tsynchronized (ordered) {\n-\t\t\treturn ordered\n-\t\t\t\t\t.stream()\n-\t\t\t\t\t.map(Range::upperEndpoint)\n-\t\t\t\t\t.collect(Collectors.toList());\n+\t\ttry (LockHold hold = trace.lockRead()) { // May not be necessary\n+\t\t\tsynchronized (ordered) {\n+\t\t\t\treturn ordered\n+\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t.map(Range::upperEndpoint)\n+\t\t\t\t\t\t.collect(Collectors.toList());\n+\t\t\t}\n \t\t}\n \t}\n \n \t@Override\n \tpublic List<Long> getReversedSnaps() {\n-\t\tsynchronized (ordered) {\n-\t\t\treturn Lists.reverse(ordered)\n-\t\t\t\t\t.stream()\n-\t\t\t\t\t.map(Range::upperEndpoint)\n-\t\t\t\t\t.collect(Collectors.toList());\n+\t\ttry (LockHold hold = trace.lockRead()) { // May not be necessary\n+\t\t\tsynchronized (ordered) {\n+\t\t\t\treturn Lists.reverse(ordered)\n+\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t.map(Range::upperEndpoint)\n+\t\t\t\t\t\t.collect(Collectors.toList());\n+\t\t\t}\n \t\t}\n \t}\n ",
      "parent_sha": "1af6fe0893e52bd31aec1a684efd4253bc81de48"
    }
  },
  {
    "oid": "334eecbd16915754f3f89401473335a8bb53f335",
    "message": "Fix tricore relocation 24REL handling",
    "date": "2025-03-04T17:58:16Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/334eecbd16915754f3f89401473335a8bb53f335",
    "details": {
      "sha": "ed47f216a61c82c831c9ab089a446a180099ed11",
      "filename": "Ghidra/Processors/tricore/src/main/java/ghidra/app/util/bin/format/elf/relocation/Tricore_ElfRelocationHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/334eecbd16915754f3f89401473335a8bb53f335/Ghidra%2FProcessors%2Ftricore%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Felf%2Frelocation%2FTricore_ElfRelocationHandler.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/334eecbd16915754f3f89401473335a8bb53f335/Ghidra%2FProcessors%2Ftricore%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Felf%2Frelocation%2FTricore_ElfRelocationHandler.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FProcessors%2Ftricore%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Felf%2Frelocation%2FTricore_ElfRelocationHandler.java?ref=334eecbd16915754f3f89401473335a8bb53f335",
      "patch": "@@ -355,8 +355,7 @@ private int relocate_word16(Memory memory, Address relocationAddress, long rv)\n \t */\n \tprivate int relocate_relB(Memory memory, Address relocationAddress, long rv)\n \t\t\tthrows MemoryAccessException {\n-\t\t// TODO ff000000..00fffffe?\n-\t\tlong mask = 0xfffffffeL;\n+\t\tlong mask = 0x00000001L;\n \t\tlong val = ~mask & rv;\n \t\tint iw = memory.getInt(relocationAddress) & 0xff;\n \t\tiw |= ((val & 0x1fffe) << 15);",
      "parent_sha": "45552147eca47eda4663b4e28f478d91209826ab"
    }
  },
  {
    "oid": "3686ab2253353a7f93575ac7716803f391a652f8",
    "message": "GP-0: Certify",
    "date": "2024-10-07T18:03:37Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/3686ab2253353a7f93575ac7716803f391a652f8",
    "details": {
      "sha": "575a243bd2445f4ab1ccb583927beb61df09818e",
      "filename": "Ghidra/Features/FunctionID/ghidra_scripts/ListDomainFiles.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/3686ab2253353a7f93575ac7716803f391a652f8/Ghidra%2FFeatures%2FFunctionID%2Fghidra_scripts%2FListDomainFiles.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/3686ab2253353a7f93575ac7716803f391a652f8/Ghidra%2FFeatures%2FFunctionID%2Fghidra_scripts%2FListDomainFiles.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FFunctionID%2Fghidra_scripts%2FListDomainFiles.java?ref=3686ab2253353a7f93575ac7716803f391a652f8",
      "patch": "@@ -4,9 +4,9 @@\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      "parent_sha": "a26545f42c39bf2d9879ced3eeef9d54b67f46dd"
    }
  },
  {
    "oid": "6f3c516cacaf2cbc60c53dbf3d60428eb491d693",
    "message": "BitFields - corrected handling of unnamed PDB structure member during\nstructure buildup",
    "date": "2019-07-18T17:55:16Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/6f3c516cacaf2cbc60c53dbf3d60428eb491d693",
    "details": {
      "sha": "981de8f73fbc99c6acaf895ce833e91fa97e6fd6",
      "filename": "Ghidra/Features/PDB/src/main/java/ghidra/app/util/bin/format/pdb/DefaultCompositeMember.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/6f3c516cacaf2cbc60c53dbf3d60428eb491d693/Ghidra%2FFeatures%2FPDB%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Fpdb%2FDefaultCompositeMember.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/6f3c516cacaf2cbc60c53dbf3d60428eb491d693/Ghidra%2FFeatures%2FPDB%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Fpdb%2FDefaultCompositeMember.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FPDB%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Fpdb%2FDefaultCompositeMember.java?ref=6f3c516cacaf2cbc60c53dbf3d60428eb491d693",
      "patch": "@@ -390,7 +390,7 @@ private void initializeContainer() {\n \t */\n \t@Override\n \tboolean isContainer() {\n-\t\treturn memberDataTypeName == null;\n+\t\treturn memberType != MemberType.MEMBER; // memberDataTypeName == null;\n \t}\n \n \t/**",
      "parent_sha": "a21b97f38495e0dd6f5dd76e1d6717079e5d8b16"
    }
  },
  {
    "oid": "07c9fb3f456e5388412635dd26b408be4ae6ac1b",
    "message": "GP-4035 updated to not use address.subtract to determine inst offset,\nwhich could in some cases cause an overflow error.",
    "date": "2023-11-13T17:18:43Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/07c9fb3f456e5388412635dd26b408be4ae6ac1b",
    "details": {
      "sha": "732b42e456355c7ad9c2fc7015650ea42aefbbda",
      "filename": "Ghidra/Features/VersionTracking/src/main/java/ghidra/feature/vt/gui/actions/AutoVersionTrackingTask.java",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/07c9fb3f456e5388412635dd26b408be4ae6ac1b/Ghidra%2FFeatures%2FVersionTracking%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffeature%2Fvt%2Fgui%2Factions%2FAutoVersionTrackingTask.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/07c9fb3f456e5388412635dd26b408be4ae6ac1b/Ghidra%2FFeatures%2FVersionTracking%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffeature%2Fvt%2Fgui%2Factions%2FAutoVersionTrackingTask.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FVersionTracking%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffeature%2Fvt%2Fgui%2Factions%2FAutoVersionTrackingTask.java?ref=07c9fb3f456e5388412635dd26b408be4ae6ac1b",
      "patch": "@@ -1224,10 +1224,14 @@ private Map<Long, Map<Integer, Object>> mapFunctionScalarAndAddressOperands(\n \t\t\tif (map.keySet().isEmpty()) {\n \t\t\t\tcontinue;\n \t\t\t}\n-\n+\t\t\t\n \t\t\t// get offset from top of function to use in function to operandMap map\n-\t\t\tLong offset =\n-\t\t\t\tinst.getAddress().subtract(function.getEntryPoint().getOffset()).getOffset();\n+\t\t\t// can be positive or negative offset (positive means instruction address is after \n+\t\t\t// the entry address, negative means instruction address is before entry address)\n+\t\t\tLong entryOffset = function.getEntryPoint().getOffset();\n+\t\t\tLong instOffset = inst.getAddress().getOffset();\n+\t\t\tLong offset = instOffset - entryOffset;\n+\n \t\t\toffsetToOperandsMap.put(offset, map);\n \t\t}\n ",
      "parent_sha": "07f0f57cabafc2a47954fffca2efafd760fef5b0"
    }
  },
  {
    "oid": "fa80baf0fb810bd2ee53d24d6f7a7b7e552caf00",
    "message": "GT-2763 - Table Sorting - fix merge error",
    "date": "2019-05-09T14:24:34Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/fa80baf0fb810bd2ee53d24d6f7a7b7e552caf00",
    "details": {
      "sha": "3ccc06e013e8607a399f4d8a44f973e028fd5b6f",
      "filename": "Ghidra/Framework/Docking/src/main/java/docking/widgets/dialogs/SettingsDialog.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/fa80baf0fb810bd2ee53d24d6f7a7b7e552caf00/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Fdialogs%2FSettingsDialog.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/fa80baf0fb810bd2ee53d24d6f7a7b7e552caf00/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Fdialogs%2FSettingsDialog.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Fdialogs%2FSettingsDialog.java?ref=fa80baf0fb810bd2ee53d24d6f7a7b7e552caf00",
      "patch": "@@ -27,11 +27,10 @@\n import javax.swing.table.TableCellEditor;\n \n import docking.DialogComponentProvider;\n-import docking.DockingWindowManager;<<<<<<<Upstream,based on origin/master\n+import docking.DockingWindowManager;\n import docking.widgets.checkbox.GCheckBox;\n import docking.widgets.combobox.GComboBox;\n-import docking.widgets.table.DefaultSortedTableModel;=======\n-import docking.widgets.table.AbstractSortedTableModel;>>>>>>>000543e  GT-2763-Table Sorting-updated help;removed old DefaultSortedTableModel\n+import docking.widgets.table.AbstractSortedTableModel;\n import docking.widgets.table.GTable;\n import ghidra.docking.settings.*;\n import ghidra.util.HelpLocation;",
      "parent_sha": "aa8dc6a491fb09a4a8ec2c9e41ba2cb4b9969b07"
    }
  },
  {
    "oid": "a27250f459266a658e36c26ec611a4bd8da918eb",
    "message": "GP-3315: Fixing typo",
    "date": "2023-04-26T10:05:31Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/a27250f459266a658e36c26ec611a4bd8da918eb",
    "details": {
      "sha": "e77146e3c7ae576fc8e3e50f533611799d171404",
      "filename": "Ghidra/Framework/Project/src/main/java/ghidra/framework/plugintool/util/PluginClassManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/a27250f459266a658e36c26ec611a4bd8da918eb/Ghidra%2FFramework%2FProject%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fframework%2Fplugintool%2Futil%2FPluginClassManager.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/a27250f459266a658e36c26ec611a4bd8da918eb/Ghidra%2FFramework%2FProject%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fframework%2Fplugintool%2Futil%2FPluginClassManager.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FProject%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fframework%2Fplugintool%2Futil%2FPluginClassManager.java?ref=a27250f459266a658e36c26ec611a4bd8da918eb",
      "patch": "@@ -200,7 +200,7 @@ public Set<String> getPluginClasses(Element element) {\n \t\t\t}\n \n \t\t\tif (!PluginPackage.exists(packageName)) {\n-\t\t\t\tMsg.warn(this, \"Unable to find plugin pacakge '\" + packageName +\n+\t\t\t\tMsg.warn(this, \"Unable to find plugin package '\" + packageName +\n \t\t\t\t\t\"' while restoring plugins from xml\");\n \t\t\t\tcontinue;\n \t\t\t}",
      "parent_sha": "38a2e5647a7c3c6d0ef24ddd9624dc87ea5c9f91"
    }
  },
  {
    "oid": "67c80b73d6580b9850de9027353df06a1205dadf",
    "message": "GP-2023: post-review modifications (2)",
    "date": "2022-06-10T22:34:24Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/67c80b73d6580b9850de9027353df06a1205dadf",
    "details": {
      "sha": "62b92e66396972c512d4ef016ea178fb5a15be29",
      "filename": "Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/util/DefaultTraceChangeType.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/67c80b73d6580b9850de9027353df06a1205dadf/Ghidra%2FDebug%2FFramework-TraceModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ftrace%2Futil%2FDefaultTraceChangeType.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/67c80b73d6580b9850de9027353df06a1205dadf/Ghidra%2FDebug%2FFramework-TraceModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ftrace%2Futil%2FDefaultTraceChangeType.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FDebug%2FFramework-TraceModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ftrace%2Futil%2FDefaultTraceChangeType.java?ref=67c80b73d6580b9850de9027353df06a1205dadf",
      "patch": "@@ -22,7 +22,7 @@\n import ghidra.framework.model.DomainObjectChangeRecord;\n \n public class DefaultTraceChangeType<T, U> implements TraceChangeType<T, U> {\n-\tprivate static int nextType = 0x100; // Stay far away from manually-assigned types\n+\tprivate static int nextType = 0x3ACE0000; // Stay far away from manually-assigned types\n \n \tprivate static final Map<Integer, String> TYPE_NAMES = new HashMap<>();\n \tprivate static final Set<Field> FIELD_BACKLOG = new HashSet<>();",
      "parent_sha": "097421553cd3a844836064971d992ad29f60586a"
    }
  },
  {
    "oid": "85bf0f7658fc0668c8252d12e5fd98c92ac1e4cf",
    "message": "GT-2330 fix crushed png issue\n\nWas missing a line of code from the original .c file that moved the\ncurrent \"pointer\".",
    "date": "2019-12-06T19:24:03Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/85bf0f7658fc0668c8252d12e5fd98c92ac1e4cf",
    "details": {
      "sha": "752853ad969f4f94cc75c1a96aa99d6294171631",
      "filename": "Ghidra/Features/FileFormats/src/main/java/ghidra/file/formats/ios/png/CrushedPNGUtil.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/85bf0f7658fc0668c8252d12e5fd98c92ac1e4cf/Ghidra%2FFeatures%2FFileFormats%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffile%2Fformats%2Fios%2Fpng%2FCrushedPNGUtil.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/85bf0f7658fc0668c8252d12e5fd98c92ac1e4cf/Ghidra%2FFeatures%2FFileFormats%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffile%2Fformats%2Fios%2Fpng%2FCrushedPNGUtil.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FFileFormats%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffile%2Fformats%2Fios%2Fpng%2FCrushedPNGUtil.java?ref=85bf0f7658fc0668c8252d12e5fd98c92ac1e4cf",
      "patch": "@@ -1,20 +1,19 @@\n /* ###\n  * IP: Public Domain\n- * REVIEWED: YES\n  * NOTE: https://github.com/soffes/pngdefry\n  */\n package ghidra.file.formats.ios.png;\n \n-import ghidra.file.formats.zlib.ZLIB;\n-import ghidra.util.task.TaskMonitor;\n-\n import java.io.*;\n import java.nio.ByteBuffer;\n import java.util.*;\n import java.util.zip.*;\n \n import org.apache.commons.compress.utils.IOUtils;\n \n+import ghidra.file.formats.zlib.ZLIB;\n+import ghidra.util.task.TaskMonitor;\n+\n public class CrushedPNGUtil {\n \n \t/**\n@@ -30,7 +29,7 @@ public InputStream getUncrushedPNGBytes(ProcessedPNG png, TaskMonitor monitor) t\n \t\tboolean foundCgBI = false;\n \t\tIHDRChunk ihdrChunk = null;\n \t\tbyte[] repackArray = null;\n-\t\tList<PNGChunk> wantedChunks = new ArrayList<PNGChunk>();\n+\t\tList<PNGChunk> wantedChunks = new ArrayList<>();\n \t\tByteArrayOutputStream idatStream = new ByteArrayOutputStream();\n \n \t\tfor (PNGChunk chunk : png.getChunkArray()) {\n@@ -523,6 +522,7 @@ private void applyRowFilters(int width, int height, byte[] data, int offset) {\n \t\t\t\t\tbreak;\n \n \t\t\t}\n+\t\t\tsrcPtr += 4 * width;\n \t\t}\n \t}\n ",
      "parent_sha": "76bd653debad118d76d998e41471b3a39e3ec97a"
    }
  },
  {
    "oid": "b428631bf452c45d5b325ea4021027cb29dda6e5",
    "message": "Corrected certification header",
    "date": "2021-03-05T00:12:00Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/b428631bf452c45d5b325ea4021027cb29dda6e5",
    "details": {
      "sha": "0e6909f086c556355f25894f989362b72189d184",
      "filename": "Ghidra/Features/Base/src/main/java/org/apache/felix/framework/util/MultiReleaseContent.java",
      "status": "modified",
      "additions": 9,
      "deletions": 17,
      "changes": 26,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/b428631bf452c45d5b325ea4021027cb29dda6e5/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ffelix%2Fframework%2Futil%2FMultiReleaseContent.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/b428631bf452c45d5b325ea4021027cb29dda6e5/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ffelix%2Fframework%2Futil%2FMultiReleaseContent.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Ffelix%2Fframework%2Futil%2FMultiReleaseContent.java?ref=b428631bf452c45d5b325ea4021027cb29dda6e5",
      "patch": "@@ -1,16 +1,17 @@\n /* ###\n  * IP: Apache License 2.0\n- * \n- *  This is fix for a bug found in the Felix Framework:\n+ */\n+/***\n+ * This is fix for a bug found in the Felix Framework:\n  * \n  *   https://issues.apache.org/jira/browse/FELIX-6297\n  *\n  *  Because of its place on the classpath, this class overrides felix's.\n  *  \n  *  THIS FILE SHOULD BE REMOVED WHEN THE ISSUE IS ADDRESSED.\n  *  \n- */\n-/*\n+ *** \n+ *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n@@ -30,24 +31,15 @@\n  */\n package org.apache.felix.framework.util;\n \n-import org.apache.felix.framework.cache.Content;\n-import org.osgi.framework.Version;\n-\n import java.io.IOException;\n import java.io.InputStream;\n import java.net.URL;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Enumeration;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.LinkedHashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.jar.Attributes;\n+import java.util.*;\n import java.util.jar.Manifest;\n \n+import org.apache.felix.framework.cache.Content;\n+import org.osgi.framework.Version;\n+\n public class MultiReleaseContent implements Content\n {\n     private final Content m_content;",
      "parent_sha": "f883870d455226514af17c91c2c821d209822bb1"
    }
  },
  {
    "oid": "bf4a17b67dff93b6a2555ceb4eed9ba85d019e05",
    "message": "filter address space marshalling based on other space",
    "date": "2019-10-02T15:30:28Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/bf4a17b67dff93b6a2555ceb4eed9ba85d019e05",
    "details": {
      "sha": "5b19619fdcdb3b60c81acb67b63491c1ace2ddba",
      "filename": "Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/Varnode.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/bf4a17b67dff93b6a2555ceb4eed9ba85d019e05/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fpcode%2FVarnode.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/bf4a17b67dff93b6a2555ceb4eed9ba85d019e05/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fpcode%2FVarnode.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fpcode%2FVarnode.java?ref=bf4a17b67dff93b6a2555ceb4eed9ba85d019e05",
      "patch": "@@ -406,10 +406,7 @@ private static void buildVarnodePiece(StringBuilder buf, Address addr, int size)\n \tpublic static void appendSpaceOffset(StringBuilder buf, Address addr) {\n \t\tAddressSpace space = addr.getAddressSpace();\n \t\tif (space.isOverlaySpace()) {\n-\t\t\t//if the address is contained within the overlay space, stay in the overlay\n-\t\t\t//otherwise default to the underlying space\n-\t\t\tif (addr.compareTo(space.getMinAddress()) < 0 ||\n-\t\t\t\taddr.compareTo(space.getMaxAddress()) > 0) {\n+\t\t\tif (space.getType() != AddressSpace.TYPE_OTHER) {\n \t\t\t\tspace = space.getPhysicalSpace();\n \t\t\t\taddr = space.getAddress(addr.getOffset());\n \t\t\t}",
      "parent_sha": "621c14c7b2306cc662543ca2383e7121951159dd"
    }
  },
  {
    "oid": "d22d394ac9877ebfd2d2f369674c1d683fcb04be",
    "message": "GP-366 - Fixed issue in tables where focus was not given to the cell\neditor when users pressed F2 to edit",
    "date": "2023-01-06T00:02:58Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/d22d394ac9877ebfd2d2f369674c1d683fcb04be",
    "details": {
      "sha": "35335b9bddbaa9b6a502267b2b1c7701eabaaaf6",
      "filename": "Ghidra/Framework/Docking/src/main/java/docking/widgets/table/GTable.java",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/d22d394ac9877ebfd2d2f369674c1d683fcb04be/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Ftable%2FGTable.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/d22d394ac9877ebfd2d2f369674c1d683fcb04be/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Ftable%2FGTable.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Ftable%2FGTable.java?ref=d22d394ac9877ebfd2d2f369674c1d683fcb04be",
      "patch": "@@ -30,6 +30,7 @@\n import javax.swing.event.*;\n import javax.swing.plaf.TableUI;\n import javax.swing.table.*;\n+import javax.swing.text.JTextComponent;\n \n import docking.*;\n import docking.action.*;\n@@ -933,14 +934,17 @@ public final TableCellRenderer getHeaderRendererOverride(int col) {\n \t * displayed. However, the editor component will not have a focus. This method has been\n \t * overridden to request focus on the editor component.\n \t *\n-\t * @see javax.swing.JTable#editCellAt(int, int)\n+\t * @see javax.swing.JTable#editCellAt(int, int, EventObject)\n \t */\n \t@Override\n-\tpublic boolean editCellAt(int row, int column) {\n-\t\tboolean editAtCell = super.editCellAt(row, column);\n+\tpublic boolean editCellAt(int row, int column, EventObject e) {\n+\t\tboolean editAtCell = super.editCellAt(row, column, e);\n \t\tif (editAtCell) {\n \t\t\tComponent editor = getEditorComponent();\n-\t\t\teditor.requestFocus();\n+\t\t\teditor.requestFocusInWindow();\n+\t\t\tif (editor instanceof JTextComponent textComponent) {\n+\t\t\t\ttextComponent.selectAll();\n+\t\t\t}\n \t\t}\n \t\treturn editAtCell;\n \t}",
      "parent_sha": "5c4d7a22c87eb40b3fcd59c6d7919523d79fdc81"
    }
  },
  {
    "oid": "a36f17c78229931b00b48af9ca12b853f6b4e4e9",
    "message": "GP-1334 - Fixed exception due to the Patch action being incorrectly\nadded to the Function Graph context menu\n\nCloses #3288",
    "date": "2021-09-28T19:16:43Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/a36f17c78229931b00b48af9ca12b853f6b4e4e9",
    "details": {
      "sha": "7960b3b38198e88852399516f2a0abd09d369c8b",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/assembler/AssembleDockingAction.java",
      "status": "modified",
      "additions": 28,
      "deletions": 26,
      "changes": 54,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/a36f17c78229931b00b48af9ca12b853f6b4e4e9/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fassembler%2FAssembleDockingAction.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/a36f17c78229931b00b48af9ca12b853f6b4e4e9/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fassembler%2FAssembleDockingAction.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fassembler%2FAssembleDockingAction.java?ref=a36f17c78229931b00b48af9ca12b853f6b4e4e9",
      "patch": "@@ -67,7 +67,7 @@ public class AssembleDockingAction extends DockingAction {\n \tprivate FieldPanel codepane;\n \tprivate ListingPanel listpane;\n \tprivate Map<Language, CachingSwingWorker<Assembler>> cache =\n-\t\tLazyMap.lazyMap(new HashMap<>(), (Language lang) -> new AssemblerConstructorWorker(lang));\n+\t\tLazyMap.lazyMap(new HashMap<>(), language -> new AssemblerConstructorWorker(language));\n \n \tprivate Map<Language, Boolean> shownWarning = DefaultedMap.defaultedMap(new HashMap<>(), false);\n \n@@ -153,9 +153,6 @@ public void keyReleased(KeyEvent e) {\n \t\t}\n \t}\n \n-\t/**\n-\t * Create the action, allocating its resources and settings its default menu and key data\n-\t */\n \tpublic AssembleDockingAction(PluginTool tool, String name, String owner) {\n \t\tthis(name, owner);\n \t\t//this.tool = tool;\n@@ -189,20 +186,23 @@ public void dispose() {\n \n \tprotected void prepareLayout(ActionContext context) {\n \t\tComponentProvider prov = context.getComponentProvider();\n-\t\tif (cv != prov) {\n-\t\t\tif (cv != null) {\n-\t\t\t\tcodepane.setLayout(null);\n-\t\t\t\tfieldLayoutManager.removeLayoutListener(autoCompleteMover);\n-\t\t\t}\n-\n-\t\t\tcv = (CodeViewerProvider) prov;\n-\t\t\tlistpane = cv.getListingPanel();\n-\t\t\tcodepane = listpane.getFieldPanel();\n+\t\tif (cv == prov) {\n+\t\t\treturn;\n+\t\t}\n \n-\t\t\tfieldLayoutManager = new FieldPanelOverLayoutManager(codepane);\n-\t\t\tcodepane.setLayout(fieldLayoutManager);\n-\t\t\tfieldLayoutManager.addLayoutListener(autoCompleteMover);\n+\t\tif (cv != null) {\n+\t\t\tcodepane.setLayout(null);\n+\t\t\tfieldLayoutManager.removeLayoutListener(autoCompleteMover);\n \t\t}\n+\n+\t\t// we are only added to the popup for a ListingActionContext that has a CodeViewerProvider\n+\t\tcv = (CodeViewerProvider) prov;\n+\t\tlistpane = cv.getListingPanel();\n+\t\tcodepane = listpane.getFieldPanel();\n+\n+\t\tfieldLayoutManager = new FieldPanelOverLayoutManager(codepane);\n+\t\tcodepane.setLayout(fieldLayoutManager);\n+\t\tfieldLayoutManager.addLayoutListener(autoCompleteMover);\n \t}\n \n \t/**\n@@ -227,14 +227,14 @@ private AssembleDockingAction(String name, String owner) {\n \t * Retrieve the location in the code viewer's {@link FieldPanel} for the field at the given\n \t * address having the given header text\n \t * \n-\t * @param addr the address\n+\t * @param address the address\n \t * @param fieldName the name of the field\n \t * @return if found, the {@link FieldLocation}, otherwise {@code null}\n \t */\n-\tprotected FieldLocation findFieldLocation(Address addr, String fieldName) {\n-\t\tLayout layout = listpane.getLayout(addr);\n+\tprotected FieldLocation findFieldLocation(Address address, String fieldName) {\n+\t\tLayout layout = listpane.getLayout(address);\n \t\tListingModelAdapter adapter = (ListingModelAdapter) codepane.getLayoutModel();\n-\t\tBigInteger index = adapter.getAddressIndexMap().getIndex(addr);\n+\t\tBigInteger index = adapter.getAddressIndexMap().getIndex(address);\n \t\tint count = layout.getNumFields();\n \t\tfor (int i = 0; i < count; i++) {\n \t\t\tListingField field = (ListingField) layout.getField(i);\n@@ -368,18 +368,20 @@ else if (instr.contains(\" \")) {\n \t@Override\n \tpublic boolean isAddToPopup(ActionContext context) {\n \n-\t\t// currently only works on a listing\n+\t\t// currently only works on a listing that has a CodeViewerProvider\n \t\tif (!(context instanceof ListingActionContext)) {\n \t\t\treturn false;\n \t\t}\n \n \t\tListingActionContext lac = (ListingActionContext) context;\n \t\tComponentProvider cp = lac.getComponentProvider();\n-\t\tif (cp instanceof CodeViewerProvider) {\n-\t\t\tCodeViewerProvider cv = (CodeViewerProvider) cp;\n-\t\t\tif (cv.isReadOnly()) {\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\tif (!(cp instanceof CodeViewerProvider)) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tCodeViewerProvider codeViewer = (CodeViewerProvider) cp;\n+\t\tif (codeViewer.isReadOnly()) {\n+\t\t\treturn false;\n \t\t}\n \n \t\tProgram program = lac.getProgram();",
      "parent_sha": "156ce7ef8045b39d364e49cddcf2be69b2197075"
    }
  },
  {
    "oid": "1cc1751ad54ef8ce066fea0ca693e8932ea69199",
    "message": "x86: fix ELF R_X86_64_GOT32/R_X86_64_PLT32 reloc\n\nR_X86_64_GOT32 and R_X86_64_PLT32 are 32-bit entries but the ELF\nRelocationHandler would rewrite longs (64-bit), overwriting the\nfollowing bytes with the 64-bit sign-extension thus overwriting\nthe next instructions.\n\nRewrite int (32-bit) instead and properly relocate entries using\naddend and offset fields as defined in AMD64 ABI.\n\nSigned-off-by: Andy Roulin <andy.roulin@gmail.com>",
    "date": "2019-08-15T15:09:14Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/1cc1751ad54ef8ce066fea0ca693e8932ea69199",
    "details": {
      "sha": "4860898eda5d5bb5dd3cc642467fb52d8eef57e5",
      "filename": "Ghidra/Processors/x86/src/main/java/ghidra/app/util/bin/format/elf/relocation/X86_64_ElfRelocationHandler.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/1cc1751ad54ef8ce066fea0ca693e8932ea69199/Ghidra%2FProcessors%2Fx86%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Felf%2Frelocation%2FX86_64_ElfRelocationHandler.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/1cc1751ad54ef8ce066fea0ca693e8932ea69199/Ghidra%2FProcessors%2Fx86%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Felf%2Frelocation%2FX86_64_ElfRelocationHandler.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FProcessors%2Fx86%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Felf%2Frelocation%2FX86_64_ElfRelocationHandler.java?ref=1cc1751ad54ef8ce066fea0ca693e8932ea69199",
      "patch": "@@ -89,11 +89,13 @@ public void relocate(ElfRelocationContext elfRelocationContext, ElfRelocation re\n \t\t\t\tint ivalue = (int) (symbolValue & 0xffffffff);\n \t\t\t\tmemory.setInt(relocationAddress, ivalue);\n \t\t\t\tbreak;\n-\t\t\t// we punt on these because they're not linked yet!\n \t\t\tcase X86_64_ElfRelocationConstants.R_X86_64_GOT32:\n+\t\t\t\tvalue = symbolValue + addend;\n+\t\t\t\tmemory.setInt(relocationAddress, (int) value);\n+\t\t\t\tbreak;\n \t\t\tcase X86_64_ElfRelocationConstants.R_X86_64_PLT32:\n-\t\t\t\tvalue = symbolValue;\n-\t\t\t\tmemory.setLong(relocationAddress, value);\n+\t\t\t\tvalue = symbolValue + addend - offset;\n+\t\t\t\tmemory.setInt(relocationAddress, (int) value);\n \t\t\t\tbreak;\n \t\t\tcase X86_64_ElfRelocationConstants.R_X86_64_GLOB_DAT:\n \t\t\tcase X86_64_ElfRelocationConstants.R_X86_64_JUMP_SLOT:",
      "parent_sha": "a973789cd1b56f2dcaca40607e252ffaf4f07756"
    }
  },
  {
    "oid": "bfb5553fc00cd9e7eebf85bb22d72eacba9cc7c4",
    "message": "RecoverClassesFromRTTIScript.java | Fix misspelling of the word\n'analyzer' (Closes #7464)",
    "date": "2025-02-10T12:08:06Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/bfb5553fc00cd9e7eebf85bb22d72eacba9cc7c4",
    "details": {
      "sha": "fd0f4aa9e67d5b8d7e3ba3d21d32f742d412a86c",
      "filename": "Ghidra/Features/Decompiler/ghidra_scripts/RecoverClassesFromRTTIScript.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/bfb5553fc00cd9e7eebf85bb22d72eacba9cc7c4/Ghidra%2FFeatures%2FDecompiler%2Fghidra_scripts%2FRecoverClassesFromRTTIScript.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/bfb5553fc00cd9e7eebf85bb22d72eacba9cc7c4/Ghidra%2FFeatures%2FDecompiler%2Fghidra_scripts%2FRecoverClassesFromRTTIScript.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FDecompiler%2Fghidra_scripts%2FRecoverClassesFromRTTIScript.java?ref=bfb5553fc00cd9e7eebf85bb22d72eacba9cc7c4",
      "patch": "@@ -381,7 +381,7 @@ public String validate() throws Exception {\n \n \t\tif (!GhidraProgramUtilities.isAnalyzed(currentProgram)) {\n \t\t\treturn (\"The program has not been analyzed. Please run auto-analysis and make sure \" +\n-\t\t\t\t\"the RTTI analzer is one of the analyzers enabled.\");\n+\t\t\t\t\"the RTTI analyzer is one of the analyzers enabled.\");\n \t\t}\n \n \t\tif (isRttiAnalyzed() && !hasRtti()) {",
      "parent_sha": "69439da80a0eb6183f5f5c090631cfe25bece790"
    }
  },
  {
    "oid": "03b7f8c1ccac978527577b3089538d8913aa2b5b",
    "message": "GP-1246: fix for delay slot",
    "date": "2021-08-25T17:15:51Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/03b7f8c1ccac978527577b3089538d8913aa2b5b",
    "details": {
      "sha": "1d04e7af83535ece7d383f385180566f6c2ff38b",
      "filename": "Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/database/listing/DBTraceInstructionsView.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/03b7f8c1ccac978527577b3089538d8913aa2b5b/Ghidra%2FDebug%2FFramework-TraceModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ftrace%2Fdatabase%2Flisting%2FDBTraceInstructionsView.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/03b7f8c1ccac978527577b3089538d8913aa2b5b/Ghidra%2FDebug%2FFramework-TraceModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ftrace%2Fdatabase%2Flisting%2FDBTraceInstructionsView.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FDebug%2FFramework-TraceModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ftrace%2Fdatabase%2Flisting%2FDBTraceInstructionsView.java?ref=03b7f8c1ccac978527577b3089538d8913aa2b5b",
      "patch": "@@ -139,10 +139,8 @@ protected Instruction doAddInstructions(Range<Long> lifespan, Iterator<Instructi\n \t\t\t\t\t\tlastInstruction = replaceIfNotNull(lastInstruction,\n \t\t\t\t\t\t\tdoAddInstructions(lifespan, delayed.iterator(), true));\n \t\t\t\t\t}\n-\t\t\t\t\telse {\n-\t\t\t\t\t\tlastInstruction =\n-\t\t\t\t\t\t\tdoCreateInstruction(lifespan, startAddress, prototype, protoInstr);\n-\t\t\t\t\t}\n+\t\t\t\t\tlastInstruction =\n+\t\t\t\t\t\tdoCreateInstruction(lifespan, startAddress, prototype, protoInstr);\n \t\t\t\t}\n \t\t\t\tif (errorAddress != null && conflictCodeUnit == null &&\n \t\t\t\t\terrorAddress.compareTo(startAddress) <= 0) {",
      "parent_sha": "dd277a91fe385f507b8cbe1cc9da443c943573d2"
    }
  },
  {
    "oid": "245fc13f413b445ea9249e70729c6130cd79bc65",
    "message": "GP-4360 Assemble full byte array",
    "date": "2024-02-23T17:26:10Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/245fc13f413b445ea9249e70729c6130cd79bc65",
    "details": {
      "sha": "a5d47ac964be9a0c31c1567f112824dc9d7974a9",
      "filename": "Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/PackedDecode.java",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/245fc13f413b445ea9249e70729c6130cd79bc65/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fpcode%2FPackedDecode.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/245fc13f413b445ea9249e70729c6130cd79bc65/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fpcode%2FPackedDecode.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fpcode%2FPackedDecode.java?ref=245fc13f413b445ea9249e70729c6130cd79bc65",
      "patch": "@@ -460,23 +460,22 @@ public String readString() throws DecoderException {\n \t\t\tcurPos.advancePosition(length);\n \t\t\treturn res;\n \t\t}\n-\t\tStringBuilder buf = new StringBuilder();\n-\t\tString res = new String(curPos.array, curPos.current, curLen);\n-\t\tbuf.append(res);\n+\t\tint size = curLen;\n+\t\tbyte[] buf = new byte[length];\n+\t\tSystem.arraycopy(curPos.array, curPos.current, buf, 0, curLen);\n \t\tlength -= curLen;\n \t\tcurPos.advancePosition(curLen);\n \t\twhile (length > 0) {\n \t\t\tcurLen = curPos.array.length - curPos.current;\n \t\t\tif (curLen > length) {\n \t\t\t\tcurLen = length;\n \t\t\t}\n-\t\t\tres = new String(curPos.array, curPos.current, curLen);\n-\t\t\tbuf.append(res);\n+\t\t\tSystem.arraycopy(curPos.array, curPos.current, buf, size, curLen);\n+\t\t\tsize += curLen;\n \t\t\tlength -= curLen;\n \t\t\tcurPos.advancePosition(curLen);\n \t\t}\n-\t\tres = buf.toString();\n-\t\treturn res;\n+\t\treturn new String(buf, 0, size);\n \t}\n \n \t@Override",
      "parent_sha": "7c242e31bb5d2039f679f63e37dbd7d6dbf12739"
    }
  },
  {
    "oid": "1f448e8ee6e437150ada9b7a4c4e4bd824ffbfd1",
    "message": "plugintool: typo: backgound -> background",
    "date": "2019-04-14T22:12:08Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/1f448e8ee6e437150ada9b7a4c4e4bd824ffbfd1",
    "details": {
      "sha": "f8e11d24c238c64561c13ab432bd09772995ecf9",
      "filename": "Ghidra/Framework/Project/src/main/java/ghidra/framework/plugintool/PluginTool.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/1f448e8ee6e437150ada9b7a4c4e4bd824ffbfd1/Ghidra%2FFramework%2FProject%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fframework%2Fplugintool%2FPluginTool.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/1f448e8ee6e437150ada9b7a4c4e4bd824ffbfd1/Ghidra%2FFramework%2FProject%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fframework%2Fplugintool%2FPluginTool.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FProject%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fframework%2Fplugintool%2FPluginTool.java?ref=1f448e8ee6e437150ada9b7a4c4e4bd824ffbfd1",
      "patch": "@@ -1381,7 +1381,7 @@ public boolean canCloseDomainObject(DomainObject dObj) {\n \t\tif (taskMgr.hasTasksForDomainObject(dObj)) {\n \t\t\tMsg.showInfo(getClass(), getToolFrame(), \"Close \" + dObj.getName() + \" Failed\",\n \t\t\t\t\"The tool is currently working in the background on \" + dObj.getName() +\n-\t\t\t\t\t\".\\nPlease stop the backgound processing first.\");\n+\t\t\t\t\t\".\\nPlease stop the background processing first.\");\n \n \t\t\treturn false;\n \t\t}",
      "parent_sha": "49c2010b63b56c8f20845f3970fedd95d003b1e9"
    }
  },
  {
    "oid": "0e02978472f58862bf5d8de08a7fe3bbb0a8b8e5",
    "message": "GP-1429 - fixed bug that caused field to get renamed when not choosing a\nnew type\n\nCloses #3483",
    "date": "2021-10-25T20:49:51Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/0e02978472f58862bf5d8de08a7fe3bbb0a8b8e5",
    "details": {
      "sha": "4ebce09bde387c054a99974bdaca0d7276df6e48",
      "filename": "Ghidra/Features/Decompiler/src/main/java/ghidra/app/plugin/core/decompile/actions/RetypeFieldAction.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/0e02978472f58862bf5d8de08a7fe3bbb0a8b8e5/Ghidra%2FFeatures%2FDecompiler%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdecompile%2Factions%2FRetypeFieldAction.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/0e02978472f58862bf5d8de08a7fe3bbb0a8b8e5/Ghidra%2FFeatures%2FDecompiler%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdecompile%2Factions%2FRetypeFieldAction.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FDecompiler%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdecompile%2Factions%2FRetypeFieldAction.java?ref=0e02978472f58862bf5d8de08a7fe3bbb0a8b8e5",
      "patch": "@@ -102,7 +102,7 @@ protected void decompilerActionPerformed(DecompilerActionContext context) {\n \t\t}\n \n \t\tDataType dataType = chooseDataType(tool, program, originalDataType);\n-\t\tif (dataType == null) {\n+\t\tif (dataType == null || dataType.isEquivalent(originalDataType)) {\n \t\t\treturn; // cancelled\n \t\t}\n ",
      "parent_sha": "5e5b0790ad241550d572d4c58df1dc7f50aba280"
    }
  },
  {
    "oid": "e4ba4d62d0af31082a2b12a254a0d74f3fb4e4bb",
    "message": "Fix 64 bits Ext4 inode table offset calculation.",
    "date": "2022-11-21T06:37:16Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/e4ba4d62d0af31082a2b12a254a0d74f3fb4e4bb",
    "details": {
      "sha": "841a92e6219e6b1c0f2c7161b4df916612d6c207",
      "filename": "Ghidra/Features/FileFormats/src/main/java/ghidra/file/formats/ext4/Ext4Analyzer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/e4ba4d62d0af31082a2b12a254a0d74f3fb4e4bb/Ghidra%2FFeatures%2FFileFormats%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffile%2Fformats%2Fext4%2FExt4Analyzer.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/e4ba4d62d0af31082a2b12a254a0d74f3fb4e4bb/Ghidra%2FFeatures%2FFileFormats%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffile%2Fformats%2Fext4%2FExt4Analyzer.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FFileFormats%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffile%2Fformats%2Fext4%2FExt4Analyzer.java?ref=e4ba4d62d0af31082a2b12a254a0d74f3fb4e4bb",
      "patch": "@@ -130,7 +130,7 @@ private void createInodeTables(Program program, BinaryReader reader, Ext4SuperBl\n \t\t\tmonitor.checkCanceled();\n \t\t\tlong inodeTableBlockOffset = groupDescriptors[i].getBg_inode_table_lo() & 0xffffffffL;\n \t\t\tif( is64Bit ) {\n-\t\t\t\tinodeTableBlockOffset = (groupDescriptors[i].getBg_inode_table_hi() << 32) | inodeTableBlockOffset;\n+\t\t\t\tinodeTableBlockOffset = (((long) groupDescriptors[i].getBg_inode_table_hi()) << 32) | inodeTableBlockOffset;\n \t\t\t}\n \t\t\tlong offset = inodeTableBlockOffset * blockSize;\n \t\t\treader.setPointerIndex(offset);",
      "parent_sha": "75ddd08bbd0fe87451f49896388f7cdb1218039f"
    }
  },
  {
    "oid": "da3c2f8536db47a9a6d3ef500a1112f78cb96179",
    "message": "Fixed issues with dyld_shared_cache parsing\n\nFirst issue fixed was a simple null deref. The other issue is the\ndylib's load commands in the dyld_shared_cache should be absolute from\nzero not relative from the start of the dylib's mach header. When done\nincorrectly this causes a read past the end of file.",
    "date": "2020-12-29T17:06:56Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/da3c2f8536db47a9a6d3ef500a1112f78cb96179",
    "details": {
      "sha": "3b2f9de7d54b538a1e525a3e7c7f9d0055b62982",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/DyldCacheProgramBuilder.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/da3c2f8536db47a9a6d3ef500a1112f78cb96179/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fopinion%2FDyldCacheProgramBuilder.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/da3c2f8536db47a9a6d3ef500a1112f78cb96179/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fopinion%2FDyldCacheProgramBuilder.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fopinion%2FDyldCacheProgramBuilder.java?ref=da3c2f8536db47a9a6d3ef500a1112f78cb96179",
      "patch": "@@ -241,8 +241,7 @@ private void fixPageChains() throws MemoryAccessException, CancelledException {\n \t\t// locate slide Info\n \t\tDyldCacheSlideInfoCommon slideInfo = dyldCacheHeader.getSlideInfo();\n \t\tif (slideInfo == null || !(slideInfo instanceof DyldCacheSlideInfo2)) {\n-\t\t\tlog.appendMsg(\n-\t\t\t\t\"Can't handle version \" + slideInfo.getVersion() + \" slide info, only version 2\");\n+\t\t\tlog.appendMsg(\"No compatible slide info version\");\n \t\t\treturn;\n \t\t}\n \t\tDyldCacheSlideInfo2 slideInfo2 = (DyldCacheSlideInfo2) slideInfo;\n@@ -448,7 +447,7 @@ public DyldCacheMachoInfo(ByteProvider provider, long offset, Address headerAddr\n \t\t\t\tString path) throws Exception {\n \t\t\tthis.headerAddr = headerAddr;\n \t\t\tthis.header = MachHeader.createMachHeader(MessageLogContinuesFactory.create(log),\n-\t\t\t\tprovider, offset);\n+\t\t\t\tprovider, offset, false);\n \t\t\tthis.header.parse();\n \t\t\tthis.path = path;\n \t\t\tthis.name = new File(path).getName();",
      "parent_sha": "e51639b095a1c01ad1fc973d3ea469690370c9e3"
    }
  },
  {
    "oid": "34954d6df9f81d8110bcfd8d78847805f172b3fe",
    "message": "GP-4689 correct decompiler processes setup thread interrupt issue",
    "date": "2024-06-12T19:55:39Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/34954d6df9f81d8110bcfd8d78847805f172b3fe",
    "details": {
      "sha": "1cce7d7e000f4e2e288b3c70fa82921e88c3a52a",
      "filename": "Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/DecompileProcess.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/34954d6df9f81d8110bcfd8d78847805f172b3fe/Ghidra%2FFeatures%2FDecompiler%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fdecompiler%2FDecompileProcess.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/34954d6df9f81d8110bcfd8d78847805f172b3fe/Ghidra%2FFeatures%2FDecompiler%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fdecompiler%2FDecompileProcess.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FDecompiler%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fdecompiler%2FDecompileProcess.java?ref=34954d6df9f81d8110bcfd8d78847805f172b3fe",
      "patch": "@@ -147,10 +147,16 @@ private void setup() throws IOException {\n \t\tIOException exc = null;\n \t\tString err = \"\";\n \t\tstatusGood = false;\n+\t\t\n \t\ttry {\n \t\t\tnativeProcess = runtime.exec(exepath);\n \t\t\t// Give process time to load and report possible error\n-\t\t\tnativeProcess.waitFor(200, TimeUnit.MILLISECONDS);\n+\t\t\ttry {\n+\t\t\t\tnativeProcess.waitFor(200, TimeUnit.MILLISECONDS);\n+\t\t\t}\n+\t\t\tcatch (InterruptedException e) {\n+\t\t\t\t// ignore\n+\t\t\t}\n \t\t\tnativeIn = nativeProcess.getInputStream();\n \t\t\tnativeOut = nativeProcess.getOutputStream();\n \t\t\tstatusGood = nativeProcess.isAlive();\n@@ -163,9 +169,6 @@ private void setup() throws IOException {\n \t\tcatch (IOException e) {\n \t\t\texc = e;\n \t\t}\n-\t\tcatch (InterruptedException e) {\n-\t\t\t// ignore\n-\t\t}\n \t\tfinally {\n \t\t\tif (!statusGood) {\n \t\t\t\tdisposestate = DisposeState.DISPOSED_ON_STARTUP_FAILURE;",
      "parent_sha": "2a03e142bcf3c3d12df937dda0edce858b96788f"
    }
  },
  {
    "oid": "2a96958fd3913d7f771e55cadcba8e6aebcf2e45",
    "message": "Fixed a few bugs/tests related to new symbol schema",
    "date": "2021-09-29T15:44:41Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/2a96958fd3913d7f771e55cadcba8e6aebcf2e45",
    "details": {
      "sha": "dd2214cc5035b105ae69f6fbbecb5ba436140428",
      "filename": "Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/symbol/SymbolManager.java",
      "status": "modified",
      "additions": 24,
      "deletions": 1,
      "changes": 25,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/2a96958fd3913d7f771e55cadcba8e6aebcf2e45/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fdatabase%2Fsymbol%2FSymbolManager.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/2a96958fd3913d7f771e55cadcba8e6aebcf2e45/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fdatabase%2Fsymbol%2FSymbolManager.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fdatabase%2Fsymbol%2FSymbolManager.java?ref=2a96958fd3913d7f771e55cadcba8e6aebcf2e45",
      "patch": "@@ -1033,11 +1033,22 @@ private List<Symbol> searchNamespaceForSymbols(String name, Namespace namespace)\n \t\treturn list;\n \t}\n \n+\tprivate Symbol searchNamespaceForFirstSymbol(String name, Namespace namespace,\n+\t\t\tPredicate<Symbol> test) {\n+\t\tfor (Symbol symbol : getSymbols(namespace)) {\n+\t\t\tif (name.equals(symbol.getName()) && test.test(symbol)) {\n+\t\t\t\treturn symbol;\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n \tprivate Symbol getSymbolForDynamicName(String name) {\n \t\tAddress address = SymbolUtilities.parseDynamicName(addrMap.getAddressFactory(), name);\n \t\tif (address != null) {\n \t\t\tSymbol primarySymbol = getPrimarySymbol(address);\n-\t\t\tif (primarySymbol != null && primarySymbol.getSource() == SourceType.DEFAULT) {\n+\t\t\tif (primarySymbol != null && primarySymbol.getSource() == SourceType.DEFAULT &&\n+\t\t\t\tname.equals(primarySymbol.getName())) {\n \t\t\t\treturn primarySymbol;\n \t\t\t}\n \t\t}\n@@ -1050,6 +1061,18 @@ private Symbol getFirstSymbol(String name, Namespace namespace, Predicate<Symbol\n \t\tif (namespace == null) {\n \t\t\tnamespace = namespaceMgr.getGlobalNamespace();\n \t\t}\n+\n+\t\t// if name is possible default parameter or local variable name, must do brute force search\n+\t\tif (namespace instanceof Function &&\n+\t\t\tSymbolUtilities.isPossibleDefaultLocalOrParamName(name)) {\n+\t\t\treturn searchNamespaceForFirstSymbol(name, namespace, test);\n+\t\t}\n+\n+\t\t// if the name is a possible default external name, do brute force search\n+\t\tif (namespace.isExternal() && SymbolUtilities.isPossibleDefaultExternalName(name)) {\n+\t\t\treturn searchNamespaceForFirstSymbol(name, namespace, test);\n+\t\t}\n+\n \t\tlock.acquire();\n \t\ttry {\n \t\t\tRecordIterator it = adapter.getSymbolsByNameAndNamespace(name, namespace.getID());",
      "parent_sha": "156ce7ef8045b39d364e49cddcf2be69b2197075"
    }
  },
  {
    "oid": "9e9073092b49968a10764c3fe16a82c6f7dffa2a",
    "message": "GP-3852: Minor fixes",
    "date": "2023-09-21T14:56:11Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/9e9073092b49968a10764c3fe16a82c6f7dffa2a",
    "details": {
      "sha": "5d9be3a9dca6f220a2a1451b0b8b88d0f7d30484",
      "filename": "Ghidra/Framework/Project/src/main/java/ghidra/framework/project/extensions/ExtensionTableProvider.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/9e9073092b49968a10764c3fe16a82c6f7dffa2a/Ghidra%2FFramework%2FProject%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fframework%2Fproject%2Fextensions%2FExtensionTableProvider.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/9e9073092b49968a10764c3fe16a82c6f7dffa2a/Ghidra%2FFramework%2FProject%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fframework%2Fproject%2Fextensions%2FExtensionTableProvider.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FProject%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fframework%2Fproject%2Fextensions%2FExtensionTableProvider.java?ref=9e9073092b49968a10764c3fe16a82c6f7dffa2a",
      "patch": "@@ -170,11 +170,9 @@ private boolean installExtensions(List<File> files) {\n \t\t\t// A sanity check for users that try to install an extension from a source folder\n \t\t\t// instead of a fully built extension.\n \t\t\tif (new File(file, \"build.gradle\").isFile()) {\n-\t\t\t\tMsg.showWarn(this, null, \"Invalid Extension\", \"The selected extension folder \" +\n+\t\t\t\tMsg.showWarn(this, null, \"Invalid Extension\", \"The selected extension \" +\n \t\t\t\t\t\"contains a 'build.gradle' file.\\nGhidra does not support installing \" +\n-\t\t\t\t\t\"extensions in source form.\\nPlease build the extension and install its zip \" +\n-\t\t\t\t\t\"file.\");\n-\t\t\t\tdidInstall = false;\n+\t\t\t\t\t\"extensions in source form.\\nPlease build the extension and try again.\");\n \t\t\t\tcontinue;\n \t\t\t}\n ",
      "parent_sha": "b6390531783e6ce9076220fc9af4774b78ba8ad5"
    }
  },
  {
    "oid": "165b044788df854744dd7c625244c4ea3420c9ed",
    "message": "Symbol environment may start with uppercase SRV\n\nparseSymbolEnv shouldn't reject symbol environment variables, starting\nwith uppercase \"SRV\", like\nSRV*C:\\symbols*https://msdl.microsoft.com/download/symbols",
    "date": "2019-04-07T14:41:15Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/165b044788df854744dd7c625244c4ea3420c9ed",
    "details": {
      "sha": "ff7f3b5d1f42236a85af8de43b219fd9ead9e71b",
      "filename": "Ghidra/Features/PDB/src/main/java/pdb/PdbSymbolServerPlugin.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/165b044788df854744dd7c625244c4ea3420c9ed/Ghidra%2FFeatures%2FPDB%2Fsrc%2Fmain%2Fjava%2Fpdb%2FPdbSymbolServerPlugin.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/165b044788df854744dd7c625244c4ea3420c9ed/Ghidra%2FFeatures%2FPDB%2Fsrc%2Fmain%2Fjava%2Fpdb%2FPdbSymbolServerPlugin.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FPDB%2Fsrc%2Fmain%2Fjava%2Fpdb%2FPdbSymbolServerPlugin.java?ref=165b044788df854744dd7c625244c4ea3420c9ed",
      "patch": "@@ -257,7 +257,7 @@ private void parseSymbolEnv(String envString) {\n \t\t//    srv*[local cache]*[private symbol server]*https://msdl.microsoft.com/download/symbols\n \t\t//    srv*c:\\symbols*https://msdl.microsoft.com/download/symbols\n \n-\t\tif (!envString.startsWith(\"srv\")) {\n+\t\tif (!envString.startsWith(\"srv\") && !envString.startsWith(\"SRV\")) {\n \t\t\treturn;\n \t\t}\n ",
      "parent_sha": "49c2010b63b56c8f20845f3970fedd95d003b1e9"
    }
  },
  {
    "oid": "6702a1401b5f60729511ad0cd32bfb0f4148e4ac",
    "message": "GP-795 Fix ISO9660 probe to not cause needless exceptions",
    "date": "2021-03-22T23:18:37Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/6702a1401b5f60729511ad0cd32bfb0f4148e4ac",
    "details": {
      "sha": "4978ba06b99d8f4547e3099de5d91a45bc6e2d42",
      "filename": "Ghidra/Features/FileFormats/src/main/java/ghidra/file/formats/iso9660/ISO9660FileSystem.java",
      "status": "modified",
      "additions": 19,
      "deletions": 46,
      "changes": 65,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/6702a1401b5f60729511ad0cd32bfb0f4148e4ac/Ghidra%2FFeatures%2FFileFormats%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffile%2Fformats%2Fiso9660%2FISO9660FileSystem.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/6702a1401b5f60729511ad0cd32bfb0f4148e4ac/Ghidra%2FFeatures%2FFileFormats%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffile%2Fformats%2Fiso9660%2FISO9660FileSystem.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FFileFormats%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffile%2Fformats%2Fiso9660%2FISO9660FileSystem.java?ref=6702a1401b5f60729511ad0cd32bfb0f4148e4ac",
      "patch": "@@ -15,9 +15,10 @@\n  */\n package ghidra.file.formats.iso9660;\n \n+import java.util.*;\n+\n import java.io.IOException;\n import java.io.InputStream;\n-import java.util.*;\n \n import ghidra.app.util.bin.BinaryReader;\n import ghidra.app.util.bin.ByteProvider;\n@@ -32,14 +33,10 @@\n public class ISO9660FileSystem extends GFileSystemBase {\n \n \t//Possible locations for magic number\n-\tprivate static final long SIGNATURE_ADDRESS_0x8001 = 0x8001;\n-\tprivate static final long SIGNATURE_ADDRESS_0x8801 = 0x8801;\n-\tprivate static final long SIGNATURE_ADDRESS_0x9001 = 0x9001;\n+\tprivate static final long[] SIGNATURE_PROBE_OFFSETS = new long[] { 0x8000L, 0x8800L, 0x9000L };\n \n-\t//Location which the magic number was found\n-\tprivate boolean foundAt0x8001 = false;\n-\tprivate boolean foundAt0x8801 = false;\n-\tprivate boolean foundAt0x9001 = false;\n+\t//Location where the magic number was found\n+\tprivate long signatureOffset;\n \n \t//Set true if the root level directory has been processed\n \tprivate boolean lookedAtRoot = false;\n@@ -57,53 +54,29 @@ public ISO9660FileSystem(String fileSystemName, ByteProvider provider) {\n \n \t@Override\n \tpublic boolean isValid(TaskMonitor monitor) throws IOException {\n-\t\tint magicLen = ISO9660Constants.MAGIC_BYTES.length;\n-\t\tbyte[] signatureArray = new byte[magicLen];\n-\n-\t\t//Check first possible signature location\n-\t\tsignatureArray = provider.readBytes(SIGNATURE_ADDRESS_0x8001, magicLen);\n-\t\tif (Arrays.equals(signatureArray, ISO9660Constants.MAGIC_BYTES)) {\n-\t\t\t//Where to start the reader during mark up\n-\t\t\tfoundAt0x8001 = true;\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\t//Check second possible signature location\n-\t\tsignatureArray = provider.readBytes(SIGNATURE_ADDRESS_0x8801, magicLen);\n-\t\tif (Arrays.equals(signatureArray, ISO9660Constants.MAGIC_BYTES)) {\n-\t\t\t//Where to start the reader during mark up\n-\t\t\tfoundAt0x8801 = true;\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\t//Check third possible signature location\n-\t\tsignatureArray = provider.readBytes(SIGNATURE_ADDRESS_0x9001, magicLen);\n-\t\tif (Arrays.equals(signatureArray, ISO9660Constants.MAGIC_BYTES)) {\n-\t\t\t//Where to start the reader during mark up\n-\t\t\tfoundAt0x9001 = true;\n-\t\t\treturn true;\n+\t\tfor (long probeOffset : SIGNATURE_PROBE_OFFSETS) {\n+\t\t\tif (isMagicSignatureAt(probeOffset + 1)) {\n+\t\t\t\t// signature is at +1 offset from the start of the volume offset\n+\t\t\t\tsignatureOffset = probeOffset;\n+\t\t\t\treturn true;\n+\t\t\t}\n \t\t}\n-\n \t\treturn false;\n \t}\n \n+\tprivate boolean isMagicSignatureAt(long offset) throws IOException {\n+\t\tint magicLen = ISO9660Constants.MAGIC_BYTES.length;\n+\t\tlong providerLen = provider.length();\n+\t\treturn (providerLen > offset + magicLen) &&\n+\t\t\tArrays.equals(provider.readBytes(offset, magicLen), ISO9660Constants.MAGIC_BYTES);\n+\t}\n+\n \t@Override\n \tpublic void open(TaskMonitor monitor) throws IOException, CryptoException, CancelledException {\n \t\tBinaryReader reader = new BinaryReader(provider, true);\n \n \t\t//Set start of pointer index of beginning of primary volume descriptor\n-\t\tif (foundAt0x8001) {\n-\t\t\treader.setPointerIndex(0x8000);\n-\t\t}\n-\t\telse if (foundAt0x8801) {\n-\t\t\treader.setPointerIndex(0x8800);\n-\t\t}\n-\t\telse if (foundAt0x9001) {\n-\t\t\treader.setPointerIndex(0x9000);\n-\t\t}\n-\t\telse {\n-\t\t\tthrow new IOException(\"Cannot find index of ISO9660 Header\");\n-\t\t}\n+\t\treader.setPointerIndex(signatureOffset);\n \n \t\theader = new ISO9660Header(reader);\n \t\tISO9660VolumeDescriptor pvd = header.getPrimaryVolumeDescriptor();",
      "parent_sha": "9a27907bf954855d53de012d84cddbb002968961"
    }
  },
  {
    "oid": "f7c26a3e20e96bcafc26942da7339461da791e59",
    "message": "use Msg instead of stderr",
    "date": "2020-07-28T20:56:07Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/f7c26a3e20e96bcafc26942da7339461da791e59",
    "details": {
      "sha": "e3c8ac917ad9325f2a1098eb52342cdaae3822fb",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/script/JavaScriptProvider.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/f7c26a3e20e96bcafc26942da7339461da791e59/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fscript%2FJavaScriptProvider.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/f7c26a3e20e96bcafc26942da7339461da791e59/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fscript%2FJavaScriptProvider.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fscript%2FJavaScriptProvider.java?ref=f7c26a3e20e96bcafc26942da7339461da791e59",
      "patch": "@@ -133,7 +133,7 @@ public GhidraScript getScriptInstance(ResourceFile sourceFile, PrintWriter write\n \t\ttry {\n \t\t\tBundle b = bundle_host.installExplodedPath(bi.binDir);\n \t\t\tbi.bundleLoc = b.getLocation();\n-\t\t\tSystem.err.printf(\"new bundle loc is %s\\n\", bi.bundleLoc);\n+\t\t\tMsg.out(String.format(\"new bundle loc is %s\\n\", bi.bundleLoc));\n \t\t\tb.start();\n \t\t\tif (!bundle_host.waitForBundleStart(bi.bundleLoc)) {\n \t\t\t\tMsg.error(this, \"starting bundle\");",
      "parent_sha": "d5d75fac9f73076811bc76a9d79f0d5604eac59b"
    }
  },
  {
    "oid": "e12d02eeb2d2725c30fc1b24f0db69aa29a61c29",
    "message": "GP-1086 - Fix PDB constructor signature bug",
    "date": "2021-06-29T18:12:55Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/e12d02eeb2d2725c30fc1b24f0db69aa29a61c29",
    "details": {
      "sha": "fca5de8702dff0366aa4701154002803a4723785",
      "filename": "Ghidra/Features/PDB/src/main/java/ghidra/app/util/pdb/pdbapplicator/AbstractFunctionTypeApplier.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/e12d02eeb2d2725c30fc1b24f0db69aa29a61c29/Ghidra%2FFeatures%2FPDB%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fpdb%2Fpdbapplicator%2FAbstractFunctionTypeApplier.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/e12d02eeb2d2725c30fc1b24f0db69aa29a61c29/Ghidra%2FFeatures%2FPDB%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fpdb%2Fpdbapplicator%2FAbstractFunctionTypeApplier.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FPDB%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fpdb%2Fpdbapplicator%2FAbstractFunctionTypeApplier.java?ref=e12d02eeb2d2725c30fc1b24f0db69aa29a61c29",
      "patch": "@@ -105,7 +105,7 @@ ArgumentsListTypeApplier getArgsListApplier() {\n \n \t/**\n \t * Returns whether the function has a \"this\" pointer\n-\t * @return {@code true} if it has a \"this\" pointer \n+\t * @return {@code true} if it has a \"this\" pointer\n \t */\n \tprotected abstract boolean hasThisPointer();\n \n@@ -131,7 +131,7 @@ protected boolean isConstructor() {\n \n \t/**\n \t * Method to create the {@link DataType} based upon the type indices of the calling\n-\t * convention, return type, and arguments list. \n+\t * convention, return type, and arguments list.\n \t * @param callingConventionParam Identification of the {@link AbstractMsType} record of the\n \t * {@link CallingConvention}.\n \t * @param hasThisPointerParam true if has a this pointer\n@@ -212,7 +212,7 @@ private void applyInternal() throws CancelledException {\n \tprivate boolean setReturnType() {\n \n \t\tif (isConstructor()) {\n-\t\t\treturn false;\n+\t\t\treturn true;\n \t\t}\n \n \t\tDataType returnDataType = returnApplier.getDataType();\n@@ -234,7 +234,7 @@ private void setCallingConvention(PdbApplicator applicator, CallingConvention ca\n \t\t\t// Since we are a member function, we will always assume a _thiscall...\n \t\t\t// but how do we know it is not a atatic member function (no \"this\")?\n \t\t\tswitch (callingConvention) {\n-\t\t\t\t// TODO: figure all of these out. \n+\t\t\t\t// TODO: figure all of these out.\n \t\t\t\tcase THISCALL: // \"this\" passed in register (we have not yet seen this)\n \t\t\t\t\tconvention = GenericCallingConvention.thiscall; // Is this correct if in reg?\n \t\t\t\t\tbreak;",
      "parent_sha": "fffc06c0bc67cef8bdec438246061d4d4a9ce8e0"
    }
  },
  {
    "oid": "c0415d5c5c5ae7e576e246ed3565b16280747e94",
    "message": "Fix locale issue in MacintoshTimeStampDataType",
    "date": "2021-06-24T13:37:24Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/c0415d5c5c5ae7e576e246ed3565b16280747e94",
    "details": {
      "sha": "76ae1d6325e5cd509546a36656c662df871ab000",
      "filename": "Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/MacintoshTimeStampDataType.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/c0415d5c5c5ae7e576e246ed3565b16280747e94/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fdata%2FMacintoshTimeStampDataType.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/c0415d5c5c5ae7e576e246ed3565b16280747e94/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fdata%2FMacintoshTimeStampDataType.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fdata%2FMacintoshTimeStampDataType.java?ref=c0415d5c5c5ae7e576e246ed3565b16280747e94",
      "patch": "@@ -17,6 +17,7 @@\n \n import java.text.SimpleDateFormat;\n import java.util.Date;\n+import java.util.Locale;\n import java.util.TimeZone;\n \n import ghidra.docking.settings.Settings;\n@@ -35,7 +36,7 @@ public class MacintoshTimeStampDataType extends BuiltIn {\n \t\t\tMacintoshTimeStampDataType.class.getName());\n \t}\n \n-\tprivate final static SimpleDateFormat formatter = new SimpleDateFormat(\"dd-MMM-yyyy HH:mm:ss\");\n+\tprivate final static SimpleDateFormat formatter = new SimpleDateFormat(\"dd-MMM-yyyy HH:mm:ss\", Locale.US);\n \tprivate static Date macStartDate;\n \n \tstatic {",
      "parent_sha": "ecef7844fd5b224e55595a49acc570c99ddf56f9"
    }
  },
  {
    "oid": "faac13437e7b8f70616bc208c48a5e18925a0890",
    "message": "GP-774 - fixed potential deadlock in dt db manager",
    "date": "2021-03-12T20:29:11Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/faac13437e7b8f70616bc208c48a5e18925a0890",
    "details": {
      "sha": "d13259b7632e86754db553b5ceb8aac76acdd315",
      "filename": "Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/DataTypeManagerDB.java",
      "status": "modified",
      "additions": 48,
      "deletions": 30,
      "changes": 78,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/faac13437e7b8f70616bc208c48a5e18925a0890/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fdatabase%2Fdata%2FDataTypeManagerDB.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/faac13437e7b8f70616bc208c48a5e18925a0890/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fdatabase%2Fdata%2FDataTypeManagerDB.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fdatabase%2Fdata%2FDataTypeManagerDB.java?ref=faac13437e7b8f70616bc208c48a5e18925a0890",
      "patch": "@@ -1695,34 +1695,41 @@ public void associateDataTypeWithArchive(DataType datatype, SourceArchive archiv\n \n \t@Override\n \tpublic void disassociate(DataType dataType) {\n-\t\tUniversalID oldDtID = dataType.getUniversalID();\n-\t\tSourceArchive sourceArchive = dataType.getSourceArchive();\n-\t\tsourceArchive = resolveSourceArchive(sourceArchive);\n-\t\tUniversalID id = sourceArchive == null ? DataTypeManager.LOCAL_ARCHIVE_UNIVERSAL_ID\n-\t\t\t\t: sourceArchive.getSourceArchiveID();\n-\t\tif (id.equals(getUniversalID())) {\n-\t\t\tid = DataTypeManager.LOCAL_ARCHIVE_UNIVERSAL_ID;\n-\t\t}\n-\t\tif (id == DataTypeManager.LOCAL_ARCHIVE_UNIVERSAL_ID) {\n-\t\t\t// Already local data type so no source archive associated.\n-\t\t\treturn;\n-\t\t}\n \n-\t\t// Set the source archive to null indicating no associated archive.\n-\t\tdataType.setSourceArchive(null);\n+\t\tlock.acquire();\n+\t\ttry {\n+\t\t\tUniversalID oldDtID = dataType.getUniversalID();\n+\t\t\tSourceArchive sourceArchive = dataType.getSourceArchive();\n+\t\t\tsourceArchive = resolveSourceArchive(sourceArchive);\n+\t\t\tUniversalID id = sourceArchive == null ? DataTypeManager.LOCAL_ARCHIVE_UNIVERSAL_ID\n+\t\t\t\t\t: sourceArchive.getSourceArchiveID();\n+\t\t\tif (id.equals(getUniversalID())) {\n+\t\t\t\tid = DataTypeManager.LOCAL_ARCHIVE_UNIVERSAL_ID;\n+\t\t\t}\n+\t\t\tif (id == DataTypeManager.LOCAL_ARCHIVE_UNIVERSAL_ID) {\n+\t\t\t\t// Already local data type so no source archive associated.\n+\t\t\t\treturn;\n+\t\t\t}\n \n-\t\t// Set the datatype's universal ID to a newly generated universal ID,\n-\t\t// since we no longer want the source archive data type's universal ID.\n-\t\tif (dataType instanceof DataTypeDB) {\n-\t\t\tDataTypeDB dt = (DataTypeDB) dataType;\n-\t\t\tdt.setUniversalID(UniversalIdGenerator.nextID());\n-\t\t}\n+\t\t\t// Set the source archive to null indicating no associated archive.\n+\t\t\tdataType.setSourceArchive(null);\n \n-\t\tif (oldDtID != null) {\n-\t\t\tidsToDataTypeMap.removeDataType(sourceArchive, oldDtID);\n-\t\t}\n+\t\t\t// Set the datatype's universal ID to a newly generated universal ID,\n+\t\t\t// since we no longer want the source archive data type's universal ID.\n+\t\t\tif (dataType instanceof DataTypeDB) {\n+\t\t\t\tDataTypeDB dt = (DataTypeDB) dataType;\n+\t\t\t\tdt.setUniversalID(UniversalIdGenerator.nextID());\n+\t\t\t}\n+\n+\t\t\tif (oldDtID != null) {\n+\t\t\t\tidsToDataTypeMap.removeDataType(sourceArchive, oldDtID);\n+\t\t\t}\n \n-\t\tdataTypeChanged(dataType);\n+\t\t\tdataTypeChanged(dataType);\n+\t\t}\n+\t\tfinally {\n+\t\t\tlock.release();\n+\t\t}\n \t}\n \n \tprivate Collection<DataType> filterOutNonSourceSettableDataTypes(\n@@ -2694,9 +2701,10 @@ private FunctionDefinition createFunctionDefinition(FunctionDefinition funDef, S\n \t\t}\n \t\ttry {\n \t\t\tcreatingDataType++;\n-\t\t\tDBRecord record = functionDefAdapter.createRecord(name, funDef.getComment(), cat.getID(),\n-\t\t\t\tDEFAULT_DATATYPE_ID, funDef.hasVarArgs(), funDef.getGenericCallingConvention(),\n-\t\t\t\tsourceArchiveIdValue, universalIdValue, funDef.getLastChangeTime());\n+\t\t\tDBRecord record =\n+\t\t\t\tfunctionDefAdapter.createRecord(name, funDef.getComment(), cat.getID(),\n+\t\t\t\t\tDEFAULT_DATATYPE_ID, funDef.hasVarArgs(), funDef.getGenericCallingConvention(),\n+\t\t\t\t\tsourceArchiveIdValue, universalIdValue, funDef.getLastChangeTime());\n \t\t\tFunctionDefinitionDB funDefDb =\n \t\t\t\tnew FunctionDefinitionDB(this, dtCache, functionDefAdapter, paramAdapter, record);\n \n@@ -3696,7 +3704,13 @@ public long getLastChangeTimeForMyManager() {\n \t@Override\n \tpublic DataType getDataType(SourceArchive sourceArchive, UniversalID datatypeID) {\n \t\tUniversalID sourceID = sourceArchive == null ? null : sourceArchive.getSourceArchiveID();\n-\t\treturn idsToDataTypeMap.getDataType(sourceID, datatypeID);\n+\t\tlock.acquire();\n+\t\ttry {\n+\t\t\treturn idsToDataTypeMap.getDataType(sourceID, datatypeID);\n+\t\t}\n+\t\tfinally {\n+\t\t\tlock.release();\n+\t\t}\n \t}\n \n \t@Override\n@@ -3829,7 +3843,7 @@ public void fixupComposites(TaskMonitor monitor) throws CancelledException {\n \t\t\tmonitor.setProgress(0);\n \t\t\tmonitor.setMaximum(orderedComposites.size());\n \t\t\tmonitor.setMessage(\"Updating Datatype Sizes...\");\n-\t\t\t\n+\n \t\t\tint count = 0;\n \t\t\tfor (CompositeDB c : orderedComposites) {\n \t\t\t\tmonitor.checkCanceled();\n@@ -4162,7 +4176,11 @@ DataType getDataType(UniversalID sourceID, UniversalID dataTypeID) {\n \n \t\t\tMap<UniversalID, DataType> idMap =\n \t\t\t\tmap.computeIfAbsent(sourceID, k -> new ConcurrentHashMap<>());\n-\t\t\tfinal UniversalID sourceArchiveID = sourceID;\n+\t\t\tUniversalID sourceArchiveID = sourceID;\n+\n+\t\t\t// note: this call is atomic and has a lock on the 'idMap'.  It may call to a method\n+\t\t\t//       that requires a db lock.  As such, the call to computeIfAbsent() must be \n+\t\t\t//       made while holding the db lock.\n \t\t\treturn idMap.computeIfAbsent(dataTypeID,\n \t\t\t\tk -> findDataTypeForIDs(sourceArchiveID, dataTypeID));\n \t\t}",
      "parent_sha": "9028a3122cfcb24a07151fe74cefdafe7c9d6aa9"
    }
  },
  {
    "oid": "65a8e31ba971566a3b24698f109f537a33e51549",
    "message": "Tests - fixed key binding dialog for recent message change",
    "date": "2020-01-29T23:49:58Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/65a8e31ba971566a3b24698f109f537a33e51549",
    "details": {
      "sha": "1cce25d187307b1291336b2d594bd98a6f1f7c63",
      "filename": "Ghidra/Features/Base/src/test.slow/java/ghidra/framework/plugintool/dialog/KeyBindingsTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/65a8e31ba971566a3b24698f109f537a33e51549/Ghidra%2FFeatures%2FBase%2Fsrc%2Ftest.slow%2Fjava%2Fghidra%2Fframework%2Fplugintool%2Fdialog%2FKeyBindingsTest.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/65a8e31ba971566a3b24698f109f537a33e51549/Ghidra%2FFeatures%2FBase%2Fsrc%2Ftest.slow%2Fjava%2Fghidra%2Fframework%2Fplugintool%2Fdialog%2FKeyBindingsTest.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Ftest.slow%2Fjava%2Fghidra%2Fframework%2Fplugintool%2Fdialog%2FKeyBindingsTest.java?ref=65a8e31ba971566a3b24698f109f537a33e51549",
      "patch": "@@ -89,8 +89,10 @@ public void testKeyBindingsDisplay() throws Exception {\n \t\t// look for the info panel\n \t\tMultiLineLabel label = findComponent(panel, MultiLineLabel.class);\n \t\tString str = \"To add or change a key binding, select an action\\n\" +\n-\t\t\t\" and type any key combination.\\n\" + \"To remove a key binding, select an action and\\n\" +\n-\t\t\t\"press <Enter> or <Backspace>.\";\n+\t\t\t\"and type any key combination\\n\" +\n+\t\t\t\" \\n\" +\n+\t\t\t\"To remove a key binding, select an action and\\n\" +\n+\t\t\t\"press <Enter> or <Backspace>\";\n \n \t\tassertEquals(str, label.getLabel());\n ",
      "parent_sha": "84afa7e1389037bc183944710eb22915fe587100"
    }
  },
  {
    "oid": "1a94cd2aec1599458e8f42026e8fa9b4c36018e5",
    "message": "GP-3855 AggressiveArmInstruction finder minor bug fixes, speed improvements, and refactoring",
    "date": "2023-11-30T14:25:45Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/1a94cd2aec1599458e8f42026e8fa9b4c36018e5",
    "details": {
      "sha": "7f8bd10b3f63ddc1d0feb16defe119ab1bd82bb9",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/plugin/prototype/analysis/ArmAggressiveInstructionFinderAnalyzer.java",
      "status": "modified",
      "additions": 144,
      "deletions": 156,
      "changes": 300,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/1a94cd2aec1599458e8f42026e8fa9b4c36018e5/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fprototype%2Fanalysis%2FArmAggressiveInstructionFinderAnalyzer.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/1a94cd2aec1599458e8f42026e8fa9b4c36018e5/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fprototype%2Fanalysis%2FArmAggressiveInstructionFinderAnalyzer.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fprototype%2Fanalysis%2FArmAggressiveInstructionFinderAnalyzer.java?ref=1a94cd2aec1599458e8f42026e8fa9b4c36018e5",
      "patch": "@@ -49,12 +49,7 @@ public class ArmAggressiveInstructionFinderAnalyzer extends AbstractAnalyzer {\n \tprivate AddressSet lastBody = null;\n \tprivate int lastBodyTheSameCount = 0;\n \tprivate PseudoDisassembler pseudo;\n-\tprivate AddressSetView todoSet;\n-\n-//\tprivate HashMap<BigInteger, Integer> funcStartMap;\n-//\tprivate HashMap<BigInteger, BigInteger> tmodeStartMap;\n-//\tprivate long lastProgramHash;\n-//\tprivate long lastFuncCount = 0;\n+\tprivate AddressSet todoSet;\n \n \tpublic ArmAggressiveInstructionFinderAnalyzer() {\n \t\tsuper(NAME, DESCRIPTION, AnalyzerType.BYTE_ANALYZER);\n@@ -85,10 +80,7 @@ public boolean added(Program program, AddressSetView set, TaskMonitor monitor, M\n \n \t\tpseudo = new PseudoDisassembler(program);\n \n-\t\t//Gather up all patterns for current functions starts\n-//\t\tcomputeExistingMasks(monitor);\n-\n-//\t\tAddressSet followingStarts = findStartsAfterFunctions();\n+\t\t// TODO: get valid function start patterns from function start pattern analyzer\n \n \t\t//First look for ending Pattern between known functions (Alignment) and data before the function\n \t\t//Look after each known pattern for function starts first\n@@ -97,6 +89,11 @@ public boolean added(Program program, AddressSetView set, TaskMonitor monitor, M\n \t\t//If there are known good function starts, use those.\n \n \t\tmonitor.setMessage(\"ARM AIF \" + set.getMinAddress());\n+\t\tlong maxCount = program.getMemory().getExecuteSet().getNumAddresses();\n+\t\tif (maxCount == 0) {\n+\t\t\tmaxCount = program.getMemory().getNumAddresses();\n+\t\t}\n+\t\tmonitor.setMaximum(maxCount);\n \n \t\t// make sure to put on things that are external entry points, but not defined symbols.\n \t\t// try disassembling as ARM/THUMB at entry points first\n@@ -114,8 +111,7 @@ public boolean added(Program program, AddressSetView set, TaskMonitor monitor, M\n \t\t\t}\n \n \t\t\tSymbol symbol = symbolTable.getPrimarySymbol(entry);\n-\t\t\tAddressSet subSet = new AddressSet(entry, entry);\n-\t\t\ttodoSet = todoSet.subtract(subSet);\n+\t\t\ttodoSet.delete(entry, entry);\n \n \t\t\tif (!symbol.isExternalEntryPoint()) {\n \t\t\t\tcontinue;\n@@ -126,35 +122,57 @@ else if (doValidStart(entry, monitor)) {\n \t\t\t}\n \t\t}\n \n-\t\t// get an instruction iterator\n+\t\t// iterate over undefined blocks, check for a few bytes after the start\n+\t\t//    Don't do 00 bytes, align correctly\n+\t\tint numInstChecked = 0;\n+\t\tint addrCount = 0;\n \t\twhile (todoSet.isEmpty() == false) {\n+\t\t\t\n+\t\t\taddrCount++;\n+\t\t\tif (addrCount % 256 == 1)\n+\t\t\t{\n+\t\t\t\tmonitor.setProgress(maxCount - todoSet.getNumAddresses());\n+\t\t\t}\n \n \t\t\tData data;\n \t\t\tAddress minAddr = todoSet.getMinAddress();\n \n \t\t\tif ((minAddr.getOffset() % 2) != 0) {\n-\t\t\t\ttodoSet = todoSet.subtract(new AddressSet(minAddr, minAddr));\n+\t\t\t\ttodoSet.delete(minAddr, minAddr);\n \t\t\t\tcontinue;\n \t\t\t}\n+\t\t\tif (numInstChecked > 4) {\n+\t\t\t\t// jump to the next defined thing, then to next undefined\n+\t\t\t\tnumInstChecked = 0;\n+\t\t\t\tCodeUnit cu = listing.getDefinedCodeUnitAfter(minAddr);\n+\t\t\t\tif (cu != null) {\n+\t\t\t\t\ttodoSet.delete(minAddr, cu.getMaxAddress());\n+\t\t\t\t\tminAddr = cu.getMaxAddress().next();\n+\t\t\t\t} else {\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t}\n \t\t\tdata = listing.getUndefinedDataAt(minAddr);\n \t\t\tif (data == null) {\n-\t\t\t\ttodoSet = todoSet.subtract(new AddressSet(minAddr, minAddr));\n+\t\t\t\tnumInstChecked = 0;\n+\t\t\t\ttodoSet.delete(minAddr, minAddr);\n \t\t\t\tdata = listing.getFirstUndefinedData(todoSet, monitor);\n \t\t\t}\n \t\t\tif (data == null) {\n \t\t\t\treturn true;\n \t\t\t}\n+\t\t\tif (todoSet.isEmpty()) {\n+\t\t\t\treturn true;\n+\t\t\t}\n \n \t\t\tAddress entry = data.getMinAddress();\n \n \t\t\tif (monitor.isCancelled()) {\n \t\t\t\tbreak;\n \t\t\t}\n \n-\t\t\tAddressSet subSet = new AddressSet(todoSet.getMinAddress(), data.getMaxAddress());\n-\n \t\t\tboolean contains = todoSet.contains(entry);\n-\t\t\ttodoSet = todoSet.subtract(subSet);\n+\t\t\ttodoSet.delete(minAddr, data.getMaxAddress());\n \n \t\t\tif (contains) {\n \n@@ -164,6 +182,7 @@ else if (doValidStart(entry, monitor)) {\n \t\t\t\t\tscheduleFollowOnAnalysis(program, todoSet);\n \t\t\t\t\treturn true;\n \t\t\t\t}\n+\t\t\t\tnumInstChecked++;\n \t\t\t}\n \t\t}\n \n@@ -207,43 +226,48 @@ private void scheduleFollowOnAnalysis(Program program, AddressSetView doLaterSet\n \t}\n \n \tprivate boolean doValidStart(Address entry, TaskMonitor monitor) {\n-\t\t// try the mode of the last instruction above this place\n-\n-\t\tBigInteger curValue = null;\n-\t\tPseudoDisassemblerContext pseudoContext =\n-\t\t\tnew PseudoDisassemblerContext(curProgram.getProgramContext());\n+\t\tBigInteger tmodeVal = null;\n \n-\t\t// get the current value from the program context\n+\t\t// Try to figure out the right TMode to use\n \t\tif (tmodeReg != null) {\n-\t\t\tcurValue = curProgram.getProgramContext().getValue(tmodeReg, entry, false);\n-\t\t\t// if it doesn't have one set, try to get it the last context from the instruction before\n-\t\t\tif (curValue == null) {\n-\t\t\t\tInstruction instr = listing.getInstructionBefore(entry);\n-\t\t\t\tif (instr != null) {\n-\t\t\t\t\tcurValue =\n-\t\t\t\t\t\tcurProgram.getProgramContext().getValue(tmodeReg, instr.getMinAddress(), false);\n-\t\t\t\t\tif (curValue != null) {\n-\t\t\t\t\t\tpseudoContext.setValue(tmodeReg, entry, curValue);\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\t\t\t// try to get TMode at last context from the instruction before\n+\t\t\tInstruction instr = listing.getInstructionBefore(entry);\n+\t\t\tif (instr != null) {\n+\t\t\t\tAddress addr = instr.getMinAddress();\n+\t\t\t\ttmodeVal = curProgram.getProgramContext().getValue(tmodeReg, addr, false);\n+\t\t\t}\n+\t\t\t\n+\t\t\t// if instruction doesn't have one set, try to get it from the program\n+\t\t\tif (tmodeVal == null) {\n+\t\t\t\ttmodeVal = curProgram.getProgramContext().getValue(tmodeReg, entry, false);\n \t\t\t}\n+\t\t\t\n+\t\t\t// still no value, start at ARM mode (0)\n+\t\t\tif (tmodeVal == null) {\n+\t\t\t\ttmodeVal = BigInteger.ZERO;  \n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\t// try the TMode\n+\t\tboolean isvalid = false;\n+\t\ttry {\n+\t\t\tisvalid = checkValidARMTMode(entry, tmodeVal);\n+\t\t}\n+\t\tcatch (InsufficientBytesException | UnknownInstructionException\n+\t\t\t\t| UnknownContextException e) {\n+\t\t\t// ignore, mode not valid\n \t\t}\n-\t\tboolean isvalid = pseudo.checkValidSubroutine(entry, pseudoContext, true, false); // try the current mode\n \n+\t\t// try the opposite Thumb mode\n \t\tif (!isvalid && tmodeReg != null) {\n-\t\t\t// TMode is single bit value\n-\t\t\tif (curValue != null) {\n-\t\t\t\tcurValue = curValue.flipBit(0);\n+\t\t\ttmodeVal = tmodeVal.flipBit(0);\n+\t\t\ttry {\n+\t\t\t\tisvalid = checkValidARMTMode(entry, tmodeVal);\n \t\t\t}\n-\t\t\telse {\n-\t\t\t\tcurValue = BigInteger.ONE;\n+\t\t\tcatch (InsufficientBytesException | UnknownInstructionException\n+\t\t\t\t\t| UnknownContextException e) {\n+\t\t\t\t// ignore, not valid\n \t\t\t}\n-\n-\t\t\tpseudoContext = new PseudoDisassemblerContext(curProgram.getProgramContext());\n-\t\t\tpseudoContext.setValue(tmodeReg, entry, curValue);\n-\n-\t\t\tisvalid = pseudo.checkValidSubroutine(entry, pseudoContext, true, false);\n-\n \t\t}\n \t\tif (!isvalid) {\n \t\t\treturn false;\n@@ -257,10 +281,18 @@ private boolean doValidStart(Address entry, TaskMonitor monitor) {\n \t\tif (sym != null && sym.getSource() == SourceType.IMPORTED) {\n \t\t\taddsInfo = true;\n \t\t}\n-\t\tpseudoContext = new PseudoDisassemblerContext(curProgram.getProgramContext());\n+\t\t\n+\t\t// set the TMode to the mode figured out\n+\t\tPseudoDisassemblerContext pseudoContext =\n+\t\t\t\tnew PseudoDisassemblerContext(curProgram.getProgramContext());\n \t\tif (tmodeReg != null) {\n-\t\t\tpseudoContext.setValue(tmodeReg, entry, curValue);\n+\t\t\tpseudoContext.setValue(tmodeReg, entry, tmodeVal);\n \t\t}\n+\t\t\n+\t\t// Compute the possibly body, and note any evidence this code is worth\n+\t\t// taking a risk and disassembling.  It must be consistent with existing code,\n+\t\t// and add more information, like newly discovered code or a ref to an existing\n+\t\t// function.\n \t\tAddressSet body =\n \t\t\tpseudo.followSubFlows(entry, pseudoContext, 1000, new PseudoFlowProcessor() {\n \t\t\t\tObject lastResults[] = null;\n@@ -342,10 +374,12 @@ public boolean process(PseudoInstruction instr) {\n \t\t\t\t\tif (ftype.isCall() && ftype.isComputed() && lastResults != null &&\n \t\t\t\t\t\tinstr.getNumOperands() == 1) {\n \t\t\t\t\t\tRegister reg = instr.getRegister(0);\n-\t\t\t\t\t\tfor (int i = 0; i < lastResults.length; i++) {\n-\t\t\t\t\t\t\tif (reg.equals(lastResults[i])) {\n-\t\t\t\t\t\t\t\taddsInfo = true;\n-\t\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\tif (reg != null) {\n+\t\t\t\t\t\t\tfor (int i = 0; i < lastResults.length; i++) {\n+\t\t\t\t\t\t\t\tif (reg.equals(lastResults[i])) {\n+\t\t\t\t\t\t\t\t\taddsInfo = true;\n+\t\t\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n@@ -378,7 +412,7 @@ private boolean validTerminator(PseudoInstruction instr) {\n \t\t// if this body is a subset of last body, assume we will keep disassembling the same thing since we keep getting the same body\n \t\t//\n \t\tif (lastBody != null && lastBody.contains(body) && (lastBodyTheSameCount++ > 5)) {\n-\t\t\ttodoSet = todoSet.subtract(body);\n+\t\t\ttodoSet.delete(body);\n \t\t\tlastBody = null;\n \t\t\tlastBodyTheSameCount = 0;\n \t\t}\n@@ -409,7 +443,7 @@ private boolean validTerminator(PseudoInstruction instr) {\n \t\t\t\tcurProgram.getReferenceManager().getReferenceCountTo(entry) > 0) {\n \t\t\t\t// don't try to do anything with the flow from here.\n \t\t\t\tAddressSet badSet = new AddressSet(body.getMinAddress(), body.getMaxAddress());\n-\t\t\t\ttodoSet = todoSet.subtract(badSet);\n+\t\t\t\ttodoSet.delete(badSet);\n \t\t\t\treturn false;\n \t\t\t}\n \t\t}\n@@ -431,6 +465,10 @@ private boolean validTerminator(PseudoInstruction instr) {\n \t\t\t\tdistance = 0x777777;\n \t\t\t\tbreak;\n \t\t\t}\n+\t\t\t// TODO: This protects against a jump to a small terminal instruction block\n+\t\t\t//       Is this the right way to detect?\n+\t\t\t// TODO: If the code flows into other code, it could be branching to it,\n+\t\t\t//       which shouldn't be included in the body of the function.\n \t\t\tif (range.getLength() <= 4) {\n \t\t\t\tdistance = 0x777777;\n \t\t\t\tbreak;\n@@ -449,7 +487,7 @@ private boolean validTerminator(PseudoInstruction instr) {\n \n \t\tif (isvalid) {\n \t\t\ttry {\n-\t\t\t\tcurProgram.getProgramContext().setValue(tmodeReg, entry, entry, curValue);\n+\t\t\t\tcurProgram.getProgramContext().setValue(tmodeReg, entry, entry, tmodeVal);\n \t\t\t}\n \t\t\tcatch (ContextChangeException e) {\n \t\t\t\tMsg.error(this, \"Unexpected Exception: \" + e.getMessage(), e);\n@@ -468,7 +506,7 @@ private boolean validTerminator(PseudoInstruction instr) {\n \t\t\t\tclearCmd.applyTo(curProgram);\n \t\t\t\treturn false;\n \t\t\t}\n-\t\t\ttodoSet = todoSet.subtract(cmd.getDisassembledAddressSet());\n+\t\t\ttodoSet.delete(cmd.getDisassembledAddressSet());\n \t\t\tBookmarkEditCmd bcmd =\n \t\t\t\tnew BookmarkEditCmd(entry, BookmarkType.ANALYSIS,\n \t\t\t\t\t\"ARM Aggressive Intruction Finder\", \"Found code\");\n@@ -479,13 +517,58 @@ private boolean validTerminator(PseudoInstruction instr) {\n \t\treturn false;\n \t}\n \n+\tprivate boolean checkValidARMTMode(Address entry, BigInteger thumbValue)\n+\t\t\tthrows InsufficientBytesException, UnknownInstructionException,\n+\t\t\tUnknownContextException {\n+\t\t\n+\t\tPseudoDisassemblerContext pseudoContext = new PseudoDisassemblerContext(curProgram.getProgramContext());\n+\t\t\n+\t\tif (tmodeReg != null && thumbValue != null) {\n+\t\t\tpseudoContext.setValue(tmodeReg, entry, thumbValue);\n+\t\t}\n+\t\t\n+\t\tpseudoContext.flowStart(entry);\n+\t\tPseudoInstruction instr = pseudo.disassemble(entry, pseudoContext, false);\n+\t\t\n+\t\tpseudoContext = new PseudoDisassemblerContext(curProgram.getProgramContext());\n+\t\tpseudoContext.setValue(tmodeReg, entry, thumbValue);\n+\n+\t\tif (instr != null && !isFillerInstruction(instr)) { \n+\t\t\treturn pseudo.checkValidSubroutine(entry, pseudoContext, true, false); // try the current mode\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tprivate boolean isFillerInstruction(PseudoInstruction instr) {\n+\t\tString mnemonic= instr.getMnemonicString();\n+\t\t\n+\t\tif (mnemonic.equals(\"nop\")) {\n+\t\t\treturn true;\n+\t\t}\n+\t\t\n+\t\tif (mnemonic.equals(\"mov\") || mnemonic.equals(\"movs\")) {\n+\t\t\t// if input and output register are the same is filler\n+\t\t\tif (instr.getNumOperands() == 2) {\n+\t\t\t\tRegister reg1 = instr.getRegister(0);\n+\t\t\t\tRegister reg2 = instr.getRegister(1);\n+\t\t\t\tif (reg1 != null && reg1.equals(reg2)) {\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn false;\n+\t}\n+\n \t/**\n \t * Check if there are blocks marked executable.\n \t *   If there are exec blocks, remove all un-exec blocks from the set.\n-\t * @param program\n-\t * @param set\n+\t * @param program program\n+\t * @param set addresses to be checked\n+\t * \n+\t * @return set of address that are executable\n \t */\n-\tprivate AddressSetView checkExecBlocks(Program program, AddressSetView set) {\n+\tprivate AddressSet checkExecBlocks(Program program, AddressSetView set) {\n \t\t// check if there is a block marked unexec\n \n \t\tAddressSet execSet = new AddressSet();\n@@ -497,106 +580,11 @@ private AddressSetView checkExecBlocks(Program program, AddressSetView set) {\n \t\t}\n \n \t\tif (execSet.isEmpty()) {\n-\t\t\treturn set;\n+\t\t\treturn new AddressSet(set);\n \t\t}\n \t\tif (set.isEmpty()) {\n \t\t\treturn execSet;\n \t\t}\n \t\treturn set.intersect(execSet);\n \t}\n-\n-//\tprivate boolean computeExistingMasks(TaskMonitor monitor) {\n-//\t\tlong funcCount = curProgram.getFunctionManager().getFunctionCount();\n-//\t\t\n-//\t\tif (funcStartMap == null || lastProgramHash != curProgram.hashCode() ||\n-//\t\t\t\tfuncStartMap.isEmpty() || funcCount > (lastFuncCount * 1.10)) {\n-//\t\t\t\tlastProgramHash = curProgram.hashCode();\n-//\t\t\t\tlastFuncCount = funcCount;\n-//\t\t\t\t\n-//\t\t\t\tfuncStartMap = new HashMap<BigInteger, Integer>();\n-//\t\t}\n-//\t\t\n-//\t\tif (funcCount < 20 || curProgram.getListing().getNumInstructions() <= 0) {\n-//\t\t\treturn false;\n-//\t\t}\n-//\t\t\n-//\t\tmonitor.setMessage(\"AIF - hashing functions\");\n-//\t\t\n-//\t\tFunctionManager functionManager = curProgram.getFunctionManager();\n-//\t\tFunctionIterator funcs = functionManager.getFunctions(true);\n-//\t\tint functionCount = functionManager.getFunctionCount();\n-//\t\tmonitor.initialize(functionCount);\n-//\n-//\t\twhile (funcs.hasNext()) {\n-//\t\t\tmonitor.incrementProgress(1);\n-//\t\t\tFunction function = funcs.next();\n-//\n-//\t\t\tAddress entry = function.getEntryPoint();\n-//\n-//\t\t\t// get the current value from the program context\n-//\t\t\tBigInteger tmodeVal = curProgram.getProgramContext().getValue( tmodeReg, entry, false);\n-//\t\t\t\n-//\t\t\tInstruction instr = curProgram.getListing().getInstructionAt(entry);\n-//\t\t\tif (instr == null) {\n-//\t\t\t\tcontinue;\n-//\t\t\t}\n-//\t\t\ttry {\n-//\t\t\t\tSleighDebugLogger ilog =\n-//\t\t\t\t\tnew SleighDebugLogger(curProgram, entry, SleighDebugMode.MASKS_ONLY);\n-//\t\t\t\tif (ilog.parseFailed()) {\n-//\t\t\t\t\tcontinue;\n-//\t\t\t\t}\n-//\t\t\t\tbyte[] imask = ilog.getInstructionMask();\n-//\t\t\t\tif (imask.length == 1) {\n-//\t\t\t\t\timask[0] = (byte) 0xff;\n-//\t\t\t\t}\n-//\t\t\t\tbyte[] ibytes = ilog.getMaskedBytes(imask);\n-//\t\t\t\tint ilen = instr.getLength();\n-//\n-//\t\t\t\tinstr = curProgram.getListing().getInstructionAt(instr.getMaxAddress().add(1));\n-//\t\t\t\tif (instr != null) {\n-//\t\t\t\t\tilog =\n-//\t\t\t\t\t\tnew SleighDebugLogger(curProgram, entry.add(ibytes.length),\n-//\t\t\t\t\t\t\tSleighDebugMode.MASKS_ONLY);\n-//\t\t\t\t\tbyte[] imask2 = ilog.getInstructionMask();\n-//\t\t\t\t\tif (imask2.length == 1) {\n-//\t\t\t\t\t\timask2[0] = (byte) 0xff;\n-//\t\t\t\t\t}\n-//\t\t\t\t\tbyte[] ibytes2 = ilog.getMaskedBytes(imask2);\n-//\t\t\t\t\tbyte[] ibytes1 = ibytes;\n-//\t\t\t\t\tibytes = new byte[ibytes1.length + ibytes2.length];\n-//\t\t\t\t\tSystem.arraycopy(ibytes1, 0, ibytes, 0, ibytes1.length);\n-//\t\t\t\t\tSystem.arraycopy(ibytes2, 0, ibytes, ibytes1.length, ibytes2.length);\n-//\t\t\t\t}\n-//\n-//\t\t\t\tBigInteger bi = new BigInteger(ibytes);\n-//\t\t\t\tInteger count = funcStartMap.get(bi);\n-//\t\t\t\tif (count != null) {\n-//\t\t\t\t\tcount++;\n-//\t\t\t\t\tfuncStartMap.put(bi, count);\n-//\t\t\t\t\t// tmodeStartMap.put(bi, tmodeVal);\n-//\t\t\t\t\tcontinue;\n-//\t\t\t\t}\n-//\t\t\t\tfuncStartMap.put(bi, 1);\n-//\t\t\t\t//tmodeStartMap.put(bi, tmodeVal);\n-//\t\t\t}\n-//\t\t\tcatch (IllegalStateException exc) {\n-//\t\t\t\tcontinue;\n-//\t\t\t}\n-//\t\t\tcatch (IllegalArgumentException exc) {\n-//\t\t\t\tcontinue;\n-//\t\t\t}\n-//\t\t}\n-////\t\t\tErr.info(this, \"\" + funcList.size() + \" number of starts\");\n-////\t\t\t\n-////\t\t\tIterator iter = funcStartMap.keySet().iterator();\n-////\t\t\twhile (iter.hasNext()) {\n-////\t\t\t\tBigInteger key = (BigInteger) iter.next();\n-////\t\t\t\tInteger val = funcStartMap.get(key);\n-////\t\t\t\tErr.info(this, \"   \" + key + \" = \" + val + \"\\t\\t\\t\\t\");\n-////\t\t\t}\n-//\t\t\n-//\t\treturn true;\n-//\t}\n-\n }",
      "parent_sha": "5fd01c739da5d7941a5c8a4606493f7e6a955ca0"
    }
  },
  {
    "oid": "0bf99cbc9b7d8a4ee29a1e028a26a77161032cfa",
    "message": "Fixed FontAdjustPlugin not being added to the tool",
    "date": "2024-02-13T22:34:32Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/0bf99cbc9b7d8a4ee29a1e028a26a77161032cfa",
    "details": {
      "sha": "4b2e511714fa6b78d323bfd7c319af115c575c8d",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/misc/FontAdjustPlugin.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/0bf99cbc9b7d8a4ee29a1e028a26a77161032cfa/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fmisc%2FFontAdjustPlugin.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/0bf99cbc9b7d8a4ee29a1e028a26a77161032cfa/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fmisc%2FFontAdjustPlugin.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fmisc%2FFontAdjustPlugin.java?ref=0bf99cbc9b7d8a4ee29a1e028a26a77161032cfa",
      "patch": "@@ -18,8 +18,8 @@\n import docking.ActionContext;\n import docking.ComponentProvider;\n import docking.action.builder.ActionBuilder;\n+import ghidra.app.CorePluginPackage;\n import ghidra.app.plugin.PluginCategoryNames;\n-import ghidra.framework.main.UtilityPluginPackage;\n import ghidra.framework.plugintool.*;\n import ghidra.framework.plugintool.util.PluginStatus;\n \n@@ -28,11 +28,11 @@\n  */\n @PluginInfo( //@formatter:off\n \tstatus = PluginStatus.RELEASED,\n-\tpackageName = UtilityPluginPackage.NAME,\n+\tpackageName = CorePluginPackage.NAME,\n \tcategory = PluginCategoryNames.FRAMEWORK,\n \tshortDescription = \"Provides generic actions for increasing/decreasing fonts.\",\n \tdescription = \"This plugin provides actions for increasing fonts used by component providers. \"+\n-\t\"ComponentProviders can either override the \\\"changeFontSize()\\\" method or register a\" +\n+\t\"ComponentProviders can either override the \\\"adjustFontSize()\\\" method or register a\" +\n \t\"theme font id that can be automatically adjusted.\"\n ) //@formatter:on\n ",
      "parent_sha": "4f95fdd111c7ebed1efb193cc6405c6287274199"
    }
  },
  {
    "oid": "83d2cbcf31560205aaad275bb09c1e301410826f",
    "message": "GP-2228 - Added a status message when applying a favorite data type to a\nnon-contiguous selection is not allowed",
    "date": "2024-10-10T22:38:29Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/83d2cbcf31560205aaad275bb09c1e301410826f",
    "details": {
      "sha": "cf5620e04dcdcfde2e8f1a32f5966b848f115f17",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/compositeeditor/CompEditorModel.java",
      "status": "modified",
      "additions": 20,
      "deletions": 14,
      "changes": 34,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/83d2cbcf31560205aaad275bb09c1e301410826f/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fcompositeeditor%2FCompEditorModel.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/83d2cbcf31560205aaad275bb09c1e301410826f/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fcompositeeditor%2FCompEditorModel.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fcompositeeditor%2FCompEditorModel.java?ref=83d2cbcf31560205aaad275bb09c1e301410826f",
      "patch": "@@ -568,10 +568,11 @@ protected void insertComponentMultiple(int rowIndex, DataType dataType, int dtLe\n \n \t@Override\n \tpublic DataTypeComponent add(DataType dataType) throws UsrException {\n-\t\tif (isContiguousSelection()) {\n-\t\t\treturn add(getMinIndexSelected(), dataType);\n+\t\tif (!isContiguousSelection()) {\n+\t\t\tsetStatus(\"Replace data type only works on a contiguous selection\", true);\n+\t\t\treturn null;\n \t\t}\n-\t\treturn null;\n+\t\treturn add(getMinIndexSelected(), dataType);\n \t}\n \n \t/**\n@@ -598,7 +599,7 @@ public DataTypeComponent add(int rowIndex, DataType dt) throws UsrException {\n \t\t\t\treturn null;\n \t\t\t}\n \t\t});\n-\t\t\n+\n \t\tfixSelection();\n \t\tcomponentEdited();\n \t\tselectionChanged();\n@@ -822,7 +823,8 @@ protected DataTypeComponent replaceComponentRange(int startRowIndex, int endRowI\n \t * @param length component length\n \t * @throws InvalidDataTypeException if check fails\n \t */\n-\tprivate void checkForReplace(int rowIndex, DataType datatype, int length) throws InvalidDataTypeException {\n+\tprivate void checkForReplace(int rowIndex, DataType datatype, int length)\n+\t\t\tthrows InvalidDataTypeException {\n \t\tDataTypeComponent dtc = getComponent(rowIndex);\n \t\tif (dtc == null) {\n \t\t\tthrow new InvalidDataTypeException(\"Invalid component selection\");\n@@ -843,25 +845,28 @@ private void checkForReplace(int rowIndex, DataType datatype, int length) throws\n \t\tint currentCompSize = dtc.getLength();\n \t\tint newCompSize = length;\n \t\tint sizeDiff = newCompSize - currentCompSize;\n-\t\t\n+\n \t\tif (sizeDiff <= 0) {\n \t\t\treturn;\n \t\t}\n-\t\t\n+\n \t\tint undefinedSpaceAvail = getNumUndefinedBytesAfter(dtc);\n \t\tif (sizeDiff > undefinedSpaceAvail) {\n \t\t\tint spaceNeeded = sizeDiff - undefinedSpaceAvail;\n-\t\t\tString msg = newCompSize + \" byte replacement at 0x\" + Integer.toHexString(dtc.getOffset());\n+\t\t\tString msg =\n+\t\t\t\tnewCompSize + \" byte replacement at 0x\" + Integer.toHexString(dtc.getOffset());\n \t\t\tif (struct.getDefinedComponentAtOrAfterOffset(dtc.getOffset() + 1) == null) {\n \t\t\t\t// suggest growing structure\n \t\t\t\tint suggestedSize = getLength() + spaceNeeded;\n-\t\t\t\tthrow new InvalidDataTypeException(msg + \" requires structure length of \" + suggestedSize + \"-bytes.\");\n+\t\t\t\tthrow new InvalidDataTypeException(\n+\t\t\t\t\tmsg + \" requires structure length of \" + suggestedSize + \"-bytes.\");\n \t\t\t}\n \t\t\t// suggest insert bytes (NOTE: in the future a conflict removal/grow could be offered)\n-\t\t\tthrow new InvalidDataTypeException(msg + \" requires \" + spaceNeeded + \" additional undefined bytes.\");\n+\t\t\tthrow new InvalidDataTypeException(\n+\t\t\t\tmsg + \" requires \" + spaceNeeded + \" additional undefined bytes.\");\n \t\t}\n \t}\n-\t\n+\n \t/**\n \t * Get the number of undefined bytes after the specified component.\n \t * The viewComposite must be a non-packed structure.\n@@ -879,16 +884,17 @@ protected final int getNumUndefinedBytesAfter(DataTypeComponent dtc) {\n \t\tif (struct.isPackingEnabled()) {\n \t\t\tthrow new UnsupportedOperationException();\n \t\t}\n-\t\t\n+\n \t\t// TODO: May  need special logic if dtc is zero-length component\n \t\tint length = getLength();\n \t\tint nextCompOffset = dtc.getEndOffset() + 1;\n \t\tif (nextCompOffset >= length) {\n \t\t\treturn 0;\n \t\t}\n-\t\tDataTypeComponent nextDefinedDtc = struct.getDefinedComponentAtOrAfterOffset(nextCompOffset);\n+\t\tDataTypeComponent nextDefinedDtc =\n+\t\t\tstruct.getDefinedComponentAtOrAfterOffset(nextCompOffset);\n \t\tint nextDefinedOffset = (nextDefinedDtc == null) ? length : nextDefinedDtc.getOffset();\n-\t\treturn Math.max(0,  nextDefinedOffset - nextCompOffset); // prevent negative return value\n+\t\treturn Math.max(0, nextDefinedOffset - nextCompOffset); // prevent negative return value\n \t}\n \n \t/**",
      "parent_sha": "065a845d4a2f185199847d32477eef9e4242535d"
    }
  },
  {
    "oid": "2ca66f9505317bfed1342ab399a262397351cd8e",
    "message": "GP-0: Fixing bad logic in ObjectiveC_Method.java",
    "date": "2023-08-10T13:57:05Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/2ca66f9505317bfed1342ab399a262397351cd8e",
    "details": {
      "sha": "cee719b8553fe01e4114824e0631d5fc5ec7a384",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objectiveC/ObjectiveC_Method.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/2ca66f9505317bfed1342ab399a262397351cd8e/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2FobjectiveC%2FObjectiveC_Method.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/2ca66f9505317bfed1342ab399a262397351cd8e/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2FobjectiveC%2FObjectiveC_Method.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2FobjectiveC%2FObjectiveC_Method.java?ref=2ca66f9505317bfed1342ab399a262397351cd8e",
      "patch": "@@ -1,6 +1,5 @@\n /* ###\n  * IP: GHIDRA\n- * REVIEWED: YES\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -52,7 +51,7 @@ public void applyTo(Namespace namespace) throws Exception {\n \t\tif (implementation == 0) {\n \t\t\treturn;\n \t\t}\n-\t\tif (getName() == null && getName().length() == 0) {\n+\t\tif (getName() == null || getName().length() == 0) {\n \t\t\treturn;\n \t\t}\n ",
      "parent_sha": "ccebb721db04478149e816fbcf20a94a14efeb46"
    }
  },
  {
    "oid": "97c8b3975cc15f21bd4a54c5e50e7fe51c0e050d",
    "message": "GP-5395 Corrected Memory Search region choice selection bug",
    "date": "2025-02-20T01:12:34Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/97c8b3975cc15f21bd4a54c5e50e7fe51c0e050d",
    "details": {
      "sha": "6cd6331a431b196e1f36bf6ae99582ee901ca6ad",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/features/base/memsearch/gui/SearchGuiModel.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/97c8b3975cc15f21bd4a54c5e50e7fe51c0e050d/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffeatures%2Fbase%2Fmemsearch%2Fgui%2FSearchGuiModel.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/97c8b3975cc15f21bd4a54c5e50e7fe51c0e050d/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffeatures%2Fbase%2Fmemsearch%2Fgui%2FSearchGuiModel.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffeatures%2Fbase%2Fmemsearch%2Fgui%2FSearchGuiModel.java?ref=97c8b3975cc15f21bd4a54c5e50e7fe51c0e050d",
      "patch": "@@ -269,7 +269,7 @@ public void setAutoRestrictSelection(boolean autoRestrictSelection) {\n \t}\n \n \tpublic void selectRegion(SearchRegion region, boolean selected) {\n-\t\tsettings.withSelectedRegion(region, selected);\n+\t\tsettings = settings.withSelectedRegion(region, selected);\n \t}\n \n \tpublic boolean isSelectedRegion(SearchRegion region) {",
      "parent_sha": "4829ecd670c802a359783da821db90184c6f8404"
    }
  },
  {
    "oid": "290e039e8b2b553fddfa3d9fc7d390541c0893c9",
    "message": "GP-1226: Attempting to make missing prototypes in trace less disruptive",
    "date": "2021-08-20T18:36:39Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/290e039e8b2b553fddfa3d9fc7d390541c0893c9",
    "details": {
      "sha": "6812ecf3a5146d29bd26f1bcb35a905ba2e11a05",
      "filename": "Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/database/listing/DBTraceInstruction.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/290e039e8b2b553fddfa3d9fc7d390541c0893c9/Ghidra%2FDebug%2FFramework-TraceModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ftrace%2Fdatabase%2Flisting%2FDBTraceInstruction.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/290e039e8b2b553fddfa3d9fc7d390541c0893c9/Ghidra%2FDebug%2FFramework-TraceModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ftrace%2Fdatabase%2Flisting%2FDBTraceInstruction.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FDebug%2FFramework-TraceModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ftrace%2Fdatabase%2Flisting%2FDBTraceInstruction.java?ref=290e039e8b2b553fddfa3d9fc7d390541c0893c9",
      "patch": "@@ -40,6 +40,7 @@\n import ghidra.trace.model.symbol.TraceReference;\n import ghidra.trace.util.*;\n import ghidra.util.LockHold;\n+import ghidra.util.Msg;\n import ghidra.util.database.DBCachedObjectStore;\n import ghidra.util.database.DBObjectColumn;\n import ghidra.util.database.annot.*;\n@@ -139,8 +140,10 @@ protected void fresh(boolean created) throws IOException {\n \t\tprototype = space.manager.getPrototypeByKey(prototypeKey);\n \t\tif (prototype == null) {\n \t\t\t// TODO: Better to just load a sentinel? Why bail on the whole thing?\n-\t\t\tthrow new IOException(\n-\t\t\t\t\"Instruction table is corrupt. Missing prototype: \" + prototypeKey);\n+\t\t\tMsg.error(this,\n+\t\t\t\t\"Instruction table is corrupt for address \" + getMinAddress() +\n+\t\t\t\t\t\". Missing prototype \" + prototypeKey);\n+\t\t\tprototype = new InvalidPrototype(getTrace().getBaseLanguage());\n \t\t}\n \t\tflowOverride = FlowOverride.values()[(flags & FLOWOVERRIDE_SET_MASK) >> FLOWOVERRIDE_SHIFT];\n ",
      "parent_sha": "dd277a91fe385f507b8cbe1cc9da443c943573d2"
    }
  },
  {
    "oid": "1c392f3c142a79ac0e29c3adffd1b7472e665342",
    "message": "Test fixes for updated mouse event handling",
    "date": "2022-10-11T21:41:59Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/1c392f3c142a79ac0e29c3adffd1b7472e665342",
    "details": {
      "sha": "1e4939ece07f4cbae8a1abe7613464471234b469",
      "filename": "Ghidra/Framework/Generic/src/main/java/generic/test/AbstractGenericTest.java",
      "status": "modified",
      "additions": 27,
      "deletions": 21,
      "changes": 48,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/1c392f3c142a79ac0e29c3adffd1b7472e665342/Ghidra%2FFramework%2FGeneric%2Fsrc%2Fmain%2Fjava%2Fgeneric%2Ftest%2FAbstractGenericTest.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/1c392f3c142a79ac0e29c3adffd1b7472e665342/Ghidra%2FFramework%2FGeneric%2Fsrc%2Fmain%2Fjava%2Fgeneric%2Ftest%2FAbstractGenericTest.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FGeneric%2Fsrc%2Fmain%2Fjava%2Fgeneric%2Ftest%2FAbstractGenericTest.java?ref=1c392f3c142a79ac0e29c3adffd1b7472e665342",
      "patch": "@@ -967,16 +967,15 @@ public static void doubleClick(JComponent comp, int x, int y) {\n \tpublic static void clickMouse(Component comp, int button, int x, int y, int clickCount,\n \t\t\tint modifiers, boolean popupTrigger) {\n \n-\t\tint updatedModifiers = convertToExtendedModifiers(modifiers, button);\n-\n+\t\tint nonRelesedModifiers = convertToExtendedModifiers(modifiers, button, false);\n+\t\tint relesedModifiers = convertToExtendedModifiers(modifiers, button, true);\n \t\tfor (int cnt = 1; cnt <= clickCount; ++cnt) {\n-\n \t\t\tpostEvent(new MouseEvent(comp, MouseEvent.MOUSE_PRESSED, System.currentTimeMillis(),\n-\t\t\t\tupdatedModifiers, x, y, cnt, false, button));\n+\t\t\t\tnonRelesedModifiers, x, y, cnt, false, button));\n \t\t\tpostEvent(new MouseEvent(comp, MouseEvent.MOUSE_CLICKED, System.currentTimeMillis(),\n-\t\t\t\tupdatedModifiers, x, y, cnt, false, button));\n+\t\t\t\tnonRelesedModifiers, x, y, cnt, false, button));\n \t\t\tpostEvent(new MouseEvent(comp, MouseEvent.MOUSE_RELEASED, System.currentTimeMillis(),\n-\t\t\t\tupdatedModifiers, x, y, cnt, popupTrigger, button));\n+\t\t\t\trelesedModifiers, x, y, cnt, popupTrigger, button));\n \t\t}\n \t}\n \n@@ -1010,13 +1009,14 @@ public static void clickMouse(Component comp, int button, int x, int y, int clic\n \tpublic static void dragMouse(final Component comp, int button, final int startX,\n \t\t\tfinal int startY, final int endX, final int endY, int modifiers) {\n \n-\t\tint updateModifiers = convertToExtendedModifiers(modifiers, button);\n+\t\tint nonRelesedModifiers = convertToExtendedModifiers(modifiers, button, false);\n+\t\tint relesedModifiers = convertToExtendedModifiers(modifiers, button, true);\n \t\tpostEvent(new MouseEvent(comp, MouseEvent.MOUSE_PRESSED, System.currentTimeMillis(),\n-\t\t\tupdateModifiers, startX, startY, 1, false, button));\n+\t\t\tnonRelesedModifiers, startX, startY, 1, false, button));\n \t\tpostEvent(new MouseEvent(comp, MouseEvent.MOUSE_DRAGGED, System.currentTimeMillis(),\n-\t\t\tupdateModifiers, endX, endY, 1, false, button));\n+\t\t\tnonRelesedModifiers, endX, endY, 1, false, button));\n \t\tpostEvent(new MouseEvent(comp, MouseEvent.MOUSE_RELEASED, System.currentTimeMillis(),\n-\t\t\tupdateModifiers, endX, endY, 1, false, button));\n+\t\t\trelesedModifiers, endX, endY, 1, false, button));\n \n \t}\n \n@@ -1034,7 +1034,7 @@ public static void moveMouse(Component comp, int x, int y) {\n \t}\n \n \t@SuppressWarnings(\"deprecation\")\n-\tprivate static int convertToExtendedModifiers(int modifiers, int button) {\n+\tprivate static int convertToExtendedModifiers(int modifiers, int button, boolean isRelease) {\n \n \t\t// TODO: Eliminate duplication of similar modifier modification logic\n \t\t// which exists in KeyBindingData\n@@ -1073,16 +1073,22 @@ private static int convertToExtendedModifiers(int modifiers, int button) {\n \t\t\tmodifiers = modifiers | InputEvent.META_DOWN_MASK;\n \t\t}\n \n-\t\tswitch (button) {\n-\t\t\tcase 1:\n-\t\t\t\tmodifiers |= InputEvent.BUTTON1_DOWN_MASK;\n-\t\t\t\tbreak;\n-\t\t\tcase 2:\n-\t\t\t\tmodifiers |= InputEvent.BUTTON2_DOWN_MASK;\n-\t\t\t\tbreak;\n-\t\t\tcase 3:\n-\t\t\t\tmodifiers |= InputEvent.BUTTON3_DOWN_MASK;\n-\t\t\t\tbreak;\n+\t\tif (!isRelease) {\n+\t\t\t//\n+\t\t\t// There are no mouse buttons down on a 'release' in Java's extended event processing.\n+\t\t\t// (The original non-extended events did include the button in the release event.)\n+\t\t\t//\n+\t\t\tswitch (button) {\n+\t\t\t\tcase 1:\n+\t\t\t\t\tmodifiers |= InputEvent.BUTTON1_DOWN_MASK;\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 2:\n+\t\t\t\t\tmodifiers |= InputEvent.BUTTON2_DOWN_MASK;\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 3:\n+\t\t\t\t\tmodifiers |= InputEvent.BUTTON3_DOWN_MASK;\n+\t\t\t\t\tbreak;\n+\t\t\t}\n \t\t}\n \t\treturn modifiers;\n \t}",
      "parent_sha": "8d6faaa8ad339dd0bc07466ed0282bc19e09c2f7"
    }
  },
  {
    "oid": "26b2dfef94f35b8291756c6c8837e754f1d23928",
    "message": "Tests - fix for test focus issue",
    "date": "2019-05-08T15:09:23Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/26b2dfef94f35b8291756c6c8837e754f1d23928",
    "details": {
      "sha": "4983409609e9e5492a3d71f8deb47bd6f5b560fb",
      "filename": "Ghidra/Features/FunctionGraph/src/test/java/ghidra/app/plugin/core/functiongraph/FunctionGraphPlugin1Test.java",
      "status": "modified",
      "additions": 15,
      "deletions": 3,
      "changes": 18,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/26b2dfef94f35b8291756c6c8837e754f1d23928/Ghidra%2FFeatures%2FFunctionGraph%2Fsrc%2Ftest%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Ffunctiongraph%2FFunctionGraphPlugin1Test.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/26b2dfef94f35b8291756c6c8837e754f1d23928/Ghidra%2FFeatures%2FFunctionGraph%2Fsrc%2Ftest%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Ffunctiongraph%2FFunctionGraphPlugin1Test.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FFunctionGraph%2Fsrc%2Ftest%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Ffunctiongraph%2FFunctionGraphPlugin1Test.java?ref=26b2dfef94f35b8291756c6c8837e754f1d23928",
      "patch": "@@ -799,11 +799,23 @@ protected void doTestRelayout(boolean fullReload) throws Exception {\n \t\t\t\t\"original point: \" + originalPoint + \" - reloaded point: \" + reloadedPoint,\n \t\t\tpointsAreSimilar(originalPoint, reloadedPoint));\n \n-\t\t// make sure the CodeBrowser's location matches ours\n+\t\t//\n+\t\t// Make sure the CodeBrowser's location matches ours after the relayout (the location should\n+\t\t// get broadcast to the CodeBrowser)\n+\t\t//\n+\n+\t\t// Note: there is a timing failure that happens for this check; the event broadcast \n+\t\t//       only happens if the FG provider has focus; in parallel batch mode focus is \n+\t\t//       unreliable\n+\t\tif (!BATCH_MODE) {\n+\t\t\tassertTrue(graphAddressMatchesCodeBrowser(newGraph));\n+\t\t}\n+\t}\n \n-\t\tFGVertex focusedVertex = runSwing(() -> newGraph.getFocusedVertex());\n+\tprivate boolean graphAddressMatchesCodeBrowser(FunctionGraph graph) {\n+\t\tFGVertex focusedVertex = runSwing(() -> graph.getFocusedVertex());\n \t\tProgramLocation graphLocation = focusedVertex.getProgramLocation();\n \t\tProgramLocation codeBrowserLocation = runSwing(() -> codeBrowser.getCurrentLocation());\n-\t\tassertEquals(graphLocation.getAddress(), codeBrowserLocation.getAddress());\n+\t\treturn graphLocation.getAddress().equals(codeBrowserLocation.getAddress());\n \t}\n }",
      "parent_sha": "0a0b7162663999b8a79efa2843e5a23a7023f237"
    }
  },
  {
    "oid": "ee128996963879359edf7c56aea0e6a08f0e4c36",
    "message": "OMF format: Remove some logging messages",
    "date": "2023-03-18T11:37:33Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/ee128996963879359edf7c56aea0e6a08f0e4c36",
    "details": {
      "sha": "5ffdbd39a40f59042fed8311dffed3c392982716",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/OmfLoader.java",
      "status": "modified",
      "additions": 2,
      "deletions": 11,
      "changes": 13,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/ee128996963879359edf7c56aea0e6a08f0e4c36/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fopinion%2FOmfLoader.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/ee128996963879359edf7c56aea0e6a08f0e4c36/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fopinion%2FOmfLoader.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fopinion%2FOmfLoader.java?ref=ee128996963879359edf7c56aea0e6a08f0e4c36",
      "patch": "@@ -373,9 +373,7 @@ private void processSegmentHeaders(BinaryReader reader, OmfFileHeader header, Pr\n \t\t\tAddress segmentAddr = segment.getAddress(language);\n \n \t\t\tif (segmentSize == 0) {\n-\t\t\t\t// don't create a block...just log that we've seen the segment\n-\t\t\t\tblock = program.getMemory().getBlock(segmentAddr);\n-\t\t\t\tlog.appendMsg(\"Empty Segment: \" + segment.getName());\n+\t\t\t\t// don't create a block\n \t\t\t}\n \t\t\telse if (segment.hasNonZeroData()) {\n \t\t\t\tblock = MemoryBlockUtils.createInitializedBlock(program, false, segment.getName(),\n@@ -384,10 +382,7 @@ else if (segment.hasNonZeroData()) {\n \t\t\t\t\t\tLong.toHexString(segmentSize),\n \t\t\t\t\tnull/*source*/, segment.isReadable(), segment.isWritable(),\n \t\t\t\t\tsegment.isExecutable(), log, monitor);\n-\t\t\t\tif (block != null) {\n-\t\t\t\t\tlog.appendMsg(\n-\t\t\t\t\t\t\"Created Initialized Block: \" + segment.getName() + \" @ \" + segmentAddr);\n-\t\t\t\t}\n+\n \t\t\t}\n \t\t\telse {\n \t\t\t\tblock = MemoryBlockUtils.createUninitializedBlock(program, false, segment.getName(),\n@@ -396,10 +391,6 @@ else if (segment.hasNonZeroData()) {\n \t\t\t\t\t\tLong.toHexString(segmentSize),\n \t\t\t\t\tnull/*source*/, segment.isReadable(), segment.isWritable(),\n \t\t\t\t\tsegment.isExecutable(), log);\n-\t\t\t\tif (block != null) {\n-\t\t\t\t\tlog.appendMsg(\n-\t\t\t\t\t\t\"Created Uninitialized Block: \" + segment.getName() + \" @ \" + segmentAddr);\n-\t\t\t\t}\n \t\t\t}\n \t\t}\n \t}",
      "parent_sha": "628642461c06e8731f60b1847962d8a78e1bde76"
    }
  },
  {
    "oid": "3a465efd5ea1466101bda40adf006566bae4d777",
    "message": "GP-0: bad previous fix",
    "date": "2023-08-09T17:13:28Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/3a465efd5ea1466101bda40adf006566bae4d777",
    "details": {
      "sha": "66289d96878ae64c385798e855866ada8b4b52cb",
      "filename": "Ghidra/Debug/Debugger-agent-dbgeng/src/main/java/agent/dbgeng/manager/cmd/DbgLaunchProcessCommand.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/3a465efd5ea1466101bda40adf006566bae4d777/Ghidra%2FDebug%2FDebugger-agent-dbgeng%2Fsrc%2Fmain%2Fjava%2Fagent%2Fdbgeng%2Fmanager%2Fcmd%2FDbgLaunchProcessCommand.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/3a465efd5ea1466101bda40adf006566bae4d777/Ghidra%2FDebug%2FDebugger-agent-dbgeng%2Fsrc%2Fmain%2Fjava%2Fagent%2Fdbgeng%2Fmanager%2Fcmd%2FDbgLaunchProcessCommand.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FDebug%2FDebugger-agent-dbgeng%2Fsrc%2Fmain%2Fjava%2Fagent%2Fdbgeng%2Fmanager%2Fcmd%2FDbgLaunchProcessCommand.java?ref=3a465efd5ea1466101bda40adf006566bae4d777",
      "patch": "@@ -89,7 +89,9 @@ public void invoke() {\n \t\tinitialDirectory = fixPath(initialDirectory);\n \t\tenvironment = fixPath(environment);\n \t\t// NB: The intent here is to enable multi-line input via a single dialog field\n-\t\tenvironment = environment.replace(\"\\\\0\", \"\\0\");\n+\t\tif (environment != null) {\n+\t\t\tenvironment = environment.replace(\"\\\\0\", \"\\0\");\n+\t\t}\n \n \t\tdbgeng.createProcess(dbgeng.getLocalServer(), StringUtils.join(newArgs, \" \"),\n \t\t\tinitialDirectory, environment, createFlags, engCreateFlags, verifierFlags);",
      "parent_sha": "2b41176a11dd6c9d2eb1cb366680211e7e7b0ef3"
    }
  },
  {
    "oid": "ba6e66dcd1bf837b37e32f571a34fe839e73e5d1",
    "message": "GP-4301 fixed prototype override context check for UndefinedFunction\ncase.",
    "date": "2024-02-12T16:37:20Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/ba6e66dcd1bf837b37e32f571a34fe839e73e5d1",
    "details": {
      "sha": "fe34b6383845313f21355c096b44499f3c59af01",
      "filename": "Ghidra/Features/Decompiler/src/main/java/ghidra/app/plugin/core/decompile/actions/OverridePrototypeAction.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/ba6e66dcd1bf837b37e32f571a34fe839e73e5d1/Ghidra%2FFeatures%2FDecompiler%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdecompile%2Factions%2FOverridePrototypeAction.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/ba6e66dcd1bf837b37e32f571a34fe839e73e5d1/Ghidra%2FFeatures%2FDecompiler%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdecompile%2Factions%2FOverridePrototypeAction.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FDecompiler%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdecompile%2Factions%2FOverridePrototypeAction.java?ref=ba6e66dcd1bf837b37e32f571a34fe839e73e5d1",
      "patch": "@@ -76,7 +76,7 @@ static PcodeOp getCallOp(Program program, ClangToken tokenAtCursor) {\n \t}\n \n \tstatic Symbol getSymbol(Function func, ClangToken tokenAtCursor) {\n-\t\tif (tokenAtCursor == null) {\n+\t\tif (tokenAtCursor == null || (func instanceof UndefinedFunction)) {\n \t\t\treturn null;\n \t\t}\n ",
      "parent_sha": "2d9a1ac539496c0f8490f834cc7b3c152063e0c1"
    }
  },
  {
    "oid": "127f5679d1404d89b6d8e4be253758e6e935a633",
    "message": "GP-0: Fixing print in PeLoader",
    "date": "2024-06-04T10:14:33Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/127f5679d1404d89b6d8e4be253758e6e935a633",
    "details": {
      "sha": "ea54f37c57d44b26e6410ec25f5ff2e73fdd858e",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/PeLoader.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/127f5679d1404d89b6d8e4be253758e6e935a633/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fopinion%2FPeLoader.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/127f5679d1404d89b6d8e4be253758e6e935a633/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fopinion%2FPeLoader.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fopinion%2FPeLoader.java?ref=127f5679d1404d89b6d8e4be253758e6e935a633",
      "patch": "@@ -28,8 +28,8 @@\n import ghidra.app.util.bin.BinaryReader;\n import ghidra.app.util.bin.ByteProvider;\n import ghidra.app.util.bin.format.elf.info.ElfInfoItem.ItemWithAddress;\n-import ghidra.app.util.bin.format.golang.GoBuildInfo;\n import ghidra.app.util.bin.format.golang.GoBuildId;\n+import ghidra.app.util.bin.format.golang.GoBuildInfo;\n import ghidra.app.util.bin.format.golang.rtti.GoRttiMapper;\n import ghidra.app.util.bin.format.mz.DOSHeader;\n import ghidra.app.util.bin.format.pe.*;\n@@ -433,7 +433,7 @@ private void processDelayImports(OptionalHeader optionalHeader, Program program,\n \t\t\treturn;\n \t\t}\n \n-\t\tlog.appendMsg(\"Delay imports detected...\");\n+\t\tlog.appendMsg(\"Delay imports detected\");\n \n \t\tAddressSpace space = program.getAddressFactory().getDefaultAddressSpace();\n \t\tListing listing = program.getListing();",
      "parent_sha": "ec039f1df05a0c05d32df84b3da5b8d7439121a6"
    }
  },
  {
    "oid": "043f57d04a89205118f5b38817d0ef3e84d1f6ab",
    "message": "GP-1593 - fixed bug introduced by GP-1593",
    "date": "2023-03-24T19:22:48Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/043f57d04a89205118f5b38817d0ef3e84d1f6ab",
    "details": {
      "sha": "cc5e792d65f22a5c25e8a84965b9e2f069ef336e",
      "filename": "Ghidra/Features/ByteViewer/src/main/java/ghidra/app/plugin/core/byteviewer/IndexMap.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/043f57d04a89205118f5b38817d0ef3e84d1f6ab/Ghidra%2FFeatures%2FByteViewer%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fbyteviewer%2FIndexMap.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/043f57d04a89205118f5b38817d0ef3e84d1f6ab/Ghidra%2FFeatures%2FByteViewer%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fbyteviewer%2FIndexMap.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FByteViewer%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fbyteviewer%2FIndexMap.java?ref=043f57d04a89205118f5b38817d0ef3e84d1f6ab",
      "patch": "@@ -175,7 +175,7 @@ int getFirstActiveFactoryIndex(BigInteger index, FieldFactory[] factories) {\n \t * except for the last line of a block which may end part way in the line.\n \t */\n \tint getLastActiveFactoryIndex(BigInteger index, FieldFactory[] factories) {\n-\t\tfor (int i = factories.length - 1; i > 0; i--) {\n+\t\tfor (int i = factories.length - 1; i >= 0; i--) {\n \t\t\tif (factories[i].isActive(index)) {\n \t\t\t\treturn i;\n \t\t\t}",
      "parent_sha": "fa38ad285d1c48362ebdf1bce045ad20e936f612"
    }
  },
  {
    "oid": "687691f5c5673ab18609b9d629c93102335b5c64",
    "message": "GP-3293: Fixing compilation issue",
    "date": "2023-04-14T19:11:33Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/687691f5c5673ab18609b9d629c93102335b5c64",
    "details": {
      "sha": "5f91b5457a4583fee6f73b3649c87b57bf1bbbab",
      "filename": "Ghidra/Features/Decompiler/ghidra_scripts/RecoverClassesFromRTTIScript.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/687691f5c5673ab18609b9d629c93102335b5c64/Ghidra%2FFeatures%2FDecompiler%2Fghidra_scripts%2FRecoverClassesFromRTTIScript.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/687691f5c5673ab18609b9d629c93102335b5c64/Ghidra%2FFeatures%2FDecompiler%2Fghidra_scripts%2FRecoverClassesFromRTTIScript.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FDecompiler%2Fghidra_scripts%2FRecoverClassesFromRTTIScript.java?ref=687691f5c5673ab18609b9d629c93102335b5c64",
      "patch": "@@ -355,7 +355,7 @@ public String validate() {\n \t\t\treturn (\"There is no open program\");\n \t\t}\n \n-\t\tif (!GhidraProgramUtilities.isAnalyzedFlagSet(currentProgram)) {\n+\t\tif (!GhidraProgramUtilities.isAnalyzed(currentProgram)) {\n \t\t\treturn (\"The program has not been analyzed. Please run auto-analysis and make sure \" +\n \t\t\t\t\"the RTTI analzer is one of the analyzers enabled.\");\n \t\t}",
      "parent_sha": "871d6d951ad059e3a0983e0fee6d2d3600d4c61e"
    }
  },
  {
    "oid": "a6cca75b9e7023b651d7b5f93194e24df9d23060",
    "message": "all mzloader header shorts are now treated as uint\n\nreverting bad code\n\nreverting bad code v2\n\nreverting bad code v3",
    "date": "2024-04-30T17:54:51Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/a6cca75b9e7023b651d7b5f93194e24df9d23060",
    "details": {
      "sha": "5a79a9d6a28b6d0195691b35c6fa72f717a1dcc4",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/MzLoader.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/a6cca75b9e7023b651d7b5f93194e24df9d23060/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fopinion%2FMzLoader.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/a6cca75b9e7023b651d7b5f93194e24df9d23060/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fopinion%2FMzLoader.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fopinion%2FMzLoader.java?ref=a6cca75b9e7023b651d7b5f93194e24df9d23060",
      "patch": "@@ -139,7 +139,7 @@ private void markupHeaders(Program program, FileBytes fileBytes, MzExecutable mz\n \t\t\tMessageLog log, TaskMonitor monitor) {\n \t\tmonitor.setMessage(\"Marking up headers...\");\n \t\tOldDOSHeader header = mz.getHeader();\n-\t\tint blockSize = paragraphsToBytes(header.e_cparhdr());\n+\t\tint blockSize = paragraphsToBytes(Short.toUnsignedInt(header.e_cparhdr()));\n \t\ttry {\n \t\t\tAddress headerSpaceAddr = AddressSpace.OTHER_SPACE.getAddress(0);\n \t\t\tMemoryBlock headerBlock = MemoryBlockUtils.createInitializedBlock(program, true,\n@@ -156,7 +156,7 @@ private void markupHeaders(Program program, FileBytes fileBytes, MzExecutable mz\n \t\t\tif (!relocations.isEmpty()) {\n \t\t\t\tDataType relocationType = relocations.get(0).toDataType();\n \t\t\t\tint len = relocationType.getLength();\n-\t\t\t\taddr = addr.add(header.e_lfarlc());\n+\t\t\t\taddr = addr.add(Short.toUnsignedInt(header.e_lfarlc()));\n \t\t\t\tfor (int i = 0; i < relocations.size(); i++) {\n \t\t\t\t\tmonitor.checkCancelled();\n \t\t\t\t\tDataUtilities.createData(program, addr.add(i * len), relocationType, -1,\n@@ -187,7 +187,7 @@ private void processMemoryBlocks(Program program, FileBytes fileBytes,\n \t\t\tknownSegments.add(space.getAddress((INITIAL_SEGMENT_VAL + header.e_cs()) & 0xffff, 0));\n \t\t}\n \t\t// Allocate an initialized memory block for each segment we know about\n-\t\tint endOffset = pagesToBytes(header.e_cp() - 1) + header.e_cblp();\n+\t\tint endOffset = pagesToBytes(Short.toUnsignedInt(header.e_cp()) - 1) + Short.toUnsignedInt(header.e_cblp());\n \t\tif (endOffset > reader.length()) {\n \t\t\tlog.appendMsg(\n \t\t\t\t\"File is 0x%x bytes but header reports 0x%x\".formatted(reader.length(), endOffset));\n@@ -253,7 +253,7 @@ private void processMemoryBlocks(Program program, FileBytes fileBytes,\n \n \t\t// Allocate an uninitialized memory block for extra minimum required data space\n \t\tif (lastBlock != null) {\n-\t\t\tint extraAllocSize = paragraphsToBytes(header.e_minalloc());\n+\t\t\tint extraAllocSize = paragraphsToBytes(Short.toUnsignedInt(header.e_minalloc()));\n \t\t\tif (extraAllocSize > 0) {\n \t\t\t\tMemoryBlockUtils.createUninitializedBlock(program, false, \"DATA\",\n \t\t\t\t\tlastBlock.getEnd().add(1), extraAllocSize, \"\", \"mz\", true, true, false, log);\n@@ -475,7 +475,7 @@ private Set<RelocationFixup> getRelocationFixups(SegmentedAddressSpace space,\n \t * @return The segmented addresses converted to a file offset\n \t */\n \tprivate int addressToFileOffset(int segment, int offset, OldDOSHeader header) {\n-\t\treturn (short) segment * 16 + offset + paragraphsToBytes(header.e_cparhdr());\n+\t\treturn (short) segment * 16 + offset + paragraphsToBytes(Short.toUnsignedInt(header.e_cparhdr()));\n \t}\n \n \t/**",
      "parent_sha": "586fc9efcddb8e6da98fce075ef0e316869d2418"
    }
  },
  {
    "oid": "cb2108482b0a0ad4daac12da7a4791fc52a428f2",
    "message": "GP-3931 - Fixed rendering of table boolean cells to show as disabled\nwhen not editable",
    "date": "2023-10-26T16:30:44Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/cb2108482b0a0ad4daac12da7a4791fc52a428f2",
    "details": {
      "sha": "bd1f7b3c5ed4b088b14379e062ea5dbb44ec23ee",
      "filename": "Ghidra/Framework/Docking/src/main/java/docking/widgets/table/GBooleanCellRenderer.java",
      "status": "modified",
      "additions": 15,
      "deletions": 11,
      "changes": 26,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/cb2108482b0a0ad4daac12da7a4791fc52a428f2/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Ftable%2FGBooleanCellRenderer.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/cb2108482b0a0ad4daac12da7a4791fc52a428f2/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Ftable%2FGBooleanCellRenderer.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Ftable%2FGBooleanCellRenderer.java?ref=cb2108482b0a0ad4daac12da7a4791fc52a428f2",
      "patch": "@@ -17,6 +17,8 @@\n \n import java.awt.*;\n \n+import javax.swing.JTable;\n+\n import docking.widgets.checkbox.GCheckBox;\n \n public class GBooleanCellRenderer extends GTableCellRenderer {\n@@ -37,8 +39,15 @@ public Component getTableCellRendererComponent(GTableCellRenderingData data) {\n \t\tsuper.getTableCellRendererComponent(data);\n \n \t\tObject value = data.getValue();\n-\t\tcb.setEnabled(true);\n-\t\tsetValue(value);\n+\n+\t\tJTable table = data.getTable();\n+\t\tint row = data.getRowViewIndex();\n+\t\tint col = data.getColumnViewIndex();\n+\t\tboolean isEditable = table.isCellEditable(row, col);\n+\n+\t\tcb.setEnabled(isEditable);\n+\t\tsetValue(value, isEditable);\n+\n \t\treturn this;\n \t}\n \n@@ -73,22 +82,17 @@ public Dimension getPreferredSize() {\n \t\treturn cb.getPreferredSize();\n \t}\n \n-\t/**\n-\t * Sets the <code>Boolean</code> object for the cell being rendered to\n-\t * <code>value</code>.\n-\t *\n-\t * @param value  the boolean value for this cell; if value is\n-\t *          <code>null</code> it sets the text value \"N/A\"\n-\t */\n-\tprotected void setValue(Object value) {\n+\tprotected void setValue(Object value, boolean isEditable) {\n \t\tif (value == null) {\n \t\t\tsetText(\"N/A\");\n \t\t\tcb.setVisible(false);\n \t\t}\n \t\telse {\n \t\t\tsetText(\"\");\n \t\t\tcb.setVisible(true);\n-\t\t\tcb.setSelected(((Boolean) value).booleanValue());\n+\t\t\tboolean isSelected = ((Boolean) value).booleanValue();\n+\t\t\tcb.setSelected(isSelected);\n+\t\t\tsetToolTipText(isSelected ? \"true\" : \"false\" + (!isEditable ? \" (uneditable)\" : \"\"));\n \t\t}\n \t}\n }",
      "parent_sha": "fc0a541562b7b0ba5222eb1a4853bb2f56f69b19"
    }
  },
  {
    "oid": "6705f25da235b2dac0ed3cc1209ee3ad4014e6cf",
    "message": "GP-0 Additional ELF relocation handler change",
    "date": "2024-04-01T21:10:27Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/6705f25da235b2dac0ed3cc1209ee3ad4014e6cf",
    "details": {
      "sha": "0fa448361e8c3105a554d8c332335070847f858d",
      "filename": "Ghidra/Processors/PowerPC/src/main/java/ghidra/app/util/bin/format/elf/relocation/PowerPC_ElfRelocationHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/6705f25da235b2dac0ed3cc1209ee3ad4014e6cf/Ghidra%2FProcessors%2FPowerPC%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Felf%2Frelocation%2FPowerPC_ElfRelocationHandler.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/6705f25da235b2dac0ed3cc1209ee3ad4014e6cf/Ghidra%2FProcessors%2FPowerPC%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Felf%2Frelocation%2FPowerPC_ElfRelocationHandler.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FProcessors%2FPowerPC%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Felf%2Frelocation%2FPowerPC_ElfRelocationHandler.java?ref=6705f25da235b2dac0ed3cc1209ee3ad4014e6cf",
      "patch": "@@ -263,4 +263,4 @@ else if (MemoryBlock.EXTERNAL_BLOCK_NAME.equals(blockName)) {\n \t\treturn new RelocationResult(Status.APPLIED, byteLength);\n \t}\n \n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "01087ba0a8557951ef15f6d19c871ce4f70e2024"
    }
  },
  {
    "oid": "5878f4fd4c240f99965106e3eda2392e7493fedf",
    "message": "GP-4823 - Demangler - initial treatment of char8_t",
    "date": "2024-08-07T18:17:04Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/5878f4fd4c240f99965106e3eda2392e7493fedf",
    "details": {
      "sha": "d6f907aa0e65a863cf30fc30ba3c23b8ad0548a7",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/util/demangler/DemangledDataType.java",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/5878f4fd4c240f99965106e3eda2392e7493fedf/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fdemangler%2FDemangledDataType.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/5878f4fd4c240f99965106e3eda2392e7493fedf/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fdemangler%2FDemangledDataType.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fdemangler%2FDemangledDataType.java?ref=5878f4fd4c240f99965106e3eda2392e7493fedf",
      "patch": "@@ -4,9 +4,9 @@\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -67,6 +67,7 @@ public class DemangledDataType extends DemangledType {\n \tpublic final static String WCHAR_T = \"wchar_t\";\n \tpublic final static String WCHAR16 = \"char16_t\";\n \tpublic final static String WCHAR32 = \"char32_t\";\n+\tpublic final static String CHAR8_T = \"char8_t\";\n \tpublic final static String SHORT = \"short\";\n \tpublic final static String INT = \"int\";\n \tpublic final static String INT0_T = \"int0_t\";\n@@ -94,7 +95,7 @@ public class DemangledDataType extends DemangledType {\n \tprivate static final String UNSIGNED_LONG = \"unsigned long\";\n \n \tpublic final static String[] PRIMITIVES =\n-\t\t{ VOID, BOOL, CHAR, WCHAR_T, WCHAR16, WCHAR32, SHORT, INT, INT0_T, LONG,\n+\t\t{ VOID, BOOL, CHAR, WCHAR_T, WCHAR16, WCHAR32, CHAR8_T, SHORT, INT, INT0_T, LONG,\n \t\t\tLONG_LONG, FLOAT, FLOAT2, DOUBLE, INT128, FLOAT128, LONG_DOUBLE, };\n \n \tprivate int arrayDimensions = 0;\n@@ -256,6 +257,9 @@ else if (WCHAR16.equals(name)) {\n \t\telse if (WCHAR32.equals(name)) {\n \t\t\tdt = WideChar32DataType.dataType;\n \t\t}\n+\t\telse if (CHAR8_T.equals(name)) {\n+\t\t\tdt = UnsignedCharDataType.dataType;\n+\t\t}\n \t\telse if (SHORT.equals(name)) {\n \t\t\tif (isUnsigned()) {\n \t\t\t\tdt = UnsignedShortDataType.dataType;",
      "parent_sha": "e88fe40a1e31417b5ef9a7c70c37cb66380cebeb"
    }
  },
  {
    "oid": "e2d3d20c176ff4f90d6ea01fb353dc9a55b94aec",
    "message": "GP-1 minor cleanup",
    "date": "2022-12-13T03:58:25Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/e2d3d20c176ff4f90d6ea01fb353dc9a55b94aec",
    "details": {
      "sha": "0176e772259b6b300f0400a57d5a9a616c9cac3c",
      "filename": "Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/SleighLanguageProvider.java",
      "status": "modified",
      "additions": 3,
      "deletions": 11,
      "changes": 14,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/e2d3d20c176ff4f90d6ea01fb353dc9a55b94aec/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fprocessors%2Fsleigh%2FSleighLanguageProvider.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/e2d3d20c176ff4f90d6ea01fb353dc9a55b94aec/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fprocessors%2Fsleigh%2FSleighLanguageProvider.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fprocessors%2Fsleigh%2FSleighLanguageProvider.java?ref=e2d3d20c176ff4f90d6ea01fb353dc9a55b94aec",
      "patch": "@@ -108,24 +108,16 @@ public boolean hadLoadFailure() {\n \t\treturn failureCount != 0;\n \t}\n \n-\t@Override\n-\tpublic Language getLanguage(LanguageID languageId) {\n-\t\tLanguage language = languages.get(languageId);\n-\t\tif (language == null) {\n-\t\t\tlanguage = getNewSleigh(languageId);\n-\t\t}\n-\t\treturn language;\n-\t}\n-\n \t@Override\n \tpublic boolean isLanguageLoaded(LanguageID languageId) {\n \t\treturn languages.get(languageId) != null;\n \t}\n \n-\tprivate SleighLanguage getNewSleigh(LanguageID languageId) {\n+\t@Override\n+\tpublic Language getLanguage(LanguageID languageId) {\n \t\tSleighLanguageDescription description = descriptions.get(languageId);\n \t\tSleighLanguage lang = languages.get(languageId);\n-\t\tif (lang == null) {\n+\t\tif (lang == null && description != null) {\n \t\t\ttry {\n \t\t\t\tlang = new SleighLanguage(description);\n \t\t\t\tlanguages.put(languageId, lang);",
      "parent_sha": "12cb9010c565777a431b152ba8ad6b9509321468"
    }
  },
  {
    "oid": "02a6c1365f9e323d32dd2aa0cf7241bdc02f70e0",
    "message": "Bugfix",
    "date": "2020-01-27T17:51:57Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/02a6c1365f9e323d32dd2aa0cf7241bdc02f70e0",
    "details": {
      "sha": "6555dffb13a863a0014407313d1d0116bf68fa1a",
      "filename": "Ghidra/Framework/Docking/src/main/java/docking/widgets/table/GTableAutoLookup.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/02a6c1365f9e323d32dd2aa0cf7241bdc02f70e0/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Ftable%2FGTableAutoLookup.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/02a6c1365f9e323d32dd2aa0cf7241bdc02f70e0/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Ftable%2FGTableAutoLookup.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Ftable%2FGTableAutoLookup.java?ref=02a6c1365f9e323d32dd2aa0cf7241bdc02f70e0",
      "patch": "@@ -57,8 +57,12 @@ public String getValueString(int row, int col) {\n \n \t@Override\n \tpublic boolean isSorted(int column) {\n-\t\tSortedTableModel sortedModel = (SortedTableModel) table.getModel();\n-\t\treturn column == sortedModel.getPrimarySortColumnIndex();\n+\n+\t\tif (table.getModel() instanceof SortedTableModel) {\n+\t\t\tSortedTableModel sortedModel = (SortedTableModel) table.getModel();\n+\t\t\treturn column == sortedModel.getPrimarySortColumnIndex();\n+\t\t}\n+\t\treturn false;\n \t}\n \n \t@Override",
      "parent_sha": "3aea0c494be17becca897186d203ffb1e5e298ed"
    }
  },
  {
    "oid": "f599ab1623cf21a89fb3c32b8e473502dce78d2b",
    "message": "GT-3049 Fixes for return storage commit",
    "date": "2019-09-05T20:24:29Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/f599ab1623cf21a89fb3c32b8e473502dce78d2b",
    "details": {
      "sha": "9716959d9b1aed70beeee505938d62a54b3558ed",
      "filename": "Ghidra/Features/Decompiler/src/main/java/ghidra/app/plugin/core/decompile/actions/CommitParamsAction.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/f599ab1623cf21a89fb3c32b8e473502dce78d2b/Ghidra%2FFeatures%2FDecompiler%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdecompile%2Factions%2FCommitParamsAction.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/f599ab1623cf21a89fb3c32b8e473502dce78d2b/Ghidra%2FFeatures%2FDecompiler%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdecompile%2Factions%2FCommitParamsAction.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FDecompiler%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdecompile%2Factions%2FCommitParamsAction.java?ref=f599ab1623cf21a89fb3c32b8e473502dce78d2b",
      "patch": "@@ -90,8 +90,9 @@ public void actionPerformed(ActionContext context) {\n \t\t\tif (hfunc.getFunction().getSignatureSource() == SourceType.USER_DEFINED) {\n \t\t\t\tsource = SourceType.USER_DEFINED;\n \t\t\t}\n-\t\t\tHighFunctionDBUtil.commitParamsToDatabase(hfunc, true, source);\n+\t\t\t\n \t\t\tHighFunctionDBUtil.commitReturnToDatabase(hfunc, source);\n+\t\t\tHighFunctionDBUtil.commitParamsToDatabase(hfunc, true, source);\n \t\t}\n \t\tcatch (DuplicateNameException e) {\n \t\t\tthrow new AssertException(\"Unexpected exception\", e);",
      "parent_sha": "bfcadef17dd8fe1d4d1f02699f6ca786f11836c1"
    }
  },
  {
    "oid": "aea2fe5f7734fd6a6c6b33df57925bba9258d478",
    "message": "GP-0 fixed AVR8 Wlo test",
    "date": "2022-10-06T11:20:00Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/aea2fe5f7734fd6a6c6b33df57925bba9258d478",
    "details": {
      "sha": "afb69f97d08542cbb207a74e0d5c1917e2f16d3c",
      "filename": "Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/app/plugin/assembler/sleigh/AVR8AssemblyTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/aea2fe5f7734fd6a6c6b33df57925bba9258d478/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Ftest%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fassembler%2Fsleigh%2FAVR8AssemblyTest.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/aea2fe5f7734fd6a6c6b33df57925bba9258d478/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Ftest%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fassembler%2Fsleigh%2FAVR8AssemblyTest.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Ftest%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fassembler%2Fsleigh%2FAVR8AssemblyTest.java?ref=aea2fe5f7734fd6a6c6b33df57925bba9258d478",
      "patch": "@@ -61,7 +61,7 @@ public void testAssemble_call_0x256() {\n \t}\n \n \t@Test\n-\tpublic void testAssemble_com_Wlo() {\n-\t\tassertOneCompatRestExact(\"com Wlo\", \"80:95\", 0x006fba * 2);\n+\tpublic void testAssemble_com_R24() {\n+\t\tassertOneCompatRestExact(\"com R24\", \"80:95\", 0x006fba * 2);\n \t}\n }",
      "parent_sha": "6256f00b2d2790e8352acc4adec794bb98546d5a"
    }
  },
  {
    "oid": "4fd990dfb58c531a6c856522aecc05eb92bb8f92",
    "message": "GP-2218 corrected NPE for multi-data settings",
    "date": "2022-06-22T15:17:46Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/4fd990dfb58c531a6c856522aecc05eb92bb8f92",
    "details": {
      "sha": "a7102eea02a89c3c6ce79d886336f399ed08fb56",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/data/AbstractSettingsDialog.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/4fd990dfb58c531a6c856522aecc05eb92bb8f92/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdata%2FAbstractSettingsDialog.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/4fd990dfb58c531a6c856522aecc05eb92bb8f92/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdata%2FAbstractSettingsDialog.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdata%2FAbstractSettingsDialog.java?ref=4fd990dfb58c531a6c856522aecc05eb92bb8f92",
      "patch": "@@ -70,7 +70,8 @@ protected AbstractSettingsDialog(String title, SettingsDefinition[] settingDefin\n \t\tthis.settingsDefinitions = settingDefinitions;\n \t\tsettings = new SettingsImpl(originalSettings) {\n \t\t\tpublic boolean isChangeAllowed(SettingsDefinition settingsDefinition) {\n-\t\t\t\treturn originalSettings.isChangeAllowed(settingsDefinition);\n+\t\t\t\treturn originalSettings == null ||\n+\t\t\t\t\toriginalSettings.isChangeAllowed(settingsDefinition);\n \t\t\t}\n \t\t};\n \t\tdefaultSettings = settings.getDefaultSettings();",
      "parent_sha": "be52dafc09dcb5f608462c6bc557fbfb87476705"
    }
  },
  {
    "oid": "01984fa136281eee39295dc7fd345446bc8f8c07",
    "message": "GP-5225 fix \"FAIL TO CLOSE file.zip\" warning",
    "date": "2024-12-31T21:49:22Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/01984fa136281eee39295dc7fd345446bc8f8c07",
    "details": {
      "sha": "b9613d5c7b1b87fb2471ad6ccaab678401f60a56",
      "filename": "Ghidra/Features/FileFormats/src/main/java/ghidra/file/formats/zip/ZipFileSystemFactory.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/01984fa136281eee39295dc7fd345446bc8f8c07/Ghidra%2FFeatures%2FFileFormats%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffile%2Fformats%2Fzip%2FZipFileSystemFactory.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/01984fa136281eee39295dc7fd345446bc8f8c07/Ghidra%2FFeatures%2FFileFormats%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffile%2Fformats%2Fzip%2FZipFileSystemFactory.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FFileFormats%2Fsrc%2Fmain%2Fjava%2Fghidra%2Ffile%2Fformats%2Fzip%2FZipFileSystemFactory.java?ref=01984fa136281eee39295dc7fd345446bc8f8c07",
      "patch": "@@ -4,9 +4,9 @@\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -32,8 +32,8 @@ public class ZipFileSystemFactory\n \t * Use \"-Dghidra.file.formats.zip.ZipFileSystemFactory.USE_BUILTIN_ZIP_SUPPORT=true\" jvm\n \t * startup option to disable use of 7zip libraries when opening zip filesystems.\n \t */\n-\tprivate static boolean USE_BUILTIN_ZIP_SUPPORT = Boolean\n-\t\t\t.getBoolean(\"ghidra.file.formats.zip.ZipFileSystemFactory.USE_BUILTIN_ZIP_SUPPORT\");\n+\tprivate static boolean USE_BUILTIN_ZIP_SUPPORT =\n+\t\tBoolean.getBoolean(\"ghidra.file.formats.zip.ZipFileSystemFactory.USE_BUILTIN_ZIP_SUPPORT\");\n \n \tprivate static final int START_BYTES_REQUIRED = 2;\n \n@@ -84,6 +84,7 @@ public GFileSystem create(FSRLRoot targetFSRL, ByteProvider byteProvider,\n \t\t\t\t\tZipFileSystemBuiltin.TEMPFILE_PREFIX, monitor);\n \t\t\t\tdeleteZipFileWhenDone = true;\n \t\t\t}\n+\t\t\tFSUtilities.uncheckedClose(byteProvider, null);\n \t\t\tZipFileSystemBuiltin fs = new ZipFileSystemBuiltin(targetFSRL, fsService);\n \t\t\ttry {\n \t\t\t\tfs.mount(zipFile, deleteZipFileWhenDone, monitor);",
      "parent_sha": "067ddfe2e065c3c6c36e153b9431b07793ce89f7"
    }
  },
  {
    "oid": "8e09813393ff1d4695eda408d27785d902f7fdbc",
    "message": "GP-5406 Correct ELF import issue for MIPS debug file which fails on\n.reginfo data read",
    "date": "2025-02-25T14:57:25Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/8e09813393ff1d4695eda408d27785d902f7fdbc",
    "details": {
      "sha": "d85ae85733e08d29420e56f4598a00da2ebb31bd",
      "filename": "Ghidra/Processors/MIPS/src/main/java/ghidra/app/util/bin/format/elf/extend/MIPS_ElfExtension.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/8e09813393ff1d4695eda408d27785d902f7fdbc/Ghidra%2FProcessors%2FMIPS%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Felf%2Fextend%2FMIPS_ElfExtension.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/8e09813393ff1d4695eda408d27785d902f7fdbc/Ghidra%2FProcessors%2FMIPS%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Felf%2Fextend%2FMIPS_ElfExtension.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FProcessors%2FMIPS%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Felf%2Fextend%2FMIPS_ElfExtension.java?ref=8e09813393ff1d4695eda408d27785d902f7fdbc",
      "patch": "@@ -4,9 +4,9 @@\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -564,7 +564,6 @@ else if (headertype == SHT_MIPS_REGINFO.value) {\n \t\t\tprocessMipsOptions(elfLoadHelper, mipsOptionsAddr);\n \t\t}\n \t\tif (regInfoAddr != null) {\n-\t\t\t// TODO: don't do this if mips options present and processed\n \t\t\tprocessMipsRegInfo(elfLoadHelper, regInfoAddr);\n \t\t}\n \t}\n@@ -645,7 +644,7 @@ private void processMipsOptions(ElfLoadHelper elfLoadHelper, Address mipsOptions\n \t\t\t}\n \t\t}\n \t\tcatch (AddressOutOfBoundsException | MemoryAccessException e) {\n-\t\t\t// ignore\n+\t\t\t// Ignore - No memory defined - possible *.debug file\n \t\t}\n \t}\n \n@@ -723,6 +722,10 @@ private void processMipsRegInfo(ElfLoadHelper elfLoadHelper, Address regInfoAddr\n \t\t\ttry {\n \t\t\t\t// Create gp0 symbol in default space which represents a constant value (pinned)\n \t\t\t\tScalar gp0Value = gpValueComponent.getScalar(0);\n+\t\t\t\tif (gp0Value == null) {\n+\t\t\t\t\t// No memory defined - possible *.debug file\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n \t\t\t\tlong gp0 = gp0Value.getUnsignedValue();\n \t\t\t\tif (multipleGp0.get() || otherGp0Value != null) {\n \t\t\t\t\tif (multipleGp0.get() || gp0 != otherGp0Value) {",
      "parent_sha": "f6671b7c2182e4e59892cd7f767c22a7ef527997"
    }
  },
  {
    "oid": "68bb1e182ab6ef5a02fff292feef8af9f8ac30d5",
    "message": "Fixed Go To for functions with default names so that a table of choices\nis not shown",
    "date": "2024-11-19T20:09:12Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/68bb1e182ab6ef5a02fff292feef8af9f8ac30d5",
    "details": {
      "sha": "fc5135856147528d6c856775e0ee3657c76c6892",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/util/navigation/SymbolSearcher.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/68bb1e182ab6ef5a02fff292feef8af9f8ac30d5/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fnavigation%2FSymbolSearcher.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/68bb1e182ab6ef5a02fff292feef8af9f8ac30d5/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fnavigation%2FSymbolSearcher.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fnavigation%2FSymbolSearcher.java?ref=68bb1e182ab6ef5a02fff292feef8af9f8ac30d5",
      "patch": "@@ -184,7 +184,9 @@ private void parseDynamic(Program program, List<ProgramLocation> locations) {\n \t\t\treturn;\n \t\t}\n \t\tSymbol s = program.getSymbolTable().getPrimarySymbol(address);\n-\t\taddSymbolIfMatches(s, locations);\n+\t\tif (s.isDynamic()) { // non-dynamic symbols have already been searched (ex, FUN_12345678)\n+\t\t\taddSymbolIfMatches(s, locations);\n+\t\t}\n \t}\n \n \tprivate void searchDefinedSymbols(Program program, List<ProgramLocation> locations) {",
      "parent_sha": "9421ec0ab0b282f0bc81fe2578642e3df2fabec1"
    }
  },
  {
    "oid": "ecade191837efa810532343272c054542001c2ce",
    "message": "GP-3467 rtti script fixed issue clearing/creating mangled typeinfo-name mangled string of correct length. Was breaking when more than one existing dt in string range because was only clearing first one.",
    "date": "2023-05-31T18:01:55Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/ecade191837efa810532343272c054542001c2ce",
    "details": {
      "sha": "abfcf8ef6523170a2808f3e3fcf3ac79158ed1d0",
      "filename": "Ghidra/Features/Decompiler/ghidra_scripts/classrecovery/RTTIGccClassRecoverer.java",
      "status": "modified",
      "additions": 156,
      "deletions": 99,
      "changes": 255,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/ecade191837efa810532343272c054542001c2ce/Ghidra%2FFeatures%2FDecompiler%2Fghidra_scripts%2Fclassrecovery%2FRTTIGccClassRecoverer.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/ecade191837efa810532343272c054542001c2ce/Ghidra%2FFeatures%2FDecompiler%2Fghidra_scripts%2Fclassrecovery%2FRTTIGccClassRecoverer.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FDecompiler%2Fghidra_scripts%2Fclassrecovery%2FRTTIGccClassRecoverer.java?ref=ecade191837efa810532343272c054542001c2ce",
      "patch": "@@ -17,76 +17,29 @@\n package classrecovery;\n \n import java.io.UnsupportedEncodingException;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n import ghidra.app.cmd.label.DemanglerCmd;\n import ghidra.app.plugin.core.analysis.ReferenceAddressPair;\n import ghidra.app.util.NamespaceUtils;\n+import ghidra.app.util.demangler.DemangledObject;\n+import ghidra.app.util.demangler.DemanglerUtil;\n import ghidra.framework.plugintool.PluginTool;\n import ghidra.program.flatapi.FlatProgramAPI;\n-import ghidra.program.model.address.Address;\n-import ghidra.program.model.address.AddressIterator;\n-import ghidra.program.model.address.AddressOutOfBoundsException;\n-import ghidra.program.model.address.AddressRange;\n-import ghidra.program.model.address.AddressRangeIterator;\n-import ghidra.program.model.address.AddressSet;\n-import ghidra.program.model.address.AddressSetView;\n-import ghidra.program.model.data.ArrayDataType;\n-import ghidra.program.model.data.CategoryPath;\n-import ghidra.program.model.data.CharDataType;\n-import ghidra.program.model.data.DataType;\n-import ghidra.program.model.data.DataTypeComponent;\n-import ghidra.program.model.data.DataTypeConflictHandler;\n-import ghidra.program.model.data.InvalidDataTypeException;\n-import ghidra.program.model.data.LongDataType;\n-import ghidra.program.model.data.LongLongDataType;\n-import ghidra.program.model.data.Pointer;\n-import ghidra.program.model.data.PointerDataType;\n-import ghidra.program.model.data.PointerTypedef;\n-import ghidra.program.model.data.StringDataType;\n-import ghidra.program.model.data.Structure;\n-import ghidra.program.model.data.StructureDataType;\n-import ghidra.program.model.data.UnsignedIntegerDataType;\n+import ghidra.program.model.address.*;\n+import ghidra.program.model.data.*;\n+import ghidra.program.model.data.DataUtilities.ClearDataMode;\n import ghidra.program.model.lang.Register;\n-import ghidra.program.model.listing.Bookmark;\n-import ghidra.program.model.listing.BookmarkType;\n-import ghidra.program.model.listing.CircularDependencyException;\n-import ghidra.program.model.listing.Data;\n-import ghidra.program.model.listing.Function;\n-import ghidra.program.model.listing.FunctionManager;\n-import ghidra.program.model.listing.Instruction;\n-import ghidra.program.model.listing.InstructionIterator;\n-import ghidra.program.model.listing.Program;\n-import ghidra.program.model.mem.DumbMemBufferImpl;\n-import ghidra.program.model.mem.MemBuffer;\n-import ghidra.program.model.mem.Memory;\n-import ghidra.program.model.mem.MemoryAccessException;\n-import ghidra.program.model.mem.MemoryBlock;\n+import ghidra.program.model.listing.*;\n+import ghidra.program.model.mem.*;\n import ghidra.program.model.scalar.Scalar;\n-import ghidra.program.model.symbol.Namespace;\n-import ghidra.program.model.symbol.Reference;\n-import ghidra.program.model.symbol.ReferenceIterator;\n-import ghidra.program.model.symbol.ReferenceManager;\n-import ghidra.program.model.symbol.SourceType;\n-import ghidra.program.model.symbol.Symbol;\n-import ghidra.program.model.symbol.SymbolIterator;\n+import ghidra.program.model.symbol.*;\n+import ghidra.program.model.util.CodeUnitInsertionException;\n import ghidra.program.util.ProgramLocation;\n import ghidra.program.util.ProgramMemoryUtil;\n import ghidra.util.Msg;\n-import ghidra.util.bytesearch.GenericByteSequencePattern;\n-import ghidra.util.bytesearch.GenericMatchAction;\n-import ghidra.util.bytesearch.Match;\n-import ghidra.util.bytesearch.MemoryBytePatternSearcher;\n-import ghidra.util.exception.CancelledException;\n-import ghidra.util.exception.DuplicateNameException;\n-import ghidra.util.exception.InvalidInputException;\n+import ghidra.util.bytesearch.*;\n+import ghidra.util.exception.*;\n import ghidra.util.task.TaskMonitor;\n \n public class RTTIGccClassRecoverer extends RTTIClassRecoverer {\n@@ -2664,27 +2617,51 @@ private Symbol createDemangledTypeinfoSymbol(Address typeinfoAddress)\n \t\tif (typeinfoNameAddress == null) {\n \t\t\treturn null;\n \t\t}\n-\n-\t\tString mangledTypeinfoString = getStringAtAddress(typeinfoNameAddress);\n-\n+\t\t\n+\t\tboolean existingString = false;\n+\t\t\n+\t\t// get defined string if defined already\n+\t\tString mangledTypeinfoString = getDefinedStringAt(typeinfoNameAddress);\n+\t\tif(mangledTypeinfoString != null) {\n+\t\t\texistingString = true;\n+\t\t}\n+\t\t\n+\t\tif(!existingString) {\n+\t\t\tmangledTypeinfoString = getStringFromMemory(typeinfoNameAddress);\n+\t\t}\n+\t\t\n \t\tif (mangledTypeinfoString == null) {\n \t\t\tMsg.debug(this, \"Could not get typeinfo string from \" + typeinfoAddress.toString());\n \t\t\treturn null;\n \t\t}\n+\t\t\n+\t\tString mangledLabel = mangledTypeinfoString;\n \n-\t\tif (mangledTypeinfoString.startsWith(\"*\")) {\n-\t\t\tmangledTypeinfoString = mangledTypeinfoString.substring(1);\n+\t\tif (mangledLabel.startsWith(\"*\")) {\n+\t\t\tmangledLabel = mangledTypeinfoString.substring(1);\n \t\t}\n \n-\t\tif (mangledTypeinfoString.startsWith(\".rdata$\")) {\n-\t\t\tmangledTypeinfoString = mangledTypeinfoString.substring(7);\n+\t\tif (mangledLabel.startsWith(\".rdata$\")) {\n+\t\t\tmangledLabel = mangledTypeinfoString.substring(7);\n+\t\t}\n+\t\tmangledLabel = \"_ZTS\" + mangledLabel;\n+\t\t\n+\t\tif(!isTypeinfoNameString(mangledLabel)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\tif(!existingString) {\n+\t\t\tboolean created = createString(typeinfoNameAddress, mangledTypeinfoString.length());\n+\t\t\tif(!created) {\n+\t\t\t\tMsg.debug(this, \"Could not create string at \" + typeinfoNameAddress);\n+\t\t\t}\n \t\t}\n-\t\tmangledTypeinfoString = \"_ZTS\" + mangledTypeinfoString;\n \n-\t\tsymbolTable.createLabel(typeinfoNameAddress, mangledTypeinfoString, globalNamespace, SourceType.ANALYSIS);\n+\t\t// create mangled label\n+\t\tsymbolTable.createLabel(typeinfoNameAddress, mangledLabel, globalNamespace, SourceType.ANALYSIS);\n \n-\t\t// demangle the symbol\n-\t\tDemanglerCmd cmd = new DemanglerCmd(typeinfoNameAddress, mangledTypeinfoString);\n+\t\t// demangle the symbol to create demangled symbol\n+\t\tDemanglerCmd cmd = new DemanglerCmd(typeinfoNameAddress, mangledLabel);\n \t\tcmd.applyTo(program, monitor);\n \n \t\t// get the newly created symbol to get the namespace\n@@ -2730,6 +2707,19 @@ private Symbol createDemangledTypeinfoSymbol(Address typeinfoAddress)\n \n \t\treturn newSymbol;\n \t}\n+\t\n+\tprivate boolean isTypeinfoNameString(String string) {\n+\t\t\n+\t\tDemangledObject demangledObject = DemanglerUtil.demangle(string);\n+\t\tif(demangledObject == null) {\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\tif(demangledObject.getName().equals(\"typeinfo-name\")) {\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\t}\n \n \tprivate Address getTypeinfoNameAddress(Address typeinfoAddress) {\n \n@@ -2756,42 +2746,109 @@ private Address getTypeinfoNameAddress(Address typeinfoAddress) {\n \n \t\treturn typeinfoNameAddress;\n \t}\n-\n-\tString getStringAtAddress(Address address) throws CancelledException {\n-\n-\t\tData stringData = api.getDataAt(address);\n-\t\tif (stringData == null) {\n-\n-\t\t\t// account for randomly occurring bad strings sucking up the real expected\n-\t\t\t// string\n-\t\t\tData dataContaining = api.getDataContaining(address);\n-\t\t\tif (dataContaining != null) {\n-\t\t\t\tapi.clearListing(dataContaining.getAddress());\n-\t\t\t}\n-\t\t\t// create string\n-\t\t\ttry {\n-\t\t\t\tstringData = api.createAsciiString(address);\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tMsg.debug(this, \"Could not create string at \" + address);\n-\t\t\t\treturn null;\n-\t\t\t}\n-\n-\t\t\tif (stringData == null) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\n+\t\n+\t\n+\tprivate boolean createString(Address address, int len) {\n+\t\ttry {\n+\t\t\tDataUtilities.createData(program, address, new TerminatedStringDataType(), len, ClearDataMode.CLEAR_ALL_CONFLICT_DATA);\n+\t\t\treturn true;\n+\t\t}\n+\t\tcatch (CodeUnitInsertionException e) {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\t\n+\tprivate String getDefinedStringAt(Address address) {\n+\t\t\n+\t\tListing listing = program.getListing();\n+\t\tData stringData = listing.getDataAt(address);\n+\t\t\n+\t\tif(stringData == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\tStringDataType stringDT = new StringDataType();\n+\t\t\n+\t\tif (!stringData.getBaseDataType().isEquivalent(stringDT)) {\n+\t\t\treturn null;\n \t\t}\n+\t\t\n+\n \t\tint stringLen = stringData.getLength();\n \t\tMemBuffer buf = new DumbMemBufferImpl(program.getMemory(), address);\n \n-\t\tStringDataType sdt = new StringDataType();\n-\n-\t\tString str;\n-\n-\t\tstr = (String) sdt.getValue(buf, sdt.getDefaultSettings(), stringLen);\n+\t\tTerminatedStringDataType sdt = new TerminatedStringDataType();\n+\t\tString str = (String) sdt.getValue(buf, sdt.getDefaultSettings(), stringLen);\n \n \t\treturn str;\n \t}\n+\t\n+\tprivate String getStringFromMemory(Address address) {\n+\t\t\n+\t\tint stringLen = getStringLen(address);\n+\t\tif(stringLen <= 0) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\tTerminatedStringDataType sdt = new TerminatedStringDataType();\n+\t\tMemBuffer buf = new DumbMemBufferImpl(program.getMemory(), address);\n+\t\treturn (String) sdt.getValue(buf, sdt.getDefaultSettings(), stringLen);\n+\n+\t}\n+\t\n+\tprivate int getStringLen(Address addr) {\n+\t\t\n+\t\tint len = 0;\n+\t\t\n+\t\twhile(isAscii(addr)) {\n+\t\t\tlen++;\n+\t\t\taddr = addr.add(1);\n+\t\t}\n+\t\t\n+\t\tif(isNull(addr)) {\n+\t\t\treturn len+1;\n+\t\t}\n+\t\t\n+\t\treturn 0;\n+\t}\n+\t\n+\tprivate boolean isAsciiPrintable(char ch) {\n+\t      return ch >= 32 && ch < 127;\n+\t  }\n+\t\n+\tprivate boolean isAscii(Address addr) {\n+\t\t\n+\t\tMemory mem = program.getMemory();\n+\t\ttry {\n+\t\t\tbyte byte1 = mem.getByte(addr);\n+\t\t\tchar c = (char) byte1;\n+\t\t\tif(isAsciiPrintable(c)) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\treturn false;\n+\t\t\t\n+\t\t}\n+\t\tcatch (MemoryAccessException e) {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\t\n+\tprivate boolean isNull(Address addr) {\n+\t\t\n+\t\tMemory mem = program.getMemory();\n+\t\ttry {\n+\t\t\tbyte byte1 = mem.getByte(addr);\n+\t\t\t\n+\t\t\tif(byte1 == 0x0) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\treturn false;\n+\t\t\t\n+\t\t}\n+\t\tcatch (MemoryAccessException e) {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n \n \n \t/**",
      "parent_sha": "dd85623f3dd933651f583d36dba016a5ef750427"
    }
  },
  {
    "oid": "10702d056950155be0e1dbdc13e5ba37e68f00d4",
    "message": "PDB - adjust dump output lines on PdbDebugInfo",
    "date": "2020-09-30T16:16:46Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/10702d056950155be0e1dbdc13e5ba37e68f00d4",
    "details": {
      "sha": "8d3c46877b4b6f8d621a45bb35428cafa2ab3271",
      "filename": "Ghidra/Features/PDB/src/main/java/ghidra/app/util/bin/format/pdb2/pdbreader/PdbDebugInfo.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/10702d056950155be0e1dbdc13e5ba37e68f00d4/Ghidra%2FFeatures%2FPDB%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Fpdb2%2Fpdbreader%2FPdbDebugInfo.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/10702d056950155be0e1dbdc13e5ba37e68f00d4/Ghidra%2FFeatures%2FPDB%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Fpdb2%2Fpdbreader%2FPdbDebugInfo.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FPDB%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Futil%2Fbin%2Fformat%2Fpdb2%2Fpdbreader%2FPdbDebugInfo.java?ref=10702d056950155be0e1dbdc13e5ba37e68f00d4",
      "patch": "@@ -528,15 +528,15 @@ protected void processFileInformation(PdbByteReader reader, TaskMonitor monitor,\n \t * @throws IOException Upon IOException writing to the {@link Writer}.\n \t */\n \tprotected void dump(Writer writer) throws IOException {\n-\t\twriter.write(\"DebugInfoHeader-------------------------------------\\n\");\n+\t\twriter.write(\"DebugInfoHeader---------------------------------------------\\n\");\n \t\tdumpHeader(writer);\n-\t\twriter.write(\"\\nEnd DebugInfoHeader---------------------------------\\n\");\n-\t\twriter.write(\"DebugInfoInternalSubstreams-------------------------\\n\");\n+\t\twriter.write(\"\\nEnd DebugInfoHeader-----------------------------------------\\n\");\n+\t\twriter.write(\"DebugInfoInternalSubstreams---------------------------------\\n\");\n \t\tdumpInternalSubstreams(writer);\n-\t\twriter.write(\"\\nEnd DebugInfoInternalSubstreams---------------------\\n\");\n-\t\twriter.write(\"DebugInfoAdditionalSubstreams-----------------------\\n\");\n+\t\twriter.write(\"\\nEnd DebugInfoInternalSubstreams-----------------------------\\n\");\n+\t\twriter.write(\"DebugInfoAdditionalSubstreams-------------------------------\\n\");\n \t\tdumpAdditionalSubstreams(writer);\n-\t\twriter.write(\"\\nEnd DebugInfoAdditionalSubstreams-------------------\\n\");\n+\t\twriter.write(\"\\nEnd DebugInfoAdditionalSubstreams---------------------------\\n\");\n \t}\n \n \t/**",
      "parent_sha": "92ebc36382512445d1c84517732d13d64356dda5"
    }
  },
  {
    "oid": "afbfd0b7b6f30c2e84345082f6137ccc114dd5d4",
    "message": "GP-2926: Fix swapped step icons",
    "date": "2022-12-19T20:27:06Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/afbfd0b7b6f30c2e84345082f6137ccc114dd5d4",
    "details": {
      "sha": "e8d721491426f9ca3783066f3cee818f65d74c6a",
      "filename": "Ghidra/Debug/Debugger/src/main/java/ghidra/app/plugin/core/debug/gui/DebuggerResources.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/afbfd0b7b6f30c2e84345082f6137ccc114dd5d4/Ghidra%2FDebug%2FDebugger%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdebug%2Fgui%2FDebuggerResources.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/afbfd0b7b6f30c2e84345082f6137ccc114dd5d4/Ghidra%2FDebug%2FDebugger%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdebug%2Fgui%2FDebuggerResources.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FDebug%2FDebugger%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fdebug%2Fgui%2FDebuggerResources.java?ref=afbfd0b7b6f30c2e84345082f6137ccc114dd5d4",
      "patch": "@@ -86,9 +86,9 @@ public interface DebuggerResources {\n \n \tIcon ICON_STEP_INTO = new GIcon(\"icon.debugger.step.into\");\n \tIcon ICON_STEP_OVER = new GIcon(\"icon.debugger.step.over\");\n-\tIcon ICON_SKIP_OVER = new GIcon(\"icon.debugger.step.back\");\n+\tIcon ICON_SKIP_OVER = new GIcon(\"icon.debugger.skip.over\");\n \tIcon ICON_STEP_FINISH = new GIcon(\"icon.debugger.step.finish\");\n-\tIcon ICON_STEP_BACK = new GIcon(\"icon.debugger.skip.over\");\n+\tIcon ICON_STEP_BACK = new GIcon(\"icon.debugger.step.back\");\n \tIcon ICON_STEP_LAST = new GIcon(\"icon.debugger.step.last\");\n \n \tIcon ICON_SNAP_FORWARD = new GIcon(\"icon.debugger.snap.forward\");",
      "parent_sha": "f65b3c4a05fe7a8bd5c7c6200d71840b98eb49bf"
    }
  },
  {
    "oid": "2a2251c04cf47523fc79742f0ed65cb1cdbb2bd6",
    "message": "Fixed bad help location",
    "date": "2025-02-14T16:42:21Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/2a2251c04cf47523fc79742f0ed65cb1cdbb2bd6",
    "details": {
      "sha": "eaa43231d6ecc3546f7dc0b44021bb2803db7a8f",
      "filename": "Ghidra/Framework/Docking/src/main/java/docking/widgets/tree/GTree.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/2a2251c04cf47523fc79742f0ed65cb1cdbb2bd6/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Ftree%2FGTree.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/2a2251c04cf47523fc79742f0ed65cb1cdbb2bd6/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Ftree%2FGTree.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FDocking%2Fsrc%2Fmain%2Fjava%2Fdocking%2Fwidgets%2Ftree%2FGTree.java?ref=2a2251c04cf47523fc79742f0ed65cb1cdbb2bd6",
      "patch": "@@ -1850,7 +1850,7 @@ public void actionPerformed(ActionContext context) {\n \t\t\t\tInteger.toString(subGroupIndex++)\n \t\t\t)\n \t\t);\n-\t\tcopyFormattedAction.setHelpLocation(new HelpLocation(\"Trees\", \"Copy_Special\"));\n+\t\tcopyFormattedAction.setHelpLocation(new HelpLocation(\"Trees\", \"Copy_Formatted\"));\n \t\t//@formatter:on\n \n \t\tGTreeAction activateFilterAction = new GTreeAction(\"Table/Tree Activate Filter\", owner) {",
      "parent_sha": "391101cf980979be7bce3153e28e9932ef2b88c0"
    }
  },
  {
    "oid": "e84e31e6dd066ad970c50e4ca7240d0275d2f2ba",
    "message": "Prevent multiple module root entries when launched from debugger",
    "date": "2020-09-28T18:38:01Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/e84e31e6dd066ad970c50e4ca7240d0275d2f2ba",
    "details": {
      "sha": "e0e3fb594c5549648c8621eb1f785d11a9d5ab60",
      "filename": "Ghidra/Framework/Utility/src/main/java/ghidra/GhidraApplicationLayout.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/e84e31e6dd066ad970c50e4ca7240d0275d2f2ba/Ghidra%2FFramework%2FUtility%2Fsrc%2Fmain%2Fjava%2Fghidra%2FGhidraApplicationLayout.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/e84e31e6dd066ad970c50e4ca7240d0275d2f2ba/Ghidra%2FFramework%2FUtility%2Fsrc%2Fmain%2Fjava%2Fghidra%2FGhidraApplicationLayout.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FUtility%2Fsrc%2Fmain%2Fjava%2Fghidra%2FGhidraApplicationLayout.java?ref=e84e31e6dd066ad970c50e4ca7240d0275d2f2ba",
      "patch": "@@ -145,7 +145,7 @@ protected Map<String, GModule> findGhidraModules() throws IOException {\n \n \t\t// Find standard module root directories from within the application root directories\n \t\tCollection<ResourceFile> moduleRootDirectories =\n-\t\t\tModuleUtilities.findModuleRootDirectories(applicationRootDirs, new ArrayList<>());\n+\t\t\tModuleUtilities.findModuleRootDirectories(applicationRootDirs, new LinkedHashSet<>());\n \n \t\t// Find installed extension modules\n \t\tfor (ResourceFile extensionInstallDir : extensionInstallationDirs) {",
      "parent_sha": "aa299897c6b84e16ecf228d82cf8957a9529b819"
    }
  },
  {
    "oid": "3cd3d2b68921b9d789fddcd258e067033711fc9b",
    "message": "Fixed bug that caused the exporter dialog to sometimes close immediately",
    "date": "2021-03-18T20:23:40Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/3cd3d2b68921b9d789fddcd258e067033711fc9b",
    "details": {
      "sha": "56626eccaf6346f93dd1cccf5223572ebdb255e5",
      "filename": "Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/exporter/ExporterDialog.java",
      "status": "modified",
      "additions": 60,
      "deletions": 7,
      "changes": 67,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/3cd3d2b68921b9d789fddcd258e067033711fc9b/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fexporter%2FExporterDialog.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/3cd3d2b68921b9d789fddcd258e067033711fc9b/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fexporter%2FExporterDialog.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFeatures%2FBase%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fapp%2Fplugin%2Fcore%2Fexporter%2FExporterDialog.java?ref=3cd3d2b68921b9d789fddcd258e067033711fc9b",
      "patch": "@@ -20,7 +20,6 @@\n import java.io.File;\n import java.io.IOException;\n import java.util.*;\n-import java.util.concurrent.atomic.AtomicBoolean;\n \n import javax.swing.*;\n import javax.swing.event.DocumentEvent;\n@@ -53,8 +52,7 @@\n import ghidra.util.filechooser.GhidraFileFilter;\n import ghidra.util.layout.PairLayout;\n import ghidra.util.layout.VerticalLayout;\n-import ghidra.util.task.TaskLauncher;\n-import ghidra.util.task.TaskMonitor;\n+import ghidra.util.task.*;\n \n /**\n  * Dialog for exporting a program from a Ghidra project to an external file in one of the\n@@ -444,10 +442,65 @@ public AddressFactory getAddressFactory() {\n \n \tprivate boolean doExport() {\n \n-\t\tAtomicBoolean success = new AtomicBoolean();\n-\t\tTaskLauncher.launchModal(\"Exporting \" + domainFile.getName(),\n-\t\t\tmonitor -> success.set(tryExport(monitor)));\n-\t\treturn success.get();\n+\t\tExportTask task = new ExportTask();\n+\t\tTaskLauncher.launch(task);\n+\t\ttask.showResults();\n+\t\treturn task.getSuccess();\n+\t}\n+\n+\tprivate class ExportTask extends Task {\n+\n+\t\tprivate boolean success;\n+\t\tprivate boolean showResults;\n+\t\tprivate Exporter exporter;\n+\t\tprivate DomainObject exportedDomainObject;\n+\n+\t\tpublic ExportTask() {\n+\t\t\tsuper(\"Export \" + domainFile.getName(), true, true, true, false);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void run(TaskMonitor monitor) throws CancelledException {\n+\n+\t\t\texporter = getSelectedExporter();\n+\n+\t\t\texporter.setExporterServiceProvider(tool);\n+\t\t\texportedDomainObject = getDomainObject(monitor);\n+\t\t\tif (exportedDomainObject == null) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tProgramSelection selection = getApplicableProgramSeletion();\n+\t\t\tFile outputFile = getSelectedOutputFile();\n+\n+\t\t\ttry {\n+\t\t\t\tif (outputFile.exists() &&\n+\t\t\t\t\tOptionDialog.showOptionDialog(getComponent(), \"Overwrite Existing File?\",\n+\t\t\t\t\t\t\"The file \" + outputFile + \" already exists.\\nDo you want to overwrite it?\",\n+\t\t\t\t\t\t\"Overwrite\", OptionDialog.QUESTION_MESSAGE) != OptionDialog.OPTION_ONE) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tif (options != null) {\n+\t\t\t\t\texporter.setOptions(options);\n+\t\t\t\t}\n+\t\t\t\tsuccess = exporter.export(outputFile, exportedDomainObject, selection, monitor);\n+\t\t\t\tshowResults = true;\n+\t\t\t}\n+\t\t\tcatch (Exception e) {\n+\t\t\t\tMsg.error(this, \"Exception exporting\", e);\n+\t\t\t\tSystemUtilities.runSwingLater(() -> setStatusText(\n+\t\t\t\t\t\"Exception exporting: \" + e.getMessage() + \".  If null, see log for details.\"));\n+\t\t\t}\n+\t\t}\n+\n+\t\tvoid showResults() {\n+\t\t\tif (showResults) {\n+\t\t\t\tdisplaySummaryResults(exporter, exportedDomainObject);\n+\t\t\t}\n+\t\t}\n+\n+\t\tboolean getSuccess() {\n+\t\t\treturn success;\n+\t\t}\n \t}\n \n \tprivate boolean tryExport(TaskMonitor monitor) {",
      "parent_sha": "33e4d54062f04353a4053280f57dcf5b47448b44"
    }
  },
  {
    "oid": "bf724d080bad6cb2b247334077393b7396be7ce3",
    "message": "renamed getBytes() to getBytesFromStream()",
    "date": "2020-07-08T18:21:14Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/bf724d080bad6cb2b247334077393b7396be7ce3",
    "details": {
      "sha": "43c07957a71219263214233b3c633a0df696b83d",
      "filename": "Ghidra/Framework/Utility/src/main/java/utilities/util/FileUtilities.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/bf724d080bad6cb2b247334077393b7396be7ce3/Ghidra%2FFramework%2FUtility%2Fsrc%2Fmain%2Fjava%2Futilities%2Futil%2FFileUtilities.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/bf724d080bad6cb2b247334077393b7396be7ce3/Ghidra%2FFramework%2FUtility%2Fsrc%2Fmain%2Fjava%2Futilities%2Futil%2FFileUtilities.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FUtility%2Fsrc%2Fmain%2Fjava%2Futilities%2Futil%2FFileUtilities.java?ref=bf724d080bad6cb2b247334077393b7396be7ce3",
      "patch": "@@ -175,7 +175,13 @@ public final static byte[] getBytesFromFile(ResourceFile sourceFile, long offset\n \t\t}\n \t}\n \n-\tpublic static byte[] getBytes(InputStream is) throws IOException {\n+\t/**\n+\t * Reads the bytes from the stream into a byte array\n+\t * @param is the input stream to read\n+\t * @return a byte[] containing the bytes from the stream.\n+\t * @throws IOException if an I/O error occurs reading\n+\t */\n+\tpublic static byte[] getBytesFromStream(InputStream is) throws IOException {\n \t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n \t\tbyte[] bytes = new byte[4096];\n \t\tint n;",
      "parent_sha": "8d0d1bfb8b8a97297e200b6749adecc7f40aef95"
    }
  },
  {
    "oid": "e7b63fdab564ec8a0175f031d5cb71b108e3e8ad",
    "message": "Fix \"Duplicate scope id\" error with undefined functions in decompiler",
    "date": "2020-10-06T19:40:58Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/e7b63fdab564ec8a0175f031d5cb71b108e3e8ad",
    "details": {
      "sha": "de9571acb19f78f83ee6f789015dd58cebec1e21",
      "filename": "Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/HighFunction.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/e7b63fdab564ec8a0175f031d5cb71b108e3e8ad/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fpcode%2FHighFunction.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/e7b63fdab564ec8a0175f031d5cb71b108e3e8ad/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fpcode%2FHighFunction.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fpcode%2FHighFunction.java?ref=e7b63fdab564ec8a0175f031d5cb71b108e3e8ad",
      "patch": "@@ -79,14 +79,15 @@ public Function getFunction() {\n \t}\n \n \t/**\n-\t * Get the id with the associated function symbol, if it exists\n-\t * @return the id or 0 otherwise\n+\t * Get the id with the associated function symbol, if it exists.\n+\t * Otherwise return a dynamic id based on the entry point.\n+\t * @return the symbol id, or possibly a dynamic id\n \t */\n \tpublic long getID() {\n \t\tif (func instanceof FunctionDB) {\n \t\t\treturn func.getSymbol().getID();\n \t\t}\n-\t\treturn 0;\n+\t\treturn func.getProgram().getSymbolTable().getDynamicSymbolID(func.getEntryPoint());\n \t}\n \n \t/**",
      "parent_sha": "7c0b21f0dc60d94891e47f9355045da052a16b55"
    }
  },
  {
    "oid": "d2805a673c9bb87dd9720cbf57298f846358c1cb",
    "message": "GP-2758 Include size in compareTo",
    "date": "2022-11-02T18:19:24Z",
    "url": "https://github.com/NationalSecurityAgency/ghidra/commit/d2805a673c9bb87dd9720cbf57298f846358c1cb",
    "details": {
      "sha": "6ee1e1667d6dbdbf096ea876f7e37b4c718e1940",
      "filename": "Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/correlate/Hash.java",
      "status": "modified",
      "additions": 16,
      "deletions": 8,
      "changes": 24,
      "blob_url": "https://github.com/NationalSecurityAgency/ghidra/blob/d2805a673c9bb87dd9720cbf57298f846358c1cb/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fcorrelate%2FHash.java",
      "raw_url": "https://github.com/NationalSecurityAgency/ghidra/raw/d2805a673c9bb87dd9720cbf57298f846358c1cb/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fcorrelate%2FHash.java",
      "contents_url": "https://api.github.com/repos/NationalSecurityAgency/ghidra/contents/Ghidra%2FFramework%2FSoftwareModeling%2Fsrc%2Fmain%2Fjava%2Fghidra%2Fprogram%2Fmodel%2Fcorrelate%2FHash.java?ref=d2805a673c9bb87dd9720cbf57298f846358c1cb",
      "patch": "@@ -19,30 +19,38 @@\n  * This encodes the main hash value for an n-gram, and the number of Instructions hashed\n  *\n  */\n-public  class Hash implements Comparable<Hash> {\n+public class Hash implements Comparable<Hash> {\n \t// Initial accumulator values for the hash functions.  Should be non-zero for the CRC, but value doesn't matter otherwise\n \tpublic static final int SEED = 22222;\n \tpublic static final int ALTERNATE_SEED = 11111;\t// Must be different from SEED\n \n \tprotected int value;\t\t// Actual hash value\n \tprotected int size;\t\t// Number of instructions involved in hash\n-\t\n+\n \t@Override\n \tpublic int compareTo(Hash o) {\n-\t\treturn Long.compare(value, o.value);\n+\t\tint cmp = Integer.compare(value, o.value);\n+\t\tif (cmp == 0) {\n+\t\t\treturn Integer.compare(size, o.size);\n+\t\t}\n+\t\treturn cmp;\n \t}\n-\t\n+\n \t@Override\n \tpublic boolean equals(Object obj) {\n-\t\treturn value == ((Hash)obj).value;\n+\t\tHash o = (Hash) obj;\n+\t\tif (value != o.value) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn (size == o.size);\n \t}\n-\t\n+\n \t@Override\n \tpublic int hashCode() {\n \t\treturn value;\n \t}\n-\t\n-\tpublic Hash(int val,int sz) {\n+\n+\tpublic Hash(int val, int sz) {\n \t\tvalue = val;\n \t\tsize = sz;\n \t}",
      "parent_sha": "17884b878680e640dd5c30210736a1d062ae5ba2"
    }
  }
]