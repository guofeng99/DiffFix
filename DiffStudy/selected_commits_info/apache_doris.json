[
  {
    "oid": "534d9429336404a2dcd95d07e724be03ad3c1fa3",
    "message": "[improvement](tablet clone) impr further repair tablet sched priority (#25046)",
    "date": "2023-10-05T14:19:53Z",
    "url": "https://github.com/apache/doris/commit/534d9429336404a2dcd95d07e724be03ad3c1fa3",
    "details": {
      "sha": "b4667f80696d75d32c0d4760e91875090189543d",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/clone/TabletSchedCtx.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/apache/doris/blob/534d9429336404a2dcd95d07e724be03ad3c1fa3/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fclone%2FTabletSchedCtx.java",
      "raw_url": "https://github.com/apache/doris/raw/534d9429336404a2dcd95d07e724be03ad3c1fa3/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fclone%2FTabletSchedCtx.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fclone%2FTabletSchedCtx.java?ref=534d9429336404a2dcd95d07e724be03ad3c1fa3",
      "patch": "@@ -1221,7 +1221,11 @@ private long getCompareValue() {\n \n         // repair tasks always prior than balance\n         if (type == Type.BALANCE) {\n-            value += 10 * 24 * 3600L;\n+            value += 5 * 3600 * 1000L;  // 5 hour\n+        }\n+\n+        if (tabletStatus == TabletStatus.NEED_FURTHER_REPAIR) {\n+            value -= 3600 * 1000L;  // 1 hour\n         }\n \n         return value;",
      "parent_sha": "136973d4faefe8bb05914033bc245b2eaa355f9e"
    }
  },
  {
    "oid": "d71fab8eadd867b374cfe9bde8cc4833ca1857d7",
    "message": "[Fix](Job)Job repaly logic error (#34378)",
    "date": "2024-05-02T06:32:04Z",
    "url": "https://github.com/apache/doris/commit/d71fab8eadd867b374cfe9bde8cc4833ca1857d7",
    "details": {
      "sha": "d8a30a968a6716a66c3b08d79222e23cab9b334e",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/job/manager/JobManager.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/apache/doris/blob/d71fab8eadd867b374cfe9bde8cc4833ca1857d7/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fjob%2Fmanager%2FJobManager.java",
      "raw_url": "https://github.com/apache/doris/raw/d71fab8eadd867b374cfe9bde8cc4833ca1857d7/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fjob%2Fmanager%2FJobManager.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fjob%2Fmanager%2FJobManager.java?ref=d71fab8eadd867b374cfe9bde8cc4833ca1857d7",
      "patch": "@@ -29,6 +29,8 @@\n import org.apache.doris.common.PatternMatcher;\n import org.apache.doris.common.PatternMatcherWrapper;\n import org.apache.doris.common.io.Writable;\n+import org.apache.doris.common.util.LogBuilder;\n+import org.apache.doris.common.util.LogKey;\n import org.apache.doris.datasource.InternalCatalog;\n import org.apache.doris.job.base.AbstractJob;\n import org.apache.doris.job.common.JobStatus;\n@@ -265,7 +267,8 @@ public void replayCreateJob(T job) throws JobException {\n      **/\n     public void replayUpdateJob(T job) {\n         jobMap.put(job.getJobId(), job);\n-        job.logUpdateOperation();\n+        log.info(new LogBuilder(LogKey.SCHEDULER_JOB, job.getJobId())\n+                .add(\"msg\", \"replay update scheduler job\").build());\n     }\n \n     /**",
      "parent_sha": "49269195c6549fbf7622e4a8f74e882e7bd097e6"
    }
  },
  {
    "oid": "6fd63a8f3cef195ffe3e38cb21020b44d9cc6da1",
    "message": "Add the cast function for if function in outer join (#2087)\n\n[QUERY]\r\nThe type of function which is different from the type of expr will return the incorrect result in query.\r\n\r\nExample:\r\n  the type of expr is date\r\n  the type of function is int\r\n  So, the upper fragment will receive a int value instead of date while the result expr is date.\r\n  If there is no cast function, the result of query will be incorrect.",
    "date": "2019-10-29T03:07:17Z",
    "url": "https://github.com/apache/doris/commit/6fd63a8f3cef195ffe3e38cb21020b44d9cc6da1",
    "details": {
      "sha": "562db084dcdaf1498acbadc3900ad6ddf342d0a5",
      "filename": "fe/src/main/java/org/apache/doris/analysis/TupleIsNullPredicate.java",
      "status": "modified",
      "additions": 13,
      "deletions": 4,
      "changes": 17,
      "blob_url": "https://github.com/apache/doris/blob/6fd63a8f3cef195ffe3e38cb21020b44d9cc6da1/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FTupleIsNullPredicate.java",
      "raw_url": "https://github.com/apache/doris/raw/6fd63a8f3cef195ffe3e38cb21020b44d9cc6da1/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FTupleIsNullPredicate.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FTupleIsNullPredicate.java?ref=6fd63a8f3cef195ffe3e38cb21020b44d9cc6da1",
      "patch": "@@ -119,16 +119,25 @@ public static List<Expr> wrapExprs(List<Expr> inputExprs,\n      * if required to make expr nullable. Otherwise, returns expr.\n      */\n     public static Expr wrapExpr(Expr expr, List<TupleId> tids, Analyzer analyzer)\n-        throws UserException {\n-    if (!requiresNullWrapping(expr, analyzer)) {\n-        return expr;\n-    }\n+            throws UserException {\n+        if (!requiresNullWrapping(expr, analyzer)) {\n+            return expr;\n+        }\n         List<Expr> params = Lists.newArrayList();\n         params.add(new TupleIsNullPredicate(tids));\n         params.add(new NullLiteral());\n         params.add(expr);\n         Expr ifExpr = new FunctionCallExpr(\"if\", params);\n         ifExpr.analyzeNoThrow(analyzer);\n+        // The type of function which is different from the type of expr will return the incorrect result in query.\n+        // Example:\n+        //   the type of expr is date\n+        //   the type of function is int\n+        //   So, the upper fragment will receive a int value instead of date while the result expr is date.\n+        // If there is no cast function, the result of query will be incorrect.\n+        if (expr.getType().getPrimitiveType() != ifExpr.getType().getPrimitiveType()) {\n+            ifExpr = ifExpr.uncheckedCastTo(expr.getType());\n+        }\n         return ifExpr;\n     }\n ",
      "parent_sha": "2ae54250e70c1b645878f2cac31e80a85cdf06e9"
    }
  },
  {
    "oid": "1602f70d1df24770451b51f0191e079ba3b63c02",
    "message": "[fix](analyze) avoid java.util.ConcurrentModificationException (#33674)\n\n```\r\njava.util.ConcurrentModificationException: null\r\n        at java.util.TreeMap$ValueSpliterator.forEachRemaining(TreeMap.java:3226) ~[?:?]\r\n        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509) ~[?:?]\r\n        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499) ~[?:?]\r\n        at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921) ~[?:?]\r\n        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:?]\r\n        at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682) ~[?:?]\r\n        at org.apache.doris.statistics.AnalysisManager.findShowAnalyzeResult(AnalysisManager.java:552) ~[doris-fe.jar:1.2-SNAPSHOT]\r\n        at org.apache.doris.statistics.AnalysisManager.showAnalysisJob(AnalysisManager.java:533) ~[doris-fe.jar:1.2-SNAPSHOT]\r\n        at org.apache.doris.qe.ShowExecutor.handleShowAnalyze(ShowExecutor.java:2772) ~[doris-fe.jar:1.2-SNAPSHOT]\r\n        at org.apache.doris.qe.ShowExecutor.execute(ShowExecutor.java:447) ~[doris-fe.jar:1.2-SNAPSHOT]\r\n        at org.apache.doris.qe.StmtExecutor.handleShow(StmtExecutor.java:2738) ~[doris-fe.jar:1.2-SNAPSHOT]\r\n        at org.apache.doris.qe.StmtExecutor.executeByLegacy(StmtExecutor.java:1010) ~[doris-fe.jar:1.2-SNAPSHOT]\r\n        at org.apache.doris.qe.StmtExecutor.execute(StmtExecutor.java:624) ~[doris-fe.jar:1.2-SNAPSHOT]\r\n        at org.apache.doris.qe.StmtExecutor.execute(StmtExecutor.java:526) ~[doris-fe.jar:1.2-SNAPSHOT]\r\n        at org.apache.doris.qe.ConnectProcessor.executeQuery(ConnectProcessor.java:333) ~[doris-fe.jar:1.2-SNAPSHOT]\r\n        at org.apache.doris.qe.ConnectProcessor.handleQuery(ConnectProcessor.java:228) ~[doris-fe.jar:1.2-SNAPSHOT]\r\n        at org.apache.doris.qe.MysqlConnectProcessor.handleQuery(MysqlConnectProcessor.java:176) ~[doris-fe.jar:1.2-SNAPSHOT]\r\n        at org.apache.doris.qe.MysqlConnectProcessor.dispatch(MysqlConnectProcessor.java:205) ~[doris-fe.jar:1.2-SNAPSHOT]\r\n        at org.apache.doris.qe.MysqlConnectProcessor.processOnce(MysqlConnectProcessor.java:258) ~[doris-fe.jar:1.2-SNAPSHOT]\r\n        at org.apache.doris.mysql.ReadListener.lambda$handleEvent$0(ReadListener.java:52) ~[doris-fe.jar:1.2-SNAPSHOT]\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) ~[?:?]\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) ~[?:?]\r\n        at java.lang.Thread.run(Thread.java:840) ~[?:?]\r\n```\r\n\r\nDue to the `Collections.synchronizedNavigableMap`'s java doc:\r\n\r\n```\r\nIn order to guarantee serial access, it is critical that all access to the backing navigable map is accomplished through the returned navigable map (or its views).\r\nIt is imperative that the user manually synchronize on the returned navigable map when traversing any of its collection views, or the collections views of any of its subMap, headMap or tailMap views, via Iterator, Spliterator or Stream\r\n```",
    "date": "2024-04-16T03:53:04Z",
    "url": "https://github.com/apache/doris/commit/1602f70d1df24770451b51f0191e079ba3b63c02",
    "details": {
      "sha": "f13ba61f2a562f7ff9fefbb581135fcda987cda5",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/statistics/AnalysisManager.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/apache/doris/blob/1602f70d1df24770451b51f0191e079ba3b63c02/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fstatistics%2FAnalysisManager.java",
      "raw_url": "https://github.com/apache/doris/raw/1602f70d1df24770451b51f0191e079ba3b63c02/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fstatistics%2FAnalysisManager.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fstatistics%2FAnalysisManager.java?ref=1602f70d1df24770451b51f0191e079ba3b63c02",
      "patch": "@@ -530,19 +530,19 @@ public void updateTableStatsForAlterStats(AnalysisInfo jobInfo, TableIf tbl) {\n     }\n \n     public List<AnalysisInfo> showAnalysisJob(ShowAnalyzeStmt stmt) {\n-        return findShowAnalyzeResult(analysisJobInfoMap.values(), stmt);\n+        return findShowAnalyzeResult(stmt);\n     }\n \n-    protected List<AnalysisInfo> findShowAnalyzeResult(Collection<AnalysisInfo> analysisInfos, ShowAnalyzeStmt stmt) {\n+    private List<AnalysisInfo> findShowAnalyzeResult(ShowAnalyzeStmt stmt) {\n         String state = stmt.getStateValue();\n         TableName tblName = stmt.getDbTableName();\n         TableIf tbl = null;\n         if (tblName != null) {\n             tbl = StatisticsUtil.findTable(tblName.getCtl(), tblName.getDb(), tblName.getTbl());\n         }\n         long tblId = tbl == null ? -1 : tbl.getId();\n-        synchronized (analysisInfos) {\n-            return analysisInfos.stream()\n+        synchronized (analysisJobInfoMap) {\n+            return analysisJobInfoMap.values().stream()\n                 .filter(a -> stmt.getJobId() == 0 || a.jobId == stmt.getJobId())\n                 .filter(a -> state == null || a.state.equals(AnalysisState.valueOf(state)))\n                 .filter(a -> tblName == null || a.tblId == tblId)",
      "parent_sha": "eb8632863e2aea9705ba413644f673f0b6a261a6"
    }
  },
  {
    "oid": "2c24be082dd852c6418dbf8f812dd712a38dc762",
    "message": "[fix](fe) Resolve the issue of failed internal schema table creation (#34868)",
    "date": "2024-05-15T01:53:44Z",
    "url": "https://github.com/apache/doris/commit/2c24be082dd852c6418dbf8f812dd712a38dc762",
    "details": {
      "sha": "2dc88d6df59f59df8862b5137624bab68213884f",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/datasource/InternalCatalog.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/2c24be082dd852c6418dbf8f812dd712a38dc762/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2FInternalCatalog.java",
      "raw_url": "https://github.com/apache/doris/raw/2c24be082dd852c6418dbf8f812dd712a38dc762/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2FInternalCatalog.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2FInternalCatalog.java?ref=2c24be082dd852c6418dbf8f812dd712a38dc762",
      "patch": "@@ -2418,7 +2418,7 @@ private void createOlapTable(Database db, CreateTableStmt stmt) throws UserExcep\n             }\n \n             // Check if user has storage vault usage privilege\n-            if (!env.getAuth()\n+            if (ctx != null && !env.getAuth()\n                     .checkStorageVaultPriv(ctx.getCurrentUserIdentity(), storageVaultName, PrivPredicate.USAGE)) {\n                 throw new DdlException(\"USAGE denied to user '\" + ConnectContext.get().getQualifiedUser()\n                         + \"'@'\" + ConnectContext.get().getRemoteIP()",
      "parent_sha": "393ff5d9bbaf8ee59945e599291f2c98088d5a72"
    }
  },
  {
    "oid": "1818526fba8937aeea9705445b2f182ce68d818a",
    "message": "[fix](profile) Fix wrong instance number in query profile (#21808)",
    "date": "2023-07-19T02:00:48Z",
    "url": "https://github.com/apache/doris/commit/1818526fba8937aeea9705445b2f182ce68d818a",
    "details": {
      "sha": "7f0abff227dbd85c8b841cf421f6856891a7c7db",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java",
      "status": "modified",
      "additions": 12,
      "deletions": 3,
      "changes": 15,
      "blob_url": "https://github.com/apache/doris/blob/1818526fba8937aeea9705445b2f182ce68d818a/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FCoordinator.java",
      "raw_url": "https://github.com/apache/doris/raw/1818526fba8937aeea9705445b2f182ce68d818a/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FCoordinator.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FCoordinator.java?ref=1818526fba8937aeea9705445b2f182ce68d818a",
      "patch": "@@ -478,7 +478,8 @@ public Map<String, Integer> getBeToInstancesNum() {\n         Map<String, Integer> result = Maps.newTreeMap();\n         if (enablePipelineEngine) {\n             for (PipelineExecContexts ctxs : beToPipelineExecCtxs.values()) {\n-                result.put(ctxs.brpcAddr.hostname.concat(\":\").concat(\"\" + ctxs.brpcAddr.port), ctxs.ctxs.size());\n+                result.put(ctxs.brpcAddr.hostname.concat(\":\").concat(\"\" + ctxs.brpcAddr.port),\n+                        ctxs.getInstanceNumber());\n             }\n         } else {\n             for (BackendExecStates states : beToExecStates.values()) {\n@@ -842,7 +843,8 @@ private void sendPipelineCtx() throws TException, RpcException, UserException {\n                     PipelineExecContexts ctxs = beToPipelineExecCtxs.get(pipelineExecContext.backend.getId());\n                     if (ctxs == null) {\n                         ctxs = new PipelineExecContexts(pipelineExecContext.backend.getId(),\n-                                pipelineExecContext.brpcAddress, twoPhaseExecution);\n+                                pipelineExecContext.brpcAddress, twoPhaseExecution,\n+                                entry.getValue().getFragmentNumOnHost());\n                         beToPipelineExecCtxs.putIfAbsent(pipelineExecContext.backend.getId(), ctxs);\n                     }\n                     ctxs.addContext(pipelineExecContext);\n@@ -2996,17 +2998,24 @@ public class PipelineExecContexts {\n         List<PipelineExecContext> ctxs = Lists.newArrayList();\n         boolean twoPhaseExecution = false;\n         ScopedSpan scopedSpan = new ScopedSpan();\n+        int instanceNumber;\n \n-        public PipelineExecContexts(long beId, TNetworkAddress brpcAddr, boolean twoPhaseExecution) {\n+        public PipelineExecContexts(long beId, TNetworkAddress brpcAddr, boolean twoPhaseExecution,\n+                int instanceNumber) {\n             this.beId = beId;\n             this.brpcAddr = brpcAddr;\n             this.twoPhaseExecution = twoPhaseExecution;\n+            this.instanceNumber = instanceNumber;\n         }\n \n         public void addContext(PipelineExecContext ctx) {\n             this.ctxs.add(ctx);\n         }\n \n+        public int getInstanceNumber() {\n+            return instanceNumber;\n+        }\n+\n         /**\n          * The BackendExecState in states are all send to the same BE.\n          * So only the first BackendExecState need to carry some common fields, such as DescriptorTbl,",
      "parent_sha": "c993663827df871949c959bd99210c3be5cbf8a3"
    }
  },
  {
    "oid": "6d8567c32206cce7a9938a7788cb71db346bcb5b",
    "message": "[fix](nereids)need validate auto partition columns in DDL (#29985)",
    "date": "2024-01-16T03:37:30Z",
    "url": "https://github.com/apache/doris/commit/6d8567c32206cce7a9938a7788cb71db346bcb5b",
    "details": {
      "sha": "a1a5dd9836cd703cb38e9d0f4ecb48cb7ecdd267",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/nereids/trees/plans/commands/info/CreateTableInfo.java",
      "status": "modified",
      "additions": 7,
      "deletions": 18,
      "changes": 25,
      "blob_url": "https://github.com/apache/doris/blob/6d8567c32206cce7a9938a7788cb71db346bcb5b/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Ftrees%2Fplans%2Fcommands%2Finfo%2FCreateTableInfo.java",
      "raw_url": "https://github.com/apache/doris/raw/6d8567c32206cce7a9938a7788cb71db346bcb5b/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Ftrees%2Fplans%2Fcommands%2Finfo%2FCreateTableInfo.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Ftrees%2Fplans%2Fcommands%2Finfo%2FCreateTableInfo.java?ref=6d8567c32206cce7a9938a7788cb71db346bcb5b",
      "patch": "@@ -139,7 +139,6 @@ public CreateTableInfo(boolean ifNotExists, boolean isExternal, String ctlName,\n         this.autoPartitionExprs = autoPartitionExprs;\n         this.partitionType = partitionType;\n         this.partitionColumns = partitionColumns;\n-        appendColumnFromExprs();\n         this.partitions = partitions;\n         this.distribution = distribution;\n         this.rollups = Utils.copyRequiredList(rollups);\n@@ -175,7 +174,6 @@ public CreateTableInfo(boolean ifNotExists, boolean isExternal, String ctlName,\n         this.autoPartitionExprs = autoPartitionExprs;\n         this.partitionType = partitionType;\n         this.partitionColumns = partitionColumns;\n-        appendColumnFromExprs();\n         this.partitions = partitions;\n         this.distribution = distribution;\n         this.rollups = Utils.copyRequiredList(rollups);\n@@ -459,6 +457,12 @@ public void validate(ConnectContext ctx) {\n                 }\n             });\n \n+            if (isAutoPartition) {\n+                partitionColumns = ExpressionUtils\n+                        .collectAll(autoPartitionExprs, UnboundSlot.class::isInstance).stream()\n+                        .map(slot -> ((UnboundSlot) slot).getName()).collect(Collectors.toList());\n+            }\n+\n             if (partitionColumns != null) {\n                 partitionColumns.forEach(p -> {\n                     if (!columnMap.containsKey(p)) {\n@@ -636,7 +640,7 @@ private void checkEngineName() {\n             throw new AnalysisException(\"odbc, mysql and broker table is no longer supported.\"\n                     + \" For odbc and mysql external table, use jdbc table or jdbc catalog instead.\"\n                     + \" For broker table, use table valued function instead.\"\n-                    + \". Or you can temporarily set 'disable_odbc_mysql_broker_table=false'\"\n+                    + \". Or you can temporarily set 'enable_odbc_mysql_broker_table=true'\"\n                     + \" in fe.conf to reopen this feature.\");\n         }\n     }\n@@ -796,11 +800,6 @@ private void validateKeyColumns() {\n      * translate to catalog create table stmt\n      */\n     public CreateTableStmt translateToLegacyStmt() {\n-        if (isAutoPartition) {\n-            partitionColumns = ExpressionUtils\n-                    .collectAll(autoPartitionExprs, UnboundSlot.class::isInstance).stream()\n-                    .map(slot -> ((UnboundSlot) slot).getName()).collect(Collectors.toList());\n-        }\n         PartitionDesc partitionDesc = null;\n         if (partitionColumns != null || isAutoPartition) {\n             List<AllPartitionDesc> partitionDescs =\n@@ -894,14 +893,4 @@ private static List<Expr> convertToLegacyArguments(List<Expression> children) {\n             }\n         }).collect(Collectors.toList());\n     }\n-\n-    private void appendColumnFromExprs() {\n-        for (Expression autoExpr : autoPartitionExprs) {\n-            for (Expression child : autoExpr.children()) {\n-                if (child instanceof UnboundSlot) {\n-                    partitionColumns.add(((UnboundSlot) child).getName());\n-                }\n-            }\n-        }\n-    }\n }",
      "parent_sha": "29b8c847cfc66386dc9c9325011c23371ff53180"
    }
  },
  {
    "oid": "35c4de9feaf4ca51bcefdeac54440703d36ce9d8",
    "message": "[fix](Nereids) convert decimalv2 type to decimalv3 type by mistake (#19491)",
    "date": "2023-05-11T11:11:51Z",
    "url": "https://github.com/apache/doris/commit/35c4de9feaf4ca51bcefdeac54440703d36ce9d8",
    "details": {
      "sha": "bbee1c1ecce00cfa3f3bf8bcd27b59ea17e00d96",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/nereids/types/DecimalV2Type.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/doris/blob/35c4de9feaf4ca51bcefdeac54440703d36ce9d8/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Ftypes%2FDecimalV2Type.java",
      "raw_url": "https://github.com/apache/doris/raw/35c4de9feaf4ca51bcefdeac54440703d36ce9d8/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Ftypes%2FDecimalV2Type.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Ftypes%2FDecimalV2Type.java?ref=35c4de9feaf4ca51bcefdeac54440703d36ce9d8",
      "patch": "@@ -17,6 +17,7 @@\n \n package org.apache.doris.nereids.types;\n \n+import org.apache.doris.catalog.PrimitiveType;\n import org.apache.doris.catalog.ScalarType;\n import org.apache.doris.catalog.Type;\n import org.apache.doris.nereids.types.coercion.AbstractDataType;\n@@ -123,7 +124,7 @@ private static DecimalV2Type widerDecimalV2Type(\n \n     @Override\n     public Type toCatalogDataType() {\n-        return ScalarType.createDecimalType(precision, scale);\n+        return ScalarType.createDecimalType(PrimitiveType.DECIMALV2, precision, scale);\n     }\n \n     public int getPrecision() {",
      "parent_sha": "c5a53e0caa4424fe56f3766c1407c458b8a7c56a"
    }
  },
  {
    "oid": "76d530e34909414d73728040fd6d4a18bada8a9e",
    "message": "[fix](tablet sched) fix sched delete stale remain replica (#27050)",
    "date": "2023-11-15T13:26:22Z",
    "url": "https://github.com/apache/doris/commit/76d530e34909414d73728040fd6d4a18bada8a9e",
    "details": {
      "sha": "4960fc6be144b70fbf7890f40a81879b79d0a610",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/clone/TabletScheduler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/76d530e34909414d73728040fd6d4a18bada8a9e/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fclone%2FTabletScheduler.java",
      "raw_url": "https://github.com/apache/doris/raw/76d530e34909414d73728040fd6d4a18bada8a9e/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fclone%2FTabletScheduler.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fclone%2FTabletScheduler.java?ref=76d530e34909414d73728040fd6d4a18bada8a9e",
      "patch": "@@ -1092,7 +1092,7 @@ private void deleteReplicaInternal(TabletSchedCtx tabletCtx,\n \n         List<Replica> replicas = tabletCtx.getTablet().getReplicas();\n         boolean otherCatchup = replicas.stream().anyMatch(\n-                r -> r.getId() != replica.getId()\n+                r -> r != replica\n                 && (r.getVersion() > replica.getVersion()\n                         || (r.getVersion() == replica.getVersion() && r.getLastFailedVersion() < 0)));\n         if (!otherCatchup) {",
      "parent_sha": "10ee48bb6fa96e6a9190882dd1dc0079cc20fc4c"
    }
  },
  {
    "oid": "4ac82fd3677d5590bb42632ce0bbe7003d8a10e1",
    "message": "[opt](Nereids) add group_array as collect_list alias (#25836)",
    "date": "2023-10-25T05:46:40Z",
    "url": "https://github.com/apache/doris/commit/4ac82fd3677d5590bb42632ce0bbe7003d8a10e1",
    "details": {
      "sha": "5a101e71014b6e32ef4e47e9eb79eb0e26949837",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/catalog/BuiltinAggregateFunctions.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/4ac82fd3677d5590bb42632ce0bbe7003d8a10e1/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FBuiltinAggregateFunctions.java",
      "raw_url": "https://github.com/apache/doris/raw/4ac82fd3677d5590bb42632ce0bbe7003d8a10e1/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FBuiltinAggregateFunctions.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FBuiltinAggregateFunctions.java?ref=4ac82fd3677d5590bb42632ce0bbe7003d8a10e1",
      "patch": "@@ -91,7 +91,7 @@ public class BuiltinAggregateFunctions implements FunctionHelper {\n             agg(BitmapUnion.class, \"bitmap_union\"),\n             agg(BitmapUnionCount.class, \"bitmap_union_count\"),\n             agg(BitmapUnionInt.class, \"bitmap_union_int\"),\n-            agg(CollectList.class, \"collect_list\"),\n+            agg(CollectList.class, \"collect_list\", \"group_array\"),\n             agg(CollectSet.class, \"collect_set\", \"group_uniq_array\"),\n             agg(Count.class, \"count\"),\n             agg(CountByEnum.class, \"count_by_enum\"),",
      "parent_sha": "e3317ac1b94e1cc1cedb23950defc51fc444b4b9"
    }
  },
  {
    "oid": "4b23bca2bea9ae865bf034f1b83e3ed649df8f48",
    "message": "[Refactor] catch throwable instead of exception (#5942)\n\nCo-authored-by: \u5b59\u5fe0\u5065(20113660) <sunzj10@ke.com>",
    "date": "2021-06-06T14:06:02Z",
    "url": "https://github.com/apache/doris/commit/4b23bca2bea9ae865bf034f1b83e3ed649df8f48",
    "details": {
      "sha": "e0cd3ab0954ca64a13602704d54ebcd3683419fa",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/mysql/nio/AcceptListener.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/4b23bca2bea9ae865bf034f1b83e3ed649df8f48/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fmysql%2Fnio%2FAcceptListener.java",
      "raw_url": "https://github.com/apache/doris/raw/4b23bca2bea9ae865bf034f1b83e3ed649df8f48/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fmysql%2Fnio%2FAcceptListener.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fmysql%2Fnio%2FAcceptListener.java?ref=4b23bca2bea9ae865bf034f1b83e3ed649df8f48",
      "patch": "@@ -78,7 +78,7 @@ public void handleEvent(AcceptingChannel<StreamConnection> channel) {\n                     // do not need to print log for this kind of exception.\n                     // just clean up the context;\n                     context.cleanup();\n-                } catch (Exception e) {\n+                } catch (Throwable e) {\n                     // should be unexpected exception, so print warn log\n                     if (context.getCurrentUserIdentity() != null) {\n                         LOG.warn(\"connect processor exception because \", e);",
      "parent_sha": "61af76b8fb34819ee3593b45e1e867d02a7528e8"
    }
  },
  {
    "oid": "f001b9d5c897ff8a548e210c71268141c19b8e8b",
    "message": "[enhance](multi-catalog) support multi name service when config hive catalog #21825\n\nwhen create catalog with multi-servicename like below:\r\nREATE CATALOG hive_prod_t1 PROPERTIES (\r\n'type'='hms',\r\n'hive.metastore.uris' = 'thrift://10.198.xxx:9011,thrift://11.11.xxx:9001,thrift://10.198.xxx:9011',\r\n'hadoop.username' = 'user',\r\n'dfs.nameservices'='ns1007,ns1017',\r\n'dfs.ha.namenodes.ns1007'='nn1,nn2',\r\n'dfs.namenode.rpc-address.ns1007.nn1'='10.198.xxxx:8120',\r\n'dfs.namenode.rpc-address.ns1007.nn2'='10.198.xxx:8120',\r\n'dfs.client.failover.proxy.provider.ns1007'='org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider',\r\n'dfs.ha.namenodes.ns1017'='nn1,nn2',\r\n'dfs.namenode.rpc-address.ns1017.nn1'='10.198.xxxx:8120',\r\n'dfs.namenode.rpc-address.ns1017.nn2'='10.198.xxxx:8120',\r\n'dfs.client.failover.proxy.provider.ns1017'='org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider'\r\n);\r\n\r\nthe result will be: ERROR 1105 (HY000): errCode = 2, detailMessage = Missing dfs.ha.namenodes.ns1007,ns1017 property",
    "date": "2023-08-10T02:48:08Z",
    "url": "https://github.com/apache/doris/commit/f001b9d5c897ff8a548e210c71268141c19b8e8b",
    "details": {
      "sha": "462fd3527a8a97a970700308f16d162057d997fd",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/datasource/HMSExternalCatalog.java",
      "status": "modified",
      "additions": 19,
      "deletions": 15,
      "changes": 34,
      "blob_url": "https://github.com/apache/doris/blob/f001b9d5c897ff8a548e210c71268141c19b8e8b/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2FHMSExternalCatalog.java",
      "raw_url": "https://github.com/apache/doris/raw/f001b9d5c897ff8a548e210c71268141c19b8e8b/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2FHMSExternalCatalog.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2FHMSExternalCatalog.java?ref=f001b9d5c897ff8a548e210c71268141c19b8e8b",
      "patch": "@@ -99,25 +99,29 @@ public void checkProperties() throws DdlException {\n         if (Strings.isNullOrEmpty(dfsNameservices)) {\n             return;\n         }\n-        String namenodes = catalogProperty.getOrDefault(\"dfs.ha.namenodes.\" + dfsNameservices, \"\");\n-        if (Strings.isNullOrEmpty(namenodes)) {\n-            throw new DdlException(\"Missing dfs.ha.namenodes.\" + dfsNameservices + \" property\");\n-        }\n-        String[] names = namenodes.split(\",\");\n-        for (String name : names) {\n-            String address = catalogProperty.getOrDefault(\"dfs.namenode.rpc-address.\" + dfsNameservices + \".\" + name,\n+\n+        String[] nameservices = dfsNameservices.split(\",\");\n+        for (String dfsservice : nameservices) {\n+            String namenodes = catalogProperty.getOrDefault(\"dfs.ha.namenodes.\" + dfsservice, \"\");\n+            if (Strings.isNullOrEmpty(namenodes)) {\n+                throw new DdlException(\"Missing dfs.ha.namenodes.\" + dfsservice + \" property\");\n+            }\n+            String[] names = namenodes.split(\",\");\n+            for (String name : names) {\n+                String address = catalogProperty.getOrDefault(\"dfs.namenode.rpc-address.\" + dfsservice + \".\" + name,\n+                        \"\");\n+                if (Strings.isNullOrEmpty(address)) {\n+                    throw new DdlException(\n+                            \"Missing dfs.namenode.rpc-address.\" + dfsservice + \".\" + name + \" property\");\n+                }\n+            }\n+            String failoverProvider = catalogProperty.getOrDefault(\"dfs.client.failover.proxy.provider.\" + dfsservice,\n                     \"\");\n-            if (Strings.isNullOrEmpty(address)) {\n+            if (Strings.isNullOrEmpty(failoverProvider)) {\n                 throw new DdlException(\n-                        \"Missing dfs.namenode.rpc-address.\" + dfsNameservices + \".\" + name + \" property\");\n+                        \"Missing dfs.client.failover.proxy.provider.\" + dfsservice + \" property\");\n             }\n         }\n-        String failoverProvider = catalogProperty.getOrDefault(\"dfs.client.failover.proxy.provider.\" + dfsNameservices,\n-                \"\");\n-        if (Strings.isNullOrEmpty(failoverProvider)) {\n-            throw new DdlException(\n-                    \"Missing dfs.client.failover.proxy.provider.\" + dfsNameservices + \" property\");\n-        }\n     }\n \n     public String getHiveMetastoreUris() {",
      "parent_sha": "eafdab0cfd104060f8fa13b2faae1958be5c16df"
    }
  },
  {
    "oid": "6f6d744a2a84c2a08009fdb2d199ead9d5541bfb",
    "message": "[fix](nereids) avoid 0 row count in stats derive #19640\n\nrow count of join estimation is at least 1 to make less error propagation.",
    "date": "2023-05-19T00:54:24Z",
    "url": "https://github.com/apache/doris/commit/6f6d744a2a84c2a08009fdb2d199ead9d5541bfb",
    "details": {
      "sha": "7848e5e4330870b3b9cac463ef17d07ce22d1c9e",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/nereids/stats/JoinEstimation.java",
      "status": "modified",
      "additions": 22,
      "deletions": 13,
      "changes": 35,
      "blob_url": "https://github.com/apache/doris/blob/6f6d744a2a84c2a08009fdb2d199ead9d5541bfb/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Fstats%2FJoinEstimation.java",
      "raw_url": "https://github.com/apache/doris/raw/6f6d744a2a84c2a08009fdb2d199ead9d5541bfb/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Fstats%2FJoinEstimation.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Fstats%2FJoinEstimation.java?ref=6f6d744a2a84c2a08009fdb2d199ead9d5541bfb",
      "patch": "@@ -97,15 +97,19 @@ private static Statistics estimateInnerJoin(Statistics leftStats, Statistics rig\n                         EqualTo equal = normalizeHashJoinCondition(expression, leftStats, rightStats);\n                         ColumnStatistic eqLeftColStats = ExpressionEstimation.estimate(equal.left(), leftStats);\n                         ColumnStatistic eqRightColStats = ExpressionEstimation.estimate(equal.right(), rightStats);\n-                        boolean trustable = eqRightColStats.ndv / rightStats.getRowCount() > almostUniqueThreshold\n-                                || eqLeftColStats.ndv / leftStats.getRowCount() > almostUniqueThreshold;\n+                        double rightStatsRowCount = StatsMathUtil.nonZeroDivisor(rightStats.getRowCount());\n+                        double leftStatsRowCount = StatsMathUtil.nonZeroDivisor(leftStats.getRowCount());\n+                        boolean trustable = eqRightColStats.ndv / rightStatsRowCount > almostUniqueThreshold\n+                                || eqLeftColStats.ndv / leftStatsRowCount > almostUniqueThreshold;\n                         if (!trustable) {\n+                            double rNdv = StatsMathUtil.nonZeroDivisor(eqRightColStats.ndv);\n+                            double lNdv = StatsMathUtil.nonZeroDivisor(eqLeftColStats.ndv);\n                             if (leftBigger) {\n-                                unTrustEqualRatio.add((rightStats.getRowCount() / eqRightColStats.ndv)\n-                                        * Math.min(eqLeftColStats.ndv, eqRightColStats.ndv) / eqLeftColStats.ndv);\n+                                unTrustEqualRatio.add((rightStatsRowCount / rNdv)\n+                                        * Math.min(eqLeftColStats.ndv, eqRightColStats.ndv) / lNdv);\n                             } else {\n-                                unTrustEqualRatio.add((leftStats.getRowCount() / eqLeftColStats.ndv)\n-                                        * Math.min(eqLeftColStats.ndv, eqRightColStats.ndv) / eqRightColStats.ndv);\n+                                unTrustEqualRatio.add((leftStatsRowCount / lNdv)\n+                                        * Math.min(eqLeftColStats.ndv, eqRightColStats.ndv) / rNdv);\n                             }\n                         }\n                         return trustable;\n@@ -114,10 +118,12 @@ private static Statistics estimateInnerJoin(Statistics leftStats, Statistics rig\n \n         Statistics innerJoinStats;\n         Statistics crossJoinStats = new StatisticsBuilder()\n-                .setRowCount(leftStats.getRowCount() * rightStats.getRowCount())\n+                .setRowCount(Math.max(1, leftStats.getRowCount() * rightStats.getRowCount()))\n                 .putColumnStatistics(leftStats.columnStatistics())\n                 .putColumnStatistics(rightStats.columnStatistics())\n                 .build();\n+\n+        double outputRowCount = 1;\n         if (!trustableConditions.isEmpty()) {\n             List<Pair<Expression, Double>> sortedJoinConditions = join.getHashJoinConjuncts().stream()\n                     .map(expression -> Pair.of(expression, estimateJoinConditionSel(crossJoinStats, expression)))\n@@ -136,21 +142,24 @@ private static Statistics estimateInnerJoin(Statistics leftStats, Statistics rig\n             for (int i = 0; i < sortedJoinConditions.size(); i++) {\n                 sel *= Math.pow(sortedJoinConditions.get(i).second, 1 / Math.pow(2, i));\n             }\n-            innerJoinStats = crossJoinStats.updateRowCountOnly(crossJoinStats.getRowCount() * sel);\n+            outputRowCount = Math.max(1, crossJoinStats.getRowCount() * sel);\n         } else {\n-            double outputRowCount = Math.max(leftStats.getRowCount(), rightStats.getRowCount());\n+            outputRowCount = Math.max(leftStats.getRowCount(), rightStats.getRowCount());\n             Optional<Double> ratio = unTrustEqualRatio.stream().max(Double::compareTo);\n             if (ratio.isPresent()) {\n-                outputRowCount = outputRowCount * ratio.get();\n+                outputRowCount = Math.max(1, outputRowCount * ratio.get());\n             }\n-            innerJoinStats = crossJoinStats.updateRowCountOnly(outputRowCount);\n         }\n-\n+        innerJoinStats = crossJoinStats.updateRowCountOnly(outputRowCount);\n         if (!join.getOtherJoinConjuncts().isEmpty()) {\n             FilterEstimation filterEstimation = new FilterEstimation();\n             innerJoinStats = filterEstimation.estimate(\n                     ExpressionUtils.and(join.getOtherJoinConjuncts()), innerJoinStats);\n+            if (innerJoinStats.getRowCount() <= 0) {\n+                innerJoinStats = new StatisticsBuilder(innerJoinStats).setRowCount(1).build();\n+            }\n         }\n+\n         innerJoinStats.setWidth(leftStats.getWidth() + rightStats.getWidth());\n         innerJoinStats.setPenalty(0);\n         return innerJoinStats;\n@@ -196,7 +205,7 @@ private static double estimateSemiOrAntiRowCountBySlotsEqual(Statistics leftStat\n                 rowCount = rightStats.getRowCount() - semiRowCount;\n             }\n         }\n-        return rowCount;\n+        return Math.max(1, rowCount);\n     }\n \n     private static Statistics estimateSemiOrAnti(Statistics leftStats, Statistics rightStats, Join join) {",
      "parent_sha": "14620a67667dfb7fa3b603522242146e3b580a52"
    }
  },
  {
    "oid": "5f7c4f903fb51b2cb67ebdbdf4532db69e72bada",
    "message": "[refactor](log) Remove unused log instance creation (#7249)",
    "date": "2021-12-02T03:43:29Z",
    "url": "https://github.com/apache/doris/commit/5f7c4f903fb51b2cb67ebdbdf4532db69e72bada",
    "details": {
      "sha": "8264f9169f7f6f8ffd5d707790d9a05b632ee44b",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/http/ActionController.java",
      "status": "modified",
      "additions": 5,
      "deletions": 9,
      "changes": 14,
      "blob_url": "https://github.com/apache/doris/blob/5f7c4f903fb51b2cb67ebdbdf4532db69e72bada/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fhttp%2FActionController.java",
      "raw_url": "https://github.com/apache/doris/raw/5f7c4f903fb51b2cb67ebdbdf4532db69e72bada/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fhttp%2FActionController.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fhttp%2FActionController.java?ref=5f7c4f903fb51b2cb67ebdbdf4532db69e72bada",
      "patch": "@@ -17,25 +17,21 @@\n \n package org.apache.doris.http;\n \n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-\n import org.apache.doris.common.path.PathTrie;\n import com.google.common.base.Strings;\n \n import io.netty.handler.codec.http.HttpMethod;\n \n public class ActionController {\n-    private static final Logger LOG = LogManager.getLogger(ActionController.class);\n     private final PathTrie<IAction> getHandlers = new PathTrie<>(WebUtils.REST_DECODER);\n     private final PathTrie<IAction> postHandlers = new PathTrie<>(WebUtils.REST_DECODER);\n     private final PathTrie<IAction> putHandlers = new PathTrie<>(WebUtils.REST_DECODER);\n     private final PathTrie<IAction> deleteHandlers = new PathTrie<>(WebUtils.REST_DECODER);\n     private final PathTrie<IAction> headHandlers = new PathTrie<>(WebUtils.REST_DECODER);\n     private final PathTrie<IAction> optionsHandlers = new PathTrie<>(WebUtils.REST_DECODER);\n-    \n+\n     // Registers a rest handler to be execute when the provided method and path match the request.\n-    public void registerHandler(HttpMethod method, String path, IAction handler) \n+    public void registerHandler(HttpMethod method, String path, IAction handler)\n             throws IllegalArgException {\n         if (method.equals(HttpMethod.GET)) {\n             getHandlers.insert(path, handler);\n@@ -54,7 +50,7 @@ public void registerHandler(HttpMethod method, String path, IAction handler)\n                     \"Can't handle [\" + method + \"] for path [\" + path + \"]\");\n         }\n     }\n-    \n+\n     public IAction getHandler(BaseRequest request) {\n         String path = getPath(request.getRequest().uri());\n         HttpMethod method = request.getRequest().method();\n@@ -74,8 +70,8 @@ public IAction getHandler(BaseRequest request) {\n             return null;\n         }\n     }\n-    \n-    // e.g. \n+\n+    // e.g.\n     // in: /www/system?path=//jobs\n     // out: /www/system\n     private String getPath(String uri) {",
      "parent_sha": "f51448d60bdba74551c099fef32ec1efd19e093b"
    }
  },
  {
    "oid": "20b92b0812c3d6ce7d70e2deb99a8094fb291075",
    "message": "[Feature](log)friendly hint for creating table failed (#20617)",
    "date": "2023-06-25T02:02:26Z",
    "url": "https://github.com/apache/doris/commit/20b92b0812c3d6ce7d70e2deb99a8094fb291075",
    "details": {
      "sha": "043b46366bd18f5da7fef38770dfea155113bca7",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/datasource/InternalCatalog.java",
      "status": "modified",
      "additions": 17,
      "deletions": 2,
      "changes": 19,
      "blob_url": "https://github.com/apache/doris/blob/20b92b0812c3d6ce7d70e2deb99a8094fb291075/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2FInternalCatalog.java",
      "raw_url": "https://github.com/apache/doris/raw/20b92b0812c3d6ce7d70e2deb99a8094fb291075/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2FInternalCatalog.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2FInternalCatalog.java?ref=20b92b0812c3d6ce7d70e2deb99a8094fb291075",
      "patch": "@@ -147,12 +147,14 @@\n import org.apache.doris.persist.TruncateTableInfo;\n import org.apache.doris.qe.ConnectContext;\n import org.apache.doris.resource.Tag;\n+import org.apache.doris.system.Backend;\n import org.apache.doris.system.SystemInfoService;\n import org.apache.doris.task.AgentBatchTask;\n import org.apache.doris.task.AgentTaskExecutor;\n import org.apache.doris.task.AgentTaskQueue;\n import org.apache.doris.task.CreateReplicaTask;\n import org.apache.doris.thrift.TCompressionType;\n+import org.apache.doris.thrift.TStatusCode;\n import org.apache.doris.thrift.TStorageFormat;\n import org.apache.doris.thrift.TStorageMedium;\n import org.apache.doris.thrift.TStorageType;\n@@ -1815,13 +1817,26 @@ private Partition createPartitionWithIndices(String clusterName, long dbId, long\n             }\n \n             if (!ok || !countDownLatch.getStatus().ok()) {\n-                errMsg = \"Failed to create partition[\" + partitionName + \"]. Timeout:\" + (timeout / 1000) + \" seconds.\";\n+                errMsg = \"Failed to create partition[\" + partitionName + \"].\";\n                 // clear tasks\n                 AgentTaskQueue.removeBatchTask(batchTask, TTaskType.CREATE);\n \n                 if (!countDownLatch.getStatus().ok()) {\n                     errMsg += \" Error: \" + countDownLatch.getStatus().getErrorMsg();\n+                    if (countDownLatch.getStatus().getErrorCode() == TStatusCode.TIMEOUT) {\n+                        SystemInfoService infoService = Env.getCurrentSystemInfo();\n+                        Set<String> downBeSet = countDownLatch.getLeftMarks().stream()\n+                                .map(item -> infoService.getBackend(item.getKey()))\n+                                .filter(backend -> !backend.isAlive())\n+                                .map(Backend::getHost)\n+                                .collect(Collectors.toSet());\n+                        if (null != downBeSet || downBeSet.size() != 0) {\n+                            String downBE = StringUtils.join(downBeSet, \",\");\n+                            errMsg += \"The BE \" + downBE + \" is down,please check BE status!\";\n+                        }\n+                    }\n                 } else {\n+                    errMsg += \"Timeout:\" + (timeout / 1000) + \" seconds.\";\n                     List<Entry<Long, Long>> unfinishedMarks = countDownLatch.getLeftMarks();\n                     // only show at most 3 results\n                     List<Entry<Long, Long>> subList = unfinishedMarks.subList(0, Math.min(unfinishedMarks.size(), 3));\n@@ -2055,7 +2070,7 @@ private void createOlapTable(Database db, CreateTableStmt stmt) throws UserExcep\n                 && !Strings.isNullOrEmpty(storagePolicy)) {\n             throw new AnalysisException(\n                     \"Can not create UNIQUE KEY table that enables Merge-On-write\"\n-                    + \" with storage policy(\" + storagePolicy + \")\");\n+                     + \" with storage policy(\" + storagePolicy + \")\");\n         }\n         olapTable.setStoragePolicy(storagePolicy);\n ",
      "parent_sha": "d49c412c59aa94e3c0e5671e7c4f9cb676712542"
    }
  },
  {
    "oid": "1f5f5a12b64022e74d407bc8ae2a89304dffd46c",
    "message": "[fix](Nereids): need update parentExpression after replace child. (#18771)",
    "date": "2023-04-19T07:13:42Z",
    "url": "https://github.com/apache/doris/commit/1f5f5a12b64022e74d407bc8ae2a89304dffd46c",
    "details": {
      "sha": "bc376b1a372800d8fd86678a6577fd7da59b00e3",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/nereids/memo/Memo.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/apache/doris/blob/1f5f5a12b64022e74d407bc8ae2a89304dffd46c/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Fmemo%2FMemo.java",
      "raw_url": "https://github.com/apache/doris/raw/1f5f5a12b64022e74d407bc8ae2a89304dffd46c/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Fmemo%2FMemo.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Fmemo%2FMemo.java?ref=1f5f5a12b64022e74d407bc8ae2a89304dffd46c",
      "patch": "@@ -38,7 +38,6 @@\n import org.apache.doris.nereids.trees.plans.logical.LogicalPlan;\n import org.apache.doris.nereids.trees.plans.logical.LogicalProject;\n import org.apache.doris.nereids.trees.plans.physical.PhysicalPlan;\n-import org.apache.doris.nereids.util.Utils;\n import org.apache.doris.qe.ConnectContext;\n import org.apache.doris.statistics.Statistics;\n \n@@ -472,7 +471,7 @@ public Group mergeGroup(Group source, Group destination) {\n         for (GroupExpression reinsertGroupExpr : needReplaceChild) {\n             // After change GroupExpression children, hashcode will change, so need to reinsert into map.\n             groupExpressions.remove(reinsertGroupExpr);\n-            Utils.replaceList(reinsertGroupExpr.children(), source, destination);\n+            reinsertGroupExpr.replaceChild(source, destination);\n \n             GroupExpression existGroupExpr = groupExpressions.get(reinsertGroupExpr);\n             if (existGroupExpr != null) {",
      "parent_sha": "f280b047367f865034a7a453f4d0d73b49779bd2"
    }
  },
  {
    "oid": "2518ed64ea12dfbe93c1d8abc18cca0fbe260389",
    "message": "[enhancement](bulk-load) strict second level granularity for timeout between (0,1) (#29028)",
    "date": "2023-12-29T15:44:43Z",
    "url": "https://github.com/apache/doris/commit/2518ed64ea12dfbe93c1d8abc18cca0fbe260389",
    "details": {
      "sha": "a56ba1acd14f07ec11e6ccaee730006dfc438517",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/load/loadv2/LoadLoadingTask.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/doris/blob/2518ed64ea12dfbe93c1d8abc18cca0fbe260389/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fload%2Floadv2%2FLoadLoadingTask.java",
      "raw_url": "https://github.com/apache/doris/raw/2518ed64ea12dfbe93c1d8abc18cca0fbe260389/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fload%2Floadv2%2FLoadLoadingTask.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fload%2Floadv2%2FLoadLoadingTask.java?ref=2518ed64ea12dfbe93c1d8abc18cca0fbe260389",
      "patch": "@@ -160,7 +160,8 @@ private void executeOnce() throws Exception {\n         if (leftTimeMs <= 0) {\n             throw new LoadException(\"failed to execute loading task when timeout\");\n         }\n-        int timeoutS = (int) (leftTimeMs / 1000);\n+        // 1 second is the minimum granularity of actual execution\n+        int timeoutS = Math.max((int) (leftTimeMs / 1000), 1);\n         curCoordinator.setTimeout(timeoutS);\n \n         try {",
      "parent_sha": "989d20e0ace73934f9dec991b541cce0065ef2d8"
    }
  },
  {
    "oid": "e53f6a1a69b8f48817770fc6a07caf8e4e4eb2a0",
    "message": "[enchement](mc)opt maxcompute read arrow skip repeated check of isNull (#45989)\n\n### What problem does this PR solve?\r\nProblem Summary:\r\nSet MaxCompute Arrow `NullCheckingForGet.NULL_CHECKING_ENABLED` false.We\r\nwill call isNull() before calling getXXX(), so we can set this parameter\r\nto skip the repeated check of isNull().",
    "date": "2024-12-26T07:51:10Z",
    "url": "https://github.com/apache/doris/commit/e53f6a1a69b8f48817770fc6a07caf8e4e4eb2a0",
    "details": {
      "sha": "303767925466e5b92923bf82d1e06d199d996333",
      "filename": "fe/be-java-extensions/max-compute-scanner/src/main/java/org/apache/doris/maxcompute/MaxComputeJniScanner.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/apache/doris/blob/e53f6a1a69b8f48817770fc6a07caf8e4e4eb2a0/fe%2Fbe-java-extensions%2Fmax-compute-scanner%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fmaxcompute%2FMaxComputeJniScanner.java",
      "raw_url": "https://github.com/apache/doris/raw/e53f6a1a69b8f48817770fc6a07caf8e4e4eb2a0/fe%2Fbe-java-extensions%2Fmax-compute-scanner%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fmaxcompute%2FMaxComputeJniScanner.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Fbe-java-extensions%2Fmax-compute-scanner%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fmaxcompute%2FMaxComputeJniScanner.java?ref=e53f6a1a69b8f48817770fc6a07caf8e4e4eb2a0",
      "patch": "@@ -52,8 +52,14 @@\n  * MaxComputeJ JniScanner. BE will read data from the scanner object.\n  */\n public class MaxComputeJniScanner extends JniScanner {\n-    private static final Logger LOG = Logger.getLogger(MaxComputeJniScanner.class);\n+    static {\n+        //Set `NullCheckingForGet.NULL_CHECKING_ENABLED` false.\n+        //We will call isNull() before calling getXXX(), so we can set this parameter\n+        // to skip the repeated check of isNull().\n+        System.setProperty(\"arrow.enable_null_check_for_get\", \"false\");\n+    }\n \n+    private static final Logger LOG = Logger.getLogger(MaxComputeJniScanner.class);\n \n     private static final String ACCESS_KEY = \"access_key\";\n     private static final String SECRET_KEY = \"secret_key\";",
      "parent_sha": "b28adb5efdf0faf002ff923bdec6af5af60df457"
    }
  },
  {
    "oid": "737fe49f6f196009895fcf0b611becfb13de8612",
    "message": "[Bug](FE) fix compile error due to code refactor (#15192)",
    "date": "2022-12-20T05:20:55Z",
    "url": "https://github.com/apache/doris/commit/737fe49f6f196009895fcf0b611becfb13de8612",
    "details": {
      "sha": "5b8ca074b7b44a56c705345bfd055bd1e5904d4f",
      "filename": "fe/fe-core/src/test/java/org/apache/doris/nereids/rules/analysis/CheckAnalysisTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/doris/blob/737fe49f6f196009895fcf0b611becfb13de8612/fe%2Ffe-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Frules%2Fanalysis%2FCheckAnalysisTest.java",
      "raw_url": "https://github.com/apache/doris/raw/737fe49f6f196009895fcf0b611becfb13de8612/fe%2Ffe-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Frules%2Fanalysis%2FCheckAnalysisTest.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Frules%2Fanalysis%2FCheckAnalysisTest.java?ref=737fe49f6f196009895fcf0b611becfb13de8612",
      "patch": "@@ -53,6 +53,7 @@ public void testCheckNotWithChildrenWithErrorType() {\n         Plan plan = new LogicalOneRowRelation(\n                 ImmutableList.of(new Alias(new Not(new IntegerLiteral(2)), \"not_2\")));\n         CheckAnalysis checkAnalysis = new CheckAnalysis();\n-        Assertions.assertThrows(AnalysisException.class, () -> checkAnalysis.build().transform(plan, cascadesContext));\n+        Assertions.assertThrows(AnalysisException.class, () ->\n+                checkAnalysis.buildRules().forEach(rule -> rule.transform(plan, cascadesContext)));\n     }\n }",
      "parent_sha": "9d48154cdc164b88c19c6353496cd2834e9bcdb6"
    }
  },
  {
    "oid": "b192082b62cb33e3f680c3d2d597f57ac37877e3",
    "message": "[Improve](load)Solve the problem of RoutineLoadTaskScheduler idling when there is no data (#20986)\n\nSince the polling interval is 0, the CPU will be polled all the time when there is no data\r\n\r\nBefore and after comparison test, the CPU usage time is reduced by 2000 times",
    "date": "2023-06-21T16:41:45Z",
    "url": "https://github.com/apache/doris/commit/b192082b62cb33e3f680c3d2d597f57ac37877e3",
    "details": {
      "sha": "f8b4ed9119e79132b8b99e9ce202d84b1e918c70",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadTaskScheduler.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/doris/blob/b192082b62cb33e3f680c3d2d597f57ac37877e3/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fload%2Froutineload%2FRoutineLoadTaskScheduler.java",
      "raw_url": "https://github.com/apache/doris/raw/b192082b62cb33e3f680c3d2d597f57ac37877e3/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fload%2Froutineload%2FRoutineLoadTaskScheduler.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fload%2Froutineload%2FRoutineLoadTaskScheduler.java?ref=b192082b62cb33e3f680c3d2d597f57ac37877e3",
      "patch": "@@ -72,7 +72,9 @@ public RoutineLoadTaskScheduler() {\n     }\n \n     public RoutineLoadTaskScheduler(RoutineLoadManager routineLoadManager) {\n-        super(\"Routine load task scheduler\", 0);\n+        //Set the polling interval to 1ms to avoid meaningless idling when there is no data, resulting in increased CPU.\n+        // The wait/notify mechanism should be used later\n+        super(\"Routine load task scheduler\", 1);\n         this.routineLoadManager = routineLoadManager;\n     }\n ",
      "parent_sha": "fff308352feec551bc8fe797d52adf3c42a07f4a"
    }
  },
  {
    "oid": "6fe207eb4b85c92c2b11c266de90bd57e23c9922",
    "message": "[fix](broker) do not close filesystem(#24357)\n\nsame as #24128\r\nTo avoid Filesystem closed error",
    "date": "2023-09-14T10:36:09Z",
    "url": "https://github.com/apache/doris/commit/6fe207eb4b85c92c2b11c266de90bd57e23c9922",
    "details": {
      "sha": "e3e27fe1c29a05c64e88938d3ca3751e3c77b8ed",
      "filename": "fs_brokers/apache_hdfs_broker/src/main/java/org/apache/doris/broker/hdfs/BrokerFileSystem.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/doris/blob/6fe207eb4b85c92c2b11c266de90bd57e23c9922/fs_brokers%2Fapache_hdfs_broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fbroker%2Fhdfs%2FBrokerFileSystem.java",
      "raw_url": "https://github.com/apache/doris/raw/6fe207eb4b85c92c2b11c266de90bd57e23c9922/fs_brokers%2Fapache_hdfs_broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fbroker%2Fhdfs%2FBrokerFileSystem.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fs_brokers%2Fapache_hdfs_broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fbroker%2Fhdfs%2FBrokerFileSystem.java?ref=6fe207eb4b85c92c2b11c266de90bd57e23c9922",
      "patch": "@@ -55,7 +55,8 @@ public void closeFileSystem() {\n         try {\n             if (this.dfsFileSystem != null) {\n                 try {\n-                    this.dfsFileSystem.close();\n+                    // do not close file system, it will be closed automatically.\n+                    // this.dfsFileSystem.close();\n                 } catch (Exception e) {\n                     logger.error(\"errors while close file system\", e);\n                 } finally {",
      "parent_sha": "eb65cc6954c2a3cae45ac93c3c6fc142fee45591"
    }
  },
  {
    "oid": "ec91858cbfee6854975acbb4cc5100af7fc44e40",
    "message": "[bugfix](fecancel) should release lock before throw exception (#34817)\n\nCo-authored-by: yiguolei <yiguolei@gmail.com>",
    "date": "2024-05-14T10:55:38Z",
    "url": "https://github.com/apache/doris/commit/ec91858cbfee6854975acbb4cc5100af7fc44e40",
    "details": {
      "sha": "431e30896eb8c6ded91745a17319fef9c61fcccb",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/ec91858cbfee6854975acbb4cc5100af7fc44e40/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FCoordinator.java",
      "raw_url": "https://github.com/apache/doris/raw/ec91858cbfee6854975acbb4cc5100af7fc44e40/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FCoordinator.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FCoordinator.java?ref=ec91858cbfee6854975acbb4cc5100af7fc44e40",
      "patch": "@@ -1477,11 +1477,11 @@ public void cancel() {\n \n     @Override\n     public void cancel(Status cancelReason) {\n-        lock();\n         if (cancelReason.ok()) {\n             throw new RuntimeException(\"Should use correct cancel reason, but it is \"\n                     + cancelReason.toString());\n         }\n+        lock();\n         try {\n             if (!queryStatus.ok()) {\n                 // Print an error stack here to know why send cancel again.",
      "parent_sha": "5892ccaf99fee8ef2bf718485f00961290bec702"
    }
  },
  {
    "oid": "9ee7f2a001bfb0e1aed5a43077bced1e83198d6f",
    "message": "[fix](auditlog)Record return row count in audit log for internal query. (#39616)\n\nRecord return row count in audit log for internal query. Before, the\r\nreturned row count for internal select in audit log is always 0.",
    "date": "2024-08-21T07:15:10Z",
    "url": "https://github.com/apache/doris/commit/9ee7f2a001bfb0e1aed5a43077bced1e83198d6f",
    "details": {
      "sha": "d5c54fbb6fc785d9a67821857ae9126f9d37e4ac",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/qe/StmtExecutor.java",
      "status": "modified",
      "additions": 11,
      "deletions": 4,
      "changes": 15,
      "blob_url": "https://github.com/apache/doris/blob/9ee7f2a001bfb0e1aed5a43077bced1e83198d6f/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FStmtExecutor.java",
      "raw_url": "https://github.com/apache/doris/raw/9ee7f2a001bfb0e1aed5a43077bced1e83198d6f/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FStmtExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FStmtExecutor.java?ref=9ee7f2a001bfb0e1aed5a43077bced1e83198d6f",
      "patch": "@@ -3340,11 +3340,18 @@ public List<ResultRow> executeInternalQuery() {\n                         if (batch.getBatch() == null) {\n                             continue;\n                         }\n-                        LOG.debug(\"Batch size for query {} is {}\",\n-                                DebugUtil.printId(queryId), batch.getBatch().rows.size());\n+                        if (batch.getBatch().getRows() != null) {\n+                            context.updateReturnRows(batch.getBatch().getRows().size());\n+                            if (LOG.isDebugEnabled()) {\n+                                LOG.debug(\"Batch size for query {} is {}\",\n+                                        DebugUtil.printId(queryId), batch.getBatch().rows.size());\n+                            }\n+                        }\n                         resultRows.addAll(convertResultBatchToResultRows(batch.getBatch()));\n-                        LOG.debug(\"Result size for query {} is currently {}\",\n-                                DebugUtil.printId(queryId), batch.getBatch().rows.size());\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"Result size for query {} is currently {}\",\n+                                    DebugUtil.printId(queryId), resultRows.size());\n+                        }\n                     }\n                 }\n             } catch (Exception e) {",
      "parent_sha": "bddf7285bbba7eecff9ef0d09ac361422e5f9455"
    }
  },
  {
    "oid": "4f19fe81ecdbac292585c8ef1afbb97911f4ab2c",
    "message": "remove some unused code (#9240)",
    "date": "2022-04-27T03:04:16Z",
    "url": "https://github.com/apache/doris/commit/4f19fe81ecdbac292585c8ef1afbb97911f4ab2c",
    "details": {
      "sha": "20fccab3fa6210e4627f3259389b0fc61eaa6b7a",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/qe/SessionVariable.java",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/apache/doris/blob/4f19fe81ecdbac292585c8ef1afbb97911f4ab2c/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FSessionVariable.java",
      "raw_url": "https://github.com/apache/doris/raw/4f19fe81ecdbac292585c8ef1afbb97911f4ab2c/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FSessionVariable.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FSessionVariable.java?ref=4f19fe81ecdbac292585c8ef1afbb97911f4ab2c",
      "patch": "@@ -275,7 +275,7 @@ public class SessionVariable implements Serializable, Writable {\n \n     // The number of seconds the server waits for activity on a noninteractive connection before closing it.\n     @VariableMgr.VarAttr(name = WAIT_TIMEOUT)\n-    public int waitTimeout = 28800;\n+    public int waitTimeoutS = 28800;\n \n     // The number of seconds to wait for a block to be written to a connection before aborting the write\n     @VariableMgr.VarAttr(name = NET_WRITE_TIMEOUT)\n@@ -466,7 +466,7 @@ public boolean enableProfile() {\n     }\n \n     public int getWaitTimeoutS() {\n-        return waitTimeout;\n+        return waitTimeoutS;\n     }\n \n     public long getSqlMode() {\n@@ -551,10 +551,6 @@ public int getInteractiveTimeout() {\n         return interactiveTimeout;\n     }\n \n-    public int getWaitTimeout() {\n-        return waitTimeout;\n-    }\n-\n     public int getNetWriteTimeout() {\n         return netWriteTimeout;\n     }",
      "parent_sha": "923c38398fedbb21cdad6d108178ad720fef4a93"
    }
  },
  {
    "oid": "46005bf6bab432c37ec37879f75d8a7347a58ee3",
    "message": "Fix bug for show create table statement with unique key types (#2231)",
    "date": "2019-11-20T02:02:04Z",
    "url": "https://github.com/apache/doris/commit/46005bf6bab432c37ec37879f75d8a7347a58ee3",
    "details": {
      "sha": "58b18d6b1b573029d13ae83d00a8d3746b68d242",
      "filename": "fe/src/main/java/org/apache/doris/analysis/CreateTableStmt.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/46005bf6bab432c37ec37879f75d8a7347a58ee3/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FCreateTableStmt.java",
      "raw_url": "https://github.com/apache/doris/raw/46005bf6bab432c37ec37879f75d8a7347a58ee3/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FCreateTableStmt.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FCreateTableStmt.java?ref=46005bf6bab432c37ec37879f75d8a7347a58ee3",
      "patch": "@@ -340,7 +340,7 @@ public void analyze(Analyzer analyzer) throws AnalysisException, UserException {\n                     col.setAggregationTypeImplicit(true);\n                 }\n             }\n-            columns.add(columnDef.toColumn());\n+            columns.add(col);\n         }\n     }\n ",
      "parent_sha": "9be86a3db895a450ffa89eb32650a128327a4602"
    }
  },
  {
    "oid": "cf717882d826185a4ae9412b6b6a08e2695083c6",
    "message": "[fix](jdbc catalog) fix hana jdbc table bug (#22190)",
    "date": "2023-07-26T00:45:06Z",
    "url": "https://github.com/apache/doris/commit/cf717882d826185a4ae9412b6b6a08e2695083c6",
    "details": {
      "sha": "06a055ebce5713d0275b6f43ca7863378d990b0f",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/catalog/JdbcTable.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/doris/blob/cf717882d826185a4ae9412b6b6a08e2695083c6/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FJdbcTable.java",
      "raw_url": "https://github.com/apache/doris/raw/cf717882d826185a4ae9412b6b6a08e2695083c6/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FJdbcTable.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FJdbcTable.java?ref=cf717882d826185a4ae9412b6b6a08e2695083c6",
      "patch": "@@ -312,7 +312,8 @@ private void validate(Map<String, String> properties) throws DdlException {\n \n         String urlType = jdbcUrl.split(\":\")[1];\n         if (!jdbcTypeName.equalsIgnoreCase(urlType)) {\n-            if (!(jdbcTypeName.equalsIgnoreCase(\"oceanbase_oracle\") && urlType.equalsIgnoreCase(\"oceanbase\"))) {\n+            if (!(jdbcTypeName.equalsIgnoreCase(\"oceanbase_oracle\") && urlType.equalsIgnoreCase(\"oceanbase\"))\n+                    && !(jdbcTypeName.equalsIgnoreCase(\"sap_hana\") && urlType.equalsIgnoreCase(\"sap\"))) {\n                 throw new DdlException(\"property \" + TABLE_TYPE + \" must be same with resource url\");\n             }\n         }",
      "parent_sha": "ba3a0922ebb605f345dcf4dc35608d0ef0e64d14"
    }
  },
  {
    "oid": "5c8e801761b079c59347941220005eb04c14f44b",
    "message": "[Fix](multi catalog, nereids)Fix text file required slot bug (#20214)\n\nrequired_slots in TFileScanRangeParams params for external hive table may be updated after FileQueryScanNode finalize. For text file, we need to use the origin required_slots in params so that the list could be updated later. Otherwise, query text file may get the following error:\r\n[INTERNAL_ERROR]Unknown source slot descriptor, slot_id=3",
    "date": "2023-05-30T13:29:33Z",
    "url": "https://github.com/apache/doris/commit/5c8e801761b079c59347941220005eb04c14f44b",
    "details": {
      "sha": "378e974b7d6fb2704eb311ae634a49a4fe019539",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/planner/external/FileQueryScanNode.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/apache/doris/blob/5c8e801761b079c59347941220005eb04c14f44b/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fplanner%2Fexternal%2FFileQueryScanNode.java",
      "raw_url": "https://github.com/apache/doris/raw/5c8e801761b079c59347941220005eb04c14f44b/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fplanner%2Fexternal%2FFileQueryScanNode.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fplanner%2Fexternal%2FFileQueryScanNode.java?ref=5c8e801761b079c59347941220005eb04c14f44b",
      "patch": "@@ -139,7 +139,7 @@ protected void initSchemaParams() throws UserException {\n             params.addToRequiredSlots(slotInfo);\n         }\n         setDefaultValueExprs(getTargetTable(), destSlotDescByName, params, false);\n-        setColumnPositionMappingForTextFile();\n+        setColumnPositionMapping();\n         // For query, set src tuple id to -1.\n         params.setSrcTupleId(-1);\n     }\n@@ -167,6 +167,11 @@ public void updateRequiredSlots(PlanTranslatorContext planTranslatorContext,\n             slotInfo.setIsFileSlot(!getPathPartitionKeys().contains(slot.getColumn().getName()));\n             params.addToRequiredSlots(slotInfo);\n         }\n+        // Update required slots in scanRangeLocations.\n+        for (TScanRangeLocations location : scanRangeLocations) {\n+            location.getScanRange().getExtScanRange().getFileScanRange()\n+                .getParams().setRequiredSlots(params.getRequiredSlots());\n+        }\n     }\n \n     @Override\n@@ -184,7 +189,7 @@ protected void doFinalize() throws UserException {\n         createScanRangeLocations();\n     }\n \n-    private void setColumnPositionMappingForTextFile()\n+    private void setColumnPositionMapping()\n             throws UserException {\n         TableIf tbl = getTargetTable();\n         List<Integer> columnIdxs = Lists.newArrayList();",
      "parent_sha": "b7a69fbf4bf1ab0338e79366e08fc33208c1a0b2"
    }
  },
  {
    "oid": "83e5ecdeccf10f397f99560e1257a0d8f1717b83",
    "message": "[fix](Nereids) use a threshold to check the equal double values in n-th rank (#17118)\n\nThe cost is inaccurate, so we use a threshold to check the equal double values",
    "date": "2023-02-24T14:12:47Z",
    "url": "https://github.com/apache/doris/commit/83e5ecdeccf10f397f99560e1257a0d8f1717b83",
    "details": {
      "sha": "a64db0284749b5a292d77e4f9265b6fd020f6ce6",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/nereids/memo/Memo.java",
      "status": "modified",
      "additions": 14,
      "deletions": 11,
      "changes": 25,
      "blob_url": "https://github.com/apache/doris/blob/83e5ecdeccf10f397f99560e1257a0d8f1717b83/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Fmemo%2FMemo.java",
      "raw_url": "https://github.com/apache/doris/raw/83e5ecdeccf10f397f99560e1257a0d8f1717b83/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Fmemo%2FMemo.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Fmemo%2FMemo.java?ref=83e5ecdeccf10f397f99560e1257a0d8f1717b83",
      "patch": "@@ -51,7 +51,6 @@\n import java.util.Map.Entry;\n import java.util.Optional;\n import java.util.PriorityQueue;\n-import java.util.Queue;\n import java.util.stream.Collectors;\n import javax.annotation.Nullable;\n \n@@ -721,20 +720,24 @@ public String toString() {\n      * In unrank() function, we will extract the actual physical function according the unique ID\n      */\n     public long rank(long n) {\n+        double threshold = 0.000000001;\n         Preconditions.checkArgument(n > 0, \"the n %d must be greater than 0 in nthPlan\", n);\n         List<Pair<Long, Double>> plans = rankGroup(root, PhysicalProperties.GATHER);\n-        Queue<Pair<Long, Double>> rankingQueue = new PriorityQueue<>(\n-                (l, r) -> -Double.compare(l.second, r.second));\n-\n-        for (Pair<Long, Double> plan : plans) {\n-            if (rankingQueue.size() == 0 || rankingQueue.size() < n) {\n-                rankingQueue.add(plan);\n-            } else if (rankingQueue.peek().second > plan.second) {\n-                rankingQueue.poll();\n-                rankingQueue.add(plan);\n+        plans = plans.stream().filter(\n+                p -> !p.second.equals(Double.NaN)\n+                        && !p.second.equals(Double.POSITIVE_INFINITY)\n+                        && !p.second.equals(Double.NEGATIVE_INFINITY))\n+                .collect(Collectors.toList());\n+        // This is big heap, it always pops the element with larger cost or larger id.\n+        PriorityQueue<Pair<Long, Double>> pq = new PriorityQueue<>((l, r) -> Math.abs(l.second - r.second) < threshold\n+                ? -Long.compare(l.first, r.first) : -Double.compare(l.second, r.second));\n+        for (Pair<Long, Double> p : plans) {\n+            pq.add(p);\n+            if (pq.size() > n) {\n+                pq.poll();\n             }\n         }\n-        return rankingQueue.peek().first;\n+        return pq.peek().first;\n     }\n \n     private List<Pair<Long, Double>> rankGroup(Group group, PhysicalProperties prop) {",
      "parent_sha": "a90e11a025f783b9d5a282053ab09145f24927e6"
    }
  },
  {
    "oid": "13894ae79019600040a03914cf452c9bd1d8a04e",
    "message": "[fix](jdbc catalog) Use default value if the user does not set the pool parameter in be.conf #18919",
    "date": "2023-04-22T00:39:26Z",
    "url": "https://github.com/apache/doris/commit/13894ae79019600040a03914cf452c9bd1d8a04e",
    "details": {
      "sha": "c25a60dff0b18ecdc5ad9d185aa93e18df6ef43f",
      "filename": "fe/java-udf/src/main/java/org/apache/doris/udf/JdbcExecutor.java",
      "status": "modified",
      "additions": 11,
      "deletions": 7,
      "changes": 18,
      "blob_url": "https://github.com/apache/doris/blob/13894ae79019600040a03914cf452c9bd1d8a04e/fe%2Fjava-udf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fudf%2FJdbcExecutor.java",
      "raw_url": "https://github.com/apache/doris/raw/13894ae79019600040a03914cf452c9bd1d8a04e/fe%2Fjava-udf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fudf%2FJdbcExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Fjava-udf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fudf%2FJdbcExecutor.java?ref=13894ae79019600040a03914cf452c9bd1d8a04e",
      "patch": "@@ -73,10 +73,10 @@ public class JdbcExecutor {\n     private int curBlockRows = 0;\n     private static final byte[] emptyBytes = new byte[0];\n     private DruidDataSource druidDataSource = null;\n-    private int minPoolSize = 1;\n-    private int maxPoolSize = 100;\n-    private int minIdleSize = 1;\n-    private int maxIdelTime = 600000;\n+    private int minPoolSize;\n+    private int maxPoolSize;\n+    private int minIdleSize;\n+    private int maxIdelTime;\n \n     public JdbcExecutor(byte[] thriftParams) throws Exception {\n         TJdbcExecutorCtorParams request = new TJdbcExecutorCtorParams();\n@@ -86,10 +86,14 @@ public JdbcExecutor(byte[] thriftParams) throws Exception {\n         } catch (TException e) {\n             throw new InternalException(e.getMessage());\n         }\n-        minPoolSize = Integer.valueOf(System.getProperty(\"JDBC_MIN_POOL\"));\n-        maxPoolSize = Integer.valueOf(System.getProperty(\"JDBC_MAX_POOL\"));\n-        maxIdelTime = Integer.valueOf(System.getProperty(\"JDBC_MAX_IDEL_TIME\"));\n+        minPoolSize = Integer.valueOf(System.getProperty(\"JDBC_MIN_POOL\", \"1\"));\n+        maxPoolSize = Integer.valueOf(System.getProperty(\"JDBC_MAX_POOL\", \"100\"));\n+        maxIdelTime = Integer.valueOf(System.getProperty(\"JDBC_MAX_IDEL_TIME\", \"600000\"));\n         minIdleSize = minPoolSize > 0 ? 1 : 0;\n+        LOG.info(\"JdbcExecutor set minPoolSize = \" + minPoolSize\n+                + \", maxPoolSize = \" + maxPoolSize\n+                + \", maxIdelTime = \" + maxIdelTime\n+                + \", minIdleSize = \" + minIdleSize);\n         init(request.driver_path, request.statement, request.batch_size, request.jdbc_driver_class,\n                 request.jdbc_url, request.jdbc_user, request.jdbc_password, request.op, request.table_type);\n     }",
      "parent_sha": "a1c05b5c13c9ea639723eb5b91d1ad819a315e78"
    }
  },
  {
    "oid": "66c2b2915f4a7390c118d8b53ab7a15d1f95b9bb",
    "message": "[fix](Nereids) date >= simplify to > by mistake (#30765)",
    "date": "2024-02-03T12:16:24Z",
    "url": "https://github.com/apache/doris/commit/66c2b2915f4a7390c118d8b53ab7a15d1f95b9bb",
    "details": {
      "sha": "09f9b311f49ed40814ed63e0fb1c2b1ef91e1235",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/nereids/rules/expression/rules/DateFunctionRewrite.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/doris/blob/66c2b2915f4a7390c118d8b53ab7a15d1f95b9bb/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Frules%2Fexpression%2Frules%2FDateFunctionRewrite.java",
      "raw_url": "https://github.com/apache/doris/raw/66c2b2915f4a7390c118d8b53ab7a15d1f95b9bb/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Frules%2Fexpression%2Frules%2FDateFunctionRewrite.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Frules%2Fexpression%2Frules%2FDateFunctionRewrite.java?ref=66c2b2915f4a7390c118d8b53ab7a15d1f95b9bb",
      "patch": "@@ -96,14 +96,14 @@ public Expression visitGreaterThanEqual(GreaterThanEqual greaterThanEqual, Expre\n             if (greaterThanEqual.left().child(0).getDataType() instanceof DateTimeType\n                     && greaterThanEqual.right() instanceof DateLiteral) {\n                 DateTimeLiteral newLiteral = ((DateLiteral) greaterThanEqual.right()).toBeginOfTheDay();\n-                return new GreaterThan(greaterThanEqual.left().child(0), newLiteral);\n+                return new GreaterThanEqual(greaterThanEqual.left().child(0), newLiteral);\n             }\n \n             // V2\n             if (greaterThanEqual.left().child(0).getDataType() instanceof DateTimeV2Type\n                     && greaterThanEqual.right() instanceof DateV2Literal) {\n                 DateTimeV2Literal newLiteral = ((DateV2Literal) greaterThanEqual.right()).toBeginOfTheDay();\n-                return new GreaterThan(greaterThanEqual.left().child(0), newLiteral);\n+                return new GreaterThanEqual(greaterThanEqual.left().child(0), newLiteral);\n             }\n         }\n         return greaterThanEqual;",
      "parent_sha": "253d93a11d3a5717d8a095c249531169d7179809"
    }
  },
  {
    "oid": "53d00d92cc29d2403e8a18d496c763957545f677",
    "message": "[Doris On ES][Bug-Fix] ES queries always route at same 3 BE nodes (#4351) (#4352)\n\nresolve the problem of querying ES table always route at same 3 BE nodes because of random strategy",
    "date": "2020-08-18T02:36:18Z",
    "url": "https://github.com/apache/doris/commit/53d00d92cc29d2403e8a18d496c763957545f677",
    "details": {
      "sha": "7db0e002ce82508048796f801d636d488fe57a37",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/planner/EsScanNode.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/apache/doris/blob/53d00d92cc29d2403e8a18d496c763957545f677/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fplanner%2FEsScanNode.java",
      "raw_url": "https://github.com/apache/doris/raw/53d00d92cc29d2403e8a18d496c763957545f677/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fplanner%2FEsScanNode.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fplanner%2FEsScanNode.java?ref=53d00d92cc29d2403e8a18d496c763957545f677",
      "patch": "@@ -204,13 +204,14 @@ private List<TScanRangeLocations> getShardLocations() throws UserException {\n                     String.join(\",\", unPartitionedIndices),\n                     String.join(\",\", partitionedIndices));\n         }\n-        int beIndex = random.nextInt(backendList.size());\n+        int size = backendList.size();\n+        int beIndex = random.nextInt(size);\n         List<TScanRangeLocations> result = Lists.newArrayList();\n         for (EsShardPartitions indexState : selectedIndex) {\n             for (List<EsShardRouting> shardRouting : indexState.getShardRoutings().values()) {\n                 // get backends\n                 Set<Backend> colocatedBes = Sets.newHashSet();\n-                int numBe = Math.min(3, backendMap.size());\n+                int numBe = Math.min(3, size);\n                 List<TNetworkAddress> shardAllocations = new ArrayList<>();\n                 for (EsShardRouting item : shardRouting) {\n                     shardAllocations.add(EsTable.TRANSPORT_HTTP.equals(table.getTransport()) ? item.getHttpAddress() : item.getAddress());\n@@ -224,7 +225,7 @@ private List<TScanRangeLocations> getShardLocations() throws UserException {\n                 List<Backend> candidateBeList = Lists.newArrayList();\n                 if (usingRandomBackend) {\n                     for (int i = 0; i < numBe; ++i) {\n-                        candidateBeList.add(backendList.get(beIndex++ % numBe));\n+                        candidateBeList.add(backendList.get(beIndex++ % size));\n                     }\n                 } else {\n                     candidateBeList.addAll(colocatedBes);",
      "parent_sha": "d5e456a3c32aaaf29b3315cf92fefcd7a52b06e0"
    }
  },
  {
    "oid": "21f94c5d6ceac34b51bfa8e25ba2859a846c5b51",
    "message": "[BUG][ARRAY] fix array bound bug (#6347)\n\nfix #6346",
    "date": "2021-08-05T06:34:12Z",
    "url": "https://github.com/apache/doris/commit/21f94c5d6ceac34b51bfa8e25ba2859a846c5b51",
    "details": {
      "sha": "85572fd17f246c7049bf3f2e6b9bfb005dd5fe60",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/catalog/PrimitiveType.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/21f94c5d6ceac34b51bfa8e25ba2859a846c5b51/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FPrimitiveType.java",
      "raw_url": "https://github.com/apache/doris/raw/21f94c5d6ceac34b51bfa8e25ba2859a846c5b51/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FPrimitiveType.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FPrimitiveType.java?ref=21f94c5d6ceac34b51bfa8e25ba2859a846c5b51",
      "patch": "@@ -576,7 +576,7 @@ public static List<TPrimitiveType> toThrift(PrimitiveType[] types) {\n     }\n \n     public static int getMaxSlotSize() {\n-        return DECIMALV2.slotSize;\n+        return ARRAY.slotSize;\n     }\n \n     /**",
      "parent_sha": "216295d1b8500a02e954c2649a57f0bd8616b9aa"
    }
  },
  {
    "oid": "9b6bee56b26ea41c3eb4167a3ab2a666230fbc14",
    "message": "[fix](persist) Fix the generated dropping tmp partition sql (#43079)\n\nThe syntax is:\r\n\r\n```\r\nKW_DROP opt_tmp:isTempPartition KW_PARTITION ...\r\n```",
    "date": "2024-11-02T00:41:10Z",
    "url": "https://github.com/apache/doris/commit/9b6bee56b26ea41c3eb4167a3ab2a666230fbc14",
    "details": {
      "sha": "de2bd7295c9710c48c18cd39782c00126b6e2085",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/persist/DropPartitionInfo.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/doris/blob/9b6bee56b26ea41c3eb4167a3ab2a666230fbc14/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fpersist%2FDropPartitionInfo.java",
      "raw_url": "https://github.com/apache/doris/raw/9b6bee56b26ea41c3eb4167a3ab2a666230fbc14/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fpersist%2FDropPartitionInfo.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fpersist%2FDropPartitionInfo.java?ref=9b6bee56b26ea41c3eb4167a3ab2a666230fbc14",
      "patch": "@@ -60,11 +60,11 @@ public DropPartitionInfo(Long dbId, Long tableId, Long partitionId, String parti\n         this.recycleTime = recycleTime;\n \n         StringBuilder sb = new StringBuilder();\n-        sb.append(\"DROP PARTITION \");\n+        sb.append(\"DROP \");\n         if (isTempPartition) {\n             sb.append(\"TEMPORARY \");\n         }\n-        sb.append(\"`\").append(partitionName).append(\"`\");\n+        sb.append(\"PARTITION `\").append(partitionName).append(\"`\");\n         if (forceDrop) {\n             sb.append(\" FORCE\");\n         }",
      "parent_sha": "00be5d4a2098eef19f9fdb2936f4269a34b56a41"
    }
  },
  {
    "oid": "a88e80f8eea6c31b692216d53113d316f099ac92",
    "message": "[fix](ssl)refactor some SSL info logs to debug logs (#18234)",
    "date": "2023-03-31T00:41:02Z",
    "url": "https://github.com/apache/doris/commit/a88e80f8eea6c31b692216d53113d316f099ac92",
    "details": {
      "sha": "e8e0c23595a0a2499f58c4c4213c62d9ecdd560e",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/mysql/MysqlProto.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apache/doris/blob/a88e80f8eea6c31b692216d53113d316f099ac92/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fmysql%2FMysqlProto.java",
      "raw_url": "https://github.com/apache/doris/raw/a88e80f8eea6c31b692216d53113d316f099ac92/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fmysql%2FMysqlProto.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fmysql%2FMysqlProto.java?ref=a88e80f8eea6c31b692216d53113d316f099ac92",
      "patch": "@@ -182,10 +182,10 @@ public static boolean negotiate(ConnectContext context) throws IOException {\n         ByteBuffer handshakeResponse;\n \n         if (capability.isClientUseSsl()) {\n-            LOG.info(\"client is using ssl connection.\");\n+            LOG.debug(\"client is using ssl connection.\");\n             // During development, we set SSL mode to true by default.\n             if (SERVER_USE_SSL) {\n-                LOG.info(\"server is also using ssl connection. Will use ssl mode for data exchange.\");\n+                LOG.debug(\"server is also using ssl connection. Will use ssl mode for data exchange.\");\n                 MysqlSslContext mysqlSslContext = context.getMysqlSslContext();\n                 mysqlSslContext.init();\n                 channel.initSslBuffer();\n@@ -218,7 +218,7 @@ public static boolean negotiate(ConnectContext context) throws IOException {\n \n                 // Set channel mode to ssl mode to handle socket packet in ssl format.\n                 channel.setSslMode(true);\n-                LOG.info(\"switch to ssl mode.\");\n+                LOG.debug(\"switch to ssl mode.\");\n                 handshakeResponse = channel.fetchOnePacket();\n                 capability = new MysqlCapability(MysqlProto.readLowestInt4(handshakeResponse));\n                 if (!capability.isClientUseSsl()) {",
      "parent_sha": "b5ea299697664cc042ec7dfd5ad54b18c869e5e7"
    }
  },
  {
    "oid": "42207df89f70bb6241c543f3ecd3da4bac13d9f5",
    "message": "[refactor](nereids)update NormalizeRepeat comments (#24893)\n\nupdate NormalizeRepeat comments",
    "date": "2023-09-28T02:42:16Z",
    "url": "https://github.com/apache/doris/commit/42207df89f70bb6241c543f3ecd3da4bac13d9f5",
    "details": {
      "sha": "005cc663862c768757189b574996d96bb54750e8",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/nereids/rules/analysis/NormalizeRepeat.java",
      "status": "modified",
      "additions": 15,
      "deletions": 12,
      "changes": 27,
      "blob_url": "https://github.com/apache/doris/blob/42207df89f70bb6241c543f3ecd3da4bac13d9f5/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Frules%2Fanalysis%2FNormalizeRepeat.java",
      "raw_url": "https://github.com/apache/doris/raw/42207df89f70bb6241c543f3ecd3da4bac13d9f5/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Frules%2Fanalysis%2FNormalizeRepeat.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Frules%2Fanalysis%2FNormalizeRepeat.java?ref=42207df89f70bb6241c543f3ecd3da4bac13d9f5",
      "patch": "@@ -54,21 +54,24 @@\n import javax.annotation.Nullable;\n \n /** NormalizeRepeat\n- * eg: select sum(k2 + 1), grouping(k1) from t1 group by grouping sets ((k1));\n+ * eg: select sum(b + 1), grouping(a+1) from t1 group by grouping sets ((b+1));\n  * Original Plan:\n- *     +-- GroupingSets(\n- *         keys:[k1#1, grouping_id()#0, grouping_prefix(k1#1)#7]\n- *         outputs:sum(k2#2 + 1) as `sum(k2 + 1)`#3, group(grouping_prefix(k1#1)#7) as `grouping(k1 + 1)`#4\n+ * LogicalRepeat ( groupingSets=[[(a#0 + 1)]],\n+ *                 outputExpressions=[sum((b#1 + 1)) AS `sum((b + 1))`#2,\n+ *                 Grouping((a#0 + 1)) AS `Grouping((a + 1))`#3] )\n+ *      +--LogicalOlapScan (t1)\n  *\n  * After:\n- * Project(sum((k2 + 1)#8) AS `sum((k2 + 1))`#9, grouping(GROUPING_PREFIX_(k1#1)#7)) as `grouping(k1)`#10)\n- *   +-- Aggregate(\n- *          keys:[k1#1, grouping_id()#0, grouping_prefix(k1#1)#7]\n- *          outputs:[(K2 + 1)#8), grouping_prefix(k1#1)#7]\n- *         +-- GropingSets(\n- *             keys:[k1#1, grouping_id()#0, grouping_prefix(k1#1)#7]\n- *             outputs:k1#1, (k2 + 1)#8, grouping_id()#0, grouping_prefix(k1#1)#7\n- *             +-- Project(k1#1, (K2#2 + 1) as `(k2 + 1)`#8)\n+ * LogicalAggregate[62] ( groupByExpr=[(a + 1)#4, GROUPING_ID#7, GROUPING_PREFIX_(a + 1)#6],\n+ *                        outputExpr=[sum((b + 1)#5) AS `sum((b + 1))`#2,\n+ *                                    GROUPING_PREFIX_(a + 1)#6 AS `GROUPING_PREFIX_(a + 1)`#3] )\n+ *    +--LogicalRepeat ( groupingSets=[[(a + 1)#4]],\n+ *                       outputExpressions=[(a + 1)#4,\n+ *                                          (b + 1)#5,\n+ *                                          GROUPING_ID#7,\n+ *                                          GROUPING_PREFIX_(a + 1)#6] )\n+ *      +--LogicalProject[60] ( projects=[(a#0 + 1) AS `(a + 1)`#4, (b#1 + 1) AS `(b + 1)`#5], excepts=[]\n+ *          +--LogicalOlapScan ( t1 )\n  */\n public class NormalizeRepeat extends OneAnalysisRuleFactory {\n     @Override",
      "parent_sha": "4ff1ab7a4d2a28cf66db4709807b6a5407f6a891"
    }
  },
  {
    "oid": "ca0e4844e8cfa84b77fba67949ebd4481c1bcba3",
    "message": "[typo](comment) code comment fix (#17870)\n\nCo-authored-by: wangqingtao6 <wangqingtao6@jd.com>",
    "date": "2023-03-24T09:47:30Z",
    "url": "https://github.com/apache/doris/commit/ca0e4844e8cfa84b77fba67949ebd4481c1bcba3",
    "details": {
      "sha": "871b71d2dd285dccba195d0aa40dd9122a4a0210",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/qe/StmtExecutor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/doris/blob/ca0e4844e8cfa84b77fba67949ebd4481c1bcba3/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FStmtExecutor.java",
      "raw_url": "https://github.com/apache/doris/raw/ca0e4844e8cfa84b77fba67949ebd4481c1bcba3/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FStmtExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FStmtExecutor.java?ref=ca0e4844e8cfa84b77fba67949ebd4481c1bcba3",
      "patch": "@@ -596,7 +596,7 @@ public void execute(TUniqueId queryId) throws Exception {\n                 handleTransactionStmt();\n             } else if (parsedStmt instanceof CreateTableAsSelectStmt) {\n                 handleCtasStmt();\n-            } else if (parsedStmt instanceof InsertStmt) { // Must ahead of DdlStmt because InserStmt is its subclass\n+            } else if (parsedStmt instanceof InsertStmt) { // Must ahead of DdlStmt because InsertStmt is its subclass\n                 try {\n                     handleInsertStmt();\n                     if (!((InsertStmt) parsedStmt).getQueryStmt().isExplain()) {\n@@ -1551,7 +1551,7 @@ private void beginTxn(String dbName, String tblName) throws UserException, TExce\n         executor.beginTransaction(request);\n     }\n \n-    // Process a select statement.\n+    // Process an insert statement.\n     private void handleInsertStmt() throws Exception {\n         // Every time set no send flag and clean all data in buffer\n         if (context.getMysqlChannel() != null) {",
      "parent_sha": "b244c41371aa0834d780079a551cd7ae618fd58b"
    }
  },
  {
    "oid": "50b81a9c13bd05446b15cebc4fcb1e5e18e6e28a",
    "message": " [Fix](multi-catalog) Filter invisible files for hive table. (#21867)\n\nIn fact, hive can not read files which startswith \".\" or \"_\", so we need filter these files.",
    "date": "2023-07-18T05:08:12Z",
    "url": "https://github.com/apache/doris/commit/50b81a9c13bd05446b15cebc4fcb1e5e18e6e28a",
    "details": {
      "sha": "1db50c93fbee109a6eaca845144281801b71052d",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/datasource/hive/HiveMetaStoreCache.java",
      "status": "modified",
      "additions": 21,
      "deletions": 11,
      "changes": 32,
      "blob_url": "https://github.com/apache/doris/blob/50b81a9c13bd05446b15cebc4fcb1e5e18e6e28a/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2Fhive%2FHiveMetaStoreCache.java",
      "raw_url": "https://github.com/apache/doris/raw/50b81a9c13bd05446b15cebc4fcb1e5e18e6e28a/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2Fhive%2FHiveMetaStoreCache.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2Fhive%2FHiveMetaStoreCache.java?ref=50b81a9c13bd05446b15cebc4fcb1e5e18e6e28a",
      "patch": "@@ -51,7 +51,6 @@\n import org.apache.doris.planner.ListPartitionPrunerV2;\n import org.apache.doris.planner.PartitionPrunerV2Base.UniqueId;\n import org.apache.doris.planner.external.FileSplit;\n-import org.apache.doris.spi.Split;\n \n import com.google.common.base.Preconditions;\n import com.google.common.base.Strings;\n@@ -66,6 +65,7 @@\n import com.google.common.collect.Streams;\n import com.google.common.collect.TreeRangeMap;\n import lombok.Data;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.BlockLocation;\n@@ -957,7 +957,7 @@ public static class FileCacheValue {\n         // File Cache for self splitter.\n         private final List<HiveFileStatus> files = Lists.newArrayList();\n         // File split cache for old splitter. This is a temp variable.\n-        private final List<Split> splits = Lists.newArrayList();\n+        private final List<FileSplit> splits = Lists.newArrayList();\n         private boolean isSplittable;\n         // The values of partitions.\n         // e.g for file : hdfs://path/to/table/part1=a/part2=b/datafile\n@@ -967,17 +967,21 @@ public static class FileCacheValue {\n         private AcidInfo acidInfo;\n \n         public void addFile(RemoteFile file) {\n-            HiveFileStatus status = new HiveFileStatus();\n-            status.setBlockLocations(file.getBlockLocations());\n-            status.setPath(file.getPath());\n-            status.length = file.getSize();\n-            status.blockSize = file.getBlockSize();\n-            status.modificationTime = file.getModificationTime();\n-            files.add(status);\n+            if (isFileVisible(file.getName())) {\n+                HiveFileStatus status = new HiveFileStatus();\n+                status.setBlockLocations(file.getBlockLocations());\n+                status.setPath(file.getPath());\n+                status.length = file.getSize();\n+                status.blockSize = file.getBlockSize();\n+                status.modificationTime = file.getModificationTime();\n+                files.add(status);\n+            }\n         }\n \n-        public void addSplit(Split split) {\n-            splits.add(split);\n+        public void addSplit(FileSplit split) {\n+            if (isFileVisible(split.getPath().getName())) {\n+                splits.add(split);\n+            }\n         }\n \n         public int getValuesSize() {\n@@ -992,6 +996,12 @@ public AcidInfo getAcidInfo() {\n         public void setAcidInfo(AcidInfo acidInfo) {\n             this.acidInfo = acidInfo;\n         }\n+\n+        private boolean isFileVisible(String filename) {\n+            return StringUtils.isNotEmpty(filename)\n+                        && !filename.startsWith(\".\")\n+                        && !filename.startsWith(\"_\");\n+        }\n     }\n \n     @Data",
      "parent_sha": "417e3e5616aa1c69a845234df04e0fcebf31d98f"
    }
  },
  {
    "oid": "105a4fb41a35ab09dabd49c3c47dd4dcdf163f65",
    "message": "[regression](fuzzy) Make pipeline engine fuzzy test mode (#16807)",
    "date": "2023-02-16T07:02:27Z",
    "url": "https://github.com/apache/doris/commit/105a4fb41a35ab09dabd49c3c47dd4dcdf163f65",
    "details": {
      "sha": "d5a6c7e0f72b392871214c34b6310fe498bc52e0",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/qe/SessionVariable.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/doris/blob/105a4fb41a35ab09dabd49c3c47dd4dcdf163f65/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FSessionVariable.java",
      "raw_url": "https://github.com/apache/doris/raw/105a4fb41a35ab09dabd49c3c47dd4dcdf163f65/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FSessionVariable.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FSessionVariable.java?ref=105a4fb41a35ab09dabd49c3c47dd4dcdf163f65",
      "patch": "@@ -741,11 +741,11 @@ public void initFuzzyModeVariables() {\n         }\n         // pull_request_id default value is 0\n         if (Config.pull_request_id % 2 == 1) {\n-            // this.enablePipelineEngine = true;\n+            this.enablePipelineEngine = true;\n             // this.enableFoldConstantByBe = true;\n             // this.enableTwoPhaseReadOpt = false;\n         } else {\n-            // this.enablePipelineEngine = false;\n+            this.enablePipelineEngine = false;\n             // this.enableFoldConstantByBe = false;\n             // this.enableTwoPhaseReadOpt = true;\n         }",
      "parent_sha": "da3650c1c17968e927c3e061d6859025f15a3fb2"
    }
  },
  {
    "oid": "ea646c6682f375d80ec04b0400b1378ac1b25903",
    "message": "[fix](mtmv)fix thread local reference to checkpoint's Env, causing Env to be unable to be reclaimed, resulting in excessive memory usage by FE (#28723)\n\nwhen replay addTaskResult log,will create one ConnectContext,and set Env.getCurrentEnv,then store this ctx in ConnectContext.threadLocalInfo,threadLocalInfo is static,so this ctx can not be recycling\uff0cEnv of replay thread also can not be recycling",
    "date": "2023-12-20T11:46:58Z",
    "url": "https://github.com/apache/doris/commit/ea646c6682f375d80ec04b0400b1378ac1b25903",
    "details": {
      "sha": "9cd5bdac78afbe32c3d4799d1e6ec6620fd8a57c",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/catalog/MTMV.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/apache/doris/blob/ea646c6682f375d80ec04b0400b1378ac1b25903/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FMTMV.java",
      "raw_url": "https://github.com/apache/doris/raw/ea646c6682f375d80ec04b0400b1378ac1b25903/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FMTMV.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FMTMV.java?ref=ea646c6682f375d80ec04b0400b1378ac1b25903",
      "patch": "@@ -153,11 +153,13 @@ public void addTaskResult(MTMVTask task, MTMVRelation relation) {\n                 this.status.setSchemaChangeDetail(null);\n                 this.status.setRefreshState(MTMVRefreshState.SUCCESS);\n                 this.relation = relation;\n-                try {\n-                    this.cache = MTMVCache.from(this, MTMVPlanUtil.createMTMVContext(this));\n-                } catch (Throwable e) {\n-                    this.cache = null;\n-                    LOG.warn(\"generate cache failed\", e);\n+                if (!Env.isCheckpointThread()) {\n+                    try {\n+                        this.cache = MTMVCache.from(this, MTMVPlanUtil.createMTMVContext(this));\n+                    } catch (Throwable e) {\n+                        this.cache = null;\n+                        LOG.warn(\"generate cache failed\", e);\n+                    }\n                 }\n             } else {\n                 this.status.setRefreshState(MTMVRefreshState.FAIL);",
      "parent_sha": "7b96730e87688a49890439aef8433250b30733d3"
    }
  },
  {
    "oid": "aeaa3192039fabb65c03929e26feb28c1fdf6406",
    "message": "[fix](fe)change session variable group_concat_max_len from int to long (#15515)",
    "date": "2022-12-30T12:45:44Z",
    "url": "https://github.com/apache/doris/commit/aeaa3192039fabb65c03929e26feb28c1fdf6406",
    "details": {
      "sha": "a31a7a7d079c9dc600ba9da9e8b08cadc5e89d54",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/qe/SessionVariable.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/aeaa3192039fabb65c03929e26feb28c1fdf6406/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FSessionVariable.java",
      "raw_url": "https://github.com/apache/doris/raw/aeaa3192039fabb65c03929e26feb28c1fdf6406/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FSessionVariable.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FSessionVariable.java?ref=aeaa3192039fabb65c03929e26feb28c1fdf6406",
      "patch": "@@ -656,7 +656,7 @@ public class SessionVariable implements Serializable, Writable {\n     public int repeatMaxNum = 10000;\n \n     @VariableMgr.VarAttr(name = GROUP_CONCAT_MAX_LEN)\n-    public int groupConcatMaxLen = 2147483646;\n+    public long groupConcatMaxLen = 2147483646;\n \n     // If this fe is in fuzzy mode, then will use initFuzzyModeVariables to generate some variables,\n     // not the default value set in the code.",
      "parent_sha": "ec52907b064a2496209ab76ff737b474a883a06b"
    }
  },
  {
    "oid": "db8cfb3748c80f738723ef2dcdfaa8e299dc41a3",
    "message": "Write audit log while doing drop stats. (#34433)",
    "date": "2024-05-08T00:43:52Z",
    "url": "https://github.com/apache/doris/commit/db8cfb3748c80f738723ef2dcdfaa8e299dc41a3",
    "details": {
      "sha": "54e85956d7dfa863d667ebfde760fa024cdd8bbd",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/statistics/util/StatisticsUtil.java",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/apache/doris/blob/db8cfb3748c80f738723ef2dcdfaa8e299dc41a3/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fstatistics%2Futil%2FStatisticsUtil.java",
      "raw_url": "https://github.com/apache/doris/raw/db8cfb3748c80f738723ef2dcdfaa8e299dc41a3/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fstatistics%2Futil%2FStatisticsUtil.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fstatistics%2Futil%2FStatisticsUtil.java?ref=db8cfb3748c80f738723ef2dcdfaa8e299dc41a3",
      "patch": "@@ -59,6 +59,7 @@\n import org.apache.doris.datasource.hive.HMSExternalTable.DLAType;\n import org.apache.doris.nereids.trees.expressions.literal.DateTimeLiteral;\n import org.apache.doris.nereids.trees.expressions.literal.VarcharLiteral;\n+import org.apache.doris.qe.AuditLogHelper;\n import org.apache.doris.qe.AutoCloseConnectContext;\n import org.apache.doris.qe.ConnectContext;\n import org.apache.doris.qe.QueryState;\n@@ -153,16 +154,24 @@ public static List<ResultRow> execStatisticQuery(String sql, boolean enableFileC\n     }\n \n     public static QueryState execUpdate(String sql) throws Exception {\n-        try (AutoCloseConnectContext r = StatisticsUtil.buildConnectContext()) {\n+        StmtExecutor stmtExecutor = null;\n+        AutoCloseConnectContext r = StatisticsUtil.buildConnectContext();\n+        try {\n             r.connectContext.getSessionVariable().disableNereidsPlannerOnce();\n-            StmtExecutor stmtExecutor = new StmtExecutor(r.connectContext, sql);\n+            stmtExecutor = new StmtExecutor(r.connectContext, sql);\n             r.connectContext.setExecutor(stmtExecutor);\n             stmtExecutor.execute();\n             QueryState state = r.connectContext.getState();\n             if (state.getStateType().equals(QueryState.MysqlStateType.ERR)) {\n                 throw new Exception(state.getErrorMessage());\n             }\n             return state;\n+        } finally {\n+            r.close();\n+            if (stmtExecutor != null) {\n+                AuditLogHelper.logAuditLog(r.connectContext, stmtExecutor.getOriginStmt().originStmt,\n+                        stmtExecutor.getParsedStmt(), stmtExecutor.getQueryStatisticsForAuditLog(), true);\n+            }\n         }\n     }\n ",
      "parent_sha": "ddc104cdf1c53212fff673409ab896a7e5a1b679"
    }
  },
  {
    "oid": "eea0cbec74d7a5afca0f116f0f6e7d810e3b7869",
    "message": "[enhancement](transaction) Reduce hold writeLock time for DatabaseTransactionMgr to improve stability of stream load (#17380)\n\nClear transaction state log occupies too much time, so we change clear transaction log level from info to debug\r\n\r\n\r\nCo-authored-by: caiconghui1 <caiconghui1@jd.com>",
    "date": "2023-03-03T11:06:39Z",
    "url": "https://github.com/apache/doris/commit/eea0cbec74d7a5afca0f116f0f6e7d810e3b7869",
    "details": {
      "sha": "ed5c0cff7f2ececa84af6af10caa6c2fe66eddde",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/transaction/DatabaseTransactionMgr.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/apache/doris/blob/eea0cbec74d7a5afca0f116f0f6e7d810e3b7869/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Ftransaction%2FDatabaseTransactionMgr.java",
      "raw_url": "https://github.com/apache/doris/raw/eea0cbec74d7a5afca0f116f0f6e7d810e3b7869/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Ftransaction%2FDatabaseTransactionMgr.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Ftransaction%2FDatabaseTransactionMgr.java?ref=eea0cbec74d7a5afca0f116f0f6e7d810e3b7869",
      "patch": "@@ -1383,7 +1383,9 @@ public void removeExpiredTxns(long currentMillis) {\n                 dbExpiredTxnIds.put(dbId, expiredTxnIds);\n                 BatchRemoveTransactionsOperation op = new BatchRemoveTransactionsOperation(dbExpiredTxnIds);\n                 editLog.logBatchRemoveTransactions(op);\n-                LOG.info(\"Remove {} expired transactions\", MAX_REMOVE_TXN_PER_ROUND - leftNum);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Remove {} expired transactions\", MAX_REMOVE_TXN_PER_ROUND - leftNum);\n+                }\n             }\n         } finally {\n             writeUnlock();\n@@ -1416,7 +1418,9 @@ private void clearTransactionState(long txnId) {\n             if (txnIds.isEmpty()) {\n                 labelToTxnIds.remove(transactionState.getLabel());\n             }\n-            LOG.info(\"transaction [\" + txnId + \"] is expired, remove it from transaction manager\");\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"transaction [\" + txnId + \"] is expired, remove it from transaction manager\");\n+            }\n         } else {\n             // should not happen, add a warn log to observer\n             LOG.warn(\"transaction state is not found when clear transaction: \" + txnId);",
      "parent_sha": "5c265d818356f045ff94ed1043c08e1dfefd710f"
    }
  },
  {
    "oid": "b2a689832242758b8f1a7f020c3169fe67039248",
    "message": "[opt](fe) Reduce jvm heap memory consumed by profiles of BrokerLoadJob (#31985)\n\n* it may cause FE OOM when there are a lot of broker load jobs\r\n  if the profile is enabled",
    "date": "2024-03-08T11:33:31Z",
    "url": "https://github.com/apache/doris/commit/b2a689832242758b8f1a7f020c3169fe67039248",
    "details": {
      "sha": "1f24484be5f7da8f289ebae803e72cfb55372eee",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/load/loadv2/BrokerLoadJob.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/apache/doris/blob/b2a689832242758b8f1a7f020c3169fe67039248/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fload%2Floadv2%2FBrokerLoadJob.java",
      "raw_url": "https://github.com/apache/doris/raw/b2a689832242758b8f1a7f020c3169fe67039248/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fload%2Floadv2%2FBrokerLoadJob.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fload%2Floadv2%2FBrokerLoadJob.java?ref=b2a689832242758b8f1a7f020c3169fe67039248",
      "patch": "@@ -216,7 +216,9 @@ private void createLoadingTask(Database db, BrokerPendingTaskAttachment attachme\n                 Lists.newArrayList(fileGroupAggInfo.getAllTableIds()));\n         // divide job into broker loading task by table\n         List<LoadLoadingTask> newLoadingTasks = Lists.newArrayList();\n-        this.jobProfile = new Profile(\"BrokerLoadJob \" + id + \". \" + label, true);\n+        if (enableProfile) {\n+            this.jobProfile = new Profile(\"BrokerLoadJob \" + id + \". \" + label, true);\n+        }\n         ProgressManager progressManager = Env.getCurrentProgressManager();\n         progressManager.registerProgressSimple(String.valueOf(id));\n         MetaLockUtils.readLockTables(tableList);\n@@ -341,6 +343,8 @@ private void writeProfile() {\n         }\n         jobProfile.update(createTimestamp, getSummaryInfo(true), true,\n                 Integer.valueOf(sessionVariables.getOrDefault(SessionVariable.PROFILE_LEVEL, \"3\")), null, false);\n+        // jobProfile has been pushed into ProfileManager, remove reference in brokerLoadJob\n+        jobProfile = null;\n     }\n \n     private Map<String, String> getSummaryInfo(boolean isFinished) {",
      "parent_sha": "f17b841be233951a4e195c163d8bcf78d49fc80b"
    }
  },
  {
    "oid": "cd28e9f3b5ad96923c1e93a1aecfb56fa5f458ba",
    "message": "[fix](function) fix encrypt/decrypt function bug select list expression not produced by aggregation output #18078\n\nFix function analysis repeat add child.\r\n\r\nselect list expression not produced by aggregation output (missing from GROUP BY clause?): if(length(`r_2_3`.`name`) % 32 = 0, aes_decrypt(unhex(`r_2_3`.`name`), '***'), `r_2_3`.`name`)",
    "date": "2023-03-24T10:03:18Z",
    "url": "https://github.com/apache/doris/commit/cd28e9f3b5ad96923c1e93a1aecfb56fa5f458ba",
    "details": {
      "sha": "fad40b8769471983866eb1d2bc79e2e1019c4c01",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/analysis/FunctionCallExpr.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/cd28e9f3b5ad96923c1e93a1aecfb56fa5f458ba/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FFunctionCallExpr.java",
      "raw_url": "https://github.com/apache/doris/raw/cd28e9f3b5ad96923c1e93a1aecfb56fa5f458ba/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FFunctionCallExpr.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FFunctionCallExpr.java?ref=cd28e9f3b5ad96923c1e93a1aecfb56fa5f458ba",
      "patch": "@@ -1012,7 +1012,7 @@ private void analyzeBuiltinAggFunction(Analyzer analyzer) throws AnalysisExcepti\n                     }\n                 }\n             }\n-            if (!blockEncryptionMode.equals(children.get(children.size() - 1))) {\n+            if (!blockEncryptionMode.equals(children.get(children.size() - 1).toString())) {\n                 children.add(new StringLiteral(blockEncryptionMode));\n             }\n         }",
      "parent_sha": "ca0e4844e8cfa84b77fba67949ebd4481c1bcba3"
    }
  },
  {
    "oid": "26bc749afd8651626b8142f3bbe621518fae9200",
    "message": "[bugfix](set_var) fix sql level exec_mem_limit does not take effect (#25043)",
    "date": "2023-10-07T12:15:25Z",
    "url": "https://github.com/apache/doris/commit/26bc749afd8651626b8142f3bbe621518fae9200",
    "details": {
      "sha": "a8a08fb0e626ec20d6960c6e76a2bb8a729abfe6",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/doris/blob/26bc749afd8651626b8142f3bbe621518fae9200/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FCoordinator.java",
      "raw_url": "https://github.com/apache/doris/raw/26bc749afd8651626b8142f3bbe621518fae9200/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FCoordinator.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FCoordinator.java?ref=26bc749afd8651626b8142f3bbe621518fae9200",
      "patch": "@@ -380,7 +380,9 @@ private void setFromUserProperty(ConnectContext connectContext) {\n             this.queryOptions.setResourceLimit(resourceLimit);\n         }\n         // set exec mem limit\n-        long memLimit = Env.getCurrentEnv().getAuth().getExecMemLimit(qualifiedUser);\n+        long maxExecMemByte = connectContext.getSessionVariable().getMaxExecMemByte();\n+        long memLimit = maxExecMemByte > 0 ? maxExecMemByte :\n+                Env.getCurrentEnv().getAuth().getExecMemLimit(qualifiedUser);\n         if (memLimit > 0) {\n             // overwrite the exec_mem_limit from session variable;\n             this.queryOptions.setMemLimit(memLimit);",
      "parent_sha": "cb03703990bf84cb0a09636d903ffd3b3349f67a"
    }
  },
  {
    "oid": "1a3db44d3eb6721203a1f72c602a81940422fcb0",
    "message": "[fix](statistics)Use utf-8 charset for internal query result. (#39989)\n\nUse utf-8 charset for internal query result.\r\nUser's environment may set default java file encode to some other\r\ncharacter set, which may cause internal query get Garbled Characters.\r\nUse utf-8 to decode string bytes from BE.",
    "date": "2024-08-28T05:13:57Z",
    "url": "https://github.com/apache/doris/commit/1a3db44d3eb6721203a1f72c602a81940422fcb0",
    "details": {
      "sha": "d5a6ca0be800b7c1d394dab3c4ed6efb9fbc2c8d",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/statistics/util/InternalQueryBuffer.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/doris/blob/1a3db44d3eb6721203a1f72c602a81940422fcb0/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fstatistics%2Futil%2FInternalQueryBuffer.java",
      "raw_url": "https://github.com/apache/doris/raw/1a3db44d3eb6721203a1f72c602a81940422fcb0/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fstatistics%2Futil%2FInternalQueryBuffer.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fstatistics%2Futil%2FInternalQueryBuffer.java?ref=1a3db44d3eb6721203a1f72c602a81940422fcb0",
      "patch": "@@ -19,6 +19,7 @@\n \n import java.io.UnsupportedEncodingException;\n import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n \n /**\n  * Parse the MySQL protocol result data returned by BE,\n@@ -127,7 +128,7 @@ public byte[] readBytesWithLength() {\n     public String readStringWithLength() {\n         byte[] bytes = readBytesWithLength();\n         if (bytes != null) {\n-            return new String(bytes);\n+            return new String(bytes, StandardCharsets.UTF_8);\n         }\n         return null;\n     }",
      "parent_sha": "843937619896f9f86a89e28b86d1ca9a8e7de65b"
    }
  },
  {
    "oid": "e9b3584d45f662e6c3c85516cf58ff63fc19f149",
    "message": "[Bug] Fix bug that `desc tbl all` stmt throw error: Malformed packet (#3233)",
    "date": "2020-03-31T02:29:53Z",
    "url": "https://github.com/apache/doris/commit/e9b3584d45f662e6c3c85516cf58ff63fc19f149",
    "details": {
      "sha": "c8ffd3596d68aa94eea007f0b522a1710542e26b",
      "filename": "fe/src/main/java/org/apache/doris/analysis/DescribeStmt.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/e9b3584d45f662e6c3c85516cf58ff63fc19f149/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FDescribeStmt.java",
      "raw_url": "https://github.com/apache/doris/raw/e9b3584d45f662e6c3c85516cf58ff63fc19f149/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FDescribeStmt.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FDescribeStmt.java?ref=e9b3584d45f662e6c3c85516cf58ff63fc19f149",
      "patch": "@@ -73,7 +73,7 @@ public class DescribeStmt extends ShowStmt {\n                     .build();\n \n     // empty col num equals to DESC_OLAP_TABLE_ALL_META_DATA.size()\n-    private static final List<String> EMPTY_ROW = Arrays.asList(\"\", \"\", \"\", \"\", \"\", \"\", \"\");\n+    private static final List<String> EMPTY_ROW = Arrays.asList(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\");\n \n     private TableName dbTableName;\n     private ProcNodeInterface node;",
      "parent_sha": "4131afe316f3354bb7f2b9a6b0ff80066db237e0"
    }
  },
  {
    "oid": "8c34013cf6d0cba764e542f6b52caa92b1fb42f9",
    "message": "[Enhance] Remove order by from insert into select (#5419)\n\nremove unnecessary order by of insert into select stmt",
    "date": "2021-03-04T14:23:16Z",
    "url": "https://github.com/apache/doris/commit/8c34013cf6d0cba764e542f6b52caa92b1fb42f9",
    "details": {
      "sha": "a53b2e3bae382593f055c8794d1f8befa8cbc03d",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/analysis/QueryStmt.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/8c34013cf6d0cba764e542f6b52caa92b1fb42f9/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FQueryStmt.java",
      "raw_url": "https://github.com/apache/doris/raw/8c34013cf6d0cba764e542f6b52caa92b1fb42f9/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FQueryStmt.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FQueryStmt.java?ref=8c34013cf6d0cba764e542f6b52caa92b1fb42f9",
      "patch": "@@ -301,7 +301,7 @@ protected void createSortInfo(Analyzer analyzer) throws AnalysisException {\n         sortInfo = new SortInfo(orderingExprs, isAscOrder, nullsFirstParams);\n         // order by w/o limit and offset in inline views, set operands and insert statements\n         // are ignored.\n-        if (!hasLimit() && !hasOffset() && !analyzer.isRootAnalyzer()) {\n+        if (!hasLimit() && !hasOffset() && (!analyzer.isRootAnalyzer() || fromInsert)) {\n             evaluateOrderBy = false;\n             // Return a warning that the order by was ignored.\n             StringBuilder strBuilder = new StringBuilder();",
      "parent_sha": "bfce98f4b93ce5da98097f4f8ab21c45aa250bb8"
    }
  },
  {
    "oid": "3e58e2d5439ffc312847f8c13026252ca4175c33",
    "message": "Forbidden the distinct function of subquery in binary predicate",
    "date": "2019-12-17T11:38:15Z",
    "url": "https://github.com/apache/doris/commit/3e58e2d5439ffc312847f8c13026252ca4175c33",
    "details": {
      "sha": "34101df358c8a70e505bf551955706550b475e07",
      "filename": "fe/src/main/java/org/apache/doris/analysis/StmtRewriter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/3e58e2d5439ffc312847f8c13026252ca4175c33/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FStmtRewriter.java",
      "raw_url": "https://github.com/apache/doris/raw/3e58e2d5439ffc312847f8c13026252ca4175c33/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FStmtRewriter.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FStmtRewriter.java?ref=3e58e2d5439ffc312847f8c13026252ca4175c33",
      "patch": "@@ -745,7 +745,7 @@ private static void canRewriteCorrelatedSubquery(\n         // Grouping and/or aggregation (including analytic functions) is only\n         // allowed on correlated EXISTS subqueries\n         if ((expr instanceof BinaryPredicate\n-                && (stmt.hasGroupByClause() || stmt.hasAnalyticInfo()))\n+                && (stmt.hasAggInfo() || stmt.hasAnalyticInfo()))\n                 || (expr instanceof InPredicate\n                 && (stmt.hasAggInfo() || stmt.hasAnalyticInfo()))) {\n             LOG.warn(\"canRewriteCorrelatedSubquery fail, expr={} subquery={}\", expr.toSql(), stmt.toSql());",
      "parent_sha": "9244db40f75cff967f9329a53e9bb0e7953cff16"
    }
  },
  {
    "oid": "1b86e658fdf20a1aae89ad9ce492b1c6980e23cf",
    "message": "[fix](Nereids): decrease the memo GroupExpression of limits (#21354)",
    "date": "2023-07-04T09:15:41Z",
    "url": "https://github.com/apache/doris/commit/1b86e658fdf20a1aae89ad9ce492b1c6980e23cf",
    "details": {
      "sha": "517bd248b5efd92dcdd68e70bbf2720175e3570c",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/qe/SessionVariable.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/1b86e658fdf20a1aae89ad9ce492b1c6980e23cf/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FSessionVariable.java",
      "raw_url": "https://github.com/apache/doris/raw/1b86e658fdf20a1aae89ad9ce492b1c6980e23cf/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FSessionVariable.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FSessionVariable.java?ref=1b86e658fdf20a1aae89ad9ce492b1c6980e23cf",
      "patch": "@@ -957,7 +957,7 @@ public void setCboNetWeight(double cboNetWeight) {\n     public boolean dumpNereidsMemo = false;\n \n     @VariableMgr.VarAttr(name = \"memo_max_group_expression_size\")\n-    public int memoMaxGroupExpressionSize = 40000;\n+    public int memoMaxGroupExpressionSize = 10000;\n \n     @VariableMgr.VarAttr(name = ENABLE_MINIDUMP)\n     public boolean enableMinidump = false;",
      "parent_sha": "13fb69550a18c99d4bfb64cc001a024f3053683b"
    }
  },
  {
    "oid": "56bc8a762d25acdab7d9bbdba69951da67641ce7",
    "message": "[decimalv3](literal) use decimalv3 literal if enable_decimal_conversion is true (#19559)",
    "date": "2023-05-12T04:01:54Z",
    "url": "https://github.com/apache/doris/commit/56bc8a762d25acdab7d9bbdba69951da67641ce7",
    "details": {
      "sha": "bc2951e43244ac3b8498964fe755c05759a4cc47",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/analysis/DecimalLiteral.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/doris/blob/56bc8a762d25acdab7d9bbdba69951da67641ce7/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FDecimalLiteral.java",
      "raw_url": "https://github.com/apache/doris/raw/56bc8a762d25acdab7d9bbdba69951da67641ce7/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FDecimalLiteral.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FDecimalLiteral.java?ref=56bc8a762d25acdab7d9bbdba69951da67641ce7",
      "patch": "@@ -21,6 +21,7 @@\n import org.apache.doris.catalog.ScalarType;\n import org.apache.doris.catalog.Type;\n import org.apache.doris.common.AnalysisException;\n+import org.apache.doris.common.Config;\n import org.apache.doris.common.NotImplementedException;\n import org.apache.doris.common.io.Text;\n import org.apache.doris.thrift.TDecimalLiteral;\n@@ -48,7 +49,7 @@ public DecimalLiteral() {\n     }\n \n     public DecimalLiteral(BigDecimal value) {\n-        this(value, false);\n+        this(value, Config.enable_decimal_conversion);\n     }\n \n     public DecimalLiteral(BigDecimal value, boolean isDecimalV3) {",
      "parent_sha": "9bf6ecca485df6f9888ae8719197ce8481d5d682"
    }
  },
  {
    "oid": "8bc8fcffae29b8dd2ff07dd780c3c9826883b10c",
    "message": "Fix NullPointerException when creating mini load in LoadManager (#1565)\n\nThe catch statement cancel the load job in the function named createMiniLoad.\r\nBut sometimes, the load job hasn't been created in catch statement. It will throw the NullPointerException when the load job is cancelled.\r\nThis commit fix this bug.",
    "date": "2019-07-30T04:52:14Z",
    "url": "https://github.com/apache/doris/commit/8bc8fcffae29b8dd2ff07dd780c3c9826883b10c",
    "details": {
      "sha": "df88a0c00514510d2dae217336419c6882e1e774",
      "filename": "fe/src/main/java/org/apache/doris/load/loadv2/LoadManager.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/doris/blob/8bc8fcffae29b8dd2ff07dd780c3c9826883b10c/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fload%2Floadv2%2FLoadManager.java",
      "raw_url": "https://github.com/apache/doris/raw/8bc8fcffae29b8dd2ff07dd780c3c9826883b10c/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fload%2Floadv2%2FLoadManager.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fload%2Floadv2%2FLoadManager.java?ref=8bc8fcffae29b8dd2ff07dd780c3c9826883b10c",
      "patch": "@@ -149,7 +149,9 @@ public long createLoadJobFromMiniLoad(TMiniLoadBeginRequest request) throws User\n                     .stream().filter(entity -> entity.getState() != JobState.CANCELLED).findFirst()\n                     .get().getTransactionId();\n         } catch (UserException e) {\n-            loadJob.cancelJobWithoutCheck(new FailMsg(LOAD_RUN_FAIL, e.getMessage()), false);\n+            if (loadJob != null) {\n+                loadJob.cancelJobWithoutCheck(new FailMsg(LOAD_RUN_FAIL, e.getMessage()), false);\n+            }\n             throw e;\n         } finally {\n             writeUnlock();",
      "parent_sha": "e0d991f4dcd83caad82ab21d1ed0e3991fb09920"
    }
  },
  {
    "oid": "183ca1f60ba311a943c945ca730b2624746c3a40",
    "message": "[fix](compatibility) remove cluster prefix in user property info (#30078)",
    "date": "2024-01-18T00:54:22Z",
    "url": "https://github.com/apache/doris/commit/183ca1f60ba311a943c945ca730b2624746c3a40",
    "details": {
      "sha": "e7ee45174833b475e48c1bdaea4d72194fbcd1de",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/mysql/privilege/UserPropertyInfo.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/doris/blob/183ca1f60ba311a943c945ca730b2624746c3a40/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fmysql%2Fprivilege%2FUserPropertyInfo.java",
      "raw_url": "https://github.com/apache/doris/raw/183ca1f60ba311a943c945ca730b2624746c3a40/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fmysql%2Fprivilege%2FUserPropertyInfo.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fmysql%2Fprivilege%2FUserPropertyInfo.java?ref=183ca1f60ba311a943c945ca730b2624746c3a40",
      "patch": "@@ -17,6 +17,7 @@\n \n package org.apache.doris.mysql.privilege;\n \n+import org.apache.doris.cluster.ClusterNamespace;\n import org.apache.doris.common.Pair;\n import org.apache.doris.common.io.Text;\n import org.apache.doris.common.io.Writable;\n@@ -67,7 +68,7 @@ public void write(DataOutput out) throws IOException {\n     }\n \n     public void readFields(DataInput in) throws IOException {\n-        user = Text.readString(in);\n+        user = ClusterNamespace.getNameFromFullName(Text.readString(in));\n         int size = in.readInt();\n         for (int i = 0; i < size; i++) {\n             String key = Text.readString(in);",
      "parent_sha": "5a330a179d2fbd644de9c0ab9f2448f078f17fdc"
    }
  },
  {
    "oid": "e0bb7fa935ca838641ae10f8c3ad088e727b2db6",
    "message": "[exec](load) change default parallel num from 1 to 8 in no pipeline exec engine (#28864)",
    "date": "2023-12-22T16:05:44Z",
    "url": "https://github.com/apache/doris/commit/e0bb7fa935ca838641ae10f8c3ad088e727b2db6",
    "details": {
      "sha": "be4e965672ff9d633c4a757928fb933cb0912fa3",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/qe/SessionVariable.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/e0bb7fa935ca838641ae10f8c3ad088e727b2db6/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FSessionVariable.java",
      "raw_url": "https://github.com/apache/doris/raw/e0bb7fa935ca838641ae10f8c3ad088e727b2db6/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FSessionVariable.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FSessionVariable.java?ref=e0bb7fa935ca838641ae10f8c3ad088e727b2db6",
      "patch": "@@ -692,7 +692,7 @@ public class SessionVariable implements Serializable, Writable {\n      */\n     @VariableMgr.VarAttr(name = PARALLEL_FRAGMENT_EXEC_INSTANCE_NUM, needForward = true, fuzzy = true,\n                         setter = \"setFragmentInstanceNum\")\n-    public int parallelExecInstanceNum = 1;\n+    public int parallelExecInstanceNum = 8;\n \n     @VariableMgr.VarAttr(name = PARALLEL_PIPELINE_TASK_NUM, fuzzy = true, needForward = true,\n                         setter = \"setPipelineTaskNum\")",
      "parent_sha": "966766f3b752dfcd66a20351830a8b75d1f7e1b2"
    }
  },
  {
    "oid": "1c2831e06f2546dfe4415ba3efb9fe2d23f20448",
    "message": "[fix](spill) disable spill of sort and agg for now to avoid diisk overflow (#26209)",
    "date": "2023-11-01T09:20:26Z",
    "url": "https://github.com/apache/doris/commit/1c2831e06f2546dfe4415ba3efb9fe2d23f20448",
    "details": {
      "sha": "ba9ccf806e485cd55af64f674a2075c3f5dfc353",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/qe/SessionVariable.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/doris/blob/1c2831e06f2546dfe4415ba3efb9fe2d23f20448/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FSessionVariable.java",
      "raw_url": "https://github.com/apache/doris/raw/1c2831e06f2546dfe4415ba3efb9fe2d23f20448/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FSessionVariable.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FSessionVariable.java?ref=1c2831e06f2546dfe4415ba3efb9fe2d23f20448",
      "patch": "@@ -2405,9 +2405,9 @@ public TQueryOptions toThrift() {\n \n         tResult.setRepeatMaxNum(repeatMaxNum);\n \n-        tResult.setExternalSortBytesThreshold(externalSortBytesThreshold);\n+        tResult.setExternalSortBytesThreshold(0); // disable for now\n \n-        tResult.setExternalAggBytesThreshold(externalAggBytesThreshold);\n+        tResult.setExternalAggBytesThreshold(0); // disable for now\n \n         tResult.setExternalAggPartitionBits(externalAggPartitionBits);\n ",
      "parent_sha": "bfca1bf206978adf9261c6eee4c423a0b8fc33e7"
    }
  },
  {
    "oid": "065d65fb768181961f7e15f9419cd72970c5884e",
    "message": "[fix](fe ut) fix unstable SystemInfoServiceTest (#36893)\n\nFor a random alg, (max -min) < 5% is too unstable. Make this diff\r\nbigger, change it to 30%.",
    "date": "2024-06-27T14:54:50Z",
    "url": "https://github.com/apache/doris/commit/065d65fb768181961f7e15f9419cd72970c5884e",
    "details": {
      "sha": "b36f4b2a8156e97a4ad5ccd1c9aeb8e2e3a55b7e",
      "filename": "fe/fe-core/src/test/java/org/apache/doris/system/SystemInfoServiceTest.java",
      "status": "modified",
      "additions": 11,
      "deletions": 4,
      "changes": 15,
      "blob_url": "https://github.com/apache/doris/blob/065d65fb768181961f7e15f9419cd72970c5884e/fe%2Ffe-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdoris%2Fsystem%2FSystemInfoServiceTest.java",
      "raw_url": "https://github.com/apache/doris/raw/065d65fb768181961f7e15f9419cd72970c5884e/fe%2Ffe-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdoris%2Fsystem%2FSystemInfoServiceTest.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdoris%2Fsystem%2FSystemInfoServiceTest.java?ref=065d65fb768181961f7e15f9419cd72970c5884e",
      "patch": "@@ -46,6 +46,8 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n public class SystemInfoServiceTest {\n     private SystemInfoService infoService;\n@@ -403,7 +405,7 @@ public void testSelectBackendIdsForReplicaCreation() throws Exception {\n         ReplicaAllocation replicaAlloc = ReplicaAllocation.DEFAULT_ALLOCATION;\n         // also check if the random selection logic can evenly distribute the replica.\n         Map<Long, Integer> beCounterMap = Maps.newHashMap();\n-        for (int i = 0; i < 10000; ++i) {\n+        for (int i = 0; i < 30000; ++i) {\n             Pair<Map<Tag, List<Long>>, TStorageMedium> ret = infoService.selectBackendIdsForReplicaCreation(replicaAlloc,\n                     Maps.newHashMap(), TStorageMedium.HDD, false, false);\n             Map<Tag, List<Long>> res = ret.first;\n@@ -412,11 +414,16 @@ public void testSelectBackendIdsForReplicaCreation() throws Exception {\n                 beCounterMap.put(beId, beCounterMap.getOrDefault(beId, 0) + 1);\n             }\n         }\n+        Set<Long> expectBackendIds = infoService.getMixBackends().stream()\n+                .filter(Backend::isAlive).map(Backend::getId)\n+                .collect(Collectors.toSet());\n+        Assert.assertEquals(expectBackendIds, beCounterMap.keySet().stream().collect(Collectors.toSet()));\n         List<Integer> list = Lists.newArrayList(beCounterMap.values());\n         Collections.sort(list);\n-        int diff = list.get(list.size() - 1) - list.get(0);\n-        // The max replica num and min replica num's diff is less than 5%.\n-        Assert.assertTrue((diff * 1.0 / list.get(0)) < 0.05);\n+        int max = list.get(list.size() - 1);\n+        int diff =  max - list.get(0);\n+        // The max replica num and min replica num's diff is less than 30%.\n+        Assert.assertTrue((diff * 1.0 / max) < 0.3);\n     }\n \n     private void addDisk(Backend be, String path, TStorageMedium medium, long totalB, long availB) {",
      "parent_sha": "99901814d8b90887f54b1768b98b4f0b78fab376"
    }
  },
  {
    "oid": "cb61a0727f1b9a4c1da51b24bd81853fc55c0923",
    "message": "[bug](sharedscan) Fix shared scan bug (#28841)",
    "date": "2023-12-22T07:13:14Z",
    "url": "https://github.com/apache/doris/commit/cb61a0727f1b9a4c1da51b24bd81853fc55c0923",
    "details": {
      "sha": "9564461d756b11d6626819ec766ee27220a014db",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/apache/doris/blob/cb61a0727f1b9a4c1da51b24bd81853fc55c0923/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FCoordinator.java",
      "raw_url": "https://github.com/apache/doris/raw/cb61a0727f1b9a4c1da51b24bd81853fc55c0923/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FCoordinator.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FCoordinator.java?ref=cb61a0727f1b9a4c1da51b24bd81853fc55c0923",
      "patch": "@@ -2066,8 +2066,8 @@ private void computeFragmentHosts() throws Exception {\n                             instanceParam.perNodeSharedScans.put(planNodeId, sharedScan);\n                             params.instanceExecParams.add(instanceParam);\n                         }\n-                        params.ignoreDataDistribution = sharedScan;\n-                        params.parallelTasksNum = sharedScan ? 1 : params.instanceExecParams.size();\n+                        params.ignoreDataDistribution = sharedScan && enablePipelineXEngine;\n+                        params.parallelTasksNum = params.ignoreDataDistribution ? 1 : params.instanceExecParams.size();\n                     }\n                 }\n             }\n@@ -2944,8 +2944,8 @@ private void assignScanRanges(PlanFragmentId fragmentId, int parallelExecInstanc\n                 }\n             }\n         }\n-        params.parallelTasksNum = ignoreStorageDataDistribution ? 1 : params.instanceExecParams.size();\n-        params.ignoreDataDistribution = ignoreStorageDataDistribution;\n+        params.ignoreDataDistribution = ignoreStorageDataDistribution && enablePipelineXEngine;\n+        params.parallelTasksNum = params.ignoreDataDistribution ? 1 : params.instanceExecParams.size();\n     }\n \n     private final Map<PlanFragmentId, BucketSeqToScanRange> fragmentIdTobucketSeqToScanRangeMap = Maps.newHashMap();",
      "parent_sha": "5420575184ffd44886f1b1d74be47211acbea1a3"
    }
  },
  {
    "oid": "23078a5cee4f0e30cff3ff6100724b921c8ea46c",
    "message": "Avoid Chinese garbled for streamLoad java sample (#2229)",
    "date": "2019-11-18T13:14:35Z",
    "url": "https://github.com/apache/doris/commit/23078a5cee4f0e30cff3ff6100724b921c8ea46c",
    "details": {
      "sha": "fbf9b8c96d2678d51f005b9060a8e66de2ba0ff4",
      "filename": "samples/stream_load/java/DorisStreamLoad.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/apache/doris/blob/23078a5cee4f0e30cff3ff6100724b921c8ea46c/samples%2Fstream_load%2Fjava%2FDorisStreamLoad.java",
      "raw_url": "https://github.com/apache/doris/raw/23078a5cee4f0e30cff3ff6100724b921c8ea46c/samples%2Fstream_load%2Fjava%2FDorisStreamLoad.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/samples%2Fstream_load%2Fjava%2FDorisStreamLoad.java?ref=23078a5cee4f0e30cff3ff6100724b921c8ea46c",
      "patch": "@@ -45,7 +45,8 @@\n  *\n  * CREATE TABLE `stream_test` (\n  *   `id` bigint(20) COMMENT \"\",\n- *   `id2` bigint(20) COMMENT \"\"\n+ *   `id2` bigint(20) COMMENT \"\",\n+ *   `username` varchar(32) COMMENT \"\"\n  * ) ENGINE=OLAP\n  * DUPLICATE KEY(`id`)\n  * DISTRIBUTED BY HASH(`id`) BUCKETS 20;\n@@ -122,12 +123,12 @@ protected boolean isRedirectable(String method) {\n \n         try (CloseableHttpClient client = httpClientBuilder.build()) {\n             HttpPut put = new HttpPut(loadUrl);\n-            StringEntity entity = new StringEntity(content);\n+            StringEntity entity = new StringEntity(content, \"UTF-8\");\n             put.setHeader(HttpHeaders.EXPECT, \"100-continue\");\n             put.setHeader(HttpHeaders.AUTHORIZATION, basicAuthHeader(DORIS_USER, DORIS_PASSWORD));\n             // the label header is optional, not necessary\n             // use label header can ensure at most once semantics\n-            put.setHeader(\"label\", \"39c25a5c-7000-496e-a98e-348a264c81de\")\n+            put.setHeader(\"label\", \"39c25a5c-7000-496e-a98e-348a264c81de\");\n             put.setEntity(entity);\n \n             try (CloseableHttpResponse response = client.execute(put)) {\n@@ -155,8 +156,9 @@ private String basicAuthHeader(String username, String password) {\n     public static void main(String[] args) throws Exception {\n         int id1 = 1;\n         int id2 = 10;\n+        String id3 = \"\u5f20\u4e09\";\n         int rowNumber = 10;\n-        String oneRow = id1 + \"\\t\" + id2 + \"\\n\";\n+        String oneRow = id1 + \"\\t\" + id2 + \"\\t\" + id3 + \"\\n\";\n \n         StringBuilder stringBuilder = new StringBuilder();\n         for (int i = 0; i < rowNumber; i++) {",
      "parent_sha": "d8cfbbedf740720d4755eb4489902cc240dcdd5f"
    }
  },
  {
    "oid": "edbeaf8e305cff41dfcaba0ffa97f2a10114858f",
    "message": "Throw a UserException when miss plugin's md5 file (#3542)",
    "date": "2020-05-11T07:33:35Z",
    "url": "https://github.com/apache/doris/commit/edbeaf8e305cff41dfcaba0ffa97f2a10114858f",
    "details": {
      "sha": "a43dc0ed1004ff291fb723f91473d80cf8b34d2e",
      "filename": "fe/src/main/java/org/apache/doris/plugin/PluginZip.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/doris/blob/edbeaf8e305cff41dfcaba0ffa97f2a10114858f/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fplugin%2FPluginZip.java",
      "raw_url": "https://github.com/apache/doris/raw/edbeaf8e305cff41dfcaba0ffa97f2a10114858f/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fplugin%2FPluginZip.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fplugin%2FPluginZip.java?ref=edbeaf8e305cff41dfcaba0ffa97f2a10114858f",
      "patch": "@@ -118,10 +118,12 @@ Path downloadRemoteZip(Path targetPath) throws IOException, UserException {\n         }\n \n         // .md5 check\n-        String expectedChecksum = \"\";\n+        String expectedChecksum;\n         try (InputStream in = openUrlInputStream(source + \".md5\")) {\n             BufferedReader br = new BufferedReader(new InputStreamReader(in));\n             expectedChecksum = br.readLine();\n+        } catch (IOException e) {\n+            throw new UserException(e.getMessage() + \". you should provide a md5 URI to check plugin file\");\n         }\n \n         DigestUtils.md5Hex(Files.readAllBytes(zip));",
      "parent_sha": "57cbfb772d2f6df1a5f0b632ba23f574c9db2b26"
    }
  },
  {
    "oid": "8d4f8b133212502763463544f3e8a3824739afc5",
    "message": "[fix](Nereids) cast to boolean wrong when constant folding by be (#39019)\n\nnot add case because be return wrong answer for this\r\n\r\nselect cast(2.0 as boolean); -- should return 1 not 2",
    "date": "2024-08-08T09:11:49Z",
    "url": "https://github.com/apache/doris/commit/8d4f8b133212502763463544f3e8a3824739afc5",
    "details": {
      "sha": "d133eac32baddb18793cd79d171f79b6f344cf48",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/nereids/rules/expression/rules/FoldConstantRuleOnBE.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/8d4f8b133212502763463544f3e8a3824739afc5/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Frules%2Fexpression%2Frules%2FFoldConstantRuleOnBE.java",
      "raw_url": "https://github.com/apache/doris/raw/8d4f8b133212502763463544f3e8a3824739afc5/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Frules%2Fexpression%2Frules%2FFoldConstantRuleOnBE.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Frules%2Fexpression%2Frules%2FFoldConstantRuleOnBE.java?ref=8d4f8b133212502763463544f3e8a3824739afc5",
      "patch": "@@ -348,7 +348,7 @@ public static List<Literal> getResultExpression(DataType type, PValues resultCon\n         } else if (type.isBooleanType()) {\n             int num = resultContent.getUint32ValueCount();\n             for (int i = 0; i < num; ++i) {\n-                Literal literal = BooleanLiteral.of(resultContent.getUint32Value(i) == 1);\n+                Literal literal = BooleanLiteral.of(resultContent.getUint32Value(i) != 0);\n                 res.add(literal);\n             }\n         } else if (type.isTinyIntType()) {",
      "parent_sha": "7ead170625829aa7686e6e2860e9cb0ab0d1f5bc"
    }
  },
  {
    "oid": "de0e402e520263952a2dba1e310c2f9a1d7368c7",
    "message": "[fix](nereids) bucket shuffle join use wrong shuffled column info (#16011)",
    "date": "2023-01-18T06:44:36Z",
    "url": "https://github.com/apache/doris/commit/de0e402e520263952a2dba1e310c2f9a1d7368c7",
    "details": {
      "sha": "875b7bd215c1f515c9fec6e871f102341ef61e1d",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/nereids/glue/translator/PhysicalPlanTranslator.java",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/apache/doris/blob/de0e402e520263952a2dba1e310c2f9a1d7368c7/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Fglue%2Ftranslator%2FPhysicalPlanTranslator.java",
      "raw_url": "https://github.com/apache/doris/raw/de0e402e520263952a2dba1e310c2f9a1d7368c7/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Fglue%2Ftranslator%2FPhysicalPlanTranslator.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Fglue%2Ftranslator%2FPhysicalPlanTranslator.java?ref=de0e402e520263952a2dba1e310c2f9a1d7368c7",
      "patch": "@@ -1563,7 +1563,17 @@ private PlanFragment constructBucketShuffleJoin(AbstractPhysicalJoin<PhysicalPla\n         for (int i = 0; i < leftDistributionSpec.getOrderedShuffledColumns().size(); i++) {\n             int idx = leftDistributionSpec.getExprIdToEquivalenceSet()\n                     .get(leftDistributionSpec.getOrderedShuffledColumns().get(i));\n-            rightPartitionExprIds.set(idx, onClauseUsedSlots.second.get(i));\n+            ExprId leftShuffleColumnId = leftDistributionSpec.getOrderedShuffledColumns().get(i);\n+            Set<ExprId> equivalIds = leftDistributionSpec.getEquivalenceExprIdsOf(leftShuffleColumnId);\n+            int index = -1;\n+            for (ExprId id : equivalIds) {\n+                index = onClauseUsedSlots.first.indexOf(id);\n+                if (index != -1) {\n+                    break;\n+                }\n+            }\n+            Preconditions.checkArgument(index != -1);\n+            rightPartitionExprIds.set(idx, onClauseUsedSlots.second.get(index));\n         }\n         // assemble fragment\n         hashJoinNode.setDistributionMode(HashJoinNode.DistributionMode.BUCKET_SHUFFLE);",
      "parent_sha": "65d9293fa92fa0af705cedfdf8824b56b010437d"
    }
  },
  {
    "oid": "c8abdf8989d8231a83cdd1c3b95eb0586ec1044e",
    "message": "Fix length equal restrict in schema change (#1921)",
    "date": "2019-09-30T12:32:32Z",
    "url": "https://github.com/apache/doris/commit/c8abdf8989d8231a83cdd1c3b95eb0586ec1044e",
    "details": {
      "sha": "6e076c3734d7dc9d0024773ed1b6f8087f84d7c8",
      "filename": "fe/src/main/java/org/apache/doris/catalog/Column.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/c8abdf8989d8231a83cdd1c3b95eb0586ec1044e/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FColumn.java",
      "raw_url": "https://github.com/apache/doris/raw/c8abdf8989d8231a83cdd1c3b95eb0586ec1044e/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FColumn.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FColumn.java?ref=c8abdf8989d8231a83cdd1c3b95eb0586ec1044e",
      "patch": "@@ -255,7 +255,7 @@ public void checkSchemaChangeAllowed(Column other) throws DdlException {\n         if ((getDataType() == PrimitiveType.VARCHAR && other.getDataType() == PrimitiveType.VARCHAR)\n                 || (getDataType() == PrimitiveType.CHAR && other.getDataType() == PrimitiveType.VARCHAR)\n                 || (getDataType() == PrimitiveType.CHAR && other.getDataType() == PrimitiveType.CHAR)) {\n-            if (getStrLen() >= other.getStrLen()) {\n+            if (getStrLen() > other.getStrLen()) {\n                 throw new DdlException(\"Cannot shorten string length\");\n             }\n         }",
      "parent_sha": "cbf6214762fa13144aa60f6c1b7061f32c650f4e"
    }
  },
  {
    "oid": "4c58d62b2af82337dcb34af2a92bf53026eeae71",
    "message": "[fix](config) fe config sync_image_timeout_second should not be masterOnly (#43954)\n\n### What problem does this PR solve?\r\nsync_image_timeout_second is for the follower\uff0cshould not be  masterOnly\r\n\r\nCo-authored-by: huangwenbo04 <huangwenbo04@meituan.com>",
    "date": "2024-11-21T06:04:07Z",
    "url": "https://github.com/apache/doris/commit/4c58d62b2af82337dcb34af2a92bf53026eeae71",
    "details": {
      "sha": "689c85940dfc3945f8cd9cabc61cb869a41f9412",
      "filename": "fe/fe-common/src/main/java/org/apache/doris/common/Config.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/4c58d62b2af82337dcb34af2a92bf53026eeae71/fe%2Ffe-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcommon%2FConfig.java",
      "raw_url": "https://github.com/apache/doris/raw/4c58d62b2af82337dcb34af2a92bf53026eeae71/fe%2Ffe-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcommon%2FConfig.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcommon%2FConfig.java?ref=4c58d62b2af82337dcb34af2a92bf53026eeae71",
      "patch": "@@ -2673,7 +2673,7 @@ public class Config extends ConfigBase {\n     })\n     public static boolean ignore_unknown_metadata_module = false;\n \n-    @ConfField(mutable = true, masterOnly = true, description = {\n+    @ConfField(mutable = true, description = {\n             \"\u4ece\u4e3b\u8282\u70b9\u540c\u6b65image\u6587\u4ef6\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u7528\u6237\u53ef\u6839\u636e${meta_dir}/image\u6587\u4ef6\u5939\u4e0b\u9762\u7684image\u6587\u4ef6\u5927\u5c0f\u548c\u8282\u70b9\u95f4\u7684\u7f51\u7edc\u73af\u5883\u8c03\u6574\uff0c\"\n                     + \"\u5355\u4f4d\u4e3a\u79d2\uff0c\u9ed8\u8ba4\u503c300\",\n             \"The timeout for FE Follower/Observer synchronizing an image file from the FE Master, can be adjusted by \"",
      "parent_sha": "3f86819154a0ec03fc2386d831e8701575de8cd7"
    }
  },
  {
    "oid": "4fb498a1dc739eaa8c3aa7c2f045f63166c5bbae",
    "message": "fix unit test failure for show columns from unknown table (#2261)",
    "date": "2019-11-21T13:38:36Z",
    "url": "https://github.com/apache/doris/commit/4fb498a1dc739eaa8c3aa7c2f045f63166c5bbae",
    "details": {
      "sha": "9dabac093bb4bbb76d38e323b700f4e38c29db0b",
      "filename": "fe/src/test/java/org/apache/doris/qe/ShowExecutorTest.java",
      "status": "modified",
      "additions": 12,
      "deletions": 5,
      "changes": 17,
      "blob_url": "https://github.com/apache/doris/blob/4fb498a1dc739eaa8c3aa7c2f045f63166c5bbae/fe%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FShowExecutorTest.java",
      "raw_url": "https://github.com/apache/doris/raw/4fb498a1dc739eaa8c3aa7c2f045f63166c5bbae/fe%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FShowExecutorTest.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FShowExecutorTest.java?ref=4fb498a1dc739eaa8c3aa7c2f045f63166c5bbae",
      "patch": "@@ -58,7 +58,9 @@\n import org.easymock.EasyMock;\n import org.junit.Assert;\n import org.junit.Before;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n import org.junit.runner.RunWith;\n import org.powermock.api.easymock.PowerMock;\n import org.powermock.core.classloader.annotations.PowerMockIgnore;\n@@ -76,6 +78,9 @@ public class ShowExecutorTest {\n     private ConnectContext ctx;\n     private Catalog catalog;\n \n+    @Rule\n+    public ExpectedException expectedEx = ExpectedException.none();\n+\n     @Before\n     public void setUp() throws Exception {\n         ctx = new ConnectContext(null);\n@@ -392,21 +397,23 @@ public void testShowColumn() throws AnalysisException {\n     }\n \n     @Test\n-    public void testShowColumnEmpty() throws AnalysisException {\n+    public void testShowColumnFromUnknownTable() throws AnalysisException {\n         ShowColumnStmt stmt = new ShowColumnStmt(new TableName(\"testCluster:emptyDb\", \"testTable\"), null, null, false);\n         stmt.analyze(AccessTestUtil.fetchAdminAnalyzer(false));\n         ShowExecutor executor = new ShowExecutor(ctx, stmt);\n-        ShowResultSet resultSet = executor.execute();\n \n-        Assert.assertFalse(resultSet.next());\n+        expectedEx.expect(AnalysisException.class);\n+        expectedEx.expectMessage(\"Unknown table 'testCluster:emptyDb.testTable'\");\n+        executor.execute();\n \n         // empty table\n         stmt = new ShowColumnStmt(new TableName(\"testCluster:testDb\", \"emptyTable\"), null, null, true);\n         stmt.analyze(AccessTestUtil.fetchAdminAnalyzer(false));\n         executor = new ShowExecutor(ctx, stmt);\n-        resultSet = executor.execute();\n \n-        Assert.assertFalse(resultSet.next());\n+        expectedEx.expect(AnalysisException.class);\n+        expectedEx.expectMessage(\"Unknown table 'testCluster:testDb.emptyTable'\");\n+        executor.execute();\n     }\n \n     @Test",
      "parent_sha": "9c85a04580bcadc3b5da91f380334a860c1fdc7e"
    }
  },
  {
    "oid": "f4c4b27c3cb0f6f94fde74d8be15e7ef9df1dc09",
    "message": "[fix](cloud) abortTransaction does not handle response code (#41275)",
    "date": "2024-09-26T06:06:00Z",
    "url": "https://github.com/apache/doris/commit/f4c4b27c3cb0f6f94fde74d8be15e7ef9df1dc09",
    "details": {
      "sha": "10baf4a135ce29675e8c0b73f24ed45e5f6521d7",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/cloud/transaction/CloudGlobalTransactionMgr.java",
      "status": "modified",
      "additions": 28,
      "deletions": 14,
      "changes": 42,
      "blob_url": "https://github.com/apache/doris/blob/f4c4b27c3cb0f6f94fde74d8be15e7ef9df1dc09/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcloud%2Ftransaction%2FCloudGlobalTransactionMgr.java",
      "raw_url": "https://github.com/apache/doris/raw/f4c4b27c3cb0f6f94fde74d8be15e7ef9df1dc09/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcloud%2Ftransaction%2FCloudGlobalTransactionMgr.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcloud%2Ftransaction%2FCloudGlobalTransactionMgr.java?ref=f4c4b27c3cb0f6f94fde74d8be15e7ef9df1dc09",
      "patch": "@@ -1097,6 +1097,33 @@ public void abortTransaction(Long dbId, Long transactionId, String reason,\n             }\n             throw new UserException(\"abortTxn failed, errMsg:\" + e.getMessage());\n         }\n+        afterAbortTxnResp(abortTxnResponse, String.valueOf(transactionId), txnCommitAttachment);\n+    }\n+\n+    private void afterAbortTxnResp(AbortTxnResponse abortTxnResponse, String txnIdOrLabel,\n+            TxnCommitAttachment txnCommitAttachment) throws UserException {\n+        if (abortTxnResponse.getStatus().getCode() != MetaServiceCode.OK) {\n+            LOG.warn(\"abortTxn failed, transaction:{}, response:{}\", txnIdOrLabel, abortTxnResponse);\n+            // For routine load, it is necessary to release the write lock when abort transaction fails,\n+            // otherwise it will cause the lock added in beforeAborted to not be released.\n+            if (txnCommitAttachment != null && txnCommitAttachment instanceof RLTaskTxnCommitAttachment) {\n+                RLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = (RLTaskTxnCommitAttachment) txnCommitAttachment;\n+                Env.getCurrentEnv().getRoutineLoadManager().getJob(rlTaskTxnCommitAttachment.getJobId()).writeUnlock();\n+            }\n+            switch (abortTxnResponse.getStatus().getCode()) {\n+                case TXN_ID_NOT_FOUND:\n+                case TXN_LABEL_NOT_FOUND:\n+                case TXN_INVALID_STATUS:\n+                    throw new TransactionNotFoundException(\"transaction [\" + txnIdOrLabel + \"] not found\");\n+                case TXN_ALREADY_ABORTED:\n+                    throw new TransactionNotFoundException(\"transaction [\" + txnIdOrLabel + \"] is already aborted\");\n+                case TXN_ALREADY_VISIBLE:\n+                    throw new UserException(\n+                            \"transaction [\" + txnIdOrLabel + \"] is already visible, \" + \", could not abort\");\n+                default:\n+                    throw new UserException(abortTxnResponse.getStatus().getMsg());\n+            }\n+        }\n \n         TransactionState txnState = TxnUtil.transactionStateFromPb(abortTxnResponse.getTxnInfo());\n         TxnStateChangeCallback cb = callbackFactory.getCallback(txnState.getCallbackId());\n@@ -1149,20 +1176,7 @@ public void abortTransaction(Long dbId, String label, String reason) throws User\n             LOG.warn(\"abortTxn failed, label:{}, exception:\", label, e);\n             throw new UserException(\"abortTxn failed, errMsg:\" + e.getMessage());\n         }\n-\n-        TransactionState txnState = TxnUtil.transactionStateFromPb(abortTxnResponse.getTxnInfo());\n-        TxnStateChangeCallback cb = callbackFactory.getCallback(txnState.getCallbackId());\n-        if (cb == null) {\n-            LOG.info(\"no callback to run for this txn, txnId:{} callbackId:{}\", txnState.getTransactionId(),\n-                        txnState.getCallbackId());\n-            return;\n-        }\n-\n-        LOG.info(\"run txn callback, txnId:{} callbackId:{}\", txnState.getTransactionId(), txnState.getCallbackId());\n-        cb.afterAborted(txnState, true, txnState.getReason());\n-        if (MetricRepo.isInit) {\n-            MetricRepo.COUNTER_TXN_FAILED.increase(1L);\n-        }\n+        afterAbortTxnResp(abortTxnResponse, label, null);\n     }\n \n     @Override",
      "parent_sha": "62a64d10ae8d1d6431834f09ad296836b8cdedc3"
    }
  },
  {
    "oid": "06b87d998a2b429dbb4ef6ab9b12113b8393c1dd",
    "message": "Error check about column which has no default value (#1728)\n\nThis commit check the all of parsed column include hadoop function and other function.\r\nOtherwise, the load will thrown the \"Column has no default value\" exception while the column also has been defined by a non-hadoop function.",
    "date": "2019-08-30T12:23:32Z",
    "url": "https://github.com/apache/doris/commit/06b87d998a2b429dbb4ef6ab9b12113b8393c1dd",
    "details": {
      "sha": "6daeaf87b09e72eee21b64a1c66ef45e4519ea2d",
      "filename": "fe/src/main/java/org/apache/doris/load/Load.java",
      "status": "modified",
      "additions": 13,
      "deletions": 14,
      "changes": 27,
      "blob_url": "https://github.com/apache/doris/blob/06b87d998a2b429dbb4ef6ab9b12113b8393c1dd/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fload%2FLoad.java",
      "raw_url": "https://github.com/apache/doris/raw/06b87d998a2b429dbb4ef6ab9b12113b8393c1dd/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fload%2FLoad.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fload%2FLoad.java?ref=06b87d998a2b429dbb4ef6ab9b12113b8393c1dd",
      "patch": "@@ -22,6 +22,8 @@\n import org.apache.doris.analysis.ColumnSeparator;\n import org.apache.doris.analysis.DataDescription;\n import org.apache.doris.analysis.DeleteStmt;\n+import org.apache.doris.analysis.Expr;\n+import org.apache.doris.analysis.ImportColumnDesc;\n import org.apache.doris.analysis.IsNullPredicate;\n import org.apache.doris.analysis.LabelName;\n import org.apache.doris.analysis.LiteralExpr;\n@@ -677,33 +679,30 @@ public static void checkAndCreateSource(Database db, DataDescription dataDescrip\n             source.setColumnNames(columnNames);\n \n             // check default value\n-            Map<String, Pair<String, List<String>>> assignColumnToFunction = dataDescription.getColumnToHadoopFunction();\n+            Map<String, Pair<String, List<String>>> columnToHadoopFunction = dataDescription.getColumnToHadoopFunction();\n+            List<ImportColumnDesc> parsedColumnExprList = dataDescription.getParsedColumnExprList();\n+            Map<String, Expr> parsedColumnExprMap = Maps.newTreeMap(String.CASE_INSENSITIVE_ORDER);\n+            for (ImportColumnDesc importColumnDesc : parsedColumnExprList) {\n+                parsedColumnExprMap.put(importColumnDesc.getColumnName(), importColumnDesc.getExpr());\n+            }\n             for (Column column : tableSchema) {\n                 String columnName = column.getName();\n                 if (columnNames.contains(columnName)) {\n                     continue;\n                 }\n \n-                if (assignColumnToFunction != null && assignColumnToFunction.containsKey(columnName)) {\n+                if (parsedColumnExprMap.containsKey(columnName)) {\n                     continue;\n                 }\n \n                 if (column.getDefaultValue() != null || column.isAllowNull()) {\n                     continue;\n                 }\n \n-                if (deleteFlag && !column.isKey()) {\n-                    List<String> args = Lists.newArrayList();\n-                    args.add(\"0\");\n-                    Pair<String, List<String>> functionPair = new Pair<String, List<String>>(\"default_value\", args);\n-                    assignColumnToFunction.put(columnName, functionPair);\n-                    continue;\n-                }\n-\n                 throw new DdlException(\"Column has no default value. column: \" + columnName);\n             }\n \n-            // check negative for sum aggreate type\n+            // check negative for sum aggregate type\n             if (dataDescription.isNegative()) {\n                 for (Column column : tableSchema) {\n                     if (!column.isKey() && column.getAggregationType() != AggregateType.SUM) {\n@@ -715,7 +714,7 @@ public static void checkAndCreateSource(Database db, DataDescription dataDescrip\n             // check hll\n             for (Column column : tableSchema) {\n                 if (column.getDataType() == PrimitiveType.HLL) {\n-                    if (assignColumnToFunction != null && !assignColumnToFunction.containsKey(column.getName())) {\n+                    if (columnToHadoopFunction != null && !columnToHadoopFunction.containsKey(column.getName())) {\n                         throw new DdlException(\"Hll column is not assigned. column:\" + column.getName());\n                     }\n                 }\n@@ -727,9 +726,9 @@ public static void checkAndCreateSource(Database db, DataDescription dataDescrip\n             for (String columnName : columnNames) {\n                 columnNameMap.put(columnName, columnName);\n             }\n-            if (assignColumnToFunction != null) {\n+            if (columnToHadoopFunction != null) {\n                 columnToFunction = Maps.newHashMap();\n-                for (Entry<String, Pair<String, List<String>>> entry : assignColumnToFunction.entrySet()) {\n+                for (Entry<String, Pair<String, List<String>>> entry : columnToHadoopFunction.entrySet()) {\n                     String mappingColumnName = entry.getKey();\n                     if (!nameToTableColumn.containsKey(mappingColumnName)) {\n                         throw new DdlException(\"Mapping column is not in table. column: \" + mappingColumnName);",
      "parent_sha": "206f5394ee8f687a65b4c089c1f108e0e8920a17"
    }
  },
  {
    "oid": "f14db21ded037bd09342da77346d2f63d8f28a3d",
    "message": "[chore] change info to debug for collecting mtmv candidates (#47072)",
    "date": "2025-01-17T03:02:22Z",
    "url": "https://github.com/apache/doris/commit/f14db21ded037bd09342da77346d2f63d8f28a3d",
    "details": {
      "sha": "9426ab4d382b778ce7e8b58463b59444a0595ac8",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/nereids/rules/analysis/CollectRelation.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/apache/doris/blob/f14db21ded037bd09342da77346d2f63d8f28a3d/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Frules%2Fanalysis%2FCollectRelation.java",
      "raw_url": "https://github.com/apache/doris/raw/f14db21ded037bd09342da77346d2f63d8f28a3d/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Frules%2Fanalysis%2FCollectRelation.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Frules%2Fanalysis%2FCollectRelation.java?ref=f14db21ded037bd09342da77346d2f63d8f28a3d",
      "patch": "@@ -191,13 +191,17 @@ private void collectMTMVCandidates(TableIf table, CascadesContext cascadesContex\n         if (cascadesContext.getConnectContext().getSessionVariable().enableMaterializedViewRewrite) {\n             Set<MTMV> mtmvSet = Env.getCurrentEnv().getMtmvService().getRelationManager()\n                     .getAllMTMVs(Lists.newArrayList(new BaseTableInfo(table)));\n-            LOG.info(\"table {} related mv set is {}\", new BaseTableInfo(table), mtmvSet);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"table {} related mv set is {}\", new BaseTableInfo(table), mtmvSet);\n+            }\n             for (MTMV mtmv : mtmvSet) {\n                 cascadesContext.getStatementContext().getMtmvRelatedTables().put(mtmv.getFullQualifiers(), mtmv);\n                 mtmv.readMvLock();\n                 try {\n                     for (BaseTableInfo baseTableInfo : mtmv.getRelation().getBaseTables()) {\n-                        LOG.info(\"mtmv {} related base table include {}\", new BaseTableInfo(mtmv), baseTableInfo);\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.info(\"mtmv {} related base table include {}\", new BaseTableInfo(mtmv), baseTableInfo);\n+                        }\n                         try {\n                             cascadesContext.getStatementContext().getAndCacheTable(baseTableInfo.toList(),\n                                     TableFrom.MTMV);",
      "parent_sha": "3a37f9fb172e8dc20d4e3c75c870b5e5c041874b"
    }
  },
  {
    "oid": "3503aaa6069b7ecb7ec95b00c8f6724c77ea1bea",
    "message": "[chore](fe) Add detailed msg of checking endpoint failed (#34979)",
    "date": "2024-05-17T03:32:08Z",
    "url": "https://github.com/apache/doris/commit/3503aaa6069b7ecb7ec95b00c8f6724c77ea1bea",
    "details": {
      "sha": "f3195fb135d0a4b6d7391ab7c7ac15a280c53321",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/analysis/LoadStmt.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/3503aaa6069b7ecb7ec95b00c8f6724c77ea1bea/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FLoadStmt.java",
      "raw_url": "https://github.com/apache/doris/raw/3503aaa6069b7ecb7ec95b00c8f6724c77ea1bea/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FLoadStmt.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FLoadStmt.java?ref=3503aaa6069b7ecb7ec95b00c8f6724c77ea1bea",
      "patch": "@@ -583,7 +583,7 @@ private void checkEndpoint(String endpoint) throws UserException {\n             connection.connect();\n         } catch (Exception e) {\n             LOG.warn(\"Failed to connect endpoint={}\", endpoint, e);\n-            throw new UserException(e.getMessage());\n+            throw new UserException(\"Incorrect object storage info: \" + e.getMessage());\n         } finally {\n             if (connection != null) {\n                 try {",
      "parent_sha": "fdcaeff8b8c3aa5ac8b1c488533c0bc1085b1e3b"
    }
  },
  {
    "oid": "b3b054c9ffd029f24a1fb17a247726faea343594",
    "message": "[fix](schema-change) fix schema_change failed because of emtpy origin_column_name passed and fix ut fail on isFullyQualified (#10281)",
    "date": "2022-06-21T11:53:58Z",
    "url": "https://github.com/apache/doris/commit/b3b054c9ffd029f24a1fb17a247726faea343594",
    "details": {
      "sha": "c1a5144579c115cbf7fd8bce6ce798e664c94c1a",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/alter/SchemaChangeJobV2.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/apache/doris/blob/b3b054c9ffd029f24a1fb17a247726faea343594/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Falter%2FSchemaChangeJobV2.java",
      "raw_url": "https://github.com/apache/doris/raw/b3b054c9ffd029f24a1fb17a247726faea343594/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Falter%2FSchemaChangeJobV2.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Falter%2FSchemaChangeJobV2.java?ref=b3b054c9ffd029f24a1fb17a247726faea343594",
      "patch": "@@ -423,8 +423,9 @@ protected void runWaitingTxnJob() throws AlterCancelException {\n                                     .get(SchemaChangeHandler.SHADOW_NAME_PRFIX + column.getName());\n                             if (newColumn.getType() != column.getType()) {\n                                 try {\n-                                    defineExprs.put(column.getName(),\n-                                            new SlotRef(destSlotDesc).castTo(newColumn.getType()));\n+                                    SlotRef slot = new SlotRef(destSlotDesc);\n+                                    slot.setCol(column.getName());\n+                                    defineExprs.put(column.getName(), slot.castTo(newColumn.getType()));\n                                 } catch (AnalysisException e) {\n                                     throw new AlterCancelException(e.getMessage());\n                                 }",
      "parent_sha": "47dba440d0c9139fcfe543a4c7c345b3a708f60c"
    }
  },
  {
    "oid": "dd2e0ab8543150015369632107d217ace4e7447a",
    "message": "[fix](nereids)group by expr may be lost in EliminateGroupByConstant rule (#30274)",
    "date": "2024-01-23T11:38:27Z",
    "url": "https://github.com/apache/doris/commit/dd2e0ab8543150015369632107d217ace4e7447a",
    "details": {
      "sha": "e683153e9a29667f6abf2ebfff1a6164a83cf1d0",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/nereids/rules/analysis/EliminateGroupByConstant.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/dd2e0ab8543150015369632107d217ace4e7447a/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Frules%2Fanalysis%2FEliminateGroupByConstant.java",
      "raw_url": "https://github.com/apache/doris/raw/dd2e0ab8543150015369632107d217ace4e7447a/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Frules%2Fanalysis%2FEliminateGroupByConstant.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Frules%2Fanalysis%2FEliminateGroupByConstant.java?ref=dd2e0ab8543150015369632107d217ace4e7447a",
      "patch": "@@ -67,7 +67,7 @@ public Rule build() {\n                     lit = expression;\n                 }\n             }\n-            if (slotGroupByExprs.isEmpty() && lit != null && aggregate.getAggregateFunctions().isEmpty()) {\n+            if (slotGroupByExprs.isEmpty() && lit != null) {\n                 slotGroupByExprs.add(lit);\n             }\n             return aggregate.withGroupByAndOutput(ImmutableList.copyOf(slotGroupByExprs), outputExprs);",
      "parent_sha": "5836294c45d65c0f490966c8016eccbd7fc5f70a"
    }
  },
  {
    "oid": "90360149547c2cc54eea4ad6d39e2b4e9ec3e4e2",
    "message": "Add schema change check for DUPLICATE KEY table (#1844)",
    "date": "2019-09-20T14:33:08Z",
    "url": "https://github.com/apache/doris/commit/90360149547c2cc54eea4ad6d39e2b4e9ec3e4e2",
    "details": {
      "sha": "f48e3d244db58afb578acae40bc28f042e613933",
      "filename": "fe/src/main/java/org/apache/doris/alter/SchemaChangeHandler.java",
      "status": "modified",
      "additions": 10,
      "deletions": 13,
      "changes": 23,
      "blob_url": "https://github.com/apache/doris/blob/90360149547c2cc54eea4ad6d39e2b4e9ec3e4e2/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Falter%2FSchemaChangeHandler.java",
      "raw_url": "https://github.com/apache/doris/raw/90360149547c2cc54eea4ad6d39e2b4e9ec3e4e2/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Falter%2FSchemaChangeHandler.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Falter%2FSchemaChangeHandler.java?ref=90360149547c2cc54eea4ad6d39e2b4e9ec3e4e2",
      "patch": "@@ -923,20 +923,17 @@ private void createJob(long dbId, OlapTable olapTable, Map<Long, LinkedList<Colu\n                 throw new DdlException(\"No key column left. index[\" + olapTable.getIndexNameById(alterIndexId) + \"]\");\n             }\n \n-            if (KeysType.AGG_KEYS == olapTable.getKeysType()\n-                    || KeysType.UNIQUE_KEYS == olapTable.getKeysType()) {\n-                // 2. check compatible\n-                for (Column alterColumn : alterSchema) {\n-                    for (Column oriColumn : originSchema) {\n-                        if (alterColumn.nameEquals(oriColumn.getName(), true /* ignore prefix */)) {\n-                            if (!alterColumn.equals(oriColumn)) {\n-                                // 3.1 check type\n-                                oriColumn.checkSchemaChangeAllowed(alterColumn);\n-                            }\n+            // 2. check compatible\n+            for (Column alterColumn : alterSchema) {\n+                for (Column oriColumn : originSchema) {\n+                    if (alterColumn.nameEquals(oriColumn.getName(), true /* ignore prefix */)) {\n+                        if (!alterColumn.equals(oriColumn)) {\n+                            // 3.1 check type\n+                            oriColumn.checkSchemaChangeAllowed(alterColumn);\n                         }\n-                    } // end for ori\n-                } // end for alter\n-            }\n+                    }\n+                } // end for ori\n+            } // end for alter\n \n             // 3. check partition key\n             PartitionInfo partitionInfo = olapTable.getPartitionInfo();",
      "parent_sha": "cc36905aea5e258236881d2848966ff10bb1a4b0"
    }
  },
  {
    "oid": "a518ea50639d401946a83ad7e7cccb3d7ca8a234",
    "message": "[Bug](pipeline) do not call cancelPlanFragmentAsync when instance finished (#21193)\n\ndo not call cancelPlanFragmentAsync when instance finished",
    "date": "2023-06-29T07:35:23Z",
    "url": "https://github.com/apache/doris/commit/a518ea50639d401946a83ad7e7cccb3d7ca8a234",
    "details": {
      "sha": "d4f78b0d91bb95e9deb8e187d46f82b6db983ceb",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/apache/doris/blob/a518ea50639d401946a83ad7e7cccb3d7ca8a234/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FCoordinator.java",
      "raw_url": "https://github.com/apache/doris/raw/a518ea50639d401946a83ad7e7cccb3d7ca8a234/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FCoordinator.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FCoordinator.java?ref=a518ea50639d401946a83ad7e7cccb3d7ca8a234",
      "patch": "@@ -2788,9 +2788,13 @@ public synchronized boolean cancelFragmentInstance(Types.PPlanFragmentCancelReas\n                             this.initiated, this.done, this.hasCanceled, backend.getId(),\n                             DebugUtil.printId(localParam.fragment_instance_id), cancelReason.name());\n                 }\n-                if (fragmentInstancesMap.get(localParam.fragment_instance_id).getIsCancel()) {\n+\n+                RuntimeProfile profile = fragmentInstancesMap.get(localParam.fragment_instance_id);\n+                if (profile.getIsDone() || profile.getIsCancel()) {\n                     continue;\n                 }\n+\n+                this.hasCanceled = true;\n                 try {\n                     Span span = ConnectContext.get() != null\n                             ? ConnectContext.get().getTracer().spanBuilder(\"cancelPlanFragmentAsync\")\n@@ -2812,7 +2816,10 @@ public synchronized boolean cancelFragmentInstance(Types.PPlanFragmentCancelReas\n                     return false;\n                 }\n             }\n-            this.hasCanceled = true;\n+            if (!this.hasCanceled) {\n+                return false;\n+            }\n+\n             for (int i = 0; i < this.numInstances; i++) {\n                 fragmentInstancesMap.get(rpcParams.local_params.get(i).fragment_instance_id).setIsCancel(true);\n             }",
      "parent_sha": "16c218fde55dbdec959f4e9911cfd64d90ffeacf"
    }
  },
  {
    "oid": "92d41f91b8f67fd2d1b1441641f842153b217241",
    "message": "[UT] Fix CreateMaterializedViewStmtTest failed (#6258)\n\nIn PR #6226, we open the debug level of unit test, it cause some\r\nunexpected exception.",
    "date": "2021-07-18T14:16:56Z",
    "url": "https://github.com/apache/doris/commit/92d41f91b8f67fd2d1b1441641f842153b217241",
    "details": {
      "sha": "17a74055b99ba279dc833129148cc68e1042166b",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/analysis/Expr.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/doris/blob/92d41f91b8f67fd2d1b1441641f842153b217241/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FExpr.java",
      "raw_url": "https://github.com/apache/doris/raw/92d41f91b8f67fd2d1b1441641f842153b217241/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FExpr.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fanalysis%2FExpr.java?ref=92d41f91b8f67fd2d1b1441641f842153b217241",
      "patch": "@@ -34,6 +34,7 @@\n import com.google.common.base.MoreObjects;\n import com.google.common.base.Objects;\n import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n \n@@ -470,7 +471,7 @@ public static String debugString(List<? extends Expr> exprs) {\n         }\n         List<String> strings = Lists.newArrayList();\n         for (Expr expr : exprs) {\n-            strings.add(expr.debugString());\n+            strings.add(Strings.nullToEmpty(expr.debugString()));\n         }\n         return \"(\" + Joiner.on(\" \").join(strings) + \")\";\n     }",
      "parent_sha": "7a8837c9620eb04c6fda9f3a260f376bfde1a0dd"
    }
  },
  {
    "oid": "118ca08b123f41c7eef939c9217840f39368c7b4",
    "message": "[fix](restore) Fix restore table name when lower_case_table_names enabled (#35508)",
    "date": "2024-05-28T13:01:06Z",
    "url": "https://github.com/apache/doris/commit/118ca08b123f41c7eef939c9217840f39368c7b4",
    "details": {
      "sha": "57861551c3a78f5d01826103088926b83f925986",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/backup/RestoreJob.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/apache/doris/blob/118ca08b123f41c7eef939c9217840f39368c7b4/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fbackup%2FRestoreJob.java",
      "raw_url": "https://github.com/apache/doris/raw/118ca08b123f41c7eef939c9217840f39368c7b4/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fbackup%2FRestoreJob.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fbackup%2FRestoreJob.java?ref=118ca08b123f41c7eef939c9217840f39368c7b4",
      "patch": "@@ -823,7 +823,11 @@ private void checkAndPrepareMeta() {\n                     }\n                 }\n                 // set restored table's new name after all 'genFileMapping'\n-                restoreTbl.setName(jobInfo.getAliasByOriginNameIfSet(restoreTbl.getName()));\n+                String tableName = jobInfo.getAliasByOriginNameIfSet(restoreTbl.getName());\n+                if (Env.isStoredTableNamesLowerCase()) {\n+                    tableName = tableName.toLowerCase();\n+                }\n+                restoreTbl.setName(tableName);\n             }\n \n             if (LOG.isDebugEnabled()) {",
      "parent_sha": "f41d35b8e683049adb4ab4b5ea67dbac8f3f4d6d"
    }
  },
  {
    "oid": "6614c219cb5f437860f0027e98abcd7cfbca4a7f",
    "message": "[opt](Nereids) use NUMERIC_PRECEDENCE in int div (#23403)",
    "date": "2023-08-25T03:03:50Z",
    "url": "https://github.com/apache/doris/commit/6614c219cb5f437860f0027e98abcd7cfbca4a7f",
    "details": {
      "sha": "41686b9b530c60ff7361b11ed3b6f041e7280177",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/nereids/util/TypeCoercionUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 13,
      "changes": 14,
      "blob_url": "https://github.com/apache/doris/blob/6614c219cb5f437860f0027e98abcd7cfbca4a7f/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Futil%2FTypeCoercionUtils.java",
      "raw_url": "https://github.com/apache/doris/raw/6614c219cb5f437860f0027e98abcd7cfbca4a7f/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Futil%2FTypeCoercionUtils.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Futil%2FTypeCoercionUtils.java?ref=6614c219cb5f437860f0027e98abcd7cfbca4a7f",
      "patch": "@@ -117,18 +117,6 @@\n  */\n public class TypeCoercionUtils {\n \n-    /**\n-     * integer type precedence for type promotion.\n-     * bigger numeric has smaller ordinal\n-     */\n-    public static final List<DataType> INTEGER_PRECEDENCE = ImmutableList.of(\n-            LargeIntType.INSTANCE,\n-            BigIntType.INSTANCE,\n-            IntegerType.INSTANCE,\n-            SmallIntType.INSTANCE,\n-            TinyIntType.INSTANCE\n-    );\n-\n     /**\n      * numeric type precedence for type promotion.\n      * bigger numeric has smaller ordinal\n@@ -577,7 +565,7 @@ public static Expression processIntegralDivide(IntegralDivide divide) {\n \n         DataType commonType = BigIntType.INSTANCE;\n         if (t1.isIntegralType() && t2.isIntegralType()) {\n-            for (DataType dataType : TypeCoercionUtils.INTEGER_PRECEDENCE) {\n+            for (DataType dataType : TypeCoercionUtils.NUMERIC_PRECEDENCE) {\n                 if (t1.equals(dataType) || t2.equals(dataType)) {\n                     commonType = dataType;\n                     break;",
      "parent_sha": "69e75f04ab400ddf4de8c0ae9cee5ff1d26741da"
    }
  },
  {
    "oid": "18a086e844dce4ea960faff0dbd0cad0ee587d5c",
    "message": "[improvement](log)Reduce stats log. (#45900)\n\n### What problem does this PR solve?\r\n\r\nReduce unnecessary stats log.\r\n\r\nIssue Number: close #xxx\r\n\r\nRelated PR: #xxx\r\n\r\nProblem Summary:\r\n\r\n### Release note\r\n\r\nNone",
    "date": "2024-12-25T06:19:12Z",
    "url": "https://github.com/apache/doris/commit/18a086e844dce4ea960faff0dbd0cad0ee587d5c",
    "details": {
      "sha": "cbea5e94dd1e44ecb929957c4c52ae8bd58df4cc",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/datasource/hive/HMSExternalTable.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/doris/blob/18a086e844dce4ea960faff0dbd0cad0ee587d5c/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2Fhive%2FHMSExternalTable.java",
      "raw_url": "https://github.com/apache/doris/raw/18a086e844dce4ea960faff0dbd0cad0ee587d5c/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2Fhive%2FHMSExternalTable.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2Fhive%2FHMSExternalTable.java?ref=18a086e844dce4ea960faff0dbd0cad0ee587d5c",
      "patch": "@@ -647,7 +647,9 @@ public Optional<ColumnStatistic> getColumnStatistic(String colName) {\n                     break;\n                 }\n             default:\n-                LOG.warn(\"get column stats for dlaType {} is not supported.\", dlaType);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"get column stats for dlaType {} is not supported.\", dlaType);\n+                }\n         }\n         return Optional.empty();\n     }",
      "parent_sha": "24e73227e6b4be31e1bde227f41ea5c12a618beb"
    }
  },
  {
    "oid": "dc7fcd0032b7069bbcf656e8cbc934f73e964c5f",
    "message": "[fix](cloud) fix auto analyze triggering failure (#32139)\n\n* [fix](cloud) fix auto analyze triggering failure\r\n\r\nStatisticsCollector only collect when replicas are normal. In cloud\r\nmode, this check needs setCloudCluster before execution. Otherwise,\r\ncheck will be a dead-end failure.\r\n\r\nSigned-off-by: freemandealer <freeman.zhang1992@gmail.com>",
    "date": "2024-03-12T14:12:45Z",
    "url": "https://github.com/apache/doris/commit/dc7fcd0032b7069bbcf656e8cbc934f73e964c5f",
    "details": {
      "sha": "3df7385d97036369de708b3b41600ce070b4fe35",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/statistics/util/StatisticsUtil.java",
      "status": "modified",
      "additions": 22,
      "deletions": 5,
      "changes": 27,
      "blob_url": "https://github.com/apache/doris/blob/dc7fcd0032b7069bbcf656e8cbc934f73e964c5f/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fstatistics%2Futil%2FStatisticsUtil.java",
      "raw_url": "https://github.com/apache/doris/raw/dc7fcd0032b7069bbcf656e8cbc934f73e964c5f/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fstatistics%2Futil%2FStatisticsUtil.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fstatistics%2Futil%2FStatisticsUtil.java?ref=dc7fcd0032b7069bbcf656e8cbc934f73e964c5f",
      "patch": "@@ -139,6 +139,9 @@ public static List<ResultRow> execStatisticQuery(String sql) {\n             return Collections.emptyList();\n         }\n         try (AutoCloseConnectContext r = StatisticsUtil.buildConnectContext()) {\n+            if (Config.isCloudMode()) {\n+                r.connectContext.getCloudCluster();\n+            }\n             StmtExecutor stmtExecutor = new StmtExecutor(r.connectContext, sql);\n             r.connectContext.setExecutor(stmtExecutor);\n             return stmtExecutor.executeInternalQuery();\n@@ -447,11 +450,25 @@ public static boolean statsTblAvailable() {\n         } catch (Throwable t) {\n             return false;\n         }\n-        for (OlapTable table : statsTbls) {\n-            for (Partition partition : table.getPartitions()) {\n-                if (partition.getBaseIndex().getTablets().stream()\n-                        .anyMatch(t -> t.getNormalReplicaBackendIds().isEmpty())) {\n-                    return false;\n+        if (Config.isCloudMode()) {\n+            try (AutoCloseConnectContext r = buildConnectContext()) {\n+                r.connectContext.getCloudCluster();\n+                for (OlapTable table : statsTbls) {\n+                    for (Partition partition : table.getPartitions()) {\n+                        if (partition.getBaseIndex().getTablets().stream()\n+                                .anyMatch(t -> t.getNormalReplicaBackendIds().isEmpty())) {\n+                            return false;\n+                        }\n+                    }\n+                }\n+            }\n+        } else {\n+            for (OlapTable table : statsTbls) {\n+                for (Partition partition : table.getPartitions()) {\n+                    if (partition.getBaseIndex().getTablets().stream()\n+                            .anyMatch(t -> t.getNormalReplicaBackendIds().isEmpty())) {\n+                        return false;\n+                    }\n                 }\n             }\n         }",
      "parent_sha": "47be7c5e1737c084f0919eeee2001583a78a7ccb"
    }
  },
  {
    "oid": "453aeb7a19cae389622075138dfe371b91ccb740",
    "message": "[UT] Fixes PartitionCacheTest unit test randomly failed (#4729)\n\nFixes PartitionCacheTest unit test randomly failed. #4728",
    "date": "2020-10-14T01:31:15Z",
    "url": "https://github.com/apache/doris/commit/453aeb7a19cae389622075138dfe371b91ccb740",
    "details": {
      "sha": "d0ba4cc1809f6ba8fee0f42aabfebc49c076a9b7",
      "filename": "fe/fe-core/src/test/java/org/apache/doris/qe/PartitionCacheTest.java",
      "status": "modified",
      "additions": 24,
      "deletions": 5,
      "changes": 29,
      "blob_url": "https://github.com/apache/doris/blob/453aeb7a19cae389622075138dfe371b91ccb740/fe%2Ffe-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FPartitionCacheTest.java",
      "raw_url": "https://github.com/apache/doris/raw/453aeb7a19cae389622075138dfe371b91ccb740/fe%2Ffe-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FPartitionCacheTest.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FPartitionCacheTest.java?ref=453aeb7a19cae389622075138dfe371b91ccb740",
      "patch": "@@ -27,6 +27,7 @@\n import org.apache.doris.catalog.Catalog;\n import org.apache.doris.catalog.Column;\n import org.apache.doris.catalog.Database;\n+import org.apache.doris.catalog.FunctionSet;\n import org.apache.doris.catalog.KeysType;\n import org.apache.doris.catalog.MaterializedIndex;\n import org.apache.doris.catalog.MaterializedIndex.IndexState;\n@@ -137,6 +138,12 @@ public boolean showHiddenColumns() {\n                 return true;\n             }\n         };\n+        new MockUp<Catalog>() {\n+            @Mock\n+            public SystemInfoService getCurrentSystemInfo() {\n+                return service;\n+            }\n+        };\n         db = new Database(1L, fullDbName);\n             \n         OlapTable tbl1 = createOrderTable();\n@@ -151,10 +158,6 @@ public boolean showHiddenColumns() {\n                 catalog.getAuth();\n                 minTimes = 0;\n                 result = auth;\n-\n-                Deencapsulation.invoke(Catalog.class, \"getCurrentSystemInfo\");\n-                minTimes = 0;\n-                result = service;\n    \n                 catalog.getDb(fullDbName);\n                 minTimes = 0;\n@@ -173,7 +176,9 @@ public boolean showHiddenColumns() {\n                 result = Lists.newArrayList(fullDbName);\n             }    \n         };\n-        \n+        FunctionSet fs = new FunctionSet();\n+        fs.init();\n+        Deencapsulation.setField(catalog, \"functionSet\", fs);\n         QueryState state = new QueryState();\n         channel.reset();\n         \n@@ -415,6 +420,7 @@ private StatementBase parseSql(String sql){\n    \n     @Test\n     public void testCacheNode() throws Exception {\n+        Catalog.getCurrentSystemInfo();\n         CacheCoordinator cp = CacheCoordinator.getInstance();\n         cp.DebugModel = true;\n         Backend bd1 = new Backend(1, \"\", 1000);\n@@ -443,6 +449,7 @@ public void testCacheNode() throws Exception {\n \n     @Test\n     public void testCacheModeNone() throws Exception {\n+        Catalog.getCurrentSystemInfo();\n         StatementBase parseStmt = parseSql(\"select @@version_comment limit 1\");\n         List<ScanNode> scanNodes = Lists.newArrayList();\n         CacheAnalyzer ca = new CacheAnalyzer(context, parseStmt, scanNodes);\n@@ -452,6 +459,7 @@ public void testCacheModeNone() throws Exception {\n \n     @Test\n     public void testCacheModeTable() throws Exception {\n+        Catalog.getCurrentSystemInfo();\n         StatementBase parseStmt = parseSql(\n             \"SELECT country, COUNT(userid) FROM userprofile GROUP BY country\"\n         );\n@@ -463,6 +471,7 @@ public void testCacheModeTable() throws Exception {\n     \n     @Test\n     public void testWithinMinTime() throws Exception {\n+        Catalog.getCurrentSystemInfo();\n         StatementBase parseStmt = parseSql(\n             \"SELECT country, COUNT(userid) FROM userprofile GROUP BY country\"\n         );\n@@ -474,6 +483,7 @@ public void testWithinMinTime() throws Exception {\n \n     @Test\n     public void testPartitionModel() throws Exception {\n+        Catalog.getCurrentSystemInfo();\n         StatementBase parseStmt = parseSql(\n             \"SELECT eventdate, COUNT(DISTINCT userid) FROM appevent WHERE eventdate>=\\\"2020-01-12\\\" and \" +\n                     \"eventdate<=\\\"2020-01-15\\\" GROUP BY eventdate\"\n@@ -486,6 +496,7 @@ public void testPartitionModel() throws Exception {\n \n     @Test\n     public void testParseByte() throws Exception {\n+        Catalog.getCurrentSystemInfo();\n         RowBatchBuilder sb = new RowBatchBuilder(CacheMode.Partition);\n         byte[] buffer = new byte[]{10, 50, 48, 50, 48, 45, 48, 51, 45, 49, 48, 1, 51, 2, 67, 78};\n         PartitionRange.PartitionKeyType key1 = sb.getKeyFromRow(buffer, 0, Type.DATE);\n@@ -498,6 +509,7 @@ public void testParseByte() throws Exception {\n \n     @Test\n     public void testPartitionIntTypeSql() throws Exception {\n+        Catalog.getCurrentSystemInfo();\n         StatementBase parseStmt = parseSql(\n                 \"SELECT `date`, COUNT(id) FROM `order` WHERE `date`>=20200112 and `date`<=20200115 GROUP BY date\"\n         );\n@@ -539,6 +551,7 @@ public void testPartitionIntTypeSql() throws Exception {\n \n     @Test\n     public void testSimpleCacheSql() throws Exception {\n+        Catalog.getCurrentSystemInfo();\n         StatementBase parseStmt = parseSql(\n             \"SELECT eventdate, COUNT(userid) FROM appevent WHERE eventdate>=\\\"2020-01-12\\\" and eventdate<=\\\"2020-01-15\\\" GROUP BY eventdate\"\n         );\n@@ -577,6 +590,7 @@ public void testSimpleCacheSql() throws Exception {\n \n     @Test\n     public void testHitPartPartition() throws Exception {\n+        Catalog.getCurrentSystemInfo();\n         StatementBase parseStmt = parseSql(\n                 \"SELECT eventdate, COUNT(userid) FROM appevent WHERE eventdate>=\\\"2020-01-12\\\" and eventdate<=\\\"2020-01-14\\\" GROUP BY eventdate\"\n         );\n@@ -620,6 +634,7 @@ public void testHitPartPartition() throws Exception {\n \n     @Test\n     public void testNoUpdatePartition() throws Exception {\n+        Catalog.getCurrentSystemInfo();\n         StatementBase parseStmt = parseSql(\n                 \"SELECT eventdate, COUNT(userid) FROM appevent WHERE eventdate>=\\\"2020-01-12\\\" and eventdate<=\\\"2020-01-14\\\" GROUP BY eventdate\"\n         );\n@@ -659,6 +674,7 @@ public void testNoUpdatePartition() throws Exception {\n \n     @Test\n     public void testUpdatePartition() throws Exception {\n+        Catalog.getCurrentSystemInfo();\n         StatementBase parseStmt = parseSql(\n                 \"SELECT eventdate, COUNT(userid) FROM appevent WHERE eventdate>=\\\"2020-01-12\\\" and eventdate<=\\\"2020-01-15\\\" GROUP BY eventdate\"\n         );\n@@ -704,6 +720,7 @@ public void testUpdatePartition() throws Exception {\n    \n     @Test\n     public void testRewriteMultiPredicate1() throws Exception {\n+        Catalog.getCurrentSystemInfo();\n         StatementBase parseStmt = parseSql(\n             \"SELECT eventdate, COUNT(userid) FROM appevent WHERE eventdate>\\\"2020-01-11\\\" and eventdate<\\\"2020-01-16\\\"\" +\n                     \" and eventid=1 GROUP BY eventdate\"\n@@ -744,6 +761,7 @@ public void testRewriteMultiPredicate1() throws Exception {\n     \n     @Test\n     public void testRewriteJoin() throws Exception {\n+        Catalog.getCurrentSystemInfo();\n         StatementBase parseStmt = parseSql(\n             \"SELECT appevent.eventdate, country, COUNT(appevent.userid) FROM appevent\" +\n                     \" INNER JOIN userprofile ON appevent.userid = userprofile.userid\" +\n@@ -786,6 +804,7 @@ public void testRewriteJoin() throws Exception {\n     \n     @Test\n     public void testSubSelect() throws Exception {\n+        Catalog.getCurrentSystemInfo();\n         StatementBase parseStmt = parseSql(\n             \"SELECT eventdate, sum(pv) FROM (SELECT eventdate, COUNT(userid) AS pv FROM appevent WHERE eventdate>\\\"2020-01-11\\\" AND eventdate<\\\"2020-01-16\\\"\" +\n                 \" AND eventid=1 GROUP BY eventdate) tbl GROUP BY eventdate\"",
      "parent_sha": "2959a6b24fa347c889c5e44747ca025ac608d520"
    }
  },
  {
    "oid": "d287f53d770d35296d815bf0f607b8f188e9817f",
    "message": "[fix](nereids)in physical plan, print join class simple name not full name #25515",
    "date": "2023-10-17T12:25:14Z",
    "url": "https://github.com/apache/doris/commit/d287f53d770d35296d815bf0f607b8f188e9817f",
    "details": {
      "sha": "acd2e3813920e81dccccdb4947faa60502d7d16d",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/nereids/trees/plans/physical/AbstractPhysicalJoin.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/d287f53d770d35296d815bf0f607b8f188e9817f/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Ftrees%2Fplans%2Fphysical%2FAbstractPhysicalJoin.java",
      "raw_url": "https://github.com/apache/doris/raw/d287f53d770d35296d815bf0f607b8f188e9817f/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Ftrees%2Fplans%2Fphysical%2FAbstractPhysicalJoin.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Ftrees%2Fplans%2Fphysical%2FAbstractPhysicalJoin.java?ref=d287f53d770d35296d815bf0f607b8f188e9817f",
      "patch": "@@ -239,7 +239,7 @@ public String toString() {\n             args.add(\"runtimeFilters\");\n             args.add(runtimeFilters.stream().map(rf -> rf.toString() + \" \").collect(Collectors.toList()));\n         }\n-        return Utils.toSqlString(this.getClass().getName() + \"[\" + id.asInt() + \"]\" + getGroupIdWithPrefix(),\n+        return Utils.toSqlString(this.getClass().getSimpleName() + \"[\" + id.asInt() + \"]\" + getGroupIdWithPrefix(),\n                 args.toArray());\n     }\n }",
      "parent_sha": "9b1cdd3230fbc506b28e4b69e20b95bed8e6c90d"
    }
  },
  {
    "oid": "41501d9a131e2ab0245642544d5450eb023a0885",
    "message": "[fix](fe) Fix the sql of AddPartitionRecord (#37295)\n\nThe range field is accidentally compared to DUMMY_ITEM.\r\n\r\nIt was introduced by #35461.",
    "date": "2024-07-05T01:59:56Z",
    "url": "https://github.com/apache/doris/commit/41501d9a131e2ab0245642544d5450eb023a0885",
    "details": {
      "sha": "bb5485b2624760d3f2bafae077a00f3fa1a2e5b3",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/binlog/AddPartitionRecord.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/41501d9a131e2ab0245642544d5450eb023a0885/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fbinlog%2FAddPartitionRecord.java",
      "raw_url": "https://github.com/apache/doris/raw/41501d9a131e2ab0245642544d5450eb023a0885/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fbinlog%2FAddPartitionRecord.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fbinlog%2FAddPartitionRecord.java?ref=41501d9a131e2ab0245642544d5450eb023a0885",
      "patch": "@@ -79,7 +79,7 @@ public AddPartitionRecord(long commitSeq, PartitionPersistInfo partitionPersistI\n         sb.append(\"` \");\n \n         // See fe/fe-core/src/main/java/org/apache/doris/datasource/InternalCatalog.java:addPartition for details.\n-        if (!this.range.equals(RangePartitionItem.DUMMY_ITEM)) {\n+        if (!this.range.equals(RangePartitionItem.DUMMY_RANGE)) {\n             // range\n             sb.append(\"VALUES [\");\n             sb.append(range.lowerEndpoint().toSql());",
      "parent_sha": "0ccfa58d2f8a85733464d497a0de833603d5ed90"
    }
  },
  {
    "oid": "ba5aa3112dd08077089bb15fc24e569b7b47b4ce",
    "message": "[Fix](JobManager)Release the lock immediately after modifying job metadata to avoid holding the lock for an extended period. (#38162)\n\n## Proposed changes\r\n\r\nWhen deleting a job in MV, a DB lock is held. However, due to the larger\r\nlock granularity of the Job Manager, this may prevent obtaining the\r\nlock. This issue arises because during the creation of a job,\r\nimmediately scheduled tasks need to perform their initial scheduling and\r\ncompensate for tasks within the time window. To alleviate this issue, we\r\nare attempting to reduce the lock granularity.\r\n<!--Describe your changes.-->",
    "date": "2024-07-23T04:05:14Z",
    "url": "https://github.com/apache/doris/commit/ba5aa3112dd08077089bb15fc24e569b7b47b4ce",
    "details": {
      "sha": "39646bab18f7850505441c839de29b05fdacccc0",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/job/manager/JobManager.java",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/apache/doris/blob/ba5aa3112dd08077089bb15fc24e569b7b47b4ce/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fjob%2Fmanager%2FJobManager.java",
      "raw_url": "https://github.com/apache/doris/raw/ba5aa3112dd08077089bb15fc24e569b7b47b4ce/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fjob%2Fmanager%2FJobManager.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fjob%2Fmanager%2FJobManager.java?ref=ba5aa3112dd08077089bb15fc24e569b7b47b4ce",
      "patch": "@@ -111,12 +111,19 @@ public void registerJob(T job) throws JobException {\n                 throw new JobException(\"job id exist, jobId:\" + job.getJobId());\n             }\n             jobMap.put(job.getJobId(), job);\n-            //check its need to scheduler\n-            jobScheduler.scheduleOneJob(job);\n             job.logCreateOperation();\n         } finally {\n             writeUnlock();\n         }\n+        try {\n+            //check its need to scheduler\n+            jobScheduler.scheduleOneJob(job);\n+        } catch (Exception e) {\n+            // if scheduler job error, we need to unregister job\n+            log.warn((\"first schedule job error,unregister job, jobName:\" + job.getJobName()), e);\n+            unregisterJob(job.getJobId());\n+            throw new JobException(\"register job error, jobName:\" + job.getJobName());\n+        }\n     }\n \n     private void checkJobNameExist(String jobName) throws JobException {",
      "parent_sha": "78de4ad0c8025109e26faf5bf87e49f8ebcf16a7"
    }
  },
  {
    "oid": "83cd4f0bf3fd5e838dcd5f9d2604a802c6c0e461",
    "message": "[chore](memo) record every group expression est. rows (#36879)",
    "date": "2024-06-27T09:10:36Z",
    "url": "https://github.com/apache/doris/commit/83cd4f0bf3fd5e838dcd5f9d2604a802c6c0e461",
    "details": {
      "sha": "5dc38a9cc57e612e56d72aa1562e2f24a13215ab",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/nereids/stats/StatsCalculator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/83cd4f0bf3fd5e838dcd5f9d2604a802c6c0e461/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Fstats%2FStatsCalculator.java",
      "raw_url": "https://github.com/apache/doris/raw/83cd4f0bf3fd5e838dcd5f9d2604a802c6c0e461/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Fstats%2FStatsCalculator.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fnereids%2Fstats%2FStatsCalculator.java?ref=83cd4f0bf3fd5e838dcd5f9d2604a802c6c0e461",
      "patch": "@@ -243,7 +243,6 @@ private void estimate() {\n                     .noneMatch(e -> newStats.isInputSlotsUnknown(e.getInputSlots()));\n             groupExpression.getOwnerGroup().setStatsReliable(isReliable);\n             groupExpression.getOwnerGroup().setStatistics(newStats);\n-            groupExpression.setEstOutputRowCount(newStats.getRowCount());\n         } else {\n             // the reason why we update col stats here.\n             // consider join between 3 tables: A/B/C with join condition: A.id=B.id=C.id and a filter: C.id=1\n@@ -258,6 +257,7 @@ private void estimate() {\n             // now we update OwnerGroup().getStatistics().A.id.ndv to 1\n             groupExpression.getOwnerGroup().getStatistics().updateNdv(newStats);\n         }\n+        groupExpression.setEstOutputRowCount(newStats.getRowCount());\n         groupExpression.setStatDerived(true);\n     }\n ",
      "parent_sha": "7fc2931cdb65d2ee5620ecc4f6f5242e4ae8cd84"
    }
  },
  {
    "oid": "932297fdc38c8bd6481a78a01d2f50af37754884",
    "message": "[Improvement](top-n) adjust the strategy for selecting the sort algorithm (#39780)",
    "date": "2024-08-23T06:32:23Z",
    "url": "https://github.com/apache/doris/commit/932297fdc38c8bd6481a78a01d2f50af37754884",
    "details": {
      "sha": "9ec0067f79e6f35ddc9980b0d73043d0567a88bd",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/planner/SortNode.java",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/apache/doris/blob/932297fdc38c8bd6481a78a01d2f50af37754884/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fplanner%2FSortNode.java",
      "raw_url": "https://github.com/apache/doris/raw/932297fdc38c8bd6481a78a01d2f50af37754884/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fplanner%2FSortNode.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fplanner%2FSortNode.java?ref=932297fdc38c8bd6481a78a01d2f50af37754884",
      "patch": "@@ -340,8 +340,6 @@ protected void toThrift(TPlanNode msg) {\n         msg.sort_node.setIsAnalyticSort(isAnalyticSort);\n         msg.sort_node.setIsColocate(isColocate);\n \n-        boolean isFixedLength = info.getOrderingExprs().stream()\n-                .allMatch(e -> !e.getType().isStringType() && !e.getType().isCollectionType());\n         ConnectContext connectContext = ConnectContext.get();\n         TSortAlgorithm algorithm;\n         if (connectContext != null && !connectContext.getSessionVariable().forceSortAlgorithm.isEmpty()) {\n@@ -354,12 +352,18 @@ protected void toThrift(TPlanNode msg) {\n                 algorithm = TSortAlgorithm.FULL_SORT;\n             }\n         } else {\n-            if (limit > 0 && limit + offset < 1024 && (useTwoPhaseReadOpt || hasRuntimePredicate || isFixedLength)) {\n+            if (limit <= 0) {\n+                algorithm = TSortAlgorithm.FULL_SORT;\n+            } else if (hasRuntimePredicate || useTwoPhaseReadOpt) {\n                 algorithm = TSortAlgorithm.HEAP_SORT;\n-            } else if (limit > 0 && !isFixedLength && limit + offset < 256) {\n-                algorithm = TSortAlgorithm.TOPN_SORT;\n             } else {\n-                algorithm = TSortAlgorithm.FULL_SORT;\n+                if (limit + offset < 5000000) {\n+                    algorithm = TSortAlgorithm.HEAP_SORT;\n+                } else if (limit + offset < 20000000) {\n+                    algorithm = TSortAlgorithm.FULL_SORT;\n+                } else {\n+                    algorithm = TSortAlgorithm.TOPN_SORT;\n+                }\n             }\n         }\n         msg.sort_node.setAlgorithm(algorithm);",
      "parent_sha": "e2a976119110d0192a4829fc95b07f0845b8e9ff"
    }
  },
  {
    "oid": "6934534155411fdc54d9690d41cdacc1bd0d293e",
    "message": "[fix](demo) scala.Function1 used in java about compiling error:apply$mcVJ$sp(long)\n\nFix MyForeachPartitionFunction.java:xxx:xxx\r\njava: org.apache.doris.demo.spark.demo.hdfs.MyForeachPartitionFunction is not abstract and does not override abstract method apply$mcVJ$sp(long) in scala.Function1",
    "date": "2022-02-12T07:59:41Z",
    "url": "https://github.com/apache/doris/commit/6934534155411fdc54d9690d41cdacc1bd0d293e",
    "details": {
      "sha": "8947a32615951fd6f653db96a37674e34b4c2fb5",
      "filename": "samples/doris-demo/spark-demo/src/main/java/org/apache/doris/demo/spark/demo/hdfs/MyForeachPartitionFunction.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apache/doris/blob/6934534155411fdc54d9690d41cdacc1bd0d293e/samples%2Fdoris-demo%2Fspark-demo%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdemo%2Fspark%2Fdemo%2Fhdfs%2FMyForeachPartitionFunction.java",
      "raw_url": "https://github.com/apache/doris/raw/6934534155411fdc54d9690d41cdacc1bd0d293e/samples%2Fdoris-demo%2Fspark-demo%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdemo%2Fspark%2Fdemo%2Fhdfs%2FMyForeachPartitionFunction.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/samples%2Fdoris-demo%2Fspark-demo%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdemo%2Fspark%2Fdemo%2Fhdfs%2FMyForeachPartitionFunction.java?ref=6934534155411fdc54d9690d41cdacc1bd0d293e",
      "patch": "@@ -22,7 +22,7 @@\n import lombok.extern.slf4j.Slf4j;\n import org.apache.doris.demo.spark.util.DorisStreamLoad;\n import org.apache.doris.demo.spark.vo.TestVo;\n-import scala.Function1;\n+import scala.runtime.AbstractFunction1;\n import scala.collection.AbstractIterator;\n \n import java.io.Serializable;\n@@ -32,7 +32,7 @@\n \n \n @Slf4j\n-public class MyForeachPartitionFunction implements Function1, Serializable {\n+public class MyForeachPartitionFunction extends AbstractFunction1 implements Serializable {\n     DorisStreamLoad dorisStreamLoad;\n \n     public MyForeachPartitionFunction(Map<String, Object> parameters) {\n@@ -68,4 +68,4 @@ public Function1 andThen(Function1 g) {\n     public Function1 compose(Function1 g) {\n         return null;\n     }\n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "ee26cd2d078c782ac2d7a086d81bbe3c2e3ab1f1"
    }
  },
  {
    "oid": "b68001aee54528b02a93cb4a735f2d62b96f3b04",
    "message": "[fix](priv) fix duplicated priv check when check column priv (#17446)\n\nwhen executing select stmt, columns privilege check will be invoked multiple times(column number in select stmt)\r\n\r\nIssue Number: close #xxx",
    "date": "2023-03-07T00:51:55Z",
    "url": "https://github.com/apache/doris/commit/b68001aee54528b02a93cb4a735f2d62b96f3b04",
    "details": {
      "sha": "2e588ea792ce15c5a2cc58a0902de4abbcfef686",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/mysql/privilege/AccessControllerManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/b68001aee54528b02a93cb4a735f2d62b96f3b04/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fmysql%2Fprivilege%2FAccessControllerManager.java",
      "raw_url": "https://github.com/apache/doris/raw/b68001aee54528b02a93cb4a735f2d62b96f3b04/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fmysql%2Fprivilege%2FAccessControllerManager.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fmysql%2Fprivilege%2FAccessControllerManager.java?ref=b68001aee54528b02a93cb4a735f2d62b96f3b04",
      "patch": "@@ -153,7 +153,7 @@ public void checkColumnsPriv(UserIdentity currentUser, String ctl, HashMultimap<\n             PrivPredicate wanted) throws UserException {\n         boolean hasGlobal = sysAccessController.checkGlobalPriv(currentUser, wanted);\n         CatalogAccessController accessController = getAccessControllerOrDefault(ctl);\n-        for (TableName tableName : tableToColsMap.keys()) {\n+        for (TableName tableName : tableToColsMap.keySet()) {\n             accessController.checkColsPriv(hasGlobal, currentUser, ctl, tableName.getDb(),\n                     tableName.getTbl(), tableToColsMap.get(tableName), wanted);\n         }",
      "parent_sha": "48c2d806d75f829dedbfccdec2e6f5a2d27b84f3"
    }
  },
  {
    "oid": "a47d15f5e6535fa640f7a6479d180ea3657299db",
    "message": "[fix](test) Fix cloud_p0/catalog_recycle_bin_p0/show.groovy failed (#31727)\n\n* In cloud mode, `getDbRunningTransInfo` is not suppoted now, we just\r\n  return a empty map instead of thrown exception",
    "date": "2024-03-04T12:47:24Z",
    "url": "https://github.com/apache/doris/commit/a47d15f5e6535fa640f7a6479d180ea3657299db",
    "details": {
      "sha": "29f8948bf19eb894e14365ebcc49f5a290163bd9",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/cloud/transaction/CloudGlobalTransactionMgr.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/a47d15f5e6535fa640f7a6479d180ea3657299db/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcloud%2Ftransaction%2FCloudGlobalTransactionMgr.java",
      "raw_url": "https://github.com/apache/doris/raw/a47d15f5e6535fa640f7a6479d180ea3657299db/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcloud%2Ftransaction%2FCloudGlobalTransactionMgr.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcloud%2Ftransaction%2FCloudGlobalTransactionMgr.java?ref=a47d15f5e6535fa640f7a6479d180ea3657299db",
      "patch": "@@ -1118,7 +1118,7 @@ public List<List<String>> getDbTransInfo(Long dbId, boolean running, int limit)\n \n     @Override\n     public Map<Long, List<Long>> getDbRunningTransInfo(long dbId) throws AnalysisException {\n-        throw new AnalysisException(NOT_SUPPORTED_MSG);\n+        return Maps.newHashMap();\n     }\n \n     @Override",
      "parent_sha": "08bc414a20daff9bf27f31eab70626914c0898d6"
    }
  },
  {
    "oid": "d482595773c1bbcb3c6d059a5843bfe1b0aebfee",
    "message": "[fix](webui) add connection context to avoid NPE (#49213)\n\n### What problem does this PR solve?\n\nProblem Summary:\n\nWhen execute statement using Playgroup in FE webui, the NPE may thrown.\nThis is because we didn't set connection context when executing sql in\nStatementSubmitter.\nThis PR fix it",
    "date": "2025-03-19T01:57:51Z",
    "url": "https://github.com/apache/doris/commit/d482595773c1bbcb3c6d059a5843bfe1b0aebfee",
    "details": {
      "sha": "60144df2c0eada50343db99be4528d25665bc62a",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/httpv2/util/StatementSubmitter.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/doris/blob/d482595773c1bbcb3c6d059a5843bfe1b0aebfee/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fhttpv2%2Futil%2FStatementSubmitter.java",
      "raw_url": "https://github.com/apache/doris/raw/d482595773c1bbcb3c6d059a5843bfe1b0aebfee/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fhttpv2%2Futil%2FStatementSubmitter.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fhttpv2%2Futil%2FStatementSubmitter.java?ref=d482595773c1bbcb3c6d059a5843bfe1b0aebfee",
      "patch": "@@ -31,7 +31,9 @@\n import org.apache.doris.common.util.SqlParserUtils;\n import org.apache.doris.httpv2.util.streamresponse.JsonStreamResponse;\n import org.apache.doris.httpv2.util.streamresponse.StreamResponseInf;\n+import org.apache.doris.qe.AutoCloseConnectContext;\n import org.apache.doris.qe.ConnectContext;\n+import org.apache.doris.statistics.util.StatisticsUtil;\n \n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n@@ -250,7 +252,7 @@ private ExecutionResultSet generateExecStatus(long startTime) {\n \n     public static StatementBase analyzeStmt(String stmtStr) throws Exception {\n         SqlParser parser = new SqlParser(new SqlScanner(new StringReader(stmtStr)));\n-        try {\n+        try (AutoCloseConnectContext a = StatisticsUtil.buildConnectContext(false)) {\n             return SqlParserUtils.getFirstStmt(parser);\n         } catch (AnalysisException e) {\n             String errorMessage = parser.getErrorMsg(stmtStr);",
      "parent_sha": "abf51d442c8f99bf40452bbf62dc5f358a8a53d7"
    }
  },
  {
    "oid": "0d729b1191657221cfc22f1c317d97277872c499",
    "message": "Filter empty strings of properties in file fe.conf (#1932)",
    "date": "2019-10-07T15:21:05Z",
    "url": "https://github.com/apache/doris/commit/0d729b1191657221cfc22f1c317d97277872c499",
    "details": {
      "sha": "06113c3bc735c2f1ce80f517c3d3b9fda89f0326",
      "filename": "fe/src/main/java/org/apache/doris/common/ConfigBase.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/0d729b1191657221cfc22f1c317d97277872c499/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcommon%2FConfigBase.java",
      "raw_url": "https://github.com/apache/doris/raw/0d729b1191657221cfc22f1c317d97277872c499/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcommon%2FConfigBase.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcommon%2FConfigBase.java?ref=0d729b1191657221cfc22f1c317d97277872c499",
      "patch": "@@ -125,7 +125,7 @@ private static void setFields() throws Exception {\n             // ensure that field has property string\n             String confKey = anno.value().equals(\"\") ? f.getName() : anno.value();\n             String confVal = props.getProperty(confKey);\n-            if (confVal == null) {\n+            if (Strings.isNullOrEmpty(confVal)) {\n                 continue;\n             }\n             ",
      "parent_sha": "0072712c807d8d47553b4a7b1195dc5808a78699"
    }
  },
  {
    "oid": "6a3385437b4658c1cd1bd1a8bac209ce58d2b159",
    "message": "[fix](comments) modify comments of setting global variables #12514\n\nCo-authored-by: wuhangze <wuhangze@jd.com>",
    "date": "2022-09-13T11:13:57Z",
    "url": "https://github.com/apache/doris/commit/6a3385437b4658c1cd1bd1a8bac209ce58d2b159",
    "details": {
      "sha": "d6c224e68c0db5d204d4777b6035b15b4d95b75a",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/qe/VariableMgr.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/apache/doris/blob/6a3385437b4658c1cd1bd1a8bac209ce58d2b159/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FVariableMgr.java",
      "raw_url": "https://github.com/apache/doris/raw/6a3385437b4658c1cd1bd1a8bac209ce58d2b159/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FVariableMgr.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FVariableMgr.java?ref=6a3385437b4658c1cd1bd1a8bac209ce58d2b159",
      "patch": "@@ -269,8 +269,7 @@ public static void setVar(SessionVariable sessionVariable, SetVar setVar) throws\n     }\n \n     private static void setGlobalVarAndWriteEditLog(VarContext ctx, String name, String value) throws DdlException {\n-        // set global variable should not affect variables of current session.\n-        // global variable will only make effect when connecting in.\n+        // global variable will make effect when is set immediately.\n         wlock.lock();\n         try {\n             setValue(ctx.getObj(), ctx.getField(), value);",
      "parent_sha": "9e49f68663c95776ef89da68a984932a91e335a5"
    }
  },
  {
    "oid": "e1a7773a03ec2070429085782f763d1c21e687f8",
    "message": "Fix bug that failed to choose dest replica for version incomplete repair (#996)\n\nWe should skip the replica which version is larger than visible version.",
    "date": "2019-04-23T01:18:50Z",
    "url": "https://github.com/apache/doris/commit/e1a7773a03ec2070429085782f763d1c21e687f8",
    "details": {
      "sha": "e5177e2bbc361ce6e1be0d041f291c4828b4cce2",
      "filename": "fe/src/main/java/org/apache/doris/clone/TabletSchedCtx.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/doris/blob/e1a7773a03ec2070429085782f763d1c21e687f8/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fclone%2FTabletSchedCtx.java",
      "raw_url": "https://github.com/apache/doris/raw/e1a7773a03ec2070429085782f763d1c21e687f8/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fclone%2FTabletSchedCtx.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fclone%2FTabletSchedCtx.java?ref=e1a7773a03ec2070429085782f763d1c21e687f8",
      "patch": "@@ -498,8 +498,8 @@ public void chooseDestReplicaForVersionIncomplete(Map<Long, PathSlot> backendsWo\n                 continue;\n             }\n \n-            if (replica.getLastFailedVersion() <= 0 && replica.getVersion() == visibleVersion\n-                    && replica.getVersionHash() == visibleVersionHash) {\n+            if (replica.getLastFailedVersion() <= 0 && ((replica.getVersion() == visibleVersion\n+                    && replica.getVersionHash() == visibleVersionHash) || replica.getVersion() > visibleVersion)) {\n                 // skip healthy replica\n                 continue;\n             }",
      "parent_sha": "84e3edebecfcca581499260f8d58a44e3727a431"
    }
  },
  {
    "oid": "3eca457edd00fab3b2b6cd878dd1769b9c3c25ea",
    "message": "[fix](statistics)Fix set partition loaded replayer try to write edit log bug (#29395)\n\nWhile observer or checkpointer replay SetPartitionLoaded log, it shouldn't try to write the log. This pr is to fix the bug.",
    "date": "2024-01-02T11:38:34Z",
    "url": "https://github.com/apache/doris/commit/3eca457edd00fab3b2b6cd878dd1769b9c3c25ea",
    "details": {
      "sha": "7c246b4587530020ba28b19669b038c22bee0289",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/statistics/AnalysisManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/3eca457edd00fab3b2b6cd878dd1769b9c3c25ea/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fstatistics%2FAnalysisManager.java",
      "raw_url": "https://github.com/apache/doris/raw/3eca457edd00fab3b2b6cd878dd1769b9c3c25ea/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fstatistics%2FAnalysisManager.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fstatistics%2FAnalysisManager.java?ref=3eca457edd00fab3b2b6cd878dd1769b9c3c25ea",
      "patch": "@@ -936,7 +936,7 @@ public void updateUpdatedRows(long tblId, long rows) {\n     // Set to true means new partition loaded data\n     public void setNewPartitionLoaded(long tblId) {\n         TableStatsMeta statsStatus = idToTblStats.get(tblId);\n-        if (statsStatus != null) {\n+        if (statsStatus != null && Env.getCurrentEnv().isMaster() && !Env.isCheckpointThread()) {\n             statsStatus.newPartitionLoaded.set(true);\n             logCreateTableStats(statsStatus);\n         }",
      "parent_sha": "04abcc12454f153b30a9711c01ed9713ba0e45cd"
    }
  },
  {
    "oid": "8cb48161e31247fa23d307e6dbf86f4a0cf18f3e",
    "message": "change to current catalog",
    "date": "2020-05-16T13:12:46Z",
    "url": "https://github.com/apache/doris/commit/8cb48161e31247fa23d307e6dbf86f4a0cf18f3e",
    "details": {
      "sha": "230790855df9ea15159d1fb4c90201049d8c829d",
      "filename": "fe/src/main/java/org/apache/doris/catalog/CatalogRecycleBin.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/8cb48161e31247fa23d307e6dbf86f4a0cf18f3e/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FCatalogRecycleBin.java",
      "raw_url": "https://github.com/apache/doris/raw/8cb48161e31247fa23d307e6dbf86f4a0cf18f3e/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FCatalogRecycleBin.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FCatalogRecycleBin.java?ref=8cb48161e31247fa23d307e6dbf86f4a0cf18f3e",
      "patch": "@@ -174,7 +174,7 @@ private synchronized void eraseDatabaseWithSameName(String dbName) {\n                 idToRecycleTime.remove(entry.getKey());\n \n                 // remove database transaction manager\n-                Catalog.getInstance().getGlobalTransactionMgr().removeDatabaseTransactionMgr(db.getId());\n+                Catalog.getCurrentCatalog().getGlobalTransactionMgr().removeDatabaseTransactionMgr(db.getId());\n \n                 LOG.info(\"erase database[{}] name: {}\", db.getId(), dbName);\n             }",
      "parent_sha": "c50b1a4d17a5528f54fb92b6bf6087b40672adcd"
    }
  },
  {
    "oid": "6492ee6b043908ce058e159017c980b8a4eaaa23",
    "message": "[enhance](Vault) Provide guidance log when user encounters no default vault situation. (#37677)\n\nProvide more detailed guidance log for user who might encounter no\r\ndefault vault situation.",
    "date": "2024-07-14T15:57:50Z",
    "url": "https://github.com/apache/doris/commit/6492ee6b043908ce058e159017c980b8a4eaaa23",
    "details": {
      "sha": "9812cf44a91286acdba4b9e47cd59bb99205f06f",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/datasource/InternalCatalog.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/apache/doris/blob/6492ee6b043908ce058e159017c980b8a4eaaa23/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2FInternalCatalog.java",
      "raw_url": "https://github.com/apache/doris/raw/6492ee6b043908ce058e159017c980b8a4eaaa23/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2FInternalCatalog.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2FInternalCatalog.java?ref=6492ee6b043908ce058e159017c980b8a4eaaa23",
      "patch": "@@ -2511,11 +2511,17 @@ private boolean createOlapTable(Database db, CreateTableStmt stmt) throws UserEx\n                 if (info != null) {\n                     storageVaultName = info.first;\n                     storageVaultId = info.second;\n+                } else {\n+                    throw new DdlException(\"No default storage vault.\"\n+                            + \" You can use `SHOW STORAGE VAULT` to get all available vaults,\"\n+                            + \" and pick one set default vault with `SET <vault_name> AS DEFAULT STORAGE VAULT`\");\n                 }\n             }\n \n             if (storageVaultName == null || storageVaultName.isEmpty()) {\n-                throw new DdlException(\"Invalid Storage Vault, please set one useful storage vault\");\n+                throw new DdlException(\"Invalid Storage Vault. \"\n+                        + \" You can use `SHOW STORAGE VAULT` to get all available vaults,\"\n+                        + \" and pick one to set the table property `\\\"storage_vault_name\\\" = \\\"<vault_name>\\\"`\");\n             }\n \n             // Check if user has storage vault usage privilege",
      "parent_sha": "cf3c3e2104a5a4bc8752f76001c6a22876fbd312"
    }
  },
  {
    "oid": "a2d660a86c26a839e95ff7d3d8c3a399755bea5c",
    "message": "[typo](doc) fix some typo (#19414)",
    "date": "2023-05-23T15:32:39Z",
    "url": "https://github.com/apache/doris/commit/a2d660a86c26a839e95ff7d3d8c3a399755bea5c",
    "details": {
      "sha": "fd6a223e9f337121d198eef09d17a290ff492da6",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/a2d660a86c26a839e95ff7d3d8c3a399755bea5c/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fload%2Froutineload%2FRoutineLoadManager.java",
      "raw_url": "https://github.com/apache/doris/raw/a2d660a86c26a839e95ff7d3d8c3a399755bea5c/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fload%2Froutineload%2FRoutineLoadManager.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fload%2Froutineload%2FRoutineLoadManager.java?ref=a2d660a86c26a839e95ff7d3d8c3a399755bea5c",
      "patch": "@@ -449,7 +449,7 @@ public long getAvailableBeForTask(long jobId, long previousBeId, String clusterN\n             }\n \n             // 2. The given BE id does not have available slots, find a BE with min tasks\n-            // 3. The previos BE is not in cluster && is not load available, find a new BE with min tasks\n+            // 3. The previous BE is not in cluster && is not load available, find a new BE with min tasks\n             int idleTaskNum = 0;\n             long resultBeId = -1L;\n             int maxIdleSlotNum = 0;",
      "parent_sha": "5247e2866f44a08fc7107d90dabf9eefb3d4b31f"
    }
  },
  {
    "oid": "e391fe1e704737df1a6165c9748e78a30e7b0036",
    "message": "[SQL] Ignore the null type when getCmpType (#2730)\n\nIn previous versions, if the children of the IN predicate included NULL, all child types would be converted to DOUBLE for calculation.\r\nFor example:\r\nselect * from t1 where k1 in ('TABLE', NULL);\r\nBut children like varchar cannot be converted to double, so the query cannot be executed.\r\nThe error is \"TABLE is not a number\"\r\n\r\nThe current version, if null exists in the child, it will not enter the calculation of compatibility type.\r\nFor the above query, the compatibility type is varchar, so the 'TABLE' is not converted to double, and the query could be executed.\r\n\r\nAlso, for JDBC. It will convert 'show tables;' to :\r\n```\r\nSELECT\r\nTABLE_SCHEMA AS TABLE_CAT, NULL AS TABLE_SCHEM, TABLE_NAME,\r\n CASE WHEN TABLE_TYPE='BASE TABLE'\r\n THEN CASE WHEN TABLE_SCHEMA = 'mysql' OR TABLE_SCHEMA = 'performance_schema'\r\n THEN 'SYSTEM TABLE' ELSE 'TABLE'END WHEN TABLE_TYPE='TEMPORARY'\r\n THEN 'LOCAL_TEMPORARY' ELSE TABLE_TYPE END AS TABLE_TYPE, TABLE_COMMENT AS REMARKS, NULL AS TYPE_CAT, NULL AS TYPE_SCHEM, NULL AS TYPE_NAME, NULL AS SELF_REFERENCING_COL_NAME, NULL AS REF_GENERATION\r\n FROM INFORMATION_SCHEMA.TABLES\r\n WHERE TABLE_SCHEMA LIKE 'test_db'\r\n AND TABLE_NAME LIKE '%'\r\n HAVING TABLE_TYPE IN ('TABLE','VIEW',null,null,null)\r\n ORDER BY TABLE_TYPE, TABLE_SCHEMA, TABLE_NAME\r\n```\r\nIn previous version, Doris could not return the correct tables to JDBC. It will thrown the error \"'TABLE' is not a number\".\r\nAfter this commit, #2729 is fixed. Doris could return the tables schema by JDBC.",
    "date": "2020-01-11T06:03:50Z",
    "url": "https://github.com/apache/doris/commit/e391fe1e704737df1a6165c9748e78a30e7b0036",
    "details": {
      "sha": "2f4fc53a2c0ff87e7aa6a77e50ac4adf1980a434",
      "filename": "fe/src/main/java/org/apache/doris/catalog/Type.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/apache/doris/blob/e391fe1e704737df1a6165c9748e78a30e7b0036/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FType.java",
      "raw_url": "https://github.com/apache/doris/raw/e391fe1e704737df1a6165c9748e78a30e7b0036/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FType.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FType.java?ref=e391fe1e704737df1a6165c9748e78a30e7b0036",
      "patch": "@@ -943,9 +943,15 @@ public Type getResultType() {\n     }\n \n     public static Type getCmpType(Type t1, Type t2) {\n+        if (t1.getPrimitiveType() == PrimitiveType.NULL_TYPE) {\n+            return t2;\n+        }\n+        if (t2.getPrimitiveType() == PrimitiveType.NULL_TYPE) {\n+            return t1;\n+        }\n+\n         PrimitiveType t1ResultType = t1.getResultType().getPrimitiveType();\n         PrimitiveType t2ResultType = t2.getResultType().getPrimitiveType();\n-\n         // Following logical is compatible with MySQL.\n         if ((t1ResultType == PrimitiveType.VARCHAR && t2ResultType == PrimitiveType.VARCHAR)) {\n             return Type.VARCHAR; ",
      "parent_sha": "ccaa97a5acc369f08b96f29dd9d85e3be6620032"
    }
  },
  {
    "oid": "d1187c186d2837579946f4cf4991a51fef539fb9",
    "message": "[fix](merge-cloud) fix mtmv data leak in cloud mode (#33619)",
    "date": "2024-04-14T01:40:15Z",
    "url": "https://github.com/apache/doris/commit/d1187c186d2837579946f4cf4991a51fef539fb9",
    "details": {
      "sha": "aa081ebd6e2932235d52d9bf95993462e0dbfaef",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/catalog/CatalogRecycleBin.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/d1187c186d2837579946f4cf4991a51fef539fb9/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FCatalogRecycleBin.java",
      "raw_url": "https://github.com/apache/doris/raw/d1187c186d2837579946f4cf4991a51fef539fb9/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FCatalogRecycleBin.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fcatalog%2FCatalogRecycleBin.java?ref=d1187c186d2837579946f4cf4991a51fef539fb9",
      "patch": "@@ -352,7 +352,7 @@ private synchronized void eraseTable(long currentTimeMs, int keepNum) {\n                 long tableId = table.getId();\n \n                 if (isExpire(tableId, currentTimeMs)) {\n-                    if (table.getType() == TableType.OLAP) {\n+                    if (table.getType() == TableType.OLAP || table.getType() == TableType.MATERIALIZED_VIEW) {\n                         Env.getCurrentEnv().onEraseOlapTable((OlapTable) table, false);\n                     }\n ",
      "parent_sha": "1562d0e644a13e50caae11b3d2f29cb169792da8"
    }
  },
  {
    "oid": "7d11db0807b639a614683de62c998f747145b7c6",
    "message": "[fix](Nereids) throw NPE when sql cannot be parsed by all planner (#20440)",
    "date": "2023-06-05T09:49:08Z",
    "url": "https://github.com/apache/doris/commit/7d11db0807b639a614683de62c998f747145b7c6",
    "details": {
      "sha": "779c8ab77275c255fa1a61dcb43d1fb4e879a564",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/qe/ConnectProcessor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/doris/blob/7d11db0807b639a614683de62c998f747145b7c6/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FConnectProcessor.java",
      "raw_url": "https://github.com/apache/doris/raw/7d11db0807b639a614683de62c998f747145b7c6/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FConnectProcessor.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fqe%2FConnectProcessor.java?ref=7d11db0807b639a614683de62c998f747145b7c6",
      "patch": "@@ -652,7 +652,7 @@ private void finalizeCommand() throws IOException {\n         // note(wb) we should write profile after return result to mysql client\n         // because write profile maybe take too much time\n         // explain query stmt do not have profile\n-        if (executor != null && !executor.getParsedStmt().isExplain()\n+        if (executor != null && executor.getParsedStmt() != null && !executor.getParsedStmt().isExplain()\n                 && (executor.getParsedStmt() instanceof QueryStmt // currently only QueryStmt and insert need profile\n                 || executor.getParsedStmt() instanceof LogicalPlanAdapter\n                 || executor.getParsedStmt() instanceof InsertStmt)) {",
      "parent_sha": "ae8914d5c80fbdb0156b58ba07607d7a2cdcc175"
    }
  },
  {
    "oid": "1eb0a7511c6b286f6dc74f32de29e73b3706d30f",
    "message": "[fix](npe) fix kafka be id npe (#33151)",
    "date": "2024-04-08T00:49:09Z",
    "url": "https://github.com/apache/doris/commit/1eb0a7511c6b286f6dc74f32de29e73b3706d30f",
    "details": {
      "sha": "12a32da5a9ce0599472f6b63cafda7705b9fcc35",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/datasource/kafka/KafkaUtil.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/apache/doris/blob/1eb0a7511c6b286f6dc74f32de29e73b3706d30f/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2Fkafka%2FKafkaUtil.java",
      "raw_url": "https://github.com/apache/doris/raw/1eb0a7511c6b286f6dc74f32de29e73b3706d30f/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2Fkafka%2FKafkaUtil.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fdatasource%2Fkafka%2FKafkaUtil.java?ref=1eb0a7511c6b286f6dc74f32de29e73b3706d30f",
      "patch": "@@ -47,13 +47,15 @@ public static List<Integer> getAllKafkaPartitions(String brokerList, String topi\n             Map<String, String> convertedCustomProperties) throws UserException {\n         TNetworkAddress address = null;\n         Backend be = null;\n+        long beId = -1L;\n         try {\n             List<Long> backendIds = Env.getCurrentSystemInfo().getAllBackendIds(true);\n             if (backendIds.isEmpty()) {\n                 throw new LoadException(\"Failed to get all partitions. No alive backends\");\n             }\n             Collections.shuffle(backendIds);\n-            be = Env.getCurrentSystemInfo().getBackend(backendIds.get(0));\n+            beId = backendIds.get(0);\n+            be = Env.getCurrentSystemInfo().getBackend(beId);\n             address = new TNetworkAddress(be.getHost(), be.getBrpcPort());\n \n             // create request\n@@ -79,9 +81,9 @@ public static List<Integer> getAllKafkaPartitions(String brokerList, String topi\n                 return result.getKafkaMetaResult().getPartitionIdsList();\n             }\n         } catch (Exception e) {\n-            LOG.warn(\"failed to get partitions from backend[{}].\", be.getId(), e);\n+            LOG.warn(\"failed to get partitions from backend[{}].\", beId, e);\n             throw new LoadException(\n-                    \"Failed to get all partitions of kafka topic: \" + topic + \" from backend[\" + be.getId()\n+                    \"Failed to get all partitions of kafka topic: \" + topic + \" from backend[\" + beId\n                         + \"]. error: \" + e.getMessage());\n         }\n     }",
      "parent_sha": "6dbf3494f88df30bafc0b46ef9590acc9481207f"
    }
  },
  {
    "oid": "bad087e7b2372a7f4b1cbf7dd5465f9d71a65641",
    "message": "[revert](cloud) revert support stream load cluster load balance (#34398)",
    "date": "2024-05-06T03:47:57Z",
    "url": "https://github.com/apache/doris/commit/bad087e7b2372a7f4b1cbf7dd5465f9d71a65641",
    "details": {
      "sha": "692f0cc8ad3d90ffb473c3f0d0df3244500371b9",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/httpv2/rest/LoadAction.java",
      "status": "modified",
      "additions": 2,
      "deletions": 25,
      "changes": 27,
      "blob_url": "https://github.com/apache/doris/blob/bad087e7b2372a7f4b1cbf7dd5465f9d71a65641/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fhttpv2%2Frest%2FLoadAction.java",
      "raw_url": "https://github.com/apache/doris/raw/bad087e7b2372a7f4b1cbf7dd5465f9d71a65641/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fhttpv2%2Frest%2FLoadAction.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Fhttpv2%2Frest%2FLoadAction.java?ref=bad087e7b2372a7f4b1cbf7dd5465f9d71a65641",
      "patch": "@@ -275,18 +275,7 @@ private Object executeWithoutPassword(HttpServletRequest request,\n                     return new RestBaseResult(e.getMessage());\n                 }\n             } else {\n-                if (Config.isCloudMode()) {\n-                    String cloudClusterName = getCloudClusterName(request);\n-                    if (Strings.isNullOrEmpty(cloudClusterName)) {\n-                        LOG.warn(\"cluster name is empty in stream load\");\n-                        return new RestBaseResult(\"No cloud cluster name selected.\");\n-                    }\n-                    String reqHostStr = request.getHeader(HttpHeaderNames.HOST.toString());\n-                    LOG.info(\"host header {}\", reqHostStr);\n-                    redirectAddr = selectCloudRedirectBackend(cloudClusterName, reqHostStr, groupCommit);\n-                } else {\n-                    redirectAddr = selectRedirectBackend(request, groupCommit);\n-                }\n+                redirectAddr = selectRedirectBackend(request, groupCommit);\n             }\n \n             LOG.info(\"redirect load action to destination={}, stream: {}, db: {}, tbl: {}, label: {}\",\n@@ -319,19 +308,7 @@ private Object executeStreamLoad2PC(HttpServletRequest request, String db) {\n                 return new RestBaseResult(\"No transaction operation(\\'commit\\' or \\'abort\\') selected.\");\n             }\n \n-            TNetworkAddress redirectAddr;\n-            if (Config.isCloudMode()) {\n-                String cloudClusterName = getCloudClusterName(request);\n-                if (Strings.isNullOrEmpty(cloudClusterName)) {\n-                    LOG.warn(\"cluster name is empty in stream load\");\n-                    return new RestBaseResult(\"No cloud cluster name selected.\");\n-                }\n-                String reqHostStr = request.getHeader(HttpHeaderNames.HOST.toString());\n-                LOG.info(\"host header {}\", reqHostStr);\n-                redirectAddr = selectCloudRedirectBackend(cloudClusterName, reqHostStr, false);\n-            } else {\n-                redirectAddr = selectRedirectBackend(request, false);\n-            }\n+            TNetworkAddress redirectAddr = selectRedirectBackend(request, false);\n             LOG.info(\"redirect stream load 2PC action to destination={}, db: {}, txn: {}, operation: {}\",\n                     redirectAddr.toString(), dbName, request.getHeader(TXN_ID_KEY), txnOperation);\n ",
      "parent_sha": "33ecc48b1b992c68dc37676811ca57483513914d"
    }
  },
  {
    "oid": "9cbc171c0a2758b120b9dfe9bfe4989551bd2a4d",
    "message": "[fix](transaction) Fix publish failed because this.subTxnIds is null (#35285)",
    "date": "2024-05-23T14:25:15Z",
    "url": "https://github.com/apache/doris/commit/9cbc171c0a2758b120b9dfe9bfe4989551bd2a4d",
    "details": {
      "sha": "f72a91c4edde94142ecd2556de2e6187d43479c4",
      "filename": "fe/fe-core/src/main/java/org/apache/doris/transaction/DatabaseTransactionMgr.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/apache/doris/blob/9cbc171c0a2758b120b9dfe9bfe4989551bd2a4d/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Ftransaction%2FDatabaseTransactionMgr.java",
      "raw_url": "https://github.com/apache/doris/raw/9cbc171c0a2758b120b9dfe9bfe4989551bd2a4d/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Ftransaction%2FDatabaseTransactionMgr.java",
      "contents_url": "https://api.github.com/repos/apache/doris/contents/fe%2Ffe-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdoris%2Ftransaction%2FDatabaseTransactionMgr.java?ref=9cbc171c0a2758b120b9dfe9bfe4989551bd2a4d",
      "patch": "@@ -1155,9 +1155,12 @@ public void finishTransaction(long transactionId, Map<Long, Long> partitionVisib\n     }\n \n     private void setTableVersion(TransactionState transactionState, Database db) {\n-        List<TableCommitInfo> tableCommitInfos = transactionState.getIdToTableCommitInfos().isEmpty()\n-                ? transactionState.getSubTxnTableCommitInfos()\n-                : Lists.newArrayList(transactionState.getIdToTableCommitInfos().values());\n+        List<TableCommitInfo> tableCommitInfos;\n+        if (!transactionState.getSubTxnIdToTableCommitInfo().isEmpty()) {\n+            tableCommitInfos = transactionState.getSubTxnTableCommitInfos();\n+        } else {\n+            tableCommitInfos = Lists.newArrayList(transactionState.getIdToTableCommitInfos().values());\n+        }\n         for (TableCommitInfo tableCommitInfo : tableCommitInfos) {\n             long tableId = tableCommitInfo.getTableId();\n             OlapTable table = (OlapTable) db.getTableNullable(tableId);",
      "parent_sha": "783445b18899996594412f4cfa5b568a54adf402"
    }
  }
]