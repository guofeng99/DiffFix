[
  {
    "oid": "c38fadcdec4414a345701ee900bbf2f5504ac8dd",
    "message": "fix cli output token can not return token",
    "date": "2023-11-10T13:47:39Z",
    "url": "https://github.com/keycloak/keycloak/commit/c38fadcdec4414a345701ee900bbf2f5504ac8dd",
    "details": {
      "sha": "f175f404b96fe7c0be4652f761dc8e5ba4590ebf",
      "filename": "integration/client-cli/admin-cli/src/main/java/org/keycloak/client/admin/cli/commands/AbstractRequestCmd.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/keycloak/keycloak/blob/c38fadcdec4414a345701ee900bbf2f5504ac8dd/integration%2Fclient-cli%2Fadmin-cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fclient%2Fadmin%2Fcli%2Fcommands%2FAbstractRequestCmd.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/c38fadcdec4414a345701ee900bbf2f5504ac8dd/integration%2Fclient-cli%2Fadmin-cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fclient%2Fadmin%2Fcli%2Fcommands%2FAbstractRequestCmd.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/integration%2Fclient-cli%2Fadmin-cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fclient%2Fadmin%2Fcli%2Fcommands%2FAbstractRequestCmd.java?ref=c38fadcdec4414a345701ee900bbf2f5504ac8dd",
      "patch": "@@ -385,8 +385,7 @@ public CommandResult process(CommandInvocation commandInvocation) throws Command\n         }\n \n         if (outputResult) {\n-\n-            if (isCreateOrUpdate() && (response.getStatusCode() == 204 || id != null)) {\n+            if (isCreateOrUpdate() && (response.getStatusCode() == 204 || id != null) && isGetByID(url)) {\n                 // get object for id\n                 headers = new Headers();\n                 if (auth != null) {\n@@ -447,4 +446,8 @@ private boolean isUpdate() {\n     private boolean isCreateOrUpdate() {\n         return \"post\".equals(httpVerb) || \"put\".equals(httpVerb);\n     }\n+\n+    private boolean isGetByID(String url) {\n+        return !\"clients-initial-access\".equals(url);\n+    }\n }",
      "parent_sha": "f557b2c88cc87f317e5ee86cd9daecfb1e9a44cd"
    }
  },
  {
    "oid": "8bd48391cacf12a882f74a5bd59da43a3613a1ee",
    "message": "KEYCLOAK-10313 Add PKCE support to KeycloakInstalled Adpater\n\nThis adds PKCE support for Desktop Apps as\na followup to KEYCLOAK-1033 #6047.",
    "date": "2019-07-03T06:49:55Z",
    "url": "https://github.com/keycloak/keycloak/commit/8bd48391cacf12a882f74a5bd59da43a3613a1ee",
    "details": {
      "sha": "e6e3f4ec72fb78a43ce0533632924e66a32130cc",
      "filename": "adapters/oidc/installed/src/main/java/org/keycloak/adapters/installed/KeycloakInstalled.java",
      "status": "modified",
      "additions": 81,
      "deletions": 21,
      "changes": 102,
      "blob_url": "https://github.com/keycloak/keycloak/blob/8bd48391cacf12a882f74a5bd59da43a3613a1ee/adapters%2Foidc%2Finstalled%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Finstalled%2FKeycloakInstalled.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/8bd48391cacf12a882f74a5bd59da43a3613a1ee/adapters%2Foidc%2Finstalled%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Finstalled%2FKeycloakInstalled.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/adapters%2Foidc%2Finstalled%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Finstalled%2FKeycloakInstalled.java?ref=8bd48391cacf12a882f74a5bd59da43a3613a1ee",
      "patch": "@@ -26,7 +26,9 @@\n import org.keycloak.adapters.ServerRequest;\n import org.keycloak.adapters.rotation.AdapterTokenVerifier;\n import org.keycloak.common.VerificationException;\n+import org.keycloak.common.util.Base64Url;\n import org.keycloak.common.util.KeycloakUriBuilder;\n+import org.keycloak.common.util.RandomString;\n import org.keycloak.representations.AccessToken;\n import org.keycloak.representations.AccessTokenResponse;\n import org.keycloak.representations.IDToken;\n@@ -41,6 +43,8 @@\n import java.net.Socket;\n import java.net.URI;\n import java.net.URISyntaxException;\n+import java.security.MessageDigest;\n+import java.security.SecureRandom;\n import java.util.Locale;\n import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n@@ -161,17 +165,9 @@ public void loginDesktop() throws IOException, VerificationException, OAuthError\n \n         String redirectUri = \"http://localhost:\" + callback.server.getLocalPort();\n         String state = UUID.randomUUID().toString();\n+        Pkce pkce = generatePkce();\n \n-        KeycloakUriBuilder builder = deployment.getAuthUrl().clone()\n-                .queryParam(OAuth2Constants.RESPONSE_TYPE, OAuth2Constants.CODE)\n-                .queryParam(OAuth2Constants.CLIENT_ID, deployment.getResourceName())\n-                .queryParam(OAuth2Constants.REDIRECT_URI, redirectUri)\n-                .queryParam(OAuth2Constants.STATE, state)\n-                .queryParam(OAuth2Constants.SCOPE, OAuth2Constants.SCOPE_OPENID);\n-        if (locale != null) {\n-            builder.queryParam(OAuth2Constants.UI_LOCALES_PARAM, locale.getLanguage());\n-        }\n-        String authUrl = builder.build().toString();\n+        String authUrl = createAuthUrl(redirectUri, state, pkce);\n \n         Desktop.getDesktop().browse(new URI(authUrl));\n \n@@ -189,11 +185,39 @@ public void loginDesktop() throws IOException, VerificationException, OAuthError\n             throw callback.errorException;\n         }\n \n-        processCode(callback.code, redirectUri);\n+        processCode(callback.code, redirectUri, pkce);\n \n         status = Status.LOGGED_DESKTOP;\n     }\n \n+    protected String createAuthUrl(String redirectUri, String state, Pkce pkce) {\n+\n+        KeycloakUriBuilder builder = deployment.getAuthUrl().clone()\n+                .queryParam(OAuth2Constants.RESPONSE_TYPE, OAuth2Constants.CODE)\n+                .queryParam(OAuth2Constants.CLIENT_ID, deployment.getResourceName())\n+                .queryParam(OAuth2Constants.REDIRECT_URI, redirectUri)\n+                .queryParam(OAuth2Constants.SCOPE, OAuth2Constants.SCOPE_OPENID);\n+\n+        if (state != null) {\n+            builder.queryParam(OAuth2Constants.STATE, state);\n+        }\n+\n+        if (locale != null) {\n+            builder.queryParam(OAuth2Constants.UI_LOCALES_PARAM, locale.getLanguage());\n+        }\n+\n+        if (pkce != null) {\n+            builder.queryParam(OAuth2Constants.CODE_CHALLENGE, pkce.getCodeChallenge());\n+            builder.queryParam(OAuth2Constants.CODE_CHALLENGE_METHOD, \"S256\");\n+        }\n+\n+        return builder.build().toString();\n+    }\n+\n+    protected Pkce generatePkce(){\n+        return Pkce.generatePkce();\n+    }\n+\n     private void logoutDesktop() throws IOException, URISyntaxException, InterruptedException {\n         CallbackListener callback = new CallbackListener(getLogoutResponseWriter());\n         callback.start();\n@@ -218,22 +242,20 @@ public void loginManual() throws IOException, ServerRequest.HttpFailure, Verific\n     }\n \n     public void loginManual(PrintStream printer, Reader reader) throws IOException, ServerRequest.HttpFailure, VerificationException {\n+\n         String redirectUri = \"urn:ietf:wg:oauth:2.0:oob\";\n \n-        String authUrl = deployment.getAuthUrl().clone()\n-                .queryParam(OAuth2Constants.RESPONSE_TYPE, OAuth2Constants.CODE)\n-                .queryParam(OAuth2Constants.CLIENT_ID, deployment.getResourceName())\n-                .queryParam(OAuth2Constants.REDIRECT_URI, redirectUri)\n-                .queryParam(OAuth2Constants.SCOPE, OAuth2Constants.SCOPE_OPENID)\n-                .build().toString();\n+        Pkce pkce = generatePkce();\n+\n+        String authUrl = createAuthUrl(redirectUri, null, pkce);\n \n         printer.println(\"Open the following URL in a browser. After login copy/paste the code back and press <enter>\");\n         printer.println(authUrl);\n         printer.println();\n         printer.print(\"Code: \");\n \n         String code = readCode(reader);\n-        processCode(code, redirectUri);\n+        processCode(code, redirectUri, pkce);\n \n         status = Status.LOGGED_MANUAL;\n     }\n@@ -467,7 +489,7 @@ public boolean loginCommandLine(String redirectUri) throws IOException, ServerRe\n                             response.close();\n                             client.close();\n                             String code = m.group(1);\n-                            processCode(code, redirectUri);\n+                            processCode(code, redirectUri, null);\n                             return true;\n                         }\n                         if (response.getStatus() == 302 && redirectCount++ > 4) {\n@@ -568,8 +590,9 @@ public KeycloakDeployment getDeployment() {\n     }\n \n \n-    private void processCode(String code, String redirectUri) throws IOException, ServerRequest.HttpFailure, VerificationException {\n-        AccessTokenResponse tokenResponse = ServerRequest.invokeAccessCodeToToken(deployment, code, redirectUri, null);\n+    private void processCode(String code, String redirectUri, Pkce pkce) throws IOException, ServerRequest.HttpFailure, VerificationException {\n+\n+        AccessTokenResponse tokenResponse = ServerRequest.invokeAccessCodeToToken(deployment, code, redirectUri, null, pkce == null ? null : pkce.getCodeVerifier());\n         parseAccessToken(tokenResponse);\n     }\n \n@@ -677,5 +700,42 @@ public void run() {\n \n     }\n \n+    public static class Pkce {\n+\n+        // https://tools.ietf.org/html/rfc7636#section-4.1\n+        public static final int PKCE_CODE_VERIFIER_MAX_LENGTH = 128;\n+\n+        private final String codeChallenge;\n+        private final String codeVerifier;\n \n+        public Pkce(String codeVerifier, String codeChallenge) {\n+            this.codeChallenge = codeChallenge;\n+            this.codeVerifier = codeVerifier;\n+        }\n+\n+        public String getCodeChallenge() {\n+            return codeChallenge;\n+        }\n+\n+        public String getCodeVerifier() {\n+            return codeVerifier;\n+        }\n+\n+        public static Pkce generatePkce() {\n+            try {\n+                String codeVerifier = new RandomString(PKCE_CODE_VERIFIER_MAX_LENGTH, new SecureRandom()).nextString();\n+                String codeChallenge = generateS256CodeChallenge(codeVerifier);\n+                return new Pkce(codeVerifier, codeChallenge);\n+            } catch (Exception ex){\n+                throw new RuntimeException(\"Could not generate PKCE\", ex);\n+            }\n+        }\n+\n+        // https://tools.ietf.org/html/rfc7636#section-4.6\n+        private static String generateS256CodeChallenge(String codeVerifier) throws Exception {\n+            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+            md.update(codeVerifier.getBytes(\"ISO_8859_1\"));\n+            return Base64Url.encode(md.digest());\n+        }\n+    }\n }",
      "parent_sha": "b32d52e62b0d4946bcc6f5b690504d4f5671a16c"
    }
  },
  {
    "oid": "57c74e3f39ae15f021db1a675e312913c52fc656",
    "message": "[KEYCLOAK-4341] - Resources are not properly exported when exporting authorization settings",
    "date": "2017-01-31T15:10:25Z",
    "url": "https://github.com/keycloak/keycloak/commit/57c74e3f39ae15f021db1a675e312913c52fc656",
    "details": {
      "sha": "403551fc3b48ed98cb92c60d5fe9672504ae61b6",
      "filename": "services/src/main/java/org/keycloak/exportimport/util/ExportUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/57c74e3f39ae15f021db1a675e312913c52fc656/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fexportimport%2Futil%2FExportUtils.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/57c74e3f39ae15f021db1a675e312913c52fc656/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fexportimport%2Futil%2FExportUtils.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fexportimport%2Futil%2FExportUtils.java?ref=57c74e3f39ae15f021db1a675e312913c52fc656",
      "patch": "@@ -371,7 +371,7 @@ private static PolicyRepresentation createPolicyRepresentation(AuthorizationProv\n             Set<Resource> policyResources = policy.getResources();\n \n             if (!policyResources.isEmpty()) {\n-                List<String> resourceNames = scopes.stream().map(Scope::getName).collect(Collectors.toList());\n+                List<String> resourceNames = policyResources.stream().map(Resource::getName).collect(Collectors.toList());\n                 config.put(\"resources\", JsonSerialization.writeValueAsString(resourceNames));\n             }\n ",
      "parent_sha": "2990703aebe713e90c88dd925ec2deb0c77d4fe0"
    }
  },
  {
    "oid": "adf5da0b2c98dc3aade5d547795f8c075ce74661",
    "message": "KEYCLOAK-5190",
    "date": "2017-08-07T16:02:37Z",
    "url": "https://github.com/keycloak/keycloak/commit/adf5da0b2c98dc3aade5d547795f8c075ce74661",
    "details": {
      "sha": "5e9a47322b5537dca1beecefc700eaf1a1f658ed",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/FineGrainAdminUnitTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/adf5da0b2c98dc3aade5d547795f8c075ce74661/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadmin%2FFineGrainAdminUnitTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/adf5da0b2c98dc3aade5d547795f8c075ce74661/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadmin%2FFineGrainAdminUnitTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadmin%2FFineGrainAdminUnitTest.java?ref=adf5da0b2c98dc3aade5d547795f8c075ce74661",
      "patch": "@@ -378,7 +378,7 @@ protected boolean isImportAfterEachMethod() {\n         return true;\n     }\n     \n-    @Test\n+    //@Test\n     public void testDemo() throws Exception {\n         testingClient.server().run(FineGrainAdminUnitTest::setupDemo);\n         Thread.sleep(1000000000);",
      "parent_sha": "c9b7504e3f78c3ba1969d0793c1cc13714c22a4c"
    }
  },
  {
    "oid": "c42b8f81e395a001d9b433e27936a5a711257b01",
    "message": "KEYCLOAK-3074 Change the TestingResourceProvider to always both firstResults and maxResults in JPA criteria query",
    "date": "2016-06-03T08:31:32Z",
    "url": "https://github.com/keycloak/keycloak/commit/c42b8f81e395a001d9b433e27936a5a711257b01",
    "details": {
      "sha": "4bdf05f4654d724c8b3b8d4b4bfeea9fa1491682",
      "filename": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/keycloak/keycloak/blob/c42b8f81e395a001d9b433e27936a5a711257b01/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fservices%2Ftestsuite-providers%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Frest%2FTestingResourceProvider.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/c42b8f81e395a001d9b433e27936a5a711257b01/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fservices%2Ftestsuite-providers%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Frest%2FTestingResourceProvider.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Fservers%2Fauth-server%2Fservices%2Ftestsuite-providers%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Frest%2FTestingResourceProvider.java?ref=c42b8f81e395a001d9b433e27936a5a711257b01",
      "patch": "@@ -447,10 +447,14 @@ public List<AdminEventRepresentation> getAdminEvents(@QueryParam(\"realmId\") Stri\n             query.toTime(to);\n         }\n \n-        if (firstResult != null) {\n+        if (firstResult != null || maxResults != null) {\n+            if (firstResult == null) {\n+                firstResult = 0;\n+            }\n+            if (maxResults == null) {\n+                maxResults = 100;\n+            }\n             query.firstResult(firstResult);\n-        }\n-        if (maxResults != null) {\n             query.maxResults(maxResults);\n         }\n ",
      "parent_sha": "13bf36ce496c88874a8b33316b3950589b74b8d8"
    }
  },
  {
    "oid": "b82b0000bc48ec2bfc404bad4cfab118a50583cd",
    "message": "fixes port not recognized when setting hostname and port without proxy\n\nCloses #10627\n\nCloses #10331",
    "date": "2022-03-16T15:03:19Z",
    "url": "https://github.com/keycloak/keycloak/commit/b82b0000bc48ec2bfc404bad4cfab118a50583cd",
    "details": {
      "sha": "1515f68ae738f085dca8eccff696e88394a3f651",
      "filename": "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/hostname/DefaultHostnameProvider.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/b82b0000bc48ec2bfc404bad4cfab118a50583cd/quarkus%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fquarkus%2Fruntime%2Fhostname%2FDefaultHostnameProvider.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/b82b0000bc48ec2bfc404bad4cfab118a50583cd/quarkus%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fquarkus%2Fruntime%2Fhostname%2FDefaultHostnameProvider.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/quarkus%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fquarkus%2Fruntime%2Fhostname%2FDefaultHostnameProvider.java?ref=b82b0000bc48ec2bfc404bad4cfab118a50583cd",
      "patch": "@@ -209,7 +209,7 @@ public void init(Config.Scope config) {\n         }\n \n         defaultPath = config.get(\"path\");\n-        noProxy = Configuration.getConfigValue(\"kc.proxy\").getValue().equals(\"none\");\n+        noProxy = Configuration.getConfigValue(\"kc.proxy\").getValue().equals(\"false\");\n         defaultTlsPort = Integer.parseInt(Configuration.getConfigValue(\"kc.https-port\").getValue());\n         adminHostName = config.get(\"admin\");\n         strictBackChannel = config.getBoolean(\"strict-backchannel\", false);",
      "parent_sha": "53bbf307b39df41b4348440026bdebfd4ac3ccaa"
    }
  },
  {
    "oid": "267f1797d4777e8ea9f3fe27a46629cad0884611",
    "message": "KEYCLOAK-15735 Fix LDAPSamlIdPInitiatedVaryingLetterCaseTest failures on few DBs",
    "date": "2020-10-23T13:15:03Z",
    "url": "https://github.com/keycloak/keycloak/commit/267f1797d4777e8ea9f3fe27a46629cad0884611",
    "details": {
      "sha": "434914e6de710f589bbc8b8784bf79573f19412e",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/ldap/LDAPSamlIdPInitiatedVaryingLetterCaseTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/keycloak/keycloak/blob/267f1797d4777e8ea9f3fe27a46629cad0884611/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Ffederation%2Fldap%2FLDAPSamlIdPInitiatedVaryingLetterCaseTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/267f1797d4777e8ea9f3fe27a46629cad0884611/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Ffederation%2Fldap%2FLDAPSamlIdPInitiatedVaryingLetterCaseTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Ffederation%2Fldap%2FLDAPSamlIdPInitiatedVaryingLetterCaseTest.java?ref=267f1797d4777e8ea9f3fe27a46629cad0884611",
      "patch": "@@ -29,6 +29,7 @@\n import org.keycloak.models.IdentityProviderMapperModel;\n import org.keycloak.models.RealmModel;\n import org.keycloak.protocol.oidc.OIDCLoginProtocol;\n+import org.keycloak.protocol.saml.SamlConfigAttributes;\n import org.keycloak.protocol.saml.SamlProtocol;\n import org.keycloak.representations.idm.AuthenticationExecutionInfoRepresentation;\n import org.keycloak.representations.idm.AuthenticationFlowRepresentation;\n@@ -188,7 +189,7 @@ public void setupClients() {\n           .clientId(EXT_SSO_URL)\n           .baseUrl(EXT_SSO_URL)\n           .attribute(SamlProtocol.SAML_IDP_INITIATED_SSO_URL_NAME, EXT_SSO)\n-          .attribute(SamlProtocol.SAML_NAME_ID_FORMAT, JBossSAMLURIConstants.NAMEID_FORMAT_PERSISTENT.get())\n+          .attribute(SamlConfigAttributes.SAML_NAME_ID_FORMAT_ATTRIBUTE, JBossSAMLURIConstants.NAMEID_FORMAT_PERSISTENT.get())\n           .attribute(SamlProtocol.SAML_ASSERTION_CONSUMER_URL_POST_ATTRIBUTE, DUMMY_URL)\n           .build())\n         );",
      "parent_sha": "e80538c60c9b292dd7693a8319f44f7f0b0febe9"
    }
  },
  {
    "oid": "faf398e3c30d4e055e208fe96e07bc58bb229ad5",
    "message": "Add openapi annotations to the UserProfileResource\nCloses https://github.com/keycloak/keycloak/issues/9318",
    "date": "2023-10-25T14:44:24Z",
    "url": "https://github.com/keycloak/keycloak/commit/faf398e3c30d4e055e208fe96e07bc58bb229ad5",
    "details": {
      "sha": "3af39cbdf9cfc849b291d3dcf07643c7a7c2d6fb",
      "filename": "services/src/main/java/org/keycloak/services/resources/admin/UserProfileResource.java",
      "status": "modified",
      "additions": 15,
      "deletions": 6,
      "changes": 21,
      "blob_url": "https://github.com/keycloak/keycloak/blob/faf398e3c30d4e055e208fe96e07bc58bb229ad5/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2Fadmin%2FUserProfileResource.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/faf398e3c30d4e055e208fe96e07bc58bb229ad5/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2Fadmin%2FUserProfileResource.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2Fadmin%2FUserProfileResource.java?ref=faf398e3c30d4e055e208fe96e07bc58bb229ad5",
      "patch": "@@ -24,17 +24,22 @@\n import java.util.function.Function;\n import java.util.stream.Collectors;\n \n-import jakarta.ws.rs.Path;\n-import org.eclipse.microprofile.openapi.annotations.Operation;\n import jakarta.ws.rs.Consumes;\n import jakarta.ws.rs.GET;\n import jakarta.ws.rs.PUT;\n+import jakarta.ws.rs.Path;\n import jakarta.ws.rs.Produces;\n import jakarta.ws.rs.core.MediaType;\n import jakarta.ws.rs.core.Response;\n \n+import org.eclipse.microprofile.openapi.annotations.Operation;\n import org.eclipse.microprofile.openapi.annotations.extensions.Extension;\n+import org.eclipse.microprofile.openapi.annotations.media.Content;\n+import org.eclipse.microprofile.openapi.annotations.media.Schema;\n+import org.eclipse.microprofile.openapi.annotations.parameters.RequestBody;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;\n import org.eclipse.microprofile.openapi.annotations.tags.Tag;\n+\n import org.keycloak.component.ComponentValidationException;\n import org.keycloak.models.KeycloakSession;\n import org.keycloak.models.RealmModel;\n@@ -75,7 +80,8 @@ public UserProfileResource(KeycloakSession session, AdminPermissionEvaluator aut\n     @GET\n     @Produces(MediaType.APPLICATION_JSON)\n     @Tag(name = KeycloakOpenAPI.Admin.Tags.USERS)\n-    @Operation()\n+    @Operation(description = \"Get the configuration for the user profile\")\n+    @APIResponse(responseCode = \"200\", content = @Content(schema = @Schema(implementation = UPConfig.class)))\n     public String getConfiguration() {\n         auth.requireAnyAdminRole();\n         return session.getProvider(UserProfileProvider.class).getConfiguration();\n@@ -85,7 +91,7 @@ public String getConfiguration() {\n     @Path(\"/metadata\")\n     @Produces(MediaType.APPLICATION_JSON)\n     @Tag(name = KeycloakOpenAPI.Admin.Tags.USERS)\n-    @Operation()\n+    @Operation(description = \"Get the UserProfileMetadata from the configuration\")\n     public UserProfileMetadata getMetadata() {\n         auth.requireAnyAdminRole();\n         UserProfile profile = session.getProvider(UserProfileProvider.class).create(UserProfileContext.USER_API, Collections.emptyMap());\n@@ -94,9 +100,12 @@ public UserProfileMetadata getMetadata() {\n \n     @PUT\n     @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(MediaType.APPLICATION_JSON)\n     @Tag(name = KeycloakOpenAPI.Admin.Tags.USERS)\n-    @Operation()\n-    public Response update(String text) {\n+    @Operation(description = \"Set the configuration for the user profile\")\n+    @APIResponse(responseCode = \"200\", content = @Content(schema = @Schema(implementation = UPConfig.class)))\n+    public Response update(\n+            @RequestBody(content = @Content(schema = @Schema(implementation = UPConfig.class))) String text) {\n         auth.realm().requireManageRealm();\n         UserProfileProvider t = session.getProvider(UserProfileProvider.class);\n ",
      "parent_sha": "d56baa80b3779aea8e28707907a6ed252d71487a"
    }
  },
  {
    "oid": "94ec4d51b5a26585766c0c33ae8d8407f1b42803",
    "message": "Push an empty image for testing docker protocol instead of one from docker.io (#36915)\n\nCloses #36865\r\n\r\nSigned-off-by: rmartinc <rmartinc@redhat.com>",
    "date": "2025-01-29T11:01:29Z",
    "url": "https://github.com/keycloak/keycloak/commit/94ec4d51b5a26585766c0c33ae8d8407f1b42803",
    "details": {
      "sha": "4b01cb252a5afcc89fb22f96fd63921a04595ad8",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/docker/DockerClientTest.java",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/keycloak/keycloak/blob/94ec4d51b5a26585766c0c33ae8d8407f1b42803/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fdocker%2FDockerClientTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/94ec4d51b5a26585766c0c33ae8d8407f1b42803/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fdocker%2FDockerClientTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fdocker%2FDockerClientTest.java?ref=94ec4d51b5a26585766c0c33ae8d8407f1b42803",
      "patch": "@@ -147,15 +147,18 @@ public void shouldPerformDockerAuthAgainstRegistry() throws Exception {\n         printCommandResult(result);\n         assertThat(\"Error performing login\", result.getExitCode(), is(0));\n \n-        result = dockerClientContainer.execInContainer(\"docker\", \"pull\", \"docker.io/hello-world:latest\");\n+        // create a empty Dockerfile in /tmp\n+        result = dockerClientContainer.execInContainer(\"sh\", \"-c\", \"echo -e \\\"FROM scratch\\\\nWORKDIR /\\\" > /tmp/Dockerfile\");\n         printCommandResult(result);\n-        assertThat(\"Error pulling from docker.io\", result.getExitCode(), is(0));\n+        assertThat(\"Error creating dockerfile for empty image\", result.getExitCode(), is(0));\n \n-        result = dockerClientContainer.execInContainer(\"docker\", \"tag\", \"hello-world:latest\", REGISTRY_HOSTNAME + \":\" + REGISTRY_PORT + \"/hello-world:latest\");\n+        // build the empty image\n+        result = dockerClientContainer.execInContainer(\"docker\", \"build\", \"--tag\", REGISTRY_HOSTNAME + \":\" + REGISTRY_PORT + \"/empty\", \"/tmp\");\n         printCommandResult(result);\n-        assertThat(\"Error tagging the image\", result.getExitCode(), is(0));\n+        assertThat(\"Error building empty image\", result.getExitCode(), is(0));\n \n-        result = dockerClientContainer.execInContainer(\"docker\", \"push\", REGISTRY_HOSTNAME + \":\" + REGISTRY_PORT + \"/hello-world:latest\");\n+        // push the image\n+        result = dockerClientContainer.execInContainer(\"docker\", \"push\", REGISTRY_HOSTNAME + \":\" + REGISTRY_PORT + \"/empty\");\n         printCommandResult(result);\n         assertThat(\"Error pushing to registry\", result.getExitCode(), is(0));\n     }",
      "parent_sha": "8a2fd359fb5b8b8a5d9786a3bb91efaa7a49a34f"
    }
  },
  {
    "oid": "dd93de75d9bba1f23a565c5c21ce55dc7b2957e7",
    "message": "[KEYCLOAK-7579] - Fixing test to use client scopes instead of old scope param required (#5259)",
    "date": "2018-06-12T18:44:03Z",
    "url": "https://github.com/keycloak/keycloak/commit/dd93de75d9bba1f23a565c5c21ce55dc7b2957e7",
    "details": {
      "sha": "755575e8e7915bb0411e15b2ce8e67f4867ccba2",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/example/authorization/AbstractPhotozExampleAdapterTest.java",
      "status": "modified",
      "additions": 62,
      "deletions": 10,
      "changes": 72,
      "blob_url": "https://github.com/keycloak/keycloak/blob/dd93de75d9bba1f23a565c5c21ce55dc7b2957e7/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadapter%2Fexample%2Fauthorization%2FAbstractPhotozExampleAdapterTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/dd93de75d9bba1f23a565c5c21ce55dc7b2957e7/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadapter%2Fexample%2Fauthorization%2FAbstractPhotozExampleAdapterTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadapter%2Fexample%2Fauthorization%2FAbstractPhotozExampleAdapterTest.java?ref=dd93de75d9bba1f23a565c5c21ce55dc7b2957e7",
      "patch": "@@ -25,17 +25,27 @@\n import org.jboss.arquillian.graphene.page.Page;\n import org.jboss.arquillian.test.api.ArquillianResource;\n import org.junit.After;\n+import org.junit.Assert;\n import org.junit.Before;\n import org.junit.BeforeClass;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.keycloak.admin.client.resource.AuthorizationResource;\n import org.keycloak.admin.client.resource.ClientResource;\n+import org.keycloak.admin.client.resource.ClientScopesResource;\n import org.keycloak.admin.client.resource.ClientsResource;\n+import org.keycloak.admin.client.resource.ProtocolMappersResource;\n+import org.keycloak.admin.client.resource.RealmResource;\n+import org.keycloak.admin.client.resource.RealmsResource;\n import org.keycloak.admin.client.resource.ResourcesResource;\n import org.keycloak.admin.client.resource.RoleResource;\n import org.keycloak.admin.client.resource.UserResource;\n import org.keycloak.admin.client.resource.UsersResource;\n+import org.keycloak.protocol.ProtocolMapperUtils;\n+import org.keycloak.protocol.oidc.mappers.UserClientRoleMappingMapper;\n import org.keycloak.representations.idm.ClientRepresentation;\n+import org.keycloak.representations.idm.ClientScopeRepresentation;\n+import org.keycloak.representations.idm.ProtocolMapperRepresentation;\n import org.keycloak.representations.idm.RealmRepresentation;\n import org.keycloak.representations.idm.RoleRepresentation;\n import org.keycloak.representations.idm.UserRepresentation;\n@@ -45,6 +55,7 @@\n import org.keycloak.testsuite.ProfileAssume;\n import org.keycloak.testsuite.adapter.AbstractExampleAdapterTest;\n import org.keycloak.testsuite.adapter.page.PhotozClientAuthzTestApp;\n+import org.keycloak.testsuite.admin.ApiUtil;\n import org.keycloak.testsuite.auth.page.login.OIDCLogin;\n import org.keycloak.testsuite.util.ContainerAssume;\n import org.keycloak.testsuite.util.DroneUtils;\n@@ -58,6 +69,7 @@\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -76,6 +88,8 @@\n import static org.keycloak.testsuite.util.WaitUtils.waitForPageToLoad;\n import static org.keycloak.testsuite.util.WaitUtils.waitUntilElement;\n \n+import javax.ws.rs.core.Response;\n+\n /**\n  * @author <a href=\"mailto:psilva@redhat.com\">Pedro Igor</a>\n  */\n@@ -359,7 +373,8 @@ public void testClientRoleRepresentingUserConsent() throws Exception {\n         clientPage.createAlbum(\"Alice Family Album\");\n         clientPage.viewAlbum(\"Alice Family Album\", false);\n \n-        UsersResource usersResource = realmsResouce().realm(REALM_NAME).users();\n+        RealmResource realmResource = realmsResouce().realm(REALM_NAME);\n+        UsersResource usersResource = realmResource.users();\n         List<UserRepresentation> users = usersResource.search(\"alice\", null, null, null, null, null);\n \n         assertFalse(users.isEmpty());\n@@ -368,19 +383,16 @@ public void testClientRoleRepresentingUserConsent() throws Exception {\n         UserResource userResource = usersResource.get(userRepresentation.getId());\n \n         ClientResource html5ClientApp = getClientResource(\"photoz-html5-client\");\n+        ClientRepresentation clientRepresentation = html5ClientApp.toRepresentation();\n \n-        userResource.revokeConsent(html5ClientApp.toRepresentation().getClientId());\n-\n-        ClientResource resourceServerClient = getClientResource(RESOURCE_SERVER_ID);\n-        RoleResource roleResource = resourceServerClient.roles().get(\"manage-albums\");\n-        RoleRepresentation roleRepresentation = roleResource.toRepresentation();\n+        userResource.revokeConsent(clientRepresentation.getClientId());\n \n-        roleResource.update(roleRepresentation);\n+        setManageAlbumScopeRequired();\n \n         loginToClientPage(\"alice\", \"alice\");\n         clientPage.viewAlbum(\"Alice Family Album\", true);\n \n-        loginToClientPage(\"alice\", \"alice\", RESOURCE_SERVER_ID + \"/manage-albums\");\n+        loginToClientPage(\"alice\", \"alice\", \"manage-albums\");\n         clientPage.viewAlbum(\"Alice Family Album\", false);\n     }\n \n@@ -407,6 +419,8 @@ public void testClientRoleNotRequired() throws Exception {\n         RoleResource manageAlbumRole = resourceServerClient.roles().get(\"manage-albums\");\n         RoleRepresentation roleRepresentation = manageAlbumRole.toRepresentation();\n \n+        setManageAlbumScopeRequired();\n+\n         manageAlbumRole.update(roleRepresentation);\n \n         loginToClientPage(\"alice\", \"alice\");\n@@ -579,8 +593,9 @@ public void testInheritPermissionFromResourceParent() throws Exception {\n             }\n         });\n     }\n-    \n+\n     //KEYCLOAK-3777\n+\n     @Test\n     public void testEntitlementRequest() throws Exception {\n         ContainerAssume.assumeNotAuthServerUndertow();\n@@ -596,7 +611,6 @@ public void testEntitlementRequest() throws Exception {\n         assertTrue(pageSource.contains(\"album:view\"));\n         assertTrue(pageSource.contains(\"album:delete\"));\n     }\n-\n     @Test\n     public void testResourceProtectedWithAnyScope() throws Exception {\n         loginToClientPage(\"alice\", \"alice\");\n@@ -736,4 +750,42 @@ private void loginToClientPage(String username, String password, String... scope\n         clientPage.login(username, password, scopes);\n         waitUntilElement(By.linkText(\"Sign Out\")).is().clickable();\n     }\n+\n+    private void setManageAlbumScopeRequired() {\n+        ClientScopeRepresentation clientScope = new ClientScopeRepresentation();\n+\n+        clientScope.setName(\"manage-albums\");\n+        clientScope.setProtocol(\"openid-connect\");\n+\n+        ProtocolMapperRepresentation mapper = new ProtocolMapperRepresentation();\n+\n+        mapper.setName(\"manage-albums\");\n+        mapper.setProtocol(\"openid-connect\");\n+        mapper.setProtocolMapper(UserClientRoleMappingMapper.PROVIDER_ID);\n+\n+        Map<String, String> config = new HashMap<>();\n+        config.put(\"access.token.claim\", \"true\");\n+        config.put(\"id.token.claim\", \"true\");\n+        config.put(\"userinfo.token.claim\", \"true\");\n+        config.put(ProtocolMapperUtils.USER_MODEL_CLIENT_ROLE_MAPPING_CLIENT_ID, \"photoz-restful-api\");\n+\n+        mapper.setConfig(config);\n+\n+        clientScope.setProtocolMappers(Arrays.asList(mapper));\n+\n+        RealmResource realmResource = realmsResouce().realm(REALM_NAME);\n+        ClientScopesResource clientScopes = realmResource.clientScopes();\n+        Response resp = clientScopes.create(clientScope);\n+        Assert.assertEquals(201, resp.getStatus());\n+        resp.close();\n+        String clientScopeId = ApiUtil.getCreatedId(resp);\n+        ClientResource resourceServer = getClientResource(RESOURCE_SERVER_ID);\n+        clientScopes.get(clientScopeId).getScopeMappings().clientLevel(resourceServer.toRepresentation().getId()).add(Arrays.asList(resourceServer.roles().get(\"manage-albums\").toRepresentation()));\n+        ClientResource html5ClientApp = getClientResource(\"photoz-html5-client\");\n+        html5ClientApp.addOptionalClientScope(clientScopeId);\n+        html5ClientApp.getScopeMappings().realmLevel().add(Arrays.asList(realmResource.roles().get(\"user\").toRepresentation(), realmResource.roles().get(\"admin\").toRepresentation()));\n+        ClientRepresentation clientRep = html5ClientApp.toRepresentation();\n+        clientRep.setFullScopeAllowed(false);\n+        html5ClientApp.update(clientRep);\n+    }\n }",
      "parent_sha": "d8971595608f57a022e0496df3a2289c54468d8b"
    }
  },
  {
    "oid": "586b743b31adb63315cc25c97780391e682bfa87",
    "message": "Cookies Tests - KcOidcBrokerPrivateKeyJwtCustomAudienceTest\n\nCloses #34832\n\nSigned-off-by: Martin Kanis <mkanis@redhat.com>",
    "date": "2024-11-14T12:32:43Z",
    "url": "https://github.com/keycloak/keycloak/commit/586b743b31adb63315cc25c97780391e682bfa87",
    "details": {
      "sha": "1e6b83d15dfc0eefbea97004f0a8ebf21ab10944",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcOidcBrokerPrivateKeyJwtCustomAudienceTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/keycloak/keycloak/blob/586b743b31adb63315cc25c97780391e682bfa87/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fbroker%2FKcOidcBrokerPrivateKeyJwtCustomAudienceTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/586b743b31adb63315cc25c97780391e682bfa87/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fbroker%2FKcOidcBrokerPrivateKeyJwtCustomAudienceTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fbroker%2FKcOidcBrokerPrivateKeyJwtCustomAudienceTest.java?ref=586b743b31adb63315cc25c97780391e682bfa87",
      "patch": "@@ -32,6 +32,7 @@\n import static org.keycloak.testsuite.broker.BrokerTestConstants.IDP_OIDC_ALIAS;\n import static org.keycloak.testsuite.broker.BrokerTestConstants.IDP_OIDC_PROVIDER_ID;\n import static org.keycloak.testsuite.broker.BrokerTestTools.createIdentityProvider;\n+import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_HOST2;\n \n public class KcOidcBrokerPrivateKeyJwtCustomAudienceTest extends AbstractBrokerTest {\n \n@@ -64,10 +65,10 @@ public IdentityProviderRepresentation setUpIdentityProvider(IdentityProviderSync\n             applyDefaultConfiguration(config, syncMode);\n             config.put(\"clientSecret\", null);\n             config.put(\"clientAuthMethod\", OIDCLoginProtocol.PRIVATE_KEY_JWT);\n-            config.put(\"clientAssertionAudience\", \"https://localhost:8543/auth/realms/provider\");\n+            config.put(\"clientAssertionAudience\", \"https://\" + AUTH_SERVER_HOST2 + \":8543/auth/realms/provider\");\n             return idp;\n         }\n \n     }\n \n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "ebd411b93d03f3f77faff0b923689d8307acc2db"
    }
  },
  {
    "oid": "70a3dd1e4adcf04288e50c45d235e5f49e41b89f",
    "message": "[KEYCLOAK-4769] - Better error message when resource has no or invalid uri",
    "date": "2017-04-20T16:21:01Z",
    "url": "https://github.com/keycloak/keycloak/commit/70a3dd1e4adcf04288e50c45d235e5f49e41b89f",
    "details": {
      "sha": "679a33c8675463322e6b547a32a215dd02d49fdf",
      "filename": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PolicyEnforcer.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/keycloak/keycloak/blob/70a3dd1e4adcf04288e50c45d235e5f49e41b89f/adapters%2Foidc%2Fadapter-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Fauthorization%2FPolicyEnforcer.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/70a3dd1e4adcf04288e50c45d235e5f49e41b89f/adapters%2Foidc%2Fadapter-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Fauthorization%2FPolicyEnforcer.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/adapters%2Foidc%2Fadapter-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Fauthorization%2FPolicyEnforcer.java?ref=70a3dd1e4adcf04288e50c45d235e5f49e41b89f",
      "patch": "@@ -220,7 +220,14 @@ static PathConfig createPathConfig(ResourceRepresentation resourceDescription) {\n \n         pathConfig.setId(resourceDescription.getId());\n         pathConfig.setName(resourceDescription.getName());\n-        pathConfig.setPath(resourceDescription.getUri());\n+\n+        String uri = resourceDescription.getUri();\n+\n+        if (uri == null || \"\".equals(uri.trim())) {\n+            throw new RuntimeException(\"Failed to configure paths. Resource [\" + resourceDescription.getName() + \"] has an invalid or empty URI [\" + uri + \"].\");\n+        }\n+\n+        pathConfig.setPath(uri);\n \n         List<String> scopeNames = new ArrayList<>();\n ",
      "parent_sha": "80a80512ea2d55d98116f118f571f9e407227c12"
    }
  },
  {
    "oid": "e58eeca80066d225e390c4237c6b83636648325e",
    "message": "KEYCLOAK-18706 Add UPDATE_PASSWORD required action only to authenticationSession when MSAD requires user to change password",
    "date": "2021-07-28T06:47:01Z",
    "url": "https://github.com/keycloak/keycloak/commit/e58eeca80066d225e390c4237c6b83636648325e",
    "details": {
      "sha": "6c1c9de4c70d16a2dd2e487440331f8b7bb8edc6",
      "filename": "federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/msad/MSADUserAccountControlStorageMapper.java",
      "status": "modified",
      "additions": 36,
      "deletions": 9,
      "changes": 45,
      "blob_url": "https://github.com/keycloak/keycloak/blob/e58eeca80066d225e390c4237c6b83636648325e/federation%2Fldap%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2Fldap%2Fmappers%2Fmsad%2FMSADUserAccountControlStorageMapper.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/e58eeca80066d225e390c4237c6b83636648325e/federation%2Fldap%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2Fldap%2Fmappers%2Fmsad%2FMSADUserAccountControlStorageMapper.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/federation%2Fldap%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2Fldap%2Fmappers%2Fmsad%2FMSADUserAccountControlStorageMapper.java?ref=e58eeca80066d225e390c4237c6b83636648325e",
      "patch": "@@ -24,6 +24,7 @@\n import org.keycloak.models.RealmModel;\n import org.keycloak.models.UserCredentialModel;\n import org.keycloak.models.UserModel;\n+import org.keycloak.sessions.AuthenticationSessionModel;\n import org.keycloak.storage.UserStorageProvider;\n import org.keycloak.storage.ldap.LDAPStorageProvider;\n import org.keycloak.storage.ldap.idm.model.LDAPObject;\n@@ -85,7 +86,8 @@ public LDAPOperationDecorator beforePasswordUpdate(UserModel user, LDAPObject ld\n \n     @Override\n     public void passwordUpdated(UserModel user, LDAPObject ldapUser, UserCredentialModel password) {\n-        logger.debugf(\"Going to update userAccountControl for ldap user '%s' after successful password update\", ldapUser.getDn().toString());\n+        logger.debugf(\"Going to update userAccountControl for ldap user '%s' after successful password update. Keycloak user '%s' in realm '%s'\", ldapUser.getDn().toString(),\n+                user.getUsername(), getRealmName());\n \n         // Normally it's read-only\n         ldapUser.removeReadOnlyAttributeName(LDAPConstants.PWD_LAST_SET);\n@@ -136,13 +138,28 @@ public boolean onAuthenticationFailure(LDAPObject ldapUser, UserModel user, Auth\n     }\n \n     protected boolean processAuthErrorCode(String errorCode, UserModel user) {\n-        logger.debugf(\"MSAD Error code is '%s' after failed LDAP login of user '%s'\", errorCode, user.getUsername());\n+        logger.debugf(\"MSAD Error code is '%s' after failed LDAP login of user '%s'. Realm is '%s'\", errorCode, user.getUsername(), getRealmName());\n \n         if (ldapProvider.getEditMode() == UserStorageProvider.EditMode.WRITABLE) {\n             if (errorCode.equals(\"532\") || errorCode.equals(\"773\")) {\n-                // User needs to change his MSAD password. Allow him to login, but add UPDATE_PASSWORD required action\n+                // User needs to change his MSAD password. Allow him to login, but add UPDATE_PASSWORD required action to authenticationSession\n                 if (user.getRequiredActionsStream().noneMatch(action -> Objects.equals(action, UserModel.RequiredAction.UPDATE_PASSWORD.name()))) {\n-                    user.addRequiredAction(UserModel.RequiredAction.UPDATE_PASSWORD);\n+                    // This usually happens when 532 was returned, which means that \"pwdLastSet\" is set to some positive value, which is older than MSAD password expiration policy.\n+                    AuthenticationSessionModel authSession = session.getContext().getAuthenticationSession();\n+                    if (authSession != null) {\n+                        if (authSession.getRequiredActions().stream().noneMatch(action -> Objects.equals(action, UserModel.RequiredAction.UPDATE_PASSWORD.name()))) {\n+                            logger.debugf(\"Adding requiredAction UPDATE_PASSWORD to the authenticationSession of user %s\", user.getUsername());\n+                            authSession.addRequiredAction(UserModel.RequiredAction.UPDATE_PASSWORD);\n+                        }\n+                    } else {\n+                        // Just a fallback. It should not happen during normal authentication process\n+                        logger.debugf(\"Adding requiredAction UPDATE_PASSWORD to the user %s\", user.getUsername());\n+                        user.addRequiredAction(UserModel.RequiredAction.UPDATE_PASSWORD);\n+                    }\n+                } else {\n+                    // This usually happens when \"773\" error code is returned by MSAD. This typically happens when \"pwdLastSet\" is set to 0 and password was manually set\n+                    // by administrator (or user) to expire\n+                    logger.tracef(\"Skip adding required action UPDATE_PASSWORD. It was already set on user '%s' in realm '%s'\", user.getUsername(), getRealmName());\n                 }\n                 return true;\n             } else if (errorCode.equals(\"533\")) {\n@@ -152,7 +169,7 @@ protected boolean processAuthErrorCode(String errorCode, UserModel user) {\n                 }\n                 return true;\n             } else if (errorCode.equals(\"775\")) {\n-                logger.warnf(\"Locked user '%s' attempt to login\", user.getUsername());\n+                logger.warnf(\"Locked user '%s' attempt to login. Realm is '%s'\", user.getUsername(), getRealmName());\n             }\n         }\n \n@@ -193,7 +210,7 @@ protected UserAccountControl getUserAccountControl(LDAPObject ldapUser) {\n     // Update user in LDAP if \"updateInLDAP\" is true. Otherwise it is assumed that LDAP update will be called at the end of transaction\n     protected void updateUserAccountControl(boolean updateInLDAP, LDAPObject ldapUser, UserAccountControl accountControl) {\n         String userAccountControlValue = String.valueOf(accountControl.getValue());\n-        logger.debugf(\"Updating userAccountControl of user '%s' to value '%s'\", ldapUser.getDn().toString(), userAccountControlValue);\n+        logger.debugf(\"Updating userAccountControl of user '%s' to value '%s'. Realm is '%s'\", ldapUser.getDn().toString(), userAccountControlValue, getRealmName());\n \n         ldapUser.setSingleAttribute(LDAPConstants.USER_ACCOUNT_CONTROL, userAccountControlValue);\n \n@@ -202,6 +219,10 @@ protected void updateUserAccountControl(boolean updateInLDAP, LDAPObject ldapUse\n         }\n     }\n \n+    private String getRealmName() {\n+        RealmModel realm = session.getContext().getRealm();\n+        return (realm != null) ? realm.getName() : \"null\";\n+    }\n \n \n     public class MSADUserModelDelegate extends TxAwareLDAPUserModelDelegate {\n@@ -232,7 +253,7 @@ public void setEnabled(boolean enabled) {\n             super.setEnabled(enabled);\n \n             if (ldapProvider.getEditMode() == UserStorageProvider.EditMode.WRITABLE && getPwdLastSet() > 0) {\n-                logger.debugf(\"Going to propagate enabled=%s for ldapUser '%s' to MSAD\", enabled, ldapUser.getDn().toString());\n+                MSADUserAccountControlStorageMapper.logger.debugf(\"Going to propagate enabled=%s for ldapUser '%s' to MSAD\", enabled, ldapUser.getDn().toString());\n \n                 UserAccountControl control = getUserAccountControl(ldapUser);\n                 if (enabled) {\n@@ -259,7 +280,8 @@ public void addRequiredAction(String action) {\n             super.addRequiredAction(action);\n \n             if (ldapProvider.getEditMode() == UserStorageProvider.EditMode.WRITABLE && RequiredAction.UPDATE_PASSWORD.toString().equals(action)) {\n-                logger.debugf(\"Going to propagate required action UPDATE_PASSWORD to MSAD for ldap user '%s' \", ldapUser.getDn().toString());\n+                MSADUserAccountControlStorageMapper.logger.debugf(\"Going to propagate required action UPDATE_PASSWORD to MSAD for ldap user '%s'. Keycloak user '%s' in realm '%s'\",\n+                        ldapUser.getDn().toString(), getUsername(), getRealmName());\n \n                 // Normally it's read-only\n                 ldapUser.removeReadOnlyAttributeName(LDAPConstants.PWD_LAST_SET);\n@@ -286,14 +308,18 @@ public void removeRequiredAction(String action) {\n                 // Don't set pwdLastSet in MSAD when it is new user\n                 UserAccountControl accountControl = getUserAccountControl(ldapUser);\n                 if (accountControl.getValue() != 0 && !accountControl.has(UserAccountControl.PASSWD_NOTREQD)) {\n-                    logger.debugf(\"Going to remove required action UPDATE_PASSWORD from MSAD for ldap user '%s' \", ldapUser.getDn().toString());\n+                    MSADUserAccountControlStorageMapper.logger.debugf(\"Going to remove required action UPDATE_PASSWORD from MSAD for ldap user '%s'. Account control: %s, Keycloak user '%s' in realm '%s'\",\n+                            ldapUser.getDn().toString(), accountControl.getValue(), getUsername(), getRealmName());\n \n                     // Normally it's read-only\n                     ldapUser.removeReadOnlyAttributeName(LDAPConstants.PWD_LAST_SET);\n \n                     ldapUser.setSingleAttribute(LDAPConstants.PWD_LAST_SET, \"-1\");\n \n                     markUpdatedRequiredActionInTransaction(action);\n+                } else {\n+                    MSADUserAccountControlStorageMapper.logger.tracef(\"It was not required action to remove UPDATE_PASSWORD from MSAD for ldap user '%s' as it was not set on the user. Account control: %s, Keycloak user '%s' in realm '%s'\",\n+                            ldapUser.getDn().toString(), accountControl.getValue(), getUsername(), getRealmName());\n                 }\n             }\n         }\n@@ -302,6 +328,7 @@ public void removeRequiredAction(String action) {\n         public Stream<String> getRequiredActionsStream() {\n             if (ldapProvider.getEditMode() == UserStorageProvider.EditMode.WRITABLE) {\n                 if (getPwdLastSet() == 0 || getUserAccountControl(ldapUser).has(UserAccountControl.PASSWORD_EXPIRED)) {\n+                    MSADUserAccountControlStorageMapper.logger.tracef(\"Required action UPDATE_PASSWORD is set in LDAP for user '%s' in realm '%s'\", getUsername(), getRealmName());\n                     return Stream.concat(super.getRequiredActionsStream(), Stream.of(RequiredAction.UPDATE_PASSWORD.toString()))\n                             .distinct();\n                 }",
      "parent_sha": "ef72343a6a806eebb8c6beba187f2f69b17d4490"
    }
  },
  {
    "oid": "e390cffa634f4ffeb237ac8ae8b5d22f0e32b021",
    "message": "KEYCLOAK-3779\nClientRegistrationPoliciesTest failing on Travis",
    "date": "2016-10-21T06:11:11Z",
    "url": "https://github.com/keycloak/keycloak/commit/e390cffa634f4ffeb237ac8ae8b5d22f0e32b021",
    "details": {
      "sha": "a48158c8043730cdb61fb3901c15988ee29506af",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientRegistrationPoliciesTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/keycloak/keycloak/blob/e390cffa634f4ffeb237ac8ae8b5d22f0e32b021/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fclient%2FClientRegistrationPoliciesTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/e390cffa634f4ffeb237ac8ae8b5d22f0e32b021/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fclient%2FClientRegistrationPoliciesTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fclient%2FClientRegistrationPoliciesTest.java?ref=e390cffa634f4ffeb237ac8ae8b5d22f0e32b021",
      "patch": "@@ -60,6 +60,8 @@\n import org.keycloak.testsuite.admin.ApiUtil;\n import org.keycloak.util.JsonSerialization;\n \n+import javax.ws.rs.core.Response;\n+\n import static org.junit.Assert.assertTrue;\n \n /**\n@@ -288,7 +290,7 @@ public void testClientDisabledPolicy() throws Exception {\n         rep.setProviderId(ClientDisabledClientRegistrationPolicyFactory.PROVIDER_ID);\n         rep.setProviderType(ClientRegistrationPolicy.class.getName());\n         rep.setSubType(getPolicyAnon());\n-        realmResource().components().add(rep);\n+        realmResource().components().add(rep).close();\n \n         // Assert new client is disabled\n         client = create();",
      "parent_sha": "c615674cbb9541da8cdf7ae284785063283475b8"
    }
  },
  {
    "oid": "f62c5ea1d61e5343dc2cb2749bb5e4b9a075ac5b",
    "message": "Fix usage typo of config truststore command of admin-cli (#16488)\n\nThe option to save the truststore password in config truststore command\r\nof admin-cli is -trustpass, not -storepass.",
    "date": "2023-07-06T22:01:56Z",
    "url": "https://github.com/keycloak/keycloak/commit/f62c5ea1d61e5343dc2cb2749bb5e4b9a075ac5b",
    "details": {
      "sha": "36dde42defcf5d86dd9df1e196c64428b7b331be",
      "filename": "integration/client-cli/admin-cli/src/main/java/org/keycloak/client/admin/cli/commands/ConfigTruststoreCmd.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/f62c5ea1d61e5343dc2cb2749bb5e4b9a075ac5b/integration%2Fclient-cli%2Fadmin-cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fclient%2Fadmin%2Fcli%2Fcommands%2FConfigTruststoreCmd.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/f62c5ea1d61e5343dc2cb2749bb5e4b9a075ac5b/integration%2Fclient-cli%2Fadmin-cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fclient%2Fadmin%2Fcli%2Fcommands%2FConfigTruststoreCmd.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/integration%2Fclient-cli%2Fadmin-cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fclient%2Fadmin%2Fcli%2Fcommands%2FConfigTruststoreCmd.java?ref=f62c5ea1d61e5343dc2cb2749bb5e4b9a075ac5b",
      "patch": "@@ -189,7 +189,7 @@ public static String usage() {\n         out.println(\"  \" + PROMPT + \" \" + CMD + \" config truststore \" + OS_ARCH.path(\"~/.keycloak/truststore.jks\"));\n         out.println();\n         out.println(\"Specify a truststore, and password - truststore will automatically be used without prompting for password:\");\n-        out.println(\"  \" + PROMPT + \" \" + CMD + \" config truststore --storepass \" + OS_ARCH.envVar(\"PASSWORD\") + \" \" + OS_ARCH.path(\"~/.keycloak/truststore.jks\"));\n+        out.println(\"  \" + PROMPT + \" \" + CMD + \" config truststore --trustpass \" + OS_ARCH.envVar(\"PASSWORD\") + \" \" + OS_ARCH.path(\"~/.keycloak/truststore.jks\"));\n         out.println();\n         out.println(\"Remove truststore configuration:\");\n         out.println(\"  \" + PROMPT + \" \" + CMD + \" config truststore --delete\");",
      "parent_sha": "19a74ec3d34c04207b65cec59e90b9ec8cff30b3"
    }
  },
  {
    "oid": "375dce14e6acb21b7632cf8e4e801ccc9154bef4",
    "message": "KEYCLOAK-1745 Keycloak fails to start on Wildfly 10.0.0.Alpha6",
    "date": "2015-08-07T12:56:14Z",
    "url": "https://github.com/keycloak/keycloak/commit/375dce14e6acb21b7632cf8e4e801ccc9154bef4",
    "details": {
      "sha": "6098df1ac955ab2d1e6ae55a07313b791112ac99",
      "filename": "model/jpa/src/main/java/org/keycloak/models/jpa/entities/ProtocolMapperEntity.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/keycloak/keycloak/blob/375dce14e6acb21b7632cf8e4e801ccc9154bef4/model%2Fjpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fjpa%2Fentities%2FProtocolMapperEntity.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/375dce14e6acb21b7632cf8e4e801ccc9154bef4/model%2Fjpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fjpa%2Fentities%2FProtocolMapperEntity.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Fjpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fjpa%2Fentities%2FProtocolMapperEntity.java?ref=375dce14e6acb21b7632cf8e4e801ccc9154bef4",
      "patch": "@@ -37,8 +37,8 @@ public class ProtocolMapperEntity {\n     protected String consentText;\n \n     @ElementCollection\n-    @MapKeyColumn(name=\"name\")\n-    @Column(name=\"value\")\n+    @MapKeyColumn(name=\"NAME\")\n+    @Column(name=\"VALUE\")\n     @CollectionTable(name=\"PROTOCOL_MAPPER_CONFIG\", joinColumns={ @JoinColumn(name=\"PROTOCOL_MAPPER_ID\") })\n     private Map<String, String> config;\n ",
      "parent_sha": "08ae3aee505080f8f6e7b62490edb6844c767924"
    }
  },
  {
    "oid": "e01c9ddd60f53e30ce2fc35741d1f129fef5331d",
    "message": "[KEYCLOAK-8849] - Fixing request entitlements call",
    "date": "2019-01-16T14:25:18Z",
    "url": "https://github.com/keycloak/keycloak/commit/e01c9ddd60f53e30ce2fc35741d1f129fef5331d",
    "details": {
      "sha": "2c15d659dadb37e49e791f9c05ac6537b2a64c81",
      "filename": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/adapter/page/PhotozClientAuthzTestApp.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/e01c9ddd60f53e30ce2fc35741d1f129fef5331d/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadapter%2Fpage%2FPhotozClientAuthzTestApp.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/e01c9ddd60f53e30ce2fc35741d1f129fef5331d/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadapter%2Fpage%2FPhotozClientAuthzTestApp.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadapter%2Fpage%2FPhotozClientAuthzTestApp.java?ref=e01c9ddd60f53e30ce2fc35741d1f129fef5331d",
      "patch": "@@ -159,7 +159,7 @@ public void requestEntitlement(JavascriptStateValidator validator) {\n     \n     public void requestEntitlements(JavascriptStateValidator validator) {\n         testExecutor.executeAsyncScript(\"var callback = arguments[arguments.length - 1];\" +\n-                \"window.authorization.entitlement('photoz-restful-api').then(function (rpt) {\" +\n+                \"window.authorization.entitlement('photoz-restful-api', {}).then(function (rpt) {\" +\n                 \"     callback(JSON.stringify(jwt_decode(rpt), null, '  '));\" +\n                 \"});\", validator);\n     }",
      "parent_sha": "31e8e73e48be34ab7f0a24b5b0556732b516d4a5"
    }
  },
  {
    "oid": "6b8890f5ddcc26b51580e6ad360e7073d6b17d9c",
    "message": "KEYCLOAK-19525 Inconsistent creation of default-roles-<realm>",
    "date": "2021-11-23T20:30:12Z",
    "url": "https://github.com/keycloak/keycloak/commit/6b8890f5ddcc26b51580e6ad360e7073d6b17d9c",
    "details": {
      "sha": "8bcec48da5be7de6c647dc08e8fcb6b06d71db55",
      "filename": "model/jpa/src/main/java/org/keycloak/connections/jpa/updater/liquibase/custom/JpaUpdate13_0_0_MigrateDefaultRoles.java",
      "status": "modified",
      "additions": 17,
      "deletions": 17,
      "changes": 34,
      "blob_url": "https://github.com/keycloak/keycloak/blob/6b8890f5ddcc26b51580e6ad360e7073d6b17d9c/model%2Fjpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fconnections%2Fjpa%2Fupdater%2Fliquibase%2Fcustom%2FJpaUpdate13_0_0_MigrateDefaultRoles.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/6b8890f5ddcc26b51580e6ad360e7073d6b17d9c/model%2Fjpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fconnections%2Fjpa%2Fupdater%2Fliquibase%2Fcustom%2FJpaUpdate13_0_0_MigrateDefaultRoles.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Fjpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fconnections%2Fjpa%2Fupdater%2Fliquibase%2Fcustom%2FJpaUpdate13_0_0_MigrateDefaultRoles.java?ref=6b8890f5ddcc26b51580e6ad360e7073d6b17d9c",
      "patch": "@@ -18,8 +18,8 @@\n \n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.UUID;\n import liquibase.exception.CustomChangeException;\n import liquibase.statement.core.InsertStatement;\n@@ -30,76 +30,76 @@\n \n public class JpaUpdate13_0_0_MigrateDefaultRoles extends CustomKeycloakTask {\n \n-    private final Set<String> realmIds = new HashSet<>();\n+    private final Map<String, String> realmIdsAndNames = new HashMap<>();\n \n     @Override\n     protected void generateStatementsImpl() throws CustomChangeException {\n \n-        extractRealmIds(\"SELECT ID FROM \" + getTableName(\"REALM\"));\n+        extractRealmIdsAndNames(\"SELECT ID,NAME FROM \" + getTableName(\"REALM\"));\n \n         String clientTable = getTableName(\"CLIENT\");\n         String clientDefaultRolesTable = getTableName(\"CLIENT_DEFAULT_ROLES\");\n         String compositeRoleTable = getTableName(\"COMPOSITE_ROLE\");\n \n-        for (String realmId : realmIds) {\n+        for (Map.Entry<String, String> entry : realmIdsAndNames.entrySet()) {\n             String id = UUID.randomUUID().toString();\n-            String roleName = determineDefaultRoleName(realmId);\n+            String roleName = determineDefaultRoleName(entry.getKey(), entry.getValue());\n             statements.add(\n                 // create new default role\n                 new InsertStatement(null, null, database.correctObjectName(\"KEYCLOAK_ROLE\", Table.class))\n                     .addColumnValue(\"ID\", id)\n-                    .addColumnValue(\"CLIENT_REALM_CONSTRAINT\", realmId)\n+                    .addColumnValue(\"CLIENT_REALM_CONSTRAINT\", entry.getValue())\n                     .addColumnValue(\"CLIENT_ROLE\", Boolean.FALSE)\n                     .addColumnValue(\"DESCRIPTION\", \"${role_\" + roleName + \"}\")\n                     .addColumnValue(\"NAME\", roleName)\n-                    .addColumnValue(\"REALM_ID\", realmId)\n-                    .addColumnValue(\"REALM\", realmId)\n+                    .addColumnValue(\"REALM_ID\", entry.getValue())\n+                    .addColumnValue(\"REALM\", entry.getValue())\n             );\n             statements.add(\n                 // assign the role to the realm\n                 new UpdateStatement(null, null, database.correctObjectName(\"REALM\", Table.class))\n                     .addNewColumnValue(\"DEFAULT_ROLE\", id)\n                     .setWhereClause(\"REALM.ID=?\")\n-                    .addWhereParameter(realmId)\n+                    .addWhereParameter(entry.getValue())\n             );\n \n             statements.add(\n                 // copy data from REALM_DEFAULT_ROLES to COMPOSITE_ROLE\n                 new RawSqlStatement(\"INSERT INTO \" + compositeRoleTable + \" (COMPOSITE, CHILD_ROLE) \" +\n                         \"SELECT '\" + id + \"', ROLE_ID FROM \" + getTableName(\"REALM_DEFAULT_ROLES\") +\n-                        \" WHERE REALM_ID = '\" + database.escapeStringForDatabase(realmId) + \"'\")\n+                        \" WHERE REALM_ID = '\" + database.escapeStringForDatabase(entry.getValue()) + \"'\")\n             );\n             statements.add(\n                 // copy data from CLIENT_DEFAULT_ROLES to COMPOSITE_ROLE\n                 new RawSqlStatement(\"INSERT INTO \" + compositeRoleTable + \" (COMPOSITE, CHILD_ROLE) \" +\n                         \"SELECT '\" + id + \"', \" + clientDefaultRolesTable + \".ROLE_ID FROM \" + \n                         clientDefaultRolesTable + \" INNER JOIN \" + clientTable + \" ON \" + \n                         clientTable + \".ID = \" + clientDefaultRolesTable + \".CLIENT_ID AND \" +\n-                        clientTable + \".REALM_ID = '\" + database.escapeStringForDatabase(realmId) + \"'\")\n+                        clientTable + \".REALM_ID = '\" + database.escapeStringForDatabase(entry.getValue()) + \"'\")\n             );\n         }\n     }\n \n-    private void extractRealmIds(String sql) throws CustomChangeException {\n+    private void extractRealmIdsAndNames(String sql) throws CustomChangeException {\n         try (PreparedStatement statement = jdbcConnection.prepareStatement(sql);\n                 ResultSet rs = statement.executeQuery()) {\n \n             while (rs.next()) {\n-                realmIds.add(rs.getString(1));\n+                realmIdsAndNames.put(rs.getString(1), rs.getString(2));\n             }\n \n         } catch (Exception e) {\n             throw new CustomChangeException(getTaskId() + \": Exception when extracting data from previous version\", e);\n         }\n     }\n \n-    private String determineDefaultRoleName(String realmId) throws CustomChangeException {\n-        String roleName = Constants.DEFAULT_ROLES_ROLE_PREFIX + \"-\" + realmId.toLowerCase();\n+    private String determineDefaultRoleName(String realmId, String realmName) throws CustomChangeException {\n+        String roleName = Constants.DEFAULT_ROLES_ROLE_PREFIX + \"-\" + realmName.toLowerCase();\n         if (isRoleNameAvailable(realmId, roleName)) {\n             return roleName;\n         } else {\n             for (int i = 1; i < Integer.MAX_VALUE; i++) {\n-                roleName = Constants.DEFAULT_ROLES_ROLE_PREFIX + \"-\" + realmId.toLowerCase() + \"-\" + i;\n+                roleName = Constants.DEFAULT_ROLES_ROLE_PREFIX + \"-\" + realmName.toLowerCase() + \"-\" + i;\n                 if (isRoleNameAvailable(realmId, roleName)) return roleName;\n             }\n         }",
      "parent_sha": "6a766884f632858990a05dabc4019ff3f18d972c"
    }
  },
  {
    "oid": "6eef8b5dd41afcafc49bd07980b00312904067a3",
    "message": "KEYCLOAK-12899 Fix incorrect exception message in JWE",
    "date": "2020-02-25T13:53:01Z",
    "url": "https://github.com/keycloak/keycloak/commit/6eef8b5dd41afcafc49bd07980b00312904067a3",
    "details": {
      "sha": "6870d691b074028c0efe99d4fe54e7a42ec4f0e3",
      "filename": "core/src/main/java/org/keycloak/jose/jwe/JWE.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/6eef8b5dd41afcafc49bd07980b00312904067a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fjose%2Fjwe%2FJWE.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/6eef8b5dd41afcafc49bd07980b00312904067a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fjose%2Fjwe%2FJWE.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fjose%2Fjwe%2FJWE.java?ref=6eef8b5dd41afcafc49bd07980b00312904067a3",
      "patch": "@@ -141,7 +141,7 @@ public String encodeJwe(JWEAlgorithmProvider algorithmProvider, JWEEncryptionPro\n             }\n \n             if (encryptionProvider == null) {\n-                throw new IllegalArgumentException(\"No provider for enc '\" + header.getAlgorithm() + \"'\");\n+                throw new IllegalArgumentException(\"No provider for enc '\" + header.getEncryptionAlgorithm() + \"'\");\n             }\n \n             keyStorage.setEncryptionProvider(encryptionProvider);",
      "parent_sha": "cae46d84435f3c1791418bd9d2ab3e789274803f"
    }
  },
  {
    "oid": "f3b87f9cf9383436ce32309673da00380bd3d7b3",
    "message": "Skip testDotInUsername for the MSAD configuration with sAMAccountName as username",
    "date": "2015-07-24T11:01:54Z",
    "url": "https://github.com/keycloak/keycloak/commit/f3b87f9cf9383436ce32309673da00380bd3d7b3",
    "details": {
      "sha": "520ebd4cabec9d4787f53644064401379d8c523a",
      "filename": "testsuite/integration/src/test/java/org/keycloak/testsuite/federation/FederationProvidersIntegrationTest.java",
      "status": "modified",
      "additions": 21,
      "deletions": 9,
      "changes": 30,
      "blob_url": "https://github.com/keycloak/keycloak/blob/f3b87f9cf9383436ce32309673da00380bd3d7b3/testsuite%2Fintegration%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Ffederation%2FFederationProvidersIntegrationTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/f3b87f9cf9383436ce32309673da00380bd3d7b3/testsuite%2Fintegration%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Ffederation%2FFederationProvidersIntegrationTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Ffederation%2FFederationProvidersIntegrationTest.java?ref=f3b87f9cf9383436ce32309673da00380bd3d7b3",
      "patch": "@@ -9,6 +9,7 @@\n import org.junit.rules.TestRule;\n import org.junit.runners.MethodSorters;\n import org.keycloak.OAuth2Constants;\n+import org.keycloak.federation.ldap.LDAPConfig;\n import org.keycloak.federation.ldap.LDAPFederationProvider;\n import org.keycloak.federation.ldap.LDAPFederationProviderFactory;\n import org.keycloak.federation.ldap.idm.model.LDAPObject;\n@@ -353,20 +354,31 @@ public void testCaseSensitiveAttributeName() {\n \n     @Test\n     public void testDotInUsername() {\n-        // Add LDAP user with same email like existing model user\n-        keycloakRule.update(new KeycloakRule.KeycloakSetup() {\n+        KeycloakSession session = keycloakRule.startSession();\n+        boolean skip = false;\n \n-            @Override\n-            public void config(RealmManager manager, RealmModel adminstrationRealm, RealmModel appRealm) {\n-                LDAPFederationProvider ldapFedProvider = FederationTestUtils.getLdapProvider(session, ldapModel);\n+        try {\n+            RealmModel appRealm = new RealmManager(session).getRealmByName(\"test\");\n+            LDAPFederationProvider ldapFedProvider = FederationTestUtils.getLdapProvider(session, ldapModel);\n+\n+            // Workaround as dot is not allowed in sAMAccountName on active directory. So we will skip the test for this configuration\n+            LDAPConfig config = ldapFedProvider.getLdapIdentityStore().getConfig();\n+            if (config.isActiveDirectory() && config.getUsernameLdapAttribute().equals(LDAPConstants.SAM_ACCOUNT_NAME)) {\n+                skip = true;\n+            }\n+\n+            if (!skip) {\n                 LDAPObject johnDot = FederationTestUtils.addLDAPUser(ldapFedProvider, appRealm, \"john,dot\", \"John\", \"Dot\", \"johndot@email.org\", null, \"12387\");\n                 ldapFedProvider.getLdapIdentityStore().updatePassword(johnDot, \"Password1\");\n             }\n+        } finally {\n+            keycloakRule.stopSession(session, false);\n+        }\n \n-        });\n-\n-        // Try to import the duplicated LDAP user into Keycloak\n-        loginSuccessAndLogout(\"john,dot\", \"Password1\");\n+        if (!skip) {\n+            // Try to import the user with dot in username into Keycloak\n+            loginSuccessAndLogout(\"john,dot\", \"Password1\");\n+        }\n     }\n \n     @Test",
      "parent_sha": "d2ea45e1eb3d9f221c67e0e68b4bda147ad17d99"
    }
  },
  {
    "oid": "93373b93989171a15bf18f6ce2ae33bbf485d513",
    "message": "Cache theme root URI\n\nThis is a performance optimization.\n\nCloses #20176",
    "date": "2023-05-15T08:20:35Z",
    "url": "https://github.com/keycloak/keycloak/commit/93373b93989171a15bf18f6ce2ae33bbf485d513",
    "details": {
      "sha": "1a48eb7e7f5301b295d87f3f5f59b113591bbf0b",
      "filename": "services/src/main/java/org/keycloak/forms/login/freemarker/model/UrlBean.java",
      "status": "modified",
      "additions": 11,
      "deletions": 3,
      "changes": 14,
      "blob_url": "https://github.com/keycloak/keycloak/blob/93373b93989171a15bf18f6ce2ae33bbf485d513/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fforms%2Flogin%2Ffreemarker%2Fmodel%2FUrlBean.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/93373b93989171a15bf18f6ce2ae33bbf485d513/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fforms%2Flogin%2Ffreemarker%2Fmodel%2FUrlBean.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fforms%2Flogin%2Ffreemarker%2Fmodel%2FUrlBean.java?ref=93373b93989171a15bf18f6ce2ae33bbf485d513",
      "patch": "@@ -36,6 +36,7 @@ public class UrlBean {\n     private URI baseURI;\n     private Theme theme;\n     private String realm;\n+    private URI themeRootUri;\n \n     public UrlBean(RealmModel realm, Theme theme, URI baseURI, URI actionUri) {\n         this.realm = realm != null ? realm.getName() : null;\n@@ -103,7 +104,7 @@ public String getLogoutConfirmAction() {\n     }\n \n     public String getResourcesUrl() {\n-        return Urls.themeRoot(baseURI).toString() + \"/\" + theme.getType().toString().toLowerCase() +\"/\" + theme.getName();\n+        return getThemeRootUri().toString() + \"/\" + theme.getType().toString().toLowerCase() +\"/\" + theme.getName();\n     }\n \n     public String getOauthAction() {\n@@ -123,12 +124,12 @@ public String getOauth2DeviceVerificationAction() {\n     }\n \n     public String getResourcesPath() {\n-        URI uri = Urls.themeRoot(baseURI);\n+        URI uri = getThemeRootUri();\n         return uri.getPath() + \"/\" + theme.getType().toString().toLowerCase() +\"/\" + theme.getName();\n     }\n \n     public String getResourcesCommonPath() {\n-        URI uri = Urls.themeRoot(baseURI);\n+        URI uri = getThemeRootUri();\n         String commonPath = \"\";\n         try {\n             commonPath = theme.getProperties().getProperty(\"import\");\n@@ -140,4 +141,11 @@ public String getResourcesCommonPath() {\n         }\n         return uri.getPath() + \"/\" + commonPath;\n     }\n+\n+    private URI getThemeRootUri() {\n+        if (themeRootUri == null) {\n+            themeRootUri = Urls.themeRoot(baseURI);\n+        }\n+        return themeRootUri;\n+    }\n }",
      "parent_sha": "2758d7886531f43415a9a0269a87893ae15e34da"
    }
  },
  {
    "oid": "993d9105208e3f027168f003e5235cbe9bed9a7e",
    "message": "avoid NPE in LegacyAttributes when using federated storage\nCloses #https://github.com/keycloak/keycloak/issues/15482",
    "date": "2022-12-07T17:25:08Z",
    "url": "https://github.com/keycloak/keycloak/commit/993d9105208e3f027168f003e5235cbe9bed9a7e",
    "details": {
      "sha": "0c0aa44af19589b36c8390d04075f201f33ffb31",
      "filename": "services/src/main/java/org/keycloak/userprofile/LegacyAttributes.java",
      "status": "modified",
      "additions": 3,
      "deletions": 9,
      "changes": 12,
      "blob_url": "https://github.com/keycloak/keycloak/blob/993d9105208e3f027168f003e5235cbe9bed9a7e/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fuserprofile%2FLegacyAttributes.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/993d9105208e3f027168f003e5235cbe9bed9a7e/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fuserprofile%2FLegacyAttributes.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fuserprofile%2FLegacyAttributes.java?ref=993d9105208e3f027168f003e5235cbe9bed9a7e",
      "patch": "@@ -40,16 +40,10 @@ public boolean isReadOnly(String attributeName) {\n \n     @Override\n     public Map<String, List<String>> getReadable() {\n-        if(user == null)\n-            return null;\n+        if(user == null || user.getAttributes() == null)\n+            return new HashMap<>();\n \n-        Map<String, List<String>> attributes = new HashMap<>(user.getAttributes());\n-\n-        if (attributes.isEmpty()) {\n-            return null;\n-        }\n-\n-        return attributes;\n+        return new HashMap<>(user.getAttributes());\n     }\n \n     @Override",
      "parent_sha": "21cce0a1d32e43817cf38bacd2f6435f2320abd1"
    }
  },
  {
    "oid": "e811b876790e50deb9d7dd100f7c030a2f4bc3dd",
    "message": "moved smtp server configuration to suiteContext",
    "date": "2015-09-23T08:50:49Z",
    "url": "https://github.com/keycloak/keycloak/commit/e811b876790e50deb9d7dd100f7c030a2f4bc3dd",
    "details": {
      "sha": "a553f39822b6659f9dbf73b1ecd0f644e18a0d91",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/util/MailServer.java",
      "status": "modified",
      "additions": 17,
      "deletions": 4,
      "changes": 21,
      "blob_url": "https://github.com/keycloak/keycloak/blob/e811b876790e50deb9d7dd100f7c030a2f4bc3dd/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Futil%2FMailServer.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/e811b876790e50deb9d7dd100f7c030a2f4bc3dd/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Futil%2FMailServer.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Futil%2FMailServer.java?ref=e811b876790e50deb9d7dd100f7c030a2f4bc3dd",
      "patch": "@@ -3,6 +3,8 @@\n import com.icegreen.greenmail.util.GreenMail;\n import com.icegreen.greenmail.util.ServerSetup;\n import java.io.IOException;\n+import java.lang.Thread.UncaughtExceptionHandler;\n+import java.net.SocketException;\n import javax.mail.MessagingException;\n \n import javax.mail.internet.MimeMessage;\n@@ -42,7 +44,7 @@ public static void main(String[] args) throws Exception {\n                     log.info(\"-------------------------------------------------------\");\n                 }\n             }\n-        } catch (IOException | InterruptedException | MessagingException ex) {\n+        } catch (IOException | MessagingException ex) {\n             throw new RuntimeException(ex);\n         }\n     }\n@@ -53,18 +55,29 @@ public static void start() {\n         greenMail = new GreenMail(setup);\n         greenMail.start();\n \n-        log.info(\"--Started mail server (\" + HOST + \":\" + PORT + \")--\");\n+        log.info(\"Started mail server (\" + HOST + \":\" + PORT + \")\");\n     }\n \n     public static void stop() {\n         if (greenMail != null) {\n-            log.info(\"--Stopping mail server (localhost:3025)--\");\n+            log.info(\"Stopping mail server (localhost:3025)\");\n+            // Suppress error from GreenMail on shutdown\n+            Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler() {\n+                @Override\n+                public void uncaughtException(Thread t, Throwable e) {\n+                    if (!(e.getCause() instanceof SocketException && e.getStackTrace()[0].getClassName()\n+                            .equals(\"com.icegreen.greenmail.smtp.SmtpHandler\"))) {\n+                        log.error(\"Exception in thread \\\"\" + t.getName() + \"\\\" \");\n+                        log.error(e.getMessage(), e);\n+                    }\n+                }\n+            });\n             greenMail.stop();\n         }\n     }\n \n     public static void createEmailAccount(String email, String password) {\n-        log.debug(\"--Creating email account \" + email + \"--\");\n+        log.debug(\"Creating email account \" + email);\n         greenMail.setUser(email, password);\n     }\n     ",
      "parent_sha": "09488b8df3459d150dcaa34e2d53ff6d796999aa"
    }
  },
  {
    "oid": "d2c98b20f3a67f46f6cf2b97659b46a79c58b614",
    "message": "KEYCLOAK-17404: LDAPS connection tests not working when protocol set in upper case",
    "date": "2021-03-16T09:10:59Z",
    "url": "https://github.com/keycloak/keycloak/commit/d2c98b20f3a67f46f6cf2b97659b46a79c58b614",
    "details": {
      "sha": "463b88fdb1e58fcb2b18ee2f99753e8bfd11c297",
      "filename": "server-spi-private/src/main/java/org/keycloak/models/LDAPConstants.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/d2c98b20f3a67f46f6cf2b97659b46a79c58b614/server-spi-private%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2FLDAPConstants.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/d2c98b20f3a67f46f6cf2b97659b46a79c58b614/server-spi-private%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2FLDAPConstants.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/server-spi-private%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2FLDAPConstants.java?ref=d2c98b20f3a67f46f6cf2b97659b46a79c58b614",
      "patch": "@@ -163,7 +163,7 @@ public static void setTruststoreSpiIfNeeded(String useTruststoreSpi, String url,\n         } else if (useTruststoreSpi != null && useTruststoreSpi.equals(LDAPConstants.USE_TRUSTSTORE_NEVER)) {\n             shouldSetTruststore = false;\n         } else {\n-            shouldSetTruststore = (url != null && url.startsWith(\"ldaps\"));\n+            shouldSetTruststore = (url != null && url.toLowerCase().startsWith(\"ldaps\"));\n         }\n \n         if (shouldSetTruststore) {",
      "parent_sha": "db30b470c40199213593b1097dd0e929e231f47c"
    }
  },
  {
    "oid": "701e49e4a5074cc4effe17371b0f051ca95a01b3",
    "message": "Defer initialization of JGroups after logging is set up by Quarkus (#29131)\n\nCloses #29129\r\n\r\nSigned-off-by: Alexander Schwartz <aschwart@redhat.com>",
    "date": "2024-05-14T10:38:37Z",
    "url": "https://github.com/keycloak/keycloak/commit/701e49e4a5074cc4effe17371b0f051ca95a01b3",
    "details": {
      "sha": "3fa43cdd91aec4b8d55ba7da1ca65ae07fee430d",
      "filename": "quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/CacheBuildSteps.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/keycloak/keycloak/blob/701e49e4a5074cc4effe17371b0f051ca95a01b3/quarkus%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fquarkus%2Fdeployment%2FCacheBuildSteps.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/701e49e4a5074cc4effe17371b0f051ca95a01b3/quarkus%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fquarkus%2Fdeployment%2FCacheBuildSteps.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/quarkus%2Fdeployment%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fquarkus%2Fdeployment%2FCacheBuildSteps.java?ref=701e49e4a5074cc4effe17371b0f051ca95a01b3",
      "patch": "@@ -17,6 +17,8 @@\n \n package org.keycloak.quarkus.deployment;\n \n+import io.quarkus.deployment.builditem.ShutdownContextBuildItem;\n+import io.quarkus.deployment.logging.LoggingSetupBuildItem;\n import jakarta.enterprise.context.ApplicationScoped;\n import org.keycloak.quarkus.runtime.KeycloakRecorder;\n import org.keycloak.quarkus.runtime.storage.legacy.infinispan.CacheManagerFactory;\n@@ -27,12 +29,16 @@\n import io.quarkus.deployment.annotations.Consume;\n import io.quarkus.deployment.annotations.ExecutionTime;\n import io.quarkus.deployment.annotations.Record;\n-import io.quarkus.deployment.builditem.ShutdownContextBuildItem;\n \n public class CacheBuildSteps {\n \n     @Consume(ConfigBuildItem.class)\n-    @Record(ExecutionTime.STATIC_INIT)\n+    // Consume LoggingSetupBuildItem.class and record RUNTIME_INIT are necessary to ensure that logging is set up before the caches are initialized.\n+    // This is to prevent the class TP in JGroups to pick up the trace logging at start up. While the logs will not appear on the console,\n+    // they will still be created and use CPU cycles and create garbage collection.\n+    // See: https://issues.redhat.com/browse/JGRP-2130 for the JGroups discussion, and https://github.com/keycloak/keycloak/issues/29129 for the issue Keycloak had with this.\n+    @Consume(LoggingSetupBuildItem.class)\n+    @Record(ExecutionTime.RUNTIME_INIT)\n     @BuildStep\n     void configureInfinispan(KeycloakRecorder recorder, BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItems, ShutdownContextBuildItem shutdownContext) {\n         syntheticBeanBuildItems.produce(SyntheticBeanBuildItem.configure(CacheManagerFactory.class)",
      "parent_sha": "3d1c20b4a5f1d2d77ca9cf60446557c16e061962"
    }
  },
  {
    "oid": "299c42f4cc000756ec47533e3ad05924f38f38ac",
    "message": "Locale RTL does not work properly\n\nFixes #38320\n\nSigned-off-by: Martin Barto\u0161 <mabartos@redhat.com>",
    "date": "2025-03-21T12:21:36Z",
    "url": "https://github.com/keycloak/keycloak/commit/299c42f4cc000756ec47533e3ad05924f38f38ac",
    "details": {
      "sha": "7b91a07d2848c72541dd9f399930c2a9974181d4",
      "filename": "services/src/main/java/org/keycloak/theme/beans/LocaleBean.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/299c42f4cc000756ec47533e3ad05924f38f38ac/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftheme%2Fbeans%2FLocaleBean.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/299c42f4cc000756ec47533e3ad05924f38f38ac/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftheme%2Fbeans%2FLocaleBean.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftheme%2Fbeans%2FLocaleBean.java?ref=299c42f4cc000756ec47533e3ad05924f38f38ac",
      "patch": "@@ -42,7 +42,7 @@ public class LocaleBean {\n     public LocaleBean(RealmModel realm, java.util.Locale current, UriBuilder uriBuilder, Properties messages) {\n         this.currentLanguageTag = current.toLanguageTag();\n         this.current = messages.getProperty(\"locale_\" + this.currentLanguageTag, this.currentLanguageTag);\n-        this.rtl = isLeftToRight(this.current);\n+        this.rtl = !isLeftToRight(this.current);\n \n         Collator collator = Collator.getInstance(current);\n         collator.setStrength(Collator.PRIMARY); // ignore case and accents",
      "parent_sha": "cb2dc35defd05b0656dcc553ffdcb1cffe47e3c9"
    }
  },
  {
    "oid": "974c5615af986e4892e5b0fa920781e142a77f37",
    "message": "Revert accidentally removed ResteasyClient configuration in admin\n\nFixes accidentally removed in PR #2449 ResteasyClient pool size parameter in\n`org.keycloak.admin.client.Keycloak`.",
    "date": "2016-04-07T17:24:57Z",
    "url": "https://github.com/keycloak/keycloak/commit/974c5615af986e4892e5b0fa920781e142a77f37",
    "details": {
      "sha": "f86170e521a4f664f61bd22d9c93baa53b1d6e15",
      "filename": "integration/admin-client/src/main/java/org/keycloak/admin/client/Keycloak.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/974c5615af986e4892e5b0fa920781e142a77f37/integration%2Fadmin-client%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadmin%2Fclient%2FKeycloak.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/974c5615af986e4892e5b0fa920781e142a77f37/integration%2Fadmin-client%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadmin%2Fclient%2FKeycloak.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/integration%2Fadmin-client%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadmin%2Fclient%2FKeycloak.java?ref=974c5615af986e4892e5b0fa920781e142a77f37",
      "patch": "@@ -46,7 +46,7 @@ public class Keycloak {\n \n     Keycloak(String serverUrl, String realm, String username, String password, String clientId, String clientSecret, String grantType, ResteasyClient resteasyClient) {\n         config = new Config(serverUrl, realm, username, password, clientId, clientSecret, grantType);\n-        client = resteasyClient != null ? resteasyClient : new ResteasyClientBuilder().build();\n+        client = resteasyClient != null ? resteasyClient : new ResteasyClientBuilder().connectionPoolSize(10).build();\n \n         tokenManager = new TokenManager(config, client);\n ",
      "parent_sha": "c1a8e692d0c315c140f9e64cd69f6d85185f8cb2"
    }
  },
  {
    "oid": "a62e98f966d269baa14ba361e77d52b72134319b",
    "message": "MapUserProvider should throw an exception for more than one user \n\nCloses #14672",
    "date": "2022-10-06T11:11:57Z",
    "url": "https://github.com/keycloak/keycloak/commit/a62e98f966d269baa14ba361e77d52b72134319b",
    "details": {
      "sha": "3e2f3bc88e197a4049c4a244d14daa882f06a759",
      "filename": "model/map/src/main/java/org/keycloak/models/map/user/MapUserProvider.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/keycloak/keycloak/blob/a62e98f966d269baa14ba361e77d52b72134319b/model%2Fmap%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fmap%2Fuser%2FMapUserProvider.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/a62e98f966d269baa14ba361e77d52b72134319b/model%2Fmap%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fmap%2Fuser%2FMapUserProvider.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Fmap%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fmap%2Fuser%2FMapUserProvider.java?ref=a62e98f966d269baa14ba361e77d52b72134319b",
      "patch": "@@ -505,8 +505,8 @@ public UserModel getUserByUsername(RealmModel realm, String username) {\n             List<MapUserEntity> users = s.collect(Collectors.toList());\n             if (users.isEmpty()) return null;\n             if (users.size() != 1) {\n-                LOG.warnf(\"There are colliding usernames for users with usernames and ids: %s\", \n-                        users.stream().collect(Collectors.toMap(MapUserEntity::getUsername, MapUserEntity::getId)));\n+                throw new ModelDuplicateException(String.format(\"There are colliding usernames for users with usernames and ids: %s\", \n+                        users.stream().collect(Collectors.toMap(MapUserEntity::getUsername, MapUserEntity::getId))));\n             }\n             return entityToAdapterFunc(realm).apply(users.get(0));\n         }",
      "parent_sha": "a670e1d96506580516cbeb55a733a43622386a56"
    }
  },
  {
    "oid": "5f73c338d88da5739ad0d589e1bcbd3f8ea221a2",
    "message": "KEYCLOAK-2947: Include group representation for GroupMembership changes in AdminEvents\n\nWe now include the full group representation in AdminEvents\nfor Group Membership changes.\nThis enables EventListener to propagate potential role / attribute\nchnages based on the removal / addition of the group.",
    "date": "2016-05-25T21:17:35Z",
    "url": "https://github.com/keycloak/keycloak/commit/5f73c338d88da5739ad0d589e1bcbd3f8ea221a2",
    "details": {
      "sha": "82ca7dc5a765283e80c81c61d8bda513bfa631a1",
      "filename": "services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/keycloak/keycloak/blob/5f73c338d88da5739ad0d589e1bcbd3f8ea221a2/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2Fadmin%2FUsersResource.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/5f73c338d88da5739ad0d589e1bcbd3f8ea221a2/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2Fadmin%2FUsersResource.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2Fadmin%2FUsersResource.java?ref=5f73c338d88da5739ad0d589e1bcbd3f8ea221a2",
      "patch": "@@ -959,7 +959,7 @@ public void removeMembership(@PathParam(\"id\") String id, @PathParam(\"groupId\") S\n         try {\n             if (user.isMemberOf(group)){\n                 user.leaveGroup(group);\n-                adminEvent.operation(OperationType.DELETE).resourcePath(uriInfo).success();\n+                adminEvent.operation(OperationType.DELETE).representation(ModelToRepresentation.toRepresentation(group, true)).resourcePath(uriInfo).success();\n             }\n         } catch (ModelException me) {\n             Properties messages = AdminRoot.getMessages(session, realm, auth.getAuth().getToken().getLocale());\n@@ -984,9 +984,8 @@ public void joinGroup(@PathParam(\"id\") String id, @PathParam(\"groupId\") String g\n         }\n         if (!user.isMemberOf(group)){\n             user.joinGroup(group);\n-            adminEvent.operation(OperationType.CREATE).resourcePath(uriInfo).success();\n+            adminEvent.operation(OperationType.CREATE).representation(ModelToRepresentation.toRepresentation(group, true)).resourcePath(uriInfo).success();\n         }\n     }\n \n-\n }",
      "parent_sha": "f58936025f2cbdc889226ff08b85e52f861ac7c1"
    }
  },
  {
    "oid": "6291e90f9c0e0c1b350943d99d1728975c775392",
    "message": "KEYCLOAK-1844 Login endpoint needs to handle POST as well for SAML clients using HTTP-POST binding",
    "date": "2015-09-14T21:57:38Z",
    "url": "https://github.com/keycloak/keycloak/commit/6291e90f9c0e0c1b350943d99d1728975c775392",
    "details": {
      "sha": "9bbfcf520872fa41509317d2fe5d7e313c7f2b1b",
      "filename": "services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/keycloak/keycloak/blob/6291e90f9c0e0c1b350943d99d1728975c775392/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2FIdentityBrokerService.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/6291e90f9c0e0c1b350943d99d1728975c775392/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2FIdentityBrokerService.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2FIdentityBrokerService.java?ref=6291e90f9c0e0c1b350943d99d1728975c775392",
      "patch": "@@ -64,11 +64,7 @@\n import org.keycloak.social.SocialIdentityProvider;\n import org.keycloak.util.ObjectUtil;\n \n-import javax.ws.rs.GET;\n-import javax.ws.rs.OPTIONS;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.QueryParam;\n+import javax.ws.rs.*;\n import javax.ws.rs.core.Context;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n@@ -130,6 +126,12 @@ public void init() {\n         this.event = new EventBuilder(realmModel, session, clientConnection).event(EventType.IDENTITY_PROVIDER_LOGIN);\n     }\n \n+    @POST\n+    @Path(\"/{provider_id}/login\")\n+    public Response performPostLogin(@PathParam(\"provider_id\") String providerId, @QueryParam(\"code\") String code) {\n+        return performLogin(providerId, code);\n+    }\n+\n     @GET\n     @Path(\"/{provider_id}/login\")\n     public Response performLogin(@PathParam(\"provider_id\") String providerId, @QueryParam(\"code\") String code) {",
      "parent_sha": "1c38bb7158fdeb9c2a094dcf8dfd15c3f41aa7f3"
    }
  },
  {
    "oid": "8acdaf462b395de68743bbf16d7afd42eb586fe3",
    "message": "fix arquillian",
    "date": "2015-10-01T19:14:16Z",
    "url": "https://github.com/keycloak/keycloak/commit/8acdaf462b395de68743bbf16d7afd42eb586fe3",
    "details": {
      "sha": "b423c682020c3f5d196b1a1683e840d9c4a7043b",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/servlet/AbstractDemoServletsAdapterTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/keycloak/keycloak/blob/8acdaf462b395de68743bbf16d7afd42eb586fe3/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadapter%2Fservlet%2FAbstractDemoServletsAdapterTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/8acdaf462b395de68743bbf16d7afd42eb586fe3/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadapter%2Fservlet%2FAbstractDemoServletsAdapterTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadapter%2Fservlet%2FAbstractDemoServletsAdapterTest.java?ref=8acdaf462b395de68743bbf16d7afd42eb586fe3",
      "patch": "@@ -1,5 +1,6 @@\n package org.keycloak.testsuite.adapter.servlet;\n \n+import org.keycloak.representations.VersionRepresentation;\n import org.keycloak.testsuite.adapter.AbstractServletsAdapterTest;\n import java.net.URI;\n import java.util.List;\n@@ -349,14 +350,14 @@ public void testBadUser() {\n     public void testVersion() {\n         Client client = ClientBuilder.newClient();\n         WebTarget target = client.target(authServerPage.createUriBuilder()).path(\"version\");\n-        Version version = target.request().get(Version.class);\n+        VersionRepresentation version = target.request().get(VersionRepresentation.class);\n         assertNotNull(version);\n         assertNotNull(version.getVersion());\n         assertNotNull(version.getBuildTime());\n         assertNotEquals(version.getVersion(), Version.UNKNOWN);\n         assertNotEquals(version.getBuildTime(), Version.UNKNOWN);\n \n-        Version version2 = client.target(securePortal.toString()).path(AdapterConstants.K_VERSION).request().get(Version.class);\n+        VersionRepresentation version2 = client.target(securePortal.toString()).path(AdapterConstants.K_VERSION).request().get(VersionRepresentation.class);\n         assertNotNull(version2);\n         assertNotNull(version2.getVersion());\n         assertNotNull(version2.getBuildTime());",
      "parent_sha": "c5efd34a46f90a8174f6953e7c2194a2acb2d101"
    }
  },
  {
    "oid": "1c38cec10fd9e992527c488ec6f100185ef49d44",
    "message": "KEYCLOAK-4427",
    "date": "2017-12-15T15:53:13Z",
    "url": "https://github.com/keycloak/keycloak/commit/1c38cec10fd9e992527c488ec6f100185ef49d44",
    "details": {
      "sha": "070d517beba95e347ff2cc45facb7fa5df2550a0",
      "filename": "common/src/main/java/org/keycloak/common/util/KeystoreUtil.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/keycloak/keycloak/blob/1c38cec10fd9e992527c488ec6f100185ef49d44/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fcommon%2Futil%2FKeystoreUtil.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/1c38cec10fd9e992527c488ec6f100185ef49d44/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fcommon%2Futil%2FKeystoreUtil.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fcommon%2Futil%2FKeystoreUtil.java?ref=1c38cec10fd9e992527c488ec6f100185ef49d44",
      "patch": "@@ -21,7 +21,6 @@\n \n import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.InputStream;\n import java.security.KeyPair;\n import java.security.KeyStore;\n@@ -47,7 +46,9 @@ public static KeyStore loadKeyStore(String filename, String password) throws Exc\n         InputStream trustStream = null;\n         if (filename.startsWith(GenericConstants.PROTOCOL_CLASSPATH)) {\n             String resourcePath = filename.replace(GenericConstants.PROTOCOL_CLASSPATH, \"\");\n-            trustStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(resourcePath);\n+            if (Thread.currentThread().getContextClassLoader() != null) {\n+                trustStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(resourcePath);\n+            }\n             if (trustStream == null) {\n                 trustStream = KeystoreUtil.class.getResourceAsStream(resourcePath);\n             }",
      "parent_sha": "e7c25f76a7638a8454eff61d107781801e4f68ac"
    }
  },
  {
    "oid": "27ef919d07943aeb1cc71b8cc8f28b2726185370",
    "message": "KEYCLOAK-2924: Fire AdminEvents on user group membership changes.\n\nWe now fire AdminEvents if a user joins or leaves a group.\nThis information can be used to deduce potential role changes\nin custom event listeners.",
    "date": "2016-04-27T09:17:23Z",
    "url": "https://github.com/keycloak/keycloak/commit/27ef919d07943aeb1cc71b8cc8f28b2726185370",
    "details": {
      "sha": "dc51cdc9a04363d9a77cf7f863d75dd6b6897311",
      "filename": "services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/keycloak/keycloak/blob/27ef919d07943aeb1cc71b8cc8f28b2726185370/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2Fadmin%2FUsersResource.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/27ef919d07943aeb1cc71b8cc8f28b2726185370/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2Fadmin%2FUsersResource.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2Fadmin%2FUsersResource.java?ref=27ef919d07943aeb1cc71b8cc8f28b2726185370",
      "patch": "@@ -960,7 +960,10 @@ public void removeMembership(@PathParam(\"id\") String id, @PathParam(\"groupId\") S\n         }\n \n         try {\n-            if (user.isMemberOf(group)) user.leaveGroup(group);\n+            if (user.isMemberOf(group)){\n+                user.leaveGroup(group);\n+                adminEvent.operation(OperationType.DELETE).resourcePath(uriInfo).success();\n+            }\n         } catch (ModelException me) {\n             Properties messages = AdminRoot.getMessages(session, realm, auth.getAuth().getToken().getLocale());\n             throw new ErrorResponseException(me.getMessage(), MessageFormat.format(messages.getProperty(me.getMessage(), me.getMessage()), me.getParameters()),\n@@ -982,7 +985,10 @@ public void joinGroup(@PathParam(\"id\") String id, @PathParam(\"groupId\") String g\n         if (group == null) {\n             throw new NotFoundException(\"Group not found\");\n         }\n-        if (!user.isMemberOf(group)) user.joinGroup(group);\n+        if (!user.isMemberOf(group)){\n+            user.joinGroup(group);\n+            adminEvent.operation(OperationType.CREATE).resourcePath(uriInfo).success();\n+        }\n     }\n \n ",
      "parent_sha": "dcb6cedfb74c783b04aea454c205bbc4c3692596"
    }
  },
  {
    "oid": "da6a017e86f6bca36a94701f0108d855b344f111",
    "message": "KEYCLOAK-17307 ResetPasswordTest - wrong redirect URIs",
    "date": "2021-03-05T07:49:34Z",
    "url": "https://github.com/keycloak/keycloak/commit/da6a017e86f6bca36a94701f0108d855b344f111",
    "details": {
      "sha": "80b2baaa1ee94303b6ccd29ce3e6c2402dc01404",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/ResetPasswordTest.java",
      "status": "modified",
      "additions": 13,
      "deletions": 16,
      "changes": 29,
      "blob_url": "https://github.com/keycloak/keycloak/blob/da6a017e86f6bca36a94701f0108d855b344f111/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fforms%2FResetPasswordTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/da6a017e86f6bca36a94701f0108d855b344f111/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fforms%2FResetPasswordTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fforms%2FResetPasswordTest.java?ref=da6a017e86f6bca36a94701f0108d855b344f111",
      "patch": "@@ -1135,25 +1135,24 @@ public void resetPasswordLinkNewTabAndProperRedirectAccount() throws IOException\n \n     @Test\n     public void resetPasswordLinkNewTabAndProperRedirectClient() throws IOException {\n-        final String REDIRECT_URI = OAuthClient.AUTH_SERVER_ROOT + \"/realms/master/app/auth\";\n+        final String REDIRECT_URI = getAuthServerRoot() + \"realms/master/app/auth\";\n         final String CLIENT_ID = \"test-app\";\n \n-        try (ClientAttributeUpdater cau = ClientAttributeUpdater.forClient(getAdminClient(), TEST_REALM_NAME, CLIENT_ID)\n-                .filterRedirectUris(uri -> uri.contains(getAuthServerRoot().toString()))\n-                .update()) {\n-            try (BrowserTabUtil tabUtil = BrowserTabUtil.getInstanceAndSetEnv(driver)) {\n-                assertThat(tabUtil.getCountOfTabs(), Matchers.is(1));\n+        try (BrowserTabUtil tabUtil = BrowserTabUtil.getInstanceAndSetEnv(driver);\n+             ClientAttributeUpdater cau = ClientAttributeUpdater.forClient(getAdminClient(), TEST_REALM_NAME, CLIENT_ID)\n+                     .filterRedirectUris(uri -> uri.contains(REDIRECT_URI))\n+                     .update()) {\n \n-                loginPage.open();\n-                resetPasswordTwiceInNewTab(defaultUser, CLIENT_ID, false, REDIRECT_URI);\n-                assertThat(driver.getCurrentUrl(), Matchers.containsString(REDIRECT_URI));\n+            assertThat(tabUtil.getCountOfTabs(), Matchers.is(1));\n \n-                oauth.openLogout();\n+            loginPage.open();\n+            resetPasswordTwiceInNewTab(defaultUser, CLIENT_ID, false, REDIRECT_URI);\n+            assertThat(driver.getCurrentUrl(), Matchers.containsString(REDIRECT_URI));\n+            oauth.openLogout();\n \n-                loginPage.open();\n-                resetPasswordTwiceInNewTab(defaultUser, CLIENT_ID, true, REDIRECT_URI);\n-                assertThat(driver.getCurrentUrl(), Matchers.containsString(REDIRECT_URI));\n-            }\n+            loginPage.open();\n+            resetPasswordTwiceInNewTab(defaultUser, CLIENT_ID, true, REDIRECT_URI);\n+            assertThat(driver.getCurrentUrl(), Matchers.containsString(REDIRECT_URI));\n         }\n     }\n \n@@ -1199,8 +1198,6 @@ private void resetPasswordTwiceInNewTab(UserRepresentation user, String clientId\n                     .orElse(null);\n \n             assertThat(client, Matchers.notNullValue());\n-            System.out.println(\"HEE\");\n-            System.out.println(client.getRootUrl());\n             updateForgottenPassword(user, clientId, getValidRedirectUriWithRootUrl(client.getRootUrl(), client.getRedirectUris()));\n         } else {\n             doForgotPassword(user.getUsername());",
      "parent_sha": "6c7f66d30ccd37b9dbf004ae97650c76b95219c2"
    }
  },
  {
    "oid": "b5d56e2f3b675d18debfd02604d422f44ffd6d34",
    "message": "[KEYCLOAK-7838] made tests ordered so they don't fail because of order",
    "date": "2018-08-03T18:52:54Z",
    "url": "https://github.com/keycloak/keycloak/commit/b5d56e2f3b675d18debfd02604d422f44ffd6d34",
    "details": {
      "sha": "265c80679b5b854c645cc5dfaea14649794cbf5f",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/client/ClientProtocolMapperTest.java",
      "status": "modified",
      "additions": 12,
      "deletions": 10,
      "changes": 22,
      "blob_url": "https://github.com/keycloak/keycloak/blob/b5d56e2f3b675d18debfd02604d422f44ffd6d34/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadmin%2Fclient%2FClientProtocolMapperTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/b5d56e2f3b675d18debfd02604d422f44ffd6d34/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadmin%2Fclient%2FClientProtocolMapperTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadmin%2Fclient%2FClientProtocolMapperTest.java?ref=b5d56e2f3b675d18debfd02604d422f44ffd6d34",
      "patch": "@@ -19,7 +19,9 @@\n \n import org.junit.After;\n import org.junit.Before;\n+import org.junit.FixMethodOrder;\n import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n import org.keycloak.admin.client.resource.ClientResource;\n import org.keycloak.admin.client.resource.ProtocolMappersResource;\n import org.keycloak.events.admin.OperationType;\n@@ -33,13 +35,13 @@\n import javax.ws.rs.core.Response;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n \n /**\n  *\n  * @author Stan Silvert ssilvert@redhat.com (C) 2016 Red Hat Inc.\n  */\n+@FixMethodOrder(MethodSorters.NAME_ASCENDING)\n public class ClientProtocolMapperTest extends AbstractProtocolMapperTest {\n \n     private ClientResource oidcClientRsc;\n@@ -69,24 +71,24 @@ public void tearDown() {\n     }\n \n     @Test\n-    public void testGetMappersList() {\n+    public void test01GetMappersList() {\n         // Built-in protocol mappers are empty by default\n         assertTrue(oidcMappersRsc.getMappers().isEmpty());\n         assertTrue(samlMappersRsc.getMappers().isEmpty());\n     }\n \n     @Test\n-    public void testCreateOidcMappersFromList() {\n+    public void test02CreateOidcMappersFromList() {\n         testAddAllBuiltinMappers(oidcMappersRsc, \"openid-connect\", AdminEventPaths.clientProtocolMappersPath(oidcClientId));\n     }\n \n     @Test\n-    public void testCreateSamlMappersFromList() {\n+    public void test03CreateSamlMappersFromList() {\n         testAddAllBuiltinMappers(samlMappersRsc, \"saml\", AdminEventPaths.clientProtocolMappersPath(samlClientId));\n     }\n \n     @Test\n-    public void testCreateSamlProtocolMapper() {\n+    public void test04CreateSamlProtocolMapper() {\n \n         //{\"protocol\":\"saml\",\n         // \"config\":{\"role\":\"account.view-profile\",\"new.role.name\":\"new-role-name\"},\n@@ -111,7 +113,7 @@ public void testCreateSamlProtocolMapper() {\n     }\n \n     @Test\n-    public void testCreateOidcProtocolMapper() {\n+    public void test05CreateOidcProtocolMapper() {\n         //{\"protocol\":\"openid-connect\",\n         // \"config\":{\"role\":\"myrole\"},\n         // \"consentRequired\":true,\n@@ -136,7 +138,7 @@ public void testCreateOidcProtocolMapper() {\n     }\n \n     @Test\n-    public void testUpdateSamlMapper() {\n+    public void test06UpdateSamlMapper() {\n         ProtocolMapperRepresentation rep = makeSamlMapper(\"saml-role-name-mapper2\");\n \n         Response resp = samlMappersRsc.createMapper(rep);\n@@ -154,7 +156,7 @@ public void testUpdateSamlMapper() {\n     }\n \n     @Test\n-    public void testUpdateOidcMapper() {\n+    public void test07UpdateOidcMapper() {\n         ProtocolMapperRepresentation rep = makeOidcMapper(\"oidc-hardcoded-role-mapper2\");\n \n         Response resp = oidcMappersRsc.createMapper(rep);\n@@ -172,7 +174,7 @@ public void testUpdateOidcMapper() {\n     }\n \n     @Test\n-    public void testDeleteSamlMapper() {\n+    public void test08DeleteSamlMapper() {\n         ProtocolMapperRepresentation rep = makeSamlMapper(\"saml-role-name-mapper3\");\n \n         Response resp = samlMappersRsc.createMapper(rep);\n@@ -192,7 +194,7 @@ public void testDeleteSamlMapper() {\n     }\n \n     @Test\n-    public void testDeleteOidcMapper() {\n+    public void test09DeleteOidcMapper() {\n         ProtocolMapperRepresentation rep = makeOidcMapper(\"oidc-hardcoded-role-mapper3\");\n \n         Response resp = oidcMappersRsc.createMapper(rep);",
      "parent_sha": "a63676ce935e8cabd07b34d612decb10e78c9396"
    }
  },
  {
    "oid": "e80538c60c9b292dd7693a8319f44f7f0b0febe9",
    "message": "KEYCLOAK-15921 Fix auth server URL",
    "date": "2020-10-23T13:14:01Z",
    "url": "https://github.com/keycloak/keycloak/commit/e80538c60c9b292dd7693a8319f44f7f0b0febe9",
    "details": {
      "sha": "6a290b6fc6685d78383b74814cd0848469c4525a",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcSamlCustomEntityIdBrokerTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/e80538c60c9b292dd7693a8319f44f7f0b0febe9/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fbroker%2FKcSamlCustomEntityIdBrokerTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/e80538c60c9b292dd7693a8319f44f7f0b0febe9/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fbroker%2FKcSamlCustomEntityIdBrokerTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fbroker%2FKcSamlCustomEntityIdBrokerTest.java?ref=e80538c60c9b292dd7693a8319f44f7f0b0febe9",
      "patch": "@@ -50,7 +50,7 @@ public void testCustomEntityNotSet() throws Exception {\n \n                         // Find the Issuer element\n                         Element issuerElement = DocumentUtil.getDirectChildElement(document.getDocumentElement(), ASSERTION_NSURI.get(), \"Issuer\");\n-                        Assert.assertEquals(\"Unexpected Issuer element value\", \"https://localhost:8543/auth/realms/consumer\", issuerElement.getTextContent());\n+                        Assert.assertEquals(\"Unexpected Issuer element value\", getAuthServerRoot() + \"realms/consumer\", issuerElement.getTextContent());\n                     }\n                     catch (Exception ex)\n                     {",
      "parent_sha": "4f93dc83769d778deb236dbc1ebfb1b4da91a3af"
    }
  },
  {
    "oid": "7d75377813f5a914fa2b359b380770b55019601e",
    "message": "KEYCLOAK-8944 Fix ProfileAssume for backward adapter compat. testing",
    "date": "2018-11-27T12:58:41Z",
    "url": "https://github.com/keycloak/keycloak/commit/7d75377813f5a914fa2b359b380770b55019601e",
    "details": {
      "sha": "3aaf44375616ee3d995b2d6bb3969d081f80f5e4",
      "filename": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/ProfileAssume.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/keycloak/keycloak/blob/7d75377813f5a914fa2b359b380770b55019601e/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2FProfileAssume.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/7d75377813f5a914fa2b359b380770b55019601e/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2FProfileAssume.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2FProfileAssume.java?ref=7d75377813f5a914fa2b359b380770b55019601e",
      "patch": "@@ -39,10 +39,11 @@ public class ProfileAssume {\n     static {\n         String host = System.getProperty(\"auth.server.host\", \"localhost\");\n         String port = System.getProperty(\"auth.server.http.port\", \"8180\");\n+        boolean adapterCompatTesting = Boolean.parseBoolean(System.getProperty(\"testsuite.adapter.compat.testing\"));\n \n         String authServerContextRoot = \"http://\" + host + \":\" + port;\n         try {\n-            Keycloak adminClient = AdminClientUtil.createAdminClient(false, authServerContextRoot);\n+            Keycloak adminClient = AdminClientUtil.createAdminClient(adapterCompatTesting, authServerContextRoot);\n             ProfileInfoRepresentation profileInfo = adminClient.serverInfo().getInfo().getProfileInfo();\n             profile = profileInfo.getName();\n             List<String> disabled = profileInfo.getDisabledFeatures();",
      "parent_sha": "3c8dddf33e1c6b750e28bf94b593272f15211fdb"
    }
  },
  {
    "oid": "00ea64d1d4c47fdc796f3401280ab66612d6ca3b",
    "message": "KEYCLOAK-16143 Honor AuthenticationProcessor.forwardedErrorMessage when rendering registration form",
    "date": "2020-11-20T14:05:55Z",
    "url": "https://github.com/keycloak/keycloak/commit/00ea64d1d4c47fdc796f3401280ab66612d6ca3b",
    "details": {
      "sha": "5c7c167a67e6ceb2689cf87360280c95c79af357",
      "filename": "services/src/main/java/org/keycloak/authentication/FormAuthenticationFlow.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/keycloak/keycloak/blob/00ea64d1d4c47fdc796f3401280ab66612d6ca3b/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2FFormAuthenticationFlow.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/00ea64d1d4c47fdc796f3401280ab66612d6ca3b/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2FFormAuthenticationFlow.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2FFormAuthenticationFlow.java?ref=00ea64d1d4c47fdc796f3401280ab66612d6ca3b",
      "patch": "@@ -36,6 +36,7 @@\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.UriInfo;\n import java.net.URI;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.LinkedList;\n@@ -276,7 +277,11 @@ public URI getActionUrl(String executionId, String code) {\n \n     @Override\n     public Response processFlow() {\n-        return renderForm(null, null);\n+\n+        // KEYCLOAK-16143: Propagate forwarded error messages if present\n+        List<FormMessage> errors = processor.forwardedErrorMessage != null ? Collections.singletonList(processor.forwardedErrorMessage) : null;\n+\n+        return renderForm(null, errors);\n     }\n \n     public Response renderForm(MultivaluedMap<String, String> formData, List<FormMessage> errors) {",
      "parent_sha": "a7666d4ccf8b35ce3ba22c5e169c5a60bac19532"
    }
  },
  {
    "oid": "ed895ce02d398dc0a1c87bf7a39965da6c8b82ff",
    "message": "KEYCLOAK-699 Set maximum size of qr-code",
    "date": "2014-10-21T07:57:56Z",
    "url": "https://github.com/keycloak/keycloak/commit/ed895ce02d398dc0a1c87bf7a39965da6c8b82ff",
    "details": {
      "sha": "c846df23c066de3b1e35aaf20311031dbb4ffd3f",
      "filename": "services/src/main/java/org/keycloak/services/resources/QRCodeResource.java",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/keycloak/keycloak/blob/ed895ce02d398dc0a1c87bf7a39965da6c8b82ff/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2FQRCodeResource.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/ed895ce02d398dc0a1c87bf7a39965da6c8b82ff/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2FQRCodeResource.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2FQRCodeResource.java?ref=ed895ce02d398dc0a1c87bf7a39965da6c8b82ff",
      "patch": "@@ -43,14 +43,22 @@ public Response createQrCode(@QueryParam(\"contents\") String contents, @QueryPara\n \n         if (size != null) {\n             String[] s = size.split(\"x\");\n-            width = Integer.parseInt(s[0]);\n-            height = Integer.parseInt(s[1]);\n+            try {\n+                width = Integer.parseInt(s[0]);\n+                height = Integer.parseInt(s[1]);\n+            } catch (Throwable t) {\n+                return Response.status(Response.Status.BAD_REQUEST).build();\n+            }\n         }\n \n         if (contents == null) {\n             return Response.status(Response.Status.BAD_REQUEST).build();\n         }\n \n+        if (width > 1000 || height > 1000 || contents.length() > 1000) {\n+            return Response.status(Response.Status.BAD_REQUEST).build();\n+        }\n+\n         QRCodeWriter writer = new QRCodeWriter();\n         final BitMatrix bitMatrix = writer.encode(contents, BarcodeFormat.QR_CODE, width, height);\n ",
      "parent_sha": "61b71082f7d4d750828c13bd3eb9f230ef95af6a"
    }
  },
  {
    "oid": "da8f2dc2ceacfee11582d4f1d694b5f8540b9849",
    "message": "KEYCLOAK-2500 Add cors headers to .well-known endpoints",
    "date": "2016-02-25T09:05:46Z",
    "url": "https://github.com/keycloak/keycloak/commit/da8f2dc2ceacfee11582d4f1d694b5f8540b9849",
    "details": {
      "sha": "f8c800cfcc511790d3f4cc7227ff3a7c91d0f899",
      "filename": "services/src/main/java/org/keycloak/services/resources/RealmsResource.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/keycloak/keycloak/blob/da8f2dc2ceacfee11582d4f1d694b5f8540b9849/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2FRealmsResource.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/da8f2dc2ceacfee11582d4f1d694b5f8540b9849/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2FRealmsResource.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2FRealmsResource.java?ref=da8f2dc2ceacfee11582d4f1d694b5f8540b9849",
      "patch": "@@ -16,6 +16,7 @@\n  */\n package org.keycloak.services.resources;\n \n+import org.jboss.resteasy.spi.HttpRequest;\n import org.jboss.resteasy.spi.NotFoundException;\n import org.jboss.resteasy.spi.ResteasyProviderFactory;\n import org.keycloak.common.ClientConnection;\n@@ -40,6 +41,7 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.*;\n+import javax.ws.rs.core.Response.ResponseBuilder;\n \n /**\n  * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n@@ -55,6 +57,9 @@ public class RealmsResource {\n     @Context\n     protected ClientConnection clientConnection;\n \n+    @Context\n+    private HttpRequest request;\n+\n     public static UriBuilder realmBaseUrl(UriInfo uriInfo) {\n         UriBuilder baseUriBuilder = uriInfo.getBaseUriBuilder();\n         return realmBaseUrl(baseUriBuilder);\n@@ -180,7 +185,9 @@ public Response getWellKnown(final @PathParam(\"realm\") String name,\n         init(name);\n \n         WellKnownProvider wellKnown = session.getProvider(WellKnownProvider.class, providerName);\n-        return Response.ok(wellKnown.getConfig()).cacheControl(CacheControlUtil.getDefaultCacheControl()).build();\n+\n+        ResponseBuilder responseBuilder = Response.ok(wellKnown.getConfig()).cacheControl(CacheControlUtil.getDefaultCacheControl());\n+        return Cors.add(request, responseBuilder).allowedOrigins(\"*\").build();\n     }\n \n }",
      "parent_sha": "14ea988b248cc71d8b1fec853e3e38e7250db8fe"
    }
  },
  {
    "oid": "0b875d46889189c68e53d8f7cb4f32d2383f866a",
    "message": "Enabled/edited CustomAuthFlowCookieTest",
    "date": "2016-04-28T08:22:54Z",
    "url": "https://github.com/keycloak/keycloak/commit/0b875d46889189c68e53d8f7cb4f32d2383f866a",
    "details": {
      "sha": "1755cb0a2e4ce5483685ba88d25863bec7a8f255",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/custom/CustomAuthFlowCookieTest.java",
      "status": "modified",
      "additions": 19,
      "deletions": 22,
      "changes": 41,
      "blob_url": "https://github.com/keycloak/keycloak/blob/0b875d46889189c68e53d8f7cb4f32d2383f866a/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Faccount%2Fcustom%2FCustomAuthFlowCookieTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/0b875d46889189c68e53d8f7cb4f32d2383f866a/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Faccount%2Fcustom%2FCustomAuthFlowCookieTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Faccount%2Fcustom%2FCustomAuthFlowCookieTest.java?ref=0b875d46889189c68e53d8f7cb4f32d2383f866a",
      "patch": "@@ -16,37 +16,34 @@\n  */\n package org.keycloak.testsuite.account.custom;\n \n-import org.jboss.arquillian.graphene.page.Page;\n-import org.junit.Ignore;\n+import java.util.Arrays;\n+import static org.junit.Assert.assertEquals;\n import org.junit.Test;\n \n import org.junit.Before;\n import org.keycloak.models.AuthenticationExecutionModel.Requirement;\n-import static org.keycloak.testsuite.auth.page.AuthRealm.TEST;\n-import org.keycloak.testsuite.console.page.AdminConsole;\n-import static org.keycloak.testsuite.util.URLAssert.assertCurrentUrlStartsWith;\n-import static org.keycloak.testsuite.util.URLAssert.assertCurrentUrlStartsWithLoginUrlOf;\n+import org.keycloak.representations.idm.ClientRepresentation;\n+import static org.keycloak.testsuite.util.OAuthClient.APP_ROOT;\n \n /**\n  *\n  * @author <a href=\"mailto:vramik@redhat.com\">Vlastislav Ramik</a>\n  */\n-@Ignore\n public class CustomAuthFlowCookieTest extends AbstractCustomAccountManagementTest {\n \n-    @Page\n-    private AdminConsole testRealmAdminConsolePage;\n-    \n-    @Override\n-    public void setDefaultPageUriParameters() {\n-        super.setDefaultPageUriParameters();\n-    }\n-    \n     @Before\n     @Override\n     public void beforeTest() {\n         super.beforeTest();\n-        testRealmAdminConsolePage.setAdminRealm(TEST);\n+        \n+        ClientRepresentation testApp = new ClientRepresentation();\n+        testApp.setClientId(\"test-app\");\n+        testApp.setEnabled(true);\n+        testApp.setBaseUrl(APP_ROOT);\n+        testApp.setRedirectUris(Arrays.asList(new String[]{APP_ROOT + \"/*\"}));\n+        testApp.setAdminUrl(APP_ROOT + \"/logout\");\n+        testApp.setSecret(\"password\");\n+        assertEquals(201, testRealmResource().clients().create(testApp).getStatus());\n     }\n \n     @Test\n@@ -57,9 +54,9 @@ public void cookieAlternative() {\n         testRealmLoginPage.form().login(testUser);\n         \n         //check SSO is working\n-        //navigate to realm-management (different client of the same realm) and verify user is logged in\n-        testRealmAdminConsolePage.navigateTo();\n-        assertCurrentUrlStartsWith(testRealmAdminConsolePage);\n+        //navigate to different client of the same realm and verify user is logged in\n+        oauth.openLoginForm();\n+        assertEquals(\"AUTH_RESPONSE\", driver.getTitle());\n     }\n     \n     @Test\n@@ -72,8 +69,8 @@ public void disabledCookie() {\n         testRealmLoginPage.form().login(testUser);\n         \n         //SSO shouln't work\n-        //navigate to realm-management and verify user is not logged in\n-        testRealmAdminConsolePage.navigateTo();\n-        assertCurrentUrlStartsWithLoginUrlOf(testRealmLoginPage);\n+        //navigate to different client of the same realm and verify user is not logged in\n+        oauth.openLoginForm();\n+        assertEquals(\"Log in to test\", driver.getTitle());\n     }\n }",
      "parent_sha": "acba6cd2100d48842fc0dcbb8f4cc0e023f047bd"
    }
  },
  {
    "oid": "9bb2402d3b604708d989fe8c7b03c94636d7d0eb",
    "message": "Propagate Username LDAP Attribute changes to the username mapper to keep mapper and main LDAP storage config in synch.\n\nClosed #27984\n\nSigned-off-by: Stefan Guilhen <sguilhen@redhat.com>",
    "date": "2024-04-03T12:11:55Z",
    "url": "https://github.com/keycloak/keycloak/commit/9bb2402d3b604708d989fe8c7b03c94636d7d0eb",
    "details": {
      "sha": "e49be2eb8002c607a7114d3419d4c0c5b1772ac8",
      "filename": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProviderFactory.java",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/keycloak/keycloak/blob/9bb2402d3b604708d989fe8c7b03c94636d7d0eb/federation%2Fldap%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2Fldap%2FLDAPStorageProviderFactory.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/9bb2402d3b604708d989fe8c7b03c94636d7d0eb/federation%2Fldap%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2Fldap%2FLDAPStorageProviderFactory.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/federation%2Fldap%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2Fldap%2FLDAPStorageProviderFactory.java?ref=9bb2402d3b604708d989fe8c7b03c94636d7d0eb",
      "patch": "@@ -23,7 +23,6 @@\n import org.keycloak.component.ComponentModel;\n import org.keycloak.component.ComponentValidationException;\n import org.keycloak.federation.kerberos.CommonKerberosConfig;\n-import org.keycloak.federation.kerberos.KerberosConfig;\n import org.keycloak.federation.kerberos.impl.KerberosServerSubjectAuthenticator;\n import org.keycloak.federation.kerberos.impl.KerberosUsernamePasswordAuthenticator;\n import org.keycloak.federation.kerberos.impl.SPNEGOAuthenticator;\n@@ -473,6 +472,19 @@ public void onUpdate(KeycloakSession session, RealmModel realm, ComponentModel o\n             CredentialHelper.setOrReplaceAuthenticationRequirement(session, realm, CredentialRepresentation.KERBEROS,\n                     AuthenticationExecutionModel.Requirement.DISABLED, AuthenticationExecutionModel.Requirement.ALTERNATIVE);\n         } // else: keep current settings\n+\n+        LDAPConfig oldConfig = new LDAPConfig(oldModel.getConfig());\n+        LDAPConfig newConfig = new LDAPConfig(newModel.getConfig());\n+        if (!oldConfig.getUsernameLdapAttribute().equals(newConfig.getUsernameLdapAttribute())) {\n+            // propagate username LDAP attribute change to the username mapper.\n+            ComponentModel usernameMapperModel = realm.getComponentsStream(oldModel.getId(), LDAPStorageMapper.class.getName())\n+                    .filter(mapper -> \"username\".equals(mapper.getName()))\n+                    .findFirst().orElse(null);\n+            if (usernameMapperModel != null) {\n+                usernameMapperModel.getConfig().putSingle(UserAttributeLDAPStorageMapper.LDAP_ATTRIBUTE, newConfig.getUsernameLdapAttribute());\n+                realm.updateComponent(usernameMapperModel);\n+            }\n+        }\n     }\n \n     @Override",
      "parent_sha": "4ec9fea8f734844f4563bba41b017edfbf4f3a78"
    }
  },
  {
    "oid": "3d370f9d11fad345f7a1753a8be7459a979fb9d9",
    "message": "KEYCLOAK-2854 Fix Client Settings Console UI test",
    "date": "2016-04-19T15:54:58Z",
    "url": "https://github.com/keycloak/keycloak/commit/3d370f9d11fad345f7a1753a8be7459a979fb9d9",
    "details": {
      "sha": "4b00a4e552281fde81e8c9e6b27a8534bb16a509",
      "filename": "testsuite/integration-arquillian/tests/other/console/src/main/java/org/keycloak/testsuite/console/page/clients/settings/ClientSettingsForm.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/keycloak/keycloak/blob/3d370f9d11fad345f7a1753a8be7459a979fb9d9/testsuite%2Fintegration-arquillian%2Ftests%2Fother%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fconsole%2Fpage%2Fclients%2Fsettings%2FClientSettingsForm.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/3d370f9d11fad345f7a1753a8be7459a979fb9d9/testsuite%2Fintegration-arquillian%2Ftests%2Fother%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fconsole%2Fpage%2Fclients%2Fsettings%2FClientSettingsForm.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fother%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fconsole%2Fpage%2Fclients%2Fsettings%2FClientSettingsForm.java?ref=3d370f9d11fad345f7a1753a8be7459a979fb9d9",
      "patch": "@@ -51,20 +51,20 @@ public class ClientSettingsForm extends CreateClientForm {\n \n     @FindBy(id = \"newRedirectUri\")\n     private WebElement newRedirectUriInput;\n-    @FindBy(xpath = \".//i[contains(@data-ng-click, 'newRedirectUri') and @class='fa fa-plus']\")\n+    @FindBy(xpath = \".//button[contains(@data-ng-click,'addRedirectUri')]\")\n     private WebElement newRedirectUriSubmit;\n     @FindBy(xpath = \".//input[@ng-model='client.redirectUris[i]']\")\n     private List<WebElement> redirectUriInputs;\n-    @FindBy(xpath = \".//i[contains(@data-ng-click, 'deleteRedirectUri') and @class='fa fa-minus']\")\n+    @FindBy(xpath = \".//button[contains(@data-ng-click, 'deleteRedirectUri')]\")\n     private List<WebElement> deleteRedirectUriIcons;\n \n     @FindBy(id = \"newWebOrigin\")\n     private WebElement newWebOriginInput;\n-    @FindBy(xpath = \".//i[contains(@data-ng-click, 'newWebOrigin')]\")\n+    @FindBy(xpath = \".//button[contains(@data-ng-click,'addWebOrigin')]\")\n     private WebElement newWebOriginSubmit;\n     @FindBy(xpath = \".//input[ng-model='client.webOrigins[i]']\")\n     private List<WebElement> webOriginInputs;\n-    @FindBy(xpath = \".//i[contains(@data-ng-click, 'deleteWebOrigin')]\")\n+    @FindBy(xpath = \".//button[contains(@data-ng-click, 'deleteWebOrigin')]\")\n     private List<WebElement> deleteWebOriginIcons;\n \n     public enum OidcAccessType {",
      "parent_sha": "bead313e27932204c2a6e3bc0ba96e88660d00d8"
    }
  },
  {
    "oid": "716afe94044b057261e8c98d59f3abd0d249d615",
    "message": "KEYCLOAK-18075 - Remove \"role_list\" from expected default client scopes",
    "date": "2021-05-13T08:30:12Z",
    "url": "https://github.com/keycloak/keycloak/commit/716afe94044b057261e8c98d59f3abd0d249d615",
    "details": {
      "sha": "47c1b09796066c01645ea9bf29a9040dc9a15879",
      "filename": "testsuite/integration-arquillian/tests/other/console/src/test/java/org/keycloak/testsuite/console/clients/ClientClientScopesTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/716afe94044b057261e8c98d59f3abd0d249d615/testsuite%2Fintegration-arquillian%2Ftests%2Fother%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fconsole%2Fclients%2FClientClientScopesTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/716afe94044b057261e8c98d59f3abd0d249d615/testsuite%2Fintegration-arquillian%2Ftests%2Fother%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fconsole%2Fclients%2FClientClientScopesTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fother%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fconsole%2Fclients%2FClientClientScopesTest.java?ref=716afe94044b057261e8c98d59f3abd0d249d615",
      "patch": "@@ -98,7 +98,7 @@ public void testSetupClientScopes() {\n \n         // Retrieve client through adminClient\n         found = findClientByClientId(TEST_CLIENT_ID);\n-        Assert.assertNames(found.getDefaultClientScopes(), \"email\", \"role_list\"); // SAML client scope 'role_list' is included too in the rep\n+        Assert.assertNames(found.getDefaultClientScopes(), \"email\");\n         Assert.assertNames(found.getOptionalClientScopes(), \"profile\", \"address\", \"phone\", \"offline_access\", \"microprofile-jwt\");\n \n ",
      "parent_sha": "a6d4316084b6d27c11b297a2c14ed220599bfc42"
    }
  },
  {
    "oid": "c852d6d817fd5c252f28cf1c5997b04d4ded0eb4",
    "message": "KEYCLOAK-3642 Favor StreamUtil over IOUTils in ScriptBasedAuthenticatorFactory\n\nThe dependency on commons-io through the use of IOUtils in\nScriptBasedAuthenticatorFactory resulted in\nNoClassDefFoundError org/apache/commons/io/IOUtils when building the\nkeycloak-distribution.\n\nWe now use the StreamUtil from keycloak-common to avoid this dependency.",
    "date": "2016-10-03T11:33:53Z",
    "url": "https://github.com/keycloak/keycloak/commit/c852d6d817fd5c252f28cf1c5997b04d4ded0eb4",
    "details": {
      "sha": "f9b2ff287a3d56adc9c4fd7216b2814b0971bf4a",
      "filename": "services/src/main/java/org/keycloak/authentication/authenticators/browser/ScriptBasedAuthenticatorFactory.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/keycloak/keycloak/blob/c852d6d817fd5c252f28cf1c5997b04d4ded0eb4/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fbrowser%2FScriptBasedAuthenticatorFactory.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/c852d6d817fd5c252f28cf1c5997b04d4ded0eb4/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fbrowser%2FScriptBasedAuthenticatorFactory.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fbrowser%2FScriptBasedAuthenticatorFactory.java?ref=c852d6d817fd5c252f28cf1c5997b04d4ded0eb4",
      "patch": "@@ -16,11 +16,11 @@\n  */\n package org.keycloak.authentication.authenticators.browser;\n \n-import org.apache.commons.io.IOUtils;\n import org.jboss.logging.Logger;\n import org.keycloak.Config;\n import org.keycloak.authentication.Authenticator;\n import org.keycloak.authentication.AuthenticatorFactory;\n+import org.keycloak.common.util.StreamUtil;\n import org.keycloak.models.AuthenticationExecutionModel;\n import org.keycloak.models.KeycloakSession;\n import org.keycloak.models.KeycloakSessionFactory;\n@@ -138,7 +138,7 @@ public List<ProviderConfigProperty> getConfigProperties() {\n \n         String scriptTemplate = \"//enter your script code here\";\n         try {\n-            scriptTemplate = IOUtils.toString(getClass().getResource(\"/scripts/authenticator-template.js\"));\n+            scriptTemplate = StreamUtil.readString(getClass().getResourceAsStream(\"/scripts/authenticator-template.js\"));\n         } catch (IOException ioe) {\n             LOGGER.warn(ioe);\n         }",
      "parent_sha": "a743600b344763ce2e7f70a625f590a8425fc5f3"
    }
  },
  {
    "oid": "83255e1b088c672c51ee650aca286071170e394d",
    "message": "KEYCLOAK-13922 MigrationModelTest failing in latest master",
    "date": "2020-04-22T12:05:34Z",
    "url": "https://github.com/keycloak/keycloak/commit/83255e1b088c672c51ee650aca286071170e394d",
    "details": {
      "sha": "8a1ba3e755247a99cde2034acd2b84757c087e0f",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/model/MigrationModelTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/83255e1b088c672c51ee650aca286071170e394d/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fmodel%2FMigrationModelTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/83255e1b088c672c51ee650aca286071170e394d/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fmodel%2FMigrationModelTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fmodel%2FMigrationModelTest.java?ref=83255e1b088c672c51ee650aca286071170e394d",
      "patch": "@@ -27,7 +27,7 @@ public void addTestRealms(List<RealmRepresentation> testRealms) {\n     @Test\n     public void test() {\n         testingClient.server().run(session -> {\n-            String currentVersion = Version.VERSION_KEYCLOAK.replaceAll(\"^(\\\\d(?:\\\\.\\\\d){0,2}).*$\", \"$1\");\n+            String currentVersion = Version.VERSION_KEYCLOAK.replaceAll(\"^(\\\\d+(?:\\\\.\\\\d+){0,2}).*$\", \"$1\");\n \n             JpaConnectionProvider p = session.getProvider(JpaConnectionProvider.class);\n             EntityManager em = p.getEntityManager();",
      "parent_sha": "12e53e6f110ecad2af36ebb4030086cdc82078f8"
    }
  },
  {
    "oid": "fa8b272e764d9eedb74e0773da5f8bedb146047b",
    "message": "KEYCLOAK-2900",
    "date": "2016-04-25T11:20:29Z",
    "url": "https://github.com/keycloak/keycloak/commit/fa8b272e764d9eedb74e0773da5f8bedb146047b",
    "details": {
      "sha": "54becb930aab982b1b1d4264c14e296c29e4ff43",
      "filename": "services/src/main/java/org/keycloak/services/resources/WelcomeResource.java",
      "status": "modified",
      "additions": 21,
      "deletions": 13,
      "changes": 34,
      "blob_url": "https://github.com/keycloak/keycloak/blob/fa8b272e764d9eedb74e0773da5f8bedb146047b/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2FWelcomeResource.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/fa8b272e764d9eedb74e0773da5f8bedb146047b/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2FWelcomeResource.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2FWelcomeResource.java?ref=fa8b272e764d9eedb74e0773da5f8bedb146047b",
      "patch": "@@ -81,8 +81,6 @@ public class WelcomeResource {\n     @Context\n     private KeycloakSession session;\n \n-    private String stateChecker;\n-\n     public WelcomeResource(boolean bootstrap) {\n         this.bootstrap = bootstrap;\n     }\n@@ -119,8 +117,9 @@ public Response createUser(final MultivaluedMap<String, String> formData) {\n                 throw new WebApplicationException(Response.Status.BAD_REQUEST);\n             }\n \n-            String stateChecker = formData.getFirst(\"stateChecker\");\n-            csrfCheck(stateChecker);\n+            String cookieStateChecker = getCsrfCookie();\n+            String formStateChecker = formData.getFirst(\"stateChecker\");\n+            csrfCheck(cookieStateChecker, formStateChecker);\n \n             String username = formData.getFirst(\"username\");\n             String password = formData.getFirst(\"password\");\n@@ -181,10 +180,13 @@ private Response createWelcomePage(String successMessage, String errorMessage) {\n             Map<String, Object> map = new HashMap<>();\n             map.put(\"bootstrap\", bootstrap);\n             if (bootstrap) {\n-                map.put(\"localUser\", isLocal());\n+                boolean isLocal = isLocal();\n+                map.put(\"localUser\", isLocal);\n \n-                updateCsrfChecks();\n-                map.put(\"stateChecker\", stateChecker);\n+                if (isLocal) {\n+                    String stateChecker = updateCsrfChecks();\n+                    map.put(\"stateChecker\", stateChecker);\n+                }\n             }\n             if (successMessage != null) {\n                 map.put(\"successMessage\", successMessage);\n@@ -230,20 +232,26 @@ private boolean isLocal() {\n         }\n     }\n \n-    private void updateCsrfChecks() {\n-        Cookie cookie = headers.getCookies().get(KEYCLOAK_STATE_CHECKER);\n-        if (cookie != null) {\n-            stateChecker = cookie.getValue();\n+    private String updateCsrfChecks() {\n+        String stateChecker = getCsrfCookie();\n+        if (stateChecker != null) {\n+            return stateChecker;\n         } else {\n             stateChecker = KeycloakModelUtils.generateSecret();\n             String cookiePath = uriInfo.getPath();\n             boolean secureOnly = uriInfo.getRequestUri().getScheme().equalsIgnoreCase(\"https\");\n             CookieHelper.addCookie(KEYCLOAK_STATE_CHECKER, stateChecker, cookiePath, null, null, -1, secureOnly, true);\n+            return stateChecker;\n         }\n     }\n \n-    private void csrfCheck(String stateChecker) {\n-        if (!this.stateChecker.equals(stateChecker)) {\n+    private String getCsrfCookie() {\n+        Cookie cookie = headers.getCookies().get(KEYCLOAK_STATE_CHECKER);\n+        return cookie==null ? null : cookie.getValue();\n+    }\n+\n+    private void csrfCheck(String cookieStateChecker, String formStateChecker) {\n+        if (cookieStateChecker == null || !cookieStateChecker.equals(formStateChecker)) {\n             throw new ForbiddenException();\n         }\n     }",
      "parent_sha": "6c3d31dd4ce0315e6e651b4db054ba36cba421a5"
    }
  },
  {
    "oid": "41839c61ca1041c9074f0efb36e7905c0211bcf3",
    "message": "Cleanup method that should have been private\n\nCloses #25154\n\nSigned-off-by: Alexander Schwartz <aschwart@redhat.com>",
    "date": "2025-02-11T15:05:37Z",
    "url": "https://github.com/keycloak/keycloak/commit/41839c61ca1041c9074f0efb36e7905c0211bcf3",
    "details": {
      "sha": "3d4590214f17bc256b3195dbaf92fee3371baa8f",
      "filename": "services/src/main/java/org/keycloak/authentication/requiredactions/VerifyEmail.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/41839c61ca1041c9074f0efb36e7905c0211bcf3/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Frequiredactions%2FVerifyEmail.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/41839c61ca1041c9074f0efb36e7905c0211bcf3/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Frequiredactions%2FVerifyEmail.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Frequiredactions%2FVerifyEmail.java?ref=41839c61ca1041c9074f0efb36e7905c0211bcf3",
      "patch": "@@ -76,7 +76,7 @@ public void requiredActionChallenge(RequiredActionContext context) {\n         process(context, true);\n     }\n \n-    public void process(RequiredActionContext context, boolean isChallenge) {\n+    private void process(RequiredActionContext context, boolean isChallenge) {\n         AuthenticationSessionModel authSession = context.getAuthenticationSession();\n \n         if (context.getUser().isEmailVerified()) {",
      "parent_sha": "b8c1cd410f4499c77a8b372decfe1718b80ccfd2"
    }
  },
  {
    "oid": "3d5055d9201c4e0fbf2f6c4bdcebcb5898f78817",
    "message": "KEYCLOAK-2737 Handle the databaseSchema: 'validate' against empty database",
    "date": "2016-04-06T09:43:41Z",
    "url": "https://github.com/keycloak/keycloak/commit/3d5055d9201c4e0fbf2f6c4bdcebcb5898f78817",
    "details": {
      "sha": "7b18863641181191c439b6a790a1aab7265d5934",
      "filename": "model/mongo/src/main/java/org/keycloak/connections/mongo/updater/impl/DefaultMongoUpdaterProvider.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/keycloak/keycloak/blob/3d5055d9201c4e0fbf2f6c4bdcebcb5898f78817/model%2Fmongo%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fconnections%2Fmongo%2Fupdater%2Fimpl%2FDefaultMongoUpdaterProvider.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/3d5055d9201c4e0fbf2f6c4bdcebcb5898f78817/model%2Fmongo%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fconnections%2Fmongo%2Fupdater%2Fimpl%2FDefaultMongoUpdaterProvider.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Fmongo%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fconnections%2Fmongo%2Fupdater%2Fimpl%2FDefaultMongoUpdaterProvider.java?ref=3d5055d9201c4e0fbf2f6c4bdcebcb5898f78817",
      "patch": "@@ -114,8 +114,11 @@ public void validate(KeycloakSession session, DB db) {\n         List<Update> updatesToRun = getUpdatesToRun(executed);\n \n         if (!updatesToRun.isEmpty()) {\n-            String errorMessage = String.format(\"Failed to validate Mongo database schema. Schema needs updating database from %s to %s. Please change databaseSchema to 'update'\",\n+            String errorMessage = (executed.isEmpty())\n+                    ? \"Failed to validate Mongo database schema. Database is empty. Please change databaseSchema to 'update'\"\n+                    : String.format(\"Failed to validate Mongo database schema. Schema needs updating database from %s to %s. Please change databaseSchema to 'update'\",\n                     executed.get(executed.size() - 1), updatesToRun.get(updatesToRun.size() - 1).getId());\n+\n             throw new RuntimeException(errorMessage);\n         } else {\n             log.debug(\"Validation passed. Database is up to date\");",
      "parent_sha": "4db73942e619ca78ea1a1f342685c98547ca991f"
    }
  },
  {
    "oid": "51cc2a85c8a5118b2bb62b01d3cbf6bb171927e8",
    "message": "Refactor registry and fix a bug introduced by page supplier PR (#31322)\n\nSigned-off-by: stianst <stianst@gmail.com>",
    "date": "2024-07-16T12:02:30Z",
    "url": "https://github.com/keycloak/keycloak/commit/51cc2a85c8a5118b2bb62b01d3cbf6bb171927e8",
    "details": {
      "sha": "317cdabd2a2f162b4987ca5d1c52a3af5a21d4f0",
      "filename": "test-poc/framework/src/main/java/org/keycloak/test/framework/injection/Registry.java",
      "status": "modified",
      "additions": 25,
      "deletions": 2,
      "changes": 27,
      "blob_url": "https://github.com/keycloak/keycloak/blob/51cc2a85c8a5118b2bb62b01d3cbf6bb171927e8/test-poc%2Fframework%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftest%2Fframework%2Finjection%2FRegistry.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/51cc2a85c8a5118b2bb62b01d3cbf6bb171927e8/test-poc%2Fframework%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftest%2Fframework%2Finjection%2FRegistry.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/test-poc%2Fframework%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftest%2Fframework%2Finjection%2FRegistry.java?ref=51cc2a85c8a5118b2bb62b01d3cbf6bb171927e8",
      "patch": "@@ -86,6 +86,13 @@ public <T> T getDependency(Class<T> typeClass, InstanceWrapper dependent) {\n     }\n \n     public void beforeEach(Object testInstance) {\n+        findRequestedInstances(testInstance);\n+        matchDeployedInstancesWithRequestedInstances();\n+        deployRequestedInstances();\n+        injectFields(testInstance);\n+    }\n+\n+    private void findRequestedInstances(Object testInstance) {\n         Class testClass = testInstance.getClass();\n         RequestedInstance requestedServerInstance = createRequestedInstance(testClass.getAnnotations(), null);\n         requestedInstances.add(requestedServerInstance);\n@@ -101,7 +108,9 @@ public void beforeEach(Object testInstance) {\n             LOGGER.tracev(\"Requested suppliers: {0}\",\n                     requestedInstances.stream().map(r -> r.getSupplier().getClass().getSimpleName()).collect(Collectors.joining(\", \")));\n         }\n+    }\n \n+    private void matchDeployedInstancesWithRequestedInstances() {\n         Iterator<RequestedInstance<?, ?>> itr = requestedInstances.iterator();\n         while (itr.hasNext()) {\n             RequestedInstance<?, ?> requestedInstance = itr.next();\n@@ -124,8 +133,10 @@ public void beforeEach(Object testInstance) {\n                 }\n             }\n         }\n+    }\n \n-        itr = requestedInstances.iterator();\n+    private void deployRequestedInstances() {\n+        Iterator<RequestedInstance<?, ?>> itr = requestedInstances.iterator();\n         while (itr.hasNext()) {\n             RequestedInstance requestedInstance = itr.next();\n \n@@ -140,7 +151,9 @@ public void beforeEach(Object testInstance) {\n \n             itr.remove();\n         }\n+    }\n \n+    private void injectFields(Object testInstance) {\n         for (Field f : testInstance.getClass().getDeclaredFields()) {\n             InstanceWrapper<?, ?> instance = getDeployedInstance(f.getType(), f.getAnnotations());\n             try {\n@@ -208,7 +221,17 @@ private void destroy(InstanceWrapper instanceWrapper) {\n     }\n \n     private InstanceWrapper getDeployedInstance(RequestedInstance requestedInstance) {\n-        return deployedInstances.stream().filter(i -> i.getValue().equals(requestedInstance.getValueType())).findFirst().orElse(null);\n+        Class requestedValueType = requestedInstance.getValueType();\n+        for (InstanceWrapper<?, ?> i : deployedInstances) {\n+            if (requestedValueType != null) {\n+                if (requestedValueType.isAssignableFrom(i.getValue().getClass())) {\n+                    return i;\n+                }\n+            } else if (i.getSupplier().equals(requestedInstance.getSupplier())) {\n+                return i;\n+            }\n+        }\n+        return null;\n     }\n \n     private void loadSuppliers() {",
      "parent_sha": "f469994149d62e41e29f90359f102e1a240a03f2"
    }
  },
  {
    "oid": "1b06c4cf6cc2c8342723a1777c8492b6ccd127e9",
    "message": "Use cached policy store in Infinispan PolicyAdapter (#20566)",
    "date": "2023-05-29T13:39:24Z",
    "url": "https://github.com/keycloak/keycloak/commit/1b06c4cf6cc2c8342723a1777c8492b6ccd127e9",
    "details": {
      "sha": "0dfc41a15cd8f46986335dbc63f31c5690e12377",
      "filename": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/authorization/PolicyAdapter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/1b06c4cf6cc2c8342723a1777c8492b6ccd127e9/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2Fauthorization%2FPolicyAdapter.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/1b06c4cf6cc2c8342723a1777c8492b6ccd127e9/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2Fauthorization%2FPolicyAdapter.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2Fauthorization%2FPolicyAdapter.java?ref=1b06c4cf6cc2c8342723a1777c8492b6ccd127e9",
      "patch": "@@ -206,7 +206,7 @@ public Set<Policy> getAssociatedPolicies() {\n         }\n         if (associatedPolicies != null) return associatedPolicies;\n         associatedPolicies = new HashSet<>();\n-        PolicyStore policyStore = cacheSession.getPolicyStoreDelegate();\n+        PolicyStore policyStore = cacheSession.getPolicyStore();\n         String resourceServerId = cached.getResourceServerId();\n         for (String id : cached.getAssociatedPoliciesIds(modelSupplier)) {\n             Policy policy = policyStore.findById(InfinispanCacheStoreFactoryProviderFactory.NULL_REALM, cacheSession.getResourceServerStore().findById(InfinispanCacheStoreFactoryProviderFactory.NULL_REALM, resourceServerId), id);",
      "parent_sha": "b41904bf04d7512594539e9fd73d78abf994b516"
    }
  },
  {
    "oid": "590944b11195c6a7b7f38e3075c34af3f639d035",
    "message": "Use proper field type for the IPA-Tuura federation provider password\n\n#Closes 35529\n\nSigned-off-by: Stefan Guilhen <sguilhen@redhat.com>",
    "date": "2024-12-03T08:27:27Z",
    "url": "https://github.com/keycloak/keycloak/commit/590944b11195c6a7b7f38e3075c34af3f639d035",
    "details": {
      "sha": "22006f187f8f1f1e184d4deabf4fcb44bfc37369",
      "filename": "federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProviderFactory.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/keycloak/keycloak/blob/590944b11195c6a7b7f38e3075c34af3f639d035/federation%2Fipatuura%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fipatuura_user_spi%2FIpatuuraUserStorageProviderFactory.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/590944b11195c6a7b7f38e3075c34af3f639d035/federation%2Fipatuura%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fipatuura_user_spi%2FIpatuuraUserStorageProviderFactory.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/federation%2Fipatuura%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fipatuura_user_spi%2FIpatuuraUserStorageProviderFactory.java?ref=590944b11195c6a7b7f38e3075c34af3f639d035",
      "patch": "@@ -53,13 +53,16 @@ public class IpatuuraUserStorageProviderFactory implements UserStorageProviderFa\n         configMetadata = ProviderConfigurationBuilder.create()\n                 /* SCIMv2 server url */\n                 .property().name(\"scimurl\").type(ProviderConfigProperty.STRING_TYPE).label(\"Ipatuura Server URL\")\n-                .helpText(\"Backend ipatuura server URL in the format: server.example.com:8080\").add()\n+                .helpText(\"Backend ipatuura server URL in the format: server.example.com:8080\")\n+                .add()\n                 /* Login username, used to auth to make HTTP requests */\n                 .property().name(\"loginusername\").type(ProviderConfigProperty.STRING_TYPE).label(\"Login username\")\n-                .helpText(\"username to authenticate through the login page\").add()\n+                .helpText(\"Username to authenticate through the server\")\n+                .add()\n                 /* Login password, used to auth to make HTTP requests */\n-                .property().name(\"loginpassword\").type(ProviderConfigProperty.STRING_TYPE).label(\"Login password\")\n-                .helpText(\"password to authenticate through the login page\").add().build();\n+                .property().name(\"loginpassword\").type(ProviderConfigProperty.PASSWORD).label(\"Login password\")\n+                .helpText(\"password to authenticate through the server\")\n+                .secret(true).add().build();\n     }\n \n     @Override",
      "parent_sha": "b98cd12b5821b524f2f63c06fee0b861c6e00cfc"
    }
  },
  {
    "oid": "680473bafe782c78d23fe3c64b9a7da05ef7e8ab",
    "message": " fix for issue Attributes missing in OrganizationRepresentation when using Admin REST API in Keycloak 26\n\nSigned-off-by: Himanshi Gupta <higupta@redhat.com>",
    "date": "2024-11-13T19:25:17Z",
    "url": "https://github.com/keycloak/keycloak/commit/680473bafe782c78d23fe3c64b9a7da05ef7e8ab",
    "details": {
      "sha": "f14df319a36de855ac6ebd5cec7c42928dc99cc3",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/organization/admin/OrganizationTest.java",
      "status": "modified",
      "additions": 15,
      "deletions": 9,
      "changes": 24,
      "blob_url": "https://github.com/keycloak/keycloak/blob/680473bafe782c78d23fe3c64b9a7da05ef7e8ab/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Forganization%2Fadmin%2FOrganizationTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/680473bafe782c78d23fe3c64b9a7da05ef7e8ab/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Forganization%2Fadmin%2FOrganizationTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Forganization%2Fadmin%2FOrganizationTest.java?ref=680473bafe782c78d23fe3c64b9a7da05ef7e8ab",
      "patch": "@@ -21,6 +21,7 @@\n import static org.hamcrest.Matchers.containsInAnyOrder;\n import static org.hamcrest.Matchers.empty;\n import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasEntry;\n import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.not;\n@@ -43,6 +44,7 @@\n import jakarta.ws.rs.NotFoundException;\n import jakarta.ws.rs.core.Response;\n import jakarta.ws.rs.core.Response.Status;\n+\n import java.io.IOException;\n import java.util.stream.IntStream;\n \n@@ -115,7 +117,7 @@ public void testGetAll() {\n         List<OrganizationRepresentation> existing = testRealm().organizations().getAll();\n         assertFalse(existing.isEmpty());\n         assertThat(expected, containsInAnyOrder(existing.toArray()));\n-        Assert.assertTrue(existing.stream().map(OrganizationRepresentation::getAttributes).filter(Objects::nonNull).findAny().isEmpty());\n+        Assert.assertTrue(existing.stream().map(OrganizationRepresentation::getAttributes).anyMatch(Objects::nonNull));\n     }\n \n     @Test\n@@ -135,7 +137,7 @@ public void testSearch() {\n         assertThat(orgRep.getDomains(), hasSize(2));\n         assertThat(orgRep.getDomain(\"wayneind.com\"), not(nullValue()));\n         assertThat(orgRep.getDomain(\"wayneind-gotham.com\"), not(nullValue()));\n-        assertThat(orgRep.getAttributes(), nullValue());\n+        assertThat(orgRep.getAttributes(), hasEntry(\"key\", List.of(\"value1\", \"value2\")));\n \n         existing = testRealm().organizations().search(\"gtbank.net\", true, 0, 10);\n         assertThat(existing, hasSize(1));\n@@ -145,7 +147,7 @@ public void testSearch() {\n         assertThat(orgRep.getDomains(), hasSize(2));\n         assertThat(orgRep.getDomain(\"gtbank.com\"), not(nullValue()));\n         assertThat(orgRep.getDomain(\"gtbank.net\"), not(nullValue()));\n-        assertThat(orgRep.getAttributes(), nullValue());\n+\n \n         existing = testRealm().organizations().search(\"nonexistent.org\", true, 0, 10);\n         assertThat(existing, is(empty()));\n@@ -268,7 +270,8 @@ public void testDelete() {\n         try {\n             organization.toRepresentation();\n             fail(\"should be deleted\");\n-        } catch (NotFoundException ignore) {}\n+        } catch (NotFoundException ignore) {\n+        }\n     }\n \n     @Test\n@@ -414,15 +417,18 @@ public void testDisabledOrganizationProvider() throws IOException {\n             try {\n                 testRealm().organizations().getAll();\n                 fail(\"Expected NotFoundException\");\n-            } catch (NotFoundException expected) {}\n+            } catch (NotFoundException expected) {\n+            }\n             try {\n                 testRealm().organizations().search(\"*\");\n                 fail(\"Expected NotFoundException\");\n-            } catch (NotFoundException expected) {}\n+            } catch (NotFoundException expected) {\n+            }\n             try {\n                 testRealm().organizations().get(existing.getId()).toRepresentation();\n                 fail(\"Expected NotFoundException\");\n-            } catch (NotFoundException expected) {}\n+            } catch (NotFoundException expected) {\n+            }\n         }\n     }\n \n@@ -461,8 +467,8 @@ public void testDeleteRealm() {\n     @Test\n     public void testCount() {\n         List<String> orgIds = IntStream.range(0, 10)\n-             .mapToObj(i -> createOrganization(\"kc.org.\" + i).getId())\n-             .collect(Collectors.toList());\n+                .mapToObj(i -> createOrganization(\"kc.org.\" + i).getId())\n+                .collect(Collectors.toList());\n \n         getTestingClient().server(TEST_REALM_NAME).run((RunOnServer) session -> {\n             OrganizationProvider orgProvider = session.getProvider(OrganizationProvider.class);",
      "parent_sha": "8c61e2e250dd61f7a1f579531114f588d1a874c6"
    }
  },
  {
    "oid": "4f9012461272cc1ac4a5b95dfba8fec4489014cf",
    "message": "Print 'key' in ReadOnlyAttributeUnchangedValidator failure log message\n\nThis change is quite useful for debugging and helps identify which specific attribute makes the update fail. Currently, the full pattern is printed which consists of multiple attributes.",
    "date": "2023-09-11T13:45:08Z",
    "url": "https://github.com/keycloak/keycloak/commit/4f9012461272cc1ac4a5b95dfba8fec4489014cf",
    "details": {
      "sha": "4574f17115c4eec22873e88608efb404f522f023",
      "filename": "services/src/main/java/org/keycloak/userprofile/validator/ReadOnlyAttributeUnchangedValidator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/4f9012461272cc1ac4a5b95dfba8fec4489014cf/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fuserprofile%2Fvalidator%2FReadOnlyAttributeUnchangedValidator.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/4f9012461272cc1ac4a5b95dfba8fec4489014cf/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fuserprofile%2Fvalidator%2FReadOnlyAttributeUnchangedValidator.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fuserprofile%2Fvalidator%2FReadOnlyAttributeUnchangedValidator.java?ref=4f9012461272cc1ac4a5b95dfba8fec4489014cf",
      "patch": "@@ -82,7 +82,7 @@ public ValidationContext validate(Object input, String inputHint, ValidationCont\n         }\n \n         if (!isUnchanged(existingValue, value)) {\n-            logger.warnf(\"Attempt to edit denied attribute '%s' of user '%s'\", pattern, user == null ? \"new user\" : user.getFirstAttribute(UserModel.USERNAME));\n+            logger.warnf(\"Attempt to edit denied for attribute '%s' with pattern '%s' of user '%s'\", key, pattern, user == null ? \"new user\" : user.getFirstAttribute(UserModel.USERNAME));\n             context.addError(new ValidationError(ID, key, UPDATE_READ_ONLY_ATTRIBUTES_REJECTED_MSG));\n         }\n ",
      "parent_sha": "7707efae572a75d03c63335c95fe8a6bf4f9d973"
    }
  },
  {
    "oid": "50873921629dea84e69bfc3c8a9caf7aeb4bbc80",
    "message": "KEYCLOAK-1725 Fix migration from 1.1.0.Final on Oracle",
    "date": "2015-08-04T11:21:09Z",
    "url": "https://github.com/keycloak/keycloak/commit/50873921629dea84e69bfc3c8a9caf7aeb4bbc80",
    "details": {
      "sha": "895a7856a746b59466260829a64eaf70fb70bc58",
      "filename": "connections/jpa-liquibase/src/main/java/org/keycloak/connections/jpa/updater/liquibase/custom/JpaUpdate1_2_0_Beta1.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/50873921629dea84e69bfc3c8a9caf7aeb4bbc80/connections%2Fjpa-liquibase%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fconnections%2Fjpa%2Fupdater%2Fliquibase%2Fcustom%2FJpaUpdate1_2_0_Beta1.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/50873921629dea84e69bfc3c8a9caf7aeb4bbc80/connections%2Fjpa-liquibase%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fconnections%2Fjpa%2Fupdater%2Fliquibase%2Fcustom%2FJpaUpdate1_2_0_Beta1.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/connections%2Fjpa-liquibase%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fconnections%2Fjpa%2Fupdater%2Fliquibase%2Fcustom%2FJpaUpdate1_2_0_Beta1.java?ref=50873921629dea84e69bfc3c8a9caf7aeb4bbc80",
      "patch": "@@ -293,7 +293,7 @@ protected void addDefaultProtocolMappers() throws SQLException, DatabaseExceptio\n                     }\n \n                     Object acmObj = resultSet.getObject(\"ALLOWED_CLAIMS_MASK\");\n-                    long mask = (acmObj != null) ? (Long) acmObj : ClaimMask.ALL;\n+                    long mask = (acmObj != null) ? ((Number) acmObj).longValue() : ClaimMask.ALL;\n \n                     MigrationProvider migrationProvider = this.kcSession.getProvider(MigrationProvider.class);\n                     List<ProtocolMapperRepresentation> protocolMappers = migrationProvider.getMappersForClaimMask(mask);",
      "parent_sha": "7474a31d95922b39aaa43a4effd21895946db148"
    }
  },
  {
    "oid": "8effe31fdf65eddeb78f4835f8374144302e5b02",
    "message": "Fix ldap:// with STARTTLS\n\nCloses: #21935",
    "date": "2023-09-14T08:07:09Z",
    "url": "https://github.com/keycloak/keycloak/commit/8effe31fdf65eddeb78f4835f8374144302e5b02",
    "details": {
      "sha": "6304529e590a5334c6b1ab174f600adbbb41987a",
      "filename": "federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/8effe31fdf65eddeb78f4835f8374144302e5b02/federation%2Fldap%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2Fldap%2Fidm%2Fstore%2Fldap%2FLDAPContextManager.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/8effe31fdf65eddeb78f4835f8374144302e5b02/federation%2Fldap%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2Fldap%2Fidm%2Fstore%2Fldap%2FLDAPContextManager.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/federation%2Fldap%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2Fldap%2Fidm%2Fstore%2Fldap%2FLDAPContextManager.java?ref=8effe31fdf65eddeb78f4835f8374144302e5b02",
      "patch": "@@ -192,7 +192,7 @@ public static Hashtable<Object, Object> getNonAuthConnectionProperties(LDAPConfi\n \n         // when using Start TLS, use default socket factory for LDAP client but pass the TrustStore SSL socket factory later\n         // when calling StartTlsResponse.negotiate(trustStoreSSLSocketFactory)\n-        if (LDAPUtil.shouldUseTruststoreSpi(ldapConfig)) {\n+        if (!ldapConfig.isStartTls() && LDAPUtil.shouldUseTruststoreSpi(ldapConfig)) {\n             env.put(\"java.naming.ldap.factory.socket\", \"org.keycloak.truststore.SSLSocketFactory\");\n         }\n ",
      "parent_sha": "088abcf1d2f2c2e640c2842284b835da13a59d32"
    }
  },
  {
    "oid": "ffa069a33bd1886dba6a3ba90985c9b51c2d2372",
    "message": "Invalidate authentication session on repeated Recovery Code failures\nCloses #26180\n\nSigned-off-by: Douglas Palmer <dpalmer@redhat.com>",
    "date": "2024-01-22T10:57:47Z",
    "url": "https://github.com/keycloak/keycloak/commit/ffa069a33bd1886dba6a3ba90985c9b51c2d2372",
    "details": {
      "sha": "a0a3c704beb191063d5b744a7fc875b64af83e93",
      "filename": "services/src/main/java/org/keycloak/authentication/authenticators/browser/RecoveryAuthnCodesFormAuthenticator.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/keycloak/keycloak/blob/ffa069a33bd1886dba6a3ba90985c9b51c2d2372/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fbrowser%2FRecoveryAuthnCodesFormAuthenticator.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/ffa069a33bd1886dba6a3ba90985c9b51c2d2372/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fbrowser%2FRecoveryAuthnCodesFormAuthenticator.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fbrowser%2FRecoveryAuthnCodesFormAuthenticator.java?ref=ffa069a33bd1886dba6a3ba90985c9b51c2d2372",
      "patch": "@@ -48,13 +48,13 @@ private boolean isRecoveryAuthnCodeInputValid(AuthenticationFlowContext authnFlo\n         MultivaluedMap<String, String> formParamsMap = authnFlowContext.getHttpRequest().getDecodedFormParameters();\n         String recoveryAuthnCodeUserInput = formParamsMap.getFirst(RecoveryAuthnCodesUtils.FIELD_RECOVERY_CODE_IN_BROWSER_FLOW);\n \n-        if (ObjectUtil.isBlank(recoveryAuthnCodeUserInput)) {\n+        if (ObjectUtil.isBlank(recoveryAuthnCodeUserInput)\n+                || \"true\".equals(authnFlowContext.getAuthenticationSession().getAuthNote(AbstractUsernameFormAuthenticator.SESSION_INVALID))) {\n             authnFlowContext.forceChallenge(createLoginForm(authnFlowContext, true,\n                     RecoveryAuthnCodesUtils.RECOVERY_AUTHN_CODES_INPUT_DEFAULT_ERROR_MESSAGE,\n                     RecoveryAuthnCodesUtils.FIELD_RECOVERY_CODE_IN_BROWSER_FLOW));\n             return result;\n         }\n-        RealmModel targetRealm = authnFlowContext.getRealm();\n         UserModel authenticatedUser = authnFlowContext.getUser();\n         if (!isDisabledByBruteForce(authnFlowContext, authenticatedUser)) {\n             boolean isValid = authenticatedUser.credentialManager().isValid(\n@@ -82,6 +82,9 @@ private boolean isRecoveryAuthnCodeInputValid(AuthenticationFlowContext authnFlo\n                 }\n             }\n         }\n+        else {\n+            authnFlowContext.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.SESSION_INVALID, \"true\");\n+        }\n         return result;\n     }\n ",
      "parent_sha": "359ccc060df5e7099513ea22190becb7754843fd"
    }
  },
  {
    "oid": "ec779700217f37516dba69fc492b91b9770f9bd1",
    "message": "Inclusion of try/finally suggested by Stian",
    "date": "2016-04-22T11:29:32Z",
    "url": "https://github.com/keycloak/keycloak/commit/ec779700217f37516dba69fc492b91b9770f9bd1",
    "details": {
      "sha": "56d2fd2f377d92b1d22c600c796adf3dbf04535a",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AssertEvents.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/keycloak/keycloak/blob/ec779700217f37516dba69fc492b91b9770f9bd1/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2FAssertEvents.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/ec779700217f37516dba69fc492b91b9770f9bd1/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2FAssertEvents.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2FAssertEvents.java?ref=ec779700217f37516dba69fc492b91b9770f9bd1",
      "patch": "@@ -63,9 +63,12 @@ public Statement apply(final Statement base, org.junit.runner.Description descri\n         return new Statement() {\n             @Override\n             public void evaluate() throws Throwable {\n-                base.evaluate();\n-                // TODO Test should fail if there are leftover events\n-                context.testingClient.testing().clearQueue();\n+                try {\n+                    base.evaluate();\n+                } finally {\n+                    // TODO Test should fail if there are leftover events\n+                    context.testingClient.testing().clearQueue();\n+                }\n             }\n         };\n     }",
      "parent_sha": "30f34173c59254cc9ca9f1d574a1d5c8387a7b66"
    }
  },
  {
    "oid": "5740f8836aa489e87a8084c716bbec78b7e66c25",
    "message": "Cleanup\n\nCloses #32273\n\nSigned-off-by: Alexander Schwartz <aschwart@redhat.com>",
    "date": "2024-08-22T10:51:43Z",
    "url": "https://github.com/keycloak/keycloak/commit/5740f8836aa489e87a8084c716bbec78b7e66c25",
    "details": {
      "sha": "61d776c2540769341b521ef21a1d0f03087ea480",
      "filename": "model/jpa/src/main/java/org/keycloak/models/jpa/session/JpaUserSessionPersisterProvider.java",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/keycloak/keycloak/blob/5740f8836aa489e87a8084c716bbec78b7e66c25/model%2Fjpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fjpa%2Fsession%2FJpaUserSessionPersisterProvider.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/5740f8836aa489e87a8084c716bbec78b7e66c25/model%2Fjpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fjpa%2Fsession%2FJpaUserSessionPersisterProvider.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Fjpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fjpa%2Fsession%2FJpaUserSessionPersisterProvider.java?ref=5740f8836aa489e87a8084c716bbec78b7e66c25",
      "patch": "@@ -190,11 +190,11 @@ private List<PersistentClientSessionEntity> getClientSessionsByUserSession(Strin\n \n     @Override\n     public void onRealmRemoved(RealmModel realm) {\n-        int deletedClientSessions = em.createNamedQuery(\"deleteClientSessionsByRealm\")\n+        em.createNamedQuery(\"deleteClientSessionsByRealm\")\n                 .setParameter(\"realmId\", realm.getId())\n                 .executeUpdate();\n \n-        int deletedUserSessions = em.createNamedQuery(\"deleteUserSessionsByRealm\")\n+        em.createNamedQuery(\"deleteUserSessionsByRealm\")\n                 .setParameter(\"realmId\", realm.getId())\n                 .executeUpdate();\n     }\n@@ -205,12 +205,11 @@ public void onClientRemoved(RealmModel realm, ClientModel client) {\n     }\n \n     private void onClientRemoved(String clientUUID) {\n-        int num = 0;\n         StorageId clientStorageId = new StorageId(clientUUID);\n         if (clientStorageId.isLocal()) {\n-            num = em.createNamedQuery(\"deleteClientSessionsByClient\").setParameter(\"clientId\", clientUUID).executeUpdate();\n+            em.createNamedQuery(\"deleteClientSessionsByClient\").setParameter(\"clientId\", clientUUID).executeUpdate();\n         } else {\n-            num = em.createNamedQuery(\"deleteClientSessionsByExternalClient\")\n+            em.createNamedQuery(\"deleteClientSessionsByExternalClient\")\n                     .setParameter(\"clientStorageProvider\", clientStorageId.getProviderId())\n                     .setParameter(\"externalClientId\", clientStorageId.getExternalId())\n                     .executeUpdate();\n@@ -223,8 +222,8 @@ public void onUserRemoved(RealmModel realm, UserModel user) {\n     }\n \n     private void onUserRemoved(RealmModel realm, String userId) {\n-        int num = em.createNamedQuery(\"deleteClientSessionsByUser\").setParameter(\"userId\", userId).executeUpdate();\n-        num = em.createNamedQuery(\"deleteUserSessionsByUser\").setParameter(\"userId\", userId).executeUpdate();\n+        em.createNamedQuery(\"deleteClientSessionsByUser\").setParameter(\"userId\", userId).executeUpdate();\n+        em.createNamedQuery(\"deleteUserSessionsByUser\").setParameter(\"userId\", userId).executeUpdate();\n     }\n \n ",
      "parent_sha": "a7964a588baafd6e8b83f6485204b22ce8704005"
    }
  },
  {
    "oid": "9d685a2c47820a04ea71b58a1887a6de4ea80101",
    "message": "KEYCLOAK-11558 Fix unique constraint violation in PartialImportTest\n\n(cherry picked from commit 672703cbc1320466d37761c4cb0d46c5dd0ce0f1)",
    "date": "2019-10-14T12:40:20Z",
    "url": "https://github.com/keycloak/keycloak/commit/9d685a2c47820a04ea71b58a1887a6de4ea80101",
    "details": {
      "sha": "8c5f15c5c9b6053f0930933e4137b310fbba3676",
      "filename": "model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/keycloak/keycloak/blob/9d685a2c47820a04ea71b58a1887a6de4ea80101/model%2Fjpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fjpa%2FJpaRealmProvider.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/9d685a2c47820a04ea71b58a1887a6de4ea80101/model%2Fjpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fjpa%2FJpaRealmProvider.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Fjpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fjpa%2FJpaRealmProvider.java?ref=9d685a2c47820a04ea71b58a1887a6de4ea80101",
      "patch": "@@ -40,7 +40,6 @@\n import org.keycloak.models.utils.KeycloakModelUtils;\n \n import javax.persistence.EntityManager;\n-import javax.persistence.FlushModeType;\n import javax.persistence.TypedQuery;\n import java.util.*;\n import java.util.stream.Collectors;\n@@ -499,11 +498,7 @@ public GroupModel createGroup(RealmModel realm, String id, String name) {\n         RealmEntity realmEntity = em.getReference(RealmEntity.class, realm.getId());\n         groupEntity.setRealm(realmEntity);\n         em.persist(groupEntity);\n-        // KEYCLOAK-8253 - Skip / postpone the EM flush if there's an active WIP transaction and EM flush mode is set to AUTO (the default)\n-        // This improves the time performance of LDAP groups sync and EM flush in that case is performed anyway as part of the TX commit\n-        if (!session.getTransactionManager().isActive() || em.getFlushMode() != FlushModeType.AUTO) {\n-            em.flush();\n-        }\n+        em.flush();\n         realmEntity.getGroups().add(groupEntity);\n \n         GroupAdapter adapter = new GroupAdapter(realm, em, groupEntity);",
      "parent_sha": "f0a506a14387b270a26d9df49713f65d1df9a7a2"
    }
  },
  {
    "oid": "467e881725e7cc8d3f8a01ccddfbab676cd357b9",
    "message": "Use clickLink in delete credential page\nCloses #33505\n\nSigned-off-by: rmartinc <rmartinc@redhat.com>",
    "date": "2024-10-08T10:22:53Z",
    "url": "https://github.com/keycloak/keycloak/commit/467e881725e7cc8d3f8a01ccddfbab676cd357b9",
    "details": {
      "sha": "aabfc0be884f394697a4571793e14c6c821d210b",
      "filename": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/pages/DeleteCredentialPage.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/keycloak/keycloak/blob/467e881725e7cc8d3f8a01ccddfbab676cd357b9/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fpages%2FDeleteCredentialPage.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/467e881725e7cc8d3f8a01ccddfbab676cd357b9/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fpages%2FDeleteCredentialPage.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fpages%2FDeleteCredentialPage.java?ref=467e881725e7cc8d3f8a01ccddfbab676cd357b9",
      "patch": "@@ -20,6 +20,7 @@\n package org.keycloak.testsuite.pages;\n \n import org.junit.Assert;\n+import org.keycloak.testsuite.util.UIUtils;\n import org.openqa.selenium.WebElement;\n import org.openqa.selenium.support.FindBy;\n \n@@ -37,15 +38,16 @@ public class DeleteCredentialPage extends AbstractPage {\n     @FindBy(id = \"kc-delete-text\")\n     private WebElement message;\n \n+    @Override\n     public boolean isCurrent() {\n         return PageUtils.getPageTitle(driver).startsWith(\"Delete \");\n     }\n \n     public void confirm() {\n-        submitButton.click();\n+        UIUtils.clickLink(submitButton);\n     }\n     public void cancel() {\n-        cancelButton.click();\n+        UIUtils.clickLink(cancelButton);\n     }\n \n     public void assertCredentialInMessage(String expectedLabel) {",
      "parent_sha": "e8dfc06f5c6a4ab3589914b0a9d051c239ca994b"
    }
  },
  {
    "oid": "e70f702bc5fe089ef93090fd92463172d0f6b74f",
    "message": "[KEYCLOAK-10790] - KeycloakInstalled adapter can not logoutDesktop more than once",
    "date": "2020-10-23T07:23:51Z",
    "url": "https://github.com/keycloak/keycloak/commit/e70f702bc5fe089ef93090fd92463172d0f6b74f",
    "details": {
      "sha": "ca3c61b40f785eb0d2b0b34c40805032ed949c15",
      "filename": "adapters/oidc/installed/src/main/java/org/keycloak/adapters/installed/KeycloakInstalled.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/e70f702bc5fe089ef93090fd92463172d0f6b74f/adapters%2Foidc%2Finstalled%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Finstalled%2FKeycloakInstalled.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/e70f702bc5fe089ef93090fd92463172d0f6b74f/adapters%2Foidc%2Finstalled%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Finstalled%2FKeycloakInstalled.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/adapters%2Foidc%2Finstalled%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Finstalled%2FKeycloakInstalled.java?ref=e70f702bc5fe089ef93090fd92463172d0f6b74f",
      "patch": "@@ -259,7 +259,7 @@ private void logoutDesktop() throws IOException, URISyntaxException, Interrupted\n \n         String redirectUri = String.format(\"http://%s:%s\", getListenHostname(), callback.getLocalPort());\n \n-        String logoutUrl = deployment.getLogoutUrl()\n+        String logoutUrl = deployment.getLogoutUrl().clone()\n                 .queryParam(OAuth2Constants.REDIRECT_URI, redirectUri)\n                 .build().toString();\n ",
      "parent_sha": "da6f7d697f5c3a8ad8b866898a1e85f1f33f707e"
    }
  },
  {
    "oid": "7f1c03a122ad74fc9041a9b90c3beb685c26ace7",
    "message": "KEYCLOAK-8462 Close delegates properly",
    "date": "2018-10-08T12:45:48Z",
    "url": "https://github.com/keycloak/keycloak/commit/7f1c03a122ad74fc9041a9b90c3beb685c26ace7",
    "details": {
      "sha": "89ae8d6ada7ef5ff15a5c4daf0f56a1eeee024c8",
      "filename": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/authorization/StoreFactoryCacheSession.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/keycloak/keycloak/blob/7f1c03a122ad74fc9041a9b90c3beb685c26ace7/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2Fauthorization%2FStoreFactoryCacheSession.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/7f1c03a122ad74fc9041a9b90c3beb685c26ace7/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2Fauthorization%2FStoreFactoryCacheSession.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2Fauthorization%2FStoreFactoryCacheSession.java?ref=7f1c03a122ad74fc9041a9b90c3beb685c26ace7",
      "patch": "@@ -147,6 +147,9 @@ public PermissionTicketStore getPermissionTicketStore() {\n     }\n \n     public void close() {\n+        if (delegate != null) {\n+            delegate.close();\n+        }\n     }\n \n     private KeycloakTransaction getPrepareTransaction() {\n@@ -193,10 +196,6 @@ public void begin() {\n             @Override\n             public void commit() {\n                 try {\n-                    if (getDelegate() == null) return;\n-                    if (clearAll) {\n-                        cache.clear();\n-                    }\n                     runInvalidations();\n                     transactionActive = false;\n                 } finally {",
      "parent_sha": "6fd4a02f955fd6570bd96d0193b59880f659774a"
    }
  },
  {
    "oid": "6c3e6bc90c173b4587378f187c6778d89daa2a06",
    "message": "KEYCLOAK-7476 - sshLoginTest - changed command result",
    "date": "2018-06-01T08:35:38Z",
    "url": "https://github.com/keycloak/keycloak/commit/6c3e6bc90c173b4587378f187c6778d89daa2a06",
    "details": {
      "sha": "6328c5db0fcb0824236da7262ae4ee50c97114eb",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/example/AbstractFuseAdminAdapterTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/6c3e6bc90c173b4587378f187c6778d89daa2a06/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadapter%2Fexample%2FAbstractFuseAdminAdapterTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/6c3e6bc90c173b4587378f187c6778d89daa2a06/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadapter%2Fexample%2FAbstractFuseAdminAdapterTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadapter%2Fexample%2FAbstractFuseAdminAdapterTest.java?ref=6c3e6bc90c173b4587378f187c6778d89daa2a06",
      "patch": "@@ -91,7 +91,7 @@ public void hawtioLoginTest() throws Exception {\n     \n     @Test\n     public void sshLoginTest() throws Exception {\n-        assertCommand(\"mary\", \"password\", \"shell:date\", Result.NO_ROLES);\n+        assertCommand(\"mary\", \"password\", \"shell:date\", Result.NOT_FOUND);\n         assertCommand(\"john\", \"password\", \"shell:info\", Result.NO_CREDENTIALS);\n         assertCommand(\"john\", \"password\", \"shell:date\", Result.OK);\n         assertCommand(\"root\", \"password\", \"shell:info\", Result.OK);",
      "parent_sha": "cb3b7f3cb23652347e1e9e271a5acbc2717c6620"
    }
  },
  {
    "oid": "b8b9adbea2f5f9106aa9ba2b6d7196fbe86cd836",
    "message": "CookieTest - old account console dependencies removed. Closes #19668",
    "date": "2023-05-18T11:09:51Z",
    "url": "https://github.com/keycloak/keycloak/commit/b8b9adbea2f5f9106aa9ba2b6d7196fbe86cd836",
    "details": {
      "sha": "508541bcf1e71580da5a7d2092ca74dfe81d615f",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cookies/CookieTest.java",
      "status": "modified",
      "additions": 25,
      "deletions": 26,
      "changes": 51,
      "blob_url": "https://github.com/keycloak/keycloak/blob/b8b9adbea2f5f9106aa9ba2b6d7196fbe86cd836/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fcookies%2FCookieTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/b8b9adbea2f5f9106aa9ba2b6d7196fbe86cd836/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fcookies%2FCookieTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fcookies%2FCookieTest.java?ref=b8b9adbea2f5f9106aa9ba2b6d7196fbe86cd836",
      "patch": "@@ -30,15 +30,13 @@\n import org.apache.http.util.EntityUtils;\n import org.jboss.arquillian.graphene.page.Page;\n import org.junit.Test;\n-import org.keycloak.admin.client.resource.UsersResource;\n-import org.keycloak.common.Profile;\n import org.keycloak.models.Constants;\n import org.keycloak.representations.idm.RealmRepresentation;\n-import org.keycloak.representations.idm.UserRepresentation;\n import org.keycloak.testsuite.AbstractKeycloakTest;\n-import org.keycloak.testsuite.arquillian.annotation.DisableFeature;\n import org.keycloak.testsuite.auth.page.AuthRealm;\n+import org.keycloak.testsuite.pages.AppPage;\n import org.keycloak.testsuite.pages.LoginPage;\n+import org.keycloak.testsuite.util.AccountHelper;\n import org.keycloak.testsuite.util.ContainerAssume;\n import org.keycloak.testsuite.util.OAuthClient;\n import org.keycloak.testsuite.util.OAuthClient.AuthorizationEndpointResponse;\n@@ -62,7 +60,6 @@\n import static org.keycloak.services.managers.AuthenticationSessionManager.AUTH_SESSION_ID;\n import static org.keycloak.services.util.CookieHelper.LEGACY_COOKIE;\n import static org.keycloak.testsuite.admin.AbstractAdminTest.loadJson;\n-import static org.keycloak.testsuite.util.URLAssert.assertCurrentUrlStartsWithLoginUrlOf;\n \n import jakarta.ws.rs.core.HttpHeaders;\n \n@@ -71,12 +68,14 @@\n  * @author hmlnarik\n  * @author Vaclav Muzikar <vmuzikar@redhat.com>\n  */\n-@DisableFeature(value = Profile.Feature.ACCOUNT2, skipRestart = true) // TODO remove this (KEYCLOAK-16228)\n public class CookieTest extends AbstractKeycloakTest {\n \n     @Page\n     protected LoginPage loginPage;\n \n+    @Page\n+    protected AppPage appPage;\n+\n     @Override\n     public void addTestRealms(List<RealmRepresentation> testRealms) {\n         RealmRepresentation realmRepresentation = loadJson(getClass().getResourceAsStream(\"/testrealm.json\"), RealmRepresentation.class);\n@@ -88,7 +87,6 @@ public void addTestRealms(List<RealmRepresentation> testRealms) {\n     @Override\n     public void setDefaultPageUriParameters() {\n         super.setDefaultPageUriParameters();\n-        accountPage.setAuthRealm(AuthRealm.TEST);\n     }\n \n     @Test\n@@ -102,15 +100,15 @@ public void testLegacyCookieValue() throws Exception {\n     }\n \n     private void testCookieValue(String cookieName) throws Exception {\n-        final String accountClientId = realmsResouce().realm(\"test\").clients().findByClientId(\"account\").get(0).getId();\n+        final String accountClientId = realmsResouce().realm(\"test\").clients().findByClientId(\"test-app\").get(0).getId();\n         final String clientSecret = realmsResouce().realm(\"test\").clients().get(accountClientId).getSecret().getValue();\n \n-        AuthorizationEndpointResponse codeResponse = oauth.clientId(\"account\").redirectUri(accountPage.buildUri().toString()).doLogin(\"test-user@localhost\", \"password\");\n+        AuthorizationEndpointResponse codeResponse = oauth.clientId(\"test-app\").redirectUri(oauth.APP_AUTH_ROOT).doLogin(\"test-user@localhost\", \"password\");\n         OAuthClient.AccessTokenResponse accTokenResp = oauth.doAccessTokenRequest(codeResponse.getCode(), clientSecret);\n         String accessToken = accTokenResp.getAccessToken();\n \n-        accountPage.navigateTo();\n-        accountPage.assertCurrent();\n+        appPage.open();\n+        appPage.assertCurrent();\n \n         try (CloseableHttpClient hc = OAuthClient.newCloseableHttpClient()) {\n             BasicCookieStore cookieStore = new BasicCookieStore();\n@@ -122,7 +120,7 @@ private void testCookieValue(String cookieName) throws Exception {\n             HttpContext localContext = new BasicHttpContext();\n             localContext.setAttribute(HttpClientContext.COOKIE_STORE, cookieStore);\n \n-            HttpGet get = new HttpGet(oauth.clientId(\"account\").redirectUri(accountPage.buildUri().toString()).getLoginFormUrl());\n+            HttpGet get = new HttpGet(oauth.clientId(\"test-app\").redirectUri(oauth.APP_AUTH_ROOT).getLoginFormUrl());\n             try (CloseableHttpResponse resp = hc.execute(get, localContext)) {\n                 final String pageContent = EntityUtils.toString(resp.getEntity());\n \n@@ -139,16 +137,16 @@ private void testCookieValue(String cookieName) throws Exception {\n \n     @Test\n     public void testCookieValueLoggedOut() throws Exception {\n-        final String accountClientId = realmsResouce().realm(\"test\").clients().findByClientId(\"account\").get(0).getId();\n+        final String accountClientId = realmsResouce().realm(\"test\").clients().findByClientId(\"test-app\").get(0).getId();\n         final String clientSecret = realmsResouce().realm(\"test\").clients().get(accountClientId).getSecret().getValue();\n \n-        AuthorizationEndpointResponse codeResponse = oauth.clientId(\"account\").redirectUri(accountPage.buildUri().toString()).doLogin(\"test-user@localhost\", \"password\");\n+        AuthorizationEndpointResponse codeResponse = oauth.clientId(\"test-app\").redirectUri(oauth.APP_AUTH_ROOT).doLogin(\"test-user@localhost\", \"password\");\n         OAuthClient.AccessTokenResponse accTokenResp = oauth.doAccessTokenRequest(codeResponse.getCode(), clientSecret);\n         String accessToken = accTokenResp.getAccessToken();\n \n-        accountPage.navigateTo();\n-        accountPage.assertCurrent();\n-        accountPage.logOut();\n+        appPage.open();\n+        appPage.assertCurrent();\n+        AccountHelper.logout(realmsResouce().realm(\"test\"), \"test-user@localhost\");\n \n         try (CloseableHttpClient hc = OAuthClient.newCloseableHttpClient()) {\n             BasicCookieStore cookieStore = new BasicCookieStore();\n@@ -160,7 +158,7 @@ public void testCookieValueLoggedOut() throws Exception {\n             HttpContext localContext = new BasicHttpContext();\n             localContext.setAttribute(HttpClientContext.COOKIE_STORE, cookieStore);\n \n-            HttpGet get = new HttpGet(oauth.clientId(\"account\").redirectUri(accountPage.buildUri().toString()).getLoginFormUrl());\n+            HttpGet get = new HttpGet(oauth.clientId(\"test-app\").redirectUri(oauth.APP_AUTH_ROOT).getLoginFormUrl());\n             try (CloseableHttpResponse resp = hc.execute(get, localContext)) {\n                 final String pageContent = EntityUtils.toString(resp.getEntity());\n \n@@ -179,10 +177,13 @@ public void testCookieValueLoggedOut() throws Exception {\n     public void legacyCookiesTest() {\n         ContainerAssume.assumeAuthServerSSL();\n \n-        accountPage.navigateTo();\n-        assertCurrentUrlStartsWithLoginUrlOf(accountPage);\n+        loginPage.open();\n+        loginPage.assertCurrent();\n \n         loginPage.login(\"test-user@localhost\", \"password\");\n+        appPage.assertCurrent();\n+\n+        driver.navigate().to(oauth.AUTH_SERVER_ROOT + \"/realms/test/login-actions/authenticate/\");\n \n         Cookie sameSiteIdentityCookie = driver.manage().getCookieNamed(KEYCLOAK_IDENTITY_COOKIE);\n         Cookie legacyIdentityCookie = driver.manage().getCookieNamed(KEYCLOAK_IDENTITY_COOKIE + LEGACY_COOKIE);\n@@ -200,15 +201,13 @@ public void legacyCookiesTest() {\n     public void testNoDuplicationsWhenExpiringCookies() throws IOException {\n         ContainerAssume.assumeAuthServerSSL();\n \n-        accountPage.navigateTo();\n-        assertCurrentUrlStartsWithLoginUrlOf(accountPage);\n+        loginPage.open();\n+        loginPage.assertCurrent();\n \n         loginPage.login(\"test-user@localhost\", \"password\");\n+        appPage.assertCurrent();\n \n-        UsersResource usersResource = realmsResouce().realm(AuthRealm.TEST).users();\n-        UserRepresentation user = usersResource.search(\"test-user@localhost\").get(0);\n-\n-        usersResource.get(user.getId()).logout();\n+        driver.navigate().to(oauth.AUTH_SERVER_ROOT + \"/realms/test/login-actions/authenticate/\");\n \n         Cookie invalidIdentityCookie = driver.manage().getCookieNamed(KEYCLOAK_IDENTITY_COOKIE);\n         CookieStore cookieStore = new BasicCookieStore();",
      "parent_sha": "29deaca3f55a6211b7f23b5ef1f4d375d1bfe54c"
    }
  },
  {
    "oid": "fc80cc75feeb4b05970995e609f8aa8c2e198a1d",
    "message": "Make createPatSupplier private to public\n\nCloses #29986\r\n\r\nSigned-off-by: Krishna Kumar <krishnachaurasia1998@gmail.com>",
    "date": "2024-07-23T11:11:42Z",
    "url": "https://github.com/keycloak/keycloak/commit/fc80cc75feeb4b05970995e609f8aa8c2e198a1d",
    "details": {
      "sha": "f3768ed7a676d8aba61e1251d09760d096ed9e5a",
      "filename": "authz/client/src/main/java/org/keycloak/authorization/client/AuthzClient.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/keycloak/keycloak/blob/fc80cc75feeb4b05970995e609f8aa8c2e198a1d/authz%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthorization%2Fclient%2FAuthzClient.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/fc80cc75feeb4b05970995e609f8aa8c2e198a1d/authz%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthorization%2Fclient%2FAuthzClient.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/authz%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthorization%2Fclient%2FAuthzClient.java?ref=fc80cc75feeb4b05970995e609f8aa8c2e198a1d",
      "patch": "@@ -242,7 +242,7 @@ private AuthzClient(Configuration configuration) {\n             throw new IllegalArgumentException(\"Configuration URL can not be null.\");\n         }\n \n-        configurationUrl = KeycloakUriBuilder.fromUri(configurationUrl).clone().path(AUTHZ_DISCOVERY_URL).build(configuration.getRealm()).toString(); \n+        configurationUrl = KeycloakUriBuilder.fromUri(configurationUrl).clone().path(AUTHZ_DISCOVERY_URL).build(configuration.getRealm()).toString();\n         this.configuration = configuration;\n \n         this.http = new Http(configuration, configuration.getClientCredentialsProvider());\n@@ -256,14 +256,14 @@ private AuthzClient(Configuration configuration) {\n         }\n     }\n \n-    private TokenCallable createPatSupplier(String userName, String password) {\n+    public TokenCallable createPatSupplier(String userName, String password) {\n         if (patSupplier == null) {\n             patSupplier = createRefreshableAccessTokenSupplier(userName, password);\n         }\n         return patSupplier;\n     }\n \n-    private TokenCallable createPatSupplier() {\n+    public TokenCallable createPatSupplier() {\n         return createPatSupplier(null, null);\n     }\n \n@@ -275,4 +275,4 @@ private TokenCallable createRefreshableAccessTokenSupplier(final String userName\n         final String scope) {\n         return new TokenCallable(userName, password, scope, http, configuration, serverConfiguration);\n     }\n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "6de396d537ff19199d7d80e4e84ba7a5c5206b47"
    }
  },
  {
    "oid": "72b5af088ce95e7e25cca28cad0edeb88abb9459",
    "message": "Update model/jpa/src/main/java/org/keycloak/organization/jpa/JpaOrganizationProvider.java\n\nCo-authored-by: Stefan Guilhen <sguilhen@redhat.com>\nSigned-off-by: Olivier Boudet <o.boudet@gmail.com>",
    "date": "2025-03-06T19:32:51Z",
    "url": "https://github.com/keycloak/keycloak/commit/72b5af088ce95e7e25cca28cad0edeb88abb9459",
    "details": {
      "sha": "57bd36c070ff7b30bf60ec860c34e4319a56f405",
      "filename": "model/jpa/src/main/java/org/keycloak/organization/jpa/JpaOrganizationProvider.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/72b5af088ce95e7e25cca28cad0edeb88abb9459/model%2Fjpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Forganization%2Fjpa%2FJpaOrganizationProvider.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/72b5af088ce95e7e25cca28cad0edeb88abb9459/model%2Fjpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Forganization%2Fjpa%2FJpaOrganizationProvider.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Fjpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Forganization%2Fjpa%2FJpaOrganizationProvider.java?ref=72b5af088ce95e7e25cca28cad0edeb88abb9459",
      "patch": "@@ -381,7 +381,7 @@ public Stream<OrganizationModel> getByMember(UserModel member) {\n         throwExceptionIfObjectIsNull(member, \"User\");\n \n         TypedQuery<String> query;\n-        if(!member.isFederated()) {\n+        if(StorageId.isLocalStorage(member.getId())) {\n             query = em.createNamedQuery(\"getGroupsByMember\", String.class);\n         } else {\n             query = em.createNamedQuery(\"getGroupsByFederatedMember\", String.class);",
      "parent_sha": "017d8e107e4d26c6d7603b537c8ed7d1e22daabf"
    }
  },
  {
    "oid": "9796b7f06ee30aeb01c7b22cbb34462be5fa53bc",
    "message": "arquillian testsuite, migration test: initial version of migration test",
    "date": "2015-10-30T12:27:38Z",
    "url": "https://github.com/keycloak/keycloak/commit/9796b7f06ee30aeb01c7b22cbb34462be5fa53bc",
    "details": {
      "sha": "cdddc083fb52a46029f7b61f448dc758379b57ab",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/migration/MigrationTest.java",
      "status": "modified",
      "additions": 15,
      "deletions": 6,
      "changes": 21,
      "blob_url": "https://github.com/keycloak/keycloak/blob/9796b7f06ee30aeb01c7b22cbb34462be5fa53bc/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fmigration%2FMigrationTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/9796b7f06ee30aeb01c7b22cbb34462be5fa53bc/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fmigration%2FMigrationTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fmigration%2FMigrationTest.java?ref=9796b7f06ee30aeb01c7b22cbb34462be5fa53bc",
      "patch": "@@ -22,9 +22,12 @@\n package org.keycloak.testsuite.migration;\n \n import java.util.List;\n-import org.junit.Assert;\n+import static org.junit.Assert.*;\n+import org.junit.Ignore;\n import org.junit.Test;\n+import org.keycloak.admin.client.resource.RealmResource;\n import org.keycloak.representations.idm.RealmRepresentation;\n+import org.keycloak.representations.idm.RoleRepresentation;\n import org.keycloak.testsuite.AbstractKeycloakTest;\n import org.keycloak.testsuite.arquillian.migration.Migration;\n \n@@ -41,21 +44,27 @@ public void addTestRealms(List<RealmRepresentation> testRealms) {\n     @Test\n     @Migration(versionFrom = \"1.6.1.Final\")\n     public void migration16Test() {\n-        for (RealmRepresentation realm : adminClient.realms().findAll()) {\n-            System.out.println(realm.getRealm());\n-        }\n+        RealmResource realmResource = adminClient.realms().realm(\"Migration\");\n+        RealmRepresentation realmRep = realmResource.toRepresentation();\n+        assertEquals(\"Migration\", realmRep.getRealm());\n+        \n+        List<RoleRepresentation> realmRoles = realmResource.roles().list();\n+        assertEquals(1, realmRoles.size());\n+        assertEquals(\"offline_access\", realmRoles.get(0).getName());\n         \n-        Assert.fail(\"TODO\");\n+        List<RoleRepresentation> clientRoles = realmResource.clients().get(\"realm-management\").roles().list();\n+        assertEquals(13, clientRoles.size());\n     }\n     \n     @Test\n     @Migration(versionFrom = \"1.5.1.Final\")\n+    @Ignore\n     public void migration15Test() {\n         for (RealmRepresentation realm : adminClient.realms().findAll()) {\n             System.out.println(realm.getRealm());\n         }\n         \n-        Assert.fail(\"TODO\");\n+        //TODO\n     }\n \n }",
      "parent_sha": "c2e14cb924f98ec546e871b7dda536f0b4529c04"
    }
  },
  {
    "oid": "6cb1eb41cf3a25d11e8a877abe8504dff428c09e",
    "message": "Update mongo entities",
    "date": "2014-08-04T12:51:08Z",
    "url": "https://github.com/keycloak/keycloak/commit/6cb1eb41cf3a25d11e8a877abe8504dff428c09e",
    "details": {
      "sha": "e644c7acaf258826e87ed302a98f1869634b7cf3",
      "filename": "connections/mongo/src/main/java/org/keycloak/connections/mongo/DefaultMongoConnectionFactoryProvider.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/keycloak/keycloak/blob/6cb1eb41cf3a25d11e8a877abe8504dff428c09e/connections%2Fmongo%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fconnections%2Fmongo%2FDefaultMongoConnectionFactoryProvider.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/6cb1eb41cf3a25d11e8a877abe8504dff428c09e/connections%2Fmongo%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fconnections%2Fmongo%2FDefaultMongoConnectionFactoryProvider.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/connections%2Fmongo%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fconnections%2Fmongo%2FDefaultMongoConnectionFactoryProvider.java?ref=6cb1eb41cf3a25d11e8a877abe8504dff428c09e",
      "patch": "@@ -24,16 +24,14 @@ public class DefaultMongoConnectionFactoryProvider implements MongoConnectionPro\n             \"org.keycloak.models.mongo.keycloak.entities.MongoUserEntity\",\n             \"org.keycloak.models.mongo.keycloak.entities.MongoRoleEntity\",\n             \"org.keycloak.models.entities.RequiredCredentialEntity\",\n-            \"org.keycloak.models.entities.AuthenticationProviderEntity\",\n             \"org.keycloak.models.entities.CredentialEntity\",\n             \"org.keycloak.models.entities.SocialLinkEntity\",\n-            \"org.keycloak.models.entities.AuthenticationLinkEntity\",\n             \"org.keycloak.models.mongo.keycloak.entities.MongoApplicationEntity\",\n             \"org.keycloak.models.mongo.keycloak.entities.MongoOAuthClientEntity\",\n             \"org.keycloak.models.sessions.mongo.entities.MongoUsernameLoginFailureEntity\",\n             \"org.keycloak.models.sessions.mongo.entities.MongoUserSessionEntity\",\n             \"org.keycloak.models.sessions.mongo.entities.MongoClientSessionEntity\",\n-            \"org.keycloak.models.entities.FederationProviderEntity\"\n+            \"org.keycloak.models.entities.UserFederationProviderEntity\"\n     };\n \n     private static final Logger logger = Logger.getLogger(DefaultMongoConnectionFactoryProvider.class);",
      "parent_sha": "46a0caf2e0d854f717ad75c832b4be3cf672bef4"
    }
  },
  {
    "oid": "ccb09fbf45ac48e02c2acd34bcdd8e44d6f4354e",
    "message": "KEYCLOAK-7616 fix NPE for UserStorageConsentTest",
    "date": "2018-06-13T13:53:41Z",
    "url": "https://github.com/keycloak/keycloak/commit/ccb09fbf45ac48e02c2acd34bcdd8e44d6f4354e",
    "details": {
      "sha": "1831dd21b4c065eacb30633129f43ebfe6f955e3",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/servlet/UserStorageConsentTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/keycloak/keycloak/blob/ccb09fbf45ac48e02c2acd34bcdd8e44d6f4354e/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadapter%2Fservlet%2FUserStorageConsentTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/ccb09fbf45ac48e02c2acd34bcdd8e44d6f4354e/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadapter%2Fservlet%2FUserStorageConsentTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadapter%2Fservlet%2FUserStorageConsentTest.java?ref=ccb09fbf45ac48e02c2acd34bcdd8e44d6f4354e",
      "patch": "@@ -117,6 +117,7 @@ public static void setupConsent(KeycloakSession session) {\n         ClientModel product = session.realms().getClientByClientId(\"product-portal\", realm);\n         product.setConsentRequired(true);\n         ClientScopeModel clientScope = realm.addClientScope(\"clientScope\");\n+        clientScope.setProtocol(OIDCLoginProtocol.LOGIN_PROTOCOL);\n         System.err.println(\"client scope protocol mappers size: \" + clientScope.getProtocolMappers().size());\n \n         for (ProtocolMapperModel mapper : product.getProtocolMappers()) {\n@@ -163,7 +164,7 @@ public void testLogin() throws Exception {\n         productPortal.navigateTo();\n         assertCurrentUrlStartsWithLoginUrlOf(testRealmPage);\n         testRealmLoginPage.form().login(\"memuser\", \"password\");\n-        org.keycloak.testsuite.Assert.assertTrue(consentPage.isCurrent());\n+        Assert.assertTrue(consentPage.isCurrent());\n         consentPage.confirm();\n         assertCurrentUrlEquals(productPortal.toString());\n         Assert.assertTrue(driver.getPageSource().contains(\"iPhone\"));",
      "parent_sha": "fb883254f6eb7fbb3af5bc1e79f38f819ae4ef27"
    }
  },
  {
    "oid": "ff66d471e210ce51b2e171bad2ed3653c8b158ae",
    "message": "Fix timeouts in DemoServlets tests",
    "date": "2016-04-08T11:37:22Z",
    "url": "https://github.com/keycloak/keycloak/commit/ff66d471e210ce51b2e171bad2ed3653c8b158ae",
    "details": {
      "sha": "ab7b1f5dc5d38e101e4a19223c7dc10c3feee9ae",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/servlet/AbstractDemoServletsAdapterTest.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/keycloak/keycloak/blob/ff66d471e210ce51b2e171bad2ed3653c8b158ae/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadapter%2Fservlet%2FAbstractDemoServletsAdapterTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/ff66d471e210ce51b2e171bad2ed3653c8b158ae/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadapter%2Fservlet%2FAbstractDemoServletsAdapterTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fadapter%2Fservlet%2FAbstractDemoServletsAdapterTest.java?ref=ff66d471e210ce51b2e171bad2ed3653c8b158ae",
      "patch": "@@ -25,7 +25,6 @@\n import org.junit.Test;\n import org.keycloak.OAuth2Constants;\n import org.keycloak.common.Version;\n-import org.keycloak.common.util.Time;\n import org.keycloak.constants.AdapterConstants;\n import org.keycloak.protocol.oidc.OIDCLoginProtocolService;\n import org.keycloak.representations.VersionRepresentation;\n@@ -49,6 +48,7 @@\n import static org.junit.Assert.*;\n import static org.keycloak.testsuite.util.URLAssert.assertCurrentUrlEquals;\n import static org.keycloak.testsuite.util.URLAssert.assertCurrentUrlStartsWithLoginUrlOf;\n+import static org.keycloak.testsuite.util.WaitUtils.pause;\n \n /**\n  *\n@@ -226,7 +226,8 @@ public void testLoginSSOIdle() {\n         demoRealmRep.setSsoSessionIdleTimeout(1);\n         testRealmResource().update(demoRealmRep);\n \n-//\t\tThread.sleep(2000);\n+\t\tpause(2000);\n+\n         productPortal.navigateTo();\n         assertCurrentUrlStartsWithLoginUrlOf(testRealmPage);\n \n@@ -253,16 +254,16 @@ public void testLoginSSOIdleRemoveExpiredUserSessions() {\n         demoRealmRep.setSsoSessionIdleTimeout(1);\n         testRealmResource().update(demoRealmRep);\n \n-        Time.setOffset(2);\n+        pause(2000);\n \n         productPortal.navigateTo();\n         assertCurrentUrlStartsWithLoginUrlOf(testRealmPage);\n \n         // need to cleanup so other tests don't fail, so invalidate http sessions on remote clients.\n         demoRealmRep.setSsoSessionIdleTimeout(originalIdle);\n+        testRealmResource().update(demoRealmRep);\n         // note: sessions invalidated after each test, see: AbstractKeycloakTest.afterAbstractKeycloakTest()\n \n-        Time.setOffset(0);\n     }\n \n     @Test",
      "parent_sha": "def40448ac470f38de75f664879abcc5808478e7"
    }
  },
  {
    "oid": "49f3172163519c88027abd009521ac2de72d7903",
    "message": "KEYCLOAK-701 Use built-in themes if specified theme is not found",
    "date": "2014-10-03T09:17:12Z",
    "url": "https://github.com/keycloak/keycloak/commit/49f3172163519c88027abd009521ac2de72d7903",
    "details": {
      "sha": "533b63120d984de3c30ce1ca5030eb9d814e1f8c",
      "filename": "forms/common-freemarker/src/main/java/org/keycloak/freemarker/ExtendingThemeManager.java",
      "status": "modified",
      "additions": 13,
      "deletions": 10,
      "changes": 23,
      "blob_url": "https://github.com/keycloak/keycloak/blob/49f3172163519c88027abd009521ac2de72d7903/forms%2Fcommon-freemarker%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ffreemarker%2FExtendingThemeManager.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/49f3172163519c88027abd009521ac2de72d7903/forms%2Fcommon-freemarker%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ffreemarker%2FExtendingThemeManager.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/forms%2Fcommon-freemarker%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ffreemarker%2FExtendingThemeManager.java?ref=49f3172163519c88027abd009521ac2de72d7903",
      "patch": "@@ -1,5 +1,6 @@\n package org.keycloak.freemarker;\n \n+import org.jboss.logging.Logger;\n import org.keycloak.Config;\n import org.keycloak.models.KeycloakSession;\n \n@@ -21,17 +22,17 @@\n  */\n public class ExtendingThemeManager implements ThemeProvider {\n \n+    private static final Logger log = Logger.getLogger(ExtendingThemeManager.class);\n+\n     private final KeycloakSession session;\n     private final ConcurrentHashMap<ExtendingThemeManagerFactory.ThemeKey, Theme> themeCache;\n     private List<ThemeProvider> providers;\n     private String defaultTheme;\n-    private int staticMaxAge;\n \n     public ExtendingThemeManager(KeycloakSession session, ConcurrentHashMap<ExtendingThemeManagerFactory.ThemeKey, Theme> themeCache) {\n         this.session = session;\n         this.themeCache = themeCache;\n         this.defaultTheme = Config.scope(\"theme\").get(\"default\", \"keycloak\");\n-        this.staticMaxAge = Config.scope(\"theme\").getInt(\"staticMaxAge\", -1);\n     }\n \n     private List<ThemeProvider> getProviders() {\n@@ -57,10 +58,6 @@ public int compare(ThemeProvider o1, ThemeProvider o2) {\n         return providers;\n     }\n \n-    public int getStaticMaxAge() {\n-        return staticMaxAge;\n-    }\n-\n     @Override\n     public int getProviderPriority() {\n         return 0;\n@@ -77,7 +74,13 @@ public Theme getTheme(String name, Theme.Type type) throws IOException {\n             Theme theme = themeCache.get(key);\n             if (theme == null) {\n                 theme = loadTheme(name, type);\n-                if (themeCache.putIfAbsent(key, theme) != null) {\n+                if (theme == null) {\n+                    theme = loadTheme(\"keycloak\", type);\n+                    if (theme == null) {\n+                        theme = loadTheme(\"base\", type);\n+                    }\n+                    log.errorv(\"Failed to find {0} theme {1}, using built-in themes\", type, name);\n+                } else if (themeCache.putIfAbsent(key, theme) != null) {\n                     theme = themeCache.get(key);\n                 }\n             }\n@@ -89,7 +92,7 @@ public Theme getTheme(String name, Theme.Type type) throws IOException {\n \n     private Theme loadTheme(String name, Theme.Type type) throws IOException {\n         Theme theme = findTheme(name, type);\n-        if (theme.getParentName() != null) {\n+        if (theme != null && theme.getParentName() != null) {\n             List<Theme> themes = new LinkedList<Theme>();\n             themes.add(theme);\n \n@@ -144,11 +147,11 @@ private Theme findTheme(String name, Theme.Type type) {\n                 try {\n                     return p.getTheme(name, type);\n                 } catch (IOException e) {\n-                    throw new RuntimeException(\"Failed to create \" + type.toString().toLowerCase() + \" theme\", e);\n+                    log.errorv(e, p.getClass() + \" failed to load theme, type={0}, name={1}\", type, name);\n                 }\n             }\n         }\n-        throw new RuntimeException(type.toString().toLowerCase() + \" theme '\" + name + \"' not found\");\n+        return null;\n     }\n \n     public static class ExtendingTheme implements Theme {",
      "parent_sha": "53489cd556c034cae7aad9a4245a7003da148c52"
    }
  },
  {
    "oid": "925864530ae4889fac18423dba9a75767f29b742",
    "message": "KEYCLOAK-10457 Merge preview features test: SocialLoginTest",
    "date": "2019-08-14T20:09:59Z",
    "url": "https://github.com/keycloak/keycloak/commit/925864530ae4889fac18423dba9a75767f29b742",
    "details": {
      "sha": "605426df0f39e05629f9418b7f3b3e9b2f1dddf1",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/SocialLoginTest.java",
      "status": "modified",
      "additions": 131,
      "deletions": 107,
      "changes": 238,
      "blob_url": "https://github.com/keycloak/keycloak/blob/925864530ae4889fac18423dba9a75767f29b742/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fbroker%2FSocialLoginTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/925864530ae4889fac18423dba9a75767f29b742/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fbroker%2FSocialLoginTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fbroker%2FSocialLoginTest.java?ref=925864530ae4889fac18423dba9a75767f29b742",
      "patch": "@@ -28,6 +28,7 @@\n import org.keycloak.services.resources.admin.permissions.AdminPermissions;\n import org.keycloak.testsuite.AbstractKeycloakTest;\n import org.keycloak.testsuite.ProfileAssume;\n+import org.keycloak.testsuite.arquillian.annotation.UncaughtServerErrorExpected;\n import org.keycloak.testsuite.auth.page.login.UpdateAccount;\n import org.keycloak.testsuite.pages.LoginPage;\n import org.keycloak.testsuite.pages.social.AbstractSocialLoginPage;\n@@ -235,6 +236,7 @@ public void openshiftLogin() {\n     }\n \n     @Test\n+    @UncaughtServerErrorExpected\n     public void googleLogin() throws InterruptedException {\n         setTestProvider(GOOGLE);\n         performLogin();\n@@ -243,6 +245,7 @@ public void googleLogin() throws InterruptedException {\n     }\n \n     @Test\n+    @UncaughtServerErrorExpected\n     public void googleHostedDomainLogin() throws InterruptedException {\n         setTestProvider(GOOGLE_HOSTED_DOMAIN);\n         navigateToLoginPage();\n@@ -269,6 +272,7 @@ public void googleNonMatchingHostedDomainLogin() throws InterruptedException {\n     }\n \n     @Test\n+    @UncaughtServerErrorExpected\n     public void bitbucketLogin() throws InterruptedException {\n         setTestProvider(BITBUCKET);\n         performLogin();\n@@ -277,6 +281,7 @@ public void bitbucketLogin() throws InterruptedException {\n     }\n \n     @Test\n+    @UncaughtServerErrorExpected\n     public void gitlabLogin() throws InterruptedException {\n         setTestProvider(GITLAB);\n         performLogin();\n@@ -285,6 +290,7 @@ public void gitlabLogin() throws InterruptedException {\n     }\n \n     @Test\n+    @UncaughtServerErrorExpected\n     public void facebookLogin() throws InterruptedException {\n         setTestProvider(FACEBOOK);\n         performLogin();\n@@ -302,6 +308,7 @@ public void instagramLogin() throws InterruptedException {\n \n \n     @Test\n+    @UncaughtServerErrorExpected\n     public void githubLogin() throws InterruptedException {\n         setTestProvider(GITHUB);\n         performLogin();\n@@ -459,120 +466,137 @@ private void assertUpdateProfile(boolean firstName, boolean lastName, boolean em\n         updateAccountPage.submit();\n     }\n \n-    protected void testTokenExchange() {\n-        ProfileAssume.assumeFeatureEnabled(Profile.Feature.TOKEN_EXCHANGE);\n-\n-        testingClient.server().run(SocialLoginTest::setupClientExchangePermissions);\n-\n-        List<UserRepresentation> users = adminClient.realm(REALM).users().search(null, null, null);\n-        Assert.assertEquals(1, users.size());\n-        String username = users.get(0).getUsername();\n-        Client httpClient = ClientBuilder.newClient();\n-\n-        WebTarget exchangeUrl = httpClient.target(OAuthClient.AUTH_SERVER_ROOT)\n+    private WebTarget getExchangeUrl(Client httpClient) {\n+        return httpClient.target(OAuthClient.AUTH_SERVER_ROOT)\n                 .path(\"/realms\")\n                 .path(REALM)\n                 .path(\"protocol/openid-connect/token\");\n+    }\n \n-        // obtain social token\n-        Response response = exchangeUrl.request()\n-                .header(HttpHeaders.AUTHORIZATION, BasicAuthHelper.createHeader(EXCHANGE_CLIENT, \"secret\"))\n-                .post(Entity.form(\n-                        new Form()\n-                                .param(OAuth2Constants.GRANT_TYPE, OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE)\n-                                .param(OAuth2Constants.REQUESTED_SUBJECT, username)\n-                                .param(OAuth2Constants.REQUESTED_TOKEN_TYPE, OAuth2Constants.ACCESS_TOKEN_TYPE)\n-                                .param(OAuth2Constants.REQUESTED_ISSUER, currentTestProvider.id())\n-\n-                ));\n-        Assert.assertEquals(200, response.getStatus());\n-        AccessTokenResponse tokenResponse = response.readEntity(AccessTokenResponse.class);\n-        response.close();\n-\n-        String socialToken = tokenResponse.getToken();\n-        Assert.assertNotNull(socialToken);\n-\n-        // remove all users\n-        removeUser();\n-\n-        users = adminClient.realm(REALM).users().search(null, null, null);\n-        Assert.assertEquals(0, users.size());\n-\n-        // now try external exchange where we trust social provider and import the external token.\n-        response = exchangeUrl.request()\n-                .header(HttpHeaders.AUTHORIZATION, BasicAuthHelper.createHeader(EXCHANGE_CLIENT, \"secret\"))\n-                .post(Entity.form(\n-                        new Form()\n-                                .param(OAuth2Constants.GRANT_TYPE, OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE)\n-                                .param(OAuth2Constants.SUBJECT_TOKEN, socialToken)\n-                                .param(OAuth2Constants.SUBJECT_TOKEN_TYPE, OAuth2Constants.ACCESS_TOKEN_TYPE)\n-                                .param(OAuth2Constants.SUBJECT_ISSUER, currentTestProvider.id())\n-\n-                ));\n-        Assert.assertEquals(200, response.getStatus());\n-        tokenResponse = response.readEntity(AccessTokenResponse.class);\n-        response.close();\n-\n-        users = adminClient.realm(REALM).users().search(null, null, null);\n-        Assert.assertEquals(1, users.size());\n-\n-        Assert.assertEquals(username, users.get(0).getUsername());\n-\n-        // remove all users\n-        removeUser();\n-\n-        users = adminClient.realm(REALM).users().search(null, null, null);\n-        Assert.assertEquals(0, users.size());\n-\n-        ///// Test that we can update social token from session with stored tokens turned off.\n-\n-        // turn off store token\n-        IdentityProviderRepresentation idp = adminClient.realm(REALM).identityProviders().get(currentTestProvider.id).toRepresentation();\n-        idp.setStoreToken(false);\n-        adminClient.realm(REALM).identityProviders().get(idp.getAlias()).update(idp);\n-\n-\n-        // first exchange social token to get a user session that should store the social token there\n-        response = exchangeUrl.request()\n-                .header(HttpHeaders.AUTHORIZATION, BasicAuthHelper.createHeader(EXCHANGE_CLIENT, \"secret\"))\n-                .post(Entity.form(\n-                        new Form()\n-                                .param(OAuth2Constants.GRANT_TYPE, OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE)\n-                                .param(OAuth2Constants.SUBJECT_TOKEN, socialToken)\n-                                .param(OAuth2Constants.SUBJECT_TOKEN_TYPE, OAuth2Constants.ACCESS_TOKEN_TYPE)\n-                                .param(OAuth2Constants.SUBJECT_ISSUER, currentTestProvider.id())\n-\n-                ));\n-        Assert.assertEquals(200, response.getStatus());\n-        tokenResponse = response.readEntity(AccessTokenResponse.class);\n-        String keycloakToken = tokenResponse.getToken();\n-        response.close();\n-\n-        // now take keycloak token and make sure it can get back the social token from the user session since stored tokens are off\n-        response = exchangeUrl.request()\n-                .header(HttpHeaders.AUTHORIZATION, BasicAuthHelper.createHeader(EXCHANGE_CLIENT, \"secret\"))\n-                .post(Entity.form(\n-                        new Form()\n-                                .param(OAuth2Constants.GRANT_TYPE, OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE)\n-                                .param(OAuth2Constants.SUBJECT_TOKEN, keycloakToken)\n-                                .param(OAuth2Constants.SUBJECT_TOKEN_TYPE, OAuth2Constants.ACCESS_TOKEN_TYPE)\n-                                .param(OAuth2Constants.REQUESTED_TOKEN_TYPE, OAuth2Constants.ACCESS_TOKEN_TYPE)\n-                                .param(OAuth2Constants.REQUESTED_ISSUER, currentTestProvider.id())\n+    private AccessTokenResponse checkFeature(int expectedStatusCode, String username) {\n+        Client httpClient = ClientBuilder.newClient();\n+        Response response = null;\n+        try {\n+            testingClient.server().run(SocialLoginTest::setupClientExchangePermissions);\n+\n+            WebTarget exchangeUrl = getExchangeUrl(httpClient);\n+            response = exchangeUrl.request()\n+                    .header(HttpHeaders.AUTHORIZATION, BasicAuthHelper.createHeader(EXCHANGE_CLIENT, \"secret\"))\n+                    .post(Entity.form(\n+                            new Form()\n+                                    .param(OAuth2Constants.GRANT_TYPE, OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE)\n+                                    .param(OAuth2Constants.REQUESTED_SUBJECT, username)\n+                                    .param(OAuth2Constants.REQUESTED_TOKEN_TYPE, OAuth2Constants.ACCESS_TOKEN_TYPE)\n+                                    .param(OAuth2Constants.REQUESTED_ISSUER, currentTestProvider.id())\n+                    ));\n+            Assert.assertEquals(expectedStatusCode, response.getStatus());\n+            if (expectedStatusCode == Response.Status.OK.getStatusCode())\n+                return response.readEntity(AccessTokenResponse.class);\n+            else\n+                return null;\n+        } finally {\n+            if (response != null)\n+                response.close();\n+            httpClient.close();\n+        }\n+    }\n \n-                ));\n-        Assert.assertEquals(200, response.getStatus());\n-        tokenResponse = response.readEntity(AccessTokenResponse.class);\n-        response.close();\n+    protected void testTokenExchange() {\n+        List<UserRepresentation> users = adminClient.realm(REALM).users().search(null, null, null);\n+        Assert.assertEquals(1, users.size());\n \n-        Assert.assertEquals(socialToken, tokenResponse.getToken());\n+        String username = users.get(0).getUsername();\n+        checkFeature(501, username);\n \n+        Response tokenResp = testingClient.testing().enableFeature(Profile.Feature.TOKEN_EXCHANGE.toString());\n+        assertEquals(200, tokenResp.getStatus());\n \n-         // turn on store token\n-        idp = adminClient.realm(REALM).identityProviders().get(currentTestProvider.id).toRepresentation();\n-        idp.setStoreToken(true);\n-        adminClient.realm(REALM).identityProviders().get(idp.getAlias()).update(idp);\n+        ProfileAssume.assumeFeatureEnabled(Profile.Feature.TOKEN_EXCHANGE);\n+        Client httpClient = ClientBuilder.newClient();\n \n-        httpClient.close();\n+        try {\n+            AccessTokenResponse tokenResponse = checkFeature(200, username);\n+            Assert.assertNotNull(tokenResponse);\n+            String socialToken = tokenResponse.getToken();\n+            Assert.assertNotNull(socialToken);\n+\n+            // remove all users\n+            removeUser();\n+\n+            users = adminClient.realm(REALM).users().search(null, null, null);\n+            Assert.assertEquals(0, users.size());\n+\n+            // now try external exchange where we trust social provider and import the external token.\n+            Response response = getExchangeUrl(httpClient).request()\n+                    .header(HttpHeaders.AUTHORIZATION, BasicAuthHelper.createHeader(EXCHANGE_CLIENT, \"secret\"))\n+                    .post(Entity.form(\n+                            new Form()\n+                                    .param(OAuth2Constants.GRANT_TYPE, OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE)\n+                                    .param(OAuth2Constants.SUBJECT_TOKEN, socialToken)\n+                                    .param(OAuth2Constants.SUBJECT_TOKEN_TYPE, OAuth2Constants.ACCESS_TOKEN_TYPE)\n+                                    .param(OAuth2Constants.SUBJECT_ISSUER, currentTestProvider.id())\n+                    ));\n+            Assert.assertEquals(200, response.getStatus());\n+            response.close();\n+\n+            users = adminClient.realm(REALM).users().search(null, null, null);\n+            Assert.assertEquals(1, users.size());\n+\n+            Assert.assertEquals(username, users.get(0).getUsername());\n+\n+            // remove all users\n+            removeUser();\n+\n+            users = adminClient.realm(REALM).users().search(null, null, null);\n+            Assert.assertEquals(0, users.size());\n+\n+            ///// Test that we can update social token from session with stored tokens turned off.\n+\n+            // turn off store token\n+            IdentityProviderRepresentation idp = adminClient.realm(REALM).identityProviders().get(currentTestProvider.id).toRepresentation();\n+            idp.setStoreToken(false);\n+            adminClient.realm(REALM).identityProviders().get(idp.getAlias()).update(idp);\n+\n+            // first exchange social token to get a user session that should store the social token there\n+            response = getExchangeUrl(httpClient).request()\n+                    .header(HttpHeaders.AUTHORIZATION, BasicAuthHelper.createHeader(EXCHANGE_CLIENT, \"secret\"))\n+                    .post(Entity.form(\n+                            new Form()\n+                                    .param(OAuth2Constants.GRANT_TYPE, OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE)\n+                                    .param(OAuth2Constants.SUBJECT_TOKEN, socialToken)\n+                                    .param(OAuth2Constants.SUBJECT_TOKEN_TYPE, OAuth2Constants.ACCESS_TOKEN_TYPE)\n+                                    .param(OAuth2Constants.SUBJECT_ISSUER, currentTestProvider.id())\n+                    ));\n+            Assert.assertEquals(200, response.getStatus());\n+            tokenResponse = response.readEntity(AccessTokenResponse.class);\n+            String keycloakToken = tokenResponse.getToken();\n+            response.close();\n+\n+            // now take keycloak token and make sure it can get back the social token from the user session since stored tokens are off\n+            response = getExchangeUrl(httpClient).request()\n+                    .header(HttpHeaders.AUTHORIZATION, BasicAuthHelper.createHeader(EXCHANGE_CLIENT, \"secret\"))\n+                    .post(Entity.form(\n+                            new Form()\n+                                    .param(OAuth2Constants.GRANT_TYPE, OAuth2Constants.TOKEN_EXCHANGE_GRANT_TYPE)\n+                                    .param(OAuth2Constants.SUBJECT_TOKEN, keycloakToken)\n+                                    .param(OAuth2Constants.SUBJECT_TOKEN_TYPE, OAuth2Constants.ACCESS_TOKEN_TYPE)\n+                                    .param(OAuth2Constants.REQUESTED_TOKEN_TYPE, OAuth2Constants.ACCESS_TOKEN_TYPE)\n+                                    .param(OAuth2Constants.REQUESTED_ISSUER, currentTestProvider.id())\n+                    ));\n+            Assert.assertEquals(200, response.getStatus());\n+            tokenResponse = response.readEntity(AccessTokenResponse.class);\n+            response.close();\n+\n+            Assert.assertEquals(socialToken, tokenResponse.getToken());\n+            // turn on store token\n+            idp = adminClient.realm(REALM).identityProviders().get(currentTestProvider.id).toRepresentation();\n+            idp.setStoreToken(true);\n+            adminClient.realm(REALM).identityProviders().get(idp.getAlias()).update(idp);\n+        } finally {\n+            httpClient.close();\n+            tokenResp = testingClient.testing().disableFeature(Profile.Feature.TOKEN_EXCHANGE.toString());\n+            assertEquals(200, tokenResp.getStatus());\n+            checkFeature(501, username);\n+        }\n     }\n-\n-}\n+}\n\\ No newline at end of file",
      "parent_sha": "5d44c7938a4dcf68cf2edbb31cc590db3d0166f6"
    }
  },
  {
    "oid": "3d175dbe0c81748718f4c1fbbaa7621106a619c4",
    "message": "KEYCLOAK-11582 Fix ldap groups sync which fails when syncing back to MSAD (#6348)\n\n* KEYCLOAK-11582 Fix sync which fails when syncing to MSAD",
    "date": "2019-10-03T18:13:12Z",
    "url": "https://github.com/keycloak/keycloak/commit/3d175dbe0c81748718f4c1fbbaa7621106a619c4",
    "details": {
      "sha": "3cb6c2292e51ce25217aa45ab111a095efd0410d",
      "filename": "federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/membership/group/GroupLDAPStorageMapper.java",
      "status": "modified",
      "additions": 28,
      "deletions": 29,
      "changes": 57,
      "blob_url": "https://github.com/keycloak/keycloak/blob/3d175dbe0c81748718f4c1fbbaa7621106a619c4/federation%2Fldap%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2Fldap%2Fmappers%2Fmembership%2Fgroup%2FGroupLDAPStorageMapper.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/3d175dbe0c81748718f4c1fbbaa7621106a619c4/federation%2Fldap%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2Fldap%2Fmappers%2Fmembership%2Fgroup%2FGroupLDAPStorageMapper.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/federation%2Fldap%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2Fldap%2Fmappers%2Fmembership%2Fgroup%2FGroupLDAPStorageMapper.java?ref=3d175dbe0c81748718f4c1fbbaa7621106a619c4",
      "patch": "@@ -450,43 +450,42 @@ public String getStatus() {\n         logger.debugf(\"Syncing groups from Keycloak into LDAP. Mapper is [%s], LDAP provider is [%s]\", mapperModel.getName(), ldapProvider.getModel().getName());\n \n         // Query existing LDAP groups\n-        try (LDAPQuery ldapQuery = createGroupQuery(config.isPreserveGroupsInheritance())) {\n-            List<LDAPObject> ldapGroups = ldapQuery.getResultList();\n \n-            // Convert them to Map<String, LDAPObject>\n-            Map<String, LDAPObject> ldapGroupsMap = new HashMap<>();\n-            String groupsRdnAttr = config.getGroupNameLdapAttribute();\n-            for (LDAPObject ldapGroup : ldapGroups) {\n-                String groupName = ldapGroup.getAttributeAsString(groupsRdnAttr);\n-                ldapGroupsMap.put(groupName, ldapGroup);\n-            }\n+        List<LDAPObject> ldapGroups = getAllLDAPGroups(config.isPreserveGroupsInheritance());\n \n+        // Convert them to Map<String, LDAPObject>\n+        Map<String, LDAPObject> ldapGroupsMap = new HashMap<>();\n+        String groupsRdnAttr = config.getGroupNameLdapAttribute();\n+        for (LDAPObject ldapGroup : ldapGroups) {\n+            String groupName = ldapGroup.getAttributeAsString(groupsRdnAttr);\n+            ldapGroupsMap.put(groupName, ldapGroup);\n+        }\n \n-            // Map to track all LDAP groups also exists in Keycloak\n-            Set<String> ldapGroupNames = new HashSet<>();\n \n-            // Create or update KC groups to LDAP including their attributes\n-            for (GroupModel kcGroup : realm.getTopLevelGroups()) {\n-                processKeycloakGroupSyncToLDAP(kcGroup, ldapGroupsMap, ldapGroupNames, syncResult);\n-            }\n+        // Map to track all LDAP groups also exists in Keycloak\n+        Set<String> ldapGroupNames = new HashSet<>();\n \n-            // If dropNonExisting, then drop all groups, which doesn't exist in KC from LDAP as well\n-            if (config.isDropNonExistingGroupsDuringSync()) {\n-                Set<String> copy = new HashSet<>(ldapGroupsMap.keySet());\n-                for (String groupName : copy) {\n-                    if (!ldapGroupNames.contains(groupName)) {\n-                        LDAPObject ldapGroup = ldapGroupsMap.remove(groupName);\n-                        ldapProvider.getLdapIdentityStore().remove(ldapGroup);\n-                        syncResult.increaseRemoved();\n-                    }\n+        // Create or update KC groups to LDAP including their attributes\n+        for (GroupModel kcGroup : realm.getTopLevelGroups()) {\n+            processKeycloakGroupSyncToLDAP(kcGroup, ldapGroupsMap, ldapGroupNames, syncResult);\n+        }\n+\n+        // If dropNonExisting, then drop all groups, which doesn't exist in KC from LDAP as well\n+        if (config.isDropNonExistingGroupsDuringSync()) {\n+            Set<String> copy = new HashSet<>(ldapGroupsMap.keySet());\n+            for (String groupName : copy) {\n+                if (!ldapGroupNames.contains(groupName)) {\n+                    LDAPObject ldapGroup = ldapGroupsMap.remove(groupName);\n+                    ldapProvider.getLdapIdentityStore().remove(ldapGroup);\n+                    syncResult.increaseRemoved();\n                 }\n             }\n+        }\n \n-            // Finally process memberships,\n-            if (config.isPreserveGroupsInheritance()) {\n-                for (GroupModel kcGroup : realm.getTopLevelGroups()) {\n-                    processKeycloakGroupMembershipsSyncToLDAP(kcGroup, ldapGroupsMap);\n-                }\n+        // Finally process memberships,\n+        if (config.isPreserveGroupsInheritance()) {\n+            for (GroupModel kcGroup : realm.getTopLevelGroups()) {\n+                processKeycloakGroupMembershipsSyncToLDAP(kcGroup, ldapGroupsMap);\n             }\n         }\n ",
      "parent_sha": "bc5b4de79e4d30630042216d686a2abc7260c165"
    }
  },
  {
    "oid": "c80531dfa7f42d48ecf5dbf4bf66eb10107f4014",
    "message": "KEYCLOAK-9847 Checking user cache for being not null before using it",
    "date": "2019-05-15T13:47:03Z",
    "url": "https://github.com/keycloak/keycloak/commit/c80531dfa7f42d48ecf5dbf4bf66eb10107f4014",
    "details": {
      "sha": "1b0e61312f30591ac7f8c8a918501ee30796d92b",
      "filename": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmAdapter.java",
      "status": "modified",
      "additions": 19,
      "deletions": 12,
      "changes": 31,
      "blob_url": "https://github.com/keycloak/keycloak/blob/c80531dfa7f42d48ecf5dbf4bf66eb10107f4014/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2FRealmAdapter.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/c80531dfa7f42d48ecf5dbf4bf66eb10107f4014/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2FRealmAdapter.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2FRealmAdapter.java?ref=c80531dfa7f42d48ecf5dbf4bf66eb10107f4014",
      "patch": "@@ -22,6 +22,7 @@\n import org.keycloak.component.ComponentModel;\n import org.keycloak.models.*;\n import org.keycloak.models.cache.CachedRealmModel;\n+import org.keycloak.models.cache.UserCache;\n import org.keycloak.models.cache.infinispan.entities.CachedRealm;\n import org.keycloak.storage.UserStorageProvider;\n import org.keycloak.storage.client.ClientStorageProvider;\n@@ -1437,19 +1438,25 @@ public ComponentModel importComponentModel(ComponentModel model) {\n \n     public void executeEvictions(ComponentModel model) {\n         if (model == null) return;\n-        // If not realm component, check to see if it is a user storage provider child component (i.e. LDAP mapper)\n-        if (model.getParentId() != null && !model.getParentId().equals(getId())) {\n-            ComponentModel parent = getComponent(model.getParentId());\n-            if (parent != null && UserStorageProvider.class.getName().equals(parent.getProviderType())) {\n-                session.userCache().evict(this);\n-            }\n-            return;\n-        }\n-\n-        // invalidate entire user cache if we're dealing with user storage SPI\n-        if (UserStorageProvider.class.getName().equals(model.getProviderType())) {\n-            session.userCache().evict(this);\n+        \n+        // if user cache is disabled this is null\n+        UserCache userCache = session.userCache(); \n+        if (userCache != null) {        \n+          // If not realm component, check to see if it is a user storage provider child component (i.e. LDAP mapper)\n+          if (model.getParentId() != null && !model.getParentId().equals(getId())) {\n+              ComponentModel parent = getComponent(model.getParentId());\n+              if (parent != null && UserStorageProvider.class.getName().equals(parent.getProviderType())) {\n+                userCache.evict(this);\n+              }\n+              return;\n+          }\n+  \n+          // invalidate entire user cache if we're dealing with user storage SPI\n+          if (UserStorageProvider.class.getName().equals(model.getProviderType())) {\n+            userCache.evict(this);\n+          }\n         }\n+        \n         // invalidate entire realm if we're dealing with client storage SPI\n         // entire realm because of client roles, client lists, and clients\n         if (ClientStorageProvider.class.getName().equals(model.getProviderType())) {",
      "parent_sha": "76a6e82173138194b4403b247c37094e30bee0c2"
    }
  },
  {
    "oid": "1a5517f986f8ccf17065c8f0d163f4ed5a015c58",
    "message": "KEYCLOAK-2893 Fix TokenIntrospectionTest",
    "date": "2016-04-22T12:23:59Z",
    "url": "https://github.com/keycloak/keycloak/commit/1a5517f986f8ccf17065c8f0d163f4ed5a015c58",
    "details": {
      "sha": "74b0516b10682c0e98c88d67e4356684e0b02cca",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/TokenIntrospectionTest.java",
      "status": "modified",
      "additions": 7,
      "deletions": 15,
      "changes": 22,
      "blob_url": "https://github.com/keycloak/keycloak/blob/1a5517f986f8ccf17065c8f0d163f4ed5a015c58/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Foauth%2FTokenIntrospectionTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/1a5517f986f8ccf17065c8f0d163f4ed5a015c58/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Foauth%2FTokenIntrospectionTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Foauth%2FTokenIntrospectionTest.java?ref=1a5517f986f8ccf17065c8f0d163f4ed5a015c58",
      "patch": "@@ -21,7 +21,6 @@\n import org.junit.Rule;\n import org.junit.Test;\n import org.keycloak.OAuth2Constants;\n-import org.keycloak.common.util.Time;\n import org.keycloak.representations.idm.ClientRepresentation;\n import org.keycloak.representations.idm.CredentialRepresentation;\n import org.keycloak.representations.idm.EventRepresentation;\n@@ -35,7 +34,6 @@\n import org.keycloak.util.JsonSerialization;\n \n import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.List;\n \n import static org.junit.Assert.*;\n@@ -243,19 +241,13 @@ public void testIntrospectAccessTokenExpired() throws Exception {\n         String code = oauth.getCurrentQuery().get(OAuth2Constants.CODE);\n         AccessTokenResponse accessTokenResponse = oauth.doAccessTokenRequest(code, \"password\");\n \n-        try {\n-            HashMap<String, String> args = new HashMap<>();\n-            args.put(\"offset\", String.valueOf(adminClient.realm(oauth.getRealm()).toRepresentation().getAccessTokenLifespan() + 1));\n-            testingClient.testing().setTimeOffset(args);\n-            String tokenResponse = oauth.introspectAccessTokenWithClientCredential(\"confidential-cli\", \"secret1\", accessTokenResponse.getAccessToken());\n-            TokenMetadataRepresentation rep = JsonSerialization.readValue(tokenResponse, TokenMetadataRepresentation.class);\n+        setTimeOffset(adminClient.realm(oauth.getRealm()).toRepresentation().getAccessTokenLifespan() + 1);\n+        String tokenResponse = oauth.introspectAccessTokenWithClientCredential(\"confidential-cli\", \"secret1\", accessTokenResponse.getAccessToken());\n+        TokenMetadataRepresentation rep = JsonSerialization.readValue(tokenResponse, TokenMetadataRepresentation.class);\n \n-            assertFalse(rep.isActive());\n-            assertNull(rep.getUserName());\n-            assertNull(rep.getClientId());\n-            assertNull(rep.getSubject());\n-        } finally {\n-            Time.setOffset(0);\n-        }\n+        assertFalse(rep.isActive());\n+        assertNull(rep.getUserName());\n+        assertNull(rep.getClientId());\n+        assertNull(rep.getSubject());\n     }\n }",
      "parent_sha": "0797cf6db7aad36217b69d6d75a3531ef7507a78"
    }
  },
  {
    "oid": "04445c8a23a86edb4756588fe3e540c1ac362576",
    "message": "KEYCLOAK-8904 Backpressure in RemoteCacheSessionsLoader",
    "date": "2018-12-10T21:49:43Z",
    "url": "https://github.com/keycloak/keycloak/commit/04445c8a23a86edb4756588fe3e540c1ac362576",
    "details": {
      "sha": "730bd6ab3e4a020d81746ad81cc03a7a54c4ff8e",
      "filename": "model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/remotestore/RemoteCacheSessionsLoader.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/keycloak/keycloak/blob/04445c8a23a86edb4756588fe3e540c1ac362576/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fsessions%2Finfinispan%2Fremotestore%2FRemoteCacheSessionsLoader.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/04445c8a23a86edb4756588fe3e540c1ac362576/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fsessions%2Finfinispan%2Fremotestore%2FRemoteCacheSessionsLoader.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fsessions%2Finfinispan%2Fremotestore%2FRemoteCacheSessionsLoader.java?ref=04445c8a23a86edb4756588fe3e540c1ac362576",
      "patch": "@@ -18,6 +18,7 @@\n package org.keycloak.models.sessions.infinispan.remotestore;\n \n import java.io.Serializable;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -114,14 +115,15 @@ public WorkerResult loadSessions(KeycloakSession session, RemoteCacheSessionsLoa\n \n         log.debugf(\"Will do bulk load of sessions from remote cache '%s' . Segment: %d\", cache.getName(), ctx.getSegment());\n \n+        Map<Object, Object> remoteEntries = new HashMap<>();\n         CloseableIterator<Map.Entry> iterator = null;\n         int countLoaded = 0;\n         try {\n             iterator = remoteCache.retrieveEntries(null, myIspnSegments, loaderContext.getSessionsPerSegment());\n             while (iterator.hasNext()) {\n                 countLoaded++;\n                 Map.Entry entry = iterator.next();\n-                decoratedCache.putAsync(entry.getKey(), entry.getValue());\n+                remoteEntries.put(entry.getKey(), entry.getValue());\n             }\n         } catch (RuntimeException e) {\n             log.warnf(e, \"Error loading sessions from remote cache '%s' for segment '%d'\", remoteCache.getName(), ctx.getSegment());\n@@ -132,6 +134,8 @@ public WorkerResult loadSessions(KeycloakSession session, RemoteCacheSessionsLoa\n             }\n         }\n \n+        decoratedCache.putAll(remoteEntries);\n+\n         log.debugf(\"Successfully finished loading sessions from cache '%s' . Segment: %d, Count of sessions loaded: %d\", cache.getName(), ctx.getSegment(), countLoaded);\n \n         return new WorkerResult(true, ctx.getSegment(), ctx.getWorkerId());",
      "parent_sha": "40071a95da8b0e19b98370446017e88b79dccf28"
    }
  },
  {
    "oid": "1d2d6591b29147c50cdd1b96695f23ab7f1b6279",
    "message": "KEYCLOAK-10826: Provide the locale name in the LocaleBean to be used in themes",
    "date": "2019-07-13T05:18:40Z",
    "url": "https://github.com/keycloak/keycloak/commit/1d2d6591b29147c50cdd1b96695f23ab7f1b6279",
    "details": {
      "sha": "ad4062d2e1800469b14dcebc5e8aee4f9a6556b4",
      "filename": "services/src/main/java/org/keycloak/theme/beans/LocaleBean.java",
      "status": "modified",
      "additions": 15,
      "deletions": 3,
      "changes": 18,
      "blob_url": "https://github.com/keycloak/keycloak/blob/1d2d6591b29147c50cdd1b96695f23ab7f1b6279/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftheme%2Fbeans%2FLocaleBean.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/1d2d6591b29147c50cdd1b96695f23ab7f1b6279/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftheme%2Fbeans%2FLocaleBean.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Ftheme%2Fbeans%2FLocaleBean.java?ref=1d2d6591b29147c50cdd1b96695f23ab7f1b6279",
      "patch": "@@ -30,37 +30,49 @@\n public class LocaleBean {\n \n     private String current;\n+    private String currentLanguageTag;\n     private List<Locale> supported;\n \n     public LocaleBean(RealmModel realm, java.util.Locale current, UriBuilder uriBuilder, Properties messages) {\n-        this.current = messages.getProperty(\"locale_\" + current.toLanguageTag(), current.toLanguageTag());\n+        this.currentLanguageTag = current.toLanguageTag();\n+        this.current = messages.getProperty(\"locale_\" + this.currentLanguageTag, this.currentLanguageTag);\n \n         supported = new LinkedList<>();\n         for (String l : realm.getSupportedLocales()) {\n             String label = messages.getProperty(\"locale_\" + l, l);\n             String url = uriBuilder.replaceQueryParam(\"kc_locale\", l).build().toString();\n-            supported.add(new Locale(label, url));\n+            supported.add(new Locale(l, label, url));\n         }\n     }\n \n     public String getCurrent() {\n         return current;\n     }\n \n+    public String getCurrentLanguageTag() {\n+        return currentLanguageTag;\n+    }\n+\n     public List<Locale> getSupported() {\n         return supported;\n     }\n \n     public static class Locale {\n \n+        private String languageTag;\n         private String label;\n         private String url;\n \n-        public Locale(String label, String url) {\n+        public Locale(String languageTag, String label, String url) {\n+            this.languageTag = languageTag;\n             this.label = label;\n             this.url = url;\n         }\n \n+        public String getLanguageTag() {\n+            return languageTag;\n+        }\n+\n         public String getUrl() {\n             return url;\n         }",
      "parent_sha": "6d6db1f3e52ff7cd22e076e1bbfaeae328743d3b"
    }
  },
  {
    "oid": "f4178bfa266d528eb4535021de9406ad163df53a",
    "message": "Remove effective roles filtering to avoid inconsistency (#28099)\n\n* Changed effective roles filtering method\r\n\r\nSigned-off-by: Andreas Blaettlinger <bln1imb@bosch.com>\r\n\r\n* Adjusted remaining endpoints\r\n\r\nSigned-off-by: Andreas Blaettlinger <bln1imb@bosch.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Andreas Blaettlinger <bln1imb@bosch.com>",
    "date": "2024-07-08T12:56:55Z",
    "url": "https://github.com/keycloak/keycloak/commit/f4178bfa266d528eb4535021de9406ad163df53a",
    "details": {
      "sha": "421f8413be6f4f8e44dca5c3a4ef66c9b5bfed75",
      "filename": "rest/admin-ui-ext/src/main/java/org/keycloak/admin/ui/rest/EffectiveRoleMappingResource.java",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/keycloak/keycloak/blob/f4178bfa266d528eb4535021de9406ad163df53a/rest%2Fadmin-ui-ext%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadmin%2Fui%2Frest%2FEffectiveRoleMappingResource.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/f4178bfa266d528eb4535021de9406ad163df53a/rest%2Fadmin-ui-ext%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadmin%2Fui%2Frest%2FEffectiveRoleMappingResource.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/rest%2Fadmin-ui-ext%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadmin%2Fui%2Frest%2FEffectiveRoleMappingResource.java?ref=f4178bfa266d528eb4535021de9406ad163df53a",
      "patch": "@@ -60,7 +60,7 @@ public final List<ClientRole> listCompositeClientScopeRoleMappings(@PathParam(\"i\n         this.auth.clients().requireView(clientScope);\n         return toSortedClientRoles(\n                 addSubClientRoles(clientScope.getScopeMappingsStream())\n-                .filter(auth.roles()::canMapClientScope));\n+        );\n     }\n \n     @GET\n@@ -90,7 +90,7 @@ public final List<ClientRole> listCompositeClientsRoleMappings(@PathParam(\"id\")\n         auth.clients().requireView(client);\n         return toSortedClientRoles(\n                 addSubClientRoles(client.getScopeMappingsStream())\n-                .filter(auth.roles()::canMapRole));\n+        );\n     }\n \n     @GET\n@@ -120,7 +120,7 @@ public final List<ClientRole> listCompositeGroupsRoleMappings(@PathParam(\"id\") S\n         auth.groups().requireView(group);\n         return toSortedClientRoles(\n                 addSubClientRoles(addParents(group).flatMap(GroupModel::getRoleMappingsStream))\n-                .filter(auth.roles()::canMapRole));\n+        );\n     }\n \n     @GET\n@@ -154,7 +154,7 @@ public final List<ClientRole> listCompositeUsersRoleMappings(@PathParam(\"id\") St\n                 user.getGroupsStream()\n                         .flatMap(g -> addParents(g))\n                         .flatMap(GroupModel::getRoleMappingsStream)))\n-                .filter(auth.roles()::canMapRole));\n+        );\n     }\n \n     @GET\n@@ -179,9 +179,7 @@ public final List<ClientRole> listCompositeRealmRoleMappings() {\n         auth.roles().requireList(realm);\n         final RoleModel defaultRole = this.realm.getDefaultRole();\n         //this definitely does not return what the descriptions says\n-        return toSortedClientRoles(\n-                addSubClientRoles(Stream.of(defaultRole))\n-                .filter(auth.roles()::canMapRole));\n+        return toSortedClientRoles(addSubClientRoles(Stream.of(defaultRole)));\n     }\n \n     private Stream<RoleModel> addSubClientRoles(Stream<RoleModel> roles) {",
      "parent_sha": "a918eb1e302b3b38acf6462d0c0ede3f3e21cc92"
    }
  },
  {
    "oid": "4cd64c822cf086a7ca79727bac0f1ea745722252",
    "message": "Log model migration on INFO level\n\ncloses #33163\n\nSigned-off-by: Christian Janker <christian.janker@gmx.at>",
    "date": "2024-09-24T20:00:52Z",
    "url": "https://github.com/keycloak/keycloak/commit/4cd64c822cf086a7ca79727bac0f1ea745722252",
    "details": {
      "sha": "c3d34fc51888bd621ac475ca66c395cffcb10fff",
      "filename": "model/storage-private/src/main/java/org/keycloak/storage/datastore/DefaultMigrationManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/4cd64c822cf086a7ca79727bac0f1ea745722252/model%2Fstorage-private%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2Fdatastore%2FDefaultMigrationManager.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/4cd64c822cf086a7ca79727bac0f1ea745722252/model%2Fstorage-private%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2Fdatastore%2FDefaultMigrationManager.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Fstorage-private%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fstorage%2Fdatastore%2FDefaultMigrationManager.java?ref=4cd64c822cf086a7ca79727bac0f1ea745722252",
      "patch": "@@ -143,7 +143,7 @@ public void migrate() {\n             for (Migration m : migrations) {\n                 if (databaseVersion == null || databaseVersion.lessThan(m.getVersion())) {\n                     if (databaseVersion != null) {\n-                        logger.debugf(\"Migrating older model to %s\", m.getVersion());\n+                        logger.infof(\"Migrating older model to %s\", m.getVersion());\n                     }\n                     m.migrate(session);\n                 }",
      "parent_sha": "08ac55906f4d64e0424e900962143bc4c2a8e1a2"
    }
  },
  {
    "oid": "df590bfc3f765128adf08ed527f07af655fb62f5",
    "message": "fixed some compile warnings",
    "date": "2016-01-08T15:27:25Z",
    "url": "https://github.com/keycloak/keycloak/commit/df590bfc3f765128adf08ed527f07af655fb62f5",
    "details": {
      "sha": "211406c57e8ad99647bc07ae1af6bf2bb6a3a12c",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/console/clients/AbstractClientTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/df590bfc3f765128adf08ed527f07af655fb62f5/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fconsole%2Fclients%2FAbstractClientTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/df590bfc3f765128adf08ed527f07af655fb62f5/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fconsole%2Fclients%2FAbstractClientTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fconsole%2Fclients%2FAbstractClientTest.java?ref=df590bfc3f765128adf08ed527f07af655fb62f5",
      "patch": "@@ -119,7 +119,7 @@ public static ClientRepresentation createSamlClientRep(String clinetId) {\n     }\n     \n     private static void setRedirectUris(ClientRepresentation client, String... redirectUris) {\n-        List<String> redirectUrisList = new ArrayList();\n+        List<String> redirectUrisList = new ArrayList<>();\n         redirectUrisList.addAll(Arrays.asList(redirectUris));\n         client.setRedirectUris(redirectUrisList);\n     }",
      "parent_sha": "bce5c49cbc04767c40d8236cbc258bec38bb4647"
    }
  },
  {
    "oid": "2e54ebda76f8249b4c7ab3596600ee21c567fa01",
    "message": "[KEYCLOAK-13579] - Ignore exceptions when shutting down loopback server",
    "date": "2020-04-29T10:33:35Z",
    "url": "https://github.com/keycloak/keycloak/commit/2e54ebda76f8249b4c7ab3596600ee21c567fa01",
    "details": {
      "sha": "59811285e61f6dc4ad93f28daf2ab229ccfd90e9",
      "filename": "adapters/oidc/installed/src/main/java/org/keycloak/adapters/installed/KeycloakInstalled.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/keycloak/keycloak/blob/2e54ebda76f8249b4c7ab3596600ee21c567fa01/adapters%2Foidc%2Finstalled%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Finstalled%2FKeycloakInstalled.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/2e54ebda76f8249b4c7ab3596600ee21c567fa01/adapters%2Foidc%2Finstalled%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Finstalled%2FKeycloakInstalled.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/adapters%2Foidc%2Finstalled%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Finstalled%2FKeycloakInstalled.java?ref=2e54ebda76f8249b4c7ab3596600ee21c567fa01",
      "patch": "@@ -637,7 +637,11 @@ public void start() {\n         }\n \n         public void stop() {\n-            server.stop();\n+            try {\n+                server.stop();\n+            } catch (Exception ignore) {\n+                // it is OK to happen if thread is modified while stopping the server, specially when a security manager is enabled\n+            }\n         }\n \n         public int getLocalPort() {",
      "parent_sha": "601bf8d63ed64b09fa05af79b3a1f407faebe768"
    }
  },
  {
    "oid": "6805b991e18da862ef3c2d67266bd140d3f2941b",
    "message": "Move test under 'endpoint' package.",
    "date": "2016-04-14T23:46:15Z",
    "url": "https://github.com/keycloak/keycloak/commit/6805b991e18da862ef3c2d67266bd140d3f2941b",
    "details": {
      "sha": "8fd43fd23c2a99464f309a8a6170366b85495382",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/endpoint/client/ClientTemplateTest.java",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/6805b991e18da862ef3c2d67266bd140d3f2941b/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fendpoint%2Fclient%2FClientTemplateTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/6805b991e18da862ef3c2d67266bd140d3f2941b/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fendpoint%2Fclient%2FClientTemplateTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fendpoint%2Fclient%2FClientTemplateTest.java?ref=6805b991e18da862ef3c2d67266bd140d3f2941b",
      "patch": "@@ -15,7 +15,7 @@\n  * limitations under the License.\n  */\n \n-package org.keycloak.testsuite.admin.client;\n+package org.keycloak.testsuite.endpoint.client;\n \n import java.util.Collections;\n import java.util.List;",
      "previous_filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/client/ClientTemplateTest.java",
      "parent_sha": "e25a0d3cf1d5de1c10691c5da927e18cf1772f5b"
    }
  },
  {
    "oid": "77f83d7f65f5997db2d4afeeb4a3ab4c441482df",
    "message": "Grant type urn:ietf:params:oauth:grant-type:uma-ticket token service endpoint returns NullPointerException\n\nCloses #34176\n\nSigned-off-by: Martin Kanis <mkanis@redhat.com>",
    "date": "2024-10-22T18:28:26Z",
    "url": "https://github.com/keycloak/keycloak/commit/77f83d7f65f5997db2d4afeeb4a3ab4c441482df",
    "details": {
      "sha": "e14e79ffca518dcb0fbccb76f8f2ac7025d7020b",
      "filename": "services/src/main/java/org/keycloak/services/util/DPoPUtil.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/77f83d7f65f5997db2d4afeeb4a3ab4c441482df/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Futil%2FDPoPUtil.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/77f83d7f65f5997db2d4afeeb4a3ab4c441482df/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Futil%2FDPoPUtil.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Futil%2FDPoPUtil.java?ref=77f83d7f65f5997db2d4afeeb4a3ab4c441482df",
      "patch": "@@ -154,7 +154,7 @@ public static Optional<DPoP> retrieveDPoPHeaderIfPresent(KeycloakSession keycloa\n         }\n \n         HttpRequest request = keycloakSession.getContext().getHttpRequest();\n-        final boolean isClientRequiresDpop = clientConfig.isUseDPoP();\n+        final boolean isClientRequiresDpop = clientConfig != null && clientConfig.isUseDPoP();\n         final boolean isDpopHeaderPresent = request.getHttpHeaders().getHeaderString(DPoPUtil.DPOP_HTTP_HEADER) != null;\n         if (!isClientRequiresDpop && !isDpopHeaderPresent) {\n             return Optional.empty();",
      "parent_sha": "34f090143ca5edf6d0e142fa6b5d902e0756e0f8"
    }
  },
  {
    "oid": "eda018ba0a714840c372a5c8939f61ec83d2cd46",
    "message": "remove empty password check",
    "date": "2015-11-20T17:42:56Z",
    "url": "https://github.com/keycloak/keycloak/commit/eda018ba0a714840c372a5c8939f61ec83d2cd46",
    "details": {
      "sha": "5afaa3d6b7e1c7c00aa603da92e039c676d80553",
      "filename": "services/src/main/java/org/keycloak/authentication/authenticators/browser/AbstractUsernameFormAuthenticator.java",
      "status": "modified",
      "additions": 5,
      "deletions": 12,
      "changes": 17,
      "blob_url": "https://github.com/keycloak/keycloak/blob/eda018ba0a714840c372a5c8939f61ec83d2cd46/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fbrowser%2FAbstractUsernameFormAuthenticator.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/eda018ba0a714840c372a5c8939f61ec83d2cd46/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fbrowser%2FAbstractUsernameFormAuthenticator.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fbrowser%2FAbstractUsernameFormAuthenticator.java?ref=eda018ba0a714840c372a5c8939f61ec83d2cd46",
      "patch": "@@ -148,24 +148,17 @@ public boolean validateUserAndPassword(AuthenticationFlowContext context, Multiv\n     public boolean validatePassword(AuthenticationFlowContext context, UserModel user, MultivaluedMap<String, String> inputData) {\n         List<UserCredentialModel> credentials = new LinkedList<>();\n         String password = inputData.getFirst(CredentialRepresentation.PASSWORD);\n-        if (password == null || password.isEmpty()) {\n-            invalidPassword(context, user);\n-            return false;\n-        }\n         credentials.add(UserCredentialModel.password(password));\n         boolean valid = context.getSession().users().validCredentials(context.getRealm(), user, credentials);\n         if (!valid) {\n-            invalidPassword(context, user);\n+            context.getEvent().user(user);\n+            context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n+            Response challengeResponse = invalidCredentials(context);\n+            context.failureChallenge(AuthenticationFlowError.INVALID_CREDENTIALS, challengeResponse);\n+            context.clearUser();\n             return false;\n         }\n         return true;\n     }\n \n-    private void invalidPassword(AuthenticationFlowContext context, UserModel user) {\n-        context.getEvent().user(user);\n-        context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n-        Response challengeResponse = invalidCredentials(context);\n-        context.failureChallenge(AuthenticationFlowError.INVALID_CREDENTIALS, challengeResponse);\n-        context.clearUser();\n-    }\n }",
      "parent_sha": "ac1baa059f47570f2830b3b713b19811a40cdd33"
    }
  },
  {
    "oid": "18b94a21530a5fe4db12252c79efb2abd7c132c3",
    "message": "[KEYCLOAK-4034] - More logging.",
    "date": "2016-12-20T02:04:59Z",
    "url": "https://github.com/keycloak/keycloak/commit/18b94a21530a5fe4db12252c79efb2abd7c132c3",
    "details": {
      "sha": "b6df2eafb38d762cb7c2b81e9c382e684f61d24c",
      "filename": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/KeycloakAdapterPolicyEnforcer.java",
      "status": "modified",
      "additions": 8,
      "deletions": 11,
      "changes": 19,
      "blob_url": "https://github.com/keycloak/keycloak/blob/18b94a21530a5fe4db12252c79efb2abd7c132c3/adapters%2Foidc%2Fadapter-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Fauthorization%2FKeycloakAdapterPolicyEnforcer.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/18b94a21530a5fe4db12252c79efb2abd7c132c3/adapters%2Foidc%2Fadapter-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Fauthorization%2FKeycloakAdapterPolicyEnforcer.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/adapters%2Foidc%2Fadapter-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Fauthorization%2FKeycloakAdapterPolicyEnforcer.java?ref=18b94a21530a5fe4db12252c79efb2abd7c132c3",
      "patch": "@@ -17,6 +17,10 @@\n  */\n package org.keycloak.adapters.authorization;\n \n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n import org.jboss.logging.Logger;\n import org.keycloak.adapters.KeycloakDeployment;\n import org.keycloak.adapters.OIDCHttpFacade;\n@@ -34,10 +38,6 @@\n import org.keycloak.representations.adapters.config.PolicyEnforcerConfig.PathConfig;\n import org.keycloak.representations.idm.authorization.Permission;\n \n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n /**\n  * @author <a href=\"mailto:psilva@redhat.com\">Pedro Igor</a>\n  */\n@@ -51,7 +51,6 @@ public KeycloakAdapterPolicyEnforcer(PolicyEnforcer policyEnforcer) {\n \n     @Override\n     protected boolean isAuthorized(PathConfig pathConfig, Set<String> requiredScopes, AccessToken accessToken, OIDCHttpFacade httpFacade) {\n-        int retry = 2;\n         AccessToken original = accessToken;\n \n         if (super.isAuthorized(pathConfig, requiredScopes, accessToken, httpFacade)) {\n@@ -79,11 +78,7 @@ protected boolean isAuthorized(PathConfig pathConfig, Set<String> requiredScopes\n \n         original.setAuthorization(authorization);\n \n-        if (super.isAuthorized(pathConfig, requiredScopes, accessToken, httpFacade)) {\n-            return true;\n-        }\n-\n-        return false;\n+        return super.isAuthorized(pathConfig, requiredScopes, accessToken, httpFacade);\n     }\n \n     @Override\n@@ -108,7 +103,7 @@ private AccessToken requestAuthorizationToken(PathConfig pathConfig, Set<String>\n             KeycloakDeployment deployment = getPolicyEnforcer().getDeployment();\n \n             if (getEnforcerConfig().getUserManagedAccess() != null) {\n-                LOGGER.debug(\"Obtaining authorization for  authenticated user.\");\n+                LOGGER.debug(\"Obtaining authorization for authenticated user.\");\n                 PermissionRequest permissionRequest = new PermissionRequest();\n \n                 permissionRequest.setResourceSetId(pathConfig.getId());\n@@ -136,12 +131,14 @@ private AccessToken requestAuthorizationToken(PathConfig pathConfig, Set<String>\n                     permissionRequest.setResourceSetId(pathConfig.getId());\n                     permissionRequest.setResourceSetName(pathConfig.getName());\n                     permissionRequest.setScopes(new HashSet<>(pathConfig.getScopes()));\n+                    LOGGER.debugf(\"Sending entitlements request: resource_set_id [%s], resource_set_name [%s], scopes [%s].\", permissionRequest.getResourceSetId(), permissionRequest.getResourceSetName(), permissionRequest.getScopes());\n                     request.addPermission(permissionRequest);\n                     EntitlementResponse authzResponse = authzClient.entitlement(accessToken).get(authzClient.getConfiguration().getClientId(), request);\n                     return AdapterRSATokenVerifier.verifyToken(authzResponse.getRpt(), deployment);\n                 }\n             }\n         } catch (AuthorizationDeniedException e) {\n+            LOGGER.debug(\"Authorization denied\", e);\n             return null;\n         } catch (Exception e) {\n             throw new RuntimeException(\"Unexpected error during authorization request.\", e);",
      "parent_sha": "0b3e8673626829dadc295b1ed03d9cf40d72744d"
    }
  },
  {
    "oid": "31e8e73e48be34ab7f0a24b5b0556732b516d4a5",
    "message": "[KEYCLOAK-8849] - Using custom polling http client",
    "date": "2019-01-16T14:25:18Z",
    "url": "https://github.com/keycloak/keycloak/commit/31e8e73e48be34ab7f0a24b5b0556732b516d4a5",
    "details": {
      "sha": "2b984c183a7ceb1fa45efcfc4b4f83a509af5d93",
      "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/authz/EntitlementAPITest.java",
      "status": "modified",
      "additions": 18,
      "deletions": 1,
      "changes": 19,
      "blob_url": "https://github.com/keycloak/keycloak/blob/31e8e73e48be34ab7f0a24b5b0556732b516d4a5/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fauthz%2FEntitlementAPITest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/31e8e73e48be34ab7f0a24b5b0556732b516d4a5/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fauthz%2FEntitlementAPITest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration-arquillian%2Ftests%2Fbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fauthz%2FEntitlementAPITest.java?ref=31e8e73e48be34ab7f0a24b5b0556732b516d4a5",
      "patch": "@@ -35,6 +35,11 @@\n import java.util.Set;\n import java.util.function.Supplier;\n \n+import org.apache.http.client.HttpClient;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n import org.hamcrest.Matchers;\n import org.jboss.arquillian.container.test.api.ContainerController;\n import org.jboss.arquillian.test.api.ArquillianResource;\n@@ -1367,7 +1372,19 @@ private ClientResource getClient(RealmResource realm, String clientId) {\n \n     private AuthzClient getAuthzClient(String configFile) {\n         if (authzClient == null) {\n-            authzClient = AuthzClient.create(getClass().getResourceAsStream(\"/authorization-test/\" + configFile));\n+            Configuration configuration;\n+            try {\n+                configuration = JsonSerialization.readValue(getClass().getResourceAsStream(\"/authorization-test/\" + configFile), Configuration.class);\n+            } catch (IOException e) {\n+                throw new RuntimeException(\"Failed to read configuration\", e);\n+            }\n+            PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();\n+            connectionManager.setValidateAfterInactivity(10);\n+            connectionManager.setMaxTotal(10);\n+            HttpClient client = HttpClients.custom()\n+                    .setConnectionManager(connectionManager)\n+                    .build();\n+            authzClient = AuthzClient.create(new Configuration(configuration.getAuthServerUrl(), configuration.getRealm(), configuration.getResource(), configuration.getCredentials(), client));\n         }\n \n         return authzClient;",
      "parent_sha": "1199376e372a0aaf2230e3b1a883b875d09e7ddc"
    }
  },
  {
    "oid": "4eb05490f56e390bf8e8f4b71d992ad5a1ed0a71",
    "message": "added per-instance filtering logic to search groups API (#20714)",
    "date": "2023-06-02T06:31:20Z",
    "url": "https://github.com/keycloak/keycloak/commit/4eb05490f56e390bf8e8f4b71d992ad5a1ed0a71",
    "details": {
      "sha": "1633ecf9905b478caf2e5cef1bad0fb7e0c8baeb",
      "filename": "rest/admin-ui-ext/src/main/java/org/keycloak/admin/ui/rest/GroupsResource.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/keycloak/keycloak/blob/4eb05490f56e390bf8e8f4b71d992ad5a1ed0a71/rest%2Fadmin-ui-ext%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadmin%2Fui%2Frest%2FGroupsResource.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/4eb05490f56e390bf8e8f4b71d992ad5a1ed0a71/rest%2Fadmin-ui-ext%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadmin%2Fui%2Frest%2FGroupsResource.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/rest%2Fadmin-ui-ext%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadmin%2Fui%2Frest%2FGroupsResource.java?ref=4eb05490f56e390bf8e8f4b71d992ad5a1ed0a71",
      "patch": "@@ -22,6 +22,7 @@\n import org.keycloak.models.utils.ModelToRepresentation;\n import org.keycloak.representations.idm.GroupRepresentation;\n import org.keycloak.services.resources.admin.permissions.AdminPermissionEvaluator;\n+import org.keycloak.services.resources.admin.permissions.GroupPermissionEvaluator;\n import org.keycloak.utils.StringUtil;\n \n public class GroupsResource {\n@@ -56,15 +57,18 @@ public GroupsResource(KeycloakSession session, RealmModel realm, AdminPermission\n     public final Stream<GroupRepresentation> listGroups(@QueryParam(\"search\") @DefaultValue(\"\") final String search, @QueryParam(\"first\")\n     @DefaultValue(\"0\") int first, @QueryParam(\"max\") @DefaultValue(\"10\") int max, @QueryParam(\"global\") @DefaultValue(\"true\") boolean global,\n                                                         @QueryParam(\"exact\") @DefaultValue(\"false\") boolean exact) {\n-        this.auth.groups().requireList();\n+        GroupPermissionEvaluator groupsEvaluator = auth.groups();\n+        groupsEvaluator.requireList();\n         final Stream<GroupModel> stream;\n         if (global) {\n             stream = session.groups().searchForGroupByNameStream(realm, search.trim(), exact, first, max);\n         } else {\n             stream = this.realm.getTopLevelGroupsStream().filter(g -> g.getName().contains(search)).skip(first).limit(max);\n         }\n \n-        return stream.map(g -> toGroupHierarchy(g, search, exact));\n+        boolean canViewGlobal = groupsEvaluator.canView();\n+        return stream.filter(group -> canViewGlobal || groupsEvaluator.canView(group))\n+                .map(group -> toGroupHierarchy(group, search, exact));\n     }\n \n     private GroupRepresentation toGroupHierarchy(GroupModel group, final String search, boolean exact) {",
      "parent_sha": "f69ff5d2700bd20c6dd62c5d4a5f5c34f4f0a3b6"
    }
  },
  {
    "oid": "43002f7a8ae4456ffd6434d74c306afab9366aa3",
    "message": "KEYCLOAK-3488 Fix typo",
    "date": "2016-11-09T14:11:45Z",
    "url": "https://github.com/keycloak/keycloak/commit/43002f7a8ae4456ffd6434d74c306afab9366aa3",
    "details": {
      "sha": "f9a1e77c29c6011c3b6edc60637064e4ebcca20b",
      "filename": "adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/43002f7a8ae4456ffd6434d74c306afab9366aa3/adapters%2Fsaml%2Fcore-public%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Fsaml%2FSamlPrincipal.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/43002f7a8ae4456ffd6434d74c306afab9366aa3/adapters%2Fsaml%2Fcore-public%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Fsaml%2FSamlPrincipal.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/adapters%2Fsaml%2Fcore-public%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Fsaml%2FSamlPrincipal.java?ref=43002f7a8ae4456ffd6434d74c306afab9366aa3",
      "patch": "@@ -105,7 +105,7 @@ public List<String> getAttributes(String name) {\n      * @return\n      */\n     public List<String> getFriendlyAttributes(String friendlyName) {\n-        List<String> list = friendlyAttributes.get(name);\n+        List<String> list = friendlyAttributes.get(friendlyName);\n         if (list != null) {\n             return Collections.unmodifiableList(list);\n         } else {",
      "parent_sha": "c05057748f0744e7df84708194ff54541a10d0f6"
    }
  },
  {
    "oid": "f168b8cce97e87585d0af85e905cb310f4c357dc",
    "message": "Avoid invalidating the cache if removing an entry doesn't exist\n\nCloses #27852\n\nSigned-off-by: Alexander Schwartz <aschwart@redhat.com>",
    "date": "2024-03-13T12:36:07Z",
    "url": "https://github.com/keycloak/keycloak/commit/f168b8cce97e87585d0af85e905cb310f4c357dc",
    "details": {
      "sha": "c8fee2dbf36c2dd3fcc3d3139c9bc39ca5e4462d",
      "filename": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserAdapter.java",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/keycloak/keycloak/blob/f168b8cce97e87585d0af85e905cb310f4c357dc/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2FUserAdapter.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/f168b8cce97e87585d0af85e905cb310f4c357dc/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2FUserAdapter.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Finfinispan%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2Fcache%2Finfinispan%2FUserAdapter.java?ref=f168b8cce97e87585d0af85e905cb310f4c357dc",
      "patch": "@@ -192,8 +192,10 @@ public void setAttribute(String name, List<String> values) {\n \n     @Override\n     public void removeAttribute(String name) {\n-        getDelegateForUpdate();\n-        updated.removeAttribute(name);\n+        if (getFirstAttribute(name) != null) {\n+            getDelegateForUpdate();\n+            updated.removeAttribute(name);\n+        }\n     }\n \n     @Override\n@@ -229,8 +231,10 @@ public void addRequiredAction(RequiredAction action) {\n \n     @Override\n     public void removeRequiredAction(RequiredAction action) {\n-        getDelegateForUpdate();\n-        updated.removeRequiredAction(action);\n+        if (getRequiredActionsStream().anyMatch(s -> Objects.equals(s, action.name()))) {\n+            getDelegateForUpdate();\n+            updated.removeRequiredAction(action);\n+        }\n     }\n \n     @Override\n@@ -241,8 +245,10 @@ public void addRequiredAction(String action) {\n \n     @Override\n     public void removeRequiredAction(String action) {\n-        getDelegateForUpdate();\n-        updated.removeRequiredAction(action);\n+        if (getRequiredActionsStream().anyMatch(s -> Objects.equals(s, action))) {\n+            getDelegateForUpdate();\n+            updated.removeRequiredAction(action);\n+        }\n     }\n \n     @Override",
      "parent_sha": "d679c13040a838fd65aa5cc801232448d3a8f067"
    }
  },
  {
    "oid": "409356f734cddcbc8c57782fbe3e243a5990c712",
    "message": "KEYCLOAK-2065: Update the client via Admin REST API causes 500 Internal Server Error",
    "date": "2015-11-16T18:32:52Z",
    "url": "https://github.com/keycloak/keycloak/commit/409356f734cddcbc8c57782fbe3e243a5990c712",
    "details": {
      "sha": "17a16f50c39007503097c45d27a87297e90c21bc",
      "filename": "services/src/main/java/org/keycloak/services/resources/admin/ClientResource.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/keycloak/keycloak/blob/409356f734cddcbc8c57782fbe3e243a5990c712/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2Fadmin%2FClientResource.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/409356f734cddcbc8c57782fbe3e243a5990c712/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2Fadmin%2FClientResource.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fservices%2Fresources%2Fadmin%2FClientResource.java?ref=409356f734cddcbc8c57782fbe3e243a5990c712",
      "patch": "@@ -50,6 +50,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import static java.lang.Boolean.TRUE;\n+\n \n /**\n  * Base resource class for managing one particular client of a realm.\n@@ -103,7 +105,7 @@ public Response update(final ClientRepresentation rep) {\n         auth.requireManage();\n \n         try {\n-            if (rep.isServiceAccountsEnabled() && !client.isServiceAccountsEnabled()) {\n+            if (TRUE.equals(rep.isServiceAccountsEnabled()) && !client.isServiceAccountsEnabled()) {\n                 new ClientManager(new RealmManager(session)).enableServiceAccount(client);;\n             }\n ",
      "parent_sha": "1bc08fff16779c4fb0b4ba8e16e442cd857f67e2"
    }
  },
  {
    "oid": "ae1aaef96c80563c7d78ed617556fbbd91d7ad30",
    "message": "Avoid re-creating required action comparator (#29122)\n\ncloses #29130 \r\n\r\nSigned-off-by: Michal R\u016f\u017ei\u010dka <michal.ruza@gmail.com>",
    "date": "2024-04-29T07:18:50Z",
    "url": "https://github.com/keycloak/keycloak/commit/ae1aaef96c80563c7d78ed617556fbbd91d7ad30",
    "details": {
      "sha": "2dd1ee49810328fe8192a6a3d45b492e8f102dea",
      "filename": "server-spi/src/main/java/org/keycloak/models/RequiredActionProviderModel.java",
      "status": "modified",
      "additions": 5,
      "deletions": 11,
      "changes": 16,
      "blob_url": "https://github.com/keycloak/keycloak/blob/ae1aaef96c80563c7d78ed617556fbbd91d7ad30/server-spi%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2FRequiredActionProviderModel.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/ae1aaef96c80563c7d78ed617556fbbd91d7ad30/server-spi%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2FRequiredActionProviderModel.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/server-spi%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fmodels%2FRequiredActionProviderModel.java?ref=ae1aaef96c80563c7d78ed617556fbbd91d7ad30",
      "patch": "@@ -28,17 +28,11 @@\n */\n public class RequiredActionProviderModel implements Serializable {\n \n-    public static class RequiredActionComparator implements Comparator<RequiredActionProviderModel> {\n-        public static final RequiredActionComparator SINGLETON = new RequiredActionComparator();\n-\n-        @Override\n-        public int compare(RequiredActionProviderModel o1, RequiredActionProviderModel o2) {\n-\n-            return Comparator\n-                    .comparingInt(RequiredActionProviderModel::getPriority)\n-                    .thenComparing(RequiredActionProviderModel::getName, Comparator.nullsFirst(String.CASE_INSENSITIVE_ORDER))\n-                    .compare(o1, o2);\n-        }\n+    public interface RequiredActionComparator extends Comparator<RequiredActionProviderModel> {\n+        RequiredActionComparator SINGLETON = Comparator\n+            .comparingInt(RequiredActionProviderModel::getPriority)\n+            .thenComparing(RequiredActionProviderModel::getName, Comparator.nullsFirst(String.CASE_INSENSITIVE_ORDER))\n+            ::compare;\n     }\n \n     private String id;",
      "parent_sha": "a6e2ab5523f3b9fc0a4283b9a6d4f48b3d97b2a6"
    }
  },
  {
    "oid": "e069f303a4f42f80541a7c123cfe9920868e359b",
    "message": "Added full scope to app in JaxrsBasicAuthTest",
    "date": "2014-12-01T12:39:19Z",
    "url": "https://github.com/keycloak/keycloak/commit/e069f303a4f42f80541a7c123cfe9920868e359b",
    "details": {
      "sha": "252a253761849cd53368286266c49f044b638832",
      "filename": "testsuite/integration/src/test/java/org/keycloak/testsuite/jaxrs/JaxrsBasicAuthTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/keycloak/keycloak/blob/e069f303a4f42f80541a7c123cfe9920868e359b/testsuite%2Fintegration%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fjaxrs%2FJaxrsBasicAuthTest.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/e069f303a4f42f80541a7c123cfe9920868e359b/testsuite%2Fintegration%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fjaxrs%2FJaxrsBasicAuthTest.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite%2Fintegration%2Fsrc%2Ftest%2Fjava%2Forg%2Fkeycloak%2Ftestsuite%2Fjaxrs%2FJaxrsBasicAuthTest.java?ref=e069f303a4f42f80541a7c123cfe9920868e359b",
      "patch": "@@ -47,6 +47,7 @@ public void config(RealmManager manager, RealmModel adminstrationRealm, RealmMod\n             ApplicationModel app = appRealm.addApplication(\"jaxrs-app\");\n             app.setEnabled(true);\n             app.setSecret(\"password\");\n+            app.setFullScopeAllowed(true);\n \n             JaxrsBasicAuthTest.appRealm = appRealm;\n         }\n@@ -122,9 +123,7 @@ public void config(RealmManager manager, RealmModel adminstrationRealm, RealmMod\n                 .get(JaxrsTestResource.SimpleRepresentation.class);\n         Assert.assertEquals(\"get\", getRep.getMethod());\n         \n-        // TODO: SHOULD HAVE USER ROLE\n-        //Assert.assertTrue(getRep.getHasUserRole());\n-        \n+        Assert.assertTrue(getRep.getHasUserRole());\n         Assert.assertFalse(getRep.getHasAdminRole());\n         Assert.assertFalse(getRep.getHasJaxrsAppRole());\n         // Assert that principal is ID of user (should be in UUID format)",
      "parent_sha": "8e01f8ecf1a911c1fa15360b25f4003baa8f8c57"
    }
  },
  {
    "oid": "777b3bd4101893714ea0e6134432130ab8f07854",
    "message": "update method visibility\n\nSigned-off-by: arhine <arhine@redhat.com>",
    "date": "2023-12-18T22:18:18Z",
    "url": "https://github.com/keycloak/keycloak/commit/777b3bd4101893714ea0e6134432130ab8f07854",
    "details": {
      "sha": "e9b4af7f74722f41caf91bab3be4ff0d8868bf4e",
      "filename": "server-spi-private/src/main/java/org/keycloak/userprofile/DefaultAttributes.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/777b3bd4101893714ea0e6134432130ab8f07854/server-spi-private%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fuserprofile%2FDefaultAttributes.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/777b3bd4101893714ea0e6134432130ab8f07854/server-spi-private%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fuserprofile%2FDefaultAttributes.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/server-spi-private%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fuserprofile%2FDefaultAttributes.java?ref=777b3bd4101893714ea0e6134432130ab8f07854",
      "patch": "@@ -403,7 +403,7 @@ private static String normalizeAttributeName(String name) {\n         return name;\n     }\n \n-    private List<String> normalizeAttributeValues(String name, Object value) {\n+    protected List<String> normalizeAttributeValues(String name, Object value) {\n         List<String> values;\n \n         if (value instanceof String) {",
      "parent_sha": "2ba7a51da60d31870242a39c887b6dde84b86e6c"
    }
  },
  {
    "oid": "aeae754e88d1272b7bb616275d22aba588936f84",
    "message": "Ensure JPAPolicyStore.findByName goes through the PolicyCache\n\nSigned-off-by: Stefan Guilhen <sguilhen@redhat.com>\n\nCloses #38319",
    "date": "2025-03-26T14:47:45Z",
    "url": "https://github.com/keycloak/keycloak/commit/aeae754e88d1272b7bb616275d22aba588936f84",
    "details": {
      "sha": "86f0681b63eb09fab58c07fea5ae4caddfb13e4b",
      "filename": "model/jpa/src/main/java/org/keycloak/authorization/jpa/store/JPAPolicyStore.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/keycloak/keycloak/blob/aeae754e88d1272b7bb616275d22aba588936f84/model%2Fjpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthorization%2Fjpa%2Fstore%2FJPAPolicyStore.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/aeae754e88d1272b7bb616275d22aba588936f84/model%2Fjpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthorization%2Fjpa%2Fstore%2FJPAPolicyStore.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model%2Fjpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthorization%2Fjpa%2Fstore%2FJPAPolicyStore.java?ref=aeae754e88d1272b7bb616275d22aba588936f84",
      "patch": "@@ -115,7 +115,8 @@ public Policy findByName(ResourceServer resourceServer, String name) {\n         query.setParameter(\"name\", name);\n \n         try {\n-            return new PolicyAdapter(query.getSingleResult(), entityManager, provider.getStoreFactory());\n+            PolicyEntity policy = query.getSingleResult();\n+            return provider.getStoreFactory().getPolicyStore().findById(resourceServer, policy.getId());\n         } catch (NoResultException ex) {\n             return null;\n         }",
      "parent_sha": "cfe4ed1cf314a9bfaa9e2f0f884c67a0372354f6"
    }
  },
  {
    "oid": "5b1e65c23e089ece9b1a65e14e53d9584dcc1f6f",
    "message": "KEYCLOAK-6700 Financial API Read and Write API Security Profile : state\nhash value (s_hash) to protect state parameter",
    "date": "2018-03-13T15:40:34Z",
    "url": "https://github.com/keycloak/keycloak/commit/5b1e65c23e089ece9b1a65e14e53d9584dcc1f6f",
    "details": {
      "sha": "148d840aceede04762d51d3393057660413bed49",
      "filename": "services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/5b1e65c23e089ece9b1a65e14e53d9584dcc1f6f/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fprotocol%2Foidc%2FOIDCLoginProtocol.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/5b1e65c23e089ece9b1a65e14e53d9584dcc1f6f/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fprotocol%2Foidc%2FOIDCLoginProtocol.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fprotocol%2Foidc%2FOIDCLoginProtocol.java?ref=5b1e65c23e089ece9b1a65e14e53d9584dcc1f6f",
      "patch": "@@ -221,7 +221,7 @@ public Response authenticated(UserSessionModel userSession, AuthenticatedClientS\n                 \n                 // Financial API - Part 2: Read and Write API Security Profile\n                 // http://openid.net/specs/openid-financial-api-part-2.html#authorization-server\n-                if (state != null)\n+                if (state != null && !state.isEmpty())\n                     responseBuilder.generateStateHash(state);\n             }\n ",
      "parent_sha": "e72756d01a2ac169258cd448886d1fd1f348024f"
    }
  },
  {
    "oid": "a1e1fd8d5da08068f39ea4a100ffc1a12763b1b0",
    "message": "Provide an HTTP 503 response when the thread pool rejected the request (#21963)\n\nThis allows for limiting the queue of the thread pool to avoid overloading Keycloak.\r\n\r\nCloses #21962",
    "date": "2023-07-26T14:47:31Z",
    "url": "https://github.com/keycloak/keycloak/commit/a1e1fd8d5da08068f39ea4a100ffc1a12763b1b0",
    "details": {
      "sha": "e91af33ba5fa0c4965d969e4da0e26c3d605aef4",
      "filename": "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/integration/web/QuarkusRequestFilter.java",
      "status": "modified",
      "additions": 34,
      "deletions": 1,
      "changes": 35,
      "blob_url": "https://github.com/keycloak/keycloak/blob/a1e1fd8d5da08068f39ea4a100ffc1a12763b1b0/quarkus%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fquarkus%2Fruntime%2Fintegration%2Fweb%2FQuarkusRequestFilter.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/a1e1fd8d5da08068f39ea4a100ffc1a12763b1b0/quarkus%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fquarkus%2Fruntime%2Fintegration%2Fweb%2FQuarkusRequestFilter.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/quarkus%2Fruntime%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fquarkus%2Fruntime%2Fintegration%2Fweb%2FQuarkusRequestFilter.java?ref=a1e1fd8d5da08068f39ea4a100ffc1a12763b1b0",
      "patch": "@@ -18,7 +18,12 @@\n package org.keycloak.quarkus.runtime.integration.web;\n \n import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.atomic.LongAdder;\n import java.util.function.Predicate;\n+\n+import org.apache.http.HttpStatus;\n+import org.jboss.logging.Logger;\n import org.keycloak.common.ClientConnection;\n import org.keycloak.common.util.Resteasy;\n import org.keycloak.models.KeycloakSession;\n@@ -46,6 +51,8 @@\n  */\n public class QuarkusRequestFilter implements Handler<RoutingContext>, TransactionalSessionHandler {\n \n+    private final Logger logger = Logger.getLogger(QuarkusRequestFilter.class);\n+\n     private final ExecutorService executor;\n \n     private Predicate<RoutingContext> contextFilter;\n@@ -59,6 +66,9 @@ public QuarkusRequestFilter(Predicate<RoutingContext> contextFilter, ExecutorSer\n         this.executor = executor;\n     }\n \n+    private final LongAdder rejectedRequests = new LongAdder();\n+    private volatile boolean loadSheddingActive;\n+\n     @Override\n     public void handle(RoutingContext context) {\n         if (ignoreContext(context)) {\n@@ -67,7 +77,30 @@ public void handle(RoutingContext context) {\n         }\n         // our code should always be run as blocking until we don't provide a better support for running non-blocking code\n         // in the event loop\n-        executor.execute(createBlockingHandler(context));\n+        try {\n+            executor.execute(createBlockingHandler(context));\n+            if (loadSheddingActive) {\n+                synchronized (rejectedRequests) {\n+                    if (loadSheddingActive) {\n+                        loadSheddingActive = false;\n+                        // rejectedRequests.sumThenReset() is approximative when concurrent increments are active, still it should be accurate enough for this log message\n+                        logger.warnf(\"Executor thread pool no longer exhausted, request processing continues after %s discarded request(s)\", rejectedRequests.sumThenReset());\n+                    }\n+                }\n+            }\n+        } catch (RejectedExecutionException e) {\n+            if (!loadSheddingActive) {\n+                synchronized (rejectedRequests) {\n+                    if (!loadSheddingActive) {\n+                        loadSheddingActive = true;\n+                        logger.warn(\"Executor thread pool exhausted, starting to reject requests\");\n+                    }\n+                }\n+            }\n+            rejectedRequests.increment();\n+            // if the thread pool has been configured with a maximum queue size, it might reject the request\n+            context.fail(HttpStatus.SC_SERVICE_UNAVAILABLE);\n+        }\n     }\n \n     private boolean ignoreContext(RoutingContext context) {",
      "parent_sha": "ecdf8e897fab7520d91cabd6904754de0d2d3a9a"
    }
  },
  {
    "oid": "25f965aa2e88a47d2df7e09a196dbf91f99359d7",
    "message": "KEYCLOAK-2628 protected method to IdpCreateUserIfUniqueAuthenticator after user is registered",
    "date": "2016-03-11T09:05:41Z",
    "url": "https://github.com/keycloak/keycloak/commit/25f965aa2e88a47d2df7e09a196dbf91f99359d7",
    "details": {
      "sha": "6971ab5dd95351878c930ab5dc5a08ca336add13",
      "filename": "services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpCreateUserIfUniqueAuthenticator.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/keycloak/keycloak/blob/25f965aa2e88a47d2df7e09a196dbf91f99359d7/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fbroker%2FIdpCreateUserIfUniqueAuthenticator.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/25f965aa2e88a47d2df7e09a196dbf91f99359d7/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fbroker%2FIdpCreateUserIfUniqueAuthenticator.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fauthentication%2Fauthenticators%2Fbroker%2FIdpCreateUserIfUniqueAuthenticator.java?ref=25f965aa2e88a47d2df7e09a196dbf91f99359d7",
      "patch": "@@ -88,7 +88,7 @@ protected void authenticateImpl(AuthenticationFlowContext context, SerializedBro\n                 federatedUser.addRequiredAction(UserModel.RequiredAction.UPDATE_PASSWORD);\n             }\n \n-            // TODO: Event\n+            userRegisteredSuccess(context, federatedUser, serializedCtx, brokerContext);\n \n             context.setUser(federatedUser);\n             context.getClientSession().setNote(BROKER_REGISTERED_NEW_USER, \"true\");\n@@ -140,6 +140,12 @@ protected String getUsername(AuthenticationFlowContext context, SerializedBroker\n     }\n \n \n+    // Empty method by default. This exists, so subclass can override and add callback after new user is registered through social\n+    protected void userRegisteredSuccess(AuthenticationFlowContext context, UserModel registeredUser, SerializedBrokeredIdentityContext serializedCtx, BrokeredIdentityContext brokerContext) {\n+\n+    }\n+\n+\n     @Override\n     public boolean requiresUser() {\n         return false;",
      "parent_sha": "4b69cb4551443cec70dec2e4146da41b2a8d8604"
    }
  },
  {
    "oid": "2e52093ac57249b49ff1d1b66c4c4a1a73f63e3e",
    "message": "KEYCLOAK-9123 Fix content-type check",
    "date": "2018-12-19T09:43:33Z",
    "url": "https://github.com/keycloak/keycloak/commit/2e52093ac57249b49ff1d1b66c4c4a1a73f63e3e",
    "details": {
      "sha": "b05b7364db5703c84052ad7ca02b5a2171380978",
      "filename": "services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/keycloak/keycloak/blob/2e52093ac57249b49ff1d1b66c4c4a1a73f63e3e/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fbroker%2Foidc%2FOIDCIdentityProvider.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/2e52093ac57249b49ff1d1b66c4c4a1a73f63e3e/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fbroker%2Foidc%2FOIDCIdentityProvider.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fbroker%2Foidc%2FOIDCIdentityProvider.java?ref=2e52093ac57249b49ff1d1b66c4c4a1a73f63e3e",
      "patch": "@@ -365,6 +365,7 @@ public BrokeredIdentityContext getFederatedIdentity(String response) {\n         }\n     }\n \n+    private static final MediaType APPLICATION_JWT_TYPE = MediaType.valueOf(\"application/jwt\");\n \n     protected BrokeredIdentityContext extractIdentity(AccessTokenResponse tokenResponse, String accessToken, JsonWebToken idToken) throws IOException {\n         String id = idToken.getSubject();\n@@ -380,11 +381,20 @@ protected BrokeredIdentityContext extractIdentity(AccessTokenResponse tokenRespo\n                 if (accessToken != null) {\n                     SimpleHttp.Response response = executeRequest(userInfoUrl, SimpleHttp.doGet(userInfoUrl, session).header(\"Authorization\", \"Bearer \" + accessToken));\n                     String contentType = response.getFirstHeader(HttpHeaders.CONTENT_TYPE);\n+                    MediaType contentMediaType;\n+                    try {\n+                        contentMediaType = MediaType.valueOf(contentType);\n+                    } catch (IllegalArgumentException ex) {\n+                        contentMediaType = null;\n+                    }\n+                    if (contentMediaType == null || contentMediaType.isWildcardSubtype() || contentMediaType.isWildcardType()) {\n+                        throw new RuntimeException(\"Unsupported content-type [\" + contentType + \"] in response from [\" + userInfoUrl + \"].\");\n+                    }\n                     JsonNode userInfo;\n \n-                    if (MediaType.APPLICATION_JSON.equals(contentType)) {\n+                    if (MediaType.APPLICATION_JSON_TYPE.isCompatible(contentMediaType)) {\n                         userInfo = response.asJson();\n-                    } else if (\"application/jwt\".equals(contentType)) {\n+                    } else if (APPLICATION_JWT_TYPE.isCompatible(contentMediaType)) {\n                         JWSInput jwsInput;\n \n                         try {",
      "parent_sha": "602b7207ab63ace78d849da35bff07fd51d8f49c"
    }
  },
  {
    "oid": "458c2f2682eaf5225d8ecec09a390f6eee619700",
    "message": "Clarify request URI mismatch error message in SAML adapter.\n\nShow expected URI and received URI in error message. Also makes the logging behavior of 'handleSamlResponse' the same as 'handleSamlRequest' since that method already shows the expected and received URI.",
    "date": "2017-09-11T17:52:49Z",
    "url": "https://github.com/keycloak/keycloak/commit/458c2f2682eaf5225d8ecec09a390f6eee619700",
    "details": {
      "sha": "12cb924868525d6c1fbabc1639c0c330fb04a4ba",
      "filename": "adapters/saml/core/src/main/java/org/keycloak/adapters/saml/profile/AbstractSamlAuthenticationHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/keycloak/keycloak/blob/458c2f2682eaf5225d8ecec09a390f6eee619700/adapters%2Fsaml%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Fsaml%2Fprofile%2FAbstractSamlAuthenticationHandler.java",
      "raw_url": "https://github.com/keycloak/keycloak/raw/458c2f2682eaf5225d8ecec09a390f6eee619700/adapters%2Fsaml%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Fsaml%2Fprofile%2FAbstractSamlAuthenticationHandler.java",
      "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/adapters%2Fsaml%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fkeycloak%2Fadapters%2Fsaml%2Fprofile%2FAbstractSamlAuthenticationHandler.java?ref=458c2f2682eaf5225d8ecec09a390f6eee619700",
      "patch": "@@ -187,7 +187,7 @@ protected AuthOutcome handleSamlResponse(String samlResponse, String relayState,\n         final StatusResponseType statusResponse = (StatusResponseType) holder.getSamlObject();\n         // validate destination\n         if (!requestUri.equals(statusResponse.getDestination())) {\n-            log.error(\"Request URI does not match SAML request destination\");\n+            log.error(\"Request URI '\" + requestUri + \"' does not match SAML request destination '\" + statusResponse.getDestination() + \"'\");\n             return AuthOutcome.FAILED;\n         }\n ",
      "parent_sha": "0a5de1239fb1e96eb91321f77cc117d22aac6f0c"
    }
  }
]