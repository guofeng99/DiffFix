[
  {
    "oid": "e5ed1cc59a462f6072d5e049d5e8fe488bff0d89",
    "message": "Added some more tests.",
    "date": "2009-09-29T20:24:48Z",
    "url": "https://github.com/google/gson/commit/e5ed1cc59a462f6072d5e049d5e8fe488bff0d89",
    "details": {
      "sha": "0cbf638428e16f38cfe46f45f21fa2a5c21a827e",
      "filename": "gson/src/test/java/com/google/gson/functional/ArrayTest.java",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/google/gson/blob/e5ed1cc59a462f6072d5e049d5e8fe488bff0d89/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FArrayTest.java",
      "raw_url": "https://github.com/google/gson/raw/e5ed1cc59a462f6072d5e049d5e8fe488bff0d89/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FArrayTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FArrayTest.java?ref=e5ed1cc59a462f6072d5e049d5e8fe488bff0d89",
      "patch": "@@ -131,6 +131,22 @@ public void testArrayOfStringsDeserialization() {\n     assertEquals(\"World\", target[1]);\n   }\n \n+  public void testSingleStringArraySerialization() throws Exception {\n+    String[] s = { \"hello\" };\n+    String output = gson.toJson(s);\n+    assertEquals(\"[\\\"hello\\\"]\", output);\n+  }\n+  \n+  public void testSingleStringArrayDeserialization() throws Exception {\n+    String json = \"[\\\"hello\\\"]\";\n+    String[] arrayType = gson.fromJson(json, String[].class);\n+    assertEquals(1, arrayType.length);\n+    assertEquals(\"hello\", arrayType[0]);\n+    \n+    String type = gson.fromJson(json, String.class);\n+    assertEquals(\"hello\", type);\n+  }\n+\n   @SuppressWarnings(\"unchecked\")\n   public void testArrayOfCollectionSerialization() throws Exception {\n     StringBuilder sb = new StringBuilder(\"[\");\n@@ -215,7 +231,7 @@ public void testArrayWithoutTypeInfoDeserialization() throws Exception {\n     }\n   }\n   \n-  public void testObjectArrayWithNonPrimitivesSerializaiton() throws Exception {\n+  public void testObjectArrayWithNonPrimitivesSerialization() throws Exception {\n     ClassWithObjects classWithObjects = new ClassWithObjects();\n     BagOfPrimitives bagOfPrimitives = new BagOfPrimitives();\n     String classWithObjectsJson = gson.toJson(classWithObjects);",
      "parent_sha": "e73ad007a419d5a3061ea9a06d456597d5a7bd40"
    }
  },
  {
    "oid": "51a9596d066a4b38f7da2975ba659e8400728208",
    "message": "Make Dates test slightly more robust to time of day issues. The test still fails outside of PST when run as a part of a larger suite because GSON captures a static snapshot of the system time zone at GSON-creation time.",
    "date": "2011-09-12T06:02:48Z",
    "url": "https://github.com/google/gson/commit/51a9596d066a4b38f7da2975ba659e8400728208",
    "details": {
      "sha": "79c74246a7f02f61f2a8cbb515912963c6b70869",
      "filename": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
      "status": "modified",
      "additions": 15,
      "deletions": 21,
      "changes": 36,
      "blob_url": "https://github.com/google/gson/blob/51a9596d066a4b38f7da2975ba659e8400728208/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FDefaultTypeAdaptersTest.java",
      "raw_url": "https://github.com/google/gson/raw/51a9596d066a4b38f7da2975ba659e8400728208/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FDefaultTypeAdaptersTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FDefaultTypeAdaptersTest.java?ref=51a9596d066a4b38f7da2975ba659e8400728208",
      "patch": "@@ -22,9 +22,6 @@\n import com.google.gson.JsonElement;\n import com.google.gson.JsonParseException;\n import com.google.gson.reflect.TypeToken;\n-\n-import junit.framework.TestCase;\n-\n import java.lang.reflect.Type;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n@@ -33,7 +30,6 @@\n import java.sql.Time;\n import java.sql.Timestamp;\n import java.text.DateFormat;\n-import java.text.SimpleDateFormat;\n import java.util.Arrays;\n import java.util.BitSet;\n import java.util.Calendar;\n@@ -47,6 +43,7 @@\n import java.util.TimeZone;\n import java.util.TreeSet;\n import java.util.UUID;\n+import junit.framework.TestCase;\n \n /**\n  * Functional test for Json serialization and deserialization for common classes for which default\n@@ -243,16 +240,16 @@ public void testBitSetDeserialization() throws Exception {\n   }\n \n   public void testDefaultDateSerialization() {\n-    Date now = new Date();\n+    Date now = new Date(1315806903103L);\n     String json = gson.toJson(now);\n-    assertEquals(\"\\\"\" + DateFormat.getDateTimeInstance().format(now) + \"\\\"\", json);\n+    assertEquals(\"\\\"Sep 11, 2011 10:55:03 PM\\\"\", json);\n   }\n \n   public void testDefaultDateDeserialization() {\n     String json = \"'Dec 13, 2009 07:18:02 AM'\";\n     Date extracted = gson.fromJson(json, Date.class);\n     assertEqualsDate(extracted, 2009, 11, 13);\n-    assertEqualsTime(extracted, 7, 18, 02);\n+    assertEqualsTime(extracted, 7, 18, 2);\n   }\n \n   // Date can not directly be compared with another instance since the deserialization loses the\n@@ -293,7 +290,7 @@ public void testDefaultJavaSqlTimestampDeserialization() {\n     String json = \"'Dec 3, 2009 1:18:02 PM'\";\n     Timestamp extracted = gson.fromJson(json, Timestamp.class);\n     assertEqualsDate(extracted, 2009, 11, 3);\n-    assertEqualsTime(extracted, 13, 18, 02);\n+    assertEqualsTime(extracted, 13, 18, 2);\n   }\n \n   public void testDefaultJavaSqlTimeSerialization() {\n@@ -305,19 +302,19 @@ public void testDefaultJavaSqlTimeSerialization() {\n   public void testDefaultJavaSqlTimeDeserialization() {\n     String json = \"'1:18:02 PM'\";\n     Time extracted = gson.fromJson(json, Time.class);\n-    assertEqualsTime(extracted, 13, 18, 02);\n+    assertEqualsTime(extracted, 13, 18, 2);\n   }\n \n   public void testDefaultDateSerializationUsingBuilder() throws Exception {\n     Gson gson = new GsonBuilder().create();\n-    Date now = new Date();\n+    Date now = new Date(1315806903103L);\n     String json = gson.toJson(now);\n-    assertEquals(\"\\\"\" + DateFormat.getDateTimeInstance().format(now) + \"\\\"\", json);\n+    assertEquals(\"\\\"Sep 11, 2011 10:55:03 PM\\\"\", json);\n   }\n \n   public void testDefaultDateDeserializationUsingBuilder() throws Exception {\n     Gson gson = new GsonBuilder().create();\n-    Date now = new Date();\n+    Date now = new Date(1315806903103L);\n     String json = gson.toJson(now);\n     Date extracted = gson.fromJson(json, Date.class);\n     assertEquals(now.toString(), extracted.toString());\n@@ -372,18 +369,17 @@ public void testDefaultGregorianCalendarDeserialization() throws Exception {\n \n   public void testDateSerializationWithPattern() throws Exception {\n     String pattern = \"yyyy-MM-dd\";\n-    DateFormat formatter = new SimpleDateFormat(pattern);\n     Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create();\n-    Date now = new Date();\n+    Date now = new Date(1315806903103L);\n     String json = gson.toJson(now);\n-    assertEquals(\"\\\"\" + formatter.format(now) + \"\\\"\", json);\n+    assertEquals(\"\\\"2011-09-11\\\"\", json);\n   }\n \n   @SuppressWarnings(\"deprecation\")\n   public void testDateDeserializationWithPattern() throws Exception {\n     String pattern = \"yyyy-MM-dd\";\n     Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create();\n-    Date now = new Date();\n+    Date now = new Date(1315806903103L);\n     String json = gson.toJson(now);\n     Date extracted = gson.fromJson(json, Date.class);\n     assertEquals(now.getYear(), extracted.getYear());\n@@ -393,21 +389,19 @@ public void testDateDeserializationWithPattern() throws Exception {\n \n   public void testDateSerializationWithPatternNotOverridenByTypeAdapter() throws Exception {\n     String pattern = \"yyyy-MM-dd\";\n-    DateFormat formatter = new SimpleDateFormat(pattern);\n     Gson gson = new GsonBuilder()\n         .setDateFormat(pattern)\n         .registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {\n           public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n               throws JsonParseException {\n-            return new Date();\n+            return new Date(1315806903103L);\n           }\n         })\n         .create();\n \n-    Date now = new Date();\n-    String expectedDateString = \"\\\"\" + formatter.format(now) + \"\\\"\";\n+    Date now = new Date(1315806903103L);\n     String json = gson.toJson(now);\n-    assertEquals(expectedDateString, json);\n+    assertEquals(\"\\\"2011-09-11\\\"\", json);\n   }\n \n   // http://code.google.com/p/google-gson/issues/detail?id=230",
      "parent_sha": "a98d6eae472df67317d58d34f13438bb958668b1"
    }
  },
  {
    "oid": "ba96d53bad35f7466073f14cb3d89d09383e1a2d",
    "message": "Fix missing bounds checks for JsonTreeReader.getPath() (#2001)\n\nThere are situations where the stack of JsonTreeReader contains a JsonArray\r\nor JsonObject without a subsequent Iterator, for example after calling peek()\r\nor nextName().\r\nWhen JsonTreeReader.getPath() is called afterwards it therefore must not\r\nassume that a JsonArray or JsonObject is always followed by an Iterator.\r\n\r\nThe only reason why this never caused an ArrayIndexOutOfBoundsException in\r\nthe past is because the stack has an even default size (32) so it would just\r\nhave read the next `null`.\r\nHowever, if the stack had for example the default size 31, a user created a\r\nJsonTreeReader for 16 JSON arrays nested inside each other, then called 15\r\ntimes beginArray(), followed by peek() and getPath() the exception would\r\noccur.",
    "date": "2021-10-25T19:14:41Z",
    "url": "https://github.com/google/gson/commit/ba96d53bad35f7466073f14cb3d89d09383e1a2d",
    "details": {
      "sha": "0954fb332b5113dd0e3b91d34a0a42e7d2c0b2cf",
      "filename": "gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/google/gson/blob/ba96d53bad35f7466073f14cb3d89d09383e1a2d/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2Fbind%2FJsonTreeReader.java",
      "raw_url": "https://github.com/google/gson/raw/ba96d53bad35f7466073f14cb3d89d09383e1a2d/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2Fbind%2FJsonTreeReader.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2Fbind%2FJsonTreeReader.java?ref=ba96d53bad35f7466073f14cb3d89d09383e1a2d",
      "patch": "@@ -308,11 +308,11 @@ private void push(Object newTop) {\n     StringBuilder result = new StringBuilder().append('$');\n     for (int i = 0; i < stackSize; i++) {\n       if (stack[i] instanceof JsonArray) {\n-        if (stack[++i] instanceof Iterator) {\n+        if (++i < stackSize && stack[i] instanceof Iterator) {\n           result.append('[').append(pathIndices[i]).append(']');\n         }\n       } else if (stack[i] instanceof JsonObject) {\n-        if (stack[++i] instanceof Iterator) {\n+        if (++i < stackSize && stack[i] instanceof Iterator) {\n           result.append('.');\n           if (pathNames[i] != null) {\n             result.append(pathNames[i]);",
      "parent_sha": "ca1df7f7e09f6b1a763882029dd7057f475b31de"
    }
  },
  {
    "oid": "ed415f692f22800e2db5be7a46226450cce94725",
    "message": "Ensuring that the HTTP connection is closed when the rest call is finished.",
    "date": "2010-09-30T12:28:11Z",
    "url": "https://github.com/google/gson/commit/ed415f692f22800e2db5be7a46226450cce94725",
    "details": {
      "sha": "c276ea52482e9763a2078a11ff0cbdedcf524bc9",
      "filename": "wsclient/src/main/java/com/google/gson/webservice/client/RestClient.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/google/gson/blob/ed415f692f22800e2db5be7a46226450cce94725/wsclient%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fwebservice%2Fclient%2FRestClient.java",
      "raw_url": "https://github.com/google/gson/raw/ed415f692f22800e2db5be7a46226450cce94725/wsclient%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fwebservice%2Fclient%2FRestClient.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/wsclient%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fwebservice%2Fclient%2FRestClient.java?ref=ed415f692f22800e2db5be7a46226450cce94725",
      "patch": "@@ -65,12 +65,13 @@ public <R> RestResponse<R> getResponse(RestCallSpec<R> callSpec, RestRequest<R>\n \n   public <R> RestResponse<R> getResponse(\n       RestCallSpec<R> callSpec, RestRequest<R> request, Gson gson) {\n+    HttpURLConnection conn = null;\n     try {\n       URL webServiceUrl = getWebServiceUrl(callSpec);\n       if (logger != null) {\n         logger.log(logLevel, \"Opening connection to \" + webServiceUrl);\n       }\n-      HttpURLConnection conn = (HttpURLConnection) webServiceUrl.openConnection();\n+      conn = (HttpURLConnection) webServiceUrl.openConnection();\n       RestRequestSender requestSender = new RestRequestSender(gson, logLevel);\n       requestSender.send(conn, request);\n       RestResponseReceiver<R> responseReceiver =\n@@ -80,9 +81,17 @@ public <R> RestResponse<R> getResponse(\n       throw new WebServiceSystemException(e);\n     } catch (IllegalArgumentException e) {\n       throw new WebServiceSystemException(e);\n+    } finally {\n+      closeIgnoringErrors(conn);\n     }\n   }\n   \n+  private static void closeIgnoringErrors(HttpURLConnection conn) {\n+    if (conn != null) {\n+      conn.disconnect();\n+    }\n+  }\n+\n   @Override\n   public String toString() {\n     return String.format(\"config:%s\", config);",
      "parent_sha": "1a4bea73346135ce36422788c28fce11c3c5bbbb"
    }
  },
  {
    "oid": "523f489863812d6831bc33443fe699c2903a450f",
    "message": "Got rid of an unneeded method.",
    "date": "2011-03-29T21:38:08Z",
    "url": "https://github.com/google/gson/commit/523f489863812d6831bc33443fe699c2903a450f",
    "details": {
      "sha": "0089382c8cf73197039e45111c2135351bd6358b",
      "filename": "gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/google/gson/blob/523f489863812d6831bc33443fe699c2903a450f/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonSerializationContextDefault.java",
      "raw_url": "https://github.com/google/gson/raw/523f489863812d6831bc33443fe699c2903a450f/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonSerializationContextDefault.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonSerializationContextDefault.java?ref=523f489863812d6831bc33443fe699c2903a450f",
      "patch": "@@ -46,20 +46,16 @@ public JsonElement serialize(Object src) {\n     if (src == null) {\r\n       return JsonNull.createJsonNull();\r\n     }\r\n-    return serialize(src, src.getClass(), true);\r\n+    return serialize(src, src.getClass());\r\n   }\r\n \r\n   public JsonElement serialize(Object src, Type typeOfSrc) {\r\n     if (src == null) {\r\n       return JsonNull.createJsonNull();\r\n     }\r\n-    return serialize(src, typeOfSrc, true);\r\n-  }\r\n-\r\n-  JsonElement serialize(Object src, Type typeOfSrc, boolean preserveType) {\r\n     JsonSerializationVisitor visitor = new JsonSerializationVisitor(\r\n         objectNavigator, fieldNamingPolicy, serializeNulls, serializers, this, ancestors);\r\n-    objectNavigator.accept(new ObjectTypePair(src, typeOfSrc, preserveType), visitor);\r\n+    objectNavigator.accept(new ObjectTypePair(src, typeOfSrc, true), visitor);\r\n     return visitor.getJsonElement();\r\n   }\r\n }\r",
      "parent_sha": "f718784f33c6f52416325039381833645651d2a2"
    }
  },
  {
    "oid": "2cbddbbbc596f29331c37409ec07ecb9c09442b5",
    "message": "- Remove unnecessary catch block",
    "date": "2011-11-13T00:04:39Z",
    "url": "https://github.com/google/gson/commit/2cbddbbbc596f29331c37409ec07ecb9c09442b5",
    "details": {
      "sha": "aaef5de2efad10095c7beb26aa5e890a965fe9c9",
      "filename": "gson/src/main/java/com/google/gson/Gson.java",
      "status": "modified",
      "additions": 3,
      "deletions": 7,
      "changes": 10,
      "blob_url": "https://github.com/google/gson/blob/2cbddbbbc596f29331c37409ec07ecb9c09442b5/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "raw_url": "https://github.com/google/gson/raw/2cbddbbbc596f29331c37409ec07ecb9c09442b5/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java?ref=2cbddbbbc596f29331c37409ec07ecb9c09442b5",
      "patch": "@@ -632,13 +632,9 @@ public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException {\n     if (json == null) {\n       return null;\n     }\n-    try {\n-      StringReader reader = new StringReader(json);\n-      T target = (T) fromJson(reader, typeOfT);\n-      return target;\n-    } catch (IllegalStateException e) {\n-      throw new JsonSyntaxException(e);\n-    }\n+    StringReader reader = new StringReader(json);\n+    T target = (T) fromJson(reader, typeOfT);\n+    return target;\n   }\n \n   /**",
      "parent_sha": "3e303ef6f70765c3b5dce881780b1e82cd7dcf5a"
    }
  },
  {
    "oid": "e2e672740a6e58f81924406decba024a239fb8a5",
    "message": "Fix broken test in registering competing type hierarchy adapters.\n\nI actually tried to replicate this test but got an error \"type adapters conflict\" when I was doing it. I suspect the problem was that I was trying to use 'Object' as the base of my type hierarchy and that class is somehow special.",
    "date": "2011-12-06T15:29:48Z",
    "url": "https://github.com/google/gson/commit/e2e672740a6e58f81924406decba024a239fb8a5",
    "details": {
      "sha": "008a2d3f2561f51cf74e90b78aadf15762de0fbb",
      "filename": "gson/src/main/java/com/google/gson/GsonBuilder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/e2e672740a6e58f81924406decba024a239fb8a5/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java",
      "raw_url": "https://github.com/google/gson/raw/e2e672740a6e58f81924406decba024a239fb8a5/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java?ref=e2e672740a6e58f81924406decba024a239fb8a5",
      "patch": "@@ -541,9 +541,9 @@ public GsonBuilder serializeSpecialFloatingPointValues() {\n    */\n   public Gson create() {\n     List<TypeAdapter.Factory> factories = new ArrayList<TypeAdapter.Factory>();\n-    factories.addAll(this.hierarchyFactories);\n     factories.addAll(this.factories);\n     Collections.reverse(factories);\n+    factories.addAll(this.hierarchyFactories);\n     addTypeAdaptersForDate(datePattern, dateStyle, timeStyle, factories);\n \n     return new Gson(excluder, fieldNamingPolicy, instanceCreators,",
      "parent_sha": "b19e187bdda7765f008e0fcdcb4fd184bdd87e00"
    }
  },
  {
    "oid": "454a49127f9416f45221eecf311eefdca50e4cdc",
    "message": "Improved Long-Double Number Policy (#2674)\n\n* Improved Long-Double Number Policy\r\n\r\nThe Parsing of a Double value was always executing a `Long.parseLong(value)`, which generated a `NumberFormatException`.\r\n\r\nIdentifying that a Number is a Double or a Long can be easily achieve (in a naive way) looking for the decimal separator.\r\n\r\nThis simple change avoids the extra `NumberFormatException`\r\n\r\nA simple JUnit test, parsing a `Long` or a `Double` 10K times shows the next values:\r\n\r\n* Double (old parsing): ~42 ms\r\n* Double (new parsing): ~6 ms\r\n* Long (old parsing): ~7 ms\r\n* Long (new parsing): ~7 ms\r\n\r\nAs we can see, the parsing for `Long` values stays the same (\u00b11ms), while the parsing for `Double` is dramatically improved.\r\n\r\nReducing the number of exceptions also has a positive side effect in memory consumption.\r\n\r\n* Replace `contains(\".\")` by `indexOf('.') >= 0`\r\n\r\nThe usage of `indexOf(char)` is slightly faster\r\n\r\n* Rename exception variables",
    "date": "2024-05-18T17:39:59Z",
    "url": "https://github.com/google/gson/commit/454a49127f9416f45221eecf311eefdca50e4cdc",
    "details": {
      "sha": "7e9f85d0ca2fba7f5cc549aab4807043848141a2",
      "filename": "gson/src/main/java/com/google/gson/ToNumberPolicy.java",
      "status": "modified",
      "additions": 20,
      "deletions": 12,
      "changes": 32,
      "blob_url": "https://github.com/google/gson/blob/454a49127f9416f45221eecf311eefdca50e4cdc/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FToNumberPolicy.java",
      "raw_url": "https://github.com/google/gson/raw/454a49127f9416f45221eecf311eefdca50e4cdc/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FToNumberPolicy.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FToNumberPolicy.java?ref=454a49127f9416f45221eecf311eefdca50e4cdc",
      "patch": "@@ -68,22 +68,30 @@ public Number readNumber(JsonReader in) throws IOException {\n     @Override\n     public Number readNumber(JsonReader in) throws IOException, JsonParseException {\n       String value = in.nextString();\n-      try {\n-        return Long.parseLong(value);\n-      } catch (NumberFormatException longE) {\n+      if (value.indexOf('.') >= 0) {\n+        return parseAsDouble(value, in);\n+      } else {\n         try {\n-          Double d = Double.valueOf(value);\n-          if ((d.isInfinite() || d.isNaN()) && !in.isLenient()) {\n-            throw new MalformedJsonException(\n-                \"JSON forbids NaN and infinities: \" + d + \"; at path \" + in.getPreviousPath());\n-          }\n-          return d;\n-        } catch (NumberFormatException doubleE) {\n-          throw new JsonParseException(\n-              \"Cannot parse \" + value + \"; at path \" + in.getPreviousPath(), doubleE);\n+          return Long.parseLong(value);\n+        } catch (NumberFormatException e) {\n+          return parseAsDouble(value, in);\n         }\n       }\n     }\n+\n+    private Number parseAsDouble(String value, JsonReader in) throws IOException {\n+      try {\n+        Double d = Double.valueOf(value);\n+        if ((d.isInfinite() || d.isNaN()) && !in.isLenient()) {\n+          throw new MalformedJsonException(\n+              \"JSON forbids NaN and infinities: \" + d + \"; at path \" + in.getPreviousPath());\n+        }\n+        return d;\n+      } catch (NumberFormatException e) {\n+        throw new JsonParseException(\n+            \"Cannot parse \" + value + \"; at path \" + in.getPreviousPath(), e);\n+      }\n+    }\n   },\n \n   /**",
      "parent_sha": "570d91194e223132982d56b6fa499af15fd7b1ea"
    }
  },
  {
    "oid": "282ef30280edd24547d586fc0c104e2b3506f63a",
    "message": "Updating JavaDoc tag to @code instead of @link.",
    "date": "2009-10-09T03:03:04Z",
    "url": "https://github.com/google/gson/commit/282ef30280edd24547d586fc0c104e2b3506f63a",
    "details": {
      "sha": "da41ce5f182ce45b025a77ca0345a528670f63f3",
      "filename": "gson/src/main/java/com/google/gson/FieldAttributes.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/282ef30280edd24547d586fc0c104e2b3506f63a/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FFieldAttributes.java",
      "raw_url": "https://github.com/google/gson/raw/282ef30280edd24547d586fc0c104e2b3506f63a/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FFieldAttributes.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FFieldAttributes.java?ref=282ef30280edd24547d586fc0c104e2b3506f63a",
      "patch": "@@ -90,7 +90,7 @@ public Class<?> getDeclaredClass() {\n   }\n \n   /**\n-   * Return the T annotation object from this field if it exist; otherwise returns\n+   * Return the {@code T} annotation object from this field if it exist; otherwise returns\n    * {@code null}.\n    *\n    * @param annotation the class of the annotation that will be retrieved",
      "parent_sha": "e37add7836afe3768f1e517eed3ffbf440bff6bb"
    }
  },
  {
    "oid": "1e18dce002158992bbda1d3a19952fdf07f308f4",
    "message": "Don't subclass ThreadLocal.\n\nThis attempts to address issue 402, wherein subclassing ThreadLocal is pinning a reference to a class, which transitively pins the entire application in containers like Tomcat.",
    "date": "2012-10-23T02:41:34Z",
    "url": "https://github.com/google/gson/commit/1e18dce002158992bbda1d3a19952fdf07f308f4",
    "details": {
      "sha": "aa80aeae3e69363b685ccade1090e859c4010a07",
      "filename": "gson/src/main/java/com/google/gson/Gson.java",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/google/gson/blob/1e18dce002158992bbda1d3a19952fdf07f308f4/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "raw_url": "https://github.com/google/gson/raw/1e18dce002158992bbda1d3a19952fdf07f308f4/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java?ref=1e18dce002158992bbda1d3a19952fdf07f308f4",
      "patch": "@@ -111,11 +111,7 @@ public final class Gson {\n    * The proxy is wired up once the initial adapter has been created.\n    */\n   private final ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>> calls\n-      = new ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>>() {\n-    @Override protected Map<TypeToken<?>, FutureTypeAdapter<?>> initialValue() {\n-      return new HashMap<TypeToken<?>, FutureTypeAdapter<?>>();\n-    }\n-  };\n+      = new ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>>();\n \n   private final Map<TypeToken<?>, TypeAdapter<?>> typeTokenCache\n       = Collections.synchronizedMap(new HashMap<TypeToken<?>, TypeAdapter<?>>());\n@@ -343,6 +339,11 @@ public <T> TypeAdapter<T> getAdapter(TypeToken<T> type) {\n     }\n \n     Map<TypeToken<?>, FutureTypeAdapter<?>> threadCalls = calls.get();\n+    if (threadCalls == null) {\n+      threadCalls = new HashMap<TypeToken<?>, FutureTypeAdapter<?>>();\n+      calls.set(threadCalls);\n+    }\n+\n     // the key and value type parameters always agree\n     FutureTypeAdapter<T> ongoingCall = (FutureTypeAdapter<T>) threadCalls.get(type);\n     if (ongoingCall != null) {",
      "parent_sha": "22c835f2bcd5ee39fd58556e01324f334c5f0cb7"
    }
  },
  {
    "oid": "ebe4b581ddc5adc0e3cab0d3a7f214691ecebf24",
    "message": "update RawCollectionsExample.java (#1953)\n\nuse static method instead deprecated method",
    "date": "2021-09-07T15:02:04Z",
    "url": "https://github.com/google/gson/commit/ebe4b581ddc5adc0e3cab0d3a7f214691ecebf24",
    "details": {
      "sha": "9ea350cae8831808900c1644167cc29aa8e50e33",
      "filename": "extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/google/gson/blob/ebe4b581ddc5adc0e3cab0d3a7f214691ecebf24/extras%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fextras%2Fexamples%2Frawcollections%2FRawCollectionsExample.java",
      "raw_url": "https://github.com/google/gson/raw/ebe4b581ddc5adc0e3cab0d3a7f214691ecebf24/extras%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fextras%2Fexamples%2Frawcollections%2FRawCollectionsExample.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/extras%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fextras%2Fexamples%2Frawcollections%2FRawCollectionsExample.java?ref=ebe4b581ddc5adc0e3cab0d3a7f214691ecebf24",
      "patch": "@@ -45,8 +45,7 @@ public static void main(String[] args) {\n     collection.add(new Event(\"GREETINGS\", \"guest\"));\n     String json = gson.toJson(collection);\n     System.out.println(\"Using Gson.toJson() on a raw collection: \" + json);\n-    JsonParser parser = new JsonParser();\n-    JsonArray array = parser.parse(json).getAsJsonArray();\n+    JsonArray array = JsonParser.parseString(json).getAsJsonArray();\n     String message = gson.fromJson(array.get(0), String.class);\n     int number = gson.fromJson(array.get(1), int.class);\n     Event event = gson.fromJson(array.get(2), Event.class);",
      "parent_sha": "9484297fbbc357816af78ac60b776e9da05787b3"
    }
  },
  {
    "oid": "893a7e1c5c3369ecfb41fb7f8177d18896f0a23b",
    "message": "Fix malformed JsonElement.getAsBigDecimal() javadoc (#1772)",
    "date": "2022-07-31T21:08:24Z",
    "url": "https://github.com/google/gson/commit/893a7e1c5c3369ecfb41fb7f8177d18896f0a23b",
    "details": {
      "sha": "fb6a5f1ae38323e772cc8aaabceb943100cae681",
      "filename": "gson/src/main/java/com/google/gson/JsonElement.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/893a7e1c5c3369ecfb41fb7f8177d18896f0a23b/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonElement.java",
      "raw_url": "https://github.com/google/gson/raw/893a7e1c5c3369ecfb41fb7f8177d18896f0a23b/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonElement.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonElement.java?ref=893a7e1c5c3369ecfb41fb7f8177d18896f0a23b",
      "patch": "@@ -268,7 +268,7 @@ public char getAsCharacter() {\n    *\n    * @return get this element as a {@link BigDecimal}.\n    * @throws ClassCastException if the element is of not a {@link JsonPrimitive}.\n-   * * @throws NumberFormatException if the element is not a valid {@link BigDecimal}.\n+   * @throws NumberFormatException if the element is not a valid {@link BigDecimal}.\n    * @throws IllegalStateException if the element is of the type {@link JsonArray} but contains\n    * more than a single element.\n    * @since 1.2",
      "parent_sha": "6d2557d5d1a8ac498f2bcee20e5053c93b33ecce"
    }
  },
  {
    "oid": "c329d020b95035c78bed8f1be39d31b188daf359",
    "message": "Make some fields final and initialize immediately.",
    "date": "2009-12-03T23:13:39Z",
    "url": "https://github.com/google/gson/commit/c329d020b95035c78bed8f1be39d31b188daf359",
    "details": {
      "sha": "300ed6b3ae2d63cdb8411712021d0d364f999f70",
      "filename": "gson/src/main/java/com/google/gson/FieldAttributes.java",
      "status": "modified",
      "additions": 7,
      "deletions": 13,
      "changes": 20,
      "blob_url": "https://github.com/google/gson/blob/c329d020b95035c78bed8f1be39d31b188daf359/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FFieldAttributes.java",
      "raw_url": "https://github.com/google/gson/raw/c329d020b95035c78bed8f1be39d31b188daf359/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FFieldAttributes.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FFieldAttributes.java?ref=c329d020b95035c78bed8f1be39d31b188daf359",
      "patch": "@@ -32,23 +32,26 @@\n  */\n public final class FieldAttributes {\n   private final Field field;\n+  private final Class<?> declaredType;\n+  private final boolean isSynthetic;\n+  private final int modifiers;\n \n   // Fields used for lazy initialization\n   private String name;\n   private Type genericType;\n-  private Class<?> declaredType;\n-  private Integer modifiers;\n-  private Boolean isSynthetic;\n   private Annotation[] annotations;\n \n   /**\n    * Constructs a Field Attributes object from the {@code f}.\n    *\n    * @param f the field to pull attributes from\n    */\n-  FieldAttributes(Field f) {\n+  FieldAttributes(final Field f) {\n     Preconditions.checkNotNull(f);\n     field = f;\n+    declaredType = f.getType();\n+    isSynthetic = f.isSynthetic();\n+    modifiers = field.getModifiers();\n   }\n \n   /**\n@@ -101,9 +104,6 @@ public Type getDeclaredType() {\n    * @return the specific class object that was declared for the field\n    */\n   public Class<?> getDeclaredClass() {\n-    if (declaredType == null) {\n-      declaredType = field.getType();\n-    }\n     return declaredType;\n   }\n \n@@ -132,9 +132,6 @@ public <T extends Annotation> T getAnnotation(Class<T> annotation) {\n    * @see java.lang.reflect.Modifier\n    */\n   public boolean hasModifier(int modifier) {\n-    if (modifiers == null) {\n-      modifiers = field.getModifiers();\n-    }\n     return (modifiers & modifier) != 0;\n   }\n \n@@ -144,9 +141,6 @@ public boolean hasModifier(int modifier) {\n    * @return true if the field is synthetic; otherwise false\n    */\n   boolean isSynthetic() {\n-    if (isSynthetic == null) {\n-      isSynthetic = field.isSynthetic();\n-    }\n     return isSynthetic;\n   }\n ",
      "parent_sha": "33e816dcf01c5d149cfa633f1fa13ad5b9e7f71b"
    }
  },
  {
    "oid": "d8c12a727f465fcdc55fb5e25890b8b868db49e7",
    "message": "Fixed accidental duplication of null elements",
    "date": "2015-07-24T04:18:01Z",
    "url": "https://github.com/google/gson/commit/d8c12a727f465fcdc55fb5e25890b8b868db49e7",
    "details": {
      "sha": "c664a5e18b6befda44a0d3ae01325a5a36f466c3",
      "filename": "gson/src/main/java/com/google/gson/JsonArray.java",
      "status": "modified",
      "additions": 4,
      "deletions": 16,
      "changes": 20,
      "blob_url": "https://github.com/google/gson/blob/d8c12a727f465fcdc55fb5e25890b8b868db49e7/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonArray.java",
      "raw_url": "https://github.com/google/gson/raw/d8c12a727f465fcdc55fb5e25890b8b868db49e7/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonArray.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonArray.java?ref=d8c12a727f465fcdc55fb5e25890b8b868db49e7",
      "patch": "@@ -55,10 +55,7 @@ JsonArray deepCopy() {\n    * @param bool the boolean that needs to be added to the array.\n    */\n   public void add(Boolean bool) {\n-    if (bool == null) {\n-      elements.add(JsonNull.INSTANCE);\n-    }\n-    elements.add(new JsonPrimitive(bool));\n+    elements.add(bool == null ? JsonNull.INSTANCE : new JsonPrimitive(bool));\n   }\n \n   /**\n@@ -67,10 +64,7 @@ public void add(Boolean bool) {\n    * @param character the character that needs to be added to the array.\n    */\n   public void add(Character character) {\n-    if (character == null) {\n-      elements.add(JsonNull.INSTANCE);\n-    }\n-    elements.add(new JsonPrimitive(character));\n+    elements.add(character == null ? JsonNull.INSTANCE : new JsonPrimitive(character));\n   }\n \n   /**\n@@ -79,10 +73,7 @@ public void add(Character character) {\n    * @param number the number that needs to be added to the array.\n    */\n   public void add(Number number) {\n-    if (number == null) {\n-      elements.add(JsonNull.INSTANCE);\n-    }\n-    elements.add(new JsonPrimitive(number));\n+    elements.add(number == null ? JsonNull.INSTANCE : new JsonPrimitive(number));\n   }\n \n   /**\n@@ -91,10 +82,7 @@ public void add(Number number) {\n    * @param string the string that needs to be added to the array.\n    */\n   public void add(String string) {\n-    if (string == null) {\n-      elements.add(JsonNull.INSTANCE);\n-    }\n-    elements.add(new JsonPrimitive(string));\n+    elements.add(string == null ? JsonNull.INSTANCE : new JsonPrimitive(string));\n   }\n \n   /**",
      "parent_sha": "6960ebc77684dd07125e39caefc140262b1fb76e"
    }
  },
  {
    "oid": "aa897730085d17e131768caf40f9b30f2aa7a0bc",
    "message": "Quick fix for threading issue. Should maybe look into synchronizing this method instead.",
    "date": "2011-06-07T01:28:30Z",
    "url": "https://github.com/google/gson/commit/aa897730085d17e131768caf40f9b30f2aa7a0bc",
    "details": {
      "sha": "0aa47511de4eb759eef99a7ab5324bbbdd968f94",
      "filename": "gson/src/main/java/com/google/gson/FieldAttributes.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/google/gson/blob/aa897730085d17e131768caf40f9b30f2aa7a0bc/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FFieldAttributes.java",
      "raw_url": "https://github.com/google/gson/raw/aa897730085d17e131768caf40f9b30f2aa7a0bc/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FFieldAttributes.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FFieldAttributes.java?ref=aa897730085d17e131768caf40f9b30f2aa7a0bc",
      "patch": "@@ -159,12 +159,13 @@ public <T extends Annotation> T getAnnotation(Class<T> annotation) {\n   public Collection<Annotation> getAnnotations() {\n     if (annotations == null) {\n       Pair<Class<?>, String> key = new Pair<Class<?>, String>(declaringClazz, name);\n-      annotations = ANNOTATION_CACHE.getElement(key);\n-      if (annotations == null) {\n-        annotations = Collections.unmodifiableCollection(\n+      Collection<Annotation> cachedValue = ANNOTATION_CACHE.getElement(key);\n+      if (cachedValue == null) {\n+        cachedValue = Collections.unmodifiableCollection(\n             Arrays.asList(field.getAnnotations()));\n-        ANNOTATION_CACHE.addElement(key, annotations);\n+        ANNOTATION_CACHE.addElement(key, cachedValue);\n       }\n+      annotations = cachedValue;\n     }\n     return annotations;\n   }",
      "parent_sha": "9ad3358728073500a5fc30f9685eefa48696fe23"
    }
  },
  {
    "oid": "29ab864b2fda09ddee46554751f22f875c0ab736",
    "message": "Fixed bug 158",
    "date": "2009-09-23T17:17:03Z",
    "url": "https://github.com/google/gson/commit/29ab864b2fda09ddee46554751f22f875c0ab736",
    "details": {
      "sha": "1bf41b5bb64ecb1db2debd7e215167d188d30e9e",
      "filename": "gson/src/main/java/com/google/gson/Gson.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/google/gson/blob/29ab864b2fda09ddee46554751f22f875c0ab736/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "raw_url": "https://github.com/google/gson/raw/29ab864b2fda09ddee46554751f22f875c0ab736/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java?ref=29ab864b2fda09ddee46554751f22f875c0ab736",
      "patch": "@@ -441,9 +441,10 @@ public <T> T fromJson(Reader json, Class<T> classOfT) throws JsonParseException\n    * @throws JsonParseException if json is not a valid representation for an object of type typeOfT\n    * @since 1.2\n    */\n+  @SuppressWarnings(\"unchecked\")\n   public <T> T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n     JsonElement root = new JsonParser().parse(json);\n-    T target = fromJson(root, typeOfT);\n+    T target = (T) fromJson(root, typeOfT);\n     return target;\n   }\n ",
      "parent_sha": "c5812bb485ff2ca86d67090b01b157f52c90e1fe"
    }
  },
  {
    "oid": "441fa98735c1360a6db3c13037b898d3e980e9de",
    "message": "Simplified access of getSimpleName (#1042)\n\n* Simplified access of getSimpleName\r\n\r\ninstead of calling getClass.getSimpleName() that will check too many conditions inside , we can make it as final String and use it directly.\r\n\r\n* Simplified access of getSimpleName\r\n\r\nmaking string as static\r\n\r\n* Simplified access of getSimpleName\r\n\r\nCode Review changes",
    "date": "2017-03-20T21:25:52Z",
    "url": "https://github.com/google/gson/commit/441fa98735c1360a6db3c13037b898d3e980e9de",
    "details": {
      "sha": "bb1a9bdbeed5a4f2f85fdcaad3ed6f0c89e80717",
      "filename": "gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/google/gson/blob/441fa98735c1360a6db3c13037b898d3e980e9de/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FDefaultDateTypeAdapter.java",
      "raw_url": "https://github.com/google/gson/raw/441fa98735c1360a6db3c13037b898d3e980e9de/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FDefaultDateTypeAdapter.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FDefaultDateTypeAdapter.java?ref=441fa98735c1360a6db3c13037b898d3e980e9de",
      "patch": "@@ -37,10 +37,12 @@\n final class DefaultDateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {\n \n   // TODO: migrate to streaming adapter\n-\n+  \n+  private static final String SIMPLE_NAME = \"DefaultDateTypeAdapter\";\n+  \n   private final DateFormat enUsFormat;\n   private final DateFormat localFormat;\n-\n+  \n   DefaultDateTypeAdapter() {\n     this(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US),\n         DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));\n@@ -111,7 +113,7 @@ private Date deserializeToDate(JsonElement json) {\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n-    sb.append(DefaultDateTypeAdapter.class.getSimpleName());\n+    sb.append(SIMPLE_NAME);\n     sb.append('(').append(localFormat.getClass().getSimpleName()).append(')');\n     return sb.toString();\n   }",
      "parent_sha": "3063136a2c3332ebfe07b7f5e9a00f1af43b61c2"
    }
  },
  {
    "oid": "21fc362a7ec9d312c34ad82df6188c6480280021",
    "message": "Fixed tests for java 11 (#1454)",
    "date": "2019-10-04T18:29:13Z",
    "url": "https://github.com/google/gson/commit/21fc362a7ec9d312c34ad82df6188c6480280021",
    "details": {
      "sha": "632a482d8cc844ac663541ad76d58ca410704564",
      "filename": "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/google/gson/blob/21fc362a7ec9d312c34ad82df6188c6480280021/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2FDefaultDateTypeAdapterTest.java",
      "raw_url": "https://github.com/google/gson/raw/21fc362a7ec9d312c34ad82df6188c6480280021/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2FDefaultDateTypeAdapterTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2FDefaultDateTypeAdapterTest.java?ref=21fc362a7ec9d312c34ad82df6188c6480280021",
      "patch": "@@ -88,8 +88,9 @@ public void testParsingDatesFormattedWithSystemLocale() throws Exception {\n           new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n       assertParsed(String.format(\"1 janvier 1970%s00:00:00 UTC\", afterYearSep),\n           new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));\n-      assertParsed(JavaVersion.isJava9OrLater() ?\n+      assertParsed(JavaVersion.isJava9OrLater() ? (JavaVersion.getMajorJavaVersion() <11 ?\n                       \"jeudi 1 janvier 1970 \u00e0 00:00:00 Coordinated Universal Time\" :\n+                      \"jeudi 1 janvier 1970 \u00e0 00:00:00 Temps universel coordonn\u00e9\") :\n                       \"jeudi 1 janvier 1970 00 h 00 UTC\",\n           new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));\n     } finally {",
      "parent_sha": "c18813884285493e69d94f004c294f539cc49828"
    }
  },
  {
    "oid": "d9feb905939424d7162a178c90779fe220d0b8e8",
    "message": "Small cleanup of exception conversion.",
    "date": "2010-10-31T04:58:23Z",
    "url": "https://github.com/google/gson/commit/d9feb905939424d7162a178c90779fe220d0b8e8",
    "details": {
      "sha": "79c3ba2bf71aa74b89819e54b0405cb01664dd97",
      "filename": "gson/src/main/java/com/google/gson/Streams.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/google/gson/blob/d9feb905939424d7162a178c90779fe220d0b8e8/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FStreams.java",
      "raw_url": "https://github.com/google/gson/raw/d9feb905939424d7162a178c90779fe220d0b8e8/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FStreams.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FStreams.java?ref=d9feb905939424d7162a178c90779fe220d0b8e8",
      "patch": "@@ -17,6 +17,7 @@\n package com.google.gson;\n \n import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonSyntaxException;\n import com.google.gson.stream.JsonWriter;\n \n import java.io.EOFException;\n@@ -68,10 +69,11 @@ static JsonElement parse(JsonReader reader) throws JsonParseException {\n       default:\n         throw new IllegalArgumentException();\n       }\n+    } catch (EOFException e) {\n+      return JsonNull.createJsonNull();\n+    } catch (JsonSyntaxException e) {\n+      throw new JsonParseException(e);\n     } catch (IOException e) {\n-      if (e instanceof EOFException) {\n-        return JsonNull.createJsonNull();\n-      }\n       throw new JsonIOException(e);\n     } catch (NumberFormatException e) {\n       throw new JsonParseException(e);",
      "parent_sha": "b2005299e4311e5517ed131fe6a2dc10d2222bbb"
    }
  },
  {
    "oid": "b4d51db776325cd0da58d96d973175dc1b86b256",
    "message": "Add a test case for a problem reported on the group.\n\nhttps://groups.google.com/d/topic/google-gson/EBmOCa8kJPE/discussion",
    "date": "2012-10-29T16:30:33Z",
    "url": "https://github.com/google/gson/commit/b4d51db776325cd0da58d96d973175dc1b86b256",
    "details": {
      "sha": "922cecc47a83acdaa976d0ce8e0ae570ea761efa",
      "filename": "gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java",
      "status": "modified",
      "additions": 43,
      "deletions": 2,
      "changes": 45,
      "blob_url": "https://github.com/google/gson/blob/b4d51db776325cd0da58d96d973175dc1b86b256/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonTypeAdapterTest.java",
      "raw_url": "https://github.com/google/gson/raw/b4d51db776325cd0da58d96d973175dc1b86b256/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonTypeAdapterTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonTypeAdapterTest.java?ref=b4d51db776325cd0da58d96d973175dc1b86b256",
      "patch": "@@ -16,12 +16,11 @@\n \n package com.google.gson;\n \n-import junit.framework.TestCase;\n-\n import java.lang.reflect.Type;\n import java.math.BigInteger;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicLong;\n+import junit.framework.TestCase;\n \n /**\n  * Contains numerous tests involving registered type converters with a Gson instance.\n@@ -105,4 +104,46 @@ public AtomicInteger deserialize(JsonElement json, Type typeOfT, JsonDeserializa\n       return new AtomicInteger(--intValue);\n     }\n   }\n+\n+  static abstract class Abstract {\n+    String a;\n+  }\n+\n+  static class Concrete extends Abstract {\n+    String b;\n+  }\n+\n+  // https://groups.google.com/d/topic/google-gson/EBmOCa8kJPE/discussion\n+  public void testDeserializerForAbstractClass() {\n+    Concrete instance = new Concrete();\n+    instance.a = \"android\";\n+    instance.b = \"beep\";\n+    assertSerialized(\"{\\\"a\\\":\\\"android\\\"}\", Abstract.class, true, true, instance);\n+    assertSerialized(\"{\\\"a\\\":\\\"android\\\"}\", Abstract.class, true, false, instance);\n+    assertSerialized(\"{\\\"a\\\":\\\"android\\\"}\", Abstract.class, false, true, instance);\n+    assertSerialized(\"{\\\"a\\\":\\\"android\\\"}\", Abstract.class, false, false, instance);\n+    assertSerialized(\"{\\\"b\\\":\\\"beep\\\",\\\"a\\\":\\\"android\\\"}\", Concrete.class, true, true, instance);\n+    assertSerialized(\"{\\\"b\\\":\\\"beep\\\",\\\"a\\\":\\\"android\\\"}\", Concrete.class, true, false, instance);\n+    assertSerialized(\"{\\\"b\\\":\\\"beep\\\",\\\"a\\\":\\\"android\\\"}\", Concrete.class, false, true, instance);\n+    assertSerialized(\"{\\\"b\\\":\\\"beep\\\",\\\"a\\\":\\\"android\\\"}\", Concrete.class, false, false, instance);\n+  }\n+\n+  private void assertSerialized(String expected, Class<?> instanceType, boolean registerAbstractDeserializer,\n+      boolean registerAbstractHierarchyDeserializer, Object instance) {\n+    JsonDeserializer<Abstract> deserializer = new JsonDeserializer<Abstract>() {\n+      public Abstract deserialize(JsonElement json, Type typeOfT,\n+          JsonDeserializationContext context) throws JsonParseException {\n+        throw new AssertionError();\n+      }\n+    };\n+    GsonBuilder builder = new GsonBuilder();\n+    if (registerAbstractDeserializer) {\n+      builder.registerTypeAdapter(Abstract.class, deserializer);\n+    }\n+    if (registerAbstractHierarchyDeserializer) {\n+      builder.registerTypeHierarchyAdapter(Abstract.class, deserializer);\n+    }\n+    Gson gson = builder.create();\n+    assertEquals(expected, gson.toJson(instance, instanceType));\n+  }\n }",
      "parent_sha": "040bae34d701172375e5aaef7492a5782933d46d"
    }
  },
  {
    "oid": "cebda2b11921bf4f8adf5f36adfaa462b4cd1e1a",
    "message": "Fixed MapTest.testInterfaceTypeMapWithSerializer. This test for relying on JsonElement.toString() to have same behavior as gson.toJson(JsonElement). However, gson.toJson() skips nulls by default whereas JsonElement.toString() does not.",
    "date": "2011-09-27T15:38:02Z",
    "url": "https://github.com/google/gson/commit/cebda2b11921bf4f8adf5f36adfaa462b4cd1e1a",
    "details": {
      "sha": "309615ad73aef1bc2eb51c6db4d0a7d8bc4b29ad",
      "filename": "gson/src/test/java/com/google/gson/functional/MapTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/google/gson/blob/cebda2b11921bf4f8adf5f36adfaa462b4cd1e1a/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FMapTest.java",
      "raw_url": "https://github.com/google/gson/raw/cebda2b11921bf4f8adf5f36adfaa462b4cd1e1a/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FMapTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FMapTest.java?ref=cebda2b11921bf4f8adf5f36adfaa462b4cd1e1a",
      "patch": "@@ -396,14 +396,15 @@ public final void testInterfaceTypeMapWithSerializer() {\n \n     Gson tempGson = new Gson();\n     String subTypeJson = tempGson.toJson(subType);\n-    final JsonElement baseTypeJson = tempGson.toJsonTree(subType, TestTypes.Base.class);\n-    String expected = \"{\\\"bases\\\":{\\\"Test\\\":\" + baseTypeJson.toString() + \"},\"\n+    final JsonElement baseTypeJsonElement = tempGson.toJsonTree(subType, TestTypes.Base.class);\n+    String baseTypeJson = tempGson.toJson(baseTypeJsonElement);\n+    String expected = \"{\\\"bases\\\":{\\\"Test\\\":\" + baseTypeJson + \"},\"\n         + \"\\\"subs\\\":{\\\"Test\\\":\" + subTypeJson + \"}}\";\n \n     JsonSerializer<TestTypes.Base> baseTypeAdapter = new JsonSerializer<TestTypes.Base>() {\n       public JsonElement serialize(TestTypes.Base src, Type typeOfSrc,\n           JsonSerializationContext context) {\n-        return baseTypeJson;\n+        return baseTypeJsonElement;\n       }\n     };\n \n@@ -441,11 +442,11 @@ static final class MapClass {\n     private final Map<String, TestTypes.Base> bases = new HashMap<String, TestTypes.Base>();\n     private final Map<String, TestTypes.Sub> subs = new HashMap<String, TestTypes.Sub>();\n \n-    public final void addBase(final String name, final TestTypes.Base value) {\n+    public final void addBase(String name, TestTypes.Base value) {\n       bases.put(name, value);\n     }\n \n-    public final void addSub(final String name, final TestTypes.Sub value) {\n+    public final void addSub(String name, TestTypes.Sub value) {\n       subs.put(name, value);\n     }\n   }",
      "parent_sha": "b2d5940a9baf82c6aa796adf710b86fe64fe14e7"
    }
  },
  {
    "oid": "8537c8932f0d9bd3338a5048fb65a8506c7a8247",
    "message": "Optimize list allocation for every reflective field.\n\nThe common cases (no @SerializedName and a single-value @SerializedName) now use a specialized one-element collection. Cases with alternate names use a much more space efficient ArrayList which is exactly sized.\n\nThis is also a performance win for adapter initialization since an index-based loop was used on the returned type for which LinkedList is not suited for.",
    "date": "2016-04-27T04:28:51Z",
    "url": "https://github.com/google/gson/commit/8537c8932f0d9bd3338a5048fb65a8506c7a8247",
    "details": {
      "sha": "b47aaac41adc3e9a56e77bb5c175ef070f2f6cb7",
      "filename": "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
      "status": "modified",
      "additions": 17,
      "deletions": 14,
      "changes": 31,
      "blob_url": "https://github.com/google/gson/blob/8537c8932f0d9bd3338a5048fb65a8506c7a8247/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2Fbind%2FReflectiveTypeAdapterFactory.java",
      "raw_url": "https://github.com/google/gson/raw/8537c8932f0d9bd3338a5048fb65a8506c7a8247/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2Fbind%2FReflectiveTypeAdapterFactory.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2Fbind%2FReflectiveTypeAdapterFactory.java?ref=8537c8932f0d9bd3338a5048fb65a8506c7a8247",
      "patch": "@@ -35,8 +35,9 @@\n import java.io.IOException;\n import java.lang.reflect.Field;\n import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.LinkedHashMap;\n-import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n \n@@ -67,20 +68,22 @@ static boolean excludeField(Field f, boolean serialize, Excluder excluder) {\n \n   /** first element holds the default name */\n   private List<String> getFieldNames(Field f) {\n-    return getFieldName(fieldNamingPolicy, f);\n-  }\n+    SerializedName annotation = f.getAnnotation(SerializedName.class);\n+    if (annotation == null) {\n+      String name = fieldNamingPolicy.translateName(f);\n+      return Collections.singletonList(name);\n+    }\n \n-  /** first element holds the default name */\n-  static List<String> getFieldName(FieldNamingStrategy fieldNamingPolicy, Field f) {\n-    SerializedName serializedName = f.getAnnotation(SerializedName.class);\n-    List<String> fieldNames = new LinkedList<String>();\n-    if (serializedName == null) {\n-      fieldNames.add(fieldNamingPolicy.translateName(f));\n-    } else {\n-      fieldNames.add(serializedName.value());\n-      for (String alternate : serializedName.alternate()) {\n-        fieldNames.add(alternate);\n-      }\n+    String serializedName = annotation.value();\n+    String[] alternates = annotation.alternate();\n+    if (alternates.length == 0) {\n+      return Collections.singletonList(serializedName);\n+    }\n+\n+    List<String> fieldNames = new ArrayList<String>(alternates.length + 1);\n+    fieldNames.add(serializedName);\n+    for (String alternate : alternates) {\n+      fieldNames.add(alternate);\n     }\n     return fieldNames;\n   }",
      "parent_sha": "d5c090835f18a6a4aa70010fa83249db359e5222"
    }
  },
  {
    "oid": "c5c7c5bb649cb875769d1e25ea44435311ca93b4",
    "message": "More fixes to JavaDoc.",
    "date": "2011-04-11T18:52:29Z",
    "url": "https://github.com/google/gson/commit/c5c7c5bb649cb875769d1e25ea44435311ca93b4",
    "details": {
      "sha": "c5f10efd9c04b849ebf9d7d2fcac006543d72640",
      "filename": "gson/src/main/java/com/google/gson/GsonBuilder.java",
      "status": "modified",
      "additions": 12,
      "deletions": 8,
      "changes": 20,
      "blob_url": "https://github.com/google/gson/blob/c5c7c5bb649cb875769d1e25ea44435311ca93b4/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java",
      "raw_url": "https://github.com/google/gson/raw/c5c7c5bb649cb875769d1e25ea44435311ca93b4/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java?ref=c5c7c5bb649cb875769d1e25ea44435311ca93b4",
      "patch": "@@ -355,10 +355,12 @@ public GsonBuilder setExclusionStrategies(ExclusionStrategy... strategies) {\n   }\n \n   /**\n-   * Configures Gson to apply a set of exclusion strategies during serialization.\n-   * Each of the {@code strategies} will be applied as a disjunction rule.\n-   * This means that if one of the {@code strategies} suggests that a field (or class) should be\n-   * skipped then that field (or object) is skipped during serialization.\n+   * Configures Gson to apply the passed exclusion strategies during serialization.\n+   * If this method is invoked numerous times with different exclusion strategy objects\n+   * then the exclusion strategies that were added will be applied as a disjunction rule.\n+   * This means that if one of the added exclusion strategies suggests that a field (or\n+   * class) should be skipped then that field (or object) is skipped during its\n+   * serialization.\n    *\n    * @param strategy an exclusion strategy to apply during serialization.\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n@@ -370,10 +372,12 @@ public GsonBuilder addSerializationExclusionStrategy(ExclusionStrategy strategy)\n   }\n \n   /**\n-   * Configures Gson to apply a set of exclusion strategies during deserialization.\n-   * Each of the {@code strategies} will be applied as a disjunction rule.\n-   * This means that if one of the {@code strategies} suggests that a field (or class) should be\n-   * skipped then that field (or object) is skipped during deserialization.\n+   * Configures Gson to apply the passed exclusion strategies during deserialization.\n+   * If this method is invoked numerous times with different exclusion strategy objects\n+   * then the exclusion strategies that were added will be applied as a disjunction rule.\n+   * This means that if one of the added exclusion strategies suggests that a field (or\n+   * class) should be skipped then that field (or object) is skipped during its\n+   * deserialization.\n    *\n    * @param strategy an exclusion strategy to apply during deserialization.\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern",
      "parent_sha": "49e7ee05fcd6113d569d3ca20d7a806603c4a91f"
    }
  },
  {
    "oid": "8965d31ce9f6eca0f195fd0d74721afba293cce9",
    "message": "made DEBUG final per the naming conventions.",
    "date": "2009-03-30T19:55:05Z",
    "url": "https://github.com/google/gson/commit/8965d31ce9f6eca0f195fd0d74721afba293cce9",
    "details": {
      "sha": "8209989e600c03344f074ee3a079bbdb6b2f30a5",
      "filename": "gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/8965d31ce9f6eca0f195fd0d74721afba293cce9/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FPrettyPrintingTest.java",
      "raw_url": "https://github.com/google/gson/raw/8965d31ce9f6eca0f195fd0d74721afba293cce9/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FPrettyPrintingTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FPrettyPrintingTest.java?ref=8965d31ce9f6eca0f195fd0d74721afba293cce9",
      "patch": "@@ -40,7 +40,7 @@ public class PrettyPrintingTest extends TestCase {\n   private static int PRINT_MARGIN = 80;\n   private static int RIGHT_MARGIN = 4;\n \n-  private static boolean DEBUG = false;\n+  private static final boolean DEBUG = false;\n \n   private Gson gson;\n ",
      "parent_sha": "e340801d258e18f733620b0fd03d65fffb8df6c3"
    }
  },
  {
    "oid": "f4c21abda6ab01b0cacbebedc6d83ca4b5f07bda",
    "message": "updated javadoc in response to issue 97",
    "date": "2009-01-29T02:43:36Z",
    "url": "https://github.com/google/gson/commit/f4c21abda6ab01b0cacbebedc6d83ca4b5f07bda",
    "details": {
      "sha": "82b0c686b299b1844c9326d7f00459b004ae7b63",
      "filename": "gson/src/main/java/com/google/gson/JsonNull.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/google/gson/blob/f4c21abda6ab01b0cacbebedc6d83ca4b5f07bda/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonNull.java",
      "raw_url": "https://github.com/google/gson/raw/f4c21abda6ab01b0cacbebedc6d83ca4b5f07bda/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonNull.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonNull.java?ref=f4c21abda6ab01b0cacbebedc6d83ca4b5f07bda",
      "patch": "@@ -59,7 +59,10 @@ public boolean equals(Object other) {\n   /**\r\n    * Creation method used to return an instance of a {@link JsonNull}.  To reduce the memory\r\n    * footprint, a single object has been created for this class; therefore the same instance is\r\n-   * being returned for each invocation of this method.\r\n+   * being returned for each invocation of this method. This method is kept private since we \r\n+   * prefer the users to use {@link JsonNull#JsonNull()} which is similar to how other JsonElements\r\n+   * are created. Note that all instances of JsonNull return true for {@link #equals(Object)} \r\n+   * when compared to each other.\r\n    *\r\n    * @return a instance of a {@link JsonNull}\r\n    */\r",
      "parent_sha": "764e4d9aca8139540f3b37ec3977c07e3e705127"
    }
  },
  {
    "oid": "7abeb1608064abd19129ef7bcaf781dbd3ed26e9",
    "message": "Thread safe method cache",
    "date": "2015-10-28T21:41:56Z",
    "url": "https://github.com/google/gson/commit/7abeb1608064abd19129ef7bcaf781dbd3ed26e9",
    "details": {
      "sha": "ff44779f17efc42bae4e4763c568093a91ad7c4a",
      "filename": "proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java",
      "status": "modified",
      "additions": 20,
      "deletions": 11,
      "changes": 31,
      "blob_url": "https://github.com/google/gson/blob/7abeb1608064abd19129ef7bcaf781dbd3ed26e9/proto%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fprotobuf%2FProtoTypeAdapter.java",
      "raw_url": "https://github.com/google/gson/raw/7abeb1608064abd19129ef7bcaf781dbd3ed26e9/proto%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fprotobuf%2FProtoTypeAdapter.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/proto%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fprotobuf%2FProtoTypeAdapter.java?ref=7abeb1608064abd19129ef7bcaf781dbd3ed26e9",
      "patch": "@@ -20,6 +20,7 @@\n \n import com.google.common.base.CaseFormat;\n import com.google.common.base.Converter;\n+import com.google.common.collect.MapMaker;\n import com.google.gson.JsonArray;\n import com.google.gson.JsonDeserializationContext;\n import com.google.gson.JsonDeserializer;\n@@ -44,10 +45,10 @@\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentMap;\n \n /**\n  * GSON type adapter for protocol buffers that knows how to serialize enums either by using their\n@@ -190,6 +191,9 @@ public static Builder newBuilder() {\n   private static final com.google.protobuf.Descriptors.FieldDescriptor.Type ENUM_TYPE =\n       com.google.protobuf.Descriptors.FieldDescriptor.Type.ENUM;\n \n+  private static final ConcurrentMap<String, Map<Class<?>, Method>> mapOfMapOfMethods =\n+      new MapMaker().makeMap();\n+\n   private final EnumSerialization enumSerialization;\n   private final Converter<String, String> fieldNameSerializationFormat;\n   private final Set<Extension<FieldOptions, String>> serializedNameExtensions;\n@@ -380,18 +384,23 @@ private EnumValueDescriptor findValueByNameAndExtension(EnumDescriptor desc,\n     }\n   }\n \n-  private static Method getCachedMethod(Class<?> clazz, String methodName)\n-      throws NoSuchMethodException {\n-    if (!mapOfMapOfMethods.containsKey(methodName)) {\n-      mapOfMapOfMethods.put(methodName, new HashMap<Class<?>, Method>());\n-    }\n+  private static Method getCachedMethod(Class<?> clazz, String methodName,\n+      Class<?>... methodParamTypes) throws NoSuchMethodException {\n     Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\n-    if (!mapOfMethods.containsKey(clazz)) {\n-      mapOfMethods.put(clazz, clazz.getMethod(methodName));\n+    if (mapOfMethods == null) {\n+      mapOfMethods = new MapMaker().makeMap();\n+      Map<Class<?>, Method> previous =\n+          mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\n+      mapOfMethods = previous == null ? mapOfMethods : previous;\n+    }\n+\n+    Method method = mapOfMethods.get(clazz);\n+    if (method == null) {\n+      method = clazz.getMethod(methodName, methodParamTypes);\n+      mapOfMethods.putIfAbsent(clazz, method);\n+      // NB: it doesn't matter which method we return in the event of a race.\n     }\n-    return mapOfMethods.get(clazz);\n+    return method;\n   }\n \n-  private static Map<String, Map<Class<?>, Method>> mapOfMapOfMethods =\n-      new HashMap<String, Map<Class<?>, Method>>();\n }",
      "parent_sha": "fe101c10bc3597d8e715a31d94d2cc0cc54b660f"
    }
  },
  {
    "oid": "0ac36805c22209cf736a895466f36d56536b3a8d",
    "message": "Remove an unnecessary cast from example code.",
    "date": "2011-10-24T14:14:34Z",
    "url": "https://github.com/google/gson/commit/0ac36805c22209cf736a895466f36d56536b3a8d",
    "details": {
      "sha": "81d0b3cd8986b910759b232d67aed1c5b72197ab",
      "filename": "gson/src/main/java/com/google/gson/JsonDeserializer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/0ac36805c22209cf736a895466f36d56536b3a8d/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonDeserializer.java",
      "raw_url": "https://github.com/google/gson/raw/0ac36805c22209cf736a895466f36d56536b3a8d/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonDeserializer.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonDeserializer.java?ref=0ac36805c22209cf736a895466f36d56536b3a8d",
      "patch": "@@ -51,7 +51,7 @@\n  * class IdDeserializer implements JsonDeserializer&lt;Id&gt;() {\n  *   public Id deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n  *       throws JsonParseException {\n- *     return (Id) new Id((Class)typeOfT, id.getValue());\n+ *     return new Id((Class)typeOfT, id.getValue());\n  *   }\n  * </pre>\n  *",
      "parent_sha": "00946277e84a409f52e99d3af5bf5dd99d581339"
    }
  },
  {
    "oid": "47668fad57e23dacc5482e40a276a93850cec2cf",
    "message": "Fix typo in GsonBuilder Javadoc (#2213)",
    "date": "2022-10-01T22:57:16Z",
    "url": "https://github.com/google/gson/commit/47668fad57e23dacc5482e40a276a93850cec2cf",
    "details": {
      "sha": "94f2138f66e4241113af4d077d226310c5847ac3",
      "filename": "gson/src/main/java/com/google/gson/GsonBuilder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/47668fad57e23dacc5482e40a276a93850cec2cf/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java",
      "raw_url": "https://github.com/google/gson/raw/47668fad57e23dacc5482e40a276a93850cec2cf/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java?ref=47668fad57e23dacc5482e40a276a93850cec2cf",
      "patch": "@@ -252,7 +252,7 @@ public GsonBuilder serializeNulls() {\n    * <p>For this case, assume that a type adapter was NOT registered for some\n    * {@code Point} class, but rather the default Gson serialization is applied.\n    * In this case, some {@code new Point(2,3)} would serialize as {@code\n-   * {\"x\":2,\"y\":5}}.\n+   * {\"x\":2,\"y\":3}}.\n    *\n    * <p>Given the assumption above, a {@code Map<Point, String>} will be\n    * serialize as an array of arrays (can be viewed as an entry set of pairs).",
      "parent_sha": "ea7ab7cd520199fdb4a8d47fe462a4a0357a58bb"
    }
  },
  {
    "oid": "970446e997904d036060bba31c39061fe5e1ea65",
    "message": "replaced system.out.println with a real assertion in the test.",
    "date": "2008-12-31T01:15:15Z",
    "url": "https://github.com/google/gson/commit/970446e997904d036060bba31c39061fe5e1ea65",
    "details": {
      "sha": "0bb9e36cc33caaa29d1e7961692909d787947f72",
      "filename": "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/google/gson/blob/970446e997904d036060bba31c39061fe5e1ea65/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FDefaultTypeAdaptersTest.java",
      "raw_url": "https://github.com/google/gson/raw/970446e997904d036060bba31c39061fe5e1ea65/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FDefaultTypeAdaptersTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FDefaultTypeAdaptersTest.java?ref=970446e997904d036060bba31c39061fe5e1ea65",
      "patch": "@@ -264,7 +264,8 @@ public void testPropertiesSerialization() {\n     Properties props = new Properties();\n     props.setProperty(\"foo\", \"bar\");\n     String json = gson.toJson(props);\n-    System.out.println(json);\n+    String expected = \"{\\\"foo\\\":\\\"bar\\\"}\";\n+    assertEquals(expected, json);\n   }\n   \n   public void testPropertiesDeserialization() {",
      "parent_sha": "cc334475b0ab3fdcff3061f58474775bd09cbe4f"
    }
  },
  {
    "oid": "84f0ddd6bb629f99f6a0683aabad3856a78ea7e6",
    "message": "Throwing a helpful error in cases where the user forgot to use the TypeToken idiom.",
    "date": "2009-04-01T22:24:10Z",
    "url": "https://github.com/google/gson/commit/84f0ddd6bb629f99f6a0683aabad3856a78ea7e6",
    "details": {
      "sha": "deb88a2f72406d20ae95bb5fb0a08f31af2b41ce",
      "filename": "gson/src/main/java/com/google/gson/TypeInfoFactory.java",
      "status": "modified",
      "additions": 18,
      "deletions": 12,
      "changes": 30,
      "blob_url": "https://github.com/google/gson/blob/84f0ddd6bb629f99f6a0683aabad3856a78ea7e6/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FTypeInfoFactory.java",
      "raw_url": "https://github.com/google/gson/raw/84f0ddd6bb629f99f6a0683aabad3856a78ea7e6/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FTypeInfoFactory.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FTypeInfoFactory.java?ref=84f0ddd6bb629f99f6a0683aabad3856a78ea7e6",
      "patch": "@@ -80,18 +80,24 @@ private static Type getActualType(\n         }\n       }\n     } else if (typeToEvaluate instanceof TypeVariable) {\n-      // The class definition has the actual types used for the type variables.\n-      // Find the matching actual type for the Type Variable used for the field.\n-      // For example, class Foo<A> { A a; }\n-      // new Foo<Integer>(); defines the actual type of A to be Integer.\n-      // So, to find the type of the field a, we will have to look at the class'\n-      // actual type arguments.\n-      TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;\n-      TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();\n-      ParameterizedType objParameterizedType = (ParameterizedType) parentType;\n-      int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);\n-      Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();\n-      return actualTypeArguments[indexOfActualTypeArgument];\n+      if (parentType instanceof ParameterizedType) {\n+        // The class definition has the actual types used for the type variables.\n+        // Find the matching actual type for the Type Variable used for the field.\n+        // For example, class Foo<A> { A a; }\n+        // new Foo<Integer>(); defines the actual type of A to be Integer.\n+        // So, to find the type of the field a, we will have to look at the class'\n+        // actual type arguments.\n+        TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;\n+        TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();\n+        ParameterizedType objParameterizedType = (ParameterizedType) parentType;\n+        int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);\n+        Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();\n+        return actualTypeArguments[indexOfActualTypeArgument];\n+      } else {\n+        throw new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType\n+            + \".\\n Are you missing the use of TypeToken idiom?\\n See \" \n+            + \"http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\");\n+      }\n     } else if (typeToEvaluate instanceof WildcardType) {\n       WildcardType castedType = (WildcardType) typeToEvaluate;\n       return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass);",
      "parent_sha": "5c6d5a0d119481e7ca61b0884c881c6811d7af86"
    }
  },
  {
    "oid": "6818edecf95ab35b05c3459a25b4df3eedc07e84",
    "message": "enabled GsonBuilder.registerTypeHierarchyAdapter since head is now for Gson 1.7",
    "date": "2010-11-25T00:16:06Z",
    "url": "https://github.com/google/gson/commit/6818edecf95ab35b05c3459a25b4df3eedc07e84",
    "details": {
      "sha": "9141318f075a638a09902ae133d1e62547cd042f",
      "filename": "gson/src/main/java/com/google/gson/GsonBuilder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/6818edecf95ab35b05c3459a25b4df3eedc07e84/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java",
      "raw_url": "https://github.com/google/gson/raw/6818edecf95ab35b05c3459a25b4df3eedc07e84/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java?ref=6818edecf95ab35b05c3459a25b4df3eedc07e84",
      "patch": "@@ -431,7 +431,7 @@ private <T> GsonBuilder registerDeserializer(Type typeOfT, JsonDeserializer<T> d\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n    * @since 1.7\n    */\n-  GsonBuilder registerTypeHierarchyAdapter(Class<?> baseType, Object typeAdapter) {\n+  public GsonBuilder registerTypeHierarchyAdapter(Class<?> baseType, Object typeAdapter) {\n     Preconditions.checkArgument(typeAdapter instanceof JsonSerializer<?>\n     || typeAdapter instanceof JsonDeserializer<?> || typeAdapter instanceof InstanceCreator<?>);\n     if (typeAdapter instanceof InstanceCreator<?>) {",
      "parent_sha": "e061d0e56387c7db2fa7a5b46f8b521311fe4e5d"
    }
  },
  {
    "oid": "de190d7ef5feb4950d5daca819a625b39f3fd2f5",
    "message": "Restructure code to avoid assignment expression warning. (#2833)\n\n* Restructure code to avoid assignment expression warning.",
    "date": "2025-04-01T16:58:47Z",
    "url": "https://github.com/google/gson/commit/de190d7ef5feb4950d5daca819a625b39f3fd2f5",
    "details": {
      "sha": "14ecd60fbe901f434875667382af387d634775ca",
      "filename": "gson/src/main/java/com/google/gson/internal/Excluder.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/google/gson/blob/de190d7ef5feb4950d5daca819a625b39f3fd2f5/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2FExcluder.java",
      "raw_url": "https://github.com/google/gson/raw/de190d7ef5feb4950d5daca819a625b39f3fd2f5/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2FExcluder.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2FExcluder.java?ref=de190d7ef5feb4950d5daca819a625b39f3fd2f5",
      "patch": "@@ -147,7 +147,10 @@ private TypeAdapter<T> delegate() {\n         // A race might lead to `delegate` being assigned by multiple threads but the last\n         // assignment will stick\n         TypeAdapter<T> d = delegate;\n-        return d != null ? d : (delegate = gson.getDelegateAdapter(Excluder.this, type));\n+        if (d == null) {\n+          d = delegate = gson.getDelegateAdapter(Excluder.this, type);\n+        }\n+        return d;\n       }\n     };\n   }",
      "parent_sha": "3d6684741e1086e589783e78a356293c6ea9f8d6"
    }
  },
  {
    "oid": "fc63a6af4c0b34e808b4b373d9f24ef72df42a04",
    "message": "Make sql module dependency transitive (#1500)",
    "date": "2019-03-29T16:34:12Z",
    "url": "https://github.com/google/gson/commit/fc63a6af4c0b34e808b4b373d9f24ef72df42a04",
    "details": {
      "sha": "ba6ea07b77d239a288004707d0a288cbe071e447",
      "filename": "gson/src/main/java/module-info.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/fc63a6af4c0b34e808b4b373d9f24ef72df42a04/gson%2Fsrc%2Fmain%2Fjava%2Fmodule-info.java",
      "raw_url": "https://github.com/google/gson/raw/fc63a6af4c0b34e808b4b373d9f24ef72df42a04/gson%2Fsrc%2Fmain%2Fjava%2Fmodule-info.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fmodule-info.java?ref=fc63a6af4c0b34e808b4b373d9f24ef72df42a04",
      "patch": "@@ -4,5 +4,5 @@\n \texports com.google.gson.reflect;\n \texports com.google.gson.stream;\n \n-\trequires java.sql;\n+\trequires transitive java.sql;\n }",
      "parent_sha": "5370b076e329444860b0ea0c7f33b10504281f27"
    }
  },
  {
    "oid": "44c93364c9347404e93cd6a3323201ceae6b2a43",
    "message": "Simplify equality checks using Objects.equals in PostConstructAdapterFactoryTest (#2767)",
    "date": "2024-10-21T13:37:12Z",
    "url": "https://github.com/google/gson/commit/44c93364c9347404e93cd6a3323201ceae6b2a43",
    "details": {
      "sha": "a46fa3089b46447230c62af18c3659294330247d",
      "filename": "extras/src/test/java/com/google/gson/typeadapters/PostConstructAdapterFactoryTest.java",
      "status": "modified",
      "additions": 5,
      "deletions": 13,
      "changes": 18,
      "blob_url": "https://github.com/google/gson/blob/44c93364c9347404e93cd6a3323201ceae6b2a43/extras%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ftypeadapters%2FPostConstructAdapterFactoryTest.java",
      "raw_url": "https://github.com/google/gson/raw/44c93364c9347404e93cd6a3323201ceae6b2a43/extras%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ftypeadapters%2FPostConstructAdapterFactoryTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/extras%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ftypeadapters%2FPostConstructAdapterFactoryTest.java?ref=44c93364c9347404e93cd6a3323201ceae6b2a43",
      "patch": "@@ -23,6 +23,7 @@\n import com.google.gson.GsonBuilder;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.Objects;\n import javax.annotation.PostConstruct;\n import org.junit.Test;\n \n@@ -89,13 +90,8 @@ public boolean equals(Object o) {\n         return false;\n       }\n       Sandwich other = (Sandwich) o;\n-      if (this.bread == null ? other.bread != null : !this.bread.equals(other.bread)) {\n-        return false;\n-      }\n-      if (this.cheese == null ? other.cheese != null : !this.cheese.equals(other.cheese)) {\n-        return false;\n-      }\n-      return true;\n+\n+      return Objects.equals(this.bread, other.bread) && Objects.equals(this.cheese, other.cheese);\n     }\n   }\n \n@@ -116,12 +112,8 @@ public boolean equals(Object o) {\n         return false;\n       }\n       MultipleSandwiches other = (MultipleSandwiches) o;\n-      if (this.sandwiches == null\n-          ? other.sandwiches != null\n-          : !this.sandwiches.equals(other.sandwiches)) {\n-        return false;\n-      }\n-      return true;\n+\n+      return Objects.equals(this.sandwiches, other.sandwiches);\n     }\n   }\n }",
      "parent_sha": "3e5ccb171a56b3278f7123638631b945ec52e5cb"
    }
  },
  {
    "oid": "714ac8e64399eb156abc4ce3e517185c098fb7e6",
    "message": "added tests for using intercept in fields and lists. These tests are currently failing.",
    "date": "2012-10-11T20:29:40Z",
    "url": "https://github.com/google/gson/commit/714ac8e64399eb156abc4ce3e517185c098fb7e6",
    "details": {
      "sha": "e1b60757518569e63ef6d8d3641bd22b97a13800",
      "filename": "gson/src/test/java/com/google/gson/functional/InterceptorTest.java",
      "status": "modified",
      "additions": 40,
      "deletions": 17,
      "changes": 57,
      "blob_url": "https://github.com/google/gson/blob/714ac8e64399eb156abc4ce3e517185c098fb7e6/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FInterceptorTest.java",
      "raw_url": "https://github.com/google/gson/raw/714ac8e64399eb156abc4ce3e517185c098fb7e6/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FInterceptorTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FInterceptorTest.java?ref=714ac8e64399eb156abc4ce3e517185c098fb7e6",
      "patch": "@@ -15,11 +15,15 @@\n  */\n package com.google.gson.functional;\n \n+import java.util.List;\n+\n import junit.framework.TestCase;\n \n import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n import com.google.gson.internal.alpha.Intercept;\n import com.google.gson.internal.alpha.JsonPostDeserializer;\n+import com.google.gson.reflect.TypeToken;\n \n /**\n  * Unit tests for {@link Intercept} and {@link JsonPostDeserializer}.\n@@ -36,29 +40,48 @@ public void setUp() throws Exception {\n     this.gson = new Gson();\n   }\n \n-  public void testPostDeserialize() {\n-    MyObject target = gson.fromJson(\"{}\", MyObject.class);\n-    assertEquals(MyObject.DEFAULT_VALUE, target.value);\n-    assertEquals(MyObject.DEFAULT_MESSAGE, target.message);\n+  public void testExceptionsPropagated() {\n+    try {\n+      gson.fromJson(\"{}\", User.class);\n+      fail();\n+    } catch (JsonParseException expected) {}\n   }\n \n-  @Intercept(postDeserialize = MyObjectInterceptor.class)\n-  private static final class MyObject {\n-    static final int DEFAULT_VALUE = 10;\n-    static final String DEFAULT_MESSAGE = \"hello\";\n+  public void testPostDeserializeTopLevelClass() {\n+    User user = gson.fromJson(\"{name:'bob',password:'pwd'}\", User.class);\n+    assertEquals(User.DEFAULT_EMAIL, user.email);\n+  }\n \n-    int value = 0;\n-    String message = null;\n+  public void testPostDeserializeList() {\n+    List<User> list = gson.fromJson(\"[{name:'bob',password:'pwd'}]\", new TypeToken<List<User>>(){}.getType());\n+    User user = list.get(0);\n+    assertEquals(User.DEFAULT_EMAIL, user.email);\n   }\n \n-  private static final class MyObjectInterceptor implements JsonPostDeserializer<MyObject> {\n-    public void postDeserialize(MyObject o) {\n-      if (o.value == 0) {\n-        o.value = MyObject.DEFAULT_VALUE;\n-      }\n-      if (o.message == null) {\n-        o.message = MyObject.DEFAULT_MESSAGE;\n+  public void testPostDeserializeField() {\n+    UserGroup userGroup = gson.fromJson(\"{user:{name:'bob',password:'pwd'}}\", UserGroup.class);\n+    assertEquals(User.DEFAULT_EMAIL, userGroup.user.email);\n+  }\n+\n+  private static final class UserGroup {\n+    User user;\n+    String city;\n+  }\n+\n+  @Intercept(postDeserialize = UserValidator.class)\n+  private static final class User {\n+    static final String DEFAULT_EMAIL = \"invalid@invalid.com\";\n+    String name;\n+    String password;\n+    String email;\n+  }\n+\n+  private static final class UserValidator implements JsonPostDeserializer<User> {\n+    public void postDeserialize(User user) {\n+      if (user.name == null || user.password == null) {\n+        throw new JsonParseException(\"name and password are required fields.\");\n       }\n+      if (user.email == null) user.email = User.DEFAULT_EMAIL;\n     }\n   }\n }\n\\ No newline at end of file",
      "parent_sha": "c25278b4d6036a0e0ae758b13194813936d9e911"
    }
  },
  {
    "oid": "f406d3cf89e23f87a100e9a6cf46bd9aae6823fa",
    "message": "Don't fall back when we're already in the slow case.",
    "date": "2012-07-10T23:45:20Z",
    "url": "https://github.com/google/gson/commit/f406d3cf89e23f87a100e9a6cf46bd9aae6823fa",
    "details": {
      "sha": "7ee77988ea5f743608653901a5884ffcec21c5fe",
      "filename": "gson/src/main/java/com/google/gson/internal/StringMap.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/f406d3cf89e23f87a100e9a6cf46bd9aae6823fa/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2FStringMap.java",
      "raw_url": "https://github.com/google/gson/raw/f406d3cf89e23f87a100e9a6cf46bd9aae6823fa/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2FStringMap.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2FStringMap.java?ref=f406d3cf89e23f87a100e9a6cf46bd9aae6823fa",
      "patch": "@@ -168,7 +168,7 @@ private LinkedEntry<V> getEntry(String key) {\n      * If we suffer a very large number of collisions, fall back from the cached\n      * String.hashCode() to an (uncached) hash code that isn't predictable.\n      */\n-    if (collisionCount >= MAX_COLLISIONS) {\n+    if (useFastHash && collisionCount >= MAX_COLLISIONS) {\n       LinkedEntry<V> entry = header.nxt;\n \n       // clear the table",
      "parent_sha": "4aaa4bf20c43807ee78ab7e58e2e430e195647f8"
    }
  },
  {
    "oid": "22c835f2bcd5ee39fd58556e01324f334c5f0cb7",
    "message": "Fix compile warnings",
    "date": "2012-10-23T02:40:14Z",
    "url": "https://github.com/google/gson/commit/22c835f2bcd5ee39fd58556e01324f334c5f0cb7",
    "details": {
      "sha": "da1bf437eae48be925df8f8ad51ea4b414a40a42",
      "filename": "gson/src/main/java/com/google/gson/Gson.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/google/gson/blob/22c835f2bcd5ee39fd58556e01324f334c5f0cb7/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "raw_url": "https://github.com/google/gson/raw/22c835f2bcd5ee39fd58556e01324f334c5f0cb7/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java?ref=22c835f2bcd5ee39fd58556e01324f334c5f0cb7",
      "patch": "@@ -795,9 +795,9 @@ public <T> T fromJson(JsonReader reader, Type typeOfT) throws JsonIOException, J\n       reader.peek();\n       isEmpty = false;\n       TypeToken<T> typeToken = (TypeToken<T>) TypeToken.get(typeOfT);\n-      TypeAdapter<T> typeAdapter = (TypeAdapter<T>) getAdapter(typeToken);\n+      TypeAdapter<T> typeAdapter = getAdapter(typeToken);\n       T object = typeAdapter.read(reader);\n-      invokeInterceptorIfNeeded(object, typeToken.getRawType());\n+      invokeInterceptorIfNeeded(object, (Class<T>) typeToken.getRawType());\n       return object;\n     } catch (EOFException e) {\n       /*\n@@ -890,10 +890,10 @@ public void setDelegate(TypeAdapter<T> typeAdapter) {\n     }\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n   private <T> void invokeInterceptorIfNeeded(T object, Type type) {\n-    @SuppressWarnings(\"unchecked\")\n     TypeToken<T> typeToken = (TypeToken<T>) TypeToken.get(type);\n-    Class<? super T> clazz = typeToken.getRawType();\n+    Class<T> clazz = (Class<T>) typeToken.getRawType();\n     invokeInterceptorIfNeeded(object, clazz);\n   }\n ",
      "parent_sha": "fd4fbe41322c39329245b6a1311ae42bd10827ad"
    }
  },
  {
    "oid": "ad1c1a731d4a2f4fb11fa057521179a3b24bb757",
    "message": "Added more tests in response to Issue 70.",
    "date": "2008-11-14T22:11:12Z",
    "url": "https://github.com/google/gson/commit/ad1c1a731d4a2f4fb11fa057521179a3b24bb757",
    "details": {
      "sha": "ab8d381ab8e52c93a354ab0d2da1360ad7ee9382",
      "filename": "gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
      "status": "modified",
      "additions": 32,
      "deletions": 4,
      "changes": 36,
      "blob_url": "https://github.com/google/gson/blob/ad1c1a731d4a2f4fb11fa057521179a3b24bb757/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FCustomTypeAdaptersTest.java",
      "raw_url": "https://github.com/google/gson/raw/ad1c1a731d4a2f4fb11fa057521179a3b24bb757/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FCustomTypeAdaptersTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FCustomTypeAdaptersTest.java?ref=ad1c1a731d4a2f4fb11fa057521179a3b24bb757",
      "patch": "@@ -33,7 +33,9 @@\n import junit.framework.TestCase;\n \n import java.lang.reflect.Type;\n+import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.Map;\n import java.util.Set;\n \n /**\n@@ -300,7 +302,7 @@ public void testCustomAdapterInvokedForCollectionElementSerialization() {\n     StringHolder holder = new StringHolder(\"Jacob\", \"Tomaw\");\n     Set<StringHolder> setOfHolders = new HashSet<StringHolder>();\n     setOfHolders.add(holder);\n-    String json = gson.toJson(holder);\n+    String json = gson.toJson(setOfHolders);\n     assertTrue(json.contains(\"Jacob:Tomaw\"));\n   }\n \n@@ -310,9 +312,35 @@ public void testCustomAdapterInvokedForCollectionElementDeserialization() {\n       .registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter())\n       .create();\n     Type setType = new TypeToken<Set<StringHolder>>() {}.getType();\n-    Set<StringHolder> setOfFoo = gson.fromJson(\"['Jacob:Tomaw']\", setType);\n-    assertEquals(1, setOfFoo.size());\n-    StringHolder foo = setOfFoo.iterator().next();\n+    Set<StringHolder> setOfHolders = gson.fromJson(\"['Jacob:Tomaw']\", setType);\n+    assertEquals(1, setOfHolders.size());\n+    StringHolder foo = setOfHolders.iterator().next();\n+    assertEquals(\"Jacob\", foo.part1);\n+    assertEquals(\"Tomaw\", foo.part2);\n+  }\n+  \n+  // Test created from Issue 70\n+  public void testCustomAdapterInvokedForMapElementSerialization() {\n+    Gson gson = new GsonBuilder()\n+      .registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter())\n+      .create();\n+    Type mapType = new TypeToken<Map<String,StringHolder>>() {}.getType();\n+    StringHolder holder = new StringHolder(\"Jacob\", \"Tomaw\");\n+    Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>();\n+    mapOfHolders.put(\"foo\", holder);\n+    String json = gson.toJson(mapOfHolders);\n+    assertTrue(json.contains(\"\\\"foo\\\":\\\"Jacob:Tomaw\\\"\"));\n+  }\n+\n+  // Test created from Issue 70\n+  public void testCustomAdapterInvokedForMapElementDeserialization() {\n+    Gson gson = new GsonBuilder()\n+      .registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter())\n+      .create();\n+    Type mapType = new TypeToken<Map<String, StringHolder>>() {}.getType();\n+    Map<String, StringHolder> mapOfFoo = gson.fromJson(\"{'foo':'Jacob:Tomaw'}\", mapType);\n+    assertEquals(1, mapOfFoo.size());\n+    StringHolder foo = mapOfFoo.get(\"foo\");\n     assertEquals(\"Jacob\", foo.part1);\n     assertEquals(\"Tomaw\", foo.part2);\n   }",
      "parent_sha": "dfad0a3612a1753cb595dd41e6b1de8263536fef"
    }
  },
  {
    "oid": "b489f4fb01ad2558319bde03fcf3103ede56d193",
    "message": "marked default type adapters as final classes",
    "date": "2011-03-11T22:20:39Z",
    "url": "https://github.com/google/gson/commit/b489f4fb01ad2558319bde03fcf3103ede56d193",
    "details": {
      "sha": "211eceb7d222ee13a0be2b573c278f200d0639ea",
      "filename": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
      "status": "modified",
      "additions": 33,
      "deletions": 33,
      "changes": 66,
      "blob_url": "https://github.com/google/gson/blob/b489f4fb01ad2558319bde03fcf3103ede56d193/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FDefaultTypeAdapters.java",
      "raw_url": "https://github.com/google/gson/raw/b489f4fb01ad2558319bde03fcf3103ede56d193/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FDefaultTypeAdapters.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FDefaultTypeAdapters.java?ref=b489f4fb01ad2558319bde03fcf3103ede56d193",
      "patch": "@@ -287,7 +287,7 @@ static ParameterizedTypeHandlerMap<InstanceCreator<?>> getDefaultInstanceCreator\n     return DEFAULT_INSTANCE_CREATORS;\n   }\n \n-  static class DefaultDateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {\n+  static final class DefaultDateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {\n     private final DateFormat enUsFormat;\n     private final DateFormat localFormat;\n     private final DateFormat iso8601Format;\n@@ -310,7 +310,7 @@ public DefaultDateTypeAdapter(int dateStyle, int timeStyle) {\n           DateFormat.getDateTimeInstance(dateStyle, timeStyle));\n     }\n \n-    public DefaultDateTypeAdapter(DateFormat enUsFormat, DateFormat localFormat) {\n+    DefaultDateTypeAdapter(DateFormat enUsFormat, DateFormat localFormat) {\n       this.enUsFormat = enUsFormat;\n       this.localFormat = localFormat;\n       this.iso8601Format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.US);\n@@ -357,7 +357,7 @@ public String toString() {\n     }\n   }\n \n-  static class DefaultJavaSqlDateTypeAdapter implements JsonSerializer<java.sql.Date>,\n+  static final class DefaultJavaSqlDateTypeAdapter implements JsonSerializer<java.sql.Date>,\n       JsonDeserializer<java.sql.Date> {\n     private final DateFormat format;\n     DefaultJavaSqlDateTypeAdapter() {\n@@ -388,15 +388,15 @@ public java.sql.Date deserialize(JsonElement json, Type typeOfT,\n     }\n   }\n \n-  static class DefaultTimestampDeserializer implements JsonDeserializer<Timestamp> {\n+  static final class DefaultTimestampDeserializer implements JsonDeserializer<Timestamp> {\n     public Timestamp deserialize(JsonElement json, Type typeOfT,\n         JsonDeserializationContext context) throws JsonParseException {\n       Date date = context.deserialize(json, Date.class);\n       return new Timestamp(date.getTime());\n     }\n   }\n \n-  static class DefaultTimeTypeAdapter implements JsonSerializer<Time>, JsonDeserializer<Time> {\n+  static final class DefaultTimeTypeAdapter implements JsonSerializer<Time>, JsonDeserializer<Time> {\n     private final DateFormat format;\n     DefaultTimeTypeAdapter() {\n       this.format = new SimpleDateFormat(\"hh:mm:ss a\");\n@@ -423,7 +423,7 @@ public Time deserialize(JsonElement json, Type typeOfT, JsonDeserializationConte\n     }\n   }\n \n-  private static class GregorianCalendarTypeAdapter\n+  private static final class GregorianCalendarTypeAdapter\n       implements JsonSerializer<GregorianCalendar>, JsonDeserializer<GregorianCalendar> {\n \n     private static final String YEAR = \"year\";\n@@ -463,7 +463,7 @@ public String toString() {\n     }\n   }\n \n-  static class DefaultInetAddressAdapter\n+  static final class DefaultInetAddressAdapter\n       implements JsonDeserializer<InetAddress>, JsonSerializer<InetAddress> {\n \n     public InetAddress deserialize(JsonElement json, Type typeOfT,\n@@ -482,7 +482,7 @@ public JsonElement serialize(InetAddress src, Type typeOfSrc,\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  private static class EnumTypeAdapter<T extends Enum<T>>\n+  private static final class EnumTypeAdapter<T extends Enum<T>>\n       implements JsonSerializer<T>, JsonDeserializer<T> {\n     public JsonElement serialize(T src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.name());\n@@ -500,7 +500,7 @@ public String toString() {\n     }\n   }\n \n-  private static class UrlTypeAdapter implements JsonSerializer<URL>, JsonDeserializer<URL> {\n+  private static final class UrlTypeAdapter implements JsonSerializer<URL>, JsonDeserializer<URL> {\n     public JsonElement serialize(URL src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.toExternalForm());\n     }\n@@ -520,7 +520,7 @@ public String toString() {\n     }\n   }\n \n-  private static class UriTypeAdapter implements JsonSerializer<URI>, JsonDeserializer<URI> {\n+  private static final class UriTypeAdapter implements JsonSerializer<URI>, JsonDeserializer<URI> {\n     public JsonElement serialize(URI src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.toASCIIString());\n     }\n@@ -538,7 +538,7 @@ public String toString() {\n     }\n   }\n \n-  private static class UuidTypeAdapter implements JsonSerializer<UUID>, JsonDeserializer<UUID> {\n+  private static final class UuidTypeAdapter implements JsonSerializer<UUID>, JsonDeserializer<UUID> {\n     public JsonElement serialize(UUID src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.toString());\n     }\n@@ -554,7 +554,7 @@ public String toString() {\n     }\n   }\n \n-  private static class LocaleTypeAdapter\n+  private static final class LocaleTypeAdapter\n       implements JsonSerializer<Locale>, JsonDeserializer<Locale> {\n     public JsonElement serialize(Locale src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.toString());\n@@ -592,7 +592,7 @@ public String toString() {\n   }\n \n   @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-  private static class CollectionTypeAdapter implements JsonSerializer<Collection>,\n+  private static final class CollectionTypeAdapter implements JsonSerializer<Collection>,\n       JsonDeserializer<Collection>, InstanceCreator<Collection> {\n     public JsonElement serialize(Collection src, Type typeOfSrc, JsonSerializationContext context) {\n       if (src == null) {\n@@ -656,7 +656,7 @@ public Properties createInstance(Type type) {\n   }\n \n   @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-  static class MapTypeAdapter implements JsonSerializer<Map>, JsonDeserializer<Map>,\n+  static final class MapTypeAdapter implements JsonSerializer<Map>, JsonDeserializer<Map>,\n       InstanceCreator<Map> {\n \n     public JsonElement serialize(Map src, Type typeOfSrc, JsonSerializationContext context) {\n@@ -713,7 +713,7 @@ public String toString() {\n     }\n   }\n \n-  private static class BigDecimalTypeAdapter\n+  private static final class BigDecimalTypeAdapter\n       implements JsonSerializer<BigDecimal>, JsonDeserializer<BigDecimal> {\n     public JsonElement serialize(BigDecimal src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n@@ -738,7 +738,7 @@ public String toString() {\n     }\n   }\n \n-  private static class BigIntegerTypeAdapter\n+  private static final class BigIntegerTypeAdapter\n       implements JsonSerializer<BigInteger>, JsonDeserializer<BigInteger> {\n \n     public JsonElement serialize(BigInteger src, Type typeOfSrc, JsonSerializationContext context) {\n@@ -764,7 +764,7 @@ public String toString() {\n     }\n   }\n \n-  private static class NumberTypeAdapter\n+  private static final class NumberTypeAdapter\n       implements JsonSerializer<Number>, JsonDeserializer<Number> {\n     public JsonElement serialize(Number src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n@@ -789,7 +789,7 @@ public String toString() {\n     }\n   }\n \n-  private static class LongSerializer implements JsonSerializer<Long> {\n+  private static final class LongSerializer implements JsonSerializer<Long> {\n     private final LongSerializationPolicy longSerializationPolicy;\n \n     private LongSerializer(LongSerializationPolicy longSerializationPolicy) {\n@@ -806,7 +806,7 @@ public String toString() {\n     }\n   }\n \n-  private static class LongDeserializer implements JsonDeserializer<Long> {\n+  private static final class LongDeserializer implements JsonDeserializer<Long> {\n     public Long deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       try {\n@@ -826,7 +826,7 @@ public String toString() {\n     }\n   }\n \n-  private static class IntegerTypeAdapter\n+  private static final class IntegerTypeAdapter\n       implements JsonSerializer<Integer>, JsonDeserializer<Integer> {\n     public JsonElement serialize(Integer src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n@@ -851,7 +851,7 @@ public String toString() {\n     }\n   }\n \n-  private static class ShortTypeAdapter\n+  private static final class ShortTypeAdapter\n       implements JsonSerializer<Short>, JsonDeserializer<Short> {\n     public JsonElement serialize(Short src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n@@ -876,7 +876,7 @@ public String toString() {\n     }\n   }\n \n-  private static class ByteTypeAdapter implements JsonSerializer<Byte>, JsonDeserializer<Byte> {\n+  private static final class ByteTypeAdapter implements JsonSerializer<Byte>, JsonDeserializer<Byte> {\n     public JsonElement serialize(Byte src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n     }\n@@ -900,7 +900,7 @@ public String toString() {\n     }\n   }\n \n-  static class FloatSerializer implements JsonSerializer<Float> {\n+  static final class FloatSerializer implements JsonSerializer<Float> {\n     private final boolean serializeSpecialFloatingPointValues;\n \n     FloatSerializer(boolean serializeSpecialDoubleValues) {\n@@ -919,7 +919,7 @@ public JsonElement serialize(Float src, Type typeOfSrc, JsonSerializationContext\n     }\n   }\n \n-  private static class FloatDeserializer implements JsonDeserializer<Float> {\n+  private static final class FloatDeserializer implements JsonDeserializer<Float> {\n     public Float deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       try {\n@@ -939,7 +939,7 @@ public String toString() {\n     }\n   }\n \n-  static class DoubleSerializer implements JsonSerializer<Double> {\n+  static final class DoubleSerializer implements JsonSerializer<Double> {\n     private final boolean serializeSpecialFloatingPointValues;\n \n     DoubleSerializer(boolean serializeSpecialDoubleValues) {\n@@ -958,7 +958,7 @@ public JsonElement serialize(Double src, Type typeOfSrc, JsonSerializationContex\n     }\n   }\n \n-  private static class DoubleDeserializer implements JsonDeserializer<Double> {\n+  private static final class DoubleDeserializer implements JsonDeserializer<Double> {\n     public Double deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       try {\n@@ -978,7 +978,7 @@ public String toString() {\n     }\n   }\n \n-  private static class CharacterTypeAdapter\n+  private static final class CharacterTypeAdapter\n       implements JsonSerializer<Character>, JsonDeserializer<Character> {\n     public JsonElement serialize(Character src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n@@ -995,7 +995,7 @@ public String toString() {\n     }\n   }\n \n-  private static class StringTypeAdapter\n+  private static final class StringTypeAdapter\n       implements JsonSerializer<String>, JsonDeserializer<String> {\n     public JsonElement serialize(String src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n@@ -1012,7 +1012,7 @@ public String toString() {\n     }\n   }\n \n-  private static class StringBuilderTypeAdapter\n+  private static final class StringBuilderTypeAdapter\n       implements JsonSerializer<StringBuilder>, JsonDeserializer<StringBuilder> {\n     public JsonElement serialize(StringBuilder src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.toString());\n@@ -1029,7 +1029,7 @@ public String toString() {\n     }\n   }\n \n-  private static class StringBufferTypeAdapter\n+  private static final class StringBufferTypeAdapter\n       implements JsonSerializer<StringBuffer>, JsonDeserializer<StringBuffer> {\n     public JsonElement serialize(StringBuffer src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src.toString());\n@@ -1046,7 +1046,7 @@ public String toString() {\n     }\n   }\n \n-  private static class BooleanTypeAdapter\n+  private static final class BooleanTypeAdapter\n       implements JsonSerializer<Boolean>, JsonDeserializer<Boolean> {\n     public JsonElement serialize(Boolean src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n@@ -1069,7 +1069,7 @@ public String toString() {\n     }\n   }\n \n-  private static class TreeSetCreator implements InstanceCreator<TreeSet<?>> {\n+  private static final class TreeSetCreator implements InstanceCreator<TreeSet<?>> {\n     public TreeSet<?> createInstance(Type type) {\n       return new TreeSet<Object>();\n     }\n@@ -1079,7 +1079,7 @@ public String toString() {\n     }\n   }\n \n-  private static class HashSetCreator implements InstanceCreator<HashSet<?>> {\n+  private static final class HashSetCreator implements InstanceCreator<HashSet<?>> {\n     public HashSet<?> createInstance(Type type) {\n       return new HashSet<Object>();\n     }",
      "parent_sha": "e26a6d5c187228d5f8152db6a8cbbd157a28b0a5"
    }
  },
  {
    "oid": "e96b241556feb92977f7ca274ef59204258227a6",
    "message": "Test that we can serialize classes whose fields are concrete collections.",
    "date": "2011-03-21T21:49:38Z",
    "url": "https://github.com/google/gson/commit/e96b241556feb92977f7ca274ef59204258227a6",
    "details": {
      "sha": "0411a90288a58d9cfe069fdb27c4aeb8c0d66c81",
      "filename": "gson/src/test/java/com/google/gson/functional/CollectionTest.java",
      "status": "modified",
      "additions": 32,
      "deletions": 20,
      "changes": 52,
      "blob_url": "https://github.com/google/gson/blob/e96b241556feb92977f7ca274ef59204258227a6/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FCollectionTest.java",
      "raw_url": "https://github.com/google/gson/raw/e96b241556feb92977f7ca274ef59204258227a6/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FCollectionTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FCollectionTest.java?ref=e96b241556feb92977f7ca274ef59204258227a6",
      "patch": "@@ -21,9 +21,6 @@\n import com.google.gson.common.MoreAsserts;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n import com.google.gson.reflect.TypeToken;\n-\n-import junit.framework.TestCase;\n-\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -35,6 +32,7 @@\n import java.util.List;\n import java.util.Queue;\n import java.util.Set;\n+import junit.framework.TestCase;\n \n /**\n  * Functional tests for Json serialization and deserialization of collections.\n@@ -82,7 +80,7 @@ public void testTopLevelListOfIntegerCollectionsDeserialization() throws Excepti\n       MoreAsserts.assertEquals(expected[i], toIntArray(target.get(i)));\n     }\n   }\n-  \n+\n   public void testLinkedListSerialization() {\n     List<String> list = new LinkedList<String>();\n     list.add(\"a1\");\n@@ -115,7 +113,7 @@ public void testQueueDeserialization() {\n     String json = \"['a1','a2']\";\n     Type queueType = new TypeToken<Queue<String>>() {}.getType();\n     Queue<String> queue = gson.fromJson(json, queueType);\n-    assertEquals(\"a1\", queue.element()); \n+    assertEquals(\"a1\", queue.element());\n     queue.remove();\n     assertEquals(\"a2\", queue.element());\n   }\n@@ -149,18 +147,18 @@ public void testCollectionOfObjectSerialization() {\n     target.add(\"Hello\");\n     target.add(\"World\");\n     assertEquals(\"[\\\"Hello\\\",\\\"World\\\"]\", gson.toJson(target));\n-    \n+\n     Type type = new TypeToken<List<Object>>() {}.getType();\n     assertEquals(\"[\\\"Hello\\\",\\\"World\\\"]\", gson.toJson(target, type));\n   }\n-  \n+\n   public void testCollectionOfObjectWithNullSerialization() {\n     List<Object> target = new ArrayList<Object>();\n     target.add(\"Hello\");\n     target.add(null);\n     target.add(\"World\");\n     assertEquals(\"[\\\"Hello\\\",null,\\\"World\\\"]\", gson.toJson(target));\n-    \n+\n     Type type = new TypeToken<List<Object>>() {}.getType();\n     assertEquals(\"[\\\"Hello\\\",null,\\\"World\\\"]\", gson.toJson(target, type));\n   }\n@@ -237,17 +235,17 @@ public void testRawCollectionOfBagOfPrimitivesNotAllowed() {\n     } catch (JsonParseException expected) {\n     }\n   }\n-  \n+\n   public void testWildcardPrimitiveCollectionSerilaization() throws Exception {\n     Collection<? extends Integer> target = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\n     Type collectionType = new TypeToken<Collection<? extends Integer>>() { }.getType();\n     String json = gson.toJson(target, collectionType);\n     assertEquals(\"[1,2,3,4,5,6,7,8,9]\", json);\n-    \n+\n     json = gson.toJson(target);\n     assertEquals(\"[1,2,3,4,5,6,7,8,9]\", json);\n   }\n-  \n+\n   public void testWildcardPrimitiveCollectionDeserilaization() throws Exception {\n     String json = \"[1,2,3,4,5,6,7,8,9]\";\n     Type collectionType = new TypeToken<Collection<? extends Integer>>() { }.getType();\n@@ -256,26 +254,40 @@ public void testWildcardPrimitiveCollectionDeserilaization() throws Exception {\n     assertTrue(target.contains(1));\n     assertTrue(target.contains(9));\n   }\n-  \n+\n   public void testWildcardCollectionField() throws Exception {\n     Collection<BagOfPrimitives> collection = new ArrayList<BagOfPrimitives>();\n     BagOfPrimitives objA = new BagOfPrimitives(3L, 1, true, \"blah\");\n     BagOfPrimitives objB = new BagOfPrimitives(2L, 6, false, \"blahB\");\n     collection.add(objA);\n     collection.add(objB);\n-    \n+\n     ObjectWithWildcardCollection target = new ObjectWithWildcardCollection(collection);\n     String json = gson.toJson(target);\n     assertTrue(json.contains(objA.getExpectedJson()));\n     assertTrue(json.contains(objB.getExpectedJson()));\n-    \n+\n     target = gson.fromJson(json, ObjectWithWildcardCollection.class);\n     Collection<? extends BagOfPrimitives> deserializedCollection = target.getCollection();\n     assertEquals(2, deserializedCollection.size());\n     assertTrue(deserializedCollection.contains(objA));\n     assertTrue(deserializedCollection.contains(objB));\n   }\n \n+  public void testFieldIsArrayList() {\n+    HasArrayListField object = new HasArrayListField();\n+    object.longs.add(1L);\n+    object.longs.add(3L);\n+    String json = gson.toJson(object, HasArrayListField.class);\n+    assertEquals(\"{\\\"longs\\\":[1,3]}\", json);\n+    HasArrayListField copy = gson.fromJson(\"{\\\"longs\\\":[1,3]}\", HasArrayListField.class);\n+    assertEquals(Arrays.asList(1L, 3L), copy.longs);\n+  }\n+\n+  static class HasArrayListField {\n+    ArrayList<Long> longs = new ArrayList<Long>();\n+  }\n+\n   @SuppressWarnings(\"unchecked\")\n   private static int[] toIntArray(Collection collection) {\n     int[] ints = new int[collection.size()];\n@@ -299,16 +311,16 @@ private static class ObjectWithWildcardCollection {\n     public ObjectWithWildcardCollection() {\n       this(Collections.EMPTY_LIST);\n     }\n-    \n+\n     public ObjectWithWildcardCollection(Collection<? extends BagOfPrimitives> collection) {\n       this.collection = collection;\n     }\n-    \n+\n     public Collection<? extends BagOfPrimitives> getCollection() {\n       return collection;\n     }\n   }\n-  \n+\n   private static class Entry {\n     int value;\n     // For use by Gson\n@@ -321,16 +333,16 @@ private Entry() {\n     }\n   }\n   public void testSetSerialization() {\n-    Set<Entry> set = new HashSet<Entry>(); \n+    Set<Entry> set = new HashSet<Entry>();\n     set.add(new Entry(1));\n-    set.add(new Entry(2));    \n+    set.add(new Entry(2));\n     String json = gson.toJson(set);\n     assertTrue(json.contains(\"1\"));\n     assertTrue(json.contains(\"2\"));\n   }\n   public void testSetDeserialization() {\n     String json = \"[{value:1},{value:2}]\";\n-    Type type = new TypeToken<Set<Entry>>() {}.getType();        \n+    Type type = new TypeToken<Set<Entry>>() {}.getType();\n     Set<Entry> set = gson.fromJson(json, type);\n     assertEquals(2, set.size());\n     for (Entry entry : set) {",
      "parent_sha": "279c0e87edffe9ec675c37c8405f3add06879b36"
    }
  },
  {
    "oid": "9eb04414c0a7f201d039cdbf9a9ebc4144990d3f",
    "message": "Improve InternationalizationTest (#1705)\n\n* Improve InternationalizationTest\r\n\r\n- Remove \"raw\" tests since after compiling they are the same as the one with\r\n  escape sequences\r\n- Add tests for supplementary code points (> \\uFFFF)\r\n\r\n* Improve variable names, fix incorrect escape sequences",
    "date": "2022-08-07T23:00:35Z",
    "url": "https://github.com/google/gson/commit/9eb04414c0a7f201d039cdbf9a9ebc4144990d3f",
    "details": {
      "sha": "bdf6ea6e839f343ad23e27c94fda114ffef3fc7b",
      "filename": "gson/src/test/java/com/google/gson/functional/InternationalizationTest.java",
      "status": "modified",
      "additions": 23,
      "deletions": 19,
      "changes": 42,
      "blob_url": "https://github.com/google/gson/blob/9eb04414c0a7f201d039cdbf9a9ebc4144990d3f/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FInternationalizationTest.java",
      "raw_url": "https://github.com/google/gson/raw/9eb04414c0a7f201d039cdbf9a9ebc4144990d3f/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FInternationalizationTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FInternationalizationTest.java?ref=9eb04414c0a7f201d039cdbf9a9ebc4144990d3f",
      "patch": "@@ -17,7 +17,6 @@\n package com.google.gson.functional;\r\n \r\n import com.google.gson.Gson;\r\n-\r\n import junit.framework.TestCase;\r\n \r\n /**\r\n@@ -34,32 +33,16 @@ protected void setUp() throws Exception {\n     gson = new Gson();\r\n   }\r\n \r\n-  /*\r\n-  public void testStringsWithRawChineseCharactersSerialization() throws Exception {\r\n-    String target = \"\u597d\u597d\u597d\";\r\n-    String json = gson.toJson(target);\r\n-    String expected = \"\\\"\\\\u597d\\\\u597d\\\\u597d\\\"\";\r\n-    assertEquals(expected, json);\r\n-  }\r\n-  */\r\n-\r\n-  public void testStringsWithRawChineseCharactersDeserialization() throws Exception {\r\n-    String expected = \"\u597d\u597d\u597d\";\r\n-    String json = \"\\\"\" + expected + \"\\\"\";\r\n-    String actual = gson.fromJson(json, String.class);\r\n-    assertEquals(expected, actual);\r\n-  }\r\n-\r\n   public void testStringsWithUnicodeChineseCharactersSerialization() throws Exception {\r\n     String target = \"\\u597d\\u597d\\u597d\";\r\n     String json = gson.toJson(target);\r\n-    String expected = \"\\\"\\u597d\\u597d\\u597d\\\"\";\r\n+    String expected = '\"' + target + '\"';\r\n     assertEquals(expected, json);\r\n   }\r\n \r\n   public void testStringsWithUnicodeChineseCharactersDeserialization() throws Exception {\r\n     String expected = \"\\u597d\\u597d\\u597d\";\r\n-    String json = \"\\\"\" + expected + \"\\\"\";\r\n+    String json = '\"' + expected + '\"';\r\n     String actual = gson.fromJson(json, String.class);\r\n     assertEquals(expected, actual);\r\n   }\r\n@@ -68,4 +51,25 @@ public void testStringsWithUnicodeChineseCharactersEscapedDeserialization() thro\n     String actual = gson.fromJson(\"'\\\\u597d\\\\u597d\\\\u597d'\", String.class);\r\n     assertEquals(\"\\u597d\\u597d\\u597d\", actual);\r\n   }\r\n+\r\n+  public void testSupplementaryUnicodeSerialization() throws Exception {\r\n+    // Supplementary code point U+1F60A\r\n+    String supplementaryCodePoint = new String(new int[] {0x1F60A}, 0, 1);\r\n+    String json = gson.toJson(supplementaryCodePoint);\r\n+    assertEquals('\"' + supplementaryCodePoint + '\"', json);\r\n+  }\r\n+\r\n+  public void testSupplementaryUnicodeDeserialization() throws Exception {\r\n+    // Supplementary code point U+1F60A\r\n+    String supplementaryCodePoint = new String(new int[] {0x1F60A}, 0, 1);\r\n+    String actual = gson.fromJson('\"' + supplementaryCodePoint + '\"', String.class);\r\n+    assertEquals(supplementaryCodePoint, actual);\r\n+  }\r\n+\r\n+  public void testSupplementaryUnicodeEscapedDeserialization() throws Exception {\r\n+    // Supplementary code point U+1F60A\r\n+    String supplementaryCodePoint = new String(new int[] {0x1F60A}, 0, 1);\r\n+    String actual = gson.fromJson(\"\\\"\\\\uD83D\\\\uDE0A\\\"\", String.class);\r\n+    assertEquals(supplementaryCodePoint, actual);\r\n+  }\r\n }\r",
      "parent_sha": "76c78f5925ec80434cbbd28332f841f74fee3275"
    }
  },
  {
    "oid": "5848096f3e1f36c038f522a3d7d6b9e3b553cf8e",
    "message": "Size allocation of StringBuilder (#1047)\n\nSize allocation of StringBuilder",
    "date": "2017-05-24T22:49:09Z",
    "url": "https://github.com/google/gson/commit/5848096f3e1f36c038f522a3d7d6b9e3b553cf8e",
    "details": {
      "sha": "e0799d736c9bfacb58ae5ddd44d401bec6032e56",
      "filename": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
      "status": "modified",
      "additions": 6,
      "deletions": 11,
      "changes": 17,
      "blob_url": "https://github.com/google/gson/blob/5848096f3e1f36c038f522a3d7d6b9e3b553cf8e/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fstream%2FJsonReader.java",
      "raw_url": "https://github.com/google/gson/raw/5848096f3e1f36c038f522a3d7d6b9e3b553cf8e/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fstream%2FJsonReader.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fstream%2FJsonReader.java?ref=5848096f3e1f36c038f522a3d7d6b9e3b553cf8e",
      "patch": "@@ -1077,7 +1077,7 @@ private String nextUnquotedValue() throws IOException {\n \n       // use a StringBuilder when the value is too long. This is too long to be a number!\n       if (builder == null) {\n-        builder = new StringBuilder();\n+        builder = new StringBuilder(Math.max(i,16));\n       }\n       builder.append(buffer, pos, i);\n       pos += i;\n@@ -1086,14 +1086,8 @@ private String nextUnquotedValue() throws IOException {\n         break;\n       }\n     }\n-\n-    String result;\n-    if (builder == null) {\n-      result = new String(buffer, pos, i);\n-    } else {\n-      builder.append(buffer, pos, i);\n-      result = builder.toString();\n-    }\n+   \n+    String result = (null == builder) ? new String(buffer, pos, i) : builder.append(buffer, pos, i).toString();\n     pos += i;\n     return result;\n   }\n@@ -1438,14 +1432,15 @@ private void skipToEndOfLine() throws IOException {\n    * @param toFind a string to search for. Must not contain a newline.\n    */\n   private boolean skipTo(String toFind) throws IOException {\n+    int length = toFind.length();\n     outer:\n-    for (; pos + toFind.length() <= limit || fillBuffer(toFind.length()); pos++) {\n+    for (; pos + length <= limit || fillBuffer(length); pos++) {\n       if (buffer[pos] == '\\n') {\n         lineNumber++;\n         lineStart = pos + 1;\n         continue;\n       }\n-      for (int c = 0; c < toFind.length(); c++) {\n+      for (int c = 0; c < length; c++) {\n         if (buffer[pos + c] != toFind.charAt(c)) {\n           continue outer;\n         }",
      "parent_sha": "f7012e586514524ccffe475e1a07757dbed6563f"
    }
  },
  {
    "oid": "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
    "message": "Fixed a bug where an inner static class was incorrectly marked as non-static while creating parameterized types.",
    "date": "2014-03-08T19:12:24Z",
    "url": "https://github.com/google/gson/commit/c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
    "details": {
      "sha": "b199f5af339436e6b54ace4dd725c554999054e7",
      "filename": "gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/google/gson/blob/c3d0f200b352f411b9ebe45c3bf49d4328b2c51f/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2F%24Gson%24Types.java",
      "raw_url": "https://github.com/google/gson/raw/c3d0f200b352f411b9ebe45c3bf49d4328b2c51f/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2F%24Gson%24Types.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2F%24Gson%24Types.java?ref=c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
      "patch": "@@ -23,6 +23,7 @@\n import java.lang.reflect.Array;\n import java.lang.reflect.GenericArrayType;\n import java.lang.reflect.GenericDeclaration;\n+import java.lang.reflect.Modifier;\n import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n import java.lang.reflect.TypeVariable;\n@@ -440,8 +441,10 @@ public ParameterizedTypeImpl(Type ownerType, Type rawType, Type... typeArguments\n       // require an owner type if the raw type needs it\n       if (rawType instanceof Class<?>) {\n         Class<?> rawTypeAsClass = (Class<?>) rawType;\n-        checkArgument(ownerType != null || rawTypeAsClass.getEnclosingClass() == null);\n-        checkArgument(ownerType == null || rawTypeAsClass.getEnclosingClass() != null);\n+        boolean isStaticOrTopLevelClass = Modifier.isStatic(rawTypeAsClass.getModifiers())\n+            || rawTypeAsClass.getEnclosingClass() == null;\n+        checkArgument(ownerType != null || isStaticOrTopLevelClass);\n+        checkArgument(ownerType == null || !isStaticOrTopLevelClass);\n       }\n \n       this.ownerType = ownerType == null ? null : canonicalize(ownerType);",
      "parent_sha": "b52f692ffa6bdd3a6c9305a8af8c385908346be1"
    }
  },
  {
    "oid": "e8cdabf296cd4c2c1550ed76cf27a1a8e0c4ec59",
    "message": "Fix typeArguments array not being cloned when resolving ParameterizedType with changed owner (#2706)",
    "date": "2024-06-27T17:26:30Z",
    "url": "https://github.com/google/gson/commit/e8cdabf296cd4c2c1550ed76cf27a1a8e0c4ec59",
    "details": {
      "sha": "8bef78afcea4b2e4df5cdb376bbfa4e1cd025860",
      "filename": "gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/google/gson/blob/e8cdabf296cd4c2c1550ed76cf27a1a8e0c4ec59/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2F%24Gson%24Types.java",
      "raw_url": "https://github.com/google/gson/raw/e8cdabf296cd4c2c1550ed76cf27a1a8e0c4ec59/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2F%24Gson%24Types.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2F%24Gson%24Types.java?ref=e8cdabf296cd4c2c1550ed76cf27a1a8e0c4ec59",
      "patch": "@@ -392,23 +392,24 @@ private static Type resolve(\n         ParameterizedType original = (ParameterizedType) toResolve;\n         Type ownerType = original.getOwnerType();\n         Type newOwnerType = resolve(context, contextRawType, ownerType, visitedTypeVariables);\n-        boolean changed = !equal(newOwnerType, ownerType);\n+        boolean ownerChanged = !equal(newOwnerType, ownerType);\n \n         Type[] args = original.getActualTypeArguments();\n+        boolean argsChanged = false;\n         for (int t = 0, length = args.length; t < length; t++) {\n           Type resolvedTypeArgument =\n               resolve(context, contextRawType, args[t], visitedTypeVariables);\n           if (!equal(resolvedTypeArgument, args[t])) {\n-            if (!changed) {\n+            if (!argsChanged) {\n               args = args.clone();\n-              changed = true;\n+              argsChanged = true;\n             }\n             args[t] = resolvedTypeArgument;\n           }\n         }\n \n         toResolve =\n-            changed\n+            ownerChanged || argsChanged\n                 ? newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args)\n                 : original;\n         break;",
      "parent_sha": "3621e51e0390d48062f80bb5677a46bc06bb0af8"
    }
  },
  {
    "oid": "7a115785b73a17b8b07c4fcbb91d6b26a5083ba5",
    "message": "Added a getHeader method with a TypedKey in RestRequest.",
    "date": "2010-03-15T13:12:27Z",
    "url": "https://github.com/google/gson/commit/7a115785b73a17b8b07c4fcbb91d6b26a5083ba5",
    "details": {
      "sha": "d354b88a7083613417c6049f43e64253b6935013",
      "filename": "wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestRequest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/google/gson/blob/7a115785b73a17b8b07c4fcbb91d6b26a5083ba5/wsdef%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fwebservice%2Fdefinition%2Frest%2FRestRequest.java",
      "raw_url": "https://github.com/google/gson/raw/7a115785b73a17b8b07c4fcbb91d6b26a5083ba5/wsdef%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fwebservice%2Fdefinition%2Frest%2FRestRequest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/wsdef%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fwebservice%2Fdefinition%2Frest%2FRestRequest.java?ref=7a115785b73a17b8b07c4fcbb91d6b26a5083ba5",
      "patch": "@@ -19,6 +19,7 @@\n import com.google.gson.webservice.definition.HeaderMap;\r\n import com.google.gson.webservice.definition.HttpMethod;\r\n import com.google.gson.webservice.definition.RequestBody;\r\n+import com.google.gson.webservice.definition.TypedKey;\r\n \r\n /**\r\n  * The data associated with a Web service request. This includes HTTP request header parameters \r\n@@ -63,7 +64,11 @@ public HeaderMap getHeaders() {\n   public String getContentType() {\r\n     return ContentBodySpec.JSON_CONTENT_TYPE;\r\n   }\r\n-  \r\n+\r\n+  public <T> T getHeader(TypedKey<T> key) {\r\n+    return headers.get(key);\r\n+  }\r\n+\r\n   @SuppressWarnings(\"unchecked\")\r\n   public <T> T getHeader(String headerName) {\r\n     return (T) headers.get(headerName);\r",
      "parent_sha": "d8638badf3dc707c7d623103feb64660dc5142bb"
    }
  },
  {
    "oid": "2cd3f9707f4494e15ac8f1652a4fbd19ba26c2d4",
    "message": "Incorporated feedback from r1082",
    "date": "2011-12-23T16:11:12Z",
    "url": "https://github.com/google/gson/commit/2cd3f9707f4494e15ac8f1652a4fbd19ba26c2d4",
    "details": {
      "sha": "742ee2212dbc2c5ae2171e52fa2da0dfce59383d",
      "filename": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
      "status": "modified",
      "additions": 26,
      "deletions": 3,
      "changes": 29,
      "blob_url": "https://github.com/google/gson/blob/2cd3f9707f4494e15ac8f1652a4fbd19ba26c2d4/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FNullObjectAndFieldTest.java",
      "raw_url": "https://github.com/google/gson/raw/2cd3f9707f4494e15ac8f1652a4fbd19ba26c2d4/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FNullObjectAndFieldTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FNullObjectAndFieldTest.java?ref=2cd3f9707f4494e15ac8f1652a4fbd19ba26c2d4",
      "patch": "@@ -152,16 +152,39 @@ public void testPrintPrintingArraysWithNulls() throws Exception {\n   // test for issue 389\r\n   public void testAbsentJsonElementsAreSetToNull() {\r\n     Gson gson = new Gson();\r\n-    ClassWithMembers target = gson.fromJson(\"{array:[1,2,3]}\", ClassWithMembers.class);\r\n+    ClassWithInitializedMembers target =\r\n+        gson.fromJson(\"{array:[1,2,3]}\", ClassWithInitializedMembers.class);\r\n     assertTrue(target.array.length == 3 && target.array[1] == 2);\r\n-    assertNull(target.str);\r\n-    assertNull(target.col);\r\n+    assertEquals(ClassWithInitializedMembers.MY_STRING_DEFAULT, target.str1);\r\n+    assertNull(target.str2);\r\n+    assertEquals(ClassWithInitializedMembers.MY_INT_DEFAULT, target.int1);\r\n+    assertEquals(0, target.int2); // test the default value of a primitive int field per JVM spec\r\n+    assertEquals(ClassWithInitializedMembers.MY_BOOLEAN_DEFAULT, target.bool1);\r\n+    assertFalse(target.bool2); // test the default value of a primitive boolean field per JVM spec\r\n+  }\r\n+\r\n+  public static class ClassWithInitializedMembers  {\r\n+    // Using a mix of no-args constructor and field initializers\r\n+    // Also, some fields are intialized and some are not (so initialized per JVM spec)\r\n+    public static final String MY_STRING_DEFAULT = \"string\";\r\n+    private static final int MY_INT_DEFAULT = 2;\r\n+    private static final boolean MY_BOOLEAN_DEFAULT = true;\r\n+    int[] array;\r\n+    String str1, str2;\r\n+    int int1 = MY_INT_DEFAULT;\r\n+    int int2;\r\n+    boolean bool1 = MY_BOOLEAN_DEFAULT;\r\n+    boolean bool2;\r\n+    public ClassWithInitializedMembers() {\r\n+      str1 = MY_STRING_DEFAULT;\r\n+    }\r\n   }\r\n \r\n   private static class ClassWithNullWrappedPrimitive {\r\n     private Long value;\r\n   }\r\n \r\n+  @SuppressWarnings(\"unused\")\r\n   private static class ClassWithMembers {\r\n     String str;\r\n     int[] array;\r",
      "parent_sha": "82f18a257faafa4501d91003e72a33fdafe85bd0"
    }
  },
  {
    "oid": "b19e187bdda7765f008e0fcdcb4fd184bdd87e00",
    "message": "Minor improvements to TypeAdapter javadocs to promote the use of nullSafe.",
    "date": "2011-12-06T08:32:19Z",
    "url": "https://github.com/google/gson/commit/b19e187bdda7765f008e0fcdcb4fd184bdd87e00",
    "details": {
      "sha": "097afdc8764c81b9138cd66e46a28392b2a64b40",
      "filename": "gson/src/main/java/com/google/gson/TypeAdapter.java",
      "status": "modified",
      "additions": 11,
      "deletions": 7,
      "changes": 18,
      "blob_url": "https://github.com/google/gson/blob/b19e187bdda7765f008e0fcdcb4fd184bdd87e00/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FTypeAdapter.java",
      "raw_url": "https://github.com/google/gson/raw/b19e187bdda7765f008e0fcdcb4fd184bdd87e00/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FTypeAdapter.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FTypeAdapter.java?ref=b19e187bdda7765f008e0fcdcb4fd184bdd87e00",
      "patch": "@@ -76,24 +76,28 @@\n  * too many values may cause the application to crash.\n  *\n  * <p>Type adapters should be prepared to read null from the stream and write it\n- * to the stream. If your {@code Gson} instance has been configured to {@link\n- * GsonBuilder#serializeNulls()}, these will be written to the final document.\n- * Otherwise the value (and the corresponding name when writing to a JSON\n- * object) will be omitted automatically. In either case your type adapter must\n- * handle null.\n+ * to the stream. Alternatively, they should use {@link #nullSafe()} method while\n+ * registering the type adapter with Gson. If your {@code Gson} instance\n+ * has been configured to {@link GsonBuilder#serializeNulls()}, these nulls will be\n+ * written to the final document. Otherwise the value (and the corresponding name\n+ * when writing to a JSON object) will be omitted automatically. In either case\n+ * your type adapter must handle null.\n  *\n  * <p>To use a custom type adapter with Gson, you must <i>register</i> it with a\n  * {@link GsonBuilder}: <pre>   {@code\n  *\n  *   GsonBuilder builder = new GsonBuilder();\n  *   builder.registerTypeAdapter(Point.class, new PointAdapter());\n+ *   // if PointAdapter didn't check for nulls in its read/write methods, you should instead use\n+ *   // builder.registerTypeAdapter(Point.class, new PointAdapter().nullSafe());\n  *   ...\n  *   Gson gson = builder.create();\n  * }</pre>\n  *\n  * <h3>JSON Conversion</h3>\n- * <p>Retrieve a type adapter from a {@code Gson} instance to deserialize a JSON\n- * document into a Java object: <pre>   {@code\n+ * <p>A type adapter registered with Gson is automatically invoked while serializing\n+ * or deserializing JSON. However, you can also use type adapters directly to serialize\n+ * and deserialize JSON. Here is an example for deserialization: <pre>   {@code\n  *\n  *   String json = \"{'origin':'0,0','points':['1,2','3,4']}\";\n  *   TypeAdapter<Graph> graphAdapter = gson.getAdapter(Graph.class);",
      "parent_sha": "0b734e46e180a452e4bff45878ac60441be6ff74"
    }
  },
  {
    "oid": "61f58baaf926d3e6b16a52305537b3495f155ca8",
    "message": "fix typo in JsonArray docs",
    "date": "2016-01-12T13:02:42Z",
    "url": "https://github.com/google/gson/commit/61f58baaf926d3e6b16a52305537b3495f155ca8",
    "details": {
      "sha": "19299d14e96e7329ae6f10681f1c779c9409b06e",
      "filename": "gson/src/main/java/com/google/gson/JsonArray.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/61f58baaf926d3e6b16a52305537b3495f155ca8/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonArray.java",
      "raw_url": "https://github.com/google/gson/raw/61f58baaf926d3e6b16a52305537b3495f155ca8/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonArray.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonArray.java?ref=61f58baaf926d3e6b16a52305537b3495f155ca8",
      "patch": "@@ -162,7 +162,7 @@ public int size() {\n   }\n \n   /**\n-   * Returns an iterator to navigate the elemetns of the array. Since the array is an ordered list,\n+   * Returns an iterator to navigate the elements of the array. Since the array is an ordered list,\n    * the iterator navigates the elements in the order they were inserted.\n    *\n    * @return an iterator to navigate the elements of the array.",
      "parent_sha": "1f803bd37de5890f6da53f0b1a1b631eea4d1b8f"
    }
  },
  {
    "oid": "727dbcdd88c158b27c16ea1ae265456987d7a8a8",
    "message": "Fixed javadoc for toString() since we do not output valid Json for strings at the moment.",
    "date": "2009-03-20T18:06:52Z",
    "url": "https://github.com/google/gson/commit/727dbcdd88c158b27c16ea1ae265456987d7a8a8",
    "details": {
      "sha": "3c8e50cd0ef75e3f991ded96677967e15ecc704a",
      "filename": "gson/src/main/java/com/google/gson/JsonElement.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/727dbcdd88c158b27c16ea1ae265456987d7a8a8/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonElement.java",
      "raw_url": "https://github.com/google/gson/raw/727dbcdd88c158b27c16ea1ae265456987d7a8a8/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonElement.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonElement.java?ref=727dbcdd88c158b27c16ea1ae265456987d7a8a8",
      "patch": "@@ -308,7 +308,7 @@ Object getAsObject() {\n   /**\n    * Returns a String representation of this element.\n    *\n-   * @return String the string representation of this element. The output is valid Json.\n+   * @return String the string representation of this element.\n    */\n   @Override\n   public String toString() {",
      "parent_sha": "68f3899c1aedc5ee1c97f0c54e0d951df5d4a9a0"
    }
  },
  {
    "oid": "1e9004403c619729ad1c49f070ab61427bd462c5",
    "message": "Fixed javadoc for JsonWriter as reported in\nhttps://github.com/google/gson/issues/623",
    "date": "2015-09-27T01:10:00Z",
    "url": "https://github.com/google/gson/commit/1e9004403c619729ad1c49f070ab61427bd462c5",
    "details": {
      "sha": "8d3bdb347c6e4cc6eaa86d07a211c6d58a3c39ec",
      "filename": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/1e9004403c619729ad1c49f070ab61427bd462c5/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fstream%2FJsonWriter.java",
      "raw_url": "https://github.com/google/gson/raw/1e9004403c619729ad1c49f070ab61427bd462c5/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fstream%2FJsonWriter.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fstream%2FJsonWriter.java?ref=1e9004403c619729ad1c49f070ab61427bd462c5",
      "patch": "@@ -77,7 +77,7 @@\n  * This code encodes the above structure: <pre>   {@code\n  *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n  *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n- *     writer.setIndentSpaces(4);\n+ *     writer.setIndent(\"    \");\n  *     writeMessagesArray(writer, messages);\n  *     writer.close();\n  *   }",
      "parent_sha": "93605e7145c989d4f38ae347c9f31d605efcf434"
    }
  },
  {
    "oid": "21ddfc9b122312ee0e599730cd7672ecdbd6d084",
    "message": "Show default serialization and deserialization works with subclasses of an enum type.",
    "date": "2011-04-04T19:19:46Z",
    "url": "https://github.com/google/gson/commit/21ddfc9b122312ee0e599730cd7672ecdbd6d084",
    "details": {
      "sha": "bdb2cc342675a8f2dfbde871fd8391d7264fdf92",
      "filename": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
      "status": "modified",
      "additions": 22,
      "deletions": 8,
      "changes": 30,
      "blob_url": "https://github.com/google/gson/blob/21ddfc9b122312ee0e599730cd7672ecdbd6d084/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FEnumTest.java",
      "raw_url": "https://github.com/google/gson/raw/21ddfc9b122312ee0e599730cd7672ecdbd6d084/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FEnumTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FEnumTest.java?ref=21ddfc9b122312ee0e599730cd7672ecdbd6d084",
      "patch": "@@ -16,14 +16,6 @@\n \n package com.google.gson.functional;\n \n-import java.lang.reflect.Type;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.EnumSet;\n-import java.util.Set;\n-\n-import junit.framework.TestCase;\n-\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonDeserializationContext;\n@@ -36,6 +28,14 @@\n import com.google.gson.common.MoreAsserts;\n import com.google.gson.reflect.TypeToken;\n \n+import junit.framework.TestCase;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n /**\n  * Functional tests for Java 5.0 enums.\n  *\n@@ -140,6 +140,20 @@ public void testEnumSubclassWithRegisteredTypeAdapter() {\n         gson.fromJson(\"[\\\"123ROCK\\\",\\\"123PAPER\\\",\\\"123SCISSORS\\\"]\", new TypeToken<Set<Roshambo>>() {}.getType()));\n   }\n \n+  public void testEnumSubclassAsParameterizedType() {\n+    Collection<Roshambo> list = new ArrayList<Roshambo>();\n+    list.add(Roshambo.ROCK);\n+    list.add(Roshambo.PAPER);\n+\n+    String json = gson.toJson(list);\n+    assertEquals(\"[\\\"ROCK\\\",\\\"PAPER\\\"]\", json);\n+\n+    Type collectionType = new TypeToken<Collection<Roshambo>>() {}.getType();\n+    Collection<Roshambo> actualJsonList = gson.fromJson(json, collectionType);\n+    MoreAsserts.assertContains(actualJsonList, Roshambo.ROCK);\n+    MoreAsserts.assertContains(actualJsonList, Roshambo.PAPER);\n+  }\n+\n   public enum Roshambo {\n     ROCK {\n       @Override Roshambo defeats() {",
      "parent_sha": "5af0b16641ffd0422ea495b8e542ad1e29cc1735"
    }
  },
  {
    "oid": "5a87d806550f8389fb26327bcf97751c6851d7c7",
    "message": "Fixed Typo in GsonBuilder.java (#2449)",
    "date": "2023-07-26T15:47:28Z",
    "url": "https://github.com/google/gson/commit/5a87d806550f8389fb26327bcf97751c6851d7c7",
    "details": {
      "sha": "c72c411f076fd9b9d66a7442c9b59f95dbde1732",
      "filename": "gson/src/main/java/com/google/gson/GsonBuilder.java",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/google/gson/blob/5a87d806550f8389fb26327bcf97751c6851d7c7/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java",
      "raw_url": "https://github.com/google/gson/raw/5a87d806550f8389fb26327bcf97751c6851d7c7/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java?ref=5a87d806550f8389fb26327bcf97751c6851d7c7",
      "patch": "@@ -57,8 +57,7 @@\n  * use {@code new Gson()}. {@code GsonBuilder} is best used by creating it, and then invoking its\n  * various configuration methods, and finally calling create.</p>\n  *\n- * <p>The following is an example shows how to use the {@code GsonBuilder} to construct a Gson\n- * instance:\n+ * <p>The following example shows how to use the {@code GsonBuilder} to construct a Gson instance:\n  *\n  * <pre>\n  * Gson gson = new GsonBuilder()\n@@ -120,7 +119,7 @@ public GsonBuilder() {\n    * Constructs a GsonBuilder instance from a Gson instance. The newly constructed GsonBuilder\n    * has the same configuration as the previously built Gson instance.\n    *\n-   * @param gson the gson instance whose configuration should by applied to a new GsonBuilder.\n+   * @param gson the gson instance whose configuration should be applied to a new GsonBuilder.\n    */\n   GsonBuilder(Gson gson) {\n     this.excluder = gson.excluder;\n@@ -274,7 +273,7 @@ public GsonBuilder serializeNulls() {\n    * {\"x\":2,\"y\":3}}.\n    *\n    * <p>Given the assumption above, a {@code Map<Point, String>} will be\n-   * serialize as an array of arrays (can be viewed as an entry set of pairs).\n+   * serialized as an array of arrays (can be viewed as an entry set of pairs).\n    *\n    * <p>Below is an example of serializing complex types as JSON arrays:\n    * <pre> {@code\n@@ -574,7 +573,7 @@ public GsonBuilder setDateFormat(String pattern) {\n   }\n \n   /**\n-   * Configures Gson to to serialize {@code Date} objects according to the style value provided.\n+   * Configures Gson to serialize {@code Date} objects according to the style value provided.\n    * You can call this method or {@link #setDateFormat(String)} multiple times, but only the last\n    * invocation will be used to decide the serialization format.\n    *\n@@ -595,7 +594,7 @@ public GsonBuilder setDateFormat(int style) {\n   }\n \n   /**\n-   * Configures Gson to to serialize {@code Date} objects according to the style value provided.\n+   * Configures Gson to serialize {@code Date} objects according to the style value provided.\n    * You can call this method or {@link #setDateFormat(String)} multiple times, but only the last\n    * invocation will be used to decide the serialization format.\n    *",
      "parent_sha": "a38b757bc4fddfd57ab762fbf192dd2b3fc6be22"
    }
  },
  {
    "oid": "5d31558428466ebe531a1255271dfc6b800f36a0",
    "message": "eliminated maven compilation problems with JDK 5",
    "date": "2011-05-25T16:13:36Z",
    "url": "https://github.com/google/gson/commit/5d31558428466ebe531a1255271dfc6b800f36a0",
    "details": {
      "sha": "111bc1cb335a346f45a6f19e0207d5030a30e10f",
      "filename": "gson/src/main/java/com/google/gson/JsonDeserializationContext.java",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/google/gson/blob/5d31558428466ebe531a1255271dfc6b800f36a0/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonDeserializationContext.java",
      "raw_url": "https://github.com/google/gson/raw/5d31558428466ebe531a1255271dfc6b800f36a0/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonDeserializationContext.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonDeserializationContext.java?ref=5d31558428466ebe531a1255271dfc6b800f36a0",
      "patch": "@@ -43,8 +43,10 @@ public final class JsonDeserializationContext {\n   }\n \n \n+  @SuppressWarnings(\"unchecked\")\n   public <T> T construct(Type type) {\n-    return objectConstructor.construct(type);\n+    Object instance = objectConstructor.construct(type);\n+    return (T) instance;\n   }\n \n   public Object constructArray(Type type, int length) {\n@@ -92,15 +94,19 @@ private <T> T fromJsonPrimitive(Type typeOfT, JsonPrimitive json,\n    * @return An object of type typeOfT.\n    * @throws JsonParseException if the parse tree does not contain expected data.\n    */\n+  @SuppressWarnings(\"unchecked\")\n   public <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\n     if (json == null || json.isJsonNull()) {\n       return null;\n     } else if (json.isJsonArray()) {\n-      return fromJsonArray(typeOfT, json.getAsJsonArray(), this);\n+      Object array = fromJsonArray(typeOfT, json.getAsJsonArray(), this);\n+      return (T) array;\n     } else if (json.isJsonObject()) {\n-      return fromJsonObject(typeOfT, json.getAsJsonObject(), this);\n+      Object object = fromJsonObject(typeOfT, json.getAsJsonObject(), this);\n+      return (T) object;\n     } else if (json.isJsonPrimitive()) {\n-      return fromJsonPrimitive(typeOfT, json.getAsJsonPrimitive(), this);\n+      Object primitive = fromJsonPrimitive(typeOfT, json.getAsJsonPrimitive(), this);\n+      return (T) primitive;\n     } else {\n       throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\");\n     }",
      "parent_sha": "540d36e4bd1fa94a7aa8f72eef0d9272f013fbb0"
    }
  },
  {
    "oid": "1e7625b963d2e4447a4aa46a2fadc6d0e3a3aba7",
    "message": "fix: ParseBenchmark json property typo (#2473)",
    "date": "2023-08-19T16:54:08Z",
    "url": "https://github.com/google/gson/commit/1e7625b963d2e4447a4aa46a2fadc6d0e3a3aba7",
    "details": {
      "sha": "bbf541719d21fca7b499ea9a2f114f5df1c2d261",
      "filename": "metrics/src/main/java/com/google/gson/metrics/ParseBenchmark.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/1e7625b963d2e4447a4aa46a2fadc6d0e3a3aba7/metrics%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fmetrics%2FParseBenchmark.java",
      "raw_url": "https://github.com/google/gson/raw/1e7625b963d2e4447a4aa46a2fadc6d0e3a3aba7/metrics%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fmetrics%2FParseBenchmark.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/metrics%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fmetrics%2FParseBenchmark.java?ref=1e7625b963d2e4447a4aa46a2fadc6d0e3a3aba7",
      "patch": "@@ -351,7 +351,7 @@ static class User {\n     @JsonProperty boolean geo_enabled;\n     @JsonProperty boolean verified;\n     @JsonProperty String profile_background_image_url;\n-    @JsonProperty boolean defalut_profile_image;\n+    @JsonProperty boolean default_profile_image;\n     @JsonProperty int friends_count;\n     @JsonProperty int statuses_count;\n     @JsonProperty String screen_name;",
      "parent_sha": "7b8ce2b9f7faaa22893bb77140563e3c41afb4ab"
    }
  },
  {
    "oid": "0c4ae018361d4756123c82c2f67ad04385caec5b",
    "message": "Updated Gson Javadoc to indicate thread-safety.",
    "date": "2015-08-10T14:04:07Z",
    "url": "https://github.com/google/gson/commit/0c4ae018361d4756123c82c2f67ad04385caec5b",
    "details": {
      "sha": "9255261c843a72db075e870ee4d7717966ba779d",
      "filename": "gson/src/main/java/com/google/gson/Gson.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/google/gson/blob/0c4ae018361d4756123c82c2f67ad04385caec5b/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "raw_url": "https://github.com/google/gson/raw/0c4ae018361d4756123c82c2f67ad04385caec5b/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java?ref=0c4ae018361d4756123c82c2f67ad04385caec5b",
      "patch": "@@ -56,7 +56,8 @@\n /**\n  * This is the main class for using Gson. Gson is typically used by first constructing a\n  * Gson instance and then invoking {@link #toJson(Object)} or {@link #fromJson(String, Class)}\n- * methods on it.\n+ * methods on it. Gson instances are Thread-safe so you can reuse them freely across multiple\n+ * threads.\n  *\n  * <p>You can create a Gson instance by invoking {@code new Gson()} if the default configuration\n  * is all you need. You can also use {@link GsonBuilder} to build a Gson instance with various",
      "parent_sha": "09839be00420a6294628915defa93fdd042ff406"
    }
  },
  {
    "oid": "9bcb0c0b6b65852e337c6dd1715f838fddddda15",
    "message": "Use the internal copy of preconditions",
    "date": "2011-03-29T21:13:31Z",
    "url": "https://github.com/google/gson/commit/9bcb0c0b6b65852e337c6dd1715f838fddddda15",
    "details": {
      "sha": "9aa90ad92a2a30e26ae81f79eca0a28c0be3412d",
      "filename": "gson/src/main/java/com/google/gson/internal/Types.java",
      "status": "modified",
      "additions": 2,
      "deletions": 10,
      "changes": 12,
      "blob_url": "https://github.com/google/gson/blob/9bcb0c0b6b65852e337c6dd1715f838fddddda15/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2FTypes.java",
      "raw_url": "https://github.com/google/gson/raw/9bcb0c0b6b65852e337c6dd1715f838fddddda15/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2FTypes.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2FTypes.java?ref=9bcb0c0b6b65852e337c6dd1715f838fddddda15",
      "patch": "@@ -16,6 +16,8 @@\n \n package com.google.gson.internal;\n \n+import static com.google.gson.internal.Preconditions.checkArgument;\n+import static com.google.gson.internal.Preconditions.checkNotNull;\n import java.io.Serializable;\n import java.lang.reflect.Array;\n import java.lang.reflect.GenericArrayType;\n@@ -584,14 +586,4 @@ public Type[] getLowerBounds() {\n \n     private static final long serialVersionUID = 0;\n   }\n-\n-  private static void checkNotNull(Object obj) {\n-    checkArgument(obj != null);\n-  }\n-\n-  private static void checkArgument(boolean condition) {\n-    if (!condition) {\n-      throw new IllegalArgumentException(\"condition failed: \" + condition);\n-    }\n-  }\n }",
      "parent_sha": "454f58a7b144d2f16e3ea55b34074b8a66a9a2fe"
    }
  },
  {
    "oid": "ce3520f5b5d7c126ef06af3ec9ccf91cb4e7913e",
    "message": "disabling an assert that was causing failed test. \nPer Jesse, this assertion is too difficult to support reliably.",
    "date": "2011-01-13T07:35:11Z",
    "url": "https://github.com/google/gson/commit/ce3520f5b5d7c126ef06af3ec9ccf91cb4e7913e",
    "details": {
      "sha": "0375fd88d4017edf3d61a945aa62ad8d31fe698c",
      "filename": "gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/google/gson/blob/ce3520f5b5d7c126ef06af3ec9ccf91cb4e7913e/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Freflect%2FTypeTokenTest.java",
      "raw_url": "https://github.com/google/gson/raw/ce3520f5b5d7c126ef06af3ec9ccf91cb4e7913e/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Freflect%2FTypeTokenTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Freflect%2FTypeTokenTest.java?ref=ce3520f5b5d7c126ef06af3ec9ccf91cb4e7913e",
      "patch": "@@ -64,7 +64,8 @@ public void testIsAssignableFromWithBasicWildcards() throws Exception {\n     // listOfString = listOfUnknown  // doesn't compile; must be false\n     assertFalse(TypeToken.get(a).isAssignableFrom(b));\n     listOfUnknown = listOfString; // compiles; must be true\n-    assertTrue(TypeToken.get(b).isAssignableFrom(a));\n+    // The following assertion is too difficult to support reliably, so disabling\n+    // assertTrue(TypeToken.get(b).isAssignableFrom(a));\n   }\n \n   public void testIsAssignableFromWithNestedWildcards() throws Exception {",
      "parent_sha": "37dc0f8d3ed854349fc066e580ce16e43b1a0248"
    }
  },
  {
    "oid": "4a6c084ef73e5e8a3fca12f9bb829a218fad7a84",
    "message": "removed JDK 1.5 incompatible use of @Overrides annotation on overridden interface methods.",
    "date": "2011-09-16T03:27:48Z",
    "url": "https://github.com/google/gson/commit/4a6c084ef73e5e8a3fca12f9bb829a218fad7a84",
    "details": {
      "sha": "486963109e334b207a9174abf19c371db90c7900",
      "filename": "gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/google/gson/blob/4a6c084ef73e5e8a3fca12f9bb829a218fad7a84/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2FConstructorConstructor.java",
      "raw_url": "https://github.com/google/gson/raw/4a6c084ef73e5e8a3fca12f9bb829a218fad7a84/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2FConstructorConstructor.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2FConstructorConstructor.java?ref=4a6c084ef73e5e8a3fca12f9bb829a218fad7a84",
      "patch": "@@ -57,7 +57,7 @@ public <T> ObjectConstructor<T> getConstructor(TypeToken<T> typeToken) {\n         = (InstanceCreator<T>) instanceCreators.getHandlerFor(type, false);\n     if (creator != null) {\n       return new ObjectConstructor<T>() {\n-        @Override public T construct() {\n+        public T construct() {\n           return creator.createInstance(type);\n         }\n       };\n@@ -85,7 +85,7 @@ private <T> ObjectConstructor<T> newDefaultConstructor(Class<? super T> rawType)\n       }\n       return new ObjectConstructor<T>() {\n         @SuppressWarnings(\"unchecked\") // T is the same raw type as is requested\n-        @Override public T construct() {\n+        public T construct() {\n           try {\n             Object[] args = null;\n             return (T) constructor.newInstance(args);\n@@ -115,25 +115,25 @@ private <T> ObjectConstructor<T> newDefaultImplementationConstructor(Class<? sup\n     if (Collection.class.isAssignableFrom(rawType)) {\n       if (SortedSet.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n-          @Override public T construct() {\n+          public T construct() {\n             return (T) new TreeSet<Object>();\n           }\n         };\n       } else if (Set.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n-          @Override public T construct() {\n+          public T construct() {\n             return (T) new LinkedHashSet<Object>();\n           }\n         };\n       } else if (Queue.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n-          @Override public T construct() {\n+          public T construct() {\n             return (T) new LinkedList<Object>();\n           }\n         };\n       } else {\n         return new ObjectConstructor<T>() {\n-          @Override public T construct() {\n+          public T construct() {\n             return (T) new ArrayList<Object>();\n           }\n         };\n@@ -142,7 +142,7 @@ private <T> ObjectConstructor<T> newDefaultImplementationConstructor(Class<? sup\n \n     if (Map.class.isAssignableFrom(rawType)) {\n       return new ObjectConstructor<T>() {\n-        @Override public T construct() {\n+        public T construct() {\n           return (T) new LinkedHashMap<Object, Object>();\n         }\n       };\n@@ -156,7 +156,7 @@ private <T> ObjectConstructor<T> newUnsafeAllocator(\n       final Type type, final Class<? super T> rawType) {\n     return new ObjectConstructor<T>() {\n       private final UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n-      @Override public T construct() {\n+      public T construct() {\n         try {\n           return (T) unsafeAllocator.newInstance(rawType);\n         } catch (Exception e) {",
      "parent_sha": "51a9596d066a4b38f7da2975ba659e8400728208"
    }
  },
  {
    "oid": "c5c1fbf9a12def0b3b5e6c6e84c36b185dfb4628",
    "message": "Access `RecordComponent` via `Class.forName`. (#2465)\n\nThis should mean that GraalVM will understand the reflective lookup of its methods.\r\nSee [documentation](https://www.graalvm.org/latest/reference-manual/native-image/dynamic-features/Reflection/#automatic-detection).",
    "date": "2023-08-11T17:57:53Z",
    "url": "https://github.com/google/gson/commit/c5c1fbf9a12def0b3b5e6c6e84c36b185dfb4628",
    "details": {
      "sha": "0345292523c6a664cdb4ce8a0e439240a58e3f6e",
      "filename": "gson/src/main/java/com/google/gson/internal/reflect/ReflectionHelper.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/google/gson/blob/c5c1fbf9a12def0b3b5e6c6e84c36b185dfb4628/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2Freflect%2FReflectionHelper.java",
      "raw_url": "https://github.com/google/gson/raw/c5c1fbf9a12def0b3b5e6c6e84c36b185dfb4628/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2Freflect%2FReflectionHelper.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2Freflect%2FReflectionHelper.java?ref=c5c1fbf9a12def0b3b5e6c6e84c36b185dfb4628",
      "patch": "@@ -33,7 +33,7 @@ public class ReflectionHelper {\n     try {\n       // Try to construct the RecordSupportedHelper, if this fails, records are not supported on this JVM.\n       instance = new RecordSupportedHelper();\n-    } catch (NoSuchMethodException e) {\n+    } catch (ReflectiveOperationException e) {\n       instance = new RecordNotSupportedHelper();\n     }\n     RECORD_HELPER = instance;\n@@ -215,11 +215,10 @@ private static class RecordSupportedHelper extends RecordHelper {\n     private final Method getName;\n     private final Method getType;\n \n-    private RecordSupportedHelper() throws NoSuchMethodException {\n+    private RecordSupportedHelper() throws NoSuchMethodException, ClassNotFoundException {\n       isRecord = Class.class.getMethod(\"isRecord\");\n       getRecordComponents = Class.class.getMethod(\"getRecordComponents\");\n-      // Class java.lang.reflect.RecordComponent\n-      Class<?> classRecordComponent = getRecordComponents.getReturnType().getComponentType();\n+      Class<?> classRecordComponent = Class.forName(\"java.lang.reflect.RecordComponent\");\n       getName = classRecordComponent.getMethod(\"getName\");\n       getType = classRecordComponent.getMethod(\"getType\");\n     }",
      "parent_sha": "cdbbee4e723c39c1df302a805f3bde8d4fe12bd1"
    }
  },
  {
    "oid": "e7bfd0c97d2196047bad996b6625d3bb197aae13",
    "message": "Promote JsonReader2 to be the main JsonReader implementation.",
    "date": "2012-08-26T19:34:46Z",
    "url": "https://github.com/google/gson/commit/e7bfd0c97d2196047bad996b6625d3bb197aae13",
    "details": {
      "sha": "48ba6521bc432ebfda5b02cdbc87f94f7b474f4c",
      "filename": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
      "status": "renamed",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/google/gson/blob/e7bfd0c97d2196047bad996b6625d3bb197aae13/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fstream%2FJsonReader.java",
      "raw_url": "https://github.com/google/gson/raw/e7bfd0c97d2196047bad996b6625d3bb197aae13/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fstream%2FJsonReader.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fstream%2FJsonReader.java?ref=e7bfd0c97d2196047bad996b6625d3bb197aae13",
      "patch": "@@ -187,7 +187,7 @@\n  * @author Jesse Wilson\n  * @since 1.6\n  */\n-public class JsonReader2 implements Closeable {\n+public class JsonReader implements Closeable {\n   /** The only non-execute prefix this parser permits */\n   private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();\n \n@@ -257,7 +257,7 @@ public class JsonReader2 implements Closeable {\n   /**\n    * Creates a new instance that reads a JSON-encoded stream from {@code in}.\n    */\n-  public JsonReader2(Reader in) {\n+  public JsonReader(Reader in) {\n     if (in == null) {\n       throw new NullPointerException(\"in == null\");\n     }\n@@ -1442,7 +1442,7 @@ private void consumeNonExecutePrefix() throws IOException {\n     pos += NON_EXECUTE_PREFIX.length;\n   }\n \n-  /*static {\n+  static {\n     JsonReaderInternalAccess.INSTANCE = new JsonReaderInternalAccess() {\n       @Override public void promoteNameToValue(JsonReader reader) throws IOException {\n         if (reader instanceof JsonTreeReader) {\n@@ -1465,5 +1465,5 @@ private void consumeNonExecutePrefix() throws IOException {\n         }\n       }\n     };\n-  }*/\n+  }\n }",
      "previous_filename": "gson/src/main/java/com/google/gson/stream/JsonReader2.java",
      "parent_sha": "553fa6b742ef6c00f04465c401c7cc464a6f9ea0"
    }
  },
  {
    "oid": "a526da7cdd2529eb3d13cfbd35664ee82a02d565",
    "message": "Tests that demonstrate that type variables work.\n\nFixes issue 168.",
    "date": "2011-01-19T22:24:10Z",
    "url": "https://github.com/google/gson/commit/a526da7cdd2529eb3d13cfbd35664ee82a02d565",
    "details": {
      "sha": "2d7503eb3118f9dc4e52cedd015aff19545cc963",
      "filename": "gson/src/test/java/com/google/gson/functional/TypeVariableTest.java",
      "status": "modified",
      "additions": 22,
      "deletions": 4,
      "changes": 26,
      "blob_url": "https://github.com/google/gson/blob/a526da7cdd2529eb3d13cfbd35664ee82a02d565/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FTypeVariableTest.java",
      "raw_url": "https://github.com/google/gson/raw/a526da7cdd2529eb3d13cfbd35664ee82a02d565/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FTypeVariableTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FTypeVariableTest.java?ref=a526da7cdd2529eb3d13cfbd35664ee82a02d565",
      "patch": "@@ -17,6 +17,9 @@\n \n import com.google.gson.Gson;\n \n+import com.google.gson.reflect.TypeToken;\n+import java.lang.reflect.Type;\n+import java.util.Arrays;\n import junit.framework.TestCase;\n \n import java.util.ArrayList;\n@@ -32,7 +35,7 @@\n  */\n public class TypeVariableTest extends TestCase {\n \n-  public void disabled_testAdvancedTypeVariables() throws Exception {\n+  public void testAdvancedTypeVariables() throws Exception {\n     Gson gson = new Gson();\n     Bar bar1 = new Bar(\"someString\", 1, true);\n     ArrayList<Integer> arrayList = new ArrayList<Integer>();\n@@ -47,6 +50,17 @@ public void disabled_testAdvancedTypeVariables() throws Exception {\n     assertEquals(bar1, bar2);\n   }\n \n+  public void testTypeVariablesViaTypeParameter() throws Exception {\n+    Gson gson = new Gson();\n+    Foo<String, Integer> original = new Foo<String, Integer>(\"e\", 5, false);\n+    original.map.put(\"f\", Arrays.asList(6, 7));\n+    Type type = new TypeToken<Foo<String, Integer>>() {}.getType();\n+    String json = gson.toJson(original, type);\n+    assertEquals(\"{\\\"someSField\\\":\\\"e\\\",\\\"someTField\\\":5,\\\"map\\\":{\\\"f\\\":[6,7]},\\\"redField\\\":false}\",\n+        json);\n+    assertEquals(original, gson.<Foo<String, Integer>>fromJson(json, type));\n+  }\n+\n   public void testBasicTypeVariables() throws Exception {\n     Gson gson = new Gson();\n     Blue blue1 = new Blue(true);\n@@ -77,18 +91,22 @@ public boolean equals(Object o) {\n   }\n \n   public static class Red<S> {\n-    protected final S redField;\n+    protected S redField;\n+\n+    public Red() {}\n \n     public Red(S redField) {\n       this.redField = redField;\n     }\n   }\n \n   public static class Foo<S, T> extends Red<Boolean> {\n-    private final S someSField;\n-    private final T someTField;\n+    private S someSField;\n+    private T someTField;\n     public final Map<S, List<T>> map = new HashMap<S, List<T>>();\n \n+    public Foo() {}\n+\n     public Foo(S sValue, T tValue, Boolean redField) {\n       super(redField);\n       this.someSField = sValue;",
      "parent_sha": "edc71130c44e82fec4a3b4712f44b1912d374036"
    }
  },
  {
    "oid": "5370b076e329444860b0ea0c7f33b10504281f27",
    "message": "Removing 'final' accessor from constructor (#1501)",
    "date": "2019-03-28T16:22:36Z",
    "url": "https://github.com/google/gson/commit/5370b076e329444860b0ea0c7f33b10504281f27",
    "details": {
      "sha": "27f3ee9246ac0c48893f81ee1155db05b379bce8",
      "filename": "gson/src/main/java/com/google/gson/Gson.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/google/gson/blob/5370b076e329444860b0ea0c7f33b10504281f27/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "raw_url": "https://github.com/google/gson/raw/5370b076e329444860b0ea0c7f33b10504281f27/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java?ref=5370b076e329444860b0ea0c7f33b10504281f27",
      "patch": "@@ -192,8 +192,8 @@ public Gson() {\n         Collections.<TypeAdapterFactory>emptyList());\n   }\n \n-  Gson(final Excluder excluder, final FieldNamingStrategy fieldNamingStrategy,\n-      final Map<Type, InstanceCreator<?>> instanceCreators, boolean serializeNulls,\n+  Gson(Excluder excluder, FieldNamingStrategy fieldNamingStrategy,\n+      Map<Type, InstanceCreator<?>> instanceCreators, boolean serializeNulls,\n       boolean complexMapKeySerialization, boolean generateNonExecutableGson, boolean htmlSafe,\n       boolean prettyPrinting, boolean lenient, boolean serializeSpecialFloatingPointValues,\n       LongSerializationPolicy longSerializationPolicy, String datePattern, int dateStyle,",
      "parent_sha": "8bf2949c2934cf9a168df24d0d2a29c702556a91"
    }
  },
  {
    "oid": "81e6ae25f1f2eca8776184f4439cca27783b23c1",
    "message": "Make FieldAttributes public so it can be used by public clients.",
    "date": "2009-10-09T03:11:16Z",
    "url": "https://github.com/google/gson/commit/81e6ae25f1f2eca8776184f4439cca27783b23c1",
    "details": {
      "sha": "f8e176d053c41424d74a68f6188b5fda90b2ea38",
      "filename": "gson/src/main/java/com/google/gson/FieldAttributes.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/google/gson/blob/81e6ae25f1f2eca8776184f4439cca27783b23c1/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FFieldAttributes.java",
      "raw_url": "https://github.com/google/gson/raw/81e6ae25f1f2eca8776184f4439cca27783b23c1/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FFieldAttributes.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FFieldAttributes.java?ref=81e6ae25f1f2eca8776184f4439cca27783b23c1",
      "patch": "@@ -30,12 +30,13 @@\n  *\n  * @since 1.4\n  */\n-final class FieldAttributes {\n+public final class FieldAttributes {\n   private final Field field;\n \n   /**\n-   * Constructs a Field Attributes object\n-   * @param f\n+   * Constructs a Field Attributes object from the {@code f}.\n+   *\n+   * @param f the field to pull attributes from\n    */\n   FieldAttributes(Field f) {\n     Preconditions.checkNotNull(f);",
      "parent_sha": "282ef30280edd24547d586fc0c104e2b3506f63a"
    }
  },
  {
    "oid": "c414b368e120a6240ceb238f4e0abce821a9f7cd",
    "message": "Corrected documentation, copy&paste error",
    "date": "2016-05-12T12:47:03Z",
    "url": "https://github.com/google/gson/commit/c414b368e120a6240ceb238f4e0abce821a9f7cd",
    "details": {
      "sha": "fa89794a93bee04d043d36ac40d58d8755825ad8",
      "filename": "gson/src/main/java/com/google/gson/Gson.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/c414b368e120a6240ceb238f4e0abce821a9f7cd/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "raw_url": "https://github.com/google/gson/raw/c414b368e120a6240ceb238f4e0abce821a9f7cd/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java?ref=c414b368e120a6240ceb238f4e0abce821a9f7cd",
      "patch": "@@ -719,7 +719,7 @@ public JsonWriter newJsonWriter(Writer writer) throws IOException {\n   }\n \n   /**\n-   * Returns a new JSON writer configured for the settings on this Gson instance.\n+   * Returns a new JSON reader configured for the settings on this Gson instance.\n    */\n   public JsonReader newJsonReader(Reader reader) {\n     JsonReader jsonReader = new JsonReader(reader);",
      "parent_sha": "c101e31c6984c763ffdd786248fda871fdf6aaac"
    }
  },
  {
    "oid": "bcaf56079c25d1bef89394ed1b2e1bdd5aaa392f",
    "message": "Register runtime type adapters using the proper factory-specific APIs.",
    "date": "2011-12-30T06:55:56Z",
    "url": "https://github.com/google/gson/commit/bcaf56079c25d1bef89394ed1b2e1bdd5aaa392f",
    "details": {
      "sha": "a9f8ebbbe76336f29ea3d61e8d369842b27f59fa",
      "filename": "extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactoryTest.java",
      "status": "modified",
      "additions": 12,
      "deletions": 11,
      "changes": 23,
      "blob_url": "https://github.com/google/gson/blob/bcaf56079c25d1bef89394ed1b2e1bdd5aaa392f/extras%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ftypeadapters%2FRuntimeTypeAdapterFactoryTest.java",
      "raw_url": "https://github.com/google/gson/raw/bcaf56079c25d1bef89394ed1b2e1bdd5aaa392f/extras%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ftypeadapters%2FRuntimeTypeAdapterFactoryTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/extras%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ftypeadapters%2FRuntimeTypeAdapterFactoryTest.java?ref=bcaf56079c25d1bef89394ed1b2e1bdd5aaa392f",
      "patch": "@@ -19,6 +19,7 @@\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonParseException;\n+import com.google.gson.TypeAdapterFactory;\n import junit.framework.TestCase;\n \n public final class RuntimeTypeAdapterFactoryTest extends TestCase {\n@@ -28,7 +29,7 @@ public void testRuntimeTypeAdapter() {\n         BillingInstrument.class)\n         .registerSubtype(CreditCard.class);\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(BillingInstrument.class, rta)\n+        .registerTypeAdapterFactory(rta)\n         .create();\n \n     CreditCard original = new CreditCard(\"Jesse\", 234);\n@@ -41,11 +42,11 @@ public void testRuntimeTypeAdapter() {\n   }\n \n   public void testRuntimeTypeIsBaseType() {\n-    RuntimeTypeAdapterFactory<BillingInstrument> rta = RuntimeTypeAdapterFactory.of(\n+    TypeAdapterFactory rta = RuntimeTypeAdapterFactory.of(\n         BillingInstrument.class)\n         .registerSubtype(BillingInstrument.class);\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(BillingInstrument.class, rta)\n+        .registerTypeAdapterFactory(rta)\n         .create();\n \n     BillingInstrument original = new BillingInstrument(\"Jesse\");\n@@ -115,10 +116,10 @@ public void testDuplicateLabel() {\n   }\n \n   public void testDeserializeMissingTypeField() {\n-    Object billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)\n+    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)\n         .registerSubtype(CreditCard.class);\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(BillingInstrument.class, billingAdapter)\n+        .registerTypeAdapterFactory(billingAdapter)\n         .create();\n     try {\n       gson.fromJson(\"{ownerName:'Jesse'}\", BillingInstrument.class);\n@@ -128,10 +129,10 @@ public void testDeserializeMissingTypeField() {\n   }\n \n   public void testDeserializeMissingSubtype() {\n-    Object billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)\n+    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)\n         .registerSubtype(BankTransfer.class);\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(BillingInstrument.class, billingAdapter)\n+        .registerTypeAdapterFactory(billingAdapter)\n         .create();\n     try {\n       gson.fromJson(\"{type:'CreditCard',ownerName:'Jesse'}\", BillingInstrument.class);\n@@ -141,10 +142,10 @@ public void testDeserializeMissingSubtype() {\n   }\n \n   public void testSerializeMissingSubtype() {\n-    Object billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)\n+    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)\n         .registerSubtype(BankTransfer.class);\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(BillingInstrument.class, billingAdapter)\n+        .registerTypeAdapterFactory(billingAdapter)\n         .create();\n     try {\n       gson.toJson(new CreditCard(\"Jesse\", 456), BillingInstrument.class);\n@@ -154,10 +155,10 @@ public void testSerializeMissingSubtype() {\n   }\n \n   public void testSerializeCollidingTypeFieldName() {\n-    Object billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class, \"cvv\")\n+    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class, \"cvv\")\n         .registerSubtype(CreditCard.class);\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(BillingInstrument.class, billingAdapter)\n+        .registerTypeAdapterFactory(billingAdapter)\n         .create();\n     try {\n       gson.toJson(new CreditCard(\"Jesse\", 456), BillingInstrument.class);",
      "parent_sha": "4cb1b88115d1290cacf38436dc3e7ec983e99e5a"
    }
  },
  {
    "oid": "b5343ba96ce0e24c77e7be0efdb111f6fdf999ec",
    "message": "Add tests for enum constant toString() reading (#2080)",
    "date": "2022-02-21T22:53:59Z",
    "url": "https://github.com/google/gson/commit/b5343ba96ce0e24c77e7be0efdb111f6fdf999ec",
    "details": {
      "sha": "bb4f9b3416414c03a9996d45ac9d199c1b3fc3c5",
      "filename": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
      "status": "modified",
      "additions": 48,
      "deletions": 3,
      "changes": 51,
      "blob_url": "https://github.com/google/gson/blob/b5343ba96ce0e24c77e7be0efdb111f6fdf999ec/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FEnumTest.java",
      "raw_url": "https://github.com/google/gson/raw/b5343ba96ce0e24c77e7be0efdb111f6fdf999ec/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FEnumTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FEnumTest.java?ref=b5343ba96ce0e24c77e7be0efdb111f6fdf999ec",
      "patch": "@@ -37,6 +37,7 @@\n import java.util.Map;\n import java.util.Set;\n import junit.framework.TestCase;\n+\n /**\n  * Functional tests for Java 5.0 enums.\n  *\n@@ -174,7 +175,7 @@ public void testEnumMap() throws Exception {\n     assertEquals(expectedMap, actualMap);\n   }\n \n-  public enum Roshambo {\n+  private enum Roshambo {\n     ROCK {\n       @Override Roshambo defeats() {\n         return SCISSORS;\n@@ -206,7 +207,7 @@ private static class MyEnumTypeAdapter\n     }\n   }\n \n-  public enum Gender {\n+  private enum Gender {\n     @SerializedName(\"boy\")\n     MALE,\n \n@@ -217,9 +218,10 @@ public enum Gender {\n   public void testEnumClassWithFields() {\n     assertEquals(\"\\\"RED\\\"\", gson.toJson(Color.RED));\n     assertEquals(\"red\", gson.fromJson(\"RED\", Color.class).value);\n+    assertEquals(2, gson.fromJson(\"BLUE\", Color.class).index);\n   }\n \n-  public enum Color {\n+  private enum Color {\n     RED(\"red\", 1), BLUE(\"blue\", 2), GREEN(\"green\", 3);\n     String value;\n     int index;\n@@ -228,4 +230,47 @@ private Color(String value, int index) {\n       this.index = index;\n     }\n   }\n+\n+  public void testEnumToStringRead() {\n+    // Should still be able to read constant name\n+    assertEquals(CustomToString.A, gson.fromJson(\"\\\"A\\\"\", CustomToString.class));\n+    // Should be able to read toString() value\n+    assertEquals(CustomToString.A, gson.fromJson(\"\\\"test\\\"\", CustomToString.class));\n+\n+    assertNull(gson.fromJson(\"\\\"other\\\"\", CustomToString.class));\n+  }\n+\n+  private enum CustomToString {\n+    A;\n+\n+    @Override\n+    public String toString() {\n+      return \"test\";\n+    }\n+  }\n+\n+  /**\n+   * Test that enum constant names have higher precedence than {@code toString()}\n+   * result.\n+   */\n+  public void testEnumToStringReadInterchanged() {\n+    assertEquals(InterchangedToString.A, gson.fromJson(\"\\\"A\\\"\", InterchangedToString.class));\n+    assertEquals(InterchangedToString.B, gson.fromJson(\"\\\"B\\\"\", InterchangedToString.class));\n+  }\n+\n+  private enum InterchangedToString {\n+    A(\"B\"),\n+    B(\"A\");\n+\n+    private final String toString;\n+\n+    InterchangedToString(String toString) {\n+      this.toString = toString;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return toString;\n+    }\n+  }\n }",
      "parent_sha": "7ee3e2787f45f5453b61a9af6c659993b4eba6d5"
    }
  },
  {
    "oid": "503c20bb392e10fd6ffa9a12afdc33d2ba2d2c38",
    "message": "Rename ReflectiveTypeAdapterFactory field inclusion check method (#2121)",
    "date": "2022-07-21T18:53:52Z",
    "url": "https://github.com/google/gson/commit/503c20bb392e10fd6ffa9a12afdc33d2ba2d2c38",
    "details": {
      "sha": "95d01acebff4be9fce70debff3ef1e80bcde5eb4",
      "filename": "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
      "status": "modified",
      "additions": 3,
      "deletions": 7,
      "changes": 10,
      "blob_url": "https://github.com/google/gson/blob/503c20bb392e10fd6ffa9a12afdc33d2ba2d2c38/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2Fbind%2FReflectiveTypeAdapterFactory.java",
      "raw_url": "https://github.com/google/gson/raw/503c20bb392e10fd6ffa9a12afdc33d2ba2d2c38/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2Fbind%2FReflectiveTypeAdapterFactory.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2Fbind%2FReflectiveTypeAdapterFactory.java?ref=503c20bb392e10fd6ffa9a12afdc33d2ba2d2c38",
      "patch": "@@ -68,11 +68,7 @@ public ReflectiveTypeAdapterFactory(ConstructorConstructor constructorConstructo\n     this.reflectionFilters = reflectionFilters;\n   }\n \n-  public boolean excludeField(Field f, boolean serialize) {\n-    return excludeField(f, serialize, excluder);\n-  }\n-\n-  static boolean excludeField(Field f, boolean serialize, Excluder excluder) {\n+  private boolean includeField(Field f, boolean serialize) {\n     return !excluder.excludeClass(f.getType(), serialize) && !excluder.excludeField(f, serialize);\n   }\n \n@@ -196,8 +192,8 @@ private Map<String, BoundField> getBoundFields(Gson context, TypeToken<?> type,\n       }\n \n       for (Field field : fields) {\n-        boolean serialize = excludeField(field, true);\n-        boolean deserialize = excludeField(field, false);\n+        boolean serialize = includeField(field, true);\n+        boolean deserialize = includeField(field, false);\n         if (!serialize && !deserialize) {\n           continue;\n         }",
      "parent_sha": "010624730b5b66a3bc6d20417013ce5d317169fa"
    }
  },
  {
    "oid": "68f99f2440e93b1f80b241ea575929ffa79b9513",
    "message": "Make EnumTypeAdapter friendly with obfuscation\n\nWhen enum value was obfuscated by proguard, EnumTypeAdapter raise NoSuchFieldException even if apply SerializedName annotation.\nBecause EnumTypeAdapter cannot find obfuscated enum constant field with its name.",
    "date": "2021-08-04T03:02:47Z",
    "url": "https://github.com/google/gson/commit/68f99f2440e93b1f80b241ea575929ffa79b9513",
    "details": {
      "sha": "f44e056a7898db17d17c0ab46c51d4050c0ecdb2",
      "filename": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
      "status": "modified",
      "additions": 13,
      "deletions": 3,
      "changes": 16,
      "blob_url": "https://github.com/google/gson/blob/68f99f2440e93b1f80b241ea575929ffa79b9513/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2Fbind%2FTypeAdapters.java",
      "raw_url": "https://github.com/google/gson/raw/68f99f2440e93b1f80b241ea575929ffa79b9513/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2Fbind%2FTypeAdapters.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2Fbind%2FTypeAdapters.java?ref=68f99f2440e93b1f80b241ea575929ffa79b9513",
      "patch": "@@ -17,6 +17,7 @@\n package com.google.gson.internal.bind;\n \n import java.io.IOException;\n+import java.lang.reflect.Field;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.net.InetAddress;\n@@ -776,9 +777,14 @@ private static final class EnumTypeAdapter<T extends Enum<T>> extends TypeAdapte\n \n     public EnumTypeAdapter(Class<T> classOfT) {\n       try {\n-        for (T constant : classOfT.getEnumConstants()) {\n+        for (Field field : classOfT.getDeclaredFields()) {\n+          if (!field.isEnumConstant()) {\n+            continue;\n+          }\n+          field.setAccessible(true);\n+          T constant = (T)(field.get(null));\n           String name = constant.name();\n-          SerializedName annotation = classOfT.getField(name).getAnnotation(SerializedName.class);\n+          SerializedName annotation = field.getAnnotation(SerializedName.class);\n           if (annotation != null) {\n             name = annotation.value();\n             for (String alternate : annotation.alternate()) {\n@@ -788,7 +794,11 @@ public EnumTypeAdapter(Class<T> classOfT) {\n           nameToConstant.put(name, constant);\n           constantToName.put(constant, name);\n         }\n-      } catch (NoSuchFieldException e) {\n+      } catch (IllegalAccessException e) {\n+        throw new AssertionError(e);\n+      } catch (NullPointerException e) {\n+        throw new AssertionError(e);\n+      } catch (ExceptionInInitializerError e) {\n         throw new AssertionError(e);\n       }\n     }",
      "parent_sha": "63e747f7f4b5d80404e0a0142c92e6bf79769312"
    }
  },
  {
    "oid": "ec5a5e4e1b4680c747fdbc6ddbc1f4488ddcf3ed",
    "message": "Split out the `java.awt.Point` check into its own test method. (#2757)",
    "date": "2024-10-10T14:16:04Z",
    "url": "https://github.com/google/gson/commit/ec5a5e4e1b4680c747fdbc6ddbc1f4488ddcf3ed",
    "details": {
      "sha": "5b50fbe1a99cb5e779d578814d1f05b1ce784200",
      "filename": "gson/src/test/java/com/google/gson/functional/ReflectionAccessFilterTest.java",
      "status": "modified",
      "additions": 14,
      "deletions": 4,
      "changes": 18,
      "blob_url": "https://github.com/google/gson/blob/ec5a5e4e1b4680c747fdbc6ddbc1f4488ddcf3ed/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FReflectionAccessFilterTest.java",
      "raw_url": "https://github.com/google/gson/raw/ec5a5e4e1b4680c747fdbc6ddbc1f4488ddcf3ed/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FReflectionAccessFilterTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FReflectionAccessFilterTest.java?ref=ec5a5e4e1b4680c747fdbc6ddbc1f4488ddcf3ed",
      "patch": "@@ -42,6 +42,7 @@\n import java.util.ArrayList;\n import java.util.LinkedList;\n import java.util.List;\n+import org.junit.AssumptionViolatedException;\n import org.junit.Test;\n \n public class ReflectionAccessFilterTest {\n@@ -57,7 +58,7 @@ public void close() throws IOException {}\n   }\n \n   @Test\n-  public void testBlockInaccessibleJava() throws ReflectiveOperationException {\n+  public void testBlockInaccessibleJava() {\n     Gson gson =\n         new GsonBuilder()\n             .addReflectionAccessFilter(ReflectionAccessFilter.BLOCK_INACCESSIBLE_JAVA)\n@@ -77,14 +78,23 @@ public void testBlockInaccessibleJava() throws ReflectiveOperationException {\n                 + \" permit making it accessible. Register a TypeAdapter for the declaring type,\"\n                 + \" adjust the access filter or increase the visibility of the element and its\"\n                 + \" declaring type.\");\n+  }\n+\n+  @Test\n+  public void testDontBlockAccessibleJava() throws ReflectiveOperationException {\n+    Gson gson =\n+        new GsonBuilder()\n+            .addReflectionAccessFilter(ReflectionAccessFilter.BLOCK_INACCESSIBLE_JAVA)\n+            .create();\n \n-    // But serialization should succeed for classes with only public fields.\n+    // Serialization should succeed for classes with only public fields.\n     // Not many JDK classes have mutable public fields, thank goodness, but java.awt.Point does.\n     Class<?> pointClass;\n     try {\n       pointClass = Class.forName(\"java.awt.Point\");\n-    } catch (ClassNotFoundException ignored) {\n-      return; // If not found then we don't have AWT and the rest of the test can be skipped.\n+    } catch (ClassNotFoundException e) {\n+      // If not found then we don't have AWT and the rest of the test can be skipped.\n+      throw new AssumptionViolatedException(\"java.awt.Point not present\", e);\n     }\n     Constructor<?> pointConstructor = pointClass.getConstructor(int.class, int.class);\n     Object point = pointConstructor.newInstance(1, 2);",
      "parent_sha": "2aff513c5a0582036ede4aea7a2bc8aefb126e55"
    }
  },
  {
    "oid": "759eb8ede50f61fd525f5d703dd9fd45ddae1dcd",
    "message": "Factory always wanted to be public.",
    "date": "2011-08-03T00:17:17Z",
    "url": "https://github.com/google/gson/commit/759eb8ede50f61fd525f5d703dd9fd45ddae1dcd",
    "details": {
      "sha": "8daaedb2b4c9092b9b221ec281e8038fbd3289ad",
      "filename": "extras/src/main/java/com/google/gson/mini/TypeAdapter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/759eb8ede50f61fd525f5d703dd9fd45ddae1dcd/extras%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fmini%2FTypeAdapter.java",
      "raw_url": "https://github.com/google/gson/raw/759eb8ede50f61fd525f5d703dd9fd45ddae1dcd/extras%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fmini%2FTypeAdapter.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/extras%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fmini%2FTypeAdapter.java?ref=759eb8ede50f61fd525f5d703dd9fd45ddae1dcd",
      "patch": "@@ -50,7 +50,7 @@ public final T read(Reader in) throws IOException {\n     return read(reader);\n   }\n \n-  interface Factory {\n+  public interface Factory {\n     <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> type);\n   }\n }",
      "parent_sha": "f127398ad1fa043e0281935d2d8dc8a75d51a91e"
    }
  },
  {
    "oid": "e9600e10cbf677dfc8547288bf96bbe7d1de3d7c",
    "message": "Made GregorianCalendarTypeAdapter consistent with the other default type adapters.",
    "date": "2009-04-01T17:07:23Z",
    "url": "https://github.com/google/gson/commit/e9600e10cbf677dfc8547288bf96bbe7d1de3d7c",
    "details": {
      "sha": "6f9196d167b2796c4a87979384c34f1ca77dc8d5",
      "filename": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/google/gson/blob/e9600e10cbf677dfc8547288bf96bbe7d1de3d7c/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FDefaultTypeAdapters.java",
      "raw_url": "https://github.com/google/gson/raw/e9600e10cbf677dfc8547288bf96bbe7d1de3d7c/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FDefaultTypeAdapters.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FDefaultTypeAdapters.java?ref=e9600e10cbf677dfc8547288bf96bbe7d1de3d7c",
      "patch": "@@ -277,15 +277,16 @@ public String toString() {\n     }\n   }\n \n-  private static class GregorianCalendarTypeAdapter implements JsonSerializer<GregorianCalendar>, \n-      JsonDeserializer<GregorianCalendar> {\n+  private static class GregorianCalendarTypeAdapter \n+      implements JsonSerializer<GregorianCalendar>, JsonDeserializer<GregorianCalendar> {\n \n     private static final String YEAR = \"year\";\n     private static final String MONTH = \"month\";\n     private static final String DAY_OF_MONTH = \"dayOfMonth\";\n     private static final String HOUR_OF_DAY = \"hourOfDay\";\n     private static final String MINUTE = \"minute\";\n     private static final String SECOND = \"second\";\n+\n     public JsonElement serialize(GregorianCalendar src, Type typeOfSrc,\n         JsonSerializationContext context) {\n       JsonObject obj = new JsonObject();\n@@ -308,7 +309,12 @@ public GregorianCalendar deserialize(JsonElement json, Type typeOfT,\n       int minute = obj.get(MINUTE).getAsInt();      \n       int second = obj.get(SECOND).getAsInt();      \n       return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);\n-    }    \n+    }\n+    \n+    @Override\n+    public String toString() {\n+      return GregorianCalendarTypeAdapter.class.getSimpleName();\n+    }\n   }\n   \n   @SuppressWarnings(\"unchecked\")",
      "parent_sha": "149604f0be6c05a822e8b02c1c1f00d87ba515da"
    }
  },
  {
    "oid": "15c2ae7548317a9b21926b63fc4c192a65258e22",
    "message": "Updated map subclass deserialization test to illustrate a failing condition.\nGson currently uses LinkedHashMap for an instance if a Map subclass does not define a default constructor.",
    "date": "2012-03-11T21:37:13Z",
    "url": "https://github.com/google/gson/commit/15c2ae7548317a9b21926b63fc4c192a65258e22",
    "details": {
      "sha": "ff3a7e048717472ed344c95308866bc12010da6d",
      "filename": "gson/src/test/java/com/google/gson/functional/MapTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/google/gson/blob/15c2ae7548317a9b21926b63fc4c192a65258e22/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FMapTest.java",
      "raw_url": "https://github.com/google/gson/raw/15c2ae7548317a9b21926b63fc4c192a65258e22/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FMapTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FMapTest.java?ref=15c2ae7548317a9b21926b63fc4c192a65258e22",
      "patch": "@@ -157,7 +157,7 @@ public void testMapDeserializationWithIntegerKeys() {\n   }\n \n   public void testParameterizedMapSubclassSerialization() {\n-    MyParameterizedMap<String, String> map = new MyParameterizedMap<String, String>();\n+    MyParameterizedMap<String, String> map = new MyParameterizedMap<String, String>(10);\n     map.put(\"a\", \"b\");\n     Type type = new TypeToken<MyParameterizedMap<String, String>>() {}.getType();\n     String json = gson.toJson(map, type);\n@@ -172,11 +172,12 @@ public void testParameterizedMapSubclassDeserialization() {\n     assertEquals(2, map.get(\"b\").intValue());\n   }\n \n+  @SuppressWarnings({ \"unused\", \"serial\" })\n   private static class MyParameterizedMap<K, V> extends LinkedHashMap<K, V> {\n-    private static final long serialVersionUID = 1L;\n-\n-    @SuppressWarnings(\"unused\")\n-    int foo = 10;\n+    final int foo;\n+    MyParameterizedMap(int foo) {\n+      this.foo = foo;\n+    }\n   }\n \n   public void testMapSubclassSerialization() {",
      "parent_sha": "4c629347da72dd07610ebce89a1ec32bcf79ced6"
    }
  },
  {
    "oid": "423d18feb562949841f90b2b3cdc75d8f49c7fc1",
    "message": "Revised test to take into account known problems with JsonElement that holds BigInteger values.",
    "date": "2011-09-29T22:18:16Z",
    "url": "https://github.com/google/gson/commit/423d18feb562949841f90b2b3cdc75d8f49c7fc1",
    "details": {
      "sha": "ac36bc27e2fbbda0d096be94142bbde7658ea669",
      "filename": "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/google/gson/blob/423d18feb562949841f90b2b3cdc75d8f49c7fc1/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonPrimitiveTest.java",
      "raw_url": "https://github.com/google/gson/raw/423d18feb562949841f90b2b3cdc75d8f49c7fc1/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonPrimitiveTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonPrimitiveTest.java?ref=423d18feb562949841f90b2b3cdc75d8f49c7fc1",
      "patch": "@@ -229,7 +229,9 @@ public void testEqualsAcrossTypes() {\n   public void testEqualsIntegerAndBigInteger() {\n     JsonPrimitive a = new JsonPrimitive(5L);\n     JsonPrimitive b = new JsonPrimitive(new BigInteger(\"18446744073709551621\")); // 2^64 + 5\n-    assertFalse(a + \" equals \" + b, a.equals(b));\n+    // Ideally, the following assertion should have failed but the price is too much to pay \n+    // assertFalse(a + \" equals \" + b, a.equals(b));\n+    assertTrue(a + \" equals \" + b, a.equals(b));\n   }\n \n   public void testEqualsDoesNotEquateStringAndNonStringTypes() {",
      "parent_sha": "2541e658f70bc9928b573c33168075786c7fef2f"
    }
  },
  {
    "oid": "457b37f08e3cf81299be9dc1f409eaf9c217a1dc",
    "message": "Replace var-args with single parameter.",
    "date": "2011-04-11T18:09:59Z",
    "url": "https://github.com/google/gson/commit/457b37f08e3cf81299be9dc1f409eaf9c217a1dc",
    "details": {
      "sha": "edc3b5fb0632309fb880618d76ded93649c88c34",
      "filename": "gson/src/main/java/com/google/gson/GsonBuilder.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/google/gson/blob/457b37f08e3cf81299be9dc1f409eaf9c217a1dc/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java",
      "raw_url": "https://github.com/google/gson/raw/457b37f08e3cf81299be9dc1f409eaf9c217a1dc/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java?ref=457b37f08e3cf81299be9dc1f409eaf9c217a1dc",
      "patch": "@@ -56,8 +56,8 @@\n  * <li> the order of invocation of configuration methods does not matter.</li>\n  * <li> The default serialization of {@link Date} and its subclasses in Gson does\n  *  not contain time-zone information. So, if you are using date/time instances,\n- *  use {@code GsonBuilder} and its {@code setDateFormat} methods.</li> \n- *  </ul> \n+ *  use {@code GsonBuilder} and its {@code setDateFormat} methods.</li>\n+ *  </ul>\n  * </p>\n  *\n  * @author Inderjeet Singh\n@@ -360,12 +360,12 @@ public GsonBuilder setExclusionStrategies(ExclusionStrategy... strategies) {\n    * This means that if one of the {@code strategies} suggests that a field (or class) should be\n    * skipped then that field (or object) is skipped during serialization.\n    *\n-   * @param strategies the set of strategy objects to apply during serialization.\n+   * @param strategy an exclusion strategy to apply during serialization.\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n    * @since 1.7\n    */\n-  public GsonBuilder addSerializationExclusionStrategies(ExclusionStrategy... strategies) {\n-    serializeExclusionStrategies.addAll(Arrays.asList(strategies));\n+  public GsonBuilder addSerializationExclusionStrategies(ExclusionStrategy strategy) {\n+    serializeExclusionStrategies.add(strategy);\n     return this;\n   }\n \n@@ -375,12 +375,12 @@ public GsonBuilder addSerializationExclusionStrategies(ExclusionStrategy... stra\n    * This means that if one of the {@code strategies} suggests that a field (or class) should be\n    * skipped then that field (or object) is skipped during deserialization.\n    *\n-   * @param strategies the set of strategy object to apply during deserialization.\n+   * @param strategy an exclusion strategy to apply during deserialization.\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n    * @since 1.7\n    */\n-  public GsonBuilder addDeserializationExclusionStrategies(ExclusionStrategy... strategies) {\n-    deserializeExclusionStrategies.addAll(Arrays.asList(strategies));\n+  public GsonBuilder addDeserializationExclusionStrategies(ExclusionStrategy strategy) {\n+    deserializeExclusionStrategies.add(strategy);\n     return this;\n   }\n   /**",
      "parent_sha": "6b55f071baba057b7817bde645e7145cf2ce24f0"
    }
  },
  {
    "oid": "c13fc568c7cd11dbd53fb78e88479ef818c95cb3",
    "message": "Fixed indentation and simplified equals method as per code review comments on r419",
    "date": "2009-08-18T18:07:25Z",
    "url": "https://github.com/google/gson/commit/c13fc568c7cd11dbd53fb78e88479ef818c95cb3",
    "details": {
      "sha": "b053c66dac6d990a0aae63d993947f412f6a0cd6",
      "filename": "gson/src/main/java/com/google/gson/JsonPrimitive.java",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/google/gson/blob/c13fc568c7cd11dbd53fb78e88479ef818c95cb3/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonPrimitive.java",
      "raw_url": "https://github.com/google/gson/raw/c13fc568c7cd11dbd53fb78e88479ef818c95cb3/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonPrimitive.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonPrimitive.java?ref=c13fc568c7cd11dbd53fb78e88479ef818c95cb3",
      "patch": "@@ -351,13 +351,16 @@ public int hashCode() {\n \n   @Override\n   public boolean equals(Object obj) {\n-    if (this == obj) return true;\n-    if (obj == null) return false;\n-    if (getClass() != obj.getClass()) return false;\n+    if (this == obj) {\n+      return true;\n+    }\n+    if (obj == null || getClass() != obj.getClass()) { \n+      return false;\n+    }\n     JsonPrimitive other = (JsonPrimitive)obj;\n     if (value == null) {\n-      if (other.value != null) return false;\n-    } else if (!value.equals(other.value)) return false;\n-    return true;\n+      return other.value == null;\n+    }\n+    return value.equals(other.value);\n   }  \n }",
      "parent_sha": "f4f596ec3daee1cb1890d4655c7f7ca15b557df3"
    }
  },
  {
    "oid": "dce4e463d95f4fff7cd1808f1d7eafc79ac8eda8",
    "message": "Apply variable name improvement from issue 385.\n\nFixes issue 385.",
    "date": "2011-12-16T04:55:54Z",
    "url": "https://github.com/google/gson/commit/dce4e463d95f4fff7cd1808f1d7eafc79ac8eda8",
    "details": {
      "sha": "3d595cdaf6250742eef07402def4f106c5459556",
      "filename": "extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/google/gson/blob/dce4e463d95f4fff7cd1808f1d7eafc79ac8eda8/extras%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fextras%2Fexamples%2Frawcollections%2FRawCollectionsExample.java",
      "raw_url": "https://github.com/google/gson/raw/dce4e463d95f4fff7cd1808f1d7eafc79ac8eda8/extras%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fextras%2Fexamples%2Frawcollections%2FRawCollectionsExample.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/extras%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fextras%2Fexamples%2Frawcollections%2FRawCollectionsExample.java?ref=dce4e463d95f4fff7cd1808f1d7eafc79ac8eda8",
      "patch": "@@ -23,8 +23,6 @@\n import com.google.gson.JsonParser;\n \n public class RawCollectionsExample {\n-  public static final String json = \"['hello',5,{name:'GREETINGS',source:'guest'}]\";\n-\n   static class Event {\n     private String name;\n     private String source;\n@@ -37,16 +35,16 @@ public String toString() {\n       return String.format(\"(name=%s, source=%s)\", name, source);\n     }\n   }\n-  \n+\n   @SuppressWarnings(\"unchecked\")\n   public static void main(String[] args) {\n     Gson gson = new Gson();\n     Collection collection = new ArrayList();\n     collection.add(\"hello\");\n     collection.add(5);\n     collection.add(new Event(\"GREETINGS\", \"guest\"));\n-    String json2 = gson.toJson(collection);\n-    System.out.println(\"Using Gson.toJson() on a raw collection: \" + json2);\n+    String json = gson.toJson(collection);\n+    System.out.println(\"Using Gson.toJson() on a raw collection: \" + json);\n     JsonParser parser = new JsonParser();\n     JsonArray array = parser.parse(json).getAsJsonArray();\n     String message = gson.fromJson(array.get(0), String.class);",
      "parent_sha": "5acaee4ebcc645c7b5a76a7b37410082e4173aae"
    }
  },
  {
    "oid": "5fc2db9e7266701959129e88aa7ed8baeb493adc",
    "message": "Parity with Gson behavior where we use runtime type of an object while serializing instead of the declared type of the field.",
    "date": "2011-08-04T22:27:25Z",
    "url": "https://github.com/google/gson/commit/5fc2db9e7266701959129e88aa7ed8baeb493adc",
    "details": {
      "sha": "421cac3c45f6fc2a9b9eaaf21178fc7087669eef",
      "filename": "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/google/gson/blob/5fc2db9e7266701959129e88aa7ed8baeb493adc/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2Fbind%2FReflectiveTypeAdapter.java",
      "raw_url": "https://github.com/google/gson/raw/5fc2db9e7266701959129e88aa7ed8baeb493adc/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2Fbind%2FReflectiveTypeAdapter.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2Fbind%2FReflectiveTypeAdapter.java?ref=5fc2db9e7266701959129e88aa7ed8baeb493adc",
      "patch": "@@ -25,8 +25,6 @@\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n-import com.google.gson.FieldAttributes;\n-import com.google.gson.FieldAttributesTest;\n import com.google.gson.internal.$Gson$Types;\n import com.google.gson.internal.UnsafeAllocator;\n import com.google.gson.reflect.TypeToken;\n@@ -138,10 +136,11 @@ static BoundField createBoundField(\n   }\n \n   private static Type getMoreSpecificType(Type type, Object obj, Object fieldValue) {\n-    if (obj != null && (Object.class == type || type instanceof TypeVariable)) {\n-      if (fieldValue != null) {\n-        type = fieldValue.getClass();\n-      }\n+    if (obj == null || fieldValue == null) {\n+      return type;\n+    }\n+    if (type == Object.class || type instanceof TypeVariable || type instanceof Class<?>) {\n+      type = (Class<?>) fieldValue.getClass();\n     }\n     return type;\n   }",
      "parent_sha": "2813385c33c34c3758f4bba863526551add0c58e"
    }
  },
  {
    "oid": "a1471648520e70b3b33e6421ca30796ff3b258a3",
    "message": "incorporated feedback on r721",
    "date": "2011-04-04T21:43:24Z",
    "url": "https://github.com/google/gson/commit/a1471648520e70b3b33e6421ca30796ff3b258a3",
    "details": {
      "sha": "0615a94e42f4aeae805f2ef7051de2b2971f8e4d",
      "filename": "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/google/gson/blob/a1471648520e70b3b33e6421ca30796ff3b258a3/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2FDefaultDateTypeAdapterTest.java",
      "raw_url": "https://github.com/google/gson/raw/a1471648520e70b3b33e6421ca30796ff3b258a3/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2FDefaultDateTypeAdapterTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2FDefaultDateTypeAdapterTest.java?ref=a1471648520e70b3b33e6421ca30796ff3b258a3",
      "patch": "@@ -32,14 +32,14 @@\n public class DefaultDateTypeAdapterTest extends TestCase {\n \n   public void testFormattingInEnUs() {\n-    testFormattingAlwaysEmitsUsLocale(Locale.US);\n+    assertFormattingAlwaysEmitsUsLocale(Locale.US);\n   }\n \n   public void testFormattingInFr() {\n-    testFormattingAlwaysEmitsUsLocale(Locale.FRANCE);\n+    assertFormattingAlwaysEmitsUsLocale(Locale.FRANCE);\n   }\n \n-  private void testFormattingAlwaysEmitsUsLocale(Locale locale) {\n+  private void assertFormattingAlwaysEmitsUsLocale(Locale locale) {\n     TimeZone defaultTimeZone = TimeZone.getDefault();\n     TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n     Locale defaultLocale = Locale.getDefault();",
      "parent_sha": "1a9a54dcc25ccf517f38d427c01f696673512348"
    }
  },
  {
    "oid": "af6307a77f945886dc4e47aab8f18f900f9d188b",
    "message": "Implemented feedback from r607",
    "date": "2010-10-23T19:06:22Z",
    "url": "https://github.com/google/gson/commit/af6307a77f945886dc4e47aab8f18f900f9d188b",
    "details": {
      "sha": "4450e01a462a1c851740012903666a71589d603e",
      "filename": "wsdef/src/main/java/com/google/gson/webservice/definition/rest/MetaData.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/google/gson/blob/af6307a77f945886dc4e47aab8f18f900f9d188b/wsdef%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fwebservice%2Fdefinition%2Frest%2FMetaData.java",
      "raw_url": "https://github.com/google/gson/raw/af6307a77f945886dc4e47aab8f18f900f9d188b/wsdef%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fwebservice%2Fdefinition%2Frest%2FMetaData.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/wsdef%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fwebservice%2Fdefinition%2Frest%2FMetaData.java?ref=af6307a77f945886dc4e47aab8f18f900f9d188b",
      "patch": "@@ -57,7 +57,7 @@ public MetaData() {\n   }\n \n   private MetaData(Map<String, String> values) {\n-    this.map = values;\n+    this.map = values == null ? new HashMap<String, String>() : values;\n     this.mapTransient = new HashMap<Object, Object>();\n   }\n \n@@ -96,7 +96,7 @@ public void removeFromTransient(Object key) {\n \n   @Override\n   public String toString() {\n-    return String.format(\"map:%s, mapTransient:%s\", map, mapTransient);\n+    return new StringBuilder().append(map).append(',').append(mapTransient).toString();\n   }\n \n   /**",
      "parent_sha": "6d9893ddf3653f58eaae0f556f30a7830207a8fa"
    }
  },
  {
    "oid": "ecf137fec344e27cb645e896de58870d95a4263a",
    "message": "More fixes to JavaDoc.",
    "date": "2011-04-11T19:01:07Z",
    "url": "https://github.com/google/gson/commit/ecf137fec344e27cb645e896de58870d95a4263a",
    "details": {
      "sha": "6fc681260524eb99a1fc0598f203174f666b2ffa",
      "filename": "gson/src/main/java/com/google/gson/GsonBuilder.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/google/gson/blob/ecf137fec344e27cb645e896de58870d95a4263a/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java",
      "raw_url": "https://github.com/google/gson/raw/ecf137fec344e27cb645e896de58870d95a4263a/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java?ref=ecf137fec344e27cb645e896de58870d95a4263a",
      "patch": "@@ -355,7 +355,7 @@ public GsonBuilder setExclusionStrategies(ExclusionStrategy... strategies) {\n   }\n \n   /**\n-   * Configures Gson to apply the passed exclusion strategies during serialization.\n+   * Configures Gson to apply the passed in exclusion strategy during serialization.\n    * If this method is invoked numerous times with different exclusion strategy objects\n    * then the exclusion strategies that were added will be applied as a disjunction rule.\n    * This means that if one of the added exclusion strategies suggests that a field (or\n@@ -372,7 +372,7 @@ public GsonBuilder addSerializationExclusionStrategy(ExclusionStrategy strategy)\n   }\n \n   /**\n-   * Configures Gson to apply the passed exclusion strategies during deserialization.\n+   * Configures Gson to apply the passed in exclusion strategy during deserialization.\n    * If this method is invoked numerous times with different exclusion strategy objects\n    * then the exclusion strategies that were added will be applied as a disjunction rule.\n    * This means that if one of the added exclusion strategies suggests that a field (or",
      "parent_sha": "c5c7c5bb649cb875769d1e25ea44435311ca93b4"
    }
  },
  {
    "oid": "edfaf0c387cd0dc42403f8994c3ef4722d2898a9",
    "message": "Add clarifying parentheses to a ternary expression. (#2496)\n\nThe latest Error Prone version issues a warning without the parentheses.\r\nSince we build with `-Werror`, that breaks the build.",
    "date": "2023-09-23T00:43:14Z",
    "url": "https://github.com/google/gson/commit/edfaf0c387cd0dc42403f8994c3ef4722d2898a9",
    "details": {
      "sha": "7095c05a3562f32aa5ed0c4ce0c532b940fdf0cd",
      "filename": "gson/src/main/java/com/google/gson/JsonPrimitive.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/edfaf0c387cd0dc42403f8994c3ef4722d2898a9/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonPrimitive.java",
      "raw_url": "https://github.com/google/gson/raw/edfaf0c387cd0dc42403f8994c3ef4722d2898a9/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonPrimitive.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonPrimitive.java?ref=edfaf0c387cd0dc42403f8994c3ef4722d2898a9",
      "patch": "@@ -285,7 +285,7 @@ public boolean equals(Object obj) {\n       return other.value == null;\n     }\n     if (isIntegral(this) && isIntegral(other)) {\n-      return this.value instanceof BigInteger || other.value instanceof BigInteger\n+      return (this.value instanceof BigInteger || other.value instanceof BigInteger)\n           ? this.getAsBigInteger().equals(other.getAsBigInteger())\n           : this.getAsNumber().longValue() == other.getAsNumber().longValue();\n     }",
      "parent_sha": "e93fda9f17852e8bf029ac052175b40f6555481f"
    }
  },
  {
    "oid": "66d934ba4478035c5abf6b559066ec4a60d82325",
    "message": "Remove already covered condition in JsonNull.equals() (#2271)",
    "date": "2022-12-06T18:43:08Z",
    "url": "https://github.com/google/gson/commit/66d934ba4478035c5abf6b559066ec4a60d82325",
    "details": {
      "sha": "1a4c136c059b7e67f0ccc3a73e45096d7244afff",
      "filename": "gson/src/main/java/com/google/gson/JsonNull.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/66d934ba4478035c5abf6b559066ec4a60d82325/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonNull.java",
      "raw_url": "https://github.com/google/gson/raw/66d934ba4478035c5abf6b559066ec4a60d82325/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonNull.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonNull.java?ref=66d934ba4478035c5abf6b559066ec4a60d82325",
      "patch": "@@ -64,6 +64,6 @@ public int hashCode() {\n    */\r\n   @Override\r\n   public boolean equals(Object other) {\r\n-    return this == other || other instanceof JsonNull;\r\n+    return other instanceof JsonNull;\r\n   }\r\n }\r",
      "parent_sha": "c9c8e8f1bc34eafda7c331862642db79821e393a"
    }
  },
  {
    "oid": "c5611847a3a5a3cbbf3593532318c3027098f518",
    "message": "Gson synchronized map replaced with concurrent hash map",
    "date": "2016-03-04T21:28:25Z",
    "url": "https://github.com/google/gson/commit/c5611847a3a5a3cbbf3593532318c3027098f518",
    "details": {
      "sha": "c0fe235e13d4866fd6e28b14705f52278fe1d37f",
      "filename": "gson/src/main/java/com/google/gson/Gson.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/google/gson/blob/c5611847a3a5a3cbbf3593532318c3027098f518/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "raw_url": "https://github.com/google/gson/raw/c5611847a3a5a3cbbf3593532318c3027098f518/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java?ref=c5611847a3a5a3cbbf3593532318c3027098f518",
      "patch": "@@ -30,6 +30,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicLongArray;\n \n@@ -108,6 +109,7 @@ public final class Gson {\n   static final boolean DEFAULT_COMPLEX_MAP_KEYS = false;\n   static final boolean DEFAULT_SPECIALIZE_FLOAT_VALUES = false;\n \n+  private static final TypeToken<?> NULL_KEY_SURROGATE = new TypeToken<Object>() {};\n   private static final String JSON_NON_EXECUTABLE_PREFIX = \")]}'\\n\";\n \n   /**\n@@ -120,8 +122,7 @@ public final class Gson {\n   private final ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>> calls\n       = new ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>>();\n \n-  private final Map<TypeToken<?>, TypeAdapter<?>> typeTokenCache\n-      = Collections.synchronizedMap(new HashMap<TypeToken<?>, TypeAdapter<?>>());\n+  private final Map<TypeToken<?>, TypeAdapter<?>> typeTokenCache = new ConcurrentHashMap<TypeToken<?>, TypeAdapter<?>>();\n \n   private final List<TypeAdapterFactory> factories;\n   private final ConstructorConstructor constructorConstructor;\n@@ -389,6 +390,9 @@ private static TypeAdapter<AtomicLongArray> atomicLongArrayAdapter(final TypeAda\n    */\n   @SuppressWarnings(\"unchecked\")\n   public <T> TypeAdapter<T> getAdapter(TypeToken<T> type) {\n+    if (type == null) {\n+      type = (TypeToken<T>) NULL_KEY_SURROGATE;\n+    }\n     TypeAdapter<?> cached = typeTokenCache.get(type);\n     if (cached != null) {\n       return (TypeAdapter<T>) cached;",
      "parent_sha": "1f15d76b235b0dbd0880d5589414a6b3e17ca3df"
    }
  },
  {
    "oid": "d38e3974211e89d8e6d74c94178a2db102c0748d",
    "message": "Fix ObjectTest not restoring default Locale (#2050)",
    "date": "2022-01-10T15:18:42Z",
    "url": "https://github.com/google/gson/commit/d38e3974211e89d8e6d74c94178a2db102c0748d",
    "details": {
      "sha": "9fcbd311a000391a6f5e419b6698e08197ecd20d",
      "filename": "gson/src/test/java/com/google/gson/functional/ObjectTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/google/gson/blob/d38e3974211e89d8e6d74c94178a2db102c0748d/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FObjectTest.java",
      "raw_url": "https://github.com/google/gson/raw/d38e3974211e89d8e6d74c94178a2db102c0748d/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FObjectTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FObjectTest.java?ref=d38e3974211e89d8e6d74c94178a2db102c0748d",
      "patch": "@@ -55,22 +55,27 @@\n  */\n public class ObjectTest extends TestCase {\n   private Gson gson;\n-  private TimeZone oldTimeZone = TimeZone.getDefault();\n+  private TimeZone oldTimeZone;\n+  private Locale oldLocale;\n \n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n     gson = new Gson();\n \n+    oldTimeZone = TimeZone.getDefault();\n     TimeZone.setDefault(TimeZone.getTimeZone(\"America/Los_Angeles\"));\n+    oldLocale = Locale.getDefault();\n     Locale.setDefault(Locale.US);\n   }\n \n   @Override\n   protected void tearDown() throws Exception {\n     TimeZone.setDefault(oldTimeZone);\n+    Locale.setDefault(oldLocale);\n     super.tearDown();\n   }\n+\n   public void testJsonInSingleQuotesDeserialization() {\n     String json = \"{'stringValue':'no message','intValue':10,'longValue':20}\";\n     BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);",
      "parent_sha": "4ec67c00a08348bff6abe1a4a285f8a78483ee37"
    }
  },
  {
    "oid": "2ecce944948e63f703e10cd34f4e2f410a7f3921",
    "message": "typo",
    "date": "2015-09-27T10:31:27Z",
    "url": "https://github.com/google/gson/commit/2ecce944948e63f703e10cd34f4e2f410a7f3921",
    "details": {
      "sha": "62bae91c92b6d4412e7e12e43fb8f64183879f53",
      "filename": "gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/2ecce944948e63f703e10cd34f4e2f410a7f3921/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2FConstructorConstructor.java",
      "raw_url": "https://github.com/google/gson/raw/2ecce944948e63f703e10cd34f4e2f410a7f3921/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2FConstructorConstructor.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Finternal%2FConstructorConstructor.java?ref=2ecce944948e63f703e10cd34f4e2f410a7f3921",
      "patch": "@@ -122,7 +122,7 @@ public T construct() {\n \n   /**\n    * Constructors for common interface types like Map and List and their\n-   * subytpes.\n+   * subtypes.\n    */\n   @SuppressWarnings(\"unchecked\") // use runtime checks to guarantee that 'T' is what it is\n   private <T> ObjectConstructor<T> newDefaultImplementationConstructor(",
      "parent_sha": "8e1da9cf1ae18939eace17a147c386723d8fc267"
    }
  },
  {
    "oid": "da8a1feee8b2446abfeb2286f0467ef262f938eb",
    "message": "Added tests for the bugreport http://code.google.com/p/google-gson/issues/detail?id=99",
    "date": "2009-03-03T21:09:07Z",
    "url": "https://github.com/google/gson/commit/da8a1feee8b2446abfeb2286f0467ef262f938eb",
    "details": {
      "sha": "8d41f8cea438b3c88a4276ad65b37a85947bf0ee",
      "filename": "gson/src/test/java/com/google/gson/functional/MapTest.java",
      "status": "modified",
      "additions": 40,
      "deletions": 7,
      "changes": 47,
      "blob_url": "https://github.com/google/gson/blob/da8a1feee8b2446abfeb2286f0467ef262f938eb/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FMapTest.java",
      "raw_url": "https://github.com/google/gson/raw/da8a1feee8b2446abfeb2286f0467ef262f938eb/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FMapTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FMapTest.java?ref=da8a1feee8b2446abfeb2286f0467ef262f938eb",
      "patch": "@@ -16,18 +16,19 @@\n \n package com.google.gson.functional;\n \n-import java.lang.reflect.Type;\n-import java.util.Collection;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-\n-import junit.framework.TestCase;\n-\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.InstanceCreator;\n import com.google.gson.reflect.TypeToken;\n \n+import junit.framework.TestCase;\n+\n+import java.lang.reflect.Type;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n /**\n  * Functional test for Json serialization and deserialization for Maps\n  *\n@@ -192,6 +193,38 @@ public MyMap createInstance(Type type) {\n     assertEquals(\"2\", map.get(\"b\")); \n   }\n   \n+  /**\n+   * Created in response to http://code.google.com/p/google-gson/issues/detail?id=99\n+   */\n+  private static class ClassWithAMap {\n+    Map<String, String> map = new TreeMap<String, String>();\n+  }\n+  \n+  /**\n+   * Created in response to http://code.google.com/p/google-gson/issues/detail?id=99\n+   */\n+  public void testMapSerializationWithNullValues() {\n+    ClassWithAMap target = new ClassWithAMap();\n+    target.map.put(\"name1\", null);\n+    target.map.put(\"name2\", \"value2\");\n+    String json = gson.toJson(target);\n+    assertFalse(json.contains(\"name1\"));\n+    assertTrue(json.contains(\"name2\"));\n+  }\n+  \n+  /**\n+   * Created in response to http://code.google.com/p/google-gson/issues/detail?id=99\n+   */\n+  public void testMapSerializationWithNullValuesSerialized() {\n+    Gson gson = new GsonBuilder().serializeNulls().create();\n+    ClassWithAMap target = new ClassWithAMap();\n+    target.map.put(\"name1\", null);\n+    target.map.put(\"name2\", \"value2\");\n+    String json = gson.toJson(target);\n+    assertTrue(json.contains(\"name1\"));\n+    assertTrue(json.contains(\"name2\"));\n+  }\n+  \n   public void testMapSerializationWithWildcardValues() {\n     Map<String, ? extends Collection<? extends Integer>> map =\n         new LinkedHashMap<String, Collection<Integer>>();",
      "parent_sha": "d4a53ee2fc0f580410ff614d1d57959b1a4cbfc5"
    }
  },
  {
    "oid": "5c6d5a0d119481e7ca61b0884c881c6811d7af86",
    "message": "Remove unneeded exception handling in Gson class.",
    "date": "2009-04-01T19:26:10Z",
    "url": "https://github.com/google/gson/commit/5c6d5a0d119481e7ca61b0884c881c6811d7af86",
    "details": {
      "sha": "6995b0a2a52def8a9a35b94c97a0da413e0aa78e",
      "filename": "gson/src/main/java/com/google/gson/Gson.java",
      "status": "modified",
      "additions": 5,
      "deletions": 11,
      "changes": 16,
      "blob_url": "https://github.com/google/gson/blob/5c6d5a0d119481e7ca61b0884c881c6811d7af86/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "raw_url": "https://github.com/google/gson/raw/5c6d5a0d119481e7ca61b0884c881c6811d7af86/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java?ref=5c6d5a0d119481e7ca61b0884c881c6811d7af86",
      "patch": "@@ -373,17 +373,11 @@ public <T> T fromJson(Reader json, Class<T> classOfT) throws JsonParseException\n    */\n   @SuppressWarnings(\"unchecked\")\n   public <T> T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n-    try {\n-      JsonElement root = new JsonParser().parse(json);\n-      JsonDeserializationContext context = new JsonDeserializationContextDefault(\n-          createDefaultObjectNavigatorFactory(), deserializers, objectConstructor);\n-      T target = (T) context.deserialize(root, typeOfT);\n-      return target;\n-    } catch (StackOverflowError e) {\n-      throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n-    } catch (OutOfMemoryError e) {\n-      throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n-    }\n+    JsonElement root = new JsonParser().parse(json);\n+    JsonDeserializationContext context = new JsonDeserializationContextDefault(\n+        createDefaultObjectNavigatorFactory(), deserializers, objectConstructor);\n+    T target = (T) context.deserialize(root, typeOfT);\n+    return target;\n   }\n \n   /**",
      "parent_sha": "cee6c74960a5176d921eb16458cd053f39833639"
    }
  },
  {
    "oid": "f4185289f64a703b5c696d8f44a17f26bda7f00d",
    "message": "Correct TypeAdapterFactory reference in its Javadoc.",
    "date": "2014-08-09T05:35:33Z",
    "url": "https://github.com/google/gson/commit/f4185289f64a703b5c696d8f44a17f26bda7f00d",
    "details": {
      "sha": "e12a72dccd05d2d6578f7b7e1c116023a78ea624",
      "filename": "gson/src/main/java/com/google/gson/TypeAdapterFactory.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/google/gson/blob/f4185289f64a703b5c696d8f44a17f26bda7f00d/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FTypeAdapterFactory.java",
      "raw_url": "https://github.com/google/gson/raw/f4185289f64a703b5c696d8f44a17f26bda7f00d/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FTypeAdapterFactory.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FTypeAdapterFactory.java?ref=f4185289f64a703b5c696d8f44a17f26bda7f00d",
      "patch": "@@ -28,7 +28,7 @@\n  * that they're defined in {@code CONSTANT_CASE} in the corresponding Java\n  * model: <pre>   {@code\n  *\n- *   public class LowercaseEnumTypeAdapterFactory implements TypeAdapter.Factory {\n+ *   public class LowercaseEnumTypeAdapterFactory implements TypeAdapterFactory {\n  *     public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n  *       Class<T> rawType = (Class<T>) type.getRawType();\n  *       if (!rawType.isEnum()) {\n@@ -102,7 +102,7 @@\n  * multiset's type token. A {@code Gson} is passed in to {@code create} for\n  * just this purpose: <pre>   {@code\n  *\n- *   public class MultisetTypeAdapterFactory implements TypeAdapter.Factory {\n+ *   public class MultisetTypeAdapterFactory implements TypeAdapterFactory {\n  *     public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n  *       Type type = typeToken.getType();\n  *       if (typeToken.getRawType() != Multiset.class",
      "parent_sha": "f1f838cf2030bdc057ef08ebafce08221bd306cb"
    }
  },
  {
    "oid": "0b1ee357841633fb0658064537b873f60a0f0bce",
    "message": "Code review suggestions for r361",
    "date": "2009-01-12T17:10:50Z",
    "url": "https://github.com/google/gson/commit/0b1ee357841633fb0658064537b873f60a0f0bce",
    "details": {
      "sha": "30d6ae039b7dda34d78ec3652036f86f8920da9c",
      "filename": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/0b1ee357841633fb0658064537b873f60a0f0bce/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FDefaultTypeAdapters.java",
      "raw_url": "https://github.com/google/gson/raw/0b1ee357841633fb0658064537b873f60a0f0bce/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FDefaultTypeAdapters.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FDefaultTypeAdapters.java?ref=0b1ee357841633fb0658064537b873f60a0f0bce",
      "patch": "@@ -448,7 +448,7 @@ public Collection createInstance(Type type) {\n     }    \n   }\n   \n-  static class PropertiesCreator implements InstanceCreator<Properties> {\n+  private static class PropertiesCreator implements InstanceCreator<Properties> {\n     public Properties createInstance(Type type) {\n       return new Properties();\n     }    ",
      "parent_sha": "66207866426bed5185760d4a5ae5bfda2f8495ba"
    }
  },
  {
    "oid": "533ea1755d807f75a53c6bb3a2b0d4b8ee9794bc",
    "message": "Fix typo",
    "date": "2011-06-03T19:05:53Z",
    "url": "https://github.com/google/gson/commit/533ea1755d807f75a53c6bb3a2b0d4b8ee9794bc",
    "details": {
      "sha": "b99ab21a581230c1ff32e7625ddd8aad373dbfc0",
      "filename": "gson/src/main/java/com/google/gson/UnsafeAllocator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/533ea1755d807f75a53c6bb3a2b0d4b8ee9794bc/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FUnsafeAllocator.java",
      "raw_url": "https://github.com/google/gson/raw/533ea1755d807f75a53c6bb3a2b0d4b8ee9794bc/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FUnsafeAllocator.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FUnsafeAllocator.java?ref=533ea1755d807f75a53c6bb3a2b0d4b8ee9794bc",
      "patch": "@@ -70,7 +70,7 @@ public <T> T newInstance(Class<T> c) throws Exception {\n     } catch (Exception ignored) {\n     }\n \n-    // try dalvivkm, post-gingerbread\n+    // try dalvikvm, post-gingerbread\n     // public class ObjectStreamClass {\n     //   private static native int getConstructorId(Class<?> c);\n     //   private static native Object newInstance(Class<?> instantiationClass, int methodId);",
      "parent_sha": "c9ee7adcc59f2cb686594b537e336ecc01896a0d"
    }
  },
  {
    "oid": "6e8d3cd65e2777da196513d91b796d3e03e203d1",
    "message": "Created threadsafe implementation of JsonAdapter invocation. Also fixed a bug where runtime generated typeadapters were being carried over from a toJson/fromJson call to the next.",
    "date": "2014-03-09T23:00:53Z",
    "url": "https://github.com/google/gson/commit/6e8d3cd65e2777da196513d91b796d3e03e203d1",
    "details": {
      "sha": "ccdcc2c939b0ea739ff831b430cf76fdee0d6a7a",
      "filename": "gson/src/main/java/com/google/gson/Gson.java",
      "status": "modified",
      "additions": 26,
      "deletions": 3,
      "changes": 29,
      "blob_url": "https://github.com/google/gson/blob/6e8d3cd65e2777da196513d91b796d3e03e203d1/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "raw_url": "https://github.com/google/gson/raw/6e8d3cd65e2777da196513d91b796d3e03e203d1/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java?ref=6e8d3cd65e2777da196513d91b796d3e03e203d1",
      "patch": "@@ -115,6 +115,15 @@ public final class Gson {\n   private final Map<TypeToken<?>, TypeAdapter<?>> typeTokenCache\n       = Collections.synchronizedMap(new HashMap<TypeToken<?>, TypeAdapter<?>>());\n \n+  /** Indicates whether Gson is in the phase of constructor invocation. It is used to determine\n+   * whether to add a constructor in preconfiguredGeneratedTypeAdapter set or not. */\n+  private boolean inConstructorPhase = true;\n+  /** List of type adapters that are generated by Gson during its constructor */\n+  private Set<TypeAdapter<?>> preconfiguredGeneratedTypeAdapters = new HashSet<TypeAdapter<?>>();\n+  /** List of type adapters that are generated by Gson during toJson/fromJson. */\n+  private final ThreadLocal<Set<TypeAdapter<?>>> runtimeGeneratedTypeAdapters =\n+      new ThreadLocal<Set<TypeAdapter<?>>>();\n+\n   private final List<TypeAdapterFactory> factories;\n   private final ConstructorConstructor constructorConstructor;\n \n@@ -245,6 +254,8 @@ public Gson() {\n         constructorConstructor, fieldNamingPolicy, excluder));\n \n     this.factories = Collections.unmodifiableList(factories);\n+    this.preconfiguredGeneratedTypeAdapters = Collections.unmodifiableSet(preconfiguredGeneratedTypeAdapters);\n+    inConstructorPhase = false;\n   }\n \n   private TypeAdapter<Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n@@ -907,13 +918,25 @@ public String toString() {\n         .toString();\n   }\n \n-  private final Set<TypeAdapter<?>> generatedTypeAdapters = new HashSet<TypeAdapter<?>>();\n   public static final class $$Internal {\n     public static void addGeneratedTypeAdapter(Gson gson, TypeAdapter<?> typeAdapter) {\n-      gson.generatedTypeAdapters.add(typeAdapter);\n+      if (gson.inConstructorPhase) {\n+        gson.preconfiguredGeneratedTypeAdapters.add(typeAdapter);\n+      } else {\n+        Set<TypeAdapter<?>> adapters = getRuntimeGeneratedTypeAdapters(gson);\n+        adapters.add(typeAdapter);\n+      }\n     }\n     public static boolean isGeneratedTypeAdapter(Gson gson, TypeAdapter<?> typeAdapter) {\n-      return gson.generatedTypeAdapters.contains(typeAdapter);\n+      boolean generated = gson.preconfiguredGeneratedTypeAdapters.contains(typeAdapter);\n+      if (!generated) generated = getRuntimeGeneratedTypeAdapters(gson).contains(typeAdapter);\n+      return generated;\n+    }\n+    private static Set<TypeAdapter<?>> getRuntimeGeneratedTypeAdapters(Gson gson) {\n+      Set<TypeAdapter<?>> adapters = gson.runtimeGeneratedTypeAdapters.get();\n+      if (adapters == null) adapters = new HashSet<TypeAdapter<?>>();\n+      gson.runtimeGeneratedTypeAdapters.set(adapters);\n+      return adapters;\n     }\n   }\n }",
      "parent_sha": "e280ffd7e2fe14140c9478a546c6f074cf089a13"
    }
  },
  {
    "oid": "d87eed510b9f3e6729d4f50523bde6452a180de7",
    "message": "Fixed compilation problem since we dropped registerTypeHierarchyAdapter method",
    "date": "2010-11-24T23:14:30Z",
    "url": "https://github.com/google/gson/commit/d87eed510b9f3e6729d4f50523bde6452a180de7",
    "details": {
      "sha": "41c4cbc932edd3183f5dc272d5d516b0c72cf66e",
      "filename": "gson/src/test/java/com/google/gson/functional/EnumTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/d87eed510b9f3e6729d4f50523bde6452a180de7/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FEnumTest.java",
      "raw_url": "https://github.com/google/gson/raw/d87eed510b9f3e6729d4f50523bde6452a180de7/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FEnumTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FEnumTest.java?ref=d87eed510b9f3e6729d4f50523bde6452a180de7",
      "patch": "@@ -125,7 +125,7 @@ public void testEnumSubclass() {\n \n   public void disabled_testEnumSubclassWithRegisteredTypeAdapter() {\n     gson = new GsonBuilder()\n-        .registerTypeHierarchyAdapter(Roshambo.class, new MyEnumTypeAdapter())\n+//        .registerTypeHierarchyAdapter(Roshambo.class, new MyEnumTypeAdapter())\n         .create();\n     assertRoshambo();\n   }",
      "parent_sha": "db3f19e881ba7a86faa97e291be874c5405eedda"
    }
  },
  {
    "oid": "1c7aee40f3d0d6f50b3d149e94a2b3b4627ca8a9",
    "message": "Implement Flushable.",
    "date": "2012-06-30T02:46:26Z",
    "url": "https://github.com/google/gson/commit/1c7aee40f3d0d6f50b3d149e94a2b3b4627ca8a9",
    "details": {
      "sha": "627a22f5f12919217cf92317b1714d4ceac21760",
      "filename": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/google/gson/blob/1c7aee40f3d0d6f50b3d149e94a2b3b4627ca8a9/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fstream%2FJsonWriter.java",
      "raw_url": "https://github.com/google/gson/raw/1c7aee40f3d0d6f50b3d149e94a2b3b4627ca8a9/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fstream%2FJsonWriter.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fstream%2FJsonWriter.java?ref=1c7aee40f3d0d6f50b3d149e94a2b3b4627ca8a9",
      "patch": "@@ -17,6 +17,7 @@\n package com.google.gson.stream;\n \n import java.io.Closeable;\n+import java.io.Flushable;\n import java.io.IOException;\n import java.io.Writer;\n import java.util.ArrayList;\n@@ -120,7 +121,7 @@\n  * @author Jesse Wilson\n  * @since 1.6\n  */\n-public class JsonWriter implements Closeable {\n+public class JsonWriter implements Closeable, Flushable {\n \n   /*\n    * From RFC 4627, \"All Unicode characters may be placed within the",
      "parent_sha": "dc4e43bb237c3878d12902e562ac352cbf463333"
    }
  },
  {
    "oid": "63142f621c42817c9a0a948106151bebc11ea8ce",
    "message": "Use the right method name in error messages.\n\nFixes issue 498.",
    "date": "2013-02-04T16:05:00Z",
    "url": "https://github.com/google/gson/commit/63142f621c42817c9a0a948106151bebc11ea8ce",
    "details": {
      "sha": "a54188a678952e60ff5577b78e420cc362cf7f0f",
      "filename": "gson/src/main/java/com/google/gson/Gson.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/63142f621c42817c9a0a948106151bebc11ea8ce/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "raw_url": "https://github.com/google/gson/raw/63142f621c42817c9a0a948106151bebc11ea8ce/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGson.java?ref=63142f621c42817c9a0a948106151bebc11ea8ce",
      "patch": "@@ -295,7 +295,7 @@ private void checkValidFloatingPoint(double value) {\n     if (Double.isNaN(value) || Double.isInfinite(value)) {\n       throw new IllegalArgumentException(value\n           + \" is not a valid double value as per JSON specification. To override this\"\n-          + \" behavior, use GsonBuilder.serializeSpecialDoubleValues() method.\");\n+          + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\");\n     }\n   }\n ",
      "parent_sha": "6a69c603c0686e20cc71d73689080dc9e1239ab8"
    }
  },
  {
    "oid": "3f53e8b223c95d673524ff38ea5c5ac7e054092f",
    "message": "Added tests for Issue 68",
    "date": "2008-10-30T01:45:44Z",
    "url": "https://github.com/google/gson/commit/3f53e8b223c95d673524ff38ea5c5ac7e054092f",
    "details": {
      "sha": "945abeb5f47259185c0cde188074fc01a94e2152",
      "filename": "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
      "status": "modified",
      "additions": 24,
      "deletions": 1,
      "changes": 25,
      "blob_url": "https://github.com/google/gson/blob/3f53e8b223c95d673524ff38ea5c5ac7e054092f/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FNullObjectAndFieldTest.java",
      "raw_url": "https://github.com/google/gson/raw/3f53e8b223c95d673524ff38ea5c5ac7e054092f/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FNullObjectAndFieldTest.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ffunctional%2FNullObjectAndFieldTest.java?ref=3f53e8b223c95d673524ff38ea5c5ac7e054092f",
      "patch": "@@ -82,6 +82,30 @@ public void testExplicitSerializationOfNullArrayMembers() {\n     assertTrue(json.contains(\"\\\"array\\\":null\"));\r\n   }\r\n   \r\n+  /** \r\n+   * Added to verify http://code.google.com/p/google-gson/issues/detail?id=68\r\n+   */\r\n+  public void testNullWrappedPrimitiveMemberSerialization() {\r\n+    Gson gson = gsonBuilder.serializeNulls().create();\r\n+    ClassWithNullWrappedPrimitive target = new ClassWithNullWrappedPrimitive();\r\n+    String json = gson.toJson(target);\r\n+    assertTrue(json.contains(\"\\\"value\\\":null\"));\r\n+  }\r\n+  \r\n+  /** \r\n+   * Added to verify http://code.google.com/p/google-gson/issues/detail?id=68\r\n+   */\r\n+  public void testNullWrappedPrimitiveMemberDeserialization() {\r\n+    Gson gson = gsonBuilder.create();\r\n+    String json = \"{'value':null}\";\r\n+    ClassWithNullWrappedPrimitive target = gson.fromJson(json, ClassWithNullWrappedPrimitive.class);\r\n+    assertNull(target.value);\r\n+  }\r\n+  \r\n+  private static class ClassWithNullWrappedPrimitive {\r\n+    private Long value;\r\n+  }\r\n+  \r\n   public void testExplicitSerializationOfNullCollectionMembers() {\r\n     Gson gson = gsonBuilder.create();\r\n     ClassWithMembers target = new ClassWithMembers();\r\n@@ -119,5 +143,4 @@ public JsonElement serialize(ClassWithObjects src, Type typeOfSrc,\n       return obj;\r\n     }\r\n   }\r\n-  \r\n }\r",
      "parent_sha": "c98d7bc340423a15ee816141066ec9244d3ea2f2"
    }
  },
  {
    "oid": "c9c8e8f1bc34eafda7c331862642db79821e393a",
    "message": "Fix the javadoc of JsonDeserializer.deserialize() (#2243)",
    "date": "2022-12-05T20:59:14Z",
    "url": "https://github.com/google/gson/commit/c9c8e8f1bc34eafda7c331862642db79821e393a",
    "details": {
      "sha": "ca797eee62e7fa431e6328502e26bfbda26ee974",
      "filename": "gson/src/main/java/com/google/gson/JsonDeserializer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/google/gson/blob/c9c8e8f1bc34eafda7c331862642db79821e393a/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonDeserializer.java",
      "raw_url": "https://github.com/google/gson/raw/c9c8e8f1bc34eafda7c331862642db79821e393a/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonDeserializer.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FJsonDeserializer.java?ref=c9c8e8f1bc34eafda7c331862642db79821e393a",
      "patch": "@@ -83,7 +83,7 @@ public interface JsonDeserializer<T> {\n    * <p>In the implementation of this call-back method, you should consider invoking\n    * {@link JsonDeserializationContext#deserialize(JsonElement, Type)} method to create objects\n    * for any non-trivial field of the returned object. However, you should never invoke it on the\n-   * the same type passing {@code json} since that will cause an infinite loop (Gson will call your\n+   * same type passing {@code json} since that will cause an infinite loop (Gson will call your\n    * call-back method again).\n    *\n    * @param json The Json data being deserialized",
      "parent_sha": "e4c3b653a6bdac992d64822796af95ff8e74a625"
    }
  },
  {
    "oid": "b892c859090522526b624ba53b8bd4bb884c2021",
    "message": "Sync RuntimeTypeAdapterFactory to recent internal API changes",
    "date": "2011-10-19T17:49:02Z",
    "url": "https://github.com/google/gson/commit/b892c859090522526b624ba53b8bd4bb884c2021",
    "details": {
      "sha": "8c0dcfa9a47e6e2d634a0596089a605a38980a90",
      "filename": "extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/google/gson/blob/b892c859090522526b624ba53b8bd4bb884c2021/extras%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ftypeadapters%2FRuntimeTypeAdapterFactory.java",
      "raw_url": "https://github.com/google/gson/raw/b892c859090522526b624ba53b8bd4bb884c2021/extras%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ftypeadapters%2FRuntimeTypeAdapterFactory.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/extras%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Ftypeadapters%2FRuntimeTypeAdapterFactory.java?ref=b892c859090522526b624ba53b8bd4bb884c2021",
      "patch": "@@ -179,7 +179,7 @@ public RuntimeTypeAdapterFactory<T> registerSubtype(Class<? extends T> type) {\n     return registerSubtype(type, type.getSimpleName());\n   }\n \n-  @Override public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> type) {\n+  public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> type) {\n     if (type.getRawType() != baseType) {\n       return null;\n     }\n@@ -231,7 +231,7 @@ public RuntimeTypeAdapterFactory<T> registerSubtype(Class<? extends T> type) {\n         for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\n           clone.add(e.getKey(), e.getValue());\n         }\n-        Streams.write(clone, true, writer);\n+        Streams.write(clone, writer);\n       }\n     };\n   }",
      "parent_sha": "0e02cbb33ec43b301b6835a99db020a2df3c6f51"
    }
  },
  {
    "oid": "2aff513c5a0582036ede4aea7a2bc8aefb126e55",
    "message": "Change the use of try to try-with-resources in ParseBenchmark resourceToString() (#2755)\n\nChange the use of try to try-with-resources in ParseBenchmark resourceToString()",
    "date": "2024-10-09T01:49:12Z",
    "url": "https://github.com/google/gson/commit/2aff513c5a0582036ede4aea7a2bc8aefb126e55",
    "details": {
      "sha": "a1d06212f8e96f7adf3ca62ee22dd8cd27b8fef3",
      "filename": "metrics/src/main/java/com/google/gson/metrics/ParseBenchmark.java",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/google/gson/blob/2aff513c5a0582036ede4aea7a2bc8aefb126e55/metrics%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fmetrics%2FParseBenchmark.java",
      "raw_url": "https://github.com/google/gson/raw/2aff513c5a0582036ede4aea7a2bc8aefb126e55/metrics%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fmetrics%2FParseBenchmark.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/metrics%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2Fmetrics%2FParseBenchmark.java?ref=2aff513c5a0582036ede4aea7a2bc8aefb126e55",
      "patch": "@@ -145,8 +145,7 @@ private static File getResourceFile(String path) throws Exception {\n   }\n \n   private static String resourceToString(String fileName) throws Exception {\n-    ZipFile zipFile = new ZipFile(getResourceFile(\"/ParseBenchmarkData.zip\"));\n-    try {\n+    try (ZipFile zipFile = new ZipFile(getResourceFile(\"/ParseBenchmarkData.zip\"))) {\n       ZipEntry zipEntry = zipFile.getEntry(fileName);\n       Reader reader =\n           new InputStreamReader(zipFile.getInputStream(zipEntry), StandardCharsets.UTF_8);\n@@ -158,9 +157,6 @@ private static String resourceToString(String fileName) throws Exception {\n       }\n       reader.close();\n       return writer.toString();\n-\n-    } finally {\n-      zipFile.close();\n     }\n   }\n ",
      "parent_sha": "48894530f1094f76b6cc0ea7c6b7e3df644578ac"
    }
  },
  {
    "oid": "2f0fbf6bcc32f5931d1ae93b7201aaec0c07da6d",
    "message": "deleted code that didnt really do anything as there are no default old-style type adapters.",
    "date": "2011-09-26T17:45:06Z",
    "url": "https://github.com/google/gson/commit/2f0fbf6bcc32f5931d1ae93b7201aaec0c07da6d",
    "details": {
      "sha": "6c37ad3c8a30ac53db0340c28b91fcf50c7a9dbd",
      "filename": "gson/src/main/java/com/google/gson/GsonBuilder.java",
      "status": "modified",
      "additions": 7,
      "deletions": 10,
      "changes": 17,
      "blob_url": "https://github.com/google/gson/blob/2f0fbf6bcc32f5931d1ae93b7201aaec0c07da6d/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java",
      "raw_url": "https://github.com/google/gson/raw/2f0fbf6bcc32f5931d1ae93b7201aaec0c07da6d/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java?ref=2f0fbf6bcc32f5931d1ae93b7201aaec0c07da6d",
      "patch": "@@ -16,10 +16,6 @@\n \n package com.google.gson;\n \n-import com.google.gson.DefaultTypeAdapters.DefaultDateTypeAdapter;\n-import com.google.gson.internal.$Gson$Preconditions;\n-import com.google.gson.internal.ParameterizedTypeHandlerMap;\n-import com.google.gson.internal.Primitives;\n import java.lang.reflect.Type;\n import java.sql.Timestamp;\n import java.text.DateFormat;\n@@ -30,6 +26,11 @@\n import java.util.List;\n import java.util.Set;\n \n+import com.google.gson.DefaultTypeAdapters.DefaultDateTypeAdapter;\n+import com.google.gson.internal.$Gson$Preconditions;\n+import com.google.gson.internal.ParameterizedTypeHandlerMap;\n+import com.google.gson.internal.Primitives;\n+\n /**\n  * <p>Use this builder to construct a {@link Gson} instance when you need to set configuration\n  * options other than the default. For {@link Gson} with default configuration, it is simpler to\n@@ -674,20 +675,16 @@ public Gson create() {\n     addTypeAdaptersForDate(datePattern, dateStyle, timeStyle, customSerializers,\n         customDeserializers);\n \n-    customSerializers.registerIfAbsent(DefaultTypeAdapters.DEFAULT_SERIALIZERS);\n-    customDeserializers.registerIfAbsent(DefaultTypeAdapters.DEFAULT_DESERIALIZERS);\n-\n     ParameterizedTypeHandlerMap<InstanceCreator<?>> customInstanceCreators =\n         instanceCreators.copyOf();\n-    customInstanceCreators.registerIfAbsent(DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS);\n \n     customSerializers.makeUnmodifiable();\n     customDeserializers.makeUnmodifiable();\n-    instanceCreators.makeUnmodifiable();\n+    customInstanceCreators.makeUnmodifiable();\n \n     return new Gson(new DisjunctionExclusionStrategy(deserializationStrategies),\n         new DisjunctionExclusionStrategy(serializationStrategies),\n-        fieldNamingPolicy, instanceCreators, serializeNulls,\n+        fieldNamingPolicy, customInstanceCreators, serializeNulls,\n         customSerializers, customDeserializers, complexMapKeySerialization,\n         generateNonExecutableJson, escapeHtmlChars, prettyPrinting,\n         serializeSpecialFloatingPointValues, longSerializationPolicy);",
      "parent_sha": "c1bac6debf8ce1f5f76346b6cef6bbe06996bc7c"
    }
  },
  {
    "oid": "f923f7f537d019728fc4eda0fa7e9a7af2c920ee",
    "message": "Add \"@since\" JavaDoc to the new methods in GsonBuilder.",
    "date": "2008-12-28T03:35:07Z",
    "url": "https://github.com/google/gson/commit/f923f7f537d019728fc4eda0fa7e9a7af2c920ee",
    "details": {
      "sha": "8382d0d2f9a6cd95e502ce849edc97b68565a9da",
      "filename": "gson/src/main/java/com/google/gson/GsonBuilder.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/google/gson/blob/f923f7f537d019728fc4eda0fa7e9a7af2c920ee/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java",
      "raw_url": "https://github.com/google/gson/raw/f923f7f537d019728fc4eda0fa7e9a7af2c920ee/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java",
      "contents_url": "https://api.github.com/repos/google/gson/contents/gson%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgoogle%2Fgson%2FGsonBuilder.java?ref=f923f7f537d019728fc4eda0fa7e9a7af2c920ee",
      "patch": "@@ -153,6 +153,7 @@ public GsonBuilder serializeNulls() {\n    * @param value the boolean value on whether or not {@code Gson} should serialize a {@code long}\n    * field as a {@code String}\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n+   * @since 1.3\n    */\n   public GsonBuilder serializeLongFieldsAsString(boolean value) {\n     serializeLongAsString = value;\n@@ -164,6 +165,7 @@ public GsonBuilder serializeLongFieldsAsString(boolean value) {\n    *\n    * @param value the boolean value on whether or not {@code Gson} should serialize inner classes\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n+   * @since 1.3\n    */\n   public GsonBuilder serializeInnerClasses(boolean value) {\n     serializeInnerClasses = value;\n@@ -372,7 +374,7 @@ private <T> GsonBuilder registerDeserializer(Type typeOfT, JsonDeserializer<T> d\n    * values.   \n    * \n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n-   * @Since 1.3\n+   * @since 1.3\n    */\n   public GsonBuilder serializeSpecialFloatingPointValues() {\n     this.serializeSpecialFloatingPointValues = true;",
      "parent_sha": "458f2baa2f79bbfe78d3db3dfa1dd7866d7cf7a9"
    }
  }
]