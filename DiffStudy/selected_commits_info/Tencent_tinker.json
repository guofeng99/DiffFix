[
  {
    "oid": "36e1bb0fb396fbfff091a3105c78ca6b3e24c526",
    "message": "[tinker] refactor: make the meaning of oatModeChanged more clear.",
    "date": "2018-10-29T08:43:40Z",
    "url": "https://github.com/Tencent/tinker/commit/36e1bb0fb396fbfff091a3105c78ca6b3e24c526",
    "details": {
      "sha": "a00092120add9ff535ec2e8d929987b92fbba684",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/Tencent/tinker/blob/36e1bb0fb396fbfff091a3105c78ca6b3e24c526/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerLoader.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/36e1bb0fb396fbfff091a3105c78ca6b3e24c526/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerLoader.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerLoader.java?ref=36e1bb0fb396fbfff091a3105c78ca6b3e24c526",
      "patch": "@@ -127,7 +127,7 @@ private void tryLoadPatchFilesInternal(TinkerApplication app, Intent resultInten\n \n         boolean mainProcess = ShareTinkerInternals.isInMainProcess(app);\n         boolean versionChanged = !(oldVersion.equals(newVersion));\n-        boolean oatModeChanged = oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH) && mainProcess;\n+        boolean oatModeChanged = oatDex.equals(ShareConstants.CHANING_DEX_OPTIMIZE_PATH);\n         oatDex = ShareTinkerInternals.getCurrentOatMode(app, oatDex);\n         resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_OAT_DIR, oatDex);\n \n@@ -229,8 +229,7 @@ private void tryLoadPatchFilesInternal(TinkerApplication app, Intent resultInten\n         resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA, isSystemOTA);\n \n         //we should first try rewrite patch info file, if there is a error, we can't load jar\n-        if ((mainProcess && versionChanged)\n-             || oatModeChanged) {\n+        if (mainProcess && (versionChanged || oatModeChanged)) {\n             patchInfo.oldVersion = version;\n             patchInfo.oatDir = oatDex;\n ",
      "parent_sha": "f88d3b409b55c81e2f03375591df6364ae113ee3"
    }
  },
  {
    "oid": "59f89b11a2ff91aa682f749692116cd3a3fd6eed",
    "message": "[tinker] correct the conditional expression in AndroidNClassLoader.findClass.",
    "date": "2017-04-07T08:37:13Z",
    "url": "https://github.com/Tencent/tinker/commit/59f89b11a2ff91aa682f749692116cd3a3fd6eed",
    "details": {
      "sha": "f481ae3095eedc720520a00ea45456bcc512dded",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/AndroidNClassLoader.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/Tencent/tinker/blob/59f89b11a2ff91aa682f749692116cd3a3fd6eed/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/59f89b11a2ff91aa682f749692116cd3a3fd6eed/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java?ref=59f89b11a2ff91aa682f749692116cd3a3fd6eed",
      "patch": "@@ -24,16 +24,16 @@\n \n import com.tencent.tinker.loader.shareutil.ShareReflectUtil;\n \n+import dalvik.system.DexFile;\n+import dalvik.system.PathClassLoader;\n+\n import java.io.File;\n import java.io.IOException;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n \n-import dalvik.system.DexFile;\n-import dalvik.system.PathClassLoader;\n-\n /**\n  * Created by zhangshaowen on 16/7/24.\n  */\n@@ -168,8 +168,8 @@ public Class<?> findClass(String name) throws ClassNotFoundException {\n         // loader class use default pathClassloader to load\n         if ((name != null\n                 && name.startsWith(\"com.tencent.tinker.loader.\")\n-                && !name.equals(SystemClassLoaderAdder.CHECK_DEX_CLASS))\n-                && !name.equals(CHECK_CLASSLOADER_CLASS)\n+                && !name.equals(SystemClassLoaderAdder.CHECK_DEX_CLASS)\n+                && !name.equals(CHECK_CLASSLOADER_CLASS))\n                 || (applicationClassName != null && TextUtils.equals(applicationClassName, name))) {\n             return originClassLoader.loadClass(name);\n         }",
      "parent_sha": "2c104387295f556967df50c6bc82704bd5a136c4"
    }
  },
  {
    "oid": "c289280831cb4ec9d89901ba3702311350f052eb",
    "message": "[tinker] Avoid odex checking on MeiZu devices since it would not generate odex when load dex first time.",
    "date": "2020-05-07T05:02:06Z",
    "url": "https://github.com/Tencent/tinker/commit/c289280831cb4ec9d89901ba3702311350f052eb",
    "details": {
      "sha": "6287623c492ab979c4453a230dd200a1b3350619",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/SharePatchFileUtil.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/Tencent/tinker/blob/c289280831cb4ec9d89901ba3702311350f052eb/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FSharePatchFileUtil.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/c289280831cb4ec9d89901ba3702311350f052eb/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FSharePatchFileUtil.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FSharePatchFileUtil.java?ref=c289280831cb4ec9d89901ba3702311350f052eb",
      "patch": "@@ -179,7 +179,8 @@ public static final boolean isLegalFile(File file) {\n     public static final boolean shouldAcceptEvenIfIllegal(File file) {\n         final boolean isSpecialManufacturer =\n                 \"vivo\".equalsIgnoreCase(Build.MANUFACTURER)\n-             || \"oppo\".equalsIgnoreCase(Build.MANUFACTURER);\n+             || \"oppo\".equalsIgnoreCase(Build.MANUFACTURER)\n+             || \"meizu\".equalsIgnoreCase(Build.MANUFACTURER);\n \n         final boolean isSpecialOSVer =\n                 (Build.VERSION.SDK_INT >= 29)",
      "parent_sha": "2d12435f96c0a670c61f551554f995a07de400e1"
    }
  },
  {
    "oid": "8528e47b1f1552a6af0a8bc96ba916a6d0c74c96",
    "message": "[tinker] fix failure to create proxy binder on some ROMs.",
    "date": "2017-12-05T02:54:41Z",
    "url": "https://github.com/Tencent/tinker/commit/8528e47b1f1552a6af0a8bc96ba916a6d0c74c96",
    "details": {
      "sha": "25212bf612499af92e35e57a989e9766bfb73080",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/hotplug/interceptor/ServiceBinderInterceptor.java",
      "status": "modified",
      "additions": 29,
      "deletions": 12,
      "changes": 41,
      "blob_url": "https://github.com/Tencent/tinker/blob/8528e47b1f1552a6af0a8bc96ba916a6d0c74c96/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fhotplug%2Finterceptor%2FServiceBinderInterceptor.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/8528e47b1f1552a6af0a8bc96ba916a6d0c74c96/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fhotplug%2Finterceptor%2FServiceBinderInterceptor.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fhotplug%2Finterceptor%2FServiceBinderInterceptor.java?ref=8528e47b1f1552a6af0a8bc96ba916a6d0c74c96",
      "patch": "@@ -27,7 +27,6 @@\n \n public class ServiceBinderInterceptor extends Interceptor<IBinder> {\n     private static final String TAG = \"Tinker.SvcBndrIntrcptr\";\n-    private static final ClassLoader MY_CLASSLOADER = ServiceBinderInterceptor.class.getClassLoader();\n \n     private final Context mBaseContext;\n     private final String mServiceName;\n@@ -76,7 +75,7 @@ protected IBinder decorate(@Nullable IBinder target) throws Throwable {\n             // Already intercepted, just return the target.\n             return target;\n         } else {\n-            return createProxy(target.getClass().getClassLoader(), getAllInterfacesThroughDeriveChain(target.getClass()),\n+            return createProxy(getAllInterfacesThroughDeriveChain(target.getClass()),\n                     new FakeClientBinderHandler(target, mBinderInvocationHandler));\n         }\n     }\n@@ -145,20 +144,39 @@ private static void fixPMSBinderCache(Context context, IBinder fakeBinder) throw\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private static <T> T createProxy(ClassLoader cl, Class<?>[] itfs, InvocationHandler handler) {\n+    private static <T> T createProxy(Class<?>[] itfs, InvocationHandler handler) {\n         final Class<?>[] mergedItfs = new Class<?>[itfs.length + 1];\n         System.arraycopy(itfs, 0, mergedItfs, 0, itfs.length);\n         mergedItfs[itfs.length] = ITinkerHotplugProxy.class;\n+        ClassLoader cl = null;\n         try {\n-            return (T) Proxy.newProxyInstance(MY_CLASSLOADER, mergedItfs, handler);\n+            cl = Thread.currentThread().getContextClassLoader();\n+            return (T) Proxy.newProxyInstance(cl, mergedItfs, handler);\n         } catch (Throwable thr) {\n-            if (cl != null && cl != MY_CLASSLOADER) {\n-                try {\n-                    return (T) Proxy.newProxyInstance(cl, mergedItfs, handler);\n-                } catch (Throwable thr2) {\n-                    throw new RuntimeException(\"cl: \" + cl, thr);\n-                }\n+            final Set<ClassLoader> uniqueCls = new HashSet<>(4);\n+            for (Class<?> itf : mergedItfs) {\n+                uniqueCls.add(itf.getClassLoader());\n+            }\n+            if (uniqueCls.size() == 1) {\n+                cl = uniqueCls.iterator().next();\n             } else {\n+                cl = new ClassLoader() {\n+                    @Override\n+                    protected Class<?> loadClass(String className, boolean resolve)\n+                            throws ClassNotFoundException {\n+                        for (ClassLoader cl : uniqueCls) {\n+                            final Class<?> res = cl.loadClass(className);\n+                            if (res != null) {\n+                                return res;\n+                            }\n+                        }\n+                        throw new ClassNotFoundException(\"cannot find class: \" + className);\n+                    }\n+                };\n+            }\n+            try {\n+                return (T) Proxy.newProxyInstance(cl, mergedItfs, handler);\n+            } catch (Throwable thr2) {\n                 throw new RuntimeException(\"cl: \" + cl, thr);\n             }\n         }\n@@ -209,8 +227,7 @@ public Object invoke(Object fakeClientBinder, Method method, Object[] args) thro\n                 final InvocationHandler fakeInterfaceHandler\n                         = new FakeInterfaceHandler(originalInterface, (IBinder) fakeClientBinder, mBinderInvocationHandler);\n \n-                return createProxy(originalInterface.getClass().getClassLoader(),\n-                        getAllInterfacesThroughDeriveChain(originalInterface.getClass()), fakeInterfaceHandler);\n+                return createProxy(getAllInterfacesThroughDeriveChain(originalInterface.getClass()), fakeInterfaceHandler);\n             } else {\n                 return method.invoke(mOriginalClientBinder, args);\n             }",
      "parent_sha": "11cbdf931aea2ef12bd10f0bff14ab802f4e1098"
    }
  },
  {
    "oid": "50c2dc2135bfe2cc36b1f6295e6c20ae2cdfcbbe",
    "message": "[tinker] Reduce buffer size.",
    "date": "2022-08-17T10:09:53Z",
    "url": "https://github.com/Tencent/tinker/commit/50c2dc2135bfe2cc36b1f6295e6c20ae2cdfcbbe",
    "details": {
      "sha": "2d15523cbe8fe843ef371c7e4edb1ca966062cb7",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareConstants.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/Tencent/tinker/blob/50c2dc2135bfe2cc36b1f6295e6c20ae2cdfcbbe/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FShareConstants.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/50c2dc2135bfe2cc36b1f6295e6c20ae2cdfcbbe/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FShareConstants.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FShareConstants.java?ref=50c2dc2135bfe2cc36b1f6295e6c20ae2cdfcbbe",
      "patch": "@@ -26,9 +26,9 @@\n public class ShareConstants {\n     public static final String TINKER_VERSION = BuildConfig.TINKER_VERSION;\n \n-    public static final int BUFFER_SIZE         = 16384;\n+    public static final int BUFFER_SIZE         = 4096 * 1;\n     public static final int MD5_LENGTH          = 32;\n-    public static final int MD5_FILE_BUF_LENGTH = 1024 * 100;\n+    public static final int MD5_FILE_BUF_LENGTH = 4096 * 1;\n \n     public static final int MAX_EXTRACT_ATTEMPTS = 2;\n ",
      "parent_sha": "457ed04e885708b4b4d6a57f3a15546758ef0f7d"
    }
  },
  {
    "oid": "bc800c9ce5198cc4bb44f38527d3747b1ab15db5",
    "message": "[tinker] Bugfix issue #127",
    "date": "2016-10-20T19:36:03Z",
    "url": "https://github.com/Tencent/tinker/commit/bc800c9ce5198cc4bb44f38527d3747b1ab15db5",
    "details": {
      "sha": "a74cfea6c2bb1790b0b4ed373313a97e4265c5ad",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/auxiliaryclass/AuxiliaryClassInjector.java",
      "status": "modified",
      "additions": 36,
      "deletions": 9,
      "changes": 45,
      "blob_url": "https://github.com/Tencent/tinker/blob/bc800c9ce5198cc4bb44f38527d3747b1ab15db5/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fauxiliaryclass%2FAuxiliaryClassInjector.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/bc800c9ce5198cc4bb44f38527d3747b1ab15db5/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fauxiliaryclass%2FAuxiliaryClassInjector.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fauxiliaryclass%2FAuxiliaryClassInjector.java?ref=bc800c9ce5198cc4bb44f38527d3747b1ab15db5",
      "patch": "@@ -31,6 +31,8 @@\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipInputStream;\n import java.util.zip.ZipOutputStream;\n@@ -82,29 +84,54 @@ private static void processJarHelper(File jarIn, File jarOut, ProcessJarCallback\n             zis = new ZipInputStream(new BufferedInputStream(new FileInputStream(jarIn)), charsetIn);\n             zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(jarOut)), charsetOut);\n             ZipEntry entryIn = null;\n+            Map<String, Integer> processedEntryNamesMap = new HashMap<>();\n             while ((entryIn = zis.getNextEntry()) != null) {\n                 final String entryName = entryIn.getName();\n-                ZipEntry entryOut = new ZipEntry(entryName);\n-                zos.putNextEntry(entryOut);\n-                if (!entryIn.isDirectory()) {\n-                    if (entryName.endsWith(\".class\")) {\n-                        if (cb == null || cb.onProcessClassEntry(entryName)) {\n-                            processClass(zis, zos);\n+                ZipEntry entryOut = new ZipEntry(entryIn);\n+                entryOut.setCompressedSize(-1);\n+                if (!processedEntryNamesMap.containsKey(entryName)) {\n+                    zos.putNextEntry(entryOut);\n+                    if (!entryIn.isDirectory()) {\n+                        if (entryName.endsWith(\".class\")) {\n+                            if (cb == null || cb.onProcessClassEntry(entryName)) {\n+                                processClass(zis, zos);\n+                            } else {\n+                                Streams.copy(zis, zos);\n+                            }\n                         } else {\n                             Streams.copy(zis, zos);\n                         }\n-                    } else {\n-                        Streams.copy(zis, zos);\n                     }\n+                    zos.closeEntry();\n+                    processedEntryNamesMap.put(entryName, 1);\n+                } else {\n+                    int duplicateCount = processedEntryNamesMap.get(entryName);\n+                    final String wrapperJarName\n+                            = jarOut.getName().substring(0, jarOut.getName().lastIndexOf(\".jar\"))\n+                            + \"_dup_ew_\" + duplicateCount + \".jar\";\n+                    File wrapperJarOut = new File(jarOut.getParentFile(), wrapperJarName);\n+                    wrapEntryByJar(entryOut, zis, wrapperJarOut);\n+                    processedEntryNamesMap.put(entryName, duplicateCount + 1);\n                 }\n-                zos.closeEntry();\n             }\n         } finally {\n             closeQuietly(zos);\n             closeQuietly(zis);\n         }\n     }\n \n+    private static void wrapEntryByJar(ZipEntry ze, InputStream eData, File jarOut) throws IOException {\n+        ZipOutputStream zos = null;\n+        try {\n+            zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(jarOut)));\n+            zos.putNextEntry(ze);\n+            Streams.copy(eData, zos);\n+            zos.closeEntry();\n+        } finally {\n+            closeQuietly(zos);\n+        }\n+    }\n+\n     private static void processClass(InputStream classIn, OutputStream classOut) throws IOException {\n         ClassReader cr = new ClassReader(classIn);\n         ClassWriter cw = new ClassWriter(0);",
      "parent_sha": "3af6eda653aea01284e1835b27df0d8e2483ad6f"
    }
  },
  {
    "oid": "643f7143c385b91dfe7100d3788960ba514fc07b",
    "message": "Only skip dexes which is not belong to our app to support enhancement frameworks.",
    "date": "2019-08-28T10:10:36Z",
    "url": "https://github.com/Tencent/tinker/commit/643f7143c385b91dfe7100d3788960ba514fc07b",
    "details": {
      "sha": "2197e67b929d847ebad4ba83e8a5510a9f9259ae",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/AndroidNClassLoader.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/Tencent/tinker/blob/643f7143c385b91dfe7100d3788960ba514fc07b/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/643f7143c385b91dfe7100d3788960ba514fc07b/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java?ref=643f7143c385b91dfe7100d3788960ba514fc07b",
      "patch": "@@ -41,10 +41,10 @@ class AndroidNClassLoader extends PathClassLoader {\n     private static final String TAG = \"Tinker.NClassLoader\";\n \n     private static Object oldDexPathListHolder = null;\n-    private static String baseApkFullPath = null;\n+    private static String packageName = \"\";\n \n     private final ClassLoader originClassLoader;\n-    private String applicationClassName;\n+    private String applicationClassName = \"\";\n \n     private AndroidNClassLoader(String dexPath, ClassLoader parent, Application application) {\n         super(dexPath, parent.getParent());\n@@ -53,7 +53,7 @@ private AndroidNClassLoader(String dexPath, ClassLoader parent, Application appl\n         if (name != null && !name.equals(\"android.app.Application\")) {\n             applicationClassName = name;\n         }\n-        baseApkFullPath = application.getPackageCodePath();\n+        packageName = application.getPackageName();\n     }\n \n     private AndroidNClassLoader(String dexPath, ClassLoader parent) {\n@@ -81,7 +81,10 @@ private static Object recreateDexPathList(Object originalDexPathList, ClassLoade\n             if (dexFile == null || dexFile.getName() == null) {\n                 continue;\n             }\n-            if (!dexFile.getName().equals(baseApkFullPath)) {\n+            // Skip dexes which is not belong to our app.\n+            // Then patched dexes would be injected in SystemClassLoaderAdder class.\n+            final String dexFileName = dexFile.getName();\n+            if (!dexFileName.contains(\"/\" + packageName)) {\n                 continue;\n             }\n             if (isFirstItem) {",
      "parent_sha": "b82be64be130954f4ef30bd62577c2f017a59b9d"
    }
  },
  {
    "oid": "0eab4f815bbfe026e12d662d7552ce4df3a41dab",
    "message": "[tinker] Trigger dex2oat by calling registerDexModule on Huawei and Honor device.",
    "date": "2022-03-21T08:07:03Z",
    "url": "https://github.com/Tencent/tinker/commit/0eab4f815bbfe026e12d662d7552ce4df3a41dab",
    "details": {
      "sha": "212be0cb491bf324089638b3faaa77c14c0cb852",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/Tencent/tinker/blob/0eab4f815bbfe026e12d662d7552ce4df3a41dab/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/0eab4f815bbfe026e12d662d7552ce4df3a41dab/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java?ref=0eab4f815bbfe026e12d662d7552ce4df3a41dab",
      "patch": "@@ -269,10 +269,7 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n                 ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Error.\");\n             }\n             SystemClock.sleep(3000);\n-            if (!ShareTinkerInternals.isNewerOrEqualThanVersion(31, true)\n-                    && (\"huawei\".equalsIgnoreCase(Build.MANUFACTURER)\n-                        || \"honor\".equalsIgnoreCase(Build.MANUFACTURER))\n-            ) {\n+            if (\"huawei\".equalsIgnoreCase(Build.MANUFACTURER) || \"honor\".equalsIgnoreCase(Build.MANUFACTURER)) {\n                 try {\n                     registerDexModule(context, dexPath);\n                     if (SharePatchFileUtil.isLegalFile(oatFile)) {",
      "parent_sha": "0bd84fbf2bb94355fd41042612064c68d425704a"
    }
  },
  {
    "oid": "6ed617c2b6995041225736e221badee5d61f5029",
    "message": "[tinker] Avoid NPE while calling TinkerApplication of loader-nop library before applicationLike instance was created.",
    "date": "2020-08-24T13:23:21Z",
    "url": "https://github.com/Tencent/tinker/commit/6ed617c2b6995041225736e221badee5d61f5029",
    "details": {
      "sha": "18dd1c7b2b843fb22f4a5983cc9a8b53e757739d",
      "filename": "tinker-android/tinker-android-loader-no-op/src/main/java/com/tencent/tinker/loader/app/TinkerApplication.java",
      "status": "modified",
      "additions": 46,
      "deletions": 11,
      "changes": 57,
      "blob_url": "https://github.com/Tencent/tinker/blob/6ed617c2b6995041225736e221badee5d61f5029/tinker-android%2Ftinker-android-loader-no-op%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fapp%2FTinkerApplication.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/6ed617c2b6995041225736e221badee5d61f5029/tinker-android%2Ftinker-android-loader-no-op%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fapp%2FTinkerApplication.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader-no-op%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fapp%2FTinkerApplication.java?ref=6ed617c2b6995041225736e221badee5d61f5029",
      "patch": "@@ -128,67 +128,102 @@ protected void attachBaseContext(Context base) {\n     @Override\n     public void onCreate() {\n         super.onCreate();\n-        mAppLike.onCreate();\n+        if (mAppLike != null) {\n+            mAppLike.onCreate();\n+        }\n     }\n \n     @Override\n     public void onTerminate() {\n         super.onTerminate();\n-        mAppLike.onTerminate();\n+        if (mAppLike != null) {\n+            mAppLike.onTerminate();\n+        }\n     }\n \n     @Override\n     public void onLowMemory() {\n         super.onLowMemory();\n-        mAppLike.onLowMemory();\n+        if (mAppLike != null) {\n+            mAppLike.onLowMemory();\n+        }\n     }\n \n     @TargetApi(14)\n     @Override\n     public void onTrimMemory(int level) {\n         super.onTrimMemory(level);\n-        mAppLike.onTrimMemory(level);\n+        if (mAppLike != null) {\n+            mAppLike.onTrimMemory(level);\n+        }\n     }\n \n     @Override\n     public void onConfigurationChanged(Configuration newConfig) {\n         super.onConfigurationChanged(newConfig);\n-        mAppLike.onConfigurationChanged(newConfig);\n+        if (mAppLike != null) {\n+            mAppLike.onConfigurationChanged(newConfig);\n+        }\n     }\n \n     @Override\n     public Resources getResources() {\n         final Resources resources = super.getResources();\n-        return mAppLike.getResources(resources);\n+        if (mAppLike != null) {\n+            return mAppLike.getResources(resources);\n+        } else {\n+            return resources;\n+        }\n     }\n \n     @Override\n     public ClassLoader getClassLoader() {\n         final ClassLoader classLoader = super.getClassLoader();\n-        return mAppLike.getClassLoader(classLoader);\n+        if (mAppLike != null) {\n+            return mAppLike.getClassLoader(classLoader);\n+        } else {\n+            return classLoader;\n+        }\n     }\n \n     @Override\n     public AssetManager getAssets() {\n         final AssetManager assets = super.getAssets();\n-        return mAppLike.getAssets(assets);\n+        if (mAppLike != null) {\n+            return mAppLike.getAssets(assets);\n+        } else {\n+            return assets;\n+        }\n     }\n \n     @Override\n     public Object getSystemService(String name) {\n         final Object service = super.getSystemService(name);\n-        return mAppLike.getSystemService(name, service);\n+        if (mAppLike != null) {\n+            return mAppLike.getSystemService(name, service);\n+        } else {\n+            return service;\n+        }\n     }\n \n     @Override\n     public Context getBaseContext() {\n         final Context base = super.getBaseContext();\n-        return mAppLike.getBaseContext(base);\n+        if (mAppLike != null) {\n+            return mAppLike.getBaseContext(base);\n+        } else {\n+            return base;\n+        }\n     }\n \n     @Keep\n     public int mzNightModeUseOf() {\n-        return mAppLike.mzNightModeUseOf();\n+        if (mAppLike != null) {\n+            return mAppLike.mzNightModeUseOf();\n+        } else {\n+            // Return 1 for default according to MeiZu's announcement.\n+            return 1;\n+        }\n     }\n \n     public void setUseSafeMode(boolean useSafeMode) {",
      "parent_sha": "9a28bbdb16f580db7c435dd1347fcd443165ae45"
    }
  },
  {
    "oid": "be934d6f11a3e3e94de69f9e06f990f6400fee33",
    "message": "Optimize reference links for java doc",
    "date": "2016-09-26T08:59:50Z",
    "url": "https://github.com/Tencent/tinker/commit/be934d6f11a3e3e94de69f9e06f990f6400fee33",
    "details": {
      "sha": "ca2aadf88a04f24ddad69b0e7d28303ad5bf13b6",
      "filename": "tinker-commons/src/main/java/com/tencent/tinker/commons/dexpatcher/algorithms/patch/DexSectionPatchAlgorithm.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/Tencent/tinker/blob/be934d6f11a3e3e94de69f9e06f990f6400fee33/tinker-commons%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fcommons%2Fdexpatcher%2Falgorithms%2Fpatch%2FDexSectionPatchAlgorithm.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/be934d6f11a3e3e94de69f9e06f990f6400fee33/tinker-commons%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fcommons%2Fdexpatcher%2Falgorithms%2Fpatch%2FDexSectionPatchAlgorithm.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-commons%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fcommons%2Fdexpatcher%2Falgorithms%2Fpatch%2FDexSectionPatchAlgorithm.java?ref=be934d6f11a3e3e94de69f9e06f990f6400fee33",
      "patch": "@@ -75,7 +75,7 @@ public DexSectionPatchAlgorithm(\n     }\n \n     /**\n-     * Get {@code Section} in {@code TableOfContents}.\n+     * Get {@link TableOfContents.Section} from {@code dex}.\n      */\n     protected abstract TableOfContents.Section getTocSection(Dex dex);\n \n@@ -148,7 +148,7 @@ private int[] readDeltaIndiciesOrOffsets(int count) {\n \n     /**\n      * Adapter method for item's offset fetching, if an item is not\n-     * inherited from {@code Item} (which means it is a simple item in dex section\n+     * inherited from {@link TableOfContents.Section.Item} (which means it is a simple item in dex section\n      * that doesn't need multiple members to describe), this method\n      * return {@code index} instead.\n      */",
      "parent_sha": "1debc0d31d9ec8ea283502f30b837a94f97bb029"
    }
  },
  {
    "oid": "6c4a856a8aa851adc79ea9a4a1f518f157075244",
    "message": "enlarge dex wait time and size to promote success rate",
    "date": "2017-08-04T06:40:10Z",
    "url": "https://github.com/Tencent/tinker/commit/6c4a856a8aa851adc79ea9a4a1f518f157075244",
    "details": {
      "sha": "52544cb69e881e8fe9564ff2c934e5dde78bd34d",
      "filename": "tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/Tencent/tinker/blob/6c4a856a8aa851adc79ea9a4a1f518f157075244/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fpatch%2FDexDiffPatchInternal.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/6c4a856a8aa851adc79ea9a4a1f518f157075244/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fpatch%2FDexDiffPatchInternal.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fpatch%2FDexDiffPatchInternal.java?ref=6c4a856a8aa851adc79ea9a4a1f518f157075244",
      "patch": "@@ -59,7 +59,7 @@\n public class DexDiffPatchInternal extends BasePatchInternal {\n     protected static final String TAG = \"Tinker.DexDiffPatchInternal\";\n \n-    protected static final int WAIT_ASYN_OAT_TIME = 12 * 1000;\n+    protected static final int WAIT_ASYN_OAT_TIME = 15 * 1000;\n     protected static final int MAX_WAIT_COUNT     = 30;\n \n     private static ArrayList<File>                      optFiles      = new ArrayList<>();\n@@ -93,7 +93,7 @@ protected static boolean waitAndCheckDexOptFile(File patchFile, Tinker manager)\n             return true;\n         }\n         // should use patch list size\n-        int size = patchList.size() * 6;\n+        int size = patchList.size() * 8;\n         if (size > MAX_WAIT_COUNT) {\n             size = MAX_WAIT_COUNT;\n         }",
      "parent_sha": "09a678dc5c48ee4c2271c1608143184acbc5e25a"
    }
  },
  {
    "oid": "f3d04149cea61b28b7d6c354fbd70c0159e5ad9d",
    "message": "[tinker] Bugfix: Revert \"Get sigalg from keystore by provided alias instead of hardcode.\"\n    Since devices below api18 do not support SHA-256 sigalg, we should force use SHA-1.",
    "date": "2016-10-31T06:01:06Z",
    "url": "https://github.com/Tencent/tinker/commit/f3d04149cea61b28b7d6c354fbd70c0159e5ad9d",
    "details": {
      "sha": "7b2e0d3e0c4768f3941f6b4f7162a65d1be331cb",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/builder/PatchBuilder.java",
      "status": "modified",
      "additions": 13,
      "deletions": 6,
      "changes": 19,
      "blob_url": "https://github.com/Tencent/tinker/blob/f3d04149cea61b28b7d6c354fbd70c0159e5ad9d/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fbuilder%2FPatchBuilder.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/f3d04149cea61b28b7d6c354fbd70c0159e5ad9d/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fbuilder%2FPatchBuilder.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fbuilder%2FPatchBuilder.java?ref=f3d04149cea61b28b7d6c354fbd70c0159e5ad9d",
      "patch": "@@ -25,9 +25,8 @@\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n+import java.security.Key;\n import java.security.KeyStore;\n-import java.security.cert.Certificate;\n-import java.security.cert.X509Certificate;\n import java.util.ArrayList;\n \n /**\n@@ -88,12 +87,20 @@ private String getSignatureAlgorithm() throws Exception {\n         FileInputStream fileIn = new FileInputStream(config.mSignatureFile);\n         KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n         keyStore.load(fileIn, config.mStorePass.toCharArray());\n-        Certificate cert = keyStore.getCertificate(config.mStoreAlias);\n-        if (cert instanceof X509Certificate) {\n-            return ((X509Certificate) cert).getSigAlgName();\n+        Key key = keyStore.getKey(config.mStoreAlias, config.mKeyPass.toCharArray());\n+        String keyAlgorithm = key.getAlgorithm();\n+        String signatureAlgorithm;\n+        if (keyAlgorithm.equalsIgnoreCase(\"DSA\")) {\n+            signatureAlgorithm = \"SHA1withDSA\";\n+        } else if (keyAlgorithm.equalsIgnoreCase(\"RSA\")) {\n+            signatureAlgorithm = \"SHA1withRSA\";\n+        } else if (keyAlgorithm.equalsIgnoreCase(\"EC\")) {\n+            signatureAlgorithm = \"SHA1withECDSA\";\n         } else {\n-            throw new RuntimeException(\"Provided certificate is not X.509 certificate.\");\n+            throw new RuntimeException(\"private key is not a DSA or \"\n+                    + \"RSA key\");\n         }\n+        return signatureAlgorithm;\n     }\n \n     /**",
      "parent_sha": "47379558a60dbb29485e039273acc363b80a253b"
    }
  },
  {
    "oid": "5bd2cb6d67786d1c105e9852fcc5405b633a4fbe",
    "message": "[tinker] Use PathClassLoader to trigger dex2oat after patch is applied.",
    "date": "2020-05-07T03:42:53Z",
    "url": "https://github.com/Tencent/tinker/commit/5bd2cb6d67786d1c105e9852fcc5405b633a4fbe",
    "details": {
      "sha": "22c6dcdbcd67a851b248c089b839bda7456a9493",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/NewClassLoaderInjector.java",
      "status": "modified",
      "additions": 13,
      "deletions": 4,
      "changes": 17,
      "blob_url": "https://github.com/Tencent/tinker/blob/5bd2cb6d67786d1c105e9852fcc5405b633a4fbe/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FNewClassLoaderInjector.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/5bd2cb6d67786d1c105e9852fcc5405b633a4fbe/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FNewClassLoaderInjector.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FNewClassLoaderInjector.java?ref=5bd2cb6d67786d1c105e9852fcc5405b633a4fbe",
      "patch": "@@ -21,13 +21,13 @@\n import android.content.res.Resources;\n import android.os.Build;\n \n-import com.tencent.tinker.loader.app.TinkerApplication;\n-\n import java.io.File;\n import java.lang.reflect.Field;\n import java.util.Arrays;\n import java.util.List;\n \n+import dalvik.system.PathClassLoader;\n+\n /**\n  * Created by tangyinsheng on 2019-10-31.\n  */\n@@ -46,8 +46,17 @@ public static void triggerDex2Oat(Context context, File dexOptDir, String... dex\n         // Suggestion from Huawei: Only PathClassLoader (Perhaps other ClassLoaders known by system\n         // like DexClassLoader also works ?) can be used here to trigger dex2oat so that JIT\n         // mechanism can participate in runtime Dex optimization.\n-        final ClassLoader appClassLoader = TinkerApplication.class.getClassLoader();\n-        final ClassLoader triggerClassLoader = createNewClassLoader(context, appClassLoader, dexOptDir, dexPaths);\n+        final StringBuilder sb = new StringBuilder();\n+        boolean isFirst = true;\n+        for (String dexPath : dexPaths) {\n+            if (isFirst) {\n+                isFirst = false;\n+            } else {\n+                sb.append(File.pathSeparator);\n+            }\n+            sb.append(dexPath);\n+        }\n+        final ClassLoader triggerClassLoader = new PathClassLoader(sb.toString(), ClassLoader.getSystemClassLoader());\n     }\n \n     @SuppressWarnings(\"unchecked\")",
      "parent_sha": "056782cdd4aa6823e4c25cc32b6e868538884724"
    }
  },
  {
    "oid": "8006ea6959d5e583687ce96894da6805f478d80d",
    "message": "use utf-8 encoding to output public.xml and ids.xml",
    "date": "2016-12-02T06:37:25Z",
    "url": "https://github.com/Tencent/tinker/commit/8006ea6959d5e583687ce96894da6805f478d80d",
    "details": {
      "sha": "6af535ad61bd8be2a790b6a23bf2996431870e28",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/PatchUtil.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/Tencent/tinker/blob/8006ea6959d5e583687ce96894da6805f478d80d/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Faapt%2FPatchUtil.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/8006ea6959d5e583687ce96894da6805f478d80d/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Faapt%2FPatchUtil.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Faapt%2FPatchUtil.java?ref=8006ea6959d5e583687ce96894da6805f478d80d",
      "patch": "@@ -20,8 +20,8 @@\n import com.tencent.tinker.build.aapt.RDotTxtEntry.RType;\n \n import java.io.BufferedReader;\n+import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n import java.io.InputStreamReader;\n import java.io.PrintWriter;\n import java.util.Arrays;\n@@ -102,8 +102,8 @@ public static void generatePublicResourceXml(AaptResourceCollector aaptResourceC\n         try {\n             FileUtil.createFile(outputIdsXmlFullFilename);\n             FileUtil.createFile(outputPublicXmlFullFilename);\n-            idsWriter = new PrintWriter(new FileOutputStream(outputIdsXmlFullFilename));\n-            publicWriter = new PrintWriter(new FileOutputStream(outputPublicXmlFullFilename));\n+            idsWriter = new PrintWriter(new File(outputIdsXmlFullFilename), \"UTF-8\");\n+            publicWriter = new PrintWriter(new File(outputPublicXmlFullFilename), \"UTF-8\");\n             idsWriter.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\n             publicWriter.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\n             idsWriter.println(\"<resources>\");",
      "parent_sha": "8e807736703cf8829cb1180929d442b6cb019ce1"
    }
  },
  {
    "oid": "b89c905af9cd03742414c344e3d58607eb12024c",
    "message": "[tinker] Record last modified time of patched resource apk by ourselves to check if that apk is modified.",
    "date": "2022-07-08T10:54:34Z",
    "url": "https://github.com/Tencent/tinker/commit/b89c905af9cd03742414c344e3d58607eb12024c",
    "details": {
      "sha": "1c3c1c7a536546623533f5bb8aea701bcd4de87e",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java",
      "status": "modified",
      "additions": 61,
      "deletions": 53,
      "changes": 114,
      "blob_url": "https://github.com/Tencent/tinker/blob/b89c905af9cd03742414c344e3d58607eb12024c/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourcePatcher.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/b89c905af9cd03742414c344e3d58607eb12024c/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourcePatcher.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourcePatcher.java?ref=b89c905af9cd03742414c344e3d58607eb12024c",
      "patch": "@@ -22,7 +22,6 @@\n import static com.tencent.tinker.loader.shareutil.ShareReflectUtil.findField;\n import static com.tencent.tinker.loader.shareutil.ShareReflectUtil.findMethod;\n \n-import android.app.Application;\n import android.content.Context;\n import android.content.pm.ApplicationInfo;\n import android.content.res.AssetManager;\n@@ -39,6 +38,7 @@\n import com.tencent.tinker.loader.shareutil.ShareTinkerInternals;\n import com.tencent.tinker.loader.shareutil.ShareTinkerLog;\n \n+import java.io.File;\n import java.io.InputStream;\n import java.lang.ref.WeakReference;\n import java.lang.reflect.Constructor;\n@@ -64,7 +64,6 @@ class TinkerResourcePatcher {\n \n     // method\n     private static Constructor<?> newAssetManagerCtor = null;\n-    private static Method isUpToDateMethod = null;\n     private static Method addAssetPathMethod = null;\n     private static Method addAssetPathAsSharedLibraryMethod = null;\n     private static Method ensureStringBlocksMethod = null;\n@@ -78,6 +77,8 @@ class TinkerResourcePatcher {\n     private static Field publicSourceDirField = null;\n     private static Field stringBlocksField = null;\n \n+    private static long storedPatchedResModifiedTime = 0L;\n+\n     @SuppressWarnings(\"unchecked\")\n     public static void isResourceCanPatch(Context context) throws Throwable {\n         //   - Replace mResDir to point to the external resource file instead of the .apk. This is\n@@ -123,12 +124,6 @@ public static void isResourceCanPatch(Context context) throws Throwable {\n         // class. (e.g. Baidu OS)\n         newAssetManagerCtor = findConstructor(assets);\n \n-        try {\n-            isUpToDateMethod = findMethod(assets, \"isUpToDate\");\n-        } catch (Throwable ignored) {\n-            ShareTinkerLog.w(TAG, \"Fail to find isUpToDate method, insurance logic will be disabled.\");\n-        }\n-\n         // Iterate over all known Resources objects\n         if (SDK_INT >= KITKAT) {\n             //pre-N\n@@ -190,17 +185,6 @@ public static void monkeyPatchExistingResources(Context context, String external\n             return;\n         }\n \n-        if (newAssetManager != null) {\n-            try {\n-                if ((boolean) isUpToDateMethod.invoke(newAssetManager)) {\n-                    return;\n-                }\n-                ShareTinkerLog.w(TAG, \"Patched resources was changed unexpectly, re-inject now.\");\n-            } catch (Throwable thr) {\n-                ShareTinkerLog.w(TAG, \"Fail to judge if patched resources is up-to-date, app may crash soon.\");\n-            }\n-        }\n-\n         final ApplicationInfo appInfo = context.getApplicationInfo();\n \n         final Field[] packagesFields;\n@@ -231,6 +215,12 @@ public static void monkeyPatchExistingResources(Context context, String external\n         if (((Integer) addAssetPathMethod.invoke(newAssetManager, externalResourceFile)) == 0) {\n             throw new IllegalStateException(\"Could not create new AssetManager\");\n         }\n+        try {\n+            storedPatchedResModifiedTime = new File(externalResourceFile).lastModified();\n+        } catch (Throwable thr) {\n+            ShareTinkerLog.printErrStackTrace(TAG, thr, \"Fail to store patched res modified time.\");\n+            storedPatchedResModifiedTime = 0L;\n+        }\n \n         // Add SharedLibraries to AssetManager for resolve system resources not found issue\n         // This influence SharedLibrary Package ID\n@@ -297,9 +287,6 @@ public static void monkeyPatchExistingResources(Context context, String external\n     }\n \n     private static void installResourceInsuranceHacks(Context context, String patchedResApkPath) {\n-        if (isUpToDateMethod == null) {\n-            return;\n-        }\n         try {\n             final Object activityThread = ShareReflectUtil.getActivityThread(context, null);\n             final Field mHField = ShareReflectUtil.findField(activityThread, \"mH\");\n@@ -371,40 +358,44 @@ public boolean handleMessage(Message msg) {\n         @SuppressWarnings(\"unchecked\")\n         private boolean hackMessage(Message msg) {\n             boolean shouldReInjectPatchedResources = false;\n-            if (msg.what == LAUNCH_ACTIVITY || msg.what == RELAUNCH_ACTIVITY) {\n-                shouldReInjectPatchedResources = true;\n-            } else if (msg.what == EXECUTE_TRANSACTION) {\n-                do {\n-                    if (mSkipInterceptExecuteTransaction) {\n-                        break;\n-                    }\n-                    final Object transaction = msg.obj;\n-                    if (transaction == null) {\n-                        ShareTinkerLog.w(TAG, \"transaction is null, skip rest insurance logic.\");\n-                        break;\n-                    }\n-                    if (mGetCallbacksMethod == null) {\n+            if (!isPatchedResModifiedAfterLastLoad(mPatchResApkPath)) {\n+                shouldReInjectPatchedResources = false;\n+            } else {\n+                if (msg.what == LAUNCH_ACTIVITY || msg.what == RELAUNCH_ACTIVITY) {\n+                    shouldReInjectPatchedResources = true;\n+                } else if (msg.what == EXECUTE_TRANSACTION) {\n+                    do {\n+                        if (mSkipInterceptExecuteTransaction) {\n+                            break;\n+                        }\n+                        final Object transaction = msg.obj;\n+                        if (transaction == null) {\n+                            ShareTinkerLog.w(TAG, \"transaction is null, skip rest insurance logic.\");\n+                            break;\n+                        }\n+                        if (mGetCallbacksMethod == null) {\n+                            try {\n+                                mGetCallbacksMethod = ShareReflectUtil.findMethod(transaction, \"getCallbacks\");\n+                            } catch (Throwable ignored) {\n+                                // Ignored.\n+                            }\n+                        }\n+                        if (mGetCallbacksMethod == null) {\n+                            ShareTinkerLog.e(TAG, \"fail to find getLifecycleStateRequest method, skip rest insurance logic.\");\n+                            mSkipInterceptExecuteTransaction = true;\n+                            break;\n+                        }\n                         try {\n-                            mGetCallbacksMethod = ShareReflectUtil.findMethod(transaction, \"getCallbacks\");\n+                            final List<Object> req = (List<Object>) mGetCallbacksMethod.invoke(transaction);\n+                            if (req != null && req.size() > 0) {\n+                                final Object cb = req.get(0);\n+                                shouldReInjectPatchedResources = cb != null && cb.getClass().getName().equals(LAUNCH_ACTIVITY_LIFECYCLE_ITEM_CLASSNAME);\n+                            }\n                         } catch (Throwable ignored) {\n-                            // Ignored.\n+                            ShareTinkerLog.e(TAG, \"fail to call getLifecycleStateRequest method, skip rest insurance logic.\");\n                         }\n-                    }\n-                    if (mGetCallbacksMethod == null) {\n-                        ShareTinkerLog.e(TAG, \"fail to find getLifecycleStateRequest method, skip rest insurance logic.\");\n-                        mSkipInterceptExecuteTransaction = true;\n-                        break;\n-                    }\n-                    try {\n-                        final List<Object> req = (List<Object>) mGetCallbacksMethod.invoke(transaction);\n-                        if (req != null && req.size() > 0) {\n-                            final Object cb = req.get(0);\n-                            shouldReInjectPatchedResources = cb != null && cb.getClass().getName().equals(LAUNCH_ACTIVITY_LIFECYCLE_ITEM_CLASSNAME);\n-                        }\n-                    } catch (Throwable ignored) {\n-                        ShareTinkerLog.e(TAG, \"fail to call getLifecycleStateRequest method, skip rest insurance logic.\");\n-                    }\n-                } while (false);\n+                    } while (false);\n+                }\n             }\n             if (shouldReInjectPatchedResources) {\n                 try {\n@@ -417,6 +408,23 @@ private boolean hackMessage(Message msg) {\n         }\n     }\n \n+    private static boolean isPatchedResModifiedAfterLastLoad(String patchedResPath) {\n+        long patchedResModifiedTime;\n+        try {\n+            patchedResModifiedTime = new File(patchedResPath).lastModified();\n+        } catch (Throwable thr) {\n+            ShareTinkerLog.printErrStackTrace(TAG, thr, \"Fail to get patched res modified time.\");\n+            patchedResModifiedTime = 0L;\n+        }\n+        if (patchedResModifiedTime == 0) {\n+            return false;\n+        }\n+        if (patchedResModifiedTime == storedPatchedResModifiedTime) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n     /**\n      * Why must I do these?\n      * Resource has mTypedArrayPool field, which just like Message Poll to reduce gc",
      "parent_sha": "d294142a476db315094927c1fe47d2ba8abde996"
    }
  },
  {
    "oid": "a305adce480dd61e30a0e12e8996cf27eb163cbe",
    "message": "[tinker] Add oat exist marker logic and do registerDexModule after performSecondaryDexOpt for HW and Honor devices.",
    "date": "2021-12-07T08:45:14Z",
    "url": "https://github.com/Tencent/tinker/commit/a305adce480dd61e30a0e12e8996cf27eb163cbe",
    "details": {
      "sha": "21c0e72885d4072c42359bc6a8c429fa73e9957d",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java",
      "status": "modified",
      "additions": 56,
      "deletions": 15,
      "changes": 71,
      "blob_url": "https://github.com/Tencent/tinker/blob/a305adce480dd61e30a0e12e8996cf27eb163cbe/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/a305adce480dd61e30a0e12e8996cf27eb163cbe/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java?ref=a305adce480dd61e30a0e12e8996cf27eb163cbe",
      "patch": "@@ -197,18 +197,20 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n \n         try {\n             final File oatFile = new File(oatPath);\n-            if (oatFile.exists()) {\n-                ShareTinkerLog.i(TAG, \"[+] Remove existed oat file: %s\", oatPath);\n-                oatFile.delete();\n+            final File oatFinishedMarkerFile = getOatFinishedMarkerFile(dexPath);\n+            if (!oatFile.exists()) {\n+                if (oatFinishedMarkerFile.exists()) {\n+                    // oat file does not exist, remove corresponding marker file.\n+                    oatFinishedMarkerFile.delete();\n+                }\n             } else {\n-                try {\n-                    final File oatDir = oatFile.getParentFile();\n-                    if (!oatDir.exists()) {\n-                        oatDir.mkdirs();\n-                    }\n-                    oatFile.createNewFile();\n-                } catch (Throwable thr) {\n-                    ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to pre-create oat file.\");\n+                if (!oatFinishedMarkerFile.exists()) {\n+                    // Although oat file exists, but marker file is not found. Remove the oat file\n+                    // and trigger dex2oat again.\n+                    oatFile.delete();\n+                } else {\n+                    ShareTinkerLog.i(TAG, \"[+] Oat file %s should be valid, skip triggering dexopt.\", oatPath);\n+                    return;\n                 }\n             }\n             int waitTimes = 0;\n@@ -218,6 +220,15 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n                 } catch (Throwable thr) {\n                     ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call reconcileSecondaryDexFiles.\");\n                 }\n+                try {\n+                    final File oatDir = oatFile.getParentFile();\n+                    if (!oatDir.exists()) {\n+                        oatDir.mkdirs();\n+                    }\n+                    oatFile.createNewFile();\n+                } catch (Throwable thr) {\n+                    ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to pre-create oat file.\");\n+                }\n                 if (ShareTinkerInternals.isNewerOrEqualThanVersion(31 /* Android S */, true)) {\n                     // registerDexModule will force classloader context change into VariableClassLoaderContext,\n                     // which makes ART skip caching class verification info on Android Q and R. The running\n@@ -227,8 +238,7 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n                     } catch (Throwable thr) {\n                         ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call registerDexModule.\");\n                     }\n-                    if (oatFile.exists()) {\n-                        ShareTinkerLog.i(TAG, \"[+] Dexopt was triggered by registerDexModule successfully.\");\n+                    if (checkAndMarkIfOatExists(oatFile, oatFinishedMarkerFile, \"registerDexModule\")) {\n                         return;\n                     }\n                 }\n@@ -237,10 +247,21 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n                 } catch (Throwable thr) {\n                     ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call performDexOptSecondary.\");\n                 }\n-                if (oatFile.exists()) {\n-                    ShareTinkerLog.i(TAG, \"[+] Dexopt was triggered by performDexOptSecondary successfully.\");\n+                if (checkAndMarkIfOatExists(oatFile, oatFinishedMarkerFile, \"performDexOptSecondary\")) {\n                     return;\n                 }\n+                if (\"huawei\".equalsIgnoreCase(Build.MANUFACTURER) || \"honor\".equalsIgnoreCase(Build.MANUFACTURER)) {\n+                    // Some HW devices still need to call registerDexModule to generate odex for patched\n+                    // dex.\n+                    try {\n+                        registerDexModule(context, dexPath);\n+                    } catch (Throwable thr) {\n+                        ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call registerDexModule.\");\n+                    }\n+                    if (checkAndMarkIfOatExists(oatFile, oatFinishedMarkerFile, \"registerDexModule for hw dev\")) {\n+                        return;\n+                    }\n+                }\n                 if (waitTimes >= 3) {\n                     throw new IllegalStateException(\"Dexopt was triggered, but no odex file was generated.\");\n                 }\n@@ -254,6 +275,26 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n         }\n     }\n \n+    private static File getOatFinishedMarkerFile(String dexPath) {\n+        return new File(dexPath + \".oat_fine\");\n+    }\n+\n+    private static boolean checkAndMarkIfOatExists(File oatFile, File markerFile, String stageForLog) {\n+        if (oatFile.exists()) {\n+            ShareTinkerLog.i(TAG, \"[+] Oat file %s is found after %s\", oatFile.getPath(), stageForLog);\n+            try {\n+                markerFile.createNewFile();\n+            } catch (Throwable thr) {\n+                ShareTinkerLog.printErrStackTrace(TAG, thr,\n+                        \"[-] Fail to create marker file %s after %s.\", markerFile.getPath(), stageForLog);\n+            }\n+            return true;\n+        } else {\n+            ShareTinkerLog.e(TAG, \"[-] Oat file %s does not exist after %s.\", oatFile.getPath(), stageForLog);\n+            return false;\n+        }\n+    }\n+\n     private static void registerDexModule(Context context, String dexPath) throws IllegalStateException {\n         final PackageManager synchronizedPM = getSynchronizedPackageManager(context);\n         try {",
      "parent_sha": "f9112cf518f38cc14fa5ad0f7e336f0d3209c90c"
    }
  },
  {
    "oid": "097db816bbcd433c783eaa2f0a3e515c237404c6",
    "message": "[dexdiff] Remove unnecessary inner class, use switch case instead.",
    "date": "2016-10-01T16:27:59Z",
    "url": "https://github.com/Tencent/tinker/commit/097db816bbcd433c783eaa2f0a3e515c237404c6",
    "details": {
      "sha": "d1b21e5227d76a06031dcb12ea3e83f9b8f0b823",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/DexPatchGenerator.java",
      "status": "modified",
      "additions": 112,
      "deletions": 155,
      "changes": 267,
      "blob_url": "https://github.com/Tencent/tinker/blob/097db816bbcd433c783eaa2f0a3e515c237404c6/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdexpatcher%2FDexPatchGenerator.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/097db816bbcd433c783eaa2f0a3e515c237404c6/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdexpatcher%2FDexPatchGenerator.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdexpatcher%2FDexPatchGenerator.java?ref=097db816bbcd433c783eaa2f0a3e515c237404c6",
      "patch": "@@ -63,6 +63,7 @@\n import java.io.OutputStream;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Comparator;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -547,173 +548,129 @@ private void writeResultToStream(OutputStream os) throws IOException {\n         buffer.writeInt(firstChunkOffset);\n         buffer.position(firstChunkOffset);\n \n-        new PatchOperationsWriter<StringData>(this.stringDataSectionDiffAlg.getPatchOperationList()) {\n-            @Override\n-            protected void writeItem(DexDataBuffer buffer, StringData item) {\n-                buffer.writeStringData(item);\n-            }\n-        }.writeToBuffer(buffer);\n-\n-        new PatchOperationsWriter<Integer>(this.typeIdSectionDiffAlg.getPatchOperationList()) {\n-            @Override\n-            protected void writeItem(DexDataBuffer buffer, Integer item) {\n-                buffer.writeInt(item);\n-            }\n-        }.writeToBuffer(buffer);\n-\n-        new PatchOperationsWriter<TypeList>(this.typeListSectionDiffAlg.getPatchOperationList()) {\n-            @Override\n-            protected void writeItem(DexDataBuffer buffer, TypeList item) {\n-                buffer.writeTypeList(item);\n-            }\n-        }.writeToBuffer(buffer);\n-\n-        new PatchOperationsWriter<ProtoId>(this.protoIdSectionDiffAlg.getPatchOperationList()) {\n-            @Override\n-            protected void writeItem(DexDataBuffer buffer, ProtoId item) {\n-                buffer.writeProtoId(item);\n-            }\n-        }.writeToBuffer(buffer);\n-\n-        new PatchOperationsWriter<FieldId>(this.fieldIdSectionDiffAlg.getPatchOperationList()) {\n-            @Override\n-            protected void writeItem(DexDataBuffer buffer, FieldId item) {\n-                buffer.writeFieldId(item);\n-            }\n-        }.writeToBuffer(buffer);\n-\n-        new PatchOperationsWriter<MethodId>(this.methodIdSectionDiffAlg.getPatchOperationList()) {\n-            @Override\n-            protected void writeItem(DexDataBuffer buffer, MethodId item) {\n-                buffer.writeMethodId(item);\n-            }\n-        }.writeToBuffer(buffer);\n-\n-        new PatchOperationsWriter<Annotation>(this.annotationSectionDiffAlg.getPatchOperationList()) {\n-            @Override\n-            protected void writeItem(DexDataBuffer buffer, Annotation item) {\n-                buffer.writeAnnotation(item);\n-            }\n-        }.writeToBuffer(buffer);\n-\n-        new PatchOperationsWriter<AnnotationSet>(this.annotationSetSectionDiffAlg.getPatchOperationList()) {\n-            @Override\n-            protected void writeItem(DexDataBuffer buffer, AnnotationSet item) {\n-                buffer.writeAnnotationSet(item);\n-            }\n-        }.writeToBuffer(buffer);\n-\n-        new PatchOperationsWriter<AnnotationSetRefList>(this.annotationSetRefListSectionDiffAlg.getPatchOperationList()) {\n-            @Override\n-            protected void writeItem(DexDataBuffer buffer, AnnotationSetRefList item) {\n-                buffer.writeAnnotationSetRefList(item);\n-            }\n-        }.writeToBuffer(buffer);\n-\n-        new PatchOperationsWriter<AnnotationsDirectory>(this.annotationsDirectorySectionDiffAlg.getPatchOperationList()) {\n-            @Override\n-            protected void writeItem(DexDataBuffer buffer, AnnotationsDirectory item) {\n-                buffer.writeAnnotationsDirectory(item);\n-            }\n-        }.writeToBuffer(buffer);\n-\n-        new PatchOperationsWriter<DebugInfoItem>(this.debugInfoSectionDiffAlg.getPatchOperationList()) {\n-            @Override\n-            protected void writeItem(DexDataBuffer buffer, DebugInfoItem item) {\n-                buffer.writeDebugInfoItem(item);\n-            }\n-        }.writeToBuffer(buffer);\n-\n-        new PatchOperationsWriter<Code>(this.codeSectionDiffAlg.getPatchOperationList()) {\n-            @Override\n-            protected void writeItem(DexDataBuffer buffer, Code item) {\n-                buffer.writeCode(item);\n-            }\n-        }.writeToBuffer(buffer);\n-\n-        new PatchOperationsWriter<ClassData>(this.classDataSectionDiffAlg.getPatchOperationList()) {\n-            @Override\n-            protected void writeItem(DexDataBuffer buffer, ClassData item) {\n-                buffer.writeClassData(item);\n-            }\n-        }.writeToBuffer(buffer);\n-\n-        new PatchOperationsWriter<EncodedValue>(this.encodedArraySectionDiffAlg.getPatchOperationList()) {\n-            @Override\n-            protected void writeItem(DexDataBuffer buffer, EncodedValue item) {\n-                buffer.writeEncodedArray(item);\n-            }\n-        }.writeToBuffer(buffer);\n-\n-        new PatchOperationsWriter<ClassDef>(this.classDefSectionDiffAlg.getPatchOperationList()) {\n-            @Override\n-            protected void writeItem(DexDataBuffer buffer, ClassDef item) {\n-                buffer.writeClassDef(item);\n-            }\n-        }.writeToBuffer(buffer);\n+        writePatchOperations(buffer, this.stringDataSectionDiffAlg.getPatchOperationList());\n+        writePatchOperations(buffer, this.typeIdSectionDiffAlg.getPatchOperationList());\n+        writePatchOperations(buffer, this.typeListSectionDiffAlg.getPatchOperationList());\n+        writePatchOperations(buffer, this.protoIdSectionDiffAlg.getPatchOperationList());\n+        writePatchOperations(buffer, this.fieldIdSectionDiffAlg.getPatchOperationList());\n+        writePatchOperations(buffer, this.methodIdSectionDiffAlg.getPatchOperationList());\n+        writePatchOperations(buffer, this.annotationSectionDiffAlg.getPatchOperationList());\n+        writePatchOperations(buffer, this.annotationSetSectionDiffAlg.getPatchOperationList());\n+        writePatchOperations(buffer, this.annotationSetRefListSectionDiffAlg.getPatchOperationList());\n+        writePatchOperations(buffer, this.annotationsDirectorySectionDiffAlg.getPatchOperationList());\n+        writePatchOperations(buffer, this.debugInfoSectionDiffAlg.getPatchOperationList());\n+        writePatchOperations(buffer, this.codeSectionDiffAlg.getPatchOperationList());\n+        writePatchOperations(buffer, this.classDataSectionDiffAlg.getPatchOperationList());\n+        writePatchOperations(buffer, this.encodedArraySectionDiffAlg.getPatchOperationList());\n+        writePatchOperations(buffer, this.classDefSectionDiffAlg.getPatchOperationList());\n \n         byte[] bufferData = buffer.array();\n         os.write(bufferData);\n         os.flush();\n     }\n \n-    private abstract class PatchOperationsWriter<T> {\n-        private final List<PatchOperation<T>> patchOperationList;\n-\n-        PatchOperationsWriter(List<PatchOperation<T>> patchOperationList) {\n-            this.patchOperationList = patchOperationList;\n-        }\n-\n-        protected abstract void writeItem(DexDataBuffer buffer, T item);\n-\n-        public final void writeToBuffer(DexDataBuffer buffer) {\n-            List<Integer> delOpIndexList = new ArrayList<>(patchOperationList.size());\n-            List<Integer> addOpIndexList = new ArrayList<>(patchOperationList.size());\n-            List<Integer> replaceOpIndexList = new ArrayList<>(patchOperationList.size());\n-            List<T> newItemList = new ArrayList<>(patchOperationList.size());\n-\n-            for (PatchOperation<T> patchOperation : patchOperationList) {\n-                switch (patchOperation.op) {\n-                    case PatchOperation.OP_DEL: {\n-                        delOpIndexList.add(patchOperation.index);\n-                        break;\n-                    }\n-                    case PatchOperation.OP_ADD: {\n-                        addOpIndexList.add(patchOperation.index);\n-                        newItemList.add(patchOperation.newItem);\n-                        break;\n-                    }\n-                    case PatchOperation.OP_REPLACE: {\n-                        replaceOpIndexList.add(patchOperation.index);\n-                        newItemList.add(patchOperation.newItem);\n-                        break;\n-                    }\n+    private <T extends Comparable<T>> void writePatchOperations(\n+            DexDataBuffer buffer, List<PatchOperation<T>> patchOperationList\n+    ) {\n+        List<Integer> delOpIndexList = new ArrayList<>(patchOperationList.size());\n+        List<Integer> addOpIndexList = new ArrayList<>(patchOperationList.size());\n+        List<Integer> replaceOpIndexList = new ArrayList<>(patchOperationList.size());\n+        List<T> newItemList = new ArrayList<>(patchOperationList.size());\n+\n+        for (PatchOperation<T> patchOperation : patchOperationList) {\n+            switch (patchOperation.op) {\n+                case PatchOperation.OP_DEL: {\n+                    delOpIndexList.add(patchOperation.index);\n+                    break;\n+                }\n+                case PatchOperation.OP_ADD: {\n+                    addOpIndexList.add(patchOperation.index);\n+                    newItemList.add(patchOperation.newItem);\n+                    break;\n+                }\n+                case PatchOperation.OP_REPLACE: {\n+                    replaceOpIndexList.add(patchOperation.index);\n+                    newItemList.add(patchOperation.newItem);\n+                    break;\n                 }\n             }\n+        }\n \n-            buffer.writeUleb128(delOpIndexList.size());\n-            int lastIndex = 0;\n-            for (Integer index : delOpIndexList) {\n-                buffer.writeSleb128(index - lastIndex);\n-                lastIndex = index;\n-            }\n+        buffer.writeUleb128(delOpIndexList.size());\n+        int lastIndex = 0;\n+        for (Integer index : delOpIndexList) {\n+            buffer.writeSleb128(index - lastIndex);\n+            lastIndex = index;\n+        }\n \n-            buffer.writeUleb128(addOpIndexList.size());\n-            lastIndex = 0;\n-            for (Integer index : addOpIndexList) {\n-                buffer.writeSleb128(index - lastIndex);\n-                lastIndex = index;\n-            }\n+        buffer.writeUleb128(addOpIndexList.size());\n+        lastIndex = 0;\n+        for (Integer index : addOpIndexList) {\n+            buffer.writeSleb128(index - lastIndex);\n+            lastIndex = index;\n+        }\n \n-            buffer.writeUleb128(replaceOpIndexList.size());\n-            lastIndex = 0;\n-            for (Integer index : replaceOpIndexList) {\n-                buffer.writeSleb128(index - lastIndex);\n-                lastIndex = index;\n-            }\n+        buffer.writeUleb128(replaceOpIndexList.size());\n+        lastIndex = 0;\n+        for (Integer index : replaceOpIndexList) {\n+            buffer.writeSleb128(index - lastIndex);\n+            lastIndex = index;\n+        }\n \n-            for (T newItem : newItemList) {\n-                writeItem(buffer, newItem);\n+        for (T newItem : newItemList) {\n+            if (newItem instanceof StringData) {\n+                buffer.writeStringData((StringData) newItem);\n+            } else\n+            if (newItem instanceof Integer) {\n+                // TypeId item.\n+                buffer.writeInt((Integer) newItem);\n+            } else\n+            if (newItem instanceof TypeList) {\n+                buffer.writeTypeList((TypeList) newItem);\n+            } else\n+            if (newItem instanceof ProtoId) {\n+                buffer.writeProtoId((ProtoId) newItem);\n+            } else\n+            if (newItem instanceof FieldId) {\n+                buffer.writeFieldId((FieldId) newItem);\n+            } else\n+            if (newItem instanceof MethodId) {\n+                buffer.writeMethodId((MethodId) newItem);\n+            } else\n+            if (newItem instanceof Annotation) {\n+                buffer.writeAnnotation((Annotation) newItem);\n+            } else\n+            if (newItem instanceof AnnotationSet) {\n+                buffer.writeAnnotationSet((AnnotationSet) newItem);\n+            } else\n+            if (newItem instanceof AnnotationSetRefList) {\n+                buffer.writeAnnotationSetRefList(\n+                        (AnnotationSetRefList) newItem\n+                );\n+            } else\n+            if (newItem instanceof AnnotationsDirectory) {\n+                buffer.writeAnnotationsDirectory(\n+                        (AnnotationsDirectory) newItem\n+                );\n+            } else\n+            if (newItem instanceof DebugInfoItem) {\n+                buffer.writeDebugInfoItem((DebugInfoItem) newItem);\n+            } else\n+            if (newItem instanceof Code) {\n+                buffer.writeCode((Code) newItem);\n+            } else\n+            if (newItem instanceof ClassData) {\n+                buffer.writeClassData((ClassData) newItem);\n+            } else\n+            if (newItem instanceof EncodedValue) {\n+                buffer.writeEncodedArray((EncodedValue) newItem);\n+            } else\n+            if (newItem instanceof ClassDef) {\n+                buffer.writeClassDef((ClassDef) newItem);\n+            } else {\n+                throw new IllegalStateException(\n+                        \"Unknown item type: \" + newItem.getClass()\n+                );\n             }\n         }\n     }",
      "parent_sha": "a3e4a5886e86b2903ceb6b225583185da199d0de"
    }
  },
  {
    "oid": "43b3ceecf4f49d1d6d53fdab4b15d811b75b77ff",
    "message": "fix spell mistake",
    "date": "2017-07-27T07:08:11Z",
    "url": "https://github.com/Tencent/tinker/commit/43b3ceecf4f49d1d6d53fdab4b15d811b75b77ff",
    "details": {
      "sha": "ca75d93bd5116e74503d346d7021503c919b5157",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareSecurityCheck.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/tinker/blob/43b3ceecf4f49d1d6d53fdab4b15d811b75b77ff/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FShareSecurityCheck.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/43b3ceecf4f49d1d6d53fdab4b15d811b75b77ff/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FShareSecurityCheck.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FShareSecurityCheck.java?ref=43b3ceecf4f49d1d6d53fdab4b15d811b75b77ff",
      "patch": "@@ -116,7 +116,7 @@ public boolean verifyPatchMetaSignature(File path) {\n                     continue;\n                 }\n                 //for faster, only check the meta.txt files\n-                //we will check other files's ma5 written in meta files\n+                //we will check other files's md5 written in meta files\n                 if (!name.endsWith(ShareConstants.META_SUFFIX)) {\n                     continue;\n                 }",
      "parent_sha": "433fad4fe88ab13016508d60d24a7f7f43bb0176"
    }
  },
  {
    "oid": "271221d39d2eb39ee8f4cc481f21c821d614d220",
    "message": "[tinker] Fix issue #1093.",
    "date": "2019-06-04T07:21:25Z",
    "url": "https://github.com/Tencent/tinker/commit/271221d39d2eb39ee8f4cc481f21c821d614d220",
    "details": {
      "sha": "f1ffbe672a287e804d0718e74920048900a08796",
      "filename": "tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/listener/DefaultPatchListener.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/Tencent/tinker/blob/271221d39d2eb39ee8f4cc481f21c821d614d220/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Flistener%2FDefaultPatchListener.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/271221d39d2eb39ee8f4cc481f21c821d614d220/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Flistener%2FDefaultPatchListener.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Flistener%2FDefaultPatchListener.java?ref=271221d39d2eb39ee8f4cc481f21c821d614d220",
      "patch": "@@ -105,9 +105,11 @@ protected int patchCheck(String path, String patchMd5) {\n         File patchInfoLockFile = SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n         File patchInfoFile = SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n         try {\n-            SharePatchInfo currInfo = SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile, patchInfoLockFile);\n+            final SharePatchInfo currInfo = SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile, patchInfoLockFile);\n             if (currInfo != null && !ShareTinkerInternals.isNullOrNil(currInfo.newVersion) && !currInfo.isRemoveNewVersion) {\n-                return ShareConstants.ERROR_PATCH_ALREADY_APPLY;\n+                if (patchMd5.equals(currInfo.newVersion)) {\n+                    return ShareConstants.ERROR_PATCH_ALREADY_APPLY;\n+                }\n             }\n         } catch (Throwable ignored) {\n             // Ignored.",
      "parent_sha": "93f0238f4bd60b8afd91fb1724b2929d75ccb45b"
    }
  },
  {
    "oid": "6bd5a514bd825afee13e47ff4eb05a1048b12fd8",
    "message": "[tinker] bugfix: A serious typo.",
    "date": "2020-05-10T08:35:26Z",
    "url": "https://github.com/Tencent/tinker/commit/6bd5a514bd825afee13e47ff4eb05a1048b12fd8",
    "details": {
      "sha": "711488113eba21ade701ab6d0e69b09f3b930b17",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/SharePatchInfo.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/tinker/blob/6bd5a514bd825afee13e47ff4eb05a1048b12fd8/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FSharePatchInfo.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/6bd5a514bd825afee13e47ff4eb05a1048b12fd8/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FSharePatchInfo.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FSharePatchInfo.java?ref=6bd5a514bd825afee13e47ff4eb05a1048b12fd8",
      "patch": "@@ -144,7 +144,7 @@ private static SharePatchInfo readAndCheckProperty(File pathInfoFile) {\n                 lastFingerPrint = properties.getProperty(FINGER_PRINT);\n                 oatDir = properties.getProperty(OAT_DIR);\n                 final String isRemoveInterpretOATDirStr = properties.getProperty(IS_REMOVE_INTERPRET_OAT_DIR);\n-                isRemoveInterpretOATDir = (isRemoveNewVersionStr != null && !isRemoveInterpretOATDirStr.isEmpty() && !\"0\".equals(isRemoveInterpretOATDirStr));\n+                isRemoveInterpretOATDir = (isRemoveInterpretOATDirStr != null && !isRemoveInterpretOATDirStr.isEmpty() && !\"0\".equals(isRemoveInterpretOATDirStr));\n             } catch (IOException e) {\n                 Log.w(TAG, \"read property failed, e:\" + e);\n             } finally {",
      "parent_sha": "c289280831cb4ec9d89901ba3702311350f052eb"
    }
  },
  {
    "oid": "6166a8984b3655329ac111fb7f86446743047dbb",
    "message": "[tinker] Modify ambiguous log text.",
    "date": "2016-11-04T08:18:12Z",
    "url": "https://github.com/Tencent/tinker/commit/6166a8984b3655329ac111fb7f86446743047dbb",
    "details": {
      "sha": "742b19b03827215ff0cc950250c6ac4907c4cf94",
      "filename": "tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/Tencent/tinker/blob/6166a8984b3655329ac111fb7f86446743047dbb/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fpatch%2FDexDiffPatchInternal.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/6166a8984b3655329ac111fb7f86446743047dbb/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fpatch%2FDexDiffPatchInternal.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fpatch%2FDexDiffPatchInternal.java?ref=6166a8984b3655329ac111fb7f86446743047dbb",
      "patch": "@@ -251,7 +251,7 @@ private static boolean extractDexDiffInternals(Context context, String dir, Stri\n                         oldDexIs = apk.getInputStream(rawApkFileEntry);\n                         new DexPatchApplier(oldDexIs, (int) rawApkFileEntry.getSize(), null, smallPatchInfoFile).executeAndSaveTo(extractedFile);\n                     } catch (Throwable e) {\n-                        TinkerLog.w(TAG, \"Failed to recover dex file \" + extractedFile.getPath());\n+                        TinkerLog.w(TAG, \"Failed to recover dex file when apply patch: \" + extractedFile.getPath());\n                         manager.getPatchReporter().onPatchTypeExtractFail(patchFile, extractedFile, info.rawName, type, isUpgradePatch);\n                         SharePatchFileUtil.safeDeleteFile(extractedFile);\n                         return false;\n@@ -260,7 +260,7 @@ private static boolean extractDexDiffInternals(Context context, String dir, Stri\n                     }\n \n                     if (!SharePatchFileUtil.verifyDexFileMd5(extractedFile, extractedFileMd5)) {\n-                        TinkerLog.w(TAG, \"Failed to recover dex file \" + extractedFile.getPath());\n+                        TinkerLog.w(TAG, \"Failed to recover dex file when verify patched dex: \" + extractedFile.getPath());\n                         manager.getPatchReporter().onPatchTypeExtractFail(patchFile, extractedFile, info.rawName, type, isUpgradePatch);\n                         SharePatchFileUtil.safeDeleteFile(extractedFile);\n                         return false;\n@@ -334,7 +334,7 @@ private static boolean extractDexDiffInternals(Context context, String dir, Stri\n                     }\n \n                     if (!SharePatchFileUtil.verifyDexFileMd5(extractedFile, extractedFileMd5)) {\n-                        TinkerLog.w(TAG, \"Failed to recover dex file \" + extractedFile.getPath());\n+                        TinkerLog.w(TAG, \"Failed to recover dex file when verify patched dex: \" + extractedFile.getPath());\n                         manager.getPatchReporter().onPatchTypeExtractFail(patchFile, extractedFile, info.rawName, type, isUpgradePatch);\n                         SharePatchFileUtil.safeDeleteFile(extractedFile);\n                         return false;",
      "parent_sha": "69a88082c735dfc63943c66ef8680a520836e543"
    }
  },
  {
    "oid": "6ff21392d590c109f217c3ae770f8c534e0b225e",
    "message": "Change to using TextUtils",
    "date": "2020-03-12T19:54:09Z",
    "url": "https://github.com/Tencent/tinker/commit/6ff21392d590c109f217c3ae770f8c534e0b225e",
    "details": {
      "sha": "693171bf52e7143b8b1e836118c1600899a7378a",
      "filename": "tinker-android/tinker-android-loader-no-op/src/main/java/com/tencent/tinker/loader/shareutil/ShareTinkerInternals.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/Tencent/tinker/blob/6ff21392d590c109f217c3ae770f8c534e0b225e/tinker-android%2Ftinker-android-loader-no-op%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FShareTinkerInternals.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/6ff21392d590c109f217c3ae770f8c534e0b225e/tinker-android%2Ftinker-android-loader-no-op%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FShareTinkerInternals.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader-no-op%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FShareTinkerInternals.java?ref=6ff21392d590c109f217c3ae770f8c534e0b225e",
      "patch": "@@ -22,6 +22,7 @@\n import android.content.pm.ApplicationInfo;\n import android.content.pm.PackageManager;\n import android.os.Build;\n+import android.text.TextUtils;\n import android.util.Log;\n \n import java.io.ByteArrayOutputStream;\n@@ -113,10 +114,7 @@ public static String getCurrentInstructionSet() throws Exception {\n \n     public static boolean isSystemOTA(String lastFingerPrint) {\n         String currentFingerprint = Build.FINGERPRINT;\n-        if (lastFingerPrint == null\n-            || lastFingerPrint.equals(\"\")\n-            || currentFingerprint == null\n-            || currentFingerprint.equals(\"\")) {\n+        if (TextUtils.isEmpty(lastFingerPrint) || TextUtils.isEmpty(currentFingerprint)) {\n             Log.d(TAG, \"fingerprint empty:\" + lastFingerPrint + \",current:\" + currentFingerprint);\n             return false;\n         } else {",
      "parent_sha": "dca59ee21847d7066d8925c4eae46754cd8bbb31"
    }
  },
  {
    "oid": "169434f2dca2f11b3a54371dc9b937958b0cf310",
    "message": "[tinker] Fix secondary processes accidentally fallback to base version.",
    "date": "2024-06-21T08:39:32Z",
    "url": "https://github.com/Tencent/tinker/commit/169434f2dca2f11b3a54371dc9b937958b0cf310",
    "details": {
      "sha": "5e1e9d15382662526adf23cc0c895beccd0055c9",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/tinker/blob/169434f2dca2f11b3a54371dc9b937958b0cf310/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerLoader.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/169434f2dca2f11b3a54371dc9b937958b0cf310/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerLoader.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerLoader.java?ref=169434f2dca2f11b3a54371dc9b937958b0cf310",
      "patch": "@@ -335,11 +335,11 @@ private void tryLoadPatchFilesInternal(TinkerApplication app, Intent resultInten\n                 resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION, new TinkerRuntimeException(\"checkSafeModeCount fail\"));\n                 ShareIntentUtil.setIntentReturnCode(resultIntent, ShareConstants.ERROR_LOAD_PATCH_UNCAUGHT_EXCEPTION);\n                 ShareTinkerLog.w(TAG, \"tryLoadPatchFiles:checkSafeModeCount fail, patch was deleted.\");\n+                return;\n             } else {\n                 ShareTinkerLog.w(TAG, \"tryLoadPatchFiles:checkSafeModeCount fail, but we are not in main process, mark the patch to be deleted and continue load patch.\");\n                 ShareTinkerInternals.cleanPatch(app);\n             }\n-            return;\n         }\n \n         //now we can load patch resource",
      "parent_sha": "630fb9ff23c7d484db40c40f4c6f3be021673097"
    }
  },
  {
    "oid": "4baaf9db08f7045690dd20e48d56521fb9b6b47d",
    "message": "[tinker] only use JobScheduler on Android O or newer system.",
    "date": "2018-04-09T04:01:04Z",
    "url": "https://github.com/Tencent/tinker/commit/4baaf9db08f7045690dd20e48d56521fb9b6b47d",
    "details": {
      "sha": "0cc63addef353e01881e47856bbe0e394adec212",
      "filename": "tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java",
      "status": "modified",
      "additions": 55,
      "deletions": 23,
      "changes": 78,
      "blob_url": "https://github.com/Tencent/tinker/blob/4baaf9db08f7045690dd20e48d56521fb9b6b47d/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fservice%2FTinkerPatchService.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/4baaf9db08f7045690dd20e48d56521fb9b6b47d/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fservice%2FTinkerPatchService.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fservice%2FTinkerPatchService.java?ref=4baaf9db08f7045690dd20e48d56521fb9b6b47d",
      "patch": "@@ -29,60 +29,92 @@\n import android.content.Intent;\n import android.os.AsyncTask;\n import android.os.Build;\n+import android.os.Handler;\n import android.os.IBinder;\n+import android.os.Looper;\n import android.os.PersistableBundle;\n import android.os.SystemClock;\n import android.support.annotation.Nullable;\n \n import com.tencent.tinker.lib.patch.AbstractPatch;\n import com.tencent.tinker.lib.tinker.Tinker;\n import com.tencent.tinker.lib.util.TinkerLog;\n+import com.tencent.tinker.lib.util.TinkerServiceInternals;\n import com.tencent.tinker.loader.TinkerRuntimeException;\n import com.tencent.tinker.loader.shareutil.ShareConstants;\n import com.tencent.tinker.loader.shareutil.ShareIntentUtil;\n \n import java.io.File;\n import java.lang.ref.WeakReference;\n+import java.util.concurrent.TimeUnit;\n \n /**\n  * Created by zhangshaowen on 16/3/14.\n  */\n public class TinkerPatchService {\n     private static final String TAG = \"Tinker.TinkerPatchService\";\n \n-    private static final String        PATCH_PATH_EXTRA      = \"patch_path_extra\";\n-    private static final String        RESULT_CLASS_EXTRA    = \"patch_result_class\";\n+    private static final String PATCH_PATH_EXTRA = \"patch_path_extra\";\n+    private static final String RESULT_CLASS_EXTRA = \"patch_result_class\";\n+    private static final int MIN_SDKVER_TO_USE_JOBSCHEDULER = 26;\n \n-    private static       AbstractPatch upgradePatchProcessor = null;\n-    private static       int                                    notificationId       = ShareConstants.TINKER_PATCH_SERVICE_NOTIFICATION;\n-    private static       Class<? extends AbstractResultService> resultServiceClass   = null;\n+    private static AbstractPatch upgradePatchProcessor = null;\n+    private static int notificationId = ShareConstants.TINKER_PATCH_SERVICE_NOTIFICATION;\n+    private static Class<? extends AbstractResultService> resultServiceClass = null;\n+    private static Handler mHandler = new Handler(Looper.getMainLooper());\n \n-    public static void runPatchService(Context context, String path) {\n+    public static void runPatchService(final Context context, final String path) {\n         try {\n-            if (Build.VERSION.SDK_INT < 21) {\n-                Intent intent = new Intent(context, IntentServiceRunner.class);\n-                intent.putExtra(PATCH_PATH_EXTRA, path);\n-                intent.putExtra(RESULT_CLASS_EXTRA, resultServiceClass.getName());\n-                context.startService(intent);\n+            if (Build.VERSION.SDK_INT < MIN_SDKVER_TO_USE_JOBSCHEDULER) {\n+                runPatchServiceByIntentService(context, path);\n             } else {\n-                final JobInfo.Builder jobInfoBuilder = new JobInfo.Builder(\n-                        1, new ComponentName(context, JobServiceRunner.class)\n-                );\n-                final PersistableBundle extras = new PersistableBundle();\n-                extras.putString(PATCH_PATH_EXTRA, path);\n-                extras.putString(RESULT_CLASS_EXTRA, resultServiceClass.getName());\n-                jobInfoBuilder.setExtras(extras);\n-                jobInfoBuilder.setMinimumLatency(1);\n-                final JobScheduler jobScheduler = (JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE);\n-                if (jobScheduler.schedule(jobInfoBuilder.build()) != JobScheduler.RESULT_SUCCESS) {\n-                    TinkerLog.e(TAG, \"start patch job service fail.\");\n+                if (!runPatchServiceByJobScheduler(context, path)) {\n+                    TinkerLog.e(TAG, \"start patch job service fail, try to fallback to intent service.\");\n+                    mHandler.postDelayed(new Runnable() {\n+                        @Override\n+                        public void run() {\n+                            // This method will tell us whether the intent service or the job scheduler\n+                            // is running.\n+                            TinkerLog.i(TAG, \"fallback: prepare trying to run patch service by intent service.\");\n+                            if (!TinkerServiceInternals.isTinkerPatchServiceRunning(context)) {\n+                                runPatchServiceByIntentService(context, path);\n+                            }\n+                        }\n+                    }, TimeUnit.SECONDS.toMillis(3));\n                 }\n             }\n         } catch (Throwable throwable) {\n             TinkerLog.e(TAG, \"start patch service fail, exception:\" + throwable);\n         }\n     }\n \n+    private static void runPatchServiceByIntentService(Context context, String path) {\n+        TinkerLog.i(TAG, \"run patch service by intent service.\");\n+        Intent intent = new Intent(context, IntentServiceRunner.class);\n+        intent.putExtra(PATCH_PATH_EXTRA, path);\n+        intent.putExtra(RESULT_CLASS_EXTRA, resultServiceClass.getName());\n+        context.startService(intent);\n+    }\n+\n+    @TargetApi(21)\n+    private static boolean runPatchServiceByJobScheduler(Context context, String path) {\n+        TinkerLog.i(TAG, \"run patch service by job scheduler.\");\n+        final JobInfo.Builder jobInfoBuilder = new JobInfo.Builder(\n+                1, new ComponentName(context, JobServiceRunner.class)\n+        );\n+        final PersistableBundle extras = new PersistableBundle();\n+        extras.putString(PATCH_PATH_EXTRA, path);\n+        extras.putString(RESULT_CLASS_EXTRA, resultServiceClass.getName());\n+        jobInfoBuilder.setExtras(extras);\n+        jobInfoBuilder.setOverrideDeadline(5);\n+        final JobScheduler jobScheduler = (JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE);\n+        if (jobScheduler == null) {\n+            TinkerLog.e(TAG, \"jobScheduler is null.\");\n+            return false;\n+        }\n+        return (jobScheduler.schedule(jobInfoBuilder.build()) == JobScheduler.RESULT_SUCCESS);\n+    }\n+\n     public static void setPatchProcessor(AbstractPatch upgradePatch, Class<? extends AbstractResultService> serviceClass) {\n         upgradePatchProcessor = upgradePatch;\n         resultServiceClass = serviceClass;\n@@ -109,7 +141,7 @@ public static String getPatchResultExtra(Intent intent) {\n     }\n \n     public static Class<? extends Service> getRealRunnerClass() {\n-        if (Build.VERSION.SDK_INT < 21) {\n+        if (Build.VERSION.SDK_INT < MIN_SDKVER_TO_USE_JOBSCHEDULER) {\n             return IntentServiceRunner.class;\n         } else {\n             return JobServiceRunner.class;",
      "parent_sha": "519657ae31bdfa15debea61eab9e67454fab06c2"
    }
  },
  {
    "oid": "91e9cf8861cedd13fffaa37797414a308d04202f",
    "message": "[tinker] Try to fix bugs for Activity hot-plug (load new Activity in patch dynamically) support.",
    "date": "2017-10-31T03:45:23Z",
    "url": "https://github.com/Tencent/tinker/commit/91e9cf8861cedd13fffaa37797414a308d04202f",
    "details": {
      "sha": "9ffbd20ee64aaa8114718069550baf747bac49d5",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/hotplug/interceptor/ServiceBinderInterceptor.java",
      "status": "modified",
      "additions": 33,
      "deletions": 17,
      "changes": 50,
      "blob_url": "https://github.com/Tencent/tinker/blob/91e9cf8861cedd13fffaa37797414a308d04202f/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fhotplug%2Finterceptor%2FServiceBinderInterceptor.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/91e9cf8861cedd13fffaa37797414a308d04202f/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fhotplug%2Finterceptor%2FServiceBinderInterceptor.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fhotplug%2Finterceptor%2FServiceBinderInterceptor.java?ref=91e9cf8861cedd13fffaa37797414a308d04202f",
      "patch": "@@ -76,7 +76,7 @@ protected IBinder decorate(@Nullable IBinder target) throws Throwable {\n             // Already intercepted, just return the target.\n             return target;\n         } else {\n-            return createProxy(getAllInterfacesThroughDeriveChain(target.getClass()),\n+            return createProxy(target.getClass().getClassLoader(), getAllInterfacesThroughDeriveChain(target.getClass()),\n                     new FakeClientBinderHandler(target, mBinderInvocationHandler));\n         }\n     }\n@@ -87,13 +87,13 @@ protected void inject(@Nullable IBinder decorated) throws Throwable {\n         final Map<String, IBinder> sCache = (Map<String, IBinder>) sSCacheField.get(null);\n         sCache.put(mServiceName, decorated);\n         if (Context.ACTIVITY_SERVICE.equals(mServiceName)) {\n-            fixAMSBinderCache(mBinderInvocationHandler);\n+            fixAMSBinderCache(decorated);\n         } else if (EnvConsts.PACKAGE_MANAGER_SRVNAME.equals(mServiceName)) {\n-            fixPMSBinderCache(mBaseContext, mBinderInvocationHandler);\n+            fixPMSBinderCache(mBaseContext, decorated);\n         }\n     }\n \n-    private static void fixAMSBinderCache(BinderInvocationHandler binderInvocationHandler) throws Throwable {\n+    private static void fixAMSBinderCache(IBinder fakeBinder) throws Throwable {\n         Object singletonObj = null;\n         try {\n             final Class<?> amsNativeClazz = Class.forName(\"android.app.ActivityManagerNative\");\n@@ -112,20 +112,22 @@ private static void fixAMSBinderCache(BinderInvocationHandler binderInvocationHa\n             return;\n         }\n \n-        final FakeInterfaceHandler fakeInterfaceHandler\n-                = new FakeInterfaceHandler(originalInterface, originalInterface.asBinder(), binderInvocationHandler);\n-        final IInterface fakeInterface = createProxy(getAllInterfacesThroughDeriveChain(originalInterface.getClass()), fakeInterfaceHandler);\n+        final IInterface fakeInterface = fakeBinder.queryLocalInterface(fakeBinder.getInterfaceDescriptor());\n+        if (fakeInterface == null || !ITinkerHotplugProxy.class.isAssignableFrom(fakeInterface.getClass())) {\n+            throw new IllegalStateException(\"fakeBinder does not return fakeInterface, binder: \" + fakeBinder + \", itf: \" + fakeInterface);\n+        }\n         mInstanceField.set(singletonObj, fakeInterface);\n     }\n \n-    private static void fixPMSBinderCache(Context context, BinderInvocationHandler binderInvocationHandler) throws Throwable {\n+    private static void fixPMSBinderCache(Context context, IBinder fakeBinder) throws Throwable {\n         final Class<?> activityThreadClazz = Class.forName(\"android.app.ActivityThread\");\n         final Field sPackageManagerField = ShareReflectUtil.findField(activityThreadClazz, \"sPackageManager\");\n         final IInterface originalInterface = (IInterface) sPackageManagerField.get(null);\n         if (originalInterface != null && !ITinkerHotplugProxy.class.isAssignableFrom(originalInterface.getClass())) {\n-            final FakeInterfaceHandler fakeInterfaceHandler = new FakeInterfaceHandler(originalInterface,\n-                    originalInterface.asBinder(), binderInvocationHandler);\n-            final IInterface fakeInterface = createProxy(getAllInterfacesThroughDeriveChain(originalInterface.getClass()), fakeInterfaceHandler);\n+            final IInterface fakeInterface = fakeBinder.queryLocalInterface(fakeBinder.getInterfaceDescriptor());\n+            if (fakeInterface == null || !ITinkerHotplugProxy.class.isAssignableFrom(fakeInterface.getClass())) {\n+                throw new IllegalStateException(\"fakeBinder does not return fakeInterface, binder: \" + fakeBinder + \", itf: \" + fakeInterface);\n+            }\n             sPackageManagerField.set(null, fakeInterface);\n         }\n \n@@ -134,19 +136,32 @@ private static void fixPMSBinderCache(Context context, BinderInvocationHandler b\n         final PackageManager pm = context.getPackageManager();\n         final IInterface originalInterface2 = (IInterface) mPMField.get(pm);\n         if (originalInterface2 != null && !ITinkerHotplugProxy.class.isAssignableFrom(originalInterface2.getClass())) {\n-            final FakeInterfaceHandler fakeInterfaceHandler = new FakeInterfaceHandler(originalInterface2,\n-                    originalInterface2.asBinder(), binderInvocationHandler);\n-            final IInterface fakeInterface = createProxy(getAllInterfacesThroughDeriveChain(originalInterface2.getClass()), fakeInterfaceHandler);\n+            final IInterface fakeInterface = fakeBinder.queryLocalInterface(fakeBinder.getInterfaceDescriptor());\n+            if (fakeInterface == null || !ITinkerHotplugProxy.class.isAssignableFrom(fakeInterface.getClass())) {\n+                throw new IllegalStateException(\"fakeBinder does not return fakeInterface, binder: \" + fakeBinder + \", itf: \" + fakeInterface);\n+            }\n             mPMField.set(pm, fakeInterface);\n         }\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private static <T> T createProxy(Class<?>[] itfs, InvocationHandler handler) {\n+    private static <T> T createProxy(ClassLoader cl, Class<?>[] itfs, InvocationHandler handler) {\n         final Class<?>[] mergedItfs = new Class<?>[itfs.length + 1];\n         System.arraycopy(itfs, 0, mergedItfs, 0, itfs.length);\n         mergedItfs[itfs.length] = ITinkerHotplugProxy.class;\n-        return (T) Proxy.newProxyInstance(MY_CLASSLOADER, mergedItfs, handler);\n+        try {\n+            return (T) Proxy.newProxyInstance(MY_CLASSLOADER, mergedItfs, handler);\n+        } catch (Throwable thr) {\n+            if (cl != null && cl != MY_CLASSLOADER) {\n+                try {\n+                    return (T) Proxy.newProxyInstance(cl, mergedItfs, handler);\n+                } catch (Throwable thr2) {\n+                    throw new RuntimeException(\"cl: \" + cl, thr);\n+                }\n+            } else {\n+                throw new RuntimeException(\"cl: \" + cl, thr);\n+            }\n+        }\n     }\n \n     private static Class<?>[] getAllInterfacesThroughDeriveChain(Class<?> clazz) {\n@@ -194,7 +209,8 @@ public Object invoke(Object fakeClientBinder, Method method, Object[] args) thro\n                 final InvocationHandler fakeInterfaceHandler\n                         = new FakeInterfaceHandler(originalInterface, (IBinder) fakeClientBinder, mBinderInvocationHandler);\n \n-                return createProxy(getAllInterfacesThroughDeriveChain(originalInterface.getClass()), fakeInterfaceHandler);\n+                return createProxy(originalInterface.getClass().getClassLoader(),\n+                        getAllInterfacesThroughDeriveChain(originalInterface.getClass()), fakeInterfaceHandler);\n             } else {\n                 return method.invoke(mOriginalClientBinder, args);\n             }",
      "parent_sha": "b7e67a7605922ed92c9b35447909ba00b53681c4"
    }
  },
  {
    "oid": "f985fd567f4d0f9f0f227b835cd44cf94d7adbd4",
    "message": "[tinker] fix #1232",
    "date": "2019-09-19T03:47:11Z",
    "url": "https://github.com/Tencent/tinker/commit/f985fd567f4d0f9f0f227b835cd44cf94d7adbd4",
    "details": {
      "sha": "df7e5e7122b52b66f093eacb5dfaa43746841e8b",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourceLoader.java",
      "status": "modified",
      "additions": 92,
      "deletions": 1,
      "changes": 93,
      "blob_url": "https://github.com/Tencent/tinker/blob/f985fd567f4d0f9f0f227b835cd44cf94d7adbd4/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourceLoader.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/f985fd567f4d0f9f0f227b835cd44cf94d7adbd4/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourceLoader.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourceLoader.java?ref=f985fd567f4d0f9f0f227b835cd44cf94d7adbd4",
      "patch": "@@ -16,18 +16,25 @@\n \n package com.tencent.tinker.loader;\n \n+import android.app.Application;\n import android.content.Context;\n import android.content.Intent;\n+import android.os.Build;\n+import android.os.Handler;\n+import android.os.Message;\n+import android.os.Process;\n import android.util.Log;\n \n import com.tencent.tinker.loader.app.TinkerApplication;\n import com.tencent.tinker.loader.shareutil.ShareConstants;\n import com.tencent.tinker.loader.shareutil.ShareIntentUtil;\n import com.tencent.tinker.loader.shareutil.SharePatchFileUtil;\n+import com.tencent.tinker.loader.shareutil.ShareReflectUtil;\n import com.tencent.tinker.loader.shareutil.ShareResPatchInfo;\n import com.tencent.tinker.loader.shareutil.ShareSecurityCheck;\n \n import java.io.File;\n+import java.lang.reflect.Field;\n \n /**\n  * Created by liangwenxiang on 2016/4/14.\n@@ -76,7 +83,8 @@ public static boolean loadTinkerResources(TinkerApplication application, String\n             ShareIntentUtil.setIntentReturnCode(intentResult, ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_LOAD_EXCEPTION);\n             return false;\n         }\n-\n+        // tinker resources loaded, monitor runtime accident\n+        ResourceStateMonitor.tryStart(application);\n         return true;\n     }\n \n@@ -128,4 +136,87 @@ public static boolean checkComplete(Context context, String directory, ShareSecu\n         }\n         return true;\n     }\n+\n+\n+    /**\n+     * Some situations may cause our resource modification to be ineffective,\n+     * for example, an APPLICATION_INFO_CHANGED message will reset LoadedApk#mResDir\n+     * to default value, then a relaunch activity which using tinker resources may\n+     * throw an Resources$NotFoundException.\n+     *\n+     * Monitor and handle them.\n+     */\n+    private static class ResourceStateMonitor {\n+\n+        private static boolean started = false;\n+\n+        static void tryStart(Application app) {\n+            if (Build.VERSION.SDK_INT < 26 || started) {\n+                return;\n+            }\n+            try {\n+                interceptHandler(fetchMHObject(app));\n+                started = true;\n+            } catch (Throwable e) {\n+                Log.e(TAG, \"ResourceStateMonitor start failed, simply ignore.\", e);\n+            }\n+        }\n+\n+        private static Handler fetchMHObject(Context context) throws Exception {\n+            final Object activityThread = ShareReflectUtil.getActivityThread(context, null);\n+            final Field mHField = ShareReflectUtil.findField(activityThread, \"mH\");\n+            return (Handler) mHField.get(activityThread);\n+        }\n+\n+        private static void interceptHandler(Handler mH) throws Exception {\n+            final Field mCallbackField = ShareReflectUtil.findField(Handler.class, \"mCallback\");\n+            final Handler.Callback originCallback = (Handler.Callback) mCallbackField.get(mH);\n+            HackerCallback hackerCallback = new HackerCallback(originCallback, mH.getClass());\n+            mCallbackField.set(mH, hackerCallback);\n+        }\n+\n+        private static class HackerCallback implements Handler.Callback {\n+\n+            private final int APPLICATION_INFO_CHANGED;\n+\n+            private Handler.Callback origin;\n+\n+            HackerCallback(Handler.Callback ori, Class $H) {\n+                this.origin = ori;\n+                int appInfoChanged;\n+                try {\n+                    appInfoChanged = ShareReflectUtil.findField($H, \"APPLICATION_INFO_CHANGED\").getInt(null);\n+                } catch (Throwable e) {\n+                    appInfoChanged = 156; // default value\n+                }\n+                APPLICATION_INFO_CHANGED = appInfoChanged;\n+            }\n+\n+            @Override\n+            public boolean handleMessage(Message msg) {\n+                boolean consume = false;\n+                if (hackMessage(msg)) {\n+                    consume = true;\n+                } else if (origin != null) {\n+                    consume = origin.handleMessage(msg);\n+                }\n+                return consume;\n+            }\n+\n+            private boolean hackMessage(Message msg) {\n+                if (msg.what == APPLICATION_INFO_CHANGED) {\n+                    // We are generally in the background this moment(signal trigger is\n+                    // in front of user), and the signal was going to relaunch all our\n+                    // activities to apply new overlay resources. So we could simply kill\n+                    // ourselves, or ignore this signal, or reload tinker resources.\n+                    Process.killProcess(Process.myPid());\n+                    return true;\n+                }\n+                return false;\n+            }\n+\n+        }\n+\n+    }\n+\n }",
      "parent_sha": "66a2f5db7171b69a97011c2789173a03259d8e2f"
    }
  },
  {
    "oid": "3941ea632ae1043bc91dec2349b8862380f88aba",
    "message": "[bugfix] protect activityManager npe at some oppo phone",
    "date": "2017-05-24T05:32:44Z",
    "url": "https://github.com/Tencent/tinker/commit/3941ea632ae1043bc91dec2349b8862380f88aba",
    "details": {
      "sha": "416fccbeab67314a298eff69f92758bea75e9017",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareTinkerInternals.java",
      "status": "modified",
      "additions": 15,
      "deletions": 13,
      "changes": 28,
      "blob_url": "https://github.com/Tencent/tinker/blob/3941ea632ae1043bc91dec2349b8862380f88aba/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FShareTinkerInternals.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/3941ea632ae1043bc91dec2349b8862380f88aba/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FShareTinkerInternals.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FShareTinkerInternals.java?ref=3941ea632ae1043bc91dec2349b8862380f88aba",
      "patch": "@@ -372,23 +372,25 @@ private static String getProcessNameInternal(final Context context) {\n         ActivityManager activityManager =\n             (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);\n \n-        List<ActivityManager.RunningAppProcessInfo> appProcessList = activityManager\n-            .getRunningAppProcesses();\n+        if (activityManager != null) {\n+            List<ActivityManager.RunningAppProcessInfo> appProcessList = activityManager\n+                .getRunningAppProcesses();\n \n-        if (appProcessList != null) {\n-            try {\n-                for (ActivityManager.RunningAppProcessInfo process : appProcessList) {\n-                    if (process.pid == myPid) {\n-                        myProcess = process;\n-                        break;\n+            if (appProcessList != null) {\n+                try {\n+                    for (ActivityManager.RunningAppProcessInfo process : appProcessList) {\n+                        if (process.pid == myPid) {\n+                            myProcess = process;\n+                            break;\n+                        }\n                     }\n+                } catch (Exception e) {\n+                    Log.e(TAG, \"getProcessNameInternal exception:\" + e.getMessage());\n                 }\n-            } catch (Exception e) {\n-                Log.e(TAG, \"getProcessNameInternal exception:\" + e.getMessage());\n-            }\n \n-            if (myProcess != null) {\n-                return myProcess.processName;\n+                if (myProcess != null) {\n+                    return myProcess.processName;\n+                }\n             }\n         }\n ",
      "parent_sha": "855084e59cf5d4965ae448fe65321002c4da3480"
    }
  },
  {
    "oid": "1703941f10d6f9542edf1e2007435cc70f07d93c",
    "message": "[tinker] bugfix: NPE when isProtectedApp option is enabled.",
    "date": "2017-05-08T09:00:24Z",
    "url": "https://github.com/Tencent/tinker/commit/1703941f10d6f9542edf1e2007435cc70f07d93c",
    "details": {
      "sha": "9bd88cd572a5b1151adcba35c72757e9dc0c14cb",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/Tencent/tinker/blob/1703941f10d6f9542edf1e2007435cc70f07d93c/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FDexDiffDecoder.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/1703941f10d6f9542edf1e2007435cc70f07d93c/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FDexDiffDecoder.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FDexDiffDecoder.java?ref=1703941f10d6f9542edf1e2007435cc70f07d93c",
      "patch": "@@ -42,6 +42,7 @@\n import org.jf.dexlib2.iface.DexFile;\n import org.jf.dexlib2.iface.Field;\n import org.jf.dexlib2.iface.Method;\n+import org.jf.dexlib2.iface.MethodImplementation;\n import org.jf.dexlib2.writer.builder.BuilderField;\n import org.jf.dexlib2.writer.builder.BuilderMethod;\n import org.jf.dexlib2.writer.builder.DexBuilder;\n@@ -262,14 +263,18 @@ private void generateChangedClassesDexFile() throws IOException {\n                 List<BuilderMethod> builderMethods = new ArrayList<>();\n \n                 for (Method method : classDef.getMethods()) {\n+                    MethodImplementation methodImpl = method.getImplementation();\n+                    if (methodImpl != null) {\n+                        methodImpl = new BuilderMutableMethodImplementation(dexBuilder, methodImpl);\n+                    }\n                     BuilderMethod builderMethod = dexBuilder.internMethod(\n                             method.getDefiningClass(),\n                             method.getName(),\n                             method.getParameters(),\n                             method.getReturnType(),\n                             method.getAccessFlags(),\n                             method.getAnnotations(),\n-                            new BuilderMutableMethodImplementation(dexBuilder, method.getImplementation())\n+                            methodImpl\n                     );\n                     builderMethods.add(builderMethod);\n                 }",
      "parent_sha": "2664cffc23edec2d60a688dd6a9803b4fd57974b"
    }
  },
  {
    "oid": "13266605295f7b61f06bbc534f178e78383e0a75",
    "message": "[tinker] Do not call registerDexModule for OPPO & VIVO Android S and newer devices.",
    "date": "2022-07-15T06:54:13Z",
    "url": "https://github.com/Tencent/tinker/commit/13266605295f7b61f06bbc534f178e78383e0a75",
    "details": {
      "sha": "a29cf85d18bb19f3ef7f85124f36379850d8389e",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/Tencent/tinker/blob/13266605295f7b61f06bbc534f178e78383e0a75/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/13266605295f7b61f06bbc534f178e78383e0a75/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java?ref=13266605295f7b61f06bbc534f178e78383e0a75",
      "patch": "@@ -242,7 +242,8 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n         }\n         for (int i = 0; i < 5; ++i) {\n             if (ShareTinkerInternals.isNewerOrEqualThanVersion(31, true)\n-            && !\"xiaomi\".equalsIgnoreCase(Build.MANUFACTURER) && !\"redmi\".equalsIgnoreCase(Build.MANUFACTURER)) {\n+            && !\"xiaomi\".equalsIgnoreCase(Build.MANUFACTURER) && !\"redmi\".equalsIgnoreCase(Build.MANUFACTURER)\n+            && !\"oppo\".equalsIgnoreCase(Build.MANUFACTURER) && !\"vivo\".equalsIgnoreCase(Build.MANUFACTURER)) {\n                 try {\n                     registerDexModule(context, dexPath);\n                     if (SharePatchFileUtil.isLegalFile(oatFile)) {",
      "parent_sha": "41d0910c832ab96635d49eec3e09c98771c54d34"
    }
  },
  {
    "oid": "735c5c3c11f8aa43c88ea96f59e3119264c79489",
    "message": "[tinker] Change full patched dex directory name in tempPatchedDex directory.",
    "date": "2016-11-22T09:37:20Z",
    "url": "https://github.com/Tencent/tinker/commit/735c5c3c11f8aa43c88ea96f59e3119264c79489",
    "details": {
      "sha": "0891216d40bfa9ba09aa4b612a0b449b456603a4",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/tinker/blob/735c5c3c11f8aa43c88ea96f59e3119264c79489/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FDexDiffDecoder.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/735c5c3c11f8aa43c88ea96f59e3119264c79489/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FDexDiffDecoder.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FDexDiffDecoder.java?ref=735c5c3c11f8aa43c88ea96f59e3119264c79489",
      "patch": "@@ -386,7 +386,7 @@ private void logDexesToDexMeta() throws IOException {\n \n     @SuppressWarnings(\"NewApi\")\n     private void generatePatchedDexInfoFile() {\n-        File tempFullPatchDexPath = new File(config.mOutFolder + File.separator + TypedValue.DEX_TEMP_PATCH_DIR + File.separator + \"dalvik\");\n+        File tempFullPatchDexPath = new File(config.mOutFolder + File.separator + TypedValue.DEX_TEMP_PATCH_DIR + File.separator + \"full\");\n \n         // Generate dex diff out and full patched dex if a pair of dex is different.\n         for (AbstractMap.SimpleEntry<File, File> oldAndNewDexFilePair : oldAndNewDexFilePairList) {",
      "parent_sha": "93ecc9351367badc02a91fac25764bee50e6e6a6"
    }
  },
  {
    "oid": "c72c1da3fe3d84506fd6f35cf01ef760fae545ad",
    "message": "fix up\n\nSigned-off-by: noproxy <toxzcp@gmail.com>",
    "date": "2019-05-15T08:59:07Z",
    "url": "https://github.com/Tencent/tinker/commit/c72c1da3fe3d84506fd6f35cf01ef760fae545ad",
    "details": {
      "sha": "43bd09fd780fe99087398e4f7ab4794e61dcf63f",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/util/ExcludedClassModifiedChecker.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/Tencent/tinker/blob/c72c1da3fe3d84506fd6f35cf01ef760fae545ad/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Futil%2FExcludedClassModifiedChecker.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/c72c1da3fe3d84506fd6f35cf01ef760fae545ad/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Futil%2FExcludedClassModifiedChecker.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Futil%2FExcludedClassModifiedChecker.java?ref=c72c1da3fe3d84506fd6f35cf01ef760fae545ad",
      "patch": "@@ -193,7 +193,7 @@ public void checkIfExcludedClassWasModifiedInNewDex(File oldFile, File newFile)\n                     final String msg = \"loader classes are found in old secondary dex. Found classes: \" + Utils.collectionToString(oldClassesDescToCheck);\n                     if (config.mAllowLoaderInAnyDex) {\n                         Logger.d(msg);\n-                        break;\n+                        return;\n                     } else {\n                         throw new TinkerPatchException(msg);\n                     }\n@@ -202,7 +202,7 @@ public void checkIfExcludedClassWasModifiedInNewDex(File oldFile, File newFile)\n                     final String msg = \"loader classes are found in new secondary dex. Found classes: \" + Utils.collectionToString(newClassesDescToCheck);\n                     if (config.mAllowLoaderInAnyDex) {\n                         Logger.d(msg);\n-                        break;\n+                        return;\n                     } else {\n                         throw new TinkerPatchException(msg);\n                     }",
      "parent_sha": "ee665c2eacd02a07e9d19b2309b81477beec924c"
    }
  },
  {
    "oid": "54447ce58a8c424d8f9e14cb4bd9c0671ab9742d",
    "message": "[tinker] Using performDexOptSecondary for all manufacturers' devices and registerDexModule for Huawei/Honor device only.",
    "date": "2020-08-21T07:47:49Z",
    "url": "https://github.com/Tencent/tinker/commit/54447ce58a8c424d8f9e14cb4bd9c0671ab9742d",
    "details": {
      "sha": "e7f32599d63b85c1088efab1c26044ab5eb08587",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java",
      "status": "modified",
      "additions": 155,
      "deletions": 19,
      "changes": 174,
      "blob_url": "https://github.com/Tencent/tinker/blob/54447ce58a8c424d8f9e14cb4bd9c0671ab9742d/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/54447ce58a8c424d8f9e14cb4bd9c0671ab9742d/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java?ref=54447ce58a8c424d8f9e14cb4bd9c0671ab9742d",
      "patch": "@@ -20,9 +20,13 @@\n import android.content.ContextWrapper;\n import android.content.pm.PackageManager;\n import android.content.pm.PackageManager$DexModuleRegisterCallback;\n+import android.os.Binder;\n import android.os.Build;\n import android.os.IBinder;\n import android.os.IInterface;\n+import android.os.Parcel;\n+import android.os.RemoteException;\n+import android.os.SystemClock;\n \n import com.tencent.tinker.anno.Keep;\n import com.tencent.tinker.loader.shareutil.ShareFileLockHelper;\n@@ -35,6 +39,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n import java.lang.reflect.InvocationHandler;\n import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n@@ -176,27 +181,19 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n                     ShareTinkerLog.i(TAG, \"[+] Odex file exists, skip bg-dexopt triggering.\");\n                     return;\n                 }\n-                final PackageManager syncPM = getSynchronizedPackageManager(context);\n-                final Method registerDexModuleMethod = ShareReflectUtil.findMethod(syncPM.getClass(), \"registerDexModule\", String.class, PackageManager$DexModuleRegisterCallback.class);\n+                boolean performDexOptSecondarySuccess = true;\n                 try {\n-                    registerDexModuleMethod.invoke(syncPM, dexPath, new PackageManager$DexModuleRegisterCallback() {\n-                        @Override\n-                        @Keep\n-                        public void onDexModuleRegistered(String dexModulePath, boolean success, String message) {\n-                            ShareTinkerLog.i(TAG, \"[+] onDexModuleRegistered, path: %s, is_success: %s, msg: %s\", dexModulePath, success, message);\n-                        }\n-                    });\n-                } catch (Throwable ignored) {\n-                    // Ignored.\n+                    performDexOptSecondary(context, oatPath);\n+                } catch (Throwable thr) {\n+                    ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call performDexOptSecondary.\");\n+                    performDexOptSecondarySuccess = false;\n                 }\n-                if (!oatFile.exists()) {\n-                    registerDexModuleMethod.invoke(syncPM, dexPath, new PackageManager$DexModuleRegisterCallback() {\n-                        @Override\n-                        @Keep\n-                        public void onDexModuleRegistered(String dexModulePath, boolean success, String message) {\n-                            ShareTinkerLog.i(TAG, \"[+] onDexModuleRegistered again, path: %s, is_success: %s, msg: %s\", dexModulePath, success, message);\n-                        }\n-                    });\n+                // Take a rest. And hope any asynchronous mechanism may generate odex we need.\n+                SystemClock.sleep(1000);\n+                if (!performDexOptSecondarySuccess || !oatFile.exists()) {\n+                    if (\"huawei\".equalsIgnoreCase(Build.MANUFACTURER) || \"honor\".equalsIgnoreCase(Build.MANUFACTURER)) {\n+                        registerDexModule(context, dexPath, oatPath);\n+                    }\n                 }\n                 if (oatFile.exists()) {\n                     ShareTinkerLog.i(TAG, \"[+] Bg-dexopt was triggered successfully.\");\n@@ -208,6 +205,145 @@ public void onDexModuleRegistered(String dexModulePath, boolean success, String\n             }\n         }\n \n+        public static void performDexOptSecondary(Context context, String oatPath) throws IllegalStateException {\n+            try {\n+                ShareTinkerLog.i(TAG, \"[+] Start trigger secondary dexopt.\");\n+                final File oatFile = new File(oatPath);\n+                final int transactionCode = queryPerformDexOptSecondaryTransactionCode();\n+                final String packageName = context.getPackageName();\n+                final String targetCompilerFilter = \"quicken\";\n+                final boolean force = false;\n+\n+                final Class<?> serviceManagerClazz = Class.forName(\"android.os.ServiceManager\");\n+                final Method getServiceMethod = ShareReflectUtil.findMethod(serviceManagerClazz, \"getService\", String.class);\n+                final IBinder pmBinder = (IBinder) getServiceMethod.invoke(null, \"package\");\n+                if (pmBinder == null) {\n+                    throw new IllegalStateException(\"Fail to get pm binder.\");\n+                }\n+                final int maxRetries = 20;\n+                for (int i = 0; i < maxRetries; ++i) {\n+                    Throwable pendingThr = null;\n+                    try {\n+                        performDexOptSecondaryImpl(pmBinder, transactionCode, packageName, targetCompilerFilter, force);\n+                    } catch (Throwable thr) {\n+                        pendingThr = thr;\n+                    }\n+                    SystemClock.sleep(3000);\n+                    if (oatFile.exists()) {\n+                        break;\n+                    }\n+                    if (i == maxRetries - 1) {\n+                        if (pendingThr != null) {\n+                            throw pendingThr;\n+                        }\n+                        if (!oatFile.exists()) {\n+                            throw new IllegalStateException(\"Expected oat file: \" + oatFile.getAbsolutePath() + \" does not exist.\");\n+                        }\n+                    }\n+                }\n+                ShareTinkerLog.i(TAG, \"[+] Secondary dexopt done.\");\n+            } catch (IllegalStateException e) {\n+                throw e;\n+            } catch (Throwable thr) {\n+                throw new IllegalStateException(\"Failure on triggering secondary dexopt\", thr);\n+            }\n+        }\n+\n+        private static int queryPerformDexOptSecondaryTransactionCode() throws UnsupportedOperationException {\n+            try {\n+                final Method getDeclaredFieldMethod = ShareReflectUtil.findMethod(Class.class, \"getDeclaredField\", String.class);\n+                getDeclaredFieldMethod.setAccessible(true);\n+                final Field cstField = (Field) getDeclaredFieldMethod.invoke(Class.forName(\"android.content.pm.IPackageManager$Stub\"),\n+                      \"TRANSACTION_performDexOptSecondary\");\n+                cstField.setAccessible(true);\n+                return (int) cstField.get(null);\n+            } catch (Throwable thr) {\n+                throw new UnsupportedOperationException(\"Cannot query transaction code of performDexOptSecondary.\", thr);\n+            }\n+        }\n+\n+        private static final String PM_INTERFACE_DESCRIPTOR = \"android.content.pm.IPackageManager\";\n+\n+        private static void performDexOptSecondaryImpl(IBinder pmBinder, int transactionCode, String packageName, String compileFilter, boolean force) {\n+            Parcel data = null;\n+            Parcel reply = null;\n+            final long identity = Binder.clearCallingIdentity();\n+            try {\n+                data = Parcel.obtain();\n+                reply = Parcel.obtain();\n+                boolean result;\n+                data.writeInterfaceToken(PM_INTERFACE_DESCRIPTOR);\n+                data.writeString(packageName);\n+                data.writeString(compileFilter);\n+                data.writeInt(((force) ? (1) : (0)));\n+                boolean status = false;\n+                try {\n+                    status = pmBinder.transact(transactionCode, data, reply, 0);\n+                    if (!status) {\n+                        throw new IllegalStateException(\"Binder transaction failure.\");\n+                    }\n+                } catch (RemoteException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+                try {\n+                    reply.readException();\n+                } catch (Throwable thr) {\n+                    throw new IllegalStateException(thr);\n+                }\n+                result = (0 != reply.readInt());\n+                if (!result) {\n+                    ShareTinkerLog.w(TAG, \"[!] System API return false.\");\n+                }\n+            } finally {\n+                Binder.restoreCallingIdentity(identity);\n+                if (reply != null) {\n+                    reply.recycle();\n+                }\n+                if (data != null) {\n+                    data.recycle();\n+                }\n+            }\n+        }\n+\n+        private static void registerDexModule(Context context, String dexPath, String oatPath) throws IllegalStateException {\n+            try {\n+                final PackageManager syncPM = getSynchronizedPackageManager(context);\n+                final Method registerDexModuleMethod = ShareReflectUtil.findMethod(syncPM.getClass(),\n+                \"registerDexModule\", String.class, PackageManager$DexModuleRegisterCallback.class);\n+                final File oatFile = new File(oatPath);\n+                final int maxRetries = 2;\n+                for (int i = 0; i < maxRetries; ++i) {\n+                    Throwable pendingThr = null;\n+                    try {\n+                        registerDexModuleMethod.invoke(syncPM, dexPath, new PackageManager$DexModuleRegisterCallback() {\n+                            @Override\n+                            public void onDexModuleRegistered(String dexModulePath, boolean success, String message) {\n+                                ShareTinkerLog.i(TAG, \"[+] onDexModuleRegistered, path: %s, is_success: %s, msg: %s\", dexModulePath, success, message);\n+                            }\n+                        });\n+                    } catch (Throwable thr) {\n+                        pendingThr = thr;\n+                    }\n+                    SystemClock.sleep(3000);\n+                    if (oatFile.exists()) {\n+                        break;\n+                    }\n+                    if (i == maxRetries - 1) {\n+                        if (pendingThr != null) {\n+                            throw pendingThr;\n+                        }\n+                        if (!oatFile.exists()) {\n+                            throw new IllegalStateException(\"Expected oat file: \" + oatFile.getAbsolutePath() + \" does not exist.\");\n+                        }\n+                    }\n+                }\n+            } catch (IllegalStateException e) {\n+                throw e;\n+            } catch (Throwable thr) {\n+                throw new IllegalStateException(\"Fail to call registerDexModule.\", thr);\n+            }\n+        }\n+\n         private static final PackageManager[] CACHED_SYNC_PM  = {null};\n \n         private static PackageManager getSynchronizedPackageManager(Context context) throws Throwable {",
      "parent_sha": "3835b208f8729e9fcfc0801178d8a0ef853ecacf"
    }
  },
  {
    "oid": "34583630ded26a18a6b396746642a7b6db4b70cc",
    "message": "[tinker] use application.getResources() instead of reflection to avoid failure.",
    "date": "2018-03-08T03:12:51Z",
    "url": "https://github.com/Tencent/tinker/commit/34583630ded26a18a6b396746642a7b6db4b70cc",
    "details": {
      "sha": "d238ac38ecaedae78e16ff685ee40ac9d01241ad",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/AndroidNClassLoader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/tinker/blob/34583630ded26a18a6b396746642a7b6db4b70cc/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/34583630ded26a18a6b396746642a7b6db4b70cc/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java?ref=34583630ded26a18a6b396746642a7b6db4b70cc",
      "patch": "@@ -120,7 +120,7 @@ private static void reflectPackageInfoClassloader(Application application, Class\n         Object basePackageInfo = ShareReflectUtil.findField(baseContext, \"mPackageInfo\").get(baseContext);\n         ShareReflectUtil.findField(basePackageInfo, \"mClassLoader\").set(basePackageInfo, reflectClassLoader);\n \n-        Resources res = (Resources) ShareReflectUtil.findMethod(basePackageInfo, \"getResources\").invoke(basePackageInfo);\n+        Resources res = application.getResources();\n         ShareReflectUtil.findField(res, \"mClassLoader\").set(res, reflectClassLoader);\n \n         Object drawableInflater = ShareReflectUtil.findField(res, \"mDrawableInflater\").get(res);",
      "parent_sha": "d2142786ba34eaee50602e78e88abfe139864967"
    }
  },
  {
    "oid": "f2f46b1a8dde53f286f394ec72bb88944e46f9e6",
    "message": "[tinker] avoid crash when load patched resources on some devices.",
    "date": "2018-05-16T02:23:01Z",
    "url": "https://github.com/Tencent/tinker/commit/f2f46b1a8dde53f286f394ec72bb88944e46f9e6",
    "details": {
      "sha": "8c363ca42bb17dacf1526d281a0d60af4c9c9887",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/Tencent/tinker/blob/f2f46b1a8dde53f286f394ec72bb88944e46f9e6/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourcePatcher.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/f2f46b1a8dde53f286f394ec72bb88944e46f9e6/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourcePatcher.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourcePatcher.java?ref=f2f46b1a8dde53f286f394ec72bb88944e46f9e6",
      "patch": "@@ -98,8 +98,12 @@ public static void isResourceCanPatch(Context context) throws Throwable {\n \n         // Kitkat needs this method call, Lollipop doesn't. However, it doesn't seem to cause any harm\n         // in L, so we do it unconditionally.\n-        stringBlocksField = findField(assets, \"mStringBlocks\");\n-        ensureStringBlocksMethod = findMethod(assets, \"ensureStringBlocks\");\n+        try {\n+            stringBlocksField = findField(assets, \"mStringBlocks\");\n+            ensureStringBlocksMethod = findMethod(assets, \"ensureStringBlocks\");\n+        } catch (Throwable ignored) {\n+            // Ignored.\n+        }\n \n         // Use class fetched from instance to avoid some ROMs that use customized AssetManager\n         // class. (e.g. Baidu OS)\n@@ -197,8 +201,10 @@ public static void monkeyPatchExistingResources(Context context, String external\n \n         // Kitkat needs this method call, Lollipop doesn't. However, it doesn't seem to cause any harm\n         // in L, so we do it unconditionally.\n-        stringBlocksField.set(newAssetManager, null);\n-        ensureStringBlocksMethod.invoke(newAssetManager);\n+        if (stringBlocksField != null && ensureStringBlocksMethod != null) {\n+            stringBlocksField.set(newAssetManager, null);\n+            ensureStringBlocksMethod.invoke(newAssetManager);\n+        }\n \n         for (WeakReference<Resources> wr : references) {\n             final Resources resources = wr.get();",
      "parent_sha": "fb7ac266d01ad1368c13f53d96164336639781e7"
    }
  },
  {
    "oid": "234c11268bae5bb6e246df507aee64568539fad4",
    "message": "1.  only use parallel dex optimizer for art",
    "date": "2017-01-09T12:19:21Z",
    "url": "https://github.com/Tencent/tinker/commit/234c11268bae5bb6e246df507aee64568539fad4",
    "details": {
      "sha": "4a56d2b2bc1e5380806212baee159ef5ee9975dc",
      "filename": "tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java",
      "status": "modified",
      "additions": 44,
      "deletions": 26,
      "changes": 70,
      "blob_url": "https://github.com/Tencent/tinker/blob/234c11268bae5bb6e246df507aee64568539fad4/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fpatch%2FDexDiffPatchInternal.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/234c11268bae5bb6e246df507aee64568539fad4/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fpatch%2FDexDiffPatchInternal.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fpatch%2FDexDiffPatchInternal.java?ref=234c11268bae5bb6e246df507aee64568539fad4",
      "patch": "@@ -148,57 +148,75 @@ private static boolean patchDexExtractViaDexDiff(Context context, String patchVe\n \n             TinkerLog.w(TAG, \"patch recover, try to optimize dex file count:%d\", files.length);\n \n-            failOptDexFile.clear();\n-            // try parallel dex optimizer\n-            TinkerParallelDexOptimizer.optimizeAll(\n+            // only use parallel dex optimizer for art\n+            if (ShareTinkerInternals.isVmArt()) {\n+                failOptDexFile.clear();\n+                // try parallel dex optimizer\n+                TinkerParallelDexOptimizer.optimizeAll(\n                     files, optimizeDexDirectoryFile,\n                     new TinkerParallelDexOptimizer.ResultCallback() {\n                         long startTime;\n+\n                         @Override\n                         public void onStart(File dexFile, File optimizedDir) {\n                             startTime = System.currentTimeMillis();\n-                            TinkerLog.i(TAG, \"start to optimize dex %s, size: %d\", dexFile.getPath(), dexFile.length());\n+                            TinkerLog.i(TAG, \"start to parallel optimize dex %s, size: %d\", dexFile.getPath(), dexFile.length());\n                         }\n \n                         @Override\n                         public void onSuccess(File dexFile, File optimizedDir, File optimizedFile) {\n                             // Do nothing.\n-                            TinkerLog.i(TAG, \"success to optimize dex %s, opt file size: %d, use time %d\",\n+                            TinkerLog.i(TAG, \"success to parallel optimize dex %s, opt file size: %d, use time %d\",\n                                 dexFile.getPath(), optimizedFile.length(), (System.currentTimeMillis() - startTime));\n                         }\n \n                         @Override\n                         public void onFailed(File dexFile, File optimizedDir, Throwable thr) {\n-                            TinkerLog.i(TAG, \"fail to optimize dex %s use time %d\",\n+                            TinkerLog.i(TAG, \"fail to parallel optimize dex %s use time %d\",\n                                 dexFile.getPath(), (System.currentTimeMillis() - startTime));\n                             failOptDexFile.add(dexFile);\n                         }\n                     }\n-            );\n-            // try again\n-            for (File retryDexFile : failOptDexFile) {\n-                try {\n-                    String outputPathName = SharePatchFileUtil.optimizedPathFor(retryDexFile, optimizeDexDirectoryFile);\n-\n-                    if (!SharePatchFileUtil.isLegalFile(retryDexFile)) {\n-                        manager.getPatchReporter().onPatchDexOptFail(patchFile, retryDexFile,\n-                            optimizeDexDirectory, retryDexFile.getName(), new TinkerRuntimeException(\"retry dex optimize file is not exist, name: \" + retryDexFile.getName()));\n+                );\n+                // try again\n+                for (File retryDexFile : failOptDexFile) {\n+                    try {\n+                        String outputPathName = SharePatchFileUtil.optimizedPathFor(retryDexFile, optimizeDexDirectoryFile);\n+\n+                        if (!SharePatchFileUtil.isLegalFile(retryDexFile)) {\n+                            manager.getPatchReporter().onPatchDexOptFail(patchFile, retryDexFile,\n+                                optimizeDexDirectory, retryDexFile.getName(), new TinkerRuntimeException(\"retry dex optimize file is not exist, name: \" + retryDexFile.getName()));\n+                            return false;\n+                        }\n+                        TinkerLog.i(TAG, \"try to retry dex optimize file, path: %s, size: %d\", retryDexFile.getPath(), retryDexFile.length());\n+                        long start = System.currentTimeMillis();\n+                        DexFile.loadDex(retryDexFile.getAbsolutePath(), outputPathName, 0);\n+\n+                        TinkerLog.i(TAG, \"success retry dex optimize file, path: %s, opt file size: %d, use time: %d\",\n+                            retryDexFile.getPath(), new File(outputPathName).length(), (System.currentTimeMillis() - start));\n+                    } catch (Throwable e) {\n+                        TinkerLog.e(TAG, \"retry dex optimize or load failed, path:\" + retryDexFile.getPath());\n+                        manager.getPatchReporter().onPatchDexOptFail(patchFile, retryDexFile, optimizeDexDirectory, retryDexFile.getName(), e);\n+                        return false;\n+                    }\n+                }\n+            // for dalvik, machine hardware performance is much worse than art machine\n+            } else {\n+                for (File file : files) {\n+                    try {\n+                        String outputPathName = SharePatchFileUtil.optimizedPathFor(file, optimizeDexDirectoryFile);\n+                        long start = System.currentTimeMillis();\n+                        DexFile.loadDex(file.getAbsolutePath(), outputPathName, 0);\n+                        TinkerLog.i(TAG, \"success single dex optimize file, path: %s, opt file size: %d, use time: %d\", file.getPath(), new File(outputPathName).length(),\n+                            (System.currentTimeMillis() - start));\n+                    } catch (Throwable e) {\n+                        TinkerLog.e(TAG, \"single dex optimize or load failed, path:\" + file.getPath());\n+                        manager.getPatchReporter().onPatchDexOptFail(patchFile, file, optimizeDexDirectory, file.getName(), e);\n                         return false;\n                     }\n-                    TinkerLog.i(TAG, \"try to retry dex optimize file, path: %s, size: %d\", retryDexFile.getPath(), retryDexFile.length());\n-                    long start = System.currentTimeMillis();\n-                    DexFile.loadDex(retryDexFile.getAbsolutePath(), outputPathName, 0);\n-\n-                    TinkerLog.i(TAG, \"success retry dex optimize file, path: %s, opt file size: %d, use time: %d\",\n-                        retryDexFile.getPath(), new File(outputPathName).length(), (System.currentTimeMillis() - start));\n-                } catch (Throwable e) {\n-                    TinkerLog.e(TAG, \"dex optimize or load failed, path:\" + retryDexFile.getPath());\n-                    manager.getPatchReporter().onPatchDexOptFail(patchFile, retryDexFile, optimizeDexDirectory, retryDexFile.getName(), e);\n-                    return false;\n                 }\n             }\n         }\n-\n         return true;\n     }\n ",
      "parent_sha": "ffca1ca869f59aa080fff5743d707fca1f11b194"
    }
  },
  {
    "oid": "a0eb75ee11cf3226bfe405b5536f76387920f798",
    "message": "fix issue https://github.com/Tencent/tinker/issues/202\nunparse xml in raw directory",
    "date": "2016-11-29T08:56:49Z",
    "url": "https://github.com/Tencent/tinker/commit/a0eb75ee11cf3226bfe405b5536f76387920f798",
    "details": {
      "sha": "fd2e72206e60c429f5da3d85c0dde279a53e4f3c",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/AaptUtil.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/Tencent/tinker/blob/a0eb75ee11cf3226bfe405b5536f76387920f798/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Faapt%2FAaptUtil.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/a0eb75ee11cf3226bfe405b5536f76387920f798/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Faapt%2FAaptUtil.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Faapt%2FAaptUtil.java?ref=a0eb75ee11cf3226bfe405b5536f76387920f798",
      "patch": "@@ -105,8 +105,8 @@ public static void processXmlFilesForIds(String resourceDirectory, List<RDotTxtE\n                 File xmlFile = new File(xmlFullFilename);\n                 String parentFullFilename = xmlFile.getParent();\n                 File parentFile = new File(parentFullFilename);\n-                if (isAValuesDirectory(parentFile.getName())) {\n-                    // Ignore files under values* directories.\n+                if (isAValuesDirectory(parentFile.getName()) || parentFile.getName().startsWith(\"raw\")) {\n+                    // Ignore files under values* directories and raw*.\n                     continue;\n                 }\n                 processXmlFile(xmlFullFilename, references, resourceCollector);",
      "parent_sha": "735c5c3c11f8aa43c88ea96f59e3119264c79489"
    }
  },
  {
    "oid": "642cbbb84ecb5dd628eb46d6c1a6763dd0113281",
    "message": "Revert \"[tinker] Just use exist oat of tinker patched dex we found to avoid further issues of ART.\"\n\nThis reverts commit 3e6c3f533173eab3d4813c06509984751b90f0f6.",
    "date": "2022-02-24T07:50:47Z",
    "url": "https://github.com/Tencent/tinker/commit/642cbbb84ecb5dd628eb46d6c1a6763dd0113281",
    "details": {
      "sha": "b0cc9f09724eb21cd78c83480a7824eefd1bb593",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java",
      "status": "modified",
      "additions": 33,
      "deletions": 11,
      "changes": 44,
      "blob_url": "https://github.com/Tencent/tinker/blob/642cbbb84ecb5dd628eb46d6c1a6763dd0113281/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/642cbbb84ecb5dd628eb46d6c1a6763dd0113281/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java?ref=642cbbb84ecb5dd628eb46d6c1a6763dd0113281",
      "patch": "@@ -200,11 +200,25 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n \n         try {\n             final File oatFile = new File(oatPath);\n-            if (oatFile.exists() && oatFile.length() > 0) {\n-                ShareTinkerLog.i(TAG, \"[+] Oat file %s already exists, skip triggering dexopt.\", oatPath);\n-                return;\n+            final File oatFinishedMarkerFile = getOatFinishedMarkerFile(dexPath);\n+            if (!oatFile.exists()) {\n+                if (oatFinishedMarkerFile.exists()) {\n+                    // oat file does not exist, remove corresponding marker file.\n+                    oatFinishedMarkerFile.delete();\n+                    ShareTinkerLog.w(TAG, \"[+] Oat marker file exists while oat file %s was lost, remove marker file.\", oatPath);\n+                }\n+            } else {\n+                if (!oatFinishedMarkerFile.exists()) {\n+                    // Although oat file exists, but marker file is not found. Remove the oat file\n+                    // and trigger dex2oat again.\n+                    oatFile.delete();\n+                    new File(oatPath.substring(0, oatPath.lastIndexOf(ODEX_SUFFIX)) + VDEX_SUFFIX).delete();\n+                    ShareTinkerLog.w(TAG, \"[+] Unexpected existed oat file %s, remove it first.\", oatPath);\n+                } else {\n+                    ShareTinkerLog.i(TAG, \"[+] Oat file %s should be valid, skip triggering dexopt.\", oatPath);\n+                    return;\n+                }\n             }\n-\n             int waitTimes = 0;\n             while (true) {\n                 try {\n@@ -227,7 +241,7 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n                     // performance of patched app will have no improvement.\n                     try {\n                         registerDexModule(context, dexPath);\n-                        if (checkIfOatExistsAndNotEmpty(oatFile, \"registerDexModule\")) {\n+                        if (checkAndMarkIfOatExistsAndNotEmpty(oatFile, oatFinishedMarkerFile, \"registerDexModule\")) {\n                             return;\n                         }\n                     } catch (Throwable thr) {\n@@ -236,7 +250,7 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n                 }\n                 try {\n                     performDexOptSecondary(context);\n-                    if (checkIfOatExistsAndNotEmpty(oatFile, \"performDexOptSecondary\")) {\n+                    if (checkAndMarkIfOatExistsAndNotEmpty(oatFile, oatFinishedMarkerFile, \"performDexOptSecondary\")) {\n                         return;\n                     }\n                 } catch (Throwable thr) {\n@@ -247,7 +261,7 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n                     // dex.\n                     try {\n                         registerDexModule(context, dexPath);\n-                        if (checkIfOatExistsAndNotEmpty(oatFile, \"registerDexModule for hw dev\")) {\n+                        if (checkAndMarkIfOatExistsAndNotEmpty(oatFile, oatFinishedMarkerFile, \"registerDexModule for hw dev\")) {\n                             return;\n                         }\n                     } catch (Throwable thr) {\n@@ -267,9 +281,19 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n         }\n     }\n \n-    private static boolean checkIfOatExistsAndNotEmpty(File oatFile, String stageForLog) {\n+    private static File getOatFinishedMarkerFile(String dexPath) {\n+        return new File(dexPath + \".oat_fine\");\n+    }\n+\n+    private static boolean checkAndMarkIfOatExistsAndNotEmpty(File oatFile, File markerFile, String stageForLog) {\n         if (oatFile.exists() && oatFile.length() > 0) {\n             ShareTinkerLog.i(TAG, \"[+] Oat file %s is found after %s\", oatFile.getPath(), stageForLog);\n+            try {\n+                markerFile.createNewFile();\n+            } catch (Throwable thr) {\n+                ShareTinkerLog.printErrStackTrace(TAG, thr,\n+                        \"[-] Fail to create marker file %s after %s.\", markerFile.getPath(), stageForLog);\n+            }\n             return true;\n         } else {\n             ShareTinkerLog.e(TAG, \"[-] Oat file %s does not exist after %s.\", oatFile.getPath(), stageForLog);\n@@ -435,7 +459,7 @@ private static void executePMSShellCommand(Context context, String[] args) throw\n         }\n     }\n \n-    private static boolean waitUntilFileGeneratedOrTimeout(Context context, String filePath) {\n+    private static void waitUntilFileGeneratedOrTimeout(Context context, String filePath) {\n         final File file = new File(filePath);\n         final long[] delaySeq = {1000, 2000, 4000, 8000, 16000, 32000};\n         int delaySeqIdx = 0;\n@@ -445,10 +469,8 @@ private static boolean waitUntilFileGeneratedOrTimeout(Context context, String f\n         }\n         if (file.exists()) {\n             ShareTinkerLog.i(TAG, \"[+] File %s was found.\", filePath);\n-            return true;\n         } else {\n             ShareTinkerLog.e(TAG, \"[-] File %s does not exist after waiting for %s times.\", filePath, delaySeq.length);\n-            return false;\n         }\n     }\n ",
      "parent_sha": "3e6c3f533173eab3d4813c06509984751b90f0f6"
    }
  },
  {
    "oid": "145daa1c027872c463d33d43a3b3ec9c853af232",
    "message": "[tinker] Avoid version mismatch between main process and other processes when a new patch was applied and clear before reboot.",
    "date": "2019-11-13T09:07:23Z",
    "url": "https://github.com/Tencent/tinker/commit/145daa1c027872c463d33d43a3b3ec9c853af232",
    "details": {
      "sha": "f81e39639f10367833ce4ab672af0698b547ff1d",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java",
      "status": "modified",
      "additions": 15,
      "deletions": 8,
      "changes": 23,
      "blob_url": "https://github.com/Tencent/tinker/blob/145daa1c027872c463d33d43a3b3ec9c853af232/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerLoader.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/145daa1c027872c463d33d43a3b3ec9c853af232/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerLoader.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerLoader.java?ref=145daa1c027872c463d33d43a3b3ec9c853af232",
      "patch": "@@ -19,6 +19,7 @@\n import android.content.Intent;\n import android.os.Build;\n import android.os.SystemClock;\n+import android.text.TextUtils;\n import android.util.Log;\n \n import com.tencent.tinker.loader.app.TinkerApplication;\n@@ -132,22 +133,28 @@ private void tryLoadPatchFilesInternal(TinkerApplication app, Intent resultInten\n             Log.w(TAG, \"found clean patch mark and we are in main process, delete patch file now.\");\n             String patchName = SharePatchFileUtil.getPatchVersionDirectory(newVersion);\n             if (patchName != null) {\n-                String patchVersionDirFullPath = patchDirectoryPath + \"/\" + patchName;\n-                SharePatchFileUtil.deleteDir(patchVersionDirFullPath);\n-                if (oldVersion.equals(newVersion)) {\n-                    // !oldVersion.equals(newVersion) means new patch is applied, just fall back to old one in that case.\n-                    // Or we will set oldVersion and newVersion to empty string to clean patch.\n+                // oldVersion.equals(newVersion) means the new version has been loaded at least once\n+                // after it was applied.\n+                final boolean isNewVersionLoadedBefore = oldVersion.equals(newVersion);\n+                if (isNewVersionLoadedBefore) {\n+                    // Set oldVersion and newVersion to empty string to clean patch\n+                    // if current patch has been loaded before.\n                     oldVersion = \"\";\n                 }\n                 newVersion = oldVersion;\n                 patchInfo.oldVersion = oldVersion;\n                 patchInfo.newVersion = newVersion;\n                 patchInfo.isRemoveNewVersion = false;\n                 SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile, patchInfo, patchInfoLockFile);\n-                ShareTinkerInternals.killProcessExceptMain(app);\n \n-                ShareIntentUtil.setIntentReturnCode(resultIntent, ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n-                return;\n+                String patchVersionDirFullPath = patchDirectoryPath + \"/\" + patchName;\n+                SharePatchFileUtil.deleteDir(patchVersionDirFullPath);\n+\n+                if (isNewVersionLoadedBefore) {\n+                    ShareTinkerInternals.killProcessExceptMain(app);\n+                    ShareIntentUtil.setIntentReturnCode(resultIntent, ShareConstants.ERROR_LOAD_PATCH_DIRECTORY_NOT_EXIST);\n+                    return;\n+                }\n             }\n         }\n ",
      "parent_sha": "e257b1017c7cd20cbb20766e980b03c4cdfa3919"
    }
  },
  {
    "oid": "8c3886b4bc0dbf56bf566a32b777d7516095a676",
    "message": "[bugfix] fix issue #443 while attr's name with .",
    "date": "2017-04-26T04:20:23Z",
    "url": "https://github.com/Tencent/tinker/commit/8c3886b4bc0dbf56bf566a32b777d7516095a676",
    "details": {
      "sha": "6dcc26467597eded1dfc17d3b7f103da109c66e2",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/AaptUtil.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/tinker/blob/8c3886b4bc0dbf56bf566a32b777d7516095a676/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Faapt%2FAaptUtil.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/8c3886b4bc0dbf56bf566a32b777d7516095a676/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Faapt%2FAaptUtil.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Faapt%2FAaptUtil.java?ref=8c3886b4bc0dbf56bf566a32b777d7516095a676",
      "patch": "@@ -304,7 +304,7 @@ private static void addToResourceCollector(AaptResourceCollector resourceCollect\n                 resourceCollector.addResource(RType.STYLEABLE, IdType.INT, String.format(\"%s_%s\", resourceName, attrName), Integer.toString(count++));\n \n                 if (!rawAttrName.startsWith(\"android:\")) {\n-                    resourceCollector.addIntResourceIfNotPresent(RType.ATTR, attrName);\n+                    resourceCollector.addIntResourceIfNotPresent(RType.ATTR, rawAttrName);\n                     resourceCollector.addRTypeResourceName(RType.ATTR, rawAttrName, nodeToString(attrNode, true), resourceDirectory);\n                 }\n             }",
      "parent_sha": "af27a44d86a37dd8695f0d859545fc3fdf1e9973"
    }
  },
  {
    "oid": "837c940fbeab8123974a50f90a1d2a6c5accce65",
    "message": "[tinker] Compatibility issue: use 'quicken' instead of 'interpret-only' when first patch loading after OTA on system newer than Android O.",
    "date": "2017-06-15T05:51:11Z",
    "url": "https://github.com/Tencent/tinker/commit/837c940fbeab8123974a50f90a1d2a6c5accce65",
    "details": {
      "sha": "f2cf8e6493136fa67cfbaf7112e1d696dcaffee8",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerParallelDexOptimizer.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/Tencent/tinker/blob/837c940fbeab8123974a50f90a1d2a6c5accce65/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerParallelDexOptimizer.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/837c940fbeab8123974a50f90a1d2a6c5accce65/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerParallelDexOptimizer.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerParallelDexOptimizer.java?ref=837c940fbeab8123974a50f90a1d2a6c5accce65",
      "patch": "@@ -16,6 +16,7 @@\n \n package com.tencent.tinker.loader;\n \n+import android.os.Build;\n import android.util.Log;\n \n import com.tencent.tinker.loader.shareutil.SharePatchFileUtil;\n@@ -177,7 +178,11 @@ private void interpretDex2Oat(String dexFilePath, String oatFilePath) throws IOE\n             commandAndParams.add(\"--dex-file=\" + dexFilePath);\n             commandAndParams.add(\"--oat-file=\" + oatFilePath);\n             commandAndParams.add(\"--instruction-set=\" + targetISA);\n-            commandAndParams.add(\"--compiler-filter=interpret-only\");\n+            if (Build.VERSION.SDK_INT > 25) {\n+                commandAndParams.add(\"--compiler-filter=quicken\");\n+            } else {\n+                commandAndParams.add(\"--compiler-filter=interpret-only\");\n+            }\n \n             final ProcessBuilder pb = new ProcessBuilder(commandAndParams);\n             pb.redirectErrorStream(true);",
      "parent_sha": "a427e0d5cb2ced8915d7613c45ef00f59e9e64a6"
    }
  },
  {
    "oid": "401ba1b1732f87903a825908c8425ea8175b499e",
    "message": "[tinker] Change log wordings.",
    "date": "2021-12-03T05:52:14Z",
    "url": "https://github.com/Tencent/tinker/commit/401ba1b1732f87903a825908c8425ea8175b499e",
    "details": {
      "sha": "2a562be6666cbd1bbb7460f21d3bcd98dfa1d864",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/Tencent/tinker/blob/401ba1b1732f87903a825908c8425ea8175b499e/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/401ba1b1732f87903a825908c8425ea8175b499e/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java?ref=401ba1b1732f87903a825908c8425ea8175b499e",
      "patch": "@@ -48,6 +48,7 @@\n import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n@@ -386,7 +387,7 @@ private static void executePMSShellCommand(Context context, String[] args) throw\n         Parcel reply = null;\n         long lastIdentity = Binder.clearCallingIdentity();\n         try {\n-            ShareTinkerLog.i(TAG, \"[+] Start trigger secondary dexopt.\");\n+            ShareTinkerLog.i(TAG, \"[+] Execute shell cmd, args: %s\", Arrays.toString(args));\n             data = Parcel.obtain();\n             reply = Parcel.obtain();\n             data.writeFileDescriptor(FileDescriptor.in);\n@@ -397,9 +398,9 @@ private static void executePMSShellCommand(Context context, String[] args) throw\n             sEmptyResultReceiver.writeToParcel(data, 0);\n             pmsBinderProxy.transact(SHELL_COMMAND_TRANSACTION, data, reply, 0);\n             reply.readException();\n-            ShareTinkerLog.i(TAG, \"[+] Secondary dexopt done.\");\n+            ShareTinkerLog.i(TAG, \"[+] Execute shell cmd done.\");\n         } catch (Throwable thr) {\n-            throw new IllegalStateException(\"Failure on triggering secondary dexopt\", thr);\n+            throw new IllegalStateException(\"Failure on executing shell cmd.\", thr);\n         } finally {\n             if (reply != null) {\n                 reply.recycle();",
      "parent_sha": "750335bc7d221c9574a1773c40e62debc7f5838e"
    }
  },
  {
    "oid": "57a988040ba328acac74a46a850b4cc72b082862",
    "message": "Annotations with identical EncodedValues but different visibilities are\nno longer viewed as the same Annotation during patch generation",
    "date": "2020-03-05T18:43:30Z",
    "url": "https://github.com/Tencent/tinker/commit/57a988040ba328acac74a46a850b4cc72b082862",
    "details": {
      "sha": "c39d408c8878f12207b7a9c0d05d4ba6a33c6a20",
      "filename": "third-party/aosp-dexutils/src/main/java/com/tencent/tinker/android/dex/Annotation.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/Tencent/tinker/blob/57a988040ba328acac74a46a850b4cc72b082862/third-party%2Faosp-dexutils%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fandroid%2Fdex%2FAnnotation.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/57a988040ba328acac74a46a850b4cc72b082862/third-party%2Faosp-dexutils%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fandroid%2Fdex%2FAnnotation.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/third-party%2Faosp-dexutils%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fandroid%2Fdex%2FAnnotation.java?ref=57a988040ba328acac74a46a850b4cc72b082862",
      "patch": "@@ -17,6 +17,7 @@\n package com.tencent.tinker.android.dex;\n \n import com.tencent.tinker.android.dex.TableOfContents.Section.Item;\n+import com.tencent.tinker.android.dex.util.CompareUtils;\n import com.tencent.tinker.android.dex.util.HashCodeHelper;\n \n import static com.tencent.tinker.android.dex.EncodedValueReader.ENCODED_ANNOTATION;\n@@ -45,7 +46,9 @@ public int getTypeIndex() {\n     }\n \n     @Override public int compareTo(Annotation other) {\n-        return encodedAnnotation.compareTo(other.encodedAnnotation);\n+        int cmpRes = encodedAnnotation.compareTo(other.encodedAnnotation);\n+        if (cmpRes != 0) return cmpRes;\n+        return CompareUtils.uCompare(visibility, other.visibility);\n     }\n \n     @Override",
      "parent_sha": "7de8160498442b292c9fdb5ffbd824b796ab1c52"
    }
  },
  {
    "oid": "9454e99e8f8d551998037041a03f40591481fae4",
    "message": "[tinker] Trigger performSecondaryDexOpt hack on devices that have Android Q and newer system installed.",
    "date": "2021-09-22T12:30:41Z",
    "url": "https://github.com/Tencent/tinker/commit/9454e99e8f8d551998037041a03f40591481fae4",
    "details": {
      "sha": "4dcec1ffc35ab6ab51f40c1d9037ec8b221e7792",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/Tencent/tinker/blob/9454e99e8f8d551998037041a03f40591481fae4/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/9454e99e8f8d551998037041a03f40591481fae4/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java?ref=9454e99e8f8d551998037041a03f40591481fae4",
      "patch": "@@ -173,8 +173,7 @@ boolean run() {\n         }\n \n         private static void triggerPMDexOptOnDemand(Context context, String dexPath, String oatPath) {\n-            if (Build.VERSION.SDK_INT < 29 || Build.VERSION.SDK_INT >= 31\n-                    || (Build.VERSION.SDK_INT == 30 && Build.VERSION.PREVIEW_SDK_INT != 0)) {\n+            if (Build.VERSION.SDK_INT < 29) {\n                 // Only do this trick on Android Q, R devices.\n                 ShareTinkerLog.w(TAG, \"[+] Not API 29, 30 device, skip fixing.\");\n                 return;",
      "parent_sha": "a6d44c76bf573e8b9bbcf9c44897bcf8ea4da878"
    }
  },
  {
    "oid": "ae498ba0f6091949eb57e025deaf209ee46cbf36",
    "message": "1. [enhancement] fix spell error",
    "date": "2016-11-18T06:29:11Z",
    "url": "https://github.com/Tencent/tinker/commit/ae498ba0f6091949eb57e025deaf209ee46cbf36",
    "details": {
      "sha": "14f164905e3071be8a85018756c5458bdd8df335",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/Tencent/tinker/blob/ae498ba0f6091949eb57e025deaf209ee46cbf36/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FDexDiffDecoder.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/ae498ba0f6091949eb57e025deaf209ee46cbf36/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FDexDiffDecoder.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FDexDiffDecoder.java?ref=ae498ba0f6091949eb57e025deaf209ee46cbf36",
      "patch": "@@ -751,35 +751,35 @@ private final class RelatedInfo {\n     }\n \n     private final class DexPatcherLoggerBridge implements IDexPatcherLogger {\n-        private final InfoWriter logWritter;\n+        private final InfoWriter logWriter;\n \n         DexPatcherLoggerBridge(InfoWriter logWritter) {\n-            this.logWritter = logWritter;\n+            this.logWriter = logWritter;\n         }\n \n         @Override\n         public void v(String msg) {\n-            this.logWritter.writeLineToInfoFile(msg);\n+            this.logWriter.writeLineToInfoFile(msg);\n         }\n \n         @Override\n         public void d(String msg) {\n-            this.logWritter.writeLineToInfoFile(msg);\n+            this.logWriter.writeLineToInfoFile(msg);\n         }\n \n         @Override\n         public void i(String msg) {\n-            this.logWritter.writeLineToInfoFile(msg);\n+            this.logWriter.writeLineToInfoFile(msg);\n         }\n \n         @Override\n         public void w(String msg) {\n-            this.logWritter.writeLineToInfoFile(msg);\n+            this.logWriter.writeLineToInfoFile(msg);\n         }\n \n         @Override\n         public void e(String msg) {\n-            this.logWritter.writeLineToInfoFile(msg);\n+            this.logWriter.writeLineToInfoFile(msg);\n         }\n     }\n }",
      "parent_sha": "d1db5106e4f0a3c179afaf8665adbb09ad60eb5a"
    }
  },
  {
    "oid": "2f08642057d697733e9e1e471059926ef3ef5bf5",
    "message": "[tinker] bugfix: UnsatisfiedLinkError was thrown when patched an app encrypted with 360Jiagu.",
    "date": "2017-05-15T07:50:32Z",
    "url": "https://github.com/Tencent/tinker/commit/2f08642057d697733e9e1e471059926ef3ef5bf5",
    "details": {
      "sha": "9232b3a82c563fdde8a9dfceb3b697cded52c723",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/AndroidNClassLoader.java",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/Tencent/tinker/blob/2f08642057d697733e9e1e471059926ef3ef5bf5/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/2f08642057d697733e9e1e471059926ef3ef5bf5/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java?ref=2f08642057d697733e9e1e471059926ef3ef5bf5",
      "patch": "@@ -126,7 +126,6 @@ private static void fixDexElementsForProtectedApp(Application application, Objec\n         final Field mCookieField = ShareReflectUtil.findField(DexFile.class, \"mCookie\");\n         final Field mInternalCookieField = ShareReflectUtil.findField(DexFile.class, \"mInternalCookie\");\n \n-        // Always ignore the last element since it should always be the base.apk.\n         for (int i = 0; i < newDexElements.length - 1; ++i) {\n             final Object newElement = newDexElements[i];\n \n@@ -139,12 +138,10 @@ private static void fixDexElementsForProtectedApp(Application application, Objec\n             final Object origCookie = mCookieField.get(origDexFile);\n             final Object origInternalCookie = mInternalCookieField.get(origDexFile);\n \n-            final DexFile dupOrigDexFile = DexFile.loadDex(application.getApplicationInfo().sourceDir, null, 0);\n-            mFileNameField.set(dupOrigDexFile, origFileName);\n-            mCookieField.set(dupOrigDexFile, origCookie);\n-            mInternalCookieField.set(dupOrigDexFile, origInternalCookie);\n-\n-            dexFileField.set(newElement, dupOrigDexFile);\n+            final DexFile newDexFile = (DexFile) dexFileField.get(newElement);\n+            mFileNameField.set(newDexFile, origFileName);\n+            mCookieField.set(newDexFile, origCookie);\n+            mInternalCookieField.set(newDexFile, origInternalCookie);\n         }\n     }\n ",
      "parent_sha": "c61d87618b257e51b1d455e8350c130eb5692315"
    }
  },
  {
    "oid": "d012753d387248cfbd575ade705ad1dada53415a",
    "message": "[tinker] Bugfix again: crashes caused by exception 'bad xml tag' on Miui system.\n    This time we avoid hardcoding pool size and limit the fixing tricks only\nexecute on Miui system.\n\nConflicts:\n\ttinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java",
    "date": "2017-01-12T11:44:56Z",
    "url": "https://github.com/Tencent/tinker/commit/d012753d387248cfbd575ade705ad1dada53415a",
    "details": {
      "sha": "8e8db10c683b0c08cef4fb562d35dd98d97c1853",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java",
      "status": "modified",
      "additions": 36,
      "deletions": 2,
      "changes": 38,
      "blob_url": "https://github.com/Tencent/tinker/blob/d012753d387248cfbd575ade705ad1dada53415a/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourcePatcher.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/d012753d387248cfbd575ade705ad1dada53415a/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourcePatcher.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourcePatcher.java?ref=d012753d387248cfbd575ade705ad1dada53415a",
      "patch": "@@ -40,8 +40,9 @@\n import static android.os.Build.VERSION_CODES.KITKAT;\n \n class TinkerResourcePatcher {\n-    private static final String TAG               = \"Tinker.ResourcePatcher\";\n-    private static final String TEST_ASSETS_VALUE = \"only_use_to_test_tinker_resource.txt\";\n+    private static final String TAG                     = \"Tinker.ResourcePatcher\";\n+    private static final String TEST_ASSETS_VALUE       = \"only_use_to_test_tinker_resource.txt\";\n+    private static final String MIUI_RESOURCE_CLASSNAME = \"android.content.res.MiuiResources\";\n \n     // original value\n     private static Collection<WeakReference<Resources>> references;\n@@ -51,13 +52,16 @@ class TinkerResourcePatcher {\n     private static Field        assetsFiled              = null;\n     private static Field        resourcesImplFiled       = null;\n     private static Field        typedArrayPoolField      = null;\n+    private static Field        poolField                = null;\n     private static Field        resDir                   = null;\n     private static Field        packagesFiled            = null;\n     private static Field        resourcePackagesFiled    = null;\n \n     private static Field        instrumentationField     = null;\n //    private static Field        publicSourceDirField     = null;\n \n+    private static boolean      isMiuiSystem             = false;\n+\n     public static void isResourceCanPatch(Context context) throws Throwable {\n         //   - Replace mResDir to point to the external resource file instead of the .apk. This is\n         //     used as the asset path for new Resources objects.\n@@ -174,6 +178,21 @@ public static void isResourceCanPatch(Context context) throws Throwable {\n             resourcesImplFiled.setAccessible(true);\n         }\n \n+        final Resources resources = context.getResources();\n+        isMiuiSystem = resources != null && MIUI_RESOURCE_CLASSNAME.equals(resources.getClass().getName());\n+\n+        if (isMiuiSystem) {\n+            Log.w(TAG, \"Miui system found, collect some additional fields.\");\n+            try {\n+                typedArrayPoolField = Resources.class.getDeclaredField(\"mTypedArrayPool\");\n+                typedArrayPoolField.setAccessible(true);\n+                final Class<?> simplePoolClazz = Class.forName(\"android.util.Pools$SimplePool\");\n+                poolField = simplePoolClazz.getDeclaredField(\"mPool\");\n+                poolField.setAccessible(true);\n+            } catch (Throwable ignored) {\n+            }\n+        }\n+\n         try {\n             typedArrayPoolField = Resources.class.getDeclaredField(\"mTypedArrayPool\");\n             typedArrayPoolField.setAccessible(true);\n@@ -251,6 +270,21 @@ public static void monkeyPatchExistingResources(Context context, String external\n                 } catch (Throwable ignored) {\n                 }\n \n+                if (isMiuiSystem) {\n+                    Log.w(TAG, \"Miui system found, do additional tricks.\");\n+\n+                    // Clear typedArray cache.\n+                    try {\n+                        final Object origTypedArrayPool = typedArrayPoolField.get(resources);\n+                        final Constructor<?> ctor = origTypedArrayPool.getClass().getConstructor(int.class);\n+                        ctor.setAccessible(true);\n+                        final int poolSize = ((Object[]) poolField.get(origTypedArrayPool)).length;\n+                        final Object newTypedArrayPool = ctor.newInstance(poolSize);\n+                        typedArrayPoolField.set(resources, newTypedArrayPool);\n+                    } catch (Throwable ignored) {\n+                    }\n+                }\n+\n                 resources.updateConfiguration(resources.getConfiguration(), resources.getDisplayMetrics());\n             }\n         }",
      "parent_sha": "9493c5d6d3d18f7aa26b033dc04f81487e4eca67"
    }
  },
  {
    "oid": "9f9ca820281aa2abcdae8d84f10efa7d60fee79f",
    "message": "[tinker] allow remove loader classes.",
    "date": "2018-01-19T03:23:44Z",
    "url": "https://github.com/Tencent/tinker/commit/9f9ca820281aa2abcdae8d84f10efa7d60fee79f",
    "details": {
      "sha": "444ca39639f76543950738e49f908f15c303e837",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/util/ExcludedClassModifiedChecker.java",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/Tencent/tinker/blob/9f9ca820281aa2abcdae8d84f10efa7d60fee79f/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Futil%2FExcludedClassModifiedChecker.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/9f9ca820281aa2abcdae8d84f10efa7d60fee79f/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Futil%2FExcludedClassModifiedChecker.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Futil%2FExcludedClassModifiedChecker.java?ref=9f9ca820281aa2abcdae8d84f10efa7d60fee79f",
      "patch": "@@ -90,7 +90,7 @@ public void checkIfExcludedClassWasModifiedInNewDex(File oldFile, File newFile)\n                  * 2. Primary new dex is missing.\n                  * 3. There are not any loader classes in primary old dex.\n                  * 4. There are some new loader classes added in new primary dex.\n-                 * 5. Loader classes in old primary dex are modified, deleted in new primary dex.\n+                 * 5. Loader classes in old primary dex are modified in new primary dex.\n                  * 6. Loader classes are found in secondary old dexes.\n                  * 7. Loader classes are found in secondary new dexes.\n                  */\n@@ -112,7 +112,7 @@ public void checkIfExcludedClassWasModifiedInNewDex(File oldFile, File newFile)\n                             if (deletedClassInfos.isEmpty() && changedClassInfosMap.isEmpty() && !addedClassInfos.isEmpty()) {\n                                 stmCode = STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX;\n                             } else {\n-                                if (deletedClassInfos.isEmpty() && addedClassInfos.isEmpty()) {\n+                                if (addedClassInfos.isEmpty()) {\n                                     // class descriptor is completely matches, see if any contents changes.\n                                     ArrayList<String> removeClasses = new ArrayList<>();\n                                     for (String classname : changedClassInfosMap.keySet()) {\n@@ -185,10 +185,8 @@ public void checkIfExcludedClassWasModifiedInNewDex(File oldFile, File newFile)\n                 }\n                 case STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH: {\n                     throw new TinkerPatchException(\n-                        \"loader classes in old primary dex are mismatched to those in new primary dex, \\n\"\n-                            + \"if deleted classes is not empty, check if your dex division strategy is fine. \\n\"\n-                            + \"added classes: \" + Utils.collectionToString(addedClassInfos) + \"\\n\"\n-                            + \"deleted classes: \" + Utils.collectionToString(deletedClassInfos)\n+                        \"there's loader classes added in new primary dex, such these changes will not take effect.\\n\"\n+                            + \"added classes: \" + Utils.collectionToString(addedClassInfos)\n                     );\n                 }\n                 case STMCODE_ERROR_LOADER_CLASS_FOUND_IN_SECONDARY_OLD_DEX: {\n@@ -199,7 +197,7 @@ public void checkIfExcludedClassWasModifiedInNewDex(File oldFile, File newFile)\n                 }\n                 case STMCODE_ERROR_LOADER_CLASS_CHANGED: {\n                     String msg =\n-                        \"some loader class has been changed in new dex.\"\n+                        \"some loader class has been changed in new primary dex.\"\n                             + \" Such these changes will not take effect!!\"\n                             + \" related classes: \"\n                             + Utils.collectionToString(changedClassInfosMap.keySet());",
      "parent_sha": "97a4fc67997e709f39369f94a915b5c7082f4165"
    }
  },
  {
    "oid": "85edad1f6f10556173d40955c0e387a8a0ca1515",
    "message": "[tinker] Bugfix: issue #1391.",
    "date": "2020-05-07T03:37:20Z",
    "url": "https://github.com/Tencent/tinker/commit/85edad1f6f10556173d40955c0e387a8a0ca1515",
    "details": {
      "sha": "69a3efb8d3b2fb0dc16724889214e74439f9d752",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/tinker/blob/85edad1f6f10556173d40955c0e387a8a0ca1515/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FDexDiffDecoder.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/85edad1f6f10556173d40955c0e387a8a0ca1515/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FDexDiffDecoder.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FDexDiffDecoder.java?ref=85edad1f6f10556173d40955c0e387a8a0ca1515",
      "patch": "@@ -433,7 +433,7 @@ private void generateChangedClassesDexFile() throws IOException {\n             if (!isCurrentDexHasChangedClass) {\n                 continue;\n             }\n-            DexBuilder dexBuilder = new DexBuilder(Opcodes.forApi(29));\n+            DexBuilder dexBuilder = new DexBuilder(Opcodes.forApi(23));\n             for (org.jf.dexlib2.iface.ClassDef classDef : dexFile.getClasses()) {\n                 if (!descOfChangedClassesInCurrDex.contains(classDef.getType())) {\n                     continue;",
      "parent_sha": "6d0216b0f84a147fcbe247dcb8c0518986c951ef"
    }
  },
  {
    "oid": "153ec2fe737930a673d56e5fc93af78b4fda3b01",
    "message": "[tinker] Restore codes for triggering dex2oat by registerDexModule on Android S and newer system.",
    "date": "2022-03-21T08:30:13Z",
    "url": "https://github.com/Tencent/tinker/commit/153ec2fe737930a673d56e5fc93af78b4fda3b01",
    "details": {
      "sha": "9c1cfcf9473f08aa6ea77b4ff8df19f9b8293f80",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/Tencent/tinker/blob/153ec2fe737930a673d56e5fc93af78b4fda3b01/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/153ec2fe737930a673d56e5fc93af78b4fda3b01/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java?ref=153ec2fe737930a673d56e5fc93af78b4fda3b01",
      "patch": "@@ -242,6 +242,16 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n             return;\n         }\n         for (int i = 0; i < 3; ++i) {\n+            if (ShareTinkerInternals.isNewerOrEqualThanVersion(31, true)) {\n+                try {\n+                    registerDexModule(context, dexPath);\n+                    if (SharePatchFileUtil.isLegalFile(oatFile)) {\n+                        break;\n+                    }\n+                } catch (Throwable thr) {\n+                    ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Error.\");\n+                }\n+            }\n             try {\n                 performDexOptSecondary(context);\n                 if (SharePatchFileUtil.isLegalFile(oatFile)) {\n@@ -268,7 +278,7 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n             } catch (Throwable thr) {\n                 ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Error.\");\n             }\n-            SystemClock.sleep(3000);\n+            SystemClock.sleep(1000);\n             if (\"huawei\".equalsIgnoreCase(Build.MANUFACTURER) || \"honor\".equalsIgnoreCase(Build.MANUFACTURER)) {\n                 try {\n                     registerDexModule(context, dexPath);\n@@ -279,6 +289,7 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n                     ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Error.\");\n                 }\n             }\n+            SystemClock.sleep(3000);\n         }\n         if (!SharePatchFileUtil.isLegalFile(oatFile)) {\n             throw new IllegalStateException(\"No odex file was generated after calling performDexOptSecondary\");",
      "parent_sha": "0eab4f815bbfe026e12d662d7552ce4df3a41dab"
    }
  },
  {
    "oid": "612aa2820fc297bec751064c390fdbfd0466c88d",
    "message": "[tinker] Only do performSecondaryDexOpt hack on Android Q, R device to avoid patched class loading failure on Android S.",
    "date": "2021-07-28T06:15:23Z",
    "url": "https://github.com/Tencent/tinker/commit/612aa2820fc297bec751064c390fdbfd0466c88d",
    "details": {
      "sha": "6c79559c7657eaa89234e0eb8a68a5c754758f73",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/Tencent/tinker/blob/612aa2820fc297bec751064c390fdbfd0466c88d/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/612aa2820fc297bec751064c390fdbfd0466c88d/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java?ref=612aa2820fc297bec751064c390fdbfd0466c88d",
      "patch": "@@ -173,9 +173,10 @@ boolean run() {\n         }\n \n         private static void triggerPMDexOptOnDemand(Context context, String dexPath, String oatPath) {\n-            if (Build.VERSION.SDK_INT < 29) {\n-                // Only do this trick on Android Q or newer devices.\n-                ShareTinkerLog.w(TAG, \"[+] Not API 29 or newer device, skip fixing.\");\n+            if (Build.VERSION.SDK_INT < 29 || Build.VERSION.SDK_INT >= 31\n+                    || (Build.VERSION.SDK_INT == 30 && Build.VERSION.PREVIEW_SDK_INT != 0)) {\n+                // Only do this trick on Android Q, R devices.\n+                ShareTinkerLog.w(TAG, \"[+] Not API 29, 30 device, skip fixing.\");\n                 return;\n             }\n ",
      "parent_sha": "bfeadb85c8f8f6395160b632c7a47f3d8b27c582"
    }
  },
  {
    "oid": "9e8d41bb5a39417ea7e55a1e6144a5685f4ee907",
    "message": "[tinker] Try to avoid lag on Android Q again x2.",
    "date": "2019-12-12T06:30:33Z",
    "url": "https://github.com/Tencent/tinker/commit/9e8d41bb5a39417ea7e55a1e6144a5685f4ee907",
    "details": {
      "sha": "bbd90d4bf7283e0457dfdb68c72c61c51522da16",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/NewClassLoaderInjector.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/Tencent/tinker/blob/9e8d41bb5a39417ea7e55a1e6144a5685f4ee907/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FNewClassLoaderInjector.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/9e8d41bb5a39417ea7e55a1e6144a5685f4ee907/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FNewClassLoaderInjector.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FNewClassLoaderInjector.java?ref=9e8d41bb5a39417ea7e55a1e6144a5685f4ee907",
      "patch": "@@ -99,11 +99,12 @@ private static ClassLoader createNewClassLoader(Context context, ClassLoader old\n \n         ClassLoader result = null;\n         if (Build.VERSION.SDK_INT >= 28) {\n-            result = new DelegateLastClassLoader(combinedDexPath, combinedLibraryPath, oldClassLoader);\n+            result = new DelegateLastClassLoader(combinedDexPath, combinedLibraryPath, null);\n         } else {\n-            result = new TinkerDelegateLastClassLoader(combinedDexPath, combinedLibraryPath, oldClassLoader);\n+            result = new TinkerDelegateLastClassLoader(combinedDexPath, combinedLibraryPath, null);\n         }\n \n+        findField(ClassLoader.class, \"parent\").set(result, oldClassLoader);\n         findField(oldPathList.getClass(), \"definingContext\").set(oldPathList, result);\n \n         return result;",
      "parent_sha": "f501b107ff65489b84275184bc6a505b14ac3048"
    }
  },
  {
    "oid": "774db84948df2e83b65ba8475c6a0c36c4332321",
    "message": "[tinker] tidy up comment.",
    "date": "2019-04-19T12:31:13Z",
    "url": "https://github.com/Tencent/tinker/commit/774db84948df2e83b65ba8475c6a0c36c4332321",
    "details": {
      "sha": "6f337aa9290a191306875951bb7eea3591d871a3",
      "filename": "tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/tinker/blob/774db84948df2e83b65ba8475c6a0c36c4332321/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fpatch%2FDexDiffPatchInternal.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/774db84948df2e83b65ba8475c6a0c36c4332321/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fpatch%2FDexDiffPatchInternal.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fpatch%2FDexDiffPatchInternal.java?ref=774db84948df2e83b65ba8475c6a0c36c4332321",
      "patch": "@@ -175,10 +175,10 @@ private static boolean patchDexExtractViaDexDiff(Context context, String patchVe\n         File dexFiles = new File(dir);\n         File[] files = dexFiles.listFiles();\n         List<File> legalFiles = new ArrayList<>();\n-        // may have directory in android o\n         if (files != null) {\n             for (File file : files) {\n                 final String fileName = file.getName();\n+                // may have directory in android o\n                 if (file.isFile()\n                     &&  (fileName.endsWith(ShareConstants.DEX_SUFFIX)\n                       || fileName.endsWith(ShareConstants.JAR_SUFFIX)",
      "parent_sha": "084049b18d73bc5507de7b51790b41ae9a66bbd2"
    }
  },
  {
    "oid": "79e1f36805a1423f9ac9cce340c34a6473b50fbc",
    "message": "[tinker] Use two routines to trigger secondary dexopt through binder.",
    "date": "2020-06-16T10:17:26Z",
    "url": "https://github.com/Tencent/tinker/commit/79e1f36805a1423f9ac9cce340c34a6473b50fbc",
    "details": {
      "sha": "f1f0f30c6a5fc756db28591fdf5adf7c4e8bb269",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java",
      "status": "modified",
      "additions": 128,
      "deletions": 10,
      "changes": 138,
      "blob_url": "https://github.com/Tencent/tinker/blob/79e1f36805a1423f9ac9cce340c34a6473b50fbc/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/79e1f36805a1423f9ac9cce340c34a6473b50fbc/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java?ref=79e1f36805a1423f9ac9cce340c34a6473b50fbc",
      "patch": "@@ -22,7 +22,6 @@\n import android.os.IBinder;\n import android.os.Parcel;\n import android.os.RemoteException;\n-import android.util.Log;\n \n import com.tencent.tinker.loader.shareutil.ShareFileLockHelper;\n import com.tencent.tinker.loader.shareutil.SharePatchFileUtil;\n@@ -31,6 +30,7 @@\n import com.tencent.tinker.loader.shareutil.ShareTinkerLog;\n \n import java.io.File;\n+import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.lang.reflect.Method;\n@@ -43,6 +43,7 @@\n import java.util.concurrent.Executors;\n \n import dalvik.system.DexFile;\n+import dalvik.system.PathClassLoader;\n \n \n /**\n@@ -139,7 +140,7 @@ boolean run() {\n                         NewClassLoaderInjector.triggerDex2Oat(context, optimizedDir, dexFile.getAbsolutePath());\n                         // Android Q is significantly slowed down by Fallback Dex Loading procedure, so we\n                         // trigger background dexopt to generate executable odex here.\n-                        triggerPMDexOptOnDemand();\n+                        triggerPMDexOptOnDemand(context, dexFile.getAbsolutePath(), optimizedPath);\n                     } else {\n                         DexFile.loadDex(dexFile.getAbsolutePath(), optimizedPath, 0);\n                     }\n@@ -157,18 +158,68 @@ boolean run() {\n             return true;\n         }\n \n-        private static final String PM_INTERFACE_DESCRIPTOR = \"android.content.pm.IPackageManager\";\n+        private static void triggerPMDexOptOnDemand(Context context, String dexPath, String oatPath) {\n+            if (Build.VERSION.SDK_INT != 29) {\n+                // Only do this trick on Android Q devices.\n+                ShareTinkerLog.w(TAG, \"[+] Not API 29 device, skip fixing.\");\n+                return;\n+            }\n+            if (!\"huawei\".equalsIgnoreCase(Build.MANUFACTURER)) {\n+                // Only do this trick on huawei devices.\n+                ShareTinkerLog.w(TAG, \"[!] Not Huawei device, skip fixing.\");\n+                return;\n+            }\n+\n+            ShareTinkerLog.i(TAG, \"[+] Hit target device, do fix logic now.\");\n \n-        private void triggerPMDexOptOnDemand() throws TinkerRuntimeException {\n             try {\n-                if (Build.VERSION.SDK_INT != 29) {\n-                    // Not Android Q\n+                final File oatFile = new File(oatPath);\n+                loadDexByPathClassLoader(dexPath);\n+                if (oatFile.exists()) {\n+                    ShareTinkerLog.i(TAG, \"[+] PathClassLoader generated odex file, skip bg-dexopt triggering.\");\n                     return;\n                 }\n \n-                final int transactionCode = 0x78;\n+                try {\n+                    triggerPMDexOpt(context);\n+                    if (oatFile.exists()) {\n+                        ShareTinkerLog.i(TAG, \"[+] Bg-dexopt was triggered successfully.\");\n+                        return;\n+                    } else {\n+                        throw new IllegalStateException(\"Bg-dexopt was triggered, but no odex file was generated.\");\n+                    }\n+                } catch (Throwable thr) {\n+                    if (!\"huawei\".equalsIgnoreCase(Build.MANUFACTURER)) {\n+                        throw thr;\n+                    }\n+                }\n+\n+                triggerPMDexOpt2(context, dexPath);\n+                if (oatFile.exists()) {\n+                    ShareTinkerLog.i(TAG, \"[+] Bg-dexopt was triggered by registerDexModule successfully.\");\n+                    return;\n+                } else {\n+                    throw new IllegalStateException(\"Bg-dexopt was triggered by registerDexModule, but no odex file was generated.\");\n+                }\n+            } catch (Throwable thr) {\n+                ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call triggerPMDexOptAsyncOnDemand.\");\n+            }\n+        }\n+\n+        private static void loadDexByPathClassLoader(String dexPath) throws IOException {\n+            ShareTinkerLog.i(TAG, \"[+] Load patch by PathClassLoader start.\");\n+            final PathClassLoader cl = new PathClassLoader(dexPath, ClassLoader.getSystemClassLoader());\n+            ShareTinkerLog.i(TAG, \"[+] Load patch by PathClassLoader [%s] done.\", cl);\n+        }\n+\n+        private static final String PM_INTERFACE_DESCRIPTOR = \"android.content.pm.IPackageManager\";\n+\n+        private static void triggerPMDexOpt(Context context) throws IllegalStateException {\n+            try {\n+                ShareTinkerLog.i(TAG, \"[+] Start trigger secondary dexopt.\");\n+                final int transactionCode = (\"xiaomi\".equalsIgnoreCase(Build.MANUFACTURER) ? 0x79 : 0x78);\n                 final String packageName = context.getPackageName();\n-                final String targetCompilerFilter = \"quicken\";\n+                final String targetCompilerFilter = \"speed\";\n                 final boolean force = true;\n \n                 final Class<?> serviceManagerClazz = Class.forName(\"android.os.ServiceManager\");\n@@ -184,12 +235,42 @@ private void triggerPMDexOptOnDemand() throws TinkerRuntimeException {\n                     // First invocation should always failed.\n                     triggerPMDexOptImpl(pmBinder, transactionCode, packageName, targetCompilerFilter, force);\n                 }\n+                ShareTinkerLog.i(TAG, \"[+] Secondary dexopt done.\");\n+            } catch (IllegalStateException e) {\n+                throw e;\n+            } catch (Throwable thr) {\n+                throw new IllegalStateException(\"Failure on triggering secondary dexopt\", thr);\n+            }\n+        }\n+\n+        private static void triggerPMDexOpt2(Context context, String dexPath) throws IllegalStateException {\n+            try {\n+                ShareTinkerLog.i(TAG, \"[+] Start trigger secondary dexopt by registerDexModule.\");\n+                final int transactionCode = (\"xiaomi\".equalsIgnoreCase(Build.MANUFACTURER) ? 0x77 : 0x76);\n+                final String packageName = context.getPackageName();\n+\n+                final Class<?> serviceManagerClazz = Class.forName(\"android.os.ServiceManager\");\n+                final Method getServiceMethod = ShareReflectUtil.findMethod(serviceManagerClazz, \"getService\", String.class);\n+                final IBinder pmBinder = (IBinder) getServiceMethod.invoke(null, \"package\");\n+                if (pmBinder == null) {\n+                    throw new IllegalStateException(\"Fail to get pm binder.\");\n+                }\n+\n+                try {\n+                    triggerPMDexOptImpl2(pmBinder, transactionCode, packageName, dexPath);\n+                } catch (Throwable thr) {\n+                    // First invocation may failed.\n+                    triggerPMDexOptImpl2(pmBinder, transactionCode, packageName, dexPath);\n+                }\n+                ShareTinkerLog.i(TAG, \"[+] Secondary dexopt by registerDexModule done.\");\n+            } catch (IllegalStateException e) {\n+                throw e;\n             } catch (Throwable thr) {\n-                throw new TinkerRuntimeException(\"Failure on triggering bg dexopt\", thr);\n+                throw new IllegalStateException(\"Failure on triggering secondary dexopt by registerDexModule.\", thr);\n             }\n         }\n \n-        private void triggerPMDexOptImpl(IBinder pmBinder, int transactionCode, String packageName, String compileFilter, boolean force) {\n+        private static void triggerPMDexOptImpl(IBinder pmBinder, int transactionCode, String packageName, String compileFilter, boolean force) {\n             Parcel data = null;\n             Parcel reply = null;\n             final long identity = Binder.clearCallingIdentity();\n@@ -230,6 +311,43 @@ private void triggerPMDexOptImpl(IBinder pmBinder, int transactionCode, String p\n             }\n         }\n \n+        private static void triggerPMDexOptImpl2(IBinder pmBinder, int transactionCode, String packageName, String dexPath) {\n+            Parcel data = null;\n+            Parcel reply = null;\n+            final long identity = Binder.clearCallingIdentity();\n+            try {\n+                data = Parcel.obtain();\n+                reply = Parcel.obtain();\n+                data.writeInterfaceToken(PM_INTERFACE_DESCRIPTOR);\n+                data.writeString(packageName);\n+                data.writeString(dexPath);\n+                data.writeInt(0); // Not a shared module.\n+                data.writeInt(0); // Callback is null.\n+                boolean status = false;\n+                try {\n+                    status = pmBinder.transact(transactionCode, data, reply, 0);\n+                    if (!status) {\n+                        throw new IllegalStateException(\"Binder transaction failure.\");\n+                    }\n+                } catch (RemoteException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+                try {\n+                    reply.readException();\n+                } catch (Throwable thr) {\n+                    throw new IllegalStateException(thr);\n+                }\n+            } finally {\n+                Binder.restoreCallingIdentity(identity);\n+                if (reply != null) {\n+                    reply.recycle();\n+                }\n+                if (data != null) {\n+                    data.recycle();\n+                }\n+            }\n+        }\n+\n         private void interpretDex2Oat(String dexFilePath, String oatFilePath) throws IOException {\n             // add process lock for interpret mode\n             final File oatFile = new File(oatFilePath);",
      "parent_sha": "272e786f2df94e96bd3132a82aa3829e785d7750"
    }
  },
  {
    "oid": "acd0742e6d0035ef1bb8a3f1bebed2695cb047c6",
    "message": "[bugfix]patch failed when specifying the process name in <application> tag. (#653)",
    "date": "2017-11-09T02:06:54Z",
    "url": "https://github.com/Tencent/tinker/commit/acd0742e6d0035ef1bb8a3f1bebed2695cb047c6",
    "details": {
      "sha": "434054cf68ae20fc7136a277d69d4233d9a68b97",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareTinkerInternals.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/Tencent/tinker/blob/acd0742e6d0035ef1bb8a3f1bebed2695cb047c6/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FShareTinkerInternals.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/acd0742e6d0035ef1bb8a3f1bebed2695cb047c6/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FShareTinkerInternals.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FShareTinkerInternals.java?ref=acd0742e6d0035ef1bb8a3f1bebed2695cb047c6",
      "patch": "@@ -326,13 +326,14 @@ public static boolean isTinkerEnabledAll(int flag) {\n     }\n \n     public static boolean isInMainProcess(Context context) {\n-        String pkgName = context.getPackageName();\n+        ApplicationInfo applicationInfo = context.getApplicationInfo();\n+        String mainProcessName = applicationInfo.processName;\n         String processName = getProcessName(context);\n         if (processName == null || processName.length() == 0) {\n             processName = \"\";\n         }\n \n-        return pkgName.equals(processName);\n+        return mainProcessName.equals(processName);\n     }\n \n     public static boolean isInPatchProcess(Context context) {",
      "parent_sha": "bf6c65efff7447b38a586edddf5cd675baaf83cc"
    }
  },
  {
    "oid": "62e3efc12c349e857c0608c167dad7dfc2ad8474",
    "message": "[tinker] Add try-catch to avoid crash on some edge cases.",
    "date": "2019-09-24T10:05:19Z",
    "url": "https://github.com/Tencent/tinker/commit/62e3efc12c349e857c0608c167dad7dfc2ad8474",
    "details": {
      "sha": "aa0b23de77fff6d3406fc6c3df29b6f4c6ec0652",
      "filename": "tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/listener/DefaultPatchListener.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/Tencent/tinker/blob/62e3efc12c349e857c0608c167dad7dfc2ad8474/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Flistener%2FDefaultPatchListener.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/62e3efc12c349e857c0608c167dad7dfc2ad8474/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Flistener%2FDefaultPatchListener.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Flistener%2FDefaultPatchListener.java?ref=62e3efc12c349e857c0608c167dad7dfc2ad8474",
      "patch": "@@ -81,8 +81,12 @@ public void onServiceConnected(ComponentName name, IBinder service) {\n                 @Override\n                 public void onServiceDisconnected(ComponentName name) {\n                     if (context != null && connection != null) {\n-                        //Tinker\u5728\u5b8c\u6210\u8865\u4e01\u540e\u4f1a\u5c1d\u8bd5kill\u6389patch\u8fdb\u7a0b\uff0c\u5982\u679c\u4e0dunbind\u4f1a\u5bfc\u81f4patch\u8fdb\u7a0b\u91cd\u542f\n-                        context.unbindService(connection);\n+                        try {\n+                            //Tinker\u5728\u5b8c\u6210\u8865\u4e01\u540e\u4f1a\u5c1d\u8bd5kill\u6389patch\u8fdb\u7a0b\uff0c\u5982\u679c\u4e0dunbind\u4f1a\u5bfc\u81f4patch\u8fdb\u7a0b\u91cd\u542f\n+                            context.unbindService(connection);\n+                        } catch (Throwable ignored) {\n+                            // Ignored.\n+                        }\n                     }\n                 }\n ",
      "parent_sha": "a72515ff48faa4a6e3354dde6f8f22303b573344"
    }
  },
  {
    "oid": "b734f5a1a1d2ffc9fb3a1a9d136d093e01c01049",
    "message": "[tinker] Bugfix.\n    1. NPE when generate pregenerated dex.",
    "date": "2016-11-04T11:02:28Z",
    "url": "https://github.com/Tencent/tinker/commit/b734f5a1a1d2ffc9fb3a1a9d136d093e01c01049",
    "details": {
      "sha": "05072b27a5d86732c5bdacb9ba9d4634b490c291",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/Tencent/tinker/blob/b734f5a1a1d2ffc9fb3a1a9d136d093e01c01049/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FDexDiffDecoder.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/b734f5a1a1d2ffc9fb3a1a9d136d093e01c01049/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FDexDiffDecoder.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FDexDiffDecoder.java?ref=b734f5a1a1d2ffc9fb3a1a9d136d093e01c01049",
      "patch": "@@ -48,6 +48,7 @@\n import org.jf.dexlib2.iface.DexFile;\n import org.jf.dexlib2.iface.Field;\n import org.jf.dexlib2.iface.Method;\n+import org.jf.dexlib2.iface.MethodImplementation;\n import org.jf.dexlib2.writer.builder.BuilderField;\n import org.jf.dexlib2.writer.builder.BuilderMethod;\n import org.jf.dexlib2.writer.builder.DexBuilder;\n@@ -254,16 +255,20 @@ private void generateStubModePatchDex() throws IOException {\n                     }\n                     List<BuilderMethod> builderMethods = new ArrayList<>();\n                     for (Method parsedMethod : parsedClassDef.getMethods()) {\n+                        MethodImplementation methodImpl = null;\n+                        if (parsedMethod.getImplementation() != null) {\n+                            methodImpl = new BuilderMutableMethodImplementation(\n+                                    dexBuilder, parsedMethod.getImplementation()\n+                            );\n+                        }\n                         BuilderMethod builderMethod = dexBuilder.internMethod(\n                                 parsedMethod.getDefiningClass(),\n                                 parsedMethod.getName(),\n                                 parsedMethod.getParameters(),\n                                 parsedMethod.getReturnType(),\n                                 parsedMethod.getAccessFlags(),\n                                 parsedMethod.getAnnotations(),\n-                                new BuilderMutableMethodImplementation(\n-                                        dexBuilder, parsedMethod.getImplementation()\n-                                )\n+                                methodImpl\n                         );\n                         builderMethods.add(builderMethod);\n                     }",
      "parent_sha": "fde901c0e0e667866aeb74d3639bb8c077bffe0c"
    }
  },
  {
    "oid": "c78ee8fc26717feceb8d4d40ed4c25087b786e18",
    "message": "[tinker] bugfix: Remove codes accessing to 'zip' field since Android O has no 'zip' field in DexPathList.Element class.",
    "date": "2017-05-09T06:09:28Z",
    "url": "https://github.com/Tencent/tinker/commit/c78ee8fc26717feceb8d4d40ed4c25087b786e18",
    "details": {
      "sha": "8feda7f8d3e530084f11f9a98d25b5d58a3edd3d",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/AndroidNClassLoader.java",
      "status": "modified",
      "additions": 4,
      "deletions": 14,
      "changes": 18,
      "blob_url": "https://github.com/Tencent/tinker/blob/c78ee8fc26717feceb8d4d40ed4c25087b786e18/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/c78ee8fc26717feceb8d4d40ed4c25087b786e18/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java?ref=c78ee8fc26717feceb8d4d40ed4c25087b786e18",
      "patch": "@@ -25,16 +25,16 @@\n \n import com.tencent.tinker.loader.shareutil.ShareReflectUtil;\n \n+import dalvik.system.DexFile;\n+import dalvik.system.PathClassLoader;\n+\n import java.io.File;\n import java.io.IOException;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n \n-import dalvik.system.DexFile;\n-import dalvik.system.PathClassLoader;\n-\n /**\n  * Created by zhangshaowen on 16/7/24.\n  */\n@@ -121,7 +121,6 @@ public static AndroidNClassLoader inject(PathClassLoader originClassLoader, Appl\n     // then set its fileName, cookie, internalCookie field to the value\n     // comes from original DexFile object so that the encrypted dex would be taking effect.\n     private static void fixDexElementsForProtectedApp(Application application, Object[] newDexElements) throws Exception {\n-        Field zipField = null;\n         Field dexFileField = null;\n         final Field mFileNameField = ShareReflectUtil.findField(DexFile.class, \"mFileName\");\n         final Field mCookieField = ShareReflectUtil.findField(DexFile.class, \"mCookie\");\n@@ -131,8 +130,7 @@ private static void fixDexElementsForProtectedApp(Application application, Objec\n         for (int i = 0; i < newDexElements.length - 1; ++i) {\n             final Object newElement = newDexElements[i];\n \n-            if (zipField == null && dexFileField == null) {\n-                zipField = ShareReflectUtil.findField(newElement, \"zip\");\n+            if (dexFileField == null) {\n                 dexFileField = ShareReflectUtil.findField(newElement, \"dexFile\");\n             }\n \n@@ -147,14 +145,6 @@ private static void fixDexElementsForProtectedApp(Application application, Objec\n             mInternalCookieField.set(dupOrigDexFile, origInternalCookie);\n \n             dexFileField.set(newElement, dupOrigDexFile);\n-\n-            // Just for better looking when dump new classloader.\n-            // Avoid such output like this: DexPathList{zip file: /xx/yy/zz/uu.odex}\n-            final File newZip = (File) zipField.get(newElement);\n-            final String newZipPath = (newZip != null ? newZip.getAbsolutePath() : null);\n-            if (newZipPath != null && !newZipPath.endsWith(\".zip\") && !newZipPath.endsWith(\".jar\") && !newZipPath.endsWith(\".apk\")) {\n-                zipField.set(newElement, null);\n-            }\n         }\n     }\n ",
      "parent_sha": "5f886c93ea845742d0b5d2bba8b510d743888ff2"
    }
  },
  {
    "oid": "2d12435f96c0a670c61f551554f995a07de400e1",
    "message": "[tinker] FIX: build failure.",
    "date": "2020-05-07T04:15:46Z",
    "url": "https://github.com/Tencent/tinker/commit/2d12435f96c0a670c61f551554f995a07de400e1",
    "details": {
      "sha": "e2b4e811fd3deb6cc2bfb160024f5c8720e2a397",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/Tencent/tinker/blob/2d12435f96c0a670c61f551554f995a07de400e1/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourcePatcher.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/2d12435f96c0a670c61f551554f995a07de400e1/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourcePatcher.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourcePatcher.java?ref=2d12435f96c0a670c61f551554f995a07de400e1",
      "patch": "@@ -24,8 +24,6 @@\n import android.util.ArrayMap;\n import android.util.Log;\n \n-import androidx.annotation.NonNull;\n-\n import com.tencent.tinker.loader.shareutil.ShareConstants;\n import com.tencent.tinker.loader.shareutil.SharePatchFileUtil;\n import com.tencent.tinker.loader.shareutil.ShareReflectUtil;\n@@ -309,7 +307,7 @@ private static boolean checkResUpdate(Context context) {\n         return true;\n     }\n \n-    private static boolean shouldAddSharedLibraryAssets(@NonNull ApplicationInfo applicationInfo) {\n+    private static boolean shouldAddSharedLibraryAssets(ApplicationInfo applicationInfo) {\n         return SDK_INT >= Build.VERSION_CODES.N && applicationInfo != null &&\n                 applicationInfo.sharedLibraryFiles != null;\n     }",
      "parent_sha": "5bd2cb6d67786d1c105e9852fcc5405b633a4fbe"
    }
  },
  {
    "oid": "2ca277544149bfdcd740f92b75d563d39348b053",
    "message": "[tinker] Bugfix.\n    For some reason\uff0csome user's build script may cause old apk name\nand new apk name are same if we compare them ignore letter case. As\nthe original logic does, we won't add suffix to distinguish them,\nwhich causes files of extracted old apk is overlapped by the new one\nin some case-insensitive OS like Windows.",
    "date": "2016-12-02T07:35:43Z",
    "url": "https://github.com/Tencent/tinker/commit/2ca277544149bfdcd740f92b75d563d39348b053",
    "details": {
      "sha": "26ad13663544fe1244da0e6205c226b795150d14",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/patch/Configuration.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/Tencent/tinker/blob/2ca277544149bfdcd740f92b75d563d39348b053/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fpatch%2FConfiguration.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/2ca277544149bfdcd740f92b75d563d39348b053/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fpatch%2FConfiguration.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fpatch%2FConfiguration.java?ref=2ca277544149bfdcd740f92b75d563d39348b053",
      "patch": "@@ -303,7 +303,8 @@ private void createTempDirectory() throws TinkerPatchException {\n \n         String tempNewName = newApkName.substring(0, newApkName.indexOf(TypedValue.FILE_APK));\n \n-        if (tempNewName.equals(tempOldName)) {\n+        // Bugfix: For windows user, filename is case-insensitive.\n+        if (tempNewName.equalsIgnoreCase(tempOldName)) {\n             tempOldName += \"-old\";\n             tempNewName += \"-new\";\n         }",
      "parent_sha": "67f152c38bd5f208d711208f64a90bf7d462696e"
    }
  },
  {
    "oid": "bad412ead8555a16a33a99c216b276de02e268fb",
    "message": "[tinker] Do not pollute pathList in old classloader on patch applying stage.",
    "date": "2021-07-26T20:25:18Z",
    "url": "https://github.com/Tencent/tinker/commit/bad412ead8555a16a33a99c216b276de02e268fb",
    "details": {
      "sha": "90222f263c94681141df38fc97f9c8f2b7d67340",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/NewClassLoaderInjector.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/Tencent/tinker/blob/bad412ead8555a16a33a99c216b276de02e268fb/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FNewClassLoaderInjector.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/bad412ead8555a16a33a99c216b276de02e268fb/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FNewClassLoaderInjector.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FNewClassLoaderInjector.java?ref=bad412ead8555a16a33a99c216b276de02e268fb",
      "patch": "@@ -39,20 +39,21 @@ public static ClassLoader inject(Application app, ClassLoader oldClassLoader, Fi\n             patchedDexPaths[i] = patchedDexes.get(i).getAbsolutePath();\n         }\n         final ClassLoader newClassLoader = createNewClassLoader(oldClassLoader,\n-              dexOptDir, useDLC, patchedDexPaths);\n+              dexOptDir, useDLC, true, patchedDexPaths);\n         doInject(app, newClassLoader);\n         return newClassLoader;\n     }\n \n     public static void triggerDex2Oat(Context context, File dexOptDir, boolean useDLC,\n                                       String... dexPaths) throws Throwable {\n-        final ClassLoader triggerClassLoader = createNewClassLoader(context.getClassLoader(), dexOptDir, useDLC, dexPaths);\n+        final ClassLoader triggerClassLoader = createNewClassLoader(context.getClassLoader(), dexOptDir, useDLC, false, dexPaths);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     private static ClassLoader createNewClassLoader(ClassLoader oldClassLoader,\n                                                     File dexOptDir,\n                                                     boolean useDLC,\n+                                                    boolean forActualLoading,\n                                                     String... patchDexPaths) throws Throwable {\n         final Field pathListField = findField(\n                 Class.forName(\"dalvik.system.BaseDexClassLoader\", false, oldClassLoader),\n@@ -108,7 +109,7 @@ private static ClassLoader createNewClassLoader(ClassLoader oldClassLoader,\n \n         // 'EnsureSameClassLoader' mechanism which is first introduced in Android O\n         // may cause exception if we replace definingContext of old classloader.\n-        if (Build.VERSION.SDK_INT < 26) {\n+        if (forActualLoading && Build.VERSION.SDK_INT < 26) {\n             findField(oldPathList.getClass(), \"definingContext\").set(oldPathList, result);\n         }\n ",
      "parent_sha": "b774cb6eb10c6dba261d9f268d8fde0fcd867198"
    }
  },
  {
    "oid": "2b571ec48bae87065d792309eaf70c29aa77d06b",
    "message": "Fix Android 9.0 Inlined method resolution crossed dex file boundary\n\nFix Android 9.0 Inlined method resolution crossed dex file boundary",
    "date": "2019-04-05T15:01:32Z",
    "url": "https://github.com/Tencent/tinker/commit/2b571ec48bae87065d792309eaf70c29aa77d06b",
    "details": {
      "sha": "975005184eea5ab412470186b2bb4258d0af3e87",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/AndroidNClassLoader.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/Tencent/tinker/blob/2b571ec48bae87065d792309eaf70c29aa77d06b/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/2b571ec48bae87065d792309eaf70c29aa77d06b/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java?ref=2b571ec48bae87065d792309eaf70c29aa77d06b",
      "patch": "@@ -165,7 +165,9 @@ public Class<?> findClass(String name) throws ClassNotFoundException {\n         } else if (name != null && name.startsWith(\"com.tencent.tinker.loader.\")\n                 && !name.equals(SystemClassLoaderAdder.CHECK_DEX_CLASS)) {\n             return originClassLoader.loadClass(name);\n-        } else if (name != null && name.startsWith(\"org.apache.http.\")) {\n+        } else if (name != null &&  (name.startsWith(\"org.apache.commons.codec.\") \n+                                     || name.startsWith(\"org.apache.commons.logging.\")\n+                                     || name.startsWith(\"org.apache.http.\"))) {\n             // Here's the whole story:\n             //   Some app use apache wrapper library to access Apache utilities. Classes in apache wrapper\n             //   library may be conflict with those preloaded in BootClassLoader.",
      "parent_sha": "52535af58a456fced0405568b637d9d70805a117"
    }
  },
  {
    "oid": "d3049d5552929ed30673ab820cbb5299915b304a",
    "message": "[tinker] replay original classloader searching order exactly.",
    "date": "2019-11-09T09:32:56Z",
    "url": "https://github.com/Tencent/tinker/commit/d3049d5552929ed30673ab820cbb5299915b304a",
    "details": {
      "sha": "44255bff5b751912ce5e4662c1506efa054e097b",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/NewClassLoaderInjector.java",
      "status": "modified",
      "additions": 42,
      "deletions": 19,
      "changes": 61,
      "blob_url": "https://github.com/Tencent/tinker/blob/d3049d5552929ed30673ab820cbb5299915b304a/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FNewClassLoaderInjector.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/d3049d5552929ed30673ab820cbb5299915b304a/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FNewClassLoaderInjector.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FNewClassLoaderInjector.java?ref=d3049d5552929ed30673ab820cbb5299915b304a",
      "patch": "@@ -38,19 +38,24 @@ final class NewClassLoaderInjector {\n     private static final class DispatchClassLoader extends ClassLoader {\n         private final String mApplicationClassName;\n         private final ClassLoader mOldClassLoader;\n+        private final ClassLoader mOldParentClassLoader;\n+        private final boolean mIsOldParentABootClassLoader;\n+\n         private ClassLoader mNewClassLoader;\n \n-        private final ThreadLocal<Boolean> mFallThroughToNewCL = new ThreadLocal<Boolean>() {\n+        private final ThreadLocal<Boolean> mCallFindClassOfLeafDirectly = new ThreadLocal<Boolean>() {\n             @Override\n             protected Boolean initialValue() {\n                 return false;\n             }\n         };\n \n         DispatchClassLoader(String applicationClassName, ClassLoader oldClassLoader) {\n-            super(oldClassLoader.getParent());\n+            super(ClassLoader.getSystemClassLoader());\n             mApplicationClassName = applicationClassName;\n             mOldClassLoader = oldClassLoader;\n+            mOldParentClassLoader = oldClassLoader.getParent();\n+            mIsOldParentABootClassLoader = (mOldParentClassLoader == ClassLoader.getSystemClassLoader());\n         }\n \n         void setNewClassLoader(ClassLoader classLoader) {\n@@ -59,17 +64,18 @@ void setNewClassLoader(ClassLoader classLoader) {\n \n         @Override\n         protected Class<?> findClass(String name) throws ClassNotFoundException {\n-            if (mFallThroughToNewCL.get()) {\n-                // Goto NewClassLoader directly since we are here the second time\n-                // now.\n+            if (mCallFindClassOfLeafDirectly.get()) {\n                 return null;\n             }\n+\n             if (name.equals(mApplicationClassName)) {\n-                return mOldClassLoader.loadClass(name);\n-            } else if (name.startsWith(\"com.tencent.tinker.loader.\")\n+                return findClass(mOldClassLoader, name);\n+            }\n+            if (name.startsWith(\"com.tencent.tinker.loader.\")\n                     && !name.equals(SystemClassLoaderAdder.CHECK_DEX_CLASS)) {\n-                return mOldClassLoader.loadClass(name);\n-            } else if (name.startsWith(\"org.apache.commons.codec.\")\n+                return findClass(mOldClassLoader, name);\n+            }\n+            if (name.startsWith(\"org.apache.commons.codec.\")\n                     || name.startsWith(\"org.apache.commons.logging.\")\n                     || name.startsWith(\"org.apache.http.\")) {\n                 // Here's the whole story:\n@@ -92,18 +98,33 @@ protected Class<?> findClass(String name) throws ClassNotFoundException {\n                 //   However, the ART VM of Android P adds a new feature that checks whether the inlined class is loaded by the same\n                 //   ClassLoader that loads the callsite's class. If any Apache classes is inlined in old dex(oat), after we replacing\n                 //   the App's ClassLoader we will receive an assert since the Apache classes is loaded by another ClassLoader now.\n-                return mOldClassLoader.loadClass(name);\n-            } else {\n-                mFallThroughToNewCL.set(true);\n+                return findClass(mOldClassLoader, name);\n+            }\n+\n+            try {\n+                return findClass(mNewClassLoader, name);\n+            } catch (ClassNotFoundException ignored) {\n+                // Ignored.\n+            }\n+\n+            if (!mIsOldParentABootClassLoader) {\n                 try {\n-                    return mNewClassLoader.loadClass(name);\n+                    return mOldParentClassLoader.loadClass(name);\n                 } catch (ClassNotFoundException ignored) {\n-                    // Some class cannot find in NewClassLoader should try OldClassLoader again.\n-                    return mOldClassLoader.loadClass(name);\n-                } finally {\n-                    mFallThroughToNewCL.set(false);\n+                    // Ignored.\n                 }\n             }\n+\n+            return findClass(mOldClassLoader, name);\n+        }\n+\n+        private Class<?> findClass(ClassLoader classLoader, String name) throws ClassNotFoundException {\n+            try {\n+                mCallFindClassOfLeafDirectly.set(true);\n+                return classLoader.loadClass(name);\n+            } finally {\n+                mCallFindClassOfLeafDirectly.set(false);\n+            }\n         }\n     }\n \n@@ -195,8 +216,10 @@ private static ClassLoader createNewClassLoader(Context context, ClassLoader old\n         final ClassLoader result = new PathClassLoader(combinedDexPath, combinedLibraryPath, oldClassLoader.getParent());\n \n         if (!hasPatchDexPaths) {\n-            findField(oldPathList.getClass(), \"definingContext\").set(oldPathList, result);\n-            findField(result.getClass(), \"parent\").set(result, dispatchClassLoader);\n+            // findField(oldPathList.getClass(), \"definingContext\").set(oldPathList, result);\n+            final Field parentField = findField(ClassLoader.class, \"parent\");\n+            parentField.set(result, dispatchClassLoader);\n+            parentField.set(oldClassLoader, dispatchClassLoader);\n         }\n \n         return result;",
      "parent_sha": "185deeb6cbafd44e3ee590a9ec5c615751330c74"
    }
  },
  {
    "oid": "72c81f167fea228bcf22e89355a040c0573f830f",
    "message": "[tinker] Avoid crash if log message contains '%' again. (fix typo.)",
    "date": "2021-10-08T08:27:01Z",
    "url": "https://github.com/Tencent/tinker/commit/72c81f167fea228bcf22e89355a040c0573f830f",
    "details": {
      "sha": "91ac7efbb896096d75aad0be289ddc3e50fd59b4",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/util/Logger.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/tinker/blob/72c81f167fea228bcf22e89355a040c0573f830f/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Futil%2FLogger.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/72c81f167fea228bcf22e89355a040c0573f830f/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Futil%2FLogger.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Futil%2FLogger.java?ref=72c81f167fea228bcf22e89355a040c0573f830f",
      "patch": "@@ -56,7 +56,7 @@ public static void d(final String format, final Object... obj) {\n     }\n \n     public static void e(final String msg) {\n-        Logger.e(\"%\", msg);\n+        Logger.e(\"%s\", msg);\n     }\n \n     public static void e(final String format, final Object... obj) {",
      "parent_sha": "c3d507c26892b9de54d3b949431eea414022d48e"
    }
  },
  {
    "oid": "87a3dd4f70d430c247e253520c4b41d4736f9114",
    "message": "1. [hotfix]  fix dex check error",
    "date": "2016-11-01T07:58:06Z",
    "url": "https://github.com/Tencent/tinker/commit/87a3dd4f70d430c247e253520c4b41d4736f9114",
    "details": {
      "sha": "2ab8a3de0035e60c376376efc25515e065db55b8",
      "filename": "tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/tinker/blob/87a3dd4f70d430c247e253520c4b41d4736f9114/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fpatch%2FDexDiffPatchInternal.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/87a3dd4f70d430c247e253520c4b41d4736f9114/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fpatch%2FDexDiffPatchInternal.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fpatch%2FDexDiffPatchInternal.java?ref=87a3dd4f70d430c247e253520c4b41d4736f9114",
      "patch": "@@ -182,7 +182,7 @@ private static boolean extractDexDiffInternals(Context context, String dir, Stri\n                 String dexDiffMd5 = info.dexDiffMd5;\n                 String oldDexCrc = info.oldDexCrC;\n \n-                if (dexDiffMd5.equals(\"0\") && !ShareTinkerInternals.isVmArt()) {\n+                if (!ShareTinkerInternals.isVmArt() && info.destMd5InDvm.equals(\"0\")) {\n                     TinkerLog.w(TAG, \"patch dex %s is only for art, just continue\", patchRealPath);\n                     continue;\n                 }",
      "parent_sha": "e4b56a3fd9733d04000fbb87b4f203d16b0da64b"
    }
  },
  {
    "oid": "9d5886cc92183ec61497783173cbb2eba09c0222",
    "message": "Rename method generalUnsignedApk to generateUnsignedApk",
    "date": "2016-09-28T10:33:15Z",
    "url": "https://github.com/Tencent/tinker/commit/9d5886cc92183ec61497783173cbb2eba09c0222",
    "details": {
      "sha": "d0b14df23c632e1c1e7815651fd99c5671fef8f7",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/builder/PatchBuilder.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/Tencent/tinker/blob/9d5886cc92183ec61497783173cbb2eba09c0222/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fbuilder%2FPatchBuilder.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/9d5886cc92183ec61497783173cbb2eba09c0222/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fbuilder%2FPatchBuilder.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fbuilder%2FPatchBuilder.java?ref=9d5886cc92183ec61497783173cbb2eba09c0222",
      "patch": "@@ -54,7 +54,7 @@ public void buildPatch() throws IOException, InterruptedException {\n         if (resultDir.listFiles().length == 0) {\n             return;\n         }\n-        generalUnsignedApk(unSignedApk);\n+        generateUnsignedApk(unSignedApk);\n         signApk(unSignedApk, signedApk);\n \n         use7zApk(signedApk, signedWith7ZipApk, sevenZipOutPutDir);\n@@ -113,8 +113,8 @@ private void signApk(File input, File output) throws IOException, InterruptedExc\n      * @param output unsigned apk file output\n      * @throws IOException\n      */\n-    private void generalUnsignedApk(File output) throws IOException {\n-        Logger.d(\"General unsigned apk: %s\", output.getName());\n+    private void generateUnsignedApk(File output) throws IOException {\n+        Logger.d(\"Generate unsigned apk: %s\", output.getName());\n         final File tempOutDir = config.mTempResultDir;\n         if (!tempOutDir.exists()) {\n             throw new IOException(String.format(",
      "parent_sha": "be33cd9b9d82adc230a81bade9b9f541a0871922"
    }
  },
  {
    "oid": "1f92492ae360a968a455de2e2ab69f996cafaffc",
    "message": "Fix build failure.",
    "date": "2019-08-27T05:08:52Z",
    "url": "https://github.com/Tencent/tinker/commit/1f92492ae360a968a455de2e2ab69f996cafaffc",
    "details": {
      "sha": "7e0fa6c0d22b3f462cedc0350707736d1b05d360",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareTinkerInternals.java",
      "status": "modified",
      "additions": 11,
      "deletions": 10,
      "changes": 21,
      "blob_url": "https://github.com/Tencent/tinker/blob/1f92492ae360a968a455de2e2ab69f996cafaffc/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FShareTinkerInternals.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/1f92492ae360a968a455de2e2ab69f996cafaffc/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FShareTinkerInternals.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FShareTinkerInternals.java?ref=1f92492ae360a968a455de2e2ab69f996cafaffc",
      "patch": "@@ -30,6 +30,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.PrintStream;\n+import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.util.HashMap;\n import java.util.List;\n@@ -43,13 +44,13 @@\n  * Created by zhangshaowen on 16/3/10.\n  */\n public class ShareTinkerInternals {\n-    private static final String  TAG       = \"Tinker.TinkerInternals\";\n-    private static final boolean VM_IS_ART = isVmArt(System.getProperty(\"java.vm.version\"));\n-    private static final boolean VM_IS_JIT = isVmJitInternal();\n-    private static final boolean IS_ARKHOT_RUNNING = null;\n-\n+    private static final String  TAG                   = \"Tinker.TinkerInternals\";\n+    private static final boolean VM_IS_ART             = isVmArt(System.getProperty(\"java.vm.version\"));\n+    private static final boolean VM_IS_JIT             = isVmJitInternal();\n     private static final String  PATCH_PROCESS_NAME    = \":patch\";\n+\n     private static       Boolean isPatchProcess        = null;\n+    private static       Boolean isARKHotRunning       = false;\n     /**\n      * or you may just hardcode them in your app\n      */\n@@ -66,18 +67,18 @@ public static boolean isVmJit() {\n     }\n \n     public static boolean isArkHotRuning() {\n-        if (isArkHotRuning != null) {\n-            return isArkHotRuning;\n+        if (isARKHotRunning != null) {\n+            return isARKHotRunning;\n         }\n-        isArkHotRuning = false;\n+        isARKHotRunning = false;\n         Class<?> arkApplicationInfo = null;\n         try {\n             arkApplicationInfo = ClassLoader.getSystemClassLoader()\n                 .getParent().loadClass(\"com.huawei.ark.app.ArkApplicationInfo\");\n             Method isRunningInArkHot = null;\n             isRunningInArkHot = arkApplicationInfo.getDeclaredMethod(\"isRunningInArk\");\n             isRunningInArkHot.setAccessible(true);\n-            isArkHotRuning = (boolean)isRunningInArkHot.invoke(null);\n+            isARKHotRunning = (Boolean) isRunningInArkHot.invoke(null);\n         } catch (ClassNotFoundException e) {\n             Log.i(TAG, \"class not found exception\");\n         } catch (NoSuchMethodException e) {\n@@ -91,7 +92,7 @@ public static boolean isArkHotRuning() {\n         } catch (IllegalArgumentException e) {\n             Log.i(TAG, \"illegal argument exception\");\n         }\n-        return isArkHotRuning;\n+        return isARKHotRunning;\n     }\n \n     public static boolean isAfterAndroidO() {",
      "parent_sha": "d06606b6aa4e42fad5f30811abb98a578128c97d"
    }
  },
  {
    "oid": "5216b905a717079692c45d5d9f2f4fdd2af491f7",
    "message": "fix build path PatternSyntaxException.\u00a0",
    "date": "2021-03-14T12:29:13Z",
    "url": "https://github.com/Tencent/tinker/commit/5216b905a717079692c45d5d9f2f4fdd2af491f7",
    "details": {
      "sha": "67f249172815f6cdcabaa0c8db2043517c236b03",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ApkDecoder.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/Tencent/tinker/blob/5216b905a717079692c45d5d9f2f4fdd2af491f7/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FApkDecoder.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/5216b905a717079692c45d5d9f2f4fdd2af491f7/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FApkDecoder.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FApkDecoder.java?ref=5216b905a717079692c45d5d9f2f4fdd2af491f7",
      "patch": "@@ -33,6 +33,7 @@\n import java.nio.file.SimpleFileVisitor;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.util.ArrayList;\n+import java.util.regex.Matcher;\n \n /**\n  * Created by zhangshaowen on 16/3/15.\n@@ -222,7 +223,7 @@ public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IO\n         }\n \n         private String getAbiFromPath(String path) {\n-            path = path.replaceAll(File.separator, \"/\");\n+            path = path.replaceAll(Matcher.quoteReplacement(File.separator), \"/\");\n             final int prefixPos = path.indexOf(\"/lib/\");\n             if (prefixPos < 0) {\n                 return null;",
      "parent_sha": "dabd1ad6fe35ce8e3777b0d3e25c08449fa80487"
    }
  },
  {
    "oid": "492990ac2fed8cb9d0b2514c82e8e5e3b8890c58",
    "message": "[tinker] Trigger dex2oat again when wait and retry for optimizing. And create an empty odex file before triggering dex2oat to fix permission issues.",
    "date": "2021-12-07T08:45:14Z",
    "url": "https://github.com/Tencent/tinker/commit/492990ac2fed8cb9d0b2514c82e8e5e3b8890c58",
    "details": {
      "sha": "dfdbff423b43887bee23773d64b16832ba0557a6",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java",
      "status": "modified",
      "additions": 40,
      "deletions": 31,
      "changes": 71,
      "blob_url": "https://github.com/Tencent/tinker/blob/492990ac2fed8cb9d0b2514c82e8e5e3b8890c58/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/492990ac2fed8cb9d0b2514c82e8e5e3b8890c58/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java?ref=492990ac2fed8cb9d0b2514c82e8e5e3b8890c58",
      "patch": "@@ -31,7 +31,9 @@\n import android.os.ResultReceiver;\n import android.os.SystemClock;\n \n+import com.tencent.tinker.loader.shareutil.ShareElfFile;\n import com.tencent.tinker.loader.shareutil.ShareFileLockHelper;\n+import com.tencent.tinker.loader.shareutil.ShareOatUtil;\n import com.tencent.tinker.loader.shareutil.SharePatchFileUtil;\n import com.tencent.tinker.loader.shareutil.ShareReflectUtil;\n import com.tencent.tinker.loader.shareutil.ShareTinkerInternals;\n@@ -194,45 +196,52 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n \n         try {\n             final File oatFile = new File(oatPath);\n-            if (oatFile.exists()) {\n+            if (oatFile.exists() && oatFile.length() > 4) {\n                 ShareTinkerLog.i(TAG, \"[+] Odex file exists, skip bg-dexopt triggering.\");\n                 return;\n+            } else {\n+                try {\n+                    final File oatDir = oatFile.getParentFile();\n+                    if (!oatDir.exists()) {\n+                        oatDir.mkdirs();\n+                    }\n+                    oatFile.createNewFile();\n+                } catch (Throwable thr) {\n+                    ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to pre-create oat file.\");\n+                }\n             }\n-            try {\n-                reconcileSecondaryDexFiles(context);\n-            } catch (Throwable thr) {\n-                ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call reconcileSecondaryDexFiles.\");\n-            }\n-            try {\n-                registerDexModule(context, dexPath);\n+            int waitTimes = 0;\n+            while (true) {\n+                try {\n+                    reconcileSecondaryDexFiles(context);\n+                } catch (Throwable thr) {\n+                    ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call reconcileSecondaryDexFiles.\");\n+                }\n+                try {\n+                    registerDexModule(context, dexPath);\n+                } catch (Throwable thr) {\n+                    ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call registerDexModule.\");\n+                }\n                 if (oatFile.exists()) {\n-                    ShareTinkerLog.i(TAG, \"[+] Dexopt was triggered successfully.\");\n+                    ShareTinkerLog.i(TAG, \"[+] Dexopt was triggered by registerDexModule successfully.\");\n                     return;\n                 }\n-            } catch (Throwable thr) {\n-                ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call registerDexModule.\");\n-            }\n-            boolean doWaitingLoop = true;\n-            try {\n-                performDexOptSecondary(context);\n-            } catch (Throwable thr) {\n-                ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call performDexOptSecondary.\");\n-                doWaitingLoop = false;\n-            }\n-            int waitTimes = 0;\n-            while (doWaitingLoop) {\n+                try {\n+                    performDexOptSecondary(context);\n+                } catch (Throwable thr) {\n+                    ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call performDexOptSecondary.\");\n+                }\n                 if (oatFile.exists()) {\n-                    ShareTinkerLog.i(TAG, \"[+] Dexopt was triggered successfully.\");\n-                    doWaitingLoop = false;\n-                } else {\n-                    if (waitTimes >= 3) {\n-                        throw new IllegalStateException(\"Dexopt was triggered, but no odex file was generated.\");\n-                    }\n-                    // Take a rest. And hope any asynchronous mechanism may generate odex/vdex we need.\n-                    ShareTinkerLog.w(TAG, \"[!] No odex file was generated, wait for retry.\");\n-                    ++waitTimes;\n-                    SystemClock.sleep(5000);\n+                    ShareTinkerLog.i(TAG, \"[+] Dexopt was triggered by performDexOptSecondary successfully.\");\n+                    return;\n+                }\n+                if (waitTimes >= 3) {\n+                    throw new IllegalStateException(\"Dexopt was triggered, but no odex file was generated.\");\n                 }\n+                // Take a rest. And hope any asynchronous mechanism may generate odex/vdex we need.\n+                ShareTinkerLog.w(TAG, \"[!] No odex file was generated, wait for retry.\");\n+                ++waitTimes;\n+                SystemClock.sleep(5000);\n             }\n         } catch (Throwable thr) {\n             ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call triggerPMDexOptAsyncOnDemand.\");",
      "parent_sha": "be9d1440388cb081b6c4205525b250fd05b14ed6"
    }
  },
  {
    "oid": "96db5dfe60cbac5b6fc17d185ca94c3c0fb2053a",
    "message": "1. [bugfix] add check vm art property, !art and sdkversion > 21",
    "date": "2016-10-31T07:03:14Z",
    "url": "https://github.com/Tencent/tinker/commit/96db5dfe60cbac5b6fc17d185ca94c3c0fb2053a",
    "details": {
      "sha": "256c73a872ae559eacafbc3866916609e9721e70",
      "filename": "tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/Tencent/tinker/blob/96db5dfe60cbac5b6fc17d185ca94c3c0fb2053a/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fpatch%2FDexDiffPatchInternal.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/96db5dfe60cbac5b6fc17d185ca94c3c0fb2053a/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fpatch%2FDexDiffPatchInternal.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fpatch%2FDexDiffPatchInternal.java?ref=96db5dfe60cbac5b6fc17d185ca94c3c0fb2053a",
      "patch": "@@ -18,6 +18,7 @@\n \n import android.content.Context;\n import android.content.pm.ApplicationInfo;\n+import android.os.Build;\n import android.os.SystemClock;\n \n import com.tencent.tinker.commons.dexpatcher.DexPatchApplier;\n@@ -53,7 +54,6 @@ public class DexDiffPatchInternal extends BasePatchInternal {\n \n     protected static boolean tryRecoverDexFiles(Tinker manager, ShareSecurityCheck checker, Context context,\n                                                 String patchVersionDirectory, File patchFile, boolean isUpgradePatch) {\n-\n         if (!manager.isEnabledForDex()) {\n             TinkerLog.w(TAG, \"patch recover, dex is not enabled\");\n             return true;\n@@ -73,6 +73,8 @@ protected static boolean tryRecoverDexFiles(Tinker manager, ShareSecurityCheck c\n     }\n \n     private static boolean patchDexExtractViaDexDiff(Context context, String patchVersionDirectory, String meta, File patchFile, boolean isUpgradePatch) {\n+        checkVmArtProperty();\n+\n         String dir = patchVersionDirectory + \"/\" + DEX_PATH + \"/\";\n \n         int dexType = ShareTinkerInternals.isVmArt() ? TYPE_DEX_FOR_ART : TYPE_DEX;\n@@ -403,6 +405,16 @@ private static boolean extractDexToJar(ZipFile zipFile, ZipEntry entryFile, File\n         return isExtractionSuccessful;\n     }\n \n+    /**\n+     * reject dalvik vm, but sdk version is larger than 21\n+     */\n+    private static void checkVmArtProperty() {\n+        boolean art = ShareTinkerInternals.isVmArt();\n+        if (!art && Build.VERSION.SDK_INT >= 21) {\n+            throw new TinkerRuntimeException(\"it is dalvik vm, but sdk version \" + Build.VERSION.SDK_INT + \" is larger than 21\");\n+        }\n+    }\n+\n     private static boolean extractDexFile(ZipFile zipFile, ZipEntry entryFile, File extractTo, ShareDexDiffPatchInfo dexInfo) throws IOException {\n         final String fileMd5 = ShareTinkerInternals.isVmArt() ? dexInfo.destMd5InArt : dexInfo.destMd5InDvm;\n         final String rawName = dexInfo.rawName;",
      "parent_sha": "7a9dac457c688c45931ec073f17b5bfc47a6eec8"
    }
  },
  {
    "oid": "5ac9e4edf8f3ca729406e368fc77644423c9e319",
    "message": "fix some device PathClassLoader bebind BootClassLoader which lead to ClassNotFoundException",
    "date": "2020-01-03T07:20:51Z",
    "url": "https://github.com/Tencent/tinker/commit/5ac9e4edf8f3ca729406e368fc77644423c9e319",
    "details": {
      "sha": "86dc27ef574dae682e1f78865f6c520dbb551491",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/hotplug/interceptor/ServiceBinderInterceptor.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/Tencent/tinker/blob/5ac9e4edf8f3ca729406e368fc77644423c9e319/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fhotplug%2Finterceptor%2FServiceBinderInterceptor.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/5ac9e4edf8f3ca729406e368fc77644423c9e319/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fhotplug%2Finterceptor%2FServiceBinderInterceptor.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fhotplug%2Finterceptor%2FServiceBinderInterceptor.java?ref=5ac9e4edf8f3ca729406e368fc77644423c9e319",
      "patch": "@@ -164,8 +164,14 @@ private static <T> T createProxy(Class<?>[] itfs, InvocationHandler handler) {\n                     @Override\n                     protected Class<?> loadClass(String className, boolean resolve)\n                             throws ClassNotFoundException {\n+                        Class<?> res = null;\n                         for (ClassLoader cl : uniqueCls) {\n-                            final Class<?> res = cl.loadClass(className);\n+                            try {\n+                                // fix some device PathClassLoader behind BootClassLoader which lead to ClassNotFoundException\n+                                res = cl.loadClass(className);\n+                            } catch (Throwable ignore) {\n+\n+                            }\n                             if (res != null) {\n                                 return res;\n                             }",
      "parent_sha": "017fb1b601b6dc31fa5da6f635f113a5eac1f461"
    }
  },
  {
    "oid": "d92d9b0222cb778f7d7a758d2be34632ae6db692",
    "message": "[tinker] Add lost modifications: remove old patch async on patch loading.",
    "date": "2022-10-20T07:24:25Z",
    "url": "https://github.com/Tencent/tinker/commit/d92d9b0222cb778f7d7a758d2be34632ae6db692",
    "details": {
      "sha": "b6a735e735b59de22fdce260250385357b5c4e6b",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/Tencent/tinker/blob/d92d9b0222cb778f7d7a758d2be34632ae6db692/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerLoader.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/d92d9b0222cb778f7d7a758d2be34632ae6db692/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerLoader.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerLoader.java?ref=d92d9b0222cb778f7d7a758d2be34632ae6db692",
      "patch": "@@ -92,7 +92,6 @@ private void tryLoadPatchFilesInternal(TinkerApplication app, Intent resultInten\n \n         //tinker/patch.info\n         File patchInfoFile = SharePatchFileUtil.getPatchInfoFile(patchDirectoryPath);\n-\n         //check patch info file whether exist\n         if (!patchInfoFile.exists()) {\n             ShareTinkerLog.w(TAG, \"tryLoadPatchFiles:patch info not exist:\" + patchInfoFile.getAbsolutePath());\n@@ -102,7 +101,6 @@ private void tryLoadPatchFilesInternal(TinkerApplication app, Intent resultInten\n         //old = 641e634c5b8f1649c75caf73794acbdf\n         //new = 2c150d8560334966952678930ba67fa8\n         File patchInfoLockFile = SharePatchFileUtil.getPatchInfoLockFile(patchDirectoryPath);\n-\n         patchInfo = SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile, patchInfoLockFile);\n         if (patchInfo == null) {\n             ShareIntentUtil.setIntentReturnCode(resultIntent, ShareConstants.ERROR_LOAD_PATCH_INFO_CORRUPTED);\n@@ -170,7 +168,7 @@ private void tryLoadPatchFilesInternal(TinkerApplication app, Intent resultInten\n \n                         String patchVersionDirFullPath = patchDirectoryPath + \"/\" + patchName;\n                         ShareTinkerInternals.killProcessExceptMain(app);\n-                        SharePatchFileUtil.deleteDir(patchVersionDirFullPath);\n+                        SharePatchFileUtil.deleteDirAsync(patchVersionDirFullPath);\n                     }\n                 } else {\n                     patchInfo.versionToRemove = \"\";\n@@ -241,7 +239,6 @@ private void tryLoadPatchFilesInternal(TinkerApplication app, Intent resultInten\n         }\n \n         ShareSecurityCheck securityCheck = new ShareSecurityCheck(app);\n-\n         int returnCode = ShareTinkerInternals.checkTinkerPackage(app, tinkerFlag, patchVersionFile, securityCheck);\n         if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n             ShareTinkerLog.w(TAG, \"tryLoadPatchFiles:checkTinkerPackage\");",
      "parent_sha": "451a2d1f98d8c0055d1eda101a73ff8a99e1da82"
    }
  },
  {
    "oid": "dce0257da0a97af7d217cb2c2fed6d85ef640d1d",
    "message": "[tinker] Remove useless codes.",
    "date": "2022-07-08T18:55:16Z",
    "url": "https://github.com/Tencent/tinker/commit/dce0257da0a97af7d217cb2c2fed6d85ef640d1d",
    "details": {
      "sha": "2a589809fd0a63af3b7b9523844f8db751e0e23d",
      "filename": "tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/reporter/DefaultLoadReporter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 22,
      "changes": 23,
      "blob_url": "https://github.com/Tencent/tinker/blob/dce0257da0a97af7d217cb2c2fed6d85ef640d1d/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Freporter%2FDefaultLoadReporter.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/dce0257da0a97af7d217cb2c2fed6d85ef640d1d/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Freporter%2FDefaultLoadReporter.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Freporter%2FDefaultLoadReporter.java?ref=dce0257da0a97af7d217cb2c2fed6d85ef640d1d",
      "patch": "@@ -22,13 +22,11 @@\n import com.tencent.tinker.lib.service.TinkerPatchService;\n import com.tencent.tinker.lib.tinker.Tinker;\n import com.tencent.tinker.lib.tinker.TinkerInstaller;\n-import com.tencent.tinker.lib.tinker.TinkerLoadResult;\n-import com.tencent.tinker.loader.shareutil.ShareTinkerLog;\n import com.tencent.tinker.lib.util.UpgradePatchRetry;\n import com.tencent.tinker.loader.shareutil.ShareConstants;\n import com.tencent.tinker.loader.shareutil.SharePatchFileUtil;\n-import com.tencent.tinker.loader.shareutil.SharePatchInfo;\n import com.tencent.tinker.loader.shareutil.ShareTinkerInternals;\n+import com.tencent.tinker.loader.shareutil.ShareTinkerLog;\n \n import java.io.File;\n \n@@ -304,28 +302,9 @@ public void onLoadPackageCheckFail(File patchFile, int errorCode) {\n         checkAndCleanPatch();\n     }\n \n-    /**\n-     * other process may have installed old patch version,\n-     * if we try to clean patch, we should kill other process first\n-     */\n     public void checkAndCleanPatch() {\n         Tinker tinker = Tinker.with(context);\n-        //only main process can load a new patch\n-        if (tinker.isMainProcess()) {\n-            TinkerLoadResult tinkerLoadResult = tinker.getTinkerLoadResultIfPresent();\n-            //if versionChange and the old patch version is not \"\"\n-            if (tinkerLoadResult.versionChanged) {\n-                SharePatchInfo sharePatchInfo = tinkerLoadResult.patchInfo;\n-                if (sharePatchInfo != null && !ShareTinkerInternals.isNullOrNil(sharePatchInfo.oldVersion)) {\n-                    ShareTinkerLog.w(TAG, \"checkAndCleanPatch, oldVersion %s is not null, try kill all other process\",\n-                        sharePatchInfo.oldVersion);\n-\n-                    ShareTinkerInternals.killAllOtherProcess(context);\n-                }\n-            }\n-        }\n         tinker.cleanPatch();\n-\n     }\n \n     public boolean retryPatch() {",
      "parent_sha": "1e1f180ce14e1d406a33627406b46cf3b806fe98"
    }
  },
  {
    "oid": "286db3f772695535f85bf5cd92d405d281cb7d9d",
    "message": "[tinker] Try old classloader if class is not found in new classloader.",
    "date": "2019-11-07T05:47:29Z",
    "url": "https://github.com/Tencent/tinker/commit/286db3f772695535f85bf5cd92d405d281cb7d9d",
    "details": {
      "sha": "47cf5c44ca88b2630d3d5aa0c71f43d094ce8f23",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/NewClassLoaderInjector.java",
      "status": "modified",
      "additions": 28,
      "deletions": 3,
      "changes": 31,
      "blob_url": "https://github.com/Tencent/tinker/blob/286db3f772695535f85bf5cd92d405d281cb7d9d/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FNewClassLoaderInjector.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/286db3f772695535f85bf5cd92d405d281cb7d9d/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FNewClassLoaderInjector.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FNewClassLoaderInjector.java?ref=286db3f772695535f85bf5cd92d405d281cb7d9d",
      "patch": "@@ -38,15 +38,32 @@ final class NewClassLoaderInjector {\n     private static final class DispatchClassLoader extends ClassLoader {\n         private final String mApplicationClassName;\n         private final ClassLoader mOldClassLoader;\n+        private ClassLoader mNewClassLoader;\n+\n+        private final ThreadLocal<Boolean> mFallThroughToNewCL = new ThreadLocal<Boolean>() {\n+            @Override\n+            protected Boolean initialValue() {\n+                return false;\n+            }\n+        };\n \n         DispatchClassLoader(String applicationClassName, ClassLoader oldClassLoader) {\n             super(oldClassLoader.getParent());\n             mApplicationClassName = applicationClassName;\n             mOldClassLoader = oldClassLoader;\n         }\n \n+        void setNewClassLoader(ClassLoader classLoader) {\n+            mNewClassLoader = classLoader;\n+        }\n+\n         @Override\n         protected Class<?> findClass(String name) throws ClassNotFoundException {\n+            if (mFallThroughToNewCL.get()) {\n+                // Goto NewClassLoader directly since we are here the second time\n+                // now.\n+                return null;\n+            }\n             if (name.equals(mApplicationClassName)) {\n                 return mOldClassLoader.loadClass(name);\n             } else if (name.startsWith(\"com.tencent.tinker.loader.\")\n@@ -77,17 +94,25 @@ protected Class<?> findClass(String name) throws ClassNotFoundException {\n                 //   the App's ClassLoader we will receive an assert since the Apache classes is loaded by another ClassLoader now.\n                 return mOldClassLoader.loadClass(name);\n             } else {\n-                // We will fallback to NewClassLoader's findClass here.\n-                return null;\n+                mFallThroughToNewCL.set(true);\n+                try {\n+                    return mNewClassLoader.loadClass(name);\n+                } catch (ClassNotFoundException ignored) {\n+                    // Some class cannot find in NewClassLoader should try OldClassLoader again.\n+                    return mOldClassLoader.loadClass(name);\n+                } finally {\n+                    mFallThroughToNewCL.set(false);\n+                }\n             }\n         }\n     }\n \n     public static ClassLoader inject(Application app, ClassLoader oldClassLoader) throws Throwable {\n-        final ClassLoader dispatchClassLoader\n+        final DispatchClassLoader dispatchClassLoader\n                 = new DispatchClassLoader(app.getClass().getName(), oldClassLoader);\n         final ClassLoader newClassLoader\n                 = createNewClassLoader(app, oldClassLoader, dispatchClassLoader);\n+        dispatchClassLoader.setNewClassLoader(newClassLoader);\n         doInject(app, newClassLoader);\n         return newClassLoader;\n     }",
      "parent_sha": "3aa53ef1af728db1637177f4c66bfb637651f41f"
    }
  },
  {
    "oid": "d41b3e870eb75322dd128bdd1966f65b43ac4777",
    "message": "[tinker] Trigger dex2oat again when wait and retry for optimizing. And create an empty odex file before triggering dex2oat to fix permission issues.",
    "date": "2021-11-10T08:14:35Z",
    "url": "https://github.com/Tencent/tinker/commit/d41b3e870eb75322dd128bdd1966f65b43ac4777",
    "details": {
      "sha": "dfdbff423b43887bee23773d64b16832ba0557a6",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java",
      "status": "modified",
      "additions": 40,
      "deletions": 31,
      "changes": 71,
      "blob_url": "https://github.com/Tencent/tinker/blob/d41b3e870eb75322dd128bdd1966f65b43ac4777/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/d41b3e870eb75322dd128bdd1966f65b43ac4777/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java?ref=d41b3e870eb75322dd128bdd1966f65b43ac4777",
      "patch": "@@ -31,7 +31,9 @@\n import android.os.ResultReceiver;\n import android.os.SystemClock;\n \n+import com.tencent.tinker.loader.shareutil.ShareElfFile;\n import com.tencent.tinker.loader.shareutil.ShareFileLockHelper;\n+import com.tencent.tinker.loader.shareutil.ShareOatUtil;\n import com.tencent.tinker.loader.shareutil.SharePatchFileUtil;\n import com.tencent.tinker.loader.shareutil.ShareReflectUtil;\n import com.tencent.tinker.loader.shareutil.ShareTinkerInternals;\n@@ -194,45 +196,52 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n \n         try {\n             final File oatFile = new File(oatPath);\n-            if (oatFile.exists()) {\n+            if (oatFile.exists() && oatFile.length() > 4) {\n                 ShareTinkerLog.i(TAG, \"[+] Odex file exists, skip bg-dexopt triggering.\");\n                 return;\n+            } else {\n+                try {\n+                    final File oatDir = oatFile.getParentFile();\n+                    if (!oatDir.exists()) {\n+                        oatDir.mkdirs();\n+                    }\n+                    oatFile.createNewFile();\n+                } catch (Throwable thr) {\n+                    ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to pre-create oat file.\");\n+                }\n             }\n-            try {\n-                reconcileSecondaryDexFiles(context);\n-            } catch (Throwable thr) {\n-                ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call reconcileSecondaryDexFiles.\");\n-            }\n-            try {\n-                registerDexModule(context, dexPath);\n+            int waitTimes = 0;\n+            while (true) {\n+                try {\n+                    reconcileSecondaryDexFiles(context);\n+                } catch (Throwable thr) {\n+                    ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call reconcileSecondaryDexFiles.\");\n+                }\n+                try {\n+                    registerDexModule(context, dexPath);\n+                } catch (Throwable thr) {\n+                    ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call registerDexModule.\");\n+                }\n                 if (oatFile.exists()) {\n-                    ShareTinkerLog.i(TAG, \"[+] Dexopt was triggered successfully.\");\n+                    ShareTinkerLog.i(TAG, \"[+] Dexopt was triggered by registerDexModule successfully.\");\n                     return;\n                 }\n-            } catch (Throwable thr) {\n-                ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call registerDexModule.\");\n-            }\n-            boolean doWaitingLoop = true;\n-            try {\n-                performDexOptSecondary(context);\n-            } catch (Throwable thr) {\n-                ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call performDexOptSecondary.\");\n-                doWaitingLoop = false;\n-            }\n-            int waitTimes = 0;\n-            while (doWaitingLoop) {\n+                try {\n+                    performDexOptSecondary(context);\n+                } catch (Throwable thr) {\n+                    ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call performDexOptSecondary.\");\n+                }\n                 if (oatFile.exists()) {\n-                    ShareTinkerLog.i(TAG, \"[+] Dexopt was triggered successfully.\");\n-                    doWaitingLoop = false;\n-                } else {\n-                    if (waitTimes >= 3) {\n-                        throw new IllegalStateException(\"Dexopt was triggered, but no odex file was generated.\");\n-                    }\n-                    // Take a rest. And hope any asynchronous mechanism may generate odex/vdex we need.\n-                    ShareTinkerLog.w(TAG, \"[!] No odex file was generated, wait for retry.\");\n-                    ++waitTimes;\n-                    SystemClock.sleep(5000);\n+                    ShareTinkerLog.i(TAG, \"[+] Dexopt was triggered by performDexOptSecondary successfully.\");\n+                    return;\n+                }\n+                if (waitTimes >= 3) {\n+                    throw new IllegalStateException(\"Dexopt was triggered, but no odex file was generated.\");\n                 }\n+                // Take a rest. And hope any asynchronous mechanism may generate odex/vdex we need.\n+                ShareTinkerLog.w(TAG, \"[!] No odex file was generated, wait for retry.\");\n+                ++waitTimes;\n+                SystemClock.sleep(5000);\n             }\n         } catch (Throwable thr) {\n             ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call triggerPMDexOptAsyncOnDemand.\");",
      "parent_sha": "0d550729bb0b724c0704385ff8878e6e12645c39"
    }
  },
  {
    "oid": "74a2ae06d5016fa9136bde58354e55af4a92859f",
    "message": "[bugfix] fix android o library load",
    "date": "2017-05-22T06:11:47Z",
    "url": "https://github.com/Tencent/tinker/commit/74a2ae06d5016fa9136bde58354e55af4a92859f",
    "details": {
      "sha": "26f7d4c2a0aebab5b0fdf298d3a48b833e02d8b3",
      "filename": "tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/library/TinkerLoadLibrary.java",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/Tencent/tinker/blob/74a2ae06d5016fa9136bde58354e55af4a92859f/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Flibrary%2FTinkerLoadLibrary.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/74a2ae06d5016fa9136bde58354e55af4a92859f/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Flibrary%2FTinkerLoadLibrary.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Flibrary%2FTinkerLoadLibrary.java?ref=74a2ae06d5016fa9136bde58354e55af4a92859f",
      "patch": "@@ -170,23 +170,26 @@ private static void installNativeLibraryPath(ClassLoader classLoader, File folde\n             TinkerLog.e(TAG, \"installNativeLibraryPath, folder %s is illegal\", folder);\n             return;\n         }\n+        // android o sdk_int 26\n+        // for android o preview sdk_int 25\n         if ((Build.VERSION.SDK_INT == 25 && Build.VERSION.PREVIEW_SDK_INT != 0)\n-                || Build.VERSION.SDK_INT > 25) {\n+            || Build.VERSION.SDK_INT > 25) {\n             try {\n                 V25.install(classLoader, folder);\n                 return;\n             } catch (Throwable throwable) {\n-                // install fail, try to treat it as v14\n-                TinkerLog.e(TAG, \"installNativeLibraryPath, v25 fail, sdk: %d, error: %s\",\n+                // install fail, try to treat it as v23\n+                // some preview N version may go here\n+                TinkerLog.e(TAG, \"installNativeLibraryPath, v25 fail, sdk: %d, error: %s, try to fallback to V23\",\n                         Build.VERSION.SDK_INT, throwable.getMessage());\n+                V23.install(classLoader, folder);\n             }\n-        }\n-        if (Build.VERSION.SDK_INT >= 23) {\n+        } else if (Build.VERSION.SDK_INT >= 23) {\n             try {\n                 V23.install(classLoader, folder);\n             } catch (Throwable throwable) {\n                 // install fail, try to treat it as v14\n-                TinkerLog.e(TAG, \"installNativeLibraryPath, v23 fail, sdk: %d, error: %s\",\n+                TinkerLog.e(TAG, \"installNativeLibraryPath, v23 fail, sdk: %d, error: %s, try to fallback to V14\",\n                     Build.VERSION.SDK_INT, throwable.getMessage());\n \n                 V14.install(classLoader, folder);",
      "parent_sha": "65d89f95e37eb91daeae276aa48e50dfedb5e737"
    }
  },
  {
    "oid": "3fa4741bd44e0f3ad8c637c041a251a007997765",
    "message": "[tinker] Do not call registerDexModule on xiaomi & redmi Android S devices.",
    "date": "2022-07-07T07:24:10Z",
    "url": "https://github.com/Tencent/tinker/commit/3fa4741bd44e0f3ad8c637c041a251a007997765",
    "details": {
      "sha": "2b3b50f00a03d908773ba839dd1ba6f05a1a636f",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/Tencent/tinker/blob/3fa4741bd44e0f3ad8c637c041a251a007997765/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/3fa4741bd44e0f3ad8c637c041a251a007997765/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java?ref=3fa4741bd44e0f3ad8c637c041a251a007997765",
      "patch": "@@ -242,7 +242,8 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n             return;\n         }\n         for (int i = 0; i < 5; ++i) {\n-            if (ShareTinkerInternals.isNewerOrEqualThanVersion(31, true)) {\n+            if (ShareTinkerInternals.isNewerOrEqualThanVersion(31, true)\n+            && !\"xiaomi\".equalsIgnoreCase(Build.MANUFACTURER) && !\"redmi\".equalsIgnoreCase(Build.MANUFACTURER)) {\n                 try {\n                     registerDexModule(context, dexPath);\n                     if (SharePatchFileUtil.isLegalFile(oatFile)) {",
      "parent_sha": "d294142a476db315094927c1fe47d2ba8abde996"
    }
  },
  {
    "oid": "df9e1d29420d53a650ab73569d828a22e3cfe728",
    "message": "[tinker] Allow version code upgrade and version name changes when generate patch.",
    "date": "2020-11-03T09:11:55Z",
    "url": "https://github.com/Tencent/tinker/commit/df9e1d29420d53a650ab73569d828a22e3cfe728",
    "details": {
      "sha": "4f0b9e2e3f04b43b1013f3ca03b45f8036afa2e3",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ManifestDecoder.java",
      "status": "modified",
      "additions": 11,
      "deletions": 4,
      "changes": 15,
      "blob_url": "https://github.com/Tencent/tinker/blob/df9e1d29420d53a650ab73569d828a22e3cfe728/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FManifestDecoder.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/df9e1d29420d53a650ab73569d828a22e3cfe728/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FManifestDecoder.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FManifestDecoder.java?ref=df9e1d29420d53a650ab73569d828a22e3cfe728",
      "patch": "@@ -224,12 +224,19 @@ private void ensureApkMetaUnchanged(ApkMeta oldMeta, ApkMeta newMeta) {\n                         + \", new: \" + newMeta.getIcon());\n             }\n             if (!nullSafeEquals(oldMeta.getVersionName(), newMeta.getVersionName())) {\n-                announceWarningOrException(\"Version name changed, old: \" + oldMeta.getVersionName()\n+                Logger.e(\"Note: Version name changed, old: \" + oldMeta.getVersionName()\n                         + \", new: \" + newMeta.getVersionName());\n             }\n-            if (!nullSafeEquals(oldMeta.getVersionCode(), newMeta.getVersionCode())) {\n-                announceWarningOrException(\"Version code changed, old: \" + oldMeta.getVersionCode()\n-                        + \", new: \" + newMeta.getVersionCode());\n+            final Long oldVersionCode = oldMeta.getVersionCode();\n+            final Long newVersionCode = newMeta.getVersionCode();\n+            if (oldVersionCode != null && newVersionCode != null) {\n+                if (newVersionCode < oldVersionCode) {\n+                    announceWarningOrException(\"Version code downgrade, old: \" + oldVersionCode\n+                            + \", new: \" + newVersionCode);\n+                }\n+            } else if (!(oldVersionCode == null && newVersionCode == null)) {\n+                announceWarningOrException(\"Version code of old or new apk is missing, old: \" + oldVersionCode\n+                        + \", new: \" + newVersionCode);\n             }\n             if (!nullSafeEquals(oldMeta.getInstallLocation(), newMeta.getInstallLocation())) {\n                 announceWarningOrException(\"Install location changed, old: \" + oldMeta.getInstallLocation()",
      "parent_sha": "515c5699ef6b6c1da273cf470a175dca5776c12d"
    }
  },
  {
    "oid": "e0d6268cce300577bdefe64083c3357783b5bbb4",
    "message": "[tinker] Limit fix of \"Accidentally triggered fallback to interpret-mode\" on system beyond Android N only.",
    "date": "2017-06-23T12:19:52Z",
    "url": "https://github.com/Tencent/tinker/commit/e0d6268cce300577bdefe64083c3357783b5bbb4",
    "details": {
      "sha": "dd8bdb236378200110ec82202e76f13e5c4f3ef7",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerParallelDexOptimizer.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/Tencent/tinker/blob/e0d6268cce300577bdefe64083c3357783b5bbb4/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerParallelDexOptimizer.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/e0d6268cce300577bdefe64083c3357783b5bbb4/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerParallelDexOptimizer.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerParallelDexOptimizer.java?ref=e0d6268cce300577bdefe64083c3357783b5bbb4",
      "patch": "@@ -175,10 +175,12 @@ private void interpretDex2Oat(String dexFilePath, String oatFilePath) throws IOE\n \n             final List<String> commandAndParams = new ArrayList<>();\n             commandAndParams.add(\"dex2oat\");\n-            commandAndParams.add(\"--runtime-arg\");\n-            commandAndParams.add(\"-classpath\");\n-            commandAndParams.add(\"--runtime-arg\");\n-            commandAndParams.add(\"&\");\n+            if (Build.VERSION.SDK_INT >= 24) {\n+                commandAndParams.add(\"--runtime-arg\");\n+                commandAndParams.add(\"-classpath\");\n+                commandAndParams.add(\"--runtime-arg\");\n+                commandAndParams.add(\"&\");\n+            }\n             commandAndParams.add(\"--dex-file=\" + dexFilePath);\n             commandAndParams.add(\"--oat-file=\" + oatFilePath);\n             commandAndParams.add(\"--instruction-set=\" + targetISA);",
      "parent_sha": "1d1df194e7be7e03df76c8cdebcbf2a4e5656691"
    }
  },
  {
    "oid": "b6762d48fe5142b0c09af3182fea23605dc64b65",
    "message": "[tinker] Try performSecondaryDexOpt for 20 times max first, if failure then try registerDexModule next.",
    "date": "2022-07-22T06:34:38Z",
    "url": "https://github.com/Tencent/tinker/commit/b6762d48fe5142b0c09af3182fea23605dc64b65",
    "details": {
      "sha": "f9d614753731353f24ff6082286b65332672bc00",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java",
      "status": "modified",
      "additions": 19,
      "deletions": 13,
      "changes": 32,
      "blob_url": "https://github.com/Tencent/tinker/blob/b6762d48fe5142b0c09af3182fea23605dc64b65/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/b6762d48fe5142b0c09af3182fea23605dc64b65/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java?ref=b6762d48fe5142b0c09af3182fea23605dc64b65",
      "patch": "@@ -240,10 +240,10 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n             ShareTinkerLog.i(TAG, \"[+] Oat file %s should be valid, skip triggering dexopt.\", oatPath);\n             return;\n         }\n-        for (int i = 0; i < 5; ++i) {\n+        for (int i = 0; i < 20; ++i) {\n             if (ShareTinkerInternals.isNewerOrEqualThanVersion(31, true)\n-            && !\"xiaomi\".equalsIgnoreCase(Build.MANUFACTURER) && !\"redmi\".equalsIgnoreCase(Build.MANUFACTURER)\n-            && !\"oppo\".equalsIgnoreCase(Build.MANUFACTURER) && !\"vivo\".equalsIgnoreCase(Build.MANUFACTURER)) {\n+                    && !\"xiaomi\".equalsIgnoreCase(Build.MANUFACTURER) && !\"redmi\".equalsIgnoreCase(Build.MANUFACTURER)\n+                    && !\"oppo\".equalsIgnoreCase(Build.MANUFACTURER) && !\"vivo\".equalsIgnoreCase(Build.MANUFACTURER)) {\n                 try {\n                     registerDexModule(context, dexPath);\n                     if (SharePatchFileUtil.isLegalFile(oatFile)) {\n@@ -280,20 +280,26 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n                 ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Error.\");\n             }\n             SystemClock.sleep(1000);\n+        }\n+        if (!SharePatchFileUtil.isLegalFile(oatFile)) {\n             if (\"huawei\".equalsIgnoreCase(Build.MANUFACTURER) || \"honor\".equalsIgnoreCase(Build.MANUFACTURER)) {\n-                try {\n-                    registerDexModule(context, dexPath);\n-                    if (SharePatchFileUtil.isLegalFile(oatFile)) {\n-                        break;\n+                for (int i = 0; i < 5; ++i) {\n+                    try {\n+                        registerDexModule(context, dexPath);\n+                        if (SharePatchFileUtil.isLegalFile(oatFile)) {\n+                            break;\n+                        }\n+                    } catch (Throwable thr) {\n+                        ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Error.\");\n                     }\n-                } catch (Throwable thr) {\n-                    ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Error.\");\n+                    SystemClock.sleep(3000);\n+                }\n+                if (!SharePatchFileUtil.isLegalFile(oatFile)) {\n+                    throw new IllegalStateException(\"No odex file was generated after calling registerDexModule\");\n                 }\n+            } else {\n+                throw new IllegalStateException(\"No odex file was generated after calling performDexOptSecondary\");\n             }\n-            SystemClock.sleep(3000);\n-        }\n-        if (!SharePatchFileUtil.isLegalFile(oatFile)) {\n-            throw new IllegalStateException(\"No odex file was generated after calling performDexOptSecondary\");\n         }\n     }\n ",
      "parent_sha": "8617edc3ef65bd37cb7c85bef2f4f6428ec76e69"
    }
  },
  {
    "oid": "263c0e11c9eb9b51a165246ddeb78ea5e09eb300",
    "message": "[tinker] Adjust some logs.",
    "date": "2020-05-10T10:24:03Z",
    "url": "https://github.com/Tencent/tinker/commit/263c0e11c9eb9b51a165246ddeb78ea5e09eb300",
    "details": {
      "sha": "506990095c593b3b5f19cb510917d1033f294251",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/AppInfoChangedBlocker.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/Tencent/tinker/blob/263c0e11c9eb9b51a165246ddeb78ea5e09eb300/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAppInfoChangedBlocker.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/263c0e11c9eb9b51a165246ddeb78ea5e09eb300/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAppInfoChangedBlocker.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAppInfoChangedBlocker.java?ref=263c0e11c9eb9b51a165246ddeb78ea5e09eb300",
      "patch": "@@ -29,6 +29,7 @@ public final class AppInfoChangedBlocker {\n \n     public static boolean tryStart(Application app) {\n         if (Build.VERSION.SDK_INT < 26) {\n+            Log.i(TAG, \"tryStart: SDK_INT is less than 26, skip rest logic.\");\n             return true;\n         }\n         try {\n@@ -88,8 +89,6 @@ public boolean handleMessage(Message msg) {\n         }\n \n         private boolean hackMessage(Message msg) {\n-            Log.i(TAG, \"hackmsg: \" + msg.what);\n-\n             if (msg.what == APPLICATION_INFO_CHANGED) {\n                 // We are generally in the background this moment(signal trigger is\n                 // in front of user), and the signal was going to relaunch all our",
      "parent_sha": "7520dfa10772d4acbcdb0bd68d9df92cfad8f4e1"
    }
  },
  {
    "oid": "641ee7c552592721f4011cc305dc7819506d0f85",
    "message": "[tinker] print details if any new components was found in manifest of new package.",
    "date": "2018-06-07T04:39:43Z",
    "url": "https://github.com/Tencent/tinker/commit/641ee7c552592721f4011cc305dc7819506d0f85",
    "details": {
      "sha": "ce6aaea40d71ed6fa7cc2e44fcfdb27898c4ad16",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ManifestDecoder.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/Tencent/tinker/blob/641ee7c552592721f4011cc305dc7819506d0f85/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FManifestDecoder.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/641ee7c552592721f4011cc305dc7819506d0f85/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FManifestDecoder.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FManifestDecoder.java?ref=641ee7c552592721f4011cc305dc7819506d0f85",
      "patch": "@@ -108,7 +108,12 @@ public boolean patch(File oldFile, File newFile) throws IOException, TinkerPatch\n \n             if (!config.mSupportHotplugComponent && hasIncComponent) {\n                 announceWarningOrException(\"manifest was changed, while hot plug component support mode is disabled. \"\n-                        + \"Such changes will not take effect.\");\n+                        + \"Such changes will not take effect, related components: \\n\"\n+                        + \" activity: \" + incActivities + \"\\n\"\n+                        + \" service: \" + incServices + \"\\n\"\n+                        + \" receiver: \" + incReceivers + \"\\n\"\n+                        + \" provider: \" + incProviders + \"\\n\"\n+                );\n             }\n \n             // generate increment manifest.",
      "parent_sha": "cc00565ccba7f532b764fcc6fe5a78c5905f7fac"
    }
  },
  {
    "oid": "e667919c848b73420251ae3373d701c471db5021",
    "message": "[tinker] Temporary fix compile failure when all loader classes were moved out of primary dex.",
    "date": "2023-11-28T14:07:47Z",
    "url": "https://github.com/Tencent/tinker/commit/e667919c848b73420251ae3373d701c471db5021",
    "details": {
      "sha": "baabb613cc300582d6a44aeee3a006eac27f4458",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/util/ExcludedClassModifiedChecker.java",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/Tencent/tinker/blob/e667919c848b73420251ae3373d701c471db5021/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Futil%2FExcludedClassModifiedChecker.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/e667919c848b73420251ae3373d701c471db5021/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Futil%2FExcludedClassModifiedChecker.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Futil%2FExcludedClassModifiedChecker.java?ref=e667919c848b73420251ae3373d701c471db5021",
      "patch": "@@ -181,7 +181,13 @@ public void checkIfExcludedClassWasModifiedInNewDex(File oldFile, File newFile)\n                     throw new TinkerPatchException(\"new primary dex is missing.\");\n                 }\n                 case STMCODE_ERROR_LOADER_CLASS_NOT_IN_PRIMARY_OLD_DEX: {\n-                    throw new TinkerPatchException(\"all loader classes don't appear in old primary dex.\");\n+                    final String msg = \"all loader classes don't appear in old primary dex.\";\n+                    if (config.mAllowLoaderInAnyDex) {\n+                        Logger.d(msg);\n+                        return;\n+                    } else {\n+                        throw new TinkerPatchException(msg);\n+                    }\n                 }\n                 case STMCODE_ERROR_LOADER_CLASS_IN_PRIMARY_DEX_MISMATCH: {\n                     throw new TinkerPatchException(",
      "parent_sha": "4e459a6a5d50fea35a08caaaed5c183098ecf6cd"
    }
  },
  {
    "oid": "3d086c76af44bf8409829474afc265e49583eaf6",
    "message": "[tinker] Fix build failure.",
    "date": "2019-12-19T07:07:32Z",
    "url": "https://github.com/Tencent/tinker/commit/3d086c76af44bf8409829474afc265e49583eaf6",
    "details": {
      "sha": "69b5b75fdd6f4c565c61cf1e2beab9c0e2df22cc",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/Tencent/tinker/blob/3d086c76af44bf8409829474afc265e49583eaf6/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FDexDiffDecoder.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/3d086c76af44bf8409829474afc265e49583eaf6/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FDexDiffDecoder.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fdecoder%2FDexDiffDecoder.java?ref=3d086c76af44bf8409829474afc265e49583eaf6",
      "patch": "@@ -38,8 +38,8 @@\n import com.tencent.tinker.commons.dexpatcher.DexPatchApplier;\n import com.tencent.tinker.commons.dexpatcher.DexPatcherLogger.IDexPatcherLogger;\n \n-import org.jf.dexlib2.Opcodes;\n import org.jf.dexlib2.DexFileFactory;\n+import org.jf.dexlib2.Opcodes;\n import org.jf.dexlib2.ReferenceType;\n import org.jf.dexlib2.builder.BuilderMutableMethodImplementation;\n import org.jf.dexlib2.dexbacked.DexBackedDexFile;\n@@ -159,7 +159,7 @@ protected String getRelativeDexName(File oldDexFile, File newDexFile) {\n \n     private void collectClassesInDex(File dexFile) throws IOException {\n         Logger.d(\"Collect class descriptors in \" + dexFile.getName());\n-        final DexFile dex = DexFileFactory.loadDexFile(dexFile, 29);\n+        final DexFile dex = DexFileFactory.loadDexFile(dexFile, Opcodes.forApi(29));\n         for (org.jf.dexlib2.iface.ClassDef classDef : dex.getClasses()) {\n             descOfClassesInApk.add(classDef.getType());\n         }\n@@ -267,7 +267,7 @@ private void checkIfLoaderClassesReferToNonLoaderClasses()\n         for (File dexFile : oldDexFiles) {\n             Logger.d(\"Check if loader classes in \" + dexFile.getName()\n                     + \" refer to any classes that is not in loader class patterns.\");\n-            final DexFile dex = DexFileFactory.loadDexFile(dexFile, 29);\n+            final DexFile dex = DexFileFactory.loadDexFile(dexFile, Opcodes.forApi(29));\n             for (org.jf.dexlib2.iface.ClassDef classDef : dex.getClasses()) {\n                 final String currClassDesc = classDef.getType();\n                 if (!Utils.isStringMatchesPatterns(currClassDesc, loaderClassPatterns)) {",
      "parent_sha": "677827b02c2228a16895e21b06f29fe502f3190b"
    }
  },
  {
    "oid": "d9f8574368e2f85870e33e37b055796b1714985b",
    "message": "[tinker] bugfix: failure to do dex2oat after retry on VIVO devices.",
    "date": "2018-05-15T09:47:17Z",
    "url": "https://github.com/Tencent/tinker/commit/d9f8574368e2f85870e33e37b055796b1714985b",
    "details": {
      "sha": "8600b1edda6dc8928bb0b3fff42e2d6a60cc74e8",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/SharePatchFileUtil.java",
      "status": "modified",
      "additions": 21,
      "deletions": 15,
      "changes": 36,
      "blob_url": "https://github.com/Tencent/tinker/blob/d9f8574368e2f85870e33e37b055796b1714985b/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FSharePatchFileUtil.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/d9f8574368e2f85870e33e37b055796b1714985b/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FSharePatchFileUtil.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FSharePatchFileUtil.java?ref=d9f8574368e2f85870e33e37b055796b1714985b",
      "patch": "@@ -18,7 +18,6 @@\n \n import android.annotation.SuppressLint;\n import android.content.Context;\n-import android.content.pm.ApplicationInfo;\n import android.os.Build;\n import android.util.Log;\n \n@@ -45,29 +44,36 @@ public class SharePatchFileUtil {\n \n     private static char[] hexDigits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n \n+    private static File createPrivateDirWithRightPrivilegeFlags(Context context, String name) {\n+        final File res = context.getDir(name, Context.MODE_PRIVATE);\n+        final File expectedNameFile = new File(res.getParentFile(), name);\n+        res.renameTo(expectedNameFile);\n+        return expectedNameFile;\n+    }\n+\n     /**\n      * data dir, such as /data/data/tinker.sample.android/tinker\n      * @param context\n      * @return\n      */\n     public static File getPatchDirectory(Context context) {\n-        ApplicationInfo applicationInfo = context.getApplicationInfo();\n-        if (applicationInfo == null) {\n-            // Looks like running on a test Context, so just return without patching.\n-            return null;\n-        }\n-\n-        return new File(applicationInfo.dataDir, ShareConstants.PATCH_DIRECTORY_NAME);\n+        // Directory created by File class only has 600 privilege, which causes dex2oat procedure\n+        // fall into failure on some devices (e.g. VIVO)\n+        //\n+        // Although we can use File.setReadable() and File.setWritable() to fix this problem,\n+        // since these methods can not change the 'group' privilege mask standalone, (instead,\n+        // they change either the 'owner' privilege mask only or all privilege mask together.)\n+        // for security reason we use context.getDir to create the tinker root directory.\n+        //\n+        // Notice: Name of directory created by context.getDir() is started with 'app_'.\n+        //\n+        //return new File(applicationInfo.dataDir, ShareConstants.PATCH_DIRECTORY_NAME);\n+\n+        return createPrivateDirWithRightPrivilegeFlags(context, ShareConstants.PATCH_DIRECTORY_NAME);\n     }\n \n     public static File getPatchTempDirectory(Context context) {\n-        ApplicationInfo applicationInfo = context.getApplicationInfo();\n-        if (applicationInfo == null) {\n-            // Looks like running on a test Context, so just return without patching.\n-            return null;\n-        }\n-\n-        return new File(applicationInfo.dataDir, ShareConstants.PATCH_TEMP_DIRECTORY_NAME);\n+        return createPrivateDirWithRightPrivilegeFlags(context, ShareConstants.PATCH_TEMP_DIRECTORY_NAME);\n     }\n \n     public static File getPatchLastCrashFile(Context context) {",
      "parent_sha": "f4e080c78d8e9b3109878f257cb7165b7eaeabdb"
    }
  },
  {
    "oid": "826ce27bc1622e1915eb86996272da236d8f4478",
    "message": "[tinker] Avoid NPE by code refactor.",
    "date": "2019-05-10T03:03:31Z",
    "url": "https://github.com/Tencent/tinker/commit/826ce27bc1622e1915eb86996272da236d8f4478",
    "details": {
      "sha": "1d53c6e4bccbd819129019e9f6db465c06d7ebac",
      "filename": "tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/listener/DefaultPatchListener.java",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/Tencent/tinker/blob/826ce27bc1622e1915eb86996272da236d8f4478/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Flistener%2FDefaultPatchListener.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/826ce27bc1622e1915eb86996272da236d8f4478/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Flistener%2FDefaultPatchListener.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Flistener%2FDefaultPatchListener.java?ref=826ce27bc1622e1915eb86996272da236d8f4478",
      "patch": "@@ -49,10 +49,7 @@ public DefaultPatchListener(Context context) {\n      */\n     @Override\n     public int onPatchReceived(String path) {\n-        File patchFile = new File(path);\n-\n-        int returnCode = patchCheck(path, SharePatchFileUtil.getMD5(patchFile));\n-\n+        int returnCode = patchCheck(path);\n         if (returnCode == ShareConstants.ERROR_PATCH_OK) {\n             TinkerPatchService.runPatchService(context, path);\n         } else {\n@@ -61,15 +58,20 @@ public int onPatchReceived(String path) {\n         return returnCode;\n     }\n \n-    protected int patchCheck(String path, String patchMd5) {\n+    protected int patchCheck(String path) {\n         Tinker manager = Tinker.with(context);\n         //check SharePreferences also\n         if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n             return ShareConstants.ERROR_PATCH_DISABLE;\n         }\n-        File file = new File(path);\n \n-        if (!SharePatchFileUtil.isLegalFile(file)) {\n+        final File patchFile = new File(path);\n+        if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n+            return ShareConstants.ERROR_PATCH_NOTEXIST;\n+        }\n+\n+        final String patchMd5 = SharePatchFileUtil.getMD5(patchFile);\n+        if (patchMd5 == null || patchMd5.isEmpty()) {\n             return ShareConstants.ERROR_PATCH_NOTEXIST;\n         }\n ",
      "parent_sha": "89f0ff53074c049f8105eb468de32cfa9e2741c5"
    }
  },
  {
    "oid": "f3e2f5dff4b3467f856a5a6088293d32ff86c2b1",
    "message": "[tinker] Bugfix: Avoid fallback to interpret mode when clone DexPathList.",
    "date": "2017-05-23T04:24:46Z",
    "url": "https://github.com/Tencent/tinker/commit/f3e2f5dff4b3467f856a5a6088293d32ff86c2b1",
    "details": {
      "sha": "c8bb5cdcd53abd99d9057d9c5b583fb1d8cb9b27",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/AndroidNClassLoader.java",
      "status": "modified",
      "additions": 4,
      "deletions": 9,
      "changes": 13,
      "blob_url": "https://github.com/Tencent/tinker/blob/f3e2f5dff4b3467f856a5a6088293d32ff86c2b1/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/f3e2f5dff4b3467f856a5a6088293d32ff86c2b1/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FAndroidNClassLoader.java?ref=f3e2f5dff4b3467f856a5a6088293d32ff86c2b1",
      "patch": "@@ -51,9 +51,8 @@ private AndroidNClassLoader(String dexPath, PathClassLoader parent, Application\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private static Object cloneDexPathList(Object originalDexPathList) throws Exception {\n+    private static Object recreateDexPathList(Object originalDexPathList, ClassLoader newDefiningContext) throws Exception {\n         final Field definingContextField = ShareReflectUtil.findField(originalDexPathList, \"definingContext\");\n-        final Object definingContext = definingContextField.get(originalDexPathList);\n         final Field dexElementsField = ShareReflectUtil.findField(originalDexPathList, \"dexElements\");\n         final Object[] dexElements = (Object[]) dexElementsField.get(originalDexPathList);\n         final Field nativeLibraryDirectoriesField = ShareReflectUtil.findField(originalDexPathList, \"nativeLibraryDirectories\");\n@@ -95,7 +94,7 @@ private static Object cloneDexPathList(Object originalDexPathList) throws Except\n         final String libraryPath = libraryPathBuilder.toString();\n \n         final Constructor<?> dexPathListConstructor = ShareReflectUtil.findConstructor(originalDexPathList, ClassLoader.class, String.class, String.class, File.class);\n-        return dexPathListConstructor.newInstance(definingContext, dexPath, libraryPath, null);\n+        return dexPathListConstructor.newInstance(newDefiningContext, dexPath, libraryPath, null);\n     }\n \n     private static AndroidNClassLoader createAndroidNClassLoader(PathClassLoader originalClassLoader, Application application) throws Exception {\n@@ -108,13 +107,9 @@ private static AndroidNClassLoader createAndroidNClassLoader(PathClassLoader ori\n         // dexPathList in original classloader so that after the newly loaded base dex was bound to\n         // AndroidNClassLoader we can still load class in base dex from original classloader.\n \n-        Object newPathList = cloneDexPathList(originPathList);\n+        Object newPathList = recreateDexPathList(originPathList, androidNClassLoader);\n \n-        //should reflect definingContext also\n-        final Field definingContextField = ShareReflectUtil.findField(newPathList, \"definingContext\");\n-        definingContextField.set(newPathList, androidNClassLoader);\n-\n-        //just use PathClassloader's pathList\n+        // Update new classloader's pathList.\n         pathListField.set(androidNClassLoader, newPathList);\n \n         return androidNClassLoader;",
      "parent_sha": "74a2ae06d5016fa9136bde58354e55af4a92859f"
    }
  },
  {
    "oid": "0ed051c421ee1e2405215b9c89ad2e7b314f2dd6",
    "message": "Correct spelling mistake (#232)\n\nCorrect spelling mistake",
    "date": "2016-12-06T09:06:18Z",
    "url": "https://github.com/Tencent/tinker/commit/0ed051c421ee1e2405215b9c89ad2e7b314f2dd6",
    "details": {
      "sha": "df0b1b488e8d8665e0d88c50a3b56ed3673d1538",
      "filename": "tinker-sample-android/app/src/main/java/tinker/sample/android/reporter/SampleTinkerReport.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/Tencent/tinker/blob/0ed051c421ee1e2405215b9c89ad2e7b314f2dd6/tinker-sample-android%2Fapp%2Fsrc%2Fmain%2Fjava%2Ftinker%2Fsample%2Fandroid%2Freporter%2FSampleTinkerReport.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/0ed051c421ee1e2405215b9c89ad2e7b314f2dd6/tinker-sample-android%2Fapp%2Fsrc%2Fmain%2Fjava%2Ftinker%2Fsample%2Fandroid%2Freporter%2FSampleTinkerReport.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-sample-android%2Fapp%2Fsrc%2Fmain%2Fjava%2Ftinker%2Fsample%2Fandroid%2Freporter%2FSampleTinkerReport.java?ref=0ed051c421ee1e2405215b9c89ad2e7b314f2dd6",
      "patch": "@@ -103,7 +103,7 @@ public class SampleTinkerReport {\n     public static final int KEY_LOADED_EXCEPTION_DEX            = 252;\n     public static final int KEY_LOADED_EXCEPTION_DEX_CHECK      = 253;\n     public static final int KEY_LOADED_EXCEPTION_RESOURCE       = 254;\n-    public static final int KEY_LOADED_EXCEPTION_RESOURCE_CEHCK = 255;\n+    public static final int KEY_LOADED_EXCEPTION_RESOURCE_CHECK = 255;\n \n \n     public static final int KEY_LOADED_MISMATCH_DEX       = 300;\n@@ -328,7 +328,7 @@ public static void onLoadException(Throwable throwable, int errorCode) {\n                 break;\n             case ShareConstants.ERROR_LOAD_EXCEPTION_RESOURCE:\n                 if (throwable.getMessage().contains(ShareConstants.CHECK_RES_INSTALL_FAIL)) {\n-                    reporter.onReport(KEY_LOADED_EXCEPTION_RESOURCE_CEHCK);\n+                    reporter.onReport(KEY_LOADED_EXCEPTION_RESOURCE_CHECK);\n                     isCheckFail = true;\n                     TinkerLog.e(TAG, \"tinker res check fail:\" + throwable.getMessage());\n                 } else {",
      "parent_sha": "d6f911cd0b899a7b972b6071d8eb78306f5aa0f8"
    }
  },
  {
    "oid": "2c9539bf2a4f770ead5124edcfa37b191c878c3d",
    "message": "change patchinfo error log to warning",
    "date": "2017-05-10T06:16:55Z",
    "url": "https://github.com/Tencent/tinker/commit/2c9539bf2a4f770ead5124edcfa37b191c878c3d",
    "details": {
      "sha": "be6dc661dd7a946ec90fcb98f652dae28da09f41",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/SharePatchInfo.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/Tencent/tinker/blob/2c9539bf2a4f770ead5124edcfa37b191c878c3d/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FSharePatchInfo.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/2c9539bf2a4f770ead5124edcfa37b191c878c3d/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FSharePatchInfo.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2Fshareutil%2FSharePatchInfo.java?ref=2c9539bf2a4f770ead5124edcfa37b191c878c3d",
      "patch": "@@ -37,7 +37,7 @@ public class SharePatchInfo {\n     public static final String FINGER_PRINT         = \"print\";\n     public static final String OAT_DIR              = \"dir\";\n     public static final String DEFAULT_DIR   = ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;\n-    private static final String TAG = \"PatchInfo\";\n+    private static final String TAG = \"Tinker.PatchInfo\";\n     public String oldVersion;\n     public String newVersion;\n     public String fingerPrint;\n@@ -73,7 +73,7 @@ public static SharePatchInfo readAndCheckPropertyWithLock(File pathInfoFile, Fil\n                     fileLock.close();\n                 }\n             } catch (IOException e) {\n-                Log.i(TAG, \"releaseInfoLock error\", e);\n+                Log.w(TAG, \"releaseInfoLock error\", e);\n             }\n         }\n \n@@ -129,7 +129,7 @@ private static SharePatchInfo readAndCheckProperty(File pathInfoFile) {\n                 oatDIr = properties.getProperty(OAT_DIR);\n             } catch (IOException e) {\n //                e.printStackTrace();\n-                Log.e(TAG, \"read property failed, e:\" + e);\n+                Log.w(TAG, \"read property failed, e:\" + e);\n             } finally {\n                 SharePatchFileUtil.closeQuietly(inputStream);\n             }\n@@ -199,7 +199,8 @@ private static boolean rewritePatchInfoFile(File pathInfoFile, SharePatchInfo in\n                 String comment = \"from old version:\" + info.oldVersion + \" to new version:\" + info.newVersion;\n                 newProperties.store(outputStream, comment);\n             } catch (Exception e) {\n-                e.printStackTrace();\n+//                e.printStackTrace();\n+                Log.w(TAG, \"write property failed, e:\" + e);\n             } finally {\n                 SharePatchFileUtil.closeQuietly(outputStream);\n             }",
      "parent_sha": "5f886c93ea845742d0b5d2bba8b510d743888ff2"
    }
  },
  {
    "oid": "5cb5dd0324bcb5aea4e607e2e62f81a4a8d77303",
    "message": "1. fix sample compile error",
    "date": "2017-01-05T13:08:40Z",
    "url": "https://github.com/Tencent/tinker/commit/5cb5dd0324bcb5aea4e607e2e62f81a4a8d77303",
    "details": {
      "sha": "6bc8122b458ed8d37b3dfa9e0f2e7f8edc795359",
      "filename": "tinker-sample-android/app/src/main/java/tinker/sample/android/app/MainActivity.java",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/Tencent/tinker/blob/5cb5dd0324bcb5aea4e607e2e62f81a4a8d77303/tinker-sample-android%2Fapp%2Fsrc%2Fmain%2Fjava%2Ftinker%2Fsample%2Fandroid%2Fapp%2FMainActivity.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/5cb5dd0324bcb5aea4e607e2e62f81a4a8d77303/tinker-sample-android%2Fapp%2Fsrc%2Fmain%2Fjava%2Ftinker%2Fsample%2Fandroid%2Fapp%2FMainActivity.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-sample-android%2Fapp%2Fsrc%2Fmain%2Fjava%2Ftinker%2Fsample%2Fandroid%2Fapp%2FMainActivity.java?ref=5cb5dd0324bcb5aea4e607e2e62f81a4a8d77303",
      "patch": "@@ -65,9 +65,16 @@ public void onClick(View v) {\n         loadLibraryButton.setOnClickListener(new View.OnClickListener() {\n             @Override\n             public void onClick(View v) {\n-                //for lib/armeabi, just use TinkerInstaller.loadLibrary\n-                TinkerInstaller.loadArmLibrary(getApplicationContext(), \"stlport_shared\");\n+                // #method 1, hack classloader library path\n+                TinkerLoadLibrary.installNavitveLibraryABI(getApplicationContext(), \"armeabi\");\n+                System.loadLibrary(\"stlport_shared\");\n+\n+                // #method 2, for lib/armeabi, just use TinkerInstaller.loadLibrary\n+//                TinkerLoadLibrary.loadArmLibrary(getApplicationContext(), \"stlport_shared\");\n+\n+                // #method 3, load tinker patch library directly\n //                TinkerInstaller.loadLibraryFromTinker(getApplicationContext(), \"assets/x86\", \"stlport_shared\");\n+\n             }\n         });\n ",
      "parent_sha": "3fdaeadd19c890bae9478e11bcd51459612b17f4"
    }
  },
  {
    "oid": "5dd22fd5fc96f83dcd7a573e114bbdfce97dbba3",
    "message": "[tinker] Avoid crash on api 27 when app's targetSDK is set to 27.",
    "date": "2018-02-08T11:41:26Z",
    "url": "https://github.com/Tencent/tinker/commit/5dd22fd5fc96f83dcd7a573e114bbdfce97dbba3",
    "details": {
      "sha": "972212dee51b4dfab95c8873f972c360834f717b",
      "filename": "tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/Tencent/tinker/blob/5dd22fd5fc96f83dcd7a573e114bbdfce97dbba3/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fservice%2FTinkerPatchService.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/5dd22fd5fc96f83dcd7a573e114bbdfce97dbba3/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fservice%2FTinkerPatchService.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Flib%2Fservice%2FTinkerPatchService.java?ref=5dd22fd5fc96f83dcd7a573e114bbdfce97dbba3",
      "patch": "@@ -21,6 +21,7 @@\n import android.app.Service;\n import android.content.Context;\n import android.content.Intent;\n+import android.content.pm.ApplicationInfo;\n import android.os.Build;\n import android.os.IBinder;\n import android.os.SystemClock;\n@@ -151,6 +152,15 @@ private void increasingPriority() {\n //            TinkerLog.i(TAG, \"for Android 7.1, we just ignore increasingPriority job\");\n //            return;\n //        }\n+        if (Build.VERSION.SDK_INT >= 27) {\n+            final ApplicationInfo appInfo = getApplicationInfo();\n+            if (appInfo == null || appInfo.targetSdkVersion >= 27) {\n+                TinkerLog.i(TAG, \"for Android O MR_1, we just ignore increasingPriority \"\n+                        + \"job when app's target sdk >= 27 to avoid crash.\");\n+                return;\n+            }\n+        }\n+\n         TinkerLog.i(TAG, \"try to increase patch process priority\");\n         try {\n             Notification notification = new Notification();\n@@ -194,6 +204,5 @@ public IBinder onBind(Intent intent) {\n             return null;\n         }\n     }\n-\n }\n ",
      "parent_sha": "c4f1b007dda3da8b627a2199c35f4e1182209497"
    }
  },
  {
    "oid": "f9112cf518f38cc14fa5ad0f7e336f0d3209c90c",
    "message": "[tinker] Change log wordings.",
    "date": "2021-12-07T08:45:14Z",
    "url": "https://github.com/Tencent/tinker/commit/f9112cf518f38cc14fa5ad0f7e336f0d3209c90c",
    "details": {
      "sha": "2a562be6666cbd1bbb7460f21d3bcd98dfa1d864",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/Tencent/tinker/blob/f9112cf518f38cc14fa5ad0f7e336f0d3209c90c/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/f9112cf518f38cc14fa5ad0f7e336f0d3209c90c/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java?ref=f9112cf518f38cc14fa5ad0f7e336f0d3209c90c",
      "patch": "@@ -48,6 +48,7 @@\n import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n@@ -386,7 +387,7 @@ private static void executePMSShellCommand(Context context, String[] args) throw\n         Parcel reply = null;\n         long lastIdentity = Binder.clearCallingIdentity();\n         try {\n-            ShareTinkerLog.i(TAG, \"[+] Start trigger secondary dexopt.\");\n+            ShareTinkerLog.i(TAG, \"[+] Execute shell cmd, args: %s\", Arrays.toString(args));\n             data = Parcel.obtain();\n             reply = Parcel.obtain();\n             data.writeFileDescriptor(FileDescriptor.in);\n@@ -397,9 +398,9 @@ private static void executePMSShellCommand(Context context, String[] args) throw\n             sEmptyResultReceiver.writeToParcel(data, 0);\n             pmsBinderProxy.transact(SHELL_COMMAND_TRANSACTION, data, reply, 0);\n             reply.readException();\n-            ShareTinkerLog.i(TAG, \"[+] Secondary dexopt done.\");\n+            ShareTinkerLog.i(TAG, \"[+] Execute shell cmd done.\");\n         } catch (Throwable thr) {\n-            throw new IllegalStateException(\"Failure on triggering secondary dexopt\", thr);\n+            throw new IllegalStateException(\"Failure on executing shell cmd.\", thr);\n         } finally {\n             if (reply != null) {\n                 reply.recycle();",
      "parent_sha": "a2afaca6e54b11abde06a02b7e97b1b383398eab"
    }
  },
  {
    "oid": "853bb9e3d28beb64696786884638530dd8efb65d",
    "message": "[tinker] Bugfix: do the Miui resource fixing tricks on all systems.",
    "date": "2017-01-13T10:03:46Z",
    "url": "https://github.com/Tencent/tinker/commit/853bb9e3d28beb64696786884638530dd8efb65d",
    "details": {
      "sha": "23a7289c1c1682f9abe38dd2f5ff2b7dbd51dc17",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/Tencent/tinker/blob/853bb9e3d28beb64696786884638530dd8efb65d/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourcePatcher.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/853bb9e3d28beb64696786884638530dd8efb65d/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourcePatcher.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourcePatcher.java?ref=853bb9e3d28beb64696786884638530dd8efb65d",
      "patch": "@@ -233,9 +233,11 @@ public static void monkeyPatchExistingResources(Context context, String external\n      * MiuiResource change TypedArray to MiuiTypedArray, but it get string block from offset instead of assetManager\n      */\n     private static void fixMiuiTypedArrayIssue(Resources resources) {\n-        if (!isMiuiSystem) {\n-            return;\n-        }\n+        // Perform this trick not only in Miui system since we can't predict if any other\n+        // manufacturer would do the same modification to Android.\n+//        if (!isMiuiSystem) {\n+//            return;\n+//        }\n         Log.w(TAG, \"Miui system found, try to clear MiuiTypedArray cache!\");\n         // Clear typedArray cache.\n         try {",
      "parent_sha": "8cd5282bc399d96836a43ae164af04537c11cde6"
    }
  },
  {
    "oid": "6b33390a2ee9fac23bdde1ccb55ae71538f94fa8",
    "message": "[tinker] Add oat exist marker logic and do registerDexModule after performSecondaryDexOpt for HW and Honor devices.",
    "date": "2021-12-03T10:05:39Z",
    "url": "https://github.com/Tencent/tinker/commit/6b33390a2ee9fac23bdde1ccb55ae71538f94fa8",
    "details": {
      "sha": "21c0e72885d4072c42359bc6a8c429fa73e9957d",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java",
      "status": "modified",
      "additions": 56,
      "deletions": 15,
      "changes": 71,
      "blob_url": "https://github.com/Tencent/tinker/blob/6b33390a2ee9fac23bdde1ccb55ae71538f94fa8/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/6b33390a2ee9fac23bdde1ccb55ae71538f94fa8/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerDexOptimizer.java?ref=6b33390a2ee9fac23bdde1ccb55ae71538f94fa8",
      "patch": "@@ -197,18 +197,20 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n \n         try {\n             final File oatFile = new File(oatPath);\n-            if (oatFile.exists()) {\n-                ShareTinkerLog.i(TAG, \"[+] Remove existed oat file: %s\", oatPath);\n-                oatFile.delete();\n+            final File oatFinishedMarkerFile = getOatFinishedMarkerFile(dexPath);\n+            if (!oatFile.exists()) {\n+                if (oatFinishedMarkerFile.exists()) {\n+                    // oat file does not exist, remove corresponding marker file.\n+                    oatFinishedMarkerFile.delete();\n+                }\n             } else {\n-                try {\n-                    final File oatDir = oatFile.getParentFile();\n-                    if (!oatDir.exists()) {\n-                        oatDir.mkdirs();\n-                    }\n-                    oatFile.createNewFile();\n-                } catch (Throwable thr) {\n-                    ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to pre-create oat file.\");\n+                if (!oatFinishedMarkerFile.exists()) {\n+                    // Although oat file exists, but marker file is not found. Remove the oat file\n+                    // and trigger dex2oat again.\n+                    oatFile.delete();\n+                } else {\n+                    ShareTinkerLog.i(TAG, \"[+] Oat file %s should be valid, skip triggering dexopt.\", oatPath);\n+                    return;\n                 }\n             }\n             int waitTimes = 0;\n@@ -218,6 +220,15 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n                 } catch (Throwable thr) {\n                     ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call reconcileSecondaryDexFiles.\");\n                 }\n+                try {\n+                    final File oatDir = oatFile.getParentFile();\n+                    if (!oatDir.exists()) {\n+                        oatDir.mkdirs();\n+                    }\n+                    oatFile.createNewFile();\n+                } catch (Throwable thr) {\n+                    ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to pre-create oat file.\");\n+                }\n                 if (ShareTinkerInternals.isNewerOrEqualThanVersion(31 /* Android S */, true)) {\n                     // registerDexModule will force classloader context change into VariableClassLoaderContext,\n                     // which makes ART skip caching class verification info on Android Q and R. The running\n@@ -227,8 +238,7 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n                     } catch (Throwable thr) {\n                         ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call registerDexModule.\");\n                     }\n-                    if (oatFile.exists()) {\n-                        ShareTinkerLog.i(TAG, \"[+] Dexopt was triggered by registerDexModule successfully.\");\n+                    if (checkAndMarkIfOatExists(oatFile, oatFinishedMarkerFile, \"registerDexModule\")) {\n                         return;\n                     }\n                 }\n@@ -237,10 +247,21 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n                 } catch (Throwable thr) {\n                     ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call performDexOptSecondary.\");\n                 }\n-                if (oatFile.exists()) {\n-                    ShareTinkerLog.i(TAG, \"[+] Dexopt was triggered by performDexOptSecondary successfully.\");\n+                if (checkAndMarkIfOatExists(oatFile, oatFinishedMarkerFile, \"performDexOptSecondary\")) {\n                     return;\n                 }\n+                if (\"huawei\".equalsIgnoreCase(Build.MANUFACTURER) || \"honor\".equalsIgnoreCase(Build.MANUFACTURER)) {\n+                    // Some HW devices still need to call registerDexModule to generate odex for patched\n+                    // dex.\n+                    try {\n+                        registerDexModule(context, dexPath);\n+                    } catch (Throwable thr) {\n+                        ShareTinkerLog.printErrStackTrace(TAG, thr, \"[-] Fail to call registerDexModule.\");\n+                    }\n+                    if (checkAndMarkIfOatExists(oatFile, oatFinishedMarkerFile, \"registerDexModule for hw dev\")) {\n+                        return;\n+                    }\n+                }\n                 if (waitTimes >= 3) {\n                     throw new IllegalStateException(\"Dexopt was triggered, but no odex file was generated.\");\n                 }\n@@ -254,6 +275,26 @@ private static void triggerPMDexOptOnDemand(Context context, String dexPath, Str\n         }\n     }\n \n+    private static File getOatFinishedMarkerFile(String dexPath) {\n+        return new File(dexPath + \".oat_fine\");\n+    }\n+\n+    private static boolean checkAndMarkIfOatExists(File oatFile, File markerFile, String stageForLog) {\n+        if (oatFile.exists()) {\n+            ShareTinkerLog.i(TAG, \"[+] Oat file %s is found after %s\", oatFile.getPath(), stageForLog);\n+            try {\n+                markerFile.createNewFile();\n+            } catch (Throwable thr) {\n+                ShareTinkerLog.printErrStackTrace(TAG, thr,\n+                        \"[-] Fail to create marker file %s after %s.\", markerFile.getPath(), stageForLog);\n+            }\n+            return true;\n+        } else {\n+            ShareTinkerLog.e(TAG, \"[-] Oat file %s does not exist after %s.\", oatFile.getPath(), stageForLog);\n+            return false;\n+        }\n+    }\n+\n     private static void registerDexModule(Context context, String dexPath) throws IllegalStateException {\n         final PackageManager synchronizedPM = getSynchronizedPackageManager(context);\n         try {",
      "parent_sha": "401ba1b1732f87903a825908c8425ea8175b499e"
    }
  },
  {
    "oid": "b40293ff3d58e5659af6c306dede9d1a3dc0c0d2",
    "message": "[tinker] FIX: some compiler may generate catch handler block out of order, which cause our class comparator find unexpected changes.",
    "date": "2020-06-11T13:04:20Z",
    "url": "https://github.com/Tencent/tinker/commit/b40293ff3d58e5659af6c306dede9d1a3dc0c0d2",
    "details": {
      "sha": "bc940cdc16643cbb7d8fbf6dc26c7c4abc957323",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/util/DexClassesComparator.java",
      "status": "modified",
      "additions": 32,
      "deletions": 43,
      "changes": 75,
      "blob_url": "https://github.com/Tencent/tinker/blob/b40293ff3d58e5659af6c306dede9d1a3dc0c0d2/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Futil%2FDexClassesComparator.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/b40293ff3d58e5659af6c306dede9d1a3dc0c0d2/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Futil%2FDexClassesComparator.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Futil%2FDexClassesComparator.java?ref=b40293ff3d58e5659af6c306dede9d1a3dc0c0d2",
      "patch": "@@ -1197,13 +1197,7 @@ protected boolean compareMethod(int methodIndex1, int methodIndex2) {\n             return false;\n         }\n \n-        if (!isSameTries(oldDex, newDex, oldCode.tries, newCode.tries, insnComparator)) {\n-            return false;\n-        }\n-\n-        return isSameCatchHandlers(\n-                oldDex, newDex, oldCode.catchHandlers, newCode.catchHandlers, insnComparator\n-        );\n+        return isSameTriesAndCatchHandlers(oldDex, newDex, oldCode.tries, newCode.tries, oldCode.catchHandlers, newCode.catchHandlers, insnComparator);\n     }\n \n     private boolean isSameDebugInfo(\n@@ -1368,11 +1362,13 @@ private boolean isSameDebugInfo(\n         return true;\n     }\n \n-    private boolean isSameTries(\n+    private boolean isSameTriesAndCatchHandlers(\n             Dex oldDex,\n             Dex newDex,\n             Code.Try[] oldTries,\n             Code.Try[] newTries,\n+            Code.CatchHandler[] oldHandlers,\n+            Code.CatchHandler[] newHandlers,\n             InstructionComparator insnComparator\n     ) {\n         if (oldTries.length != newTries.length) {\n@@ -1385,7 +1381,9 @@ private boolean isSameTries(\n             if (oldTry.instructionCount != newTry.instructionCount) {\n                 return false;\n             }\n-            if (oldTry.catchHandlerIndex != newTry.catchHandlerIndex) {\n+            final Code.CatchHandler oldCatchHandler = oldHandlers[oldTry.catchHandlerIndex];\n+            final Code.CatchHandler newCatchHandler = newHandlers[newTry.catchHandlerIndex];\n+            if (!isSameCatchHandler(oldDex, newDex, oldCatchHandler, newCatchHandler, insnComparator)) {\n                 return false;\n             }\n             if (!insnComparator.isSameInstruction(oldTry.startAddress, newTry.startAddress)) {\n@@ -1396,52 +1394,43 @@ private boolean isSameTries(\n         return true;\n     }\n \n-    private boolean isSameCatchHandlers(\n+    private boolean isSameCatchHandler(\n             Dex oldDex,\n             Dex newDex,\n-            Code.CatchHandler[] oldCatchHandlers,\n-            Code.CatchHandler[] newCatchHandlers,\n+            Code.CatchHandler oldCatchHandler,\n+            Code.CatchHandler newCatchHandler,\n             InstructionComparator insnComparator\n     ) {\n-        if (oldCatchHandlers.length != newCatchHandlers.length) {\n+        int oldTypeAddrPairCount = oldCatchHandler.typeIndexes.length;\n+        int newTypeAddrPairCount = newCatchHandler.typeIndexes.length;\n+        if (oldTypeAddrPairCount != newTypeAddrPairCount) {\n             return false;\n         }\n \n-        for (int i = 0; i < oldCatchHandlers.length; ++i) {\n-            Code.CatchHandler oldCatchHandler = oldCatchHandlers[i];\n-            Code.CatchHandler newCatchHandler = newCatchHandlers[i];\n-\n-            int oldTypeAddrPairCount = oldCatchHandler.typeIndexes.length;\n-            int newTypeAddrPairCount = newCatchHandler.typeIndexes.length;\n-            if (oldTypeAddrPairCount != newTypeAddrPairCount) {\n+        if (oldCatchHandler.catchAllAddress != -1 && newCatchHandler.catchAllAddress != -1) {\n+            return insnComparator.isSameInstruction(\n+                    oldCatchHandler.catchAllAddress, newCatchHandler.catchAllAddress\n+            );\n+        } else {\n+            if (!(oldCatchHandler.catchAllAddress == -1 && newCatchHandler.catchAllAddress == -1)) {\n                 return false;\n             }\n+        }\n \n-            if (oldCatchHandler.catchAllAddress != -1 && newCatchHandler.catchAllAddress != -1) {\n-                return insnComparator.isSameInstruction(\n-                        oldCatchHandler.catchAllAddress, newCatchHandler.catchAllAddress\n-                );\n-            } else {\n-                if (!(oldCatchHandler.catchAllAddress == -1 && newCatchHandler.catchAllAddress == -1)) {\n-                    return false;\n-                }\n+        for (int j = 0; j < oldTypeAddrPairCount; ++j) {\n+            if (!isSameClassDesc(\n+                    oldDex,\n+                    newDex,\n+                    oldCatchHandler.typeIndexes[j],\n+                    newCatchHandler.typeIndexes[j]\n+            )) {\n+                return false;\n             }\n \n-            for (int j = 0; j < oldTypeAddrPairCount; ++j) {\n-                if (!isSameClassDesc(\n-                        oldDex,\n-                        newDex,\n-                        oldCatchHandler.typeIndexes[j],\n-                        newCatchHandler.typeIndexes[j]\n-                )) {\n-                    return false;\n-                }\n-\n-                if (!insnComparator.isSameInstruction(\n-                        oldCatchHandler.addresses[j], newCatchHandler.addresses[j]\n-                )) {\n-                    return false;\n-                }\n+            if (!insnComparator.isSameInstruction(\n+                    oldCatchHandler.addresses[j], newCatchHandler.addresses[j]\n+            )) {\n+                return false;\n             }\n         }\n ",
      "parent_sha": "07e413005192f370b7f6520b0bb64da0030171cb"
    }
  },
  {
    "oid": "47379558a60dbb29485e039273acc363b80a253b",
    "message": "[tinker] Bugfix: Get sigalg from keystore by provided alias\ninstead of hardcode.",
    "date": "2016-10-30T16:28:19Z",
    "url": "https://github.com/Tencent/tinker/commit/47379558a60dbb29485e039273acc363b80a253b",
    "details": {
      "sha": "7aeca56b589907a94c70ae74034e19c70ed3352e",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/builder/PatchBuilder.java",
      "status": "modified",
      "additions": 6,
      "deletions": 13,
      "changes": 19,
      "blob_url": "https://github.com/Tencent/tinker/blob/47379558a60dbb29485e039273acc363b80a253b/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fbuilder%2FPatchBuilder.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/47379558a60dbb29485e039273acc363b80a253b/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fbuilder%2FPatchBuilder.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Fbuilder%2FPatchBuilder.java?ref=47379558a60dbb29485e039273acc363b80a253b",
      "patch": "@@ -25,8 +25,9 @@\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n-import java.security.Key;\n import java.security.KeyStore;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n import java.util.ArrayList;\n \n /**\n@@ -87,20 +88,12 @@ private String getSignatureAlgorithm() throws Exception {\n         FileInputStream fileIn = new FileInputStream(config.mSignatureFile);\n         KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n         keyStore.load(fileIn, config.mStorePass.toCharArray());\n-        Key key = keyStore.getKey(config.mStoreAlias, config.mKeyPass.toCharArray());\n-        String keyAlgorithm = key.getAlgorithm();\n-        String signatureAlgorithm;\n-        if (keyAlgorithm.equalsIgnoreCase(\"DSA\")) {\n-            signatureAlgorithm = \"SHA1withDSA\";\n-        } else if (keyAlgorithm.equalsIgnoreCase(\"RSA\")) {\n-            signatureAlgorithm = \"SHA1withRSA\";\n-        } else if (keyAlgorithm.equalsIgnoreCase(\"EC\")) {\n-            signatureAlgorithm = \"SHA1withECDSA\";\n+        Certificate cert = keyStore.getCertificate(config.mStoreAlias);\n+        if (cert instanceof X509Certificate) {\n+            return ((X509Certificate) cert).getSigAlgName();\n         } else {\n-            throw new RuntimeException(\"private key is not a DSA or \"\n-                + \"RSA key\");\n+            throw new RuntimeException(\"Provided certificate is not X.509 certificate.\");\n         }\n-        return signatureAlgorithm;\n     }\n \n     /**",
      "parent_sha": "207c988b065fba9a7ba3f7a175bc033f37aa0542"
    }
  },
  {
    "oid": "a72bb8857e214c8892fcfa64c81ae3104a9fbd62",
    "message": "Add RType navigation",
    "date": "2018-09-11T10:39:58Z",
    "url": "https://github.com/Tencent/tinker/commit/a72bb8857e214c8892fcfa64c81ae3104a9fbd62",
    "details": {
      "sha": "99cd9cee9c1fc7dc61597e9024047e48b6c97a87",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/RDotTxtEntry.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/tinker/blob/a72bb8857e214c8892fcfa64c81ae3104a9fbd62/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Faapt%2FRDotTxtEntry.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/a72bb8857e214c8892fcfa64c81ae3104a9fbd62/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Faapt%2FRDotTxtEntry.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Faapt%2FRDotTxtEntry.java?ref=a72bb8857e214c8892fcfa64c81ae3104a9fbd62",
      "patch": "@@ -116,7 +116,7 @@ public String toString() {\n     // Taken from http://developer.android.com/reference/android/R.html\n     // TRANSITION for api level 19\n     public enum RType {\n-        ANIM, ANIMATOR, ARRAY, ATTR, BOOL, COLOR, DIMEN, DRAWABLE, FONT, FRACTION, ID, INTEGER, INTERPOLATOR, LAYOUT, MENU, MIPMAP, PLURALS, RAW, STRING, STYLE, STYLEABLE, TRANSITION, XML;\n+        ANIM, ANIMATOR, ARRAY, ATTR, BOOL, COLOR, DIMEN, DRAWABLE, FONT, FRACTION, ID, INTEGER, INTERPOLATOR, LAYOUT, MENU, MIPMAP, PLURALS, RAW, STRING, STYLE, STYLEABLE, TRANSITION, XML, NAVIGATION;\n \n         @Override\n         public String toString() {",
      "parent_sha": "c54745f3f9f3a611eb4bc6e5b05438129db35937"
    }
  },
  {
    "oid": "fb7ac266d01ad1368c13f53d96164336639781e7",
    "message": "[tinker] bugfix: failure to package when project contains font resource. #762",
    "date": "2018-05-15T10:06:59Z",
    "url": "https://github.com/Tencent/tinker/commit/fb7ac266d01ad1368c13f53d96164336639781e7",
    "details": {
      "sha": "ee5faefa8170733b02dfaa4e6813dbc015abf451",
      "filename": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/RDotTxtEntry.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/Tencent/tinker/blob/fb7ac266d01ad1368c13f53d96164336639781e7/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Faapt%2FRDotTxtEntry.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/fb7ac266d01ad1368c13f53d96164336639781e7/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Faapt%2FRDotTxtEntry.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-build%2Ftinker-patch-lib%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Fbuild%2Faapt%2FRDotTxtEntry.java?ref=fb7ac266d01ad1368c13f53d96164336639781e7",
      "patch": "@@ -116,7 +116,7 @@ public String toString() {\n     // Taken from http://developer.android.com/reference/android/R.html\n     // TRANSITION for api level 19\n     public enum RType {\n-        ANIM, ANIMATOR, ARRAY, ATTR, BOOL, COLOR, DIMEN, DRAWABLE, FRACTION, ID, INTEGER, INTERPOLATOR, LAYOUT, MENU, MIPMAP, PLURALS, RAW, STRING, STYLE, STYLEABLE, TRANSITION, XML;\n+        ANIM, ANIMATOR, ARRAY, ATTR, BOOL, COLOR, DIMEN, DRAWABLE, FONT, FRACTION, ID, INTEGER, INTERPOLATOR, LAYOUT, MENU, MIPMAP, PLURALS, RAW, STRING, STYLE, STYLEABLE, TRANSITION, XML;\n \n         @Override\n         public String toString() {",
      "parent_sha": "97dfa7caadd25767905b81372b58fcc91d575139"
    }
  },
  {
    "oid": "e027f4f23afa41f4d0a970baa0646a712b57c61d",
    "message": "[bugfix] fix resource patch error with jianGuo pro phone",
    "date": "2017-05-22T04:22:33Z",
    "url": "https://github.com/Tencent/tinker/commit/e027f4f23afa41f4d0a970baa0646a712b57c61d",
    "details": {
      "sha": "d9959b2d72faf35acbee407ef1d8d3fe29eafce2",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java",
      "status": "modified",
      "additions": 13,
      "deletions": 6,
      "changes": 19,
      "blob_url": "https://github.com/Tencent/tinker/blob/e027f4f23afa41f4d0a970baa0646a712b57c61d/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourcePatcher.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/e027f4f23afa41f4d0a970baa0646a712b57c61d/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourcePatcher.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FTinkerResourcePatcher.java?ref=e027f4f23afa41f4d0a970baa0646a712b57c61d",
      "patch": "@@ -142,15 +142,22 @@ public static void isResourceCanPatch(Context context) throws Throwable {\n         if (references == null) {\n             throw new IllegalStateException(\"resource references is null\");\n         }\n-        try {\n+        // fix jianGuo pro has private field 'mAssets' with Resource\n+        // try use mResourcesImpl first\n+        if (SDK_INT >= 24) {\n+            try {\n+                // N moved the mAssets inside an mResourcesImpl field\n+                resourcesImplFiled = Resources.class.getDeclaredField(\"mResourcesImpl\");\n+                resourcesImplFiled.setAccessible(true);\n+            } catch (Throwable ignore) {\n+                // for safety\n+                assetsFiled = Resources.class.getDeclaredField(\"mAssets\");\n+                assetsFiled.setAccessible(true);\n+            }\n+        } else {\n             assetsFiled = Resources.class.getDeclaredField(\"mAssets\");\n             assetsFiled.setAccessible(true);\n-        } catch (Throwable ignore) {\n-            // N moved the mAssets inside an mResourcesImpl field\n-            resourcesImplFiled = Resources.class.getDeclaredField(\"mResourcesImpl\");\n-            resourcesImplFiled.setAccessible(true);\n         }\n-\n //        final Resources resources = context.getResources();\n //        isMiuiSystem = resources != null && MIUI_RESOURCE_CLASSNAME.equals(resources.getClass().getName());\n ",
      "parent_sha": "958b57b199db6eab7487b3916e3e25619e980a2e"
    }
  },
  {
    "oid": "2530c27ecf2f6d4f7fbbeee0fc837bde7fff2d3c",
    "message": "[tinker] tidy up codes.",
    "date": "2019-04-19T12:53:50Z",
    "url": "https://github.com/Tencent/tinker/commit/2530c27ecf2f6d4f7fbbeee0fc837bde7fff2d3c",
    "details": {
      "sha": "1dbc53f49bb8f4afc306f9f769b3a3dc92317d2f",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/SystemClassLoaderAdder.java",
      "status": "modified",
      "additions": 25,
      "deletions": 24,
      "changes": 49,
      "blob_url": "https://github.com/Tencent/tinker/blob/2530c27ecf2f6d4f7fbbeee0fc837bde7fff2d3c/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FSystemClassLoaderAdder.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/2530c27ecf2f6d4f7fbbeee0fc837bde7fff2d3c/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FSystemClassLoaderAdder.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FSystemClassLoaderAdder.java?ref=2530c27ecf2f6d4f7fbbeee0fc837bde7fff2d3c",
      "patch": "@@ -116,32 +116,33 @@ private static boolean checkDexInstall(ClassLoader classLoader) throws ClassNotF\n     }\n \n     private static boolean checkIsProtectedApp(List<File> files) {\n-        if (!files.isEmpty()) {\n-            for (File file : files) {\n-                if (file == null) {\n-                    continue;\n-                }\n-                final String fileName = file.getName();\n-                if (fileName.startsWith(ShareConstants.CHANGED_CLASSES_DEX_PREFIX)) {\n-                    return true;\n-                } else if (fileName.endsWith(ShareConstants.APK_SUFFIX) || file.getName().endsWith(ShareConstants.JAR_SUFFIX)) {\n-                    ZipFile zf = null;\n-                    try {\n-                        zf = new ZipFile(file);\n-                        final Enumeration<? extends ZipEntry> entries = zf.entries();\n-                        while (entries.hasMoreElements()) {\n-                            final ZipEntry entry = entries.nextElement();\n-                            if (entry.getName().startsWith(ShareConstants.CHANGED_CLASSES_DEX_PREFIX)) {\n-                                return true;\n-                            }\n+        if (files.isEmpty()) {\n+            return false;\n+        }\n+        for (File file : files) {\n+            if (file == null) {\n+                continue;\n+            }\n+            final String fileName = file.getName();\n+            if (fileName.startsWith(ShareConstants.CHANGED_CLASSES_DEX_PREFIX)) {\n+                return true;\n+            } else if (fileName.endsWith(ShareConstants.APK_SUFFIX) || file.getName().endsWith(ShareConstants.JAR_SUFFIX)) {\n+                ZipFile zf = null;\n+                try {\n+                    zf = new ZipFile(file);\n+                    final Enumeration<? extends ZipEntry> entries = zf.entries();\n+                    while (entries.hasMoreElements()) {\n+                        final ZipEntry entry = entries.nextElement();\n+                        if (entry.getName().startsWith(ShareConstants.CHANGED_CLASSES_DEX_PREFIX)) {\n+                            return true;\n                         }\n-                        return false;\n-                    } catch (IOException e) {\n-                        // Usually we shouldn't reach here.\n-                        return false;\n-                    } finally {\n-                        SharePatchFileUtil.closeZip(zf);\n                     }\n+                    return false;\n+                } catch (IOException e) {\n+                    // Usually we shouldn't reach here.\n+                    return false;\n+                } finally {\n+                    SharePatchFileUtil.closeZip(zf);\n                 }\n             }\n         }",
      "parent_sha": "b3f7c9261d86f6b89f16066100799ecd2f9e3a0a"
    }
  },
  {
    "oid": "e501d96562efe3f44e1de1afc192204a62380c8f",
    "message": "[tinker] Patched dexes should be inserted in front of base.apk.",
    "date": "2019-11-08T09:19:52Z",
    "url": "https://github.com/Tencent/tinker/commit/e501d96562efe3f44e1de1afc192204a62380c8f",
    "details": {
      "sha": "55fd5fdbdbe467cc6ae6a10c561d14a1deb6a74e",
      "filename": "tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/NewClassLoaderInjector.java",
      "status": "modified",
      "additions": 12,
      "deletions": 15,
      "changes": 27,
      "blob_url": "https://github.com/Tencent/tinker/blob/e501d96562efe3f44e1de1afc192204a62380c8f/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FNewClassLoaderInjector.java",
      "raw_url": "https://github.com/Tencent/tinker/raw/e501d96562efe3f44e1de1afc192204a62380c8f/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FNewClassLoaderInjector.java",
      "contents_url": "https://api.github.com/repos/Tencent/tinker/contents/tinker-android%2Ftinker-android-loader%2Fsrc%2Fmain%2Fjava%2Fcom%2Ftencent%2Ftinker%2Floader%2FNewClassLoaderInjector.java?ref=e501d96562efe3f44e1de1afc192204a62380c8f",
      "patch": "@@ -141,8 +141,19 @@ private static ClassLoader createNewClassLoader(Context context, ClassLoader old\n \n         final StringBuilder dexPathBuilder = new StringBuilder();\n \n+        final boolean hasPatchDexPaths = patchDexPaths != null && patchDexPaths.length > 0;\n+\n+        if (hasPatchDexPaths) {\n+            for (int i = 0; i < patchDexPaths.length; ++i) {\n+                if (i > 0) {\n+                    dexPathBuilder.append(File.pathSeparator);\n+                }\n+                dexPathBuilder.append(patchDexPaths[i]);\n+            }\n+        }\n+\n         final String packageName = context.getPackageName();\n-        boolean isFirstItem = true;\n+        boolean isFirstItem = dexPathBuilder.length() == 0;\n         for (Object oldDexElement : oldDexElements) {\n             String dexPath = null;\n             final DexFile dexFile = (DexFile) dexFileField.get(oldDexElement);\n@@ -163,20 +174,6 @@ private static ClassLoader createNewClassLoader(Context context, ClassLoader old\n             dexPathBuilder.append(dexPath);\n         }\n \n-        final boolean hasPatchDexPaths = patchDexPaths != null && patchDexPaths.length > 0;\n-\n-        if (hasPatchDexPaths) {\n-            if (dexPathBuilder.length() != 0) {\n-                dexPathBuilder.append(File.pathSeparator);\n-            }\n-            for (int i = 0; i < patchDexPaths.length; ++i) {\n-                if (i > 0) {\n-                    dexPathBuilder.append(File.pathSeparator);\n-                }\n-                dexPathBuilder.append(patchDexPaths[i]);\n-            }\n-        }\n-\n         final String combinedDexPath = dexPathBuilder.toString();\n \n         final StringBuilder libraryPathBuilder = new StringBuilder();",
      "parent_sha": "286db3f772695535f85bf5cd92d405d281cb7d9d"
    }
  }
]