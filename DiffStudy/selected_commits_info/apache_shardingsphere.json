[
  {
    "oid": "8222918349a92eeaa5f06dc7d8975021499a9f9b",
    "message": "#1191, make BackendConnection volatile in FrontendHandler",
    "date": "2018-08-28T09:38:54Z",
    "url": "https://github.com/apache/shardingsphere/commit/8222918349a92eeaa5f06dc7d8975021499a9f9b",
    "details": {
      "sha": "8643d8620103c0927b96d302ff3999e1ab5dd353",
      "filename": "sharding-proxy/src/main/java/io/shardingsphere/proxy/frontend/common/FrontendHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/shardingsphere/blob/8222918349a92eeaa5f06dc7d8975021499a9f9b/sharding-proxy%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fproxy%2Ffrontend%2Fcommon%2FFrontendHandler.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/8222918349a92eeaa5f06dc7d8975021499a9f9b/sharding-proxy%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fproxy%2Ffrontend%2Fcommon%2FFrontendHandler.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-proxy%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fproxy%2Ffrontend%2Fcommon%2FFrontendHandler.java?ref=8222918349a92eeaa5f06dc7d8975021499a9f9b",
      "patch": "@@ -34,7 +34,7 @@ public abstract class FrontendHandler extends ChannelInboundHandlerAdapter {\n     private boolean authorized;\n     \n     @Setter\n-    private BackendConnection backendConnection;\n+    private volatile BackendConnection backendConnection;\n     \n     @Override\n     public final void channelActive(final ChannelHandlerContext context) {",
      "parent_sha": "7614092de2bea0c3f7ff84aafbc2a3e1e5cf7adc"
    }
  },
  {
    "oid": "906f7bef3b81112b46c1e7a2395a84b8ae89233e",
    "message": "Refactor PostgreSQLPipelineFreemarkerManager (#20330)",
    "date": "2022-08-21T03:59:43Z",
    "url": "https://github.com/apache/shardingsphere/commit/906f7bef3b81112b46c1e7a2395a84b8ae89233e",
    "details": {
      "sha": "4abbf5d0558f34bddd7548fb5121a435dfce6cba",
      "filename": "shardingsphere-kernel/shardingsphere-data-pipeline/shardingsphere-data-pipeline-dialect/shardingsphere-data-pipeline-postgresql/src/main/java/org/apache/shardingsphere/data/pipeline/postgresql/util/PostgreSQLPipelineFreemarkerManager.java",
      "status": "modified",
      "additions": 16,
      "deletions": 19,
      "changes": 35,
      "blob_url": "https://github.com/apache/shardingsphere/blob/906f7bef3b81112b46c1e7a2395a84b8ae89233e/shardingsphere-kernel%2Fshardingsphere-data-pipeline%2Fshardingsphere-data-pipeline-dialect%2Fshardingsphere-data-pipeline-postgresql%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fdata%2Fpipeline%2Fpostgresql%2Futil%2FPostgreSQLPipelineFreemarkerManager.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/906f7bef3b81112b46c1e7a2395a84b8ae89233e/shardingsphere-kernel%2Fshardingsphere-data-pipeline%2Fshardingsphere-data-pipeline-dialect%2Fshardingsphere-data-pipeline-postgresql%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fdata%2Fpipeline%2Fpostgresql%2Futil%2FPostgreSQLPipelineFreemarkerManager.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/shardingsphere-kernel%2Fshardingsphere-data-pipeline%2Fshardingsphere-data-pipeline-dialect%2Fshardingsphere-data-pipeline-postgresql%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fdata%2Fpipeline%2Fpostgresql%2Futil%2FPostgreSQLPipelineFreemarkerManager.java?ref=906f7bef3b81112b46c1e7a2395a84b8ae89233e",
      "patch": "@@ -24,37 +24,34 @@\n import lombok.AccessLevel;\n import lombok.NoArgsConstructor;\n import lombok.SneakyThrows;\n-import org.apache.shardingsphere.infra.exception.ShardingSphereException;\n \n import java.io.IOException;\n import java.io.StringWriter;\n import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Map.Entry;\n-import java.util.Optional;\n \n /**\n  * PostgreSQL pipeline freemarker manager.\n  */\n @NoArgsConstructor(access = AccessLevel.PRIVATE)\n public final class PostgreSQLPipelineFreemarkerManager {\n     \n-    private static final Map<Integer, String> PG_VERSION_PATHS = new LinkedHashMap<>();\n+    private static final Map<Integer, String> VERSION_PATHS = new LinkedHashMap<>();\n     \n     private static final Configuration TEMPLATE_CONFIG = createTemplateConfiguration();\n     \n     static {\n-        PG_VERSION_PATHS.put(120000, \"12_plus\");\n-        PG_VERSION_PATHS.put(110000, \"11_plus\");\n-        PG_VERSION_PATHS.put(100000, \"10_plus\");\n-        PG_VERSION_PATHS.put(90600, \"9.6_plus\");\n-        PG_VERSION_PATHS.put(90500, \"9.5_plus\");\n-        PG_VERSION_PATHS.put(90400, \"9.4_plus\");\n-        PG_VERSION_PATHS.put(90300, \"9.3_plus\");\n-        PG_VERSION_PATHS.put(90200, \"9.2_plus\");\n-        PG_VERSION_PATHS.put(90100, \"9.1_plus\");\n-        PG_VERSION_PATHS.put(90000, \"9.0_plus\");\n-        PG_VERSION_PATHS.put(0, \"default\");\n+        VERSION_PATHS.put(120000, \"12_plus\");\n+        VERSION_PATHS.put(110000, \"11_plus\");\n+        VERSION_PATHS.put(100000, \"10_plus\");\n+        VERSION_PATHS.put(90600, \"9.6_plus\");\n+        VERSION_PATHS.put(90500, \"9.5_plus\");\n+        VERSION_PATHS.put(90400, \"9.4_plus\");\n+        VERSION_PATHS.put(90300, \"9.3_plus\");\n+        VERSION_PATHS.put(90200, \"9.2_plus\");\n+        VERSION_PATHS.put(90100, \"9.1_plus\");\n+        VERSION_PATHS.put(90000, \"9.0_plus\");\n     }\n     \n     private static Configuration createTemplateConfiguration() {\n@@ -77,21 +74,21 @@ private static Configuration createTemplateConfiguration() {\n     public static String getSQLByVersion(final Map<String, Object> dataModel, final String pathFormat, final int majorVersion, final int minorVersion) {\n         int version = majorVersion * 10000 + minorVersion;\n         try (StringWriter result = new StringWriter()) {\n-            findTemplate(pathFormat, version).orElseThrow(() -> new ShardingSphereException(\"Failed to get template, path:%s, version:%s\", pathFormat, version)).process(dataModel, result);\n+            findTemplate(pathFormat, version).process(dataModel, result);\n             return result.toString();\n         }\n     }\n     \n-    private static Optional<Template> findTemplate(final String pathFormat, final int version) throws IOException {\n-        for (Entry<Integer, String> entry : PG_VERSION_PATHS.entrySet()) {\n+    private static Template findTemplate(final String pathFormat, final int version) throws IOException {\n+        for (Entry<Integer, String> entry : VERSION_PATHS.entrySet()) {\n             if (entry.getKey() > version) {\n                 continue;\n             }\n             try {\n-                return Optional.of(TEMPLATE_CONFIG.getTemplate(String.format(pathFormat, entry.getValue())));\n+                return TEMPLATE_CONFIG.getTemplate(String.format(pathFormat, entry.getValue()));\n             } catch (TemplateNotFoundException ignored) {\n             }\n         }\n-        return Optional.empty();\n+        return TEMPLATE_CONFIG.getTemplate(String.format(pathFormat, \"default\"));\n     }\n }",
      "parent_sha": "9eadd026517dc3a5acdefb87884046547c7ac6ff"
    }
  },
  {
    "oid": "1600cfbbbfb9405912fea7435074b8970e626f9c",
    "message": "fix file not found in windows os: config path with blank character re\u2026 (#13834)\n\n* fix file not found in windows os: config path with blank character replaced by '%20' in URL\r\n\r\n* using @SneakyThrows(URISyntaxException.class)",
    "date": "2021-12-06T06:09:22Z",
    "url": "https://github.com/apache/shardingsphere/commit/1600cfbbbfb9405912fea7435074b8970e626f9c",
    "details": {
      "sha": "6be086f72698aed121f91e251dc482f03ef40c63",
      "filename": "shardingsphere-proxy/shardingsphere-proxy-bootstrap/src/main/java/org/apache/shardingsphere/proxy/config/ProxyConfigurationLoader.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/apache/shardingsphere/blob/1600cfbbbfb9405912fea7435074b8970e626f9c/shardingsphere-proxy%2Fshardingsphere-proxy-bootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fproxy%2Fconfig%2FProxyConfigurationLoader.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/1600cfbbbfb9405912fea7435074b8970e626f9c/shardingsphere-proxy%2Fshardingsphere-proxy-bootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fproxy%2Fconfig%2FProxyConfigurationLoader.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/shardingsphere-proxy%2Fshardingsphere-proxy-bootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fproxy%2Fconfig%2FProxyConfigurationLoader.java?ref=1600cfbbbfb9405912fea7435074b8970e626f9c",
      "patch": "@@ -20,6 +20,7 @@\n import com.google.common.base.Preconditions;\n import lombok.AccessLevel;\n import lombok.NoArgsConstructor;\n+import lombok.SneakyThrows;\n import org.apache.shardingsphere.authority.yaml.config.YamlAuthorityRuleConfiguration;\n import org.apache.shardingsphere.infra.yaml.config.pojo.YamlRuleConfiguration;\n import org.apache.shardingsphere.infra.yaml.engine.YamlEngine;\n@@ -28,6 +29,7 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.net.URISyntaxException;\n import java.net.URL;\n import java.util.Collection;\n import java.util.HashSet;\n@@ -61,10 +63,11 @@ public static YamlProxyConfiguration load(final String path) throws IOException\n         return new YamlProxyConfiguration(serverConfig, ruleConfigs.stream().collect(Collectors.toMap(\n                 YamlProxyRuleConfiguration::getSchemaName, each -> each, (oldValue, currentValue) -> oldValue, LinkedHashMap::new)));\n     }\n-    \n+\n+    @SneakyThrows(URISyntaxException.class)\n     private static File getResourceFile(final String path) {\n         URL url = ProxyConfigurationLoader.class.getResource(path);\n-        return null == url ? new File(path) : new File(url.getFile());\n+        return null == url ? new File(path) : new File(url.toURI().getPath());\n     }\n     \n     private static YamlProxyServerConfiguration loadServerConfiguration(final File yamlFile) throws IOException {",
      "parent_sha": "bab61b4f4fe331438adfd736318ff6a051511afc"
    }
  },
  {
    "oid": "3914cc0ac7d6c43bc5fd67f39af5ab0a1bee0ed5",
    "message": "modify java doc",
    "date": "2019-02-09T10:02:38Z",
    "url": "https://github.com/apache/shardingsphere/commit/3914cc0ac7d6c43bc5fd67f39af5ab0a1bee0ed5",
    "details": {
      "sha": "79d1fc944c2d9f92945b8bb756588252ca38b080",
      "filename": "sharding-core/src/main/java/org/apache/shardingsphere/core/encrypt/encryptor/imp/AESShardingEncryptor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/shardingsphere/blob/3914cc0ac7d6c43bc5fd67f39af5ab0a1bee0ed5/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Fencrypt%2Fencryptor%2Fimp%2FAESShardingEncryptor.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/3914cc0ac7d6c43bc5fd67f39af5ab0a1bee0ed5/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Fencrypt%2Fencryptor%2Fimp%2FAESShardingEncryptor.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Fencrypt%2Fencryptor%2Fimp%2FAESShardingEncryptor.java?ref=3914cc0ac7d6c43bc5fd67f39af5ab0a1bee0ed5",
      "patch": "@@ -29,7 +29,7 @@\n import java.util.Properties;\n \n /**\n- * DES sharding encryptor.\n+ * AES sharding encryptor.\n  *\n  * @author panjuan\n  */",
      "parent_sha": "9cd81fd7cc87f7e51e0c6ea3fc7a697e5f538846"
    }
  },
  {
    "oid": "f5a19df0633e73c7d4bc46f3a7d36b1885a2c743",
    "message": "USE ShardingRuleConfiguration",
    "date": "2018-11-03T09:28:30Z",
    "url": "https://github.com/apache/shardingsphere/commit/f5a19df0633e73c7d4bc46f3a7d36b1885a2c743",
    "details": {
      "sha": "f715ec0d289208d3e36367da12f99343ce2d47c2",
      "filename": "sharding-orchestration/sharding-orchestration-core/src/main/java/io/shardingsphere/orchestration/internal/event/config/ShardingConfigurationChangedEvent.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/shardingsphere/blob/f5a19df0633e73c7d4bc46f3a7d36b1885a2c743/sharding-orchestration%2Fsharding-orchestration-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Forchestration%2Finternal%2Fevent%2Fconfig%2FShardingConfigurationChangedEvent.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/f5a19df0633e73c7d4bc46f3a7d36b1885a2c743/sharding-orchestration%2Fsharding-orchestration-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Forchestration%2Finternal%2Fevent%2Fconfig%2FShardingConfigurationChangedEvent.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-orchestration%2Fsharding-orchestration-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Forchestration%2Finternal%2Fevent%2Fconfig%2FShardingConfigurationChangedEvent.java?ref=f5a19df0633e73c7d4bc46f3a7d36b1885a2c743",
      "patch": "@@ -17,7 +17,7 @@\n \n package io.shardingsphere.orchestration.internal.event.config;\n \n-import io.shardingsphere.core.rule.ShardingRule;\n+import io.shardingsphere.api.config.ShardingRuleConfiguration;\n import lombok.Getter;\n import lombok.RequiredArgsConstructor;\n \n@@ -31,5 +31,5 @@\n @Getter\n public final class ShardingConfigurationChangedEvent {\n     \n-    private final ShardingRule shardingRule;\n+    private final ShardingRuleConfiguration shardingRuleConfiguration;\n }",
      "parent_sha": "c9e2144671f34de61f0ab94dab7cdf034caf2f32"
    }
  },
  {
    "oid": "8e52107bc05ffdbfa6c180c499b02297c2eddfb9",
    "message": "Fix sonar issue on LockSQLException (#34211)",
    "date": "2024-12-30T15:00:33Z",
    "url": "https://github.com/apache/shardingsphere/commit/8e52107bc05ffdbfa6c180c499b02297c2eddfb9",
    "details": {
      "sha": "2c35640f490b27704c37b93dc37ed96331886ae7",
      "filename": "infra/exception/core/src/main/java/org/apache/shardingsphere/infra/exception/core/external/sql/type/kernel/category/LockSQLException.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/shardingsphere/blob/8e52107bc05ffdbfa6c180c499b02297c2eddfb9/infra%2Fexception%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Finfra%2Fexception%2Fcore%2Fexternal%2Fsql%2Ftype%2Fkernel%2Fcategory%2FLockSQLException.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/8e52107bc05ffdbfa6c180c499b02297c2eddfb9/infra%2Fexception%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Finfra%2Fexception%2Fcore%2Fexternal%2Fsql%2Ftype%2Fkernel%2Fcategory%2FLockSQLException.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/infra%2Fexception%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Finfra%2Fexception%2Fcore%2Fexternal%2Fsql%2Ftype%2Fkernel%2Fcategory%2FLockSQLException.java?ref=8e52107bc05ffdbfa6c180c499b02297c2eddfb9",
      "patch": "@@ -29,7 +29,7 @@ public abstract class LockSQLException extends KernelSQLException {\n     \n     private static final int KERNEL_CODE = 5;\n     \n-    public LockSQLException(final SQLState sqlState, final int errorCode, final String reason, final Object... messageArguments) {\n+    protected LockSQLException(final SQLState sqlState, final int errorCode, final String reason, final Object... messageArguments) {\n         super(sqlState, KERNEL_CODE, errorCode, reason, messageArguments);\n     }\n }",
      "parent_sha": "57841557119e3a54fc1561241453feb3fb15c6af"
    }
  },
  {
    "oid": "a7e6a8f24d425f1e833b1ee40f5cea6d2049076c",
    "message": "modify cases for SQLRewriteEngineTest.java",
    "date": "2019-01-28T07:49:52Z",
    "url": "https://github.com/apache/shardingsphere/commit/a7e6a8f24d425f1e833b1ee40f5cea6d2049076c",
    "details": {
      "sha": "98d441f114d359dc3989b2b456ff069215e787c3",
      "filename": "sharding-core/src/test/java/org/apache/shardingsphere/core/rewrite/SQLRewriteEngineTest.java",
      "status": "modified",
      "additions": 40,
      "deletions": 40,
      "changes": 80,
      "blob_url": "https://github.com/apache/shardingsphere/blob/a7e6a8f24d425f1e833b1ee40f5cea6d2049076c/sharding-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngineTest.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/a7e6a8f24d425f1e833b1ee40f5cea6d2049076c/sharding-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngineTest.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngineTest.java?ref=a7e6a8f24d425f1e833b1ee40f5cea6d2049076c",
      "patch": "@@ -122,17 +122,17 @@ public void assertRewriteForTableName() {\n         List<Object> parameters = new ArrayList<>(2);\n         parameters.add(1);\n         parameters.add(\"x\");\n-        selectStatement.addSQLToken(new TableToken(7, 0, \"table_x\"));\n-        selectStatement.addSQLToken(new TableToken(31, 0, \"table_x\"));\n-        selectStatement.addSQLToken(new TableToken(47, 0, \"table_x\"));\n+        selectStatement.addSQLToken(new TableToken(7, 0, \"table_x\", \"\", \"\"));\n+        selectStatement.addSQLToken(new TableToken(31, 0, \"table_x\", \"\", \"\"));\n+        selectStatement.addSQLToken(new TableToken(47, 0, \"table_x\", \"\", \"\"));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \n                 \"SELECT table_x.id, x.name FROM table_x x WHERE table_x.id=? AND x.name=?\", DatabaseType.MySQL, selectStatement, null, parameters);\n         assertThat(rewriteEngine.rewrite(false).toSQL(null, tableTokens, null, shardingDataSourceMetaData).getSql(), is(\"SELECT table_1.id, x.name FROM table_1 x WHERE table_1.id=? AND x.name=?\"));\n     }\n     \n     @Test\n     public void assertRewriteForOrderByAndGroupByDerivedColumns() {\n-        selectStatement.addSQLToken(new TableToken(18, 0, \"table_x\"));\n+        selectStatement.addSQLToken(new TableToken(18, 0, \"table_x\", \"\", \"\"));\n         ItemsToken itemsToken = new ItemsToken(12);\n         itemsToken.getItems().addAll(Arrays.asList(\"x.id as GROUP_BY_DERIVED_0\", \"x.name as ORDER_BY_DERIVED_0\"));\n         selectStatement.addSQLToken(itemsToken);\n@@ -144,7 +144,7 @@ public void assertRewriteForOrderByAndGroupByDerivedColumns() {\n     \n     @Test\n     public void assertRewriteForAggregationDerivedColumns() {\n-        selectStatement.addSQLToken(new TableToken(23, 0, \"table_x\"));\n+        selectStatement.addSQLToken(new TableToken(23, 0, \"table_x\", \"\", \"\"));\n         ItemsToken itemsToken = new ItemsToken(17);\n         itemsToken.getItems().addAll(Arrays.asList(\"COUNT(x.age) as AVG_DERIVED_COUNT_0\", \"SUM(x.age) as AVG_DERIVED_SUM_0\"));\n         selectStatement.addSQLToken(itemsToken);\n@@ -160,7 +160,7 @@ public void assertRewriteForAutoGeneratedKeyColumn() {\n         parameters.add(1);\n         insertStatement.setParametersIndex(2);\n         insertStatement.setInsertValuesListLastIndex(44);\n-        insertStatement.addSQLToken(new TableToken(12, 0, \"table_x\"));\n+        insertStatement.addSQLToken(new TableToken(12, 0, \"table_x\", \"\", \"\"));\n         ItemsToken itemsToken = new ItemsToken(30);\n         itemsToken.getItems().add(\"id\");\n         insertStatement.addSQLToken(itemsToken);\n@@ -179,7 +179,7 @@ public void assertRewriteForAutoGeneratedKeyColumnWithoutColumnsWithParameter()\n         List<Object> parameters = new ArrayList<>();\n         parameters.add(\"Bill\");\n         insertStatement.setParametersIndex(1);\n-        insertStatement.addSQLToken(new TableToken(12, 0, \"`table_x`\"));\n+        insertStatement.addSQLToken(new TableToken(12, 0, \"table_x\", \"`\", \"`\"));\n         insertStatement.setGenerateKeyColumnIndex(0);\n         insertStatement.setInsertValuesListLastIndex(31);\n         insertStatement.addSQLToken(new InsertColumnToken(21, \"(\"));\n@@ -201,7 +201,7 @@ public void assertRewriteForAutoGeneratedKeyColumnWithoutColumnsWithParameter()\n     \n     @Test\n     public void assertRewriteForAutoGeneratedKeyColumnWithoutColumnsWithoutParameter() {\n-        insertStatement.addSQLToken(new TableToken(12, 0, \"`table_x`\"));\n+        insertStatement.addSQLToken(new TableToken(12, 0, \"table_x\", \"`\", \"`\"));\n         insertStatement.setGenerateKeyColumnIndex(0);\n         insertStatement.setInsertValuesListLastIndex(32);\n         insertStatement.addSQLToken(new InsertColumnToken(21, \"(\"));\n@@ -226,7 +226,7 @@ public void assertRewriteColumnWithoutColumnsWithoutParameter() {\n         List<Object> parameters = new ArrayList<>(2);\n         parameters.add(\"x\");\n         parameters.add(1);\n-        insertStatement.addSQLToken(new TableToken(12, 0, \"`table_x`\"));\n+        insertStatement.addSQLToken(new TableToken(12, 0, \"table_x\", \"`\", \"`\"));\n         insertStatement.setGenerateKeyColumnIndex(0);\n         insertStatement.setInsertValuesListLastIndex(35);\n         insertStatement.addSQLToken(new InsertColumnToken(21, \"(\"));\n@@ -251,7 +251,7 @@ public void assertRewriteColumnWithoutColumnsWithParameter() {\n         List<Object> parameters = new ArrayList<>(2);\n         parameters.add(\"x\");\n         parameters.add(1);\n-        insertStatement.addSQLToken(new TableToken(12, 0, \"`table_x`\"));\n+        insertStatement.addSQLToken(new TableToken(12, 0, \"table_x\", \"`\", \"`\"));\n         insertStatement.setGenerateKeyColumnIndex(0);\n         insertStatement.setInsertValuesListLastIndex(34);\n         insertStatement.addSQLToken(new InsertColumnToken(21, \"(\"));\n@@ -276,7 +276,7 @@ public void assertRewriteForLimit() {\n         selectStatement.setLimit(new Limit());\n         selectStatement.getLimit().setOffset(new LimitValue(2, -1, true));\n         selectStatement.getLimit().setRowCount(new LimitValue(2, -1, false));\n-        selectStatement.addSQLToken(new TableToken(17, 0, \"table_x\"));\n+        selectStatement.addSQLToken(new TableToken(17, 0, \"table_x\", \"\", \"\"));\n         selectStatement.addSQLToken(new OffsetToken(33, 2));\n         selectStatement.addSQLToken(new RowCountToken(36, 2));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \"SELECT x.id FROM table_x x LIMIT 2, 2\", DatabaseType.MySQL, selectStatement, null, Collections.emptyList());\n@@ -288,7 +288,7 @@ public void assertRewriteForRowNum() {\n         selectStatement.setLimit(new Limit());\n         selectStatement.getLimit().setOffset(new LimitValue(2, -1, true));\n         selectStatement.getLimit().setRowCount(new LimitValue(4, -1, false));\n-        selectStatement.addSQLToken(new TableToken(68, 0, \"table_x\"));\n+        selectStatement.addSQLToken(new TableToken(68, 0, \"table_x\", \"\", \"\"));\n         selectStatement.addSQLToken(new OffsetToken(119, 2));\n         selectStatement.addSQLToken(new RowCountToken(98, 4));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \"SELECT * FROM (SELECT row_.*, rownum rownum_ FROM (SELECT x.id FROM table_x x) row_ WHERE rownum<=4) t WHERE t.rownum_>2\", \n@@ -302,7 +302,7 @@ public void assertRewriteForTopAndRowNumber() {\n         selectStatement.setLimit(new Limit());\n         selectStatement.getLimit().setOffset(new LimitValue(2, -1, true));\n         selectStatement.getLimit().setRowCount(new LimitValue(4, -1, false));\n-        selectStatement.addSQLToken(new TableToken(85, 0, \"table_x\"));\n+        selectStatement.addSQLToken(new TableToken(85, 0, \"table_x\", \"\", \"\"));\n         selectStatement.addSQLToken(new OffsetToken(123, 2));\n         selectStatement.addSQLToken(new RowCountToken(26, 4));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \n@@ -319,7 +319,7 @@ public void assertRewriteForLimitForMemoryGroupBy() {\n         selectStatement.getLimit().setRowCount(new LimitValue(2, -1, false));\n         selectStatement.getOrderByItems().add(new OrderItem(\"x\", \"id\", OrderDirection.ASC, OrderDirection.ASC));\n         selectStatement.getGroupByItems().add(new OrderItem(\"x\", \"id\", OrderDirection.DESC, OrderDirection.ASC));\n-        selectStatement.addSQLToken(new TableToken(17, 0, \"table_x\"));\n+        selectStatement.addSQLToken(new TableToken(17, 0, \"table_x\", \"\", \"\"));\n         selectStatement.addSQLToken(new OffsetToken(33, 2));\n         selectStatement.addSQLToken(new RowCountToken(36, 2));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \"SELECT x.id FROM table_x x LIMIT 2, 2\", DatabaseType.MySQL, selectStatement, null, Collections.emptyList());\n@@ -331,7 +331,7 @@ public void assertRewriteForRowNumForMemoryGroupBy() {\n         selectStatement.setLimit(new Limit());\n         selectStatement.getLimit().setOffset(new LimitValue(2, -1, true));\n         selectStatement.getLimit().setRowCount(new LimitValue(4, -1, false));\n-        selectStatement.addSQLToken(new TableToken(68, 0, \"table_x\"));\n+        selectStatement.addSQLToken(new TableToken(68, 0, \"table_x\", \"\", \"\"));\n         selectStatement.addSQLToken(new OffsetToken(119, 2));\n         selectStatement.addSQLToken(new RowCountToken(98, 4));\n         selectStatement.getOrderByItems().add(new OrderItem(\"x\", \"id\", OrderDirection.ASC, OrderDirection.ASC));\n@@ -347,7 +347,7 @@ public void assertRewriteForTopAndRowNumberForMemoryGroupBy() {\n         selectStatement.setLimit(new Limit());\n         selectStatement.getLimit().setOffset(new LimitValue(2, -1, true));\n         selectStatement.getLimit().setRowCount(new LimitValue(4, -1, false));\n-        selectStatement.addSQLToken(new TableToken(85, 0, \"table_x\"));\n+        selectStatement.addSQLToken(new TableToken(85, 0, \"table_x\", \"\", \"\"));\n         selectStatement.addSQLToken(new OffsetToken(123, 2));\n         selectStatement.addSQLToken(new RowCountToken(26, 4));\n         selectStatement.getOrderByItems().add(new OrderItem(\"x\", \"id\", OrderDirection.ASC, OrderDirection.ASC));\n@@ -364,7 +364,7 @@ public void assertRewriteForLimitForNotRewriteLimit() {\n         selectStatement.setLimit(new Limit());\n         selectStatement.getLimit().setOffset(new LimitValue(2, -1, true));\n         selectStatement.getLimit().setRowCount(new LimitValue(2, -1, false));\n-        selectStatement.addSQLToken(new TableToken(17, 0, \"table_x\"));\n+        selectStatement.addSQLToken(new TableToken(17, 0, \"table_x\", \"\", \"\"));\n         selectStatement.addSQLToken(new OffsetToken(33, 2));\n         selectStatement.addSQLToken(new RowCountToken(36, 2));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \"SELECT x.id FROM table_x x LIMIT 2, 2\", DatabaseType.MySQL, selectStatement, null, Collections.emptyList());\n@@ -376,7 +376,7 @@ public void assertRewriteForRowNumForNotRewriteLimit() {\n         selectStatement.setLimit(new Limit());\n         selectStatement.getLimit().setOffset(new LimitValue(2, -1, true));\n         selectStatement.getLimit().setRowCount(new LimitValue(4, -1, false));\n-        selectStatement.addSQLToken(new TableToken(68, 0, \"table_x\"));\n+        selectStatement.addSQLToken(new TableToken(68, 0, \"table_x\", \"\", \"\"));\n         selectStatement.addSQLToken(new OffsetToken(119, 2));\n         selectStatement.addSQLToken(new RowCountToken(98, 4));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \"SELECT * FROM (SELECT row_.*, rownum rownum_ FROM (SELECT x.id FROM table_x x) row_ WHERE rownum<=4) t WHERE t.rownum_>2\", \n@@ -390,7 +390,7 @@ public void assertRewriteForTopAndRowNumberForNotRewriteLimit() {\n         selectStatement.setLimit(new Limit());\n         selectStatement.getLimit().setOffset(new LimitValue(2, -1, true));\n         selectStatement.getLimit().setRowCount(new LimitValue(4, -1, false));\n-        selectStatement.addSQLToken(new TableToken(85, 0, \"table_x\"));\n+        selectStatement.addSQLToken(new TableToken(85, 0, \"table_x\", \"\", \"\"));\n         selectStatement.addSQLToken(new OffsetToken(123, 2));\n         selectStatement.addSQLToken(new RowCountToken(26, 4));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \n@@ -405,7 +405,7 @@ public void assertRewriteForDerivedOrderBy() {\n         selectStatement.setGroupByLastIndex(60);\n         selectStatement.getOrderByItems().add(new OrderItem(\"x\", \"id\", OrderDirection.ASC, OrderDirection.ASC));\n         selectStatement.getOrderByItems().add(new OrderItem(\"x\", \"name\", OrderDirection.DESC, OrderDirection.ASC));\n-        selectStatement.addSQLToken(new TableToken(25, 0, \"table_x\"));\n+        selectStatement.addSQLToken(new TableToken(25, 0, \"table_x\", \"\", \"\"));\n         selectStatement.addSQLToken(new OrderByToken(61));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \n                 \"SELECT x.id, x.name FROM table_x x GROUP BY x.id, x.name DESC\", DatabaseType.MySQL, selectStatement, null, Collections.emptyList());\n@@ -418,9 +418,9 @@ public void assertGenerateSQL() {\n         List<Object> parameters = new ArrayList<>(2);\n         parameters.add(1);\n         parameters.add(\"x\");\n-        selectStatement.addSQLToken(new TableToken(7, 0, \"table_x\"));\n-        selectStatement.addSQLToken(new TableToken(31, 0, \"table_x\"));\n-        selectStatement.addSQLToken(new TableToken(58, 0, \"table_x\"));\n+        selectStatement.addSQLToken(new TableToken(7, 0, \"table_x\", \"\", \"\"));\n+        selectStatement.addSQLToken(new TableToken(31, 0, \"table_x\", \"\", \"\"));\n+        selectStatement.addSQLToken(new TableToken(58, 0, \"table_x\", \"\", \"\"));\n         selectStatement.getTables().add(new Table(\"table_x\", Optional.of(\"x\")));\n         selectStatement.getTables().add(new Table(\"table_y\", Optional.of(\"y\")));\n         SQLRewriteEngine sqlRewriteEngine =\n@@ -435,7 +435,7 @@ public void assertGenerateSQL() {\n     public void assertSchemaTokenRewriteForTableName() {\n         tableTokens = new HashMap<>(1, 1);\n         tableTokens.put(\"table_x\", \"table_y\");\n-        selectStatement.addSQLToken(new TableToken(18, 0, \"table_x\"));\n+        selectStatement.addSQLToken(new TableToken(18, 0, \"table_x\", \"\", \"\"));\n         selectStatement.addSQLToken(new SchemaToken(29, 35, \"table_x\"));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \"SHOW CREATE TABLE table_x ON table_x\", DatabaseType.MySQL, selectStatement, null, Collections.emptyList());\n         assertThat(rewriteEngine.rewrite(false).toSQL(null, tableTokens, shardingRule, shardingDataSourceMetaData).getSql(), is(\"SHOW CREATE TABLE table_y ON db0\"));\n@@ -444,29 +444,29 @@ public void assertSchemaTokenRewriteForTableName() {\n     @Test\n     public void assertIndexTokenForIndexNameTableName() {\n         selectStatement.addSQLToken(new IndexToken(13, 22, \"table_x\"));\n-        selectStatement.addSQLToken(new TableToken(27, 0, \"table_x\"));\n+        selectStatement.addSQLToken(new TableToken(27, 0, \"table_x\", \"\", \"\"));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \"CREATE INDEX index_name ON table_x ('column')\", DatabaseType.MySQL, selectStatement, null, Collections.emptyList());\n         assertThat(rewriteEngine.rewrite(false).toSQL(null, tableTokens, shardingRule, shardingDataSourceMetaData).getSql(), is(\"CREATE INDEX index_name_table_1 ON table_1 ('column')\"));\n     }\n     \n     @Test\n     public void assertIndexTokenForIndexNameTableNameWithoutLogicTableName() {\n         selectStatement.addSQLToken(new IndexToken(13, 23, \"\"));\n-        selectStatement.addSQLToken(new TableToken(28, 0, \"table_x\"));\n+        selectStatement.addSQLToken(new TableToken(28, 0, \"table_x\", \"\", \"\"));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \"CREATE INDEX logic_index ON table_x ('column')\", DatabaseType.MySQL, selectStatement, null, Collections.emptyList());\n         assertThat(rewriteEngine.rewrite(false).toSQL(null, tableTokens, shardingRule, shardingDataSourceMetaData).getSql(), is(\"CREATE INDEX logic_index_table_1 ON table_1 ('column')\"));\n     }\n     \n     @Test\n     public void assertTableTokenWithoutBackQuoteForShow() {\n-        showTablesStatement.addSQLToken(new TableToken(18, 0, \"table_x\"));\n+        showTablesStatement.addSQLToken(new TableToken(18, 0, \"table_x\", \"\", \"\"));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \"SHOW COLUMNS FROM table_x\", DatabaseType.MySQL, showTablesStatement, null, Collections.emptyList());\n         assertThat(rewriteEngine.rewrite(true).toSQL(null, tableTokens, shardingRule, shardingDataSourceMetaData).getSql(), is(\"SHOW COLUMNS FROM table_1\"));\n     }\n     \n     @Test\n     public void assertTableTokenWithoutBackQuoteFromSchemaForShow() {\n-        showTablesStatement.addSQLToken(new TableToken(18, 0, \"table_x\"));\n+        showTablesStatement.addSQLToken(new TableToken(18, 0, \"table_x\", \"\", \"\"));\n         showTablesStatement.addSQLToken(new SchemaToken(31, 43, \"table_x\"));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \"SHOW COLUMNS FROM table_x FROM 'sharding_db'\", DatabaseType.MySQL, showTablesStatement, null, Collections.emptyList());\n         Map<String, String> logicAndActualTableMap = new LinkedHashMap<>();\n@@ -476,73 +476,73 @@ public void assertTableTokenWithoutBackQuoteFromSchemaForShow() {\n     \n     @Test\n     public void assertTableTokenWithBackQuoteForShow() {\n-        showTablesStatement.addSQLToken(new TableToken(18, 0, \"`table_x`\"));\n+        showTablesStatement.addSQLToken(new TableToken(18, 0, \"table_x\", \"`\", \"`\"));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \"SHOW COLUMNS FROM `table_x`\", DatabaseType.MySQL, showTablesStatement, null, Collections.emptyList());\n         assertThat(rewriteEngine.rewrite(true).toSQL(null, tableTokens, shardingRule, shardingDataSourceMetaData).getSql(), is(\"SHOW COLUMNS FROM `table_1`\"));\n     }\n     \n     @Test\n     public void assertTableTokenWithBackQuoteFromSchemaForShow() {\n-        showTablesStatement.addSQLToken(new TableToken(18, 0, \"`table_x`\"));\n+        showTablesStatement.addSQLToken(new TableToken(18, 0, \"table_x\", \"`\", \"`\"));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \"SHOW COLUMNS FROM `table_x` FROM 'sharding_db'\", DatabaseType.MySQL, showTablesStatement, null, Collections.emptyList());\n         assertThat(rewriteEngine.rewrite(true).toSQL(null, tableTokens, shardingRule, shardingDataSourceMetaData).getSql(), is(\"SHOW COLUMNS FROM `table_1` FROM 'sharding_db'\"));\n     }\n     \n     @Test\n     public void assertTableTokenWithSchemaForShow() {\n-        showTablesStatement.addSQLToken(new TableToken(18, \"sharding_db\".length() + 1, \"table_x\"));\n+        showTablesStatement.addSQLToken(new TableToken(18, \"sharding_db\".length() + 1, \"table_x\", \"\", \"\"));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \"SHOW COLUMNS FROM sharding_db.table_x\", DatabaseType.MySQL, showTablesStatement, null, Collections.emptyList());\n         assertThat(rewriteEngine.rewrite(true).toSQL(null, tableTokens, shardingRule, shardingDataSourceMetaData).getSql(), is(\"SHOW COLUMNS FROM table_1\"));\n     }\n     \n     @Test\n     public void assertTableTokenWithSchemaFromSchemaForShow() {\n-        showTablesStatement.addSQLToken(new TableToken(18, \"sharding_db\".length() + 1, \"table_x\"));\n+        showTablesStatement.addSQLToken(new TableToken(18, \"sharding_db\".length() + 1, \"table_x\", \"\", \"\"));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \n                 \"SHOW COLUMNS FROM sharding_db.table_x FROM sharding_db\", DatabaseType.MySQL, showTablesStatement, null, Collections.emptyList());\n         assertThat(rewriteEngine.rewrite(true).toSQL(null, tableTokens, shardingRule, shardingDataSourceMetaData).getSql(), is(\"SHOW COLUMNS FROM table_1 FROM sharding_db\"));\n     }\n     \n     @Test\n     public void assertTableTokenWithBackQuoteWithSchemaForShow() {\n-        showTablesStatement.addSQLToken(new TableToken(18, \"sharding_db\".length() + 1, \"`table_x`\"));\n+        showTablesStatement.addSQLToken(new TableToken(18, \"sharding_db\".length() + 1, \"table_x\", \"`\", \"`\"));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \"SHOW COLUMNS FROM sharding_db.`table_x`\", DatabaseType.MySQL, showTablesStatement, null, Collections.emptyList());\n         assertThat(rewriteEngine.rewrite(true).toSQL(null, tableTokens, shardingRule, shardingDataSourceMetaData).getSql(), is(\"SHOW COLUMNS FROM `table_1`\"));\n     }\n     \n     @Test\n     public void assertTableTokenWithBackQuoteWithSchemaFromSchemaForShow() {\n-        showTablesStatement.addSQLToken(new TableToken(18, \"sharding_db\".length() + 1, \"`table_x`\"));\n+        showTablesStatement.addSQLToken(new TableToken(18, \"sharding_db\".length() + 1, \"table_x\", \"`\", \"`\"));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \n                 \"SHOW COLUMNS FROM sharding_db.`table_x` FROM sharding_db\", DatabaseType.MySQL, showTablesStatement, null, Collections.emptyList());\n         assertThat(rewriteEngine.rewrite(true).toSQL(null, tableTokens, shardingRule, shardingDataSourceMetaData).getSql(), is(\"SHOW COLUMNS FROM `table_1` FROM sharding_db\"));\n     }\n     \n     @Test\n     public void assertTableTokenWithSchemaWithBackQuoteForShow() {\n-        showTablesStatement.addSQLToken(new TableToken(18, \"`sharding_db`\".length() + 1, \"`table_x`\"));\n+        showTablesStatement.addSQLToken(new TableToken(18, \"`sharding_db`\".length() + 1, \"table_x\", \"`\", \"`\"));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \"SHOW COLUMNS FROM `sharding_db`.`table_x`\", DatabaseType.MySQL, showTablesStatement, null, Collections.emptyList());\n         assertThat(rewriteEngine.rewrite(true).toSQL(null, tableTokens, shardingRule, shardingDataSourceMetaData).getSql(), is(\"SHOW COLUMNS FROM `table_1`\"));\n     }\n     \n     @Test\n     public void assertTableTokenWithSchemaWithBackQuoteFromSchemaForShow() {\n-        showTablesStatement.addSQLToken(new TableToken(18, \"`sharding_db`\".length() + 1, \"`table_x`\"));\n+        showTablesStatement.addSQLToken(new TableToken(18, \"`sharding_db`\".length() + 1, \"table_x\", \"`\", \"`\"));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \n                 \"SHOW COLUMNS FROM `sharding_db`.`table_x` FROM sharding_db\", DatabaseType.MySQL, showTablesStatement, null, Collections.emptyList());\n         assertThat(rewriteEngine.rewrite(true).toSQL(null, tableTokens, shardingRule, shardingDataSourceMetaData).getSql(), is(\"SHOW COLUMNS FROM `table_1` FROM sharding_db\"));\n     }\n     \n     @Test\n     public void assertTableTokenWithSchemaForSelect() {\n-        selectStatement.addSQLToken(new TableToken(14, \"sharding_db\".length() + 1, \"table_x\"));\n+        selectStatement.addSQLToken(new TableToken(14, \"sharding_db\".length() + 1, \"table_x\", \"\", \"\"));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \"SELECT * FROM sharding_db.table_x\", DatabaseType.MySQL, selectStatement, null, Collections.emptyList());\n         assertThat(rewriteEngine.rewrite(true).toSQL(null, tableTokens, shardingRule, shardingDataSourceMetaData).getSql(), is(\"SELECT * FROM table_1\"));\n     }\n     \n     @Test\n     public void assertTableTokenWithSchemaForInsert() {\n-        insertStatement.addSQLToken(new TableToken(12, \"sharding_db\".length() + 1, \"table_x\"));\n+        insertStatement.addSQLToken(new TableToken(12, \"sharding_db\".length() + 1, \"table_x\", \"\", \"\"));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \n                 \"INSERT INTO sharding_db.table_x (order_id, user_id, status) values (1, 1, 'OK')\", DatabaseType.MySQL, insertStatement, null, Collections.emptyList());\n         assertThat(rewriteEngine.rewrite(false).toSQL(\n@@ -551,15 +551,15 @@ public void assertTableTokenWithSchemaForInsert() {\n     \n     @Test\n     public void assertTableTokenWithSchemaForUpdate() {\n-        dmlStatement.addSQLToken(new TableToken(7, \"`sharding_db`\".length() + 1, \"table_x\"));\n+        dmlStatement.addSQLToken(new TableToken(7, \"`sharding_db`\".length() + 1, \"table_x\", \"\", \"\"));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \n                 \"UPDATE `sharding_db`.table_x SET user_id=1 WHERE order_id=1\", DatabaseType.MySQL, dmlStatement, null, Collections.emptyList());\n         assertThat(rewriteEngine.rewrite(false).toSQL(null, tableTokens, shardingRule, shardingDataSourceMetaData).getSql(), is(\"UPDATE table_1 SET user_id=1 WHERE order_id=1\"));\n     }\n     \n     @Test\n     public void assertTableTokenWithSchemaForDelete() {\n-        dmlStatement.addSQLToken(new TableToken(12, \"`sharding_db`\".length() + 1, \"`table_x`\"));\n+        dmlStatement.addSQLToken(new TableToken(12, \"`sharding_db`\".length() + 1, \"table_x\", \"`\", \"`\"));\n         SQLRewriteEngine rewriteEngine = new SQLRewriteEngine(shardingRule, \"DELETE FROM `sharding_db`.`table_x` WHERE user_id=1\", DatabaseType.MySQL, dmlStatement, null, Collections.emptyList());\n         assertThat(rewriteEngine.rewrite(true).toSQL(null, tableTokens, shardingRule, shardingDataSourceMetaData).getSql(), is(\"DELETE FROM `table_1` WHERE user_id=1\"));\n     }",
      "parent_sha": "6f93d683a8c153562a9a09457b4f6b49e0c8d6ca"
    }
  },
  {
    "oid": "fad2d18f48bacbcad06564cd64d0dcff43ab0956",
    "message": "modify getEncryptColumnName()",
    "date": "2019-02-15T00:46:39Z",
    "url": "https://github.com/apache/shardingsphere/commit/fad2d18f48bacbcad06564cd64d0dcff43ab0956",
    "details": {
      "sha": "8799cf84c4e00eff6368f9915c0671119a45061e",
      "filename": "sharding-core/src/main/java/org/apache/shardingsphere/core/rewrite/SQLRewriteEngine.java",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/apache/shardingsphere/blob/fad2d18f48bacbcad06564cd64d0dcff43ab0956/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngine.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/fad2d18f48bacbcad06564cd64d0dcff43ab0956/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngine.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngine.java?ref=fad2d18f48bacbcad06564cd64d0dcff43ab0956",
      "patch": "@@ -370,14 +370,6 @@ public Comparable<?> apply(final Comparable<?> input) {\n         });\n     }\n     \n-    private void encryptParameters(final Map<Integer, Integer> positionIndexes, final List<Comparable<?>> encryptColumnValues) {\n-        if (!positionIndexes.isEmpty()) {\n-            for (Entry<Integer, Integer> entry : positionIndexes.entrySet()) {\n-                parameters.set(entry.getValue(), encryptColumnValues.get(entry.getKey()));\n-            }\n-        }\n-    }\n-    \n     private Map<Integer, Integer> getPositionIndexes(final EncryptColumnToken encryptColumnToken, final Condition encryptCondition) {\n         if (encryptColumnToken.isInWhere()) {\n             return encryptCondition.getPositionIndexMap();\n@@ -389,6 +381,14 @@ private Map<Integer, Integer> getPositionIndexes(final EncryptColumnToken encryp\n         return new LinkedHashMap<>();\n     }\n     \n+    private void encryptParameters(final Map<Integer, Integer> positionIndexes, final List<Comparable<?>> encryptColumnValues) {\n+        if (!positionIndexes.isEmpty()) {\n+            for (Entry<Integer, Integer> entry : positionIndexes.entrySet()) {\n+                parameters.set(entry.getValue(), encryptColumnValues.get(entry.getKey()));\n+            }\n+        }\n+    }\n+    \n     private Map<Integer, Comparable<?>> getPositionValues(final Collection<Integer> positions, final List<Comparable<?>> encryptColumnValues) {\n         Map<Integer, Comparable<?>> indexValueMap = new LinkedHashMap<>();\n         for (int each : positions) {\n@@ -426,11 +426,11 @@ private ShardingOperator getShardingOperator(final EncryptColumnToken encryptCol\n     private String getEncryptColumnName(final EncryptColumnToken encryptColumnToken) {\n         ShardingEncryptor shardingEncryptor = shardingRule.getShardingEncryptorEngine().getShardingEncryptor(encryptColumnToken.getColumn().getTableName(), encryptColumnToken.getColumn().getName()).get();\n         if (shardingEncryptor instanceof ShardingQueryAssistedEncryptor) {\n-            Optional<String> assistedColumnName = shardingRule.getTableRule(encryptColumnToken.getColumn().getTableName()).getShardingEncryptorStrategy().getAssistedQueryColumn(encryptColumnToken.getColumn().getName());\n-            if (!assistedColumnName.isPresent()) {\n+            Optional<String> result = shardingRule.getTableRule(encryptColumnToken.getColumn().getTableName()).getShardingEncryptorStrategy().getAssistedQueryColumn(encryptColumnToken.getColumn().getName());\n+            if (!result.isPresent()) {\n                 throw new ShardingException(\"Can not find the assistedColumn of %s\", encryptColumnToken.getColumn().getName());\n             }\n-            return assistedColumnName.get();\n+            return result.get();\n         }\n         return encryptColumnToken.getColumn().getName();\n     }",
      "parent_sha": "1c858660c02210a63d677107d1fffebef56acc27"
    }
  },
  {
    "oid": "d96a7b653ad9a85e238bede9e85b5e3ab9204372",
    "message": "#1517, refine CommandCompletePacket",
    "date": "2019-01-30T07:48:53Z",
    "url": "https://github.com/apache/shardingsphere/commit/d96a7b653ad9a85e238bede9e85b5e3ab9204372",
    "details": {
      "sha": "dedf7d6d1e8e26745f1f154fafc3457d86f321cb",
      "filename": "sharding-proxy-postgresql/src/main/java/org/apache/shardingsphere/shardingproxypg/transport/postgresql/packet/generic/CommandCompletePacket.java",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/shardingsphere/blob/d96a7b653ad9a85e238bede9e85b5e3ab9204372/sharding-proxy-postgresql%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingproxypg%2Ftransport%2Fpostgresql%2Fpacket%2Fgeneric%2FCommandCompletePacket.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/d96a7b653ad9a85e238bede9e85b5e3ab9204372/sharding-proxy-postgresql%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingproxypg%2Ftransport%2Fpostgresql%2Fpacket%2Fgeneric%2FCommandCompletePacket.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-proxy-postgresql%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingproxypg%2Ftransport%2Fpostgresql%2Fpacket%2Fgeneric%2FCommandCompletePacket.java?ref=d96a7b653ad9a85e238bede9e85b5e3ab9204372",
      "patch": "@@ -29,7 +29,7 @@\n  * @author zhangyonglun\n  */\n @RequiredArgsConstructor\n-public final class CommandComplete implements PostgreSQLPacket {\n+public final class CommandCompletePacket implements PostgreSQLPacket {\n     \n     @Getter\n     private final char messageType = PostgreSQLCommandPacketType.COMMAND_COMPLETE.getValue();",
      "previous_filename": "sharding-proxy-postgresql/src/main/java/org/apache/shardingsphere/shardingproxypg/transport/postgresql/packet/generic/CommandComplete.java",
      "parent_sha": "7a73ffc4f954aa86fb1d40945b6e567bc7579e1a"
    }
  },
  {
    "oid": "efc2af0d1d88b04e1459a5eb351a6b7e1f527fb6",
    "message": "add isHasShardingQueryAssistedEncryptor()",
    "date": "2019-03-12T08:38:46Z",
    "url": "https://github.com/apache/shardingsphere/commit/efc2af0d1d88b04e1459a5eb351a6b7e1f527fb6",
    "details": {
      "sha": "f9b4cc8a5d7c7e6921ea8854ab895af137eb63f9",
      "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/encrypt/ShardingEncryptorEngine.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/apache/shardingsphere/blob/efc2af0d1d88b04e1459a5eb351a6b7e1f527fb6/sharding-core%2Fsharding-core-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Fstrategy%2Fencrypt%2FShardingEncryptorEngine.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/efc2af0d1d88b04e1459a5eb351a6b7e1f527fb6/sharding-core%2Fsharding-core-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Fstrategy%2Fencrypt%2FShardingEncryptorEngine.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsharding-core-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Fstrategy%2Fencrypt%2FShardingEncryptorEngine.java?ref=efc2af0d1d88b04e1459a5eb351a6b7e1f527fb6",
      "patch": "@@ -19,6 +19,7 @@\n \n import com.google.common.base.Optional;\n import org.apache.shardingsphere.spi.encrypt.ShardingEncryptor;\n+import org.apache.shardingsphere.spi.encrypt.ShardingQueryAssistedEncryptor;\n \n import java.util.LinkedHashMap;\n import java.util.Map;\n@@ -66,13 +67,13 @@ public Optional<ShardingEncryptor> getShardingEncryptor(final String logicTableN\n     }\n     \n     /**\n-     * Is has sharding encryptor strategy or not.\n+     * Is has sharding query assisted encryptor or not.\n      * \n      * @param logicTableName logic table name\n-     * @return sharding encryptor strategy or not\n+     * @return has sharding query assisted encryptor or not\n      */\n-    public boolean isHasShardingEncryptorStrategy(final String logicTableName) {\n-        return shardingEncryptorStrategies.keySet().contains(logicTableName);\n+    public boolean isHasShardingQueryAssistedEncryptor(final String logicTableName) {\n+        return shardingEncryptorStrategies.keySet().contains(logicTableName) && shardingEncryptorStrategies.get(logicTableName).getShardingEncryptor() instanceof ShardingQueryAssistedEncryptor;\n     }\n     \n     /**",
      "parent_sha": "d3a9876a9467c82cabb2d3c8c83ba40adde87c08"
    }
  },
  {
    "oid": "9a6c0dc78a41f7b958e828cb93d6f6797ec36a30",
    "message": "#1172, fix test case",
    "date": "2018-09-11T14:11:52Z",
    "url": "https://github.com/apache/shardingsphere/commit/9a6c0dc78a41f7b958e828cb93d6f6797ec36a30",
    "details": {
      "sha": "1dc0d5e044f325b075298bbebd682e817de8ef38",
      "filename": "sharding-jdbc/src/test/java/io/shardingsphere/core/executor/StatementExecutorTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/apache/shardingsphere/blob/9a6c0dc78a41f7b958e828cb93d6f6797ec36a30/sharding-jdbc%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fexecutor%2FStatementExecutorTest.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/9a6c0dc78a41f7b958e828cb93d6f6797ec36a30/sharding-jdbc%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fexecutor%2FStatementExecutorTest.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fexecutor%2FStatementExecutorTest.java?ref=9a6c0dc78a41f7b958e828cb93d6f6797ec36a30",
      "patch": "@@ -159,8 +159,11 @@ public void assertExecuteQueryForMultipleStatementsFailure() throws SQLException\n     @Test\n     public void assertExecuteUpdateForSingleStatementSuccess() throws SQLException {\n         Statement statement = mock(Statement.class);\n+        Connection connection = mock(Connection.class);\n+        DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n         when(statement.executeUpdate(DML_SQL)).thenReturn(10);\n-        when(statement.getConnection()).thenReturn(mock(Connection.class));\n+        when(statement.getConnection()).thenReturn(connection);\n+        when(connection.getMetaData()).thenReturn(databaseMetaData);\n         StatementExecutor actual = new MemoryStrictlyStatementExecutor(SQLType.DML, getExecuteTemplate(), createStatementExecuteUnits(DML_SQL, statement, \"ds_0\"));\n         assertThat(actual.executeUpdate(), is(10));\n         verify(statement).executeUpdate(DML_SQL);",
      "parent_sha": "1cfa334b8012c29eb1629ea80a8d7be634f474e5"
    }
  },
  {
    "oid": "885980ed674fc345c9325a18aee1eb0ee6cf8150",
    "message": "add test case for MySQLStringLenencBinaryProtocolValue",
    "date": "2019-03-12T04:25:21Z",
    "url": "https://github.com/apache/shardingsphere/commit/885980ed674fc345c9325a18aee1eb0ee6cf8150",
    "details": {
      "sha": "b6c09632440984ddd1fb7f0f258bde412dbae244",
      "filename": "sharding-proxy/sharding-proxy-transport/sharding-proxy-transport-mysql/src/test/java/org/apache/shardingsphere/shardingproxy/transport/mysql/packet/command/query/binary/execute/protocol/MySQLStringLenencBinaryProtocolValueTest.java",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/apache/shardingsphere/blob/885980ed674fc345c9325a18aee1eb0ee6cf8150/sharding-proxy%2Fsharding-proxy-transport%2Fsharding-proxy-transport-mysql%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingproxy%2Ftransport%2Fmysql%2Fpacket%2Fcommand%2Fquery%2Fbinary%2Fexecute%2Fprotocol%2FMySQLStringLenencBinaryProtocolValueTest.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/885980ed674fc345c9325a18aee1eb0ee6cf8150/sharding-proxy%2Fsharding-proxy-transport%2Fsharding-proxy-transport-mysql%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingproxy%2Ftransport%2Fmysql%2Fpacket%2Fcommand%2Fquery%2Fbinary%2Fexecute%2Fprotocol%2FMySQLStringLenencBinaryProtocolValueTest.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-proxy%2Fsharding-proxy-transport%2Fsharding-proxy-transport-mysql%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingproxy%2Ftransport%2Fmysql%2Fpacket%2Fcommand%2Fquery%2Fbinary%2Fexecute%2Fprotocol%2FMySQLStringLenencBinaryProtocolValueTest.java?ref=885980ed674fc345c9325a18aee1eb0ee6cf8150",
      "patch": "@@ -35,14 +35,20 @@ public final class MySQLStringLenencBinaryProtocolValueTest {\n     private MySQLPacketPayload payload;\n     \n     @Test\n-    public void assertReadStringLenenc() {\n+    public void assertRead() {\n         when(payload.readStringLenenc()).thenReturn(\"value\");\n         assertThat(new MySQLStringLenencBinaryProtocolValue().read(payload), is((Object) \"value\"));\n     }\n     \n     @Test\n-    public void assertWriteStringLenenc() {\n+    public void assertWriteString() {\n         new MySQLStringLenencBinaryProtocolValue().write(payload, \"value\");\n         verify(payload).writeStringLenenc(\"value\");\n     }\n+    \n+    @Test\n+    public void assertWriteByteArray() {\n+        new MySQLStringLenencBinaryProtocolValue().write(payload, new byte[] {});\n+        verify(payload).writeBytesLenenc(new byte[] {});\n+    }\n }",
      "parent_sha": "e00a2ac60ca06b2338f890d40f440e7cd783322c"
    }
  },
  {
    "oid": "bba015274946668af675f25cdcb30f1ab49a0e9d",
    "message": "resolve conflict.",
    "date": "2019-03-04T11:19:24Z",
    "url": "https://github.com/apache/shardingsphere/commit/bba015274946668af675f25cdcb30f1ab49a0e9d",
    "details": {
      "sha": "a9182448d7f507cc130558a874cc35468f5b5add",
      "filename": "sharding-proxy/sharding-proxy-transport/sharding-proxy-transport-mysql/src/main/java/org/apache/shardingsphere/shardingproxy/transport/mysql/packet/command/query/binary/close/MySQLComStmtClosePacketExecutor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/apache/shardingsphere/blob/bba015274946668af675f25cdcb30f1ab49a0e9d/sharding-proxy%2Fsharding-proxy-transport%2Fsharding-proxy-transport-mysql%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingproxy%2Ftransport%2Fmysql%2Fpacket%2Fcommand%2Fquery%2Fbinary%2Fclose%2FMySQLComStmtClosePacketExecutor.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/bba015274946668af675f25cdcb30f1ab49a0e9d/sharding-proxy%2Fsharding-proxy-transport%2Fsharding-proxy-transport-mysql%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingproxy%2Ftransport%2Fmysql%2Fpacket%2Fcommand%2Fquery%2Fbinary%2Fclose%2FMySQLComStmtClosePacketExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-proxy%2Fsharding-proxy-transport%2Fsharding-proxy-transport-mysql%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingproxy%2Ftransport%2Fmysql%2Fpacket%2Fcommand%2Fquery%2Fbinary%2Fclose%2FMySQLComStmtClosePacketExecutor.java?ref=bba015274946668af675f25cdcb30f1ab49a0e9d",
      "patch": "@@ -22,7 +22,6 @@\n import org.apache.shardingsphere.shardingproxy.transport.common.packet.CommandPacketExecutor;\n import org.apache.shardingsphere.shardingproxy.transport.mysql.packet.MySQLPacket;\n \n-import java.sql.SQLException;\n import java.util.Collection;\n import java.util.Collections;\n \n@@ -34,7 +33,7 @@\n public final class MySQLComStmtClosePacketExecutor implements CommandPacketExecutor<MySQLPacket> {\n     \n     @Override\n-    public Collection<MySQLPacket> execute(final BackendConnection backendConnection, final CommandPacket commandPacket) throws SQLException {\n+    public Collection<MySQLPacket> execute(final BackendConnection backendConnection, final CommandPacket commandPacket) {\n         MySQLComStmtClosePacket mySQLComStmtClosePacket = (MySQLComStmtClosePacket) commandPacket;\n         mySQLComStmtClosePacket.removeCachedStatement();\n         return Collections.emptyList();",
      "parent_sha": "9fcdf6efc63f7ce5ecfd70e874dea6a74c9bd022"
    }
  },
  {
    "oid": "d997430aa192fbe720d8ceb3064dc35e86bdd5ad",
    "message": "adjust position",
    "date": "2018-11-21T01:33:54Z",
    "url": "https://github.com/apache/shardingsphere/commit/d997430aa192fbe720d8ceb3064dc35e86bdd5ad",
    "details": {
      "sha": "3c9325421e18b20123c6cf431432c98b11d198e5",
      "filename": "sharding-core/src/main/java/io/shardingsphere/core/parsing/parser/clause/SelectListClauseParser.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/apache/shardingsphere/blob/d997430aa192fbe720d8ceb3064dc35e86bdd5ad/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fparsing%2Fparser%2Fclause%2FSelectListClauseParser.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/d997430aa192fbe720d8ceb3064dc35e86bdd5ad/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fparsing%2Fparser%2Fclause%2FSelectListClauseParser.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fparsing%2Fparser%2Fclause%2FSelectListClauseParser.java?ref=d997430aa192fbe720d8ceb3064dc35e86bdd5ad",
      "patch": "@@ -77,7 +77,7 @@ private SelectItem parseSelectItem(final SelectStatement selectStatement) {\n         if (isRowNumberSelectItem()) {\n             result = parseRowNumberSelectItem(selectStatement);\n         } else if (isDistinctSelectItem()) {\n-        \n+            result = ;\n         } else if (isStarSelectItem()) {\n             selectStatement.setContainStar(true);\n             result = parseStarSelectItem();\n@@ -96,10 +96,6 @@ private SelectItem parseSelectItem(final SelectStatement selectStatement) {\n     \n     protected abstract SelectItem parseRowNumberSelectItem(SelectStatement selectStatement);\n     \n-    private boolean isStarSelectItem() {\n-        return Symbol.STAR.getLiterals().equals(SQLUtil.getExactlyValue(lexerEngine.getCurrentToken().getLiterals()));\n-    }\n-    \n     private boolean isDistinctSelectItem() {\n         return lexerEngine.equalAny(DefaultKeyword.DISTINCT);\n     }\n@@ -114,6 +110,10 @@ private SelectItem parseDistinctSelectItem(final SelectStatement selectStatement\n         return new AggregationSelectItem(aggregationType, lexerEngine.skipParentheses(selectStatement), aliasExpressionParser.parseSelectItemAlias());\n     }\n     \n+    private boolean isStarSelectItem() {\n+        return Symbol.STAR.getLiterals().equals(SQLUtil.getExactlyValue(lexerEngine.getCurrentToken().getLiterals()));\n+    }\n+    \n     private SelectItem parseStarSelectItem() {\n         lexerEngine.nextToken();\n         aliasExpressionParser.parseSelectItemAlias();",
      "parent_sha": "71ddfe015f49aa4c82647d8fc96bff094021e4b9"
    }
  },
  {
    "oid": "4e9b2c038c62a427d1ed084fe87d1f57ccade933",
    "message": "add exception coverage for AtomikosTransactionManagerTest",
    "date": "2018-08-27T15:38:07Z",
    "url": "https://github.com/apache/shardingsphere/commit/4e9b2c038c62a427d1ed084fe87d1f57ccade933",
    "details": {
      "sha": "8b2da071ccad452a82200bdeb201d5b410eec379",
      "filename": "sharding-transaction/src/test/java/io/shardingsphere/transaction/manager/xa/atomikos/AtomikosTransactionManagerTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apache/shardingsphere/blob/4e9b2c038c62a427d1ed084fe87d1f57ccade933/sharding-transaction%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Ftransaction%2Fmanager%2Fxa%2Fatomikos%2FAtomikosTransactionManagerTest.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/4e9b2c038c62a427d1ed084fe87d1f57ccade933/sharding-transaction%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Ftransaction%2Fmanager%2Fxa%2Fatomikos%2FAtomikosTransactionManagerTest.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-transaction%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Ftransaction%2Fmanager%2Fxa%2Fatomikos%2FAtomikosTransactionManagerTest.java?ref=4e9b2c038c62a427d1ed084fe87d1f57ccade933",
      "patch": "@@ -68,7 +68,7 @@ public void assertBeginWithoutException() throws Exception {\n     \n     @Test(expected = SQLException.class)\n     public void assertBeginWithException() throws Exception {\n-        doThrow(SQLException.class).when(userTransactionManager).begin();\n+        doThrow(SystemException.class).when(userTransactionManager).begin();\n         new AtomikosTransactionManager().begin(new XATransactionEvent(TransactionOperationType.BEGIN));\n     }\n     \n@@ -80,7 +80,7 @@ public void assertCommitWithoutException() throws Exception {\n     \n     @Test(expected = SQLException.class)\n     public void assertCommitWithException() throws Exception {\n-        doThrow(SQLException.class).when(userTransactionManager).commit();\n+        doThrow(SystemException.class).when(userTransactionManager).commit();\n         new AtomikosTransactionManager().commit(new XATransactionEvent(TransactionOperationType.COMMIT));\n     }\n     \n@@ -92,7 +92,7 @@ public void assertRollbackWithoutException() throws Exception {\n     \n     @Test(expected = SQLException.class)\n     public void assertRollbackWithException() throws Exception {\n-        doThrow(SQLException.class).when(userTransactionManager).rollback();\n+        doThrow(SystemException.class).when(userTransactionManager).rollback();\n         new AtomikosTransactionManager().rollback(new XATransactionEvent(TransactionOperationType.ROLLBACK));\n     }\n     ",
      "parent_sha": "fb78186bba7d8134d5a7e69db20b062e66062dc3"
    }
  },
  {
    "oid": "781de70c6bad5ec2a06f756c00b583e7180b8392",
    "message": "Update javadoc for MySQLServerErrorCode (#10266)",
    "date": "2021-05-07T08:24:43Z",
    "url": "https://github.com/apache/shardingsphere/commit/781de70c6bad5ec2a06f756c00b583e7180b8392",
    "details": {
      "sha": "f6c3a710ac238a1ae2b4262cdfbef46905980fc5",
      "filename": "shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/constant/MySQLServerErrorCode.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apache/shardingsphere/blob/781de70c6bad5ec2a06f756c00b583e7180b8392/shardingsphere-db-protocol%2Fshardingsphere-db-protocol-mysql%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fdb%2Fprotocol%2Fmysql%2Fconstant%2FMySQLServerErrorCode.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/781de70c6bad5ec2a06f756c00b583e7180b8392/shardingsphere-db-protocol%2Fshardingsphere-db-protocol-mysql%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fdb%2Fprotocol%2Fmysql%2Fconstant%2FMySQLServerErrorCode.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/shardingsphere-db-protocol%2Fshardingsphere-db-protocol-mysql%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fdb%2Fprotocol%2Fmysql%2Fconstant%2FMySQLServerErrorCode.java?ref=781de70c6bad5ec2a06f756c00b583e7180b8392",
      "patch": "@@ -24,14 +24,14 @@\n /**\n  * Server error code for MySQL.\n  * \n- * @see <a href=\"https://dev.mysql.com/doc/refman/5.7/en/server-error-reference.html\">Server Error Message Reference</a>\n+ * @see <a href=\"https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html\">Server Error Message Reference</a>\n  */\n @RequiredArgsConstructor\n @Getter\n public enum MySQLServerErrorCode implements SQLErrorCode {\n-\n+    \n     ER_DBACCESS_DENIED_ERROR(1044, \"42000\", \"Access denied for user '%s'@'%s' to database '%s'\"),\n-\n+    \n     ER_ACCESS_DENIED_ERROR(1045, \"28000\", \"Access denied for user '%s'@'%s' (using password: %s)\"),\n     \n     ER_NO_DB_ERROR(1046, \"3D000\", \"No database selected\"),",
      "parent_sha": "29f63898374d057361884a7c81d5f092dd0aee92"
    }
  },
  {
    "oid": "1f0f17fffa6391e72592e58d236cfd030463b601",
    "message": "Using multithread to load tablemetadata from default data source (#4091)\n\n* refactoring loadDefaultTables()\r\n\r\n* modify getTableMetaDataList()\r\n\r\n* simply it",
    "date": "2020-01-27T13:45:54Z",
    "url": "https://github.com/apache/shardingsphere/commit/1f0f17fffa6391e72592e58d236cfd030463b601",
    "details": {
      "sha": "4fa09d951864b72e4ecedbad1e3a4dc8ddcc307b",
      "filename": "sharding-core/sharding-core-execute/src/main/java/org/apache/shardingsphere/sharding/execute/metadata/loader/ShardingTableMetaDataLoader.java",
      "status": "modified",
      "additions": 36,
      "deletions": 29,
      "changes": 65,
      "blob_url": "https://github.com/apache/shardingsphere/blob/1f0f17fffa6391e72592e58d236cfd030463b601/sharding-core%2Fsharding-core-execute%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fsharding%2Fexecute%2Fmetadata%2Floader%2FShardingTableMetaDataLoader.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/1f0f17fffa6391e72592e58d236cfd030463b601/sharding-core%2Fsharding-core-execute%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fsharding%2Fexecute%2Fmetadata%2Floader%2FShardingTableMetaDataLoader.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsharding-core-execute%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fsharding%2Fexecute%2Fmetadata%2Floader%2FShardingTableMetaDataLoader.java?ref=1f0f17fffa6391e72592e58d236cfd030463b601",
      "patch": "@@ -45,6 +45,7 @@\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.LinkedHashMap;\n import java.util.LinkedHashSet;\n import java.util.LinkedList;\n import java.util.List;\n@@ -76,13 +77,13 @@ public final class ShardingTableMetaDataLoader implements TableMetaDataLoader<Sh\n     \n     @Override\n     public TableMetaData load(final String logicTableName, final ShardingRule shardingRule) throws SQLException {\n-        List<TableMetaData> actualTableMetaDataList = load(getDataNodeGroups(shardingRule.getTableRule(logicTableName)), shardingRule, logicTableName);\n+        final String generateKeyColumnName = shardingRule.findGenerateKeyColumnName(logicTableName).orNull();\n+        List<TableMetaData> actualTableMetaDataList = load(getDataNodeGroups(shardingRule.getTableRule(logicTableName)), shardingRule, generateKeyColumnName);\n         checkUniformed(logicTableName, actualTableMetaDataList);\n         return actualTableMetaDataList.iterator().next();\n     }\n     \n-    private List<TableMetaData> load(final Map<String, List<DataNode>> dataNodeGroups, final ShardingRule shardingRule, final String logicTableName) throws SQLException {\n-        final String generateKeyColumnName = shardingRule.findGenerateKeyColumnName(logicTableName).orNull();\n+    private List<TableMetaData> load(final Map<String, List<DataNode>> dataNodeGroups, final ShardingRule shardingRule, final String generateKeyColumnName) throws SQLException {\n         return executorEngine.execute(getDataNodeInputGroups(dataNodeGroups), new GroupedCallback<DataNode, TableMetaData>() {\n             \n             @Override\n@@ -213,16 +214,11 @@ private Map<String, TableMetaData> loadDefaultTables(final ShardingRule sharding\n             return Collections.emptyMap();\n         }\n         Collection<String> tableNames = loadAllTableNames(actualDefaultDataSourceName.get());\n-        List<TableMetaData> tableMetaDataList = executorEngine.execute(getTableNamesInputGroups(tableNames), new GroupedCallback<String, TableMetaData>() {\n-            \n-            @Override\n-            public Collection<TableMetaData> execute(final Collection<String> inputs, final boolean isTrunkThread, final Map<String, Object> dataMap) throws SQLException {\n-                String logicTableName = inputs.iterator().next();\n-                Collection<TableMetaData> result = new LinkedList<>();\n-                result.add(load(logicTableName, shardingRule));\n-                return result;\n-            }\n-        });\n+        List<TableMetaData> tableMetaDataList = getTableMetaDataList(shardingRule, tableNames);\n+        return loadDefaultTables(tableNames, tableMetaDataList);\n+    }\n+    \n+    private Map<String, TableMetaData> loadDefaultTables(final Collection<String> tableNames, final List<TableMetaData> tableMetaDataList) {\n         Map<String, TableMetaData> result = new HashMap<>(tableNames.size(), 1);\n         Iterator<String> tabNameIterator = tableNames.iterator();\n         for (TableMetaData each : tableMetaDataList) {\n@@ -231,29 +227,40 @@ public Collection<TableMetaData> execute(final Collection<String> inputs, final\n         return result;\n     }\n     \n-    private Collection<InputGroup<String>> getTableNamesInputGroups(final Collection<String> tableNames) {\n-        Collection<InputGroup<String>> result = new LinkedList<>();\n-        for (String each : tableNames) {\n-            result.add(new InputGroup<>(Lists.newArrayList(each)));\n+    private Collection<String> loadAllTableNames(final String dataSourceName) throws SQLException {\n+        DataSourceMetaData dataSourceMetaData = dataSourceMetas.getDataSourceMetaData(dataSourceName);\n+        String catalog = null == dataSourceMetaData ? null : dataSourceMetaData.getCatalog();\n+        String schemaName = null == dataSourceMetaData ? null : dataSourceMetaData.getSchema();\n+        return loadAllTableNames(dataSourceName, catalog, schemaName);\n+    }\n+    \n+    private Collection<String> loadAllTableNames(final String dataSourceName, final String catalog, final String schemaName) throws SQLException {\n+        Collection<String> result = new LinkedHashSet<>();\n+        try (Connection connection = connectionManager.getConnection(dataSourceName);\n+             ResultSet resultSet = connection.getMetaData().getTables(catalog, schemaName, null, new String[]{\"TABLE\"})) {\n+            result.addAll(loadTableName(resultSet));\n         }\n         return result;\n     }\n     \n-    private Collection<String> loadAllTableNames(final String dataSourceName) throws SQLException {\n+    private Collection<String> loadTableName(final ResultSet resultSet) throws SQLException {\n         Collection<String> result = new LinkedHashSet<>();\n-        DataSourceMetaData dataSourceMetaData = dataSourceMetas.getDataSourceMetaData(dataSourceName);\n-        String catalog = null == dataSourceMetaData ? null : dataSourceMetaData.getCatalog();\n-        String schemaName = null == dataSourceMetaData ? null : dataSourceMetaData.getSchema();\n-        try (\n-                Connection connection = connectionManager.getConnection(dataSourceName);\n-                ResultSet resultSet = connection.getMetaData().getTables(catalog, schemaName, null, new String[]{\"TABLE\"})) {\n-            while (resultSet.next()) {\n-                String tableName = resultSet.getString(\"TABLE_NAME\");\n-                if (!tableName.contains(\"$\") && !tableName.contains(\"/\")) {\n-                    result.add(tableName);\n-                }\n+        while (resultSet.next()) {\n+            String tableName = resultSet.getString(\"TABLE_NAME\");\n+            if (!tableName.contains(\"$\") && !tableName.contains(\"/\")) {\n+                result.add(tableName);\n             }\n         }\n         return result;\n     }\n+    \n+    private List<TableMetaData> getTableMetaDataList(final ShardingRule shardingRule, final Collection<String> tableNames) throws SQLException {\n+        Map<String, List<DataNode>> result = new LinkedHashMap<>();\n+        String defaultDataSource = shardingRule.getShardingDataSourceNames().getDefaultDataSourceName();\n+        result.put(defaultDataSource, new LinkedList<DataNode>());\n+        for (String each : tableNames) {\n+            result.get(defaultDataSource).addAll(getDataNodeGroups(shardingRule.getTableRule(each)).get(defaultDataSource));\n+        }\n+        return load(result, shardingRule, null);\n+    }\n }",
      "parent_sha": "771dde95ed9680c33bd35e8459f202b53cc05270"
    }
  },
  {
    "oid": "56474b8e17337a25a05e31683764a3cd0988a3ed",
    "message": "support decorate comment sql and index sql (#17544)",
    "date": "2022-05-11T06:33:26Z",
    "url": "https://github.com/apache/shardingsphere/commit/56474b8e17337a25a05e31683764a3cd0988a3ed",
    "details": {
      "sha": "ddfd926fd48a1535a02a0a2f1c477a9d49bc02a0",
      "filename": "shardingsphere-kernel/shardingsphere-data-pipeline/shardingsphere-data-pipeline-core/src/main/java/org/apache/shardingsphere/data/pipeline/core/metadata/generator/PipelineDDLGenerator.java",
      "status": "modified",
      "additions": 50,
      "deletions": 30,
      "changes": 80,
      "blob_url": "https://github.com/apache/shardingsphere/blob/56474b8e17337a25a05e31683764a3cd0988a3ed/shardingsphere-kernel%2Fshardingsphere-data-pipeline%2Fshardingsphere-data-pipeline-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fdata%2Fpipeline%2Fcore%2Fmetadata%2Fgenerator%2FPipelineDDLGenerator.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/56474b8e17337a25a05e31683764a3cd0988a3ed/shardingsphere-kernel%2Fshardingsphere-data-pipeline%2Fshardingsphere-data-pipeline-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fdata%2Fpipeline%2Fcore%2Fmetadata%2Fgenerator%2FPipelineDDLGenerator.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/shardingsphere-kernel%2Fshardingsphere-data-pipeline%2Fshardingsphere-data-pipeline-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fdata%2Fpipeline%2Fcore%2Fmetadata%2Fgenerator%2FPipelineDDLGenerator.java?ref=56474b8e17337a25a05e31683764a3cd0988a3ed",
      "patch": "@@ -23,7 +23,12 @@\n import org.apache.shardingsphere.infra.binder.LogicSQL;\n import org.apache.shardingsphere.infra.binder.SQLStatementContextFactory;\n import org.apache.shardingsphere.infra.binder.statement.SQLStatementContext;\n+import org.apache.shardingsphere.infra.binder.statement.ddl.CommentStatementContext;\n+import org.apache.shardingsphere.infra.binder.statement.ddl.CreateIndexStatementContext;\n import org.apache.shardingsphere.infra.binder.statement.ddl.CreateTableStatementContext;\n+import org.apache.shardingsphere.infra.binder.type.ConstraintAvailable;\n+import org.apache.shardingsphere.infra.binder.type.IndexAvailable;\n+import org.apache.shardingsphere.infra.binder.type.TableAvailable;\n import org.apache.shardingsphere.infra.database.type.DatabaseType;\n import org.apache.shardingsphere.infra.datanode.DataNode;\n import org.apache.shardingsphere.infra.datanode.DataNodes;\n@@ -36,17 +41,14 @@\n import org.apache.shardingsphere.mode.manager.ContextManager;\n import org.apache.shardingsphere.parser.rule.SQLParserRule;\n import org.apache.shardingsphere.sql.parser.sql.common.segment.SQLSegment;\n-import org.apache.shardingsphere.sql.parser.sql.common.segment.ddl.constraint.ConstraintDefinitionSegment;\n import org.apache.shardingsphere.sql.parser.sql.common.segment.ddl.constraint.ConstraintSegment;\n import org.apache.shardingsphere.sql.parser.sql.common.segment.ddl.index.IndexSegment;\n import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.SimpleTableSegment;\n import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.TableNameSegment;\n import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;\n \n import java.sql.SQLException;\n-import java.util.Collection;\n import java.util.Collections;\n-import java.util.LinkedList;\n import java.util.Objects;\n import java.util.Optional;\n \n@@ -58,8 +60,6 @@ public final class PipelineDDLGenerator {\n     \n     private static final String DELIMITER = \";\";\n     \n-    private static final String NEWLINE = \"\\n\";\n-    \n     private final ContextManager contextManager;\n     \n     /**\n@@ -78,7 +78,7 @@ public String generateLogicDDLSQL(final DatabaseType databaseType, final String\n         StringBuilder result = new StringBuilder();\n         for (String each : sql.split(DELIMITER)) {\n             if (!each.trim().isEmpty()) {\n-                result.append(decorateActualSQL(each.trim(), metaData, databaseType, databaseName)).append(DELIMITER + NEWLINE);\n+                result.append(decorateActualSQL(each.trim(), metaData, databaseType, databaseName)).append(DELIMITER).append(System.lineSeparator());\n             }\n         }\n         return result.toString();\n@@ -96,11 +96,12 @@ public String generateLogicDDLSQL(final DatabaseType databaseType, final String\n     public String replaceTableNameWithPrefix(final String sql, final String prefix, final DatabaseType databaseType, final String databaseName) {\n         LogicSQL logicSQL = getLogicSQL(sql, databaseType, databaseName);\n         SQLStatementContext<?> sqlStatementContext = logicSQL.getSqlStatementContext();\n-        if (sqlStatementContext instanceof CreateTableStatementContext) {\n-            TableNameSegment tableNameSegment = sqlStatementContext.getTablesContext().getTables().iterator().next().getTableName();\n-            return replace(sql, tableNameSegment, prefix + tableNameSegment.getIdentifier().getValue());\n+        if (sqlStatementContext instanceof CreateTableStatementContext || sqlStatementContext instanceof CommentStatementContext || sqlStatementContext instanceof CreateIndexStatementContext) {\n+            if (!sqlStatementContext.getTablesContext().getTables().isEmpty()) {\n+                TableNameSegment tableNameSegment = sqlStatementContext.getTablesContext().getTables().iterator().next().getTableName();\n+                return replace(sql, tableNameSegment, prefix + tableNameSegment.getIdentifier().getValue());\n+            }\n         }\n-        // TODO COMMENT STATEMENT\n         return sql;\n     }\n     \n@@ -120,16 +121,23 @@ private String decorateActualSQL(final String sql, final ShardingSphereMetaData\n         String result = logicSQL.getSql();\n         SQLStatementContext<?> sqlStatementContext = logicSQL.getSqlStatementContext();\n         if (sqlStatementContext instanceof CreateTableStatementContext) {\n-            result = decorateIndex(metaData, result, (CreateTableStatementContext) sqlStatementContext);\n-            result = decorateTable(metaData, result, (CreateTableStatementContext) sqlStatementContext);\n+            result = decorateIndexAndConstraint(metaData, result, sqlStatementContext);\n+            result = decorateTable(metaData, result, (TableAvailable) sqlStatementContext);\n+        }\n+        if (sqlStatementContext instanceof CommentStatementContext) {\n+            result = decorateTable(metaData, result, (TableAvailable) sqlStatementContext);\n+        }\n+        if (sqlStatementContext instanceof CreateIndexStatementContext) {\n+            result = decorateTable(metaData, result, (TableAvailable) sqlStatementContext);\n+            result = decorateIndexAndConstraint(metaData, result, sqlStatementContext);\n         }\n-        // TODO COMMENT STATEMENT\n+        \n         return result;\n     }\n     \n-    private String decorateTable(final ShardingSphereMetaData metaData, final String sql, final CreateTableStatementContext sqlStatementContext) {\n+    private String decorateTable(final ShardingSphereMetaData metaData, final String sql, final TableAvailable sqlStatementContext) {\n         String result = sql;\n-        for (SimpleTableSegment each : getAllTableSegments(sqlStatementContext)) {\n+        for (SimpleTableSegment each : sqlStatementContext.getAllTables()) {\n             String logicTable = findLogicTable(each.getTableName(), metaData);\n             if (!logicTable.equals(each.getTableName().getIdentifier().getValue())) {\n                 result = replace(result, each.getTableName(), logicTable);\n@@ -138,27 +146,39 @@ private String decorateTable(final ShardingSphereMetaData metaData, final String\n         return result;\n     }\n     \n-    private Collection<SimpleTableSegment> getAllTableSegments(final CreateTableStatementContext sqlStatementContext) {\n-        Collection<SimpleTableSegment> result = new LinkedList<>(sqlStatementContext.getTablesContext().getTables());\n-        for (ConstraintDefinitionSegment each : sqlStatementContext.getSqlStatement().getConstraintDefinitions()) {\n-            each.getReferencedTable().ifPresent(result::add);\n+    private String decorateIndexAndConstraint(final ShardingSphereMetaData metaData, final String sql, final SQLStatementContext<?> sqlStatementContext) {\n+        if (!(sqlStatementContext instanceof TableAvailable) || ((TableAvailable) sqlStatementContext).getTablesContext().getTables().isEmpty()) {\n+            return sql;\n         }\n-        return result;\n-    }\n-    \n-    private String decorateIndex(final ShardingSphereMetaData metaData, final String sql, final CreateTableStatementContext sqlStatementContext) {\n         String result = sql;\n-        TableNameSegment tableNameSegment = sqlStatementContext.getTablesContext().getTables().iterator().next().getTableName();\n+        TableNameSegment tableNameSegment = ((TableAvailable) sqlStatementContext).getTablesContext().getTables().iterator().next().getTableName();\n         String logicTable = findLogicTable(tableNameSegment, metaData);\n         if (!tableNameSegment.getIdentifier().getValue().equals(logicTable)) {\n-            for (IndexSegment each : sqlStatementContext.getIndexes()) {\n-                String logicIndexName = IndexMetaDataUtil.getLogicIndexName(each.getIndexName().getIdentifier().getValue(), tableNameSegment.getIdentifier().getValue());\n-                result = replace(result, each, logicIndexName);\n+            if (sqlStatementContext instanceof IndexAvailable) {\n+                result = decorateIndex((IndexAvailable) sqlStatementContext, result, tableNameSegment);\n             }\n-            for (ConstraintSegment each : sqlStatementContext.getConstraints()) {\n-                String logicConstraint = IndexMetaDataUtil.getLogicIndexName(each.getIdentifier().getValue(), tableNameSegment.getIdentifier().getValue());\n-                result = replace(result, each, logicConstraint);\n+            if (sqlStatementContext instanceof ConstraintAvailable) {\n+                result = decorateConstraint((ConstraintAvailable) sqlStatementContext, result, tableNameSegment);\n             }\n+            \n+        }\n+        return result;\n+    }\n+    \n+    private String decorateIndex(final IndexAvailable indexAvailable, final String sql, final TableNameSegment tableNameSegment) {\n+        String result = sql;\n+        for (IndexSegment each : indexAvailable.getIndexes()) {\n+            String logicIndexName = IndexMetaDataUtil.getLogicIndexName(each.getIndexName().getIdentifier().getValue(), tableNameSegment.getIdentifier().getValue());\n+            result = replace(result, each, logicIndexName);\n+        }\n+        return result;\n+    }\n+    \n+    private String decorateConstraint(final ConstraintAvailable constraintAvailable, final String sql, final TableNameSegment tableNameSegment) {\n+        String result = sql;\n+        for (ConstraintSegment each : constraintAvailable.getConstraints()) {\n+            String logicConstraint = IndexMetaDataUtil.getLogicIndexName(each.getIdentifier().getValue(), tableNameSegment.getIdentifier().getValue());\n+            result = replace(result, each, logicConstraint);\n         }\n         return result;\n     }",
      "parent_sha": "a78a843d93cf24b3cd2af3d94ee3b8e79187807d"
    }
  },
  {
    "oid": "f20bb7dc582d0b963ad5e7550fb087065f0e0759",
    "message": "Fixed mysql auth",
    "date": "2019-10-09T10:53:15Z",
    "url": "https://github.com/apache/shardingsphere/commit/f20bb7dc582d0b963ad5e7550fb087065f0e0759",
    "details": {
      "sha": "ada968381548d9710eb0703e39cc3ca9365dbfe3",
      "filename": "src/main/java/info/avalon566/shardingscaling/sync/mysql/binlog/packet/auth/HandshakeInitializationPacket.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/shardingsphere/blob/f20bb7dc582d0b963ad5e7550fb087065f0e0759/src%2Fmain%2Fjava%2Finfo%2Favalon566%2Fshardingscaling%2Fsync%2Fmysql%2Fbinlog%2Fpacket%2Fauth%2FHandshakeInitializationPacket.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/f20bb7dc582d0b963ad5e7550fb087065f0e0759/src%2Fmain%2Fjava%2Finfo%2Favalon566%2Fshardingscaling%2Fsync%2Fmysql%2Fbinlog%2Fpacket%2Fauth%2FHandshakeInitializationPacket.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/src%2Fmain%2Fjava%2Finfo%2Favalon566%2Fshardingscaling%2Fsync%2Fmysql%2Fbinlog%2Fpacket%2Fauth%2FHandshakeInitializationPacket.java?ref=f20bb7dc582d0b963ad5e7550fb087065f0e0759",
      "patch": "@@ -87,7 +87,8 @@ public void fromByteBuf(final ByteBuf data) {\n             int authPluginDataLength = DataTypesCodec.readUnsignedInt1(data);\n             DataTypesCodec.readBytes(10, data);\n             if ((capabilities & CapabilityFlags.CLIENT_SECURE_CONNECTION) != 0) {\n-                authPluginDataPart2 = DataTypesCodec.readBytes(Math.max(13, authPluginDataLength - 8), data);\n+                authPluginDataPart2 = DataTypesCodec.readBytes(authPluginDataLength - 8 - 1, data);\n+                DataTypesCodec.readNul(data);\n             }\n             if ((capabilities & CapabilityFlags.CLIENT_PLUGIN_AUTH) != 0) {\n                 authPluginName = DataTypesCodec.readNulTerminatedString(data);",
      "parent_sha": "819023f65e4104e8b545b9ffe5433583fce92370"
    }
  },
  {
    "oid": "019aef040bf0aa435e23391c86e244436b7c2a66",
    "message": "#1363 Add spiClassName for TransactionType enum.",
    "date": "2018-11-01T07:06:58Z",
    "url": "https://github.com/apache/shardingsphere/commit/019aef040bf0aa435e23391c86e244436b7c2a66",
    "details": {
      "sha": "456934d99fb6d9afa933e1cddacf803a96461f99",
      "filename": "sharding-core/src/main/java/io/shardingsphere/core/constant/transaction/TransactionType.java",
      "status": "modified",
      "additions": 25,
      "deletions": 1,
      "changes": 26,
      "blob_url": "https://github.com/apache/shardingsphere/blob/019aef040bf0aa435e23391c86e244436b7c2a66/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fconstant%2Ftransaction%2FTransactionType.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/019aef040bf0aa435e23391c86e244436b7c2a66/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fconstant%2Ftransaction%2FTransactionType.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fconstant%2Ftransaction%2FTransactionType.java?ref=019aef040bf0aa435e23391c86e244436b7c2a66",
      "patch": "@@ -17,12 +17,36 @@\n \n package io.shardingsphere.core.constant.transaction;\n \n+import lombok.RequiredArgsConstructor;\n+\n /**\n  * Transaction type.\n  *\n  * @author zhaojun\n  */\n+@RequiredArgsConstructor\n public enum TransactionType {\n     \n-    LOCAL, XA, BASE\n+    LOCAL(\"none\"),\n+    \n+    XA(\"io.shardingsphere.transaction.manager.xa.XATransactionManager\"),\n+    \n+    BASE(\"io.shardingsphere.transaction.manager.base.BASETransactionManager\");\n+    \n+    private final String spiClassName;\n+    \n+    /**\n+     * Find transaction type by class name.\n+     *\n+     * @param className class name\n+     * @return transaction type\n+     */\n+    public static TransactionType find(final String className) {\n+        for (TransactionType each : TransactionType.values()) {\n+            if (className.equals(each.spiClassName)) {\n+                return each;\n+            }\n+        }\n+        throw new UnsupportedOperationException(String.format(\"Cannot find transaction type of [%s]\", className));\n+    }\n }",
      "parent_sha": "aaa0cc326bdbbad34b06f05c9d7b09236a39d007"
    }
  },
  {
    "oid": "8bcdf3f955495b629dddf73d017304d260500aad",
    "message": "refactor AbstractRoutingResultValidator.getAbsentTableUnit()",
    "date": "2019-09-18T13:37:45Z",
    "url": "https://github.com/apache/shardingsphere/commit/8bcdf3f955495b629dddf73d017304d260500aad",
    "details": {
      "sha": "3abf78c076ce41a0c850c3d8de21d9ac9440d954",
      "filename": "sharding-core/sharding-core-route/src/main/java/org/apache/shardingsphere/core/route/router/sharding/validator/routingresult/impl/AbstractRoutingResultValidator.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/apache/shardingsphere/blob/8bcdf3f955495b629dddf73d017304d260500aad/sharding-core%2Fsharding-core-route%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Froute%2Frouter%2Fsharding%2Fvalidator%2Froutingresult%2Fimpl%2FAbstractRoutingResultValidator.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/8bcdf3f955495b629dddf73d017304d260500aad/sharding-core%2Fsharding-core-route%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Froute%2Frouter%2Fsharding%2Fvalidator%2Froutingresult%2Fimpl%2FAbstractRoutingResultValidator.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsharding-core-route%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Froute%2Frouter%2Fsharding%2Fvalidator%2Froutingresult%2Fimpl%2FAbstractRoutingResultValidator.java?ref=8bcdf3f955495b629dddf73d017304d260500aad",
      "patch": "@@ -66,16 +66,15 @@ public final void validate(final ShardingOptimizedStatement shardingStatement, f\n     private Multimap<RoutingUnit, TableUnit> getAbsentRoutingUnit(final ShardingOptimizedStatement shardingStatement, final Collection<RoutingUnit> routingUnits) {\n         Multimap<RoutingUnit, TableUnit> result = HashMultimap.create();\n         for (RoutingUnit each : routingUnits) {\n-            String dataSourceName = each.getDataSourceName();\n-            result.putAll(each, getAbsentTableUnit(shardingStatement, each, dataSourceName));\n+            result.putAll(each, getAbsentTableUnit(shardingStatement, each));\n         }\n         return result;\n     }\n     \n-    private Collection<TableUnit> getAbsentTableUnit(final ShardingOptimizedStatement shardingStatement, final RoutingUnit routingUnit, final String dataSourceName) {\n+    private Collection<TableUnit> getAbsentTableUnit(final ShardingOptimizedStatement shardingStatement, final RoutingUnit routingUnit) {\n         Collection<TableUnit> result = new LinkedList<>();\n         for (TableUnit each : routingUnit.getTableUnits()) {\n-            if (containsInMetaData(shardingStatement, dataSourceName, each.getActualTableName()) || containsInShardingRule(dataSourceName, each)) {\n+            if (containsInMetaData(shardingStatement, routingUnit.getDataSourceName(), each.getActualTableName()) || containsInShardingRule(routingUnit.getDataSourceName(), each)) {\n                 continue;\n             }\n             result.add(each);",
      "parent_sha": "eecc707f1adb9dc20aa77ebb4ca291d2d754eb9c"
    }
  },
  {
    "oid": "5b2817e594bcc2020dc5963dfaf4670204da88b3",
    "message": "#1517, refine packet class",
    "date": "2019-01-30T07:48:53Z",
    "url": "https://github.com/apache/shardingsphere/commit/5b2817e594bcc2020dc5963dfaf4670204da88b3",
    "details": {
      "sha": "b0d5fad345d4698ff00caeabb43b7476cf088e0f",
      "filename": "sharding-proxy-postgresql/src/main/java/org/apache/shardingsphere/shardingproxypg/transport/postgresql/packet/command/query/text/DataRowPacket.java",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/shardingsphere/blob/5b2817e594bcc2020dc5963dfaf4670204da88b3/sharding-proxy-postgresql%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingproxypg%2Ftransport%2Fpostgresql%2Fpacket%2Fcommand%2Fquery%2Ftext%2FDataRowPacket.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/5b2817e594bcc2020dc5963dfaf4670204da88b3/sharding-proxy-postgresql%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingproxypg%2Ftransport%2Fpostgresql%2Fpacket%2Fcommand%2Fquery%2Ftext%2FDataRowPacket.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-proxy-postgresql%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingproxypg%2Ftransport%2Fpostgresql%2Fpacket%2Fcommand%2Fquery%2Ftext%2FDataRowPacket.java?ref=5b2817e594bcc2020dc5963dfaf4670204da88b3",
      "patch": "@@ -32,7 +32,7 @@\n  */\n @RequiredArgsConstructor\n @Getter\n-public final class DataRow implements PostgreSQLPacket {\n+public final class DataRowPacket implements PostgreSQLPacket {\n     \n     private final char messageType = PostgreSQLCommandPacketType.DATA_ROW.getValue();\n     ",
      "previous_filename": "sharding-proxy-postgresql/src/main/java/org/apache/shardingsphere/shardingproxypg/transport/postgresql/packet/command/query/text/DataRow.java",
      "parent_sha": "a0be74f114142af61c18c9fbd2c9de19686181b7"
    }
  },
  {
    "oid": "4dda1e0800c15a0a891e2b85c6106a660a6030b7",
    "message": "Revise #12914 (#12918)\n\n* Remove useless test case\r\n\r\n* Refactor AbstractDataSourceAdapterTest",
    "date": "2021-10-07T10:30:33Z",
    "url": "https://github.com/apache/shardingsphere/commit/4dda1e0800c15a0a891e2b85c6106a660a6030b7",
    "details": {
      "sha": "1f6ef081d537b5ec9a1a6c7ae99531d0693553d7",
      "filename": "shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/java/org/apache/shardingsphere/driver/jdbc/adapter/AbstractDataSourceAdapterTest.java",
      "status": "modified",
      "additions": 14,
      "deletions": 20,
      "changes": 34,
      "blob_url": "https://github.com/apache/shardingsphere/blob/4dda1e0800c15a0a891e2b85c6106a660a6030b7/shardingsphere-jdbc%2Fshardingsphere-jdbc-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fdriver%2Fjdbc%2Fadapter%2FAbstractDataSourceAdapterTest.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/4dda1e0800c15a0a891e2b85c6106a660a6030b7/shardingsphere-jdbc%2Fshardingsphere-jdbc-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fdriver%2Fjdbc%2Fadapter%2FAbstractDataSourceAdapterTest.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/shardingsphere-jdbc%2Fshardingsphere-jdbc-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fdriver%2Fjdbc%2Fadapter%2FAbstractDataSourceAdapterTest.java?ref=4dda1e0800c15a0a891e2b85c6106a660a6030b7",
      "patch": "@@ -16,24 +16,25 @@\n  */\n \n package org.apache.shardingsphere.driver.jdbc.adapter;\n-import org.apache.shardingsphere.driver.jdbc.core.connection.ShardingSphereConnection;\n+\n import org.apache.shardingsphere.driver.jdbc.core.datasource.ShardingSphereDataSource;\n import org.apache.shardingsphere.infra.config.RuleConfiguration;\n import org.apache.shardingsphere.infra.database.DefaultSchema;\n import org.apache.shardingsphere.sharding.api.config.ShardingRuleConfiguration;\n import org.apache.shardingsphere.sharding.api.config.rule.ShardingTableRuleConfiguration;\n import org.junit.Before;\n import org.junit.Test;\n+\n import javax.sql.DataSource;\n import java.io.PrintWriter;\n-import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n import java.sql.SQLException;\n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n import java.util.logging.Logger;\n+\n import static org.hamcrest.CoreMatchers.instanceOf;\n import static org.hamcrest.CoreMatchers.is;\n import static org.junit.Assert.assertNull;\n@@ -43,44 +44,37 @@\n import static org.mockito.Mockito.when;\n \n public final class AbstractDataSourceAdapterTest {\n-\n+    \n     private ShardingSphereDataSource shardingSphereDataSource;\n-\n+    \n     @Before\n     public void setUp() throws SQLException {\n         shardingSphereDataSource = new ShardingSphereDataSource(DefaultSchema.LOGIC_NAME, null, getDataSource(), getRuleConfigurations(), new Properties());\n     }\n-\n+    \n     private Map<String, DataSource> getDataSource() throws SQLException {\n-        DataSource dataSource = mock(DataSource.class);\n-        Connection connection = mock(Connection.class, RETURNS_DEEP_STUBS);\n-        when(dataSource.getConnection()).thenReturn(connection);\n-        when(connection.getMetaData()).thenReturn(mock(DatabaseMetaData.class, RETURNS_DEEP_STUBS));\n+        DataSource dataSource = mock(DataSource.class, RETURNS_DEEP_STUBS);\n+        when(dataSource.getConnection().getMetaData()).thenReturn(mock(DatabaseMetaData.class, RETURNS_DEEP_STUBS));\n         when(dataSource.getConnection().getMetaData().getURL()).thenReturn(\"jdbc:mysql://localhost:3306/test\");\n         return Collections.singletonMap(\"ds\", dataSource);\n     }\n-\n-    private List<RuleConfiguration> getRuleConfigurations() {\n+    \n+    private Collection<RuleConfiguration> getRuleConfigurations() {\n         ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();\n         ShardingTableRuleConfiguration shardingTableRuleConfig = new ShardingTableRuleConfiguration(\"table\", \"ds\" + \".\" + \"table\");\n         shardingRuleConfig.setTables(Collections.singletonList(shardingTableRuleConfig));\n-        return Collections.singletonList(shardingRuleConfig);\n+        return Collections.singleton(shardingRuleConfig);\n     }\n-\n+    \n     @Test\n     public void assertSetLogWriter() {\n         assertThat(shardingSphereDataSource.getLogWriter(), instanceOf(PrintWriter.class));\n         shardingSphereDataSource.setLogWriter(null);\n         assertNull(shardingSphereDataSource.getLogWriter());\n     }\n-\n+    \n     @Test\n     public void assertGetParentLogger() {\n         assertThat(shardingSphereDataSource.getParentLogger().getName(), is(Logger.GLOBAL_LOGGER_NAME));\n     }\n-\n-    @Test\n-    public void assertGetConnectionWithUsername() {\n-        assertThat(shardingSphereDataSource.getConnection(\"username\", \"password\"), instanceOf(ShardingSphereConnection.class));\n-    }\n }",
      "parent_sha": "c1a18ae609e1600ef5663491c0f9ac3354b7ee5b"
    }
  },
  {
    "oid": "66468b3626a142ac788855e0f157b6b93e633e21",
    "message": "use AuthenticationChangedListenerTest",
    "date": "2019-04-19T03:06:14Z",
    "url": "https://github.com/apache/shardingsphere/commit/66468b3626a142ac788855e0f157b6b93e633e21",
    "details": {
      "sha": "1fe073714ecd59dfd2170071d4d8aea9a243c4fe",
      "filename": "sharding-orchestration/sharding-orchestration-core/src/test/java/org/apache/shardingsphere/orchestration/internal/registry/config/AllConfigTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/shardingsphere/blob/66468b3626a142ac788855e0f157b6b93e633e21/sharding-orchestration%2Fsharding-orchestration-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Forchestration%2Finternal%2Fregistry%2Fconfig%2FAllConfigTests.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/66468b3626a142ac788855e0f157b6b93e633e21/sharding-orchestration%2Fsharding-orchestration-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Forchestration%2Finternal%2Fregistry%2Fconfig%2FAllConfigTests.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-orchestration%2Fsharding-orchestration-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Forchestration%2Finternal%2Fregistry%2Fconfig%2FAllConfigTests.java?ref=66468b3626a142ac788855e0f157b6b93e633e21",
      "patch": "@@ -17,7 +17,7 @@\n \n package org.apache.shardingsphere.orchestration.internal.registry.config;\n \n-import org.apache.shardingsphere.orchestration.internal.registry.config.listener.UserChangedListenerTest;\n+import org.apache.shardingsphere.orchestration.internal.registry.config.listener.AuthenticationChangedListenerTest;\n import org.apache.shardingsphere.orchestration.internal.registry.config.listener.ConfigurationChangedListenerManagerTest;\n import org.apache.shardingsphere.orchestration.internal.registry.config.listener.PropertiesChangedListenerTest;\n import org.apache.shardingsphere.orchestration.internal.registry.config.listener.SchemaChangedListenerTest;\n@@ -33,7 +33,7 @@\n         ConfigurationServiceTest.class,\n         ConfigurationChangedListenerManagerTest.class,\n         PropertiesChangedListenerTest.class,\n-        UserChangedListenerTest.class,\n+        AuthenticationChangedListenerTest.class,\n         SchemaChangedListenerTest.class\n })\n public final class AllConfigTests {",
      "parent_sha": "d9b416847b82fa831dd5b825ca25ef99a9ee7a1d"
    }
  },
  {
    "oid": "c8dd155f057b3c552a1b0ea53c90ae6f87fd520c",
    "message": "Fix actionConfig variable name conflict in RuleAlteredContext (#15173)",
    "date": "2022-01-29T06:58:22Z",
    "url": "https://github.com/apache/shardingsphere/commit/c8dd155f057b3c552a1b0ea53c90ae6f87fd520c",
    "details": {
      "sha": "15334dbbdd6a7dd9125399715084695fb19cac14",
      "filename": "shardingsphere-kernel/shardingsphere-data-pipeline/shardingsphere-data-pipeline-core/src/main/java/org/apache/shardingsphere/data/pipeline/scenario/rulealtered/RuleAlteredContext.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/apache/shardingsphere/blob/c8dd155f057b3c552a1b0ea53c90ae6f87fd520c/shardingsphere-kernel%2Fshardingsphere-data-pipeline%2Fshardingsphere-data-pipeline-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fdata%2Fpipeline%2Fscenario%2Frulealtered%2FRuleAlteredContext.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/c8dd155f057b3c552a1b0ea53c90ae6f87fd520c/shardingsphere-kernel%2Fshardingsphere-data-pipeline%2Fshardingsphere-data-pipeline-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fdata%2Fpipeline%2Fscenario%2Frulealtered%2FRuleAlteredContext.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/shardingsphere-kernel%2Fshardingsphere-data-pipeline%2Fshardingsphere-data-pipeline-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fdata%2Fpipeline%2Fscenario%2Frulealtered%2FRuleAlteredContext.java?ref=c8dd155f057b3c552a1b0ea53c90ae6f87fd520c",
      "patch": "@@ -83,8 +83,9 @@ public final class RuleAlteredContext {\n     \n     private final ExecuteEngine importerExecuteEngine;\n     \n-    public RuleAlteredContext(final OnRuleAlteredActionConfiguration onRuleAlteredActionConfig) {\n-        this.onRuleAlteredActionConfig = convertActionConfig(onRuleAlteredActionConfig);\n+    public RuleAlteredContext(final OnRuleAlteredActionConfiguration actionConfig) {\n+        OnRuleAlteredActionConfiguration onRuleAlteredActionConfig = convertActionConfig(actionConfig);\n+        this.onRuleAlteredActionConfig = onRuleAlteredActionConfig;\n         InputConfiguration inputConfig = onRuleAlteredActionConfig.getInput();\n         ShardingSphereAlgorithmConfiguration inputRateLimiter = inputConfig.getRateLimiter();\n         inputRateLimitAlgorithm = null != inputRateLimiter ? ShardingSphereAlgorithmFactory.createAlgorithm(inputRateLimiter, JobRateLimitAlgorithm.class) : null;",
      "parent_sha": "0c34a892120e5ddf6d695f8e0dfb24d67302e58f"
    }
  },
  {
    "oid": "232eb0e6f27d1edd456911620c216382d53aaa97",
    "message": "change to watchSharding",
    "date": "2018-08-26T12:50:50Z",
    "url": "https://github.com/apache/shardingsphere/commit/232eb0e6f27d1edd456911620c216382d53aaa97",
    "details": {
      "sha": "eac37608343e15bb6c6811ec9506ba1343c01ea6",
      "filename": "sharding-jdbc-orchestration/src/main/java/io/shardingsphere/jdbc/orchestration/internal/config/ConfigurationListenerManager.java",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/apache/shardingsphere/blob/232eb0e6f27d1edd456911620c216382d53aaa97/sharding-jdbc-orchestration%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fjdbc%2Forchestration%2Finternal%2Fconfig%2FConfigurationListenerManager.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/232eb0e6f27d1edd456911620c216382d53aaa97/sharding-jdbc-orchestration%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fjdbc%2Forchestration%2Finternal%2Fconfig%2FConfigurationListenerManager.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc-orchestration%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fjdbc%2Forchestration%2Finternal%2Fconfig%2FConfigurationListenerManager.java?ref=232eb0e6f27d1edd456911620c216382d53aaa97",
      "patch": "@@ -56,12 +56,12 @@ public ConfigurationListenerManager(final String name, final RegistryCenter regC\n     \n     @Override\n     public void watchSharding() {\n-        shardingStart(ConfigurationNode.DATA_SOURCE_NODE_PATH);\n-        shardingStart(ConfigurationNode.SHARDING_RULE_NODE_PATH);\n-        shardingStart(ConfigurationNode.SHARDING_PROPS_NODE_PATH);\n+        watchSharding(ConfigurationNode.DATA_SOURCE_NODE_PATH);\n+        watchSharding(ConfigurationNode.SHARDING_RULE_NODE_PATH);\n+        watchSharding(ConfigurationNode.SHARDING_PROPS_NODE_PATH);\n     }\n     \n-    private void shardingStart(final String node) {\n+    private void watchSharding(final String node) {\n         String cachePath = configNode.getFullPath(node);\n         regCenter.watch(cachePath, new EventListener() {\n             \n@@ -79,12 +79,12 @@ public void onChange(final DataChangedEvent event) {\n     \n     @Override\n     public void watchMasterSlave() {\n-        masterSlaveStart(ConfigurationNode.DATA_SOURCE_NODE_PATH);\n-        masterSlaveStart(ConfigurationNode.MASTER_SLAVE_RULE_NODE_PATH);\n-        masterSlaveStart(ConfigurationNode.MASTER_SLAVE_PROPS_NODE_PATH);\n+        watchMasterSlave(ConfigurationNode.DATA_SOURCE_NODE_PATH);\n+        watchMasterSlave(ConfigurationNode.MASTER_SLAVE_RULE_NODE_PATH);\n+        watchMasterSlave(ConfigurationNode.MASTER_SLAVE_PROPS_NODE_PATH);\n     }\n     \n-    private void masterSlaveStart(final String node) {\n+    private void watchMasterSlave(final String node) {\n         String cachePath = configNode.getFullPath(node);\n         regCenter.watch(cachePath, new EventListener() {\n             \n@@ -101,11 +101,11 @@ public void onChange(final DataChangedEvent event) {\n     \n     @Override\n     public void watchProxy() {\n-        proxyStart(ConfigurationNode.DATA_SOURCE_NODE_PATH);\n-        proxyStart(ConfigurationNode.PROXY_RULE_NODE_PATH);\n+        watchProxy(ConfigurationNode.DATA_SOURCE_NODE_PATH);\n+        watchProxy(ConfigurationNode.PROXY_RULE_NODE_PATH);\n     }\n     \n-    private void proxyStart(final String node) {\n+    private void watchProxy(final String node) {\n         String cachePath = configNode.getFullPath(node);\n         regCenter.watch(cachePath, new EventListener() {\n             ",
      "parent_sha": "2e143a8031c8b6cd4a8164db0427817d7b1e298f"
    }
  },
  {
    "oid": "f4e83f7c872911dfe79ab319e44446271efa777e",
    "message": "move it",
    "date": "2018-10-10T02:01:49Z",
    "url": "https://github.com/apache/shardingsphere/commit/f4e83f7c872911dfe79ab319e44446271efa777e",
    "details": {
      "sha": "f7dab907800fbfafc1a5d0af4f6a75019763940b",
      "filename": "common-repository/jdbc-repository/src/main/java/io/shardingsphere/example/repository/jdbc/repository/JDBCRepository.java",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/shardingsphere/blob/f4e83f7c872911dfe79ab319e44446271efa777e/common-repository%2Fjdbc-repository%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fexample%2Frepository%2Fjdbc%2Frepository%2FJDBCRepository.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/f4e83f7c872911dfe79ab319e44446271efa777e/common-repository%2Fjdbc-repository%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fexample%2Frepository%2Fjdbc%2Frepository%2FJDBCRepository.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/common-repository%2Fjdbc-repository%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fexample%2Frepository%2Fjdbc%2Frepository%2FJDBCRepository.java?ref=f4e83f7c872911dfe79ab319e44446271efa777e",
      "patch": "@@ -15,7 +15,7 @@\n  * </p>\n  */\n \n-package io.shardingsphere.example.repository.jdbc;\n+package io.shardingsphere.example.repository.jdbc.repository;\n \n import javax.sql.DataSource;\n import java.sql.Connection;",
      "previous_filename": "common-repository/jdbc-repository/src/main/java/io/shardingsphere/example/repository/jdbc/JDBCRepository.java",
      "parent_sha": "95bde277edd0921e0b5d6f08f2aaa240da70c3a4"
    }
  },
  {
    "oid": "1d8ff3e3d9c907ac0a9075945d53bd98ae9d0c3f",
    "message": "for checkstyle",
    "date": "2018-12-27T10:01:53Z",
    "url": "https://github.com/apache/shardingsphere/commit/1d8ff3e3d9c907ac0a9075945d53bd98ae9d0c3f",
    "details": {
      "sha": "b7b7a9d29c6d145f1b0f8b43d2e020bd3dd0e5f2",
      "filename": "sharding-jdbc/sharding-jdbc-core/src/main/java/io/shardingsphere/shardingjdbc/jdbc/core/ShardingContext.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/shardingsphere/blob/1d8ff3e3d9c907ac0a9075945d53bd98ae9d0c3f/sharding-jdbc%2Fsharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fshardingjdbc%2Fjdbc%2Fcore%2FShardingContext.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/1d8ff3e3d9c907ac0a9075945d53bd98ae9d0c3f/sharding-jdbc%2Fsharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fshardingjdbc%2Fjdbc%2Fcore%2FShardingContext.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc%2Fsharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fshardingjdbc%2Fjdbc%2Fcore%2FShardingContext.java?ref=1d8ff3e3d9c907ac0a9075945d53bd98ae9d0c3f",
      "patch": "@@ -60,7 +60,8 @@ public ShardingContext(final Map<String, DataSource> dataSourceMap, final Shardi\n         shardingProperties = new ShardingProperties(null == props ? new Properties() : props);\n         int executorSize = shardingProperties.getValue(ShardingPropertiesConstant.EXECUTOR_SIZE);\n         executeEngine = new ShardingExecuteEngine(executorSize);\n-        metaData = new ShardingMetaData(getDataSourceURLs(dataSourceMap), shardingRule, databaseType, executeEngine, new JDBCTableMetaDataConnectionManager(dataSourceMap), shardingProperties.<Integer>getValue(ShardingPropertiesConstant.MAX_CONNECTIONS_SIZE_PER_QUERY), shardingProperties.<Boolean>getValue(ShardingPropertiesConstant.CHECK_TABLE_METADATA_ENABLED));\n+        metaData = new ShardingMetaData(getDataSourceURLs(dataSourceMap), shardingRule, databaseType, executeEngine, new JDBCTableMetaDataConnectionManager(dataSourceMap), \n+                shardingProperties.<Integer>getValue(ShardingPropertiesConstant.MAX_CONNECTIONS_SIZE_PER_QUERY), shardingProperties.<Boolean>getValue(ShardingPropertiesConstant.CHECK_TABLE_METADATA_ENABLED));\n     }\n     \n     private Map<String, String> getDataSourceURLs(final Map<String, DataSource> dataSourceMap) throws SQLException {",
      "parent_sha": "f02e0437352e86227761e87e2307f7e998f14b59"
    }
  },
  {
    "oid": "f9254c7f0af4ff7c0fadcc818b241cea9e5f5af4",
    "message": "shardingContext.getShardingProperties()",
    "date": "2018-11-02T12:00:31Z",
    "url": "https://github.com/apache/shardingsphere/commit/f9254c7f0af4ff7c0fadcc818b241cea9e5f5af4",
    "details": {
      "sha": "aa6d0795c403de9828395cfc87e60aa6d857fdfc",
      "filename": "sharding-jdbc/sharding-jdbc-spring/sharding-jdbc-spring-boot-starter/src/test/java/io/shardingsphere/shardingjdbc/spring/boot/type/SpringBootShardingTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/shardingsphere/blob/f9254c7f0af4ff7c0fadcc818b241cea9e5f5af4/sharding-jdbc%2Fsharding-jdbc-spring%2Fsharding-jdbc-spring-boot-starter%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Fshardingjdbc%2Fspring%2Fboot%2Ftype%2FSpringBootShardingTest.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/f9254c7f0af4ff7c0fadcc818b241cea9e5f5af4/sharding-jdbc%2Fsharding-jdbc-spring%2Fsharding-jdbc-spring-boot-starter%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Fshardingjdbc%2Fspring%2Fboot%2Ftype%2FSpringBootShardingTest.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc%2Fsharding-jdbc-spring%2Fsharding-jdbc-spring-boot-starter%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Fshardingjdbc%2Fspring%2Fboot%2Ftype%2FSpringBootShardingTest.java?ref=f9254c7f0af4ff7c0fadcc818b241cea9e5f5af4",
      "patch": "@@ -68,7 +68,7 @@ public void assertWithShardingDataSource() {\n         Map<String, Object> configMap = new ConcurrentHashMap<>();\n         configMap.put(\"key1\", \"value1\");\n         assertThat(ConfigMapContext.getInstance().getConfigMap(), is(configMap));\n-        ShardingProperties shardingProperties = getFieldValue(\"shardingProperties\", ShardingDataSource.class, dataSource);\n+        ShardingProperties shardingProperties = shardingContext.getShardingProperties();\n         assertTrue((Boolean) shardingProperties.getValue(ShardingPropertiesConstant.SQL_SHOW));\n         assertThat((Integer) shardingProperties.getValue(ShardingPropertiesConstant.EXECUTOR_SIZE), is(100));\n     }",
      "parent_sha": "e1811cec6e982e396f697792e5b8e408383a6460"
    }
  },
  {
    "oid": "ca0f9a106ef4345aa34716c7bbc18cf79c0020a5",
    "message": "refactor AssertEngine",
    "date": "2018-05-29T10:22:09Z",
    "url": "https://github.com/apache/shardingsphere/commit/ca0f9a106ef4345aa34716c7bbc18cf79c0020a5",
    "details": {
      "sha": "319e052bc9ec1875e20d27e1f12efe5fffa66176",
      "filename": "sharding-jdbc/src/test/java/io/shardingsphere/dbtest/asserts/AssertEngine.java",
      "status": "modified",
      "additions": 54,
      "deletions": 54,
      "changes": 108,
      "blob_url": "https://github.com/apache/shardingsphere/blob/ca0f9a106ef4345aa34716c7bbc18cf79c0020a5/sharding-jdbc%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Fdbtest%2Fasserts%2FAssertEngine.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/ca0f9a106ef4345aa34716c7bbc18cf79c0020a5/sharding-jdbc%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Fdbtest%2Fasserts%2FAssertEngine.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Fdbtest%2Fasserts%2FAssertEngine.java?ref=ca0f9a106ef4345aa34716c7bbc18cf79c0020a5",
      "patch": "@@ -89,11 +89,11 @@ public void run() throws IOException, SQLException, SAXException, ParserConfigur\n         Map<String, DataSource> dataSourceMap = createDataSourceMap(SchemaEnvironmentManager.getDataSourceNames(shardingRuleType), databaseTypeEnvironment.getDatabaseType());\n         DataSource dataSource = createDataSource(dataSourceMap);\n         if (dataSetAssert instanceof DQLDataSetAssert) {\n-            dqlRun((DQLDataSetAssert) dataSetAssert, databaseTypeEnvironment.getDatabaseType(), dataSource, dataSourceMap);\n+            dqlRun((DQLDataSetAssert) dataSetAssert, dataSource, dataSourceMap);\n         } else if (dataSetAssert instanceof DMLDataSetAssert) {\n-            dmlRun((DMLDataSetAssert) dataSetAssert, databaseTypeEnvironment.getDatabaseType(), dataSource, dataSourceMap);\n+            dmlRun((DMLDataSetAssert) dataSetAssert, dataSource, dataSourceMap);\n         } else if (dataSetAssert instanceof DDLDataSetAssert) {\n-            ddlRun((DDLDataSetAssert) dataSetAssert, databaseTypeEnvironment.getDatabaseType(), dataSource);\n+            ddlRun((DDLDataSetAssert) dataSetAssert, dataSource);\n         }\n     }\n     \n@@ -111,7 +111,7 @@ private DataSource createDataSource(final Map<String, DataSource> dataSourceMap)\n                         : YamlShardingDataSourceFactory.createDataSource(dataSourceMap, new File(EnvironmentPath.getShardingRuleResourceFile(shardingRuleType)));\n     }\n     \n-    private void ddlRun(final DDLDataSetAssert ddlDefinition, final DatabaseType databaseType, final DataSource dataSource) throws SQLException, ParseException, IOException, SAXException, ParserConfigurationException, XPathExpressionException, JAXBException {\n+    private void ddlRun(final DDLDataSetAssert ddlDefinition, final DataSource dataSource) throws SQLException, ParseException, IOException, SAXException, ParserConfigurationException, XPathExpressionException, JAXBException {\n         String rootSQL = ddlDefinition.getSql();\n         rootSQL = SQLCasesLoader.getInstance().getSupportedSQL(rootSQL);\n         String expectedDataFile = rootPath + \"asserts/ddl/\" + shardingRuleType + \"/\" + ddlDefinition.getExpectedDataFile();\n@@ -121,28 +121,28 @@ private void ddlRun(final DDLDataSetAssert ddlDefinition, final DatabaseType dat\n         if (ddlDefinition.getParameter().getValues().isEmpty() && ddlDefinition.getParameter().getValueReplaces().isEmpty()) {\n             List<AssertSubDefinition> subAsserts = ddlDefinition.getSubAsserts();\n             if (subAsserts.isEmpty()) {\n-                doUpdateUseStatementToExecuteUpdateDDL(shardingRuleType, databaseType, expectedDataFile, dataSource, ddlDefinition, rootSQL);\n-                doUpdateUseStatementToExecuteDDL(shardingRuleType, databaseType, expectedDataFile, dataSource, ddlDefinition, rootSQL);\n-                doUpdateUsePreparedStatementToExecuteUpdateDDL(shardingRuleType, databaseType, expectedDataFile, dataSource, ddlDefinition, rootSQL);\n-                doUpdateUsePreparedStatementToExecuteDDL(shardingRuleType, databaseType, expectedDataFile, dataSource, ddlDefinition, rootSQL);\n+                doUpdateUseStatementToExecuteUpdateDDL(expectedDataFile, dataSource, ddlDefinition, rootSQL);\n+                doUpdateUseStatementToExecuteDDL(expectedDataFile, dataSource, ddlDefinition, rootSQL);\n+                doUpdateUsePreparedStatementToExecuteUpdateDDL(expectedDataFile, dataSource, ddlDefinition, rootSQL);\n+                doUpdateUsePreparedStatementToExecuteDDL(expectedDataFile, dataSource, ddlDefinition, rootSQL);\n             } else {\n-                ddlSubRun(shardingRuleType, databaseType, rootPath, dataSource, ddlDefinition, rootSQL, expectedDataFile, subAsserts);\n+                ddlSubRun(dataSource, ddlDefinition, rootSQL, expectedDataFile, subAsserts);\n             }\n         } else {\n-            doUpdateUseStatementToExecuteUpdateDDL(shardingRuleType, databaseType, expectedDataFile, dataSource, ddlDefinition, rootSQL);\n-            doUpdateUseStatementToExecuteDDL(shardingRuleType, databaseType, expectedDataFile, dataSource, ddlDefinition, rootSQL);\n-            doUpdateUsePreparedStatementToExecuteUpdateDDL(shardingRuleType, databaseType, expectedDataFile, dataSource, ddlDefinition, rootSQL);\n-            doUpdateUsePreparedStatementToExecuteDDL(shardingRuleType, databaseType, expectedDataFile, dataSource, ddlDefinition, rootSQL);\n+            doUpdateUseStatementToExecuteUpdateDDL(expectedDataFile, dataSource, ddlDefinition, rootSQL);\n+            doUpdateUseStatementToExecuteDDL(expectedDataFile, dataSource, ddlDefinition, rootSQL);\n+            doUpdateUsePreparedStatementToExecuteUpdateDDL(expectedDataFile, dataSource, ddlDefinition, rootSQL);\n+            doUpdateUsePreparedStatementToExecuteDDL(expectedDataFile, dataSource, ddlDefinition, rootSQL);\n             List<AssertSubDefinition> subAsserts = ddlDefinition.getSubAsserts();\n             if (!subAsserts.isEmpty()) {\n-                ddlSubRun(shardingRuleType, databaseType, rootPath, dataSource, ddlDefinition, rootSQL, expectedDataFile, subAsserts);\n+                ddlSubRun(dataSource, ddlDefinition, rootSQL, expectedDataFile, subAsserts);\n             }\n         }\n     }\n     \n-    private void ddlSubRun(final String shardingRuleType, final DatabaseType databaseType, final String rootPath, final DataSource dataSource, final DDLDataSetAssert anAssert, final String rootSQL, final String expectedDataFile, final List<AssertSubDefinition> subAsserts) throws SQLException, ParseException, IOException, SAXException, ParserConfigurationException, XPathExpressionException, JAXBException {\n+    private void ddlSubRun(final DataSource dataSource, final DDLDataSetAssert anAssert, final String rootSQL, final String expectedDataFile, final List<AssertSubDefinition> subAsserts) throws SQLException, ParseException, IOException, SAXException, ParserConfigurationException, XPathExpressionException, JAXBException {\n         for (AssertSubDefinition each : subAsserts) {\n-            if (!each.getDatabaseTypes().contains(databaseType)) {\n+            if (!each.getDatabaseTypes().contains(databaseTypeEnvironment.getDatabaseType())) {\n                 break;\n             }\n             String baseConfig = each.getShardingRuleTypes();\n@@ -177,14 +177,14 @@ private void ddlSubRun(final String shardingRuleType, final DatabaseType databas\n                     anAssert.getShardingRuleTypes(), anAssert.getDatabaseTypes(), anAssert.getCleanSql(), expectedDataFileSub,\n                     anAssert.getSql(), anAssert.getTable(),\n                     parameter, anAssert.getSubAsserts(), \"\");\n-            doUpdateUseStatementToExecuteUpdateDDL(shardingRuleType, databaseType, expectedDataFileTmp, dataSource, anAssertSub, rootSQL);\n-            doUpdateUseStatementToExecuteDDL(shardingRuleType, databaseType, expectedDataFileTmp, dataSource, anAssertSub, rootSQL);\n-            doUpdateUsePreparedStatementToExecuteUpdateDDL(shardingRuleType, databaseType, expectedDataFileTmp, dataSource, anAssertSub, rootSQL);\n-            doUpdateUsePreparedStatementToExecuteDDL(shardingRuleType, databaseType, expectedDataFileTmp, dataSource, anAssertSub, rootSQL);\n+            doUpdateUseStatementToExecuteUpdateDDL(expectedDataFileTmp, dataSource, anAssertSub, rootSQL);\n+            doUpdateUseStatementToExecuteDDL( expectedDataFileTmp, dataSource, anAssertSub, rootSQL);\n+            doUpdateUsePreparedStatementToExecuteUpdateDDL(expectedDataFileTmp, dataSource, anAssertSub, rootSQL);\n+            doUpdateUsePreparedStatementToExecuteDDL(expectedDataFileTmp, dataSource, anAssertSub, rootSQL);\n         }\n     }\n     \n-    private void dmlRun(final DMLDataSetAssert dmlDefinition, final DatabaseType databaseType, final DataSource dataSource, final Map<String, DataSource> dataSourceMap) throws IOException, SAXException, ParserConfigurationException, XPathExpressionException, SQLException, ParseException, JAXBException {\n+    private void dmlRun(final DMLDataSetAssert dmlDefinition, final DataSource dataSource, final Map<String, DataSource> dataSourceMap) throws IOException, SAXException, ParserConfigurationException, XPathExpressionException, SQLException, ParseException, JAXBException {\n         String rootSQL = dmlDefinition.getSql();\n         rootSQL = SQLCasesLoader.getInstance().getSupportedSQL(rootSQL);\n         String expectedDataFile = rootPath + \"asserts/dml/\" + shardingRuleType + \"/\" + dmlDefinition.getExpectedDataFile();\n@@ -204,7 +204,7 @@ private void dmlRun(final DMLDataSetAssert dmlDefinition, final DatabaseType dat\n                 resultDoUpdateUsePreparedStatementToExecute = resultDoUpdateUsePreparedStatementToExecute + doUpdateUsePreparedStatementToExecute(expectedDataFile, dataSource, dataSourceMap, dmlDefinition, rootSQL);\n             } else {\n                 for (AssertSubDefinition subAssert : subAsserts) {\n-                    if (!subAssert.getDatabaseTypes().contains(databaseType)) {\n+                    if (!subAssert.getDatabaseTypes().contains(databaseTypeEnvironment.getDatabaseType())) {\n                         break;\n                     }\n                     String baseConfigSub = subAssert.getShardingRuleTypes();\n@@ -256,7 +256,7 @@ private void dmlRun(final DMLDataSetAssert dmlDefinition, final DatabaseType dat\n             List<AssertSubDefinition> subAsserts = dmlDefinition.getSubAsserts();\n             if (!subAsserts.isEmpty()) {\n                 for (AssertSubDefinition subAssert : subAsserts) {\n-                    if (!subAssert.getDatabaseTypes().contains(databaseType)) {\n+                    if (!subAssert.getDatabaseTypes().contains(databaseTypeEnvironment.getDatabaseType())) {\n                         break;\n                     }\n                     String baseConfigSub = subAssert.getShardingRuleTypes();\n@@ -309,7 +309,7 @@ private void dmlRun(final DMLDataSetAssert dmlDefinition, final DatabaseType dat\n         }\n     }\n     \n-    private void dqlRun(final DQLDataSetAssert dqlDefinition, final DatabaseType databaseType, final DataSource dataSource, final Map<String, DataSource> dataSourceMap) throws IOException, SAXException, ParserConfigurationException, XPathExpressionException, SQLException, ParseException, JAXBException {\n+    private void dqlRun(final DQLDataSetAssert dqlDefinition, final DataSource dataSource, final Map<String, DataSource> dataSourceMap) throws IOException, SAXException, ParserConfigurationException, XPathExpressionException, SQLException, ParseException {\n         String rootSQL = dqlDefinition.getSql();\n         rootSQL = SQLCasesLoader.getInstance().getSupportedSQL(rootSQL);\n         try {\n@@ -326,7 +326,7 @@ private void dqlRun(final DQLDataSetAssert dqlDefinition, final DatabaseType dat\n                     doSelectUseStatement(expectedDataFile, dataSource, dqlDefinition, rootSQL);\n                     doSelectUseStatementToExecuteSelect(expectedDataFile, dataSource, dqlDefinition, rootSQL);\n                 } else {\n-                    dqlSubRun(databaseType, shardingRuleType, rootPath, dataSource, dqlDefinition, rootSQL, expectedDataFile, subAsserts);\n+                    dqlSubRun(dataSource, dqlDefinition, rootSQL, expectedDataFile, subAsserts);\n                 }\n             } else {\n                 doSelectUsePreparedStatement(expectedDataFile, dataSource, dqlDefinition, rootSQL);\n@@ -335,25 +335,25 @@ private void dqlRun(final DQLDataSetAssert dqlDefinition, final DatabaseType dat\n                 doSelectUseStatementToExecuteSelect(expectedDataFile, dataSource, dqlDefinition, rootSQL);\n                 List<AssertSubDefinition> subAsserts = dqlDefinition.getSubAsserts();\n                 if (!subAsserts.isEmpty()) {\n-                    dqlSubRun(databaseType, shardingRuleType, rootPath, dataSource, dqlDefinition, rootSQL, expectedDataFile, subAsserts);\n+                    dqlSubRun(dataSource, dqlDefinition, rootSQL, expectedDataFile, subAsserts);\n                 }\n             }\n         } finally {\n             dataInitializer.clearData(dataSourceMap);\n         }\n     }\n     \n-    private void dqlSubRun(final DatabaseType databaseType, final String dbName, final String rootPath, final DataSource dataSource, final DQLDataSetAssert anAssert, final String rootSQL, final String expectedDataFile, final List<AssertSubDefinition> subAsserts) throws SQLException, ParseException, IOException, SAXException, ParserConfigurationException, XPathExpressionException {\n+    private void dqlSubRun(final DataSource dataSource, final DQLDataSetAssert anAssert, final String rootSQL, final String expectedDataFile, final List<AssertSubDefinition> subAsserts) throws SQLException, ParseException, IOException, SAXException, ParserConfigurationException, XPathExpressionException {\n         for (AssertSubDefinition subAssert : subAsserts) {\n-            if (!subAssert.getDatabaseTypes().contains(databaseType)) {\n+            if (!subAssert.getDatabaseTypes().contains(databaseTypeEnvironment.getDatabaseType())) {\n                 break;\n             }\n             String baseSubConfig = subAssert.getShardingRuleTypes();\n             if (StringUtils.isNotBlank(baseSubConfig)) {\n                 String[] baseConfigs = StringUtils.split(baseSubConfig, \",\");\n                 boolean flag = true;\n                 for (String config : baseConfigs) {\n-                    if (dbName.equals(config)) {\n+                    if (rootPath.equals(config)) {\n                         flag = false;\n                     }\n                 }\n@@ -368,7 +368,7 @@ private void dqlSubRun(final DatabaseType databaseType, final String dbName, fin\n             if (StringUtils.isBlank(expectedDataFileSub)) {\n                 expectedDataFileSub = anAssert.getExpectedDataFile();\n             } else {\n-                expectedDataFileTmp = rootPath + \"asserts/dql/\" + dbName + \"/\" + expectedDataFileSub;\n+                expectedDataFileTmp = rootPath + \"asserts/dql/\" + rootPath + \"/\" + expectedDataFileSub;\n                 if (!new File(expectedDataFileTmp).exists()) {\n                     expectedDataFileTmp = rootPath + \"asserts/dql/\" + expectedDataFileSub;\n                 }\n@@ -386,7 +386,7 @@ private void dqlSubRun(final DatabaseType databaseType, final String dbName, fin\n         }\n     }\n     \n-    private int doUpdateUsePreparedStatementToExecute(final String expectedDataFile, final DataSource dataSource, final Map<String, DataSource> dataSourceMap, final DMLDataSetAssert anAssert, final String rootSQL) throws SQLException, ParseException, IOException, SAXException, ParserConfigurationException, XPathExpressionException, JAXBException {\n+    private int doUpdateUsePreparedStatementToExecute(final String expectedDataFile, final DataSource dataSource, final Map<String, DataSource> dataSourceMap, final DMLDataSetAssert anAssert, final String rootSQL) throws SQLException, ParseException, IOException, SAXException, ParserConfigurationException, XPathExpressionException {\n         try {\n             dataInitializer.initializeData(dataSourceMap);\n             try (Connection connection = dataSource.getConnection()) {\n@@ -409,14 +409,14 @@ private int doUpdateUsePreparedStatementToExecute(final String expectedDataFile,\n         }\n     }\n     \n-    private void doUpdateUsePreparedStatementToExecuteDDL(final String shardingRuleType, final DatabaseType databaseType, final String expectedDataFile, final DataSource dataSource, final DDLDataSetAssert anAssert, final String rootsql) throws SQLException, ParseException, IOException, SAXException, ParserConfigurationException, XPathExpressionException, JAXBException {\n+    private void doUpdateUsePreparedStatementToExecuteDDL(final String expectedDataFile, final DataSource dataSource, final DDLDataSetAssert anAssert, final String rootsql) throws SQLException, ParseException, IOException, SAXException, ParserConfigurationException, XPathExpressionException, JAXBException {\n         try {\n             try (Connection con = dataSource.getConnection()) {\n                 if (StringUtils.isNotBlank(anAssert.getCleanSql())) {\n-                    SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseType, anAssert.getCleanSql());\n+                    SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseTypeEnvironment.getDatabaseType(), anAssert.getCleanSql());\n                 }\n                 if (StringUtils.isNotBlank(anAssert.getInitSql())) {\n-                    SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseType, anAssert.getInitSql());\n+                    SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseTypeEnvironment.getDatabaseType(), anAssert.getInitSql());\n                 }\n                 DatabaseUtil.updateUsePreparedStatementToExecute(con, rootsql,\n                         anAssert.getParameter());\n@@ -428,15 +428,15 @@ private void doUpdateUsePreparedStatementToExecuteDDL(final String shardingRuleT\n             }\n         } finally {\n             if (StringUtils.isNotBlank(anAssert.getCleanSql())) {\n-                SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseType, anAssert.getCleanSql());\n+                SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseTypeEnvironment.getDatabaseType(), anAssert.getCleanSql());\n             }\n             if (StringUtils.isNotBlank(anAssert.getInitSql())) {\n-                SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseType, anAssert.getInitSql());\n+                SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseTypeEnvironment.getDatabaseType(), anAssert.getInitSql());\n             }\n         }\n     }\n     \n-    private int doUpdateUsePreparedStatementToExecuteUpdate(final String expectedDataFile, final DataSource dataSource, final Map<String, DataSource> dataSourceMap, final DMLDataSetAssert anAssert, final String rootSQL) throws SQLException, ParseException, IOException, SAXException, ParserConfigurationException, XPathExpressionException, JAXBException {\n+    private int doUpdateUsePreparedStatementToExecuteUpdate(final String expectedDataFile, final DataSource dataSource, final Map<String, DataSource> dataSourceMap, final DMLDataSetAssert anAssert, final String rootSQL) throws SQLException, ParseException, IOException, SAXException, ParserConfigurationException, XPathExpressionException {\n         try {\n             dataInitializer.initializeData(dataSourceMap);\n             try (Connection connection = dataSource.getConnection()) {\n@@ -456,14 +456,14 @@ private int doUpdateUsePreparedStatementToExecuteUpdate(final String expectedDat\n         }\n     }\n     \n-    private void doUpdateUsePreparedStatementToExecuteUpdateDDL(final String shardingRuleType, final DatabaseType databaseType, final String expectedDataFile, final DataSource dataSource, final DDLDataSetAssert anAssert, final String rootSQL) throws SQLException, ParseException, IOException, SAXException, ParserConfigurationException, XPathExpressionException, JAXBException {\n+    private void doUpdateUsePreparedStatementToExecuteUpdateDDL(final String expectedDataFile, final DataSource dataSource, final DDLDataSetAssert anAssert, final String rootSQL) throws SQLException, ParseException, IOException, SAXException, ParserConfigurationException, XPathExpressionException, JAXBException {\n         try {\n             try (Connection con = dataSource.getConnection()) {\n                 if (StringUtils.isNotBlank(anAssert.getCleanSql())) {\n-                    SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseType, anAssert.getCleanSql());\n+                    SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseTypeEnvironment.getDatabaseType(), anAssert.getCleanSql());\n                 }\n                 if (StringUtils.isNotBlank(anAssert.getInitSql())) {\n-                    SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseType, anAssert.getInitSql());\n+                    SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseTypeEnvironment.getDatabaseType(), anAssert.getInitSql());\n                 }\n                 DatabaseUtil.updateUsePreparedStatementToExecuteUpdate(con, rootSQL,\n                         anAssert.getParameter());\n@@ -474,15 +474,15 @@ private void doUpdateUsePreparedStatementToExecuteUpdateDDL(final String shardin\n             }\n         } finally {\n             if (StringUtils.isNotBlank(anAssert.getCleanSql())) {\n-                SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseType, anAssert.getCleanSql());\n+                SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseTypeEnvironment.getDatabaseType(), anAssert.getCleanSql());\n             }\n             if (StringUtils.isNotBlank(anAssert.getInitSql())) {\n-                SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseType, anAssert.getInitSql());\n+                SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseTypeEnvironment.getDatabaseType(), anAssert.getInitSql());\n             }\n         }\n     }\n     \n-    private int doUpdateUseStatementToExecute(final String expectedDataFile, final DataSource dataSource, final Map<String, DataSource> dataSourceMap, final DMLDataSetAssert anAssert, final String rootSQL) throws SQLException, ParseException, IOException, SAXException, ParserConfigurationException, XPathExpressionException, JAXBException {\n+    private int doUpdateUseStatementToExecute(final String expectedDataFile, final DataSource dataSource, final Map<String, DataSource> dataSourceMap, final DMLDataSetAssert anAssert, final String rootSQL) throws SQLException, ParseException, IOException, SAXException, ParserConfigurationException, XPathExpressionException {\n         try {\n             dataInitializer.initializeData(dataSourceMap);\n             try (Connection connection = dataSource.getConnection()) {\n@@ -502,14 +502,14 @@ private int doUpdateUseStatementToExecute(final String expectedDataFile, final D\n         }\n     }\n     \n-    private void doUpdateUseStatementToExecuteDDL(final String shardingRuleType, final DatabaseType databaseType, final String expectedDataFile, final DataSource dataSource, final DDLDataSetAssert anAssert, final String rootSQL) throws SQLException, IOException, SAXException, ParserConfigurationException, XPathExpressionException, JAXBException {\n+    private void doUpdateUseStatementToExecuteDDL(final String expectedDataFile, final DataSource dataSource, final DDLDataSetAssert anAssert, final String rootSQL) throws SQLException, IOException, SAXException, ParserConfigurationException, XPathExpressionException, JAXBException {\n         try {\n             try (Connection con = dataSource.getConnection()) {\n                 if (StringUtils.isNotBlank(anAssert.getCleanSql())) {\n-                    SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseType, anAssert.getCleanSql());\n+                    SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseTypeEnvironment.getDatabaseType(), anAssert.getCleanSql());\n                 }\n                 if (StringUtils.isNotBlank(anAssert.getInitSql())) {\n-                    SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseType, anAssert.getInitSql());\n+                    SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseTypeEnvironment.getDatabaseType(), anAssert.getInitSql());\n                 }\n                 DatabaseUtil.updateUseStatementToExecute(con, rootSQL, anAssert.getParameter());\n                 DatasetDefinition checkDataset = DataSetsParser.parse(new File(expectedDataFile), \"data\");\n@@ -519,15 +519,15 @@ private void doUpdateUseStatementToExecuteDDL(final String shardingRuleType, fin\n             }\n         } finally {\n             if (!Strings.isNullOrEmpty(anAssert.getCleanSql())) {\n-                SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseType, anAssert.getCleanSql());\n+                SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseTypeEnvironment.getDatabaseType(), anAssert.getCleanSql());\n             }\n             if (!Strings.isNullOrEmpty(anAssert.getInitSql())) {\n-                SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseType, anAssert.getInitSql());\n+                SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseTypeEnvironment.getDatabaseType(), anAssert.getInitSql());\n             }\n         }\n     }\n     \n-    private int doUpdateUseStatementToExecuteUpdate(final String expectedDataFile, final DataSource dataSource, final Map<String, DataSource> dataSourceMap, final DMLDataSetAssert anAssert, final String rootSQL) throws SQLException, ParseException, IOException, SAXException, ParserConfigurationException, XPathExpressionException, JAXBException {\n+    private int doUpdateUseStatementToExecuteUpdate(final String expectedDataFile, final DataSource dataSource, final Map<String, DataSource> dataSourceMap, final DMLDataSetAssert anAssert, final String rootSQL) throws SQLException, ParseException, IOException, SAXException, ParserConfigurationException, XPathExpressionException {\n         try {\n             dataInitializer.initializeData(dataSourceMap);\n             try (Connection connection = dataSource.getConnection()) {\n@@ -547,14 +547,14 @@ private int doUpdateUseStatementToExecuteUpdate(final String expectedDataFile, f\n         }\n     }\n     \n-    private void doUpdateUseStatementToExecuteUpdateDDL(final String shardingRuleType, final DatabaseType databaseType, final String expectedDataFile, final DataSource dataSource, final DDLDataSetAssert anAssert, final String rootsql) throws SQLException, IOException, SAXException, ParserConfigurationException, XPathExpressionException, JAXBException {\n+    private void doUpdateUseStatementToExecuteUpdateDDL(final String expectedDataFile, final DataSource dataSource, final DDLDataSetAssert anAssert, final String rootsql) throws SQLException, IOException, SAXException, ParserConfigurationException, XPathExpressionException, JAXBException {\n         try {\n             try (Connection con = dataSource.getConnection()) {\n                 if (StringUtils.isNotBlank(anAssert.getCleanSql())) {\n-                    SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseType, anAssert.getCleanSql());\n+                    SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseTypeEnvironment.getDatabaseType(), anAssert.getCleanSql());\n                 }\n                 if (StringUtils.isNotBlank(anAssert.getInitSql())) {\n-                    SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseType, anAssert.getInitSql());\n+                    SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseTypeEnvironment.getDatabaseType(), anAssert.getInitSql());\n                 }\n                 DatabaseUtil.updateUseStatementToExecuteUpdate(con, rootsql, anAssert.getParameter());\n                 DatasetDefinition checkDataset = DataSetsParser.parse(new File(expectedDataFile), \"data\");\n@@ -564,10 +564,10 @@ private void doUpdateUseStatementToExecuteUpdateDDL(final String shardingRuleTyp\n             }\n         } finally {\n             if (!Strings.isNullOrEmpty(anAssert.getCleanSql())) {\n-                SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseType, anAssert.getCleanSql());\n+                SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseTypeEnvironment.getDatabaseType(), anAssert.getCleanSql());\n             }\n             if (!Strings.isNullOrEmpty(anAssert.getInitSql())) {\n-                SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseType, anAssert.getInitSql());\n+                SchemaEnvironmentManager.executeSQL(shardingRuleType, databaseTypeEnvironment.getDatabaseType(), anAssert.getInitSql());\n             }\n         }\n     }",
      "parent_sha": "fdb0054e01cd0b9fefe232ea8f9d7c3f71facfcb"
    }
  },
  {
    "oid": "72ee65714955f297c3d8a4eb6ce76b3903bfda10",
    "message": "for #601: refactor DMLIntegrateTest",
    "date": "2018-06-07T03:37:14Z",
    "url": "https://github.com/apache/shardingsphere/commit/72ee65714955f297c3d8a4eb6ce76b3903bfda10",
    "details": {
      "sha": "e1321aaa972b4ab34e4d4993e49ea8535c9b42cc",
      "filename": "sharding-jdbc/src/test/java/io/shardingsphere/dbtest/engine/DMLIntegrateTest.java",
      "status": "modified",
      "additions": 20,
      "deletions": 15,
      "changes": 35,
      "blob_url": "https://github.com/apache/shardingsphere/blob/72ee65714955f297c3d8a4eb6ce76b3903bfda10/sharding-jdbc%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Fdbtest%2Fengine%2FDMLIntegrateTest.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/72ee65714955f297c3d8a4eb6ce76b3903bfda10/sharding-jdbc%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Fdbtest%2Fengine%2FDMLIntegrateTest.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Fdbtest%2Fengine%2FDMLIntegrateTest.java?ref=72ee65714955f297c3d8a4eb6ce76b3903bfda10",
      "patch": "@@ -183,28 +183,33 @@ private void assertDataSet() throws SQLException, IOException, JAXBException {\n             expected = (DataSetsRoot) JAXBContext.newInstance(DataSetsRoot.class).createUnmarshaller().unmarshal(reader);\n         }\n         assertThat(\"Only support single table for DML.\", expected.getMetadataList().size(), is(1));\n-        DataSetMetadata dataSetMetadata = expected.getMetadataList().get(0);\n-        for (String each : new InlineExpressionParser(dataSetMetadata.getDataNodes()).evaluate()) {\n+        DataSetMetadata expectedDataSetMetadata = expected.getMetadataList().get(0);\n+        for (String each : new InlineExpressionParser(expectedDataSetMetadata.getDataNodes()).evaluate()) {\n             DataNode dataNode = new DataNode(each);\n             try (Connection connection = getDataSourceMap().get(dataNode.getDataSourceName()).getConnection();\n                  PreparedStatement preparedStatement = connection.prepareStatement(String.format(\"SELECT * FROM %s\", dataNode.getTableName()))) {\n-                try (ResultSet resultSet = preparedStatement.executeQuery()) {\n-                    int count = 0;\n-                    while (resultSet.next()) {\n-                        List<String> actualResultSetData = getResultSetData(dataSetMetadata, resultSet);\n-                        assertTrue(String.format(\"Cannot find actual record '%s' from data node '%s'\", actualResultSetData, each), isMatch(each, actualResultSetData, expected.getDataSetRows()));\n-                        count++;\n-                    }\n-                    assertThat(String.format(\"Count of records are different for data node '%s'\", each), count, is(countExpectedDataSetRows(each, expected.getDataSetRows())));\n-                }\n+                assertDataSet(preparedStatement, each, expected.getDataSetRows(), expectedDataSetMetadata);\n             }\n         }\n     }\n     \n-    private List<String> getResultSetData(final DataSetMetadata dataSetMetadata, final ResultSet resultSet) throws SQLException {\n-        List<String> result = new ArrayList<>(dataSetMetadata.getColumnMetadataList().size());\n-        for (DataSetColumnMetadata each : dataSetMetadata.getColumnMetadataList()) {\n-            Object resultSetValue = resultSet.getObject(each.getName());\n+    private void assertDataSet(final PreparedStatement actualPreparedStatement, final String actualDataNode, \n+                               final List<DataSetRow> expectedDataSetRows, final DataSetMetadata expectedDataSetMetadata) throws SQLException {\n+        try (ResultSet actualResultSet = actualPreparedStatement.executeQuery()) {\n+            int count = 0;\n+            while (actualResultSet.next()) {\n+                List<String> actualResultSetData = getResultSetData(actualResultSet, expectedDataSetMetadata);\n+                assertTrue(String.format(\"Cannot find actual record '%s' from data node '%s'\", actualResultSetData, actualDataNode), isMatch(actualDataNode, actualResultSetData, expectedDataSetRows));\n+                count++;\n+            }\n+            assertThat(String.format(\"Count of records are different for data node '%s'\", actualDataNode), count, is(countExpectedDataSetRows(actualDataNode, expectedDataSetRows)));\n+        }\n+    }\n+    \n+    private List<String> getResultSetData(final ResultSet actualResultSet, final DataSetMetadata expectedDataSetMetadata) throws SQLException {\n+        List<String> result = new ArrayList<>(expectedDataSetMetadata.getColumnMetadataList().size());\n+        for (DataSetColumnMetadata each : expectedDataSetMetadata.getColumnMetadataList()) {\n+            Object resultSetValue = actualResultSet.getObject(each.getName());\n             result.add(resultSetValue instanceof Date ? new SimpleDateFormat(\"yyyy-MM-dd\").format(resultSetValue) : resultSetValue.toString());\n         }\n         return result;",
      "parent_sha": "9dd1757d4c9da9151742ced6f3b44f316e961e7a"
    }
  },
  {
    "oid": "5a6fe18f834d9ae25b8fb429e85bb55616e01030",
    "message": "modify test cases for tableToken",
    "date": "2019-04-30T06:47:19Z",
    "url": "https://github.com/apache/shardingsphere/commit/5a6fe18f834d9ae25b8fb429e85bb55616e01030",
    "details": {
      "sha": "b81467ec898e39b5d2725e4604249c0effeffc7c",
      "filename": "sharding-core/sharding-core-optimize/src/test/java/org/apache/shardingsphere/core/optimize/engine/encrypt/EncryptInsertOptimizeEngineTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/apache/shardingsphere/blob/5a6fe18f834d9ae25b8fb429e85bb55616e01030/sharding-core%2Fsharding-core-optimize%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Foptimize%2Fengine%2Fencrypt%2FEncryptInsertOptimizeEngineTest.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/5a6fe18f834d9ae25b8fb429e85bb55616e01030/sharding-core%2Fsharding-core-optimize%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Foptimize%2Fengine%2Fencrypt%2FEncryptInsertOptimizeEngineTest.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsharding-core-optimize%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Foptimize%2Fengine%2Fencrypt%2FEncryptInsertOptimizeEngineTest.java?ref=5a6fe18f834d9ae25b8fb429e85bb55616e01030",
      "patch": "@@ -84,7 +84,7 @@ public void assertInsertStatementWithValuesWithPlaceHolderWithEncrypt() {\n     private InsertStatement createInsertStatementWithValuesWithPlaceHolderWithEncrypt() {\n         InsertStatement result = new InsertStatement();\n         result.getTables().add(new Table(\"t_encrypt\", null));\n-        result.addSQLToken(new TableToken(12, \"t_encrypt\", QuoteCharacter.NONE, 0));\n+        result.addSQLToken(new TableToken(12, 20, \"t_encrypt\", QuoteCharacter.NONE, 0));\n         result.addSQLToken(new InsertValuesToken(34));\n         result.getColumnNames().add(\"col1\");\n         result.getColumnNames().add(\"col2\");\n@@ -112,7 +112,7 @@ public void assertInsertStatementWithValuesWithoutPlaceHolderWithQueryEncrypt()\n     private InsertStatement createInsertStatementWithValuesWithoutPlaceHolderWithQueryEncrypt() {\n         InsertStatement result = new InsertStatement();\n         result.getTables().add(new Table(\"t_query_encrypt\", null));\n-        result.addSQLToken(new TableToken(12, \"t_query_encrypt\", QuoteCharacter.NONE, 0));\n+        result.addSQLToken(new TableToken(12, 27, \"t_query_encrypt\", QuoteCharacter.NONE, 0));\n         result.addSQLToken(new InsertValuesToken(40));\n         result.getColumnNames().add(\"col1\");\n         result.getColumnNames().add(\"col2\");\n@@ -138,7 +138,7 @@ public void assertInsertStatementWithSetWithoutPlaceHolderWithEncrypt() {\n     private InsertStatement createInsertStatementWithSetWithoutPlaceHolderWithEncrypt() {\n         InsertStatement result = new InsertStatement();\n         result.getTables().add(new Table(\"t_encrypt\", null));\n-        result.addSQLToken(new TableToken(12, \"t_encrypt\", QuoteCharacter.NONE, 0));\n+        result.addSQLToken(new TableToken(12, 20, \"t_encrypt\", QuoteCharacter.NONE, 0));\n         result.addSQLToken(new InsertSetToken(34));\n         result.getColumnNames().add(\"col1\");\n         result.getColumnNames().add(\"col2\");\n@@ -166,7 +166,7 @@ public void assertInsertStatementWithSetWithPlaceHolderWithQueryEncrypt() {\n     private InsertStatement createInsertStatementWithSetWithPlaceHolderWithQueryEncrypt() {\n         InsertStatement result = new InsertStatement();\n         result.getTables().add(new Table(\"t_query_encrypt\", null));\n-        result.addSQLToken(new TableToken(12, \"t_query_encrypt\", QuoteCharacter.NONE, 0));\n+        result.addSQLToken(new TableToken(12, 26, \"t_query_encrypt\", QuoteCharacter.NONE, 0));\n         result.addSQLToken(new InsertSetToken(40));\n         result.getColumnNames().add(\"col1\");\n         result.getColumnNames().add(\"col2\");",
      "parent_sha": "e50673932e1226c4828273965a7426d440172a66"
    }
  },
  {
    "oid": "462382a737b3747bb6ad4e352954fc66c5900448",
    "message": "check style",
    "date": "2019-05-27T10:39:27Z",
    "url": "https://github.com/apache/shardingsphere/commit/462382a737b3747bb6ad4e352954fc66c5900448",
    "details": {
      "sha": "1e2f75422ddcfb63e40c137b7c655362396e77a9",
      "filename": "sharding-jdbc/sharding-jdbc-orchestration/src/main/java/org/apache/shardingsphere/shardingjdbc/orchestration/internal/datasource/AbstractOrchestrationDataSource.java",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/apache/shardingsphere/blob/462382a737b3747bb6ad4e352954fc66c5900448/sharding-jdbc%2Fsharding-jdbc-orchestration%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingjdbc%2Forchestration%2Finternal%2Fdatasource%2FAbstractOrchestrationDataSource.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/462382a737b3747bb6ad4e352954fc66c5900448/sharding-jdbc%2Fsharding-jdbc-orchestration%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingjdbc%2Forchestration%2Finternal%2Fdatasource%2FAbstractOrchestrationDataSource.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc%2Fsharding-jdbc-orchestration%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingjdbc%2Forchestration%2Finternal%2Fdatasource%2FAbstractOrchestrationDataSource.java?ref=462382a737b3747bb6ad4e352954fc66c5900448",
      "patch": "@@ -127,6 +127,20 @@ protected final synchronized Map<String, DataSource> getChangedDataSources(final\n         return result;\n     }\n     \n+    private synchronized Map<String, DataSourceConfiguration> getModifiedDataSources(final Map<String, DataSourceConfiguration> dataSourceConfigurations) {\n+        Map<String, DataSourceConfiguration> result = new LinkedHashMap<>();\n+        for (Entry<String, DataSourceConfiguration> entry : dataSourceConfigurations.entrySet()) {\n+            if (isModifiedDataSource(entry)) {\n+                result.put(entry.getKey(), entry.getValue());\n+            }\n+        }\n+        return result;\n+    }\n+    \n+    private synchronized boolean isModifiedDataSource(final Entry<String, DataSourceConfiguration> dataSourceNameAndConfig) {\n+        return dataSourceConfigurations.containsKey(dataSourceNameAndConfig.getKey()) && dataSourceConfigurations.get(dataSourceNameAndConfig.getKey()).equals(dataSourceNameAndConfig.getValue());\n+    }\n+    \n     protected final synchronized List<String> getDeletedDataSources(final Map<String, DataSourceConfiguration> dataSourceConfigurations) {\n         List<String> result = new LinkedList<>(this.dataSourceConfigurations.keySet());\n         result.removeAll(dataSourceConfigurations.keySet());\n@@ -142,18 +156,4 @@ public boolean apply(final Entry<String, DataSourceConfiguration> input) {\n             }\n         });\n     }\n-    \n-    private synchronized Map<String, DataSourceConfiguration> getModifiedDataSources(final Map<String, DataSourceConfiguration> dataSourceConfigurations) {\n-        Map<String, DataSourceConfiguration> result = new LinkedHashMap<>();\n-        for (Entry<String, DataSourceConfiguration> entry : dataSourceConfigurations.entrySet()) {\n-            if (isModifiedDataSource(entry)) {\n-                result.put(entry.getKey(), entry.getValue());\n-            }\n-        }\n-        return result;\n-    }\n-    \n-    private synchronized boolean isModifiedDataSource(final Entry<String, DataSourceConfiguration> dataSourceNameAndConfig) {\n-        return dataSourceConfigurations.containsKey(dataSourceNameAndConfig.getKey()) && dataSourceConfigurations.get(dataSourceNameAndConfig.getKey()).equals(dataSourceNameAndConfig.getValue());\n-    }\n }",
      "parent_sha": "02c151073494fd64d06eac9b3159c2c3657930b3"
    }
  },
  {
    "oid": "e8a7a05474086f18351aace2a24a0d2e961d1f8f",
    "message": "Fix get tableName bug\nremove unused code",
    "date": "2018-09-26T06:19:07Z",
    "url": "https://github.com/apache/shardingsphere/commit/e8a7a05474086f18351aace2a24a0d2e961d1f8f",
    "details": {
      "sha": "04bdd2178685e8a945866e270f340af764482ccd",
      "filename": "sharding-jdbc-ddl-parser/src/main/java/io/shardingsphere/core/parsing/antler/utils/VisitorUtils.java",
      "status": "modified",
      "additions": 61,
      "deletions": 64,
      "changes": 125,
      "blob_url": "https://github.com/apache/shardingsphere/blob/e8a7a05474086f18351aace2a24a0d2e961d1f8f/sharding-jdbc-ddl-parser%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fparsing%2Fantler%2Futils%2FVisitorUtils.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/e8a7a05474086f18351aace2a24a0d2e961d1f8f/sharding-jdbc-ddl-parser%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fparsing%2Fantler%2Futils%2FVisitorUtils.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc-ddl-parser%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fparsing%2Fantler%2Futils%2FVisitorUtils.java?ref=e8a7a05474086f18351aace2a24a0d2e961d1f8f",
      "patch": "@@ -56,11 +56,12 @@ public static void parseTable(final SQLStatement statement, final ParseTree ddlR\n \n             String dotString = Symbol.DOT.getLiterals();\n             int pos = name.lastIndexOf(dotString);\n-            String literals = name;\n+            String literals = null;\n             if (pos > 0) {\n-                literals = name.substring(dotString.length() + 1);\n+                literals = name.substring(pos+dotString.length() + 1);\n             } else {\n                 pos = 0;\n+                literals = name;\n             }\n \n             statement.getSqlTokens().add(new TableToken(tableNameNode.getStart().getStartIndex(), pos, name));\n@@ -150,58 +151,51 @@ public static void parseAddColumn(final AlterTableStatement statement, final Par\n     }\n \n     /**\n-     * Parse alter table modify column nodes.\n+     * Visit drop table modify column nodes.\n      * \n      * @param statement\n      *            statement parse result\n-     * @param ddlRootNode\n-     *            DDL root node of syntax tree\n+     * @param rootNode\n+     *            Root node of syntax tree\n      */\n-    public static void parseModifyColumn(final AlterTableStatement statement, final ParseTree ddlRootNode) {\n-        ColumnDefinition column = parseColumnDefinition(ddlRootNode);\n+    public static void visitDropColumn(final AlterTableStatement statement, final ParseTree rootNode) {\n+        List<ParseTree> dropColumnCtxs = TreeUtils.getAllDescendantByRuleName(rootNode, \"dropColumn\");\n+        if (null == dropColumnCtxs) {\n+            return;\n+        }\n \n-        if (null != column) {\n-            statement.getUpdateColumns().put(column.getName(), column);\n+        for(ParseTree each : dropColumnCtxs) {\n+            List<ParseTree> columnNodes = TreeUtils.getAllDescendantByRuleName(each, \"columnName\");\n+            if (null == columnNodes) {\n+                continue;\n+            }\n+\n+            for (final ParseTree columnNode : columnNodes) {\n+                statement.getDropColumns().add(SQLUtil.getExactlyValue(columnNode.getText()));\n+            }\n         }\n+        \n     }\n-\n+    \n     /**\n-     * Parse add index nodes.\n+     * Parse alter table modify column nodes.\n      * \n      * @param statement\n      *            statement parse result\n      * @param ddlRootNode\n      *            DDL root node of syntax tree\n      */\n-    public static void parseAddIndex(final AlterTableStatement statement, final ParseTree ddlRootNode) {\n-        ParserRuleContext indexDefOptionNode = (ParserRuleContext) TreeUtils.getFirstChildByRuleName(ddlRootNode,\n-                \"indexDefOption\");\n-        if (null != indexDefOptionNode) {\n-            parseTableIndexNode(statement, indexDefOptionNode);\n+    public static void parseModifyColumn(final AlterTableStatement statement, final ParseTree ddlRootNode) {\n+        ParserRuleContext modifyColumnCtx = (ParserRuleContext) TreeUtils.getFirstChildByRuleName(ddlRootNode,\n+                \"modifyColumn\");\n+        if(null == modifyColumnCtx) {\n+            return;\n         }\n-    }\n-\n-    /**\n-     * Parse index node.\n-     * \n-     * @param statement\n-     *            statement parse result\n-     * @param ancestorNode\n-     *            ancestor of index node\n-     * @return indexName node\n-     */\n-    public static ParserRuleContext parseTableIndexNode(final SQLStatement statement, final ParseTree ancestorNode) {\n-        if (null != ancestorNode) {\n-            ParserRuleContext indexNameNode = (ParserRuleContext) TreeUtils.getFirstChildByRuleName(ancestorNode,\n-                    \"indexName\");\n-            if (null != indexNameNode) {\n-                statement.getSqlTokens().add(new IndexToken(indexNameNode.getStart().getStartIndex(),\n-                        indexNameNode.getText(), statement.getTables().getSingleTableName()));\n-                return indexNameNode;\n-            }\n+        \n+        ColumnDefinition column = parseColumnDefinition(modifyColumnCtx);\n+        if (null != column) {\n+            statement.getUpdateColumns().put(column.getName(), column);\n         }\n-\n-        return null;\n     }\n \n     /**\n@@ -213,18 +207,7 @@ public static ParserRuleContext parseTableIndexNode(final SQLStatement statement\n      *            DDL root node of syntax tree\n      */\n     public static void parseDropIndex(final AlterTableStatement statement, final ParseTree ddlRootNode) {\n-        ParserRuleContext dropIndexDefNode = (ParserRuleContext) TreeUtils.getFirstChildByRuleName(ddlRootNode,\n-                \"dropIndexDef\");\n-        if (null == dropIndexDefNode) {\n-            return;\n-        }\n-\n-        ParserRuleContext indexNameNode = (ParserRuleContext) dropIndexDefNode\n-                .getChild(dropIndexDefNode.getChildCount() - 1);\n-        if (null != indexNameNode) {\n-            statement.getSqlTokens().add(new IndexToken(indexNameNode.getStart().getStartIndex(),\n-                    indexNameNode.getText(), statement.getTables().getSingleTableName()));\n-        }\n+        \n     }\n \n     /**\n@@ -264,7 +247,7 @@ public static boolean parseRenameTable(final AlterTableStatement statement, fina\n             statement.setNewTableName(renameTableNode.getChild(renameTableNode.getChildCount() - 1).getText());\n             return true;\n         }\n-        \n+\n         return false;\n     }\n \n@@ -378,21 +361,35 @@ public static ColumnDefinition parseColumnDefinition(final ParseTree columnDefin\n             return null;\n         }\n \n-        ParserRuleContext columnNameNode = (ParserRuleContext) columnDefinitionNode.getChild(0);\n-        ParserRuleContext dataTypeRule = (ParserRuleContext) columnDefinitionNode.getChild(1);\n-        String typeName = dataTypeRule.getChild(0).getText();\n+        ParserRuleContext columnNameNode = (ParserRuleContext) (ParserRuleContext) TreeUtils.getFirstChildByRuleName(columnDefinitionNode,\n+                \"columnName\");\n+        \n+        if (null == columnNameNode) {\n+            return null;\n+        }\n+\n+        ParserRuleContext dataTypeCtx = (ParserRuleContext) TreeUtils.getFirstChildByRuleName(columnDefinitionNode,\n+                \"dataType\");\n+        \n+        String typeName = null;\n+        if (dataTypeCtx != null) {\n+            typeName = dataTypeCtx.getChild(0).getText();\n+        }\n \n         Integer length = null;\n-        if (dataTypeRule.getChildCount() > 1) {\n-            TerminalNode lengthNode = TreeUtils.getFirstTerminalByType(dataTypeRule, \"NUMBER\");\n-            if (null != lengthNode) {\n-                try {\n-                    length = Integer.parseInt(lengthNode.getText());\n-                } catch (NumberFormatException e) {\n-                    // just for checksty\n-                    length = null;\n-                }\n-            }\n+        \n+        ParserRuleContext dataTypeLengthCtx = (ParserRuleContext) TreeUtils.getFirstChildByRuleName(dataTypeCtx,\n+                \"dataTypeLength\");\n+        \n+        if (null != dataTypeLengthCtx) {\n+           if(dataTypeLengthCtx.getChildCount() >= 3) {\n+               try {\n+                   length = Integer.parseInt(dataTypeLengthCtx.getChild(1).getText());\n+               } catch (NumberFormatException e) {\n+                   // just for checksty\n+                   length = null;\n+               }\n+           }\n         }\n \n         TerminalNode primaryKeyNode = TreeUtils.getFirstTerminalByType(columnDefinitionNode, \"PRIMARY\");",
      "parent_sha": "596914a8210a990cd81b1377bd12c84170a4da13"
    }
  },
  {
    "oid": "07e7d5c707806eba4771d4c2c252374f315f609c",
    "message": "add createInsertValuesToken()",
    "date": "2019-07-24T10:01:15Z",
    "url": "https://github.com/apache/shardingsphere/commit/07e7d5c707806eba4771d4c2c252374f315f609c",
    "details": {
      "sha": "9639c28322af44fc95a401a6714107897d11a7b9",
      "filename": "sharding-core/sharding-core-rewrite/src/main/java/org/apache/shardingsphere/core/rewrite/token/generator/InsertValuesTokenGenerator.java",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/apache/shardingsphere/blob/07e7d5c707806eba4771d4c2c252374f315f609c/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2Ftoken%2Fgenerator%2FInsertValuesTokenGenerator.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/07e7d5c707806eba4771d4c2c252374f315f609c/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2Ftoken%2Fgenerator%2FInsertValuesTokenGenerator.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2Ftoken%2Fgenerator%2FInsertValuesTokenGenerator.java?ref=07e7d5c707806eba4771d4c2c252374f315f609c",
      "patch": "@@ -24,14 +24,12 @@\n import org.apache.shardingsphere.core.parse.sql.segment.dml.assignment.InsertValuesSegment;\n import org.apache.shardingsphere.core.parse.sql.statement.dml.InsertStatement;\n import org.apache.shardingsphere.core.rewrite.builder.ParameterBuilder;\n-import org.apache.shardingsphere.core.rewrite.token.pojo.InsertValueToken;\n import org.apache.shardingsphere.core.rewrite.token.pojo.InsertValuesToken;\n import org.apache.shardingsphere.core.rule.EncryptRule;\n \n import java.util.Arrays;\n import java.util.Collection;\n import java.util.LinkedList;\n-import java.util.List;\n import java.util.Map;\n \n /**\n@@ -55,7 +53,7 @@ public Optional<InsertValuesToken> generateSQLToken(final OptimizedStatement opt\n             return Optional.absent();\n         }\n         initParameters(encryptRule, optimizedStatement, insertValuesSegments);\n-        return Optional.of(new InsertValuesToken(getStartIndex(), getStopIndex(), getInsertValues()));\n+        return Optional.of(createInsertValuesToken());\n     }\n     \n     private boolean isNeedToGenerateSQLToken(final OptimizedStatement optimizedStatement, final Collection<InsertValuesSegment> insertValuesSegments) {\n@@ -84,12 +82,12 @@ private int getStopIndex() {\n         return result;\n     }\n     \n-    private List<InsertValueToken> getInsertValues() {\n-        List<InsertValueToken> insertValueTokens = new LinkedList<>();\n+    private InsertValuesToken createInsertValuesToken() {\n+        InsertValuesToken result = new InsertValuesToken(getStartIndex(), getStopIndex());\n         for (InsertOptimizeResultUnit each : insertOptimizedStatement.getUnits()) {\n-            insertValueTokens.add(new InsertValueToken(getActualInsertColumns(), Arrays.asList(each.getValues()), each.getDataNodes()));\n+            result.addInsertValueToken(getActualInsertColumns(), Arrays.asList(each.getValues()), each.getDataNodes());\n         }\n-        return insertValueTokens;\n+        return result;\n     }\n     \n     private Collection<String> getActualInsertColumns() {",
      "parent_sha": "82557be9c214e192d5cfd6c3af5754b00331d70f"
    }
  },
  {
    "oid": "faf34cf63ccb3d325e335f7ebf59aa2b9d4a7db0",
    "message": "fixes unit test for different database\u2019s insert statement.",
    "date": "2020-09-09T12:48:48Z",
    "url": "https://github.com/apache/shardingsphere/commit/faf34cf63ccb3d325e335f7ebf59aa2b9d4a7db0",
    "details": {
      "sha": "76b7ea65424cdf9b7c1d10fa69b64500e9a0eb5b",
      "filename": "shardingsphere-sql-parser/shardingsphere-sql-parser-binder/src/test/java/org/apache/shardingsphere/sql/parser/binder/segment/insert/keygen/engine/GeneratedKeyContextEngineTest.java",
      "status": "modified",
      "additions": 80,
      "deletions": 6,
      "changes": 86,
      "blob_url": "https://github.com/apache/shardingsphere/blob/faf34cf63ccb3d325e335f7ebf59aa2b9d4a7db0/shardingsphere-sql-parser%2Fshardingsphere-sql-parser-binder%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fsql%2Fparser%2Fbinder%2Fsegment%2Finsert%2Fkeygen%2Fengine%2FGeneratedKeyContextEngineTest.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/faf34cf63ccb3d325e335f7ebf59aa2b9d4a7db0/shardingsphere-sql-parser%2Fshardingsphere-sql-parser-binder%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fsql%2Fparser%2Fbinder%2Fsegment%2Finsert%2Fkeygen%2Fengine%2FGeneratedKeyContextEngineTest.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/shardingsphere-sql-parser%2Fshardingsphere-sql-parser-binder%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fsql%2Fparser%2Fbinder%2Fsegment%2Finsert%2Fkeygen%2Fengine%2FGeneratedKeyContextEngineTest.java?ref=faf34cf63ccb3d325e335f7ebf59aa2b9d4a7db0",
      "patch": "@@ -30,6 +30,11 @@\n import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.SimpleTableSegment;\n import org.apache.shardingsphere.sql.parser.sql.common.statement.dml.InsertStatement;\n import org.apache.shardingsphere.sql.parser.sql.common.value.identifier.IdentifierValue;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dml.MySQLInsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.oracle.dml.OracleInsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.postgresql.dml.PostgreSQLInsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.sql92.dml.SQL92InsertStatement;\n+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.sqlserver.dml.SQLServerInsertStatement;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -60,16 +65,62 @@ public void setUp() {\n     }\n     \n     @Test\n-    public void assertCreateGenerateKeyContextWithoutGenerateKeyColumnConfiguration() {\n-        InsertStatement insertStatement = new InsertStatement();\n+    public void assertMySQLCreateGenerateKeyContextWithoutGenerateKeyColumnConfiguration() {\n+        assertCreateGenerateKeyContextWithoutGenerateKeyColumnConfiguration(new MySQLInsertStatement());\n+    }\n+\n+    @Test\n+    public void assertOracleCreateGenerateKeyContextWithoutGenerateKeyColumnConfiguration() {\n+        assertCreateGenerateKeyContextWithoutGenerateKeyColumnConfiguration(new OracleInsertStatement());\n+    }\n+\n+    @Test\n+    public void assertPostgreSQLCreateGenerateKeyContextWithoutGenerateKeyColumnConfiguration() {\n+        assertCreateGenerateKeyContextWithoutGenerateKeyColumnConfiguration(new PostgreSQLInsertStatement());\n+    }\n+\n+    @Test\n+    public void assertSQL92CreateGenerateKeyContextWithoutGenerateKeyColumnConfiguration() {\n+        assertCreateGenerateKeyContextWithoutGenerateKeyColumnConfiguration(new SQL92InsertStatement());\n+    }\n+\n+    @Test\n+    public void assertSQLServerCreateGenerateKeyContextWithoutGenerateKeyColumnConfiguration() {\n+        assertCreateGenerateKeyContextWithoutGenerateKeyColumnConfiguration(new SQLServerInsertStatement());\n+    }\n+    \n+    private void assertCreateGenerateKeyContextWithoutGenerateKeyColumnConfiguration(final InsertStatement insertStatement) {\n         insertStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl1\")));\n         insertStatement.setInsertColumns(new InsertColumnsSegment(0, 0, Collections.singletonList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")))));\n         assertFalse(new GeneratedKeyContextEngine(schemaMetaData).createGenerateKeyContext(Collections.singletonList(1), insertStatement).isPresent());\n     }\n     \n     @Test\n-    public void assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration() {\n-        InsertStatement insertStatement = new InsertStatement();\n+    public void assertMySQLCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration() {\n+        assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration(new MySQLInsertStatement());\n+    }\n+\n+    @Test\n+    public void assertOracleCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration() {\n+        assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration(new OracleInsertStatement());\n+    }\n+\n+    @Test\n+    public void assertPostgreSQLCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration() {\n+        assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration(new PostgreSQLInsertStatement());\n+    }\n+\n+    @Test\n+    public void assertSQL92CreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration() {\n+        assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration(new SQL92InsertStatement());\n+    }\n+\n+    @Test\n+    public void assertSQLServerCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration() {\n+        assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration(new SQLServerInsertStatement());\n+    }\n+\n+    private void assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfiguration(final InsertStatement insertStatement) {\n         insertStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl\")));\n         insertStatement.setInsertColumns(new InsertColumnsSegment(0, 0, Collections.singletonList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")))));\n         insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new LiteralExpressionSegment(0, 0, 1))));\n@@ -79,8 +130,31 @@ public void assertCreateGenerateKeyContextWhenCreateWithGenerateKeyColumnConfigu\n     }\n     \n     @Test\n-    public void assertCreateGenerateKeyContextWhenFind() {\n-        InsertStatement insertStatement = new InsertStatement();\n+    public void assertMySQLCreateGenerateKeyContextWhenFind() {\n+        assertCreateGenerateKeyContextWhenFind(new MySQLInsertStatement());\n+    }\n+\n+    @Test\n+    public void assertOracleCreateGenerateKeyContextWhenFind() {\n+        assertCreateGenerateKeyContextWhenFind(new OracleInsertStatement());\n+    }\n+\n+    @Test\n+    public void assertPostgreSQLCreateGenerateKeyContextWhenFind() {\n+        assertCreateGenerateKeyContextWhenFind(new PostgreSQLInsertStatement());\n+    }\n+\n+    @Test\n+    public void assertSQL92CreateGenerateKeyContextWhenFind() {\n+        assertCreateGenerateKeyContextWhenFind(new SQL92InsertStatement());\n+    }\n+\n+    @Test\n+    public void assertSQLServerCreateGenerateKeyContextWhenFind() {\n+        assertCreateGenerateKeyContextWhenFind(new SQLServerInsertStatement());\n+    }\n+    \n+    private void assertCreateGenerateKeyContextWhenFind(final InsertStatement insertStatement) {\n         insertStatement.setTable(new SimpleTableSegment(0, 0, new IdentifierValue(\"tbl\")));\n         insertStatement.setInsertColumns(new InsertColumnsSegment(0, 0, Collections.singletonList(new ColumnSegment(0, 0, new IdentifierValue(\"id\")))));\n         insertStatement.getValues().add(new InsertValuesSegment(0, 0, Collections.singletonList(new ParameterMarkerExpressionSegment(1, 2, 0))));",
      "parent_sha": "c498d5cf96ef9db5ea69636407fcede6967135ca"
    }
  },
  {
    "oid": "cd49785bc953e0844f67e2b69936424bced3a837",
    "message": "use existedSchemas",
    "date": "2018-12-23T00:45:35Z",
    "url": "https://github.com/apache/shardingsphere/commit/cd49785bc953e0844f67e2b69936424bced3a837",
    "details": {
      "sha": "10943059253c09ffe8f6db853ae25abe6da23b24",
      "filename": "sharding-orchestration/sharding-orchestration-core/src/main/java/io/shardingsphere/orchestration/internal/registry/config/listener/SchemaChangedListener.java",
      "status": "modified",
      "additions": 13,
      "deletions": 15,
      "changes": 28,
      "blob_url": "https://github.com/apache/shardingsphere/blob/cd49785bc953e0844f67e2b69936424bced3a837/sharding-orchestration%2Fsharding-orchestration-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Forchestration%2Finternal%2Fregistry%2Fconfig%2Flistener%2FSchemaChangedListener.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/cd49785bc953e0844f67e2b69936424bced3a837/sharding-orchestration%2Fsharding-orchestration-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Forchestration%2Finternal%2Fregistry%2Fconfig%2Flistener%2FSchemaChangedListener.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-orchestration%2Fsharding-orchestration-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Forchestration%2Finternal%2Fregistry%2Fconfig%2Flistener%2FSchemaChangedListener.java?ref=cd49785bc953e0844f67e2b69936424bced3a837",
      "patch": "@@ -19,11 +19,11 @@\n \n import com.google.common.base.Strings;\n import io.shardingsphere.api.config.rule.RuleConfiguration;\n-import io.shardingsphere.orchestration.internal.registry.config.event.ConfigMapChangedEvent;\n import io.shardingsphere.orchestration.internal.registry.config.event.DataSourceChangedEvent;\n import io.shardingsphere.orchestration.internal.registry.config.event.IgnoredChangedEvent;\n import io.shardingsphere.orchestration.internal.registry.config.event.MasterSlaveRuleChangedEvent;\n-import io.shardingsphere.orchestration.internal.registry.config.event.SchemaChangedEvent;\n+import io.shardingsphere.orchestration.internal.registry.config.event.SchemaAddChangedEvent;\n+import io.shardingsphere.orchestration.internal.registry.config.event.SchemaDeleteChangedEvent;\n import io.shardingsphere.orchestration.internal.registry.config.event.ShardingRuleChangedEvent;\n import io.shardingsphere.orchestration.internal.registry.config.node.ConfigurationNode;\n import io.shardingsphere.orchestration.internal.registry.config.service.ConfigurationService;\n@@ -35,7 +35,6 @@\n import io.shardingsphere.orchestration.yaml.ConfigurationYamlConverter;\n \n import java.util.Collection;\n-import java.util.Collections;\n import java.util.LinkedList;\n \n /**\n@@ -51,10 +50,11 @@ public final class SchemaChangedListener extends PostShardingOrchestrationEventL\n     \n     private final Collection<String> existedSchemas = new LinkedList<>();\n     \n-    public SchemaChangedListener(final String name, final RegistryCenter regCenter, final ConfigurationService configurationService) {\n+    public SchemaChangedListener(final String name, final RegistryCenter regCenter, final Collection<String> shardingSchemaNames, final ConfigurationService configurationService) {\n         super(regCenter, new ConfigurationNode(name).getSchemaPath());\n         this.configurationService = configurationService;\n         configurationNode = new ConfigurationNode(name);\n+        existedSchemas.addAll(shardingSchemaNames);\n     }\n     \n     @Override\n@@ -67,23 +67,21 @@ protected ShardingOrchestrationEvent createShardingOrchestrationEvent(final Data\n             if (existedSchemas.contains(schemaName)) {\n                 if (event.getKey().equals(configurationNode.getDataSourcePath(schemaName))) {\n                     return createDataSourceChangedEvent(schemaName, event);\n-                } else {\n-                    return createRuleChangedEvent(schemaName, event);\n                 }\n+                return createRuleChangedEvent(schemaName, event);\n             } else {\n                 if (isSufficientToInitialize(schemaName)) {\n-                    \n+                    existedSchemas.add(schemaName);\n+                    return createSchemaChangedEvent(schemaName);\n                 }\n+                return new IgnoredChangedEvent();\n             }\n         }\n-        \n-        \n-        System.out.println(event.getKey());\n-        System.out.println(event.getValue());\n         if (ChangedType.DELETED == event.getChangedType()) {\n-            event.getKey();\n+            existedSchemas.remove(schemaName);\n+            return new SchemaDeleteChangedEvent(schemaName);\n         }\n-        return new ConfigMapChangedEvent(Collections.EMPTY_MAP);\n+        return new IgnoredChangedEvent();\n     }\n     \n     private DataSourceChangedEvent createDataSourceChangedEvent(final String schemaName, final DataChangedEvent event) {\n@@ -110,8 +108,8 @@ private boolean isSufficientToInitialize(final String schemaName) {\n         return configurationService.hasDataSourceConfiguration(schemaName) && configurationService.hasRuleConfiguration(schemaName);\n     }\n     \n-    private SchemaChangedEvent createSchemaChangedEvent(final String schemaName) {\n-        return new SchemaChangedEvent(schemaName, configurationService.loadDataSourceConfigurations(schemaName), createRuleConfiguration(schemaName));\n+    private SchemaAddChangedEvent createSchemaChangedEvent(final String schemaName) {\n+        return new SchemaAddChangedEvent(schemaName, configurationService.loadDataSourceConfigurations(schemaName), createRuleConfiguration(schemaName));\n     }\n     \n     private RuleConfiguration createRuleConfiguration(final String schemaName) {",
      "parent_sha": "ae3a640ccf73c8c81b0bbe8b783a31ed19b9fbb4"
    }
  },
  {
    "oid": "e1d9f55e888645324b6c37c6688ff6d80adc34d0",
    "message": "Refactor StandaloneMetaDataManagerPersistService (#34397)",
    "date": "2025-01-19T04:46:24Z",
    "url": "https://github.com/apache/shardingsphere/commit/e1d9f55e888645324b6c37c6688ff6d80adc34d0",
    "details": {
      "sha": "e2769ccabbe107d661a31ba1be71d5aa85672cad",
      "filename": "mode/type/standalone/core/src/main/java/org/apache/shardingsphere/mode/manager/standalone/persist/service/StandaloneMetaDataManagerPersistService.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/apache/shardingsphere/blob/e1d9f55e888645324b6c37c6688ff6d80adc34d0/mode%2Ftype%2Fstandalone%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fmode%2Fmanager%2Fstandalone%2Fpersist%2Fservice%2FStandaloneMetaDataManagerPersistService.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/e1d9f55e888645324b6c37c6688ff6d80adc34d0/mode%2Ftype%2Fstandalone%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fmode%2Fmanager%2Fstandalone%2Fpersist%2Fservice%2FStandaloneMetaDataManagerPersistService.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/mode%2Ftype%2Fstandalone%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fmode%2Fmanager%2Fstandalone%2Fpersist%2Fservice%2FStandaloneMetaDataManagerPersistService.java?ref=e1d9f55e888645324b6c37c6688ff6d80adc34d0",
      "patch": "@@ -224,8 +224,8 @@ public void alterSchemaMetaData(final AlterSchemaMetaDataPOJO alterSchemaMetaDat\n     public void registerStorageUnits(final String databaseName, final Map<String, DataSourcePoolProperties> toBeRegisteredProps) throws SQLException {\n         SwitchingResource switchingResource = metaDataContextManager.getResourceSwitchManager().switchByRegisterStorageUnit(metaDataContextManager.getMetaDataContexts()\n                 .getMetaData().getDatabase(databaseName).getResourceMetaData(), toBeRegisteredProps);\n-        ShardingSphereDatabase changedDatabase = new MetaDataContextsFactory(metaDataPersistService).createChangedDatabase(databaseName, false, switchingResource, null,\n-                metaDataContextManager.getMetaDataContexts(), metaDataContextManager.getComputeNodeInstanceContext());\n+        ShardingSphereDatabase changedDatabase = new MetaDataContextsFactory(metaDataPersistService).createChangedDatabase(\n+                databaseName, false, switchingResource, null, metaDataContextManager.getMetaDataContexts(), metaDataContextManager.getComputeNodeInstanceContext());\n         metaDataContextManager.getMetaDataContexts().getMetaData().putDatabase(changedDatabase);\n         metaDataContextManager.getMetaDataContexts().getMetaData().getGlobalRuleMetaData().getRules()\n                 .forEach(each -> ((GlobalRule) each).refresh(metaDataContextManager.getMetaDataContexts().getMetaData().getAllDatabases(), GlobalRuleChangedType.DATABASE_CHANGED));\n@@ -246,8 +246,8 @@ public void registerStorageUnits(final String databaseName, final Map<String, Da\n     public void alterStorageUnits(final String databaseName, final Map<String, DataSourcePoolProperties> toBeUpdatedProps) throws SQLException {\n         SwitchingResource switchingResource = metaDataContextManager.getResourceSwitchManager().switchByAlterStorageUnit(metaDataContextManager.getMetaDataContexts().getMetaData()\n                 .getDatabase(databaseName).getResourceMetaData(), toBeUpdatedProps);\n-        ShardingSphereDatabase changedDatabase = new MetaDataContextsFactory(metaDataPersistService).createChangedDatabase(databaseName, true, switchingResource, null,\n-                metaDataContextManager.getMetaDataContexts(), metaDataContextManager.getComputeNodeInstanceContext());\n+        ShardingSphereDatabase changedDatabase = new MetaDataContextsFactory(metaDataPersistService).createChangedDatabase(\n+                databaseName, true, switchingResource, null, metaDataContextManager.getMetaDataContexts(), metaDataContextManager.getComputeNodeInstanceContext());\n         metaDataContextManager.getMetaDataContexts().getMetaData().putDatabase(changedDatabase);\n         metaDataContextManager.getMetaDataContexts().getMetaData().getGlobalRuleMetaData().getRules()\n                 .forEach(each -> ((GlobalRule) each).refresh(metaDataContextManager.getMetaDataContexts().getMetaData().getAllDatabases(), GlobalRuleChangedType.DATABASE_CHANGED));\n@@ -262,8 +262,8 @@ public void alterStorageUnits(final String databaseName, final Map<String, DataS\n     public void unregisterStorageUnits(final String databaseName, final Collection<String> toBeDroppedStorageUnitNames) throws SQLException {\n         SwitchingResource switchingResource = metaDataContextManager.getResourceSwitchManager().switchByUnregisterStorageUnit(metaDataContextManager.getMetaDataContexts().getMetaData()\n                 .getDatabase(databaseName).getResourceMetaData(), toBeDroppedStorageUnitNames);\n-        MetaDataContexts reloadMetaDataContexts = new MetaDataContextsFactory(metaDataPersistService).createBySwitchResource(databaseName, false, switchingResource,\n-                metaDataContextManager.getMetaDataContexts(), metaDataContextManager.getComputeNodeInstanceContext());\n+        MetaDataContexts reloadMetaDataContexts = new MetaDataContextsFactory(metaDataPersistService).createBySwitchResource(\n+                databaseName, false, switchingResource, metaDataContextManager.getMetaDataContexts(), metaDataContextManager.getComputeNodeInstanceContext());\n         metaDataPersistService.persistReloadDatabaseByDrop(databaseName, reloadMetaDataContexts.getMetaData().getDatabase(databaseName),\n                 metaDataContextManager.getMetaDataContexts().getMetaData().getDatabase(databaseName));\n         metaDataContextManager.dropSchemas(databaseName, reloadMetaDataContexts.getMetaData().getDatabase(databaseName),",
      "parent_sha": "1d89663060ff3fd7850521d69e9f8f4e48a11edb"
    }
  },
  {
    "oid": "4fbbbe7d1f6c4951a466b96183b9291e2401a9c5",
    "message": "refactor select sub query 3rd version",
    "date": "2017-08-18T12:46:59Z",
    "url": "https://github.com/apache/shardingsphere/commit/4fbbbe7d1f6c4951a466b96183b9291e2401a9c5",
    "details": {
      "sha": "8cf5857b4ea522c33bc5d00702ff6dbb29c2506e",
      "filename": "sharding-jdbc-core/src/main/java/com/dangdang/ddframe/rdb/sharding/parsing/parser/statement/dql/select/SelectStatement.java",
      "status": "modified",
      "additions": 13,
      "deletions": 5,
      "changes": 18,
      "blob_url": "https://github.com/apache/shardingsphere/blob/4fbbbe7d1f6c4951a466b96183b9291e2401a9c5/sharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fdangdang%2Fddframe%2Frdb%2Fsharding%2Fparsing%2Fparser%2Fstatement%2Fdql%2Fselect%2FSelectStatement.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/4fbbbe7d1f6c4951a466b96183b9291e2401a9c5/sharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fdangdang%2Fddframe%2Frdb%2Fsharding%2Fparsing%2Fparser%2Fstatement%2Fdql%2Fselect%2FSelectStatement.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fdangdang%2Fddframe%2Frdb%2Fsharding%2Fparsing%2Fparser%2Fstatement%2Fdql%2Fselect%2FSelectStatement.java?ref=4fbbbe7d1f6c4951a466b96183b9291e2401a9c5",
      "patch": "@@ -141,8 +141,13 @@ public boolean containsSubQuery() {\n      * @return \u5b50\u67e5\u8be2\u7684Select SQL\u8bed\u53e5\u5bf9\u8c61\n      */\n     public SelectStatement getSubQueryStatement() {\n+        SelectStatement result = processLimitForSubQuery();\n+        processOrderByItems(result);\n+        return result;\n+    }\n+    \n+    private SelectStatement processLimitForSubQuery() {\n         SelectStatement result = this;\n-        boolean isRootQueryContainsStar = result.isContainStar();\n         Limit limit = result.getLimit();\n         List<SQLToken> limitSQLTokens = new LinkedList<>();\n         for (SQLToken each : result.getSqlTokens()) {\n@@ -167,10 +172,6 @@ public SelectStatement getSubQueryStatement() {\n                 }\n             }\n         }\n-        if (!isRootQueryContainsStar) {\n-            result.getOrderByItems().clear();\n-            result.getGroupByItems().clear();\n-        }\n         result.setLimit(limit);\n         int count = 0;\n         List<Integer> toBeRemovedIndexes = new LinkedList<>();\n@@ -186,4 +187,11 @@ public SelectStatement getSubQueryStatement() {\n         result.getSqlTokens().addAll(limitSQLTokens);\n         return result;\n     }\n+    \n+    private void processOrderByItems(final SelectStatement result) {\n+        if (!containStar) {\n+            result.getOrderByItems().clear();\n+            result.getGroupByItems().clear();\n+        }\n+    }\n }",
      "parent_sha": "5316535a4c3e5d4309f5a80064a9d5130ac5e157"
    }
  },
  {
    "oid": "09cea460550525bfe86887135f6880b935a5a326",
    "message": "new members",
    "date": "2019-02-26T12:59:57Z",
    "url": "https://github.com/apache/shardingsphere/commit/09cea460550525bfe86887135f6880b935a5a326",
    "details": {
      "sha": "171c8a495b524b35bfba73f0439416b1242d7232",
      "filename": "sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/connection/EncryptConnection.java",
      "status": "modified",
      "additions": 9,
      "deletions": 11,
      "changes": 20,
      "blob_url": "https://github.com/apache/shardingsphere/blob/09cea460550525bfe86887135f6880b935a5a326/sharding-jdbc%2Fsharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingjdbc%2Fjdbc%2Fcore%2Fconnection%2FEncryptConnection.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/09cea460550525bfe86887135f6880b935a5a326/sharding-jdbc%2Fsharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingjdbc%2Fjdbc%2Fcore%2Fconnection%2FEncryptConnection.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc%2Fsharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingjdbc%2Fjdbc%2Fcore%2Fconnection%2FEncryptConnection.java?ref=09cea460550525bfe86887135f6880b935a5a326",
      "patch": "@@ -18,10 +18,12 @@\n package org.apache.shardingsphere.shardingjdbc.jdbc.core.connection;\n \n import lombok.RequiredArgsConstructor;\n-import lombok.SneakyThrows;\n+import org.apache.shardingsphere.core.metadata.table.ShardingTableMetaData;\n+import org.apache.shardingsphere.core.rule.EncryptRule;\n import org.apache.shardingsphere.shardingjdbc.jdbc.unsupported.AbstractUnsupportedOperationConnection;\n \n import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n \n /**\n  * Encrypt connection.\n@@ -32,14 +34,10 @@\n public final class EncryptConnection extends AbstractUnsupportedOperationConnection {\n \n     private final Connection connection;\n-\n-    @Override\n-    @SneakyThrows\n-    public boolean getAutoCommit() {\n-        try (Connection connection = encryptDataSource.getDataSource().getConnection()) {\n-            return connection.getAutoCommit();\n-        }\n-    }\n-\n-\n+    \n+    private final EncryptRule encryptRule;\n+    \n+    private final DatabaseMetaData cachedDatabaseMetaData;\n+    \n+    private final ShardingTableMetaData encryptTableMetaData;\n }",
      "parent_sha": "51851c3ed6e34e88276e6e624cec54d643a4b3cd"
    }
  },
  {
    "oid": "d2c58cedeab5f7129afc26ae43f7c7ef7d5d6cb0",
    "message": "add createSQLRewriters() for encrypt rule",
    "date": "2019-07-02T02:36:42Z",
    "url": "https://github.com/apache/shardingsphere/commit/d2c58cedeab5f7129afc26ae43f7c7ef7d5d6cb0",
    "details": {
      "sha": "5a58c55cf13f4be3762b01361dbe305eeb0e3478",
      "filename": "sharding-core/sharding-core-rewrite/src/main/java/org/apache/shardingsphere/core/rewrite/SQLRewriteEngine.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/apache/shardingsphere/blob/d2c58cedeab5f7129afc26ae43f7c7ef7d5d6cb0/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngine.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/d2c58cedeab5f7129afc26ae43f7c7ef7d5d6cb0/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngine.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngine.java?ref=d2c58cedeab5f7129afc26ae43f7c7ef7d5d6cb0",
      "patch": "@@ -86,7 +86,7 @@ public SQLRewriteEngine(final EncryptRule encryptRule, final OptimizedStatement\n         sqlBuilder = new SQLBuilder();\n         parameterBuilder = new ParameterBuilder(parameters);\n         baseSQLRewriter = new BaseSQLRewriter(optimizedStatement.getSQLStatement(), sqlTokens);\n-        sqlRewriters = Collections.<SQLRewriter>singletonList(new EncryptSQLRewriter(encryptRule.getEncryptorEngine(), optimizedStatement));\n+        sqlRewriters = createSQLRewriters(encryptRule, optimizedStatement);\n     }\n     \n     public SQLRewriteEngine(final MasterSlaveRule masterSlaveRule, final OptimizedStatement optimizedStatement) {\n@@ -122,6 +122,13 @@ private Collection<SQLRewriter> createSQLRewriters(final ShardingRule shardingRu\n         return result;\n     }\n     \n+    private Collection<SQLRewriter> createSQLRewriters(final EncryptRule encryptRule, final OptimizedStatement optimizedStatement) {\n+        if (optimizedStatement.getSQLStatement() instanceof DMLStatement) {\n+            return Collections.<SQLRewriter>singletonList(new EncryptSQLRewriter(encryptRule.getEncryptorEngine(), optimizedStatement));\n+        }\n+        return Collections.emptyList();\n+    }\n+    \n     /**\n      * Initialize SQL rewrite engine.\n      * ",
      "parent_sha": "30370ce959df94a5590eda240d92e4714117695a"
    }
  },
  {
    "oid": "d6d5404284d1990f65d311ded44a771e3c0c9dc0",
    "message": "fix javadoc",
    "date": "2016-11-21T10:05:51Z",
    "url": "https://github.com/apache/shardingsphere/commit/d6d5404284d1990f65d311ded44a771e3c0c9dc0",
    "details": {
      "sha": "4c6123bb70eda3914c2b5faf39e8dd8b880e96fc",
      "filename": "sharding-jdbc-id-generator-parent/sharding-jdbc-self-id-generator/src/main/java/com/dangdang/ddframe/rdb/sharding/id/generator/self/CommonSelfIdGenerator.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/apache/shardingsphere/blob/d6d5404284d1990f65d311ded44a771e3c0c9dc0/sharding-jdbc-id-generator-parent%2Fsharding-jdbc-self-id-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fdangdang%2Fddframe%2Frdb%2Fsharding%2Fid%2Fgenerator%2Fself%2FCommonSelfIdGenerator.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/d6d5404284d1990f65d311ded44a771e3c0c9dc0/sharding-jdbc-id-generator-parent%2Fsharding-jdbc-self-id-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fdangdang%2Fddframe%2Frdb%2Fsharding%2Fid%2Fgenerator%2Fself%2FCommonSelfIdGenerator.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc-id-generator-parent%2Fsharding-jdbc-self-id-generator%2Fsrc%2Fmain%2Fjava%2Fcom%2Fdangdang%2Fddframe%2Frdb%2Fsharding%2Fid%2Fgenerator%2Fself%2FCommonSelfIdGenerator.java?ref=d6d5404284d1990f65d311ded44a771e3c0c9dc0",
      "patch": "@@ -32,18 +32,20 @@\n /**\n  * \u81ea\u751f\u6210Id\u751f\u6210\u5668.\n  * \n- * <p/>\n+ * <p>\n  * \u957f\u5ea6\u4e3a64bit,\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u4f9d\u6b21\u4e3a\n  * <pre>\n  * 1bit   \u7b26\u53f7\u4f4d \n  * 41bits \u65f6\u95f4\u504f\u79fb\u91cf\u4ece2016\u5e7411\u67081\u65e5\u96f6\u70b9\u5230\u73b0\u5728\u7684\u6beb\u79d2\u6570\n  * 10bits \u5de5\u4f5c\u8fdb\u7a0bId\n  * 12bits \u540c\u4e00\u4e2a\u6beb\u79d2\u5185\u7684\u81ea\u589e\u91cf\n  * </pre>\n+ * </p>\n  * \n- * <p/>\n+ * <p>\n  * \u5de5\u4f5c\u8fdb\u7a0bId\u83b7\u53d6\u4f18\u5148\u7ea7: \u7cfb\u7edf\u53d8\u91cf{@code sjdbc.self.id.generator.worker.id} > \u73af\u5883\u53d8\u91cf{@code SJDBC_SELF_ID_GENERATOR_WORKER_ID}\n  * ,\u53e6\u5916\u53ef\u4ee5\u8c03\u7528@{@code CommonSelfIdGenerator.setWorkerId}\u8fdb\u884c\u8bbe\u7f6e\n+ * </p>\n  * \n  * @author gaohongtao\n  */\n@@ -102,7 +104,7 @@ static void initWorkerId() {\n     /**\n      * \u8bbe\u7f6e\u5de5\u4f5c\u8fdb\u7a0bId.\n      * \n-     * @param workerId\n+     * @param workerId \u5de5\u4f5c\u8fdb\u7a0bId\n      */\n     public static void setWorkerId(final Long workerId) {\n         Preconditions.checkArgument(workerId >= 0L && workerId < WORKER_ID_MAX_VALUE);",
      "parent_sha": "031dca8c9f399758c8cf88a4ad616f286fc18a6e"
    }
  },
  {
    "oid": "d7e27cb9d2889404f3014cecc306037190560ea0",
    "message": "refactor select parser 3rd version",
    "date": "2017-08-09T12:48:41Z",
    "url": "https://github.com/apache/shardingsphere/commit/d7e27cb9d2889404f3014cecc306037190560ea0",
    "details": {
      "sha": "0d3ee766ad2ca1abe950ce58d1469eb418a9246c",
      "filename": "sharding-jdbc-core/src/main/java/com/dangdang/ddframe/rdb/sharding/parsing/parser/statement/dql/select/AbstractSelectParser.java",
      "status": "modified",
      "additions": 4,
      "deletions": 9,
      "changes": 13,
      "blob_url": "https://github.com/apache/shardingsphere/blob/d7e27cb9d2889404f3014cecc306037190560ea0/sharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fdangdang%2Fddframe%2Frdb%2Fsharding%2Fparsing%2Fparser%2Fstatement%2Fdql%2Fselect%2FAbstractSelectParser.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/d7e27cb9d2889404f3014cecc306037190560ea0/sharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fdangdang%2Fddframe%2Frdb%2Fsharding%2Fparsing%2Fparser%2Fstatement%2Fdql%2Fselect%2FAbstractSelectParser.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fdangdang%2Fddframe%2Frdb%2Fsharding%2Fparsing%2Fparser%2Fstatement%2Fdql%2Fselect%2FAbstractSelectParser.java?ref=d7e27cb9d2889404f3014cecc306037190560ea0",
      "patch": "@@ -77,15 +77,6 @@ public AbstractSelectParser(final SQLParser sqlParser) {\n     \n     @Override\n     public final SelectStatement parse() {\n-        query();\n-        parseOrderBy();\n-        customizedSelect();\n-        appendDerivedColumns();\n-        appendDerivedOrderBy();\n-        return selectStatement;\n-    }\n-    \n-    protected final void query() {\n         getSqlParser().getLexer().nextToken();\n         parseDistinct();\n         parseBetweenSelectAndList();\n@@ -99,6 +90,10 @@ protected final void query() {\n         parseOrderBy();\n         customizedQuery();\n         queryRest();\n+        customizedSelect();\n+        appendDerivedColumns();\n+        appendDerivedOrderBy();\n+        return selectStatement;\n     }\n     \n     protected final void parseDistinct() {",
      "parent_sha": "8daa85a7129f889999f4b94c773467453c289a27"
    }
  },
  {
    "oid": "b18c9d4d519028ac7680b8e41b2dbaa5d25fded4",
    "message": "update javadoc",
    "date": "2017-08-02T08:37:34Z",
    "url": "https://github.com/apache/shardingsphere/commit/b18c9d4d519028ac7680b8e41b2dbaa5d25fded4",
    "details": {
      "sha": "03cbbf835b3e4528d3d54ff8c88f261b9d4b7cfb",
      "filename": "sharding-jdbc-core/src/main/java/com/dangdang/ddframe/rdb/sharding/config/ShardingPropertiesConstant.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/shardingsphere/blob/b18c9d4d519028ac7680b8e41b2dbaa5d25fded4/sharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fdangdang%2Fddframe%2Frdb%2Fsharding%2Fconfig%2FShardingPropertiesConstant.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/b18c9d4d519028ac7680b8e41b2dbaa5d25fded4/sharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fdangdang%2Fddframe%2Frdb%2Fsharding%2Fconfig%2FShardingPropertiesConstant.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fdangdang%2Fddframe%2Frdb%2Fsharding%2Fconfig%2FShardingPropertiesConstant.java?ref=b18c9d4d519028ac7680b8e41b2dbaa5d25fded4",
      "patch": "@@ -62,7 +62,7 @@ public enum ShardingPropertiesConstant {\n      * \u5de5\u4f5c\u7ebf\u7a0b\u6570\u91cf.\n      * \n      * <p>\n-     * \u9ed8\u8ba4\u503c: 100\n+     * \u9ed8\u8ba4\u503c: CPU\u6838\u6570\n      * </p>\n      */\n     EXECUTOR_SIZE(\"executor.size\", String.valueOf(Runtime.getRuntime().availableProcessors()), int.class);",
      "parent_sha": "94c283b76bcfd1abf7a735769ca941d08ae8348c"
    }
  },
  {
    "oid": "084ee0b244f4896328cae571dcb1703bbaf4e143",
    "message": "Add Serializable interface for PrepareStatementParameterHeader.",
    "date": "2018-06-28T06:18:15Z",
    "url": "https://github.com/apache/shardingsphere/commit/084ee0b244f4896328cae571dcb1703bbaf4e143",
    "details": {
      "sha": "166ba99531d4a4b7ea3ebdd69a6e90d5dcb6ba99",
      "filename": "sharding-proxy/src/main/java/io/shardingsphere/proxy/transport/mysql/packet/command/statement/execute/PreparedStatementParameterHeader.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/apache/shardingsphere/blob/084ee0b244f4896328cae571dcb1703bbaf4e143/sharding-proxy%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fproxy%2Ftransport%2Fmysql%2Fpacket%2Fcommand%2Fstatement%2Fexecute%2FPreparedStatementParameterHeader.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/084ee0b244f4896328cae571dcb1703bbaf4e143/sharding-proxy%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fproxy%2Ftransport%2Fmysql%2Fpacket%2Fcommand%2Fstatement%2Fexecute%2FPreparedStatementParameterHeader.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-proxy%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fproxy%2Ftransport%2Fmysql%2Fpacket%2Fcommand%2Fstatement%2Fexecute%2FPreparedStatementParameterHeader.java?ref=084ee0b244f4896328cae571dcb1703bbaf4e143",
      "patch": "@@ -21,14 +21,18 @@\n import lombok.AllArgsConstructor;\n import lombok.Getter;\n \n+import java.io.Serializable;\n+\n /**\n  * Prepared statement parameter header.\n  *\n  * @author zhangyonglun\n  */\n @AllArgsConstructor\n @Getter\n-public class PreparedStatementParameterHeader {\n+public class PreparedStatementParameterHeader implements Serializable {\n+    \n+    private static final long serialVersionUID = -672589695838350689L;\n     \n     private final ColumnType columnType;\n     ",
      "parent_sha": "edd014cb33c5e34eb84e3be3f47985cb8e7d9347"
    }
  },
  {
    "oid": "b4b84a67cd6a4233706ab6d594053c5e51aeeccb",
    "message": "Close actual connection after get result set",
    "date": "2019-02-28T02:49:39Z",
    "url": "https://github.com/apache/shardingsphere/commit/b4b84a67cd6a4233706ab6d594053c5e51aeeccb",
    "details": {
      "sha": "6cc99d6e35aab18291a9a7fa73c818a2e4cfd57f",
      "filename": "sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/metadata/ResultSetReturnedDatabaseMetaData.java",
      "status": "modified",
      "additions": 19,
      "deletions": 10,
      "changes": 29,
      "blob_url": "https://github.com/apache/shardingsphere/blob/b4b84a67cd6a4233706ab6d594053c5e51aeeccb/sharding-jdbc%2Fsharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingjdbc%2Fjdbc%2Fcore%2Fdatasource%2Fmetadata%2FResultSetReturnedDatabaseMetaData.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/b4b84a67cd6a4233706ab6d594053c5e51aeeccb/sharding-jdbc%2Fsharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingjdbc%2Fjdbc%2Fcore%2Fdatasource%2Fmetadata%2FResultSetReturnedDatabaseMetaData.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc%2Fsharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingjdbc%2Fjdbc%2Fcore%2Fdatasource%2Fmetadata%2FResultSetReturnedDatabaseMetaData.java?ref=b4b84a67cd6a4233706ab6d594053c5e51aeeccb",
      "patch": "@@ -21,6 +21,7 @@\n import org.apache.shardingsphere.shardingjdbc.jdbc.core.resultset.DatabaseMetaDataResultSet;\n \n import javax.sql.DataSource;\n+import java.sql.Connection;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.Map;\n@@ -41,38 +42,46 @@ public ResultSetReturnedDatabaseMetaData(final Map<String, DataSource> dataSourc\n     \n     @Override\n     public final ResultSet getSuperTypes(final String catalog, final String schemaPattern, final String typeNamePattern) throws SQLException {\n-        return new DatabaseMetaDataResultSet(getConnection().getMetaData().getSuperTypes(catalog, schemaPattern, typeNamePattern), shardingRule);\n+        try (Connection connection = getConnection()) {\n+            return new DatabaseMetaDataResultSet(connection.getMetaData().getSuperTypes(catalog, schemaPattern, typeNamePattern), shardingRule);\n+        }\n     }\n     \n     @Override\n     public final ResultSet getAttributes(final String catalog, final String schemaPattern, final String typeNamePattern, final String attributeNamePattern) throws SQLException {\n-        return new DatabaseMetaDataResultSet(getConnection().getMetaData().getAttributes(catalog, schemaPattern, typeNamePattern, attributeNamePattern), shardingRule);\n+        try (Connection connection = getConnection()) {\n+            return new DatabaseMetaDataResultSet(connection.getMetaData().getAttributes(catalog, schemaPattern, typeNamePattern, attributeNamePattern), shardingRule);\n+        }\n     }\n     \n     @Override\n     public final ResultSet getProcedures(final String catalog, final String schemaPattern, final String procedureNamePattern) throws SQLException {\n-        return new DatabaseMetaDataResultSet(getConnection().getMetaData().getProcedures(catalog, schemaPattern, procedureNamePattern), shardingRule);\n+        try (Connection connection = getConnection()) {\n+            return new DatabaseMetaDataResultSet(connection.getMetaData().getProcedures(catalog, schemaPattern, procedureNamePattern), shardingRule);\n+        }\n     }\n     \n     @Override\n     public final ResultSet getProcedureColumns(final String catalog, final String schemaPattern, final String procedureNamePattern, final String columnNamePattern) throws SQLException {\n-        return new DatabaseMetaDataResultSet(getConnection().getMetaData().getProcedureColumns(catalog, schemaPattern, procedureNamePattern, columnNamePattern), shardingRule);\n+        try (Connection connection = getConnection()) {\n+            return new DatabaseMetaDataResultSet(connection.getMetaData().getProcedureColumns(catalog, schemaPattern, procedureNamePattern, columnNamePattern), shardingRule);\n+        }\n     }\n     \n     @Override\n     public final ResultSet getTables(final String catalog, final String schemaPattern, final String tableNamePattern, final String[] types) throws SQLException {\n         String shardingTableNamePattern = getShardingTableNamePattern(tableNamePattern);\n-        ResultSet result = new DatabaseMetaDataResultSet(getConnection().getMetaData().getTables(catalog, schemaPattern, shardingTableNamePattern, types), shardingRule);\n-        getConnection().close();\n-        return result;\n+        try (Connection connection = getConnection()) {\n+            return new DatabaseMetaDataResultSet(connection.getMetaData().getTables(catalog, schemaPattern, shardingTableNamePattern, types), shardingRule);\n+        }\n     }\n     \n     @Override\n     public final ResultSet getColumns(final String catalog, final String schemaPattern, final String tableNamePattern, final String columnNamePattern) throws SQLException {\n         String shardingTableNamePattern = getShardingTableNamePattern(tableNamePattern);\n-        ResultSet result = new DatabaseMetaDataResultSet(getConnection().getMetaData().getColumns(catalog, schemaPattern, shardingTableNamePattern, columnNamePattern), shardingRule);\n-        getConnection().close();\n-        return result;\n+        try (Connection connection = getConnection()) {\n+            return new DatabaseMetaDataResultSet(connection.getMetaData().getColumns(catalog, schemaPattern, shardingTableNamePattern, columnNamePattern), shardingRule);\n+        }\n     }\n     \n     private String getShardingTableNamePattern(final String tableNamePattern) {",
      "parent_sha": "1c9260d4b2e4ac342c522b5435667d0f2082b406"
    }
  },
  {
    "oid": "f4f8ddd6ac526ba1dccfa1ec151f896aadd40bc7",
    "message": "jdbc-local-transaction: refactor local transaction.",
    "date": "2018-09-02T00:51:09Z",
    "url": "https://github.com/apache/shardingsphere/commit/f4f8ddd6ac526ba1dccfa1ec151f896aadd40bc7",
    "details": {
      "sha": "e23330719b5bb1f73d4806233879f8feb3dd7248",
      "filename": "sharding-jdbc/src/main/java/io/shardingsphere/core/jdbc/adapter/AbstractConnectionAdapter.java",
      "status": "modified",
      "additions": 27,
      "deletions": 36,
      "changes": 63,
      "blob_url": "https://github.com/apache/shardingsphere/blob/f4f8ddd6ac526ba1dccfa1ec151f896aadd40bc7/sharding-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fjdbc%2Fadapter%2FAbstractConnectionAdapter.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/f4f8ddd6ac526ba1dccfa1ec151f896aadd40bc7/sharding-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fjdbc%2Fadapter%2FAbstractConnectionAdapter.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fjdbc%2Fadapter%2FAbstractConnectionAdapter.java?ref=f4f8ddd6ac526ba1dccfa1ec151f896aadd40bc7",
      "patch": "@@ -89,53 +89,44 @@ public final boolean getAutoCommit() {\n     public final void setAutoCommit(final boolean autoCommit) throws SQLException {\n         this.autoCommit = autoCommit;\n         recordMethodInvocation(Connection.class, \"setAutoCommit\", new Class[] {boolean.class}, new Object[] {autoCommit});\n-        if (TransactionTypeHolder.get().equals(TransactionType.LOCAL)) {\n-            Collection<SQLException> exceptions = new LinkedList<>();\n-            for (Connection each : cachedConnections.values()) {\n-                try {\n-                    each.setAutoCommit(autoCommit);\n-                } catch (final SQLException ex) {\n-                    exceptions.add(ex);\n-                }\n-            }\n-            throwSQLExceptionIfNecessary(exceptions);\n-        } else {\n-            ShardingEventBusInstance.getInstance().post(createTransactionEvent(TransactionOperationType.BEGIN));\n-        }\n+        doTransaction(TransactionOperationType.BEGIN);\n     }\n     \n     @Override\n     public final void commit() throws SQLException {\n-        if (TransactionTypeHolder.get().equals(TransactionType.LOCAL)) {\n-            Collection<SQLException> exceptions = new LinkedList<>();\n-            for (Connection each : cachedConnections.values()) {\n-                try {\n-                    each.commit();\n-                } catch (final SQLException ex) {\n-                    exceptions.add(ex);\n-                }\n-            }\n-            throwSQLExceptionIfNecessary(exceptions);\n-        } else {\n-            ShardingEventBusInstance.getInstance().post(createTransactionEvent(TransactionOperationType.COMMIT));\n-        }\n+        doTransaction(TransactionOperationType.COMMIT);\n     }\n     \n     @Override\n     public final void rollback() throws SQLException {\n-        if (TransactionTypeHolder.get().equals(TransactionType.LOCAL)) {\n-            Collection<SQLException> exceptions = new LinkedList<>();\n-            for (Connection each : cachedConnections.values()) {\n-                try {\n-                    each.rollback();\n-                } catch (final SQLException ex) {\n-                    exceptions.add(ex);\n+        doTransaction(TransactionOperationType.ROLLBACK);\n+    }\n+    \n+    private void doTransaction(final TransactionOperationType operationType) throws SQLException {\n+        if (!TransactionTypeHolder.get().equals(TransactionType.LOCAL)) {\n+            ShardingEventBusInstance.getInstance().post(createTransactionEvent(operationType));\n+        }\n+        Collection<SQLException> exceptions = new LinkedList<>();\n+        for (Connection each : cachedConnections.values()) {\n+            try {\n+                switch (operationType) {\n+                    case BEGIN:\n+                        each.setAutoCommit(autoCommit);\n+                        return;\n+                    case COMMIT:\n+                        each.commit();\n+                        return;\n+                    case ROLLBACK:\n+                        each.rollback();\n+                        return;\n+                    default:\n+                        throw new UnsupportedOperationException(operationType.name());\n                 }\n+            } catch (final SQLException ex) {\n+                exceptions.add(ex);\n             }\n-            throwSQLExceptionIfNecessary(exceptions);\n-        } else {\n-            ShardingEventBusInstance.getInstance().post(createTransactionEvent(TransactionOperationType.ROLLBACK));\n         }\n+        throwSQLExceptionIfNecessary(exceptions);\n     }\n     \n     private ShardingTransactionEvent createTransactionEvent(final TransactionOperationType operationType) {",
      "parent_sha": "3e2faccbfd198c05f92d5cd605101c02dfaa9355"
    }
  },
  {
    "oid": "592c7d7936a028c2b1601bf0b9d894b5a37e5f46",
    "message": "change mock logger impl by reflect inject",
    "date": "2019-03-30T06:48:37Z",
    "url": "https://github.com/apache/shardingsphere/commit/592c7d7936a028c2b1601bf0b9d894b5a37e5f46",
    "details": {
      "sha": "32cb70093268b0a90065739d0140cd9ce66abfaf",
      "filename": "sharding-core/sharding-core-route/src/test/java/org/apache/shardingsphere/core/route/SQLLoggerTest.java",
      "status": "modified",
      "additions": 44,
      "deletions": 59,
      "changes": 103,
      "blob_url": "https://github.com/apache/shardingsphere/blob/592c7d7936a028c2b1601bf0b9d894b5a37e5f46/sharding-core%2Fsharding-core-route%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Froute%2FSQLLoggerTest.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/592c7d7936a028c2b1601bf0b9d894b5a37e5f46/sharding-core%2Fsharding-core-route%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Froute%2FSQLLoggerTest.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsharding-core-route%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Froute%2FSQLLoggerTest.java?ref=592c7d7936a028c2b1601bf0b9d894b5a37e5f46",
      "patch": "@@ -17,15 +17,17 @@\n \n package org.apache.shardingsphere.core.route;\n \n-import ch.qos.logback.classic.Level;\n-import ch.qos.logback.classic.Logger;\n-import ch.qos.logback.classic.spi.ILoggingEvent;\n-import ch.qos.logback.core.ConsoleAppender;\n-import ch.qos.logback.core.ContextBase;\n+import com.google.common.base.Joiner;\n import org.junit.Before;\n import org.junit.Test;\n-import org.slf4j.LoggerFactory;\n-\n+import org.junit.runner.RunWith;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.slf4j.Logger;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -34,90 +36,65 @@\n import java.util.List;\n import java.util.Set;\n \n-import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.inOrder;\n \n+@RunWith(MockitoJUnitRunner.class)\n public final class SQLLoggerTest {\n \n     private String sql;\n+\n     private Collection<String> dataSourceNames;\n+\n     private Collection<RouteUnit> routeUnits;\n \n+    @Mock\n+    private Logger logger;\n+\n     @Before\n-    public void setUp() {\n+    public void setUp() throws NoSuchFieldException, IllegalAccessException {\n         this.sql = \"select * from user\";\n         this.dataSourceNames = Arrays.asList(\"db1\", \"db2\", \"db3\");\n         this.routeUnits = mockRouteUnits(dataSourceNames,sql);\n+        Field field = SQLLogger.class.getDeclaredField(\"log\");\n+        setFinalStatic(field, logger);\n     }\n \n     @Test\n     public void assertlogSQLShard() {\n-        List<String> actualLogMessages = watchLogMessages(Level.INFO);\n         SQLLogger.logSQL(sql, false, null, routeUnits);\n-        List<String> expectedLogMessages = buildLogSQLShardExpectedMessages();\n-        assertThat(actualLogMessages, is(expectedLogMessages));\n+        InOrder inOrder = inOrder(logger);\n+        inOrder.verify(logger).info(\"Rule Type: sharding\", new Object[]{});\n+        inOrder.verify(logger).info(\"Logic SQL: {}\", new Object[]{sql});\n+        inOrder.verify(logger).info(\"SQLStatement: {}\",new Object[]{null});\n+        inOrder.verify(logger).info(\"Actual SQL: {} ::: {}\",new Object[]{\"db1\",sql});\n+        inOrder.verify(logger).info(\"Actual SQL: {} ::: {}\",new Object[]{\"db2\",sql});\n+        inOrder.verify(logger).info(\"Actual SQL: {} ::: {}\",new Object[]{\"db3\",sql});\n     }\n \n     @Test\n     public void assertlogSQLShardSimple() {\n-        List<String> actualLogMessages = watchLogMessages(Level.INFO);\n         SQLLogger.logSQL(sql, true, null, routeUnits);\n-        List<String> expectedLogMessages = buildLogSQLShardSimpleExpectedMessages();\n-        assertThat(actualLogMessages, is(expectedLogMessages));\n+        InOrder inOrder = inOrder(logger);\n+        inOrder.verify(logger).info(\"Rule Type: sharding\", new Object[]{});\n+        inOrder.verify(logger).info(\"Logic SQL: {}\", new Object[]{sql});\n+        inOrder.verify(logger).info(\"SQLStatement: {}\",new Object[]{null});\n+        inOrder.verify(logger).info(\"Actual SQL(simple): {} ::: {}\",new Object[]{buildDataSourceNamesSet(),routeUnits.size()});\n     }\n \n     @Test\n     public void assertlogSQLMasterSlave() {\n-        List<String> actualLogMessages = watchLogMessages(Level.INFO);\n         SQLLogger.logSQL(sql, dataSourceNames);\n-        List<String> expectedLogMessages = buildLogSQLMasterSlaveExpectedMessages();\n-        assertThat(actualLogMessages, is(expectedLogMessages));\n-    }\n-\n-    private List<String> buildLogSQLShardExpectedMessages() {\n-        List<String> expectedLogMessages = new ArrayList<>();\n-        expectedLogMessages.add(\"Rule Type: sharding\");\n-        expectedLogMessages.add(\"Logic SQL: select * from user\");\n-        expectedLogMessages.add(\"SQLStatement: null\");\n-        expectedLogMessages.add(\"Actual SQL: db1 ::: select * from user\");\n-        expectedLogMessages.add(\"Actual SQL: db2 ::: select * from user\");\n-        expectedLogMessages.add(\"Actual SQL: db3 ::: select * from user\");\n-        return expectedLogMessages;\n+        InOrder inOrder = inOrder(logger);\n+        inOrder.verify(logger).info(\"Rule Type: master-slave\",new Object[]{});\n+        inOrder.verify(logger).info(\"SQL: {} ::: DataSources: {}\",new Object[]{sql,Joiner.on(\",\").join(dataSourceNames)});\n     }\n \n-    private List<String> buildLogSQLShardSimpleExpectedMessages() {\n+    private Set<String> buildDataSourceNamesSet() {\n         Set<String> dataSourceNamesSet = new HashSet<>(routeUnits.size());\n         for (RouteUnit each : routeUnits) {\n             dataSourceNamesSet.add(each.getDataSourceName());\n         }\n-        List<String> expectedLogMessages = new ArrayList<>();\n-        expectedLogMessages.add(\"Rule Type: sharding\");\n-        expectedLogMessages.add(\"Logic SQL: select * from user\");\n-        expectedLogMessages.add(\"SQLStatement: null\");\n-        expectedLogMessages.add(\"Actual SQL(simple): \"+dataSourceNamesSet.toString()+\" ::: 3\");\n-        return expectedLogMessages;\n-    }\n-\n-    private List<String> buildLogSQLMasterSlaveExpectedMessages() {\n-        List<String> expectedLogMessages = new ArrayList<>();\n-        expectedLogMessages.add(\"Rule Type: master-slave\");\n-        expectedLogMessages.add(\"SQL: select * from user ::: DataSources: db1,db2,db3\");\n-        return expectedLogMessages;\n-    }\n-\n-    private List<String> watchLogMessages(Level level) {\n-        final List<String> loggingEvents = new LinkedList<>();\n-        ConsoleAppender<ILoggingEvent> appener = new ConsoleAppender<ILoggingEvent>() {\n-            @Override\n-            public void doAppend(ILoggingEvent eventObject) {\n-                loggingEvents.add(eventObject.getFormattedMessage());\n-            }\n-        };\n-        appener.setContext(new ContextBase());\n-        Logger logger = (Logger) LoggerFactory.getLogger(\"ShardingSphere-SQL\");\n-        logger.setLevel(level);\n-        logger.addAppender(appener);\n-        return loggingEvents;\n+        return dataSourceNamesSet;\n     }\n \n     private Collection<RouteUnit> mockRouteUnits(Collection<String> dataSourceNames, String sql) {\n@@ -135,4 +112,12 @@ private Collection<RouteUnit> mockOneShard(final String dsName, final int size,\n         }\n         return result;\n     }\n+\n+    private static void setFinalStatic(Field field, Object newValue) throws NoSuchFieldException, IllegalAccessException {\n+        field.setAccessible(true);\n+        Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+        modifiersField.setAccessible(true);\n+        modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n+        field.set(null, newValue);\n+    }\n }",
      "parent_sha": "caf17bc0b322dbdbdcb0f56d6ea23940fb7a746c"
    }
  },
  {
    "oid": "33de65fc8624e04da8a58122a6df82885d70868a",
    "message": "use assertThat",
    "date": "2018-07-31T11:07:00Z",
    "url": "https://github.com/apache/shardingsphere/commit/33de65fc8624e04da8a58122a6df82885d70868a",
    "details": {
      "sha": "2b8e80f8ff5fd3c53565ce50532e69107ffeba4a",
      "filename": "sharding-proxy/src/test/java/io/shardingsphere/proxy/transport/mysql/packet/handshake/AuthorityHandlerTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/apache/shardingsphere/blob/33de65fc8624e04da8a58122a6df82885d70868a/sharding-proxy%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Fproxy%2Ftransport%2Fmysql%2Fpacket%2Fhandshake%2FAuthorityHandlerTest.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/33de65fc8624e04da8a58122a6df82885d70868a/sharding-proxy%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Fproxy%2Ftransport%2Fmysql%2Fpacket%2Fhandshake%2FAuthorityHandlerTest.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-proxy%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Fproxy%2Ftransport%2Fmysql%2Fpacket%2Fhandshake%2FAuthorityHandlerTest.java?ref=33de65fc8624e04da8a58122a6df82885d70868a",
      "patch": "@@ -19,14 +19,15 @@\n \n import org.junit.Test;\n \n-import static org.junit.Assert.assertEquals;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n \n public class AuthorityHandlerTest {\n     \n     private final AuthorityHandler authorityHandler = new AuthorityHandler();\n     \n     @Test\n     public void assertGetAuthPluginData() {\n-        assertEquals(authorityHandler.getAuthPluginData().getAuthPluginData().length, 20);\n+        assertThat(authorityHandler.getAuthPluginData().getAuthPluginData().length, is(20));\n     }\n }",
      "parent_sha": "5b215ad9282f8ff951ce7d21cf5d30b2530f4d3e"
    }
  },
  {
    "oid": "46e625ba7510af066adcb0df44eb70fb37767d16",
    "message": "add assertGetAssistedQueryColumns()",
    "date": "2019-01-30T10:07:09Z",
    "url": "https://github.com/apache/shardingsphere/commit/46e625ba7510af066adcb0df44eb70fb37767d16",
    "details": {
      "sha": "879dbcf5e90bf2f3414f28d27f896e739250de66",
      "filename": "sharding-core/src/test/java/org/apache/shardingsphere/api/config/EncryptorConfigurationTest.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/apache/shardingsphere/blob/46e625ba7510af066adcb0df44eb70fb37767d16/sharding-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fapi%2Fconfig%2FEncryptorConfigurationTest.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/46e625ba7510af066adcb0df44eb70fb37767d16/sharding-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fapi%2Fconfig%2FEncryptorConfigurationTest.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fapi%2Fconfig%2FEncryptorConfigurationTest.java?ref=46e625ba7510af066adcb0df44eb70fb37767d16",
      "patch": "@@ -50,14 +50,17 @@ public void assertGetShardingEncryptorStrategyWithNull() {\n     \n     @Test\n     public void assertGetType() {\n+        assertThat(encryptorConfiguration.getType(), is(\"test\"));\n     }\n     \n     @Test\n-    public void testGetColumns() {\n+    public void assertGetColumns() {\n+        assertThat(encryptorConfiguration.getColumns(), is(\"pwd1\"));\n     }\n     \n     @Test\n-    public void testGetAssistedQueryColumns() {\n+    public void assertGetAssistedQueryColumns() {\n+        assertThat(encryptorConfiguration.getAssistedQueryColumns(), is(\"pwd1_index\"));\n     }\n     \n     @Test",
      "parent_sha": "3e803f8cc14cf38d23bc88594caa5cac8e878f4a"
    }
  },
  {
    "oid": "47b6f99844b5cdc09418402abfb1663bbdf50237",
    "message": "modify isToAddCloseParenthesis()",
    "date": "2019-07-24T07:55:53Z",
    "url": "https://github.com/apache/shardingsphere/commit/47b6f99844b5cdc09418402abfb1663bbdf50237",
    "details": {
      "sha": "7e7a500a1e9392ae0a836436957870dfe232644e",
      "filename": "sharding-core/sharding-core-rewrite/src/main/java/org/apache/shardingsphere/core/rewrite/token/generator/InsertGeneratedKeyTokenGenerator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/shardingsphere/blob/47b6f99844b5cdc09418402abfb1663bbdf50237/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2Ftoken%2Fgenerator%2FInsertGeneratedKeyTokenGenerator.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/47b6f99844b5cdc09418402abfb1663bbdf50237/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2Ftoken%2Fgenerator%2FInsertGeneratedKeyTokenGenerator.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2Ftoken%2Fgenerator%2FInsertGeneratedKeyTokenGenerator.java?ref=47b6f99844b5cdc09418402abfb1663bbdf50237",
      "patch": "@@ -51,7 +51,7 @@ private Optional<InsertGeneratedKeyToken> createInsertGeneratedKeyToken(final In\n     }\n     \n     private boolean isToAddCloseParenthesis(final String tableName, final InsertColumnsSegment segment, final ShardingRule shardingRule) {\n-        return segment.getColumns().isEmpty() && shardingRule.getEncryptRule().getEncryptEngine().getAssistedQueryColumns(tableName).isEmpty();\n+        return segment.getColumns().isEmpty() && 0 == shardingRule.getEncryptRule().getEncryptEngine().getAssistedQueryAndPlainColumnCount(tableName);\n     }\n     \n }",
      "parent_sha": "a778a5b62cfe206c0b06671bac640080c25e306f"
    }
  },
  {
    "oid": "6904023d35d378255e6179d5bd5a1d8ea77753b4",
    "message": "throws SQLException",
    "date": "2019-02-21T09:08:27Z",
    "url": "https://github.com/apache/shardingsphere/commit/6904023d35d378255e6179d5bd5a1d8ea77753b4",
    "details": {
      "sha": "7a669900b508710857efd57f112f3a4b2efc098c",
      "filename": "sharding-core/src/main/java/org/apache/shardingsphere/core/executor/sql/execute/result/StreamQueryResult.java",
      "status": "modified",
      "additions": 4,
      "deletions": 13,
      "changes": 17,
      "blob_url": "https://github.com/apache/shardingsphere/blob/6904023d35d378255e6179d5bd5a1d8ea77753b4/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Fexecutor%2Fsql%2Fexecute%2Fresult%2FStreamQueryResult.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/6904023d35d378255e6179d5bd5a1d8ea77753b4/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Fexecutor%2Fsql%2Fexecute%2Fresult%2FStreamQueryResult.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Fexecutor%2Fsql%2Fexecute%2Fresult%2FStreamQueryResult.java?ref=6904023d35d378255e6179d5bd5a1d8ea77753b4",
      "patch": "@@ -59,15 +59,6 @@ public StreamQueryResult(final ResultSet resultSet, final ShardingRule shardingR\n         metaData = new QueryResultMetaData(resultSet.getMetaData(), shardingRule);\n     }\n     \n-    @SneakyThrows\n-    private Multimap<String, Integer> getColumnLabelAndIndexMap(final ResultSetMetaData resultSetMetaData) {\n-        Multimap<String, Integer> result = HashMultimap.create();\n-        for (int columnIndex = 1; columnIndex <= resultSetMetaData.getColumnCount(); columnIndex++) {\n-            result.put(resultSetMetaData.getColumnLabel(columnIndex), columnIndex);\n-        }\n-        return result;\n-    }\n-    \n     @Override\n     public boolean next() throws SQLException {\n         return resultSet.next();\n@@ -231,13 +222,13 @@ public boolean wasNull() throws SQLException {\n     }\n     \n     @Override\n-    public int getColumnCount() throws SQLException {\n-        return resultSet.getMetaData().getColumnCount();\n+    public int getColumnCount() {\n+        return metaData.getColumnCount();\n     }\n     \n     @Override\n-    public String getColumnLabel(final int columnIndex) throws SQLException {\n-        return resultSet.getMetaData().getColumnLabel(columnIndex);\n+    public String getColumnLabel(final int columnIndex) {\n+        return metaData.getColumnLabel(columnIndex);\n     }\n     \n     @SneakyThrows",
      "parent_sha": "e6957daf2fa260a5b430e9634c961be72639a3c4"
    }
  },
  {
    "oid": "10ac1073e762fc70736ceb5110b046434fd066d7",
    "message": "add Override",
    "date": "2018-11-26T06:17:38Z",
    "url": "https://github.com/apache/shardingsphere/commit/10ac1073e762fc70736ceb5110b046434fd066d7",
    "details": {
      "sha": "4a93ed4f17ef72cf6bc3f31080355750e5408f52",
      "filename": "sharding-core/src/main/java/io/shardingsphere/core/executor/sql/execute/result/AggregationDistinctQueryResult.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/shardingsphere/blob/10ac1073e762fc70736ceb5110b046434fd066d7/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fexecutor%2Fsql%2Fexecute%2Fresult%2FAggregationDistinctQueryResult.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/10ac1073e762fc70736ceb5110b046434fd066d7/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fexecutor%2Fsql%2Fexecute%2Fresult%2FAggregationDistinctQueryResult.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fexecutor%2Fsql%2Fexecute%2Fresult%2FAggregationDistinctQueryResult.java?ref=10ac1073e762fc70736ceb5110b046434fd066d7",
      "patch": "@@ -92,7 +92,7 @@ private void initDerivedIndexAndDistinctIndexes(final AggregationSelectItem sele\n     private void initAggregationColumnLabelAndIndexes(final AggregationSelectItem selectItem) {\n         if (selectItem instanceof AggregationDistinctSelectItem) {\n             AggregationDistinctSelectItem distinctSelectItem = (AggregationDistinctSelectItem) selectItem;\n-            aggregationColumnLabelAndIndexes.put(distinctSelectItem.getColumnLabel(), new ArrayList<>(getColumnLabelAndIndexMap().get(distinctSelectItem.getDistinctColumnName())).get(0));\n+            aggregationColumnLabelAndIndexes.put(distinctSelectItem.getColumnLabel(), super.getCol);\n         }\n     }\n     \n@@ -187,6 +187,7 @@ public String getColumnLabel(final int columnIndex) throws SQLException {\n         throw new SQLException(\"Column index out of range\", \"9999\");\n     }\n     \n+    @Override\n     private Integer getColumnIndex(final String columnLabel) {\n         return new ArrayList<>(aggregationColumnLabelAndIndexes.containsKey(columnLabel) ? aggregationColumnLabelAndIndexes.get(columnLabel)\n                 : getColumnLabelAndIndexMap().get(columnLabel)).get(0) - 1;",
      "parent_sha": "a20729440c4ff3199a7a5e3f1bbf84b37dd4818f"
    }
  },
  {
    "oid": "bbff5935ea4da8199e8089aba22bc132bd10aa16",
    "message": "add encryptColumnValues()",
    "date": "2019-02-17T07:55:09Z",
    "url": "https://github.com/apache/shardingsphere/commit/bbff5935ea4da8199e8089aba22bc132bd10aa16",
    "details": {
      "sha": "e18d31af55fc5d95777fc94ab8257d7ba401d786",
      "filename": "sharding-core/src/main/java/org/apache/shardingsphere/core/optimizer/insert/InsertOptimizeEngine.java",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/apache/shardingsphere/blob/bbff5935ea4da8199e8089aba22bc132bd10aa16/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Foptimizer%2Finsert%2FInsertOptimizeEngine.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/bbff5935ea4da8199e8089aba22bc132bd10aa16/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Foptimizer%2Finsert%2FInsertOptimizeEngine.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Foptimizer%2Finsert%2FInsertOptimizeEngine.java?ref=bbff5935ea4da8199e8089aba22bc132bd10aa16",
      "patch": "@@ -129,12 +129,11 @@ private boolean isNeededToEncrypt() {\n         return shardingRule.getShardingEncryptorEngine().isHasShardingEncryptorStrategy(insertStatement.getTables().getSingleTableName());\n     }\n     \n-    private void encryptColumnValues(final InsertValuesToken insertValuesToken, final int currentIndex) {\n-//        String logicTableName = insertStatement.getTables().getSingleTableName()\n+    private void encryptColumnValues(final InsertValuesToken insertValuesToken, final int insertColumnValueIndex) {\n         for (int i = 0; i < insertValuesToken.getColumnNames().size(); i++) {\n             Optional<ShardingEncryptor> shardingEncryptor = shardingRule.getShardingEncryptorEngine().getShardingEncryptor(insertStatement.getTables().getSingleTableName(), insertValuesToken.getColumnNames().get(i));\n             if (shardingEncryptor.isPresent()) {\n-                reviseInsertValuesToken(insertValuesToken, currentIndex, i, shardingEncryptor.get());\n+                reviseInsertValuesToken(insertValuesToken, insertColumnValueIndex, i, shardingEncryptor.get());\n             }\n         }\n     }",
      "parent_sha": "1a5849395dc61ff794f09ed61835964926487cfb"
    }
  },
  {
    "oid": "c5390612c64852529a5cc18c9d57e07f84782526",
    "message": "refactor UserAuthenticationService (#3420)",
    "date": "2019-10-31T07:25:36Z",
    "url": "https://github.com/apache/shardingsphere/commit/c5390612c64852529a5cc18c9d57e07f84782526",
    "details": {
      "sha": "8047c32f8c5bee7de894cde6ad4d9470d7b63f30",
      "filename": "sharding-ui/sharding-ui-backend/src/main/java/org/apache/shardingsphere/ui/security/UserAuthenticationService.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/apache/shardingsphere/blob/c5390612c64852529a5cc18c9d57e07f84782526/sharding-ui%2Fsharding-ui-backend%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fui%2Fsecurity%2FUserAuthenticationService.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/c5390612c64852529a5cc18c9d57e07f84782526/sharding-ui%2Fsharding-ui-backend%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fui%2Fsecurity%2FUserAuthenticationService.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-ui%2Fsharding-ui-backend%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fui%2Fsecurity%2FUserAuthenticationService.java?ref=c5390612c64852529a5cc18c9d57e07f84782526",
      "patch": "@@ -41,6 +41,10 @@ public final class UserAuthenticationService {\n     @Getter\n     @Setter\n     private String password;\n+\n+    final Base64 base64 = new Base64();\n+\n+    private Gson gson = new Gson();\n     \n     /**\n      * Check user.\n@@ -61,6 +65,6 @@ public boolean checkUser(final UserAccount userAccount) {\n      * @return authentication token\n      */\n     public String getToken() {\n-        return new Base64().encodeToString(new Gson().toJson(this).getBytes());\n+        return base64.encodeToString(gson.toJson(this).getBytes());\n     }\n }",
      "parent_sha": "03c55336b388fdc9b7b04f75a384f8b0d4ae1edd"
    }
  },
  {
    "oid": "7a49a618bb5af574a401c5d08c60cccc26a2ccf8",
    "message": "#1172, for comment: refine event mechanism",
    "date": "2018-09-13T03:35:27Z",
    "url": "https://github.com/apache/shardingsphere/commit/7a49a618bb5af574a401c5d08c60cccc26a2ccf8",
    "details": {
      "sha": "e911d2be540b01d1ca13b6dbf166aeb5fa89e41b",
      "filename": "sharding-opentracing/src/main/java/io/shardingsphere/opentracing/listener/CloseConnectionEventListener.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/apache/shardingsphere/blob/7a49a618bb5af574a401c5d08c60cccc26a2ccf8/sharding-opentracing%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fopentracing%2Flistener%2FCloseConnectionEventListener.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/7a49a618bb5af574a401c5d08c60cccc26a2ccf8/sharding-opentracing%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fopentracing%2Flistener%2FCloseConnectionEventListener.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-opentracing%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fopentracing%2Flistener%2FCloseConnectionEventListener.java?ref=7a49a618bb5af574a401c5d08c60cccc26a2ccf8",
      "patch": "@@ -34,7 +34,7 @@ public final class CloseConnectionEventListener extends OpenTracingListener<Clos\n     \n     private static final String OPERATION_NAME_PREFIX = \"/Sharding-Sphere/closeConnection/\";\n     \n-    private final ThreadLocal<Span> branchSpan = new ThreadLocal<>();\n+    private final ThreadLocal<Span> span = new ThreadLocal<>();\n     \n     /**\n      * Listen connectionClose event.\n@@ -49,22 +49,22 @@ public void listen(final CloseConnectionEvent event) {\n     \n     @Override\n     protected void beforeExecute(final CloseConnectionEvent event) {\n-        branchSpan.set(ShardingTracer.get().buildSpan(OPERATION_NAME_PREFIX).withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n+        span.set(ShardingTracer.get().buildSpan(OPERATION_NAME_PREFIX).withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n             .withTag(Tags.PEER_HOSTNAME.getKey(), event.getUrl().split(\"//\")[1].split(\"/\")[0]).withTag(Tags.COMPONENT.getKey(), ShardingTags.COMPONENT_NAME)\n             .withTag(Tags.DB_INSTANCE.getKey(), event.getDataSource()).startManual());\n     }\n     \n     @Override\n     protected void tracingFinish(final CloseConnectionEvent event) {\n-        if (null == branchSpan.get()) {\n+        if (null == span.get()) {\n             return;\n         }\n-        branchSpan.get().finish();\n-        branchSpan.remove();\n+        span.get().finish();\n+        span.remove();\n     }\n     \n     @Override\n     protected Span getFailureSpan() {\n-        return branchSpan.get();\n+        return span.get();\n     }\n }",
      "parent_sha": "04ef0f81adeaf7ba6dd2b9bbcbb505a1d0123005"
    }
  },
  {
    "oid": "6f6e74db2858da8e84fc69b4487d0b169266ef7d",
    "message": "modify rewrite()",
    "date": "2019-05-23T07:12:35Z",
    "url": "https://github.com/apache/shardingsphere/commit/6f6e74db2858da8e84fc69b4487d0b169266ef7d",
    "details": {
      "sha": "cca2ce75c15d172beea637072b8cc28d7825c6db",
      "filename": "sharding-core/sharding-core-rewrite/src/main/java/org/apache/shardingsphere/core/rewrite/SQLRewriteEngine.java",
      "status": "modified",
      "additions": 8,
      "deletions": 10,
      "changes": 18,
      "blob_url": "https://github.com/apache/shardingsphere/blob/6f6e74db2858da8e84fc69b4487d0b169266ef7d/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngine.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/6f6e74db2858da8e84fc69b4487d0b169266ef7d/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngine.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngine.java?ref=6f6e74db2858da8e84fc69b4487d0b169266ef7d",
      "patch": "@@ -26,6 +26,7 @@\n import org.apache.shardingsphere.core.parse.sql.token.Substitutable;\n import org.apache.shardingsphere.core.rewrite.builder.ParameterBuilder;\n import org.apache.shardingsphere.core.rewrite.builder.SQLBuilder;\n+import org.apache.shardingsphere.core.rewrite.rewriter.BaseSQLRewriter;\n import org.apache.shardingsphere.core.rewrite.rewriter.EncryptSQLRewriter;\n import org.apache.shardingsphere.core.rewrite.rewriter.ShardingSQLRewriter;\n import org.apache.shardingsphere.core.route.SQLRouteResult;\n@@ -87,20 +88,17 @@ private void pattern(final OptimizeResult optimizeResult) {\n     }\n     \n     private void rewrite(final OptimizeResult optimizeResult) {\n-        rewriteInitialLiteral();\n-        int count = 0;\n+        BaseSQLRewriter baseSQLRewriter = new BaseSQLRewriter(sqlStatement);\n+        EncryptSQLRewriter encryptSQLRewriter = new EncryptSQLRewriter(getShardingEncryptorEngine(), sqlStatement, optimizeResult);\n+        ShardingSQLRewriter shardingSQLRewriter = new ShardingSQLRewriter(getShardingRule(), sqlStatement.getLogicSQL(), databaseType, sqlStatement, sqlRouteResult);\n+        baseSQLRewriter.rewrite(sqlBuilder);\n         for (SQLToken each : sqlStatement.getSQLTokens()) {\n-            new EncryptSQLRewriter(getShardingEncryptorEngine(), sqlStatement, optimizeResult).rewrite(sqlBuilder, each);\n-            new ShardingSQLRewriter(getShardingRule(), sqlStatement.getLogicSQL(), databaseType, sqlStatement, sqlRouteResult).rewrite(sqlBuilder, each);\n-            rewriteRestLiteral(sqlBuilder, each, count);\n-            count++;\n+            encryptSQLRewriter.rewrite(sqlBuilder, each);\n+            shardingSQLRewriter.rewrite(sqlBuilder, each);\n+            baseSQLRewriter.rewrite(sqlBuilder, each);\n         }\n     }\n     \n-    private void rewriteInitialLiteral() {\n-        sqlBuilder.appendLiterals(sqlStatement.getLogicSQL().substring(0, sqlStatement.getSQLTokens().get(0).getStartIndex()));\n-    }\n-    \n     private ShardingEncryptorEngine getShardingEncryptorEngine() {\n         if (null == baseRule) {\n             return null;",
      "parent_sha": "16b79f75dc3016919e2be2b26c2b366e505f017d"
    }
  },
  {
    "oid": "12432f814f1182ee02cedb2756ba5cce7247b0ab",
    "message": "add decode()",
    "date": "2019-02-21T03:13:29Z",
    "url": "https://github.com/apache/shardingsphere/commit/12432f814f1182ee02cedb2756ba5cce7247b0ab",
    "details": {
      "sha": "6cbb5b106a80cd22838063b5f98063efd0c2f6b6",
      "filename": "sharding-core/src/main/java/org/apache/shardingsphere/core/executor/sql/execute/result/MemoryQueryResult.java",
      "status": "modified",
      "additions": 14,
      "deletions": 10,
      "changes": 24,
      "blob_url": "https://github.com/apache/shardingsphere/blob/12432f814f1182ee02cedb2756ba5cce7247b0ab/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Fexecutor%2Fsql%2Fexecute%2Fresult%2FMemoryQueryResult.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/12432f814f1182ee02cedb2756ba5cce7247b0ab/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Fexecutor%2Fsql%2Fexecute%2Fresult%2FMemoryQueryResult.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Fexecutor%2Fsql%2Fexecute%2Fresult%2FMemoryQueryResult.java?ref=12432f814f1182ee02cedb2756ba5cce7247b0ab",
      "patch": "@@ -21,7 +21,6 @@\n import com.google.common.collect.HashMultimap;\n import com.google.common.collect.Multimap;\n import lombok.SneakyThrows;\n-import org.apache.shardingsphere.core.encrypt.ShardingEncryptorEngine;\n import org.apache.shardingsphere.core.executor.sql.execute.row.QueryRow;\n import org.apache.shardingsphere.core.merger.QueryResult;\n import org.apache.shardingsphere.core.rule.ShardingRule;\n@@ -161,23 +160,28 @@ private Integer getColumnIndex(final String columnLabel) {\n         return new ArrayList<>(columnLabelAndIndexes.get(columnLabel)).get(0);\n     }\n     \n-    private Optional<ShardingEncryptor> getShardingEncryptorEngine(final String logicTableName, final String columnName) {\n-        return shardingRule.getShardingEncryptorEngine().getShardingEncryptor(logicTableName, columnName);\n-    }\n-    \n     @SneakyThrows\n     private Object decode(final Object value, final String columnLabel) {\n-        Integer index = columnLabelAndIndexes.get(columnLabel).iterator().next();\n-        if (null == index) {\n+        Collection<Integer> index = columnLabelAndIndexes.get(columnLabel);\n+        if (index.isEmpty()) {\n             return value;\n         }\n-        Optional<ShardingEncryptor> shardingEncryptor = getShardingEncryptorEngine().getShardingEncryptor(getMetaData().getTableName(index), getMetaData().getColumnName(index));\n-        return shardingEncryptor.isPresent() ? shardingEncryptor.get().decrypt(value) : value;\n+        return decode(value, index.iterator().next());\n     }\n     \n     @SneakyThrows\n     private Object decode(final Object value, final int columnIndex) {\n-        Optional<ShardingEncryptor> shardingEncryptor = getShardingEncryptorEngine().getShardingEncryptor(getMetaData().getTableName(columnIndex), getMetaData().getColumnName(columnIndex));\n+        Optional<ShardingEncryptor> shardingEncryptor = getShardingEncryptorEngine(getLogicTableName(columnIndex), metaData.getColumnName(columnIndex));\n         return shardingEncryptor.isPresent() ? shardingEncryptor.get().decrypt(value) : value;\n     }\n+    \n+    private Optional<ShardingEncryptor> getShardingEncryptorEngine(final String logicTableName, final String columnName) {\n+        return shardingRule.getShardingEncryptorEngine().getShardingEncryptor(logicTableName, columnName);\n+    }\n+    \n+    @SneakyThrows\n+    private String getLogicTableName(final int columnIndex) {\n+        String actualTableName = metaData.getTableName(columnIndex);\n+        return shardingRule.getLogicTableNames(actualTableName).isEmpty() ? actualTableName : shardingRule.getLogicTableNames(actualTableName).iterator().next();\n+    }\n }",
      "parent_sha": "2a27b731792864dd429ef6e4988577e0931c8c86"
    }
  },
  {
    "oid": "766964b348edd79ef00b918acf3975f876ad249b",
    "message": "add toString()",
    "date": "2019-07-03T07:00:20Z",
    "url": "https://github.com/apache/shardingsphere/commit/766964b348edd79ef00b918acf3975f876ad249b",
    "details": {
      "sha": "61a7e575d464b3f5a2ed65aa1e0ba42c30edc3b5",
      "filename": "sharding-core/sharding-core-rewrite/src/main/java/org/apache/shardingsphere/core/rewrite/token/pojo/InsertGeneratedKeyToken.java",
      "status": "modified",
      "additions": 14,
      "deletions": 5,
      "changes": 19,
      "blob_url": "https://github.com/apache/shardingsphere/blob/766964b348edd79ef00b918acf3975f876ad249b/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2Ftoken%2Fpojo%2FInsertGeneratedKeyToken.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/766964b348edd79ef00b918acf3975f876ad249b/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2Ftoken%2Fpojo%2FInsertGeneratedKeyToken.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2Ftoken%2Fpojo%2FInsertGeneratedKeyToken.java?ref=766964b348edd79ef00b918acf3975f876ad249b",
      "patch": "@@ -19,25 +19,34 @@\n \n import lombok.EqualsAndHashCode;\n import lombok.Getter;\n-import lombok.ToString;\n \n /**\n  * Insert generated key columns token.\n  *\n  * @author panjuan\n  */\n @Getter\n-@ToString\n @EqualsAndHashCode(callSuper = true)\n public final class InsertGeneratedKeyToken extends SQLToken implements Attachable {\n     \n     private final String column;\n     \n-    private final boolean isToAddCloseParenthesis;\n+    private final boolean isToAppendCloseParenthesis;\n     \n-    public InsertGeneratedKeyToken(final int startIndex, final String column, final boolean isToAddCloseParenthesis) {\n+    public InsertGeneratedKeyToken(final int startIndex, final String column, final boolean isToAppendCloseParenthesis) {\n         super(startIndex);\n         this.column = column;\n-        this.isToAddCloseParenthesis = isToAddCloseParenthesis;\n+        this.isToAppendCloseParenthesis = isToAppendCloseParenthesis;\n+    }\n+    \n+    @Override\n+    public String toString() {\n+        if (null == column) {\n+            return \"\";\n+        }\n+        if (isToAppendCloseParenthesis) {\n+            return String.format(\", %s)\", column);\n+        }\n+        return String.format(\", %s\", column);\n     }\n }",
      "parent_sha": "8387293fe29adfaa7e0167a5c0f416032d062996"
    }
  },
  {
    "oid": "fbb7e19dfe0061d87ab21360c9e81125366750c0",
    "message": "add selectRange to api",
    "date": "2018-10-28T10:44:12Z",
    "url": "https://github.com/apache/shardingsphere/commit/fbb7e19dfe0061d87ab21360c9e81125366750c0",
    "details": {
      "sha": "0918cc212b18a8132cb005ab5724560d74b52570",
      "filename": "common-repository/repository-api/src/main/java/io/shardingsphere/example/repository/api/repository/CommonRepository.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/shardingsphere/blob/fbb7e19dfe0061d87ab21360c9e81125366750c0/common-repository%2Frepository-api%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fexample%2Frepository%2Fapi%2Frepository%2FCommonRepository.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/fbb7e19dfe0061d87ab21360c9e81125366750c0/common-repository%2Frepository-api%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fexample%2Frepository%2Fapi%2Frepository%2FCommonRepository.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/common-repository%2Frepository-api%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fexample%2Frepository%2Fapi%2Frepository%2FCommonRepository.java?ref=fbb7e19dfe0061d87ab21360c9e81125366750c0",
      "patch": "@@ -31,5 +31,7 @@ public interface CommonRepository<T> {\n     \n     void delete(Long id);\n     \n-    List<T> selectAll(boolean isRangeSharding);\n+    List<T> selectAll();\n+    \n+    List<T> selectRange();\n }",
      "parent_sha": "93544b87ea753138981d6d3f6e96f7161b9ee875"
    }
  },
  {
    "oid": "20ebec9f7af020c883d52296b9a47d2224fd58cd",
    "message": "Refactor KernelProcessor (#8715)",
    "date": "2020-12-22T06:52:46Z",
    "url": "https://github.com/apache/shardingsphere/commit/20ebec9f7af020c883d52296b9a47d2224fd58cd",
    "details": {
      "sha": "d33671352e79cd9eb3c483d8f489c7b1ad760038",
      "filename": "shardingsphere-infra/shardingsphere-infra-context/src/main/java/org/apache/shardingsphere/infra/context/kernel/KernelProcessor.java",
      "status": "modified",
      "additions": 21,
      "deletions": 13,
      "changes": 34,
      "blob_url": "https://github.com/apache/shardingsphere/blob/20ebec9f7af020c883d52296b9a47d2224fd58cd/shardingsphere-infra%2Fshardingsphere-infra-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Finfra%2Fcontext%2Fkernel%2FKernelProcessor.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/20ebec9f7af020c883d52296b9a47d2224fd58cd/shardingsphere-infra%2Fshardingsphere-infra-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Finfra%2Fcontext%2Fkernel%2FKernelProcessor.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/shardingsphere-infra%2Fshardingsphere-infra-context%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Finfra%2Fcontext%2Fkernel%2FKernelProcessor.java?ref=20ebec9f7af020c883d52296b9a47d2224fd58cd",
      "patch": "@@ -19,22 +19,18 @@\n \n import org.apache.shardingsphere.infra.audit.SQLAuditEngine;\n import org.apache.shardingsphere.infra.binder.LogicSQL;\n-import org.apache.shardingsphere.infra.binder.statement.SQLStatementContext;\n import org.apache.shardingsphere.infra.config.properties.ConfigurationProperties;\n import org.apache.shardingsphere.infra.config.properties.ConfigurationPropertyKey;\n import org.apache.shardingsphere.infra.executor.sql.context.ExecutionContext;\n import org.apache.shardingsphere.infra.executor.sql.context.ExecutionContextBuilder;\n-import org.apache.shardingsphere.infra.executor.sql.context.ExecutionUnit;\n import org.apache.shardingsphere.infra.executor.sql.log.SQLLogger;\n import org.apache.shardingsphere.infra.metadata.ShardingSphereMetaData;\n import org.apache.shardingsphere.infra.rewrite.SQLRewriteEntry;\n import org.apache.shardingsphere.infra.rewrite.engine.result.SQLRewriteResult;\n import org.apache.shardingsphere.infra.route.context.RouteContext;\n import org.apache.shardingsphere.infra.route.engine.SQLRouteEngine;\n-import org.apache.shardingsphere.infra.rule.ShardingSphereRule;\n \n import java.sql.SQLException;\n-import java.util.Collection;\n \n /**\n  * Kernel processor.\n@@ -51,19 +47,31 @@ public final class KernelProcessor {\n      * @throws SQLException SQL exception\n      */\n     public ExecutionContext generateExecutionContext(final LogicSQL logicSQL, final ShardingSphereMetaData metaData, final ConfigurationProperties props) throws SQLException {\n-        Collection<ShardingSphereRule> rules = metaData.getRuleMetaData().getRules();\n-        new SQLAuditEngine().audit(logicSQL.getSqlStatementContext().getSqlStatement(), logicSQL.getParameters(), metaData.getName(), rules);\n-        SQLRouteEngine sqlRouteEngine = new SQLRouteEngine(rules, props);\n-        SQLStatementContext<?> sqlStatementContext = logicSQL.getSqlStatementContext();\n-        RouteContext routeContext = sqlRouteEngine.route(logicSQL, metaData);\n-        SQLRewriteEntry rewriteEntry = new SQLRewriteEntry(metaData.getSchema(), props, rules);\n-        SQLRewriteResult rewriteResult = rewriteEntry.rewrite(logicSQL.getSql(), logicSQL.getParameters(), sqlStatementContext, routeContext);\n-        Collection<ExecutionUnit> executionUnits = ExecutionContextBuilder.build(metaData, rewriteResult, sqlStatementContext);\n-        ExecutionContext result = new ExecutionContext(sqlStatementContext, executionUnits, routeContext);\n+        audit(logicSQL, metaData);\n+        RouteContext routeContext = route(logicSQL, metaData, props);\n+        SQLRewriteResult rewriteResult = rewrite(logicSQL, metaData, props, routeContext);\n+        ExecutionContext result = createExecutionContext(logicSQL, metaData, routeContext, rewriteResult);\n         logSQL(logicSQL, props, result);\n         return result;\n     }\n     \n+    private void audit(final LogicSQL logicSQL, final ShardingSphereMetaData metaData) throws SQLException {\n+        new SQLAuditEngine().audit(logicSQL.getSqlStatementContext().getSqlStatement(), logicSQL.getParameters(), metaData.getName(), metaData.getRuleMetaData().getRules());\n+    }\n+    \n+    private RouteContext route(final LogicSQL logicSQL, final ShardingSphereMetaData metaData, final ConfigurationProperties props) {\n+        return new SQLRouteEngine(metaData.getRuleMetaData().getRules(), props).route(logicSQL, metaData);\n+    }\n+    \n+    private SQLRewriteResult rewrite(final LogicSQL logicSQL, final ShardingSphereMetaData metaData, final ConfigurationProperties props, final RouteContext routeContext) {\n+        return new SQLRewriteEntry(\n+                metaData.getSchema(), props, metaData.getRuleMetaData().getRules()).rewrite(logicSQL.getSql(), logicSQL.getParameters(), logicSQL.getSqlStatementContext(), routeContext);\n+    }\n+    \n+    private ExecutionContext createExecutionContext(final LogicSQL logicSQL, final ShardingSphereMetaData metaData, final RouteContext routeContext, final SQLRewriteResult rewriteResult) {\n+        return new ExecutionContext(logicSQL.getSqlStatementContext(), ExecutionContextBuilder.build(metaData, rewriteResult, logicSQL.getSqlStatementContext()), routeContext);\n+    }\n+    \n     private void logSQL(final LogicSQL logicSQL, final ConfigurationProperties props, final ExecutionContext executionContext) {\n         if (props.<Boolean>getValue(ConfigurationPropertyKey.SQL_SHOW)) {\n             SQLLogger.logSQL(logicSQL, props.<Boolean>getValue(ConfigurationPropertyKey.SQL_SIMPLE), executionContext);",
      "parent_sha": "aeef1633bfece1739fd3f76abe4ce534e52c80ee"
    }
  },
  {
    "oid": "2422d4b0edd418179414535d7234a154dbbcedc9",
    "message": "Refactor MigrateTableUpdater (#29221)",
    "date": "2023-11-27T15:47:41Z",
    "url": "https://github.com/apache/shardingsphere/commit/2422d4b0edd418179414535d7234a154dbbcedc9",
    "details": {
      "sha": "cb16f8625a74cd54b8eec11d8587c3e822fc3c76",
      "filename": "kernel/data-pipeline/distsql/handler/src/main/java/org/apache/shardingsphere/migration/distsql/handler/update/MigrateTableUpdater.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/apache/shardingsphere/blob/2422d4b0edd418179414535d7234a154dbbcedc9/kernel%2Fdata-pipeline%2Fdistsql%2Fhandler%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fmigration%2Fdistsql%2Fhandler%2Fupdate%2FMigrateTableUpdater.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/2422d4b0edd418179414535d7234a154dbbcedc9/kernel%2Fdata-pipeline%2Fdistsql%2Fhandler%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fmigration%2Fdistsql%2Fhandler%2Fupdate%2FMigrateTableUpdater.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/kernel%2Fdata-pipeline%2Fdistsql%2Fhandler%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fmigration%2Fdistsql%2Fhandler%2Fupdate%2FMigrateTableUpdater.java?ref=2422d4b0edd418179414535d7234a154dbbcedc9",
      "patch": "@@ -32,12 +32,11 @@\n  */\n public final class MigrateTableUpdater implements RALUpdater<MigrateTableStatement> {\n     \n-    private final MigrationJobAPI jobAPI = (MigrationJobAPI) TypedSPILoader.getService(TransmissionJobAPI.class, \"MIGRATION\");\n-    \n     @Override\n     public void executeUpdate(final String databaseName, final MigrateTableStatement sqlStatement) {\n         String targetDatabaseName = null == sqlStatement.getTargetDatabaseName() ? databaseName : sqlStatement.getTargetDatabaseName();\n         ShardingSpherePreconditions.checkNotNull(targetDatabaseName, MissingRequiredTargetDatabaseException::new);\n+        MigrationJobAPI jobAPI = (MigrationJobAPI) TypedSPILoader.getService(TransmissionJobAPI.class, \"MIGRATION\");\n         jobAPI.start(new PipelineContextKey(InstanceType.PROXY), new MigrateTableStatement(sqlStatement.getSourceTargetEntries(), targetDatabaseName));\n     }\n     ",
      "parent_sha": "0df0325d9b0aad185eb2b269a3bd214fb79b4d24"
    }
  },
  {
    "oid": "75d4702d3669570cdce65f117c147ec52c74566d",
    "message": "Refactor MetaDataContextsBuilder (#17750)",
    "date": "2022-05-17T13:28:49Z",
    "url": "https://github.com/apache/shardingsphere/commit/75d4702d3669570cdce65f117c147ec52c74566d",
    "details": {
      "sha": "3c5e9774f0fcba2385b19728e67ff703d1fbe681",
      "filename": "shardingsphere-mode/shardingsphere-mode-core/src/main/java/org/apache/shardingsphere/mode/metadata/MetaDataContextsBuilder.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apache/shardingsphere/blob/75d4702d3669570cdce65f117c147ec52c74566d/shardingsphere-mode%2Fshardingsphere-mode-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fmode%2Fmetadata%2FMetaDataContextsBuilder.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/75d4702d3669570cdce65f117c147ec52c74566d/shardingsphere-mode%2Fshardingsphere-mode-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fmode%2Fmetadata%2FMetaDataContextsBuilder.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/shardingsphere-mode%2Fshardingsphere-mode-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fmode%2Fmetadata%2FMetaDataContextsBuilder.java?ref=75d4702d3669570cdce65f117c147ec52c74566d",
      "patch": "@@ -100,13 +100,13 @@ private ShardingSphereMetaData createMetaData(final String databaseName,\n     private Map<String, ShardingSphereMetaData> getSystemDatabaseMetaDataMap(final DatabaseType frontendDatabaseType) throws SQLException {\n         Map<String, ShardingSphereMetaData> result = new HashMap<>(frontendDatabaseType.getSystemDatabaseSchemaMap().size(), 1);\n         for (String each : frontendDatabaseType.getSystemDatabaseSchemaMap().keySet()) {\n-            result.put(each, createSystemMetaData(frontendDatabaseType, each));\n+            result.put(each, createSystemMetaData(each, frontendDatabaseType));\n         }\n         return result;\n     }\n     \n-    private ShardingSphereMetaData createSystemMetaData(final DatabaseType frontendDatabaseType, final String each) throws SQLException {\n-        ShardingSphereDatabase database = DatabaseLoader.load(each, frontendDatabaseType);\n+    private ShardingSphereMetaData createSystemMetaData(final String databaseName, final DatabaseType frontendDatabaseType) throws SQLException {\n+        ShardingSphereDatabase database = DatabaseLoader.load(databaseName, frontendDatabaseType);\n         DatabaseConfiguration databaseConfig = new DataSourceProvidedDatabaseConfiguration(new LinkedHashMap<>(), new LinkedList<>());\n         return ShardingSphereMetaData.create(frontendDatabaseType, database, databaseConfig, new LinkedList<>());\n     }",
      "parent_sha": "da334a4201eb2de03b38d3aa0337ff1854c84968"
    }
  },
  {
    "oid": "b23633a95077a8fd68f860580fbd5ab453ef2baf",
    "message": "@SuppressWarnings(\"all\")",
    "date": "2019-02-25T03:37:36Z",
    "url": "https://github.com/apache/shardingsphere/commit/b23633a95077a8fd68f860580fbd5ab453ef2baf",
    "details": {
      "sha": "1e09446b23d687aeb8a7e425983eca799e353f96",
      "filename": "sharding-core/src/main/java/org/apache/shardingsphere/core/rewrite/placeholder/EncryptUpdateItemColumnPlaceholder.java",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/apache/shardingsphere/blob/b23633a95077a8fd68f860580fbd5ab453ef2baf/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2Fplaceholder%2FEncryptUpdateItemColumnPlaceholder.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/b23633a95077a8fd68f860580fbd5ab453ef2baf/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2Fplaceholder%2FEncryptUpdateItemColumnPlaceholder.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2Fplaceholder%2FEncryptUpdateItemColumnPlaceholder.java?ref=b23633a95077a8fd68f860580fbd5ab453ef2baf",
      "patch": "@@ -78,11 +78,16 @@ public EncryptUpdateItemColumnPlaceholder(final String logicTableName, final Str\n     }\n     \n     @Override\n+    @SuppressWarnings(\"all\")\n     public String toString() {\n         if (Strings.isNullOrEmpty(assistedColumnName)) {\n-            return -1 != placeholderIndex ? String.format(\"%s = ?\", columnName) : String.format(\"%s = '%s'\", columnName, columnValue);\n+            return -1 != placeholderIndex ? String.format(\"%s = ?\", columnName) : String.format(\"%s = %s\", columnName, toStringForColumnValue(columnValue));\n         }\n         return -1 != placeholderIndex \n-                ? String.format(\"%s = ?, %s = ?\", columnName, assistedColumnName) : String.format(\"%s = '%s', %s = '%s'\", columnName, columnValue, assistedColumnName, assistedColumnValue);\n+                ? String.format(\"%s = ?, %s = ?\", columnName, assistedColumnName) : String.format(\"%s = %s, %s = %s\", columnName, toStringForColumnValue(columnValue), assistedColumnName, toStringForColumnValue(assistedColumnValue));\n+    }\n+    \n+    private String toStringForColumnValue(final Comparable<?> columnValue) {\n+        return String.class == columnValue.getClass() ? String.format(\"'%s'\", columnValue) : columnValue.toString();\n     }\n }",
      "parent_sha": "d957981504d919ec9c156e86d77622c189ac176d"
    }
  },
  {
    "oid": "a599121e952b52d9d3826e9a129de28835ec92cf",
    "message": "modify function name",
    "date": "2018-09-13T05:38:13Z",
    "url": "https://github.com/apache/shardingsphere/commit/a599121e952b52d9d3826e9a129de28835ec92cf",
    "details": {
      "sha": "089ccc0e085de0254475bfa647a2604a86f0f21a",
      "filename": "sharding-jdbc/src/main/java/io/shardingsphere/core/executor/BatchPreparedStatementExecutor.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/apache/shardingsphere/blob/a599121e952b52d9d3826e9a129de28835ec92cf/sharding-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fexecutor%2FBatchPreparedStatementExecutor.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/a599121e952b52d9d3826e9a129de28835ec92cf/sharding-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fexecutor%2FBatchPreparedStatementExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fexecutor%2FBatchPreparedStatementExecutor.java?ref=a599121e952b52d9d3826e9a129de28835ec92cf",
      "patch": "@@ -264,8 +264,9 @@ public Statement apply(final SQLExecuteUnit input) {\n      * @param statement statement\n      * @return parameter sets\n      */\n-    public List<List<Object>> getParameterSets(final Statement statement) {\n+    public List<List<Object>> getParameterSet(final Statement statement) {\n         Optional<SQLExecuteUnit> target = Optional.absent();\n+        List<List<Object>> result = new LinkedList<>();\n         for (ShardingExecuteGroup<SQLExecuteUnit> each : executeGroups) {\n             target = Iterators.tryFind(each.getInputs().iterator(), new Predicate<SQLExecuteUnit>() {\n                 @Override\n@@ -274,7 +275,10 @@ public boolean apply(final SQLExecuteUnit input) {\n                 }\n             });\n         }\n-        return target.isPresent() ? target.get().getRouteUnit().getSqlUnit().getParameterSets() : new LinkedList<List<Object>>();\n+        if (target.isPresent()) {\n+            result.addAll(target.get().getRouteUnit().getSqlUnit().getParameterSets());\n+        }\n+        return result;\n     }\n     \n     /**",
      "parent_sha": "b2f4f01819bfe8cfd528cc58e3057fdc3c701e55"
    }
  },
  {
    "oid": "6680eb6ac9e1d0f7ad91b568873313d7f8a609fe",
    "message": "reverse",
    "date": "2019-01-03T07:23:46Z",
    "url": "https://github.com/apache/shardingsphere/commit/6680eb6ac9e1d0f7ad91b568873313d7f8a609fe",
    "details": {
      "sha": "99be96ff43878353d05682bc920cd73b3c7dc500",
      "filename": "sharding-core/src/main/java/io/shardingsphere/core/parsing/parser/context/selectitem/AggregationSelectItem.java",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/apache/shardingsphere/blob/6680eb6ac9e1d0f7ad91b568873313d7f8a609fe/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fparsing%2Fparser%2Fcontext%2Fselectitem%2FAggregationSelectItem.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/6680eb6ac9e1d0f7ad91b568873313d7f8a609fe/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fparsing%2Fparser%2Fcontext%2Fselectitem%2FAggregationSelectItem.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fparsing%2Fparser%2Fcontext%2Fselectitem%2FAggregationSelectItem.java?ref=6680eb6ac9e1d0f7ad91b568873313d7f8a609fe",
      "patch": "@@ -44,7 +44,7 @@ public class AggregationSelectItem implements SelectItem {\n     \n     private final String innerExpression;\n     \n-    private final String alias;\n+    private final Optional<String> alias;\n     \n     private final List<AggregationSelectItem> derivedAggregationSelectItems = new ArrayList<>(2);\n     \n@@ -64,9 +64,4 @@ public String getExpression() {\n     public String getColumnLabel() {\n         return alias.isPresent() ? alias.get() : getExpression();\n     }\n-    \n-    @Override\n-    public Optional<String> getAlias() {\n-        return null == alias ? Optional.<String>absent() : Optional.of(alias);\n-    }\n }",
      "parent_sha": "586822e514add917df001f16037a562035320542"
    }
  },
  {
    "oid": "bd9dcd320598fa525d206fcc8c17db708f114f22",
    "message": "Fix : fix test errors (#30870)",
    "date": "2024-04-12T10:51:22Z",
    "url": "https://github.com/apache/shardingsphere/commit/bd9dcd320598fa525d206fcc8c17db708f114f22",
    "details": {
      "sha": "1f28feb8a02557ccbc7e15fe3b969b3f74359a2a",
      "filename": "proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/result/query/HBaseDescribeResultSetTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/apache/shardingsphere/blob/bd9dcd320598fa525d206fcc8c17db708f114f22/proxy%2Fbackend%2Ftype%2Fhbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fproxy%2Fbackend%2Fhbase%2Fresult%2Fquery%2FHBaseDescribeResultSetTest.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/bd9dcd320598fa525d206fcc8c17db708f114f22/proxy%2Fbackend%2Ftype%2Fhbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fproxy%2Fbackend%2Fhbase%2Fresult%2Fquery%2FHBaseDescribeResultSetTest.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/proxy%2Fbackend%2Ftype%2Fhbase%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fproxy%2Fbackend%2Fhbase%2Fresult%2Fquery%2FHBaseDescribeResultSetTest.java?ref=bd9dcd320598fa525d206fcc8c17db708f114f22",
      "patch": "@@ -19,7 +19,6 @@\n \n import org.apache.shardingsphere.infra.binder.context.segment.table.TablesContext;\n import org.apache.shardingsphere.infra.binder.context.statement.dal.ShowCreateTableStatementContext;\n-import org.apache.shardingsphere.proxy.backend.hbase.exception.HBaseOperationException;\n import org.apache.shardingsphere.proxy.backend.hbase.result.HBaseSupportedSQLStatement;\n import org.junit.jupiter.api.Test;\n \n@@ -67,6 +66,6 @@ void assertGetRowDataWithBackendError() throws IOException {\n         ShowCreateTableStatementContext context = mock(ShowCreateTableStatementContext.class);\n         when(context.getTablesContext()).thenReturn(mock(TablesContext.class, RETURNS_DEEP_STUBS));\n         when(context.getTablesContext().getTableNames().iterator().next()).thenReturn(HBaseSupportedSQLStatement.HBASE_DATABASE_TABLE_NAME);\n-        assertThrows(HBaseOperationException.class, () -> new HBaseDescribeResultSet().init(context));\n+        assertThrows(IOException.class, () -> new HBaseDescribeResultSet().init(context));\n     }\n }",
      "parent_sha": "5d50a8d79c00378bdf9fba6852bf1bc7cc27f9e7"
    }
  },
  {
    "oid": "dd43a3dc3625598cb556905b2f6350b704046356",
    "message": "Refactor to use optional. (#12047)\n\n* fix test case error.\r\n\r\n* Refactor getTargetNumericType method to use optional.\r\n\r\n* Fix the logic error.",
    "date": "2021-08-27T07:39:51Z",
    "url": "https://github.com/apache/shardingsphere/commit/dd43a3dc3625598cb556905b2f6350b704046356",
    "details": {
      "sha": "5edef8242715be87356fa2ad35c50455fd1e8259",
      "filename": "shardingsphere-sql-parser/shardingsphere-sql-parser-statement/src/main/java/org/apache/shardingsphere/sql/parser/sql/common/util/SafeNumberOperationUtil.java",
      "status": "modified",
      "additions": 27,
      "deletions": 31,
      "changes": 58,
      "blob_url": "https://github.com/apache/shardingsphere/blob/dd43a3dc3625598cb556905b2f6350b704046356/shardingsphere-sql-parser%2Fshardingsphere-sql-parser-statement%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fsql%2Fparser%2Fsql%2Fcommon%2Futil%2FSafeNumberOperationUtil.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/dd43a3dc3625598cb556905b2f6350b704046356/shardingsphere-sql-parser%2Fshardingsphere-sql-parser-statement%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fsql%2Fparser%2Fsql%2Fcommon%2Futil%2FSafeNumberOperationUtil.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/shardingsphere-sql-parser%2Fshardingsphere-sql-parser-statement%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fsql%2Fparser%2Fsql%2Fcommon%2Futil%2FSafeNumberOperationUtil.java?ref=dd43a3dc3625598cb556905b2f6350b704046356",
      "patch": "@@ -29,6 +29,7 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n@@ -70,11 +71,11 @@ public static Range<Comparable<?>> safeClosed(final Comparable<?> lowerEndpoint,\n         try {\n             return Range.closed(lowerEndpoint, upperEndpoint);\n         } catch (final ClassCastException ex) {\n-            Class<?> clazz = getTargetNumericType(Arrays.asList(lowerEndpoint, upperEndpoint));\n-            if (null == clazz) {\n+            Optional<Class<?>> clazz = getTargetNumericType(Arrays.asList(lowerEndpoint, upperEndpoint));\n+            if (!clazz.isPresent()) {\n                 throw ex;\n             }\n-            return Range.closed(parseNumberByClazz(lowerEndpoint.toString(), clazz), parseNumberByClazz(upperEndpoint.toString(), clazz));\n+            return Range.closed(parseNumberByClazz(lowerEndpoint.toString(), clazz.get()), parseNumberByClazz(upperEndpoint.toString(), clazz.get()));\n         }\n     }\n     \n@@ -91,12 +92,12 @@ public static boolean safeContains(final Range<Comparable<?>> range, final Compa\n         } catch (final ClassCastException ex) {\n             Comparable<?> rangeUpperEndpoint = range.hasUpperBound() ? range.upperEndpoint() : null;\n             Comparable<?> rangeLowerEndpoint = range.hasLowerBound() ? range.lowerEndpoint() : null;\n-            Class<?> clazz = getTargetNumericType(Arrays.asList(rangeLowerEndpoint, rangeUpperEndpoint, endpoint));\n-            if (null == clazz) {\n+            Optional<Class<?>> clazz = getTargetNumericType(Arrays.asList(rangeLowerEndpoint, rangeUpperEndpoint, endpoint));\n+            if (!clazz.isPresent()) {\n                 throw ex;\n             }\n-            Range<Comparable<?>> newRange = createTargetNumericTypeRange(range, clazz);\n-            return newRange.contains(parseNumberByClazz(endpoint.toString(), clazz));\n+            Range<Comparable<?>> newRange = createTargetNumericTypeRange(range, clazz.get());\n+            return newRange.contains(parseNumberByClazz(endpoint.toString(), clazz.get()));\n         }\n     }\n     \n@@ -127,12 +128,12 @@ public static boolean safeRangeEquals(final Range<Comparable<?>> sourceRange, fi\n     public static boolean safeCollectionEquals(final Collection<Comparable<?>> sources, final Collection<Comparable<?>> targetCollection) {\n         List<Comparable<?>> collection = new ArrayList<>(sources);\n         collection.addAll(targetCollection);\n-        Class<?> clazz = getTargetNumericType(collection);\n-        if (null == clazz) {\n+        Optional<Class<?>> clazz = getTargetNumericType(collection);\n+        if (!clazz.isPresent()) {\n             return sources.equals(targetCollection);\n         }\n-        List<Comparable<?>> sourceClazzCollection = sources.stream().map(number -> parseNumberByClazz(number.toString(), clazz)).collect(Collectors.toList());\n-        List<Comparable<?>> targetClazzCollection = targetCollection.stream().map(number -> parseNumberByClazz(number.toString(), clazz)).collect(Collectors.toList());\n+        List<Comparable<?>> sourceClazzCollection = sources.stream().map(number -> parseNumberByClazz(number.toString(), clazz.get())).collect(Collectors.toList());\n+        List<Comparable<?>> targetClazzCollection = targetCollection.stream().map(number -> parseNumberByClazz(number.toString(), clazz.get())).collect(Collectors.toList());\n         return sourceClazzCollection.equals(targetClazzCollection);\n     }\n     \n@@ -141,7 +142,7 @@ private static Class<?> getRangeTargetNumericType(final Range<Comparable<?>> sou\n         Comparable<?> sourceRangeUpperEndpoint = sourceRange.hasUpperBound() ? sourceRange.upperEndpoint() : null;\n         Comparable<?> targetRangeLowerEndpoint = targetRange.hasLowerBound() ? targetRange.lowerEndpoint() : null;\n         Comparable<?> targetRangeUpperEndpoint = targetRange.hasUpperBound() ? targetRange.upperEndpoint() : null;\n-        return getTargetNumericType(Arrays.asList(sourceRangeLowerEndpoint, sourceRangeUpperEndpoint, targetRangeLowerEndpoint, targetRangeUpperEndpoint));\n+        return getTargetNumericType(Arrays.asList(sourceRangeLowerEndpoint, sourceRangeUpperEndpoint, targetRangeLowerEndpoint, targetRangeUpperEndpoint)).orElse(null);\n     }\n     \n     private static Range<Comparable<?>> createTargetNumericTypeRange(final Range<Comparable<?>> range, final Class<?> clazz) {\n@@ -161,28 +162,23 @@ private static Range<Comparable<?>> createTargetNumericTypeRange(final Range<Com\n         return Range.upTo(upperEndpoint, range.upperBoundType());\n     }\n     \n-    private static Class<?> getTargetNumericType(final List<Comparable<?>> endpoints) {\n+    private static Optional<Class<?>> getTargetNumericType(final List<Comparable<?>> endpoints) {\n         Set<Class<?>> clazzSet = endpoints.stream().filter(Objects::nonNull).map(Comparable::getClass).collect(Collectors.toSet());\n+        Class<?> clazz = null;\n         if (clazzSet.contains(BigDecimal.class)) {\n-            return BigDecimal.class;\n-        }\n-        if (clazzSet.contains(Double.class)) {\n-            return Double.class;\n-        }\n-        if (clazzSet.contains(Float.class)) {\n-            return Float.class;\n-        }\n-        if (clazzSet.contains(BigInteger.class)) {\n-            return BigInteger.class;\n-        }\n-        if (clazzSet.contains(Long.class)) {\n-            return Long.class;\n-        }\n-        if (clazzSet.contains(Integer.class)) {\n-            return Integer.class;\n+            clazz = BigDecimal.class;\n+        } else if (clazzSet.contains(Double.class)) {\n+            clazz = Double.class;\n+        } else if (clazzSet.contains(Float.class)) {\n+            clazz = Float.class;\n+        } else if (clazzSet.contains(BigInteger.class)) {\n+            clazz = BigInteger.class;\n+        } else if (clazzSet.contains(Long.class)) {\n+            clazz = Long.class;\n+        } else if (clazzSet.contains(Integer.class)) {\n+            clazz = Integer.class;\n         }\n-        // TODO do not permit return null, please use optional\n-        return null;\n+        return Optional.ofNullable(clazz);\n     }\n     \n     @SneakyThrows(ReflectiveOperationException.class)",
      "parent_sha": "400e9c203f60b515756ca81b4e88ec6cd37228cc"
    }
  },
  {
    "oid": "e7f3a6d5898e7b213b91f3fc44188db49218089f",
    "message": "add getEncryptColumnTokenIndex()",
    "date": "2019-02-13T06:56:40Z",
    "url": "https://github.com/apache/shardingsphere/commit/e7f3a6d5898e7b213b91f3fc44188db49218089f",
    "details": {
      "sha": "4b95bf23fef7ec0f51305f717433239f8f4ad14d",
      "filename": "sharding-core/src/main/java/org/apache/shardingsphere/core/rewrite/SQLRewriteEngine.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/apache/shardingsphere/blob/e7f3a6d5898e7b213b91f3fc44188db49218089f/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngine.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/e7f3a6d5898e7b213b91f3fc44188db49218089f/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngine.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngine.java?ref=e7f3a6d5898e7b213b91f3fc44188db49218089f",
      "patch": "@@ -306,14 +306,18 @@ private Condition getEncryptCondition(final EncryptColumnToken encryptColumnToke\n         if (1 == conditions.size()) {\n             return conditions.iterator().next();\n         }\n+        getEncryptColumnTokenIndex(encryptColumnToken);\n+        \n+    }\n+    \n+    private int getEncryptColumnTokenIndex(final EncryptColumnToken encryptColumnToken) {\n         List<SQLToken> encryptColumnTokens = new ArrayList<>(Collections2.filter(sqlTokens, new Predicate<SQLToken>() {\n             @Override\n             public boolean apply(final SQLToken input) {\n                 return input instanceof EncryptColumnToken && ((EncryptColumnToken) input).getColumn().equals( encryptColumnToken.getColumn());\n             }\n         }));\n-        encryptColumnTokens.indexOf(encryptColumnToken);\n-        \n+       return encryptColumnTokens.indexOf(encryptColumnToken);\n     }\n     \n     private void appendRest(final SQLBuilder sqlBuilder, final int count, final int beginPosition) {",
      "parent_sha": "f740d6292443a3da355bc6ea69cf1f6fe34d8e90"
    }
  },
  {
    "oid": "0d38f865b65febadbf4f73bc0b1ab91810104536",
    "message": "modify to getAvailableDataSourceConfigurations()",
    "date": "2018-10-31T07:48:52Z",
    "url": "https://github.com/apache/shardingsphere/commit/0d38f865b65febadbf4f73bc0b1ab91810104536",
    "details": {
      "sha": "0a8bfa0fa34056e571820ca7628bfb9283b558e5",
      "filename": "sharding-orchestration/sharding-orchestration-core/src/main/java/io/shardingsphere/orchestration/internal/state/datasource/DataSourceService.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/apache/shardingsphere/blob/0d38f865b65febadbf4f73bc0b1ab91810104536/sharding-orchestration%2Fsharding-orchestration-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Forchestration%2Finternal%2Fstate%2Fdatasource%2FDataSourceService.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/0d38f865b65febadbf4f73bc0b1ab91810104536/sharding-orchestration%2Fsharding-orchestration-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Forchestration%2Finternal%2Fstate%2Fdatasource%2FDataSourceService.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-orchestration%2Fsharding-orchestration-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Forchestration%2Finternal%2Fstate%2Fdatasource%2FDataSourceService.java?ref=0d38f865b65febadbf4f73bc0b1ab91810104536",
      "patch": "@@ -21,6 +21,7 @@\n import com.google.common.base.Strings;\n import io.shardingsphere.api.config.MasterSlaveRuleConfiguration;\n import io.shardingsphere.api.config.ShardingRuleConfiguration;\n+import io.shardingsphere.core.config.DataSourceConfiguration;\n import io.shardingsphere.core.constant.ShardingConstant;\n import io.shardingsphere.core.rule.DataSourceParameter;\n import io.shardingsphere.orchestration.internal.config.ConfigurationService;\n@@ -69,8 +70,8 @@ public void persistDataSourcesNode() {\n      * @param shardingSchemaName sharding schema name\n      * @return available data sources\n      */\n-    public Map<String, DataSource> getAvailableDataSources(final String shardingSchemaName) {\n-        Map<String, DataSource> result = configService.loadDataSources(shardingSchemaName);\n+    public Map<String, DataSourceConfiguration> getAvailableDataSourceConfigurations(final String shardingSchemaName) {\n+        Map<String, DataSourceConfiguration> result = configService.loadDataSourceConfigurations(shardingSchemaName);\n         Collection<String> disabledDataSourceNames = getProxyDisabledDataSourceNames().get(shardingSchemaName);\n         if (null == disabledDataSourceNames) {\n             return result;",
      "parent_sha": "c4894141e6a85a0eda88df919675de37767db7a5"
    }
  },
  {
    "oid": "45a592bad19f0010e6ec485df26c587c3c142b3c",
    "message": "addTableShardingValue(final String logicTable, final String shardingColumn, final Comparable<?>... values)",
    "date": "2018-09-21T09:55:11Z",
    "url": "https://github.com/apache/shardingsphere/commit/45a592bad19f0010e6ec485df26c587c3c142b3c",
    "details": {
      "sha": "e124fb236f25f468796a636df34dd83c86e75190",
      "filename": "sharding-core/src/main/java/io/shardingsphere/core/api/HintManager.java",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/apache/shardingsphere/blob/45a592bad19f0010e6ec485df26c587c3c142b3c/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fapi%2FHintManager.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/45a592bad19f0010e6ec485df26c587c3c142b3c/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fapi%2FHintManager.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fapi%2FHintManager.java?ref=45a592bad19f0010e6ec485df26c587c3c142b3c",
      "patch": "@@ -135,10 +135,15 @@ public void addTableShardingValue(final String logicTable, final String sharding\n      *\n      * @param logicTable logic table name\n      * @param shardingColumn sharding column name\n-     * @param operator sharding operator\n-     * @param values sharding value\n+     * @param values sharding values\n      */\n-    public void addTableShardingValue(final String logicTable, final String shardingColumn, final ShardingOperator operator, final Comparable<?>... values) {\n+    public void addTableShardingValue(final String logicTable, final String shardingColumn, final Comparable<?>... values) {\n+        addTableShardingValue(logicTable, shardingColumn, ShardingOperator.IN, values);\n+    }\n+    \n+    \n+    private void addTableShardingValue(final String logicTable, final String shardingColumn, final ShardingOperator operator, final Comparable<?>... values) {\n+        tableShardingValues.put(new ShardingKey(logicTable, shardingColumn), getShardingValue(logicTable, shardingColumn, operator, values));\n     }\n     \n     @SuppressWarnings(\"unchecked\")",
      "parent_sha": "6f914dca9b32e8792bb9b7f0dd34bea95265f623"
    }
  },
  {
    "oid": "aaec37837ae6206865ef72144739ddd66daa0010",
    "message": "\u4fee\u6539\u5305\u89e3\u6790\u9519\u8bef\u95ee\u9898\n\n\u4fee\u6539\u5305\u89e3\u6790\u9519\u8bef\u95ee\u9898",
    "date": "2018-02-26T09:52:39Z",
    "url": "https://github.com/apache/shardingsphere/commit/aaec37837ae6206865ef72144739ddd66daa0010",
    "details": {
      "sha": "c2eab69dd2633a353a4dff692d1cd9fb21760478",
      "filename": "sharding-jdbc-server/src/main/java/io/shardingjdbc/server/codec/MySQLPacketCodec.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/apache/shardingsphere/blob/aaec37837ae6206865ef72144739ddd66daa0010/sharding-jdbc-server%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingjdbc%2Fserver%2Fcodec%2FMySQLPacketCodec.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/aaec37837ae6206865ef72144739ddd66daa0010/sharding-jdbc-server%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingjdbc%2Fserver%2Fcodec%2FMySQLPacketCodec.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc-server%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingjdbc%2Fserver%2Fcodec%2FMySQLPacketCodec.java?ref=aaec37837ae6206865ef72144739ddd66daa0010",
      "patch": "@@ -29,12 +29,15 @@ protected void decode(final ChannelHandlerContext context, final ByteBuf in, fin\n             log.debug(\"Read from client: \\n {}\", ByteBufUtil.prettyHexDump(in));\n         }\n         int payloadLength = in.markReaderIndex().readMediumLE();\n-        if (readableBytes < payloadLength) {\n+        //mysql\u534f\u8bae\u5305\u5934 \u5185\u5bb9\u957f\u5ea63\u5b57\u8282 \u5e8f\u53f71\u5b57\u8282 \u5185\u5bb9n\u5b57\u8282\n+        //readableBytes\u7684\u957f\u5ea6\u4e3a3+1+payloadLength\n+        if (readableBytes - 4 < payloadLength) {\n             in.resetReaderIndex();\n             return;\n         }\n-        if (readableBytes > payloadLength) {\n-            ByteBuf frame = in.readRetainedSlice(payloadLength);\n+        if (readableBytes - 4 > payloadLength) {\n+            //frame\u957f\u5ea6\u4e3a1+payloadLength\n+            ByteBuf frame = in.readRetainedSlice(payloadLength + 1);\n             out.add(frame);\n             return;\n         }",
      "parent_sha": "b3ae22360ac7e2ba091a1a63d79a69a1c5e9aa17"
    }
  },
  {
    "oid": "9024dc365484b0eac3cd5d5dd9627f4912c5c8f7",
    "message": "add parseDataSource()",
    "date": "2019-04-01T07:21:18Z",
    "url": "https://github.com/apache/shardingsphere/commit/9024dc365484b0eac3cd5d5dd9627f4912c5c8f7",
    "details": {
      "sha": "910ecb20792c3c69c67a55cd7291cbd88e92573b",
      "filename": "sharding-spring/sharding-jdbc-spring/sharding-jdbc-spring-namespace/src/main/java/org/apache/shardingsphere/shardingjdbc/spring/namespace/parser/EncryptDataSourceBeanDefinitionParser.java",
      "status": "modified",
      "additions": 10,
      "deletions": 17,
      "changes": 27,
      "blob_url": "https://github.com/apache/shardingsphere/blob/9024dc365484b0eac3cd5d5dd9627f4912c5c8f7/sharding-spring%2Fsharding-jdbc-spring%2Fsharding-jdbc-spring-namespace%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingjdbc%2Fspring%2Fnamespace%2Fparser%2FEncryptDataSourceBeanDefinitionParser.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/9024dc365484b0eac3cd5d5dd9627f4912c5c8f7/sharding-spring%2Fsharding-jdbc-spring%2Fsharding-jdbc-spring-namespace%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingjdbc%2Fspring%2Fnamespace%2Fparser%2FEncryptDataSourceBeanDefinitionParser.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-spring%2Fsharding-jdbc-spring%2Fsharding-jdbc-spring-namespace%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingjdbc%2Fspring%2Fnamespace%2Fparser%2FEncryptDataSourceBeanDefinitionParser.java?ref=9024dc365484b0eac3cd5d5dd9627f4912c5c8f7",
      "patch": "@@ -22,15 +22,15 @@\n import org.apache.shardingsphere.api.config.masterslave.MasterSlaveRuleConfiguration;\n import org.apache.shardingsphere.api.config.sharding.ShardingRuleConfiguration;\n import org.apache.shardingsphere.api.config.sharding.TableRuleConfiguration;\n-import org.apache.shardingsphere.shardingjdbc.spring.datasource.SpringShardingDataSource;\n+import org.apache.shardingsphere.shardingjdbc.spring.datasource.SpringEncryptDataSource;\n+import org.apache.shardingsphere.shardingjdbc.spring.namespace.constants.EncryptDataSourceBeanDefinitionParserTag;\n import org.apache.shardingsphere.shardingjdbc.spring.namespace.constants.MasterSlaveDataSourceBeanDefinitionParserTag;\n import org.apache.shardingsphere.shardingjdbc.spring.namespace.constants.ShardingDataSourceBeanDefinitionParserTag;\n import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.beans.factory.config.RuntimeBeanReference;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n import org.springframework.beans.factory.support.ManagedList;\n-import org.springframework.beans.factory.support.ManagedMap;\n import org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;\n import org.springframework.beans.factory.xml.ParserContext;\n import org.springframework.util.xml.DomUtils;\n@@ -40,38 +40,31 @@\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n-import java.util.Map;\n import java.util.Properties;\n \n /**\n- * Sharding data source parser for spring namespace.\n+ * Encrypt data source parser for spring namespace.\n  * \n- * @author caohao\n  * @author panjuan\n  */\n public final class EncryptDataSourceBeanDefinitionParser extends AbstractBeanDefinitionParser {\n     \n     @Override\n     protected AbstractBeanDefinition parseInternal(final Element element, final ParserContext parserContext) {\n-        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(SpringShardingDataSource.class);\n-        factory.addConstructorArgValue(parseDataSources(element));\n+        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(SpringEncryptDataSource.class);\n+        factory.addConstructorArgValue(parseDataSource(element));\n         factory.addConstructorArgValue(parseShardingRuleConfiguration(element));\n-        factory.addConstructorArgValue(parseProperties(element, parserContext));\n         factory.setDestroyMethodName(\"close\");\n         return factory.getBeanDefinition();\n     }\n     \n-    private Map<String, RuntimeBeanReference> parseDataSources(final Element element) {\n-        Element shardingRuleElement = DomUtils.getChildElementByTagName(element, ShardingDataSourceBeanDefinitionParserTag.SHARDING_RULE_CONFIG_TAG);\n-        List<String> dataSources = Splitter.on(\",\").trimResults().splitToList(shardingRuleElement.getAttribute(ShardingDataSourceBeanDefinitionParserTag.DATA_SOURCE_NAMES_TAG));\n-        Map<String, RuntimeBeanReference> result = new ManagedMap<>(dataSources.size());\n-        for (String each : dataSources) {\n-            result.put(each, new RuntimeBeanReference(each));\n-        }\n-        return result;\n+    private RuntimeBeanReference parseDataSource(final Element element) {\n+        Element shardingRuleElement = DomUtils.getChildElementByTagName(element, EncryptDataSourceBeanDefinitionParserTag.ENCRYPT_RULE_CONFIG_TAG);\n+        String dataSource = shardingRuleElement.getAttribute(EncryptDataSourceBeanDefinitionParserTag.DATA_SOURCE_NAME_TAG);\n+        return new RuntimeBeanReference(dataSource);\n     }\n     \n-    private BeanDefinition parseShardingRuleConfiguration(final Element element) {\n+    private BeanDefinition parseEncryptRuleConfiguration(final Element element) {\n         Element shardingRuleElement = DomUtils.getChildElementByTagName(element, ShardingDataSourceBeanDefinitionParserTag.SHARDING_RULE_CONFIG_TAG);\n         BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(ShardingRuleConfiguration.class);\n         parseDefaultDataSource(factory, shardingRuleElement);",
      "parent_sha": "994ca783d9be2970f6701913924416443ae97bf6"
    }
  },
  {
    "oid": "9556e9bfa7649126f899592e659c6b3e324ef6e6",
    "message": "use optional\nfor checkstyle",
    "date": "2018-11-15T01:41:26Z",
    "url": "https://github.com/apache/shardingsphere/commit/9556e9bfa7649126f899592e659c6b3e324ef6e6",
    "details": {
      "sha": "406580f09e26ccd213b1b883b8465b4a7c596b07",
      "filename": "sharding-core/src/main/java/io/shardingsphere/core/parsing/antlr/extractor/statement/handler/AddPrimaryKeyExtractHandler.java",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/apache/shardingsphere/blob/9556e9bfa7649126f899592e659c6b3e324ef6e6/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fparsing%2Fantlr%2Fextractor%2Fstatement%2Fhandler%2FAddPrimaryKeyExtractHandler.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/9556e9bfa7649126f899592e659c6b3e324ef6e6/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fparsing%2Fantlr%2Fextractor%2Fstatement%2Fhandler%2FAddPrimaryKeyExtractHandler.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fparsing%2Fantlr%2Fextractor%2Fstatement%2Fhandler%2FAddPrimaryKeyExtractHandler.java?ref=9556e9bfa7649126f899592e659c6b3e324ef6e6",
      "patch": "@@ -35,27 +35,27 @@\n  */\n @RequiredArgsConstructor\n public final class AddPrimaryKeyExtractHandler implements ASTExtractHandler {\n-\n+    \n     private final RuleName ruleName;\n-\n+    \n     @Override\n-    public ExtractResult extract(final ParserRuleContext ancestorNode) {\n+    public Optional<ExtractResult> extract(final ParserRuleContext ancestorNode) {\n         Optional<ParserRuleContext> modifyColumnNode = ASTUtils.findFirstChildNode(ancestorNode, ruleName);\n         if (!modifyColumnNode.isPresent()) {\n-            return null;\n+            return Optional.absent();\n         }\n         Optional<ParserRuleContext> primaryKeyNode = ASTUtils.findFirstChildNode(modifyColumnNode.get(), RuleName.PRIMARY_KEY);\n         if (!primaryKeyNode.isPresent()) {\n-            return null;\n+            return Optional.absent();\n         }\n-        Collection<ParserRuleContext> result = ASTUtils.getAllDescendantNodes(modifyColumnNode.get(), RuleName.COLUMN_NAME);\n-        if (null == result) {\n-            return null;\n+        Collection<ParserRuleContext> columnNameNodes = ASTUtils.getAllDescendantNodes(modifyColumnNode.get(), RuleName.COLUMN_NAME);\n+        if (null == columnNameNodes) {\n+            return Optional.absent();\n         }\n-        PrimaryKeyExtractResult extractResult = new PrimaryKeyExtractResult();\n-        for (ParserRuleContext each : result) {\n-            extractResult.getPrimaryKeyColumnNames().add(each.getText());\n+        PrimaryKeyExtractResult result = new PrimaryKeyExtractResult();\n+        for (ParserRuleContext each : columnNameNodes) {\n+            result.getPrimaryKeyColumnNames().add(each.getText());\n         }\n-        return extractResult;\n+        return Optional.<ExtractResult>of(result);\n     }\n }",
      "parent_sha": "debb143f8d61c7b1c47a3a232a0fda0c5f680816"
    }
  },
  {
    "oid": "ca2e33af814eddb8f0f9d42dba2d5d485fd0f02b",
    "message": "#6527, parameters for transparent mode (#6545)\n\n* #6527, parameters for transparent mode\r\n\r\n* #6527, refine",
    "date": "2020-07-31T05:33:30Z",
    "url": "https://github.com/apache/shardingsphere/commit/ca2e33af814eddb8f0f9d42dba2d5d485fd0f02b",
    "details": {
      "sha": "82e9ab9d60ac64e318e873c00b26f1500c648887",
      "filename": "shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/wrapper/PreparedStatementExecutorWrapper.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/apache/shardingsphere/blob/ca2e33af814eddb8f0f9d42dba2d5d485fd0f02b/shardingsphere-proxy%2Fshardingsphere-proxy-backend%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fproxy%2Fbackend%2Fcommunication%2Fjdbc%2Fwrapper%2FPreparedStatementExecutorWrapper.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/ca2e33af814eddb8f0f9d42dba2d5d485fd0f02b/shardingsphere-proxy%2Fshardingsphere-proxy-backend%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fproxy%2Fbackend%2Fcommunication%2Fjdbc%2Fwrapper%2FPreparedStatementExecutorWrapper.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/shardingsphere-proxy%2Fshardingsphere-proxy-backend%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fproxy%2Fbackend%2Fcommunication%2Fjdbc%2Fwrapper%2FPreparedStatementExecutorWrapper.java?ref=ca2e33af814eddb8f0f9d42dba2d5d485fd0f02b",
      "patch": "@@ -43,7 +43,6 @@\n import java.sql.Statement;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n \n /**\n@@ -66,7 +65,7 @@ public ExecutionContext execute(final String sql) {\n         Collection<ShardingSphereRule> rules = schema.getSchema().getRules();\n         if (rules.isEmpty()) {\n             return new ExecutionContext(\n-                    new CommonSQLStatementContext(sqlStatement), new ExecutionUnit(schema.getSchema().getDataSources().keySet().iterator().next(), new SQLUnit(sql, Collections.emptyList())));\n+                    new CommonSQLStatementContext(sqlStatement), new ExecutionUnit(schema.getSchema().getDataSources().keySet().iterator().next(), new SQLUnit(sql, parameters)));\n         }\n         RouteContext routeContext = new DataNodeRouter(schema.getSchema().getMetaData(), PROXY_SCHEMA_CONTEXTS.getSchemaContexts().getProps(), rules).route(sqlStatement, sql, parameters);\n         routeMetricsCollect(routeContext, rules);",
      "parent_sha": "fe9734dad48b92b6acfcc92c6c9adebee76a62b9"
    }
  },
  {
    "oid": "7cd23579846907073b6658ba0a3d3934997a77f7",
    "message": "add new Properties().",
    "date": "2018-07-18T10:02:38Z",
    "url": "https://github.com/apache/shardingsphere/commit/7cd23579846907073b6658ba0a3d3934997a77f7",
    "details": {
      "sha": "42134594586932fbf44572781b36c27140b3f40d",
      "filename": "sharding-core/src/main/java/io/shardingsphere/core/yaml/sharding/YamlShardingRuleConfiguration.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/shardingsphere/blob/7cd23579846907073b6658ba0a3d3934997a77f7/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fyaml%2Fsharding%2FYamlShardingRuleConfiguration.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/7cd23579846907073b6658ba0a3d3934997a77f7/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fyaml%2Fsharding%2FYamlShardingRuleConfiguration.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fyaml%2Fsharding%2FYamlShardingRuleConfiguration.java?ref=7cd23579846907073b6658ba0a3d3934997a77f7",
      "patch": "@@ -77,7 +77,7 @@ public YamlShardingRuleConfiguration(final ShardingRuleConfiguration shardingRul\n         defaultKeyGeneratorClassName = null == shardingRuleConfiguration.getDefaultKeyGenerator()\n                 ? null : shardingRuleConfiguration.getDefaultKeyGenerator().getClass().getName();\n         for (MasterSlaveRuleConfiguration each : shardingRuleConfiguration.getMasterSlaveRuleConfigs()) {\n-            masterSlaveRules.put(each.getName(), new YamlMasterSlaveRuleConfiguration(each, new HashMap<String, Object>()));\n+            masterSlaveRules.put(each.getName(), new YamlMasterSlaveRuleConfiguration(each, new HashMap<String, Object>(), new Properties()));\n         }\n         this.configMap = configMap;\n         this.props = props;",
      "parent_sha": "e5d9763baa7d4a685029521d885c7eeb0369f38d"
    }
  },
  {
    "oid": "188fd34118b52bd5018003dc7a8a020e867f5f43",
    "message": "#1172, for comment: refine root invoke event mechanism",
    "date": "2018-09-13T10:54:10Z",
    "url": "https://github.com/apache/shardingsphere/commit/188fd34118b52bd5018003dc7a8a020e867f5f43",
    "details": {
      "sha": "f6d0fe798b42bbdb8b8231dda096f32ba41aaf6a",
      "filename": "sharding-jdbc/src/main/java/io/shardingsphere/core/jdbc/adapter/AbstractConnectionAdapter.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/apache/shardingsphere/blob/188fd34118b52bd5018003dc7a8a020e867f5f43/sharding-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fjdbc%2Fadapter%2FAbstractConnectionAdapter.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/188fd34118b52bd5018003dc7a8a020e867f5f43/sharding-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fjdbc%2Fadapter%2FAbstractConnectionAdapter.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fjdbc%2Fadapter%2FAbstractConnectionAdapter.java?ref=188fd34118b52bd5018003dc7a8a020e867f5f43",
      "patch": "@@ -28,6 +28,8 @@\n import io.shardingsphere.core.event.connection.GetConnectionFinishEvent;\n import io.shardingsphere.core.event.connection.GetConnectionStartEvent;\n import io.shardingsphere.core.event.root.RootInvokeEvent;\n+import io.shardingsphere.core.event.root.RootInvokeFinishEvent;\n+import io.shardingsphere.core.event.root.RootInvokeStartEvent;\n import io.shardingsphere.core.event.transaction.xa.XATransactionEvent;\n import io.shardingsphere.core.hint.HintManagerHolder;\n import io.shardingsphere.core.jdbc.adapter.executor.ForceExecuteCallback;\n@@ -66,9 +68,6 @@ public abstract class AbstractConnectionAdapter extends AbstractUnsupportedOpera\n     \n     private final ForceExecuteTemplate<Map.Entry<String, Connection>> forceExecuteTemplateForClose = new ForceExecuteTemplate<>();\n     \n-    @Getter\n-    private final RootInvokeEvent rootInvokeEvent = new RootInvokeEvent(true);\n-    \n     /**\n      * Get database connection.\n      *\n@@ -193,8 +192,9 @@ public void execute(final Map.Entry<String, Connection> cachedConnectionsEntrySe\n                 }\n             }\n         });\n-        rootInvokeEvent.setExecuteSuccess();\n-        ShardingEventBusInstance.getInstance().post(rootInvokeEvent);\n+        RootInvokeEvent finishEvent = new RootInvokeFinishEvent();\n+        finishEvent.setExecuteSuccess();\n+        ShardingEventBusInstance.getInstance().post(finishEvent);\n     }\n     \n     @Override",
      "parent_sha": "791919e3f0473f384f045c643bf8d843c957eb82"
    }
  },
  {
    "oid": "6228aa159dedb0c7466cc4dc6b661c09252a6c83",
    "message": "calculate GroupBySegment",
    "date": "2019-01-25T09:58:36Z",
    "url": "https://github.com/apache/shardingsphere/commit/6228aa159dedb0c7466cc4dc6b661c09252a6c83",
    "details": {
      "sha": "58517d7a2e2b6f9cdd1231aa5961c94959d350f0",
      "filename": "sharding-core/src/main/java/org/apache/shardingsphere/core/parsing/antlr/extractor/impl/dql/GroupByExtractor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/shardingsphere/blob/6228aa159dedb0c7466cc4dc6b661c09252a6c83/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Fparsing%2Fantlr%2Fextractor%2Fimpl%2Fdql%2FGroupByExtractor.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/6228aa159dedb0c7466cc4dc6b661c09252a6c83/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Fparsing%2Fantlr%2Fextractor%2Fimpl%2Fdql%2FGroupByExtractor.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Fparsing%2Fantlr%2Fextractor%2Fimpl%2Fdql%2FGroupByExtractor.java?ref=6228aa159dedb0c7466cc4dc6b661c09252a6c83",
      "patch": "@@ -39,7 +39,7 @@ public Optional<GroupBySegment> extract(final ParserRuleContext ancestorNode) {\n         if (!groupByNode.isPresent()) {\n             return Optional.absent();\n         }\n-        GroupBySegment result = new GroupBySegment(groupByNode.get().getStop().getStopIndex() + 1);\n+        GroupBySegment result = new GroupBySegment(groupByNode.get().getStop().getStopIndex());\n         result.getGroupByItems().addAll(orderByItemExtractor.extract(groupByNode.get()));\n         return Optional.of(result);\n     }",
      "parent_sha": "9ab44e6d9aca4cfdc3f5d844833b6cca3409038b"
    }
  },
  {
    "oid": "700f4db34645a15742c1a427d2802ab8b08ee87a",
    "message": "modify cases for OffsetToken",
    "date": "2019-04-30T04:26:27Z",
    "url": "https://github.com/apache/shardingsphere/commit/700f4db34645a15742c1a427d2802ab8b08ee87a",
    "details": {
      "sha": "62fefcab5ef675e49c115ec6b3f843aef19c1ea5",
      "filename": "sharding-core/sharding-core-rewrite/src/test/java/org/apache/shardingsphere/core/rewrite/SQLRewriteEngineTest.java",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/apache/shardingsphere/blob/700f4db34645a15742c1a427d2802ab8b08ee87a/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngineTest.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/700f4db34645a15742c1a427d2802ab8b08ee87a/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngineTest.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngineTest.java?ref=700f4db34645a15742c1a427d2802ab8b08ee87a",
      "patch": "@@ -284,7 +284,7 @@ public void assertRewriteForLimit() {\n         selectStatement.getLimit().setOffset(new LimitValue(2, -1, true));\n         selectStatement.getLimit().setRowCount(new LimitValue(2, -1, false));\n         selectStatement.addSQLToken(new TableToken(17, \"table_x\", QuoteCharacter.NONE, 0));\n-        selectStatement.addSQLToken(new OffsetToken(33, 2));\n+        selectStatement.addSQLToken(new OffsetToken(33, 36, 2));\n         selectStatement.addSQLToken(new RowCountToken(36, 2));\n         routeResult = new SQLRouteResult(selectStatement);\n         routeResult.setLimit(selectStatement.getLimit());\n@@ -298,7 +298,7 @@ public void assertRewriteForRowNum() {\n         selectStatement.getLimit().setOffset(new LimitValue(2, -1, true));\n         selectStatement.getLimit().setRowCount(new LimitValue(4, -1, false));\n         selectStatement.addSQLToken(new TableToken(68, \"table_x\", QuoteCharacter.NONE, 0));\n-        selectStatement.addSQLToken(new OffsetToken(119, 2));\n+        selectStatement.addSQLToken(new OffsetToken(119, 119, 2));\n         selectStatement.addSQLToken(new RowCountToken(98, 4));\n         routeResult = new SQLRouteResult(selectStatement);\n         routeResult.setLimit(selectStatement.getLimit());\n@@ -314,7 +314,7 @@ public void assertRewriteForTopAndRowNumber() {\n         selectStatement.getLimit().setOffset(new LimitValue(2, -1, true));\n         selectStatement.getLimit().setRowCount(new LimitValue(4, -1, false));\n         selectStatement.addSQLToken(new TableToken(85, \"table_x\", QuoteCharacter.NONE, 0));\n-        selectStatement.addSQLToken(new OffsetToken(123, 2));\n+        selectStatement.addSQLToken(new OffsetToken(123, 123, 2));\n         selectStatement.addSQLToken(new RowCountToken(26, 4));\n         routeResult = new SQLRouteResult(selectStatement);\n         routeResult.setLimit(selectStatement.getLimit());\n@@ -333,7 +333,7 @@ public void assertRewriteForLimitForMemoryGroupBy() {\n         selectStatement.getOrderByItems().add(new OrderItem(\"x\", \"id\", OrderDirection.ASC, OrderDirection.ASC));\n         selectStatement.getGroupByItems().add(new OrderItem(\"x\", \"id\", OrderDirection.DESC, OrderDirection.ASC));\n         selectStatement.addSQLToken(new TableToken(17, \"table_x\", QuoteCharacter.NONE, 0));\n-        selectStatement.addSQLToken(new OffsetToken(33, 2));\n+        selectStatement.addSQLToken(new OffsetToken(33, 36, 2));\n         selectStatement.addSQLToken(new RowCountToken(36, 2));\n         routeResult = new SQLRouteResult(selectStatement);\n         routeResult.setLimit(selectStatement.getLimit());\n@@ -347,7 +347,7 @@ public void assertRewriteForRowNumForMemoryGroupBy() {\n         selectStatement.getLimit().setOffset(new LimitValue(2, -1, true));\n         selectStatement.getLimit().setRowCount(new LimitValue(4, -1, false));\n         selectStatement.addSQLToken(new TableToken(68, \"table_x\", QuoteCharacter.NONE, 0));\n-        selectStatement.addSQLToken(new OffsetToken(119, 2));\n+        selectStatement.addSQLToken(new OffsetToken(119, 119, 2));\n         selectStatement.addSQLToken(new RowCountToken(98, 4));\n         selectStatement.getOrderByItems().add(new OrderItem(\"x\", \"id\", OrderDirection.ASC, OrderDirection.ASC));\n         selectStatement.getGroupByItems().add(new OrderItem(\"x\", \"id\", OrderDirection.DESC, OrderDirection.ASC));\n@@ -365,7 +365,7 @@ public void assertRewriteForTopAndRowNumberForMemoryGroupBy() {\n         selectStatement.getLimit().setOffset(new LimitValue(2, -1, true));\n         selectStatement.getLimit().setRowCount(new LimitValue(4, -1, false));\n         selectStatement.addSQLToken(new TableToken(85, \"table_x\", QuoteCharacter.NONE, 0));\n-        selectStatement.addSQLToken(new OffsetToken(123, 2));\n+        selectStatement.addSQLToken(new OffsetToken(123, 123, 2));\n         selectStatement.addSQLToken(new RowCountToken(26, 4));\n         selectStatement.getOrderByItems().add(new OrderItem(\"x\", \"id\", OrderDirection.ASC, OrderDirection.ASC));\n         selectStatement.getGroupByItems().add(new OrderItem(\"x\", \"id\", OrderDirection.DESC, OrderDirection.ASC));\n@@ -384,7 +384,7 @@ public void assertRewriteForLimitForNotRewriteLimit() {\n         selectStatement.getLimit().setOffset(new LimitValue(2, -1, true));\n         selectStatement.getLimit().setRowCount(new LimitValue(2, -1, false));\n         selectStatement.addSQLToken(new TableToken(17, \"table_x\", QuoteCharacter.NONE, 0));\n-        selectStatement.addSQLToken(new OffsetToken(33, 2));\n+        selectStatement.addSQLToken(new OffsetToken(33, 36, 2));\n         selectStatement.addSQLToken(new RowCountToken(36, 2));\n         routeResult = new SQLRouteResult(selectStatement);\n         routeResult.setLimit(selectStatement.getLimit());\n@@ -398,7 +398,7 @@ public void assertRewriteForRowNumForNotRewriteLimit() {\n         selectStatement.getLimit().setOffset(new LimitValue(2, -1, true));\n         selectStatement.getLimit().setRowCount(new LimitValue(4, -1, false));\n         selectStatement.addSQLToken(new TableToken(68, \"table_x\", QuoteCharacter.NONE, 0));\n-        selectStatement.addSQLToken(new OffsetToken(119, 2));\n+        selectStatement.addSQLToken(new OffsetToken(119, 119, 2));\n         selectStatement.addSQLToken(new RowCountToken(98, 4));\n         routeResult = new SQLRouteResult(selectStatement);\n         routeResult.setLimit(selectStatement.getLimit());\n@@ -414,7 +414,7 @@ public void assertRewriteForTopAndRowNumberForNotRewriteLimit() {\n         selectStatement.getLimit().setOffset(new LimitValue(2, -1, true));\n         selectStatement.getLimit().setRowCount(new LimitValue(4, -1, false));\n         selectStatement.addSQLToken(new TableToken(85, \"table_x\", QuoteCharacter.NONE, 0));\n-        selectStatement.addSQLToken(new OffsetToken(123, 2));\n+        selectStatement.addSQLToken(new OffsetToken(123, 123, 2));\n         selectStatement.addSQLToken(new RowCountToken(26, 4));\n         routeResult = new SQLRouteResult(selectStatement);\n         routeResult.setLimit(selectStatement.getLimit());",
      "parent_sha": "3117b3d453cdd8d7a2b75823469ced4d3c0f5d4b"
    }
  },
  {
    "oid": "ed5b553faf65a85f7ef98779c31599e3e90887f9",
    "message": "Revise javadoc (#21941)",
    "date": "2022-11-04T01:27:59Z",
    "url": "https://github.com/apache/shardingsphere/commit/ed5b553faf65a85f7ef98779c31599e3e90887f9",
    "details": {
      "sha": "82dc68c2917bc0b1cebb558baf5a1a2eb0fdf40b",
      "filename": "mode/type/cluster/repository/api/src/main/java/org/apache/shardingsphere/mode/repository/cluster/lock/creator/DistributedLockCreatorFactory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/shardingsphere/blob/ed5b553faf65a85f7ef98779c31599e3e90887f9/mode%2Ftype%2Fcluster%2Frepository%2Fapi%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fmode%2Frepository%2Fcluster%2Flock%2Fcreator%2FDistributedLockCreatorFactory.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/ed5b553faf65a85f7ef98779c31599e3e90887f9/mode%2Ftype%2Fcluster%2Frepository%2Fapi%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fmode%2Frepository%2Fcluster%2Flock%2Fcreator%2FDistributedLockCreatorFactory.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/mode%2Ftype%2Fcluster%2Frepository%2Fapi%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fmode%2Frepository%2Fcluster%2Flock%2Fcreator%2FDistributedLockCreatorFactory.java?ref=ed5b553faf65a85f7ef98779c31599e3e90887f9",
      "patch": "@@ -33,7 +33,7 @@ public final class DistributedLockCreatorFactory {\n     }\n     \n     /**\n-     * Get  distributed lock.\n+     * Get distributed lock.\n      * \n      * @param type type\n      * @return distributed lock",
      "parent_sha": "baa5c75c66386df93ea9eb36b043f9cbf2084f0c"
    }
  },
  {
    "oid": "c87e3d9f61b2c5d7cc4f9f023fb241e70b0d65fb",
    "message": "Remove useless getTrunkDataBaseType method in SQLParserRule (#31062)",
    "date": "2024-04-29T23:49:35Z",
    "url": "https://github.com/apache/shardingsphere/commit/c87e3d9f61b2c5d7cc4f9f023fb241e70b0d65fb",
    "details": {
      "sha": "8a25390cd0e31ba95729e1c43102389ad0f4ae31",
      "filename": "kernel/sql-parser/core/src/main/java/org/apache/shardingsphere/parser/rule/SQLParserRule.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/shardingsphere/blob/c87e3d9f61b2c5d7cc4f9f023fb241e70b0d65fb/kernel%2Fsql-parser%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fparser%2Frule%2FSQLParserRule.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/c87e3d9f61b2c5d7cc4f9f023fb241e70b0d65fb/kernel%2Fsql-parser%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fparser%2Frule%2FSQLParserRule.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/kernel%2Fsql-parser%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fparser%2Frule%2FSQLParserRule.java?ref=c87e3d9f61b2c5d7cc4f9f023fb241e70b0d65fb",
      "patch": "@@ -22,8 +22,8 @@\n import org.apache.shardingsphere.infra.parser.SQLParserEngine;\n import org.apache.shardingsphere.infra.parser.ShardingSphereSQLParserEngine;\n import org.apache.shardingsphere.infra.parser.SimpleSQLParserEngine;\n-import org.apache.shardingsphere.infra.rule.scope.GlobalRule;\n import org.apache.shardingsphere.infra.rule.attribute.RuleAttributes;\n+import org.apache.shardingsphere.infra.rule.scope.GlobalRule;\n import org.apache.shardingsphere.parser.config.SQLParserRuleConfiguration;\n import org.apache.shardingsphere.sql.parser.api.CacheOption;\n \n@@ -56,7 +56,7 @@ public SQLParserRule(final SQLParserRuleConfiguration ruleConfig) {\n      */\n     public SQLParserEngine getSQLParserEngine(final DatabaseType databaseType) {\n         return \"Standard\".equals(engineType)\n-                ? new ShardingSphereSQLParserEngine(databaseType.getTrunkDatabaseType().orElse(databaseType), sqlStatementCache, parseTreeCache)\n+                ? new ShardingSphereSQLParserEngine(databaseType, sqlStatementCache, parseTreeCache)\n                 : new SimpleSQLParserEngine();\n     }\n     ",
      "parent_sha": "252c0f7170a261c7b66a955a0f7110460b31631e"
    }
  },
  {
    "oid": "a89cff81a24a2c8ca66b3d73fcb2d3ceac7d9b28",
    "message": "refactor update retry method to void",
    "date": "2017-11-25T15:11:02Z",
    "url": "https://github.com/apache/shardingsphere/commit/a89cff81a24a2c8ca66b3d73fcb2d3ceac7d9b28",
    "details": {
      "sha": "8c6d9b675a895fdd3482564f400c833b4397367a",
      "filename": "sharding-jdbc-orchestration/src/main/java/io/shardingjdbc/orchestration/reg/etcd/EtcdRegistryCenter.java",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/apache/shardingsphere/blob/a89cff81a24a2c8ca66b3d73fcb2d3ceac7d9b28/sharding-jdbc-orchestration%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingjdbc%2Forchestration%2Freg%2Fetcd%2FEtcdRegistryCenter.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/a89cff81a24a2c8ca66b3d73fcb2d3ceac7d9b28/sharding-jdbc-orchestration%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingjdbc%2Forchestration%2Freg%2Fetcd%2FEtcdRegistryCenter.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc-orchestration%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingjdbc%2Forchestration%2Freg%2Fetcd%2FEtcdRegistryCenter.java?ref=a89cff81a24a2c8ca66b3d73fcb2d3ceac7d9b28",
      "patch": "@@ -85,11 +85,12 @@ public boolean isExisted(final String key) {\n     @Override\n     public void persist(final String key, final String value) {\n         final PutRequest request = PutRequest.newBuilder().setPrevKv(true).setKey(ByteString.copyFromUtf8(getFullPathWithNamespace(key))).setValue(ByteString.copyFromUtf8(value)).build();\n-        etcdRetryEngine.execute(new Callable<String>() {\n+        etcdRetryEngine.execute(new Callable<Void>() {\n             \n             @Override\n-            public String call() throws Exception {\n-                return kvStub.put(request).get(etcdConfig.getTimeoutMilliseconds(), TimeUnit.MILLISECONDS).getPrevKv().getValue().toStringUtf8();\n+            public Void call() throws Exception {\n+                kvStub.put(request).get(etcdConfig.getTimeoutMilliseconds(), TimeUnit.MILLISECONDS);\n+                return null;\n             }\n         });\n     }\n@@ -112,11 +113,12 @@ public void persistEphemeral(final String key, final String value) {\n             throw new RegException(\"Unable to set up heat beat for key %s\", fullPath);\n         }\n         final PutRequest request = PutRequest.newBuilder().setPrevKv(true).setLease(leaseId.get()).setKey(ByteString.copyFromUtf8(fullPath)).setValue(ByteString.copyFromUtf8(value)).build();\n-        etcdRetryEngine.execute(new Callable<String>() {\n+        etcdRetryEngine.execute(new Callable<Void>() {\n             \n             @Override\n-            public String call() throws Exception {\n-                return kvStub.put(request).get(etcdConfig.getTimeoutMilliseconds(), TimeUnit.MILLISECONDS).getPrevKv().getValue().toStringUtf8();\n+            public Void call() throws Exception {\n+                kvStub.put(request).get(etcdConfig.getTimeoutMilliseconds(), TimeUnit.MILLISECONDS);\n+                return null;\n             }\n         });\n     }",
      "parent_sha": "3ed9d5e9336adecbbade150e2bfde6fea8421c99"
    }
  },
  {
    "oid": "e664932135d942ba8c0fff7724300833bf11114d",
    "message": "#1363 Add XATransactionDataSourceWrapper.registerRecoveryResource()",
    "date": "2018-11-07T06:36:55Z",
    "url": "https://github.com/apache/shardingsphere/commit/e664932135d942ba8c0fff7724300833bf11114d",
    "details": {
      "sha": "068707b4161b03b3fe970cb9e23c661713012533",
      "filename": "sharding-transaction/sharding-transaction-xa/src/main/java/io/shardingsphere/transaction/xa/manager/XATransactionDataSourceWrapper.java",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/apache/shardingsphere/blob/e664932135d942ba8c0fff7724300833bf11114d/sharding-transaction%2Fsharding-transaction-xa%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Ftransaction%2Fxa%2Fmanager%2FXATransactionDataSourceWrapper.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/e664932135d942ba8c0fff7724300833bf11114d/sharding-transaction%2Fsharding-transaction-xa%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Ftransaction%2Fxa%2Fmanager%2FXATransactionDataSourceWrapper.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-transaction%2Fsharding-transaction-xa%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Ftransaction%2Fxa%2Fmanager%2FXATransactionDataSourceWrapper.java?ref=e664932135d942ba8c0fff7724300833bf11114d",
      "patch": "@@ -19,6 +19,8 @@\n \n import com.atomikos.beans.PropertyException;\n import com.atomikos.beans.PropertyUtils;\n+import com.atomikos.datasource.xa.jdbc.JdbcTransactionalResource;\n+import com.atomikos.icatch.config.Configuration;\n import com.atomikos.jdbc.AtomikosDataSourceBean;\n import io.shardingsphere.core.rule.DataSourceParameter;\n import io.shardingsphere.transaction.xa.convert.dialect.XADatabaseType;\n@@ -37,7 +39,7 @@\n  * @author zhaojun\n  */\n @RequiredArgsConstructor\n-public final class XATransactionDataSourceWrapper {\n+final class XATransactionDataSourceWrapper {\n     \n     private final TransactionManager transactionManager;\n     \n@@ -50,7 +52,7 @@ public final class XATransactionDataSourceWrapper {\n      * @return transactional datasource pool\n      * @throws PropertyException property exception\n      */\n-    public DataSource wrap(final XADataSource xaDataSource, final String dataSourceName, final DataSourceParameter dataSourceParameter) throws PropertyException {\n+    DataSource wrap(final XADataSource xaDataSource, final String dataSourceName, final DataSourceParameter dataSourceParameter) throws PropertyException {\n         switch (dataSourceParameter.getProxyDatasourceType()) {\n             case TOMCAT_DBCP2:\n                 return createBasicManagedDataSource(xaDataSource, dataSourceParameter);\n@@ -73,6 +75,11 @@ private BasicManagedDataSource createBasicManagedDataSource(final XADataSource x\n         return result;\n     }\n     \n+    private void registerRecoveryResource(final String dataSourceName, final XADataSource xaDataSource) {\n+        JdbcTransactionalResource transactionalResource = new JdbcTransactionalResource(dataSourceName, xaDataSource);\n+        Configuration.addResource(transactionalResource);\n+    }\n+    \n     private AtomikosDataSourceBean createAtomikosDatasourceBean(final XADataSource xaDataSource, final String dataSourceName, final DataSourceParameter parameter) throws PropertyException {\n         AtomikosDataSourceBean result = new AtomikosDataSourceBean();\n         result.setUniqueResourceName(dataSourceName);",
      "parent_sha": "e3a0060ac71ebaed0da9df31496beae74c7b56f4"
    }
  },
  {
    "oid": "250aa7bf8d2f41a34e31cebbc106c09d01c658f2",
    "message": "Avoid ConcurrentHashMap Recursive update (#24416)",
    "date": "2023-03-02T08:03:26Z",
    "url": "https://github.com/apache/shardingsphere/commit/250aa7bf8d2f41a34e31cebbc106c09d01c658f2",
    "details": {
      "sha": "4cd17e3e9fdc850a99b816f9715169b3924ea858",
      "filename": "proxy/backend/core/src/main/java/org/apache/shardingsphere/proxy/backend/handler/admin/executor/DefaultSessionVariableHandler.java",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/apache/shardingsphere/blob/250aa7bf8d2f41a34e31cebbc106c09d01c658f2/proxy%2Fbackend%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fproxy%2Fbackend%2Fhandler%2Fadmin%2Fexecutor%2FDefaultSessionVariableHandler.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/250aa7bf8d2f41a34e31cebbc106c09d01c658f2/proxy%2Fbackend%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fproxy%2Fbackend%2Fhandler%2Fadmin%2Fexecutor%2FDefaultSessionVariableHandler.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/proxy%2Fbackend%2Fcore%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fproxy%2Fbackend%2Fhandler%2Fadmin%2Fexecutor%2FDefaultSessionVariableHandler.java?ref=250aa7bf8d2f41a34e31cebbc106c09d01c658f2",
      "patch": "@@ -17,28 +17,27 @@\n \n package org.apache.shardingsphere.proxy.backend.handler.admin.executor;\n \n+import lombok.AccessLevel;\n+import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.shardingsphere.infra.util.spi.type.typed.TypedSPILoader;\n import org.apache.shardingsphere.proxy.backend.session.ConnectionSession;\n \n-import java.util.Collection;\n import java.util.Collections;\n \n /**\n  * Default session variable handler.\n  */\n @Slf4j\n+@RequiredArgsConstructor(access = AccessLevel.PROTECTED)\n public abstract class DefaultSessionVariableHandler implements SessionVariableHandler {\n     \n-    private final Collection<String> replayedSessionVariables;\n-    \n-    protected DefaultSessionVariableHandler(final String databaseType) {\n-        replayedSessionVariables = TypedSPILoader.findService(ReplayedSessionVariablesProvider.class, databaseType).map(ReplayedSessionVariablesProvider::getVariables).orElse(Collections.emptySet());\n-    }\n+    private final String databaseType;\n     \n     @Override\n     public final void handle(final ConnectionSession connectionSession, final String variableName, final String assignValue) {\n-        if (replayedSessionVariables.contains(variableName)) {\n+        if (TypedSPILoader.findService(ReplayedSessionVariablesProvider.class, databaseType).map(ReplayedSessionVariablesProvider::getVariables).orElseGet(Collections::emptySet)\n+                .contains(variableName)) {\n             connectionSession.getRequiredSessionVariableRecorder().setVariable(variableName, assignValue);\n         } else {\n             log.debug(\"Set statement {} = {} was discarded.\", variableName, assignValue);",
      "parent_sha": "ffeb4206a1a1d41e12fcbff9af91da25d93a8878"
    }
  },
  {
    "oid": "5d9c01944780fbdffd5ba042e48463ad659d7d60",
    "message": "#1172, fix test case",
    "date": "2018-09-13T13:23:12Z",
    "url": "https://github.com/apache/shardingsphere/commit/5d9c01944780fbdffd5ba042e48463ad659d7d60",
    "details": {
      "sha": "3ffb1427ad7be78eaa117a3e8c6cc7c95705dbda",
      "filename": "sharding-opentracing/src/main/java/io/shardingsphere/opentracing/listener/SQLExecuteEventListener.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/apache/shardingsphere/blob/5d9c01944780fbdffd5ba042e48463ad659d7d60/sharding-opentracing%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fopentracing%2Flistener%2FSQLExecuteEventListener.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/5d9c01944780fbdffd5ba042e48463ad659d7d60/sharding-opentracing%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fopentracing%2Flistener%2FSQLExecuteEventListener.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-opentracing%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fopentracing%2Flistener%2FSQLExecuteEventListener.java?ref=5d9c01944780fbdffd5ba042e48463ad659d7d60",
      "patch": "@@ -24,7 +24,6 @@\n import io.opentracing.Span;\n import io.opentracing.tag.Tags;\n import io.shardingsphere.core.event.executor.SQLExecutionEvent;\n-import io.shardingsphere.core.event.executor.SQLExecutionStartEvent;\n import io.shardingsphere.core.executor.sql.execute.threadlocal.ExecutorDataMap;\n import io.shardingsphere.opentracing.ShardingTags;\n import io.shardingsphere.opentracing.ShardingTracer;\n@@ -60,7 +59,7 @@ protected void beforeExecute(final SQLExecutionEvent event) {\n             ACTIVE_SPAN.set(((ActiveSpan.Continuation) ExecutorDataMap.getDataMap().get(RootInvokeEventListener.OVERALL_SPAN_CONTINUATION)).activate());\n         }\n         getSpan().set(ShardingTracer.get().buildSpan(OPERATION_NAME_PREFIX).withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n-            .withTag(Tags.PEER_HOSTNAME.getKey(), ((SQLExecutionStartEvent) event).getUrl().split(\"//\")[1].split(\"/\")[0]).withTag(Tags.COMPONENT.getKey(), ShardingTags.COMPONENT_NAME)\n+            .withTag(Tags.PEER_HOSTNAME.getKey(), event.getUrl().split(\"//\")[1].split(\"/\")[0]).withTag(Tags.COMPONENT.getKey(), ShardingTags.COMPONENT_NAME)\n             .withTag(Tags.DB_INSTANCE.getKey(), event.getRouteUnit().getDataSourceName()).withTag(Tags.DB_TYPE.getKey(), \"sql\")\n             .withTag(ShardingTags.DB_BIND_VARIABLES.getKey(), event.getParameters().isEmpty() ? \"\" : Joiner.on(\",\").join(event.getParameters()))\n             .withTag(Tags.DB_STATEMENT.getKey(), event.getRouteUnit().getSqlUnit().getSql()).startManual());",
      "parent_sha": "dd99f125bb9f594aab5e04ab6c014ef0680d840f"
    }
  },
  {
    "oid": "eb8ae8121a5a6e85e70eaf864283f5695a062f7a",
    "message": "delete register",
    "date": "2018-08-23T12:37:04Z",
    "url": "https://github.com/apache/shardingsphere/commit/eb8ae8121a5a6e85e70eaf864283f5695a062f7a",
    "details": {
      "sha": "4302feb76a0fe4d05656bde0b7653a8587cc6726",
      "filename": "sharding-jdbc/src/main/java/io/shardingsphere/core/jdbc/core/datasource/ShardingDataSource.java",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/apache/shardingsphere/blob/eb8ae8121a5a6e85e70eaf864283f5695a062f7a/sharding-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fjdbc%2Fcore%2Fdatasource%2FShardingDataSource.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/eb8ae8121a5a6e85e70eaf864283f5695a062f7a/sharding-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fjdbc%2Fcore%2Fdatasource%2FShardingDataSource.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fjdbc%2Fcore%2Fdatasource%2FShardingDataSource.java?ref=eb8ae8121a5a6e85e70eaf864283f5695a062f7a",
      "patch": "@@ -24,12 +24,11 @@\n import io.shardingsphere.core.constant.ConnectionMode;\n import io.shardingsphere.core.constant.properties.ShardingProperties;\n import io.shardingsphere.core.constant.properties.ShardingPropertiesConstant;\n-import io.shardingsphere.core.event.ShardingEventBusInstance;\n+import io.shardingsphere.core.event.orche.config.ShardingConfigurationEventBusEvent;\n import io.shardingsphere.core.executor.ShardingExecuteEngine;\n import io.shardingsphere.core.jdbc.adapter.AbstractDataSourceAdapter;\n import io.shardingsphere.core.jdbc.core.ShardingContext;\n import io.shardingsphere.core.jdbc.core.connection.ShardingConnection;\n-import io.shardingsphere.core.event.orche.config.ShardingConfigurationEventBusEvent;\n import io.shardingsphere.core.rule.MasterSlaveRule;\n import io.shardingsphere.core.rule.ShardingRule;\n import lombok.Getter;\n@@ -68,17 +67,14 @@ public ShardingDataSource(final Map<String, DataSource> dataSourceMap, final Sha\n         }\n         shardingProperties = new ShardingProperties(null == props ? new Properties() : props);\n         shardingContext = getShardingContext(dataSourceMap, shardingRule);\n-        ShardingEventBusInstance.getInstance().register(this);\n     }\n     \n     private ShardingContext getShardingContext(final Map<String, DataSource> dataSourceMap, final ShardingRule shardingRule) {\n         boolean showSQL = shardingProperties.getValue(ShardingPropertiesConstant.SQL_SHOW);\n         int executorSize = shardingProperties.getValue(ShardingPropertiesConstant.EXECUTOR_SIZE);\n         ShardingExecuteEngine executeEngine = new ShardingExecuteEngine(executorSize);\n         ConnectionMode connectionMode = ConnectionMode.valueOf(shardingProperties.<String>getValue(ShardingPropertiesConstant.CONNECTION_MODE));\n-        ShardingContext result = new ShardingContext(dataSourceMap, shardingRule, getDatabaseType(), executeEngine, connectionMode, showSQL);\n-        ShardingEventBusInstance.getInstance().register(result);\n-        return result;\n+        return new ShardingContext(dataSourceMap, shardingRule, getDatabaseType(), executeEngine, connectionMode, showSQL);\n     }\n     \n     /**",
      "parent_sha": "20e6f5f400d04408d3d4e0ca6fe9331ef07e17fd"
    }
  },
  {
    "oid": "fb7bb4f2ddb2285433afc3b0e35697e284d4b205",
    "message": "reverse config",
    "date": "2019-01-16T12:12:33Z",
    "url": "https://github.com/apache/shardingsphere/commit/fb7bb4f2ddb2285433afc3b0e35697e284d4b205",
    "details": {
      "sha": "f4825240812fd0bba1f226c7d4d279f3795479f9",
      "filename": "sharding-jdbc-example/raw-jdbc-orche-example/src/main/java/io/shardingsphere/example/jdbc/orche/JavaConfigurationExample.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/apache/shardingsphere/blob/fb7bb4f2ddb2285433afc3b0e35697e284d4b205/sharding-jdbc-example%2Fraw-jdbc-orche-example%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fexample%2Fjdbc%2Forche%2FJavaConfigurationExample.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/fb7bb4f2ddb2285433afc3b0e35697e284d4b205/sharding-jdbc-example%2Fraw-jdbc-orche-example%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fexample%2Fjdbc%2Forche%2FJavaConfigurationExample.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc-example%2Fraw-jdbc-orche-example%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fexample%2Fjdbc%2Forche%2FJavaConfigurationExample.java?ref=fb7bb4f2ddb2285433afc3b0e35697e284d4b205",
      "patch": "@@ -53,20 +53,20 @@\n  */\n public class JavaConfigurationExample {\n     \n-//    private static ShardingType shardingType = ShardingType.SHARDING_DATABASES;\n+    private static ShardingType shardingType = ShardingType.SHARDING_DATABASES;\n //    private static ShardingType shardingType = ShardingType.SHARDING_TABLES;\n //    private static ShardingType shardingType = ShardingType.SHARDING_DATABASES_AND_TABLES;\n //    private static ShardingType shardingType = ShardingType.MASTER_SLAVE;\n-    private static ShardingType shardingType = ShardingType.SHARDING_MASTER_SLAVE;\n+//    private static ShardingType shardingType = ShardingType.SHARDING_MASTER_SLAVE;\n     \n //    private static boolean isRangeSharding = true;\n     private static boolean isRangeSharding = false;\n     \n     private static RegistryCenterType registryCenterType = RegistryCenterType.ZOOKEEPER;\n //    private static RegistryCenterType registryCenterType = RegistryCenterType.ETCD;\n     \n-//    private static boolean loadConfigFromRegCenter = false;\n-    private static boolean loadConfigFromRegCenter = true;\n+    private static boolean loadConfigFromRegCenter = false;\n+//    private static boolean loadConfigFromRegCenter = true;\n     \n     public static void main(final String[] args) throws Exception {\n         process(isRangeSharding ? getDataSourceRange() : getDataSourcePrecise());",
      "parent_sha": "96568cc27d5504fd0990882be7d325ae39804849"
    }
  },
  {
    "oid": "d9b416847b82fa831dd5b825ca25ef99a9ee7a1d",
    "message": "rename to UserChangedListenerTest",
    "date": "2019-04-18T11:30:18Z",
    "url": "https://github.com/apache/shardingsphere/commit/d9b416847b82fa831dd5b825ca25ef99a9ee7a1d",
    "details": {
      "sha": "16f5d3cb138abcca207db92ef28c81b0051827c3",
      "filename": "sharding-orchestration/sharding-orchestration-core/src/test/java/org/apache/shardingsphere/orchestration/internal/registry/config/AllConfigTests.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/shardingsphere/blob/d9b416847b82fa831dd5b825ca25ef99a9ee7a1d/sharding-orchestration%2Fsharding-orchestration-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Forchestration%2Finternal%2Fregistry%2Fconfig%2FAllConfigTests.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/d9b416847b82fa831dd5b825ca25ef99a9ee7a1d/sharding-orchestration%2Fsharding-orchestration-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Forchestration%2Finternal%2Fregistry%2Fconfig%2FAllConfigTests.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-orchestration%2Fsharding-orchestration-core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Forchestration%2Finternal%2Fregistry%2Fconfig%2FAllConfigTests.java?ref=d9b416847b82fa831dd5b825ca25ef99a9ee7a1d",
      "patch": "@@ -17,7 +17,7 @@\n \n package org.apache.shardingsphere.orchestration.internal.registry.config;\n \n-import org.apache.shardingsphere.orchestration.internal.registry.config.listener.AuthenticationChangedListenerTest;\n+import org.apache.shardingsphere.orchestration.internal.registry.config.listener.UserChangedListenerTest;\n import org.apache.shardingsphere.orchestration.internal.registry.config.listener.ConfigurationChangedListenerManagerTest;\n import org.apache.shardingsphere.orchestration.internal.registry.config.listener.PropertiesChangedListenerTest;\n import org.apache.shardingsphere.orchestration.internal.registry.config.listener.SchemaChangedListenerTest;\n@@ -33,7 +33,7 @@\n         ConfigurationServiceTest.class,\n         ConfigurationChangedListenerManagerTest.class,\n         PropertiesChangedListenerTest.class,\n-        AuthenticationChangedListenerTest.class,\n+        UserChangedListenerTest.class,\n         SchemaChangedListenerTest.class\n })\n public final class AllConfigTests {",
      "parent_sha": "2f2ae31705497cc2ad2983d8383cf178eb84e5d4"
    }
  },
  {
    "oid": "f20415280af3ee159a5ac9a9bcebf352dad26a18",
    "message": "modify GeneratedKeyCondition",
    "date": "2019-01-07T09:18:58Z",
    "url": "https://github.com/apache/shardingsphere/commit/f20415280af3ee159a5ac9a9bcebf352dad26a18",
    "details": {
      "sha": "01c63f8bbf068fe7f28a0459274d3c49d9a78437",
      "filename": "sharding-core/src/main/java/io/shardingsphere/core/parsing/parser/clause/InsertValuesClauseParser.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/apache/shardingsphere/blob/f20415280af3ee159a5ac9a9bcebf352dad26a18/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fparsing%2Fparser%2Fclause%2FInsertValuesClauseParser.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/f20415280af3ee159a5ac9a9bcebf352dad26a18/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fparsing%2Fparser%2Fclause%2FInsertValuesClauseParser.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fparsing%2Fparser%2Fclause%2FInsertValuesClauseParser.java?ref=f20415280af3ee159a5ac9a9bcebf352dad26a18",
      "patch": "@@ -141,12 +141,12 @@ private void removeGenerateKeyColumn(final InsertStatement insertStatement, fina\n     \n     private GeneratedKeyCondition createGeneratedKeyCondition(final Column column, final SQLExpression sqlExpression) {\n         if (sqlExpression instanceof SQLPlaceholderExpression) {\n-            return new GeneratedKeyCondition(column, ((SQLPlaceholderExpression) sqlExpression).getIndex(), null);\n-            if (sqlExpression instanceof SQLNumberExpression) {\n-                return new GeneratedKeyCondition(column, -1, ((SQLNumberExpression) sqlExpression).getNumber());\n-            }\n-            return new GeneratedKeyCondition(column, -1, ((SQLTextExpression) sqlExpression).getText());\n+            return new GeneratedKeyCondition(column, ((SQLPlaceholderExpression) sqlExpression).getIndex());\n+        }\n+        if (sqlExpression instanceof SQLNumberExpression) {\n+            return new GeneratedKeyCondition(column, -1, ((SQLNumberExpression) sqlExpression).getNumber());\n         }\n+        return new GeneratedKeyCondition(column, -1, ((SQLTextExpression) sqlExpression).getText());\n     }\n     \n     private void skipsDoubleColon() {",
      "parent_sha": "4eb35aa9f16e25df6ef7494c473950c91fa07651"
    }
  },
  {
    "oid": "6ced5a14695e257a624dd7e45043e0a3ca786ce0",
    "message": "rename to JPAUserService.java",
    "date": "2019-04-14T05:48:41Z",
    "url": "https://github.com/apache/shardingsphere/commit/6ced5a14695e257a624dd7e45043e0a3ca786ce0",
    "details": {
      "sha": "624a1ede8823e6c80de4d2a7d9c4dfb328e513f6",
      "filename": "example-common/repository-jpa/src/main/java/org/apache/shardingsphere/example/common/jpa/service/JPAUserService.java",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/shardingsphere/blob/6ced5a14695e257a624dd7e45043e0a3ca786ce0/example-common%2Frepository-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fexample%2Fcommon%2Fjpa%2Fservice%2FJPAUserService.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/6ced5a14695e257a624dd7e45043e0a3ca786ce0/example-common%2Frepository-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fexample%2Fcommon%2Fjpa%2Fservice%2FJPAUserService.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/example-common%2Frepository-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fexample%2Fcommon%2Fjpa%2Fservice%2FJPAUserService.java?ref=6ced5a14695e257a624dd7e45043e0a3ca786ce0",
      "patch": "@@ -19,5 +19,5 @@\n \n import org.apache.shardingsphere.example.common.service.CommonService;\n \n-public interface UseService extends CommonService {\n+public interface JPAUserService extends CommonService {\n }",
      "previous_filename": "example-common/repository-jpa/src/main/java/org/apache/shardingsphere/example/common/jpa/service/UseService.java",
      "parent_sha": "a54fb5b6702f6677eeb52abcdafaa0c8b20c8ca6"
    }
  },
  {
    "oid": "2348deea44a5067ee4142f30dba38f534278af2a",
    "message": "blank space",
    "date": "2018-09-17T11:18:36Z",
    "url": "https://github.com/apache/shardingsphere/commit/2348deea44a5067ee4142f30dba38f534278af2a",
    "details": {
      "sha": "151310d847c349c4453a576716442377b077654e",
      "filename": "sharding-jdbc/src/main/java/io/shardingsphere/core/executor/PreparedStatementExecutor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/shardingsphere/blob/2348deea44a5067ee4142f30dba38f534278af2a/sharding-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fexecutor%2FPreparedStatementExecutor.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/2348deea44a5067ee4142f30dba38f534278af2a/sharding-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fexecutor%2FPreparedStatementExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fexecutor%2FPreparedStatementExecutor.java?ref=2348deea44a5067ee4142f30dba38f534278af2a",
      "patch": "@@ -182,7 +182,7 @@ protected Boolean executeSQL(final StatementExecuteUnit statementExecuteUnit) th\n         return result.get(0);\n     }\n     \n-   @Override\n+    @Override\n     public void clear() throws SQLException {\n         super.clear();\n         resultSets.clear();",
      "parent_sha": "d26710ff8126d39f72bb1490a688fd97d19ccfd3"
    }
  },
  {
    "oid": "69b45b598ab8f90488fc36d2cc5d96dbaf405908",
    "message": "modify createShardingOrchestrationEvent()",
    "date": "2018-12-04T02:17:02Z",
    "url": "https://github.com/apache/shardingsphere/commit/69b45b598ab8f90488fc36d2cc5d96dbaf405908",
    "details": {
      "sha": "cd13e3cb02ebb973645fd8cb4826480dea9d96d5",
      "filename": "sharding-orchestration/sharding-orchestration-core/src/main/java/io/shardingsphere/orchestration/internal/registry/state/listener/InstanceStateChangedListener.java",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/apache/shardingsphere/blob/69b45b598ab8f90488fc36d2cc5d96dbaf405908/sharding-orchestration%2Fsharding-orchestration-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Forchestration%2Finternal%2Fregistry%2Fstate%2Flistener%2FInstanceStateChangedListener.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/69b45b598ab8f90488fc36d2cc5d96dbaf405908/sharding-orchestration%2Fsharding-orchestration-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Forchestration%2Finternal%2Fregistry%2Fstate%2Flistener%2FInstanceStateChangedListener.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-orchestration%2Fsharding-orchestration-core%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Forchestration%2Finternal%2Fregistry%2Fstate%2Flistener%2FInstanceStateChangedListener.java?ref=69b45b598ab8f90488fc36d2cc5d96dbaf405908",
      "patch": "@@ -33,15 +33,12 @@\n  */\n public final class InstanceStateChangedListener extends PostShardingOrchestrationEventListener {\n     \n-    private final RegistryCenter regCenter;\n-    \n     public InstanceStateChangedListener(final String name, final RegistryCenter regCenter) {\n         super(regCenter, new StateNode(name).getInstancesNodeFullPath(OrchestrationInstance.getInstance().getInstanceId()));\n-        this.regCenter = regCenter;\n     }\n     \n     @Override\n     protected CircuitStateChangedEvent createShardingOrchestrationEvent(final DataChangedEvent event) {\n-        return new CircuitStateChangedEvent(StateNodeStatus.DISABLED.toString().equalsIgnoreCase(regCenter.get(event.getKey())));\n+        return new CircuitStateChangedEvent(StateNodeStatus.DISABLED.toString().equalsIgnoreCase(event.getValue()));\n     }\n }",
      "parent_sha": "9f05d1eeffb9ca4db8d0544cb59323591797f35d"
    }
  },
  {
    "oid": "c4cdfea8e4f6a5f593c85b12e2659413c3b07fd9",
    "message": "modify isCipherColumn()",
    "date": "2019-07-29T10:52:42Z",
    "url": "https://github.com/apache/shardingsphere/commit/c4cdfea8e4f6a5f593c85b12e2659413c3b07fd9",
    "details": {
      "sha": "f0d7cd4b10a286a625b76351f45e9b9b25a42014",
      "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/EncryptRule.java",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/apache/shardingsphere/blob/c4cdfea8e4f6a5f593c85b12e2659413c3b07fd9/sharding-core%2Fsharding-core-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frule%2FEncryptRule.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/c4cdfea8e4f6a5f593c85b12e2659413c3b07fd9/sharding-core%2Fsharding-core-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frule%2FEncryptRule.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsharding-core-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frule%2FEncryptRule.java?ref=c4cdfea8e4f6a5f593c85b12e2659413c3b07fd9",
      "patch": "@@ -185,15 +185,12 @@ public Collection<String> getCipherColumns(final String logicTable) {\n     /**\n      * Is cipher column or not.\n      *\n+     * @param tableName table name\n      * @param columnName column name\n      * @return cipher column or not\n      */\n-    public boolean isCipherColumn(final String columnName) {\n-        Collection<String> result = new LinkedList<>();\n-        for (EncryptTable each : tables.values()) {\n-            result.addAll(each.getCipherColumns());\n-        }\n-        return result.contains(columnName);\n+    public boolean isCipherColumn(final String tableName, final String columnName) {\n+        return tables.keySet().contains(tableName) && tables.get(tableName).getCipherColumns().contains(columnName);\n     }\n     \n     /**",
      "parent_sha": "cddcc0aee4f8f16576d7e3aa46e1ab2a70f60d6a"
    }
  },
  {
    "oid": "9d9495171e37a6ca2b1a82f55562b88d13a8b07f",
    "message": "use RemoveToken",
    "date": "2019-04-30T10:54:30Z",
    "url": "https://github.com/apache/shardingsphere/commit/9d9495171e37a6ca2b1a82f55562b88d13a8b07f",
    "details": {
      "sha": "cfceadab1c2133e030bc321d9813479f396fa062",
      "filename": "sharding-core/sharding-core-rewrite/src/main/java/org/apache/shardingsphere/core/rewrite/SQLRewriteEngine.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/shardingsphere/blob/9d9495171e37a6ca2b1a82f55562b88d13a8b07f/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngine.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/9d9495171e37a6ca2b1a82f55562b88d13a8b07f/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngine.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsharding-core-rewrite%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Frewrite%2FSQLRewriteEngine.java?ref=9d9495171e37a6ca2b1a82f55562b88d13a8b07f",
      "patch": "@@ -209,7 +209,7 @@ private void appendTokensAndPlaceholders(final boolean isRewrite, final SQLBuild\n             } else if (each instanceof EncryptColumnToken) {\n                 appendEncryptColumnPlaceholder(sqlBuilder, (EncryptColumnToken) each, count);\n             } else if (each instanceof RemoveToken) {\n-                appendRest(sqlBuilder, count, each.getStopIndex());\n+                appendRest(sqlBuilder, count, each.getStopIndex() + 1);\n             }\n             count++;\n         }",
      "parent_sha": "8ba31d5d7a6c828d5ed97c671564c042a66dd572"
    }
  },
  {
    "oid": "7511442e8108898186d7ab56700333731dc33260",
    "message": "getCurrentResultSet()",
    "date": "2019-02-21T04:10:31Z",
    "url": "https://github.com/apache/shardingsphere/commit/7511442e8108898186d7ab56700333731dc33260",
    "details": {
      "sha": "cd55ad49473071c48f99ca0b85be171b42a24208",
      "filename": "sharding-jdbc/sharding-jdbc-core/src/main/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/statement/ShardingPreparedStatement.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/apache/shardingsphere/blob/7511442e8108898186d7ab56700333731dc33260/sharding-jdbc%2Fsharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingjdbc%2Fjdbc%2Fcore%2Fstatement%2FShardingPreparedStatement.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/7511442e8108898186d7ab56700333731dc33260/sharding-jdbc%2Fsharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingjdbc%2Fjdbc%2Fcore%2Fstatement%2FShardingPreparedStatement.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc%2Fsharding-jdbc-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fshardingjdbc%2Fjdbc%2Fcore%2Fstatement%2FShardingPreparedStatement.java?ref=7511442e8108898186d7ab56700333731dc33260",
      "patch": "@@ -27,7 +27,6 @@\n import org.apache.shardingsphere.core.merger.MergeEngine;\n import org.apache.shardingsphere.core.merger.MergeEngineFactory;\n import org.apache.shardingsphere.core.merger.QueryResult;\n-import org.apache.shardingsphere.core.merger.dql.DQLMergeEngine;\n import org.apache.shardingsphere.core.parsing.parser.sql.dal.DALStatement;\n import org.apache.shardingsphere.core.parsing.parser.sql.dml.insert.InsertStatement;\n import org.apache.shardingsphere.core.parsing.parser.sql.dql.DQLStatement;\n@@ -145,8 +144,7 @@ private ShardingResultSet getResultSet(final MergeEngine mergeEngine) throws SQL\n     }\n     \n     private ShardingResultSet getCurrentResultSet(final List<ResultSet> resultSets, final MergeEngine mergeEngine) throws SQLException {\n-        return mergeEngine instanceof DQLMergeEngine \n-                ? new ShardingResultSet(resultSets, mergeEngine.merge(), ((DQLMergeEngine) mergeEngine).getColumnLabelIndexMap(), this) : new ShardingResultSet(resultSets, mergeEngine.merge(), this);\n+        return new ShardingResultSet(resultSets, mergeEngine.merge(), this);\n     }\n     \n     @Override",
      "parent_sha": "6fa3e75230c765598c371530bf33dc56235699f4"
    }
  },
  {
    "oid": "bf585f7a6fa7de6fe37d2684712a3f01b818735a",
    "message": "MODIFY  createShardingMetaData()",
    "date": "2018-12-27T10:18:05Z",
    "url": "https://github.com/apache/shardingsphere/commit/bf585f7a6fa7de6fe37d2684712a3f01b818735a",
    "details": {
      "sha": "196a89c2981cda3af9f8a4f6f628a09e0fe21f37",
      "filename": "sharding-proxy/src/main/java/io/shardingsphere/shardingproxy/runtime/schema/MasterSlaveSchema.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/shardingsphere/blob/bf585f7a6fa7de6fe37d2684712a3f01b818735a/sharding-proxy%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fshardingproxy%2Fruntime%2Fschema%2FMasterSlaveSchema.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/bf585f7a6fa7de6fe37d2684712a3f01b818735a/sharding-proxy%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fshardingproxy%2Fruntime%2Fschema%2FMasterSlaveSchema.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-proxy%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fshardingproxy%2Fruntime%2Fschema%2FMasterSlaveSchema.java?ref=bf585f7a6fa7de6fe37d2684712a3f01b818735a",
      "patch": "@@ -62,7 +62,8 @@ private MasterSlaveRule createMasterSlaveRule(final MasterSlaveRuleConfiguration\n     private ShardingMetaData createShardingMetaData() {\n         return new ShardingMetaData(getDataSourceURLs(getDataSources()), new ShardingRule(new ShardingRuleConfiguration(), getDataSources().keySet()), \n                 DatabaseType.MySQL, BackendExecutorContext.getInstance().getExecuteEngine(), new ProxyTableMetaDataConnectionManager(getBackendDataSource()), \n-                GlobalRegistry.getInstance().getShardingProperties().<Integer>getValue(ShardingPropertiesConstant.MAX_CONNECTIONS_SIZE_PER_QUERY));\n+                GlobalRegistry.getInstance().getShardingProperties().<Integer>getValue(ShardingPropertiesConstant.MAX_CONNECTIONS_SIZE_PER_QUERY), \n+                GlobalRegistry.getInstance().getShardingProperties().<Boolean>getValue(ShardingPropertiesConstant.CHECK_TABLE_METADATA_ENABLED));\n     }\n     \n     /**",
      "parent_sha": "b79c6baaa8ac28e0caa00fcaba11e62f503c30cc"
    }
  },
  {
    "oid": "c15c1fedb22a8906416b6a782709587340bb02bf",
    "message": "Remove unnecessary thread safe codes on PostgreSQLAuthenticationEngine (#10093)",
    "date": "2021-04-15T04:51:31Z",
    "url": "https://github.com/apache/shardingsphere/commit/c15c1fedb22a8906416b6a782709587340bb02bf",
    "details": {
      "sha": "fd88d0b70131475036c8aaa6b858094abcdff3b0",
      "filename": "shardingsphere-proxy/shardingsphere-proxy-frontend/shardingsphere-proxy-frontend-postgresql/src/main/java/org/apache/shardingsphere/proxy/frontend/postgresql/authentication/PostgreSQLAuthenticationEngine.java",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/apache/shardingsphere/blob/c15c1fedb22a8906416b6a782709587340bb02bf/shardingsphere-proxy%2Fshardingsphere-proxy-frontend%2Fshardingsphere-proxy-frontend-postgresql%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fproxy%2Ffrontend%2Fpostgresql%2Fauthentication%2FPostgreSQLAuthenticationEngine.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/c15c1fedb22a8906416b6a782709587340bb02bf/shardingsphere-proxy%2Fshardingsphere-proxy-frontend%2Fshardingsphere-proxy-frontend-postgresql%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fproxy%2Ffrontend%2Fpostgresql%2Fauthentication%2FPostgreSQLAuthenticationEngine.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/shardingsphere-proxy%2Fshardingsphere-proxy-frontend%2Fshardingsphere-proxy-frontend-postgresql%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fproxy%2Ffrontend%2Fpostgresql%2Fauthentication%2FPostgreSQLAuthenticationEngine.java?ref=c15c1fedb22a8906416b6a782709587340bb02bf",
      "patch": "@@ -38,8 +38,6 @@\n import org.apache.shardingsphere.proxy.frontend.authentication.AuthenticationResultBuilder;\n import org.apache.shardingsphere.proxy.frontend.connection.ConnectionIdGenerator;\n \n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n /**\n  * Authentication engine for PostgreSQL.\n  */\n@@ -49,9 +47,9 @@ public final class PostgreSQLAuthenticationEngine implements AuthenticationEngin\n     \n     private static final int SSL_REQUEST_CODE = 80877103;\n     \n-    private final AtomicBoolean startupMessageReceived = new AtomicBoolean(false);\n+    private boolean startupMessageReceived;\n     \n-    private volatile byte[] md5Salt;\n+    private byte[] md5Salt;\n     \n     private AuthenticationResult currentAuthResult;\n     \n@@ -69,12 +67,12 @@ public AuthenticationResult authenticate(final ChannelHandlerContext context, fi\n             return AuthenticationResultBuilder.continued();\n         }\n         payload.getByteBuf().resetReaderIndex();\n-        return startupMessageReceived.get() ? afterStartupMessage(context, (PostgreSQLPacketPayload) payload) : beforeStartupMessage(context, (PostgreSQLPacketPayload) payload);\n+        return startupMessageReceived ? afterStartupMessage(context, (PostgreSQLPacketPayload) payload) : beforeStartupMessage(context, (PostgreSQLPacketPayload) payload);\n     }\n     \n     private AuthenticationResult beforeStartupMessage(final ChannelHandlerContext context, final PostgreSQLPacketPayload payload) {\n         PostgreSQLComStartupPacket comStartupPacket = new PostgreSQLComStartupPacket(payload);\n-        startupMessageReceived.set(true);\n+        startupMessageReceived = true;\n         String database = comStartupPacket.getDatabase();\n         if (!Strings.isNullOrEmpty(database) && !ProxyContext.getInstance().schemaExists(database)) {\n             context.writeAndFlush(createErrorPacket(PostgreSQLErrorCode.INVALID_CATALOG_NAME, String.format(\"database \\\"%s\\\" does not exist\", database)));",
      "parent_sha": "d312e297b1233740f45455a28a546948a55ce590"
    }
  },
  {
    "oid": "cdcd88da086fb70301bc6394f922e35af89363b5",
    "message": "add AccessLevel.PROTECTED",
    "date": "2018-09-19T11:05:42Z",
    "url": "https://github.com/apache/shardingsphere/commit/cdcd88da086fb70301bc6394f922e35af89363b5",
    "details": {
      "sha": "f8dfba0bf6592b97acdc3daf8a6706a2424a640e",
      "filename": "sharding-jdbc/src/main/java/io/shardingsphere/core/executor/AbstractStatementExecutor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/shardingsphere/blob/cdcd88da086fb70301bc6394f922e35af89363b5/sharding-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fexecutor%2FAbstractStatementExecutor.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/cdcd88da086fb70301bc6394f922e35af89363b5/sharding-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fexecutor%2FAbstractStatementExecutor.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc%2Fsrc%2Fmain%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fexecutor%2FAbstractStatementExecutor.java?ref=cdcd88da086fb70301bc6394f922e35af89363b5",
      "patch": "@@ -74,7 +74,7 @@ public class AbstractStatementExecutor {\n     \n     private final Collection<ShardingExecuteGroup<StatementExecuteUnit>> executeGroups = new LinkedList<>();\n     \n-    @Getter\n+    @Getter(AccessLevel.PROTECTED)\n     @Setter\n     private SQLType sqlType;\n     ",
      "parent_sha": "3daf91422811e0a2701e83ad89a55b106b2b5449"
    }
  },
  {
    "oid": "7e40af174432225f845af68a5fcc4b186d4fcd2a",
    "message": "modify getColumnValue()",
    "date": "2019-02-19T03:55:06Z",
    "url": "https://github.com/apache/shardingsphere/commit/7e40af174432225f845af68a5fcc4b186d4fcd2a",
    "details": {
      "sha": "f2bf90240d03a891b7f10ee92556c8df07e8aeef",
      "filename": "sharding-core/src/main/java/org/apache/shardingsphere/core/parsing/parser/token/InsertValuesToken.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/shardingsphere/blob/7e40af174432225f845af68a5fcc4b186d4fcd2a/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Fparsing%2Fparser%2Ftoken%2FInsertValuesToken.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/7e40af174432225f845af68a5fcc4b186d4fcd2a/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Fparsing%2Fparser%2Ftoken%2FInsertValuesToken.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fshardingsphere%2Fcore%2Fparsing%2Fparser%2Ftoken%2FInsertValuesToken.java?ref=7e40af174432225f845af68a5fcc4b186d4fcd2a",
      "patch": "@@ -121,7 +121,7 @@ public boolean apply(final SQLExpression input) {\n         public String getColumnValue(final int columnValueIndex) {\n             SQLExpression sqlExpression = values.get(columnValueIndex);\n             if (sqlExpression instanceof SQLPlaceholderExpression) {\n-                return parameters.get(columnValueIndex).toString();\n+                return parameters.get(getParameterIndex(sqlExpression)).toString();\n             } else if (sqlExpression instanceof SQLTextExpression) {\n                 return ((SQLTextExpression) sqlExpression).getText();\n             } else {",
      "parent_sha": "ace3d0f2635d8e63cdea2a3c280f69e6cb1a2135"
    }
  },
  {
    "oid": "ecb89122f27e6f9220e01b6e715f5bc48435f784",
    "message": "#1172, fix test case",
    "date": "2018-09-11T14:13:59Z",
    "url": "https://github.com/apache/shardingsphere/commit/ecb89122f27e6f9220e01b6e715f5bc48435f784",
    "details": {
      "sha": "d984218c660b98ad2f5dfbb0a5ca39e6331550f5",
      "filename": "sharding-jdbc/src/test/java/io/shardingsphere/core/executor/StatementExecutorTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/apache/shardingsphere/blob/ecb89122f27e6f9220e01b6e715f5bc48435f784/sharding-jdbc%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fexecutor%2FStatementExecutorTest.java",
      "raw_url": "https://github.com/apache/shardingsphere/raw/ecb89122f27e6f9220e01b6e715f5bc48435f784/sharding-jdbc%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fexecutor%2FStatementExecutorTest.java",
      "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/sharding-jdbc%2Fsrc%2Ftest%2Fjava%2Fio%2Fshardingsphere%2Fcore%2Fexecutor%2FStatementExecutorTest.java?ref=ecb89122f27e6f9220e01b6e715f5bc48435f784",
      "patch": "@@ -266,8 +266,11 @@ public void assertExecuteUpdateWithAutoGeneratedKeys() throws SQLException {\n     @Test\n     public void assertExecuteUpdateWithColumnIndexes() throws SQLException {\n         Statement statement = mock(Statement.class);\n+        Connection connection = mock(Connection.class);\n+        DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);\n         when(statement.executeUpdate(DML_SQL, new int[] {1})).thenReturn(10);\n-        when(statement.getConnection()).thenReturn(mock(Connection.class));\n+        when(statement.getConnection()).thenReturn(connection);\n+        when(connection.getMetaData()).thenReturn(databaseMetaData);\n         StatementExecutor actual = new MemoryStrictlyStatementExecutor(SQLType.DML, getExecuteTemplate(), createStatementExecuteUnits(DML_SQL, statement, \"ds_0\"));\n         assertThat(actual.executeUpdate(new int[] {1}), is(10));\n         verify(statement).executeUpdate(DML_SQL, new int[] {1});",
      "parent_sha": "54d84ad70d080d83504e51712bd8f6e2c092737c"
    }
  }
]