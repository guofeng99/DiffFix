[
  {
    "oid": "50f0e6eb0faa55d52a50f14e1f4d4d28d6cff723",
    "message": "fix logout issue with spring security 5",
    "date": "2018-10-03T16:15:24Z",
    "url": "https://github.com/apolloconfig/apollo/commit/50f0e6eb0faa55d52a50f14e1f4d4d28d6cff723",
    "details": {
      "sha": "5bf989bad6dfce557b79d8663a547e02aa4e2bd6",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/AuthConfiguration.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/50f0e6eb0faa55d52a50f14e1f4d4d28d6cff723/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fconfiguration%2FAuthConfiguration.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/50f0e6eb0faa55d52a50f14e1f4d4d28d6cff723/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fconfiguration%2FAuthConfiguration.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fconfiguration%2FAuthConfiguration.java?ref=50f0e6eb0faa55d52a50f14e1f4d4d28d6cff723",
      "patch": "@@ -46,6 +46,7 @@\n import org.springframework.security.crypto.password.LdapShaPasswordEncoder;\n import org.springframework.security.provisioning.JdbcUserDetailsManager;\n import org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;\n+import org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler;\n \n \n @Configuration\n@@ -270,8 +271,10 @@ protected void configure(HttpSecurity http) throws Exception {\n           .antMatchers(\"/openapi/**\", \"/vendor/**\", \"/styles/**\", \"/scripts/**\", \"/views/**\", \"/img/**\").permitAll()\n           .antMatchers(\"/**\").hasAnyRole(USER_ROLE);\n       http.formLogin().loginPage(\"/signin\").permitAll().failureUrl(\"/signin?#/error\").and().httpBasic();\n+      SimpleUrlLogoutSuccessHandler urlLogoutHandler = new SimpleUrlLogoutSuccessHandler();\n+      urlLogoutHandler.setDefaultTargetUrl(\"/signin?#/logout\");\n       http.logout().logoutUrl(\"/user/logout\").invalidateHttpSession(true).clearAuthentication(true)\n-          .logoutSuccessUrl(\"/signin?#/logout\");\n+          .logoutSuccessHandler(urlLogoutHandler);\n       http.exceptionHandling().authenticationEntryPoint(new LoginUrlAuthenticationEntryPoint(\"/signin\"));\n     }\n ",
      "parent_sha": "b70060ff916636c816790afe5f8f3e816f1bc30b"
    }
  },
  {
    "oid": "124ceaa0679633a4f1420487f83982aeb8707b20",
    "message": "optimized code for LdapUserService.class\n\navoid creating useless objects",
    "date": "2020-06-21T01:46:00Z",
    "url": "https://github.com/apolloconfig/apollo/commit/124ceaa0679633a4f1420487f83982aeb8707b20",
    "details": {
      "sha": "bc1c0ee9fd3f788f505cbfda3aba52b55c28f89a",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/ldap/LdapUserService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/124ceaa0679633a4f1420487f83982aeb8707b20/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fldap%2FLdapUserService.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/124ceaa0679633a4f1420487f83982aeb8707b20/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fldap%2FLdapUserService.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fldap%2FLdapUserService.java?ref=124ceaa0679633a4f1420487f83982aeb8707b20",
      "patch": "@@ -290,12 +290,10 @@ public List<UserInfo> findByUserIds(List<String> userIds) {\n     if (CollectionUtils.isEmpty(userIds)) {\n       return Collections.emptyList();\n     }\n-    List<UserInfo> userList = new ArrayList<>();\n     if (StringUtils.isNotBlank(groupSearch)) {\n       List<UserInfo> userListByGroup = searchUserInfoByGroup(groupBase, groupSearch, null,\n           userIds);\n-      userList.addAll(userListByGroup);\n-      return userList;\n+      return userListByGroup;\n     }\n     ContainerCriteria criteria = query().where(loginIdAttrName).is(userIds.get(0));\n     userIds.stream().skip(1).forEach(userId -> criteria.or(loginIdAttrName).is(userId));",
      "parent_sha": "b8ade3b3a37bf967a333740b37a6ccfe914591d7"
    }
  },
  {
    "oid": "d1febbf8afc33d971d4d1ea6f400c5760b501dcb",
    "message": "misc fix",
    "date": "2016-05-31T02:34:07Z",
    "url": "https://github.com/apolloconfig/apollo/commit/d1febbf8afc33d971d4d1ea6f400c5760b501dcb",
    "details": {
      "sha": "7f3c2035e2ac52f37a9d870ad13e9ad214ec02f4",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigRepository.java",
      "status": "modified",
      "additions": 9,
      "deletions": 12,
      "changes": 21,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/d1febbf8afc33d971d4d1ea6f400c5760b501dcb/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigRepository.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/d1febbf8afc33d971d4d1ea6f400c5760b501dcb/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigRepository.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigRepository.java?ref=d1febbf8afc33d971d4d1ea6f400c5760b501dcb",
      "patch": "@@ -55,6 +55,7 @@ public class RemoteConfigRepository extends AbstractConfigRepository {\n   private volatile AtomicReference<ApolloConfig> m_configCache;\n   private final String m_namespace;\n   private final ScheduledExecutorService m_executorService;\n+  private final ExecutorService m_longPollingService;\n   private final AtomicBoolean m_longPollingStopped;\n   private SchedulePolicy m_longPollSchedulePolicy;\n   private AtomicReference<ServiceDTO> m_longPollServiceDto;\n@@ -80,6 +81,8 @@ public RemoteConfigRepository(String namespace) {\n     m_longPollingStopped = new AtomicBoolean(false);\n     m_executorService = Executors.newScheduledThreadPool(1,\n         ApolloThreadFactory.create(\"RemoteConfigRepository\", true));\n+    m_longPollingService = Executors.newFixedThreadPool(2,\n+            ApolloThreadFactory.create(\"RemoteConfigRepository-LongPolling\", true));\n     m_longPollServiceDto = new AtomicReference<>();\n     this.trySync();\n     this.schedulePeriodicRefresh();\n@@ -211,15 +214,12 @@ private ApolloConfig loadApolloConfig() {\n   private String assembleQueryConfigUrl(String uri, String appId, String cluster, String namespace,\n                                         String dataCenter, ApolloConfig previousConfig) {\n     Escaper escaper = UrlEscapers.urlPathSegmentEscaper();\n-    String path = \"configs/%s/%s\";\n-    List<String> pathParams = Lists.newArrayList(escaper.escape(appId), escaper.escape(cluster));\n+    String path = \"configs/%s/%s/%s\";\n+    List<String> pathParams =\n+        Lists.newArrayList(escaper.escape(appId), escaper.escape(cluster),\n+            escaper.escape(namespace));\n     Map<String, String> queryParams = Maps.newHashMap();\n \n-    if (!Strings.isNullOrEmpty(namespace)) {\n-      path = path + \"/%s\";\n-      pathParams.add(escaper.escape(namespace));\n-    }\n-\n     if (previousConfig != null) {\n       queryParams.put(\"releaseKey\", escaper.escape(String.valueOf(previousConfig.getReleaseKey())));\n     }\n@@ -248,13 +248,10 @@ private void scheduleLongPollingRefresh() {\n     final String appId = m_configUtil.getAppId();\n     final String cluster = m_configUtil.getCluster();\n     final String dataCenter = m_configUtil.getDataCenter();\n-    final ExecutorService longPollingService =\n-        Executors.newFixedThreadPool(2,\n-            ApolloThreadFactory.create(\"RemoteConfigRepository-LongPolling\", true));\n-    longPollingService.submit(new Runnable() {\n+    m_longPollingService.submit(new Runnable() {\n       @Override\n       public void run() {\n-        doLongPollingRefresh(appId, cluster, dataCenter, longPollingService);\n+        doLongPollingRefresh(appId, cluster, dataCenter, m_longPollingService);\n       }\n     });\n   }",
      "parent_sha": "3e4e8ef9b46c06ae7d21deb31b4313e7801fc932"
    }
  },
  {
    "oid": "5e172758bc4e8656de39c3390744c646bcd6a255",
    "message": "refactor: SpringValueProcessor extract duplicate code (#4137)\n\n* refactor: SpringValueProcessor extract duplicate code\r\n\r\n* fix: typo & logging level",
    "date": "2021-12-09T01:27:22Z",
    "url": "https://github.com/apolloconfig/apollo/commit/5e172758bc4e8656de39c3390744c646bcd6a255",
    "details": {
      "sha": "2d82c2ae9643ae62e7dc76801f051da2b1b1dac3",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/spring/annotation/SpringValueProcessor.java",
      "status": "modified",
      "additions": 19,
      "deletions": 14,
      "changes": 33,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/5e172758bc4e8656de39c3390744c646bcd6a255/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fspring%2Fannotation%2FSpringValueProcessor.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/5e172758bc4e8656de39c3390744c646bcd6a255/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fspring%2Fannotation%2FSpringValueProcessor.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fspring%2Fannotation%2FSpringValueProcessor.java?ref=5e172758bc4e8656de39c3390744c646bcd6a255",
      "patch": "@@ -28,6 +28,7 @@\n import com.google.common.collect.Multimap;\n import java.beans.PropertyDescriptor;\n import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n import java.lang.reflect.Method;\n import java.util.Collection;\n import java.util.Set;\n@@ -46,7 +47,7 @@\n /**\n  * Spring value processor of field or method which has @Value and xml config placeholders.\n  *\n- * @author github.com/zhegexiaohuozi  seimimaster@gmail.com\n+ * @author github.com/zhegexiaohuozi  seimimaster@gmail.com  mghio.dev@gmail.com\n  * @since 2017/12/20.\n  */\n public class SpringValueProcessor extends ApolloProcessor implements BeanFactoryPostProcessor, BeanFactoryAware {\n@@ -94,17 +95,8 @@ protected void processField(Object bean, String beanName, Field field) {\n     if (value == null) {\n       return;\n     }\n-    Set<String> keys = placeholderHelper.extractPlaceholderKeys(value.value());\n \n-    if (keys.isEmpty()) {\n-      return;\n-    }\n-\n-    for (String key : keys) {\n-      SpringValue springValue = new SpringValue(key, value.value(), bean, beanName, field, false);\n-      springValueRegistry.register(beanFactory, key, springValue);\n-      logger.debug(\"Monitoring {}\", springValue);\n-    }\n+    doRegister(bean, beanName, field, value);\n   }\n \n   @Override\n@@ -124,20 +116,33 @@ protected void processMethod(Object bean, String beanName, Method method) {\n       return;\n     }\n \n-    Set<String> keys = placeholderHelper.extractPlaceholderKeys(value.value());\n+    doRegister(bean, beanName, method, value);\n+  }\n \n+  private void doRegister(Object bean, String beanName, Member member, Value value) {\n+    Set<String> keys = placeholderHelper.extractPlaceholderKeys(value.value());\n     if (keys.isEmpty()) {\n       return;\n     }\n \n     for (String key : keys) {\n-      SpringValue springValue = new SpringValue(key, value.value(), bean, beanName, method, false);\n+      SpringValue springValue;\n+      if (member instanceof Field) {\n+        Field field = (Field) member;\n+        springValue = new SpringValue(key, value.value(), bean, beanName, field, false);\n+      } else if (member instanceof Method) {\n+        Method method = (Method) member;\n+        springValue = new SpringValue(key, value.value(), bean, beanName, method, false);\n+      } else {\n+        logger.error(\"Apollo @Value annotation currently only support to be used on methods and fields, \"\n+            + \"but is used on {}\", member.getClass());\n+        return;\n+      }\n       springValueRegistry.register(beanFactory, key, springValue);\n       logger.info(\"Monitoring {}\", springValue);\n     }\n   }\n \n-\n   private void processBeanPropertyValues(Object bean, String beanName) {\n     Collection<SpringValueDefinition> propertySpringValues = beanName2SpringValueDefinitions\n         .get(beanName);",
      "parent_sha": "765a24e04145340c9bc39b30267bfe0d25eeffea"
    }
  },
  {
    "oid": "1d12658a87fee9b10a9e3769076224fcd9c0f8eb",
    "message": "fix the issue that an immediate login after logout will be redirected to signin page (#2633)",
    "date": "2019-10-02T08:51:46Z",
    "url": "https://github.com/apolloconfig/apollo/commit/1d12658a87fee9b10a9e3769076224fcd9c0f8eb",
    "details": {
      "sha": "3058eedc6f6901868d83ecfd59d2bc495ff7fba2",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/AuthConfiguration.java",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/1d12658a87fee9b10a9e3769076224fcd9c0f8eb/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fconfiguration%2FAuthConfiguration.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/1d12658a87fee9b10a9e3769076224fcd9c0f8eb/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fconfiguration%2FAuthConfiguration.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fconfiguration%2FAuthConfiguration.java?ref=1d12658a87fee9b10a9e3769076224fcd9c0f8eb",
      "patch": "@@ -273,11 +273,10 @@ protected void configure(HttpSecurity http) throws Exception {\n       http.authorizeRequests()\n           .antMatchers(\"/prometheus/**\",\"/metrics/**\",\"/openapi/**\", \"/vendor/**\", \"/styles/**\", \"/scripts/**\", \"/views/**\", \"/img/**\").permitAll()\n           .antMatchers(\"/**\").hasAnyRole(USER_ROLE);\n-      http.formLogin().loginPage(\"/signin\").permitAll().failureUrl(\"/signin?#/error\").and().httpBasic();\n-      SimpleUrlLogoutSuccessHandler urlLogoutHandler = new SimpleUrlLogoutSuccessHandler();\n-      urlLogoutHandler.setDefaultTargetUrl(\"/signin?#/logout\");\n+      http.formLogin().loginPage(\"/signin\").defaultSuccessUrl(\"/\", true).permitAll().failureUrl(\"/signin?#/error\").and()\n+          .httpBasic();\n       http.logout().logoutUrl(\"/user/logout\").invalidateHttpSession(true).clearAuthentication(true)\n-          .logoutSuccessHandler(urlLogoutHandler);\n+          .logoutSuccessUrl(\"/signin?#/logout\");\n       http.exceptionHandling().authenticationEntryPoint(new LoginUrlAuthenticationEntryPoint(\"/signin\"));\n     }\n ",
      "parent_sha": "40c5e47878f2c2777fda94d33031d0fb9dcf4c42"
    }
  },
  {
    "oid": "1b1decc97bd909582216546906b36c921bd23df0",
    "message": "use tooling instead of tools",
    "date": "2016-09-19T02:23:54Z",
    "url": "https://github.com/apolloconfig/apollo/commit/1b1decc97bd909582216546906b36c921bd23df0",
    "details": {
      "sha": "6d316fd0093d25e686c65364faaf3212c6dbbe20",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/util/ConfigUtil.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/1b1decc97bd909582216546906b36c921bd23df0/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Futil%2FConfigUtil.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/1b1decc97bd909582216546906b36c921bd23df0/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Futil%2FConfigUtil.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Futil%2FConfigUtil.java?ref=1b1decc97bd909582216546906b36c921bd23df0",
      "patch": "@@ -21,7 +21,7 @@\n @Named(type = ConfigUtil.class)\n public class ConfigUtil {\n   private static final Logger logger = LoggerFactory.getLogger(ConfigUtil.class);\n-  private static final String TOOLS_CLUSTER = \"TOOLS\";\n+  private static final String TOOLING_CLUSTER = \"TOOLING\";\n   private int refreshInterval = 5;\n   private TimeUnit refreshIntervalTimeUnit = TimeUnit.MINUTES;\n   private int connectTimeout = 1000; //1 second\n@@ -65,9 +65,9 @@ private void initCluster() {\n     //Load data center from system property\n     cluster = System.getProperty(ConfigConsts.APOLLO_CLUSTER_KEY);\n \n-    //Use TOOLS cluster if tools=true in server.properties\n+    //Use TOOLING cluster if tooling=true in server.properties\n     if (Strings.isNullOrEmpty(cluster) && isToolingZone()) {\n-      cluster = TOOLS_CLUSTER;\n+      cluster = TOOLING_CLUSTER;\n     }\n \n     //Use data center as cluster\n@@ -82,7 +82,7 @@ private void initCluster() {\n   }\n \n   private boolean isToolingZone() {\n-    if (\"true\".equalsIgnoreCase(Foundation.server().getProperty(\"tools\", \"false\").trim())) {\n+    if (\"true\".equalsIgnoreCase(Foundation.server().getProperty(\"tooling\", \"false\").trim())) {\n       return true;\n     }\n     return false;",
      "parent_sha": "33c59a5b33cfd83324cf16d0fd3125dcaba6ebf6"
    }
  },
  {
    "oid": "8737d49c5a0e7bab35a9b9e97aac97e6c5bbe9f8",
    "message": "prevent crash when app.id is not set",
    "date": "2016-06-08T09:47:15Z",
    "url": "https://github.com/apolloconfig/apollo/commit/8737d49c5a0e7bab35a9b9e97aac97e6c5bbe9f8",
    "details": {
      "sha": "ce9e4148a773815c7f941a2c5391ff149b67eb98",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigRepository.java",
      "status": "modified",
      "additions": 16,
      "deletions": 9,
      "changes": 25,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/8737d49c5a0e7bab35a9b9e97aac97e6c5bbe9f8/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigRepository.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/8737d49c5a0e7bab35a9b9e97aac97e6c5bbe9f8/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigRepository.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigRepository.java?ref=8737d49c5a0e7bab35a9b9e97aac97e6c5bbe9f8",
      "patch": "@@ -259,15 +259,22 @@ private String assembleQueryConfigUrl(String uri, String appId, String cluster,\n   }\n \n   private void scheduleLongPollingRefresh() {\n-    final String appId = m_configUtil.getAppId();\n-    final String cluster = m_configUtil.getCluster();\n-    final String dataCenter = m_configUtil.getDataCenter();\n-    m_longPollingService.submit(new Runnable() {\n-      @Override\n-      public void run() {\n-        doLongPollingRefresh(appId, cluster, dataCenter);\n-      }\n-    });\n+    try {\n+      final String appId = m_configUtil.getAppId();\n+      final String cluster = m_configUtil.getCluster();\n+      final String dataCenter = m_configUtil.getDataCenter();\n+      m_longPollingService.submit(new Runnable() {\n+        @Override\n+        public void run() {\n+          doLongPollingRefresh(appId, cluster, dataCenter);\n+        }\n+      });\n+    } catch (Throwable ex) {\n+      ApolloConfigException exception =\n+          new ApolloConfigException(\"Schedule long polling refresh failed\", ex);\n+      Cat.logError(exception);\n+      logger.warn(ExceptionUtil.getDetailMessage(exception));\n+    }\n   }\n \n   private void doLongPollingRefresh(String appId, String cluster, String dataCenter) {",
      "parent_sha": "a0bee9d497e7c85a1e7c7d41c543298029e32cf6"
    }
  },
  {
    "oid": "5ad3c0e00a75ca6bb4dce440bc252326b96ddf50",
    "message": "\u91c7\u7528emptyList()",
    "date": "2017-08-15T16:14:43Z",
    "url": "https://github.com/apolloconfig/apollo/commit/5ad3c0e00a75ca6bb4dce440bc252326b96ddf50",
    "details": {
      "sha": "49539fe16325dbf4043691a1136962f15c9e368c",
      "filename": "apollo-configservice/src/main/java/com/ctrip/framework/apollo/metaservice/service/DiscoveryService.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/5ad3c0e00a75ca6bb4dce440bc252326b96ddf50/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fmetaservice%2Fservice%2FDiscoveryService.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/5ad3c0e00a75ca6bb4dce440bc252326b96ddf50/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fmetaservice%2Fservice%2FDiscoveryService.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fmetaservice%2Fservice%2FDiscoveryService.java?ref=5ad3c0e00a75ca6bb4dce440bc252326b96ddf50",
      "patch": "@@ -9,7 +9,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n @Service\n@@ -23,22 +23,22 @@ public List<InstanceInfo> getConfigServiceInstances() {\n     if (application == null) {\n       Tracer.logEvent(\"Apollo.EurekaDiscovery.NotFound\", ServiceNameConsts.APOLLO_CONFIGSERVICE);\n     }\n-    return application != null ? application.getInstances() : new ArrayList<>();\n+    return application != null ? application.getInstances() : Collections.emptyList();\n   }\n \n   public List<InstanceInfo> getMetaServiceInstances() {\n     Application application = eurekaClient.getApplication(ServiceNameConsts.APOLLO_METASERVICE);\n     if (application == null) {\n       Tracer.logEvent(\"Apollo.EurekaDiscovery.NotFound\", ServiceNameConsts.APOLLO_METASERVICE);\n     }\n-    return application != null ? application.getInstances() : new ArrayList<>();\n+    return application != null ? application.getInstances() : Collections.emptyList();\n   }\n \n   public List<InstanceInfo> getAdminServiceInstances() {\n     Application application = eurekaClient.getApplication(ServiceNameConsts.APOLLO_ADMINSERVICE);\n     if (application == null) {\n       Tracer.logEvent(\"Apollo.EurekaDiscovery.NotFound\", ServiceNameConsts.APOLLO_ADMINSERVICE);\n     }\n-    return application != null ? application.getInstances() : new ArrayList<>();\n+    return application != null ? application.getInstances() : Collections.emptyList();\n   }\n }",
      "parent_sha": "d61803b4725daf96b2624c930352044f2609221f"
    }
  },
  {
    "oid": "c09b7be84e7e70d5cc2c9c0d8af8f13b26340cd7",
    "message": "optimize load config on error strategy",
    "date": "2017-08-12T05:57:57Z",
    "url": "https://github.com/apolloconfig/apollo/commit/c09b7be84e7e70d5cc2c9c0d8af8f13b26340cd7",
    "details": {
      "sha": "2263967250de671fd1fb01289b6a4b393d495855",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigRepository.java",
      "status": "modified",
      "additions": 28,
      "deletions": 6,
      "changes": 34,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/c09b7be84e7e70d5cc2c9c0d8af8f13b26340cd7/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigRepository.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/c09b7be84e7e70d5cc2c9c0d8af8f13b26340cd7/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigRepository.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigRepository.java?ref=c09b7be84e7e70d5cc2c9c0d8af8f13b26340cd7",
      "patch": "@@ -7,6 +7,7 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.slf4j.Logger;\n@@ -17,6 +18,8 @@\n import com.ctrip.framework.apollo.core.ConfigConsts;\n import com.ctrip.framework.apollo.core.dto.ApolloConfig;\n import com.ctrip.framework.apollo.core.dto.ServiceDTO;\n+import com.ctrip.framework.apollo.core.schedule.ExponentialSchedulePolicy;\n+import com.ctrip.framework.apollo.core.schedule.SchedulePolicy;\n import com.ctrip.framework.apollo.core.utils.ApolloThreadFactory;\n import com.ctrip.framework.apollo.exceptions.ApolloConfigException;\n import com.ctrip.framework.apollo.exceptions.ApolloConfigStatusCodeException;\n@@ -51,6 +54,8 @@ public class RemoteConfigRepository extends AbstractConfigRepository {\n   private final static ScheduledExecutorService m_executorService;\n   private AtomicReference<ServiceDTO> m_longPollServiceDto;\n   private RateLimiter m_loadConfigRateLimiter;\n+  private AtomicBoolean m_configNeedForceRefresh;\n+  private SchedulePolicy m_loadConfigFailSchedulePolicy;\n   private static final Escaper pathEscaper = UrlEscapers.urlPathSegmentEscaper();\n   private static final Escaper queryParamEscaper = UrlEscapers.urlFormParameterEscaper();\n \n@@ -73,6 +78,9 @@ public RemoteConfigRepository(String namespace) {\n     remoteConfigLongPollService = ApolloInjector.getInstance(RemoteConfigLongPollService.class);\n     m_longPollServiceDto = new AtomicReference<>();\n     m_loadConfigRateLimiter = RateLimiter.create(m_configUtil.getLoadConfigQPS());\n+    m_configNeedForceRefresh = new AtomicBoolean(true);\n+    m_loadConfigFailSchedulePolicy = new ExponentialSchedulePolicy(m_configUtil.getOnErrorRetryInterval(),\n+        m_configUtil.getOnErrorRetryInterval() * 8);\n     this.trySync();\n     this.schedulePeriodicRefresh();\n     this.scheduleLongPollingRefresh();\n@@ -154,7 +162,8 @@ private ApolloConfig loadApolloConfig() {\n     String cluster = m_configUtil.getCluster();\n     String dataCenter = m_configUtil.getDataCenter();\n     Tracer.logEvent(\"Apollo.Client.ConfigMeta\", STRING_JOINER.join(appId, cluster, m_namespace));\n-    int maxRetries = 2;\n+    int maxRetries = m_configNeedForceRefresh.get() ? 2 : 1;\n+    long onErrorSleepTime = 0; // 0 means no sleep\n     Throwable exception = null;\n \n     List<ServiceDTO> configServices = getConfigServices();\n@@ -167,6 +176,18 @@ private ApolloConfig loadApolloConfig() {\n       }\n \n       for (ServiceDTO configService : randomConfigServices) {\n+        if (onErrorSleepTime > 0) {\n+          logger.warn(\n+              \"Load config failed, will retry in {} {}. appId: {}, cluster: {}, namespaces: {}\",\n+              onErrorSleepTime, m_configUtil.getOnErrorRetryIntervalTimeUnit(), appId, cluster, m_namespace);\n+\n+          try {\n+            m_configUtil.getOnErrorRetryIntervalTimeUnit().sleep(onErrorSleepTime);\n+          } catch (InterruptedException e) {\n+            //ignore\n+          }\n+        }\n+\n         String url =\n             assembleQueryConfigUrl(configService.getHomepageUrl(), appId, cluster, m_namespace,\n                 dataCenter, m_configCache.get());\n@@ -179,6 +200,8 @@ private ApolloConfig loadApolloConfig() {\n         try {\n \n           HttpResponse<ApolloConfig> response = m_httpUtil.doGet(request, ApolloConfig.class);\n+          m_configNeedForceRefresh.set(false);\n+          m_loadConfigFailSchedulePolicy.success();\n \n           transaction.addData(\"StatusCode\", response.getStatusCode());\n           transaction.setStatus(Transaction.SUCCESS);\n@@ -215,13 +238,11 @@ private ApolloConfig loadApolloConfig() {\n           transaction.complete();\n         }\n \n+        // if force refresh, do normal sleep, if normal config load, do exponential sleep\n+        onErrorSleepTime = m_configNeedForceRefresh.get() ? m_configUtil.getOnErrorRetryInterval() :\n+            m_loadConfigFailSchedulePolicy.fail();\n       }\n \n-      try {\n-        m_configUtil.getOnErrorRetryIntervalTimeUnit().sleep(m_configUtil.getOnErrorRetryInterval());\n-      } catch (InterruptedException ex) {\n-        //ignore\n-      }\n     }\n     String message = String.format(\n         \"Load Apollo Config failed - appId: %s, cluster: %s, namespace: %s\",\n@@ -271,6 +292,7 @@ public void onLongPollNotified(ServiceDTO longPollNotifiedServiceDto) {\n     m_executorService.submit(new Runnable() {\n       @Override\n       public void run() {\n+        m_configNeedForceRefresh.set(true);\n         trySync();\n       }\n     });",
      "parent_sha": "e4a0094f0f16b2ed485f23c7626c2c4c70b36590"
    }
  },
  {
    "oid": "8e80f87902884833894f3fe0a37e903cb282adaa",
    "message": "clean code for isBlank",
    "date": "2017-09-11T07:26:46Z",
    "url": "https://github.com/apolloconfig/apollo/commit/8e80f87902884833894f3fe0a37e903cb282adaa",
    "details": {
      "sha": "d515198805025e6d03588bf216e0498974cf3edd",
      "filename": "apollo-core/src/main/java/com/ctrip/framework/foundation/internals/Utils.java",
      "status": "modified",
      "additions": 3,
      "deletions": 13,
      "changes": 16,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/8e80f87902884833894f3fe0a37e903cb282adaa/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Ffoundation%2Finternals%2FUtils.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/8e80f87902884833894f3fe0a37e903cb282adaa/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Ffoundation%2Finternals%2FUtils.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Ffoundation%2Finternals%2FUtils.java?ref=8e80f87902884833894f3fe0a37e903cb282adaa",
      "patch": "@@ -1,20 +1,10 @@\n package com.ctrip.framework.foundation.internals;\n \n+import com.google.common.base.Strings;\n+\n public class Utils {\n   public static boolean isBlank(String str) {\n-    if (str == null || str.length() == 0) {\n-      return true;\n-    }\n-\n-    int length = str.length();\n-    for (int i = 0; i < length; i++) {\n-      char ch = str.charAt(i);\n-\n-      if (!Character.isWhitespace(ch)) {\n-        return false;\n-      }\n-    }\n-    return true;\n+    return Strings.nullToEmpty(str).trim().isEmpty();\n   }\n \n   public static boolean isOSWindows() {",
      "parent_sha": "fe4f3b8d80058fba367512e2fb3e79ad32aeb565"
    }
  },
  {
    "oid": "dc38354f6f3bedab224d97c0084b997a5bdf498f",
    "message": "fix coverity bug",
    "date": "2017-04-20T05:34:51Z",
    "url": "https://github.com/apolloconfig/apollo/commit/dc38354f6f3bedab224d97c0084b997a5bdf498f",
    "details": {
      "sha": "66c0d3678d2f5746b7b9ba17482e73f5b82c0f35",
      "filename": "apollo-core/src/main/java/com/ctrip/framework/foundation/internals/NetworkInterfaceManager.java",
      "status": "modified",
      "additions": 12,
      "deletions": 3,
      "changes": 15,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/dc38354f6f3bedab224d97c0084b997a5bdf498f/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Ffoundation%2Finternals%2FNetworkInterfaceManager.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/dc38354f6f3bedab224d97c0084b997a5bdf498f/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Ffoundation%2Finternals%2FNetworkInterfaceManager.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Ffoundation%2Finternals%2FNetworkInterfaceManager.java?ref=dc38354f6f3bedab224d97c0084b997a5bdf498f",
      "patch": "@@ -98,8 +98,12 @@ private void load() {\n \n     try {\n       Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n-      List<NetworkInterface> nis = interfaces == null ? Collections.<NetworkInterface>emptyList()\n-          : Collections.list(NetworkInterface.getNetworkInterfaces());\n+      List<NetworkInterface> nis;\n+      if (interfaces == null) {\n+        nis = Collections.emptyList();\n+      } else {\n+        nis = Collections.list(NetworkInterface.getNetworkInterfaces());\n+      }\n       List<InetAddress> addresses = new ArrayList<InetAddress>();\n       InetAddress local = null;\n \n@@ -113,9 +117,14 @@ private void load() {\n       } catch (Exception e) {\n         // ignore\n       }\n-      m_local = local;\n+      if (local != null) {\n+        m_local = local;\n+        return;\n+      }\n     } catch (SocketException e) {\n       // ignore it\n     }\n+\n+    m_local = InetAddress.getLoopbackAddress();\n   }\n }",
      "parent_sha": "37788d860286ba1d9ed03080882688a7c0a9f00d"
    }
  },
  {
    "oid": "c45a75f4775b5f7f7179bb28c76f621ccd6aa23e",
    "message": "fix concurrent modification exception for release message scanner",
    "date": "2016-08-02T03:36:36Z",
    "url": "https://github.com/apolloconfig/apollo/commit/c45a75f4775b5f7f7179bb28c76f621ccd6aa23e",
    "details": {
      "sha": "39fea52b5a00097e6afdf0279c62d1a124b2f2a0",
      "filename": "apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/message/ReleaseMessageScanner.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/c45a75f4775b5f7f7179bb28c76f621ccd6aa23e/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fmessage%2FReleaseMessageScanner.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/c45a75f4775b5f7f7179bb28c76f621ccd6aa23e/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fmessage%2FReleaseMessageScanner.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fmessage%2FReleaseMessageScanner.java?ref=c45a75f4775b5f7f7179bb28c76f621ccd6aa23e",
      "patch": "@@ -38,7 +38,7 @@ public class ReleaseMessageScanner implements InitializingBean {\n   private long maxIdScanned;\n \n   public ReleaseMessageScanner() {\n-    listeners = Lists.newLinkedList();\n+    listeners = Lists.newCopyOnWriteArrayList();\n     executorService = Executors.newScheduledThreadPool(1, ApolloThreadFactory\n         .create(\"ReleaseMessageScanner\", true));\n   }",
      "parent_sha": "d21a6a19bed61b55cb1e286b92b7bfa2bfc2db44"
    }
  },
  {
    "oid": "0a6267d62af17fae6b91624b75639f659e22864f",
    "message": "support large file with namespace value length limit override",
    "date": "2016-11-30T06:31:36Z",
    "url": "https://github.com/apolloconfig/apollo/commit/0a6267d62af17fae6b91624b75639f659e22864f",
    "details": {
      "sha": "3ef68185b1fa13d3779f086b7b3793d7887211fa",
      "filename": "apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ItemService.java",
      "status": "modified",
      "additions": 92,
      "deletions": 10,
      "changes": 102,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/0a6267d62af17fae6b91624b75639f659e22864f/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fservice%2FItemService.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/0a6267d62af17fae6b91624b75639f659e22864f/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fservice%2FItemService.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fservice%2FItemService.java?ref=0a6267d62af17fae6b91624b75639f659e22864f",
      "patch": "@@ -1,23 +1,40 @@\n package com.ctrip.framework.apollo.biz.service;\n \n+import com.google.common.base.Strings;\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n import com.ctrip.framework.apollo.biz.entity.Audit;\n import com.ctrip.framework.apollo.biz.entity.Item;\n import com.ctrip.framework.apollo.biz.entity.Namespace;\n import com.ctrip.framework.apollo.biz.repository.ItemRepository;\n import com.ctrip.framework.apollo.common.utils.BeanUtils;\n import com.ctrip.framework.apollo.common.exception.BadRequestException;\n import com.ctrip.framework.apollo.common.exception.NotFoundException;\n+import com.ctrip.framework.apollo.core.utils.ApolloThreadFactory;\n import com.ctrip.framework.apollo.core.utils.StringUtils;\n+import com.dianping.cat.Cat;\n+import com.dianping.cat.message.Message;\n+import com.dianping.cat.message.Transaction;\n \n+import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n \n+import java.lang.reflect.Type;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n \n @Service\n-public class ItemService {\n+public class ItemService implements InitializingBean {\n+  private static final int DEFAULT_LIMIT_UPDATE_INTERVAL_IN_SECONDS = 60;\n \n   @Autowired\n   private ItemRepository itemRepository;\n@@ -31,6 +48,61 @@ public class ItemService {\n   @Autowired\n   private ServerConfigService serverConfigService;\n \n+  private AtomicInteger globalKeyLengthLimit;\n+\n+  private AtomicInteger globalValueLengthLimit;\n+\n+  private AtomicReference<Map<Long, Integer>> namespaceValueLengthOverride;\n+\n+  private Gson gson;\n+\n+  private ScheduledExecutorService executorService;\n+\n+  private static final Type namespaceValueLengthOverrideTypeReference =\n+      new TypeToken<Map<Long, Integer>>() {\n+      }.getType();\n+\n+  public ItemService() {\n+    gson = new Gson();\n+    globalKeyLengthLimit = new AtomicInteger(128);\n+    globalValueLengthLimit = new AtomicInteger(20000);\n+    namespaceValueLengthOverride = new AtomicReference<>();\n+    executorService = Executors.newScheduledThreadPool(1, ApolloThreadFactory\n+        .create(\"ItemServiceLimitUpdater\", true));\n+  }\n+\n+  @Override\n+  public void afterPropertiesSet() throws Exception {\n+    executorService.scheduleWithFixedDelay(() -> {\n+      Transaction transaction = Cat.newTransaction(\"Apollo.ItemServiceLimitUpdater\", \"updateLimit\");\n+      try {\n+        updateLimits();\n+        transaction.setStatus(Message.SUCCESS);\n+      } catch (Throwable ex) {\n+        transaction.setStatus(ex);\n+      } finally {\n+        transaction.complete();\n+      }\n+    }, 0, getLimitUpdateIntervalInSeconds(), TimeUnit.SECONDS);\n+  }\n+\n+  private void updateLimits() {\n+    String keyLengthLimit = serverConfigService.getValue(\"item.key.length.limit\", null);\n+    if (!Strings.isNullOrEmpty(keyLengthLimit)) {\n+      globalKeyLengthLimit.set(Integer.valueOf(keyLengthLimit));\n+    }\n+    String valueLengthLimit = serverConfigService.getValue(\"item.value.length.limit\", null);\n+    if (!Strings.isNullOrEmpty(valueLengthLimit)) {\n+      globalValueLengthLimit.set(Integer.valueOf(valueLengthLimit));\n+    }\n+    String namespaceValueLengthOverrideString =\n+        serverConfigService.getValue(\"namespace.value.length.limit.override\", null);\n+    if (!Strings.isNullOrEmpty(namespaceValueLengthOverrideString)) {\n+      namespaceValueLengthOverride.set(gson.fromJson(\n+          namespaceValueLengthOverrideString, namespaceValueLengthOverrideTypeReference));\n+    }\n+  }\n+\n   @Transactional\n   public Item delete(long id, String operator) {\n     Item item = itemRepository.findOne(id);\n@@ -100,7 +172,7 @@ public List<Item> findItems(String appId, String clusterName, String namespaceNa\n   @Transactional\n   public Item save(Item entity) {\n     checkItemKeyLength(entity.getKey());\n-    checkItemValueLength(entity.getValue());\n+    checkItemValueLength(entity.getNamespaceId(), entity.getValue());\n \n     entity.setId(0);//protection\n \n@@ -120,7 +192,7 @@ public Item save(Item entity) {\n \n   @Transactional\n   public Item update(Item item) {\n-    checkItemValueLength(item.getValue());\n+    checkItemValueLength(item.getNamespaceId(), item.getValue());\n     Item managedItem = itemRepository.findOne(item.getId());\n     BeanUtils.copyEntityProperties(item, managedItem);\n     managedItem = itemRepository.save(managedItem);\n@@ -131,20 +203,30 @@ public Item update(Item item) {\n     return managedItem;\n   }\n \n-  private boolean checkItemValueLength(String value) {\n-    int lengthLimit = Integer.valueOf(serverConfigService.getValue(\"item.value.length.limit\", \"20000\"));\n-    if (!StringUtils.isEmpty(value) && value.length() > lengthLimit) {\n-      throw new BadRequestException(\"value too long. length limit:\" + lengthLimit);\n+  private boolean checkItemValueLength(long namespaceId, String value) {\n+    int limit = getItemValueLengthLimit(namespaceId);\n+    if (!StringUtils.isEmpty(value) && value.length() > limit) {\n+      throw new BadRequestException(\"value too long. length limit:\" + limit);\n     }\n     return true;\n   }\n \n   private boolean checkItemKeyLength(String key) {\n-    int lengthLimit = Integer.valueOf(serverConfigService.getValue(\"item.key.length.limit\", \"128\"));\n-    if (!StringUtils.isEmpty(key) && key.length() > lengthLimit) {\n-      throw new BadRequestException(\"key too long. length limit:\" + lengthLimit);\n+    if (!StringUtils.isEmpty(key) && key.length() > globalKeyLengthLimit.get()) {\n+      throw new BadRequestException(\"key too long. length limit:\" + globalKeyLengthLimit.get());\n     }\n     return true;\n   }\n \n+  private int getItemValueLengthLimit(long namespaceId) {\n+    if (namespaceValueLengthOverride.get() != null && namespaceValueLengthOverride.get()\n+        .containsKey(namespaceId)) {\n+      return namespaceValueLengthOverride.get().get(namespaceId);\n+    }\n+    return globalValueLengthLimit.get();\n+  }\n+\n+  private int getLimitUpdateIntervalInSeconds() {\n+    return DEFAULT_LIMIT_UPDATE_INTERVAL_IN_SECONDS;\n+  }\n }",
      "parent_sha": "fc4f3e85742f95862566ee99efed57317fee2e6e"
    }
  },
  {
    "oid": "bd4f31158b6914cc74c3026ad3948d26a26f3efc",
    "message": "fix default charset issue",
    "date": "2017-06-09T10:07:29Z",
    "url": "https://github.com/apolloconfig/apollo/commit/bd4f31158b6914cc74c3026ad3948d26a26f3efc",
    "details": {
      "sha": "4aa34e7686337138b7d34ee6bd49070e6429ec53",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/util/http/HttpUtil.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/bd4f31158b6914cc74c3026ad3948d26a26f3efc/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Futil%2Fhttp%2FHttpUtil.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/bd4f31158b6914cc74c3026ad3948d26a26f3efc/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Futil%2Fhttp%2FHttpUtil.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Futil%2Fhttp%2FHttpUtil.java?ref=bd4f31158b6914cc74c3026ad3948d26a26f3efc",
      "patch": "@@ -16,6 +16,7 @@\n import com.google.common.io.BaseEncoding;\n import com.google.common.io.CharStreams;\n import com.google.gson.Gson;\n+import java.nio.charset.StandardCharsets;\n \n /**\n  * @author Jason Song(song_s@ctrip.com)\n@@ -104,7 +105,7 @@ private <T> HttpResponse<T> doGetWithSerializeFunction(HttpRequest httpRequest,\n       statusCode = conn.getResponseCode();\n \n       if (statusCode == 200) {\n-        isr = new InputStreamReader(conn.getInputStream());\n+        isr = new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8);\n         String content = CharStreams.toString(isr);\n         return new HttpResponse<>(statusCode, serializeFunction.apply(content));\n       }",
      "parent_sha": "1ca1b8d10b55730be211c307011f0a3231ad9adc"
    }
  },
  {
    "oid": "82c86f327dbf1fb2802e9ef1943f23903f80c280",
    "message": "fix npe",
    "date": "2017-02-21T03:35:35Z",
    "url": "https://github.com/apolloconfig/apollo/commit/82c86f327dbf1fb2802e9ef1943f23903f80c280",
    "details": {
      "sha": "32870f06957dfdeb4c6fc5fcb35e3513282699ce",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/ctrip/CtripMQService.java",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/82c86f327dbf1fb2802e9ef1943f23903f80c280/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fctrip%2FCtripMQService.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/82c86f327dbf1fb2802e9ef1943f23903f80c280/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fctrip%2FCtripMQService.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fctrip%2FCtripMQService.java?ref=82c86f327dbf1fb2802e9ef1943f23903f80c280",
      "patch": "@@ -2,7 +2,6 @@\n \n import com.google.gson.Gson;\n \n-import com.ctrip.framework.apollo.common.dto.ReleaseDTO;\n import com.ctrip.framework.apollo.common.entity.App;\n import com.ctrip.framework.apollo.core.enums.Env;\n import com.ctrip.framework.apollo.portal.component.config.PortalConfig;\n@@ -81,12 +80,10 @@ private PublishMsg buildPublishMsg(Env env, ReleaseHistoryBO releaseHistory) {\n     App app = appService.load(appId);\n     msg.setInfluence_bu(app.getOrgName());\n     msg.setAppid(appId);\n-\n-    ReleaseDTO release = releaseService.findReleaseById(env, releaseHistory.getReleaseId());\n-    msg.setAssginee(release.getDataChangeCreatedBy());\n-    msg.setDesc(\n-        gson.toJson(releaseService.compare(env, releaseHistory.getPreviousReleaseId(), releaseHistory.getReleaseId())));\n-    msg.setOperation_time(TIMESTAMP_FORMAT.format(release.getDataChangeCreatedTime()));\n+    msg.setAssginee(releaseHistory.getOperator());\n+    msg.setOperation_time(TIMESTAMP_FORMAT.format(releaseHistory.getReleaseTime()));\n+    msg.setDesc(gson.toJson(releaseService.compare(env, releaseHistory.getPreviousReleaseId(),\n+                                                   releaseHistory.getReleaseId())));\n \n     return msg;\n   }",
      "parent_sha": "dcce97bc0ca53ea4b45df5346f05b0c9af2aeb93"
    }
  },
  {
    "oid": "38f027455bf22bf73d19dd47ce1696467f6187a2",
    "message": "logger exception",
    "date": "2016-06-16T10:03:15Z",
    "url": "https://github.com/apolloconfig/apollo/commit/38f027455bf22bf73d19dd47ce1696467f6187a2",
    "details": {
      "sha": "42a3887ec04c883e9a4d65ef78313713a1bae04e",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/listener/CreationListener.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/38f027455bf22bf73d19dd47ce1696467f6187a2/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Flistener%2FCreationListener.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/38f027455bf22bf73d19dd47ce1696467f6187a2/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Flistener%2FCreationListener.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Flistener%2FCreationListener.java?ref=38f027455bf22bf73d19dd47ce1696467f6187a2",
      "patch": "@@ -37,7 +37,7 @@ public void onAppCreationEvent(AppCreationEvent event) {\n       try {\n         appAPI.createApp(env, appDTO);\n       } catch (HttpStatusCodeException e) {\n-        logger.error(ExceptionUtils.toString(e));\n+        logger.error(\"call appAPI.createApp error.[{app}, {env}]\", appDTO.getAppId(), env, e);\n       }\n     }\n   }\n@@ -50,7 +50,7 @@ public void onAppNamespaceCreationEvent(AppNamespaceCreationEvent event){\n       try {\n         namespaceAPI.createOrUpdateAppNamespace(env, dto);\n       } catch (HttpStatusCodeException e) {\n-        logger.error(ExceptionUtils.toString(e));\n+        logger.error(\"call namespaceAPI.createOrUpdateAppNamespace error. [{app}, {env}]\", dto.getAppId(), env, e);\n       }\n     }\n   }",
      "parent_sha": "953b1ff117577bfbb3e84dc6ca32833051c493ef"
    }
  },
  {
    "oid": "be9385c8b822e6175f135c4e2434bed5aa982348",
    "message": "update",
    "date": "2016-06-12T08:24:28Z",
    "url": "https://github.com/apolloconfig/apollo/commit/be9385c8b822e6175f135c4e2434bed5aa982348",
    "details": {
      "sha": "1089f3be3a3a13d9a82e654ff454301312bc8659",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/PortalNamespaceService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/be9385c8b822e6175f135c4e2434bed5aa982348/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fservice%2FPortalNamespaceService.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/be9385c8b822e6175f135c4e2434bed5aa982348/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fservice%2FPortalNamespaceService.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fservice%2FPortalNamespaceService.java?ref=be9385c8b822e6175f135c4e2434bed5aa982348",
      "patch": "@@ -141,7 +141,7 @@ private NamespaceVO parseNamespace(String appId, Env env, String clusterName, Na\n       itemVos.add(itemVO);\n     }\n \n-    //count deleted item num\n+    //deleted items\n     List<NamespaceVO.ItemVO> deletedItems = countDeletedItemNum(items, releaseItems);\n     itemVos.addAll(deletedItems);\n     modifiedItemCnt += deletedItems.size();",
      "parent_sha": "0fb517a27881ddf0fd892eec98fad35a40a40c83"
    }
  },
  {
    "oid": "342ba888ba7e7c9e6f5a4010d03ebc5bbab00d81",
    "message": "Use LinkedHashSet for deterministic iterations (#2918)",
    "date": "2020-02-08T02:23:56Z",
    "url": "https://github.com/apolloconfig/apollo/commit/342ba888ba7e7c9e6f5a4010d03ebc5bbab00d81",
    "details": {
      "sha": "07801cffdb11ac185a52c7356eb0cbb22cf66cba",
      "filename": "apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/ReleaseMessageServiceWithCacheTest.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/342ba888ba7e7c9e6f5a4010d03ebc5bbab00d81/apollo-configservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fservice%2FReleaseMessageServiceWithCacheTest.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/342ba888ba7e7c9e6f5a4010d03ebc5bbab00d81/apollo-configservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fservice%2FReleaseMessageServiceWithCacheTest.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-configservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fservice%2FReleaseMessageServiceWithCacheTest.java?ref=342ba888ba7e7c9e6f5a4010d03ebc5bbab00d81",
      "patch": "@@ -94,13 +94,15 @@ public void testWhenHasReleaseMsgAndHasRepeatMsg() throws Exception {\n \n     List<ReleaseMessage> latestReleaseMsgGroupByMsgContent =\n         releaseMessageServiceWithCache\n-            .findLatestReleaseMessagesGroupByMessages(Sets.newHashSet(someMsgContent, anotherMsgContent));\n+            .findLatestReleaseMessagesGroupByMessages(Sets.newLinkedHashSet(\n+                    Arrays.asList(someMsgContent, anotherMsgContent))\n+            );\n \n     assertEquals(2, latestReleaseMsgGroupByMsgContent.size());\n-    assertEquals(1, latestReleaseMsgGroupByMsgContent.get(1).getId());\n-    assertEquals(someMsgContent, latestReleaseMsgGroupByMsgContent.get(1).getMessage());\n-    assertEquals(3, latestReleaseMsgGroupByMsgContent.get(0).getId());\n-    assertEquals(anotherMsgContent, latestReleaseMsgGroupByMsgContent.get(0).getMessage());\n+    assertEquals(3, latestReleaseMsgGroupByMsgContent.get(1).getId());\n+    assertEquals(anotherMsgContent, latestReleaseMsgGroupByMsgContent.get(1).getMessage());\n+    assertEquals(1, latestReleaseMsgGroupByMsgContent.get(0).getId());\n+    assertEquals(someMsgContent, latestReleaseMsgGroupByMsgContent.get(0).getMessage());\n \n   }\n ",
      "parent_sha": "a1d45a29dec3c7e8e329a39e9936f30d140b0bce"
    }
  },
  {
    "oid": "f17e7ea8190f857460a311235d89e695411b812b",
    "message": "fix concurrent modification exception",
    "date": "2016-05-05T06:50:07Z",
    "url": "https://github.com/apolloconfig/apollo/commit/f17e7ea8190f857460a311235d89e695411b812b",
    "details": {
      "sha": "f3c9cfc6d619c242281a4d0069ead1250c655753",
      "filename": "apollo-configservice/src/main/java/com/ctrip/apollo/configservice/controller/NotificationController.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/f17e7ea8190f857460a311235d89e695411b812b/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fapollo%2Fconfigservice%2Fcontroller%2FNotificationController.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/f17e7ea8190f857460a311235d89e695411b812b/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fapollo%2Fconfigservice%2Fcontroller%2FNotificationController.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fapollo%2Fconfigservice%2Fcontroller%2FNotificationController.java?ref=f17e7ea8190f857460a311235d89e695411b812b",
      "patch": "@@ -27,7 +27,6 @@\n import org.springframework.web.bind.annotation.RestController;\n import org.springframework.web.context.request.async.DeferredResult;\n \n-import java.util.Collection;\n import java.util.List;\n import java.util.Objects;\n \n@@ -133,13 +132,15 @@ public void handleMessage(String message, String channel) {\n         new ResponseEntity<>(\n             new ApolloConfigNotification(keys.get(2)), HttpStatus.OK);\n \n-    Collection<DeferredResult<ResponseEntity<ApolloConfigNotification>>>\n-        results = deferredResults.get(message);\n+    //create a new list to avoid ConcurrentModificationException\n+    List<DeferredResult<ResponseEntity<ApolloConfigNotification>>> results =\n+        Lists.newArrayList(deferredResults.get(message));\n     logger.info(\"Notify {} clients for key {}\", results.size(), message);\n \n     for (DeferredResult<ResponseEntity<ApolloConfigNotification>> result : results) {\n       result.setResult(notification);\n     }\n+    logger.info(\"Notification completed\");\n   }\n \n   private void logWatchedKeysToCat(List<String> watchedKeys, String eventName) {",
      "parent_sha": "9bf33f704ca0c0ffb754037853de8af548df885f"
    }
  },
  {
    "oid": "525a2b8670cae722c7f9b18de625b94e92e6378c",
    "message": "add spport for windows local cache dir",
    "date": "2016-08-29T03:12:19Z",
    "url": "https://github.com/apolloconfig/apollo/commit/525a2b8670cae722c7f9b18de625b94e92e6378c",
    "details": {
      "sha": "bc42c548d7f359b34d7134f2f04fc8685499231f",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/util/ConfigUtil.java",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/525a2b8670cae722c7f9b18de625b94e92e6378c/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Futil%2FConfigUtil.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/525a2b8670cae722c7f9b18de625b94e92e6378c/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Futil%2FConfigUtil.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Futil%2FConfigUtil.java?ref=525a2b8670cae722c7f9b18de625b94e92e6378c",
      "patch": "@@ -185,8 +185,8 @@ public int getLongPollQPS() {\n   }\n \n   public String getDefaultLocalCacheDir() {\n-    //TODO call Framework Foundation to get the default local cache dir\n-    return String.format(\"/opt/data/%s\", getAppId());\n+    String cacheRoot = isOSWindows() ? \"C:\\\\opt\\\\data\\\\%s\" : \"/opt/data/%s\";\n+    return String.format(cacheRoot, getAppId());\n   }\n \n   public boolean isInLocalMode() {\n@@ -198,4 +198,12 @@ public boolean isInLocalMode() {\n     }\n     return false;\n   }\n+\n+  public boolean isOSWindows() {\n+    String osName = System.getProperty(\"os.name\");\n+    if (Strings.isNullOrEmpty(osName)) {\n+      return false;\n+    }\n+    return osName.startsWith(\"Windows\");\n+  }\n }",
      "parent_sha": "ee7148f1cdbcbec4bd07870c160d04a17b641a39"
    }
  },
  {
    "oid": "ea60157549e595de2d858ed831f59de7f01654b2",
    "message": "fix the performance issue when calling getHostName (#2152)",
    "date": "2019-04-21T07:11:28Z",
    "url": "https://github.com/apolloconfig/apollo/commit/ea60157549e595de2d858ed831f59de7f01654b2",
    "details": {
      "sha": "fcbdd6d0842ec72192102e42ca7863989735f911",
      "filename": "apollo-core/src/main/java/com/ctrip/framework/foundation/internals/NetworkInterfaceManager.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/ea60157549e595de2d858ed831f59de7f01654b2/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Ffoundation%2Finternals%2FNetworkInterfaceManager.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/ea60157549e595de2d858ed831f59de7f01654b2/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Ffoundation%2Finternals%2FNetworkInterfaceManager.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Ffoundation%2Finternals%2FNetworkInterfaceManager.java?ref=ea60157549e595de2d858ed831f59de7f01654b2",
      "patch": "@@ -42,11 +42,16 @@ public InetAddress findValidateIp(List<InetAddress> addresses) {\n           weight += 2;\n         }\n \n+        /**\n+         * The following logic is removed as we will sort the network interfaces according to the index asc to determine\n+         * the priorities between network interfaces, see https://github.com/ctripcorp/apollo/pull/1986\n+         */\n         // has host name\n-        // TODO fix performance issue when calling getHostName\n+        /*\n         if (!Objects.equals(address.getHostName(), address.getHostAddress())) {\n           weight += 1;\n         }\n+        */\n \n         if (weight > maxWeight) {\n           maxWeight = weight;",
      "parent_sha": "116403888cbd3763bad89e397c51ca4e986488af"
    }
  },
  {
    "oid": "96c2bcf5fb91bd4e73cc3b9324f1c901d6a9f6b1",
    "message": "bugfix",
    "date": "2016-06-12T08:40:49Z",
    "url": "https://github.com/apolloconfig/apollo/commit/96c2bcf5fb91bd4e73cc3b9324f1c901d6a9f6b1",
    "details": {
      "sha": "1fd3066f6263d1b0c7cb649d8166cebca2d7fbe3",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/PortalConfigService.java",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/96c2bcf5fb91bd4e73cc3b9324f1c901d6a9f6b1/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fservice%2FPortalConfigService.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/96c2bcf5fb91bd4e73cc3b9324f1c901d6a9f6b1/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fservice%2FPortalConfigService.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fservice%2FPortalConfigService.java?ref=96c2bcf5fb91bd4e73cc3b9324f1c901d6a9f6b1",
      "patch": "@@ -189,23 +189,24 @@ private ItemChangeSets parseChangeSets(NamespaceIdentifer namespace, List<ItemDT\n \n           changeSets.addCreateItem(buildItem(namespaceId, ++maxLineNum, sourceItem));\n \n-        } else if (isModified(sourceValue, targetItem.getValue(), sourceComment, targetItem.getComment())) {//modified items\n+        } else if (isModified(sourceValue, targetItem.getValue(), sourceComment,\n+                              targetItem.getComment())) {//modified items\n           targetItem.setValue(sourceValue);\n           targetItem.setComment(sourceComment);\n           changeSets.addUpdateItem(targetItem);\n         }\n       }\n-    }\n \n-    //parse deleted items\n-    List<ItemDTO> deletedItems = new LinkedList<>();\n-    Map<String, ItemDTO> sourceItemMap = BeanUtils.mapByKey(\"key\", sourceItems);\n-    for (ItemDTO targetItem: targetItems){\n-      if (sourceItemMap.get(targetItem.getKey()) == null){\n-        deletedItems.add(targetItem);\n+      //parse deleted items\n+      List<ItemDTO> deletedItems = new LinkedList<>();\n+      Map<String, ItemDTO> sourceItemMap = BeanUtils.mapByKey(\"key\", sourceItems);\n+      for (ItemDTO item : targetItems) {\n+        if (sourceItemMap.get(item.getKey()) == null) {\n+          deletedItems.add(item);\n+        }\n       }\n+      changeSets.setDeleteItems(deletedItems);\n     }\n-    changeSets.setDeleteItems(deletedItems);\n \n     return changeSets;\n   }",
      "parent_sha": "be9385c8b822e6175f135c4e2434bed5aa982348"
    }
  },
  {
    "oid": "3c6baa4a6f5700f5b6a7fe8458ee8d5e286085e2",
    "message": "fix flaky test in apollo-biz",
    "date": "2022-10-28T01:29:37Z",
    "url": "https://github.com/apolloconfig/apollo/commit/3c6baa4a6f5700f5b6a7fe8458ee8d5e286085e2",
    "details": {
      "sha": "17c7c7094c59457a7750ff7acedbbc9e5b1a873d",
      "filename": "apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/entity/JpaMapFieldJsonConverterTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/3c6baa4a6f5700f5b6a7fe8458ee8d5e286085e2/apollo-biz%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fentity%2FJpaMapFieldJsonConverterTest.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/3c6baa4a6f5700f5b6a7fe8458ee8d5e286085e2/apollo-biz%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fentity%2FJpaMapFieldJsonConverterTest.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-biz%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fentity%2FJpaMapFieldJsonConverterTest.java?ref=3c6baa4a6f5700f5b6a7fe8458ee8d5e286085e2",
      "patch": "@@ -23,6 +23,7 @@\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.Map;\n import org.junit.jupiter.api.Test;\n import org.springframework.core.io.ClassPathResource;\n@@ -58,7 +59,7 @@ void convertToDatabaseColumn_oneElement() throws IOException {\n \n   @Test\n   void convertToDatabaseColumn_twoElement() throws IOException {\n-    Map<String, String> map = new HashMap<>(8);\n+    Map<String, String> map = new LinkedHashMap<>(8);\n     map.put(\"a\", \"1\");\n     map.put(\"disableCheck\", \"true\");\n ",
      "parent_sha": "d849c02f1089007ba740c3ae18381679669392cb"
    }
  },
  {
    "oid": "8fa2cc07a1cc01d586c24db1f218f50b122b6e4a",
    "message": "reformat",
    "date": "2016-08-15T06:12:21Z",
    "url": "https://github.com/apolloconfig/apollo/commit/8fa2cc07a1cc01d586c24db1f218f50b122b6e4a",
    "details": {
      "sha": "960afa2799eeef7d0400599a35c76be10521d5d0",
      "filename": "apollo-common/src/main/java/com/ctrip/framework/apollo/common/controller/GlobalDefaultExceptionHandler.java",
      "status": "modified",
      "additions": 73,
      "deletions": 72,
      "changes": 145,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/8fa2cc07a1cc01d586c24db1f218f50b122b6e4a/apollo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcommon%2Fcontroller%2FGlobalDefaultExceptionHandler.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/8fa2cc07a1cc01d586c24db1f218f50b122b6e4a/apollo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcommon%2Fcontroller%2FGlobalDefaultExceptionHandler.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcommon%2Fcontroller%2FGlobalDefaultExceptionHandler.java?ref=8fa2cc07a1cc01d586c24db1f218f50b122b6e4a",
      "patch": "@@ -3,6 +3,9 @@\n import com.google.gson.Gson;\n import com.google.gson.reflect.TypeToken;\n \n+import com.ctrip.framework.apollo.common.exception.AbstractApolloHttpException;\n+import com.dianping.cat.Cat;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpHeaders;\n@@ -15,9 +18,6 @@\n import org.springframework.web.bind.annotation.ExceptionHandler;\n import org.springframework.web.client.HttpStatusCodeException;\n \n-import com.ctrip.framework.apollo.common.exception.AbstractApolloHttpException;\n-import com.dianping.cat.Cat;\n-\n import java.lang.reflect.Type;\n import java.time.LocalDateTime;\n import java.time.format.DateTimeFormatter;\n@@ -34,74 +34,75 @@\n \n @ControllerAdvice\n public class GlobalDefaultExceptionHandler {\n-\tprivate Gson gson = new Gson();\n-\tprivate static Type mapType = new TypeToken<Map<String, Object>>() {}.getType();\n-\n-\tprivate static final Logger logger = LoggerFactory.getLogger(GlobalDefaultExceptionHandler.class);\n-\n-\t//\u5904\u7406\u7cfb\u7edf\u5185\u7f6e\u7684Exception\n-\t@ExceptionHandler(Throwable.class)\n-\tpublic ResponseEntity<Map<String, Object>> exception(HttpServletRequest request, Throwable ex) {\n-\t\treturn handleError(request, INTERNAL_SERVER_ERROR, ex);\n-\t}\n-\n-\t@ExceptionHandler({HttpRequestMethodNotSupportedException.class, HttpMediaTypeException.class})\n-\tpublic ResponseEntity<Map<String, Object>> badRequest(HttpServletRequest request,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tServletException ex) {\n-\t\treturn handleError(request, BAD_REQUEST, ex);\n-\t}\n-\n-\t@ExceptionHandler(HttpStatusCodeException.class)\n-\tpublic ResponseEntity<Map<String, Object>> restTemplateException(HttpServletRequest request,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t HttpStatusCodeException ex) {\n-\t\treturn handleError(request, ex.getStatusCode(), ex);\n-\t}\n-\n-\t@ExceptionHandler(AccessDeniedException.class)\n-\tpublic ResponseEntity<Map<String, Object>> accessDeny(HttpServletRequest request,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAccessDeniedException ex) {\n-\t\treturn handleError(request, FORBIDDEN, ex);\n-\t}\n-\n-\t//\u5904\u7406\u81ea\u5b9a\u4e49Exception\n-\t@ExceptionHandler({AbstractApolloHttpException.class})\n-\tpublic ResponseEntity<Map<String, Object>> badRequest(HttpServletRequest request, AbstractApolloHttpException ex) {\n-\t\treturn handleError(request, ex);\n-\t}\n-\n-\n-\tprivate ResponseEntity<Map<String, Object>> handleError(HttpServletRequest request,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAbstractApolloHttpException ex) {\n-\t\treturn handleError(request, ex.getHttpStatus(), ex);\n-\t}\n-\n-\n-\tprivate ResponseEntity<Map<String, Object>> handleError(HttpServletRequest request,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHttpStatus status, Throwable ex) {\n-\t\tString message = ex.getMessage();\n-\n-\t\tlogger.error(message, ex);\n-\t\tCat.logError(ex);\n-\n-\n-\t\tMap<String, Object> errorAttributes = new HashMap<>();\n-\n-\t\t//\u5982\u679c\u662fadmin server\u5f15\u8d77\u7684\u5f02\u5e38,\u5219\u663e\u793a\u5185\u90e8\u7684\u5f02\u5e38\u4fe1\u606f\n-\t\tif (ex instanceof HttpStatusCodeException){\n-\t\t\terrorAttributes = gson.fromJson(((HttpStatusCodeException)ex).getResponseBodyAsString(), mapType);\n-\t\t\tstatus = ((HttpStatusCodeException)ex).getStatusCode();\n-\t\t} else {\n-\t\t\terrorAttributes.put(\"status\", status.value());\n-\t\t\terrorAttributes.put(\"message\", message);\n-\t\t\terrorAttributes.put(\"timestamp\",\n-\t\t\t\t\t\t\t\t\t\t\t\t\tLocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));\n-\t\t\terrorAttributes.put(\"exception\", ex.getClass().getName());\n-\n-\t\t}\n-\n-\t\tHttpHeaders headers = new HttpHeaders();\n-\t\theaders.setContentType(APPLICATION_JSON);\n-\t\treturn new ResponseEntity<>(errorAttributes, headers, status);\n-\t}\n+  private Gson gson = new Gson();\n+  private static Type mapType = new TypeToken<Map<String, Object>>() {\n+  }.getType();\n+\n+  private static final Logger logger = LoggerFactory.getLogger(GlobalDefaultExceptionHandler.class);\n+\n+  //\u5904\u7406\u7cfb\u7edf\u5185\u7f6e\u7684Exception\n+  @ExceptionHandler(Throwable.class)\n+  public ResponseEntity<Map<String, Object>> exception(HttpServletRequest request, Throwable ex) {\n+    return handleError(request, INTERNAL_SERVER_ERROR, ex);\n+  }\n+\n+  @ExceptionHandler({HttpRequestMethodNotSupportedException.class, HttpMediaTypeException.class})\n+  public ResponseEntity<Map<String, Object>> badRequest(HttpServletRequest request,\n+                                                        ServletException ex) {\n+    return handleError(request, BAD_REQUEST, ex);\n+  }\n+\n+  @ExceptionHandler(HttpStatusCodeException.class)\n+  public ResponseEntity<Map<String, Object>> restTemplateException(HttpServletRequest request,\n+                                                                   HttpStatusCodeException ex) {\n+    return handleError(request, ex.getStatusCode(), ex);\n+  }\n+\n+  @ExceptionHandler(AccessDeniedException.class)\n+  public ResponseEntity<Map<String, Object>> accessDeny(HttpServletRequest request,\n+                                                        AccessDeniedException ex) {\n+    return handleError(request, FORBIDDEN, ex);\n+  }\n+\n+  //\u5904\u7406\u81ea\u5b9a\u4e49Exception\n+  @ExceptionHandler({AbstractApolloHttpException.class})\n+  public ResponseEntity<Map<String, Object>> badRequest(HttpServletRequest request, AbstractApolloHttpException ex) {\n+    return handleError(request, ex);\n+  }\n+\n+\n+  private ResponseEntity<Map<String, Object>> handleError(HttpServletRequest request,\n+                                                          AbstractApolloHttpException ex) {\n+    return handleError(request, ex.getHttpStatus(), ex);\n+  }\n+\n+\n+  private ResponseEntity<Map<String, Object>> handleError(HttpServletRequest request,\n+                                                          HttpStatus status, Throwable ex) {\n+    String message = ex.getMessage();\n+\n+    logger.error(message, ex);\n+    Cat.logError(ex);\n+\n+\n+    Map<String, Object> errorAttributes = new HashMap<>();\n+\n+    //\u5982\u679c\u662fadmin server\u5f15\u8d77\u7684\u5f02\u5e38,\u5219\u663e\u793a\u5185\u90e8\u7684\u5f02\u5e38\u4fe1\u606f\n+    if (ex instanceof HttpStatusCodeException) {\n+      errorAttributes = gson.fromJson(((HttpStatusCodeException) ex).getResponseBodyAsString(), mapType);\n+      status = ((HttpStatusCodeException) ex).getStatusCode();\n+    } else {\n+      errorAttributes.put(\"status\", status.value());\n+      errorAttributes.put(\"message\", message);\n+      errorAttributes.put(\"timestamp\",\n+          LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));\n+      errorAttributes.put(\"exception\", ex.getClass().getName());\n+\n+    }\n+\n+    HttpHeaders headers = new HttpHeaders();\n+    headers.setContentType(APPLICATION_JSON);\n+    return new ResponseEntity<>(errorAttributes, headers, status);\n+  }\n \n }",
      "parent_sha": "07bd7c0615f2a9329569985cb488a656a6bd7093"
    }
  },
  {
    "oid": "3996e646e832d4b7cd99f7107303620ac05ec418",
    "message": "fix coverity bug",
    "date": "2017-04-20T07:13:45Z",
    "url": "https://github.com/apolloconfig/apollo/commit/3996e646e832d4b7cd99f7107303620ac05ec418",
    "details": {
      "sha": "97379cbbddb6e62fac87e0f33958db7f7a9cc892",
      "filename": "apollo-core/src/main/java/com/ctrip/framework/foundation/internals/NetworkInterfaceManager.java",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/3996e646e832d4b7cd99f7107303620ac05ec418/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Ffoundation%2Finternals%2FNetworkInterfaceManager.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/3996e646e832d4b7cd99f7107303620ac05ec418/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Ffoundation%2Finternals%2FNetworkInterfaceManager.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Ffoundation%2Finternals%2FNetworkInterfaceManager.java?ref=3996e646e832d4b7cd99f7107303620ac05ec418",
      "patch": "@@ -98,12 +98,7 @@ private void load() {\n \n     try {\n       Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n-      List<NetworkInterface> nis;\n-      if (interfaces == null) {\n-        nis = Collections.emptyList();\n-      } else {\n-        nis = Collections.list(NetworkInterface.getNetworkInterfaces());\n-      }\n+      List<NetworkInterface> nis = interfaces == null ? Collections.<NetworkInterface>emptyList() : Collections.list(interfaces);\n       List<InetAddress> addresses = new ArrayList<InetAddress>();\n       InetAddress local = null;\n ",
      "parent_sha": "36771bbfd68dcd4f6444d47a1d60aaef6f1923a7"
    }
  },
  {
    "oid": "98fea81f0c6152dfd0a7ddbd8faab870bec830a5",
    "message": "use tryAcquire to avoid acquire compatibility issue",
    "date": "2016-06-22T10:27:39Z",
    "url": "https://github.com/apolloconfig/apollo/commit/98fea81f0c6152dfd0a7ddbd8faab870bec830a5",
    "details": {
      "sha": "8a330d4edccabca5bb3536ee7b91a406c3219242",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigRepository.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/98fea81f0c6152dfd0a7ddbd8faab870bec830a5/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigRepository.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/98fea81f0c6152dfd0a7ddbd8faab870bec830a5/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigRepository.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigRepository.java?ref=98fea81f0c6152dfd0a7ddbd8faab870bec830a5",
      "patch": "@@ -161,7 +161,7 @@ private Properties transformApolloConfigToProperties(ApolloConfig apolloConfig)\n   }\n \n   private ApolloConfig loadApolloConfig() {\n-    m_loadConfigRateLimiter.acquire();\n+    m_loadConfigRateLimiter.tryAcquire(5, TimeUnit.SECONDS);//wait at most 5 seconds\n     String appId = m_configUtil.getAppId();\n     String cluster = m_configUtil.getCluster();\n     String dataCenter = m_configUtil.getDataCenter();\n@@ -285,7 +285,7 @@ private void doLongPollingRefresh(String appId, String cluster, String dataCente\n     final Random random = new Random();\n     ServiceDTO lastServiceDto = null;\n     while (!m_longPollingStopped.get() && !Thread.currentThread().isInterrupted()) {\n-      m_longPollRateLimiter.acquire();\n+      m_longPollRateLimiter.tryAcquire(5, TimeUnit.SECONDS);//wait at most 5 seconds\n       Transaction transaction = Cat.newTransaction(\"Apollo.ConfigService\", \"pollNotification\");\n       try {\n         if (lastServiceDto == null) {",
      "parent_sha": "b75a4114fa1b8883d7447530740f2d6601ffbbe8"
    }
  },
  {
    "oid": "6f3ad2c94d473fcae4928c5cd896b63947ce360c",
    "message": "Fix UT file resource issue",
    "date": "2016-04-15T07:18:37Z",
    "url": "https://github.com/apolloconfig/apollo/commit/6f3ad2c94d473fcae4928c5cd896b63947ce360c",
    "details": {
      "sha": "1abe57da3c436220d3aec55fae76a45deee33cd6",
      "filename": "apollo-client/src/test/java/com/ctrip/apollo/integration/ConfigIntegrationTest.java",
      "status": "modified",
      "additions": 42,
      "deletions": 33,
      "changes": 75,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/6f3ad2c94d473fcae4928c5cd896b63947ce360c/apollo-client%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fapollo%2Fintegration%2FConfigIntegrationTest.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/6f3ad2c94d473fcae4928c5cd896b63947ce360c/apollo-client%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fapollo%2Fintegration%2FConfigIntegrationTest.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fapollo%2Fintegration%2FConfigIntegrationTest.java?ref=6f3ad2c94d473fcae4928c5cd896b63947ce360c",
      "patch": "@@ -1,27 +1,13 @@\n package com.ctrip.apollo.integration;\n \n-import com.google.common.collect.ImmutableMap;\n-import com.google.common.collect.Lists;\n-import com.google.common.collect.Maps;\n-\n-import com.ctrip.apollo.Config;\n-import com.ctrip.apollo.ConfigChangeListener;\n-import com.ctrip.apollo.ConfigService;\n-import com.ctrip.apollo.core.ConfigConsts;\n-import com.ctrip.apollo.core.dto.ApolloConfig;\n-import com.ctrip.apollo.core.utils.ClassLoaderUtil;\n-import com.ctrip.apollo.model.ConfigChangeEvent;\n-\n-import org.eclipse.jetty.server.Request;\n-import org.eclipse.jetty.server.handler.AbstractHandler;\n-import org.eclipse.jetty.server.handler.ContextHandler;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n+import static org.hamcrest.core.IsEqual.equalTo;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n \n import java.io.File;\n import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.nio.file.Files;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n@@ -31,9 +17,23 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n-import static org.hamcrest.core.IsEqual.equalTo;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertThat;\n+import org.eclipse.jetty.server.Request;\n+import org.eclipse.jetty.server.handler.AbstractHandler;\n+import org.eclipse.jetty.server.handler.ContextHandler;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.ctrip.apollo.Config;\n+import com.ctrip.apollo.ConfigChangeListener;\n+import com.ctrip.apollo.ConfigService;\n+import com.ctrip.apollo.core.ConfigConsts;\n+import com.ctrip.apollo.core.dto.ApolloConfig;\n+import com.ctrip.apollo.core.utils.ClassLoaderUtil;\n+import com.ctrip.apollo.model.ConfigChangeEvent;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n \n /**\n  * @author Jason Song(song_s@ctrip.com)\n@@ -56,8 +56,8 @@ public void setUp() throws Exception {\n   @Override\n   @After\n   public void tearDown() throws Exception {\n-    super.tearDown();\n     recursiveDelete(configDir);\n+    super.tearDown();\n   }\n \n   private void recursiveDelete(File file) {\n@@ -69,7 +69,12 @@ private void recursiveDelete(File file) {\n         recursiveDelete(f);\n       }\n     }\n-    file.delete();\n+    try {\n+      Files.deleteIfExists(file.toPath());\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+\n   }\n \n   @Test\n@@ -108,8 +113,7 @@ public void testGetConfigWithLocalFileAndWithRemoteConfig() throws Exception {\n \n   @Test\n   public void testGetConfigWithNoLocalFileAndRemoteConfigError() throws Exception {\n-    ContextHandler\n-        handler =\n+    ContextHandler handler =\n         mockConfigServerHandler(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, null);\n     startServerWithHandlers(handler);\n \n@@ -129,13 +133,11 @@ public void testGetConfigWithLocalFileAndRemoteConfigError() throws Exception {\n     properties.put(someKey, someValue);\n     createLocalCachePropertyFile(properties);\n \n-    ContextHandler\n-        handler =\n+    ContextHandler handler =\n         mockConfigServerHandler(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, null);\n     startServerWithHandlers(handler);\n \n     Config config = ConfigService.getConfig();\n-\n     assertEquals(someValue, config.getProperty(someKey, null));\n   }\n \n@@ -166,7 +168,7 @@ public void onChange(ConfigChangeEvent changeEvent) {\n         assertEquals(1, changeEvent.getChanges().size());\n         assertEquals(someValue, changeEvent.getChange(someKey).getOldValue());\n         assertEquals(anotherValue, changeEvent.getChange(someKey).getNewValue());\n-        //if there is any assertion failed above, this line won't be executed\n+        // if there is any assertion failed above, this line won't be executed\n         changeEvents.add(changeEvent);\n       }\n     });\n@@ -186,7 +188,7 @@ private ContextHandler mockConfigServerHandler(final int statusCode, final Apoll\n     context.setHandler(new AbstractHandler() {\n       @Override\n       public void handle(String target, Request baseRequest, HttpServletRequest request,\n-                         HttpServletResponse response) throws IOException, ServletException {\n+          HttpServletResponse response) throws IOException, ServletException {\n         response.setContentType(\"application/json;charset=UTF-8\");\n         response.setStatus(statusCode);\n \n@@ -210,12 +212,19 @@ private ApolloConfig assembleApolloConfig(Map<String, String> configurations) {\n \n   private File createLocalCachePropertyFile(Properties properties) throws IOException {\n     File file = new File(configDir, assembleLocalCacheFileName());\n-    properties.store(new FileOutputStream(file), \"Persisted by ConfigIntegrationTest\");\n+    FileOutputStream in = null;\n+    try {\n+      in = new FileOutputStream(file);\n+      properties.store(in, \"Persisted by ConfigIntegrationTest\");\n+    } finally {\n+      if (in != null) {\n+        in.close();\n+      }\n+    }\n     return file;\n   }\n \n   private String assembleLocalCacheFileName() {\n-    return String.format(\"%s-%s-%s.properties\", someAppId,\n-        someClusterName, someNamespace);\n+    return String.format(\"%s-%s-%s.properties\", someAppId, someClusterName, someNamespace);\n   }\n }",
      "parent_sha": "5ebe366ee3aa9a7292d9dd1a1401fa16e28ee09c"
    }
  },
  {
    "oid": "f92b06a3e19125ac1a39bf0503bcc0cd96e015d1",
    "message": "stop auditing releases temporarily",
    "date": "2016-08-29T01:51:14Z",
    "url": "https://github.com/apolloconfig/apollo/commit/f92b06a3e19125ac1a39bf0503bcc0cd96e015d1",
    "details": {
      "sha": "98746328f45b855b90908d2b4a4c9d86ae66e198",
      "filename": "apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/ConfigController.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/f92b06a3e19125ac1a39bf0503bcc0cd96e015d1/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fcontroller%2FConfigController.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/f92b06a3e19125ac1a39bf0503bcc0cd96e015d1/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fcontroller%2FConfigController.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fcontroller%2FConfigController.java?ref=f92b06a3e19125ac1a39bf0503bcc0cd96e015d1",
      "patch": "@@ -107,7 +107,8 @@ public ApolloConfig queryConfig(@PathVariable String appId, @PathVariable String\n       return null;\n     }\n \n-    auditReleases(appId, clusterName, dataCenter, clientIp, releases);\n+    //stop auditing releases temporarily\n+    //auditReleases(appId, clusterName, dataCenter, clientIp, releases);\n \n     String mergedReleaseKey = FluentIterable.from(releases).transform(\n         input -> input.getReleaseKey()).join(STRING_JOINER);",
      "parent_sha": "1f19a512f75258199021623baebfba9f3b8b912b"
    }
  },
  {
    "oid": "ed09d345effc459aa7e3dab3061a4150079b906e",
    "message": "update ClassLoaderUtil exception handling",
    "date": "2017-08-22T07:33:14Z",
    "url": "https://github.com/apolloconfig/apollo/commit/ed09d345effc459aa7e3dab3061a4150079b906e",
    "details": {
      "sha": "892d6ad8a55c21250723e4b9a08461eae925b505",
      "filename": "apollo-core/src/main/java/com/ctrip/framework/apollo/core/utils/ClassLoaderUtil.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/ed09d345effc459aa7e3dab3061a4150079b906e/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2Futils%2FClassLoaderUtil.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/ed09d345effc459aa7e3dab3061a4150079b906e/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2Futils%2FClassLoaderUtil.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2Futils%2FClassLoaderUtil.java?ref=ed09d345effc459aa7e3dab3061a4150079b906e",
      "patch": "@@ -37,7 +37,7 @@ public class ClassLoaderUtil {\n       }\n     } catch (Throwable ex) {\n       classPath = System.getProperty(\"user.dir\");\n-      ex.printStackTrace();\n+      logger.warn(\"Failed to locate class path, fallback to user.dir: {}\", classPath, ex);\n     }\n   }\n ",
      "parent_sha": "89427dc501b3995d24cdbdeb88697406408d7af4"
    }
  },
  {
    "oid": "2f7531d518758d227dc54580a89c0116acbf25d6",
    "message": "fix the issue that findByUserId in ldap always return the first user",
    "date": "2020-01-21T14:37:52Z",
    "url": "https://github.com/apolloconfig/apollo/commit/2f7531d518758d227dc54580a89c0116acbf25d6",
    "details": {
      "sha": "efc621c00992946856e9949ab31813f45a71c292",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/ldap/LdapUserService.java",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/2f7531d518758d227dc54580a89c0116acbf25d6/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fldap%2FLdapUserService.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/2f7531d518758d227dc54580a89c0116acbf25d6/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fldap%2FLdapUserService.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fldap%2FLdapUserService.java?ref=2f7531d518758d227dc54580a89c0116acbf25d6",
      "patch": "@@ -9,10 +9,12 @@\n import com.ctrip.framework.apollo.portal.spi.configuration.LdapExtendProperties;\n import com.ctrip.framework.apollo.portal.spi.configuration.LdapProperties;\n import com.google.common.base.Strings;\n+import com.google.common.collect.Sets;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Set;\n import java.util.TreeSet;\n import javax.naming.Name;\n import javax.naming.directory.Attribute;\n@@ -200,10 +202,10 @@ private List<UserInfo> searchUserInfoByGroup(String groupBase, String groupSearc\n \n     return ldapTemplate\n         .searchForObject(groupBase, groupSearch, ctx -> {\n-          String[] members = ((DirContextAdapter) ctx).getStringAttributes(groupMembershipAttrName);\n+            List<UserInfo> userInfos = new ArrayList<>();\n \n           if (!MEMBER_UID_ATTR_NAME.equals(groupMembershipAttrName)) {\n-            List<UserInfo> userInfos = new ArrayList<>();\n+            String[] members = ((DirContextAdapter) ctx).getStringAttributes(groupMembershipAttrName);\n             for (String item : members) {\n               LdapName ldapName = LdapUtils.newLdapName(item);\n               LdapName memberRdn = LdapUtils.removeFirst(ldapName, LdapUtils.newLdapName(base));\n@@ -223,9 +225,12 @@ private List<UserInfo> searchUserInfoByGroup(String groupBase, String groupSearc\n             }\n             return userInfos;\n           }\n-          List<UserInfo> userInfos = new ArrayList<>();\n-          String[] memberUids = ((DirContextAdapter) ctx)\n-              .getStringAttributes(groupMembershipAttrName);\n+\n+          Set<String> memberUids = Sets.newHashSet(((DirContextAdapter) ctx)\n+              .getStringAttributes(groupMembershipAttrName));\n+          if (!CollectionUtils.isEmpty(userIds)) {\n+            memberUids = Sets.intersection(memberUids, Sets.newHashSet(userIds));\n+          }\n           for (String memberUid : memberUids) {\n             UserInfo userInfo = searchUserById(memberUid);\n             if (userInfo != null) {",
      "parent_sha": "62b5fb30e83add2292334a83df37ade6522ca2ee"
    }
  },
  {
    "oid": "994e003d583d0cf9c37be4012defce9589a4982a",
    "message": "Add callback to defferdResult before putting to the map.",
    "date": "2017-11-03T05:56:17Z",
    "url": "https://github.com/apolloconfig/apollo/commit/994e003d583d0cf9c37be4012defce9589a4982a",
    "details": {
      "sha": "39fb6bd9a908d9fc213cce2c7623cab432dd54fb",
      "filename": "apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerV2.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/994e003d583d0cf9c37be4012defce9589a4982a/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fcontroller%2FNotificationControllerV2.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/994e003d583d0cf9c37be4012defce9589a4982a/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fcontroller%2FNotificationControllerV2.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fcontroller%2FNotificationControllerV2.java?ref=994e003d583d0cf9c37be4012defce9589a4982a",
      "patch": "@@ -150,11 +150,6 @@ public DeferredResult<ResponseEntity<List<ApolloConfigNotification>>> pollNotifi\n     if (!CollectionUtils.isEmpty(newNotifications)) {\n       deferredResultWrapper.setResult(newNotifications);\n     } else {\n-      //register all keys\n-      for (String key : watchedKeys) {\n-        this.deferredResults.put(key, deferredResultWrapper);\n-      }\n-\n       deferredResultWrapper\n           .onTimeout(() -> logWatchedKeys(watchedKeys, \"Apollo.LongPoll.TimeOutKeys\"));\n \n@@ -166,6 +161,11 @@ public DeferredResult<ResponseEntity<List<ApolloConfigNotification>>> pollNotifi\n         logWatchedKeys(watchedKeys, \"Apollo.LongPoll.CompletedKeys\");\n       });\n \n+      //register all keys\n+      for (String key : watchedKeys) {\n+        this.deferredResults.put(key, deferredResultWrapper);\n+      }\n+\n       logWatchedKeys(watchedKeys, \"Apollo.LongPoll.RegisteredKeys\");\n       logger.debug(\"Listening {} from appId: {}, cluster: {}, namespace: {}, datacenter: {}\",\n           watchedKeys, appId, cluster, namespaces, dataCenter);",
      "parent_sha": "49ecba4c9f03c0db56459d65a3f21f90aa38bb8e"
    }
  },
  {
    "oid": "edcd974f1a3d455aaf039a609e7a351a338042ac",
    "message": "filter out properties comment for config file",
    "date": "2016-07-08T09:33:41Z",
    "url": "https://github.com/apolloconfig/apollo/commit/edcd974f1a3d455aaf039a609e7a351a338042ac",
    "details": {
      "sha": "8751e603f7b6ff5ac2ea1135cafe9a0639ae097a",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/internals/PropertiesConfigFile.java",
      "status": "modified",
      "additions": 23,
      "deletions": 3,
      "changes": 26,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/edcd974f1a3d455aaf039a609e7a351a338042ac/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FPropertiesConfigFile.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/edcd974f1a3d455aaf039a609e7a351a338042ac/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FPropertiesConfigFile.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FPropertiesConfigFile.java?ref=edcd974f1a3d455aaf039a609e7a351a338042ac",
      "patch": "@@ -41,17 +41,37 @@ String doGetContent() {\n     StringWriter writer = new StringWriter();\n     try {\n       m_configProperties.get().store(writer, null);\n-      return writer.getBuffer().toString();\n+      StringBuffer stringBuffer = writer.getBuffer();\n+      filterPropertiesComment(stringBuffer);\n+      return stringBuffer.toString();\n     } catch (IOException ex) {\n       ApolloConfigException exception =\n           new ApolloConfigException(String\n-              .format(\"Parse properties file content failed for namespace: %s, cause: %s\", m_namespace,\n-                  ExceptionUtil.getDetailMessage(ex)));\n+              .format(\"Parse properties file content failed for namespace: %s, cause: %s\",\n+                  m_namespace, ExceptionUtil.getDetailMessage(ex)));\n       Cat.logError(exception);\n       throw exception;\n     }\n   }\n \n+  /**\n+   * filter out the first comment line\n+   * @param stringBuffer the string buffer\n+   * @return true if filtered successfully, false otherwise\n+   */\n+  boolean filterPropertiesComment(StringBuffer stringBuffer) {\n+    //check whether has comment in the first line\n+    if (stringBuffer.charAt(0) != '#') {\n+      return false;\n+    }\n+    int commentLineIndex = stringBuffer.indexOf(\"\\n\");\n+    if (commentLineIndex == -1) {\n+      return false;\n+    }\n+    stringBuffer.delete(0, commentLineIndex + 1);\n+    return true;\n+  }\n+\n \n   @Override\n   public boolean hasContent() {",
      "parent_sha": "29f2ad9428c60ea24e05ae93987090def464ec5d"
    }
  },
  {
    "oid": "47aa81fd6b9bd7c64ca710ba17be2e6a9f460c98",
    "message": "fix notification ut",
    "date": "2016-06-22T01:52:11Z",
    "url": "https://github.com/apolloconfig/apollo/commit/47aa81fd6b9bd7c64ca710ba17be2e6a9f460c98",
    "details": {
      "sha": "2f9bacd58c06cb4d43ad5e1d92ed4fd2c0e98f5a",
      "filename": "apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/integration/NotificationControllerIntegrationTest.java",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/47aa81fd6b9bd7c64ca710ba17be2e6a9f460c98/apollo-configservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fintegration%2FNotificationControllerIntegrationTest.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/47aa81fd6b9bd7c64ca710ba17be2e6a9f460c98/apollo-configservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fintegration%2FNotificationControllerIntegrationTest.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-configservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fintegration%2FNotificationControllerIntegrationTest.java?ref=47aa81fd6b9bd7c64ca710ba17be2e6a9f460c98",
      "patch": "@@ -50,7 +50,7 @@ public void setUp() throws Exception {\n   @Sql(scripts = \"/integration-test/cleanup.sql\", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)\n   public void testPollNotificationWithDefaultNamespace() throws Exception {\n     AtomicBoolean stop = new AtomicBoolean();\n-    perodicSendMessage(assembleKey(someAppId, someCluster, defaultNamespace), stop);\n+    periodicSendMessage(assembleKey(someAppId, someCluster, defaultNamespace), stop);\n \n     ResponseEntity<ApolloConfigNotification> result = restTemplate.getForEntity(\n         \"{baseurl}/notifications?appId={appId}&cluster={clusterName}&namespace={namespace}\",\n@@ -104,7 +104,7 @@ public void testPollNotificationWthPublicNamespaceAndNoDataCenter() throws Excep\n     String publicAppId = \"somePublicAppId\";\n \n     AtomicBoolean stop = new AtomicBoolean();\n-    perodicSendMessage(assembleKey(publicAppId, ConfigConsts.CLUSTER_NAME_DEFAULT, somePublicNamespace), stop);\n+    periodicSendMessage(assembleKey(publicAppId, ConfigConsts.CLUSTER_NAME_DEFAULT, somePublicNamespace), stop);\n \n     ResponseEntity<ApolloConfigNotification> result = restTemplate\n         .getForEntity(\n@@ -128,7 +128,7 @@ public void testPollNotificationWthPublicNamespaceAndDataCenter() throws Excepti\n     String someDC = \"someDC\";\n \n     AtomicBoolean stop = new AtomicBoolean();\n-    perodicSendMessage(assembleKey(publicAppId, someDC, somePublicNamespace), stop);\n+    periodicSendMessage(assembleKey(publicAppId, someDC, somePublicNamespace), stop);\n \n     ResponseEntity<ApolloConfigNotification> result = restTemplate\n         .getForEntity(\n@@ -165,7 +165,7 @@ private String assembleKey(String appId, String cluster, String namespace) {\n     return Joiner.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR).join(appId, cluster, namespace);\n   }\n \n-  private void perodicSendMessage(String message, AtomicBoolean stop) {\n+  private void periodicSendMessage(String message, AtomicBoolean stop) {\n     executorService.submit((Runnable) () -> {\n       //wait for the request connected to server\n       while (!stop.get() && !Thread.currentThread().isInterrupted()) {\n@@ -174,6 +174,11 @@ private void perodicSendMessage(String message, AtomicBoolean stop) {\n         } catch (InterruptedException e) {\n         }\n \n+        //double check\n+        if (stop.get()) {\n+          break;\n+        }\n+\n         ReleaseMessage releaseMessage = new ReleaseMessage(message);\n         releaseMessageRepository.save(releaseMessage);\n       }",
      "parent_sha": "5359d441602afb4e4fa94673a48cedb6fca15945"
    }
  },
  {
    "oid": "df4165c7574c1f8c2e84afff9f4172085018eb53",
    "message": "adjust long polling load balance strategy",
    "date": "2016-07-29T01:56:55Z",
    "url": "https://github.com/apolloconfig/apollo/commit/df4165c7574c1f8c2e84afff9f4172085018eb53",
    "details": {
      "sha": "0aa8be3ed33f1ab7c003ee763687f5f238647fdc",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/df4165c7574c1f8c2e84afff9f4172085018eb53/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigLongPollService.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/df4165c7574c1f8c2e84afff9f4172085018eb53/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigLongPollService.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigLongPollService.java?ref=df4165c7574c1f8c2e84afff9f4172085018eb53",
      "patch": "@@ -172,7 +172,7 @@ private void doLongPollingRefresh(String appId, String cluster, String dataCente\n         }\n \n         //try to load balance\n-        if (random.nextBoolean()) {\n+        if (response.getStatusCode() == 304 && random.nextBoolean()) {\n           lastServiceDto = null;\n         }\n ",
      "parent_sha": "5207858e66c798ab6b7becad719d7f744f423c8b"
    }
  },
  {
    "oid": "0cddf9cf8a1a85321831f57b2fa3ca037d2a51f2",
    "message": "use RestTemplateFactory to create rest template, which will respect the api.connectTimeout and api.readTimeout settings in PortalConfig",
    "date": "2017-06-20T04:09:59Z",
    "url": "https://github.com/apolloconfig/apollo/commit/0cddf9cf8a1a85321831f57b2fa3ca037d2a51f2",
    "details": {
      "sha": "87b6551440cea3d0c6e38412b59c76d4e11e7f54",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/AdminServiceAddressLocator.java",
      "status": "modified",
      "additions": 3,
      "deletions": 13,
      "changes": 16,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/0cddf9cf8a1a85321831f57b2fa3ca037d2a51f2/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fcomponent%2FAdminServiceAddressLocator.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/0cddf9cf8a1a85321831f57b2fa3ca037d2a51f2/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fcomponent%2FAdminServiceAddressLocator.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fcomponent%2FAdminServiceAddressLocator.java?ref=0cddf9cf8a1a85321831f57b2fa3ca037d2a51f2",
      "patch": "@@ -32,7 +32,6 @@\n @Component\n public class AdminServiceAddressLocator {\n \n-  private static final int DEFAULT_TIMEOUT_MS = 1000;\n   private static final long NORMAL_REFRESH_INTERVAL = 5 * 60 * 1000;\n   private static final long OFFLINE_REFRESH_INTERVAL = 10 * 1000;\n   private static final int RETRY_TIMES = 3;\n@@ -48,24 +47,15 @@ public class AdminServiceAddressLocator {\n   private HttpMessageConverters httpMessageConverters;\n   @Autowired\n   private PortalSettings portalSettings;\n+  @Autowired\n+  private RestTemplateFactory restTemplateFactory;\n \n   @PostConstruct\n   public void init() {\n     allEnvs = portalSettings.getAllEnvs();\n \n     //init restTemplate\n-    restTemplate = new RestTemplate(httpMessageConverters.getConverters());\n-    if (restTemplate.getRequestFactory() instanceof SimpleClientHttpRequestFactory) {\n-      SimpleClientHttpRequestFactory rf =\n-          (SimpleClientHttpRequestFactory) restTemplate.getRequestFactory();\n-      rf.setReadTimeout(DEFAULT_TIMEOUT_MS);\n-      rf.setConnectTimeout(DEFAULT_TIMEOUT_MS);\n-    } else if (restTemplate.getRequestFactory() instanceof HttpComponentsClientHttpRequestFactory) {\n-      HttpComponentsClientHttpRequestFactory rf =\n-          (HttpComponentsClientHttpRequestFactory) restTemplate.getRequestFactory();\n-      rf.setReadTimeout(DEFAULT_TIMEOUT_MS);\n-      rf.setConnectTimeout(DEFAULT_TIMEOUT_MS);\n-    }\n+    restTemplate = restTemplateFactory.getObject();\n \n     refreshServiceAddressService =\n         Executors.newScheduledThreadPool(1, ApolloThreadFactory.create(\"ServiceLocator\", false));",
      "parent_sha": "8db5e264024726d7cfdcdb4fe514f23ac702544d"
    }
  },
  {
    "oid": "714df8ddc16cdb90e09f1113efa9291f4dee2521",
    "message": "adapt for list result of X-FORWARDED-FOR",
    "date": "2016-08-23T08:24:46Z",
    "url": "https://github.com/apolloconfig/apollo/commit/714df8ddc16cdb90e09f1113efa9291f4dee2521",
    "details": {
      "sha": "dacf2c338625a1fab539e795b20aac0ff2eac19b",
      "filename": "apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/ConfigController.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/714df8ddc16cdb90e09f1113efa9291f4dee2521/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fcontroller%2FConfigController.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/714df8ddc16cdb90e09f1113efa9291f4dee2521/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fcontroller%2FConfigController.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fcontroller%2FConfigController.java?ref=714df8ddc16cdb90e09f1113efa9291f4dee2521",
      "patch": "@@ -1,6 +1,7 @@\n package com.ctrip.framework.apollo.configservice.controller;\n \n import com.google.common.base.Joiner;\n+import com.google.common.base.Splitter;\n import com.google.common.base.Strings;\n import com.google.common.collect.FluentIterable;\n import com.google.common.collect.Lists;\n@@ -40,6 +41,8 @@\n @RestController\n @RequestMapping(\"/configs\")\n public class ConfigController {\n+  private static final Splitter X_FORWARDED_FOR_SPLITTER = Splitter.on(\",\").omitEmptyStrings()\n+      .trimResults();\n   @Autowired\n   private ReleaseService releaseService;\n   @Autowired\n@@ -220,11 +223,11 @@ private void auditReleases(String appId, String cluster, String datacenter, Stri\n   }\n \n   private String tryToGetClientIp(HttpServletRequest request) {\n-    String ipAddress = request.getHeader(\"X-FORWARDED-FOR\");\n-    if (ipAddress == null) {\n-      ipAddress = request.getRemoteAddr();\n+    String forwardedFor = request.getHeader(\"X-FORWARDED-FOR\");\n+    if (!Strings.isNullOrEmpty(forwardedFor)) {\n+      return X_FORWARDED_FOR_SPLITTER.splitToList(forwardedFor).get(0);\n     }\n-    return ipAddress;\n+    return request.getRemoteAddr();\n   }\n \n }",
      "parent_sha": "91065c0da85279f5183114ecdc3fea4e4998ae1c"
    }
  },
  {
    "oid": "bcd213d6130631392751648f91d42a84b4381266",
    "message": "fix properties file notification",
    "date": "2016-07-22T04:00:09Z",
    "url": "https://github.com/apolloconfig/apollo/commit/bcd213d6130631392751648f91d42a84b4381266",
    "details": {
      "sha": "21f5812a91b5dcefeab291054039b208b035ec45",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollService.java",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/bcd213d6130631392751648f91d42a84b4381266/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigLongPollService.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/bcd213d6130631392751648f91d42a84b4381266/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigLongPollService.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigLongPollService.java?ref=bcd213d6130631392751648f91d42a84b4381266",
      "patch": "@@ -13,6 +13,7 @@\n import com.google.common.util.concurrent.RateLimiter;\n import com.google.gson.Gson;\n \n+import com.ctrip.framework.apollo.ConfigFile;\n import com.ctrip.framework.apollo.core.ConfigConsts;\n import com.ctrip.framework.apollo.core.dto.ApolloConfigNotification;\n import com.ctrip.framework.apollo.core.dto.ServiceDTO;\n@@ -221,7 +222,16 @@ private void updateNotifications(List<ApolloConfigNotification> deltaNotificatio\n       if (Strings.isNullOrEmpty(notification.getNamespaceName())) {\n         continue;\n       }\n-      m_notifications.put(notification.getNamespaceName(), notification.getNotificationId());\n+      String namespaceName = notification.getNamespaceName();\n+      if (m_notifications.containsKey(namespaceName)) {\n+        m_notifications.put(namespaceName, notification.getNotificationId());\n+      }\n+      //since .properties are filtered out by default, so we need to check if there is notification with .properties suffix\n+      String namespaceNameWithPropertiesSuffix =\n+          String.format(\"%s.%s\", namespaceName, ConfigFileFormat.Properties.getValue());\n+      if (m_notifications.containsKey(namespaceNameWithPropertiesSuffix)) {\n+        m_notifications.put(namespaceNameWithPropertiesSuffix, notification.getNotificationId());\n+      }\n     }\n   }\n ",
      "parent_sha": "15e275502bd81984225b0551987eb0f572a71f64"
    }
  },
  {
    "oid": "a441b6bf4030aed23079c16c4a2d6ca923ccf2ab",
    "message": "Optimize the logic of DatabaseMessageSender. (#4809)\n\n* add tech-support-qq-4.png\r\n\r\n* Update README.md\r\n\r\n* Enhance the user experience in the scenario of submitting duplicate keys\r\n\r\n* Modify the key-value conflict exception prompt, adjust the code style\r\n\r\n* ref(apollo-biz): Optimize the logic of DatabaseMessageSender.\r\n\r\n---------\r\n\r\nCo-authored-by: Jason Song <nobodyiam@gmail.com>",
    "date": "2023-03-21T01:42:19Z",
    "url": "https://github.com/apolloconfig/apollo/commit/a441b6bf4030aed23079c16c4a2d6ca923ccf2ab",
    "details": {
      "sha": "8fce13a0c56a91ea9de488e1c134f96d0dc0fbdd",
      "filename": "apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/message/DatabaseMessageSender.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/a441b6bf4030aed23079c16c4a2d6ca923ccf2ab/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fmessage%2FDatabaseMessageSender.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/a441b6bf4030aed23079c16c4a2d6ca923ccf2ab/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fmessage%2FDatabaseMessageSender.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fmessage%2FDatabaseMessageSender.java?ref=a441b6bf4030aed23079c16c4a2d6ca923ccf2ab",
      "patch": "@@ -22,6 +22,7 @@\n import com.ctrip.framework.apollo.tracer.Tracer;\n import com.ctrip.framework.apollo.tracer.spi.Transaction;\n import com.google.common.collect.Queues;\n+import javax.annotation.PreDestroy;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n@@ -43,7 +44,7 @@\n public class DatabaseMessageSender implements MessageSender {\n   private static final Logger logger = LoggerFactory.getLogger(DatabaseMessageSender.class);\n   private static final int CLEAN_QUEUE_MAX_SIZE = 100;\n-  private BlockingQueue<Long> toClean = Queues.newLinkedBlockingQueue(CLEAN_QUEUE_MAX_SIZE);\n+  private final BlockingQueue<Long> toClean = Queues.newLinkedBlockingQueue(CLEAN_QUEUE_MAX_SIZE);\n   private final ExecutorService cleanExecutorService;\n   private final AtomicBoolean cleanStopped;\n \n@@ -68,7 +69,9 @@ public void sendMessage(String message, String channel) {\n     Transaction transaction = Tracer.newTransaction(\"Apollo.AdminService\", \"sendMessage\");\n     try {\n       ReleaseMessage newMessage = releaseMessageRepository.save(new ReleaseMessage(message));\n-      toClean.offer(newMessage.getId());\n+      if(!toClean.offer(newMessage.getId())){\n+        logger.warn(\"Queue is full, Failed to add message {} to clean queue\", newMessage.getId());\n+      }\n       transaction.setStatus(Transaction.SUCCESS);\n     } catch (Throwable ex) {\n       logger.error(\"Sending message to database failed\", ex);\n@@ -116,6 +119,7 @@ private void cleanMessage(Long id) {\n     }\n   }\n \n+  @PreDestroy\n   void stopClean() {\n     cleanStopped.set(true);\n   }",
      "parent_sha": "196c8f9ab7ba3144d28bdc28eb1db5ff3ae3056f"
    }
  },
  {
    "oid": "13ce22abfbf59b8a0b0e99aaa5f5e29c52d48164",
    "message": "update",
    "date": "2016-07-13T08:51:23Z",
    "url": "https://github.com/apolloconfig/apollo/commit/13ce22abfbf59b8a0b0e99aaa5f5e29c52d48164",
    "details": {
      "sha": "20f47d11b36e4e7e9a00127b76cd159f34b1c09a",
      "filename": "apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Cluster.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/13ce22abfbf59b8a0b0e99aaa5f5e29c52d48164/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fentity%2FCluster.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/13ce22abfbf59b8a0b0e99aaa5f5e29c52d48164/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fentity%2FCluster.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fentity%2FCluster.java?ref=13ce22abfbf59b8a0b0e99aaa5f5e29c52d48164",
      "patch": "@@ -46,16 +46,14 @@ public String toString() {\n \n   @Override\n   public int compareTo(Cluster o) {\n-    if (o == null) {\n+    if (o == null || getId() > o.getId()) {\n       return 1;\n     }\n \n-    if (getId() > o.getId()) {\n-      return 1;\n-    }\n     if (getId() == o.getId()) {\n       return 0;\n     }\n+\n     return -1;\n   }\n }",
      "parent_sha": "e2f3bcd21d4aaf95719e62b014b14c1e50f66c8a"
    }
  },
  {
    "oid": "58f5ef30cf21d360cfdbd2ab83e9b74dc76e802f",
    "message": "fix regex error",
    "date": "2016-12-09T10:22:57Z",
    "url": "https://github.com/apolloconfig/apollo/commit/58f5ef30cf21d360cfdbd2ab83e9b74dc76e802f",
    "details": {
      "sha": "e7ddb4ce62ca8e4fb67f67ef1453343129ed460c",
      "filename": "apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/InputValidator.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/58f5ef30cf21d360cfdbd2ab83e9b74dc76e802f/apollo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcommon%2Futils%2FInputValidator.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/58f5ef30cf21d360cfdbd2ab83e9b74dc76e802f/apollo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcommon%2Futils%2FInputValidator.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcommon%2Futils%2FInputValidator.java?ref=58f5ef30cf21d360cfdbd2ab83e9b74dc76e802f",
      "patch": "@@ -11,8 +11,8 @@\n public class InputValidator {\n   public static final String INVALID_CLUSTER_NAMESPACE_MESSAGE = \"\u53ea\u5141\u8bb8\u8f93\u5165\u6570\u5b57\uff0c\u5b57\u6bcd\u548c\u7b26\u53f7 - _ .\";\n   public static final String INVALID_NAMESPACE_NAMESPACE_MESSAGE = \"\u4e0d\u5141\u8bb8\u4ee5.json, .yml, .yaml, .xml, .properties\u7ed3\u5c3e\";\n-  public static final String CLUSTER_NAMESPACE_VALIDATOR = \"[0-9a-zA-z_.-]+\";\n-  public static final String APP_NAMESPACE_VALIDATOR = \"[a-zA-z0-9._-]+(?<!\\\\.(json|yml|yaml|xml|properties))$\";\n+  public static final String CLUSTER_NAMESPACE_VALIDATOR = \"[0-9a-zA-Z_.-]+\";\n+  public static final String APP_NAMESPACE_VALIDATOR = \"[a-zA-Z0-9._-]+(?<!\\\\.(json|yml|yaml|xml|properties))$\";\n   private static final Pattern CLUSTER_NAMESPACE_PATTERN =\n       Pattern.compile(CLUSTER_NAMESPACE_VALIDATOR);\n   private static final Pattern APP_NAMESPACE_PATTERN =\n@@ -28,6 +28,6 @@ public static boolean isValidAppNamespace(String name){\n     if (StringUtils.isEmpty(name)){\n       return false;\n     }\n-    return CLUSTER_NAMESPACE_PATTERN.matcher(name.toLowerCase()).matches() && APP_NAMESPACE_PATTERN.matcher(name).matches();\n+    return CLUSTER_NAMESPACE_PATTERN.matcher(name).matches() && APP_NAMESPACE_PATTERN.matcher(name).matches();\n   }\n }",
      "parent_sha": "8940dc6c24d183c61828eb5557218fd6567710e8"
    }
  },
  {
    "oid": "a10a75d5be544dffadff8014eb4e669c417369d1",
    "message": "check meta server real path, fixes https://github.com/ctripcorp/apollo/issues/1413",
    "date": "2018-08-28T13:59:02Z",
    "url": "https://github.com/apolloconfig/apollo/commit/a10a75d5be544dffadff8014eb4e669c417369d1",
    "details": {
      "sha": "f3bce73bc1d4ef2d59fd0bfe55ab8ba55d7e8941",
      "filename": "apollo-core/src/main/java/com/ctrip/framework/apollo/core/MetaDomainConsts.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/a10a75d5be544dffadff8014eb4e669c417369d1/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2FMetaDomainConsts.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/a10a75d5be544dffadff8014eb4e669c417369d1/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2FMetaDomainConsts.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2FMetaDomainConsts.java?ref=a10a75d5be544dffadff8014eb4e669c417369d1",
      "patch": "@@ -161,7 +161,8 @@ private static void updateMetaServerAddresses(String metaServerAddresses) {\n \n       for (String address : metaServers) {\n         address = address.trim();\n-        if (NetUtil.pingUrl(address)) {\n+        //check whether /services/config is accessible\n+        if (NetUtil.pingUrl(address + \"/services/config\")) {\n           // select the first available meta server\n           selectedMetaServerAddressCache.put(metaServerAddresses, address);\n           serverAvailable = true;",
      "parent_sha": "e098232e054a853c38e3377dad1de6807ad1ee74"
    }
  },
  {
    "oid": "765f3b894abd8b61e52665071004588f5b902631",
    "message": "fix unit test (#3669)",
    "date": "2021-05-09T13:58:25Z",
    "url": "https://github.com/apolloconfig/apollo/commit/765f3b894abd8b61e52665071004588f5b902631",
    "details": {
      "sha": "28d3866e4208276545652222d32fceb108203089",
      "filename": "apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/integration/NotificationControllerV2IntegrationTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/765f3b894abd8b61e52665071004588f5b902631/apollo-configservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fintegration%2FNotificationControllerV2IntegrationTest.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/765f3b894abd8b61e52665071004588f5b902631/apollo-configservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fintegration%2FNotificationControllerV2IntegrationTest.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-configservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fintegration%2FNotificationControllerV2IntegrationTest.java?ref=765f3b894abd8b61e52665071004588f5b902631",
      "patch": "@@ -54,7 +54,7 @@ public void setUp() throws Exception {\n     someCluster = ConfigConsts.CLUSTER_NAME_DEFAULT;\n     defaultNamespace = ConfigConsts.NAMESPACE_APPLICATION;\n     somePublicNamespace = \"somePublicNamespace\";\n-    executorService = Executors.newSingleThreadExecutor();\n+    executorService = Executors.newFixedThreadPool(1);\n     typeReference = new ParameterizedTypeReference<List<ApolloConfigNotification>>() {\n     };\n   }",
      "parent_sha": "20b8ddb8b913a7a694b151b88cb7c2c9f5a90028"
    }
  },
  {
    "oid": "512d7cf5a68f9551461fecbf7a0dd2606e112624",
    "message": "Update ReleaseMessageServiceWithCacheTest.java (#4314)\n\n* Update ReleaseMessageServiceWithCacheTest.java\r\n\r\nfix the flaky test.\r\n\r\n* Update ReleaseMessageServiceWithCacheTest.java\r\n\r\npropose fix",
    "date": "2022-04-17T01:13:46Z",
    "url": "https://github.com/apolloconfig/apollo/commit/512d7cf5a68f9551461fecbf7a0dd2606e112624",
    "details": {
      "sha": "be7eb24369d8c9519c25eac0b331b1abe71e3f72",
      "filename": "apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/ReleaseMessageServiceWithCacheTest.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/512d7cf5a68f9551461fecbf7a0dd2606e112624/apollo-configservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fservice%2FReleaseMessageServiceWithCacheTest.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/512d7cf5a68f9551461fecbf7a0dd2606e112624/apollo-configservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fservice%2FReleaseMessageServiceWithCacheTest.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-configservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fservice%2FReleaseMessageServiceWithCacheTest.java?ref=512d7cf5a68f9551461fecbf7a0dd2606e112624",
      "patch": "@@ -150,14 +150,15 @@ public void testWhenReleaseMsgSizeBiggerThan500() throws Exception {\n     assertNotNull(latestReleaseMsg);\n     assertEquals(501, latestReleaseMsg.getId());\n     assertEquals(antherMsgContent, latestReleaseMsg.getMessage());\n-\n+    \n+    List<String> msgContentList = Arrays.asList(someMsgContent, antherMsgContent);\n     List<ReleaseMessage> latestReleaseMsgGroupByMsgContent =\n         releaseMessageServiceWithCache\n-            .findLatestReleaseMessagesGroupByMessages(Sets.newHashSet(someMsgContent, antherMsgContent));\n+            .findLatestReleaseMessagesGroupByMessages(Sets.newLinkedHashSet(msgContentList));\n \n     assertEquals(2, latestReleaseMsgGroupByMsgContent.size());\n-    assertEquals(500, latestReleaseMsgGroupByMsgContent.get(1).getId());\n-    assertEquals(501, latestReleaseMsgGroupByMsgContent.get(0).getId());\n+    assertEquals(500, latestReleaseMsgGroupByMsgContent.get(0).getId());\n+    assertEquals(501, latestReleaseMsgGroupByMsgContent.get(1).getId());\n   }\n \n   @Test",
      "parent_sha": "a42b79356329867a0e6cb0429fcc45173a18e8d3"
    }
  },
  {
    "oid": "9c871e44e9aac74ca4c351f2b2da328e8243e6ab",
    "message": "fix setting null value of property in xml throws NullPointerException (#2646)\n\n* fix setting value of property in xml is null throws NullPointerException\r\n\r\n* fix setting null value of property in xml throws NullPointerException",
    "date": "2019-10-13T06:05:12Z",
    "url": "https://github.com/apolloconfig/apollo/commit/9c871e44e9aac74ca4c351f2b2da328e8243e6ab",
    "details": {
      "sha": "39c587c27e7dc61da0ae9ae13034e40a0a87778f",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/spring/property/PlaceholderHelper.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/9c871e44e9aac74ca4c351f2b2da328e8243e6ab/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fspring%2Fproperty%2FPlaceholderHelper.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/9c871e44e9aac74ca4c351f2b2da328e8243e6ab/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fspring%2Fproperty%2FPlaceholderHelper.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fspring%2Fproperty%2FPlaceholderHelper.java?ref=9c871e44e9aac74ca4c351f2b2da328e8243e6ab",
      "patch": "@@ -4,6 +4,7 @@\n import com.google.common.collect.Sets;\n import java.util.Set;\n import java.util.Stack;\n+import java.util.Objects;\n import org.springframework.beans.factory.BeanFactory;\n import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.beans.factory.config.BeanExpressionContext;\n@@ -65,7 +66,7 @@ private Object evaluateBeanDefinitionString(ConfigurableBeanFactory beanFactory,\n   public Set<String> extractPlaceholderKeys(String propertyString) {\n     Set<String> placeholderKeys = Sets.newHashSet();\n \n-    if (!isNormalizedPlaceholder(propertyString) && !isExpressionWithPlaceholder(propertyString)) {\n+    if (Objects.isNull(propertyString) || (!isNormalizedPlaceholder(propertyString) && !isExpressionWithPlaceholder(propertyString))) {\n       return placeholderKeys;\n     }\n ",
      "parent_sha": "59d92f6b620abe2288735905ad23e091dd373236"
    }
  },
  {
    "oid": "cafa690b7cb38ab53cb3c18a67097acac00d4bc5",
    "message": "exists",
    "date": "2016-06-24T08:20:28Z",
    "url": "https://github.com/apolloconfig/apollo/commit/cafa690b7cb38ab53cb3c18a67097acac00d4bc5",
    "details": {
      "sha": "511c13a702d771a3281f4050b5c653f0e64e2937",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ClusterService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/cafa690b7cb38ab53cb3c18a67097acac00d4bc5/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fservice%2FClusterService.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/cafa690b7cb38ab53cb3c18a67097acac00d4bc5/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fservice%2FClusterService.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fservice%2FClusterService.java?ref=cafa690b7cb38ab53cb3c18a67097acac00d4bc5",
      "patch": "@@ -22,7 +22,7 @@ public List<ClusterDTO> findClusters(Env env, String appId){\n \n   public ClusterDTO createCluster(Env env, ClusterDTO cluster){\n     if (!clusterAPI.isClusterUnique(cluster.getAppId(), env, cluster.getName())){\n-      throw new BadRequestException(String.format(\"cluster %s already exist.\", cluster.getName()));\n+      throw new BadRequestException(String.format(\"cluster %s already exists.\", cluster.getName()));\n     }\n     return clusterAPI.createOrUpdate(env, cluster);\n   }",
      "parent_sha": "2c20c9d88211c0525bc77731276e2e03a8398f4b"
    }
  },
  {
    "oid": "663deaccf9425dc32ea1877ffcee075a663f9b47",
    "message": "Update long polling unit test",
    "date": "2016-04-23T00:45:36Z",
    "url": "https://github.com/apolloconfig/apollo/commit/663deaccf9425dc32ea1877ffcee075a663f9b47",
    "details": {
      "sha": "a82e0b5324d866767a7cd903c58081ab160a064b",
      "filename": "apollo-client/src/test/java/com/ctrip/apollo/internals/RemoteConfigRepositoryTest.java",
      "status": "modified",
      "additions": 21,
      "deletions": 4,
      "changes": 25,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/663deaccf9425dc32ea1877ffcee075a663f9b47/apollo-client%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fapollo%2Finternals%2FRemoteConfigRepositoryTest.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/663deaccf9425dc32ea1877ffcee075a663f9b47/apollo-client%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fapollo%2Finternals%2FRemoteConfigRepositoryTest.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fapollo%2Finternals%2FRemoteConfigRepositoryTest.java?ref=663deaccf9425dc32ea1877ffcee075a663f9b47",
      "patch": "@@ -3,7 +3,7 @@\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n-\n+import com.google.common.util.concurrent.SettableFuture;\n import com.ctrip.apollo.core.dto.ApolloConfig;\n import com.ctrip.apollo.core.dto.ApolloConfigNotification;\n import com.ctrip.apollo.core.dto.ServiceDTO;\n@@ -18,7 +18,10 @@\n import org.junit.runner.RunWith;\n import org.mockito.ArgumentCaptor;\n import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n import org.mockito.runners.MockitoJUnitRunner;\n+import org.mockito.stubbing.Answer;\n import org.unidal.lookup.ComponentTestCase;\n \n import java.util.List;\n@@ -34,6 +37,8 @@\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n \n /**\n  * Created by Jason on 4/9/16.\n@@ -128,19 +133,31 @@ public void testLongPollingRefresh() throws Exception {\n \n     when(someResponse.getStatusCode()).thenReturn(200);\n     when(someResponse.getBody()).thenReturn(someApolloConfig);\n-\n+    \n+    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n     RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n+    doAnswer(new Answer<Void>(){\n+\n+      @Override\n+      public Void answer(InvocationOnMock invocation) throws Throwable {\n+        longPollFinished.set(true);\n+        return null;\n+      }\n+      \n+    }).when(someListener).onRepositoryChange(any(String.class), any(Properties.class));\n+    \n     RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n     remoteConfigRepository.addChangeListener(someListener);\n     final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n \n     Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n     ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n \n+\n     when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n     when(someResponse.getBody()).thenReturn(newApolloConfig);\n-\n-    TimeUnit.MILLISECONDS.sleep(1000);\n+    \n+    longPollFinished.get(500, TimeUnit.MILLISECONDS);\n \n     remoteConfigRepository.stopLongPollingRefresh();\n ",
      "parent_sha": "accc8c43fc8cbf6c5ea2110e567137052bd93a8b"
    }
  },
  {
    "oid": "d762823ba6a7c504ac09172c7c66a6a6ebd6b3c1",
    "message": "fix #1978",
    "date": "2019-02-23T06:24:07Z",
    "url": "https://github.com/apolloconfig/apollo/commit/d762823ba6a7c504ac09172c7c66a6a6ebd6b3c1",
    "details": {
      "sha": "48f8b1dddb510d17f452db751a968d4697baf91e",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/auth/ConsumerPermissionValidator.java",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/d762823ba6a7c504ac09172c7c66a6a6ebd6b3c1/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fopenapi%2Fauth%2FConsumerPermissionValidator.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/d762823ba6a7c504ac09172c7c66a6a6ebd6b3c1/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fopenapi%2Fauth%2FConsumerPermissionValidator.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fopenapi%2Fauth%2FConsumerPermissionValidator.java?ref=d762823ba6a7c504ac09172c7c66a6a6ebd6b3c1",
      "patch": "@@ -21,15 +21,16 @@ public ConsumerPermissionValidator(\n     this.consumerAuthUtil = consumerAuthUtil;\n   }\n \n-\n   public boolean hasModifyNamespacePermission(HttpServletRequest request, String appId, String namespaceName,\n       String env) {\n     if (hasCreateNamespacePermission(request, appId)) {\n       return true;\n     }\n     return permissionService.consumerHasPermission(consumerAuthUtil.retrieveConsumerId(request),\n-        PermissionType.MODIFY_NAMESPACE,\n-        RoleUtils.buildNamespaceTargetId(appId, namespaceName, env));\n+        PermissionType.MODIFY_NAMESPACE, RoleUtils.buildNamespaceTargetId(appId, namespaceName))\n+        ||\n+        permissionService.consumerHasPermission(consumerAuthUtil.retrieveConsumerId(request),\n+        PermissionType.MODIFY_NAMESPACE, RoleUtils.buildNamespaceTargetId(appId, namespaceName, env));\n \n   }\n \n@@ -39,6 +40,10 @@ public boolean hasReleaseNamespacePermission(HttpServletRequest request, String\n       return true;\n     }\n     return permissionService.consumerHasPermission(consumerAuthUtil.retrieveConsumerId(request),\n+        PermissionType.RELEASE_NAMESPACE,\n+        RoleUtils.buildNamespaceTargetId(appId, namespaceName))\n+        ||\n+        permissionService.consumerHasPermission(consumerAuthUtil.retrieveConsumerId(request),\n         PermissionType.RELEASE_NAMESPACE,\n         RoleUtils.buildNamespaceTargetId(appId, namespaceName, env));\n ",
      "parent_sha": "d1ae147711af31ea522f988acb36a5c1bf3a4456"
    }
  },
  {
    "oid": "334f2587736a0d025fcf8a3c3b0608dbcae5bc79",
    "message": "Update RelativeDateFormat.java (#4111)\n\nsimplify logic and improve performance\r\n\r\nCo-authored-by: Jason Song <nobodyiam@gmail.com>",
    "date": "2021-11-20T05:11:27Z",
    "url": "https://github.com/apolloconfig/apollo/commit/334f2587736a0d025fcf8a3c3b0608dbcae5bc79",
    "details": {
      "sha": "96be79bebc8d2b995052c2f70a6472df927927d0",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/util/RelativeDateFormat.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/334f2587736a0d025fcf8a3c3b0608dbcae5bc79/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Futil%2FRelativeDateFormat.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/334f2587736a0d025fcf8a3c3b0608dbcae5bc79/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Futil%2FRelativeDateFormat.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Futil%2FRelativeDateFormat.java?ref=334f2587736a0d025fcf8a3c3b0608dbcae5bc79",
      "patch": "@@ -39,7 +39,7 @@ public static String format(Date date) {\n       return \"now\";\n     }\n \n-    long delta = new Date().getTime() - date.getTime();\n+    long delta = System.currentTimeMillis() - date.getTime();\n     if (delta < ONE_MINUTE) {\n       long seconds = toSeconds(delta);\n       return (seconds <= 0 ? 1 : seconds) + ONE_SECOND_AGO;",
      "parent_sha": "046a13dcf589ddf8504902417393c94827d5e06c"
    }
  },
  {
    "oid": "cbb0224768d00879a8b2abcf2e2cc5f40aaca6ac",
    "message": "typo",
    "date": "2018-01-28T14:35:40Z",
    "url": "https://github.com/apolloconfig/apollo/commit/cbb0224768d00879a8b2abcf2e2cc5f40aaca6ac",
    "details": {
      "sha": "650a4631b71fc2ef9023b3d3d5fe446d4c3b0689",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/spring/boot/ApolloSpringApplicationRunListener.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/cbb0224768d00879a8b2abcf2e2cc5f40aaca6ac/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fspring%2Fboot%2FApolloSpringApplicationRunListener.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/cbb0224768d00879a8b2abcf2e2cc5f40aaca6ac/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fspring%2Fboot%2FApolloSpringApplicationRunListener.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fspring%2Fboot%2FApolloSpringApplicationRunListener.java?ref=cbb0224768d00879a8b2abcf2e2cc5f40aaca6ac",
      "patch": "@@ -30,7 +30,7 @@\n  *\n  * <pre class=\"code\">\n  *   apollo.bootstrap.enabled = true\n- *   # will inject 'application' and 'TEST1.apollo' namespaces in bootstrap phase\n+ *   # will inject 'application' and 'FX.apollo' namespaces in bootstrap phase\n  *   apollo.bootstrap.namespaces = application,FX.apollo\n  * </pre>\n  */",
      "parent_sha": "cae2215f8046a9c7f92c77783915054ce92275e8"
    }
  },
  {
    "oid": "9f7a2a584549f2732ec849848ffe0763c1e947ab",
    "message": "Squashed commit of the following:\n\ncommit 49a8bd839e1f13c0c3b91f8d314dd4cb3fca1e3e\nMerge: 211848897 e34cdce4f\nAuthor: JaredTan95 <jian.tan@daocloud.io>\nDate:   Sun Oct 14 12:33:46 2018 +0800\n\n    Merge branch 'master' of https://github.com/JaredTan95/apollo\n\ncommit 2118488976059333c8e4c006d98cb37d81097a11\nAuthor: nobodyiam <nobodyiam@gmail.com>\nDate:   Sat Oct 13 16:49:39 2018 +0800\n\n    version to 1.1.1\n\n    clean code.\n\n    fix code style.\n\ncommit 9e32fcc48b8c7dfbc3c3869ccc81091a0890a02a\nAuthor: JaredTan95 <jian.tan@daocloud.io>\nDate:   Sat Oct 13 14:51:20 2018 +0800\n\n    Support to override meta server url through environment variables.\n\ncommit e34cdce4f33528690deec7c3660dba514c3aeaef\nAuthor: JaredTan95 <jian.tan@daocloud.io>\nDate:   Sun Oct 14 09:35:35 2018 +0800\n\n    fix code style.\n\ncommit 58e6fc7eef58f9623eb542c255ded0da59bb0852\nAuthor: JaredTan95 <jian.tan@daocloud.io>\nDate:   Sat Oct 13 20:15:38 2018 +0800\n\n    clean code.\n\ncommit a7fcbecdec389215ea9ad73db627e1cb2d425f41\nMerge: 15532fdf9 c22ac5637\nAuthor: Jared.Tan <jian.tan@daocloud.io>\nDate:   Sat Oct 13 17:25:14 2018 +0800\n\n    Merge branch 'master' into master\n\ncommit 15532fdf9ecb703f21f4f743a4651b6ae003f24c\nAuthor: JaredTan95 <jian.tan@daocloud.io>\nDate:   Sat Oct 13 17:23:27 2018 +0800\n\n    refactoring legacy mete server and fix mistake in Dockerfile.\n\ncommit 3c9b00e24df47ee42a74771aa94fd2c383084b30\nAuthor: JaredTan95 <jian.tan@daocloud.io>\nDate:   Sat Oct 13 16:37:04 2018 +0800\n\n    modify Dockerfile Env `Version` to prevent duplicate changes and errors\n\ncommit 9ec44a8954460ae72aa27300ea519e2d0c99f470\nAuthor: JaredTan95 <jian.tan@daocloud.io>\nDate:   Sat Oct 13 14:51:20 2018 +0800\n\n    Support to override meta server url through environment variables.",
    "date": "2018-10-14T05:24:05Z",
    "url": "https://github.com/apolloconfig/apollo/commit/9f7a2a584549f2732ec849848ffe0763c1e947ab",
    "details": {
      "sha": "9ecd1f11190380db2b36676adf7e15016c017510",
      "filename": "apollo-core/src/main/java/com/ctrip/framework/apollo/core/internals/LegacyMetaServerProvider.java",
      "status": "modified",
      "additions": 26,
      "deletions": 17,
      "changes": 43,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/9f7a2a584549f2732ec849848ffe0763c1e947ab/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2Finternals%2FLegacyMetaServerProvider.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/9f7a2a584549f2732ec849848ffe0763c1e947ab/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2Finternals%2FLegacyMetaServerProvider.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2Finternals%2FLegacyMetaServerProvider.java?ref=9f7a2a584549f2732ec849848ffe0763c1e947ab",
      "patch": "@@ -1,17 +1,18 @@\n package com.ctrip.framework.apollo.core.internals;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Properties;\n-\n import com.ctrip.framework.apollo.core.enums.Env;\n import com.ctrip.framework.apollo.core.spi.MetaServerProvider;\n import com.ctrip.framework.apollo.core.utils.ResourceUtils;\n+import com.google.common.base.Strings;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n \n /**\n  * For legacy meta server configuration use, i.e. apollo-env.properties\n  */\n public class LegacyMetaServerProvider implements MetaServerProvider {\n+\n   // make it as lowest as possible, yet not the lowest\n   public static final int ORDER = MetaServerProvider.LOWEST_PRECEDENCE - 1;\n   private static final Map<Env, String> domains = new HashMap<>();\n@@ -23,19 +24,27 @@ public LegacyMetaServerProvider() {\n   private void initialize() {\n     Properties prop = new Properties();\n     prop = ResourceUtils.readConfigFile(\"apollo-env.properties\", prop);\n-    Properties env = System.getProperties();\n-    domains.put(Env.LOCAL,\n-        env.getProperty(\"local_meta\", prop.getProperty(\"local.meta\")));\n-    domains.put(Env.DEV,\n-        env.getProperty(\"dev_meta\", prop.getProperty(\"dev.meta\")));\n-    domains.put(Env.FAT,\n-        env.getProperty(\"fat_meta\", prop.getProperty(\"fat.meta\")));\n-    domains.put(Env.UAT,\n-        env.getProperty(\"uat_meta\", prop.getProperty(\"uat.meta\")));\n-    domains.put(Env.LPT,\n-        env.getProperty(\"lpt_meta\", prop.getProperty(\"lpt.meta\")));\n-    domains.put(Env.PRO,\n-        env.getProperty(\"pro_meta\", prop.getProperty(\"pro.meta\")));\n+\n+    domains.put(Env.LOCAL, getMetaServerAddress(prop, \"local_meta\", \"local.meta\"));\n+    domains.put(Env.DEV, getMetaServerAddress(prop, \"dev_meta\", \"dev.meta\"));\n+    domains.put(Env.FAT, getMetaServerAddress(prop, \"fat_meta\", \"fat.meta\"));\n+    domains.put(Env.UAT, getMetaServerAddress(prop, \"uat_meta\", \"uat.meta\"));\n+    domains.put(Env.LPT, getMetaServerAddress(prop, \"lpt_meta\", \"lpt.meta\"));\n+    domains.put(Env.PRO, getMetaServerAddress(prop, \"pro_meta\", \"pro.meta\"));\n+  }\n+\n+  private String getMetaServerAddress(Properties prop, String sourceName, String propName) {\n+    // 1. Get from System Property.\n+    String metaAddress = System.getProperty(sourceName);\n+    if (Strings.isNullOrEmpty(metaAddress)) {\n+      // 2. Get from OS environment variable, which could not contain dot and is normally in UPPER case,like DEV_META.\n+      metaAddress = System.getenv(sourceName.toUpperCase());\n+    }\n+    if (Strings.isNullOrEmpty(metaAddress)) {\n+      // 3. Get from properties file.\n+      metaAddress = prop.getProperty(propName);\n+    }\n+    return metaAddress;\n   }\n \n   @Override",
      "parent_sha": "3743d83641fe0dbd0f3c386c550c56dde2295d8f"
    }
  },
  {
    "oid": "e994f543ce96f852635d863a86d9fe39ef42dfac",
    "message": "lower case tooling cluster",
    "date": "2016-12-01T07:54:45Z",
    "url": "https://github.com/apolloconfig/apollo/commit/e994f543ce96f852635d863a86d9fe39ef42dfac",
    "details": {
      "sha": "1d5693bfcf951aec366d3742190c401a345a7dc8",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/util/ConfigUtil.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/e994f543ce96f852635d863a86d9fe39ef42dfac/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Futil%2FConfigUtil.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/e994f543ce96f852635d863a86d9fe39ef42dfac/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Futil%2FConfigUtil.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Futil%2FConfigUtil.java?ref=e994f543ce96f852635d863a86d9fe39ef42dfac",
      "patch": "@@ -21,7 +21,7 @@\n @Named(type = ConfigUtil.class)\n public class ConfigUtil {\n   private static final Logger logger = LoggerFactory.getLogger(ConfigUtil.class);\n-  private static final String TOOLING_CLUSTER = \"TOOLING\";\n+  private static final String TOOLING_CLUSTER = \"tooling\";\n   private int refreshInterval = 5;\n   private TimeUnit refreshIntervalTimeUnit = TimeUnit.MINUTES;\n   private int connectTimeout = 1000; //1 second",
      "parent_sha": "67c8d353a1744933164eb4fe9d2601a361cd4f2a"
    }
  },
  {
    "oid": "7929a9350af92067b3356a8c90572be943d10936",
    "message": "add prometheus integration and fix the logout issue for ldap (#2638)",
    "date": "2019-10-04T04:42:47Z",
    "url": "https://github.com/apolloconfig/apollo/commit/7929a9350af92067b3356a8c90572be943d10936",
    "details": {
      "sha": "c32e6fa7e13d4b54314f3ea98a93178ebb911c06",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/AuthConfiguration.java",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/7929a9350af92067b3356a8c90572be943d10936/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fconfiguration%2FAuthConfiguration.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/7929a9350af92067b3356a8c90572be943d10936/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fconfiguration%2FAuthConfiguration.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fconfiguration%2FAuthConfiguration.java?ref=7929a9350af92067b3356a8c90572be943d10936",
      "patch": "@@ -403,13 +403,12 @@ protected void configure(HttpSecurity http) throws Exception {\n       http.csrf().disable();\n       http.headers().frameOptions().sameOrigin();\n       http.authorizeRequests()\n-          .antMatchers(\"/openapi/**\", \"/vendor/**\", \"/styles/**\", \"/scripts/**\", \"/views/**\", \"/img/**\").permitAll()\n+          .antMatchers(\"/prometheus/**\",\"/metrics/**\",\"/openapi/**\", \"/vendor/**\", \"/styles/**\", \"/scripts/**\", \"/views/**\", \"/img/**\").permitAll()\n           .antMatchers(\"/**\").authenticated();\n-      http.formLogin().loginPage(\"/signin\").permitAll().failureUrl(\"/signin?#/error\").and().httpBasic();\n-      SimpleUrlLogoutSuccessHandler urlLogoutHandler = new SimpleUrlLogoutSuccessHandler();\n-      urlLogoutHandler.setDefaultTargetUrl(\"/signin?#/logout\");\n+      http.formLogin().loginPage(\"/signin\").defaultSuccessUrl(\"/\", true).permitAll().failureUrl(\"/signin?#/error\").and()\n+              .httpBasic();\n       http.logout().logoutUrl(\"/user/logout\").invalidateHttpSession(true).clearAuthentication(true)\n-          .logoutSuccessHandler(urlLogoutHandler);\n+              .logoutSuccessUrl(\"/signin?#/logout\");\n       http.exceptionHandling().authenticationEntryPoint(new LoginUrlAuthenticationEntryPoint(\"/signin\"));\n     }\n ",
      "parent_sha": "9636d5f5e952bc6d30fbde55a6cff13acd6e1327"
    }
  },
  {
    "oid": "59553cc6e3fd31ee349e841178b22ddca1148653",
    "message": "adjust cat log",
    "date": "2016-08-23T09:36:37Z",
    "url": "https://github.com/apolloconfig/apollo/commit/59553cc6e3fd31ee349e841178b22ddca1148653",
    "details": {
      "sha": "fd6a020c2b8295813980a6086fad264bcfa39078",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigRepository.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/59553cc6e3fd31ee349e841178b22ddca1148653/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigRepository.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/59553cc6e3fd31ee349e841178b22ddca1148653/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigRepository.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigRepository.java?ref=59553cc6e3fd31ee349e841178b22ddca1148653",
      "patch": "@@ -131,6 +131,11 @@ protected synchronized void sync() {\n         this.fireRepositoryChange(m_namespace, this.getConfig());\n       }\n \n+      if (current != null) {\n+        Cat.logEvent(String.format(\"Apollo.Client.Configs.%s\", current.getNamespaceName()),\n+            current.getReleaseKey());\n+      }\n+\n       transaction.setStatus(Message.SUCCESS);\n     } catch (Throwable ex) {\n       transaction.setStatus(ex);\n@@ -157,7 +162,7 @@ private ApolloConfig loadApolloConfig() {\n     String appId = m_configUtil.getAppId();\n     String cluster = m_configUtil.getCluster();\n     String dataCenter = m_configUtil.getDataCenter();\n-    Cat.logEvent(\"Apollo.Client.ConfigInfo\", STRING_JOINER.join(appId, cluster, m_namespace));\n+    Cat.logEvent(\"Apollo.Client.ConfigMeta\", STRING_JOINER.join(appId, cluster, m_namespace));\n     int maxRetries = 2;\n     Throwable exception = null;\n \n@@ -194,8 +199,6 @@ private ApolloConfig loadApolloConfig() {\n \n           ApolloConfig result = response.getBody();\n \n-          Cat.logEvent(\"Apollo.Client.ConfigLoaded.\" + result.getNamespaceName(),\n-              result.getReleaseKey());\n           logger.debug(\"Loaded config for {}: {}\", m_namespace, result);\n \n           return result;",
      "parent_sha": "14856db78257c24b73cabb7041eebb63fd896bdf"
    }
  },
  {
    "oid": "4b0f72bd7b2200bf722d249b356a32d22da69976",
    "message": "\u66f4\u6539\u975e\u6cd5\u8bf7\u6c42\u7684log\u7ea7\u522b\u4eceERROR\u5230Warn\nhttps://github.com/ctripcorp/apollo/issues/1209",
    "date": "2018-07-05T03:56:48Z",
    "url": "https://github.com/apolloconfig/apollo/commit/4b0f72bd7b2200bf722d249b356a32d22da69976",
    "details": {
      "sha": "d95206861c425f0b7c5c56884975fff2d7231b7c",
      "filename": "apollo-common/src/main/java/com/ctrip/framework/apollo/common/controller/GlobalDefaultExceptionHandler.java",
      "status": "modified",
      "additions": 31,
      "deletions": 11,
      "changes": 42,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/4b0f72bd7b2200bf722d249b356a32d22da69976/apollo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcommon%2Fcontroller%2FGlobalDefaultExceptionHandler.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/4b0f72bd7b2200bf722d249b356a32d22da69976/apollo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcommon%2Fcontroller%2FGlobalDefaultExceptionHandler.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcommon%2Fcontroller%2FGlobalDefaultExceptionHandler.java?ref=4b0f72bd7b2200bf722d249b356a32d22da69976",
      "patch": "@@ -8,6 +8,7 @@\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.slf4j.event.Level;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n@@ -49,7 +50,7 @@ public ResponseEntity<Map<String, Object>> exception(HttpServletRequest request,\n   @ExceptionHandler({HttpRequestMethodNotSupportedException.class, HttpMediaTypeException.class})\n   public ResponseEntity<Map<String, Object>> badRequest(HttpServletRequest request,\n                                                         ServletException ex) {\n-    return handleError(request, BAD_REQUEST, ex);\n+    return handleError(request, BAD_REQUEST, ex, Level.WARN);\n   }\n \n   @ExceptionHandler(HttpStatusCodeException.class)\n@@ -67,23 +68,19 @@ public ResponseEntity<Map<String, Object>> accessDeny(HttpServletRequest request\n   //\u5904\u7406\u81ea\u5b9a\u4e49Exception\n   @ExceptionHandler({AbstractApolloHttpException.class})\n   public ResponseEntity<Map<String, Object>> badRequest(HttpServletRequest request, AbstractApolloHttpException ex) {\n-    return handleError(request, ex);\n+    return handleError(request, ex.getHttpStatus(), ex, Level.ERROR);\n   }\n \n-\n+  \n   private ResponseEntity<Map<String, Object>> handleError(HttpServletRequest request,\n-                                                          AbstractApolloHttpException ex) {\n-    return handleError(request, ex.getHttpStatus(), ex);\n+                                                          HttpStatus status, Throwable ex) {\n+    return handleError(request, status, ex, Level.ERROR);\n   }\n \n-\n   private ResponseEntity<Map<String, Object>> handleError(HttpServletRequest request,\n-                                                          HttpStatus status, Throwable ex) {\n+                                                          HttpStatus status, Throwable ex, Level logLevel) {\n     String message = ex.getMessage();\n-\n-    logger.error(message, ex);\n-    Tracer.logError(ex);\n-\n+    printLog(message, ex, logLevel);\n \n     Map<String, Object> errorAttributes = new HashMap<>();\n     boolean errorHandled = false;\n@@ -113,4 +110,27 @@ private ResponseEntity<Map<String, Object>> handleError(HttpServletRequest reque\n     return new ResponseEntity<>(errorAttributes, headers, status);\n   }\n \n+  //\u6253\u5370\u65e5\u5fd7, \u5176\u4e2dlogLevel\u4e3a\u65e5\u5fd7\u7ea7\u522b: ERROR/WARN/DEBUG/INFO/TRACE\n+  private void printLog(String message, Throwable ex, Level logLevel) {\n+    switch (logLevel.toString()) {\n+      case \"ERROR\":\n+        logger.error(message, ex);\n+        break;\n+      case \"WARN\":\n+        logger.warn(message, ex);\n+        break;\n+      case \"DEBUG\":\n+        logger.debug(message, ex);\n+        break;\n+      case \"INFO\":\n+        logger.info(message, ex);\n+        break;\n+      case \"TRACE\":\n+        logger.trace(message, ex);\n+        break;\n+    }\n+    \n+    Tracer.logError(ex);\n+  }\n+\n }",
      "parent_sha": "4e0a78951686cea3945efcd791585533909c1126"
    }
  },
  {
    "oid": "02fff624870ab6f552e671288d903cb5ae418d80",
    "message": "Fix flaky test testAssembleQueryConfigUrl. (#4083)\n\nCo-authored-by: wxq <Anilople@outlook.com>",
    "date": "2021-11-12T01:21:44Z",
    "url": "https://github.com/apolloconfig/apollo/commit/02fff624870ab6f552e671288d903cb5ae418d80",
    "details": {
      "sha": "69ecae49a5933d49dfe9b18c3d7596705336eec2",
      "filename": "apollo-core/src/main/java/com/ctrip/framework/apollo/core/dto/ApolloNotificationMessages.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/02fff624870ab6f552e671288d903cb5ae418d80/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2Fdto%2FApolloNotificationMessages.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/02fff624870ab6f552e671288d903cb5ae418d80/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2Fdto%2FApolloNotificationMessages.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2Fdto%2FApolloNotificationMessages.java?ref=02fff624870ab6f552e671288d903cb5ae418d80",
      "patch": "@@ -28,7 +28,7 @@ public class ApolloNotificationMessages {\n   private Map<String, Long> details;\n \n   public ApolloNotificationMessages() {\n-    this(Maps.<String, Long>newHashMap());\n+    this(Maps.<String, Long>newTreeMap());\n   }\n \n   private ApolloNotificationMessages(Map<String, Long> details) {",
      "parent_sha": "b00f23873bd2306df1fb7ae6d7b9b2e2230f401e"
    }
  },
  {
    "oid": "ec658b0792117f3288d6494248badfe885fb4f25",
    "message": "refactor(apollo-biz): simplify the code of ReleaseService",
    "date": "2022-08-06T11:27:03Z",
    "url": "https://github.com/apolloconfig/apollo/commit/ec658b0792117f3288d6494248badfe885fb4f25",
    "details": {
      "sha": "0911ddd4c7a55964e076891e7808c2eded70207c",
      "filename": "apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ReleaseService.java",
      "status": "modified",
      "additions": 17,
      "deletions": 13,
      "changes": 30,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/ec658b0792117f3288d6494248badfe885fb4f25/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fservice%2FReleaseService.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/ec658b0792117f3288d6494248badfe885fb4f25/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fservice%2FReleaseService.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fservice%2FReleaseService.java?ref=ec658b0792117f3288d6494248badfe885fb4f25",
      "patch": "@@ -33,6 +33,7 @@\n import com.ctrip.framework.apollo.common.exception.NotFoundException;\n import com.ctrip.framework.apollo.common.utils.GrayReleaseRuleItemTransformer;\n import com.ctrip.framework.apollo.core.utils.StringUtils;\n+import com.google.common.base.Strings;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n@@ -61,7 +62,7 @@ public class ReleaseService {\n       .newHashSet(ReleaseOperation.GRAY_RELEASE, ReleaseOperation.MASTER_NORMAL_RELEASE_MERGE_TO_GRAY,\n           ReleaseOperation.MATER_ROLLBACK_MERGE_TO_GRAY);\n   private static final Pageable FIRST_ITEM = PageRequest.of(0, 1);\n-  private static final Type OPERATION_CONTEXT_TYPE_REFERENCE = new TypeToken<Map<String, Object>>() { }.getType();\n+  private static final Type OPERATION_CONTEXT_TYPE_REFERENCE = new TypeToken<Map<String, Collection<String>>>() { }.getType();\n \n   private final ReleaseRepository releaseRepository;\n   private final ItemService itemService;\n@@ -322,14 +323,20 @@ private Collection<String> getBranchReleaseKeys(long releaseId) {\n       return null;\n     }\n \n-    Map<String, Object> operationContext = GSON\n-        .fromJson(releaseHistories.getContent().get(0).getOperationContext(), OPERATION_CONTEXT_TYPE_REFERENCE);\n+    String operationContextJson = releaseHistories.getContent().get(0).getOperationContext();\n+    if (Strings.isNullOrEmpty(operationContextJson)\n+        || !operationContextJson.contains(ReleaseOperationContext.BRANCH_RELEASE_KEYS)) {\n+      return null;\n+    }\n \n-    if (operationContext == null || !operationContext.containsKey(ReleaseOperationContext.BRANCH_RELEASE_KEYS)) {\n+    Map<String, Collection<String>> operationContext = GSON\n+        .fromJson(operationContextJson, OPERATION_CONTEXT_TYPE_REFERENCE);\n+\n+    if (operationContext == null) {\n       return null;\n     }\n \n-    return (Collection<String>) operationContext.get(ReleaseOperationContext.BRANCH_RELEASE_KEYS);\n+    return operationContext.get(ReleaseOperationContext.BRANCH_RELEASE_KEYS);\n   }\n \n   private Release publishBranchNamespace(Namespace parentNamespace, Namespace childNamespace,\n@@ -396,21 +403,18 @@ private Release branchRelease(Namespace parentNamespace, Namespace childNamespac\n \n   private Map<String, String> mergeConfiguration(Map<String, String> baseConfigurations,\n                                                  Map<String, String> coverConfigurations) {\n-    Map<String, String> result = new LinkedHashMap<>();\n+    int expectedSize = baseConfigurations.size() + coverConfigurations.size();\n+    Map<String, String> result = Maps.newLinkedHashMapWithExpectedSize(expectedSize);\n+\n     //copy base configuration\n-    for (Map.Entry<String, String> entry : baseConfigurations.entrySet()) {\n-      result.put(entry.getKey(), entry.getValue());\n-    }\n+    result.putAll(baseConfigurations);\n \n     //update and publish\n-    for (Map.Entry<String, String> entry : coverConfigurations.entrySet()) {\n-      result.put(entry.getKey(), entry.getValue());\n-    }\n+    result.putAll(coverConfigurations);\n \n     return result;\n   }\n \n-\n   private Map<String, String> getNamespaceItems(Namespace namespace) {\n     List<Item> items = itemService.findItemsWithOrdered(namespace.getId());\n     Map<String, String> configurations = new LinkedHashMap<>();",
      "parent_sha": "17f59619c026ba9525fccda341ab8605c291deaf"
    }
  },
  {
    "oid": "498a12ea1bc9554a39b270198084cbab5e724f16",
    "message": "simplify demo",
    "date": "2017-03-24T07:54:19Z",
    "url": "https://github.com/apolloconfig/apollo/commit/498a12ea1bc9554a39b270198084cbab5e724f16",
    "details": {
      "sha": "c6d2f77ae87ccb6bd2196aaf27d72667bdd4b378",
      "filename": "apollo-demo/src/main/java/com/ctrip/framework/apollo/demo/spring/bean/AnnotatedBean.java",
      "status": "modified",
      "additions": 2,
      "deletions": 8,
      "changes": 10,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/498a12ea1bc9554a39b270198084cbab5e724f16/apollo-demo%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fdemo%2Fspring%2Fbean%2FAnnotatedBean.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/498a12ea1bc9554a39b270198084cbab5e724f16/apollo-demo%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fdemo%2Fspring%2Fbean%2FAnnotatedBean.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-demo%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fdemo%2Fspring%2Fbean%2FAnnotatedBean.java?ref=498a12ea1bc9554a39b270198084cbab5e724f16",
      "patch": "@@ -46,14 +46,8 @@ public void setBatch(int batch) {\n   @ApolloConfigChangeListener(\"application\")\n   private void someChangeHandler(ConfigChangeEvent changeEvent) {\n     logger.info(\"[someChangeHandler]Changes for namespace {}\", changeEvent.getNamespace());\n-    for (String key : changeEvent.changedKeys()) {\n-      ConfigChange change = changeEvent.getChange(key);\n-      logger.info(\"[someChangeHandler]Change - key: {}, oldValue: {}, newValue: {}, changeType: {}\",\n-          change.getPropertyName(), change.getOldValue(), change.getNewValue(),\n-          change.getChangeType());\n-      if (key.equals(\"timeout\")) {\n-        refreshTimeout();\n-      }\n+    if (changeEvent.isChanged(\"timeout\")) {\n+      refreshTimeout();\n     }\n   }\n ",
      "parent_sha": "e7471893c2037e490d7ccc0c0d94923e849885e3"
    }
  },
  {
    "oid": "a4cb3b9a9d865583170c7d77c1fded39288932d6",
    "message": "fix ut",
    "date": "2016-08-24T03:44:47Z",
    "url": "https://github.com/apolloconfig/apollo/commit/a4cb3b9a9d865583170c7d77c1fded39288932d6",
    "details": {
      "sha": "7e2dc652a3d314d88cc769c64295d3b432474a66",
      "filename": "apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/a4cb3b9a9d865583170c7d77c1fded39288932d6/apollo-client%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigRepositoryTest.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/a4cb3b9a9d865583170c7d77c1fded39288932d6/apollo-client%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigRepositoryTest.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigRepositoryTest.java?ref=a4cb3b9a9d865583170c7d77c1fded39288932d6",
      "patch": "@@ -254,7 +254,11 @@ public void initialize() throws InitializationException {\n   public static class MockHttpUtil extends HttpUtil {\n     @Override\n     public <T> HttpResponse<T> doGet(HttpRequest httpRequest, Class<T> responseType) {\n-      return (HttpResponse<T>) someResponse;\n+      if (someResponse.getStatusCode() == 200 || someResponse.getStatusCode() == 304 ) {\n+        return (HttpResponse<T>) someResponse;\n+      }\n+      throw new ApolloConfigException(String.format(\"Http request failed due to status code: %d\",\n+          someResponse.getStatusCode()));\n     }\n \n     @Override",
      "parent_sha": "a148282a7dfb55667f12618a7e6c64a0842177ff"
    }
  },
  {
    "oid": "d05979590d99ae142445c104003d7c5a05804e32",
    "message": "ServiceBootstrap unit test fix for java 11 (#3593)",
    "date": "2021-03-13T01:58:24Z",
    "url": "https://github.com/apolloconfig/apollo/commit/d05979590d99ae142445c104003d7c5a05804e32",
    "details": {
      "sha": "627e8762149a345c5d0bd7caa252784b8e31672c",
      "filename": "apollo-core/src/test/java/com/ctrip/framework/foundation/internals/ServiceBootstrapTest.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/d05979590d99ae142445c104003d7c5a05804e32/apollo-core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Ffoundation%2Finternals%2FServiceBootstrapTest.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/d05979590d99ae142445c104003d7c5a05804e32/apollo-core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Ffoundation%2Finternals%2FServiceBootstrapTest.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-core%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Ffoundation%2Finternals%2FServiceBootstrapTest.java?ref=d05979590d99ae142445c104003d7c5a05804e32",
      "patch": "@@ -48,25 +48,25 @@ public void loadPrimaryWithServiceFileButNoServiceImpl() {\n     ServiceBootstrap.loadPrimary(Interface7.class);\n   }\n \n-  private interface Interface1 {\n+  interface Interface1 {\n   }\n \n   public static class Interface1Impl implements Interface1 {\n   }\n \n-  private interface Interface2 {\n+  interface Interface2 {\n   }\n \n-  private interface Interface3 {\n+  interface Interface3 {\n   }\n \n-  private interface Interface4 {\n+  interface Interface4 {\n   }\n \n-  private interface Interface5 {\n+  interface Interface5 {\n   }\n \n-  private interface Interface6 extends Ordered {\n+  interface Interface6 extends Ordered {\n   }\n \n   public static class Interface6Impl1 implements Interface6 {\n@@ -83,6 +83,6 @@ public int getOrder() {\n     }\n   }\n \n-  private interface Interface7 extends Ordered {\n+  interface Interface7 extends Ordered {\n   }\n }",
      "parent_sha": "de34fe5cda604020f1b098e96519872d5118b0de"
    }
  },
  {
    "oid": "e5ebd115d7b18aea236ba4aa6c69c5f160637b35",
    "message": "class loader util npe hot fix",
    "date": "2016-08-04T07:21:11Z",
    "url": "https://github.com/apolloconfig/apollo/commit/e5ebd115d7b18aea236ba4aa6c69c5f160637b35",
    "details": {
      "sha": "669aeadc1d02242c6ec84d9942d2447c9a37103c",
      "filename": "apollo-core/src/main/java/com/ctrip/framework/apollo/core/utils/ClassLoaderUtil.java",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/e5ebd115d7b18aea236ba4aa6c69c5f160637b35/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2Futils%2FClassLoaderUtil.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/e5ebd115d7b18aea236ba4aa6c69c5f160637b35/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2Futils%2FClassLoaderUtil.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2Futils%2FClassLoaderUtil.java?ref=e5ebd115d7b18aea236ba4aa6c69c5f160637b35",
      "patch": "@@ -1,5 +1,7 @@\n package com.ctrip.framework.apollo.core.utils;\n \n+import com.google.common.base.Strings;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -25,16 +27,18 @@ public class ClassLoaderUtil {\n     try {\n       URL url = loader.getResource(\"\");\n       // get class path\n-      classPath = url.getPath();\n-      classPath = URLDecoder.decode(classPath, \"utf-8\");\n+      if (url != null) {\n+        classPath = url.getPath();\n+        classPath = URLDecoder.decode(classPath, \"utf-8\");\n+      }\n \n       // \u5982\u679c\u662fjar\u5305\u5185\u7684\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u8def\u5f84\n-      if (classPath.contains(\".jar!\")) {\n-        logger.warn(\"using config file inline jar!\");\n+      if (Strings.isNullOrEmpty(classPath) || classPath.contains(\".jar!\")) {\n         classPath = System.getProperty(\"user.dir\");\n       }\n-    } catch (UnsupportedEncodingException e) {\n-      e.printStackTrace();\n+    } catch (Throwable ex) {\n+      classPath = System.getProperty(\"user.dir\");\n+      ex.printStackTrace();\n     }\n   }\n ",
      "parent_sha": "f4b036fba83bd489dda7e1e24d6a60139ffb0aa5"
    }
  },
  {
    "oid": "d849c02f1089007ba740c3ae18381679669392cb",
    "message": "Fixes testUpdateBranchGrayRulesWithUpdateOnce (#4599)\n\n* Fixes testUpdateBranchGrayRulesWithUpdateOnce\r\n\r\n* revise test fixing\r\n\r\n* revise test fixing\r\n\r\n* refactor test\r\n\r\nCo-authored-by: zhewenf2 <zhewenf2@illinois.edu>",
    "date": "2022-10-28T00:43:42Z",
    "url": "https://github.com/apolloconfig/apollo/commit/d849c02f1089007ba740c3ae18381679669392cb",
    "details": {
      "sha": "b6b56a5f8f821d11add1cbeeaef527b2d4df83b5",
      "filename": "apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/NamespaceBranchServiceTest.java",
      "status": "modified",
      "additions": 36,
      "deletions": 5,
      "changes": 41,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/d849c02f1089007ba740c3ae18381679669392cb/apollo-biz%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fservice%2FNamespaceBranchServiceTest.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/d849c02f1089007ba740c3ae18381679669392cb/apollo-biz%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fservice%2FNamespaceBranchServiceTest.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-biz%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fservice%2FNamespaceBranchServiceTest.java?ref=d849c02f1089007ba740c3ae18381679669392cb",
      "patch": "@@ -22,6 +22,11 @@\n import com.ctrip.framework.apollo.biz.entity.ReleaseHistory;\n import com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\n import com.ctrip.framework.apollo.common.constants.ReleaseOperation;\n+import com.ctrip.framework.apollo.common.utils.GrayReleaseRuleItemTransformer;\n+import com.ctrip.framework.apollo.common.dto.GrayReleaseRuleItemDTO;\n+import java.lang.reflect.Type;\n+import java.util.Set;\n+import java.util.Map;\n \n import org.junit.Assert;\n import org.junit.Test;\n@@ -30,6 +35,8 @@\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n import org.springframework.test.context.jdbc.Sql;\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n \n public class NamespaceBranchServiceTest extends AbstractIntegrationTest {\n \n@@ -82,7 +89,7 @@ public void testUpdateBranchGrayRulesWithUpdateOnce() {\n     Assert.assertEquals(ReleaseOperation.APPLY_GRAY_RULES, releaseHistory.getOperation());\n     Assert.assertEquals(0, releaseHistory.getReleaseId());\n     Assert.assertEquals(0, releaseHistory.getPreviousReleaseId());\n-    Assert.assertTrue(releaseHistory.getOperationContext().contains(rule.getRules()));\n+    Assert.assertTrue(containRules(releaseHistory.getOperationContext(), rule.getRules()));\n   }\n \n   @Test\n@@ -115,10 +122,34 @@ public void testUpdateBranchGrayRulesWithUpdateTwice() {\n     Assert.assertEquals(2, releaseHistories.getTotalElements());\n     Assert.assertEquals(ReleaseOperation.APPLY_GRAY_RULES, firstReleaseHistory.getOperation());\n     Assert.assertEquals(ReleaseOperation.APPLY_GRAY_RULES, secondReleaseHistory.getOperation());\n-    Assert.assertTrue(firstReleaseHistory.getOperationContext().contains(firstRule.getRules()));\n-    Assert.assertFalse(firstReleaseHistory.getOperationContext().contains(secondRule.getRules()));\n-    Assert.assertTrue(secondReleaseHistory.getOperationContext().contains(firstRule.getRules()));\n-    Assert.assertTrue(secondReleaseHistory.getOperationContext().contains(secondRule.getRules()));\n+    Assert.assertTrue(containRules(firstReleaseHistory.getOperationContext(), firstRule.getRules()));\n+    Assert.assertFalse(containRules(firstReleaseHistory.getOperationContext(), secondRule.getRules()));\n+    Assert.assertTrue(containRules(secondReleaseHistory.getOperationContext(), firstRule.getRules()));\n+    Assert.assertTrue(containRules(secondReleaseHistory.getOperationContext(), secondRule.getRules()));\n+  }\n+\n+  private boolean containRules(String context, String rules) {\n+    Type grayReleaseRuleItemsType = new TypeToken<Map<String, Set<GrayReleaseRuleItemDTO>>>() {\n+    }.getType();\n+    Map<String, Set<GrayReleaseRuleItemDTO>> contextRulesMap = new Gson().fromJson(context, grayReleaseRuleItemsType);\n+    Set<GrayReleaseRuleItemDTO> ruleSet = GrayReleaseRuleItemTransformer.batchTransformFromJSON(rules);\n+\n+    for (GrayReleaseRuleItemDTO rule : ruleSet) {\n+      boolean found = false;\n+      loop: for (Set<GrayReleaseRuleItemDTO> contextRules : contextRulesMap.values()) {\n+        for (GrayReleaseRuleItemDTO contextRule : contextRules) {\n+          if (contextRule.toString().equals(rule.toString())) {\n+            found = true;\n+            break loop;\n+          }\n+        }\n+      }\n+      if (!found) {\n+        return false;\n+      }\n+    }\n+\n+    return true;\n   }\n \n   @Test",
      "parent_sha": "75ae5cc8ca41c5f177cd9c8e044a9425ba40ad39"
    }
  },
  {
    "oid": "e2f3bcd21d4aaf95719e62b014b14c1e50f66c8a",
    "message": "update",
    "date": "2016-07-13T08:14:51Z",
    "url": "https://github.com/apolloconfig/apollo/commit/e2f3bcd21d4aaf95719e62b014b14c1e50f66c8a",
    "details": {
      "sha": "a53a6ac775a6eabd45e9ada2c9dc8b1443255579",
      "filename": "apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Cluster.java",
      "status": "modified",
      "additions": 6,
      "deletions": 9,
      "changes": 15,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/e2f3bcd21d4aaf95719e62b014b14c1e50f66c8a/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fentity%2FCluster.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/e2f3bcd21d4aaf95719e62b014b14c1e50f66c8a/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fentity%2FCluster.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fentity%2FCluster.java?ref=e2f3bcd21d4aaf95719e62b014b14c1e50f66c8a",
      "patch": "@@ -16,7 +16,7 @@\n @Table(name = \"Cluster\")\n @SQLDelete(sql = \"Update Cluster set isDeleted = 1 where id = ?\")\n @Where(clause = \"isDeleted = 0\")\n-public class Cluster extends BaseEntity implements Comparable<Cluster>{\n+public class Cluster extends BaseEntity implements Comparable<Cluster> {\n \n   @Column(name = \"Name\", nullable = false)\n   private String name;\n@@ -46,19 +46,16 @@ public String toString() {\n \n   @Override\n   public int compareTo(Cluster o) {\n-    if (o == null){\n+    if (o == null) {\n       return 1;\n     }\n \n-    long selfId = getId();\n-    long targetId = o.getId();\n-\n-    if (selfId > targetId){\n+    if (getId() > o.getId()) {\n       return 1;\n-    }else if (selfId == targetId){\n+    }\n+    if (getId() == o.getId()) {\n       return 0;\n-    }else {\n-      return -1;\n     }\n+    return -1;\n   }\n }",
      "parent_sha": "e026c4309c29e935df80980eccbec3b497f487ed"
    }
  },
  {
    "oid": "a9d83837c6fbc389e1e5e2028b2b5d5f5afd28b4",
    "message": "Fix typo on \"load from specified cluster fist\" (#3753)",
    "date": "2021-06-11T13:28:29Z",
    "url": "https://github.com/apolloconfig/apollo/commit/a9d83837c6fbc389e1e5e2028b2b5d5f5afd28b4",
    "details": {
      "sha": "a16bc831a0dca8774d14359daa5843f7bf40341e",
      "filename": "apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/service/config/AbstractConfigService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/a9d83837c6fbc389e1e5e2028b2b5d5f5afd28b4/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fservice%2Fconfig%2FAbstractConfigService.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/a9d83837c6fbc389e1e5e2028b2b5d5f5afd28b4/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fservice%2Fconfig%2FAbstractConfigService.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fservice%2Fconfig%2FAbstractConfigService.java?ref=a9d83837c6fbc389e1e5e2028b2b5d5f5afd28b4",
      "patch": "@@ -36,7 +36,7 @@ public abstract class AbstractConfigService implements ConfigService {\n   @Override\n   public Release loadConfig(String clientAppId, String clientIp, String configAppId, String configClusterName,\n       String configNamespace, String dataCenter, ApolloNotificationMessages clientMessages) {\n-    // load from specified cluster fist\n+    // load from specified cluster first\n     if (!Objects.equals(ConfigConsts.CLUSTER_NAME_DEFAULT, configClusterName)) {\n       Release clusterRelease = findRelease(clientAppId, clientIp, configAppId, configClusterName, configNamespace,\n           clientMessages);",
      "parent_sha": "44cf586c4b5b1b9df8c63a49f4b1d3b9d4d01baa"
    }
  },
  {
    "oid": "21e76b3d43f455c1e28a9d6626601362cf4997ae",
    "message": "modified spring security user update and delete sql by use primary key  for support database set SQL_SAFE_UPDATES = 1 #1997 (#2016)",
    "date": "2019-03-09T07:36:21Z",
    "url": "https://github.com/apolloconfig/apollo/commit/21e76b3d43f455c1e28a9d6626601362cf4997ae",
    "details": {
      "sha": "2177e29bd9d04bfaa56bbcb4c9cff1009b85bd9f",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/AuthConfiguration.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/21e76b3d43f455c1e28a9d6626601362cf4997ae/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fconfiguration%2FAuthConfiguration.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/21e76b3d43f455c1e28a9d6626601362cf4997ae/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fconfiguration%2FAuthConfiguration.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fconfiguration%2FAuthConfiguration.java?ref=21e76b3d43f455c1e28a9d6626601362cf4997ae",
      "patch": "@@ -236,14 +236,14 @@ public JdbcUserDetailsManager jdbcUserDetailsManager(AuthenticationManagerBuilde\n       jdbcUserDetailsManager\n           .setCreateUserSql(\"insert into `Users` (Username, Password, Enabled) values (?,?,?)\");\n       jdbcUserDetailsManager\n-          .setUpdateUserSql(\"update `Users` set Password = ?, Enabled = ? where Username = ?\");\n-      jdbcUserDetailsManager.setDeleteUserSql(\"delete from `Users` where Username = ?\");\n+          .setUpdateUserSql(\"update `Users` set Password = ?, Enabled = ? where id = (select u.id from (select id from `Users` where Username = ?) as u)\");\n+      jdbcUserDetailsManager.setDeleteUserSql(\"delete from `Users` where id = (select u.id from (select id from `Users` where Username = ?) as u)\");\n       jdbcUserDetailsManager\n           .setCreateAuthoritySql(\"insert into `Authorities` (Username, Authority) values (?,?)\");\n       jdbcUserDetailsManager\n-          .setDeleteUserAuthoritiesSql(\"delete from `Authorities` where Username = ?\");\n+          .setDeleteUserAuthoritiesSql(\"delete from `Authorities` where id = (select u.id from (select id from `Users` where Username = ?) as u)\");\n       jdbcUserDetailsManager\n-          .setChangePasswordSql(\"update `Users` set Password = ? where Username = ?\");\n+          .setChangePasswordSql(\"update `Users` set Password = ? where id = (select u.id from (select id from `Users` where Username = ?) as u)\");\n \n       return jdbcUserDetailsManager;\n     }",
      "parent_sha": "3cc845b94aa9e6ba052de47575051016c457cc46"
    }
  },
  {
    "oid": "84af88fce42397a12d3552b3f829234e08d41e03",
    "message": "Correct the test semantics of the test case in ItemSetControllerTest (#4823)\n\n* add tech-support-qq-4.png\r\n\r\n* Update README.md\r\n\r\n* Enhance the user experience in the scenario of submitting duplicate keys\r\n\r\n* Modify the key-value conflict exception prompt, adjust the code style\r\n\r\n* test(apollo-biz): Correct the test semantics of the test case in ItemSetControllerTest\r\n\r\n* test(apollo-biz): Optimize the test case for ItemSetControllerTest\r\n\r\n* test(apollo-biz): Optimize the test case for ItemSetControllerTest\r\n\r\n* test(apollo-biz): Optimize the test case for ItemSetControllerTest\r\n\r\n---------\r\n\r\nCo-authored-by: Jason Song <nobodyiam@gmail.com>",
    "date": "2023-04-01T09:13:38Z",
    "url": "https://github.com/apolloconfig/apollo/commit/84af88fce42397a12d3552b3f829234e08d41e03",
    "details": {
      "sha": "f4183266c807f71941c346242f3b0b5cd4d83150",
      "filename": "apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ItemSetControllerTest.java",
      "status": "modified",
      "additions": 38,
      "deletions": 48,
      "changes": 86,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/84af88fce42397a12d3552b3f829234e08d41e03/apollo-adminservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fadminservice%2Fcontroller%2FItemSetControllerTest.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/84af88fce42397a12d3552b3f829234e08d41e03/apollo-adminservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fadminservice%2Fcontroller%2FItemSetControllerTest.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-adminservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fadminservice%2Fcontroller%2FItemSetControllerTest.java?ref=84af88fce42397a12d3552b3f829234e08d41e03",
      "patch": "@@ -24,17 +24,18 @@\n import com.ctrip.framework.apollo.common.dto.ItemDTO;\n import com.ctrip.framework.apollo.common.dto.NamespaceDTO;\n \n+import com.ctrip.framework.apollo.common.exception.BadRequestException;\n+import java.util.Objects;\n import org.junit.Assert;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.web.client.TestRestTemplate;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.test.context.jdbc.Sql;\n import org.springframework.test.context.jdbc.Sql.ExecutionPhase;\n-import org.springframework.web.client.RestTemplate;\n \n import java.util.List;\n+import org.springframework.web.client.HttpClientErrorException;\n \n public class ItemSetControllerTest extends AbstractControllerTest {\n \n@@ -60,13 +61,10 @@ public void testItemSetCreated() {\n     Assert.assertEquals(\"default\", cluster.getName());\n     Assert.assertEquals(\"application\", namespace.getNamespaceName());\n \n-    RestTemplate createdTemplate = (new TestRestTemplate()).getRestTemplate();\n-    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-\n     int createdSize = 3;\n     ItemChangeSets itemSet = mockCreateItemChangeSets(namespace, createdSize);\n \n-    ResponseEntity<Void> response = createdTemplate.postForEntity(itemSetBaseUrl(),\n+    ResponseEntity<Void> response = restTemplate.postForEntity(itemSetBaseUrl(),\n             itemSet, Void.class, app.getAppId(), cluster.getName(), namespace.getNamespaceName());\n     Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n     List<Item> items = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n@@ -95,16 +93,18 @@ public void testItemSetCreatedWithInvalidNamespaceId() {\n     Assert.assertNotNull(someNamespace);\n     long someNamespaceId = someNamespace.getId();\n \n-    RestTemplate createdTemplate = (new TestRestTemplate()).getRestTemplate();\n-    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-\n     int createdSize = 3;\n     ItemChangeSets itemSet = mockCreateItemChangeSets(namespace, createdSize);\n     itemSet.getCreateItems().get(createdSize - 1).setNamespaceId(someNamespaceId);\n \n-    ResponseEntity<Void> response =\n-        createdTemplate.postForEntity(itemSetBaseUrl(), itemSet, Void.class, appId, clusterName, namespaceName);\n-    Assert.assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());\n+    try {\n+          restTemplate.postForEntity(itemSetBaseUrl(), itemSet, Void.class, appId, clusterName, namespaceName);\n+    } catch (HttpClientErrorException e) {\n+      Assert.assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+      Assert.assertTrue(\n+          Objects.requireNonNull(e.getMessage()).contains(BadRequestException.namespaceNotMatch().getMessage()));\n+      Assert.assertTrue(e.getMessage().contains(BadRequestException.class.getName()));\n+    }\n     List<Item> items = itemRepository.findByNamespaceIdOrderByLineNumAsc(someNamespaceId);\n     Assert.assertEquals(0, items.size());\n   }\n@@ -128,32 +128,26 @@ public void testItemSetUpdated() {\n     Assert.assertEquals(\"default\", cluster.getName());\n     Assert.assertEquals(\"application\", namespace.getNamespaceName());\n \n-    RestTemplate createdRestTemplate = (new TestRestTemplate()).getRestTemplate();\n-    createdRestTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-\n     int createdSize = 3;\n     ItemChangeSets createChangeSet = mockCreateItemChangeSets(namespace, createdSize);\n \n-    ResponseEntity<Void> response = createdRestTemplate.postForEntity(itemSetBaseUrl(),\n+    ResponseEntity<Void> response = restTemplate.postForEntity(itemSetBaseUrl(),\n         createChangeSet, Void.class, app.getAppId(), cluster.getName(), namespace.getNamespaceName());\n     Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n \n-    ItemDTO[] items = createdRestTemplate.getForObject(itemBaseUrl(),\n+    ItemDTO[] items = restTemplate.getForObject(itemBaseUrl(),\n             ItemDTO[].class, app.getAppId(), cluster.getName(), namespace.getNamespaceName());\n \n     ItemChangeSets updateChangeSet = new ItemChangeSets();\n     updateChangeSet.setDataChangeLastModifiedBy(\"updated\");\n \n-    RestTemplate updatedRestTemplate = (new TestRestTemplate()).getRestTemplate();\n-    updatedRestTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-\n     int updatedSize = 2;\n     for (int i = 0; i < updatedSize; i++) {\n       items[i].setValue(\"updated_value_\" + i);\n       updateChangeSet.addUpdateItem(items[i]);\n     }\n \n-    response = updatedRestTemplate.postForEntity(itemSetBaseUrl(),\n+    response = restTemplate.postForEntity(itemSetBaseUrl(),\n         updateChangeSet, Void.class, app.getAppId(), cluster.getName(), namespace.getNamespaceName());\n     Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n     List<Item> savedItems = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n@@ -179,36 +173,36 @@ public void testItemSetUpdatedWithInvalidNamespaceId() {\n     NamespaceDTO namespace = restTemplate.getForObject(namespaceBaseUrl(), NamespaceDTO.class, appId, clusterName, namespaceName);\n     NamespaceDTO someNamespace = restTemplate.getForObject(namespaceBaseUrl(), NamespaceDTO.class, appId, clusterName, someNamespaceName);\n \n-    RestTemplate createdRestTemplate = (new TestRestTemplate()).getRestTemplate();\n-    createdRestTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-\n     int createdSize = 3;\n     ItemChangeSets createChangeSet = mockCreateItemChangeSets(namespace, createdSize);\n \n     Assert.assertNotNull(namespace);\n-    ResponseEntity<Void> response = createdRestTemplate.postForEntity(itemSetBaseUrl(),\n+    ResponseEntity<Void> response = restTemplate.postForEntity(itemSetBaseUrl(),\n         createChangeSet, Void.class, appId, clusterName, namespace.getNamespaceName());\n     Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n \n     ItemDTO[] items =\n-        createdRestTemplate.getForObject(itemBaseUrl(),\n+        restTemplate.getForObject(itemBaseUrl(),\n             ItemDTO[].class, appId, clusterName, namespace.getNamespaceName());\n \n     ItemChangeSets updateChangeSet = new ItemChangeSets();\n     updateChangeSet.setDataChangeLastModifiedBy(\"updated\");\n \n-    RestTemplate updatedRestTemplate = (new TestRestTemplate()).getRestTemplate();\n-    updatedRestTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-\n     int updatedSize = 2;\n     for (int i = 0; i < updatedSize; i++) {\n       items[i].setValue(\"updated_value_\" + i);\n       updateChangeSet.addUpdateItem(items[i]);\n     }\n \n-    response = updatedRestTemplate.postForEntity(itemSetBaseUrl(),\n-        updateChangeSet, Void.class, appId, clusterName, someNamespaceName);\n-    Assert.assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());\n+    try {\n+       restTemplate.postForEntity(itemSetBaseUrl(), updateChangeSet, Void.class, appId, clusterName, someNamespaceName);\n+    } catch (HttpClientErrorException e) {\n+      Assert.assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+      Assert.assertTrue(\n+          Objects.requireNonNull(e.getMessage()).contains(BadRequestException.namespaceNotMatch().getMessage()));\n+      Assert.assertTrue(e.getMessage().contains(BadRequestException.class.getName()));\n+    }\n+\n     List<Item> savedItems = itemRepository.findByNamespaceIdOrderByLineNumAsc(someNamespace.getId());\n     Assert.assertEquals(0, savedItems.size());\n   }\n@@ -246,13 +240,10 @@ public void testItemSetDeleted() {\n     Assert.assertEquals(\"default\", cluster.getName());\n     Assert.assertEquals(\"application\", namespace.getNamespaceName());\n \n-    RestTemplate createdTemplate = (new TestRestTemplate()).getRestTemplate();\n-    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-\n     int createdSize = 3;\n     ItemChangeSets createChangeSet = mockCreateItemChangeSets(namespace, createdSize);\n \n-    ResponseEntity<Void> response = createdTemplate.postForEntity(itemSetBaseUrl(),\n+    ResponseEntity<Void> response = restTemplate.postForEntity(itemSetBaseUrl(),\n         createChangeSet, Void.class, app.getAppId(), cluster.getName(), namespace.getNamespaceName());\n     Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n \n@@ -261,16 +252,14 @@ public void testItemSetDeleted() {\n \n     ItemChangeSets deleteChangeSet = new ItemChangeSets();\n     deleteChangeSet.setDataChangeLastModifiedBy(\"deleted\");\n-    RestTemplate deletedTemplate = (new TestRestTemplate()).getRestTemplate();\n-    deletedTemplate.setMessageConverters(restTemplate.getMessageConverters());\n \n     int deletedSize = 1;\n     for (int i = 0; i < deletedSize; i++) {\n       items[i].setValue(\"deleted_value_\" + i);\n       deleteChangeSet.addDeleteItem(items[i]);\n     }\n \n-    response = deletedTemplate.postForEntity(itemSetBaseUrl(),\n+    response = restTemplate.postForEntity(itemSetBaseUrl(),\n         deleteChangeSet, Void.class, app.getAppId(), cluster.getName(), namespace.getNamespaceName());\n     Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n     List<Item> savedItems = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n@@ -294,14 +283,11 @@ public void testItemSetDeletedWithInvalidNamespaceId() {\n     NamespaceDTO namespace =\n         restTemplate.getForObject(namespaceBaseUrl(), NamespaceDTO.class, appId, clusterName, namespaceName);\n \n-    RestTemplate createdTemplate = (new TestRestTemplate()).getRestTemplate();\n-    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-\n     int createdSize = 3;\n     ItemChangeSets createChangeSet = mockCreateItemChangeSets(namespace, createdSize);\n \n     Assert.assertNotNull(namespace);\n-    ResponseEntity<Void> response = createdTemplate.postForEntity(itemSetBaseUrl(),\n+    ResponseEntity<Void> response = restTemplate.postForEntity(itemSetBaseUrl(),\n         createChangeSet, Void.class, appId, clusterName, namespace.getNamespaceName());\n     Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n \n@@ -310,18 +296,22 @@ public void testItemSetDeletedWithInvalidNamespaceId() {\n \n     ItemChangeSets deleteChangeSet = new ItemChangeSets();\n     deleteChangeSet.setDataChangeLastModifiedBy(\"deleted\");\n-    RestTemplate deletedTemplate = (new TestRestTemplate()).getRestTemplate();\n-    deletedTemplate.setMessageConverters(restTemplate.getMessageConverters());\n \n     int deletedSize = 1;\n     for (int i = 0; i < deletedSize; i++) {\n       items[i].setValue(\"deleted_value_\" + i);\n       deleteChangeSet.addDeleteItem(items[i]);\n     }\n \n-    response = deletedTemplate.postForEntity(itemSetBaseUrl(),\n-        deleteChangeSet, Void.class, appId, clusterName, someNamespaceName);\n-    Assert.assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());\n+    try {\n+      restTemplate.postForEntity(itemSetBaseUrl(), deleteChangeSet, Void.class, appId, clusterName, someNamespaceName);\n+    } catch (HttpClientErrorException e) {\n+      Assert.assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+      Assert.assertTrue(\n+          Objects.requireNonNull(e.getMessage()).contains(BadRequestException.namespaceNotMatch().getMessage()));\n+      Assert.assertTrue(e.getMessage().contains(BadRequestException.class.getName()));\n+    }\n+\n     List<Item> savedItems = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n     Assert.assertEquals(createdSize, savedItems.size());\n   }",
      "parent_sha": "a86ed25fb032d35f62a4c0a8364459acb92c4d07"
    }
  },
  {
    "oid": "aec394a6c0f8dfdff5e28cf3f4d0fada3a354131",
    "message": "refactor httputil error stream handling",
    "date": "2017-12-16T11:33:57Z",
    "url": "https://github.com/apolloconfig/apollo/commit/aec394a6c0f8dfdff5e28cf3f4d0fada3a354131",
    "details": {
      "sha": "ec14a81447a67e402c3e100260bd73188b43519c",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/util/http/HttpUtil.java",
      "status": "modified",
      "additions": 29,
      "deletions": 17,
      "changes": 46,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/aec394a6c0f8dfdff5e28cf3f4d0fada3a354131/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Futil%2Fhttp%2FHttpUtil.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/aec394a6c0f8dfdff5e28cf3f4d0fada3a354131/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Futil%2Fhttp%2FHttpUtil.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Futil%2Fhttp%2FHttpUtil.java?ref=aec394a6c0f8dfdff5e28cf3f4d0fada3a354131",
      "patch": "@@ -8,6 +8,7 @@\n import com.google.common.io.CharStreams;\n import com.google.gson.Gson;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.lang.reflect.Type;\n import java.net.HttpURLConnection;\n@@ -93,20 +94,33 @@ private <T> HttpResponse<T> doGetWithSerializeFunction(HttpRequest httpRequest,\n       conn.connect();\n \n       statusCode = conn.getResponseCode();\n+      String response;\n+\n       try {\n         isr = new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8);\n-      } catch (Exception e) {\n-        // ignore\n-      }\n-      try {\n-        esr = new InputStreamReader(conn.getErrorStream(), StandardCharsets.UTF_8);\n-      } catch (Exception e) {\n-        // ignore\n+        response = CharStreams.toString(isr);\n+      } catch (IOException ex) {\n+        /**\n+         * according to https://docs.oracle.com/javase/7/docs/technotes/guides/net/http-keepalive.html,\n+         * we should clean up the connection by reading the response body so that the connection\n+         * could be reused.\n+         */\n+        InputStream errorStream = conn.getErrorStream();\n+\n+        if (errorStream != null) {\n+          esr = new InputStreamReader(errorStream, StandardCharsets.UTF_8);\n+          try {\n+            CharStreams.toString(esr);\n+          } catch (IOException ioe) {\n+            //ignore\n+          }\n+        }\n+\n+        throw ex;\n       }\n \n       if (statusCode == 200) {\n-        String content = CharStreams.toString(isr);\n-        return new HttpResponse<>(statusCode, serializeFunction.apply(content));\n+        return new HttpResponse<>(statusCode, serializeFunction.apply(response));\n       }\n \n       if (statusCode == 304) {\n@@ -117,20 +131,18 @@ private <T> HttpResponse<T> doGetWithSerializeFunction(HttpRequest httpRequest,\n     } finally {\n       if (isr != null) {\n         try {\n-          CharStreams.toString(isr);\n           isr.close();\n-        } catch (IOException e) {\n+        } catch (IOException ex) {\n           // ignore\n         }\n       }\n \n       if (esr != null) {\n-          try {\n-              CharStreams.toString(esr);\n-              esr.close();\n-          } catch (Exception e) {\n-              // ignore\n-          }\n+        try {\n+          esr.close();\n+        } catch (IOException ex) {\n+          // ignore\n+        }\n       }\n     }\n ",
      "parent_sha": "f9cb281d457d35d294d97343980b3c29bb5f8f55"
    }
  },
  {
    "oid": "bf4cd7dc3e6670d23b20f320d9bdd421be723434",
    "message": "check namespace and branch exist when update gray rules",
    "date": "2017-01-22T07:37:00Z",
    "url": "https://github.com/apolloconfig/apollo/commit/bf4cd7dc3e6670d23b20f320d9bdd421be723434",
    "details": {
      "sha": "ccf23e354ab198d3b3e187d0a1a6b09bb380db67",
      "filename": "apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/NamespaceBranchController.java",
      "status": "modified",
      "additions": 45,
      "deletions": 4,
      "changes": 49,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/bf4cd7dc3e6670d23b20f320d9bdd421be723434/apollo-adminservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fadminservice%2Fcontroller%2FNamespaceBranchController.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/bf4cd7dc3e6670d23b20f320d9bdd421be723434/apollo-adminservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fadminservice%2Fcontroller%2FNamespaceBranchController.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-adminservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fadminservice%2Fcontroller%2FNamespaceBranchController.java?ref=bf4cd7dc3e6670d23b20f320d9bdd421be723434",
      "patch": "@@ -5,10 +5,12 @@\n import com.ctrip.framework.apollo.biz.message.MessageSender;\n import com.ctrip.framework.apollo.biz.message.Topics;\n import com.ctrip.framework.apollo.biz.service.NamespaceBranchService;\n+import com.ctrip.framework.apollo.biz.service.NamespaceService;\n import com.ctrip.framework.apollo.biz.utils.ReleaseMessageKeyGenerator;\n import com.ctrip.framework.apollo.common.constants.NamespaceBranchStatus;\n import com.ctrip.framework.apollo.common.dto.GrayReleaseRuleDTO;\n import com.ctrip.framework.apollo.common.dto.NamespaceDTO;\n+import com.ctrip.framework.apollo.common.exception.BadRequestException;\n import com.ctrip.framework.apollo.common.utils.BeanUtils;\n import com.ctrip.framework.apollo.common.utils.GrayReleaseRuleItemTransformer;\n \n@@ -27,6 +29,8 @@ public class NamespaceBranchController {\n   private MessageSender messageSender;\n   @Autowired\n   private NamespaceBranchService namespaceBranchService;\n+  @Autowired\n+  private NamespaceService namespaceService;\n \n \n   @RequestMapping(value = \"/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches\", method = RequestMethod.POST)\n@@ -35,14 +39,22 @@ public NamespaceDTO createBranch(@PathVariable String appId,\n                                    @PathVariable String namespaceName,\n                                    @RequestParam(\"operator\") String operator) {\n \n+    checkNamespace(appId, clusterName, namespaceName);\n+\n     Namespace createdBranch = namespaceBranchService.createBranch(appId, clusterName, namespaceName, operator);\n+\n     return BeanUtils.transfrom(NamespaceDTO.class, createdBranch);\n   }\n-  @RequestMapping(\"/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/rules\")\n+\n+  @RequestMapping(value = \"/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/rules\",\n+      method = RequestMethod.GET)\n   public GrayReleaseRuleDTO findBranchGrayRules(@PathVariable String appId,\n                                                 @PathVariable String clusterName,\n                                                 @PathVariable String namespaceName,\n                                                 @PathVariable String branchName) {\n+\n+    checkBranch(appId, clusterName, namespaceName, branchName);\n+\n     GrayReleaseRule rules = namespaceBranchService.findBranchGrayRules(appId, clusterName, namespaceName, branchName);\n     if (rules == null) {\n       return null;\n@@ -63,6 +75,8 @@ public void updateBranchGrayRules(@PathVariable String appId, @PathVariable Stri\n                                     @PathVariable String namespaceName, @PathVariable String branchName,\n                                     @RequestBody GrayReleaseRuleDTO newRuleDto) {\n \n+    checkBranch(appId, clusterName, namespaceName, branchName);\n+\n     GrayReleaseRule newRules = BeanUtils.transfrom(GrayReleaseRule.class, newRuleDto);\n     newRules.setRules(GrayReleaseRuleItemTransformer.batchTransformToJSON(newRuleDto.getRuleItems()));\n     newRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);\n@@ -78,17 +92,22 @@ public void deleteBranch(@PathVariable String appId, @PathVariable String cluste\n                            @PathVariable String namespaceName, @PathVariable String branchName,\n                            @RequestParam(\"operator\") String operator) {\n \n-    namespaceBranchService.deleteBranch(appId, clusterName, namespaceName, branchName, NamespaceBranchStatus.DELETED, operator);\n+    checkBranch(appId, clusterName, namespaceName, branchName);\n+\n+    namespaceBranchService\n+        .deleteBranch(appId, clusterName, namespaceName, branchName, NamespaceBranchStatus.DELETED, operator);\n \n     messageSender.sendMessage(ReleaseMessageKeyGenerator.generate(appId, clusterName, namespaceName),\n-          Topics.APOLLO_RELEASE_TOPIC);\n+                              Topics.APOLLO_RELEASE_TOPIC);\n \n   }\n \n-  @RequestMapping(\"/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches\")\n+  @RequestMapping(value = \"/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches\", method = RequestMethod.GET)\n   public NamespaceDTO loadNamespaceBranch(@PathVariable String appId, @PathVariable String clusterName,\n                                           @PathVariable String namespaceName) {\n \n+    checkNamespace(appId, clusterName, namespaceName);\n+\n     Namespace childNamespace = namespaceBranchService.findBranch(appId, clusterName, namespaceName);\n     if (childNamespace == null) {\n       return null;\n@@ -97,5 +116,27 @@ public NamespaceDTO loadNamespaceBranch(@PathVariable String appId, @PathVariabl\n     return BeanUtils.transfrom(NamespaceDTO.class, childNamespace);\n   }\n \n+  private void checkBranch(String appId, String clusterName, String namespaceName, String branchName) {\n+    //1. check parent namespace\n+    checkNamespace(appId, clusterName, namespaceName);\n+\n+    //2. check child namespace\n+    Namespace childNamespace = namespaceService.findOne(appId, branchName, namespaceName);\n+    if (childNamespace == null) {\n+      throw new BadRequestException(String.format(\"Namespace's branch not exist. AppId = %s, ClusterName = %s, \"\n+                                                  + \"NamespaceName = %s, BranchName = %s\",\n+                                                  appId, clusterName, namespaceName, branchName));\n+    }\n+\n+  }\n+\n+  private void checkNamespace(String appId, String clusterName, String namespaceName) {\n+    Namespace parentNamespace = namespaceService.findOne(appId, clusterName, namespaceName);\n+    if (parentNamespace == null) {\n+      throw new BadRequestException(String.format(\"Namespace not exist. AppId = %s, ClusterName = %s, NamespaceName = %s\", appId,\n+                                                  clusterName, namespaceName));\n+    }\n+  }\n+\n \n }",
      "parent_sha": "b86e7543c5c928e826b07db754e95f98745e2c97"
    }
  },
  {
    "oid": "66578b800c11ffadccec2bd529c1c58c63780f9e",
    "message": "do audit",
    "date": "2016-08-31T08:55:58Z",
    "url": "https://github.com/apolloconfig/apollo/commit/66578b800c11ffadccec2bd529c1c58c63780f9e",
    "details": {
      "sha": "f3e946d2ca49bb003b3db25804bb5a6965a01782",
      "filename": "apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/ConfigController.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/66578b800c11ffadccec2bd529c1c58c63780f9e/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fcontroller%2FConfigController.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/66578b800c11ffadccec2bd529c1c58c63780f9e/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fcontroller%2FConfigController.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fcontroller%2FConfigController.java?ref=66578b800c11ffadccec2bd529c1c58c63780f9e",
      "patch": "@@ -107,8 +107,7 @@ public ApolloConfig queryConfig(@PathVariable String appId, @PathVariable String\n       return null;\n     }\n \n-    //stop auditing releases temporarily\n-    //auditReleases(appId, clusterName, dataCenter, clientIp, releases);\n+    auditReleases(appId, clusterName, dataCenter, clientIp, releases);\n \n     String mergedReleaseKey = FluentIterable.from(releases).transform(\n         input -> input.getReleaseKey()).join(STRING_JOINER);",
      "parent_sha": "01e7e6cdaf7f1a1a44b72912b96ade08b5066b8a"
    }
  },
  {
    "oid": "35e130207d3944c856a62a20e8eef7f5a7171bb0",
    "message": "java client's long polling timeout is 90 seconds, so server side long polling timeout must be less than 90 (#2630)",
    "date": "2019-10-01T22:56:08Z",
    "url": "https://github.com/apolloconfig/apollo/commit/35e130207d3944c856a62a20e8eef7f5a7171bb0",
    "details": {
      "sha": "a0f1f6fe886331447f73e6dff2d9863771990394",
      "filename": "apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/config/BizConfig.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/35e130207d3944c856a62a20e8eef7f5a7171bb0/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fconfig%2FBizConfig.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/35e130207d3944c856a62a20e8eef7f5a7171bb0/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fconfig%2FBizConfig.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-biz%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fbiz%2Fconfig%2FBizConfig.java?ref=35e130207d3944c856a62a20e8eef7f5a7171bb0",
      "patch": "@@ -61,7 +61,8 @@ public int grayReleaseRuleScanInterval() {\n \n   public long longPollingTimeoutInMilli() {\n     int timeout = getIntProperty(\"long.polling.timeout\", DEFAULT_LONG_POLLING_TIMEOUT);\n-    return 1000 * checkInt(timeout, 1, Integer.MAX_VALUE, DEFAULT_LONG_POLLING_TIMEOUT);\n+    // java client's long polling timeout is 90 seconds, so server side long polling timeout must be less than 90\n+    return 1000 * checkInt(timeout, 1, 90, DEFAULT_LONG_POLLING_TIMEOUT);\n   }\n \n   public int itemKeyLengthLimit() {",
      "parent_sha": "bce744df8d56ed853b9edd78aa0df0d3e7a65269"
    }
  },
  {
    "oid": "f7b062c5357d4fd5aaf2974e8e521178bb547724",
    "message": "adjust test case timeout",
    "date": "2020-03-15T14:19:37Z",
    "url": "https://github.com/apolloconfig/apollo/commit/f7b062c5357d4fd5aaf2974e8e521178bb547724",
    "details": {
      "sha": "7cc4e3ca1b163b12d80139eec0db1f09d45eec16",
      "filename": "apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/AccessKeyServiceWithCacheTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/f7b062c5357d4fd5aaf2974e8e521178bb547724/apollo-configservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fservice%2FAccessKeyServiceWithCacheTest.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/f7b062c5357d4fd5aaf2974e8e521178bb547724/apollo-configservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fservice%2FAccessKeyServiceWithCacheTest.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-configservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fservice%2FAccessKeyServiceWithCacheTest.java?ref=f7b062c5357d4fd5aaf2974e8e521178bb547724",
      "patch": "@@ -19,7 +19,7 @@\n /**\n  * @author nisiyong\n  */\n-@RunWith(MockitoJUnitRunner.class)\n+@RunWith(MockitoJUnitRunner.Silent.class)\n public class AccessKeyServiceWithCacheTest {\n \n   private AccessKeyServiceWithCache accessKeyServiceWithCache;\n@@ -63,7 +63,7 @@ public void testGetAvailableSecrets() throws Exception {\n     when(accessKeyRepository.findAllById(anyList()))\n         .thenReturn(Lists.newArrayList(firstAccessKey, secondAccessKey));\n \n-    TimeUnit.SECONDS.sleep(1);\n+    scanIntervalTimeUnit.sleep(scanInterval * 10);\n     assertThat(accessKeyServiceWithCache.getAvailableSecrets(appId)).isEmpty();\n \n     // Update access key, enable both of them\n@@ -74,7 +74,7 @@ public void testGetAvailableSecrets() throws Exception {\n     when(accessKeyRepository.findAllById(anyList()))\n         .thenReturn(Lists.newArrayList(firstAccessKey, secondAccessKey));\n \n-    TimeUnit.SECONDS.sleep(1);\n+    scanIntervalTimeUnit.sleep(scanInterval * 10);\n     assertThat(accessKeyServiceWithCache.getAvailableSecrets(appId)).containsExactly(\"secret-1\", \"secret-2\");\n \n     // Update access key, disable the first one\n@@ -84,14 +84,14 @@ public void testGetAvailableSecrets() throws Exception {\n     when(accessKeyRepository.findAllById(anyList()))\n         .thenReturn(Lists.newArrayList(firstAccessKey, secondAccessKey));\n \n-    TimeUnit.SECONDS.sleep(1);\n+    scanIntervalTimeUnit.sleep(scanInterval * 10);\n     assertThat(accessKeyServiceWithCache.getAvailableSecrets(appId)).containsExactly(\"secret-2\");\n \n     // Delete access key, delete the second one\n     when(accessKeyRepository.findAllById(anyList()))\n         .thenReturn(Lists.newArrayList(firstAccessKey));\n \n-    TimeUnit.SECONDS.sleep(1);\n+    scanIntervalTimeUnit.sleep(scanInterval * 10);\n     assertThat(accessKeyServiceWithCache.getAvailableSecrets(appId)).isEmpty();\n \n     // Add new access key in runtime, enable by default\n@@ -100,7 +100,7 @@ public void testGetAvailableSecrets() throws Exception {\n     when(accessKeyRepository.findAllById(anyList()))\n         .thenReturn(Lists.newArrayList(firstAccessKey, thirdAccessKey));\n \n-    TimeUnit.SECONDS.sleep(1);\n+    scanIntervalTimeUnit.sleep(scanInterval * 10);\n     assertThat(accessKeyServiceWithCache.getAvailableSecrets(appId)).containsExactly(\"secret-3\");\n   }\n ",
      "parent_sha": "794e5011ce9cc0856bd4eca9130e9f346b49c984"
    }
  },
  {
    "oid": "a416903d5f07711e1102b220ff8b970b2994477f",
    "message": "add principal type check when get user info",
    "date": "2017-09-13T07:34:04Z",
    "url": "https://github.com/apolloconfig/apollo/commit/a416903d5f07711e1102b220ff8b970b2994477f",
    "details": {
      "sha": "64a5805ddf3d5f82d50326edcb10e6dddd0f9d4f",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/springsecurity/SpringSecurityUserInfoHolder.java",
      "status": "modified",
      "additions": 16,
      "deletions": 3,
      "changes": 19,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/a416903d5f07711e1102b220ff8b970b2994477f/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fspringsecurity%2FSpringSecurityUserInfoHolder.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/a416903d5f07711e1102b220ff8b970b2994477f/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fspringsecurity%2FSpringSecurityUserInfoHolder.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fspringsecurity%2FSpringSecurityUserInfoHolder.java?ref=a416903d5f07711e1102b220ff8b970b2994477f",
      "patch": "@@ -4,15 +4,28 @@\n import com.ctrip.framework.apollo.portal.spi.UserInfoHolder;\n \n import org.springframework.security.core.context.SecurityContextHolder;\n-import org.springframework.security.core.userdetails.User;\n+import org.springframework.security.core.userdetails.UserDetails;\n+\n+import java.security.Principal;\n \n public class SpringSecurityUserInfoHolder implements UserInfoHolder {\n \n   @Override\n   public UserInfo getUser() {\n     UserInfo userInfo = new UserInfo();\n-    String userId = ((User) SecurityContextHolder.getContext().getAuthentication().getPrincipal()).getUsername();\n-    userInfo.setUserId(userId);\n+    userInfo.setUserId(getCurrentUsername());\n     return userInfo;\n   }\n+\n+  private String getCurrentUsername() {\n+    Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n+    if (principal instanceof UserDetails) {\n+      return ((UserDetails) principal).getUsername();\n+    }\n+    if (principal instanceof Principal) {\n+      return ((Principal) principal).getName();\n+    }\n+    return String.valueOf(principal);\n+  }\n+\n }",
      "parent_sha": "0018445713dfddd5f1e6643c88f9a3feedae6b06"
    }
  },
  {
    "oid": "ac28515ccd9967990e76a56902eac280dc495fcc",
    "message": "Fix openApi gson date format issue",
    "date": "2019-07-23T00:15:03Z",
    "url": "https://github.com/apolloconfig/apollo/commit/ac28515ccd9967990e76a56902eac280dc495fcc",
    "details": {
      "sha": "9fa6287b9411982fe88b6d5319f3c0f1dfa7989a",
      "filename": "apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/constant/ApolloOpenApiConstants.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/ac28515ccd9967990e76a56902eac280dc495fcc/apollo-openapi%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fopenapi%2Fclient%2Fconstant%2FApolloOpenApiConstants.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/ac28515ccd9967990e76a56902eac280dc495fcc/apollo-openapi%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fopenapi%2Fclient%2Fconstant%2FApolloOpenApiConstants.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-openapi%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fopenapi%2Fclient%2Fconstant%2FApolloOpenApiConstants.java?ref=ac28515ccd9967990e76a56902eac280dc495fcc",
      "patch": "@@ -4,6 +4,6 @@ public interface ApolloOpenApiConstants {\n   int DEFAULT_CONNECT_TIMEOUT = 1000; //1 second\n   int DEFAULT_READ_TIMEOUT = 5000; //5 seconds\n   String OPEN_API_V1_PREFIX = \"/openapi/v1\";\n-  String JSON_DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ssZ\";\n+  String JSON_DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";\n \n }",
      "parent_sha": "aebf0ee6899dbc8c5548472da3b06697bbb06c05"
    }
  },
  {
    "oid": "26cc1705f5e1e9c511df1cee5e1d1dd2237df649",
    "message": "load config file(apollo-env.properties) from working directory first, so that it behaves the same as spring boot config files",
    "date": "2017-04-29T15:24:02Z",
    "url": "https://github.com/apolloconfig/apollo/commit/26cc1705f5e1e9c511df1cee5e1d1dd2237df649",
    "details": {
      "sha": "616fd99d130970701f15b9cf1265138073567ec3",
      "filename": "apollo-core/src/main/java/com/ctrip/framework/apollo/core/utils/ResourceUtils.java",
      "status": "modified",
      "additions": 18,
      "deletions": 1,
      "changes": 19,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/26cc1705f5e1e9c511df1cee5e1d1dd2237df649/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2Futils%2FResourceUtils.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/26cc1705f5e1e9c511df1cee5e1d1dd2237df649/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2Futils%2FResourceUtils.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2Futils%2FResourceUtils.java?ref=26cc1705f5e1e9c511df1cee5e1d1dd2237df649",
      "patch": "@@ -9,16 +9,18 @@\n import java.io.InputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.Enumeration;\n import java.util.Properties;\n \n public class ResourceUtils {\n \n   private static final Logger logger = LoggerFactory.getLogger(ResourceUtils.class);\n+  private static final String[] DEFAULT_FILE_SEARCH_LOCATIONS = new String[]{\"./config/\", \"./\"};\n \n   @SuppressWarnings(\"unchecked\")\n   public static Properties readConfigFile(String configPath, Properties defaults) {\n-    InputStream in = ClassLoaderUtil.getLoader().getResourceAsStream(configPath);\n+    InputStream in = loadConfigFileFromDefaultSearchLocations(configPath);\n     logger.debug(\"Reading config from resource {}\", configPath);\n     Properties props = new Properties();\n     try {\n@@ -65,4 +67,19 @@ public static Properties readConfigFile(String configPath, Properties defaults)\n     }\n     return props;\n   }\n+\n+  private static InputStream loadConfigFileFromDefaultSearchLocations(String configPath) {\n+    for (String searchLocation : DEFAULT_FILE_SEARCH_LOCATIONS) {\n+      try {\n+        File candidate = Paths.get(searchLocation, configPath).toFile();\n+        if (candidate.exists() && candidate.isFile() && candidate.canRead()) {\n+          return new FileInputStream(candidate);\n+        }\n+      } catch (Throwable ex) {\n+        //ignore\n+      }\n+    }\n+\n+    return ClassLoaderUtil.getLoader().getResourceAsStream(configPath);\n+  }\n }",
      "parent_sha": "bd1832bf83863471c12526ed9753a7c72e14e11e"
    }
  },
  {
    "oid": "5daa08879b5324905170dbc5b48f4d130e0a4205",
    "message": "clean code. (#2771)",
    "date": "2019-11-25T01:22:52Z",
    "url": "https://github.com/apolloconfig/apollo/commit/5daa08879b5324905170dbc5b48f4d130e0a4205",
    "details": {
      "sha": "988dbe4c63e8402cc8074b46fe8f6ad427b877cd",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/spring/boot/ApolloApplicationContextInitializer.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/5daa08879b5324905170dbc5b48f4d130e0a4205/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fspring%2Fboot%2FApolloApplicationContextInitializer.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/5daa08879b5324905170dbc5b48f4d130e0a4205/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fspring%2Fboot%2FApolloApplicationContextInitializer.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fspring%2Fboot%2FApolloApplicationContextInitializer.java?ref=5daa08879b5324905170dbc5b48f4d130e0a4205",
      "patch": "@@ -72,8 +72,7 @@ public class ApolloApplicationContextInitializer implements\n   public void initialize(ConfigurableApplicationContext context) {\n     ConfigurableEnvironment environment = context.getEnvironment();\n \n-    String enabled = environment.getProperty(PropertySourcesConstants.APOLLO_BOOTSTRAP_ENABLED, \"false\");\n-    if (!Boolean.valueOf(enabled)) {\n+    if (!environment.getProperty(PropertySourcesConstants.APOLLO_BOOTSTRAP_ENABLED, Boolean.class, false)) {\n       logger.debug(\"Apollo bootstrap config is not enabled for context {}, see property: ${{}}\", context, PropertySourcesConstants.APOLLO_BOOTSTRAP_ENABLED);\n       return;\n     }",
      "parent_sha": "2b617b990c0bdf022a8e5c209e457bbb7a1ac49d"
    }
  },
  {
    "oid": "faa092154f4791a1158829574e90553818fb5956",
    "message": "fix issue #3012",
    "date": "2020-04-18T15:14:35Z",
    "url": "https://github.com/apolloconfig/apollo/commit/faa092154f4791a1158829574e90553818fb5956",
    "details": {
      "sha": "d839e185a6249eb474e4a9d712bd5596b6042f34",
      "filename": "apollo-core/src/main/java/com/ctrip/framework/foundation/internals/io/BOMInputStream.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/faa092154f4791a1158829574e90553818fb5956/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Ffoundation%2Finternals%2Fio%2FBOMInputStream.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/faa092154f4791a1158829574e90553818fb5956/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Ffoundation%2Finternals%2Fio%2FBOMInputStream.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Ffoundation%2Finternals%2Fio%2FBOMInputStream.java?ref=faa092154f4791a1158829574e90553818fb5956",
      "patch": "@@ -180,7 +180,8 @@ public boolean hasBOM(final ByteOrderMark bom) throws IOException {\n     if (!boms.contains(bom)) {\n       throw new IllegalArgumentException(\"Stream not configure to detect \" + bom);\n     }\n-    return byteOrderMark != null && getBOM().equals(bom);\n+    getBOM();\n+    return byteOrderMark != null && byteOrderMark.equals(bom);\n   }\n \n   /**",
      "parent_sha": "be664483032c3b1aca075ee043f5d7fd97ee4c2e"
    }
  },
  {
    "oid": "4cfbf1ed1dfc5f5ce4bf0e9fb012525d2a85bfd4",
    "message": "refactor GlobalDefaultExceptionHandler a little bit",
    "date": "2018-07-07T06:05:36Z",
    "url": "https://github.com/apolloconfig/apollo/commit/4cfbf1ed1dfc5f5ce4bf0e9fb012525d2a85bfd4",
    "details": {
      "sha": "98f18c37d5a42633ade8d2b55449d5dff1a021a3",
      "filename": "apollo-common/src/main/java/com/ctrip/framework/apollo/common/controller/GlobalDefaultExceptionHandler.java",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/4cfbf1ed1dfc5f5ce4bf0e9fb012525d2a85bfd4/apollo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcommon%2Fcontroller%2FGlobalDefaultExceptionHandler.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/4cfbf1ed1dfc5f5ce4bf0e9fb012525d2a85bfd4/apollo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcommon%2Fcontroller%2FGlobalDefaultExceptionHandler.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcommon%2Fcontroller%2FGlobalDefaultExceptionHandler.java?ref=4cfbf1ed1dfc5f5ce4bf0e9fb012525d2a85bfd4",
      "patch": "@@ -28,6 +28,7 @@\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n \n+import static org.slf4j.event.Level.*;\n import static org.springframework.http.HttpStatus.BAD_REQUEST;\n import static org.springframework.http.HttpStatus.FORBIDDEN;\n import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;\n@@ -50,7 +51,7 @@ public ResponseEntity<Map<String, Object>> exception(HttpServletRequest request,\n   @ExceptionHandler({HttpRequestMethodNotSupportedException.class, HttpMediaTypeException.class})\n   public ResponseEntity<Map<String, Object>> badRequest(HttpServletRequest request,\n                                                         ServletException ex) {\n-    return handleError(request, BAD_REQUEST, ex, Level.WARN);\n+    return handleError(request, BAD_REQUEST, ex, WARN);\n   }\n \n   @ExceptionHandler(HttpStatusCodeException.class)\n@@ -68,13 +69,12 @@ public ResponseEntity<Map<String, Object>> accessDeny(HttpServletRequest request\n   //\u5904\u7406\u81ea\u5b9a\u4e49Exception\n   @ExceptionHandler({AbstractApolloHttpException.class})\n   public ResponseEntity<Map<String, Object>> badRequest(HttpServletRequest request, AbstractApolloHttpException ex) {\n-    return handleError(request, ex.getHttpStatus(), ex, Level.ERROR);\n+    return handleError(request, ex.getHttpStatus(), ex);\n   }\n \n-  \n   private ResponseEntity<Map<String, Object>> handleError(HttpServletRequest request,\n                                                           HttpStatus status, Throwable ex) {\n-    return handleError(request, status, ex, Level.ERROR);\n+    return handleError(request, status, ex, ERROR);\n   }\n \n   private ResponseEntity<Map<String, Object>> handleError(HttpServletRequest request,\n@@ -112,24 +112,24 @@ private ResponseEntity<Map<String, Object>> handleError(HttpServletRequest reque\n \n   //\u6253\u5370\u65e5\u5fd7, \u5176\u4e2dlogLevel\u4e3a\u65e5\u5fd7\u7ea7\u522b: ERROR/WARN/DEBUG/INFO/TRACE\n   private void printLog(String message, Throwable ex, Level logLevel) {\n-    switch (logLevel.toString()) {\n-      case \"ERROR\":\n+    switch (logLevel) {\n+      case ERROR:\n         logger.error(message, ex);\n         break;\n-      case \"WARN\":\n+      case WARN:\n         logger.warn(message, ex);\n         break;\n-      case \"DEBUG\":\n+      case DEBUG:\n         logger.debug(message, ex);\n         break;\n-      case \"INFO\":\n+      case INFO:\n         logger.info(message, ex);\n         break;\n-      case \"TRACE\":\n+      case TRACE:\n         logger.trace(message, ex);\n         break;\n     }\n-    \n+\n     Tracer.logError(ex);\n   }\n ",
      "parent_sha": "39638224a92c292a821bf7f91df6986d26cbcf44"
    }
  },
  {
    "oid": "735f58876903811163423935dde3c4ebc1a1cc81",
    "message": "Update ReleaseControllerTest.java\n\nfix flaky test",
    "date": "2022-04-13T01:34:45Z",
    "url": "https://github.com/apolloconfig/apollo/commit/735f58876903811163423935dde3c4ebc1a1cc81",
    "details": {
      "sha": "f428ccc4fe88c5cafd5614e68e31b11d669fe262",
      "filename": "apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ReleaseControllerTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/735f58876903811163423935dde3c4ebc1a1cc81/apollo-adminservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fadminservice%2Fcontroller%2FReleaseControllerTest.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/735f58876903811163423935dde3c4ebc1a1cc81/apollo-adminservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fadminservice%2Fcontroller%2FReleaseControllerTest.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-adminservice%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fadminservice%2Fcontroller%2FReleaseControllerTest.java?ref=735f58876903811163423935dde3c4ebc1a1cc81",
      "patch": "@@ -44,6 +44,7 @@\n import org.springframework.util.MultiValueMap;\n \n import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.Map;\n \n import static org.mockito.Mockito.*;\n@@ -101,7 +102,7 @@ public void testReleaseBuild() {\n     Assert.assertEquals(\"default\", release.getClusterName());\n     Assert.assertEquals(\"application\", release.getNamespaceName());\n \n-    Map<String, String> configurations = new HashMap<>();\n+    Map<String, String> configurations = new LinkedHashMap<>();\n     configurations.put(\"k1\", \"v1\");\n     configurations.put(\"k2\", \"v2\");\n     configurations.put(\"k3\", \"v3\");",
      "parent_sha": "a882f3e8a0fec0e36d2cfcbc1ca44f0818d7b1cd"
    }
  },
  {
    "oid": "25df1828dd798b2639da1e271ddeb6830d73e243",
    "message": "enlarge instance config cache limit",
    "date": "2017-06-12T11:37:14Z",
    "url": "https://github.com/apolloconfig/apollo/commit/25df1828dd798b2639da1e271ddeb6830d73e243",
    "details": {
      "sha": "03a4fc216285c159f716431ee5d18e7096d6a7ec",
      "filename": "apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/util/InstanceConfigAuditUtil.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/25df1828dd798b2639da1e271ddeb6830d73e243/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Futil%2FInstanceConfigAuditUtil.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/25df1828dd798b2639da1e271ddeb6830d73e243/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Futil%2FInstanceConfigAuditUtil.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Futil%2FInstanceConfigAuditUtil.java?ref=25df1828dd798b2639da1e271ddeb6830d73e243",
      "patch": "@@ -33,9 +33,9 @@\n  */\n @Service\n public class InstanceConfigAuditUtil implements InitializingBean {\n-  private static final int INSTANCE_CONFIG_AUDIT_MAX_SIZE = 2000;\n-  private static final int INSTANCE_CACHE_MAX_SIZE = 10000;\n-  private static final int INSTANCE_CONFIG_CACHE_MAX_SIZE = 10000;\n+  private static final int INSTANCE_CONFIG_AUDIT_MAX_SIZE = 10000;\n+  private static final int INSTANCE_CACHE_MAX_SIZE = 50000;\n+  private static final int INSTANCE_CONFIG_CACHE_MAX_SIZE = 50000;\n   private static final long OFFER_TIME_LAST_MODIFIED_TIME_THRESHOLD_IN_MILLI = TimeUnit.MINUTES.toMillis(10);//10 minutes\n   private static final Joiner STRING_JOINER = Joiner.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR);\n   private final ExecutorService auditExecutorService;",
      "parent_sha": "7d0f0819c525fe69c146d024c0cf04c7f8cfcef5"
    }
  },
  {
    "oid": "77fdb162f439963e09a7720a5e8d072854c0644a",
    "message": "use default namespace for demo",
    "date": "2016-04-08T03:36:39Z",
    "url": "https://github.com/apolloconfig/apollo/commit/77fdb162f439963e09a7720a5e8d072854c0644a",
    "details": {
      "sha": "874edc21007d43a49435667a545a94784e8d0851",
      "filename": "apollo-demo/src/main/java/ApolloConfigDemo.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/77fdb162f439963e09a7720a5e8d072854c0644a/apollo-demo%2Fsrc%2Fmain%2Fjava%2FApolloConfigDemo.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/77fdb162f439963e09a7720a5e8d072854c0644a/apollo-demo%2Fsrc%2Fmain%2Fjava%2FApolloConfigDemo.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-demo%2Fsrc%2Fmain%2Fjava%2FApolloConfigDemo.java?ref=77fdb162f439963e09a7720a5e8d072854c0644a",
      "patch": "@@ -13,7 +13,7 @@ public class ApolloConfigDemo {\n   private Config config;\n \n   public ApolloConfigDemo() {\n-    config = ConfigService.getConfig(\"apollo-config-service\");\n+    config = ConfigService.getConfig();\n   }\n \n   private String getConfig(String key) {",
      "parent_sha": "f4a79c283d5131fa98de8f8f7895c2dcfe060e12"
    }
  },
  {
    "oid": "d8829a88bd66c23953757e6ca231c1431a8eee32",
    "message": "fix meta url",
    "date": "2016-03-24T07:50:24Z",
    "url": "https://github.com/apolloconfig/apollo/commit/d8829a88bd66c23953757e6ca231c1431a8eee32",
    "details": {
      "sha": "f0c81e4040ab928d31ae8b0a6e90a5f979f81bfe",
      "filename": "apollo-core/src/main/java/com/ctrip/apollo/core/MetaDomainConsts.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/d8829a88bd66c23953757e6ca231c1431a8eee32/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fapollo%2Fcore%2FMetaDomainConsts.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/d8829a88bd66c23953757e6ca231c1431a8eee32/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fapollo%2Fcore%2FMetaDomainConsts.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fapollo%2Fcore%2FMetaDomainConsts.java?ref=d8829a88bd66c23953757e6ca231c1431a8eee32",
      "patch": "@@ -9,27 +9,27 @@ public class MetaDomainConsts {\n \n   public static final String DEFAULT_PORT = \"8080\";\n \n-  public static final String LOCAL = \"http://localhost\" + \"/\" + DEFAULT_PORT;\n+  public static final String LOCAL = \"http://localhost\" + \":\" + DEFAULT_PORT;\n \n   public static final String DEV =\n-      \"http://10.3.2.56\" + \"/\" + DEFAULT_PORT;\n+      \"http://10.3.2.56\" + \":\" + DEFAULT_PORT;\n \n   public static final String FAT =\n-      \"http://ws.meta.apollo.fx.fat.nt.ctripcorp.com\" + \"/\" + DEFAULT_PORT;\n+      \"http://ws.meta.apollo.fx.fat.nt.ctripcorp.com\" + \":\" + DEFAULT_PORT;\n \n   public static final String FWS =\n-      \"http://ws.meta.apollo.fx.fws.nt.ctripcorp.com\" + \"/\" + DEFAULT_PORT;\n+      \"http://ws.meta.apollo.fx.fws.nt.ctripcorp.com\" + \":\" + DEFAULT_PORT;\n \n   public static final String UAT =\n-      \"http://ws.meta.apollo.fx.uat.nt.ctripcorp.com\" + \"/\" + DEFAULT_PORT;\n+      \"http://ws.meta.apollo.fx.uat.nt.ctripcorp.com\" + \":\" + DEFAULT_PORT;\n \n   public static final String LPT =\n-      \"http://ws.meta.apollo.fx.lpt.nt.ctripcorp.com\" + \"/\" + DEFAULT_PORT;\n+      \"http://ws.meta.apollo.fx.lpt.nt.ctripcorp.com\" + \":\" + DEFAULT_PORT;\n \n   public static final String TOOLS =\n-      \"http://ws.meta.apollo.fx.tools.ctripcorp.com\" + \"/\" + DEFAULT_PORT;\n+      \"http://ws.meta.apollo.fx.tools.ctripcorp.com\" + \":\" + DEFAULT_PORT;\n \n-  public static final String PRD = \"http://ws.meta.apollo.fx.ctripcorp.com\" + \"/\" + DEFAULT_PORT;\n+  public static final String PRD = \"http://ws.meta.apollo.fx.ctripcorp.com\" + \":\" + DEFAULT_PORT;\n \n   private static Map<Env, String> domains = new HashMap<>();\n ",
      "parent_sha": "82f2e6d94305e1c8463bed520531677c02b9e371"
    }
  },
  {
    "oid": "043ed9674c7e4a536ab3250b0ab6b76004df804e",
    "message": "add default value",
    "date": "2018-10-18T07:13:37Z",
    "url": "https://github.com/apolloconfig/apollo/commit/043ed9674c7e4a536ab3250b0ab6b76004df804e",
    "details": {
      "sha": "c12bae49bf9a3f570127e8930e73d299b24059dd",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/ldap/LdapUserService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/043ed9674c7e4a536ab3250b0ab6b76004df804e/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fldap%2FLdapUserService.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/043ed9674c7e4a536ab3250b0ab6b76004df804e/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fldap%2FLdapUserService.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fldap%2FLdapUserService.java?ref=043ed9674c7e4a536ab3250b0ab6b76004df804e",
      "patch": "@@ -32,7 +32,7 @@ public class LdapUserService implements UserService {\n   private String userDisplayNameAttrName;\n   @Value(\"${ldap.mapping.email}\")\n   private String emailAttrName;\n-  @Value(\"#{'${ldap.filter.memberOf}'.split('\\\\|')}\")\n+  @Value(\"#{'${ldap.filter.memberOf:}'.split('\\\\|')}\")\n   private String[] memberOf;\n \n   @Autowired",
      "parent_sha": "7248aeef2cd26dfd147a9a9dc07a54aa1256061a"
    }
  },
  {
    "oid": "b908fd9b1698818046df9606d70c23e0fb770586",
    "message": "Fix get env properties bugs",
    "date": "2016-04-27T03:13:59Z",
    "url": "https://github.com/apolloconfig/apollo/commit/b908fd9b1698818046df9606d70c23e0fb770586",
    "details": {
      "sha": "60491533908fd9905dc87b50a351cbb9394455b0",
      "filename": "apollo-core/src/main/java/com/ctrip/apollo/core/MetaDomainConsts.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/b908fd9b1698818046df9606d70c23e0fb770586/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fapollo%2Fcore%2FMetaDomainConsts.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/b908fd9b1698818046df9606d70c23e0fb770586/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fapollo%2Fcore%2FMetaDomainConsts.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fapollo%2Fcore%2FMetaDomainConsts.java?ref=b908fd9b1698818046df9606d70c23e0fb770586",
      "patch": "@@ -13,16 +13,17 @@\n  * \n  * Currently, apollo supports local/dev/fat/uat/lpt/pro environments.\n  */\n+@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n public class MetaDomainConsts {\n \n-  private static Map<Env, String> domains = new HashMap<>();\n+  private static Map<Env, Object> domains = new HashMap<>();\n \n   public static final String DEFAULT_META_URL = \"http://localhost:8080\";\n \n   static {\n     Properties prop = new Properties();\n     prop = ResourceUtils.readConfigFile(\"apollo-env.properties\", prop);\n-    Map<String, String> env = System.getenv();\n+    Map env = System.getProperties();\n     domains.put(Env.LOCAL,\n         env.getOrDefault(\"local_meta\", prop.getProperty(\"local.meta\", DEFAULT_META_URL)));\n     domains.put(Env.DEV,\n@@ -38,6 +39,6 @@ public class MetaDomainConsts {\n   }\n \n   public static String getDomain(Env env) {\n-    return domains.get(env);\n+    return String.valueOf(domains.get(env));\n   }\n }",
      "parent_sha": "b57fbd45dd21993328f3a85c5e7a978cbef4731b"
    }
  },
  {
    "oid": "4ff0f795307122525d4c0cb01e795c05a9c1e0c6",
    "message": "refactor the ResourceUtils for performance",
    "date": "2017-10-27T10:53:32Z",
    "url": "https://github.com/apolloconfig/apollo/commit/4ff0f795307122525d4c0cb01e795c05a9c1e0c6",
    "details": {
      "sha": "9516a6d22b44c57c0eb94037ab25666ec65b028e",
      "filename": "apollo-core/src/main/java/com/ctrip/framework/apollo/core/utils/ResourceUtils.java",
      "status": "modified",
      "additions": 41,
      "deletions": 39,
      "changes": 80,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/4ff0f795307122525d4c0cb01e795c05a9c1e0c6/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2Futils%2FResourceUtils.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/4ff0f795307122525d4c0cb01e795c05a9c1e0c6/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2Futils%2FResourceUtils.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-core%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fcore%2Futils%2FResourceUtils.java?ref=4ff0f795307122525d4c0cb01e795c05a9c1e0c6",
      "patch": "@@ -7,10 +7,8 @@\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n+import java.io.FileNotFoundException;\n import java.nio.file.Paths;\n-import java.util.Enumeration;\n import java.util.Properties;\n \n public class ResourceUtils {\n@@ -20,29 +18,18 @@ public class ResourceUtils {\n \n   @SuppressWarnings(\"unchecked\")\n   public static Properties readConfigFile(String configPath, Properties defaults) {\n-    InputStream in = loadConfigFileFromDefaultSearchLocations(configPath);\n-    logger.debug(\"Reading config from resource {}\", configPath);\n     Properties props = new Properties();\n-    try {\n-      if (in == null) {\n-        // load outside resource under current user path\n-        Path path = new File(System.getProperty(\"user.dir\") + configPath).toPath();\n-        if (Files.isReadable(path)) {\n-          in = new FileInputStream(path.toFile());\n-          logger.debug(\"Reading config from file {} \", path);\n-        } else {\n-          logger.warn(\"Could not find available config file\");\n-        }\n-      }\n-      if (defaults != null) {\n-        props.putAll(defaults);\n-      }\n+    if (defaults != null) {\n+      props.putAll(defaults);\n+    }\n \n+    InputStream in = loadConfigFileFromDefaultSearchLocations(configPath);\n+\n+    try {\n       if (in != null) {\n         props.load(in);\n-        in.close();\n       }\n-    } catch (Exception ex) {\n+    } catch (IOException ex) {\n       logger.warn(\"Reading config failed: {}\", ex.getMessage());\n     } finally {\n       if (in != null) {\n@@ -53,33 +40,48 @@ public static Properties readConfigFile(String configPath, Properties defaults)\n         }\n       }\n     }\n-    StringBuilder sb = new StringBuilder();\n-    for (Enumeration<String> e = (Enumeration<String>) props.propertyNames(); e\n-        .hasMoreElements();) {\n-      String key = e.nextElement();\n-      String val = (String) props.getProperty(key);\n-      sb.append(key).append('=').append(val).append('\\n');\n-    }\n-    if (sb.length() > 0) {\n-      logger.debug(\"Reading properties: \\n\" + sb.toString());\n-    } else {\n-      logger.warn(\"No available properties\");\n+\n+    if (logger.isDebugEnabled()) {\n+      StringBuilder sb = new StringBuilder();\n+      for (String sropertyName : props.stringPropertyNames()) {\n+        sb.append(sropertyName).append('=').append(props.getProperty(sropertyName)).append('\\n');\n+\n+      }\n+      if (sb.length() > 0) {\n+        logger.debug(\"Reading properties: \\n\" + sb.toString());\n+      } else {\n+        logger.warn(\"No available properties\");\n+      }\n     }\n     return props;\n   }\n \n   private static InputStream loadConfigFileFromDefaultSearchLocations(String configPath) {\n-    for (String searchLocation : DEFAULT_FILE_SEARCH_LOCATIONS) {\n-      try {\n+    try {\n+      for (String searchLocation : DEFAULT_FILE_SEARCH_LOCATIONS) {\n         File candidate = Paths.get(searchLocation, configPath).toFile();\n         if (candidate.exists() && candidate.isFile() && candidate.canRead()) {\n+          logger.debug(\"Reading config from resource {}\", candidate.getAbsolutePath());\n           return new FileInputStream(candidate);\n         }\n-      } catch (Throwable ex) {\n-        //ignore\n       }\n-    }\n \n-    return ClassLoaderUtil.getLoader().getResourceAsStream(configPath);\n+      InputStream in = ClassLoaderUtil.getLoader().getResourceAsStream(configPath);\n+\n+      if (in != null) {\n+        logger.debug(\"Reading config from resource {}\", ClassLoaderUtil.getLoader().getResource(configPath).getPath());\n+        return in;\n+      } else {\n+        // load outside resource under current user path\n+        File candidate = new File(System.getProperty(\"user.dir\") + configPath);\n+        if (candidate.exists() && candidate.isFile() && candidate.canRead()) {\n+          logger.debug(\"Reading config from resource {}\", candidate.getAbsolutePath());\n+          return new FileInputStream(candidate);\n+        }\n+      }\n+    } catch (FileNotFoundException e) {\n+      //ignore\n+    }\n+    return null;\n   }\n-}\n+}\n\\ No newline at end of file",
      "parent_sha": "2bebe108d41d2886efd15df8f7d7781f4f482fe8"
    }
  },
  {
    "oid": "5b1a9021d913b2e1210c41cf292a5bbef32f1fca",
    "message": "change to ConcurrentMap to use putIfAbsent method in java 1.7",
    "date": "2016-07-20T07:55:28Z",
    "url": "https://github.com/apolloconfig/apollo/commit/5b1a9021d913b2e1210c41cf292a5bbef32f1fca",
    "details": {
      "sha": "d6e200bef743d2ea5857334527f578a74c806640",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollService.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/5b1a9021d913b2e1210c41cf292a5bbef32f1fca/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigLongPollService.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/5b1a9021d913b2e1210c41cf292a5bbef32f1fca/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigLongPollService.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FRemoteConfigLongPollService.java?ref=5b1a9021d913b2e1210c41cf292a5bbef32f1fca",
      "patch": "@@ -41,6 +41,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Random;\n+import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n@@ -62,7 +63,7 @@ public class RemoteConfigLongPollService implements Initializable {\n   private RateLimiter m_longPollRateLimiter;\n   private final AtomicBoolean m_longPollStarted;\n   private final Multimap<String, RemoteConfigRepository> m_longPollNamespaces;\n-  private final Map<String, Long> m_notifications;\n+  private final ConcurrentMap<String, Long> m_notifications;\n   private Type m_responseType;\n   private Gson gson;\n   @Inject",
      "parent_sha": "562bc9598147c3aede6fb64f509ab5a248ce03a5"
    }
  },
  {
    "oid": "f3c7ccd3e1edac55c3ce05a61b9b17a032c99773",
    "message": "update",
    "date": "2016-06-03T03:42:18Z",
    "url": "https://github.com/apolloconfig/apollo/commit/f3c7ccd3e1edac55c3ce05a61b9b17a032c99773",
    "details": {
      "sha": "132b429945e0b2b9316632e3bda0c2667b4dda80",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/configutation/AuthConfiguration.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/f3c7ccd3e1edac55c3ce05a61b9b17a032c99773/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fconfigutation%2FAuthConfiguration.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/f3c7ccd3e1edac55c3ce05a61b9b17a032c99773/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fconfigutation%2FAuthConfiguration.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fconfigutation%2FAuthConfiguration.java?ref=f3c7ccd3e1edac55c3ce05a61b9b17a032c99773",
      "patch": "@@ -4,6 +4,8 @@\n import com.ctrip.framework.apollo.portal.auth.CtripUserInfoHolder;\n import com.ctrip.framework.apollo.portal.auth.DefaultLogoutHandler;\n import com.ctrip.framework.apollo.portal.auth.DefaultUserInfoHolder;\n+import com.ctrip.framework.apollo.portal.auth.LogoutHandler;\n+import com.ctrip.framework.apollo.portal.auth.UserInfoHolder;\n import com.ctrip.framework.apollo.portal.repository.ServerConfigRepository;\n \n import org.springframework.beans.factory.annotation.Autowired;\n@@ -145,15 +147,16 @@ private EventListener listener(String className){\n    * \u9ed8\u8ba4\u5b9e\u73b0\n    */\n   @Configuration\n-  @ConditionalOnMissingBean(CtripUserInfoHolder.class)\n   static class DefaultAuthAutoConfiguration {\n \n     @Bean\n+    @ConditionalOnMissingBean(UserInfoHolder.class)\n     public DefaultUserInfoHolder notCtripUserInfoHolder(){\n       return new DefaultUserInfoHolder();\n     }\n \n     @Bean\n+    @ConditionalOnMissingBean(LogoutHandler.class)\n     public DefaultLogoutHandler logoutHandler(){\n       return new DefaultLogoutHandler();\n     }",
      "parent_sha": "4c071efb33f402976fd68fe9daa956442a5529f1"
    }
  },
  {
    "oid": "de0343526ad9319900f45ec7e702f99b6e3f70c5",
    "message": "fix table case",
    "date": "2017-09-11T07:55:11Z",
    "url": "https://github.com/apolloconfig/apollo/commit/de0343526ad9319900f45ec7e702f99b6e3f70c5",
    "details": {
      "sha": "022634a00d3673c53d039a7adccbdcda1666e1f8",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/AuthConfiguration.java",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/de0343526ad9319900f45ec7e702f99b6e3f70c5/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fconfiguration%2FAuthConfiguration.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/de0343526ad9319900f45ec7e702f99b6e3f70c5/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fconfiguration%2FAuthConfiguration.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fconfiguration%2FAuthConfiguration.java?ref=de0343526ad9319900f45ec7e702f99b6e3f70c5",
      "patch": "@@ -211,10 +211,20 @@ public LogoutHandler logoutHandler() {\n \n     @Bean\n     public JdbcUserDetailsManager jdbcUserDetailsManager(AuthenticationManagerBuilder auth, DataSource datasource) throws Exception {\n-      return auth.jdbcAuthentication().passwordEncoder(new BCryptPasswordEncoder()).dataSource(datasource)\n-          .usersByUsernameQuery(\"select Username,Password,Enabled from `Users` where Username=?\")\n+      JdbcUserDetailsManager jdbcUserDetailsManager = auth.jdbcAuthentication().passwordEncoder(new BCryptPasswordEncoder()).dataSource(datasource)\n+          .usersByUsernameQuery(\"select Username,Password,Enabled from `Users` where Username = ?\")\n           .authoritiesByUsernameQuery(\"select Username,Authority from `Authorities` where Username = ?\")\n           .getUserDetailsService();\n+\n+      jdbcUserDetailsManager.setUserExistsSql(\"select Username from `Users` where Username = ?\");\n+      jdbcUserDetailsManager.setCreateUserSql(\"insert into `Users` (Username, Password, Enabled) values (?,?,?)\");\n+      jdbcUserDetailsManager.setUpdateUserSql(\"update `Users` set Password = ?, Enabled = ? where Username = ?\");\n+      jdbcUserDetailsManager.setDeleteUserSql(\"delete from `Users` where Username = ?\");\n+      jdbcUserDetailsManager.setCreateAuthoritySql(\"insert into `Authorities` (Username, Authority) values (?,?)\");\n+      jdbcUserDetailsManager.setDeleteUserAuthoritiesSql(\"delete from `Authorities` where Username = ?\");\n+      jdbcUserDetailsManager.setChangePasswordSql(\"update `Users` set Password = ? where Username = ?\");\n+\n+      return jdbcUserDetailsManager;\n     }\n \n     @Bean",
      "parent_sha": "88494d7d6e663f5dbb89c181ed21a5ad0473ff60"
    }
  },
  {
    "oid": "3a71a4e8594abf786cd4183471130fca4e485c1d",
    "message": "refactor demo",
    "date": "2016-06-15T05:39:26Z",
    "url": "https://github.com/apolloconfig/apollo/commit/3a71a4e8594abf786cd4183471130fca4e485c1d",
    "details": {
      "sha": "6a71212cf1763ccacb9198c2bb88d4c2e3684ba4",
      "filename": "apollo-demo/src/main/java/ApolloConfigDemo.java",
      "status": "modified",
      "additions": 3,
      "deletions": 15,
      "changes": 18,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/3a71a4e8594abf786cd4183471130fca4e485c1d/apollo-demo%2Fsrc%2Fmain%2Fjava%2FApolloConfigDemo.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/3a71a4e8594abf786cd4183471130fca4e485c1d/apollo-demo%2Fsrc%2Fmain%2Fjava%2FApolloConfigDemo.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-demo%2Fsrc%2Fmain%2Fjava%2FApolloConfigDemo.java?ref=3a71a4e8594abf786cd4183471130fca4e485c1d",
      "patch": "@@ -14,20 +14,19 @@\n /**\n  * @author Jason Song(song_s@ctrip.com)\n  */\n-public class ApolloConfigDemo implements ConfigChangeListener {\n+public class ApolloConfigDemo {\n   private static final Logger logger = LoggerFactory.getLogger(ApolloConfigDemo.class);\n   private Config config;\n \n   public ApolloConfigDemo() {\n     config = ConfigService.getAppConfig();\n-    config.addChangeListener(this);\n     config.addChangeListener(new ConfigChangeListener() {\n       @Override\n       public void onChange(ConfigChangeEvent changeEvent) {\n-        logger.info(\"Changes2 for namespace {}\", changeEvent.getNamespace());\n+        logger.info(\"Changes for namespace {}\", changeEvent.getNamespace());\n         for (String key : changeEvent.changedKeys()) {\n           ConfigChange change = changeEvent.getChange(key);\n-          logger.info(\"Change2 - key: {}, oldValue: {}, newValue: {}, changeType: {}\",\n+          logger.info(\"Change - key: {}, oldValue: {}, newValue: {}, changeType: {}\",\n               change.getPropertyName(), change.getOldValue(), change.getNewValue(),\n               change.getChangeType());\n         }\n@@ -58,15 +57,4 @@ public static void main(String[] args) throws IOException {\n       apolloConfigDemo.getConfig(input);\n     }\n   }\n-\n-  @Override\n-  public void onChange(ConfigChangeEvent changeEvent) {\n-    logger.info(\"Changes for namespace {}\", changeEvent.getNamespace());\n-    for (String key : changeEvent.changedKeys()) {\n-      ConfigChange change = changeEvent.getChange(key);\n-      logger.info(\"Change - key: {}, oldValue: {}, newValue: {}, changeType: {}\",\n-          change.getPropertyName(), change.getOldValue(), change.getNewValue(),\n-          change.getChangeType());\n-    }\n-  }\n }",
      "parent_sha": "5021009af3d5098832b0f29165bcea288f2570ac"
    }
  },
  {
    "oid": "7ac1d674d168a6a5ccb31b7b56bee1b6ee0bc9e8",
    "message": "adjust ut timeout",
    "date": "2016-07-07T10:20:53Z",
    "url": "https://github.com/apolloconfig/apollo/commit/7ac1d674d168a6a5ccb31b7b56bee1b6ee0bc9e8",
    "details": {
      "sha": "eafa0662df9db0237923a9df7412048364db902d",
      "filename": "apollo-client/src/test/java/com/ctrip/framework/apollo/integration/ConfigIntegrationTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/7ac1d674d168a6a5ccb31b7b56bee1b6ee0bc9e8/apollo-client%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fintegration%2FConfigIntegrationTest.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/7ac1d674d168a6a5ccb31b7b56bee1b6ee0bc9e8/apollo-client%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fintegration%2FConfigIntegrationTest.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Ftest%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fintegration%2FConfigIntegrationTest.java?ref=7ac1d674d168a6a5ccb31b7b56bee1b6ee0bc9e8",
      "patch": "@@ -264,7 +264,7 @@ public void onChange(ConfigChangeEvent changeEvent) {\n \n     apolloConfig.getConfigurations().put(someKey, anotherValue);\n \n-    longPollFinished.get(pollTimeoutInMS * 10, TimeUnit.MILLISECONDS);\n+    longPollFinished.get(pollTimeoutInMS * 20, TimeUnit.MILLISECONDS);\n \n     assertEquals(anotherValue, config.getProperty(someKey, null));\n ",
      "parent_sha": "5f13408211cf91a8cca334a98e4b7151622bc5c1"
    }
  },
  {
    "oid": "ab773f37960a0598e3972d8537b1ab7b50d7c73a",
    "message": "add tooling zone support",
    "date": "2016-09-18T02:41:33Z",
    "url": "https://github.com/apolloconfig/apollo/commit/ab773f37960a0598e3972d8537b1ab7b50d7c73a",
    "details": {
      "sha": "90bd8352004ac59ee7c8a3e8cb1e771251be8e57",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/util/ConfigUtil.java",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/ab773f37960a0598e3972d8537b1ab7b50d7c73a/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Futil%2FConfigUtil.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/ab773f37960a0598e3972d8537b1ab7b50d7c73a/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Futil%2FConfigUtil.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Futil%2FConfigUtil.java?ref=ab773f37960a0598e3972d8537b1ab7b50d7c73a",
      "patch": "@@ -7,9 +7,7 @@\n import com.ctrip.framework.apollo.core.MetaDomainConsts;\n import com.ctrip.framework.apollo.core.enums.Env;\n import com.ctrip.framework.apollo.core.enums.EnvUtils;\n-import com.ctrip.framework.apollo.exceptions.ApolloConfigException;\n import com.ctrip.framework.foundation.Foundation;\n-import com.dianping.cat.Cat;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -23,6 +21,7 @@\n @Named(type = ConfigUtil.class)\n public class ConfigUtil {\n   private static final Logger logger = LoggerFactory.getLogger(ConfigUtil.class);\n+  private static final String TOOLS_CLUSTER = \"TOOLS\";\n   private int refreshInterval = 5;\n   private TimeUnit refreshIntervalTimeUnit = TimeUnit.MINUTES;\n   private int connectTimeout = 1000; //1 second\n@@ -66,6 +65,11 @@ private void initCluster() {\n     //Load data center from system property\n     cluster = System.getProperty(ConfigConsts.APOLLO_CLUSTER_KEY);\n \n+    //Use TOOLS cluster if tools=true in server.properties\n+    if (Strings.isNullOrEmpty(cluster) && isToolingZone()) {\n+      cluster = TOOLS_CLUSTER;\n+    }\n+\n     //Use data center as cluster\n     if (Strings.isNullOrEmpty(cluster)) {\n       cluster = getDataCenter();\n@@ -77,6 +81,13 @@ private void initCluster() {\n     }\n   }\n \n+  private boolean isToolingZone() {\n+    if (\"true\".equalsIgnoreCase(Foundation.server().getProperty(\"tools\", \"false\").trim())) {\n+      return true;\n+    }\n+    return false;\n+  }\n+\n   /**\n    * Get the cluster name for the current application.\n    *",
      "parent_sha": "806ceb440a0840ecd6639f5a6483d4874f2a16fd"
    }
  },
  {
    "oid": "2fcabd36361461258ea72300b91d09c369dd3583",
    "message": "delete cluster return ResponseEntity.ok",
    "date": "2016-08-21T04:01:42Z",
    "url": "https://github.com/apolloconfig/apollo/commit/2fcabd36361461258ea72300b91d09c369dd3583",
    "details": {
      "sha": "b695bea78a98e32dd123844683588441b6e77089",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ClusterController.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/2fcabd36361461258ea72300b91d09c369dd3583/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fcontroller%2FClusterController.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/2fcabd36361461258ea72300b91d09c369dd3583/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fcontroller%2FClusterController.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fcontroller%2FClusterController.java?ref=2fcabd36361461258ea72300b91d09c369dd3583",
      "patch": "@@ -9,6 +9,7 @@\n import com.ctrip.framework.apollo.portal.service.ClusterService;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n@@ -47,9 +48,10 @@ public ClusterDTO createCluster(@PathVariable String appId, @PathVariable String\n \n   @PreAuthorize(value = \"@permissionValidator.isSuperAdmin()\")\n   @RequestMapping(value = \"apps/{appId}/envs/{env}/clusters/{clusterName:.+}\", method = RequestMethod.DELETE)\n-  public void deleteCluster(@PathVariable String appId, @PathVariable String env,\n-                            @PathVariable String clusterName){\n+  public ResponseEntity<Void> deleteCluster(@PathVariable String appId, @PathVariable String env,\n+                                            @PathVariable String clusterName){\n     clusterService.deleteCluster(Env.valueOf(env), appId, clusterName);\n+    return ResponseEntity.ok().build();\n   }\n \n ",
      "parent_sha": "6c7e3c4c6334a353bd1819cff6203d35f31bb966"
    }
  },
  {
    "oid": "d9f9a8508e9a1282bfa70d8b84915a3ec0a6577e",
    "message": "Modify the logic to add ApolloPropertySources to env, add list empty check logic (#2733)",
    "date": "2019-11-17T01:52:12Z",
    "url": "https://github.com/apolloconfig/apollo/commit/d9f9a8508e9a1282bfa70d8b84915a3ec0a6577e",
    "details": {
      "sha": "17b741ce23578921ffb3f61bfb35cb033a1c3432",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/spring/config/PropertySourcesProcessor.java",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/d9f9a8508e9a1282bfa70d8b84915a3ec0a6577e/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fspring%2Fconfig%2FPropertySourcesProcessor.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/d9f9a8508e9a1282bfa70d8b84915a3ec0a6577e/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fspring%2Fconfig%2FPropertySourcesProcessor.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fspring%2Fconfig%2FPropertySourcesProcessor.java?ref=d9f9a8508e9a1282bfa70d8b84915a3ec0a6577e",
      "patch": "@@ -29,6 +29,7 @@\n import java.util.Iterator;\n import org.springframework.core.env.MutablePropertySources;\n import org.springframework.core.env.PropertySource;\n+import org.springframework.util.CollectionUtils;\n \n /**\n  * Apollo Property Sources processor for Spring Annotation Based Application. <br /> <br />\n@@ -82,18 +83,21 @@ private void initializePropertySources() {\n     // clean up\n     NAMESPACE_NAMES.clear();\n \n+    // ensure ApolloBootstrapPropertySources is still the first\n+    ensureBootstrapPropertyPrecedence(environment);\n+\n+    if (CollectionUtils.isEmpty(composite.getPropertySources())) {\n+      return;\n+    }\n     // add after the bootstrap property source or to the first\n     if (environment.getPropertySources()\n         .contains(PropertySourcesConstants.APOLLO_BOOTSTRAP_PROPERTY_SOURCE_NAME)) {\n-\n-      // ensure ApolloBootstrapPropertySources is still the first\n-      ensureBootstrapPropertyPrecedence(environment);\n-\n       environment.getPropertySources()\n           .addAfter(PropertySourcesConstants.APOLLO_BOOTSTRAP_PROPERTY_SOURCE_NAME, composite);\n     } else {\n       environment.getPropertySources().addFirst(composite);\n     }\n+\n   }\n \n   private void ensureBootstrapPropertyPrecedence(ConfigurableEnvironment environment) {",
      "parent_sha": "34b9717e2ad29bac271dbe9194953d6b87879ba8"
    }
  },
  {
    "oid": "842e35b9c431a7c1461e5f5a011c614da4047f2c",
    "message": "bugfix: Invalid printf-style format string",
    "date": "2017-03-12T07:30:25Z",
    "url": "https://github.com/apolloconfig/apollo/commit/842e35b9c431a7c1461e5f5a011c614da4047f2c",
    "details": {
      "sha": "e45bb22ec64610aea5f1d2f628899e266899ddb1",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/listener/AppInfoChangedListener.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/842e35b9c431a7c1461e5f5a011c614da4047f2c/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Flistener%2FAppInfoChangedListener.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/842e35b9c431a7c1461e5f5a011c614da4047f2c/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Flistener%2FAppInfoChangedListener.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Flistener%2FAppInfoChangedListener.java?ref=842e35b9c431a7c1461e5f5a011c614da4047f2c",
      "patch": "@@ -36,7 +36,7 @@ public void onAppInfoChange(AppInfoChangedEvent event) {\n         appAPI.updateApp(env, appDTO);\n       } catch (Throwable e) {\n         logger.error(\"Update app's info failed. Env = {}, AppId = {}\", env, appId, e);\n-        Tracer.logError(String.format(\"Update app's info failed. Env = {}, AppId = {}\", env, appId), e);\n+        Tracer.logError(String.format(\"Update app's info failed. Env = %s, AppId = %s\", env, appId), e);\n       }\n     }\n ",
      "parent_sha": "d327f0703f690457220fb355e969562b75e6aee0"
    }
  },
  {
    "oid": "b498aaa57c9e2cb211c5b72444e66bff2ed4e8f4",
    "message": "use lamda api",
    "date": "2017-10-10T13:27:06Z",
    "url": "https://github.com/apolloconfig/apollo/commit/b498aaa57c9e2cb211c5b72444e66bff2ed4e8f4",
    "details": {
      "sha": "add5b16fd75bb050d2527d0ee9c8e67c5ff1c66e",
      "filename": "apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/ConfigController.java",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/b498aaa57c9e2cb211c5b72444e66bff2ed4e8f4/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fcontroller%2FConfigController.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/b498aaa57c9e2cb211c5b72444e66bff2ed4e8f4/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fcontroller%2FConfigController.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-configservice%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fconfigservice%2Fcontroller%2FConfigController.java?ref=b498aaa57c9e2cb211c5b72444e66bff2ed4e8f4",
      "patch": "@@ -5,6 +5,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.stream.Collectors;\n \n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n@@ -26,10 +27,8 @@\n import com.ctrip.framework.apollo.core.dto.ApolloConfig;\n import com.ctrip.framework.apollo.core.dto.ApolloNotificationMessages;\n import com.ctrip.framework.apollo.tracer.Tracer;\n-import com.google.common.base.Joiner;\n import com.google.common.base.Splitter;\n import com.google.common.base.Strings;\n-import com.google.common.collect.FluentIterable;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.google.gson.Gson;\n@@ -56,7 +55,6 @@ public class ConfigController {\n \n   private static final Type configurationTypeReference = new TypeToken<Map<String, String>>() {\n       }.getType();\n-  private static final Joiner STRING_JOINER = Joiner.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR);\n \n   @RequestMapping(value = \"/{appId}/{clusterName}/{namespace:.+}\", method = RequestMethod.GET)\n   public ApolloConfig queryConfig(@PathVariable String appId, @PathVariable String clusterName,\n@@ -113,8 +111,8 @@ public ApolloConfig queryConfig(@PathVariable String appId, @PathVariable String\n \n     auditReleases(appId, clusterName, dataCenter, clientIp, releases);\n \n-    String mergedReleaseKey = FluentIterable.from(releases).transform(\n-        input -> input.getReleaseKey()).join(STRING_JOINER);\n+    String mergedReleaseKey = releases.stream().map(Release::getReleaseKey)\n+            .collect(Collectors.joining(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR));\n \n     if (mergedReleaseKey.equals(clientSideReleaseKey)) {\n       // Client side configuration is the same with server side, return 304\n@@ -186,7 +184,7 @@ private String assembleKey(String appId, String cluster, String namespace, Strin\n     if (!Strings.isNullOrEmpty(dataCenter)) {\n       keyParts.add(dataCenter);\n     }\n-    return STRING_JOINER.join(keyParts);\n+    return keyParts.stream().collect(Collectors.joining(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR));\n   }\n \n   private void auditReleases(String appId, String cluster, String dataCenter, String clientIp,",
      "parent_sha": "bf496b4fcb13048cde8ed431329916c92433e02d"
    }
  },
  {
    "oid": "6d2d4596b819f92be3870453691296d70ee78ab7",
    "message": "add more ConfigurationProperties sample",
    "date": "2017-10-09T14:04:21Z",
    "url": "https://github.com/apolloconfig/apollo/commit/6d2d4596b819f92be3870453691296d70ee78ab7",
    "details": {
      "sha": "59ea1d4a0841646a2331a9e54522edbbc52e2950",
      "filename": "apollo-demo/src/main/java/com/ctrip/framework/apollo/demo/spring/springBootDemo/config/SampleRedisConfig.java",
      "status": "modified",
      "additions": 33,
      "deletions": 4,
      "changes": 37,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/6d2d4596b819f92be3870453691296d70ee78ab7/apollo-demo%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fdemo%2Fspring%2FspringBootDemo%2Fconfig%2FSampleRedisConfig.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/6d2d4596b819f92be3870453691296d70ee78ab7/apollo-demo%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fdemo%2Fspring%2FspringBootDemo%2Fconfig%2FSampleRedisConfig.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-demo%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fdemo%2Fspring%2FspringBootDemo%2Fconfig%2FSampleRedisConfig.java?ref=6d2d4596b819f92be3870453691296d70ee78ab7",
      "patch": "@@ -1,5 +1,9 @@\n package com.ctrip.framework.apollo.demo.spring.springBootDemo.config;\n \n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import java.util.List;\n+import java.util.Map;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n@@ -9,22 +13,38 @@\n import javax.annotation.PostConstruct;\n \n /**\n+ * You may set up data like the following in Apollo:\n+ * <pre>\n+ * redis.cache.expireSeconds = 100\n+ * redis.cache.clusterNodes = 1,2\n+ * redis.cache.commandTimeout = 50\n+ * redis.cache.someMap.key1 = a\n+ * redis.cache.someMap.key2 = b\n+ * redis.cache.someList[0] = c\n+ * redis.cache.someList[1] = d\n+ * </pre>\n+ *\n  * @author Jason Song(song_s@ctrip.com)\n  */\n @ConfigurationProperties(prefix = \"redis.cache\")\n @Component(\"sampleRedisConfig\")\n @RefreshScope\n public class SampleRedisConfig {\n+\n   private static final Logger logger = LoggerFactory.getLogger(SampleRedisConfig.class);\n \n   private int expireSeconds;\n   private String clusterNodes;\n   private int commandTimeout;\n \n+  private Map<String, String> someMap = Maps.newLinkedHashMap();\n+  private List<String> someList = Lists.newLinkedList();\n+\n   @PostConstruct\n   private void initialize() {\n-    logger.info(\"SampleRedisConfig initialized - expireSeconds: {}, clusterNodes: {}, commandTimeout: {}\",\n-        expireSeconds, clusterNodes, commandTimeout);\n+    logger.info(\n+        \"SampleRedisConfig initialized - expireSeconds: {}, clusterNodes: {}, commandTimeout: {}, someMap: {}, someList: {}\",\n+        expireSeconds, clusterNodes, commandTimeout, someMap, someList);\n   }\n \n   public void setExpireSeconds(int expireSeconds) {\n@@ -39,9 +59,18 @@ public void setCommandTimeout(int commandTimeout) {\n     this.commandTimeout = commandTimeout;\n   }\n \n+  public Map<String, String> getSomeMap() {\n+    return someMap;\n+  }\n+\n+  public List<String> getSomeList() {\n+    return someList;\n+  }\n+\n   @Override\n   public String toString() {\n-    return String.format(\"[SampleRedisConfig] expireSeconds: %d, clusterNodes: %s, commandTimeout: %d\",\n-        expireSeconds, clusterNodes, commandTimeout);\n+    return String.format(\n+        \"[SampleRedisConfig] expireSeconds: %d, clusterNodes: %s, commandTimeout: %d, someMap: %s, someList: %s\",\n+            expireSeconds, clusterNodes, commandTimeout, someMap, someList);\n   }\n }",
      "parent_sha": "395dcb874ed30429d70015aabaee0fc17c1a35e2"
    }
  },
  {
    "oid": "b29eddd8d3c0719dea82eed7170db1a223f4fb06",
    "message": "load namespaces handle release NotFountException",
    "date": "2016-04-20T08:49:07Z",
    "url": "https://github.com/apolloconfig/apollo/commit/b29eddd8d3c0719dea82eed7170db1a223f4fb06",
    "details": {
      "sha": "c844dfd93b8743c3791ed5a3e95247c9eb4de177",
      "filename": "apollo-portal/src/main/java/com/ctrip/apollo/portal/service/ConfigService.java",
      "status": "modified",
      "additions": 15,
      "deletions": 10,
      "changes": 25,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/b29eddd8d3c0719dea82eed7170db1a223f4fb06/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fapollo%2Fportal%2Fservice%2FConfigService.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/b29eddd8d3c0719dea82eed7170db1a223f4fb06/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fapollo%2Fportal%2Fservice%2FConfigService.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fapollo%2Fportal%2Fservice%2FConfigService.java?ref=b29eddd8d3c0719dea82eed7170db1a223f4fb06",
      "patch": "@@ -1,9 +1,13 @@\n package com.ctrip.apollo.portal.service;\n \n+import com.google.gson.Gson;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Service;\n+import org.springframework.web.client.HttpClientErrorException;\n \n import com.ctrip.apollo.core.enums.Env;\n import com.ctrip.apollo.core.dto.ItemChangeSets;\n@@ -42,7 +46,7 @@ public class ConfigService {\n   @Autowired\n   private ConfigTextResolver resolver;\n \n-  private ObjectMapper objectMapper = new ObjectMapper();\n+  private Gson gson = new Gson();\n \n   /**\n    * load cluster all namespace info with items\n@@ -86,16 +90,17 @@ private NamespaceVO parseNamespace(String appId, Env env, String clusterName, Na\n \n     String namespaceName = namespace.getNamespaceName();\n \n-    //latest createRelease\n-    ReleaseDTO release = releaseAPI.loadLatestRelease(appId, env, clusterName, namespaceName);\n+    //latest Release\n+    ReleaseDTO release = null;\n     Map<String, String> releaseItems = new HashMap<>();\n-    if (release != null) {\n-      try {\n-        releaseItems = objectMapper.readValue(release.getConfigurations(), Map.class);\n-      } catch (IOException e) {\n-        logger.error(\"parse createRelease json error. appId:{},env:{},clusterName:{},namespace:{}\", appId,\n-                     env, clusterName, namespaceName);\n-        return namespaceVO;\n+    try {\n+      release = releaseAPI.loadLatestRelease(appId, env, clusterName, namespaceName);\n+      releaseItems = gson.fromJson(release.getConfigurations(), Map.class);\n+    }catch (HttpClientErrorException e){\n+      if (e.getStatusCode() == HttpStatus.NOT_FOUND){\n+        //ignore maybe new app has no release.\n+      }else {\n+        throw e;\n       }\n     }\n ",
      "parent_sha": "6161b57372cad5a63b7fc1f22440c595e5d84b18"
    }
  },
  {
    "oid": "ef6c48dedbf136c06031aa30205d7c8a54b820dd",
    "message": "fix for java 1.7",
    "date": "2016-04-21T02:38:51Z",
    "url": "https://github.com/apolloconfig/apollo/commit/ef6c48dedbf136c06031aa30205d7c8a54b820dd",
    "details": {
      "sha": "79498c6c32f924b7410e8f719a54e03aa9f1b6a8",
      "filename": "apollo-client/src/main/java/com/ctrip/apollo/internals/DefaultConfig.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/ef6c48dedbf136c06031aa30205d7c8a54b820dd/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fapollo%2Finternals%2FDefaultConfig.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/ef6c48dedbf136c06031aa30205d7c8a54b820dd/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fapollo%2Finternals%2FDefaultConfig.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fapollo%2Finternals%2FDefaultConfig.java?ref=ef6c48dedbf136c06031aa30205d7c8a54b820dd",
      "patch": "@@ -131,7 +131,7 @@ private Map<String, ConfigChange> updateAndCalcConfigChanges(Properties newConfi\n           if (Objects.equals(change.getOldValue(), change.getNewValue())) {\n             break;\n           }\n-          if (!Objects.isNull(change.getOldValue())) {\n+          if (change.getOldValue() != null) {\n             change.setChangeType(PropertyChangeType.MODIFIED);\n           }\n           actualChanges.put(change.getPropertyName(), change);\n@@ -145,7 +145,7 @@ private Map<String, ConfigChange> updateAndCalcConfigChanges(Properties newConfi\n           if (Objects.equals(change.getOldValue(), change.getNewValue())) {\n             break;\n           }\n-          if (!Objects.isNull(change.getNewValue())) {\n+          if (change.getNewValue() != null) {\n             change.setChangeType(PropertyChangeType.MODIFIED);\n           }\n           actualChanges.put(change.getPropertyName(), change);",
      "parent_sha": "f75ae7fa2a7d48a58b516e2239b25599b19512d2"
    }
  },
  {
    "oid": "34c094a20ddce0afe9b91de009856cd119bfc64b",
    "message": "refactor message when could not load config from server",
    "date": "2016-10-08T07:34:23Z",
    "url": "https://github.com/apolloconfig/apollo/commit/34c094a20ddce0afe9b91de009856cd119bfc64b",
    "details": {
      "sha": "a1998b66005db7cb4224ab91aa920ca885ce54c4",
      "filename": "apollo-client/src/main/java/com/ctrip/framework/apollo/internals/DefaultConfig.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/34c094a20ddce0afe9b91de009856cd119bfc64b/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FDefaultConfig.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/34c094a20ddce0afe9b91de009856cd119bfc64b/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FDefaultConfig.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-client%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Finternals%2FDefaultConfig.java?ref=34c094a20ddce0afe9b91de009856cd119bfc64b",
      "patch": "@@ -86,7 +86,7 @@ public String getProperty(String key, String defaultValue) {\n     }\n \n     if (value == null && m_configProperties.get() == null) {\n-      logger.warn(\"Could not load config from Apollo, please check whether the configs are released in Apollo! Return default value now!\");\n+      logger.warn(\"Could not load config for namespace {} from Apollo, please check whether the configs are released in Apollo! Return default value now!\", m_namespace);\n     }\n \n     return value == null ? defaultValue : value;",
      "parent_sha": "cd7a73b104dca30bcb5f779435c79f48f676324b"
    }
  },
  {
    "oid": "d1ae147711af31ea522f988acb36a5c1bf3a4456",
    "message": "update demo with interestedKeyPrefixes",
    "date": "2019-02-16T15:15:44Z",
    "url": "https://github.com/apolloconfig/apollo/commit/d1ae147711af31ea522f988acb36a5c1bf3a4456",
    "details": {
      "sha": "6ed3175c4790985895f6839577a7e5aadb93d158",
      "filename": "apollo-demo/src/main/java/com/ctrip/framework/apollo/demo/spring/springBootDemo/refresh/SpringBootApolloRefreshConfig.java",
      "status": "modified",
      "additions": 2,
      "deletions": 12,
      "changes": 14,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/d1ae147711af31ea522f988acb36a5c1bf3a4456/apollo-demo%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fdemo%2Fspring%2FspringBootDemo%2Frefresh%2FSpringBootApolloRefreshConfig.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/d1ae147711af31ea522f988acb36a5c1bf3a4456/apollo-demo%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fdemo%2Fspring%2FspringBootDemo%2Frefresh%2FSpringBootApolloRefreshConfig.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-demo%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fdemo%2Fspring%2FspringBootDemo%2Frefresh%2FSpringBootApolloRefreshConfig.java?ref=d1ae147711af31ea522f988acb36a5c1bf3a4456",
      "patch": "@@ -28,19 +28,9 @@ public SpringBootApolloRefreshConfig(\n     this.refreshScope = refreshScope;\n   }\n \n-  @ApolloConfigChangeListener({ConfigConsts.NAMESPACE_APPLICATION, \"TEST1.apollo\", \"application.yaml\"})\n+  @ApolloConfigChangeListener(value = {ConfigConsts.NAMESPACE_APPLICATION, \"TEST1.apollo\", \"application.yaml\"},\n+      interestedKeyPrefixes = {\"redis.cache.\"})\n   public void onChange(ConfigChangeEvent changeEvent) {\n-    boolean redisCacheKeysChanged = false;\n-    for (String changedKey : changeEvent.changedKeys()) {\n-      if (changedKey.startsWith(\"redis.cache\")) {\n-        redisCacheKeysChanged = true;\n-        break;\n-      }\n-    }\n-    if (!redisCacheKeysChanged) {\n-      return;\n-    }\n-\n     logger.info(\"before refresh {}\", sampleRedisConfig.toString());\n     refreshScope.refresh(\"sampleRedisConfig\");\n     logger.info(\"after refresh {}\", sampleRedisConfig.toString());",
      "parent_sha": "6a6f50b0a0433aad75d7d77cc2fa769fa6db0d82"
    }
  },
  {
    "oid": "03bc4b470b640a219cfb7c991f6b999553560e32",
    "message": "return null when EmptyResultDataAccessException occurred for ldap scenarios",
    "date": "2020-12-12T03:18:40Z",
    "url": "https://github.com/apolloconfig/apollo/commit/03bc4b470b640a219cfb7c991f6b999553560e32",
    "details": {
      "sha": "8ca15b3f67f0a1ebb3b1be23c75a591ab521bf09",
      "filename": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/ldap/LdapUserService.java",
      "status": "modified",
      "additions": 22,
      "deletions": 11,
      "changes": 33,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/03bc4b470b640a219cfb7c991f6b999553560e32/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fldap%2FLdapUserService.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/03bc4b470b640a219cfb7c991f6b999553560e32/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fldap%2FLdapUserService.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fframework%2Fapollo%2Fportal%2Fspi%2Fldap%2FLdapUserService.java?ref=03bc4b470b640a219cfb7c991f6b999553560e32",
      "patch": "@@ -21,6 +21,7 @@\n import org.apache.commons.lang.StringUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.EmptyResultDataAccessException;\n import org.springframework.ldap.core.AttributesMapper;\n import org.springframework.ldap.core.ContextMapper;\n import org.springframework.ldap.core.DirContextAdapter;\n@@ -177,15 +178,20 @@ private UserInfo lookupUser(String member, List<String> userIds) {\n   }\n \n   private UserInfo searchUserById(String userId) {\n-    return ldapTemplate.searchForObject(query().where(loginIdAttrName).is(userId),\n-        ctx -> {\n-          UserInfo userInfo = new UserInfo();\n-          DirContextAdapter contextAdapter = (DirContextAdapter) ctx;\n-          userInfo.setEmail(contextAdapter.getStringAttribute(emailAttrName));\n-          userInfo.setName(contextAdapter.getStringAttribute(userDisplayNameAttrName));\n-          userInfo.setUserId(contextAdapter.getStringAttribute(loginIdAttrName));\n-          return userInfo;\n-        });\n+    try {\n+      return ldapTemplate.searchForObject(query().where(loginIdAttrName).is(userId),\n+          ctx -> {\n+            UserInfo userInfo = new UserInfo();\n+            DirContextAdapter contextAdapter = (DirContextAdapter) ctx;\n+            userInfo.setEmail(contextAdapter.getStringAttribute(emailAttrName));\n+            userInfo.setName(contextAdapter.getStringAttribute(userDisplayNameAttrName));\n+            userInfo.setUserId(contextAdapter.getStringAttribute(loginIdAttrName));\n+            return userInfo;\n+          });\n+    } catch (EmptyResultDataAccessException ex) {\n+      // EmptyResultDataAccessException means no record found\n+      return null;\n+    }\n   }\n \n   /**\n@@ -279,9 +285,14 @@ public UserInfo findByUserId(String userId) {\n       }\n       return null;\n     }\n-    return ldapTemplate\n-        .searchForObject(ldapQueryCriteria().and(loginIdAttrName).is(userId), ldapUserInfoMapper);\n \n+    try {\n+      return ldapTemplate\n+          .searchForObject(ldapQueryCriteria().and(loginIdAttrName).is(userId), ldapUserInfoMapper);\n+    } catch (EmptyResultDataAccessException ex) {\n+      // EmptyResultDataAccessException means no record found\n+      return null;\n+    }\n   }\n \n   @Override",
      "parent_sha": "f8683a243e2a6515836de1c4222b96a40b106182"
    }
  },
  {
    "oid": "a91c809735c8e640e86141345cc9a6ba5a97d8fb",
    "message": "fix",
    "date": "2016-05-18T06:54:57Z",
    "url": "https://github.com/apolloconfig/apollo/commit/a91c809735c8e640e86141345cc9a6ba5a97d8fb",
    "details": {
      "sha": "a2dfd7cf5d10ff849b99c8bd8d76f260d3e32620",
      "filename": "apollo-portal/src/main/java/com/ctrip/apollo/portal/PortalSettings.java",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/apolloconfig/apollo/blob/a91c809735c8e640e86141345cc9a6ba5a97d8fb/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fapollo%2Fportal%2FPortalSettings.java",
      "raw_url": "https://github.com/apolloconfig/apollo/raw/a91c809735c8e640e86141345cc9a6ba5a97d8fb/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fapollo%2Fportal%2FPortalSettings.java",
      "contents_url": "https://api.github.com/repos/apolloconfig/apollo/contents/apollo-portal%2Fsrc%2Fmain%2Fjava%2Fcom%2Fctrip%2Fapollo%2Fportal%2FPortalSettings.java?ref=a91c809735c8e640e86141345cc9a6ba5a97d8fb",
      "patch": "@@ -128,15 +128,13 @@ public void run() {\n             }\n           } else {\n             //maybe meta server up but admin server down\n-            handleEnvDown(env);\n-            hasUpdateStatus = true;\n+            hasUpdateStatus = handleEnvDown(env);\n           }\n \n         } catch (Exception e) {\n           //maybe meta server down\n           logger.warn(\"health check fail. [env:{}]\", env, e.getMessage());\n-          handleEnvDown(env);\n-          hasUpdateStatus = true;\n+          hasUpdateStatus = handleEnvDown(env);\n         }\n       }\n \n@@ -151,13 +149,17 @@ private boolean isUp(Env env) {\n       return \"UP\".equals(health.getStatus().getCode());\n     }\n \n-    private void handleEnvDown(Env env) {\n+    private boolean handleEnvDown(Env env) {\n       long failCnt = healthCheckFailCnt.get(env);\n       healthCheckFailCnt.put(env, ++failCnt);\n \n-      if (failCnt >= ENV_DIED_THREADHOLD) {\n+      if (envStatusMark.get(env) && failCnt >= ENV_DIED_THREADHOLD){\n         envStatusMark.put(env, false);\n-        logger.error(\"env down [env:{}]\", env);\n+        logger.error(\"env turn to down [env:{}]\", env);\n+        return true;\n+      }else {\n+        logger.warn(\"[env:{}] down yet.\", env);\n+        return false;\n       }\n     }\n ",
      "parent_sha": "56c36b728c741d7bdfae80bc51543b8b6e24fb3d"
    }
  }
]