[
  {
    "oid": "61ce9ce3aa1b22b4eba9e9438d1eca2158ce2074",
    "message": "[added] GwtApplication stuff. the log methods are far from optimal, should allow user to define where things go (e.g. Surface3D and log label).",
    "date": "2011-07-24T15:50:58Z",
    "url": "https://github.com/libgdx/libgdx/commit/61ce9ce3aa1b22b4eba9e9438d1eca2158ce2074",
    "details": {
      "sha": "4c1dd36455dc2f76dbd86f131635531549903cb7",
      "filename": "backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtApplication.java",
      "status": "modified",
      "additions": 122,
      "deletions": 1,
      "changes": 123,
      "blob_url": "https://github.com/libgdx/libgdx/blob/61ce9ce3aa1b22b4eba9e9438d1eca2158ce2074/backends%2Fgdx-backends-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fgwt%2FGwtApplication.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/61ce9ce3aa1b22b4eba9e9438d1eca2158ce2074/backends%2Fgdx-backends-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fgwt%2FGwtApplication.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backends-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fgwt%2FGwtApplication.java?ref=61ce9ce3aa1b22b4eba9e9438d1eca2158ce2074",
      "patch": "@@ -2,16 +2,31 @@\n \r\n import gwt.g2d.client.util.FpsTimer;\r\n \r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import com.badlogic.gdx.Application;\r\n import com.badlogic.gdx.ApplicationListener;\r\n+import com.badlogic.gdx.Audio;\r\n+import com.badlogic.gdx.Files;\r\n import com.badlogic.gdx.Gdx;\r\n+import com.badlogic.gdx.Graphics;\r\n+import com.badlogic.gdx.Input;\r\n+import com.badlogic.gdx.Preferences;\r\n+import com.badlogic.gdx.utils.GdxRuntimeException;\r\n import com.google.gwt.core.client.EntryPoint;\r\n import com.google.gwt.event.logical.shared.ResizeEvent;\r\n import com.google.gwt.event.logical.shared.ResizeHandler;\r\n+import com.google.gwt.user.client.ui.Label;\r\n+import com.google.gwt.user.client.ui.RootPanel;\r\n \r\n-public abstract class GwtApplication implements EntryPoint {\r\n+public abstract class GwtApplication implements EntryPoint, Application {\r\n \tprivate ApplicationListener listener;\r\n \tprivate GwtApplicationConfiguration config;\r\n \tprivate GwtGraphics graphics;\r\n+\tprivate Label log = null;\r\n+\tprivate int logLevel = LOG_ERROR;\r\n+\tprivate List<Runnable> runnables = new ArrayList<Runnable>();\r\n \t\r\n \t@Override\r\n \tpublic void onModuleLoad() {\r\n@@ -43,6 +58,10 @@ public void onResize(ResizeEvent event) {\n \t\tFpsTimer timer = new FpsTimer(config.fps) {\r\n \t\t\t@Override\r\n \t\t\tpublic void update() {\r\n+\t\t\t\tfor(int i = 0; i < runnables.size(); i++) {\r\n+\t\t\t\t\trunnables.get(i).run();\r\n+\t\t\t\t}\r\n+\t\t\t\trunnables.clear();\r\n \t\t\t\tlistener.render();\r\n \t\t\t}\r\n \t\t};\r\n@@ -51,4 +70,106 @@ public void update() {\n \r\n \tpublic abstract GwtApplicationConfiguration getConfig();\r\n \tpublic abstract ApplicationListener getApplicationListener();\r\n+\r\n+\t@Override\r\n+\tpublic Graphics getGraphics() {\r\n+\t\treturn graphics;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic Audio getAudio() {\r\n+\t\t// FIXME\r\n+\t\tthrow new GdxRuntimeException(\"not implemented\");\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic Input getInput() {\r\n+\t\t// FIXME\r\n+\t\tthrow new GdxRuntimeException(\"not implemented\");\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic Files getFiles() {\r\n+\t\t// FIXME\r\n+\t\tthrow new GdxRuntimeException(\"not implemented\");\r\n+\t}\r\n+\r\n+\tprivate void checkLogLabel() {\r\n+\t\tif(log == null) {\r\n+\t\t\tlog = new Label();\r\n+\t\t\tRootPanel.get().add(log);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic void log(String tag, String message) {\r\n+\t\tif(logLevel >= LOG_INFO) {\r\n+\t\t\tcheckLogLabel();\r\n+\t\t\tlog.setText(log.getText() + \"\\n\" + tag + \": \" + message);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void log(String tag, String message, Exception exception) {\r\n+\t\tif(logLevel >= LOG_INFO) {\r\n+\t\t\tcheckLogLabel();\r\n+\t\t\tlog.setText(log.getText() + \"\\n\" + tag + \": \" + message + \"\\n\" + exception.getMessage());\r\n+\t\t}\t\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void error(String tag, String message) {\r\n+\t\tif(logLevel >= LOG_ERROR) {\r\n+\t\t\tcheckLogLabel();\r\n+\t\t\tlog.setText(log.getText() + \"\\n\" + tag + \": \" + message);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void error(String tag, String message, Exception exception) {\r\n+\t\tif(logLevel >= LOG_ERROR) {\r\n+\t\t\tcheckLogLabel();\r\n+\t\t\tlog.setText(log.getText() + \"\\n\" + tag + \": \" + message + \"\\n\" + exception.getMessage());\r\n+\t\t}\t\t\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void setLogLevel(int logLevel) {\r\n+\t\tthis.logLevel = logLevel;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic ApplicationType getType() {\r\n+\t\treturn ApplicationType.WebGL;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic int getVersion() {\r\n+\t\treturn 0;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic long getJavaHeap() {\r\n+\t\treturn 0;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic long getNativeHeap() {\r\n+\t\treturn 0;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic Preferences getPreferences(String name) {\r\n+\t\t// FIXME\r\n+\t\tthrow new GdxRuntimeException(\"not implemented\");\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void postRunnable(Runnable runnable) {\r\n+\t\trunnables.add(runnable);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void exit() {\t\t\r\n+\t}\r\n }\r",
      "parent_sha": "4df6017eda2cfc409aba80c42319bc80f3c871f2"
    }
  },
  {
    "oid": "d82ea699ed01102100d4e604a546fd2a65efabfd",
    "message": "Fixed MapObject x/y properties being scaled twice\n\nThe x and y local variables are already scaled on lines 175 and 176, and scaling them again when modifying the properties ObjectMap makes the x and y properties too small (and inconsistent with the coordinates of Rectangle/Ellipse/etc if it is an instance of one of those objects).",
    "date": "2016-03-12T05:05:53Z",
    "url": "https://github.com/libgdx/libgdx/commit/d82ea699ed01102100d4e604a546fd2a65efabfd",
    "details": {
      "sha": "cbe7d83685dbdac6256dda400d17fed21d3ede8c",
      "filename": "gdx/src/com/badlogic/gdx/maps/tiled/BaseTmxMapLoader.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/libgdx/libgdx/blob/d82ea699ed01102100d4e604a546fd2a65efabfd/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmaps%2Ftiled%2FBaseTmxMapLoader.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/d82ea699ed01102100d4e604a546fd2a65efabfd/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmaps%2Ftiled%2FBaseTmxMapLoader.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmaps%2Ftiled%2FBaseTmxMapLoader.java?ref=d82ea699ed01102100d4e604a546fd2a65efabfd",
      "patch": "@@ -242,8 +242,8 @@ protected void loadObject (TiledMap map, MapLayer layer, Element element) {\n \t\t\tif (id != 0) {\n \t\t\t\tobject.getProperties().put(\"id\", id);\n \t\t\t}\n-\t\t\tobject.getProperties().put(\"x\", x * scaleX);\n-\t\t\tobject.getProperties().put(\"y\", (flipY ? y - height : y) * scaleY);\n+\t\t\tobject.getProperties().put(\"x\", x);\n+\t\t\tobject.getProperties().put(\"y\", (flipY ? y - height : y));\n \t\t\tobject.getProperties().put(\"width\", width);\n \t\t\tobject.getProperties().put(\"height\", height);\n \t\t\tobject.setVisible(element.getIntAttribute(\"visible\", 1) == 1);",
      "parent_sha": "0edef771ec41a4a062e489ebd3dfe1b28b854a45"
    }
  },
  {
    "oid": "d2bf2a9d9def98753313f84a4ad26248a76ed8ca",
    "message": "There are two changes, the first one is that the user can specify the path of the crc file (settings.incrementalFilePath), if not specified then the TexturePacker behaves as always, if specified then the crc file used is the specified. The second change is that, in case a crc file is specified, then the key used for the crc map is the relative path of the image to the images root folder instead the absolute path of the image, so it could be easily shared between two or more developers.",
    "date": "2012-04-21T22:19:08Z",
    "url": "https://github.com/libgdx/libgdx/commit/d2bf2a9d9def98753313f84a4ad26248a76ed8ca",
    "details": {
      "sha": "caae8c1a1b748cbe567c5d52a1f288762437c71d",
      "filename": "extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/TexturePacker.java",
      "status": "modified",
      "additions": 44,
      "deletions": 5,
      "changes": 49,
      "blob_url": "https://github.com/libgdx/libgdx/blob/d2bf2a9d9def98753313f84a4ad26248a76ed8ca/extensions%2Fgdx-tools%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftools%2Fimagepacker%2FTexturePacker.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/d2bf2a9d9def98753313f84a4ad26248a76ed8ca/extensions%2Fgdx-tools%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftools%2Fimagepacker%2FTexturePacker.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/extensions%2Fgdx-tools%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftools%2Fimagepacker%2FTexturePacker.java?ref=d2bf2a9d9def98753313f84a4ad26248a76ed8ca",
      "patch": "@@ -28,6 +28,7 @@\n import java.io.FileWriter;\r\n import java.io.FilenameFilter;\r\n import java.io.IOException;\r\n+import java.io.ObjectInputStream.GetField;\r\n import java.math.BigInteger;\r\n import java.security.MessageDigest;\r\n import java.security.NoSuchAlgorithmException;\r\n@@ -98,7 +99,7 @@ public TexturePacker (Settings settings, File inputDir, Filter filter, File outp\n \r\n \t\tprocess(outputDir, packFile, inputDir.getName());\r\n \t}\r\n-\t\r\n+\r\n \tstatic void log (String message) {\r\n \t\tif (!quiet) System.out.println(message);\r\n \t}\r\n@@ -710,11 +711,14 @@ static public class Settings {\n \t\tpublic boolean alias = true;\r\n \t\tpublic boolean edgePadding = true;\r\n \r\n+\t\t// to save the increment file local to where the texture pack run\r\n+\t\tpublic String incrementalFilePath = null;\r\n+\r\n \t\tHashMap<String, Long> crcs = new HashMap();\r\n \t\tHashMap<String, String> packSections = new HashMap();\r\n \t}\r\n \r\n-\tstatic private void process (Settings settings, File inputDir, File outputDir, File packFile) throws IOException {\r\n+\tstatic private void process (Settings settings, File rootDir, File inputDir, File outputDir, File packFile) throws IOException {\r\n \t\tif (inputDir.getName().startsWith(\".\")) return;\r\n \r\n \t\t// Abort if nothing has changed.\r\n@@ -724,12 +728,25 @@ static private void process (Settings settings, File inputDir, File outputDir, F\n \t\t\tif (files == null) return;\r\n \t\t\tboolean noneHaveChanged = true;\r\n \t\t\tint childCountNow = 0;\r\n+\r\n+\t\t\t// added flag to generate the crc file using local paths in case the incrementalFilePath is\r\n+\t\t\t// specified.\r\n+\t\t\tboolean useAbsolutePaths = true;\r\n+\r\n+\t\t\tif (settings.incrementalFilePath != null) useAbsolutePaths = false;\r\n+\r\n \t\t\tfor (File file : files) {\r\n \t\t\t\tif (file.isDirectory()) continue;\r\n \t\t\t\tString path = file.getAbsolutePath();\r\n \t\t\t\tLong crcOld = settings.crcs.get(path);\r\n \t\t\t\tlong crcNow = crc(file);\r\n \t\t\t\tif (crcOld == null || crcOld != crcNow) noneHaveChanged = false;\r\n+\r\n+\t\t\t\tif (!useAbsolutePaths) {\r\n+\t\t\t\t\tString rootFolderAbsolutePath = rootDir.getAbsolutePath();\r\n+\t\t\t\t\tif (isSubPath(rootFolderAbsolutePath, path)) path = removeSubPath(rootFolderAbsolutePath, path);\r\n+\t\t\t\t}\r\n+\r\n \t\t\t\tsettings.crcs.put(path, crcNow);\r\n \t\t\t\tchildCountNow++;\r\n \t\t\t}\r\n@@ -815,7 +832,7 @@ static private void process (Settings settings, File inputDir, File outputDir, F\n \t\tFile[] files = inputDir.listFiles();\r\n \t\tif (files == null) return;\r\n \t\tfor (File file : files)\r\n-\t\t\tif (file.isDirectory()) process(settings, file, outputDir, packFile);\r\n+\t\t\tif (file.isDirectory()) process(settings, rootDir, file, outputDir, packFile);\r\n \t}\r\n \r\n \tstatic public void process (Settings settings, String input, String output) {\r\n@@ -838,7 +855,15 @@ static public void process (Settings settings, String input, String output, Stri\n \t\t\tFile incrmentalFile = null;\r\n \t\t\tif (settings.incremental && packFile.exists()) {\r\n \t\t\t\tsettings.crcs.clear();\r\n-\t\t\t\tincrmentalFile = new File(System.getProperty(\"user.home\") + \"/.texturepacker/\" + hash(inputDir.getAbsolutePath()));\r\n+\r\n+\t\t\t\t// if localIncrementFile\r\n+\t\t\t\tString incrementalFilePath = settings.incrementalFilePath;\r\n+\r\n+\t\t\t\tif (incrementalFilePath == null)\r\n+\t\t\t\t\tincrementalFilePath = System.getProperty(\"user.home\") + \"/.texturepacker/\" + hash(inputDir.getAbsolutePath());\r\n+\r\n+\t\t\t\tincrmentalFile = new File(incrementalFilePath);\r\n+\r\n \t\t\t\tif (incrmentalFile.exists()) {\r\n \t\t\t\t\tBufferedReader reader = new BufferedReader(new FileReader(incrmentalFile));\r\n \t\t\t\t\twhile (true) {\r\n@@ -882,7 +907,7 @@ static public void process (Settings settings, String input, String output, Stri\n \t\t\t// Clean pack file.\r\n \t\t\tpackFile.delete();\r\n \r\n-\t\t\tprocess(settings, inputDir, outputDir, packFile);\r\n+\t\t\tprocess(settings, inputDir, inputDir, outputDir, packFile);\r\n \r\n \t\t\t// Write incrmental file.\r\n \t\t\tif (incrmentalFile != null) {\r\n@@ -926,6 +951,20 @@ static private long crc (File file) {\n \t\t}\r\n \t}\r\n \r\n+\tstatic boolean isSubPath (String path, String subPath) {\r\n+\t\tif (subPath.length() < path.length()) return false;\r\n+\t\tString subPathSubString = subPath.substring(0, path.length());\r\n+\t\treturn subPathSubString.equals(path);\r\n+\t}\r\n+\r\n+\tstatic boolean isAbsolutePath (String path) {\r\n+\t\treturn new File(path).isAbsolute();\r\n+\t}\r\n+\r\n+\tstatic String removeSubPath (String path, String subPath) {\r\n+\t\treturn subPath.replace(path, \"\");\r\n+\t}\r\n+\r\n \tstatic public void main (String[] args) throws Exception {\r\n \t\tString input, output;\r\n \t\tif (args.length != 2) {\r",
      "parent_sha": "eac812f909476a3ae28225da66389919822a966d"
    }
  },
  {
    "oid": "5f06aa0275235e819bfc284ca6f34ca7845b0561",
    "message": "[fixed] Someone removed GL20 capabilities from AndroidGraphics by commenting out vital parts. Reverted...",
    "date": "2010-06-22T09:59:17Z",
    "url": "https://github.com/libgdx/libgdx/commit/5f06aa0275235e819bfc284ca6f34ca7845b0561",
    "details": {
      "sha": "07243c38248c520798c99534f4a5f8e74a1f4891",
      "filename": "gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidGraphics.java",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/libgdx/libgdx/blob/5f06aa0275235e819bfc284ca6f34ca7845b0561/gdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidGraphics.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/5f06aa0275235e819bfc284ca6f34ca7845b0561/gdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidGraphics.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidGraphics.java?ref=5f06aa0275235e819bfc284ca6f34ca7845b0561",
      "patch": "@@ -26,6 +26,7 @@\n import android.view.WindowManager;\r\n import com.badlogic.gdx.Graphics;\r\n import com.badlogic.gdx.RenderListener;\r\n+import com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20;\r\n import com.badlogic.gdx.files.FileHandle;\r\n import com.badlogic.gdx.graphics.*;\r\n import com.badlogic.gdx.graphics.Font.FontStyle;\r\n@@ -101,9 +102,9 @@ public AndroidGraphics( AndroidApplication activity, boolean useGL2IfAvailable )\n \t\t\r\n \t\tif( useGL2IfAvailable )\r\n \t\t{\r\n-//\t\t\tif( checkGL20( activity ) )\r\n-//\t\t\t\tview = new GLSurfaceView20( activity );\r\n-//\t\t\telse\r\n+\t\t\tif( checkGL20( activity ) )\r\n+\t\t\t\tview = new GLSurfaceView20( activity );\r\n+\t\t\telse\r\n \t\t\t\tview = new android.opengl.GLSurfaceView( activity );\r\n \t\t}\r\n \t\telse\r\n@@ -390,9 +391,9 @@ private void setupGL( javax.microedition.khronos.opengles.GL10 gl )\n \t\tif( gl10 != null || gl20 != null )\r\n \t\t\treturn;\r\n \t\t\r\n-//\t\tif( view instanceof GLSurfaceView20 )\r\n-//\t\t\tgl20 = new AndroidGL20();\r\n-//\t\telse\r\n+\t\tif( view instanceof GLSurfaceView20 )\r\n+\t\t\tgl20 = new AndroidGL20();\r\n+\t\telse\r\n \t\t{\r\n \t\t\tgl10 = new AndroidGL10(gl);\r\n \t\t\tif( gl instanceof javax.microedition.khronos.opengles.GL11 )\r",
      "parent_sha": "40cf67b118e5f4fd49d635c624a2c0cfb00ed407"
    }
  },
  {
    "oid": "7e2410e1e88d2929893e050a3abfde563e2b50e1",
    "message": "Update IOSGraphics for MobiVM 2.3.6",
    "date": "2019-03-13T08:04:18Z",
    "url": "https://github.com/libgdx/libgdx/commit/7e2410e1e88d2929893e050a3abfde563e2b50e1",
    "details": {
      "sha": "48a3e7f914582108d356938485ed577dceec8999",
      "filename": "backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSGraphics.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/libgdx/libgdx/blob/7e2410e1e88d2929893e050a3abfde563e2b50e1/backends%2Fgdx-backend-robovm%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fiosrobovm%2FIOSGraphics.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/7e2410e1e88d2929893e050a3abfde563e2b50e1/backends%2Fgdx-backend-robovm%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fiosrobovm%2FIOSGraphics.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backend-robovm%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fiosrobovm%2FIOSGraphics.java?ref=7e2410e1e88d2929893e050a3abfde563e2b50e1",
      "patch": "@@ -109,7 +109,7 @@ public boolean shouldAutorotateToInterfaceOrientation (UIInterfaceOrientation or\n \t\t}\r\n \r\n \t\t@Override\r\n-\t\tpublic UIRectEdge preferredScreenEdgesDeferringSystemGestures() {\r\n+\t\tpublic UIRectEdge getPreferredScreenEdgesDeferringSystemGestures() {\r\n \t\t\treturn app.config.screenEdgesDeferringSystemGestures;\r\n \t\t}\r\n \r",
      "parent_sha": "57719994a058e7b888db72de3716cbc79ebb0295"
    }
  },
  {
    "oid": "d1c03fa42319f05b6b69628dcc188888231516d6",
    "message": "Revert \"Add to methods to get the max font size that ensure that n chars from a font fits entirely within a desired height and/or width.\"\n\nThis reverts commit 8b1ab483e26032b561e360598fc8280cd80e4f2f.",
    "date": "2014-05-01T19:53:51Z",
    "url": "https://github.com/libgdx/libgdx/commit/d1c03fa42319f05b6b69628dcc188888231516d6",
    "details": {
      "sha": "78c86a5d0f75e47865ea7d5ad66a5d95f215b03c",
      "filename": "extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java",
      "status": "modified",
      "additions": 3,
      "deletions": 25,
      "changes": 28,
      "blob_url": "https://github.com/libgdx/libgdx/blob/d1c03fa42319f05b6b69628dcc188888231516d6/extensions%2Fgdx-freetype%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2Ffreetype%2FFreeTypeFontGenerator.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/d1c03fa42319f05b6b69628dcc188888231516d6/extensions%2Fgdx-freetype%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2Ffreetype%2FFreeTypeFontGenerator.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/extensions%2Fgdx-freetype%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2Ffreetype%2FFreeTypeFontGenerator.java?ref=d1c03fa42319f05b6b69628dcc188888231516d6",
      "patch": "@@ -158,34 +158,12 @@ public BitmapFont generateFont (FreeTypeFontParameter parameter) {\n \r\n \t/** Uses ascender and descender of font to calculate real height that makes all glyphs to fit in given pixel size. Source:\r\n \t * http://nothings.org/stb/stb_truetype.h / stbtt_ScaleForPixelHeight */\r\n-\tpublic int scaleForPixelHeight (int height) {\r\n-\t\tif (!bitmapped && !FreeType.setPixelSizes(face, 0, height)) throw new GdxRuntimeException(\"Couldn't set size for font\");\r\n-\t\tSizeMetrics fontMetrics = face.getSize().getMetrics();\r\n-\t\tint ascent = FreeType.toInt(fontMetrics.getAscender());\r\n-\t\tint descent = FreeType.toInt(fontMetrics.getDescender());\r\n-\t\treturn height * height / (ascent - descent);\r\n-\t}\r\n-\t\r\n-\t/** Uses max advance, ascender and descender of font to calculate real height that makes any n glyphs to fit in given pixel width. \r\n-\t * @param width the max width to fit (in pixels)\r\n-\t * @param numChars max number of characters that to fill width */\r\n-\tpublic int scaleForPixelWidth(int width, int numChars) {\r\n+\tpublic int scaleForPixelHeight (int size) {\r\n+\t\tif (!bitmapped && !FreeType.setPixelSizes(face, 0, size)) throw new GdxRuntimeException(\"Couldn't set size for font\");\r\n \t\tSizeMetrics fontMetrics = face.getSize().getMetrics();\r\n-\t\tint advance = FreeType.toInt(fontMetrics.getMaxAdvance());\r\n \t\tint ascent = FreeType.toInt(fontMetrics.getAscender());\r\n \t\tint descent = FreeType.toInt(fontMetrics.getDescender());\r\n-\t\tint unscaledHeight = ascent - descent;\r\n-\t\tint height = unscaledHeight * width / (advance * numChars);\r\n-\t\tif (!bitmapped && !FreeType.setPixelSizes(face, 0, height)) throw new GdxRuntimeException(\"Couldn't set size for font\");\r\n-\t\treturn height;\r\n-\t}\r\n-\t\r\n-\t/** Uses max advance, ascender and descender of font to calculate real height that makes any n glyphs to fit in given pixel width and height. \r\n-\t * @param width the max width to fit (in pixels)\r\n-\t * @param height the max height to fit (in pixels)\r\n-\t * @param numChars max number of characters that to fill width */\r\n-\tpublic int scaleToFitSquare(int width, int height, int numChars) {\r\n-\t\treturn Math.min(scaleForPixelHeight(height), scaleForPixelWidth(width, numChars));\r\n+\t\treturn size * size / (ascent - descent);\r\n \t}\r\n \r\n \tpublic class GlyphAndBitmap {\r",
      "parent_sha": "8b1ab483e26032b561e360598fc8280cd80e4f2f"
    }
  },
  {
    "oid": "9d05218a87b33076de74202f9a583e08e31aa42d",
    "message": "Javadoc.",
    "date": "2011-08-14T06:01:47Z",
    "url": "https://github.com/libgdx/libgdx/commit/9d05218a87b33076de74202f9a583e08e31aa42d",
    "details": {
      "sha": "dc28c95b22f5c9fdf7557f91c3399e15541dc311",
      "filename": "extensions/gdx-tools/src/com/badlogic/gdx/tools/FileProcessor.java",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/libgdx/libgdx/blob/9d05218a87b33076de74202f9a583e08e31aa42d/extensions%2Fgdx-tools%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftools%2FFileProcessor.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/9d05218a87b33076de74202f9a583e08e31aa42d/extensions%2Fgdx-tools%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftools%2FFileProcessor.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/extensions%2Fgdx-tools%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftools%2FFileProcessor.java?ref=9d05218a87b33076de74202f9a583e08e31aa42d",
      "patch": "@@ -64,13 +64,15 @@ public FileProcessor setRecursive (boolean recursive) {\n \t\treturn this;\r\n \t}\r\n \r\n-\tpublic void process (File inputFile, File outputRoot) throws Exception {\r\n+\t/** @return the processed files added with {@link #addProcessedFile(InputFile)}. */\r\n+\tpublic ArrayList<InputFile> process (File inputFile, File outputRoot) throws Exception {\r\n \t\tif (inputFile.isFile())\r\n-\t\t\tprocess(new File[] {inputFile}, outputRoot);\r\n+\t\t\treturn process(new File[] {inputFile}, outputRoot);\r\n \t\telse\r\n-\t\t\tprocess(inputFile.listFiles(), outputRoot);\r\n+\t\t\treturn process(inputFile.listFiles(), outputRoot);\r\n \t}\r\n \r\n+\t/** @return the processed files added with {@link #addProcessedFile(InputFile)}. */\r\n \tpublic ArrayList<InputFile> process (File[] files, File outputRoot) throws Exception {\r\n \t\toutputFiles.clear();\r\n \r",
      "parent_sha": "db83242fc6c2bbedccaf4b3391c9b81fde3a33d3"
    }
  },
  {
    "oid": "1e115f60ad72f767c56a24053560b3260f49b5b0",
    "message": "Switched X and Y axis in the javadoc.",
    "date": "2014-07-27T18:00:17Z",
    "url": "https://github.com/libgdx/libgdx/commit/1e115f60ad72f767c56a24053560b3260f49b5b0",
    "details": {
      "sha": "22d4d135ba5a72d4a2686795673d8219a753cb4f",
      "filename": "gdx/src/com/badlogic/gdx/graphics/g3d/decals/Decal.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/libgdx/libgdx/blob/1e115f60ad72f767c56a24053560b3260f49b5b0/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg3d%2Fdecals%2FDecal.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/1e115f60ad72f767c56a24053560b3260f49b5b0/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg3d%2Fdecals%2FDecal.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg3d%2Fdecals%2FDecal.java?ref=1e115f60ad72f767c56a24053560b3260f49b5b0",
      "patch": "@@ -144,8 +144,8 @@ public void rotateZ (float angle) {\n \t}\r\n \r\n \t/** Sets the rotation of this decal to the given angles on all axes.\r\n-\t * @param yaw Angle in degrees to rotate around the X axis\r\n-\t * @param pitch Angle in degrees to rotate around the Y axis\r\n+\t * @param yaw Angle in degrees to rotate around the Y axis\r\n+\t * @param pitch Angle in degrees to rotate around the X axis\r\n \t * @param roll Angle in degrees to rotate around the Z axis */\r\n \tpublic void setRotation (float yaw, float pitch, float roll) {\r\n \t\trotation.setEulerAngles(yaw, pitch, roll);\r",
      "parent_sha": "b7341a553ead5ce9359841eefed1cb5156b60a8e"
    }
  },
  {
    "oid": "27e43510824c027469be0b320ae84147cf609dfa",
    "message": "Fix RevoluteJoint#getLocalAnchorB",
    "date": "2014-10-09T03:51:33Z",
    "url": "https://github.com/libgdx/libgdx/commit/27e43510824c027469be0b320ae84147cf609dfa",
    "details": {
      "sha": "c529f6b74a8a392f488297440d001e216ed23128",
      "filename": "extensions/gdx-box2d/gdx-box2d/src/com/badlogic/gdx/physics/box2d/joints/RevoluteJoint.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/libgdx/libgdx/blob/27e43510824c027469be0b320ae84147cf609dfa/extensions%2Fgdx-box2d%2Fgdx-box2d%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fphysics%2Fbox2d%2Fjoints%2FRevoluteJoint.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/27e43510824c027469be0b320ae84147cf609dfa/extensions%2Fgdx-box2d%2Fgdx-box2d%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fphysics%2Fbox2d%2Fjoints%2FRevoluteJoint.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/extensions%2Fgdx-box2d%2Fgdx-box2d%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fphysics%2Fbox2d%2Fjoints%2FRevoluteJoint.java?ref=27e43510824c027469be0b320ae84147cf609dfa",
      "patch": "@@ -182,9 +182,9 @@ public Vector2 getLocalAnchorA () {\n \t*/\n \t\n \tpublic Vector2 getLocalAnchorB () {\n-\t\tjniGetLocalAnchorA(addr, tmp);\n-\t\tlocalAnchorA.set(tmp[0], tmp[1]);\n-\t\treturn localAnchorA;\n+\t\tjniGetLocalAnchorB(addr, tmp);\n+\t\tlocalAnchorB.set(tmp[0], tmp[1]);\n+\t\treturn localAnchorB;\n \t}\n \n \tprivate native void jniGetLocalAnchorB (long addr, float[] anchor); /*",
      "parent_sha": "5a9a4c738fcda59ee06105ed478299bd7aa008f8"
    }
  },
  {
    "oid": "5685dff0d231161cd6c9d239d6fc4717e712fa9f",
    "message": "Fix setting size of flipped TextureRegion\n\nCloses #2498",
    "date": "2014-11-01T22:22:06Z",
    "url": "https://github.com/libgdx/libgdx/commit/5685dff0d231161cd6c9d239d6fc4717e712fa9f",
    "details": {
      "sha": "f56af99f3617c73abe4d6fcc22e4d2c76291a3b2",
      "filename": "gdx/src/com/badlogic/gdx/graphics/g2d/TextureRegion.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/libgdx/libgdx/blob/5685dff0d231161cd6c9d239d6fc4717e712fa9f/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2FTextureRegion.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/5685dff0d231161cd6c9d239d6fc4717e712fa9f/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2FTextureRegion.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2FTextureRegion.java?ref=5685dff0d231161cd6c9d239d6fc4717e712fa9f",
      "patch": "@@ -194,7 +194,11 @@ public int getRegionHeight () {\n \t}\r\n \r\n \tpublic void setRegionHeight (int height) {\r\n-\t\tsetV2(v + height / (float)texture.getHeight());\r\n+\t\tif (isFlipY()) {\r\n+\t\t\tsetV(v2 + height / (float)texture.getHeight());\t\t\t\r\n+\t\t} else {\r\n+\t\t\tsetV2(v + height / (float)texture.getHeight());\r\n+\t\t}\r\n \t}\r\n \r\n \tpublic void flip (boolean x, boolean y) {\r",
      "parent_sha": "8c30d66a20fa566a454233cc3c80033c69e11372"
    }
  },
  {
    "oid": "074737f1f0202ffe8e0184b3b10dd01561ac70d0",
    "message": "Javadoc",
    "date": "2014-03-22T10:19:47Z",
    "url": "https://github.com/libgdx/libgdx/commit/074737f1f0202ffe8e0184b3b10dd01561ac70d0",
    "details": {
      "sha": "3a479015402ac722482ce4f8c564a4b13c7c0a58",
      "filename": "gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/libgdx/libgdx/blob/074737f1f0202ffe8e0184b3b10dd01561ac70d0/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FScrollPane.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/074737f1f0202ffe8e0184b3b10dd01561ac70d0/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FScrollPane.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FScrollPane.java?ref=074737f1f0202ffe8e0184b3b10dd01561ac70d0",
      "patch": "@@ -941,16 +941,12 @@ public void setScrollbarsOnTop (boolean scrollbarsOnTop) {\n \t\tinvalidate();\r\n \t}\r\n \r\n-\t/** Check if ScrollPane is using computed knob sizes\r\n-\t * \r\n-\t * @return true if ScrollPane is using computed knob sizes, false if ScrollPane is using knob's physical dimensions */\r\n \tpublic boolean getVariableSizeKnobs () {\r\n \t\treturn variableSizeKnobs;\r\n \t}\r\n \r\n-\t/** When true, ScrollPane will use computed knob sizes, otherwise knob will be sized to it's physical dimensions\r\n-\t * \r\n-\t * @param variableSizeKnobs set to true if you want to use computed knob sizes */\r\n+\t/** If true, the scroll knobs are sized based on {@link #getMaxX()} or {@link #getMaxY()}. If false, the scroll knobs are sized\r\n+\t * based on {@link Drawable#getMinWidth()} or {@link Drawable#getMinHeight()}. Default is true. */\r\n \tpublic void setVariableSizeKnobs (boolean variableSizeKnobs) {\r\n \t\tthis.variableSizeKnobs = variableSizeKnobs;\r\n \t}\r",
      "parent_sha": "882cbfd58168f6cb14cff3b09db2d6c2725c0192"
    }
  },
  {
    "oid": "49b0d02e56937430c06034106799e25f8aa8cf22",
    "message": "Fix Issue 1288.",
    "date": "2013-02-27T13:02:01Z",
    "url": "https://github.com/libgdx/libgdx/commit/49b0d02e56937430c06034106799e25f8aa8cf22",
    "details": {
      "sha": "3bf3ba6cfcc1f688c595eee1b55fed163c0ec68c",
      "filename": "gdx/src/com/badlogic/gdx/maps/tiled/TmxMapLoader.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/libgdx/libgdx/blob/49b0d02e56937430c06034106799e25f8aa8cf22/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmaps%2Ftiled%2FTmxMapLoader.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/49b0d02e56937430c06034106799e25f8aa8cf22/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmaps%2Ftiled%2FTmxMapLoader.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmaps%2Ftiled%2FTmxMapLoader.java?ref=49b0d02e56937430c06034106799e25f8aa8cf22",
      "patch": "@@ -145,8 +145,8 @@ protected TiledMap loadTilemap(Element root, FileHandle tmxFile, ImageResolver i\n \t\t}\n \t\tmapProperties.put(\"width\", mapWidth);\n \t\tmapProperties.put(\"height\", mapHeight);\n-\t\tmapProperties.put(\"tilewidth\", mapWidth);\n-\t\tmapProperties.put(\"tileheight\", mapHeight);\n+\t\tmapProperties.put(\"tilewidth\", tileWidth);\n+\t\tmapProperties.put(\"tileheight\", tileHeight);\n \t\tif (mapBackgroundColor != null) {\n \t\t\tmapProperties.put(\"backgroundcolor\", mapBackgroundColor);\n \t\t}",
      "parent_sha": "b61538a41d7e33639c04d3a695595c51742ea33c"
    }
  },
  {
    "oid": "4719ef4cf3c719ac28b5166677c9f39b1d3db947",
    "message": "Cache next JointEdge before destroying the Joint\n\nFixes #3661",
    "date": "2015-12-23T15:23:46Z",
    "url": "https://github.com/libgdx/libgdx/commit/4719ef4cf3c719ac28b5166677c9f39b1d3db947",
    "details": {
      "sha": "7cbf05e317eb7c86929df722bf62e971dc0f4b38",
      "filename": "extensions/gdx-box2d/gdx-box2d-gwt/src/com/badlogic/gdx/physics/box2d/gwt/emu/com/badlogic/gdx/physics/box2d/World.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/libgdx/libgdx/blob/4719ef4cf3c719ac28b5166677c9f39b1d3db947/extensions%2Fgdx-box2d%2Fgdx-box2d-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fphysics%2Fbox2d%2Fgwt%2Femu%2Fcom%2Fbadlogic%2Fgdx%2Fphysics%2Fbox2d%2FWorld.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/4719ef4cf3c719ac28b5166677c9f39b1d3db947/extensions%2Fgdx-box2d%2Fgdx-box2d-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fphysics%2Fbox2d%2Fgwt%2Femu%2Fcom%2Fbadlogic%2Fgdx%2Fphysics%2Fbox2d%2FWorld.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/extensions%2Fgdx-box2d%2Fgdx-box2d-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fphysics%2Fbox2d%2Fgwt%2Femu%2Fcom%2Fbadlogic%2Fgdx%2Fphysics%2Fbox2d%2FWorld.java?ref=4719ef4cf3c719ac28b5166677c9f39b1d3db947",
      "patch": "@@ -153,9 +153,10 @@ public Body createBody (BodyDef def) {\n \tpublic void destroyBody (Body body) {\n \t\tJointEdge jointEdge = body.body.getJointList();\n \t\twhile (jointEdge != null) {\n+\t\t\tJointEdge next = jointEdge.next;\t\t\t\n \t\t\tworld.destroyJoint(jointEdge.joint);\n \t\t\tjoints.remove(jointEdge.joint);\n-\t\t\tjointEdge = jointEdge.next;\n+\t\t\tjointEdge = next;\n \t\t}\n \t\tworld.destroyBody(body.body);\n \t\tbodies.remove(body.body);",
      "parent_sha": "ab563c19457f8fe5f409c54ceb699cd993574c38"
    }
  },
  {
    "oid": "f0e67a1474fab9528737cc703fde6c35fdd5e288",
    "message": "Fix Issue 1561",
    "date": "2013-07-11T22:47:50Z",
    "url": "https://github.com/libgdx/libgdx/commit/f0e67a1474fab9528737cc703fde6c35fdd5e288",
    "details": {
      "sha": "2f53487fb15aafb84e59dccca62d7d158c1e673a",
      "filename": "gdx/src/com/badlogic/gdx/utils/Bits.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/libgdx/libgdx/blob/f0e67a1474fab9528737cc703fde6c35fdd5e288/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Futils%2FBits.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/f0e67a1474fab9528737cc703fde6c35fdd5e288/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Futils%2FBits.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Futils%2FBits.java?ref=f0e67a1474fab9528737cc703fde6c35fdd5e288",
      "patch": "@@ -39,7 +39,7 @@ public void flip(int index) {\n \t}\r\n \t\r\n \tprivate void checkCapacity(int len) {\r\n-\t\tif(len> bits.length) {\r\n+\t\tif(len>=bits.length) {\r\n \t\t\tlong[] newBits = new long[len+1];\r\n \t\t\tSystem.arraycopy(bits, 0, newBits, 0, bits.length);\r\n \t\t\tbits = newBits;\r",
      "parent_sha": "0cb1fa427da187297481bfc2fdc4ee59f7512494"
    }
  },
  {
    "oid": "180e84fe90712b1b4e1c6c121832683470b95d17",
    "message": "Fix documentation typo.",
    "date": "2016-02-27T02:15:59Z",
    "url": "https://github.com/libgdx/libgdx/commit/180e84fe90712b1b4e1c6c121832683470b95d17",
    "details": {
      "sha": "eee22372273ce056f7515d2a264be31a3372558d",
      "filename": "gdx/src/com/badlogic/gdx/graphics/Camera.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/libgdx/libgdx/blob/180e84fe90712b1b4e1c6c121832683470b95d17/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2FCamera.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/180e84fe90712b1b4e1c6c121832683470b95d17/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2FCamera.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2FCamera.java?ref=180e84fe90712b1b4e1c6c121832683470b95d17",
      "patch": "@@ -71,8 +71,8 @@ public abstract class Camera {\n \r\n \t/** Recalculates the direction of the camera to look at the point (x, y, z). This function assumes the up vector is normalized.\r\n \t * @param x the x-coordinate of the point to look at\r\n-\t * @param y the x-coordinate of the point to look at\r\n-\t * @param z the x-coordinate of the point to look at */\r\n+\t * @param y the y-coordinate of the point to look at\r\n+\t * @param z the z-coordinate of the point to look at */\r\n \tpublic void lookAt (float x, float y, float z) {\r\n \t\ttmpVec.set(x, y, z).sub(position).nor();\r\n \t\tif (!tmpVec.isZero()) {\r",
      "parent_sha": "7438e0aa0167f695b54e84c86eabe2f5aec69966"
    }
  },
  {
    "oid": "8f0455f7acffa591fcf1388cd21a72c6f268f947",
    "message": "[scene2d] Added down drawable for List.",
    "date": "2017-04-20T16:52:24Z",
    "url": "https://github.com/libgdx/libgdx/commit/8f0455f7acffa591fcf1388cd21a72c6f268f947",
    "details": {
      "sha": "b711e96076d9f32dc8a33f14e35613e913143596",
      "filename": "gdx/src/com/badlogic/gdx/scenes/scene2d/ui/List.java",
      "status": "modified",
      "additions": 34,
      "deletions": 21,
      "changes": 55,
      "blob_url": "https://github.com/libgdx/libgdx/blob/8f0455f7acffa591fcf1388cd21a72c6f268f947/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FList.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/8f0455f7acffa591fcf1388cd21a72c6f268f947/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FList.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FList.java?ref=8f0455f7acffa591fcf1388cd21a72c6f268f947",
      "patch": "@@ -22,6 +22,7 @@\n import com.badlogic.gdx.graphics.g2d.BitmapFont;\r\n import com.badlogic.gdx.graphics.g2d.GlyphLayout;\r\n import com.badlogic.gdx.math.Rectangle;\r\n+import com.badlogic.gdx.scenes.scene2d.Actor;\r\n import com.badlogic.gdx.scenes.scene2d.InputEvent;\r\n import com.badlogic.gdx.scenes.scene2d.InputListener;\r\n import com.badlogic.gdx.scenes.scene2d.utils.ArraySelection;\r\n@@ -43,13 +44,14 @@\n  * @author mzechner\r\n  * @author Nathan Sweet */\r\n public class List<T> extends Widget implements Cullable {\r\n-\tprivate ListStyle style;\r\n+\tListStyle style;\r\n \tfinal Array<T> items = new Array();\r\n \tfinal ArraySelection<T> selection = new ArraySelection(items);\r\n \tprivate Rectangle cullingArea;\r\n \tprivate float prefWidth, prefHeight;\r\n-\tprivate float itemHeight;\r\n+\tfloat itemHeight;\r\n \tprivate int alignment = Align.left;\r\n+\tint touchDown;\r\n \r\n \tpublic List (Skin skin) {\r\n \t\tthis(skin.get(ListStyle.class));\r\n@@ -77,26 +79,34 @@ public boolean keyDown (InputEvent event, int keycode) {\n \t\t\t}\r\n \r\n \t\t\tpublic boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {\r\n-\t\t\t\tif (pointer == 0 && button != 0) return false;\r\n+\t\t\t\tif (pointer != 0 || button != 0) return false;\r\n \t\t\t\tif (selection.isDisabled()) return false;\r\n \t\t\t\tif (selection.getMultiple()) getStage().setKeyboardFocus(List.this);\r\n-\t\t\t\tList.this.touchDown(y);\r\n+\t\t\t\tif (items.size == 0) return false;\r\n+\t\t\t\tfloat height = getHeight();\r\n+\t\t\t\tDrawable background = List.this.style.background;\r\n+\t\t\t\tif (background != null) {\r\n+\t\t\t\t\theight -= background.getTopHeight() + background.getBottomHeight();\r\n+\t\t\t\t\ty -= background.getBottomHeight();\r\n+\t\t\t\t}\r\n+\t\t\t\tint index = (int)((height - y) / itemHeight);\r\n+\t\t\t\tindex = Math.max(0, index);\r\n+\t\t\t\tindex = Math.min(items.size - 1, index);\r\n+\t\t\t\tselection.choose(items.get(index));\r\n+\t\t\t\ttouchDown = index;\r\n \t\t\t\treturn true;\r\n \t\t\t}\r\n-\t\t});\r\n-\t}\r\n \r\n-\tvoid touchDown (float y) {\r\n-\t\tif (items.size == 0) return;\r\n-\t\tfloat height = getHeight();\r\n-\t\tif (style.background != null) {\r\n-\t\t\theight -= style.background.getTopHeight() + style.background.getBottomHeight();\r\n-\t\t\ty -= style.background.getBottomHeight();\r\n-\t\t}\r\n-\t\tint index = (int)((height - y) / itemHeight);\r\n-\t\tindex = Math.max(0, index);\r\n-\t\tindex = Math.min(items.size - 1, index);\r\n-\t\tselection.choose(items.get(index));\r\n+\t\t\tpublic void touchUp (InputEvent event, float x, float y, int pointer, int button) {\r\n+\t\t\t\tif (pointer != 0 || button != 0) return;\r\n+\t\t\t\ttouchDown = -1;\r\n+\t\t\t}\r\n+\r\n+\t\t\tpublic void exit (InputEvent event, float x, float y, int pointer, Actor toActor) {\r\n+\t\t\t\tif (pointer != 0) return;\r\n+\t\t\t\ttouchDown = -1;\r\n+\t\t\t}\r\n+\t\t});\r\n \t}\r\n \r\n \tpublic void setStyle (ListStyle style) {\r\n@@ -112,8 +122,8 @@ public ListStyle getStyle () {\n \t}\r\n \r\n \tpublic void layout () {\r\n-\t\tfinal BitmapFont font = style.font;\r\n-\t\tfinal Drawable selectedDrawable = style.selection;\r\n+\t\tBitmapFont font = style.font;\r\n+\t\tDrawable selectedDrawable = style.selection;\r\n \r\n \t\titemHeight = font.getCapHeight() - font.getDescent() * 2;\r\n \t\titemHeight += selectedDrawable.getTopHeight() + selectedDrawable.getBottomHeight();\r\n@@ -169,7 +179,9 @@ public void draw (Batch batch, float parentAlpha) {\n \t\t\t\tT item = items.get(i);\r\n \t\t\t\tboolean selected = selection.contains(item);\r\n \t\t\t\tif (selected) {\r\n-\t\t\t\t\tselectedDrawable.draw(batch, x, y + itemY - itemHeight, width, itemHeight);\r\n+\t\t\t\t\tDrawable drawable = selectedDrawable;\r\n+\t\t\t\t\tif (touchDown == i && style.down != null) drawable = style.down;\r\n+\t\t\t\t\tdrawable.draw(batch, x, y + itemY - itemHeight, width, itemHeight);\r\n \t\t\t\t\tfont.setColor(fontColorSelected.r, fontColorSelected.g, fontColorSelected.b, fontColorSelected.a * parentAlpha);\r\n \t\t\t\t}\r\n \t\t\t\tdrawItem(batch, font, i, item, x + textOffsetX, y + itemY - textOffsetY, textWidth);\r\n@@ -301,7 +313,7 @@ static public class ListStyle {\n \t\tpublic Color fontColorUnselected = new Color(1, 1, 1, 1);\r\n \t\tpublic Drawable selection;\r\n \t\t/** Optional. */\r\n-\t\tpublic Drawable background;\r\n+\t\tpublic Drawable down, background;\r\n \r\n \t\tpublic ListStyle () {\r\n \t\t}\r\n@@ -318,6 +330,7 @@ public ListStyle (ListStyle style) {\n \t\t\tthis.fontColorSelected.set(style.fontColorSelected);\r\n \t\t\tthis.fontColorUnselected.set(style.fontColorUnselected);\r\n \t\t\tthis.selection = style.selection;\r\n+\t\t\tthis.down = style.down;\r\n \t\t}\r\n \t}\r\n }\r",
      "parent_sha": "cd6dda323b6a404ec3fe0a224e428c4d1aa4a320"
    }
  },
  {
    "oid": "4b6a36c15f0586a8aa71ff56029f967639f346aa",
    "message": "Fixed up dependency bank for next release",
    "date": "2017-03-05T10:33:52Z",
    "url": "https://github.com/libgdx/libgdx/commit/4b6a36c15f0586a8aa71ff56029f967639f346aa",
    "details": {
      "sha": "3c2915e6a0bfd6a8845766854db13f602b7e73fd",
      "filename": "extensions/gdx-setup/src/com/badlogic/gdx/setup/DependencyBank.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/libgdx/libgdx/blob/4b6a36c15f0586a8aa71ff56029f967639f346aa/extensions%2Fgdx-setup%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fsetup%2FDependencyBank.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/4b6a36c15f0586a8aa71ff56029f967639f346aa/extensions%2Fgdx-setup%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fsetup%2FDependencyBank.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/extensions%2Fgdx-setup%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fsetup%2FDependencyBank.java?ref=4b6a36c15f0586a8aa71ff56029f967639f346aa",
      "patch": "@@ -22,9 +22,9 @@\n public class DependencyBank {\n \n \t//Versions\n-\tstatic String libgdxVersion = \"1.9.5\";\n+\tstatic String libgdxVersion = \"1.9.6\";\n \t//Temporary snapshot version, we need a more dynamic solution for pointing to the latest nightly\n-\tstatic String libgdxNightlyVersion = \"1.9.6-SNAPSHOT\";\n+\tstatic String libgdxNightlyVersion = \"1.9.7-SNAPSHOT\";\n \tstatic String roboVMVersion = \"2.3.0\";\n \tstatic String moeVersion = \"1.3.0-beta-2\";\n \tstatic String buildToolsVersion = \"23.0.1\";",
      "parent_sha": "ea57da4b12b5174a1724d0e0aca636a9f5ec8607"
    }
  },
  {
    "oid": "18014308a038fb82bb1fa14e83d3f7777a42e197",
    "message": "Allow settings creation to be customized.\n\nBit of a mess going on here, but changing it is a lot of effort!",
    "date": "2019-02-11T10:51:51Z",
    "url": "https://github.com/libgdx/libgdx/commit/18014308a038fb82bb1fa14e83d3f7777a42e197",
    "details": {
      "sha": "6466b2046c3d63b843b3a84dc14591b9a005dbe4",
      "filename": "extensions/gdx-tools/src/com/badlogic/gdx/tools/texturepacker/TexturePackerFileProcessor.java",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/libgdx/libgdx/blob/18014308a038fb82bb1fa14e83d3f7777a42e197/extensions%2Fgdx-tools%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftools%2Ftexturepacker%2FTexturePackerFileProcessor.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/18014308a038fb82bb1fa14e83d3f7777a42e197/extensions%2Fgdx-tools%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftools%2Ftexturepacker%2FTexturePackerFileProcessor.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/extensions%2Fgdx-tools%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftools%2Ftexturepacker%2FTexturePackerFileProcessor.java?ref=18014308a038fb82bb1fa14e83d3f7777a42e197",
      "patch": "@@ -96,11 +96,11 @@ public int compare (File file1, File file2) {\n \t\t\t\tparent = parent.getParentFile();\n \t\t\t\tsettings = dirToSettings.get(parent);\n \t\t\t\tif (settings != null) {\n-\t\t\t\t\tsettings = new Settings(settings);\n+\t\t\t\t\tsettings = newSettings(settings);\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t}\n-\t\t\tif (settings == null) settings = new Settings(defaultSettings);\n+\t\t\tif (settings == null) settings = newSettings(defaultSettings);\n \t\t\t// Merge settings from current directory.\n \t\t\tmerge(settings, settingsFile);\n \t\t\tdirToSettings.put(settingsFile.getParentFile(), settings);\n@@ -137,7 +137,7 @@ protected void deleteOutput (File outputRoot) throws Exception {\n \t\tFile settingsFile = new File(root, \"pack.json\");\n \t\tSettings rootSettings = defaultSettings;\n \t\tif (settingsFile.exists()) {\n-\t\t\trootSettings = new Settings(rootSettings);\n+\t\t\trootSettings = newSettings(rootSettings);\n \t\t\tmerge(rootSettings, settingsFile);\n \t\t}\n \n@@ -288,6 +288,10 @@ protected TexturePacker newTexturePacker (File root, Settings settings) {\n \t\treturn packer;\n \t}\n \n+\tprotected Settings newSettings (Settings settings) {\n+\t\treturn new Settings(settings);\n+\t}\n+\n \tpublic ProgressListener getProgressListener () {\n \t\treturn progress;\n \t}",
      "parent_sha": "c1466dbe87f6cbe536b14a2b607dc2c611df4e66"
    }
  },
  {
    "oid": "940e46600ca7e920eb6822bc890dcd4f102222d7",
    "message": "[Changed] OBJLoader in extensions to create indices, so that submeshes may be used with the available Triangle Intersector methods in  the Math package.",
    "date": "2011-08-30T18:24:20Z",
    "url": "https://github.com/libgdx/libgdx/commit/940e46600ca7e920eb6822bc890dcd4f102222d7",
    "details": {
      "sha": "f68aa826a14ef1a1b3a64d567d9189264cabc97d",
      "filename": "extensions/model-loaders/model-loaders/src/com/badlogic/gdx/graphics/g3d/loaders/wavefront/ObjLoader.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/libgdx/libgdx/blob/940e46600ca7e920eb6822bc890dcd4f102222d7/extensions%2Fmodel-loaders%2Fmodel-loaders%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg3d%2Floaders%2Fwavefront%2FObjLoader.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/940e46600ca7e920eb6822bc890dcd4f102222d7/extensions%2Fmodel-loaders%2Fmodel-loaders%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg3d%2Floaders%2Fwavefront%2FObjLoader.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/extensions%2Fmodel-loaders%2Fmodel-loaders%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg3d%2Floaders%2Fwavefront%2FObjLoader.java?ref=940e46600ca7e920eb6822bc890dcd4f102222d7",
      "patch": "@@ -177,6 +177,12 @@ public StillModel loadObj (FileHandle file, boolean flipV) {\n \t\t\t\t\tfinalVerts[vi++] = uvs.get(uvIndex);\r\n \t\t\t\t}\r\n \t\t\t}\r\n+\t\t\t\r\n+\t\t\tint numIndices = numFaces * 3;\r\n+\t\t\tshort[] finalIndices = new short[numIndices];\r\n+\t\t\tfor (int i=0; i<numIndices; i++){\r\n+\t\t\t\tfinalIndices[i] = (short) i;\r\n+\t\t\t}\r\n \r\n \t\t\tfinal Mesh mesh;\r\n \r\n@@ -185,8 +191,9 @@ public StillModel loadObj (FileHandle file, boolean flipV) {\n \t\t\tif (hasNorms) attributes.add(new VertexAttribute(Usage.Normal, 3, ShaderProgram.NORMAL_ATTRIBUTE));\r\n \t\t\tif (hasUVs) attributes.add(new VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORD_ATTRIBUTE + \"0\"));\r\n \r\n-\t\t\tmesh = new Mesh(true, numFaces * 3, 0, attributes.toArray(new VertexAttribute[attributes.size()]));\r\n+\t\t\tmesh = new Mesh(true, numFaces * 3, numIndices, attributes.toArray(new VertexAttribute[attributes.size()]));\r\n \t\t\tmesh.setVertices(finalVerts);\r\n+\t\t\tmesh.setIndices(finalIndices);\r\n \r\n \t\t\tStillSubMesh subMesh = new StillSubMesh(group.name, mesh, GL10.GL_TRIANGLES);\r\n \t\t\tsubMesh.material = new Material(\"default\");\r",
      "parent_sha": "bb452e3f906f19fc887101579fbe09f4085c2702"
    }
  },
  {
    "oid": "f33c328bb379e33fcff53dae33e0f199eecf009a",
    "message": "Fix limit function in Vector3",
    "date": "2015-02-06T18:47:04Z",
    "url": "https://github.com/libgdx/libgdx/commit/f33c328bb379e33fcff53dae33e0f199eecf009a",
    "details": {
      "sha": "02c33fdac7194a3bb9c094bf2633adb075ff1f79",
      "filename": "gdx/src/com/badlogic/gdx/math/Vector3.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/libgdx/libgdx/blob/f33c328bb379e33fcff53dae33e0f199eecf009a/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2FVector3.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/f33c328bb379e33fcff53dae33e0f199eecf009a/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2FVector3.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2FVector3.java?ref=f33c328bb379e33fcff53dae33e0f199eecf009a",
      "patch": "@@ -569,7 +569,11 @@ public String toString () {\n \r\n \t@Override\r\n \tpublic Vector3 limit (float limit) {\r\n-\t\treturn limit2(limit * limit);\r\n+\t\tfloat len2 = len2();\r\n+\t\tif (len2 > limit * limit) {\r\n+\t\t\tscl(limit / (float) Math.sqrt(len2));\r\n+\t\t}\r\n+\t\treturn this;\r\n \t}\r\n \r\n \t@Override\r",
      "parent_sha": "ea925ed538d42549bbb8952547970473857c4604"
    }
  },
  {
    "oid": "cba43a6f4e878ab313a4f08c7c7f4770ae75df4e",
    "message": "[fixed] nate's pot hack :D",
    "date": "2011-12-04T01:06:48Z",
    "url": "https://github.com/libgdx/libgdx/commit/cba43a6f4e878ab313a4f08c7c7f4770ae75df4e",
    "details": {
      "sha": "03e123918fdf5718b201b4741ed3ae6e44da2447",
      "filename": "gdx/src/com/badlogic/gdx/graphics/glutils/FileTextureData.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/libgdx/libgdx/blob/cba43a6f4e878ab313a4f08c7c7f4770ae75df4e/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fglutils%2FFileTextureData.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/cba43a6f4e878ab313a4f08c7c7f4770ae75df4e/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fglutils%2FFileTextureData.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fglutils%2FFileTextureData.java?ref=cba43a6f4e878ab313a4f08c7c7f4770ae75df4e",
      "patch": "@@ -42,9 +42,9 @@ public FileTextureData (FileHandle file, Pixmap preloadedPixmap, Format format,\n \t\tthis.format = format;\r\n \t\tthis.useMipMaps = useMipMaps;\r\n \t\tif (pixmap != null) {\r\n-\t\t\tpixmap = ensurePot(pixmap);\r\n \t\t\twidth = pixmap.getWidth();\r\n \t\t\theight = pixmap.getHeight();\r\n+\t\t\tpixmap = ensurePot(pixmap);\r\n \t\t\tif (format == null) this.format = pixmap.getFormat();\r\n \t\t}\r\n \t}\r\n@@ -59,9 +59,10 @@ public void prepare () {\n \t\tif (isPrepared) throw new GdxRuntimeException(\"Already prepared\");\r\n \t\tif (pixmap == null) {\r\n \t\t\tif(file.extension().equals(\"cim\")) pixmap = PixmapIO.read(file);\r\n-\t\t\telse pixmap = ensurePot(new Pixmap(file));\r\n+\t\t\telse pixmap = new Pixmap(file);\r\n \t\t\twidth = pixmap.getWidth();\r\n \t\t\theight = pixmap.getHeight();\r\n+\t\t\tpixmap = ensurePot(pixmap);\r\n \t\t\tif (format == null) format = pixmap.getFormat();\r\n \t\t}\r\n \t\tisPrepared = true;\r",
      "parent_sha": "3863d2a3caa6f93116caba439256d86b77974dc9"
    }
  },
  {
    "oid": "e3f3ae5f48a12ad28a8506302f1a440ed4e2fb17",
    "message": "[fixed] issue 676, incorrect allocation of byte buffer in ETC1Data.",
    "date": "2012-01-25T14:28:25Z",
    "url": "https://github.com/libgdx/libgdx/commit/e3f3ae5f48a12ad28a8506302f1a440ed4e2fb17",
    "details": {
      "sha": "bcf85e16dccf367e195ec2665228d549fab92075",
      "filename": "gdx/src/com/badlogic/gdx/graphics/glutils/ETC1.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/libgdx/libgdx/blob/e3f3ae5f48a12ad28a8506302f1a440ed4e2fb17/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fglutils%2FETC1.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/e3f3ae5f48a12ad28a8506302f1a440ed4e2fb17/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fglutils%2FETC1.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fglutils%2FETC1.java?ref=e3f3ae5f48a12ad28a8506302f1a440ed4e2fb17",
      "patch": "@@ -62,7 +62,7 @@ public ETC1Data (FileHandle pkmFile) {\n \t\t\ttry {\r\n \t\t\t\tin = new DataInputStream(new BufferedInputStream(new GZIPInputStream(pkmFile.read())));\r\n \t\t\t\tint fileSize = in.readInt();\r\n-\t\t\t\tcompressedData = BufferUtils.newByteBuffer(fileSize);\r\n+\t\t\t\tcompressedData = BufferUtils.newUnsafeByteBuffer(fileSize);\r\n \t\t\t\tint readBytes = 0;\r\n \t\t\t\twhile ((readBytes = in.read(buffer)) != -1) {\r\n \t\t\t\t\tcompressedData.put(buffer, 0, readBytes);\r",
      "parent_sha": "61e0a8eba9e3d94ca2edc35796e8da663883bb58"
    }
  },
  {
    "oid": "84f45578e8d0cd3fcebf30a3716b316ec147d63a",
    "message": "Fixed setPosition with alignment.\n\ncloses #2366",
    "date": "2014-09-22T17:50:51Z",
    "url": "https://github.com/libgdx/libgdx/commit/84f45578e8d0cd3fcebf30a3716b316ec147d63a",
    "details": {
      "sha": "f03d4c3b1991fe54a7989e0c0c7e0d8ebb2efd05",
      "filename": "gdx/src/com/badlogic/gdx/scenes/scene2d/Actor.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/libgdx/libgdx/blob/84f45578e8d0cd3fcebf30a3716b316ec147d63a/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2FActor.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/84f45578e8d0cd3fcebf30a3716b316ec147d63a/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2FActor.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2FActor.java?ref=84f45578e8d0cd3fcebf30a3716b316ec147d63a",
      "patch": "@@ -417,14 +417,14 @@ public void setPosition (float x, float y) {\n \t/** Sets the position using the specified {@link Align alignment}. Note this may set the position to non-integer coordinates. */\r\n \tpublic void setPosition (float x, float y, int align) {\r\n \t\tif ((align & right) != 0)\r\n-\t\t\tx += width;\r\n+\t\t\tx -= width;\r\n \t\telse if ((align & left) == 0) //\r\n-\t\t\tx += width / 2;\r\n+\t\t\tx -= width / 2;\r\n \r\n \t\tif ((align & top) != 0)\r\n-\t\t\ty += height;\r\n+\t\t\ty -= height;\r\n \t\telse if ((align & bottom) == 0) //\r\n-\t\t\ty += height / 2;\r\n+\t\t\ty -= height / 2;\r\n \r\n \t\tif (this.x != x || this.y != y) {\r\n \t\t\tthis.x = x;\r",
      "parent_sha": "ff7b713f3735ffac9135c6898d9707aa2892d432"
    }
  },
  {
    "oid": "ae4c19caefb4974e6e892ba2c0ab4afd702012f1",
    "message": "Moving scrolling attributes to GLFWScrollCallback",
    "date": "2018-11-20T20:46:18Z",
    "url": "https://github.com/libgdx/libgdx/commit/ae4c19caefb4974e6e892ba2c0ab4afd702012f1",
    "details": {
      "sha": "fbbf4990641c18bf7e8de201e48496009f032378",
      "filename": "backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3Input.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/libgdx/libgdx/blob/ae4c19caefb4974e6e892ba2c0ab4afd702012f1/backends%2Fgdx-backend-lwjgl3%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Flwjgl3%2FLwjgl3Input.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/ae4c19caefb4974e6e892ba2c0ab4afd702012f1/backends%2Fgdx-backend-lwjgl3%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Flwjgl3%2FLwjgl3Input.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backend-lwjgl3%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Flwjgl3%2FLwjgl3Input.java?ref=ae4c19caefb4974e6e892ba2c0ab4afd702012f1",
      "patch": "@@ -43,8 +43,6 @@ public class Lwjgl3Input implements Input, Disposable {\n \tprivate boolean keyJustPressed;\n \tprivate boolean[] justPressedKeys = new boolean[256];\n \tprivate char lastCharacter;\n-\tprivate float scrollYRemainder;\n-\tprivate long lastScrollEventTime;\n \t\t\n \tprivate GLFWKeyCallback keyCallback = new GLFWKeyCallback() {\t\t\n \t\t@Override\n@@ -88,7 +86,9 @@ public void invoke(long window, int codepoint) {\n \t};\n \t\n \tprivate GLFWScrollCallback scrollCallback = new GLFWScrollCallback() {\n-\t\tlong pauseTime = 250000000L; //250ms\n+\t\tprivate long pauseTime = 250000000L; //250ms\n+\t\tprivate float scrollYRemainder;\n+\t\tprivate long lastScrollEventTime;\n \t\t@Override\n \t\tpublic void invoke(long window, double scrollX, double scrollY) {\n \t\t\tLwjgl3Input.this.window.getGraphics().requestRendering();",
      "parent_sha": "da68b8c5fa0722b82878151c204316a813d49a75"
    }
  },
  {
    "oid": "ee66b9a004495e093e4bb49761cb6ad8067ccb4a",
    "message": "Fix key repeats when non-continuous rendering\n\nCloses #2085",
    "date": "2014-08-02T21:19:37Z",
    "url": "https://github.com/libgdx/libgdx/commit/ee66b9a004495e093e4bb49761cb6ad8067ccb4a",
    "details": {
      "sha": "0b9cd7f3ed11dab9423255d9f600ef097305091e",
      "filename": "backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglInput.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/libgdx/libgdx/blob/ee66b9a004495e093e4bb49761cb6ad8067ccb4a/backends%2Fgdx-backend-lwjgl%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Flwjgl%2FLwjglInput.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/ee66b9a004495e093e4bb49761cb6ad8067ccb4a/backends%2Fgdx-backend-lwjgl%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Flwjgl%2FLwjglInput.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backend-lwjgl%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Flwjgl%2FLwjglInput.java?ref=ee66b9a004495e093e4bb49761cb6ad8067ccb4a",
      "patch": "@@ -70,6 +70,8 @@ final public class LwjglInput implements Input {\n \tchar lastKeyCharPressed;\r\n \tfloat keyRepeatTimer;\r\n \tlong currentEventTimeStamp;\r\n+\tfloat deltaTime;\r\n+\tlong lastTime;\r\n \r\n \tPool<KeyEvent> usedKeyEvents = new Pool<KeyEvent>(16, 1000) {\r\n \t\tprotected KeyEvent newObject () {\r\n@@ -745,6 +747,7 @@ public static int getLwjglKeyCode (int gdxKeyCode) {\n \t}\r\n \r\n \tpublic void update () {\r\n+\t\tupdateTime();\r\n \t\tupdateMouse();\r\n \t\tupdateKeyboard();\r\n \t}\r\n@@ -757,6 +760,12 @@ private int toGdxButton (int button) {\n \r\n \t}\r\n \r\n+\tvoid updateTime () {\r\n+\t\tlong thisTime = System.nanoTime();\r\n+\t\tdeltaTime = (thisTime - lastTime) / 1000000000.0f;\r\n+\t\tlastTime = thisTime;\r\n+\t}\r\n+\r\n \tvoid updateMouse () {\r\n \t\tjustTouched = false;\r\n \t\tif (Mouse.isCreated()) {\r\n@@ -814,7 +823,7 @@ void updateMouse () {\n \r\n \tvoid updateKeyboard () {\r\n \t\tif (lastKeyCharPressed != 0) {\r\n-\t\t\tkeyRepeatTimer -= Gdx.graphics.getDeltaTime();\r\n+\t\t\tkeyRepeatTimer -= deltaTime;\r\n \t\t\tif (keyRepeatTimer < 0) {\r\n \t\t\t\tkeyRepeatTimer = keyRepeatTime;\r\n \r",
      "parent_sha": "9228a1477e07b5b18a36fcaad6ab88d6211c4ff7"
    }
  },
  {
    "oid": "8b0c55dc4cbefe945b286ff153f6085d5089e298",
    "message": "Asset loading now ignores .svn folders.",
    "date": "2011-08-28T22:40:32Z",
    "url": "https://github.com/libgdx/libgdx/commit/8b0c55dc4cbefe945b286ff153f6085d5089e298",
    "details": {
      "sha": "5f0694d9aa2b8d3859ce4eed6c4a0290e62871bb",
      "filename": "demos/very-angry-robots/very-angry-robots/src/com/badlydrawngames/veryangryrobots/Assets.java",
      "status": "modified",
      "additions": 20,
      "deletions": 7,
      "changes": 27,
      "blob_url": "https://github.com/libgdx/libgdx/blob/8b0c55dc4cbefe945b286ff153f6085d5089e298/demos%2Fvery-angry-robots%2Fvery-angry-robots%2Fsrc%2Fcom%2Fbadlydrawngames%2Fveryangryrobots%2FAssets.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/8b0c55dc4cbefe945b286ff153f6085d5089e298/demos%2Fvery-angry-robots%2Fvery-angry-robots%2Fsrc%2Fcom%2Fbadlydrawngames%2Fveryangryrobots%2FAssets.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/demos%2Fvery-angry-robots%2Fvery-angry-robots%2Fsrc%2Fcom%2Fbadlydrawngames%2Fveryangryrobots%2FAssets.java?ref=8b0c55dc4cbefe945b286ff153f6085d5089e298",
      "patch": "@@ -13,6 +13,9 @@\n \r\n package com.badlydrawngames.veryangryrobots;\r\n \r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n import com.badlogic.gdx.Gdx;\r\n import com.badlogic.gdx.audio.Sound;\r\n import com.badlogic.gdx.files.FileHandle;\r\n@@ -163,12 +166,18 @@ private static void loadTextures () {\n \tprivate static float calculatePixelDensity () {\r\n \t\tFileHandle textureDir = Gdx.files.internal(\"data/textures\");\r\n \t\tFileHandle[] availableDensities = textureDir.list();\r\n-\t\tFloatArray densities = new FloatArray(availableDensities.length);\r\n+\t\tFloatArray densities = new FloatArray();\r\n \t\tfor (int i = 0; i < availableDensities.length; i++) {\r\n-\t\t\tfloat density = Float.parseFloat(availableDensities[i].name());\r\n-\t\t\tdensities.add(density);\r\n+\t\t\ttry {\r\n+\t\t\t\tfloat density = Float.parseFloat(availableDensities[i].name());\r\n+\t\t\t\tdensities.add(density);\r\n+\t\t\t}\r\n+\t\t\tcatch (NumberFormatException ex) {\r\n+\t\t\t\t// Ignore anything non-numeric, such as \".svn\" folders.\r\n+\t\t\t}\r\n \t\t}\r\n-\t\tdensities.sort();\r\n+\t\tdensities.shrink();\t// Remove empty slots to get rid of zeroes.\r\n+\t\tdensities.sort();\t// Now the lowest density comes first.\r\n \t\treturn CameraHelper.bestDensity(VIRTUAL_WIDTH, VIRTUAL_HEIGHT, densities.items);\r\n \t}\r\n \r\n@@ -219,11 +228,15 @@ private static void loadSounds () {\n \tprivate static Sound[] loadSounds (String dir) {\r\n \t\tFileHandle dh = Gdx.files.internal(\"data/sounds/\" + dir);\r\n \t\tFileHandle[] fhs = dh.list();\r\n-\t\tSound[] sounds = new Sound[fhs.length];\r\n+\t\tList<Sound> sounds = new ArrayList<Sound>();\r\n \t\tfor (int i = 0; i < fhs.length; i++) {\r\n-\t\t\tsounds[i] = loadSound(dir + \"/\" + fhs[i].name());\r\n+\t\t\tString name = fhs[i].name();\r\n+\t\t\tif (name.endsWith(\".ogg\")) {\r\n+\t\t\t\tsounds.add(loadSound(dir + \"/\" + name));\r\n+\t\t\t}\r\n \t\t}\r\n-\t\treturn sounds;\r\n+\t\tSound[] result = new Sound[0];\r\n+\t\treturn sounds.toArray(result);\r\n \t}\r\n \r\n \tprivate static Sound loadSound (String filename) {\r",
      "parent_sha": "adf5675e70539120b9388bb351d45e5310238f34"
    }
  },
  {
    "oid": "86ada67f544cf1d39a7ccf5c706d263697ae63ff",
    "message": "Sync GWT backend with changes to core.",
    "date": "2013-03-11T14:11:17Z",
    "url": "https://github.com/libgdx/libgdx/commit/86ada67f544cf1d39a7ccf5c706d263697ae63ff",
    "details": {
      "sha": "4075dd5cf4722da69ff26e67fa1c280dc930dcb6",
      "filename": "backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/maps/tiled/TmxMapLoader.java",
      "status": "modified",
      "additions": 120,
      "deletions": 52,
      "changes": 172,
      "blob_url": "https://github.com/libgdx/libgdx/blob/86ada67f544cf1d39a7ccf5c706d263697ae63ff/backends%2Fgdx-backends-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fgwt%2Femu%2Fcom%2Fbadlogic%2Fgdx%2Fmaps%2Ftiled%2FTmxMapLoader.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/86ada67f544cf1d39a7ccf5c706d263697ae63ff/backends%2Fgdx-backends-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fgwt%2Femu%2Fcom%2Fbadlogic%2Fgdx%2Fmaps%2Ftiled%2FTmxMapLoader.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backends-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fgwt%2Femu%2Fcom%2Fbadlogic%2Fgdx%2Fmaps%2Ftiled%2FTmxMapLoader.java?ref=86ada67f544cf1d39a7ccf5c706d263697ae63ff",
      "patch": "@@ -17,16 +17,19 @@\n import com.badlogic.gdx.graphics.Texture;\n import com.badlogic.gdx.graphics.g2d.TextureRegion;\n import com.badlogic.gdx.maps.ImageResolver;\n+import com.badlogic.gdx.maps.ImageResolver.AssetManagerImageResolver;\n+import com.badlogic.gdx.maps.ImageResolver.DirectImageResolver;\n import com.badlogic.gdx.maps.MapLayer;\n import com.badlogic.gdx.maps.MapObject;\n import com.badlogic.gdx.maps.MapProperties;\n-import com.badlogic.gdx.maps.ImageResolver.AssetManagerImageResolver;\n-import com.badlogic.gdx.maps.ImageResolver.DirectImageResolver;\n+import com.badlogic.gdx.maps.objects.EllipseMapObject;\n import com.badlogic.gdx.maps.objects.PolygonMapObject;\n import com.badlogic.gdx.maps.objects.PolylineMapObject;\n import com.badlogic.gdx.maps.objects.RectangleMapObject;\n import com.badlogic.gdx.maps.tiled.TiledMapTileLayer.Cell;\n import com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile;\n+import com.badlogic.gdx.math.Polygon;\n+import com.badlogic.gdx.math.Polyline;\n import com.badlogic.gdx.utils.Array;\n import com.badlogic.gdx.utils.Base64Coder;\n import com.badlogic.gdx.utils.GdxRuntimeException;\n@@ -40,16 +43,21 @@\n public class TmxMapLoader extends SynchronousAssetLoader<TiledMap, TmxMapLoader.Parameters> {\n \n \tpublic static class Parameters extends AssetLoaderParameters<TiledMap> {\n-\t\t\n+\t\t/** Whether to load the map for a y-up coordinate system */\n+\t\tboolean yUp = true;\n \t}\n \t\n-\tprivate static final int FLAG_FLIP_HORIZONTALLY = 0x80000000;\n-\tprivate static final int FLAG_FLIP_VERTICALLY = 0x40000000;\n-\tprivate static final int FLAG_FLIP_DIAGONALLY = 0x20000000;\t\t\n-\tprivate static final int MASK_CLEAR  = 0xE0000000;\n+\tprotected static final int FLAG_FLIP_HORIZONTALLY = 0x80000000;\n+\tprotected static final int FLAG_FLIP_VERTICALLY = 0x40000000;\n+\tprotected static final int FLAG_FLIP_DIAGONALLY = 0x20000000;\n+\tprotected static final int MASK_CLEAR  = 0xE0000000;\n \t\n-\tprivate XmlReader xml = new XmlReader();\n-\tprivate Element root;\n+\tprotected XmlReader xml = new XmlReader();\n+\tprotected Element root;\n+\tprotected boolean yUp;\n+\n+\tprotected int mapWidthInPixels;\n+\tprotected int mapHeightInPixels;\n \t\n \tpublic TmxMapLoader() {\n \t\tsuper(new InternalFileHandleResolver());\n@@ -67,12 +75,26 @@ public TmxMapLoader(FileHandleResolver resolver) {\n \t/**\n \t * Loads the {@link TiledMap} from the given file. The file is\n \t * resolved via the {@link FileHandleResolver} set in the constructor\n-\t * of this class. By default it will resolve to an internal file.\n+\t * of this class. By default it will resolve to an internal file. The\n+\t * map will be loaded for a y-up coordinate system.\n \t * @param fileName the filename\n \t * @return the TiledMap\n \t */\n \tpublic TiledMap load(String fileName) {\n+\t\treturn load(fileName, true);\n+\t}\n+\n+\t/**\n+\t * Loads the {@link TiledMap} from the given file. The file is\n+\t * resolved via the {@link FileHandleResolver} set in the constructor\n+\t * of this class. By default it will resolve to an internal file.\n+\t * @param fileName the filename\n+\t * @param yUp whether to load the map for a y-up coordinate system\n+\t * @return the TiledMap\n+\t */\n+\tpublic TiledMap load(String fileName, boolean yUp) {\n \t\ttry {\n+\t\t\tthis.yUp = yUp;\n \t\t\tFileHandle tmxFile = resolve(fileName);\n \t\t\troot = xml.parse(tmxFile);\n \t\t\tObjectMap<String, Texture> textures = new ObjectMap<String, Texture>();\n@@ -91,6 +113,11 @@ public TiledMap load(String fileName) {\n \t@Override\n \tpublic TiledMap load(AssetManager assetManager, String fileName, Parameters parameter) {\n \t\tFileHandle tmxFile = resolve(fileName);\n+\t\tif (parameter != null) {\n+\t\t\tyUp = parameter.yUp;\n+\t\t} else {\n+\t\t\tyUp = true;\n+\t\t}\n \t\ttry {\n \t\t\treturn loadTilemap(root, tmxFile, new AssetManagerImageResolver(assetManager));\n \t\t} catch (Exception e) {\n@@ -128,8 +155,30 @@ public Array<AssetDescriptor> getDependencies(String fileName, Parameters parame\n \t * @param imageResolver the {@link ImageResolver}\n \t * @return the {@link TiledMap}\n \t */\n-\tprivate TiledMap loadTilemap(Element root, FileHandle tmxFile, ImageResolver imageResolver) {\n+\tprotected TiledMap loadTilemap(Element root, FileHandle tmxFile, ImageResolver imageResolver) {\n \t\tTiledMap map = new TiledMap();\n+\t\t\n+\t\tString mapOrientation = root.getAttribute(\"orientation\", null);\n+\t\tint mapWidth = root.getIntAttribute(\"width\", 0);\n+\t\tint mapHeight = root.getIntAttribute(\"height\", 0);\n+\t\tint tileWidth = root.getIntAttribute(\"tilewidth\", 0);\n+\t\tint tileHeight = root.getIntAttribute(\"tileheight\", 0);\n+\t\tString mapBackgroundColor = root.getAttribute(\"backgroundcolor\", null);\n+\t\t\n+\t\tMapProperties mapProperties = map.getProperties();\n+\t\tif (mapOrientation != null) {\n+\t\t\tmapProperties.put(\"orientation\", mapBackgroundColor);\n+\t\t}\n+\t\tmapProperties.put(\"width\", mapWidth);\n+\t\tmapProperties.put(\"height\", mapHeight);\n+\t\tmapProperties.put(\"tilewidth\", tileWidth);\n+\t\tmapProperties.put(\"tileheight\", tileHeight);\n+\t\tif (mapBackgroundColor != null) {\n+\t\t\tmapProperties.put(\"backgroundcolor\", mapBackgroundColor);\n+\t\t}\n+\t\tmapWidthInPixels = mapWidth * tileWidth;\n+\t\tmapHeightInPixels = mapHeight * tileHeight;\n+\t\t\n \t\tElement properties = root.getChildByName(\"properties\");\n \t\tif (properties != null) {\n \t\t\tloadProperties(map.getProperties(), properties);\n@@ -157,7 +206,7 @@ private TiledMap loadTilemap(Element root, FileHandle tmxFile, ImageResolver ima\n \t * @return a list of filenames for images containing tiles\n \t * @throws IOException \n \t */\n-\tprivate Array<FileHandle> loadTilesets(Element root, FileHandle tmxFile) throws IOException {\n+\tprotected Array<FileHandle> loadTilesets(Element root, FileHandle tmxFile) throws IOException {\n \t\tArray<FileHandle> images = new Array<FileHandle>();\n \t\tfor (Element tileset : root.getChildrenByName(\"tileset\")) {\n \t\t\tString source = tileset.getAttribute(\"source\", null);\n@@ -176,7 +225,7 @@ private Array<FileHandle> loadTilesets(Element root, FileHandle tmxFile) throws\n \t\treturn images;\n \t}\n \n-\tprivate void loadTileSet(TiledMap map, Element element, FileHandle tmxFile, ImageResolver imageResolver) {\n+\tprotected void loadTileSet(TiledMap map, Element element, FileHandle tmxFile, ImageResolver imageResolver) {\n \t\tif (element.getName().equals(\"tileset\")) {\n \t\t\tString name = element.get(\"name\", null);\n \t\t\tint firstgid = element.getIntAttribute(\"firstgid\", 1);\n@@ -217,7 +266,12 @@ private void loadTileSet(TiledMap map, Element element, FileHandle tmxFile, Imag\n \t\t\t\n \t\t\tfor (int y = margin; y <= stopHeight; y += tileheight + spacing) {\n \t\t\t\tfor (int x = margin; x <= stopWidth; x += tilewidth + spacing) {\n-\t\t\t\t\tTiledMapTile tile = new StaticTiledMapTile(new TextureRegion(texture, x, y, tilewidth, tileheight));\n+\t\t\t\t\tTextureRegion tileRegion = new TextureRegion(texture, x, y, tilewidth, tileheight);\n+\t\t\t\t\tif (!yUp) {\n+\t\t\t\t\t\ttileRegion.flip(false, true);\n+\t\t\t\t\t}\n+\t\t\t\t\tTiledMapTile tile = new StaticTiledMapTile(tileRegion);\n+\t\t\t\t\ttile.setId(id);\n \t\t\t\t\ttileset.putTile(id++, tile);\n \t\t\t\t}\n \t\t\t}\n@@ -228,7 +282,7 @@ private void loadTileSet(TiledMap map, Element element, FileHandle tmxFile, Imag\n \t\t\t\tint localtid = tileElement.getIntAttribute(\"id\", 0);\n \t\t\t\tTiledMapTile tile = tileset.getTile(firstgid + localtid);\n \t\t\t\tif (tile!= null) {\n-\t\t\t\t\tElement properties = element.getChildByName(\"properties\");\n+\t\t\t\t\tElement properties = tileElement.getChildByName(\"properties\");\n \t\t\t\t\tif (properties != null) {\n \t\t\t\t\t\tloadProperties(tile.getProperties(), properties);\n \t\t\t\t\t}\n@@ -243,14 +297,18 @@ private void loadTileSet(TiledMap map, Element element, FileHandle tmxFile, Imag\n \t\t}\t\t\n \t}\n \t\n-\tprivate void loadTileLayer(TiledMap map, Element element) {\n+\tprotected void loadTileLayer(TiledMap map, Element element) {\n \t\tif (element.getName().equals(\"layer\")) {\n \t\t\tString name = element.getAttribute(\"name\", null);\n \t\t\tint width = element.getIntAttribute(\"width\", 0);\n \t\t\tint height = element.getIntAttribute(\"height\", 0);\n \t\t\tint tileWidth = element.getParent().getIntAttribute(\"tilewidth\", 0);\n \t\t\tint tileHeight = element.getParent().getIntAttribute(\"tileheight\", 0);\n+\t\t\tboolean visible = element.getIntAttribute(\"visible\", 1) == 1;\n+\t\t\tfloat opacity = element.getFloatAttribute(\"opacity\", 1.0f);\n \t\t\tTiledMapTileLayer layer = new TiledMapTileLayer(width, height, tileWidth, tileHeight);\n+\t\t\tlayer.setVisible(visible);\n+\t\t\tlayer.setOpacity(opacity);\n \t\t\tlayer.setName(name);\n \t\t\t\n \t\t\tTiledMapTileSets tilesets = map.getTileSets();\n@@ -277,21 +335,21 @@ private void loadTileLayer(TiledMap map, Element element) {\n \t\t\t\t\t\t\tif (flipDiagonally) {\n \t\t\t\t\t\t\t\tif (flipHorizontally && flipVertically) {\n \t\t\t\t\t\t\t\t\tcell.setFlipHorizontally(true);\n-\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n+\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_270);\n \t\t\t\t\t\t\t\t} else if (flipHorizontally) {\n-\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n-\t\t\t\t\t\t\t\t} else if (flipVertically) {\n \t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_270);\n+\t\t\t\t\t\t\t\t} else if (flipVertically) {\n+\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n \t\t\t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t\t\tcell.setFlipVertically(true);\n-\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n+\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_270);\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t\tcell.setFlipHorizontally(flipHorizontally);\n \t\t\t\t\t\t\t\tcell.setFlipVertically(flipVertically);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\tcell.setTile(tile);\n-\t\t\t\t\t\t\tlayer.setCell(x, height - 1 - y, cell);\n+\t\t\t\t\t\t\tlayer.setCell(x, yUp ? height - 1 - y : y, cell);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n@@ -322,28 +380,28 @@ private void loadTileLayer(TiledMap map, Element element) {\n \t\t\t\t\t\t\t\t\tif (flipDiagonally) {\n \t\t\t\t\t\t\t\t\t\tif (flipHorizontally && flipVertically) {\n \t\t\t\t\t\t\t\t\t\t\tcell.setFlipHorizontally(true);\n-\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n+\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_270);\n \t\t\t\t\t\t\t\t\t\t} else if (flipHorizontally) {\n-\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n-\t\t\t\t\t\t\t\t\t\t} else if (flipVertically) {\n \t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_270);\n+\t\t\t\t\t\t\t\t\t\t} else if (flipVertically) {\n+\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n \t\t\t\t\t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t\t\t\t\tcell.setFlipVertically(true);\n-\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_90);\n+\t\t\t\t\t\t\t\t\t\t\tcell.setRotation(Cell.ROTATE_270);\n \t\t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t\t\t\tcell.setFlipHorizontally(flipHorizontally);\n \t\t\t\t\t\t\t\t\t\tcell.setFlipVertically(flipVertically);\n \t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t\tcell.setTile(tile);\n-\t\t\t\t\t\t\t\t\tlayer.setCell(x, height - 1 - y, cell);\n+\t\t\t\t\t\t\t\t\tlayer.setCell(x, yUp ? height - 1 - y : y, cell);\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t} else if (compression.equals(\"gzip\")) {\n-\t\t\t\t\t\tthrow new GdxRuntimeException(\"Not supported in GWT backend\");\n+\t\t\t\t\t\tthrow new GdxRuntimeException(\"GZIP compression not supported in GWT backend\");\n \t\t\t\t\t} else if (compression.equals(\"zlib\")) {\n-\t\t\t\t\t\tthrow new GdxRuntimeException(\"Not supported in GWT backend\");\n+\t\t\t\t\t\tthrow new GdxRuntimeException(\"ZLIB compression not supported in GWT backend\");\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n@@ -355,7 +413,7 @@ private void loadTileLayer(TiledMap map, Element element) {\n \t\t}\t\t\n \t}\n \t\n-\tpublic void loadObjectGroup(TiledMap map, Element element) {\n+\tprotected void loadObjectGroup(TiledMap map, Element element) {\n \t\tif (element.getName().equals(\"objectgroup\")) {\n \t\t\tString name = element.getAttribute(\"name\", null);\n \t\t\tMapLayer layer = new MapLayer();\n@@ -373,49 +431,59 @@ public void loadObjectGroup(TiledMap map, Element element) {\n \t\t}\n \t}\n \t\n-\tprivate void loadObject(MapLayer layer, Element element) {\n+\tprotected void loadObject(MapLayer layer, Element element) {\n \t\tif (element.getName().equals(\"object\")) {\n \t\t\tMapObject object = null;\n \t\t\t\n \t\t\tint x = element.getIntAttribute(\"x\", 0);\n-\t\t\tint y = element.getIntAttribute(\"y\", 0);\n-\t\t\t\n+\t\t\tint y = (yUp ? mapHeightInPixels - element.getIntAttribute(\"y\", 0) : element.getIntAttribute(\"y\", 0));\n+\n \t\t\tint width = element.getIntAttribute(\"width\", 0);\n \t\t\tint height = element.getIntAttribute(\"height\", 0);\n \t\t\t\n \t\t\tif (element.getChildCount() > 0) {\n-\t\t\t\tElement child = element.getChildByName(\"polygon\");\n-\t\t\t\tif (child != null) {\n+\t\t\t\tElement child = null;\n+\t\t\t\tif ((child = element.getChildByName(\"polygon\")) != null) {\n \t\t\t\t\tString[] points = child.getAttribute(\"points\").split(\" \");\n \t\t\t\t\tfloat[] vertices = new float[points.length * 2];\n \t\t\t\t\tfor (int i = 0; i < points.length; i++) {\n \t\t\t\t\t\tString[] point = points[i].split(\",\");\n-\t\t\t\t\t\tvertices[i * 2] = x + Integer.parseInt(point[0]);\n-\t\t\t\t\t\tvertices[i * 2 + 1] = y + Integer.parseInt(point[1]);\n+\t\t\t\t\t\tvertices[i * 2] = Integer.parseInt(point[0]);\n+\t\t\t\t\t\tvertices[i * 2 + 1] = Integer.parseInt(point[1]);\n+\t\t\t\t\t\tif (yUp) {\n+\t\t\t\t\t\t\tvertices[i * 2 + 1] *= -1;\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t\tobject = new PolygonMapObject(vertices);\n-\t\t\t\t} else {\n-\t\t\t\t\tchild = element.getChildByName(\"polyline\");\n-\t\t\t\t\tif (child != null) {\n-\t\t\t\t\t\tString[] points = child.getAttribute(\"points\").split(\" \");\n-\t\t\t\t\t\tfloat[] vertices = new float[points.length * 2];\n-\t\t\t\t\t\tfor (int i = 0; i < points.length; i++) {\n-\t\t\t\t\t\t\tString[] point = points[i].split(\",\");\n-\t\t\t\t\t\t\tvertices[i * 2] = x + Integer.parseInt(point[0]);\n-\t\t\t\t\t\t\tvertices[i * 2 + 1] = y + Integer.parseInt(point[1]);\n+\t\t\t\t\tPolygon polygon = new Polygon(vertices);\n+\t\t\t\t\tpolygon.setPosition(x, y);\n+\t\t\t\t\tobject = new PolygonMapObject(polygon);\n+\t\t\t\t} else if ((child = element.getChildByName(\"polyline\")) != null) {\n+\t\t\t\t\tString[] points = child.getAttribute(\"points\").split(\" \");\n+\t\t\t\t\tfloat[] vertices = new float[points.length * 2];\n+\t\t\t\t\tfor (int i = 0; i < points.length; i++) {\n+\t\t\t\t\t\tString[] point = points[i].split(\",\");\n+\t\t\t\t\t\tvertices[i * 2] = Integer.parseInt(point[0]);\n+\t\t\t\t\t\tvertices[i * 2 + 1] = Integer.parseInt(point[1]);\n+\t\t\t\t\t\tif (yUp) {\n+\t\t\t\t\t\t\tvertices[i * 2 + 1] *= -1;\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tobject = new PolylineMapObject(vertices);\n \t\t\t\t\t}\n+\t\t\t\t\tPolyline polyline = new Polyline(vertices);\n+\t\t\t\t\tpolyline.setPosition(x, y);\n+\t\t\t\t\tobject = new PolylineMapObject(polyline);\n+\t\t\t\t} else if ((child = element.getChildByName(\"ellipse\")) != null) {\n+\t\t\t\t\tobject = new EllipseMapObject(x, yUp ? y - height : y, width, height);\n \t\t\t\t}\n \t\t\t}\n \t\t\tif (object == null) {\n-\t\t\t\tobject = new RectangleMapObject(x, y, width, height);\n+\t\t\t\tobject = new RectangleMapObject(x, yUp ? y - height : y, width, height);\n \t\t\t}\n \t\t\tobject.setName(element.getAttribute(\"name\", null));\n \t\t\tString type = element.getAttribute(\"type\", null);\n \t\t\tif (type != null) {\n \t\t\t\tobject.getProperties().put(\"type\", type);\n \t\t\t}\n+\t\t\tobject.setVisible(element.getIntAttribute(\"visible\", 1) == 1);\n \t\t\tElement properties = element.getChildByName(\"properties\");\n \t\t\tif (properties != null) {\n \t\t\t\tloadProperties(object.getProperties(), properties);\n@@ -424,11 +492,11 @@ private void loadObject(MapLayer layer, Element element) {\n \t\t}\n \t}\n \t\n-\tprivate void loadProperties(MapProperties properties, Element element) {\n+\tprotected void loadProperties(MapProperties properties, Element element) {\n \t\tif (element.getName().equals(\"properties\")) {\n \t\t\tfor (Element property : element.getChildrenByName(\"property\")) {\n \t\t\t\tString name = property.getAttribute(\"name\", null);\n-\t\t\t\tString value = property.getAttribute(name, null);\n+\t\t\t\tString value = property.getAttribute(\"value\", null);\n \t\t\t\tif (value == null) {\n \t\t\t\t\tvalue = property.getText();\n \t\t\t\t}\n@@ -437,7 +505,7 @@ private void loadProperties(MapProperties properties, Element element) {\n \t\t}\n \t}\n \t\n-\tprivate static FileHandle getRelativeFileHandle(FileHandle file, String path) {\n+\tprotected static FileHandle getRelativeFileHandle(FileHandle file, String path) {\n \t\tStringTokenizer tokenizer = new StringTokenizer(path, \"\\\\/\");\n \t\tFileHandle result = file.parent();\n \t\twhile (tokenizer.hasMoreElements()) {\n@@ -451,7 +519,7 @@ private static FileHandle getRelativeFileHandle(FileHandle file, String path) {\n \t\treturn result;\t\t\n \t}\n \t\n-\tprivate static int unsignedByteToInt (byte b) {\n+\tprotected static int unsignedByteToInt (byte b) {\n \t\treturn (int) b & 0xFF;\n \t}\n ",
      "parent_sha": "31ff891183b1faf5c2e1735f42b9e067fea335d2"
    }
  },
  {
    "oid": "388acd0bee3d2e0fac48cf3e4f01f3a7d43fe046",
    "message": "Fix depth test",
    "date": "2013-08-11T23:49:37Z",
    "url": "https://github.com/libgdx/libgdx/commit/388acd0bee3d2e0fac48cf3e4f01f3a7d43fe046",
    "details": {
      "sha": "d330dc5c266dd0a28e4128bbd2c6bb16f20f2e29",
      "filename": "gdx/src/com/badlogic/gdx/graphics/g3d/utils/RenderContext.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/libgdx/libgdx/blob/388acd0bee3d2e0fac48cf3e4f01f3a7d43fe046/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg3d%2Futils%2FRenderContext.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/388acd0bee3d2e0fac48cf3e4f01f3a7d43fe046/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg3d%2Futils%2FRenderContext.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg3d%2Futils%2FRenderContext.java?ref=388acd0bee3d2e0fac48cf3e4f01f3a7d43fe046",
      "patch": "@@ -66,9 +66,9 @@ public final void setDepthTest(final int depthFunction, final float depthRangeNe\n \t\t\t\tGdx.gl.glDepthFunc(depthFunc = depthFunction);\n \t\t\tif (!wasEnabled || this.depthRangeNear != depthRangeNear || this.depthRangeFar != depthRangeFar)\n \t\t\t\tGdx.gl.glDepthRangef(this.depthRangeNear = depthRangeNear, this.depthRangeFar = depthRangeFar);\n-\t\t\tif (!wasEnabled || this.depthMask != depthMask)\n-\t\t\t\tGdx.gl.glDepthMask(this.depthMask = depthMask);\n \t\t}\n+\t\tif (this.depthMask != depthMask)\n+\t\t\tGdx.gl.glDepthMask(this.depthMask = depthMask);\n \t}\n \t\n \tpublic final void setBlending(final boolean enabled, final int sFactor, final int dFactor) {",
      "parent_sha": "79416f662570d82da2018b08b403d4e6c8c52bfb"
    }
  },
  {
    "oid": "ba58e031f6940f7fdb3b39184640726f74cfbe38",
    "message": "Adding curly  braces for @intrigus",
    "date": "2019-06-09T20:12:58Z",
    "url": "https://github.com/libgdx/libgdx/commit/ba58e031f6940f7fdb3b39184640726f74cfbe38",
    "details": {
      "sha": "e04d4765c9264bca0a86bd3f6e2c0a6145d099d8",
      "filename": "backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/GwtInput.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/libgdx/libgdx/blob/ba58e031f6940f7fdb3b39184640726f74cfbe38/backends%2Fgdx-backends-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fgwt%2FGwtInput.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/ba58e031f6940f7fdb3b39184640726f74cfbe38/backends%2Fgdx-backends-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fgwt%2FGwtInput.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backends-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fgwt%2FGwtInput.java?ref=ba58e031f6940f7fdb3b39184640726f74cfbe38",
      "patch": "@@ -60,9 +60,9 @@ public GwtInput (CanvasElement canvas, GwtApplicationConfiguration config) {\n \t\tthis.canvas = canvas;\r\n \t\tthis.config = config;\r\n \t\tif (config.useAccelerometer) {\r\n-\t\t\tif (GwtApplication.agentInfo().isFirefox())\r\n+\t\t\tif (GwtApplication.agentInfo().isFirefox()) {\r\n \t\t\t\tsetupAccelerometer();\r\n-\t\t\telse\r\n+\t\t\t} else {\r\n \t\t\t\tGwtPermissions.queryPermission(GwtAccelerometer.PERMISSION, new GwtPermissions.GwtPermissionResult() {\r\n \t\t\t\t\t@Override\r\n \t\t\t\t\tpublic void granted() {\r\n@@ -78,6 +78,7 @@ public void prompt() {\n \t\t\t\t\t\tsetupAccelerometer();\r\n \t\t\t\t\t}\r\n \t\t\t\t});\r\n+\t\t\t}\r\n \t\t}\r\n \t\thookEvents();\r\n \t}\r",
      "parent_sha": "2c9e45eee1517901aee22d384dfb221756523f56"
    }
  },
  {
    "oid": "b1eff8f1ff811120dabf7401363246aa0b977b4b",
    "message": "Avoid potential precision loss during conversion from long millis time to float seconds time by subtracting intial time in millis in updateAnimationBaseTime function",
    "date": "2013-06-02T18:53:24Z",
    "url": "https://github.com/libgdx/libgdx/commit/b1eff8f1ff811120dabf7401363246aa0b977b4b",
    "details": {
      "sha": "6bedfdb65bf767e848e54f03ec92be3a22fc0c25",
      "filename": "gdx/src/com/badlogic/gdx/maps/tiled/tiles/AnimatedTiledMapTile.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/libgdx/libgdx/blob/b1eff8f1ff811120dabf7401363246aa0b977b4b/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmaps%2Ftiled%2Ftiles%2FAnimatedTiledMapTile.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/b1eff8f1ff811120dabf7401363246aa0b977b4b/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmaps%2Ftiled%2Ftiles%2FAnimatedTiledMapTile.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmaps%2Ftiled%2Ftiles%2FAnimatedTiledMapTile.java?ref=b1eff8f1ff811120dabf7401363246aa0b977b4b",
      "patch": "@@ -21,6 +21,7 @@ public class AnimatedTiledMapTile implements TiledMapTile {\n \n \tprivate float animationInterval;\n \tprivate long frameCount = 0;\n+\tprivate static final long initialTimeOffset = TimeUtils.millis();\n \n \t@Override\n \tpublic int getId () {\n@@ -59,7 +60,7 @@ public MapProperties getProperties () {\n \t/** Function is called by BatchTiledMapRenderer render(), lastTiledMapRenderTime is used to keep all of the tiles in lock-step\n \t * animation and avoids having to call TimeUtils.millis() in getTextureRegion() */\n \tpublic static void updateAnimationBaseTime () {\n-\t\tlastTiledMapRenderTime = TimeUtils.millis();\n+\t\tlastTiledMapRenderTime = TimeUtils.millis() - initialTimeOffset;\n \t}\n \n \tpublic AnimatedTiledMapTile (float interval, Array<StaticTiledMapTile> frameTiles) {",
      "parent_sha": "08381b421c08cb22df8f6725da269fc81e5548b1"
    }
  },
  {
    "oid": "09f89124cd19992489a9b5c00fb00fd521b09a85",
    "message": "Fix GWT for Firefox\n\nSoundManager2 was never being initialized in Firefox. Added back in call\nto beginDelayedInit().",
    "date": "2013-08-08T16:07:20Z",
    "url": "https://github.com/libgdx/libgdx/commit/09f89124cd19992489a9b5c00fb00fd521b09a85",
    "details": {
      "sha": "c4452cb8984ba34f95b202d02992eba88f75c8e7",
      "filename": "backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/soundmanager2/SoundManager.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/libgdx/libgdx/blob/09f89124cd19992489a9b5c00fb00fd521b09a85/backends%2Fgdx-backends-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fgwt%2Fsoundmanager2%2FSoundManager.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/09f89124cd19992489a9b5c00fb00fd521b09a85/backends%2Fgdx-backends-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fgwt%2Fsoundmanager2%2FSoundManager.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backends-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fgwt%2Fsoundmanager2%2FSoundManager.java?ref=09f89124cd19992489a9b5c00fb00fd521b09a85",
      "patch": "@@ -83,9 +83,11 @@ public static native void init (String moduleBaseURL, int flashVersion, boolean\n \t\t\t\tcallback.@com.badlogic.gdx.backends.gwt.soundmanager2.SoundManager.SoundManagerCallback::onready()();\r\n \t\t\t},\r\n \t\t\tontimeout: function(status) {\r\n-\t\t\t\tcallback.@com.badlogic.gdx.backends.gwt.soundmanager2.SoundManager.SoundManagerCallback::ontimeout(Ljava/lang/String;Ljava/lang/String;)(status.success, status.error.type);\r\n-\t\t\t}\t\t\r\n+\t\t\t\tcallback.@com.badlogic.gdx.backends.gwt.soundmanager2.SoundManager.SoundManagerCallback::ontimeout(Ljava/lang/String;Ljava/lang/String;)(status.success, (typeof status.error === 'undefined') ? '' : status.error.type);\r\n+\t\t\t}\r\n+\t\t\t\t\t\r\n \t\t});\r\n+\t\t$wnd.soundManager.beginDelayedInit();\r\n \t}-*/;\r\n \r\n }\n\\ No newline at end of file",
      "parent_sha": "d4a5efc4fcf19881a7dad1ca442e63706f151e5c"
    }
  },
  {
    "oid": "10b803c746d5da20b8760058b0b9a1c89e8f5eb6",
    "message": "[fixed] Group.toChildCoordinates, issue 62. Thanks lefthand",
    "date": "2010-11-15T11:44:54Z",
    "url": "https://github.com/libgdx/libgdx/commit/10b803c746d5da20b8760058b0b9a1c89e8f5eb6",
    "details": {
      "sha": "94dfee56a2ad9a42a9f91e16b0e773002ef981f0",
      "filename": "gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/libgdx/libgdx/blob/10b803c746d5da20b8760058b0b9a1c89e8f5eb6/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2FGroup.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/10b803c746d5da20b8760058b0b9a1c89e8f5eb6/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2FGroup.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2FGroup.java?ref=10b803c746d5da20b8760058b0b9a1c89e8f5eb6",
      "patch": "@@ -144,8 +144,8 @@ public static void toChildCoordinates (Actor child, float x, float y, Vector2 ou\n \t\t\t\t\tout.x = (x - child.x) / child.scaleX;\r\n \t\t\t\t\tout.y = (y - child.y) / child.scaleY;\r\n \t\t\t\t} else {\r\n-\t\t\t\t\tout.x = x / child.scaleX - (child.x - child.originX);\r\n-\t\t\t\t\tout.y = x / child.scaleY - (child.y - child.originY);\r\n+\t\t\t\t\tout.x = (x - child.x - child.originX) / child.scaleX + child.originX;\r\n+\t\t\t\t\tout.y = (y - child.y - child.originY) / child.scaleY + child.originY;\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t} else {\r",
      "parent_sha": "971bdb8e0c000ae2bf6e0fc98bf78856892ee0fe"
    }
  },
  {
    "oid": "d8cfc2be510ff7c00adfc0a4aa32c02a519cb3ea",
    "message": "changed private methods in G3dModelLoader to protected to allow for easier subclassing",
    "date": "2019-06-29T12:52:11Z",
    "url": "https://github.com/libgdx/libgdx/commit/d8cfc2be510ff7c00adfc0a4aa32c02a519cb3ea",
    "details": {
      "sha": "af1b562e631ae53aeb620f9075cb4e011694b96a",
      "filename": "gdx/src/com/badlogic/gdx/graphics/g3d/loader/G3dModelLoader.java",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/libgdx/libgdx/blob/d8cfc2be510ff7c00adfc0a4aa32c02a519cb3ea/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg3d%2Floader%2FG3dModelLoader.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/d8cfc2be510ff7c00adfc0a4aa32c02a519cb3ea/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg3d%2Floader%2FG3dModelLoader.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg3d%2Floader%2FG3dModelLoader.java?ref=d8cfc2be510ff7c00adfc0a4aa32c02a519cb3ea",
      "patch": "@@ -78,7 +78,7 @@ public ModelData parseModel (FileHandle handle) {\n \t\treturn model;\r\n \t}\r\n \r\n-\tprivate void parseMeshes (ModelData model, JsonValue json) {\r\n+\tprotected void parseMeshes (ModelData model, JsonValue json) {\r\n \t\tJsonValue meshes = json.get(\"meshes\");\r\n \t\tif (meshes != null) {\r\n \r\n@@ -123,7 +123,7 @@ private void parseMeshes (ModelData model, JsonValue json) {\n \t\t}\r\n \t}\r\n \r\n-\tprivate int parseType (String type) {\r\n+\tprotected int parseType (String type) {\r\n \t\tif (type.equals(\"TRIANGLES\")) {\r\n \t\t\treturn GL20.GL_TRIANGLES;\r\n \t\t} else if (type.equals(\"LINES\")) {\r\n@@ -140,7 +140,7 @@ private int parseType (String type) {\n \t\t}\r\n \t}\r\n \r\n-\tprivate VertexAttribute[] parseAttributes (JsonValue attributes) {\r\n+\tprotected VertexAttribute[] parseAttributes (JsonValue attributes) {\r\n \t\tArray<VertexAttribute> vertexAttributes = new Array<VertexAttribute>();\r\n \t\tint unit = 0;\r\n \t\tint blendWeightCount = 0;\r\n@@ -171,7 +171,7 @@ private VertexAttribute[] parseAttributes (JsonValue attributes) {\n \t\treturn vertexAttributes.toArray(VertexAttribute.class);\r\n \t}\r\n \r\n-\tprivate void parseMaterials (ModelData model, JsonValue json, String materialDir) {\r\n+\tprotected void parseMaterials (ModelData model, JsonValue json, String materialDir) {\r\n \t\tJsonValue materials = json.get(\"materials\");\r\n \t\tif (materials == null) {\r\n \t\t\t// we should probably create some default material in this case\r\n@@ -234,7 +234,7 @@ private void parseMaterials (ModelData model, JsonValue json, String materialDir\n \t\t}\r\n \t}\r\n \r\n-\tprivate int parseTextureUsage (final String value) {\r\n+\tprotected int parseTextureUsage (final String value) {\r\n \t\tif (value.equalsIgnoreCase(\"AMBIENT\"))\r\n \t\t\treturn ModelTexture.USAGE_AMBIENT;\r\n \t\telse if (value.equalsIgnoreCase(\"BUMP\"))\r\n@@ -257,14 +257,14 @@ else if (value.equalsIgnoreCase(\"SPECULAR\"))\n \t\treturn ModelTexture.USAGE_UNKNOWN;\r\n \t}\r\n \r\n-\tprivate Color parseColor (JsonValue colorArray) {\r\n+\tprotected Color parseColor (JsonValue colorArray) {\r\n \t\tif (colorArray.size >= 3)\r\n \t\t\treturn new Color(colorArray.getFloat(0), colorArray.getFloat(1), colorArray.getFloat(2), 1.0f);\r\n \t\telse\r\n \t\t\tthrow new GdxRuntimeException(\"Expected Color values <> than three.\");\r\n \t}\r\n \r\n-\tprivate Vector2 readVector2 (JsonValue vectorArray, float x, float y) {\r\n+\tprotected Vector2 readVector2 (JsonValue vectorArray, float x, float y) {\r\n \t\tif (vectorArray == null)\r\n \t\t\treturn new Vector2(x, y);\r\n \t\telse if (vectorArray.size == 2)\r\n@@ -273,7 +273,7 @@ else if (vectorArray.size == 2)\n \t\t\tthrow new GdxRuntimeException(\"Expected Vector2 values <> than two.\");\r\n \t}\r\n \r\n-\tprivate Array<ModelNode> parseNodes (ModelData model, JsonValue json) {\r\n+\tprotected Array<ModelNode> parseNodes (ModelData model, JsonValue json) {\r\n \t\tJsonValue nodes = json.get(\"nodes\");\r\n \t\tif (nodes != null) {\r\n \t\t\tmodel.nodes.ensureCapacity(nodes.size);\r\n@@ -285,9 +285,9 @@ private Array<ModelNode> parseNodes (ModelData model, JsonValue json) {\n \t\treturn model.nodes;\r\n \t}\r\n \r\n-\tprivate final Quaternion tempQ = new Quaternion();\r\n+\tprotected final Quaternion tempQ = new Quaternion();\r\n \r\n-\tprivate ModelNode parseNodesRecursively (JsonValue json) {\r\n+\tprotected ModelNode parseNodesRecursively (JsonValue json) {\r\n \t\tModelNode jsonNode = new ModelNode();\r\n \r\n \t\tString id = json.getString(\"id\", null);\r\n@@ -367,7 +367,7 @@ private ModelNode parseNodesRecursively (JsonValue json) {\n \t\treturn jsonNode;\r\n \t}\r\n \r\n-\tprivate void parseAnimations (ModelData model, JsonValue json) {\r\n+\tprotected void parseAnimations (ModelData model, JsonValue json) {\r\n \t\tJsonValue animations = json.get(\"animations\");\r\n \t\tif (animations == null) return;\r\n \r",
      "parent_sha": "a5598017238581a3555251c5ba7451c5fffbd2d3"
    }
  },
  {
    "oid": "ad497f6a53fff8b953cce2c323f736ad81362dac",
    "message": "Added double click to ClickListener.",
    "date": "2012-08-19T01:36:45Z",
    "url": "https://github.com/libgdx/libgdx/commit/ad497f6a53fff8b953cce2c323f736ad81362dac",
    "details": {
      "sha": "4f789d3be07d05b4b3cb934f63630b385d23d1bb",
      "filename": "gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ClickListener.java",
      "status": "modified",
      "additions": 23,
      "deletions": 2,
      "changes": 25,
      "blob_url": "https://github.com/libgdx/libgdx/blob/ad497f6a53fff8b953cce2c323f736ad81362dac/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Futils%2FClickListener.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/ad497f6a53fff8b953cce2c323f736ad81362dac/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Futils%2FClickListener.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Futils%2FClickListener.java?ref=ad497f6a53fff8b953cce2c323f736ad81362dac",
      "patch": "@@ -17,17 +17,38 @@\n package com.badlogic.gdx.scenes.scene2d.utils;\r\n \r\n import com.badlogic.gdx.scenes.scene2d.InputEvent;\r\n+import com.badlogic.gdx.utils.TimeUtils;\r\n \r\n /** Detects a click on an actor. The touch must go down over the actor and go up over the actor or within the\r\n- * {@link #setTapSquareSize(float) tap square} for the click to occur.\r\n+ * {@link #setTapSquareSize(float) tap square} for the click to occur. Double clicks can be detected using {@link #getTapCount()}.\r\n  * @author Nathan Sweet */\r\n abstract public class ClickListener extends PressedListener {\r\n+\tprivate long tapCountInterval = (long)(0.4f * 1000000000l);\r\n+\tprivate int tapCount;\r\n+\tprivate long lastTapTime;\r\n+\r\n \tpublic void touchUp (InputEvent event, float x, float y, int pointer, int button) {\r\n \t\tboolean validClick = isOver(event.getListenerActor(), x, y);\r\n \t\tif (validClick && pointer == 0 && button != getButton()) validClick = false;\r\n-\t\tif (validClick) clicked(event, x, y);\r\n+\t\tif (validClick) {\r\n+\t\t\tlong time = TimeUtils.nanoTime();\r\n+\t\t\tif (time - lastTapTime > tapCountInterval) tapCount = 0;\r\n+\t\t\ttapCount++;\r\n+\t\t\tlastTapTime = time;\r\n+\t\t\tclicked(event, x, y);\r\n+\t\t}\r\n \t\tsuper.touchUp(event, x, y, pointer, button);\r\n \t}\r\n \r\n \tabstract public void clicked (InputEvent event, float x, float y);\r\n+\r\n+\t/** @param tapCountInterval time in seconds that must pass for two touch down/up sequences to be detected as consecutive taps. */\r\n+\tpublic void setTapCountInterval (float tapCountInterval) {\r\n+\t\tthis.tapCountInterval = (long)(tapCountInterval * 1000000000l);\r\n+\t}\r\n+\r\n+\t/** Returns the number of taps within the tap count interval for the most recent click event. */\r\n+\tpublic int getTapCount () {\r\n+\t\treturn tapCount;\r\n+\t}\r\n }\r",
      "parent_sha": "223a651e1c2e1eaee06580e5ea1218e783d15eea"
    }
  },
  {
    "oid": "f3364b32f64107093f2c5207170d8cf8ac627dad",
    "message": "SpriteCache, fixed draw(int, int, int).\n\ncloses #6334",
    "date": "2020-12-30T22:38:21Z",
    "url": "https://github.com/libgdx/libgdx/commit/f3364b32f64107093f2c5207170d8cf8ac627dad",
    "details": {
      "sha": "bf8fd8532d0263525ae495c71e65e7605714451a",
      "filename": "gdx/src/com/badlogic/gdx/graphics/g2d/SpriteCache.java",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/libgdx/libgdx/blob/f3364b32f64107093f2c5207170d8cf8ac627dad/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2FSpriteCache.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/f3364b32f64107093f2c5207170d8cf8ac627dad/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2FSpriteCache.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2FSpriteCache.java?ref=f3364b32f64107093f2c5207170d8cf8ac627dad",
      "patch": "@@ -36,7 +36,6 @@\n import com.badlogic.gdx.utils.Disposable;\r\n import com.badlogic.gdx.utils.GdxRuntimeException;\r\n import com.badlogic.gdx.utils.IntArray;\r\n-import com.badlogic.gdx.utils.NumberUtils;\r\n \r\n /** Draws 2D images, optimized for geometry that does not change. Sprites and/or textures are cached and given an ID, which can\r\n  * later be used for drawing. The size, color, and texture region for each cached image cannot be modified. This information is\r\n@@ -115,8 +114,9 @@ public SpriteCache (int size, ShaderProgram shader, boolean useIndices) {\n \r\n \t\tif (useIndices && size > 8191) throw new IllegalArgumentException(\"Can't have more than 8191 sprites per batch: \" + size);\r\n \r\n-\t\tmesh = new Mesh(true, size * (useIndices ? 4 : 6), useIndices ? size * 6 : 0, new VertexAttribute(Usage.Position, 2,\r\n-\t\t\tShaderProgram.POSITION_ATTRIBUTE), new VertexAttribute(Usage.ColorPacked, 4, ShaderProgram.COLOR_ATTRIBUTE),\r\n+\t\tmesh = new Mesh(true, size * (useIndices ? 4 : 6), useIndices ? size * 6 : 0,\r\n+\t\t\tnew VertexAttribute(Usage.Position, 2, ShaderProgram.POSITION_ATTRIBUTE),\r\n+\t\t\tnew VertexAttribute(Usage.ColorPacked, 4, ShaderProgram.COLOR_ATTRIBUTE),\r\n \t\t\tnew VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORD_ATTRIBUTE + \"0\"));\r\n \t\tmesh.setAutoBind(false);\r\n \r\n@@ -425,8 +425,8 @@ public void add (Texture texture, float x, float y, int srcX, int srcY, int srcW\n \t}\r\n \r\n \t/** Adds the specified texture to the cache. */\r\n-\tpublic void add (Texture texture, float x, float y, float width, float height, int srcX, int srcY, int srcWidth,\r\n-\t\tint srcHeight, boolean flipX, boolean flipY) {\r\n+\tpublic void add (Texture texture, float x, float y, float width, float height, int srcX, int srcY, int srcWidth, int srcHeight,\r\n+\t\tboolean flipX, boolean flipY) {\r\n \r\n \t\tfloat invTexWidth = 1.0f / texture.getWidth();\r\n \t\tfloat invTexHeight = 1.0f / texture.getHeight();\r\n@@ -701,8 +701,8 @@ public void add (TextureRegion region, float x, float y, float width, float heig\n \t}\r\n \r\n \t/** Adds the specified region to the cache. */\r\n-\tpublic void add (TextureRegion region, float x, float y, float originX, float originY, float width, float height,\r\n-\t\tfloat scaleX, float scaleY, float rotation) {\r\n+\tpublic void add (TextureRegion region, float x, float y, float originX, float originY, float width, float height, float scaleX,\r\n+\t\tfloat scaleY, float rotation) {\r\n \r\n \t\t// bottom left and top right corner points relative to origin\r\n \t\tfinal float worldOriginX = x + originX;\r\n@@ -913,7 +913,8 @@ public void draw (int cacheID, int offset, int length) {\n \t\tif (!drawing) throw new IllegalStateException(\"SpriteCache.begin must be called before draw.\");\r\n \r\n \t\tCache cache = caches.get(cacheID);\r\n-\t\toffset = offset * 6 + cache.offset;\r\n+\t\tint verticesPerImage = mesh.getNumIndices() > 0 ? 4 : 6;\r\n+\t\toffset = cache.offset / (verticesPerImage * VERTEX_SIZE) * 6 + offset * 6;\r\n \t\tlength *= 6;\r\n \t\tTexture[] textures = cache.textures;\r\n \t\tint[] counts = cache.counts;\r",
      "parent_sha": "09c3c16c31808045c9503618fad5ea765fd63ee2"
    }
  },
  {
    "oid": "f8bbffc8580070ea39de171cb16856025c984fb5",
    "message": "Only set kotlin setting if incompatible",
    "date": "2017-06-30T18:29:51Z",
    "url": "https://github.com/libgdx/libgdx/commit/f8bbffc8580070ea39de171cb16856025c984fb5",
    "details": {
      "sha": "b8c23e66b440d9e42b740887e0ec5cd6c387ccf0",
      "filename": "extensions/gdx-setup/src/com/badlogic/gdx/setup/SettingsDialog.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/libgdx/libgdx/blob/f8bbffc8580070ea39de171cb16856025c984fb5/extensions%2Fgdx-setup%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fsetup%2FSettingsDialog.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/f8bbffc8580070ea39de171cb16856025c984fb5/extensions%2Fgdx-setup%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fsetup%2FSettingsDialog.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/extensions%2Fgdx-setup%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fsetup%2FSettingsDialog.java?ref=f8bbffc8580070ea39de171cb16856025c984fb5",
      "patch": "@@ -259,7 +259,10 @@ private void uiStyle () {\n \tpublic void showDialog (SetupCheckBox gwtCheckBox) {\n \t\ttakeSnapshot();\n \t\tsetVisible(true);\n-\t\tkotlinBox.setSelected(!gwtCheckBox.isSelected());\n+\t\tif (gwtCheckBox.isSelected()) {\n+\t\t\tkotlinBox.setSelected(false);\n+\t\t\tkotlinSnapshot = false;\n+\t\t}\n \t}\n \n \tpublic List<String> getGradleArgs () {",
      "parent_sha": "c01b12b6e1b63cd0e414347f82e76a1987bb55f5"
    }
  },
  {
    "oid": "8842439da83b9e0b6841a69eb893deae8838cbe2",
    "message": "FreeType support for missing glyph.",
    "date": "2015-12-08T00:06:27Z",
    "url": "https://github.com/libgdx/libgdx/commit/8842439da83b9e0b6841a69eb893deae8838cbe2",
    "details": {
      "sha": "6ea2fd8edc1e8327add7d9be3a64c9e891aaf8cc",
      "filename": "extensions/gdx-freetype/src/com/badlogic/gdx/graphics/g2d/freetype/FreeTypeFontGenerator.java",
      "status": "modified",
      "additions": 11,
      "deletions": 12,
      "changes": 23,
      "blob_url": "https://github.com/libgdx/libgdx/blob/8842439da83b9e0b6841a69eb893deae8838cbe2/extensions%2Fgdx-freetype%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2Ffreetype%2FFreeTypeFontGenerator.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/8842439da83b9e0b6841a69eb893deae8838cbe2/extensions%2Fgdx-freetype%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2Ffreetype%2FFreeTypeFontGenerator.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/extensions%2Fgdx-freetype%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2Ffreetype%2FFreeTypeFontGenerator.java?ref=8842439da83b9e0b6841a69eb893deae8838cbe2",
      "patch": "@@ -66,7 +66,7 @@\n  * @author Nathan Sweet\r\n  * @author Rob Rendell */\r\n public class FreeTypeFontGenerator implements Disposable {\r\n-\tstatic public final String DEFAULT_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\\\"!`?'.,;:()[]{}<>|/@\\\\^$-%+=#_&~*\u007f\\u0080\\u0081\\u0082\\u0083\\u0084\\u0085\\u0086\\u0087\\u0088\\u0089\\u008A\\u008B\\u008C\\u008D\\u008E\\u008F\\u0090\\u0091\\u0092\\u0093\\u0094\\u0095\\u0096\\u0097\\u0098\\u0099\\u009A\\u009B\\u009C\\u009D\\u009E\\u009F\\u00A0\\u00A1\\u00A2\\u00A3\\u00A4\\u00A5\\u00A6\\u00A7\\u00A8\\u00A9\\u00AA\\u00AB\\u00AC\\u00AD\\u00AE\\u00AF\\u00B0\\u00B1\\u00B2\\u00B3\\u00B4\\u00B5\\u00B6\\u00B7\\u00B8\\u00B9\\u00BA\\u00BB\\u00BC\\u00BD\\u00BE\\u00BF\\u00C0\\u00C1\\u00C2\\u00C3\\u00C4\\u00C5\\u00C6\\u00C7\\u00C8\\u00C9\\u00CA\\u00CB\\u00CC\\u00CD\\u00CE\\u00CF\\u00D0\\u00D1\\u00D2\\u00D3\\u00D4\\u00D5\\u00D6\\u00D7\\u00D8\\u00D9\\u00DA\\u00DB\\u00DC\\u00DD\\u00DE\\u00DF\\u00E0\\u00E1\\u00E2\\u00E3\\u00E4\\u00E5\\u00E6\\u00E7\\u00E8\\u00E9\\u00EA\\u00EB\\u00EC\\u00ED\\u00EE\\u00EF\\u00F0\\u00F1\\u00F2\\u00F3\\u00F4\\u00F5\\u00F6\\u00F7\\u00F8\\u00F9\\u00FA\\u00FB\\u00FC\\u00FD\\u00FE\\u00FF\";\r\n+\tstatic public final String DEFAULT_CHARS = \"\\u0000ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\\\"!`?'.,;:()[]{}<>|/@\\\\^$-%+=#_&~*\u007f\\u0080\\u0081\\u0082\\u0083\\u0084\\u0085\\u0086\\u0087\\u0088\\u0089\\u008A\\u008B\\u008C\\u008D\\u008E\\u008F\\u0090\\u0091\\u0092\\u0093\\u0094\\u0095\\u0096\\u0097\\u0098\\u0099\\u009A\\u009B\\u009C\\u009D\\u009E\\u009F\\u00A0\\u00A1\\u00A2\\u00A3\\u00A4\\u00A5\\u00A6\\u00A7\\u00A8\\u00A9\\u00AA\\u00AB\\u00AC\\u00AD\\u00AE\\u00AF\\u00B0\\u00B1\\u00B2\\u00B3\\u00B4\\u00B5\\u00B6\\u00B7\\u00B8\\u00B9\\u00BA\\u00BB\\u00BC\\u00BD\\u00BE\\u00BF\\u00C0\\u00C1\\u00C2\\u00C3\\u00C4\\u00C5\\u00C6\\u00C7\\u00C8\\u00C9\\u00CA\\u00CB\\u00CC\\u00CD\\u00CE\\u00CF\\u00D0\\u00D1\\u00D2\\u00D3\\u00D4\\u00D5\\u00D6\\u00D7\\u00D8\\u00D9\\u00DA\\u00DB\\u00DC\\u00DD\\u00DE\\u00DF\\u00E0\\u00E1\\u00E2\\u00E3\\u00E4\\u00E5\\u00E6\\u00E7\\u00E8\\u00E9\\u00EA\\u00EB\\u00EC\\u00ED\\u00EE\\u00EF\\u00F0\\u00F1\\u00F2\\u00F3\\u00F4\\u00F5\\u00F6\\u00F7\\u00F8\\u00F9\\u00FA\\u00FB\\u00FC\\u00FD\\u00FE\\u00FF\";\r\n \r\n \t/** A hint to scale the texture as needed, without capping it at any maximum size */\r\n \tstatic public final int NO_MAXIMUM = -1;\r\n@@ -335,10 +335,10 @@ public FreeTypeBitmapFontData generateData (FreeTypeFontParameter parameter, Fre\n \t\t}\r\n \r\n \t\t// determine space width\r\n-\t\tif (face.loadChar(' ', FreeType.FT_LOAD_DEFAULT)) {\r\n+\t\tif (face.loadChar(' ', FreeType.FT_LOAD_DEFAULT) || face.loadChar('l', FreeType.FT_LOAD_DEFAULT)) {\r\n \t\t\tdata.spaceWidth = FreeType.toInt(face.getGlyph().getMetrics().getHoriAdvance());\r\n \t\t} else {\r\n-\t\t\tdata.spaceWidth = face.getMaxAdvanceWidth(); // FIXME possibly very wrong :)\r\n+\t\t\tdata.spaceWidth = face.getMaxAdvanceWidth(); // Possibly very wrong.\r\n \t\t}\r\n \r\n \t\t// determine x-height\r\n@@ -449,17 +449,15 @@ public FreeTypeBitmapFontData generateData (FreeTypeFontParameter parameter, Fre\n \t\treturn data;\r\n \t}\r\n \r\n+\t/** @return null if glyph was not found. */\r\n \tGlyph createGlyph (char c, FreeTypeBitmapFontData data, FreeTypeFontParameter parameter, Stroker stroker, float baseLine,\r\n \t\tPixmapPacker packer) {\r\n \r\n \t\tboolean missing = face.getCharIndex(c) == 0;\r\n-\t\tif (missing) {\r\n-\t\t\tGlyph glyph = data.getGlyph((char)0);\r\n-\t\t\tif (glyph != null) return glyph;\r\n-\t\t}\r\n+\t\tif (missing) return null;\r\n \r\n \t\tif (!face.loadChar(c, FreeType.FT_LOAD_DEFAULT)) {\r\n-\t\t\tGdx.app.log(\"FreeTypeFontGenerator\", \"Couldn't load char '\" + c + \"'\");\r\n+\t\t\tGdx.app.log(\"FreeTypeFontGenerator\", \"Couldn't load char: \" + c);\r\n \t\t\treturn null;\r\n \t\t}\r\n \t\tGlyphSlot slot = face.getGlyph();\r\n@@ -468,10 +466,11 @@ Glyph createGlyph (char c, FreeTypeBitmapFontData data, FreeTypeFontParameter pa\n \t\t\tmainGlyph.toBitmap(FreeType.FT_RENDER_MODE_NORMAL);\r\n \t\t} catch (GdxRuntimeException e) {\r\n \t\t\tmainGlyph.dispose();\r\n-\t\t\tGdx.app.log(\"FreeTypeFontGenerator\", \"Couldn't render char '\" + c + \"'\");\r\n+\t\t\tGdx.app.log(\"FreeTypeFontGenerator\", \"Couldn't render char: \" + c);\r\n \t\t\treturn null;\r\n \t\t}\r\n \t\tBitmap mainBitmap = mainGlyph.getBitmap();\r\n+\t\tif (mainBitmap.getWidth() == 0 || mainBitmap.getRows() == 0) return null;\r\n \t\tPixmap mainPixmap = mainBitmap.getPixmap(Format.RGBA8888, parameter.color, parameter.gamma);\r\n \r\n \t\tif (parameter.borderWidth > 0) {\r\n@@ -620,13 +619,13 @@ static public class FreeTypeBitmapFontData extends BitmapFontData implements Dis\n \t\t@Override\r\n \t\tpublic Glyph getGlyph (char ch) {\r\n \t\t\tGlyph glyph = super.getGlyph(ch);\r\n-\t\t\tif (glyph == null && generator != null && ch != 0) {\r\n+\t\t\tif (glyph == null && generator != null) {\r\n \t\t\t\tgenerator.setPixelSizes(0, parameter.size);\r\n \t\t\t\tglyph = generator.createGlyph(ch, this, parameter, stroker, (ascent + capHeight) / scaleY, packer);\r\n-\t\t\t\tif (glyph == null) return null;\r\n+\t\t\t\tif (glyph == null) return missingGlyph;\r\n \r\n-\t\t\t\tsetGlyph(ch, glyph);\r\n \t\t\t\tsetGlyphRegion(glyph, regions.get(glyph.page));\r\n+\t\t\t\tsetGlyph(ch, glyph);\r\n \t\t\t\tglyphs.add(glyph);\r\n \t\t\t\tdirty = true;\r\n \r",
      "parent_sha": "5117a68d0c24239174181201a300053bc9ab4865"
    }
  },
  {
    "oid": "3a7b2c4ccb07bf4cec9a07b21f3676faa1d2e9ba",
    "message": "Added rectLine method.",
    "date": "2013-11-21T13:21:25Z",
    "url": "https://github.com/libgdx/libgdx/commit/3a7b2c4ccb07bf4cec9a07b21f3676faa1d2e9ba",
    "details": {
      "sha": "3a8569a4ab60e951afb5576312f5c741c5831ed3",
      "filename": "gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java",
      "status": "modified",
      "additions": 56,
      "deletions": 12,
      "changes": 68,
      "blob_url": "https://github.com/libgdx/libgdx/blob/3a7b2c4ccb07bf4cec9a07b21f3676faa1d2e9ba/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fglutils%2FShapeRenderer.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/3a7b2c4ccb07bf4cec9a07b21f3676faa1d2e9ba/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fglutils%2FShapeRenderer.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fglutils%2FShapeRenderer.java?ref=3a7b2c4ccb07bf4cec9a07b21f3676faa1d2e9ba",
      "patch": "@@ -105,7 +105,7 @@ public int getGlType () {\n \tMatrix4 projView = new Matrix4();\r\n \tMatrix4 transform = new Matrix4();\r\n \tMatrix4 combined = new Matrix4();\r\n-\tMatrix4 tmp = new Matrix4();\r\n+\tVector2 tmp = new Vector2();\r\n \tColor color = new Color(1, 1, 1, 1);\r\n \tShapeType currType = null;\r\n \r\n@@ -306,16 +306,14 @@ public void curve (float x1, float y1, float cx1, float cy1, float cx2, float cy\n \t\trenderer.vertex(x2, y2, 0);\r\n \t}\r\n \r\n-\t/**\r\n-\t * Draws a triangle in x/y plane.\r\n-\t * The {@link ShapeType} passed to begin has to be {@link ShapeType#Filled} or {@link ShapeType#Line}.\r\n+\t/** Draws a triangle in x/y plane. The {@link ShapeType} passed to begin has to be {@link ShapeType#Filled} or\r\n+\t * {@link ShapeType#Line}.\r\n \t * @param x1 x of first point\r\n \t * @param y1 y of first point\r\n \t * @param x2 x of second point\r\n \t * @param y2 y of second point\r\n \t * @param x3 x of third point\r\n-\t * @param y3 y of third point\r\n-\t */\r\n+\t * @param y3 y of third point */\r\n \tpublic void triangle (float x1, float y1, float x2, float y2, float x3, float y3) {\r\n \t\tif (currType != ShapeType.Filled && currType != ShapeType.Line)\r\n \t\t\tthrow new GdxRuntimeException(\"Must call begin(ShapeType.Filled) or begin(ShapeType.Line)\");\r\n@@ -345,10 +343,9 @@ public void triangle (float x1, float y1, float x2, float y2, float x3, float y3\n \t\t\trenderer.vertex(x3, y3, 0);\r\n \t\t}\r\n \t}\r\n-\t\r\n-\t/**\r\n-\t * Draws a triangle in x/y plane with coloured corners.\r\n-\t * The {@link ShapeType} passed to begin has to be {@link ShapeType#Filled} or {@link ShapeType#Line}.\r\n+\r\n+\t/** Draws a triangle in x/y plane with coloured corners. The {@link ShapeType} passed to begin has to be\r\n+\t * {@link ShapeType#Filled} or {@link ShapeType#Line}.\r\n \t * @param x1 x of first point\r\n \t * @param y1 y of first point\r\n \t * @param x2 x of second point\r\n@@ -357,8 +354,7 @@ public void triangle (float x1, float y1, float x2, float y2, float x3, float y3\n \t * @param y3 y of third point\r\n \t * @param col1 color of the point defined by x1 and y1\r\n \t * @param col2 color of the point defined by x2 and y2\r\n-\t * @param col3 color of the point defined by x3 and y3\r\n-\t */\r\n+\t * @param col3 color of the point defined by x3 and y3 */\r\n \tpublic void triangle (float x1, float y1, float x2, float y2, float x3, float y3, Color col1, Color col2, Color col3) {\r\n \t\tif (currType != ShapeType.Filled && currType != ShapeType.Line)\r\n \t\t\tthrow new GdxRuntimeException(\"Must call begin(ShapeType.Filled) or begin(ShapeType.Line)\");\r\n@@ -435,6 +431,54 @@ public void rect (float x, float y, float width, float height) {\n \t\t}\r\n \t}\r\n \r\n+\tpublic void rectLine (float x1, float y1, float x2, float y2, float width) {\r\n+\t\tif (currType != ShapeType.Filled && currType != ShapeType.Line)\r\n+\t\t\tthrow new GdxRuntimeException(\"Must call begin(ShapeType.Filled) or begin(ShapeType.Line)\");\r\n+\r\n+\t\tcheckDirty();\r\n+\t\tcheckFlush(8);\r\n+\r\n+\t\tVector2 t = tmp.set(y2 - y1, x1 - x2).nor();\r\n+\t\twidth *= 0.5f;\r\n+\t\tfloat tx = t.x * width;\r\n+\t\tfloat ty = t.y * width;\r\n+\t\tif (currType == ShapeType.Line) {\r\n+\t\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\t\trenderer.vertex(x1 + tx, y1 + ty, 0);\r\n+\t\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\t\trenderer.vertex(x1 - tx, y1 - ty, 0);\r\n+\r\n+\t\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\t\trenderer.vertex(x2 + tx, y2 + ty, 0);\r\n+\t\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\t\trenderer.vertex(x2 - tx, y2 - ty, 0);\r\n+\r\n+\t\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\t\trenderer.vertex(x2 + tx, y2 + ty, 0);\r\n+\t\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\t\trenderer.vertex(x1 + tx, y1 + ty, 0);\r\n+\r\n+\t\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\t\trenderer.vertex(x2 - tx, y2 - ty, 0);\r\n+\t\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\t\trenderer.vertex(x1 - tx, y1 - ty, 0);\r\n+\t\t} else {\r\n+\t\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\t\trenderer.vertex(x1 + tx, y1 + ty, 0);\r\n+\t\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\t\trenderer.vertex(x1 - tx, y1 - ty, 0);\r\n+\t\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\t\trenderer.vertex(x2 + tx, y2 + ty, 0);\r\n+\r\n+\t\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\t\trenderer.vertex(x2 - tx, y2 - ty, 0);\r\n+\t\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\t\trenderer.vertex(x2 + tx, y2 + ty, 0);\r\n+\t\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\t\trenderer.vertex(x1 - tx, y1 - ty, 0);\r\n+\t\t}\r\n+\t}\r\n+\r\n \t/** Draws a rectangle in the x/y plane. The x and y coordinate specify the bottom left corner of the rectangle. The\r\n \t * {@link ShapeType} passed to begin has to be {@link ShapeType#Filled} or {@link ShapeType#Line}.\r\n \t * @param col1 The color at (x, y)\r",
      "parent_sha": "62b1ce14cd0cb2df56cd1887574c6862ee3ea9f1"
    }
  },
  {
    "oid": "740d14f7c27b05229ecdf84f8715a4fa2e06e7da",
    "message": "[fixed] issue 472, thanks Matthias!",
    "date": "2011-09-20T01:48:21Z",
    "url": "https://github.com/libgdx/libgdx/commit/740d14f7c27b05229ecdf84f8715a4fa2e06e7da",
    "details": {
      "sha": "e2a44d6248af8b5a6aa0610b9309df6e6b3f018c",
      "filename": "gdx/src/com/badlogic/gdx/math/Intersector.java",
      "status": "modified",
      "additions": 22,
      "deletions": 6,
      "changes": 28,
      "blob_url": "https://github.com/libgdx/libgdx/blob/740d14f7c27b05229ecdf84f8715a4fa2e06e7da/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2FIntersector.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/740d14f7c27b05229ecdf84f8715a4fa2e06e7da/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2FIntersector.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2FIntersector.java?ref=740d14f7c27b05229ecdf84f8715a4fa2e06e7da",
      "patch": "@@ -122,12 +122,28 @@ public static boolean isPointInPolygon (List<Vector2> polygon, Vector2 point) {\n \t * @param point The point\n \t * \n \t * @return The distance between the line segment and the point. */\n-\tpublic static float distanceLinePoint (Vector2 start, Vector2 end, Vector2 point) {\n-\t\ttmp.set(end.x, end.y, 0).sub(start.x, start.y, 0);\n-\t\tfloat l = tmp.len();\n-\t\ttmp2.set(start.x, start.y, 0).sub(point.x, point.y, 0);\n-\t\treturn tmp.crs(tmp2).len() / l;\n-\t}\n+\tpublic static float distanceLinePoint(Vector2 start, Vector2 end, Vector2 point)\n+\t{\n+\t    tmp.set(end.x, end.y, 0);\n+\t    float l2 = tmp.sub(start.y, start.y, 0).len2();\n+\t    if(l2 == 0.0f) // start == end\n+\t        return point.dst(start);\n+\t       \n+\t    tmp.set(point.x, point.y, 0);\n+\t    tmp.sub(start.x, start.y, 0);\n+\t    tmp2.set(end.x, end.y, 0);\n+\t    tmp2.sub(start.x, start.y, 0);\n+\t       \n+\t    float t = tmp.dot(tmp2) / l2;\n+\t    if(t < 0.0f)\n+\t        return point.dst(start); // Beyond 'start'-end of the segment\n+\t    else if(t > 1.0f)\n+\t        return point.dst(end); // Beyond 'end'-end of the segment\n+\t       \n+\t    tmp.set(end.x, end.y, 0); // Projection falls on the segment\n+\t    tmp.sub(start.x, start.y, 0).mul(t).add(start.x, start.y, 0);\n+\t    return tmp2.set(point.x, point.y, 0).dst(tmp);\n+\t} \n \n \t/** Returns wheter the given line segment intersects the given circle.\n \t * ",
      "parent_sha": "a8907031c255fecfc698bc26219c9e1818e570d1"
    }
  },
  {
    "oid": "2a92e6feea33500125898ec160a11b204f151813",
    "message": "Changed window type to save user from casting",
    "date": "2019-08-02T19:48:07Z",
    "url": "https://github.com/libgdx/libgdx/commit/2a92e6feea33500125898ec160a11b204f151813",
    "details": {
      "sha": "4b8149c1be4a36bc883a01d87c1e5b3b437771b7",
      "filename": "backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/Lwjgl3WindowConfiguration.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/libgdx/libgdx/blob/2a92e6feea33500125898ec160a11b204f151813/backends%2Fgdx-backend-lwjgl3%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Flwjgl3%2FLwjgl3WindowConfiguration.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/2a92e6feea33500125898ec160a11b204f151813/backends%2Fgdx-backend-lwjgl3%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Flwjgl3%2FLwjgl3WindowConfiguration.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backend-lwjgl3%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Flwjgl3%2FLwjgl3WindowConfiguration.java?ref=2a92e6feea33500125898ec160a11b204f151813",
      "patch": "@@ -23,6 +23,7 @@\n import com.badlogic.gdx.Graphics.DisplayMode;\n import com.badlogic.gdx.backends.lwjgl3.Lwjgl3Graphics.Lwjgl3DisplayMode;\n import com.badlogic.gdx.graphics.Color;\n+import com.badlogic.gdx.\n \n public class Lwjgl3WindowConfiguration {\n \tint windowX = -1;\n@@ -113,8 +114,8 @@ public void setMaximized(boolean maximized) {\n \t/**\n \t * @param monitor what monitor the window should maximize to\n \t */\n-\tpublic void setMaximizedMonitor(Lwjgl3Graphics.Lwjgl3Monitor monitor) {\n-\t\tthis.maximizedMonitor = monitor;\n+\tpublic void setMaximizedMonitor(Graphics.Monitor monitor) {\n+\t\tthis.maximizedMonitor = (Lwjgl3Graphics.Lwjgl3Monitor) monitor;\n \t}\n \n \t/**",
      "parent_sha": "83c7980d9efa788de0b95d0b6e4ba06135124914"
    }
  },
  {
    "oid": "20c49903145fbb36556b88e65052aaf96d92fe19",
    "message": "Reduces touches to 20, fixes #2622",
    "date": "2014-12-04T17:40:32Z",
    "url": "https://github.com/libgdx/libgdx/commit/20c49903145fbb36556b88e65052aaf96d92fe19",
    "details": {
      "sha": "c51255523a11fa5b22dc8c4b1daae5c9eb09effd",
      "filename": "backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/libgdx/libgdx/blob/20c49903145fbb36556b88e65052aaf96d92fe19/backends%2Fgdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidInput.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/20c49903145fbb36556b88e65052aaf96d92fe19/backends%2Fgdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidInput.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidInput.java?ref=20c49903145fbb36556b88e65052aaf96d92fe19",
      "patch": "@@ -95,7 +95,7 @@ protected TouchEvent newObject () {\n \t\t}\r\n \t};\r\n \r\n-\tpublic static final int NUM_TOUCHES = 40;\r\n+\tpublic static final int NUM_TOUCHES = 20;\r\n \r\n \tArrayList<OnKeyListener> keyListeners = new ArrayList();\r\n \tArrayList<KeyEvent> keyEvents = new ArrayList();\r",
      "parent_sha": "e5803f4dc544469a09dbcb9bda7e2bebf771c47f"
    }
  },
  {
    "oid": "c0805391a545b242b3261e259755b5ef8a561a0b",
    "message": "Fix #3842 (#4529)",
    "date": "2017-01-12T21:34:49Z",
    "url": "https://github.com/libgdx/libgdx/commit/c0805391a545b242b3261e259755b5ef8a561a0b",
    "details": {
      "sha": "12f5de2f28a52a069b1f7fbfd25d125b3566f90a",
      "filename": "backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/utils/BufferUtils.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/libgdx/libgdx/blob/c0805391a545b242b3261e259755b5ef8a561a0b/backends%2Fgdx-backends-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fgwt%2Femu%2Fcom%2Fbadlogic%2Fgdx%2Futils%2FBufferUtils.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/c0805391a545b242b3261e259755b5ef8a561a0b/backends%2Fgdx-backends-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fgwt%2Femu%2Fcom%2Fbadlogic%2Fgdx%2Futils%2FBufferUtils.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backends-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fgwt%2Femu%2Fcom%2Fbadlogic%2Fgdx%2Futils%2FBufferUtils.java?ref=c0805391a545b242b3261e259755b5ef8a561a0b",
      "patch": "@@ -71,9 +71,9 @@ public static void copy (byte[] src, int srcOffset, Buffer dst, int numElements)\n \r\n \t\tByteBuffer byteBuffer = (ByteBuffer)dst;\r\n \t\tint oldPosition = byteBuffer.position();\r\n+\t\tbyteBuffer.limit(oldPosition + numElements);\r\n \t\tbyteBuffer.put(src, srcOffset, numElements);\r\n \t\tbyteBuffer.position(oldPosition);\r\n-\t\tbyteBuffer.limit(oldPosition + numElements);\r\n \t}\r\n \r\n \t/** Copies the contents of src to dst, starting from src[srcOffset], copying numElements elements. The {@link Buffer} instance's\r\n@@ -93,9 +93,9 @@ public static void copy (short[] src, int srcOffset, Buffer dst, int numElements\n \t\tif (buffer == null) throw new GdxRuntimeException(\"dst must be a ByteBuffer or ShortBuffer\");\r\n \r\n \t\tint oldPosition = buffer.position();\r\n+\t\tbuffer.limit(oldPosition + numElements);\r\n \t\tbuffer.put(src, srcOffset, numElements);\r\n \t\tbuffer.position(oldPosition);\r\n-\t\tbuffer.limit(oldPosition + numElements);\r\n \t}\r\n \r\n \t/** Copies the contents of src to dst, starting from src[srcOffset], copying numElements elements. The {@link Buffer} instance's\r\n@@ -115,9 +115,9 @@ public static void copy (char[] src, int srcOffset, Buffer dst, int numElements)\n \t\tif (buffer == null) throw new GdxRuntimeException(\"dst must be a ByteBuffer or CharBuffer\");\r\n \r\n \t\tint oldPosition = buffer.position();\r\n+\t\tbuffer.limit(oldPosition + numElements);\r\n \t\tbuffer.put(src, srcOffset, numElements);\r\n \t\tbuffer.position(oldPosition);\r\n-\t\tbuffer.limit(oldPosition + numElements);\r\n \t}\r\n \r\n \t/** Copies the contents of src to dst, starting from src[srcOffset], copying numElements elements. The {@link Buffer} instance's\r\n@@ -137,9 +137,9 @@ public static void copy (int[] src, int srcOffset, Buffer dst, int numElements)\n \t\tif (buffer == null) throw new GdxRuntimeException(\"dst must be a ByteBuffer or IntBuffer\");\r\n \r\n \t\tint oldPosition = buffer.position();\r\n+\t\tbuffer.limit(oldPosition + numElements);\r\n \t\tbuffer.put(src, srcOffset, numElements);\r\n \t\tbuffer.position(oldPosition);\r\n-\t\tbuffer.limit(oldPosition + numElements);\r\n \t}\r\n \r\n \t/** Copies the contents of src to dst, starting from src[srcOffset], copying numElements elements. The {@link Buffer} instance's\r\n@@ -159,9 +159,9 @@ public static void copy (long[] src, int srcOffset, Buffer dst, int numElements)\n \t\tif (buffer == null) throw new GdxRuntimeException(\"dst must be a ByteBuffer or LongBuffer\");\r\n \r\n \t\tint oldPosition = buffer.position();\r\n+\t\tbuffer.limit(oldPosition + numElements);\r\n \t\tbuffer.put(src, srcOffset, numElements);\r\n \t\tbuffer.position(oldPosition);\r\n-\t\tbuffer.limit(oldPosition + numElements);\r\n \t}\r\n \r\n \t/** Copies the contents of src to dst, starting from src[srcOffset], copying numElements elements. The {@link Buffer} instance's\r\n@@ -177,9 +177,9 @@ public static void copy (float[] src, int srcOffset, Buffer dst, int numElements\n \t\tFloatBuffer buffer = asFloatBuffer(dst);\r\n \r\n \t\tint oldPosition = buffer.position();\r\n+\t\tbuffer.limit(oldPosition + numElements);\r\n \t\tbuffer.put(src, srcOffset, numElements);\r\n \t\tbuffer.position(oldPosition);\r\n-\t\tbuffer.limit(oldPosition + numElements);\r\n \t}\r\n \r\n \t/** Copies the contents of src to dst, starting from src[srcOffset], copying numElements elements. The {@link Buffer} instance's\r\n@@ -199,9 +199,9 @@ public static void copy (double[] src, int srcOffset, Buffer dst, int numElement\n \t\tif (buffer == null) throw new GdxRuntimeException(\"dst must be a ByteBuffer or DoubleBuffer\");\r\n \r\n \t\tint oldPosition = buffer.position();\r\n+\t\tbuffer.limit(oldPosition + numElements);\r\n \t\tbuffer.put(src, srcOffset, numElements);\r\n \t\tbuffer.position(oldPosition);\r\n-\t\tbuffer.limit(oldPosition + numElements);\r\n \t}\r\n \t\r\n \t/** Copies the contents of src to dst, starting from src[srcOffset], copying numElements elements. The {@link Buffer} instance's\r",
      "parent_sha": "8ce029bbacd8c41e5fd01472dcd5e36aba09d780"
    }
  },
  {
    "oid": "424356659fd347af79d264d4887c5f1d82d75c60",
    "message": "",
    "date": "2011-07-21T04:10:22Z",
    "url": "https://github.com/libgdx/libgdx/commit/424356659fd347af79d264d4887c5f1d82d75c60",
    "details": {
      "sha": "249f1063da255967b365ae90a52f38fba9f25a64",
      "filename": "gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFont.java",
      "status": "modified",
      "additions": 51,
      "deletions": 42,
      "changes": 93,
      "blob_url": "https://github.com/libgdx/libgdx/blob/424356659fd347af79d264d4887c5f1d82d75c60/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2FBitmapFont.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/424356659fd347af79d264d4887c5f1d82d75c60/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2FBitmapFont.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2FBitmapFont.java?ref=424356659fd347af79d264d4887c5f1d82d75c60",
      "patch": "@@ -57,23 +57,27 @@ public class BitmapFont implements Disposable {\n \tstatic private final int PAGE_SIZE = 1 << LOG2_PAGE_SIZE;\r\n \tstatic private final int PAGES = 0x10000 / PAGE_SIZE;\r\n \r\n+\tstatic private final char[] xChars = {'x', 'e', 'a', 'o', 'n', 's', 'r', 'c', 'u', 'm', 'v', 'w', 'z'};\r\n+\tstatic private final char[] capChars = {'M', 'N', 'B', 'D', 'C', 'E', 'F', 'K', 'A', 'G', 'H', 'I', 'J', 'L', 'O', 'P', 'Q',\r\n+\t\t'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};\r\n+\r\n \tTextureRegion region;\r\n \tfloat lineHeight;\r\n-\tfloat capHeight;\r\n+\tfloat capHeight = 1;\r\n \tfloat ascent;\r\n \tfloat descent;\r\n \tfloat down;\r\n \tfloat scaleX = 1, scaleY = 1;\r\n \r\n \tprivate final Glyph[][] glyphs = new Glyph[PAGES][];\r\n \tprivate float spaceWidth;\r\n-\tprivate float xHeight;\r\n+\tprivate float xHeight = 1;\r\n \tprivate final TextBounds textBounds = new TextBounds();\r\n \tprivate float color = Color.WHITE.toFloatBits();\r\n \tprivate Color tempColor = new Color(1, 1, 1, 1);\r\n \tprivate boolean flipped;\r\n \tprivate boolean integer = true;\r\n-\t\r\n+\r\n \t/**\r\n \t * Creates a BitmapFont using the default 15pt Arial font included in the libgdx JAR file. This is convenient to easily display\r\n \t * text without bothering with generating a bitmap font.\r\n@@ -115,12 +119,12 @@ public BitmapFont (FileHandle fontFile, boolean flip) {\n \t/**\r\n \t * Creates a BitmapFont from a BMFont file, using the specified image for glyphs. Any image specified in the BMFont file is\r\n \t * ignored.\r\n-\t * @param flip If true, the glyphs will be flipped for use with a perspective where 0,0 is the upper left corner. \r\n+\t * @param flip If true, the glyphs will be flipped for use with a perspective where 0,0 is the upper left corner.\r\n \t */\r\n \tpublic BitmapFont (FileHandle fontFile, FileHandle imageFile, boolean flip) {\r\n \t\tthis(fontFile, imageFile, flip, true);\r\n \t}\r\n-\t\r\n+\r\n \t/**\r\n \t * Creates a BitmapFont from a BMFont file, using the specified image for glyphs. Any image specified in the BMFont file is\r\n \t * ignored.\r\n@@ -158,7 +162,7 @@ private void init (FileHandle fontFile, TextureRegion region, boolean flip) {\n \t\t\t\tString[] page = line.split(\" \", 4);\r\n \t\t\t\tif (!page[2].startsWith(\"file=\")) throw new GdxRuntimeException(\"Invalid font file: \" + fontFile);\r\n \t\t\t\tString imgFilename = null;\r\n-\t\t\t\tif(page[2].endsWith(\"\\\"\")) {\r\n+\t\t\t\tif (page[2].endsWith(\"\\\"\")) {\r\n \t\t\t\t\timgFilename = page[2].substring(6, page[2].length() - 1);\r\n \t\t\t\t} else {\r\n \t\t\t\t\timgFilename = page[2].substring(5, page[2].length());\r\n@@ -172,9 +176,9 @@ private void init (FileHandle fontFile, TextureRegion region, boolean flip) {\n \t\t\tfloat invTexHeight = 1.0f / region.getTexture().getHeight();\r\n \t\t\tfloat u = region.u;\r\n \t\t\tfloat v = region.v;\r\n-\t\t\t\r\n+\r\n \t\t\tdescent = 0;\r\n-//\t\t\tdescent = g != null? baseLine + g.yoffset:0;\r\n+\t\t\t// descent = g != null? baseLine + g.yoffset:0;\r\n \r\n \t\t\twhile (true) {\r\n \t\t\t\tline = reader.readLine();\r\n@@ -221,7 +225,7 @@ private void init (FileHandle fontFile, TextureRegion region, boolean flip) {\n \t\t\t\t\tglyph.v2 = v + srcY * invTexHeight;\r\n \t\t\t\t\tglyph.v = v + (srcY + glyph.height) * invTexHeight;\r\n \t\t\t\t}\r\n-\t\t\t\t\r\n+\r\n \t\t\t\tdescent = Math.min(baseLine + glyph.yoffset, descent);\r\n \t\t\t}\r\n \r\n@@ -253,13 +257,21 @@ private void init (FileHandle fontFile, TextureRegion region, boolean flip) {\n \t\t\t}\r\n \t\t\tspaceWidth = g != null ? g.xadvance + g.width : 1;\r\n \r\n-\t\t\tg = getGlyph('x');\r\n-\t\t\txHeight = g != null ? g.height : 1;\r\n+\t\t\tfor (int i = 0; i < xChars.length; i++) {\r\n+\t\t\t\tg = getGlyph(xChars[i]);\r\n+\t\t\t\tif (g == null) continue;\r\n+\t\t\t\txHeight = g.height;\r\n+\t\t\t\tbreak;\r\n+\t\t\t}\r\n \r\n-\t\t\tg = getGlyph('M');\r\n-\t\t\tcapHeight = g != null ? g.height : 1;\t\t\t\t\t\t\t\r\n-\t\t\t\r\n-\t\t\tascent = baseLine - capHeight;\t\t\t\r\n+\t\t\tfor (int i = 0; i < capChars.length; i++) {\r\n+\t\t\t\tg = getGlyph(capChars[i]);\r\n+\t\t\t\tif (g == null) continue;\r\n+\t\t\t\tcapHeight = g.height;\r\n+\t\t\t\tbreak;\r\n+\t\t\t}\r\n+\r\n+\t\t\tascent = baseLine - capHeight;\r\n \t\t\tdown = -lineHeight;\r\n \t\t\tif (flip) {\r\n \t\t\t\tascent = -ascent;\r\n@@ -312,7 +324,7 @@ public TextBounds draw (SpriteBatch spriteBatch, CharSequence str, float x, floa\n \t\t\twhile (start < end) {\r\n \t\t\t\tlastGlyph = getGlyph(str.charAt(start++));\r\n \t\t\t\tif (lastGlyph != null) {\r\n-\t\t\t\t\tif(!integer) {\r\n+\t\t\t\t\tif (!integer) {\r\n \t\t\t\t\t\tspriteBatch.draw(texture, //\r\n \t\t\t\t\t\t\tx + lastGlyph.xoffset, y + lastGlyph.yoffset, //\r\n \t\t\t\t\t\t\tlastGlyph.width, lastGlyph.height, //\r\n@@ -321,7 +333,7 @@ public TextBounds draw (SpriteBatch spriteBatch, CharSequence str, float x, floa\n \t\t\t\t\t\tspriteBatch.draw(texture, //\r\n \t\t\t\t\t\t\t(int)x + lastGlyph.xoffset, (int)y + lastGlyph.yoffset, //\r\n \t\t\t\t\t\t\tlastGlyph.width, lastGlyph.height, //\r\n-\t\t\t\t\t\t\tlastGlyph.u, lastGlyph.v, lastGlyph.u2, lastGlyph.v2);\t\r\n+\t\t\t\t\t\t\tlastGlyph.u, lastGlyph.v, lastGlyph.u2, lastGlyph.v2);\r\n \t\t\t\t\t}\r\n \t\t\t\t\tx += lastGlyph.xadvance;\r\n \t\t\t\t\tbreak;\r\n@@ -333,7 +345,7 @@ public TextBounds draw (SpriteBatch spriteBatch, CharSequence str, float x, floa\n \t\t\t\tif (g == null) continue;\r\n \t\t\t\tx += lastGlyph.getKerning(ch);\r\n \t\t\t\tlastGlyph = g;\r\n-\t\t\t\tif(!integer) {\r\n+\t\t\t\tif (!integer) {\r\n \t\t\t\t\tspriteBatch.draw(texture, //\r\n \t\t\t\t\t\tx + lastGlyph.xoffset, y + lastGlyph.yoffset, //\r\n \t\t\t\t\t\tlastGlyph.width, lastGlyph.height, //\r\n@@ -351,7 +363,7 @@ public TextBounds draw (SpriteBatch spriteBatch, CharSequence str, float x, floa\n \t\t\twhile (start < end) {\r\n \t\t\t\tlastGlyph = getGlyph(str.charAt(start++));\r\n \t\t\t\tif (lastGlyph != null) {\r\n-\t\t\t\t\tif(!integer) {\r\n+\t\t\t\t\tif (!integer) {\r\n \t\t\t\t\t\tspriteBatch.draw(texture, //\r\n \t\t\t\t\t\t\tx + lastGlyph.xoffset * scaleX, //\r\n \t\t\t\t\t\t\ty + lastGlyph.yoffset * scaleY, //\r\n@@ -376,7 +388,7 @@ public TextBounds draw (SpriteBatch spriteBatch, CharSequence str, float x, floa\n \t\t\t\tif (g == null) continue;\r\n \t\t\t\tx += lastGlyph.getKerning(ch) * scaleX;\r\n \t\t\t\tlastGlyph = g;\r\n-\t\t\t\tif(!integer) {\r\n+\t\t\t\tif (!integer) {\r\n \t\t\t\t\tspriteBatch.draw(texture, //\r\n \t\t\t\t\t\tx + lastGlyph.xoffset * scaleX, //\r\n \t\t\t\t\t\ty + lastGlyph.yoffset * scaleY, //\r\n@@ -618,27 +630,26 @@ public TextBounds getWrappedBounds (CharSequence str, float wrapWidth) {\n \t}\r\n \r\n \t/**\r\n-\t * Computes the glyph advances for the given character sequence and stores\r\n-\t * them in the provided {@link FloatArray}. The FloatArray is cleared. This\r\n-\t * will add an additional element at the end.\r\n+\t * Computes the glyph advances for the given character sequence and stores them in the provided {@link FloatArray}. The\r\n+\t * FloatArray is cleared. This will add an additional element at the end.\r\n \t * @param str the character sequence\r\n \t * @param glyphAdvances the glyph advances output array.\r\n \t * @param glyphPositions the glyph positions output array.\r\n \t */\r\n-\tpublic void computeGlyphAdvancesAndPositions(CharSequence str, FloatArray glyphAdvances, FloatArray glyphPositions) {\r\n+\tpublic void computeGlyphAdvancesAndPositions (CharSequence str, FloatArray glyphAdvances, FloatArray glyphPositions) {\r\n \t\tglyphAdvances.clear();\r\n \t\tglyphPositions.clear();\r\n \t\tint index = 0;\r\n \t\tint end = str.length();\r\n-\t\tint width = 0;\t\t\r\n+\t\tint width = 0;\r\n \t\tGlyph lastGlyph = null;\r\n \t\tif (scaleX == 1) {\r\n \t\t\tfor (; index < end; index++) {\r\n \t\t\t\tchar ch = str.charAt(index);\r\n \t\t\t\tGlyph g = getGlyph(ch);\r\n \t\t\t\tif (g != null) {\r\n \t\t\t\t\tif (lastGlyph != null) width += lastGlyph.getKerning(ch);\r\n-\t\t\t\t\tlastGlyph = g;\t\t\t\t\t\t\t\r\n+\t\t\t\t\tlastGlyph = g;\r\n \t\t\t\t\tglyphAdvances.add(g.xadvance);\r\n \t\t\t\t\tglyphPositions.add(width);\r\n \t\t\t\t\twidth += g.xadvance;\r\n@@ -653,17 +664,17 @@ public void computeGlyphAdvancesAndPositions(CharSequence str, FloatArray glyphA\n \t\t\t\tGlyph g = getGlyph(ch);\r\n \t\t\t\tif (g != null) {\r\n \t\t\t\t\tif (lastGlyph != null) width += lastGlyph.getKerning(ch) * scaleX;\r\n-\t\t\t\t\tlastGlyph = g;\t\t\t\t\t\r\n+\t\t\t\t\tlastGlyph = g;\r\n \t\t\t\t\tglyphAdvances.add(g.xadvance * scaleX);\r\n \t\t\t\t\tglyphPositions.add(width);\r\n \t\t\t\t\twidth += g.xadvance;\r\n-\t\t\t\t}\t\t\t\r\n+\t\t\t\t}\r\n \t\t\t}\r\n \t\t\tglyphAdvances.add(0);\r\n \t\t\tglyphPositions.add(width);\r\n-\t\t}\t\t\r\n+\t\t}\r\n \t}\r\n-\t\r\n+\r\n \t/**\r\n \t * Returns the number of glyphs from the substring that can be rendered in the specified width.\r\n \t * @param start The first character of the string.\r\n@@ -798,12 +809,11 @@ public float getCapHeight () {\n \tpublic float getAscent () {\r\n \t\treturn ascent;\r\n \t}\r\n-\t\r\n+\r\n \t/**\r\n-\t * Returns the descent, which is the distance from the baseline to the bottom of the glyph 'g'. \r\n-\t * This number is negative.\r\n+\t * Returns the descent, which is the distance from the baseline to the bottom of the glyph 'g'. This number is negative.\r\n \t */\r\n-\tpublic float getDescent() {\r\n+\tpublic float getDescent () {\r\n \t\treturn descent;\r\n \t}\r\n \r\n@@ -895,23 +905,22 @@ static public enum HAlignment {\n \t * @param character\r\n \t * @return whether the given character is contained in this font.\r\n \t */\r\n-\tpublic boolean containsCharacter(char character) {\r\n+\tpublic boolean containsCharacter (char character) {\r\n \t\treturn getGlyph(character) != null;\r\n \t}\r\n-\t\r\n+\r\n \t/**\r\n-\t * Specifies whether to use integer positions or not. Default is to use\r\n-\t * them so filtering doesn't kick in as badly.\r\n-\t * @param use \r\n+\t * Specifies whether to use integer positions or not. Default is to use them so filtering doesn't kick in as badly.\r\n+\t * @param use\r\n \t */\r\n-\tpublic void setUseIntegerPositions(boolean use) {\r\n+\tpublic void setUseIntegerPositions (boolean use) {\r\n \t\tthis.integer = use;\r\n \t}\r\n-\t\r\n+\r\n \t/**\r\n \t * @return whether this font uses integer positions for drawing.\r\n \t */\r\n-\tpublic boolean usesIntegerPositions() {\r\n+\tpublic boolean usesIntegerPositions () {\r\n \t\treturn integer;\r\n \t}\r\n }\r",
      "parent_sha": "c33b566f9df8bd015d098a5daecdc3b4f3ef539a"
    }
  },
  {
    "oid": "48aec3310f21a901a963fc5f1c461242b363b807",
    "message": "[fixed] issue 454, thanks Thotep.",
    "date": "2011-09-15T21:43:33Z",
    "url": "https://github.com/libgdx/libgdx/commit/48aec3310f21a901a963fc5f1c461242b363b807",
    "details": {
      "sha": "4a6b233f0417d0f54d3cfe6c979950af5e44da66",
      "filename": "backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/libgdx/libgdx/blob/48aec3310f21a901a963fc5f1c461242b363b807/backends%2Fgdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidInput.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/48aec3310f21a901a963fc5f1c461242b363b807/backends%2Fgdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidInput.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidInput.java?ref=48aec3310f21a901a963fc5f1c461242b363b807",
      "patch": "@@ -357,6 +357,7 @@ public boolean onKey (View v, int keyCode, android.view.KeyEvent e) {\n \t\t\t\t// Xperia hack for circle key. gah...\r\n \t\t\t\tif (keyCode == android.view.KeyEvent.KEYCODE_BACK && e.isAltPressed()) {\r\n \t\t\t\t\tkeyCode = Keys.BUTTON_CIRCLE;\r\n+\t\t\t\t\tevent.keyCode = keyCode;\r\n \t\t\t\t}\r\n \r\n \t\t\t\tkeyEvents.add(event);\r\n@@ -370,6 +371,7 @@ public boolean onKey (View v, int keyCode, android.view.KeyEvent e) {\n \t\t\t\t// Xperia hack for circle key. gah...\r\n \t\t\t\tif (keyCode == android.view.KeyEvent.KEYCODE_BACK && e.isAltPressed()) {\r\n \t\t\t\t\tkeyCode = Keys.BUTTON_CIRCLE;\r\n+\t\t\t\t\tevent.keyCode = keyCode;\r\n \t\t\t\t}\r\n \t\t\t\tkeyEvents.add(event);\r\n \r\n@@ -379,10 +381,15 @@ public boolean onKey (View v, int keyCode, android.view.KeyEvent e) {\n \t\t\t\tevent.type = KeyEvent.KEY_TYPED;\r\n \t\t\t\tkeyEvents.add(event);\r\n \r\n-\t\t\t\tkeys.remove(e.getKeyCode());\r\n+\t\t\t\tif (keyCode == Keys.BUTTON_CIRCLE)\r\n+\t\t\t\t\tkeys.remove(Keys.BUTTON_CIRCLE);\r\n+\t\t\t\telse\r\n+\t\t\t\t\tkeys.remove(e.getKeyCode());\r\n \t\t\t}\r\n \t\t}\r\n \r\n+\t\t//circle button on Xperia Play shouldn't need catchBack == true\r\n+\t\tif (keyCode == Keys.BUTTON_CIRCLE) return true; \r\n \t\tif (catchBack && keyCode == android.view.KeyEvent.KEYCODE_BACK) return true;\r\n \t\tif (catchMenu && keyCode == android.view.KeyEvent.KEYCODE_MENU) return true;\r\n \t\treturn false;\r",
      "parent_sha": "0575bc12202631e1bfbe718e90acfaa335bc25eb"
    }
  },
  {
    "oid": "22f31a35c133f4fa394f3e80a9e52f155de34042",
    "message": "Don't traverse to disabled text fields.",
    "date": "2013-05-25T15:14:41Z",
    "url": "https://github.com/libgdx/libgdx/commit/22f31a35c133f4fa394f3e80a9e52f155de34042",
    "details": {
      "sha": "1ed79fb75879d5041e854c15e73701f34f3958b0",
      "filename": "gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/libgdx/libgdx/blob/22f31a35c133f4fa394f3e80a9e52f155de34042/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FTextField.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/22f31a35c133f4fa394f3e80a9e52f155de34042/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FTextField.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FTextField.java?ref=22f31a35c133f4fa394f3e80a9e52f155de34042",
      "patch": "@@ -634,6 +634,8 @@ private TextField findNextTextField (Array<Actor> actors, TextField best, Vector\n \t\t\tActor actor = actors.get(i);\r\n \t\t\tif (actor == this) continue;\r\n \t\t\tif (actor instanceof TextField) {\r\n+\t\t\t\tTextField textField = (TextField)actor;\r\n+\t\t\t\tif (textField.isDisabled() || !textField.focusTraversal) continue;\r\n \t\t\t\tVector2 actorCoords = actor.getParent().localToStageCoordinates(tmp3.set(actor.getX(), actor.getY()));\r\n \t\t\t\tif ((actorCoords.y < currentCoords.y || (actorCoords.y == currentCoords.y && actorCoords.x > currentCoords.x)) ^ up) {\r\n \t\t\t\t\tif (best == null\r\n@@ -642,8 +644,8 @@ private TextField findNextTextField (Array<Actor> actors, TextField best, Vector\n \t\t\t\t\t\tbestCoords.set(actorCoords);\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n-\t\t\t}\r\n-\t\t\tif (actor instanceof Group) best = findNextTextField(((Group)actor).getChildren(), best, bestCoords, currentCoords, up);\r\n+\t\t\t} else if (actor instanceof Group)\r\n+\t\t\t\tbest = findNextTextField(((Group)actor).getChildren(), best, bestCoords, currentCoords, up);\r\n \t\t}\r\n \t\treturn best;\r\n \t}\r",
      "parent_sha": "202638b91c9abd6632f89bc3fe99324a40044c61"
    }
  },
  {
    "oid": "381f5ad9860e4f507a174a6210dbc8b7b45657c5",
    "message": "Mario pooped in my map and I just noticed!",
    "date": "2012-07-24T00:36:20Z",
    "url": "https://github.com/libgdx/libgdx/commit/381f5ad9860e4f507a174a6210dbc8b7b45657c5",
    "details": {
      "sha": "7fc5653ab3da759da98e56dc60850b81de8e67e5",
      "filename": "gdx/src/com/badlogic/gdx/utils/ObjectMap.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/libgdx/libgdx/blob/381f5ad9860e4f507a174a6210dbc8b7b45657c5/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Futils%2FObjectMap.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/381f5ad9860e4f507a174a6210dbc8b7b45657c5/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Futils%2FObjectMap.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Futils%2FObjectMap.java?ref=381f5ad9860e4f507a174a6210dbc8b7b45657c5",
      "patch": "@@ -623,8 +623,7 @@ public Array<V> toArray () {\n \t\t\treturn array;\r\n \t\t}\r\n \r\n-\t\t/** Adds the value entries to the given array.\r\n-\t\t * @param array */\r\n+\t\t/** Adds the remaining values to the specified array. */\r\n \t\tpublic void toArray (Array<V> array) {\r\n \t\t\twhile (hasNext)\r\n \t\t\t\tarray.add(next());\r",
      "parent_sha": "cbd8521f2e445ef1c6400bd2b03529f22733471f"
    }
  },
  {
    "oid": "e3a32cbc6e7dc7d424458bf0e02841e97b71c347",
    "message": "added lame validity check for Android SDK in project generator",
    "date": "2014-03-30T15:28:31Z",
    "url": "https://github.com/libgdx/libgdx/commit/e3a32cbc6e7dc7d424458bf0e02841e97b71c347",
    "details": {
      "sha": "6b0f67e47e592dc12819601a292abf134d820f27",
      "filename": "extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetupUI.java",
      "status": "modified",
      "additions": 48,
      "deletions": 33,
      "changes": 81,
      "blob_url": "https://github.com/libgdx/libgdx/blob/e3a32cbc6e7dc7d424458bf0e02841e97b71c347/extensions%2Fgdx-setup%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fsetup%2FGdxSetupUI.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/e3a32cbc6e7dc7d424458bf0e02841e97b71c347/extensions%2Fgdx-setup%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fsetup%2FGdxSetupUI.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/extensions%2Fgdx-setup%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fsetup%2FGdxSetupUI.java?ref=e3a32cbc6e7dc7d424458bf0e02841e97b71c347",
      "patch": "@@ -1,3 +1,4 @@\n+\n package com.badlogic.gdx.setup;\n \n import static java.awt.GridBagConstraints.BOTH;\n@@ -38,7 +39,7 @@ public GdxSetupUI () {\n \t\tsetTitle(\"LibGDX Project Generator\");\n \t\tsetLayout(new BorderLayout());\n \t\tadd(ui, BorderLayout.CENTER);\n-\t\tsetSize(620, 480);\n+\t\tsetSize(620, 620);\n \t\tsetLocationRelativeTo(null);\n \t\tsetVisible(true);\n \t\tsetDefaultCloseOperation(DISPOSE_ON_CLOSE);\n@@ -68,9 +69,14 @@ void generate () {\n \t\t\tJOptionPane.showMessageDialog(this, \"Please enter a destination directory.\");\n \t\t\treturn;\n \t\t}\n+\t\t\n \t\tfinal String sdkLocation = ui.form.sdkLocationText.getText().trim();\n \t\tif (sdkLocation.length() == 0) {\n-\t\t\tJOptionPane.showMessageDialog(this, \"Please enter in your android sdk path\");\n+\t\t\tJOptionPane.showMessageDialog(this, \"Please enter your Android SDK's path\");\n+\t\t\treturn;\n+\t\t}\n+\t\tif(!isSdkLocationValid(sdkLocation)) {\n+\t\t\tJOptionPane.showMessageDialog(this, \"Your Android SDK path doesn't contain an SDK! Please install the Android SDK, including all platforms and build tools!\");\n \t\t\treturn;\n \t\t}\n \n@@ -86,6 +92,10 @@ public void run () {\n \t\t}.start();\n \t}\n \n+\tprivate boolean isSdkLocationValid (String sdkLocation) {\n+\t\treturn new File(sdkLocation, \"tools\").exists() && new File(sdkLocation, \"platforms\").exists();\n+\t}\n+\n \tvoid log (final String text) {\n \t\tEventQueue.invokeLater(new Runnable() {\n \t\t\tpublic void run () {\n@@ -110,7 +120,7 @@ class UI extends JPanel {\n \t\t\t} catch (IOException e) {\n \t\t\t\te.printStackTrace();\n \t\t\t}\n-\t\t\t\n+\n \t\t\ttextArea.setEditable(false);\n \t\t\tuiLayout();\n \t\t\tuiEvents();\n@@ -154,7 +164,7 @@ class Form extends JPanel {\n \t\t}\n \n \t\tprivate void uiLayout () {\n-\t\t\tsetLayout(new GridBagLayout());\t\t\t\t\t\t\t\t\t\t\n+\t\t\tsetLayout(new GridBagLayout());\n \n \t\t\tadd(nameLabel, new GridBagConstraints(0, 0, 1, 1, 0, 0, EAST, NONE, new Insets(0, 0, 6, 6), 0, 0));\n \t\t\tadd(nameText, new GridBagConstraints(1, 0, 2, 1, 1, 0, CENTER, HORIZONTAL, new Insets(0, 0, 6, 0), 0, 0));\n@@ -172,43 +182,48 @@ private void uiLayout () {\n \t\t\tadd(sdkLocationLabel, new GridBagConstraints(0, 4, 1, 1, 0, 0, EAST, NONE, new Insets(0, 0, 0, 6), 0, 0));\n \t\t\tadd(sdkLocationText, new GridBagConstraints(1, 4, 1, 1, 1, 0, CENTER, HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));\n \t\t\tadd(sdkLocationButton, new GridBagConstraints(2, 4, 1, 1, 0, 0, CENTER, NONE, new Insets(0, 6, 0, 0), 0, 0));\n-        }\n+\t\t}\n \n+\t\tprivate File getDirectory() {\n+\t\t\tif(System.getProperty(\"os.name\").contains(\"Mac\")) {\n+\t\t\t\t System.setProperty(\"apple.awt.fileDialogForDirectories\", \"true\");\n+\t\t\t\t FileDialog dialog = new FileDialog(GdxSetupUI.this, \"Choose destination\", FileDialog.LOAD);\n+\t\t\t\t dialog.setVisible(true);\n+\t\t\t\t String name = dialog.getFile();\n+\t\t\t\t String dir = dialog.getDirectory();\n+\t\t\t\t if (name == null || dir == null) return null;\n+\t\t\t\t return new File(dialog.getDirectory(), dialog.getFile());\n+\t\t\t} else {\n+\t\t\t\tJFileChooser chooser = new JFileChooser();\n+\t\t\t\tchooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n+\t\t\t\tchooser.setDialogTitle(\"Chose destination\");\n+\t\t\t\tint result = chooser.showOpenDialog(null);\n+\t\t\t\tif (result == JFileChooser.APPROVE_OPTION) {\n+\t\t\t\t\tFile dir = chooser.getSelectedFile();\n+\t\t\t\t\tif (dir == null) return null;\n+\t\t\t\t\tif (dir.getAbsolutePath().trim().length() == 0) return null;\n+\t\t\t\t\treturn dir;\n+\t\t\t\t} else {\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\t\n \t\tprivate void uiEvents () {\n \t\t\tdestinationButton.addActionListener(new ActionListener() {\n-\t\t\t\tpublic void actionPerformed (ActionEvent e) {\n-//\t\t\t\t\tSystem.setProperty(\"apple.awt.fileDialogForDirectories\", \"true\");\n-//\t\t\t\t\tFileDialog dialog = new FileDialog(GdxSetupUI.this, \"Choose destination\", FileDialog.LOAD);\n-//\t\t\t\t\tdialog.setVisible(true);\t\t\t\t\t\n-//\t\t\t\t\tString name = dialog.getFile();\n-//\t\t\t\t\tString dir = dialog.getDirectory();\n-//\t\t\t\t\tif (name == null || dir == null) return;\n-\t\t\t\t\t\n-\t\t\t\t\tJFileChooser chooser = new JFileChooser();\n-\t\t\t\t\tchooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n-\t\t\t\t\tchooser.setDialogTitle(\"Chose destination\");\t\t\t\t\n-\t\t\t\t\tint result = chooser.showOpenDialog(null);\n-\t\t\t\t\tif(result == JFileChooser.APPROVE_OPTION) {\n-\t\t\t\t\t\tFile dir = chooser.getSelectedFile();\n-\t\t\t\t\t\tif(dir == null) return;\n-\t\t\t\t\t\tif(dir.getAbsolutePath().trim().length() == 0) return;\n-\t\t\t\t\t\tdestinationText.setText(dir.getAbsolutePath());\n+\t\t\t\tpublic void actionPerformed (ActionEvent e) {\t\t\t\t\t\n+\t\t\t\t\tFile path = getDirectory();\n+\t\t\t\t\tif(path != null) {\n+\t\t\t\t\t\tdestinationText.setText(path.getAbsolutePath());\n \t\t\t\t\t}\n-\t\t\t\t\t\n \t\t\t\t}\n \t\t\t});\n \t\t\tsdkLocationButton.addActionListener(new ActionListener() {\n \t\t\t\t@Override\n-\t\t\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\t\t\tJFileChooser chooser = new JFileChooser();\n-\t\t\t\t\tchooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n-\t\t\t\t\tchooser.setDialogTitle(\"Chose destination\");\n-\t\t\t\t\tint result = chooser.showOpenDialog(null);\n-\t\t\t\t\tif(result == JFileChooser.APPROVE_OPTION) {\n-\t\t\t\t\t\tFile dir = chooser.getSelectedFile();\n-\t\t\t\t\t\tif(dir == null) return;\n-\t\t\t\t\t\tif(dir.getAbsolutePath().trim().length() == 0) return;\n-\t\t\t\t\t\tsdkLocationText.setText(dir.getAbsolutePath());\n+\t\t\t\tpublic void actionPerformed (ActionEvent e) {\n+\t\t\t\t\tFile path = getDirectory();\n+\t\t\t\t\tif(path != null) {\n+\t\t\t\t\t\tsdkLocationText.setText(path.getAbsolutePath());\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t});",
      "parent_sha": "0435a41f7adda5038d5ff29b9b178a947c60132e"
    }
  },
  {
    "oid": "6ff0a388a0b267078607bdfdf92434943aee1b32",
    "message": "[fixed] RotateBy, end condition was wrong. Rotation delta was set, not start rotation + delta...",
    "date": "2011-02-26T20:32:28Z",
    "url": "https://github.com/libgdx/libgdx/commit/6ff0a388a0b267078607bdfdf92434943aee1b32",
    "details": {
      "sha": "a12f8b283badbf823e49b01bec8f2a914beb1e3a",
      "filename": "gdx/src/com/badlogic/gdx/scenes/scene2d/actions/RotateBy.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/libgdx/libgdx/blob/6ff0a388a0b267078607bdfdf92434943aee1b32/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Factions%2FRotateBy.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/6ff0a388a0b267078607bdfdf92434943aee1b32/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Factions%2FRotateBy.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Factions%2FRotateBy.java?ref=6ff0a388a0b267078607bdfdf92434943aee1b32",
      "patch": "@@ -49,7 +49,7 @@ public class RotateBy extends AnimationAction {\n \t@Override public void act (float delta) {\r\n \t\tfloat alpha = createInterpolatedAlpha(delta);\r\n \t\tif (done) {\r\n-\t\t\ttarget.rotation = rotation;\r\n+\t\t\ttarget.rotation = startRotation + rotation;\r\n \t\t} else {\r\n \t\t\ttarget.rotation = startRotation + deltaRotation * alpha;\r\n \t\t}\r",
      "parent_sha": "69a8d3f7e32e9d92101347e22d589198349ca373"
    }
  },
  {
    "oid": "be5a95e12fa9528b8c8462e09600a236dff15a52",
    "message": "Bugfix: dispose never called in nested fragment",
    "date": "2015-05-21T17:38:35Z",
    "url": "https://github.com/libgdx/libgdx/commit/be5a95e12fa9528b8c8462e09600a236dff15a52",
    "details": {
      "sha": "8cf414b428185eb2a5e297d358bc6830b33c67e9",
      "filename": "backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidFragmentApplication.java",
      "status": "modified",
      "additions": 20,
      "deletions": 2,
      "changes": 22,
      "blob_url": "https://github.com/libgdx/libgdx/blob/be5a95e12fa9528b8c8462e09600a236dff15a52/backends%2Fgdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidFragmentApplication.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/be5a95e12fa9528b8c8462e09600a236dff15a52/backends%2Fgdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidFragmentApplication.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidFragmentApplication.java?ref=be5a95e12fa9528b8c8462e09600a236dff15a52",
      "patch": "@@ -214,8 +214,8 @@ public void onPause () {\n \t\tinput.onPause();\n \n \t\t// davebaol & mobidevelop:\n-\t\t// This fragment is currently being removed from its activity or the activity is in the process of finishing\n-\t\tif (isRemoving() || getActivity().isFinishing()) {\n+\t\t// This fragment (or one of the parent)  is currently being removed from its activity or the activity is in the process of finishing\n+\t\tif (isRemoving() || isAnyParentFragmentRemoving() || getActivity().isFinishing()) {\n \t\t\tgraphics.clearManagedCaches();\n \t\t\tgraphics.destroy();\n \t\t}\n@@ -464,4 +464,22 @@ public Handler getHandler () {\n \tpublic WindowManager getWindowManager () {\n \t\treturn (WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE);\n \t}\n+\n+\t/**\n+\t* Iterates over nested fragments hierarchy and returns true if one of the fragment is in the removal process\n+\t*\n+\t* @return true - one of the parent fragments is being removed\n+\t*/\n+\tprivate boolean isAnyParentFragmentRemoving() {\n+\t\tFragment fragment = getParentFragment();\n+\n+\t\t while (fragment != null) {\n+\t\t\tif (fragment.isRemoving())\n+\t\t\t\treturn true;\n+\n+\t\t\tfragment = fragment.getParentFragment();\n+\t\t}\n+\n+\t\treturn false;\n+\t}\n }",
      "parent_sha": "15785302f24985fa4e2b2d322258acf18a7d0914"
    }
  },
  {
    "oid": "52abf09c06d2380ad56cc9d78db22792137102af",
    "message": "setFollowRedirects accoring to HttpRequest\n\nAdds a call to setFollowRedirects on the HttpURLConnection so that this is set according to the HttpRequest.\r\nCorresponding pull request: (this uses a method introduced in the pull request/change to Net.HttpRequest below)\r\nhttps://github.com/libgdx/libgdx/pull/2054",
    "date": "2014-06-30T16:29:56Z",
    "url": "https://github.com/libgdx/libgdx/commit/52abf09c06d2380ad56cc9d78db22792137102af",
    "details": {
      "sha": "303f8033907b1ee3edb22c0f7f2a5db5a0dd9c12",
      "filename": "gdx/src/com/badlogic/gdx/net/NetJavaImpl.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/libgdx/libgdx/blob/52abf09c06d2380ad56cc9d78db22792137102af/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fnet%2FNetJavaImpl.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/52abf09c06d2380ad56cc9d78db22792137102af/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fnet%2FNetJavaImpl.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fnet%2FNetJavaImpl.java?ref=52abf09c06d2380ad56cc9d78db22792137102af",
      "patch": "@@ -139,13 +139,14 @@ public void sendHttpRequest (final HttpRequest httpRequest, final HttpResponseLi\n \t\t\t} else {\r\n \t\t\t\turl = new URL(httpRequest.getUrl());\r\n \t\t\t}\r\n-\r\n+\t\t\t\r\n \t\t\tfinal HttpURLConnection connection = (HttpURLConnection)url.openConnection();\r\n \t\t\t// should be enabled to upload data.\r\n \t\t\tfinal boolean doingOutPut = method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT);\r\n \t\t\tconnection.setDoOutput(doingOutPut);\r\n \t\t\tconnection.setDoInput(true);\r\n \t\t\tconnection.setRequestMethod(method);\r\n+\t\t\tconnection.setFollowRedirects(httpRequest.getFollowRedirects());\r\n \r\n \t\t\tlock.lock();\r\n \t\t\tconnections.put(httpRequest, connection);\r",
      "parent_sha": "6213ea7b743b6cca6205e3d93b44d1a2c8b2ab43"
    }
  },
  {
    "oid": "0e941e4cf98c5e8a268e50341914fac65f8209b7",
    "message": "Closes #2798, ShaderProgram#setUniform supposed to throw an exception in case the program isn't bound. However, this may have side effects in existing code and add additional runtime overhead. Fixed the Javadocs to say that the program must be bound instead.",
    "date": "2015-02-02T16:10:45Z",
    "url": "https://github.com/libgdx/libgdx/commit/0e941e4cf98c5e8a268e50341914fac65f8209b7",
    "details": {
      "sha": "eeebf732e440a76ff52bad025735a48247021610",
      "filename": "gdx/src/com/badlogic/gdx/graphics/glutils/ShaderProgram.java",
      "status": "modified",
      "additions": 19,
      "deletions": 38,
      "changes": 57,
      "blob_url": "https://github.com/libgdx/libgdx/blob/0e941e4cf98c5e8a268e50341914fac65f8209b7/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fglutils%2FShaderProgram.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/0e941e4cf98c5e8a268e50341914fac65f8209b7/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fglutils%2FShaderProgram.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fglutils%2FShaderProgram.java?ref=0e941e4cf98c5e8a268e50341914fac65f8209b7",
      "patch": "@@ -290,8 +290,7 @@ public int fetchUniformLocation (String name, boolean pedantic) {\n \t\treturn location;\r\n \t}\r\n \r\n-\t/** Sets the uniform with the given name. Throws an IllegalArgumentException in case it is not called in between a\r\n-\t * {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets the uniform with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the name of the uniform\r\n \t * @param value the value */\r\n@@ -308,8 +307,7 @@ public void setUniformi (int location, int value) {\n \t\tgl.glUniform1i(location, value);\r\n \t}\r\n \r\n-\t/** Sets the uniform with the given name. Throws an IllegalArgumentException in case it is not called in between a\r\n-\t * {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets the uniform with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the name of the uniform\r\n \t * @param value1 the first value\r\n@@ -327,8 +325,7 @@ public void setUniformi (int location, int value1, int value2) {\n \t\tgl.glUniform2i(location, value1, value2);\r\n \t}\r\n \r\n-\t/** Sets the uniform with the given name. Throws an IllegalArgumentException in case it is not called in between a\r\n-\t * {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets the uniform with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the name of the uniform\r\n \t * @param value1 the first value\r\n@@ -347,8 +344,7 @@ public void setUniformi (int location, int value1, int value2, int value3) {\n \t\tgl.glUniform3i(location, value1, value2, value3);\r\n \t}\r\n \r\n-\t/** Sets the uniform with the given name. Throws an IllegalArgumentException in case it is not called in between a\r\n-\t * {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets the uniform with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the name of the uniform\r\n \t * @param value1 the first value\r\n@@ -368,8 +364,7 @@ public void setUniformi (int location, int value1, int value2, int value3, int v\n \t\tgl.glUniform4i(location, value1, value2, value3, value4);\r\n \t}\r\n \r\n-\t/** Sets the uniform with the given name. Throws an IllegalArgumentException in case it is not called in between a\r\n-\t * {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets the uniform with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the name of the uniform\r\n \t * @param value the value */\r\n@@ -386,8 +381,7 @@ public void setUniformf (int location, float value) {\n \t\tgl.glUniform1f(location, value);\r\n \t}\r\n \r\n-\t/** Sets the uniform with the given name. Throws an IllegalArgumentException in case it is not called in between a\r\n-\t * {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets the uniform with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the name of the uniform\r\n \t * @param value1 the first value\r\n@@ -405,8 +399,7 @@ public void setUniformf (int location, float value1, float value2) {\n \t\tgl.glUniform2f(location, value1, value2);\r\n \t}\r\n \r\n-\t/** Sets the uniform with the given name. Throws an IllegalArgumentException in case it is not called in between a\r\n-\t * {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets the uniform with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the name of the uniform\r\n \t * @param value1 the first value\r\n@@ -425,8 +418,7 @@ public void setUniformf (int location, float value1, float value2, float value3)\n \t\tgl.glUniform3f(location, value1, value2, value3);\r\n \t}\r\n \r\n-\t/** Sets the uniform with the given name. Throws an IllegalArgumentException in case it is not called in between a\r\n-\t * {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets the uniform with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the name of the uniform\r\n \t * @param value1 the first value\r\n@@ -498,17 +490,15 @@ public void setUniform4fv (int location, float[] values, int offset, int length)\n \t\tgl.glUniform4fv(location, length / 4, values, offset);\r\n \t}\r\n \r\n-\t/** Sets the uniform matrix with the given name. Throws an IllegalArgumentException in case it is not called in between a\r\n-\t * {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets the uniform matrix with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the name of the uniform\r\n \t * @param matrix the matrix */\r\n \tpublic void setUniformMatrix (String name, Matrix4 matrix) {\r\n \t\tsetUniformMatrix(name, matrix, false);\r\n \t}\r\n \r\n-\t/** Sets the uniform matrix with the given name. Throws an IllegalArgumentException in case it is not called in between a\r\n-\t * {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets the uniform matrix with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the name of the uniform\r\n \t * @param matrix the matrix\r\n@@ -527,17 +517,15 @@ public void setUniformMatrix (int location, Matrix4 matrix, boolean transpose) {\n \t\tgl.glUniformMatrix4fv(location, 1, transpose, matrix.val, 0);\r\n \t}\r\n \r\n-\t/** Sets the uniform matrix with the given name. Throws an IllegalArgumentException in case it is not called in between a\r\n-\t * {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets the uniform matrix with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the name of the uniform\r\n \t * @param matrix the matrix */\r\n \tpublic void setUniformMatrix (String name, Matrix3 matrix) {\r\n \t\tsetUniformMatrix(name, matrix, false);\r\n \t}\r\n \r\n-\t/** Sets the uniform matrix with the given name. Throws an IllegalArgumentException in case it is not called in between a\r\n-\t * {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets the uniform matrix with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the name of the uniform\r\n \t * @param matrix the matrix\r\n@@ -556,8 +544,7 @@ public void setUniformMatrix (int location, Matrix3 matrix, boolean transpose) {\n \t\tgl.glUniformMatrix3fv(location, 1, transpose, matrix.val, 0);\r\n \t}\r\n \r\n-\t/** Sets an array of uniform matrices with the given name. Throws an IllegalArgumentException in case it is not called in\r\n-\t * between a {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets an array of uniform matrices with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the name of the uniform\r\n \t * @param buffer buffer containing the matrix data\r\n@@ -570,8 +557,7 @@ public void setUniformMatrix3fv (String name, FloatBuffer buffer, int count, boo\n \t\tgl.glUniformMatrix3fv(location, count, transpose, buffer);\r\n \t}\r\n \r\n-\t/** Sets an array of uniform matrices with the given name. Throws an IllegalArgumentException in case it is not called in\r\n-\t * between a {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets an array of uniform matrices with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the name of the uniform\r\n \t * @param buffer buffer containing the matrix data\r\n@@ -594,8 +580,7 @@ public void setUniformMatrix4fv (String name, float[] values, int offset, int le\n \t\tsetUniformMatrix4fv(fetchUniformLocation(name), values, offset, length);\r\n \t}\r\n \r\n-\t/** Sets the uniform with the given name. Throws an IllegalArgumentException in case it is not called in between a\r\n-\t * {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets the uniform with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the name of the uniform\r\n \t * @param values x and y as the first and second values respectively */\r\n@@ -607,8 +592,7 @@ public void setUniformf (int location, Vector2 values) {\n \t\tsetUniformf(location, values.x, values.y);\r\n \t}\r\n \r\n-\t/** Sets the uniform with the given name. Throws an IllegalArgumentException in case it is not called in between a\r\n-\t * {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets the uniform with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the name of the uniform\r\n \t * @param values x, y and z as the first, second and third values respectively */\r\n@@ -620,8 +604,7 @@ public void setUniformf (int location, Vector3 values) {\n \t\tsetUniformf(location, values.x, values.y, values.z);\r\n \t}\r\n \r\n-\t/** Sets the uniform with the given name. Throws an IllegalArgumentException in case it is not called in between a\r\n-\t * {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets the uniform with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the name of the uniform\r\n \t * @param values r, g, b and a as the first through fourth values respectively */\r\n@@ -633,8 +616,7 @@ public void setUniformf (int location, Color values) {\n \t\tsetUniformf(location, values.r, values.g, values.b, values.a);\r\n \t}\r\n \r\n-\t/** Sets the vertex attribute with the given name. Throws an IllegalArgumentException in case it is not called in between a\r\n-\t * {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets the vertex attribute with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the attribute name\r\n \t * @param size the number of components, must be >= 1 and <= 4\r\n@@ -657,8 +639,7 @@ public void setVertexAttribute (int location, int size, int type, boolean normal\n \t\tgl.glVertexAttribPointer(location, size, type, normalize, stride, buffer);\r\n \t}\r\n \r\n-\t/** Sets the vertex attribute with the given name. Throws an IllegalArgumentException in case it is not called in between a\r\n-\t * {@link #begin()}/{@link #end()} block.\r\n+\t/** Sets the vertex attribute with the given name. The {@link ShaderProgram} must be bound for this to work.\r\n \t * \r\n \t * @param name the attribute name\r\n \t * @param size the number of components, must be >= 1 and <= 4\r",
      "parent_sha": "5ca6857a20dbdd8f4a3b05807a02aa34db2077f6"
    }
  },
  {
    "oid": "bbaef52229556cf17091b7898750990ae299c063",
    "message": "Tree, spacing before the first node.",
    "date": "2012-09-03T04:59:21Z",
    "url": "https://github.com/libgdx/libgdx/commit/bbaef52229556cf17091b7898750990ae299c063",
    "details": {
      "sha": "759a603396f7a447924b5f94595c5f1ed7a13d5d",
      "filename": "gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/libgdx/libgdx/blob/bbaef52229556cf17091b7898750990ae299c063/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FTree.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/bbaef52229556cf17091b7898750990ae299c063/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FTree.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FTree.java?ref=bbaef52229556cf17091b7898750990ae299c063",
      "patch": "@@ -150,7 +150,7 @@ private void computeSize () {\n \t\tcomputeSize(rootNodes, indentSpacing);\r\n \t\tleftColumnWidth += iconSpacing + padding;\r\n \t\tprefWidth += leftColumnWidth + padding;\r\n-\t\tprefHeight = getHeight() - (prefHeight + ySpacing);\r\n+\t\tprefHeight = getHeight() - prefHeight;\r\n \t}\r\n \r\n \tprivate void computeSize (Array<Node> nodes, float indent) {\r\n@@ -180,7 +180,7 @@ private void computeSize (Array<Node> nodes, float indent) {\n \r\n \tpublic void layout () {\r\n \t\tif (sizeInvalid) computeSize();\r\n-\t\tlayout(rootNodes, leftColumnWidth + indentSpacing, getHeight());\r\n+\t\tlayout(rootNodes, leftColumnWidth + indentSpacing, getHeight() - ySpacing / 2);\r\n \t}\r\n \r\n \tprivate float layout (Array<Node> nodes, float indent, float y) {\r",
      "parent_sha": "6e637b12ff754878f4f14d7f31d0ab1b0d4420d0"
    }
  },
  {
    "oid": "fed93d386c6d7c4710d37a791f140149f62c93ba",
    "message": "Fix setBounds",
    "date": "2022-07-09T01:47:53Z",
    "url": "https://github.com/libgdx/libgdx/commit/fed93d386c6d7c4710d37a791f140149f62c93ba",
    "details": {
      "sha": "5210aeb777a0e6e46b48cb84c660d9b73040265d",
      "filename": "gdx/src/com/badlogic/gdx/math/collision/OrientedBoundingBox.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/libgdx/libgdx/blob/fed93d386c6d7c4710d37a791f140149f62c93ba/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2Fcollision%2FOrientedBoundingBox.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/fed93d386c6d7c4710d37a791f140149f62c93ba/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2Fcollision%2FOrientedBoundingBox.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2Fcollision%2FOrientedBoundingBox.java?ref=fed93d386c6d7c4710d37a791f140149f62c93ba",
      "patch": "@@ -87,7 +87,7 @@ public BoundingBox getBounds () {\n \t}\n \n \tpublic void setBounds (BoundingBox bounds) {\n-\t\tbounds.set(bounds);\n+\t\tthis.bounds.set(bounds);\n \t\tbounds.getCorner000(vertices[0b000]).mul(transform);\n \t\tbounds.getCorner001(vertices[0b001]).mul(transform);\n \t\tbounds.getCorner010(vertices[0b010]).mul(transform);\n@@ -109,7 +109,7 @@ public void setTransform (Matrix4 transform) {\n \t}\n \n \tpublic OrientedBoundingBox set (BoundingBox bounds, Matrix4 transform) {\n-\t\tbounds.set(bounds);\n+\t\tsetBounds(bounds);\n \t\tsetTransform(transform);\n \t\treturn this;\n \t}",
      "parent_sha": "69b2dcce990fa4243023275ec4751ce4e0789c5c"
    }
  },
  {
    "oid": "39bc007deccc481a31990fe5cb5bb6012a313ea1",
    "message": "Changed param order, added javadoc.\n\n#1666\nI was wrong, the param order should match dragStart, as @nooone originally had it. Sorry for the churn!",
    "date": "2014-04-16T15:15:59Z",
    "url": "https://github.com/libgdx/libgdx/commit/39bc007deccc481a31990fe5cb5bb6012a313ea1",
    "details": {
      "sha": "779bf9651e917b0e43f1e77653ffc69140e62d2c",
      "filename": "gdx/src/com/badlogic/gdx/scenes/scene2d/utils/DragAndDrop.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/libgdx/libgdx/blob/39bc007deccc481a31990fe5cb5bb6012a313ea1/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Futils%2FDragAndDrop.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/39bc007deccc481a31990fe5cb5bb6012a313ea1/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Futils%2FDragAndDrop.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Futils%2FDragAndDrop.java?ref=39bc007deccc481a31990fe5cb5bb6012a313ea1",
      "patch": "@@ -126,7 +126,7 @@ public void dragStop (InputEvent event, float x, float y, int pointer) {\n \t\t\t\t\ttarget.actor.stageToLocalCoordinates(tmpVector.set(stageX, stageY));\n \t\t\t\t\ttarget.drop(source, payload, tmpVector.x, tmpVector.y, pointer);\n \t\t\t\t}\n-\t\t\t\tsource.dragStop(event, payload, x, y, pointer, isValidTarget ? target : null);\n+\t\t\t\tsource.dragStop(event, x, y, pointer, payload, isValidTarget ? target : null);\n \t\t\t\tif (target != null) target.reset(source, payload);\n \t\t\t\tpayload = null;\n \t\t\t\ttarget = null;\n@@ -210,8 +210,9 @@ public Source (Actor actor) {\n \t\t/** @return May be null. */\n \t\tabstract public Payload dragStart (InputEvent event, float x, float y, int pointer);\n \n-\t\t/** @param target null if not dropped on a valid target. */\n-\t\tpublic void dragStop (InputEvent event, Payload payload, float x, float y, int pointer, Target target) {\n+\t\t/** @param payload null if dragStart returned null.\n+\t\t * @param target null if not dropped on a valid target. */\n+\t\tpublic void dragStop (InputEvent event, float x, float y, int pointer, Payload payload, Target target) {\n \t\t}\n \n \t\tpublic Actor getActor () {",
      "parent_sha": "ba88a282553d4b978fcca5ae2642753c56c484d5"
    }
  },
  {
    "oid": "11a8e80ec3d465a038e18b3a9bd7283a4125dfee",
    "message": "Add additional methods to Bits\n\nSome of these methods were requested in Issue 1562, but I added a few more\nwhile I was in there.",
    "date": "2013-07-20T15:23:20Z",
    "url": "https://github.com/libgdx/libgdx/commit/11a8e80ec3d465a038e18b3a9bd7283a4125dfee",
    "details": {
      "sha": "f4a0f166c5ea043cfda5f519121de7ce733b7cd3",
      "filename": "gdx/src/com/badlogic/gdx/utils/Bits.java",
      "status": "modified",
      "additions": 165,
      "deletions": 35,
      "changes": 200,
      "blob_url": "https://github.com/libgdx/libgdx/blob/11a8e80ec3d465a038e18b3a9bd7283a4125dfee/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Futils%2FBits.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/11a8e80ec3d465a038e18b3a9bd7283a4125dfee/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Futils%2FBits.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Futils%2FBits.java?ref=11a8e80ec3d465a038e18b3a9bd7283a4125dfee",
      "patch": "@@ -1,75 +1,205 @@\n \r\n package com.badlogic.gdx.utils;\r\n \r\n-import java.util.Arrays;\r\n-\r\n /** A bitset, without size limitation, allows comparison via bitwise operators to other bitfields.\r\n- * @author mzechner */\r\n+ * \r\n+ * @author mzechner\r\n+ * @author jshapcott */\r\n public class Bits {\r\n-\tlong[] bits = { 0 };\r\n+  \r\n+\tlong[] bits = {0};\r\n \r\n-\t/**\r\n-\t * @param index the index of the bit\r\n-\t * @return whether the bit is set\r\n-\t * @throws ArrayIndexOutOfBoundsException if index < 0\r\n+\tpublic Bits () {\r\n+\t}\r\n+\r\n+\t\r\n+\t/** Creates a bit set whose initial size is large enough to explicitly represent bits with indices in the range 0 through nbits-1.\r\n+\t * @param nbits the initial size of the bit set\r\n \t */\r\n+\tpublic Bits (int nbits) {\r\n+\t\tcheckCapacity(nbits >>> 6);\r\n+\t}\r\n+\r\n+\t/** @param index the index of the bit\r\n+\t * @return whether the bit is set\r\n+\t * @throws ArrayIndexOutOfBoundsException if index < 0 */\r\n \tpublic boolean get (int index) {\r\n \t\tfinal int word = index >>> 6;\r\n-\t\tif(word >= bits.length) return false;\r\n+\t\tif (word >= bits.length) return false;\r\n \t\treturn (bits[word] & (1L << (index & 0x3F))) != 0L;\r\n \t}\r\n \r\n-\t/**\r\n-\t * @param index the index of the bit to set\r\n-\t * @throws ArrayIndexOutOfBoundsException if index < 0\r\n-\t */\r\n+\t/** @param index the index of the bit to set\r\n+\t * @throws ArrayIndexOutOfBoundsException if index < 0 */\r\n \tpublic void set (int index) {\r\n \t\tfinal int word = index >>> 6;\r\n \t\tcheckCapacity(word);\r\n \t\tbits[word] |= 1L << (index & 0x3F);\r\n \t}\r\n-\t\r\n-\t/**\r\n-\t * @param index the index of the bit to flip\r\n-\t */\r\n-\tpublic void flip(int index) {\r\n+\r\n+\t/** @param index the index of the bit to flip */\r\n+\tpublic void flip (int index) {\r\n \t\tfinal int word = index >>> 6;\r\n \t\tcheckCapacity(word);\r\n \t\tbits[word] ^= 1L << (index & 0x3F);\r\n \t}\r\n-\t\r\n-\tprivate void checkCapacity(int len) {\r\n-\t\tif(len>=bits.length) {\r\n-\t\t\tlong[] newBits = new long[len+1];\r\n+\r\n+\tprivate void checkCapacity (int len) {\r\n+\t\tif (len >= bits.length) {\r\n+\t\t\tlong[] newBits = new long[len + 1];\r\n \t\t\tSystem.arraycopy(bits, 0, newBits, 0, bits.length);\r\n \t\t\tbits = newBits;\r\n \t\t}\r\n \t}\r\n \r\n-\t/**\r\n-\t * @param index the index of the bit to clear\r\n-\t * @throws ArrayIndexOutOfBoundsException if index < 0\r\n-\t */\r\n+\t/** @param index the index of the bit to clear\r\n+\t * @throws ArrayIndexOutOfBoundsException if index < 0 */\r\n \tpublic void clear (int index) {\r\n \t\tfinal int word = index >>> 6;\r\n-\t\tif(word >= bits.length) return;\r\n+\t\tif (word >= bits.length) return;\r\n \t\tbits[word] &= ~(1L << (index & 0x3F));\r\n \t}\r\n \r\n-\t/**\r\n-\t * Clears the entire bitset\r\n-\t */\r\n+\t/** Clears the entire bitset */\r\n \tpublic void clear () {\r\n \t\tint length = bits.length;\r\n \t\tfor (int i = 0; i < length; i++) {\r\n \t\t\tbits[i] = 0L;\r\n \t\t}\r\n \t}\r\n+\r\n+\t/** @return the number of bits currently stored, <b>not</b> the highset set bit! */\r\n+\tpublic int numBits () {\r\n+\t\treturn bits.length << 6;\r\n+\t}\r\n+\r\n+\t/** Returns the \"logical size\" of this bitset: the index of the highest set bit in the bitset plus one. Returns zero if the\r\n+\t * bitset contains no set bits.\r\n+\t * \r\n+\t * @return the logical size of this bitset */\r\n+\tpublic int length () {\r\n+\t\tfor (int word = bits.length - 1; word >= 0; --word) {\r\n+\t\t\tif (bits[word] != 0) {\r\n+\t\t\t\tfor (int bit = 63; bit >= 0; --bit) {\r\n+\t\t\t\t\tif ((bits[word] & (1L << (bit & 0x3F))) != 0L) {\r\n+\t\t\t\t\t\treturn (word << 6) + bit;\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn 0;\r\n+\t}\r\n+\r\n+\t/** @return true if this bitset contains no bits that are set to true */\r\n+\tpublic boolean isEmpty () {\r\n+\t\tint length = bits.length;\r\n+\t\tfor (int i = 0; i < length; i++) {\r\n+\t\t\tif (bits[i] != 0L) {\r\n+\t\t\t\treturn false;\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t/** Returns the index of the first bit that is set to true that occurs on or after the specified starting index. If no such bit\r\n+\t * exists then -1 is returned. */\r\n+\tpublic int nextSetBit (int fromIndex) {\r\n+\t\tint word = fromIndex >>> 6;\r\n+\t\tif (word >= bits.length) return -1;\r\n+\t\tfor (int i = fromIndex & 0x3f; i < 64; i++) {\r\n+\t\t\tif ((bits[word] & (1L << (i & 0x3F))) != 0L) {\r\n+\t\t\t\treturn (word << 6) + i;\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tfor (word++; word < bits.length; word++) {\r\n+\t\t\tif (word != 0) {\r\n+\t\t\t\tfor (int i = 0; i < 64; i++) {\r\n+\t\t\t\t\tif ((bits[word] & (1L << (i & 0x3F))) != 0L) {\r\n+\t\t\t\t\t\treturn (word << 6) + i;\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn -1;\r\n+\t}\r\n+\r\n+\t/** Returns the index of the first bit that is set to false that occurs on or after the specified starting index. If no such bit\r\n+\t * exists then -1 is returned. */\r\n+\tpublic int nextClearBit (int fromIndex) {\r\n+\t\tint word = fromIndex >>> 6;\r\n+\t\tif (word >= bits.length) return -1;\r\n+\t\tfor (int i = fromIndex & 0x3f; i < 64; i++) {\r\n+\t\t\tif ((bits[word] & (1L << (i & 0x3F))) == 0L) {\r\n+\t\t\t\treturn (word << 6) + i;\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tfor (word++; word < bits.length; word++) {\r\n+\t\t\tif (word == 0) {\r\n+\t\t\t\treturn word << 6;\r\n+\t\t\t}\r\n+\t\t\tfor (int i = 0; i < 64; i++) {\r\n+\t\t\t\tif ((bits[word] & (1L << (i & 0x3F))) == 0L) {\r\n+\t\t\t\t\treturn (word << 6) + i;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn -1;\r\n+\t}\r\n+\r\n+\t/** Performs a logical <b>AND</b> of this target bit set with the argument bit set. This bit set is modified so that each bit in it has\r\n+\t * the value true if and only if it both initially had the value true and the corresponding bit in the bit set argument also\r\n+\t * had the value true.\r\n+\t * @param other a bit set */\r\n+\tpublic void and (Bits other) {\r\n+\t\tfor (int i = 0, j = bits.length, k = other.bits.length; i < j && i < k; i++) {\r\n+\t\t\tbits[i] &= other.bits[i];\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/** Clears all of the bits in this bit set whose corresponding bit is set in the specified bit set.\r\n+\t * \r\n+\t * @param other a bit set */\t\r\n+\tpublic void andNot (Bits other) {\r\n+\t\tfor (int i = 0, j = bits.length, k = other.bits.length; i < j && i < k; i++) {\r\n+\t\t\tbits[i] &= ~other.bits[i];\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/** Performs a logical <b>OR</b> of this bit set with the bit set argument. This bit set is modified so that a bit in it has the value\r\n+\t * true if and only if it either already had the value true or the corresponding bit in the bit set argument has the value\r\n+\t * true.\r\n+\t * @param other a bit set */\r\n+\tpublic void or (Bits other) {\r\n+\t\tfor (int i = 0, j = bits.length, k = other.bits.length; i < j && i < k; i++) {\r\n+\t\t\tbits[i] |= other.bits[i];\r\n+\t\t}\r\n+\t}\r\n \t\r\n-\t/**\r\n-\t * @return the number of bits currently stored, <b>not</b> the highset set bit!\r\n+\t/** Performs a logical <b>XOR</b> of this bit set with the bit set argument. This bit set is modified so that a bit in it has the value true if and only if one of the following statements holds: \r\n+\t * <ul>\r\n+\t * <li>The bit initially has the value true, and the corresponding bit in the argument has the value false.</li> \r\n+\t * <li>The bit initially has the value false, and the corresponding bit in the argument has the value true. </li>\r\n+\t * </ul>\r\n+\t * @param other\r\n \t */\r\n-\tpublic int numBits() {\r\n-\t\treturn bits.length << 6;\r\n+\tpublic void xor (Bits other) {\r\n+\t\tfor (int i = 0, j = bits.length, k = other.bits.length; i < j && i < k; i++) {\r\n+\t\t\tbits[i] ^= other.bits[i];\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/** Returns true if the specified BitSet has any bits set to true that are also set to true in this BitSet.\r\n+\t * \r\n+\t * @param other a bit set\r\n+\t * @return boolean indicating whether this bit set intersects the specified bit set\r\n+\t */\r\n+\tpublic boolean intersects (Bits other) {\r\n+\t\tfor (int i = 0, j = bits.length, k = other.bits.length; i < j && i < k; i++) {\r\n+\t\t\tif ((bits[i] & other.bits[i]) != 0) {\r\n+\t\t\t\treturn true;\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn false;\r\n \t}\r\n-}\r\n+\r\n+}\n\\ No newline at end of file",
      "parent_sha": "92462ff9208a68fbb91288e291b4b5dbb1925b65"
    }
  },
  {
    "oid": "7370a29d265b37618b60d0e8c1844bb00175b25e",
    "message": "Add maxSubSteps",
    "date": "2012-12-23T18:13:00Z",
    "url": "https://github.com/libgdx/libgdx/commit/7370a29d265b37618b60d0e8c1844bb00175b25e",
    "details": {
      "sha": "37b16dd3c66e6e735548b11d6a82d7ffd107c37c",
      "filename": "tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BulletWorld.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/libgdx/libgdx/blob/7370a29d265b37618b60d0e8c1844bb00175b25e/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2Fbullet%2FBulletWorld.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/7370a29d265b37618b60d0e8c1844bb00175b25e/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2Fbullet%2FBulletWorld.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2Fbullet%2FBulletWorld.java?ref=7370a29d265b37618b60d0e8c1844bb00175b25e",
      "patch": "@@ -50,6 +50,7 @@ public class BulletWorld extends BaseWorld<BulletEntity> {\n \tprivate WindowedMean mean = new WindowedMean(5);\n \tpublic float bulletTime;\n \tpublic float bulletLoad;\n+\tpublic int maxSubSteps = 5;\n \t\n \tpublic BulletWorld(final btCollisionConfiguration collisionConfiguration, final btCollisionDispatcher dispatcher,\n \t\tfinal btBroadphaseInterface broadphase, final btConstraintSolver solver, final btDynamicsWorld dynamicsWorld,  \n@@ -97,7 +98,7 @@ public void update () {\n \t\tbulletLoad = (dt > 1f) ? load : dt * load + (1f - dt) * bulletLoad;\n \t\t\n \t\tfinal long start = System.nanoTime();\n-\t\tdynamicsWorld.stepSimulation(dt, 5);\n+\t\tdynamicsWorld.stepSimulation(dt, maxSubSteps);\n \t\tmean.addValue((System.nanoTime() - start) / 1000000000.0f);\n \n \t\tif (debugDrawer != null && debugDrawer.getDebugMode() > 0) {",
      "parent_sha": "ff4bd09acb7b9087af65309e07f0bc06e120bc16"
    }
  },
  {
    "oid": "30274f47480ed6aa87ac6c4fff1684517d13468b",
    "message": "Orientation in ipad1\n\nBasic issue:\r\nMy game is in default landscape. However in ipad 1 and 2 it plays in portrait. Traced the issue back to here. So it would be nice if we check wether the user has any orientation preferences given in config file.\r\n\r\nif landscape and portrait both valeus are same then we check status bar orientation\r\nelse we give in to user preferred orientation",
    "date": "2014-04-18T13:19:44Z",
    "url": "https://github.com/libgdx/libgdx/commit/30274f47480ed6aa87ac6c4fff1684517d13468b",
    "details": {
      "sha": "d2291e5ba2aab32b57cb9e11ff761c0c30e771f2",
      "filename": "backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java",
      "status": "modified",
      "additions": 15,
      "deletions": 3,
      "changes": 18,
      "blob_url": "https://github.com/libgdx/libgdx/blob/30274f47480ed6aa87ac6c4fff1684517d13468b/backends%2Fgdx-backend-robovm%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fiosrobovm%2FIOSApplication.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/30274f47480ed6aa87ac6c4fff1684517d13468b/backends%2Fgdx-backend-robovm%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fiosrobovm%2FIOSApplication.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backend-robovm%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fiosrobovm%2FIOSApplication.java?ref=30274f47480ed6aa87ac6c4fff1684517d13468b",
      "patch": "@@ -181,8 +181,20 @@ CGSize getBounds (UIViewController viewController) {\n \t\tCGSize bounds = UIScreen.getMainScreen().getApplicationFrame().size();\n \n \t\t// determine orientation and resulting width + height\n-\t\tUIInterfaceOrientation orientation = viewController != null \n-\t\t\t? viewController.getInterfaceOrientation() : uiApp.getStatusBarOrientation();\n+\t\tUIInterfaceOrientation orientation;\n+\t\tif (viewController != null) {\n+\t\t\tviewController.getInterfaceOrientation();\n+\t\t} else if (config.orientationLandscape == config.orientationPortrait) {\n+\t\t\t/*\n+\t\t\t * if the app has orientation in any side then we can only check\n+\t\t\t * status bar orientation\n+\t\t\t */\n+\t\t\torientation = uiApp.getStatusBarOrientation();\n+\t\t} else if (config.orientationLandscape) {// is landscape true and portrait false \n+\t\t\torientation = UIInterfaceOrientation.LandscapeRight;\n+\t\t} else {// is portrait true and landscape false\n+\t\t\torientation = UIInterfaceOrientation.Portrait;\n+\t\t}\n \t\tint width;\n \t\tint height;\n \t\tswitch (orientation) {\n@@ -420,4 +432,4 @@ public void removeLifecycleListener (LifecycleListener listener) {\n \t\t\tlifecycleListeners.removeValue(listener, true);\n \t\t}\t\t\n \t}\n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "756a0365456d8985639a62b0ed30be43767a2b47"
    }
  },
  {
    "oid": "55745e60f2aa07c58b3a0f2b2018cf5cd6cc4159",
    "message": "Adjust UVs to avoid seams.\n\n@MobiDevelop, @badlogic and others, what do you think? It moves the UVs of all tiles half a texel inward. This was the only way I found to get rid of seams. Using texture packer with duplicate padding works, but I still had a problem when packing four 512x512 images into a single 1024x1024 image, since there is no room for packing. This fix seems to get rid of all seams, maybe even when not using duplicate padding.\n\nI wanted to adjust the AtlasRegions in AtlasTmxMapLoader but TextureRegion doesn't allow the UVs to change without affecting the region width and height, which seems a little jacked. Had to settle for doing it at render time.",
    "date": "2014-04-04T13:49:58Z",
    "url": "https://github.com/libgdx/libgdx/commit/55745e60f2aa07c58b3a0f2b2018cf5cd6cc4159",
    "details": {
      "sha": "4e6b731206971d717cbe72752951768ac8cbab94",
      "filename": "gdx/src/com/badlogic/gdx/maps/tiled/renderers/OrthoCachedTiledMapRenderer.java",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/libgdx/libgdx/blob/55745e60f2aa07c58b3a0f2b2018cf5cd6cc4159/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmaps%2Ftiled%2Frenderers%2FOrthoCachedTiledMapRenderer.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/55745e60f2aa07c58b3a0f2b2018cf5cd6cc4159/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmaps%2Ftiled%2Frenderers%2FOrthoCachedTiledMapRenderer.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmaps%2Ftiled%2Frenderers%2FOrthoCachedTiledMapRenderer.java?ref=55745e60f2aa07c58b3a0f2b2018cf5cd6cc4159",
      "patch": "@@ -22,6 +22,7 @@\n import com.badlogic.gdx.graphics.Color;\n import com.badlogic.gdx.graphics.GL20;\n import com.badlogic.gdx.graphics.OrthographicCamera;\n+import com.badlogic.gdx.graphics.Texture;\n import com.badlogic.gdx.graphics.g2d.SpriteCache;\n import com.badlogic.gdx.graphics.g2d.TextureRegion;\n import com.badlogic.gdx.maps.MapLayer;\n@@ -232,16 +233,19 @@ public void renderTileLayer (TiledMapTileLayer layer) {\n \t\t\t\tfinal int rotations = cell.getRotation();\n \n \t\t\t\tfinal TextureRegion region = tile.getTextureRegion();\n+\t\t\t\tfinal Texture texture = region.getTexture();\n \n \t\t\t\tfinal float x1 = col * layerTileWidth;\n \t\t\t\tfinal float y1 = row * layerTileHeight;\n \t\t\t\tfinal float x2 = x1 + region.getRegionWidth() * unitScale;\n \t\t\t\tfinal float y2 = y1 + region.getRegionHeight() * unitScale;\n \n-\t\t\t\tfinal float u1 = region.getU();\n-\t\t\t\tfinal float v1 = region.getV2();\n-\t\t\t\tfinal float u2 = region.getU2();\n-\t\t\t\tfinal float v2 = region.getV();\n+\t\t\t\tfinal float adjustX = 0.5f / texture.getWidth();\n+\t\t\t\tfinal float adjustY = 0.5f / texture.getHeight();\n+\t\t\t\tfinal float u1 = region.getU() + adjustX;\n+\t\t\t\tfinal float v1 = region.getV2() - adjustY;\n+\t\t\t\tfinal float u2 = region.getU2() - adjustX;\n+\t\t\t\tfinal float v2 = region.getV() + adjustY;\n \n \t\t\t\tvertices[X1] = x1;\n \t\t\t\tvertices[Y1] = y1;\n@@ -330,7 +334,7 @@ public void renderTileLayer (TiledMapTileLayer layer) {\n \t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tspriteCache.add(region.getTexture(), vertices, 0, 20);\n+\t\t\t\tspriteCache.add(texture, vertices, 0, 20);\n \t\t\t}\n \t\t}\n \t}",
      "parent_sha": "762bb168cb2332f7088b5e791bb6fd68721077b9"
    }
  },
  {
    "oid": "903c98a097c9aa99b1cd94f388c7243c3d3c1a7c",
    "message": "Javadocs",
    "date": "2014-11-22T16:57:38Z",
    "url": "https://github.com/libgdx/libgdx/commit/903c98a097c9aa99b1cd94f388c7243c3d3c1a7c",
    "details": {
      "sha": "c32e531aab63b7d8212af9a47b93f5322fc51c34",
      "filename": "gdx/src/com/badlogic/gdx/files/FileHandle.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/libgdx/libgdx/blob/903c98a097c9aa99b1cd94f388c7243c3d3c1a7c/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ffiles%2FFileHandle.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/903c98a097c9aa99b1cd94f388c7243c3d3c1a7c/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ffiles%2FFileHandle.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ffiles%2FFileHandle.java?ref=903c98a097c9aa99b1cd94f388c7243c3d3c1a7c",
      "patch": "@@ -339,7 +339,7 @@ public void writeString (String string, boolean append) {\n \t\twriteString(string, append, null);\r\n \t}\r\n \r\n-\t/** Writes the specified string to the file as UTF-8. Parent directories will be created if necessary.\r\n+\t/** Writes the specified string to the file using the specified charset. Parent directories will be created if necessary.\r\n \t * @param append If false, this file will be overwritten if it exists, otherwise it will be appended.\r\n \t * @param charset May be null to use the default charset.\r\n \t * @throws GdxRuntimeException if this file handle represents a directory, if it is a {@link FileType#Classpath} or\r",
      "parent_sha": "02c058104902caeb2d72917b6a8d381301c343e3"
    }
  },
  {
    "oid": "9295871b96ca73c965e8994bb9d8b2e730bb1d02",
    "message": "[changed] LocalLwjglTest contains code for testing issue 815, EarClippingTriangulator has a problem.",
    "date": "2012-05-12T21:39:23Z",
    "url": "https://github.com/libgdx/libgdx/commit/9295871b96ca73c965e8994bb9d8b2e730bb1d02",
    "details": {
      "sha": "0117d07c461958c4a99d7cc82438ed2a906f7ec5",
      "filename": "tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LocalLwjglTest.java",
      "status": "modified",
      "additions": 45,
      "deletions": 40,
      "changes": 85,
      "blob_url": "https://github.com/libgdx/libgdx/blob/9295871b96ca73c965e8994bb9d8b2e730bb1d02/tests%2Fgdx-tests-lwjgl%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2Flwjgl%2FLocalLwjglTest.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/9295871b96ca73c965e8994bb9d8b2e730bb1d02/tests%2Fgdx-tests-lwjgl%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2Flwjgl%2FLocalLwjglTest.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/tests%2Fgdx-tests-lwjgl%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2Flwjgl%2FLocalLwjglTest.java?ref=9295871b96ca73c965e8994bb9d8b2e730bb1d02",
      "patch": "@@ -15,63 +15,68 @@\n  ******************************************************************************/\n package com.badlogic.gdx.tests.lwjgl;\r\n \r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import com.badlogic.gdx.ApplicationAdapter;\r\n import com.badlogic.gdx.ApplicationListener;\r\n import com.badlogic.gdx.Gdx;\r\n import com.badlogic.gdx.backends.lwjgl.LwjglApplication;\r\n import com.badlogic.gdx.graphics.GL10;\r\n import com.badlogic.gdx.graphics.Mesh;\r\n+import com.badlogic.gdx.graphics.OrthographicCamera;\r\n import com.badlogic.gdx.graphics.VertexAttribute;\r\n import com.badlogic.gdx.graphics.VertexAttributes.Usage;\r\n+import com.badlogic.gdx.graphics.glutils.ShapeRenderer;\r\n+import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;\r\n+import com.badlogic.gdx.math.EarClippingTriangulator;\r\n+import com.badlogic.gdx.math.Vector2;\r\n \r\n-public class LocalLwjglTest implements ApplicationListener {\r\n-\tprivate Mesh mesh;\r\n-\r\n+public class LocalLwjglTest extends ApplicationAdapter {\r\n+\tShapeRenderer renderer;\r\n+\tOrthographicCamera camera;\r\n+\tfloat[] coords = {-2.0f, 0.0f, -2.0f, 0.5f, 0.0f, 1.0f, 0.5f, 2.875f, 1.0f,0.5f, 1.5f,1.0f, 2.0f,1.0f, 2.0f,0.0f};\r\n+\tprivate List<Vector2> triangles;\r\n+\t\r\n \t@Override\r\n \tpublic void create () {\r\n-\t\tfloat[] vertices = new float[] {0, 0, 0, // point 0 (invisible)\r\n-\t\t\t-0.5f, -0.5f, 0, // point 1\r\n-\t\t\t0.5f, -0.5f, 0, // point 2\r\n-\t\t\t0, 0.5f, 0}; // point 3\r\n-\r\n-\t\tif (mesh == null) {\r\n-\t\t\tmesh = new Mesh(true, 3, 3, new VertexAttribute(Usage.Position, 3, \"a_position\"));\r\n-\t\t\tmesh.setVertices(vertices, 3, 3 * 3); // Heres the problem, the offset does NOT work as expected\r\n-\t\t\tmesh.setIndices(new short[] {0, 1, 2});\r\n-\r\n-// Get the vertices again and see whats in them\r\n-\t\t\tfloat[] testv = new float[12];\r\n-\t\t\tmesh.getVertices(testv);\r\n-\r\n-\t\t\tint i = 0;\r\n-\t\t\twhile (i < testv.length) {\r\n-\t\t\t\tSystem.out.print(i + \":\" + testv[i++]);\r\n-\t\t\t\tSystem.out.print(\" \" + i + \":\" + testv[i++]);\r\n-\t\t\t\tSystem.out.print(\" \" + i + \":\" + testv[i++] + \"\\n\");\r\n-\t\t\t}\r\n+\t\trenderer = new ShapeRenderer();\r\n+\t\tcamera = new OrthographicCamera(10, 10);\r\n+\t\tcamera.position.set(0, 0, 0);\r\n+\t\tcamera.update();\r\n+\t\t\r\n+\t\tList<Vector2> poly = new ArrayList<Vector2>();\r\n+\t\tfor(int i = 0; i < coords.length; i+=2) {\r\n+\t\t\tpoly.add(new Vector2(coords[i], coords[i+1]));\r\n \t\t}\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic void dispose () {\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic void pause () {\r\n+\t\ttriangles = new EarClippingTriangulator().computeTriangles(poly);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic void render () {\r\n \t\tGdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);\r\n \t\tGdx.gl10.glColor4f(1, 1, 1, 1);\r\n-\t\tmesh.render(GL10.GL_TRIANGLES);\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic void resize (int width, int height) {\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic void resume () {\r\n+\t\t\r\n+\t\trenderer.setProjectionMatrix(camera.combined);\r\n+\t\trenderer.setColor(1, 1, 1, 1);\r\n+\t\trenderer.begin(ShapeType.Line);\r\n+\t\tfor(int j = 0; j < coords.length - 2; j+=2) {\r\n+\t\t\trenderer.line(coords[j], coords[j+1], coords[j+2], coords[j+3]);\t\t\t\r\n+\t\t}\r\n+\t\trenderer.line(coords[0], coords[1], coords[coords.length - 2], coords[coords.length - 1]);\r\n+\t\trenderer.end();\r\n+\t\t\r\n+\t\trenderer.setColor(1, 0, 0, 1);\r\n+\t\trenderer.translate(0, -4, 0);\r\n+\t\trenderer.begin(ShapeType.Triangle);\r\n+\t\tfor(int i = 0; i < triangles.size(); i+=3) {\r\n+\t\t\tVector2 v1 = triangles.get(i);\r\n+\t\t\tVector2 v2 = triangles.get(i+1);\r\n+\t\t\tVector2 v3 = triangles.get(i+2);\r\n+\t\t\trenderer.triangle(v1.x, v1.y, v2.x, v2.y, v3.x, v3.y);\r\n+\t\t}\r\n+\t\trenderer.end();\r\n+\t\trenderer.identity();\r\n \t}\r\n \r\n \tpublic static void main (String[] argv) {\r",
      "parent_sha": "b5d7091844aaa7423840558d35dcc7932eca1bd2"
    }
  },
  {
    "oid": "c45fd904344bb8aa70d992296da7319560c0ddaf",
    "message": "Update isOver on touch up.",
    "date": "2013-03-14T14:26:12Z",
    "url": "https://github.com/libgdx/libgdx/commit/c45fd904344bb8aa70d992296da7319560c0ddaf",
    "details": {
      "sha": "bf96bfffb2d2f6f0212fa443e234e741fec718f9",
      "filename": "gdx/src/com/badlogic/gdx/scenes/scene2d/utils/ClickListener.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/libgdx/libgdx/blob/c45fd904344bb8aa70d992296da7319560c0ddaf/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Futils%2FClickListener.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/c45fd904344bb8aa70d992296da7319560c0ddaf/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Futils%2FClickListener.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Futils%2FClickListener.java?ref=c45fd904344bb8aa70d992296da7319560c0ddaf",
      "patch": "@@ -68,9 +68,9 @@ public void touchDragged (InputEvent event, float x, float y, int pointer) {\n \tpublic void touchUp (InputEvent event, float x, float y, int pointer, int button) {\r\n \t\tif (pointer == pressedPointer) {\r\n \t\t\tif (!cancelled) {\r\n-\t\t\t\tboolean validClick = isOver(event.getListenerActor(), x, y);\r\n-\t\t\t\tif (validClick && pointer == 0 && this.button != -1 && button != this.button) validClick = false;\r\n-\t\t\t\tif (validClick) {\r\n+\t\t\t\tover = isOver(event.getListenerActor(), x, y);\r\n+\t\t\t\tif (over && pointer == 0 && this.button != -1 && button != this.button) over = false;\r\n+\t\t\t\tif (over) {\r\n \t\t\t\t\tlong time = TimeUtils.nanoTime();\r\n \t\t\t\t\tif (time - lastTapTime > tapCountInterval) tapCount = 0;\r\n \t\t\t\t\ttapCount++;\r",
      "parent_sha": "65adf7a1614eea3aa5e15b376786368d01568cd7"
    }
  },
  {
    "oid": "76b669c83dfbacbfc728a4bc87235e0d9c8f50de",
    "message": "scene2d.ui, fixed Table row() with implicitEndRow.\n\ncloses #4183\ncloses #4219",
    "date": "2016-08-07T01:04:35Z",
    "url": "https://github.com/libgdx/libgdx/commit/76b669c83dfbacbfc728a4bc87235e0d9c8f50de",
    "details": {
      "sha": "38a76468511025224ba8d1c4237306387bf2d527",
      "filename": "gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Table.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/libgdx/libgdx/blob/76b669c83dfbacbfc728a4bc87235e0d9c8f50de/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FTable.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/76b669c83dfbacbfc728a4bc87235e0d9c8f50de/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FTable.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FTable.java?ref=76b669c83dfbacbfc728a4bc87235e0d9c8f50de",
      "patch": "@@ -342,9 +342,10 @@ public void reset () {\n \t * for all cells in the new row. */\r\n \tpublic Cell row () {\r\n \t\tif (cells.size > 0) {\r\n-\t\t\tendRow();\r\n+\t\t\tif (!implicitEndRow) endRow();\r\n \t\t\tinvalidate();\r\n \t\t}\r\n+\t\timplicitEndRow = false;\r\n \t\tif (rowDefaults != null) cellPool.free(rowDefaults);\r\n \t\trowDefaults = obtainCell();\r\n \t\trowDefaults.clear();\r",
      "parent_sha": "522bf90e4419736233b979d7d80c911f318b187f"
    }
  },
  {
    "oid": "dbb632797230b17553bf282f86d43143fec8e601",
    "message": "Configurable scale for LabelTest.",
    "date": "2015-03-27T23:31:25Z",
    "url": "https://github.com/libgdx/libgdx/commit/dbb632797230b17553bf282f86d43143fec8e601",
    "details": {
      "sha": "ebd8df709c44eef61885f94d350b00036093a2a1",
      "filename": "tests/gdx-tests/src/com/badlogic/gdx/tests/LabelTest.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/libgdx/libgdx/blob/dbb632797230b17553bf282f86d43143fec8e601/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2FLabelTest.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/dbb632797230b17553bf282f86d43143fec8e601/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2FLabelTest.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2FLabelTest.java?ref=dbb632797230b17553bf282f86d43143fec8e601",
      "patch": "@@ -47,7 +47,8 @@ public void create () {\n \t\tskin = new Skin(Gdx.files.internal(\"data/uiskin.json\"));\r\n \t\tskin.getAtlas().getTextures().iterator().next().setFilter(TextureFilter.Nearest, TextureFilter.Nearest);\r\n \t\tskin.getFont(\"default-font\").getData().markupEnabled = true;\r\n-\t\t// skin.getFont(\"default-font\").getData().setScale(2.5f);\r\n+\t\tfloat scale = 1;\r\n+\t\tskin.getFont(\"default-font\").getData().setScale(scale);\r\n \t\tstage = new Stage(new ScreenViewport());\r\n \t\tGdx.input.setInputProcessor(stage);\r\n \r\n@@ -63,17 +64,17 @@ public void create () {\n \t\tLabel label3 = new Label(\"This is [RED]regular text\\n\\nwith newlines,\\naligned bottom, right.\", skin);\r\n \t\tlabel3.setColor(Color.GREEN);\r\n \t\tlabel3.setAlignment(Align.bottom | Align.right);\r\n-\t\ttable.add(label3).minWidth(200).minHeight(110).fill();\r\n+\t\ttable.add(label3).minWidth(200 * scale).minHeight(110 * scale).fill();\r\n \t\ttable.row();\r\n \t\tLabel label4 = new Label(\"This is regular text with NO newlines, wrap enabled and aligned bottom, right.\", skin);\r\n \t\tlabel4.setWrap(true);\r\n \t\tlabel4.setAlignment(Align.bottom | Align.right);\r\n-\t\ttable.add(label4).minWidth(200).minHeight(110).fill();\r\n+\t\ttable.add(label4).minWidth(200 * scale).minHeight(110 * scale).fill();\r\n \t\ttable.row();\r\n \t\tLabel label5 = new Label(\"This is regular text with\\n\\nnewlines, wrap\\nenabled and aligned bottom, right.\", skin);\r\n \t\tlabel5.setWrap(true);\r\n \t\tlabel5.setAlignment(Align.bottom | Align.right);\r\n-\t\ttable.add(label5).minWidth(200).minHeight(110).fill();\r\n+\t\ttable.add(label5).minWidth(200 * scale).minHeight(110 * scale).fill();\r\n \r\n \t\ttable.pack();\r\n \t}\r",
      "parent_sha": "6df40a48d1eac1e642432d14b25897d872603c34"
    }
  },
  {
    "oid": "53ebdf6a3f20e1b5ba4958e08ec1c31698d74c98",
    "message": "Fixed tree selection with ctrl+shift.",
    "date": "2013-09-27T16:56:33Z",
    "url": "https://github.com/libgdx/libgdx/commit/53ebdf6a3f20e1b5ba4958e08ec1c31698d74c98",
    "details": {
      "sha": "41dfaa1a6d4681b1c5abbcc787f94e5196af9601",
      "filename": "gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Tree.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/libgdx/libgdx/blob/53ebdf6a3f20e1b5ba4958e08ec1c31698d74c98/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FTree.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/53ebdf6a3f20e1b5ba4958e08ec1c31698d74c98/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FTree.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FTree.java?ref=53ebdf6a3f20e1b5ba4958e08ec1c31698d74c98",
      "patch": "@@ -305,7 +305,7 @@ void selectNodes (Array<Node> nodes, float low, float high) {\n \t\t\tNode node = nodes.get(i);\r\n \t\t\tif (node.actor.getY() < low) break;\r\n \t\t\tif (!node.isSelectable()) continue;\r\n-\t\t\tif (node.actor.getY() <= high) selectedNodes.add(node);\r\n+\t\t\tif (node.actor.getY() <= high && !selectedNodes.contains(node, true)) selectedNodes.add(node);\r\n \t\t\tif (node.expanded) selectNodes(node.children, low, high);\r\n \t\t}\r\n \t}\r",
      "parent_sha": "17652d247841973baf3c8a3bf54160db4090696d"
    }
  },
  {
    "oid": "067f8e4a143c097973078ccfa63f6e04e07d35b8",
    "message": "Added hashCode to Quaternion\n\nQuaternion was only overriding `equals()`, but not `hashCode()`. The methods are generated with Eclipse and slightly changed to make them shorter and keep the same behaviour of the old `equals()`.",
    "date": "2014-03-27T18:12:25Z",
    "url": "https://github.com/libgdx/libgdx/commit/067f8e4a143c097973078ccfa63f6e04e07d35b8",
    "details": {
      "sha": "786b600854c1665849856489df0c168679a09f98",
      "filename": "gdx/src/com/badlogic/gdx/math/Quaternion.java",
      "status": "modified",
      "additions": 22,
      "deletions": 6,
      "changes": 28,
      "blob_url": "https://github.com/libgdx/libgdx/blob/067f8e4a143c097973078ccfa63f6e04e07d35b8/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2FQuaternion.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/067f8e4a143c097973078ccfa63f6e04e07d35b8/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2FQuaternion.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2FQuaternion.java?ref=067f8e4a143c097973078ccfa63f6e04e07d35b8",
      "patch": "@@ -591,16 +591,32 @@ public Quaternion slerp (Quaternion end, float alpha) {\n \t}\r\n \r\n \t@Override\r\n-\tpublic boolean equals (final Object o) {\r\n-\t\tif (this == o) {\r\n+\tpublic int hashCode () {\r\n+\t\tfinal int prime = 31;\r\n+\t\tint result = 1;\r\n+\t\tresult = prime * result + Float.floatToIntBits(w);\r\n+\t\tresult = prime * result + Float.floatToIntBits(x);\r\n+\t\tresult = prime * result + Float.floatToIntBits(y);\r\n+\t\tresult = prime * result + Float.floatToIntBits(z);\r\n+\t\treturn result;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic boolean equals (Object obj) {\r\n+\t\tif (this == obj) {\r\n \t\t\treturn true;\r\n \t\t}\r\n-\t\tif (!(o instanceof Quaternion)) {\r\n+\t\tif (obj == null) {\r\n \t\t\treturn false;\r\n \t\t}\r\n-\t\tfinal Quaternion comp = (Quaternion)o;\r\n-\t\treturn this.x == comp.x && this.y == comp.y && this.z == comp.z && this.w == comp.w;\r\n-\r\n+\t\tif (!(obj instanceof Quaternion)) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t\tQuaternion other = (Quaternion)obj;\r\n+\t\treturn (Float.floatToIntBits(w) == Float.floatToIntBits(other.w))\r\n+\t\t\t&& (Float.floatToIntBits(x) == Float.floatToIntBits(other.x))\r\n+\t\t\t&& (Float.floatToIntBits(y) == Float.floatToIntBits(other.y))\r\n+\t\t\t&& (Float.floatToIntBits(z) == Float.floatToIntBits(other.z));\r\n \t}\r\n \r\n \t/** Get the dot product between the two quaternions (commutative).\r",
      "parent_sha": "38ca06a1f9b5fb61674aa815b92c66a60b48b0b3"
    }
  },
  {
    "oid": "5df0fce3d8434818b53ad6e891c7544bc719c365",
    "message": "Added setCurrentTime(0) to IOSMusic.stop() method based on the AVAudioPlayer.stop() documentation and what the Music API says on stop()",
    "date": "2012-12-26T17:45:58Z",
    "url": "https://github.com/libgdx/libgdx/commit/5df0fce3d8434818b53ad6e891c7544bc719c365",
    "details": {
      "sha": "2efe3f1c5c27ad04a89585e44194364a892caf9e",
      "filename": "backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSMusic.java",
      "status": "modified",
      "additions": 60,
      "deletions": 60,
      "changes": 120,
      "blob_url": "https://github.com/libgdx/libgdx/blob/5df0fce3d8434818b53ad6e891c7544bc719c365/backends%2Fgdx-backend-iosmonotouch%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fios%2FIOSMusic.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/5df0fce3d8434818b53ad6e891c7544bc719c365/backends%2Fgdx-backend-iosmonotouch%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fios%2FIOSMusic.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backend-iosmonotouch%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fios%2FIOSMusic.java?ref=5df0fce3d8434818b53ad6e891c7544bc719c365",
      "patch": "@@ -12,74 +12,74 @@\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n- ******************************************************************************/\n-package com.badlogic.gdx.backends.ios;\n-\n+ ******************************************************************************/\r\n+\r\n+package com.badlogic.gdx.backends.ios;\r\n+\r\n import cli.MonoTouch.AVFoundation.AVAudioPlayer;\r\n \r\n-import com.badlogic.gdx.audio.Music;\n+import com.badlogic.gdx.audio.Music;\r\n \r\n-/**\r\n- * A music player, suitable for background music. Supports MP3 and WAV\r\n- * files which are played via hardware on iOS.\r\n+/** A music player, suitable for background music. Supports MP3 and WAV files which are played via hardware on iOS.\r\n  * <p>\r\n  * Limitations: does not play OGG.\r\n  * \r\n- * @author noblemaster\r\n- */\n-public class IOSMusic implements Music {\n+ * @author noblemaster */\r\n+public class IOSMusic implements Music {\r\n \r\n \tprivate AVAudioPlayer player;\r\n-\t\r\n-\t\r\n-\tpublic IOSMusic(AVAudioPlayer player) {\r\n+\r\n+\tpublic IOSMusic (AVAudioPlayer player) {\r\n \t\tthis.player = player;\r\n \t}\r\n-\t\n-\t@Override\n-\tpublic void play() {\n-\t\tplayer.Play();\n-\t}\n-\n-\t@Override\n-\tpublic void pause() {\n-\t\tplayer.Pause();\n-\t}\n-\n-\t@Override\n-\tpublic void stop() {\n-\t\tplayer.Stop();\n-\t}\n-\n-\t@Override\n-\tpublic boolean isPlaying() {\n-\t\treturn player.get_Playing();\n-\t}\n-\n-\t@Override\n-\tpublic void setLooping(boolean isLooping) {\t\t\r\n-\t\tplayer.set_NumberOfLoops(isLooping ? -1 : 0);  // Note: -1 for looping!\n-\t}\n-\n-\t@Override\n-\tpublic boolean isLooping() {\t\n-\t\treturn player.get_NumberOfLoops() == -1;  // Note: -1 for looping!\n-\t}\n-\n-\t@Override\n-\tpublic void setVolume(float volume) {\n-\t\tplayer.set_Volume(volume);\n-\t}\n-\n-\t@Override\n-\tpublic float getPosition() {\n-\t\treturn (float)(player.get_CurrentTime() * 1000);  // Note: player returns seconds => x1000 to convert to millis!\n-\t}\n-\n-\t@Override\n-\tpublic void dispose() {\r\n-\t\tstop();\n+\r\n+\t@Override\r\n+\tpublic void play () {\r\n+\t\tplayer.Play();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void pause () {\r\n+\t\tplayer.Pause();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void stop () {\r\n+\t\tplayer.Stop();\r\n+\t\t// We need to set currentTime to 0 in order to restart from the beginning the next time, more info at\r\n+\t\t// http://developer.apple.com/library/ios/DOCUMENTATION/AVFoundation/Reference/AVFoundationFramework/_index.html#//apple_ref/occ/instm/AVAudioPlayer/stop\r\n+\t\tplayer.set_CurrentTime(0);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic boolean isPlaying () {\r\n+\t\treturn player.get_Playing();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void setLooping (boolean isLooping) {\r\n+\t\tplayer.set_NumberOfLoops(isLooping ? -1 : 0); // Note: -1 for looping!\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic boolean isLooping () {\r\n+\t\treturn player.get_NumberOfLoops() == -1; // Note: -1 for looping!\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void setVolume (float volume) {\r\n+\t\tplayer.set_Volume(volume);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic float getPosition () {\r\n+\t\treturn (float)(player.get_CurrentTime() * 1000); // Note: player returns seconds => x1000 to convert to millis!\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void dispose () {\r\n+\t\tstop();\r\n \t\tplayer.Dispose();\r\n-\t\tplayer = null;\n-\t}\n-}\n\\ No newline at end of file\n+\t\tplayer = null;\r\n+\t}\r\n+}\r",
      "parent_sha": "56ceef310e44a1031b751f540c949a4e30b00a59"
    }
  },
  {
    "oid": "59dd897de97bb9e0aefc94c3a50d7f551fc1fbf9",
    "message": "[fixed] ShapeRenderer documentation.",
    "date": "2011-09-04T06:02:23Z",
    "url": "https://github.com/libgdx/libgdx/commit/59dd897de97bb9e0aefc94c3a50d7f551fc1fbf9",
    "details": {
      "sha": "c303a7e062637b590ff7e33eb7883fc95e1b5b86",
      "filename": "gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java",
      "status": "modified",
      "additions": 191,
      "deletions": 18,
      "changes": 209,
      "blob_url": "https://github.com/libgdx/libgdx/blob/59dd897de97bb9e0aefc94c3a50d7f551fc1fbf9/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fglutils%2FShapeRenderer.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/59dd897de97bb9e0aefc94c3a50d7f551fc1fbf9/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fglutils%2FShapeRenderer.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fglutils%2FShapeRenderer.java?ref=59dd897de97bb9e0aefc94c3a50d7f551fc1fbf9",
      "patch": "@@ -8,23 +8,79 @@\n import com.badlogic.gdx.utils.GdxRuntimeException;\r\n \r\n /**\r\n- * Class to render points, lines, triangles and rectangles, either\r\n- * as outlines or filled primitives. This class is not mean to be\r\n- * used for performance sensitive applications.\r\n+ * Class to render points, lines, rectangles, filled rectangles and\r\n+ * boxes. This class is not mean to be used for performance sensitive applications\r\n+ * but more oriented towards debugging.</p>\r\n+ * \r\n+ * This class works with OpenGL ES 1.x and 2.0. In its base configuration a\r\n+ * 2D orthographic projection with the origin in the lower left corner is\r\n+ * used. Units are given in screen pixels.</p>\r\n+ * \r\n+ * To change the projection properties use the {@link #setProjectionMatrix(Matrix4)} \r\n+ * method. Usually the {@link Camera#combined} matrix is via this method, so debug\r\n+ * rendering and normal rendering operate the same. If the screen orientation or \r\n+ * resolution changes, the projection matrix might have to be adapted as well.</p>\r\n+ * \r\n+ * Shapes are rendered in batches to increase performance. The standard use-pattern\r\n+ * looks as follows:\r\n+ * \r\n+ * <pre>\r\n+ * {@code\r\n+ * camera.update();\r\n+ * shapeRenderer.setProjectionMatrix(camera.combined);\r\n+ * \r\n+ * shapeRenderer.begin(ShapeType.Line);\r\n+ * shapeRenderer.color(1, 1, 0, 1);\r\n+ * shapeRenderer.line(x, y, x2, y2);\r\n+ * shapeRenderer.line(x3, y3, x4, y4);\r\n+ * shapeRenderer.end();\r\n+ * \r\n+ * shapeRenderer.begin(ShapeType.Box);\r\n+ * shapeRenderer.color(0, 1, 0, 1);\r\n+ * shapeRenderer.box(x, y, z, width, height, depth);\r\n+ * shapeRenderer.end();\r\n+ * }\r\n+ * </pre>\r\n+ * \r\n+ * The class has a second matrix called the transformation matrix which is used\r\n+ * to rotate, scale and translate shapes in a more flexible manner. This mechanism\r\n+ * works much like matrix operations in OpenGL ES 1.x. The following example shows\r\n+ * how to rotate a rectangle around its center using the z-axis as the rotation axis\r\n+ * and placing it's center at (20, 12, 2): \r\n+ * \r\n+ * <pre>\r\n+ * shapeRenderer.begin(ShapeType.Rectangle);\r\n+ * shapeRenderer.identity();\r\n+ * shapeRenderer.translate(20, 12, 2);\r\n+ * shapeRenderer.rotate(0, 0, 1, 90);\r\n+ * shapeRenderer.rect(-width / 2, -height / 2, width, height);\r\n+ * shapeRenderer.end();\r\n+ * </pre>\r\n+ * \r\n+ * Matrix operations all use postmultiplication and work just like glTranslate, glScale and\r\n+ * glRotate. The last transformation specified will be the first that is applied to a shape (rotate\r\n+ * then translate in the above example).\r\n+ * \r\n+ * The projection and transformation matrices are a state of the ShapeRenderer, just like\r\n+ * the color and will be applied to all shapes until they are changed again.\r\n+ * \r\n+ * Instances of this class don't have to be disposed.\r\n+ * \r\n  * @author mzechner\r\n  *\r\n  */\r\n public class ShapeRenderer {\r\n \t/**\r\n-\t * shape type to be used with {@link #begin(ShapeType)}.\r\n+\t * Shape types to be used with {@link #begin(ShapeType)}.\r\n \t * @author mzechner\r\n \t *\r\n \t */\r\n \tpublic enum ShapeType {\r\n-\t\tPoint(GL10.GL_POINT),\r\n+\t\tPoint(GL10.GL_POINTS),\r\n \t\tLine(GL10.GL_LINES), \r\n \t\tRectangle(GL10.GL_LINES),\r\n-\t\tFilledRectangle(GL10.GL_TRIANGLES);\r\n+\t\tFilledRectangle(GL10.GL_TRIANGLES),\r\n+\t\tBox(GL10.GL_LINES);\r\n \t\t\r\n \t\tprivate final int glType;\r\n \r\n@@ -41,17 +97,18 @@ public int getGlType () {\n \tboolean matrixDirty = false;\r\n \tMatrix4 projView = new Matrix4();\r\n \tMatrix4 transform = new Matrix4();\r\n+\tMatrix4 combined = new Matrix4();\r\n \tMatrix4 tmp = new Matrix4();\r\n \tColor color = new Color(1, 1, 1, 1);\r\n \tShapeType currType = null;\r\n \t\r\n \t\r\n-\t\r\n \tpublic ShapeRenderer() {\r\n \t\tif(Gdx.graphics.isGL20Available())\r\n \t\t\trenderer = new ImmediateModeRenderer20(false, true, 0);\r\n \t\telse \r\n \t\t\trenderer = new ImmediateModeRenderer10();\r\n+\t\tprojView.setToOrtho2D(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());\r\n \t}\r\n \t\r\n \t/**\r\n@@ -63,19 +120,26 @@ public void setColor(Color color) {\n \t}\r\n \t\r\n \t/**\r\n-\t * Sets the combined projection and view matrix of a camera for rendering (see {@link Camera#combined}).\r\n-\t * Can only be called outside of a begin/end block.\r\n-\t * @param matrix\r\n+\t * Sets the {@link Color} to be used by shapes.\r\n+\t * @param r\r\n+\t * @param g\r\n+\t * @param b\r\n+\t * @param a\r\n \t */\r\n-\tpublic void setCameraMatrix(Matrix4 matrix) {\r\n-\t\tprojView.set(matrix);\r\n-\t\tmatrixDirty = true;\r\n+\tpublic void setColor(float r, float g, float b, float a) {\r\n+\t\tthis.color.set(r, g, b, a);\r\n \t}\r\n \t\r\n \t/**\r\n-\t * Sets the transformation matrix applied to all subsequent shapes\r\n+\t * Sets the projection matrix to be used for rendering. Usually this will be set\r\n+\t * to {@link Camera#combined}.\r\n \t * @param matrix\r\n \t */\r\n+\tpublic void setProjectionMatrix(Matrix4 matrix) {\r\n+\t\tprojView.set(matrix);\r\n+\t\tmatrixDirty = true;\r\n+\t}\r\n+\t\r\n \tpublic void setTransformMatrix(Matrix4 matrix) {\r\n \t\ttransform.set(matrix);\r\n \t\tmatrixDirty = true;\r\n@@ -84,7 +148,7 @@ public void setTransformMatrix(Matrix4 matrix) {\n \t/**\r\n \t * Sets the transformation matrix to identity.\r\n \t */\r\n-\tpublic void indentity() {\r\n+\tpublic void identity() {\r\n \t\ttransform.idt();\r\n \t\tmatrixDirty = true;\r\n \t}\r\n@@ -108,7 +172,7 @@ public void translate(float x, float y, float z) {\n \t * @param axisZ\r\n \t */\r\n \tpublic void rotate(float axisX, float axisY, float axisZ, float angle) {\r\n-\t\ttransform.rotate(axisX, axisY, axisY, angle);\r\n+\t\ttransform.rotate(axisX, axisY, axisZ, angle);\r\n \t\tmatrixDirty = true;\r\n \t}\r\n \t\r\n@@ -137,13 +201,19 @@ public void scale(float scaleX, float scaleY, float scaleZ) {\n \tpublic void begin(ShapeType type) {\r\n \t\tif(currType != null) throw new GdxRuntimeException(\"Call end() before beginning a new shape batch\");\r\n \t\tcurrType = type;\r\n+\t\tif(matrixDirty) {\r\n+\t\t\tcombined.set(projView);\r\n+\t\t\tMatrix4.mul(combined.val, transform.val);\r\n+\t\t\tmatrixDirty = false;\r\n+\t\t}\r\n \t\tif(renderer instanceof ImmediateModeRenderer10) {\r\n \t\t\tGdx.gl10.glMatrixMode(GL10.GL_PROJECTION);\r\n-\t\t\tGdx.gl10.glLoadMatrixf(projView.val, 0);\r\n+\t\t\tGdx.gl10.glLoadMatrixf(combined.val, 0);\r\n \t\t\tGdx.gl10.glMatrixMode(GL10.GL_MODELVIEW);\r\n \t\t\tGdx.gl10.glLoadIdentity();\r\n+\t\t\t((ImmediateModeRenderer10)renderer).begin(currType.getGlType());\r\n \t\t} else {\r\n-\t\t\t((ImmediateModeRenderer20)renderer).begin(projView, currType.getGlType());\r\n+\t\t\t((ImmediateModeRenderer20)renderer).begin(combined, currType.getGlType());\r\n \t\t}\r\n \t}\r\n \t\r\n@@ -155,6 +225,8 @@ public void begin(ShapeType type) {\n \t */\r\n \tpublic void point(float x, float y, float z) {\r\n \t\tif(currType != ShapeType.Point) throw new GdxRuntimeException(\"Must call begin(ShapeType.Point)\");\r\n+\t\tcheckDirty();\r\n+\t\tcheckFlush(1);\r\n \t\trenderer.color(color.r, color.g, color.b, color.a);\r\n \t\trenderer.vertex(x, y, z);\r\n \t}\r\n@@ -170,6 +242,8 @@ public void point(float x, float y, float z) {\n \t */\r\n \tpublic void line(float x, float y, float z, float x2, float y2, float z2) {\r\n \t\tif(currType != ShapeType.Line) throw new GdxRuntimeException(\"Must call begin(ShapeType.Line)\");\r\n+\t\tcheckDirty();\r\n+\t\tcheckFlush(2);\r\n \t\trenderer.color(color.r, color.g, color.b, color.a);\r\n \t\trenderer.vertex(x, y, z);\r\n \t\trenderer.color(color.r, color.g, color.b, color.a);\r\n@@ -184,6 +258,9 @@ public void line(float x, float y, float z, float x2, float y2, float z2) {\n \t * @param y2\r\n \t */\r\n \tpublic void line(float x, float y, float x2, float y2) {\r\n+\t\tif(currType != ShapeType.Line) throw new GdxRuntimeException(\"Must call begin(ShapeType.Line)\");\r\n+\t\tcheckDirty();\r\n+\t\tcheckFlush(2);\r\n \t\tif(currType != ShapeType.Line) throw new GdxRuntimeException(\"Must call begin(ShapeType.Line)\");\r\n \t\trenderer.color(color.r, color.g, color.b, color.a);\r\n \t\trenderer.vertex(x, y, 0);\r\n@@ -200,6 +277,9 @@ public void line(float x, float y, float x2, float y2) {\n \t * @param height\r\n \t */\r\n \tpublic void rect(float x, float y, float width, float height) {\r\n+\t\tif(currType != ShapeType.Rectangle) throw new GdxRuntimeException(\"Must call begin(ShapeType.Rectangle)\");\r\n+\t\tcheckDirty();\r\n+\t\tcheckFlush(8);\r\n \t\trenderer.color(color.r, color.g, color.b, color.a);\r\n \t\trenderer.vertex(x, y, 0);\r\n \t\trenderer.color(color.r, color.g, color.b, color.a);\r\n@@ -230,6 +310,9 @@ public void rect(float x, float y, float width, float height) {\n \t * @param height\r\n \t */\r\n \tpublic void filledRect(float x, float y, float width, float height) {\r\n+\t\tif(currType != ShapeType.FilledRectangle) throw new GdxRuntimeException(\"Must call begin(ShapeType.FilledRectangle)\");\r\n+\t\tcheckDirty();\r\n+\t\tcheckFlush(8);\r\n \t\trenderer.color(color.r, color.g, color.b, color.a);\r\n \t\trenderer.vertex(x, y, 0);\r\n \t\trenderer.color(color.r, color.g, color.b, color.a);\r\n@@ -245,10 +328,100 @@ public void filledRect(float x, float y, float width, float height) {\n \t\trenderer.vertex(x, y, 0);\r\n \t}\r\n \t\r\n+\t/**\r\n+\t * Draws a box. The x, y and z coordinate specify the bottom left front corner\r\n+\t * of the rectangle. The {@link ShapeType} passed to begin has to be {@link ShapeType#Box}.\r\n+\t * @param x\r\n+\t * @param y\r\n+\t * @param width\r\n+\t * @param height\r\n+\t */\r\n+\tpublic void box(float x, float y, float z, float width, float height, float depth) {\r\n+\t\tif(currType != ShapeType.Box) throw new GdxRuntimeException(\"Must call begin(ShapeType.Box)\");\r\n+\t\tcheckDirty();\r\n+\t\tcheckFlush(16);\t\t\r\n+\t\t\r\n+\t\tdepth = -depth;\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x, y, z);\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x + width, y, z);\r\n+\t\t\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x + width, y, z);\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x + width, y, z + depth);\r\n+\t\t\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x + width, y, z + depth);\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x, y, z + depth);\r\n+\t\t\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x, y, z + depth);\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x, y, z);\r\n+\t\t\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x, y, z);\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x, y + height, z);\r\n+\t\t\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x, y + height, z);\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x + width, y + height, z);\r\n+\t\t\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x + width, y + height, z);\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x + width, y + height, z + depth);\r\n+\t\t\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x + width, y + height, z + depth);\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x, y + height, z + depth);\r\n+\t\t\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x, y + height, z + depth);\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x, y + height, z);\r\n+\t\t\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x + width, y, z);\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x + width, y + height, z);\r\n+\t\t\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x + width, y, z + depth);\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x + width, y + height, z + depth);\r\n+\t\t\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x, y, z + depth);\r\n+\t\trenderer.color(color.r, color.g, color.b, color.a);\r\n+\t\trenderer.vertex(x, y + height, z + depth);\r\n+\t}\r\n+\t\r\n+\tprivate void checkDirty() {\r\n+\t\tif(!matrixDirty) return;\r\n+\t\tShapeType type = currType;\r\n+\t\tend();\r\n+\t\tbegin(type);\r\n+\t}\r\n+\t\r\n+\tprivate void checkFlush(int newVertices) {\r\n+\t\tif(renderer.getMaxVertices() - renderer.getNumVertices() >= newVertices) return;\r\n+\t\tShapeType type = currType;\r\n+\t\tend();\r\n+\t\tbegin(type);\r\n+\t}\r\n+\t\r\n \t/**\r\n \t * Finishes the batch of shapes and ensures they get rendered.\r\n \t */\r\n \tpublic void end() {\r\n \t\trenderer.end();\r\n+\t\tcurrType = null;\r\n \t}\r\n }\r",
      "parent_sha": "ed740731e4df7d9fd18de9804affc9efe3082591"
    }
  },
  {
    "oid": "9a7201523621b742a006a86dbcbdf64a403c2adb",
    "message": "fixed LwjglDebugStarter, was refering to renamed NewModelTest",
    "date": "2013-05-22T09:23:49Z",
    "url": "https://github.com/libgdx/libgdx/commit/9a7201523621b742a006a86dbcbdf64a403c2adb",
    "details": {
      "sha": "0a8efe6e5cf2ac328daf4612be84e7814bb6922b",
      "filename": "tests/gdx-tests-lwjgl/src/com/badlogic/gdx/tests/lwjgl/LwjglDebugStarter.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/libgdx/libgdx/blob/9a7201523621b742a006a86dbcbdf64a403c2adb/tests%2Fgdx-tests-lwjgl%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2Flwjgl%2FLwjglDebugStarter.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/9a7201523621b742a006a86dbcbdf64a403c2adb/tests%2Fgdx-tests-lwjgl%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2Flwjgl%2FLwjglDebugStarter.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/tests%2Fgdx-tests-lwjgl%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2Flwjgl%2FLwjglDebugStarter.java?ref=9a7201523621b742a006a86dbcbdf64a403c2adb",
      "patch": "@@ -18,7 +18,7 @@\n \r\n import com.badlogic.gdx.backends.lwjgl.LwjglApplication;\r\n import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;\r\n-import com.badlogic.gdx.tests.g3d.NewModelTest;\r\n+import com.badlogic.gdx.tests.g3d.ModelTest;\r\n import com.badlogic.gdx.tests.utils.GdxTest;\r\n \r\n public class LwjglDebugStarter {\r\n@@ -30,7 +30,7 @@ public static void main (String[] argv) {\n //\t\tnew SharedLibraryLoader(\"../../extensions/gdx-controllers/gdx-controllers-desktop/libs/gdx-controllers-desktop-natives.jar\").load(\"gdx-controllers-desktop\");\r\n //\t\tnew SharedLibraryLoader(\"../../gdx/libs/gdx-natives.jar\").load(\"gdx\");\r\n \r\n-\t\tGdxTest test = new NewModelTest();\r\n+\t\tGdxTest test = new ModelTest();\r\n \t\tLwjglApplicationConfiguration config = new LwjglApplicationConfiguration();\r\n \t\tconfig.useGL20 = test.needsGL20();\r\n \t\tnew LwjglApplication(test, config);\r",
      "parent_sha": "772a3b48ed609a30d93c4647d7c1437fbca05bb9"
    }
  },
  {
    "oid": "807c7c323b740a0d6feddaf7d820124d39d6c230",
    "message": "Fix issue with ambient cubemap out of bounds (#4734)",
    "date": "2017-05-09T20:24:39Z",
    "url": "https://github.com/libgdx/libgdx/commit/807c7c323b740a0d6feddaf7d820124d39d6c230",
    "details": {
      "sha": "cd5aaee779bbe1d7b90902fab565ba5a04e859dd",
      "filename": "gdx/src/com/badlogic/gdx/graphics/g3d/environment/AmbientCubemap.java",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/libgdx/libgdx/blob/807c7c323b740a0d6feddaf7d820124d39d6c230/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg3d%2Fenvironment%2FAmbientCubemap.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/807c7c323b740a0d6feddaf7d820124d39d6c230/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg3d%2Fenvironment%2FAmbientCubemap.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg3d%2Fenvironment%2FAmbientCubemap.java?ref=807c7c323b740a0d6feddaf7d820124d39d6c230",
      "patch": "@@ -21,18 +21,20 @@\n import com.badlogic.gdx.utils.GdxRuntimeException;\r\n \r\n public class AmbientCubemap {\r\n+\tprivate static final int NUM_VALUES = 6 * 3;\r\n+\r\n \tprivate final static float clamp (final float v) {\r\n \t\treturn v < 0f ? 0f : (v > 1f ? 1f : v);\r\n \t}\r\n \r\n \tpublic final float data[];\r\n \r\n \tpublic AmbientCubemap () {\r\n-\t\tdata = new float[6 * 3];\r\n+\t\tdata = new float[NUM_VALUES];\r\n \t}\r\n \r\n \tpublic AmbientCubemap (final float copyFrom[]) {\r\n-\t\tif (copyFrom.length != (6 * 3)) throw new GdxRuntimeException(\"Incorrect array size\");\r\n+\t\tif (copyFrom.length != (NUM_VALUES)) throw new GdxRuntimeException(\"Incorrect array size\");\r\n \t\tdata = new float[copyFrom.length];\r\n \t\tSystem.arraycopy(copyFrom, 0, data, 0, data.length);\r\n \t}\r\n@@ -56,10 +58,11 @@ public AmbientCubemap set (final Color color) {\n \t}\r\n \r\n \tpublic AmbientCubemap set (float r, float g, float b) {\r\n-\t\tfor (int idx = 0; idx < data.length;) {\r\n-\t\t\tdata[idx++] = r;\r\n-\t\t\tdata[idx++] = g;\r\n-\t\t\tdata[idx++] = b;\r\n+\t\tfor (int idx = 0; idx < NUM_VALUES;) {\r\n+\t\t\tdata[idx] = r;\r\n+\t\t\tdata[idx+1] = g;\r\n+\t\t\tdata[idx+2] = b;\r\n+\t\t\tidx += 3;\r\n \t\t}\r\n \t\treturn this;\r\n \t}\r",
      "parent_sha": "9e4c560c66f4358cfd63381c9c35dca3e83a1e0d"
    }
  },
  {
    "oid": "7c9b790f6e22526b8af4633c9699f314562972c0",
    "message": "[fixed] issue 434",
    "date": "2011-09-04T00:02:30Z",
    "url": "https://github.com/libgdx/libgdx/commit/7c9b790f6e22526b8af4633c9699f314562972c0",
    "details": {
      "sha": "98afeb331110d7443f49cb49549d7a118f638656",
      "filename": "gdx/src/com/badlogic/gdx/physics/box2d/RayCastCallback.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/libgdx/libgdx/blob/7c9b790f6e22526b8af4633c9699f314562972c0/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fphysics%2Fbox2d%2FRayCastCallback.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/7c9b790f6e22526b8af4633c9699f314562972c0/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fphysics%2Fbox2d%2FRayCastCallback.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fphysics%2Fbox2d%2FRayCastCallback.java?ref=7c9b790f6e22526b8af4633c9699f314562972c0",
      "patch": "@@ -26,7 +26,10 @@ public interface RayCastCallback {\n \r\n \t/** Called for each fixture found in the query. You control how the ray cast proceeds by returning a float: return -1: ignore\r\n \t * this fixture and continue return 0: terminate the ray cast return fraction: clip the ray to this point return 1: don't clip\r\n-\t * the ray and continue\r\n+\t * the ray and continue.\r\n+\t * \r\n+\t * The {@link Vector2} instances passed to the callback will be reused for future calls so make a copy of them!\r\n+\t * \r\n \t * @param fixture the fixture hit by the ray\r\n \t * @param point the point of initial intersection\r\n \t * @param normal the normal vector at the point of intersection\r",
      "parent_sha": "e8c9895d1f1c231dfed43ae63ef73c3d22b44b41"
    }
  },
  {
    "oid": "a222705f9819983a71d52904b1e7814c515fc56b",
    "message": "Remove obsolete code (#4832)",
    "date": "2017-08-03T21:15:10Z",
    "url": "https://github.com/libgdx/libgdx/commit/a222705f9819983a71d52904b1e7814c515fc56b",
    "details": {
      "sha": "e7cae39190b8b7f5fb9599ed8ed9f07f37305600",
      "filename": "gdx/src/com/badlogic/gdx/graphics/glutils/FileTextureData.java",
      "status": "modified",
      "additions": 1,
      "deletions": 19,
      "changes": 20,
      "blob_url": "https://github.com/libgdx/libgdx/blob/a222705f9819983a71d52904b1e7814c515fc56b/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fglutils%2FFileTextureData.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/a222705f9819983a71d52904b1e7814c515fc56b/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fglutils%2FFileTextureData.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fglutils%2FFileTextureData.java?ref=a222705f9819983a71d52904b1e7814c515fc56b",
      "patch": "@@ -26,7 +26,6 @@\n import com.badlogic.gdx.utils.GdxRuntimeException;\r\n \r\n public class FileTextureData implements TextureData {\r\n-\tstatic public boolean copyToPOT;\r\n \r\n \tfinal FileHandle file;\r\n \tint width = 0;\r\n@@ -42,7 +41,6 @@ public FileTextureData (FileHandle file, Pixmap preloadedPixmap, Format format,\n \t\tthis.format = format;\r\n \t\tthis.useMipMaps = useMipMaps;\r\n \t\tif (pixmap != null) {\r\n-\t\t\tpixmap = ensurePot(pixmap);\r\n \t\t\twidth = pixmap.getWidth();\r\n \t\t\theight = pixmap.getHeight();\r\n \t\t\tif (format == null) this.format = pixmap.getFormat();\r\n@@ -61,30 +59,14 @@ public void prepare () {\n \t\t\tif (file.extension().equals(\"cim\"))\r\n \t\t\t\tpixmap = PixmapIO.readCIM(file);\r\n \t\t\telse\r\n-\t\t\t\tpixmap = ensurePot(new Pixmap(file));\r\n+\t\t\t\tpixmap = new Pixmap(file);\r\n \t\t\twidth = pixmap.getWidth();\r\n \t\t\theight = pixmap.getHeight();\r\n \t\t\tif (format == null) format = pixmap.getFormat();\r\n \t\t}\r\n \t\tisPrepared = true;\r\n \t}\r\n \r\n-\tprivate Pixmap ensurePot (Pixmap pixmap) {\r\n-\t\tif (Gdx.gl20 == null && copyToPOT) {\r\n-\t\t\tint pixmapWidth = pixmap.getWidth();\r\n-\t\t\tint pixmapHeight = pixmap.getHeight();\r\n-\t\t\tint potWidth = MathUtils.nextPowerOfTwo(pixmapWidth);\r\n-\t\t\tint potHeight = MathUtils.nextPowerOfTwo(pixmapHeight);\r\n-\t\t\tif (pixmapWidth != potWidth || pixmapHeight != potHeight) {\r\n-\t\t\t\tPixmap tmp = new Pixmap(potWidth, potHeight, pixmap.getFormat());\r\n-\t\t\t\ttmp.drawPixmap(pixmap, 0, 0, 0, 0, pixmapWidth, pixmapHeight);\r\n-\t\t\t\tpixmap.dispose();\r\n-\t\t\t\treturn tmp;\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\treturn pixmap;\r\n-\t}\r\n-\r\n \t@Override\r\n \tpublic Pixmap consumePixmap () {\r\n \t\tif (!isPrepared) throw new GdxRuntimeException(\"Call prepare() before calling getPixmap()\");\r",
      "parent_sha": "d23330e250dd7bf41fb1da62667431bf9f859eec"
    }
  },
  {
    "oid": "56ba4ea7deadefee08515549c99610dc5c44c82a",
    "message": "Added fling gesture to scrollpane.",
    "date": "2014-03-28T17:08:04Z",
    "url": "https://github.com/libgdx/libgdx/commit/56ba4ea7deadefee08515549c99610dc5c44c82a",
    "details": {
      "sha": "a5545f688f946a890bca6335432fc1b8bcf06139",
      "filename": "gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ScrollPane.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/libgdx/libgdx/blob/56ba4ea7deadefee08515549c99610dc5c44c82a/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FScrollPane.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/56ba4ea7deadefee08515549c99610dc5c44c82a/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FScrollPane.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FScrollPane.java?ref=56ba4ea7deadefee08515549c99610dc5c44c82a",
      "patch": "@@ -588,8 +588,12 @@ public void draw (Batch batch, float parentAlpha) {\n \t\tresetTransform(batch);\r\n \t}\r\n \r\n-\t//generate flick gesture\r\n-\tpublic void flick(float flingTime, float velocityX, float velocityY){\r\n+\t/** Generate fling gesture.\r\n+\t * \r\n+\t * @param flingTime Time in seconds for which you want to fling last.\r\n+\t * @param velocityX Velocity for horizontal direction.\r\n+\t * @param velocityY Velocity for vertical direction. */\r\n+\tpublic void fling(float flingTime, float velocityX, float velocityY){\r\n \t\tthis.flingTimer = flingTime;\r\n \t\tthis.velocityX = velocityX;\r\n \t\tthis.velocityY = velocityY;\r",
      "parent_sha": "cac2ba6604cf9edd95724acbd92bfc94ce79305b"
    }
  },
  {
    "oid": "15e9f70716aae1efca6763e2d47de517a245e34e",
    "message": "Make the setup tool slightly smaller, fixes #3395",
    "date": "2015-11-18T01:36:39Z",
    "url": "https://github.com/libgdx/libgdx/commit/15e9f70716aae1efca6763e2d47de517a245e34e",
    "details": {
      "sha": "de98ab3ae7e98aeebc836d3566de986b2d672993",
      "filename": "extensions/gdx-setup/src/com/badlogic/gdx/setup/GdxSetupUI.java",
      "status": "modified",
      "additions": 4,
      "deletions": 27,
      "changes": 31,
      "blob_url": "https://github.com/libgdx/libgdx/blob/15e9f70716aae1efca6763e2d47de517a245e34e/extensions%2Fgdx-setup%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fsetup%2FGdxSetupUI.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/15e9f70716aae1efca6763e2d47de517a245e34e/extensions%2Fgdx-setup%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fsetup%2FGdxSetupUI.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/extensions%2Fgdx-setup%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fsetup%2FGdxSetupUI.java?ref=15e9f70716aae1efca6763e2d47de517a245e34e",
      "patch": "@@ -406,8 +406,8 @@ private void uiLayout () {\n \t\t\tsetLayout(new GridBagLayout());\n \t\t\tadd(topBar, new GridBagConstraints(0, 0, 0, 0, 0, 0, NORTH, HORIZONTAL, new Insets(0, 0, 0, 100), 0, 10));\n \t\t\tadd(title, new GridBagConstraints(0, 0, 0, 0, 0, 0, NORTHEAST, NONE, new Insets(0, 0, 0, 0), 0, 0));\n-\t\t\tadd(logo, new GridBagConstraints(0, 0, 1, 1, 1, 0, CENTER, HORIZONTAL, new Insets(40, 6, 12, 6), 0, 0));\n-\t\t\tadd(form, new GridBagConstraints(0, 1, 1, 1, 1, 0, CENTER, HORIZONTAL, new Insets(6, 6, 12, 6), 0, 0));\n+\t\t\tadd(logo, new GridBagConstraints(0, 0, 1, 1, 1, 0, CENTER, HORIZONTAL, new Insets(40, 6, 6, 6), 0, 0));\n+\t\t\tadd(form, new GridBagConstraints(0, 1, 1, 1, 1, 0, CENTER, HORIZONTAL, new Insets(6, 6, 0, 6), 0, 0));\n \t\t\tadd(buttonPanel, new GridBagConstraints(0, 2, 1, 1, 0, 0, CENTER, NONE, new Insets(0, 0, 0, 0), 0, 0));\n \t\t\tadd(scrollPane, new GridBagConstraints(0, 3, 1, 1, 1, 1, CENTER, BOTH, new Insets(6, 6, 6, 6), 0, 0));\n \t\t}\n@@ -446,8 +446,6 @@ class Form extends JPanel {\n \t\tSetupButton sdkLocationButton = new SetupButton(\"Browse\");\n \n \t\tJPanel subProjectsPanel = new JPanel(new GridLayout());\n-\t\tJLabel versionLabel = new JLabel(\"LibGDX Version\");\n-\t\tJComboBox versionButton = new JComboBox(new String[] {\"Release \" + DependencyBank.libgdxVersion});\n \t\tJLabel projectsLabel = new JLabel(\"Sub Projects\");\n \t\tJLabel extensionsLabel = new JLabel(\"Extensions\");\n \t\tList<JPanel> extensionsPanels = new ArrayList<JPanel>();\n@@ -473,25 +471,6 @@ private void uiStyle() {\n \t\t\tsdkLocationLabel.setForeground(Color.WHITE);\n \t\t\tsdkLocationText.setDisabledTextColor(Color.GRAY);\n \n-\t\t\tversionLabel.setForeground(new Color(255, 20, 20));\n-\t\t\tUIManager.put(\"ComboBox.selectionBackground\", new ColorUIResource(new Color(70, 70, 70)));\n-\t\t\tUIManager.put(\"ComboBox.selectionForeground\", new ColorUIResource(Color.WHITE));\n-\t\t\tversionButton.updateUI();\n-\t\t\tversionButton.setForeground(new Color(255, 255, 255));\n-\t\t\tversionButton.setBackground(new Color(20, 20, 20));\n-\t\t\tversionButton.setPrototypeDisplayValue(\"I am a prototype\");\n-\t\t\tversionButton.setUI(new BasicComboBoxUI() {\n-\t\t\t\t@Override\n-\t\t\t\tprotected JButton createArrowButton () {\n-\t\t\t\t\treturn new BasicArrowButton(\n-\t\t\t\t\t\t\tBasicArrowButton.SOUTH,\n-\t\t\t\t\t\t\tnew Color(0, 0, 0),\n-\t\t\t\t\t\t\tnew Color(0, 0, 0),\n-\t\t\t\t\t\t\tnew Color(100, 100, 100),\n-\t\t\t\t\t\t\tnew Color(100, 100, 100));\n-\t\t\t\t}\n-\t\t\t});\n-\n \t\t\tprojectsLabel.setForeground(new Color(255, 20, 20));\n \t\t\textensionsLabel.setForeground(new Color(255, 20, 20));\n \n@@ -527,8 +506,6 @@ private void uiLayout () {\n \t\t\tadd(sdkLocationText, new GridBagConstraints(1, 4, 1, 1, 1, 0, CENTER, HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));\n \t\t\tadd(sdkLocationButton, new GridBagConstraints(2, 4, 1, 1, 0, 0, CENTER, NONE, new Insets(0, 6, 0, 0), 0, 0));\n \n-\t\t\tadd(versionLabel, new GridBagConstraints(0, 5, 1, 1, 0, 0, WEST, WEST, new Insets(20, 0, 0, 0), 0, 0));\n-\t\t\tadd(versionButton, new GridBagConstraints(1, 5, 1, 1, 0, 0, WEST, WEST, new Insets(20, 20, 0, 0), 0, 0));\n \n \t\t\tfor (final ProjectType projectType : ProjectType.values()) {\n \t\t\t\tif (projectType.equals(ProjectType.CORE)) {\n@@ -604,13 +581,13 @@ public void itemStateChanged(ItemEvent e) {\n \t\t\t\textensionsPanels.add(extensionPanel);\n \t\t\t}\n \n-\t\t\tadd(extensionsLabel, new GridBagConstraints(0, 8, 1, 1, 0, 0, WEST, WEST, new Insets(20, 0, 0, 0), 0, 0));\n+\t\t\tadd(extensionsLabel, new GridBagConstraints(0, 8, 1, 1, 0, 0, WEST, WEST, new Insets(10, 0, 0, 0), 0, 0));\n \t\t\tint rowCounter = 9;\n \t\t\tfor (JPanel extensionsPanel : extensionsPanels) {\n \t\t\t\tadd(extensionsPanel, new GridBagConstraints(0, rowCounter, 3, 1, 0, 0, CENTER, HORIZONTAL, new Insets(5, 0, 0, 0), 0, 0));\n \t\t\t\trowCounter++;\n \t\t\t}\n-\t\t\tadd(showMoreExtensionsButton, new GridBagConstraints(0, 12, 0, 1, 0, 0, CENTER, WEST, new Insets(20, 0, 30, 0), 0, 0));\n+\t\t\tadd(showMoreExtensionsButton, new GridBagConstraints(0, 12, 0, 1, 0, 0, CENTER, WEST, new Insets(10, 0, 10, 0), 0, 0));\n \t\t}\n \n \t\tFile getDirectory () {",
      "parent_sha": "e4ffca9d9470e945af1b9227d0fedab71b2eaae8"
    }
  },
  {
    "oid": "b06d9a012a271db1bbc168281e191f796f08a652",
    "message": "Avoid calls to bind() when creating texture (#4632)\n\nMore simple version of the original PR, using existing unsafe*() functions.",
    "date": "2017-03-25T19:23:20Z",
    "url": "https://github.com/libgdx/libgdx/commit/b06d9a012a271db1bbc168281e191f796f08a652",
    "details": {
      "sha": "65e4a0bd70ff6ad812c255a9f551cf6ffb54f394",
      "filename": "gdx/src/com/badlogic/gdx/graphics/Texture.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/libgdx/libgdx/blob/b06d9a012a271db1bbc168281e191f796f08a652/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2FTexture.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/b06d9a012a271db1bbc168281e191f796f08a652/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2FTexture.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2FTexture.java?ref=b06d9a012a271db1bbc168281e191f796f08a652",
      "patch": "@@ -136,8 +136,8 @@ public void load (TextureData data) {\n \t\tbind();\r\n \t\tuploadImageData(GL20.GL_TEXTURE_2D, data);\r\n \r\n-\t\tsetFilter(minFilter, magFilter);\r\n-\t\tsetWrap(uWrap, vWrap);\r\n+\t\tunsafeSetFilter(minFilter, magFilter, true);\r\n+\t\tunsafeSetWrap(uWrap, vWrap, true);\r\n \t\tGdx.gl.glBindTexture(glTarget, 0);\r\n \t}\r\n \r",
      "parent_sha": "8ea6542d3860e31198bf40749d40fdd9953f40f8"
    }
  },
  {
    "oid": "e82e04884590e45f854c83ba558431e52442de27",
    "message": "Added offset, count to ensureCCW, exposed isClockwise.",
    "date": "2017-10-19T08:49:15Z",
    "url": "https://github.com/libgdx/libgdx/commit/e82e04884590e45f854c83ba558431e52442de27",
    "details": {
      "sha": "f026b076217c94a334163c8e606db45f1a1f72d0",
      "filename": "gdx/src/com/badlogic/gdx/math/GeometryUtils.java",
      "status": "modified",
      "additions": 12,
      "deletions": 8,
      "changes": 20,
      "blob_url": "https://github.com/libgdx/libgdx/blob/e82e04884590e45f854c83ba558431e52442de27/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2FGeometryUtils.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/e82e04884590e45f854c83ba558431e52442de27/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2FGeometryUtils.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2FGeometryUtils.java?ref=e82e04884590e45f854c83ba558431e52442de27",
      "patch": "@@ -233,9 +233,13 @@ static public float polygonArea (float[] polygon, int offset, int count) {\n \t}\r\n \r\n \tstatic public void ensureCCW (float[] polygon) {\r\n-\t\tif (!areVerticesClockwise(polygon, 0, polygon.length)) return;\r\n-\t\tint lastX = polygon.length - 2;\r\n-\t\tfor (int i = 0, n = polygon.length / 2; i < n; i += 2) {\r\n+\t\tensureCCW(polygon, 0, polygon.length);\r\n+\t}\r\n+\r\n+\tstatic public void ensureCCW (float[] polygon, int offset, int count) {\r\n+\t\tif (!isClockwise(polygon, offset, count)) return;\r\n+\t\tint lastX = offset + count - 2;\r\n+\t\tfor (int i = offset, n = offset + count / 2; i < n; i += 2) {\r\n \t\t\tint other = lastX - i;\r\n \t\t\tfloat x = polygon[i];\r\n \t\t\tfloat y = polygon[i + 1];\r\n@@ -246,7 +250,7 @@ static public void ensureCCW (float[] polygon) {\n \t\t}\r\n \t}\r\n \r\n-\tstatic private boolean areVerticesClockwise (float[] polygon, int offset, int count) {\r\n+\tstatic public boolean isClockwise (float[] polygon, int offset, int count) {\r\n \t\tif (count <= 2) return false;\r\n \t\tfloat area = 0, p1x, p1y, p2x, p2y;\r\n \t\tfor (int i = offset, n = offset + count - 3; i < n; i += 2) {\r\n@@ -256,10 +260,10 @@ static private boolean areVerticesClockwise (float[] polygon, int offset, int co\n \t\t\tp2y = polygon[i + 3];\r\n \t\t\tarea += p1x * p2y - p2x * p1y;\r\n \t\t}\r\n-\t\tp1x = polygon[count - 2];\r\n-\t\tp1y = polygon[count - 1];\r\n-\t\tp2x = polygon[0];\r\n-\t\tp2y = polygon[1];\r\n+\t\tp1x = polygon[offset + count - 2];\r\n+\t\tp1y = polygon[offset + count - 1];\r\n+\t\tp2x = polygon[offset];\r\n+\t\tp2y = polygon[offset + 1];\r\n \t\treturn area + p1x * p2y - p2x * p1y < 0;\r\n \t}\r\n }\r",
      "parent_sha": "33086db72093482e1982888184e2ee6a3a848bbb"
    }
  },
  {
    "oid": "69d64e133a403bb13e9e60fe211340346d3017c4",
    "message": "[changed] fixed up MeshShaderTest",
    "date": "2012-03-12T19:28:35Z",
    "url": "https://github.com/libgdx/libgdx/commit/69d64e133a403bb13e9e60fe211340346d3017c4",
    "details": {
      "sha": "7bd53a6112328c4f17d8ee657f0f1c9ee2257202",
      "filename": "tests/gdx-tests/src/com/badlogic/gdx/tests/MeshShaderTest.java",
      "status": "modified",
      "additions": 27,
      "deletions": 33,
      "changes": 60,
      "blob_url": "https://github.com/libgdx/libgdx/blob/69d64e133a403bb13e9e60fe211340346d3017c4/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2FMeshShaderTest.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/69d64e133a403bb13e9e60fe211340346d3017c4/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2FMeshShaderTest.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2FMeshShaderTest.java?ref=69d64e133a403bb13e9e60fe211340346d3017c4",
      "patch": "@@ -30,51 +30,49 @@\n import com.badlogic.gdx.tests.utils.GdxTest;\r\n \r\n public class MeshShaderTest extends GdxTest {\r\n-\tSpriteBatch spriteBatch;\r\n-\t// Font font;\r\n \tShaderProgram shader;\r\n \tMesh mesh;\r\n \tTexture texture;\r\n \tMatrix4 matrix = new Matrix4();\r\n \r\n \t@Override\r\n \tpublic void create () {\r\n-\t\tString vertexShader = \"attribute vec4 a_position;    \\n\" + \"attribute vec4 a_color;\\n\" + \"attribute vec2 a_texCoords;\\n\"\r\n-\t\t\t+ \"uniform mat4 u_worldView;\\n\" + \"varying vec4 v_color;\" + \"varying vec2 v_texCoords;\"\r\n-\t\t\t+ \"void main()                  \\n\" + \"{                            \\n\" + \"   v_color = vec4(1, 1, 1, 1); \\n\"\r\n-\t\t\t+ \"   v_texCoords = a_texCoords; \\n\" + \"   gl_Position =  u_worldView * a_position;  \\n\"\r\n-\t\t\t+ \"}                            \\n\";\r\n-\t\tString fragmentShader = \"#ifdef GL_ES\\n\" + \"precision mediump float;\\n\" + \"#endif\\n\" + \"varying vec4 v_color;\\n\"\r\n-\t\t\t+ \"varying vec2 v_texCoords;\\n\" + \"uniform sampler2D u_texture;\\n\" + \"void main()                                  \\n\"\r\n-\t\t\t+ \"{                                            \\n\" + \"  gl_FragColor = v_color * texture2D(u_texture, v_texCoords);\\n\"\r\n-\t\t\t+ \"}\";\r\n+\t\tString vertexShader = \"attribute vec4 a_position;    \\n\" + \r\n+\t\t\t\t\t\t\t\t\t \"attribute vec4 a_color;\\n\" +\r\n+\t\t\t\t\t\t\t\t\t \"attribute vec2 a_texCoord0;\\n\" + \r\n+\t\t\t\t\t\t\t\t\t \"uniform mat4 u_worldView;\\n\" + \r\n+\t\t\t\t\t\t\t\t\t \"varying vec4 v_color;\" + \r\n+\t\t\t\t\t\t\t\t\t \"varying vec2 v_texCoords;\" + \r\n+\t\t\t\t\t\t\t\t\t \"void main()                  \\n\" + \r\n+\t\t\t\t\t\t\t\t\t \"{                            \\n\" + \r\n+\t\t\t\t\t\t\t\t\t \"   v_color = vec4(1, 1, 1, 1); \\n\" + \r\n+\t\t\t\t\t\t\t\t\t \"   v_texCoords = a_texCoord0; \\n\" + \r\n+\t\t\t\t\t\t\t\t\t \"   gl_Position =  u_worldView * a_position;  \\n\"\t+ \r\n+\t\t\t\t\t\t\t\t\t \"}                            \\n\";\r\n+\t\tString fragmentShader = \"#ifdef GL_ES\\n\" +\r\n+\t\t\t\t\t\t\t\t\t \t\"precision mediump float;\\n\" + \r\n+\t\t\t\t\t\t\t\t\t \t\"#endif\\n\" + \r\n+\t\t\t\t\t\t\t\t\t \t\"varying vec4 v_color;\\n\" + \r\n+\t\t\t\t\t\t\t\t\t \t\"varying vec2 v_texCoords;\\n\" + \r\n+\t\t\t\t\t\t\t\t\t \t\"uniform sampler2D u_texture;\\n\" + \r\n+\t\t\t\t\t\t\t\t\t \t\"void main()                                  \\n\" + \r\n+\t\t\t\t\t\t\t\t\t \t\"{                                            \\n\" + \r\n+\t\t\t\t\t\t\t\t\t \t\"  gl_FragColor = v_color * texture2D(u_texture, v_texCoords);\\n\"\r\n+\t\t\t\t\t\t\t\t\t \t+ \"}\";\r\n \r\n \t\tshader = new ShaderProgram(vertexShader, fragmentShader);\r\n \t\tif (shader.isCompiled() == false) {\r\n \t\t\tGdx.app.log(\"ShaderTest\", shader.getLog());\r\n \t\t\tSystem.exit(0);\r\n \t\t}\r\n \r\n-\t\tmesh = new Mesh(true, 4, 6, new VertexAttribute(Usage.Position, 3, \"a_position\"), new VertexAttribute(Usage.Color, 4,\r\n-\t\t\t\"a_color\"), new VertexAttribute(Usage.TextureCoordinates, 2, \"a_texCoords\"));\r\n-\r\n-\t\tmesh.setVertices(new float[] {-0.5f, -0.5f, 0, 1, 1, 1, 1, 0, 1, 0.5f, -0.5f, 0, 1, 1, 1, 1, 1, 1, 0.5f, 0.5f, 0, 1, 1, 1,\r\n-\t\t\t1, 1, 0, -0.5f, 0.5f, 0, 1, 1, 1, 1, 0, 0});\r\n+\t\tmesh = new Mesh(true, 4, 6, VertexAttribute.Position(), VertexAttribute.ColorUnpacked(), VertexAttribute.TexCoords(0));\r\n+\t\tmesh.setVertices(new float[] {-0.5f, -0.5f, 0, 1, 1, 1, 1, 0, 1, \r\n+\t\t\t\t\t\t\t\t\t\t\t\t 0.5f, -0.5f, 0, 1, 1, 1, 1, 1, 1, \r\n+\t\t\t\t\t\t\t\t\t\t\t\t 0.5f, 0.5f, 0, 1, 1, 1, 1, 1, 0, \r\n+\t\t\t\t\t\t\t\t\t\t\t\t -0.5f, 0.5f, 0, 1, 1, 1, 1, 0, 0});\r\n \t\tmesh.setIndices(new short[] {0, 1, 2, 2, 3, 0});\r\n-\r\n-// Pixmap pixmap = new Pixmap(2, 1, Format.RGBA8888);\r\n-// pixmap.drawPixel(0, 0, 0xffff0000);\r\n-// pixmap.drawPixel(1, 0, 0xff00ff00);\r\n-// pixmap.drawPixel(0, 1, 0xff0000ff);\r\n-// pixmap.drawPixel(0, 0, 0xffff00ff);\r\n-// pixmap.drawPixel(1, 0, 0xffffff00);\r\n-// texture = Gdx.graphics.newUnmanagedTexture(pixmap, TextureFilter.Nearest, TextureFilter.Nearest, TextureWrap.ClampToEdge,\r\n-// TextureWrap.ClampToEdge);\r\n-// pixmap.dispose();\r\n \t\ttexture = new Texture(Gdx.files.internal(\"data/bobrgb888-32x32.png\"));\r\n-\r\n-\t\tspriteBatch = new SpriteBatch();\r\n-\t\t// font = Gdx.graphics.newFont(\"Arial\", 12, FontStyle.Plain);\r\n \t}\r\n \r\n \tVector3 axis = new Vector3(0, 0, 1);\r\n@@ -97,10 +95,6 @@ public void render () {\n \t\tshader.setUniformi(\"u_texture\", 0);\r\n \t\tmesh.render(shader, GL10.GL_TRIANGLES);\r\n \t\tshader.end();\r\n-\r\n-\t\tspriteBatch.begin();\r\n-\t\t// spriteBatch.drawText(font, \"This is a test\", 100, 100, Color.RED);\r\n-\t\tspriteBatch.end();\r\n \t}\r\n \r\n \t@Override\r",
      "parent_sha": "c33839cda6be6c61f2d7a27e50710eb50b0f15a9"
    }
  },
  {
    "oid": "a7b5ba84b197e248f383e43bc98345af9c2c00b4",
    "message": "Don't create empty runs.",
    "date": "2015-12-16T21:21:50Z",
    "url": "https://github.com/libgdx/libgdx/commit/a7b5ba84b197e248f383e43bc98345af9c2c00b4",
    "details": {
      "sha": "fd5bf25db86e31af6e93c9ecc21f0e41339deaa3",
      "filename": "gdx/src/com/badlogic/gdx/graphics/g2d/GlyphLayout.java",
      "status": "modified",
      "additions": 44,
      "deletions": 39,
      "changes": 83,
      "blob_url": "https://github.com/libgdx/libgdx/blob/a7b5ba84b197e248f383e43bc98345af9c2c00b4/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2FGlyphLayout.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/a7b5ba84b197e248f383e43bc98345af9c2c00b4/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2FGlyphLayout.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2FGlyphLayout.java?ref=a7b5ba84b197e248f383e43bc98345af9c2c00b4",
      "patch": "@@ -135,49 +135,54 @@ else if (targetWidth <= font.data.spaceWidth) //\n \t\t\t\tif (runEnd != runStart) { // Can happen (eg) when a color tag is at text start.\n \t\t\t\t\t// Store the run that has ended.\n \t\t\t\t\tGlyphRun run = glyphRunPool.obtain();\n-\t\t\t\t\truns.add(run);\n \t\t\t\t\trun.color.set(color);\n \t\t\t\t\trun.x = x;\n \t\t\t\t\trun.y = y;\n \t\t\t\t\tfontData.getGlyphs(run, str, runStart, runEnd, colorRun);\n-\n-\t\t\t\t\t// Compute the run width, wrap if necessary, and position the run.\n-\t\t\t\t\tfloat[] xAdvances = run.xAdvances.items;\n-\t\t\t\t\tfor (int i = 0, n = run.xAdvances.size; i < n; i++) {\n-\t\t\t\t\t\tfloat xAdvance = xAdvances[i];\n-\t\t\t\t\t\tx += xAdvance;\n-\n-\t\t\t\t\t\t// Don't wrap if the glyph would fit with just its width (no xadvance or kerning).\n-\t\t\t\t\t\tif (wrap && x > targetWidth && i > 1 && x - xAdvance\n-\t\t\t\t\t\t\t+ (run.glyphs.get(i - 1).xoffset + run.glyphs.get(i - 1).width) * fontData.scaleX - 0.0001f > targetWidth) {\n-\n-\t\t\t\t\t\t\tif (truncate != null) {\n-\t\t\t\t\t\t\t\ttruncate(fontData, run, targetWidth, truncate, i, glyphRunPool);\n-\t\t\t\t\t\t\t\tx = run.x + run.width;\n-\t\t\t\t\t\t\t\tbreak outer;\n-\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\tint wrapIndex = fontData.getWrapIndex(run.glyphs, i);\n-\t\t\t\t\t\t\tif ((run.x == 0 && wrapIndex == 0) // Require at least one glyph per line.\n-\t\t\t\t\t\t\t\t|| wrapIndex >= run.glyphs.size) { // Wrap at least the glyph that didn't fit.\n-\t\t\t\t\t\t\t\twrapIndex = i - 1;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tGlyphRun next = wrap(fontData, run, glyphRunPool, wrapIndex, i);\n-\t\t\t\t\t\t\truns.add(next);\n-\n-\t\t\t\t\t\t\t// Start the loop over with the new run on the next line.\n-\t\t\t\t\t\t\twidth = Math.max(width, run.x + run.width);\n-\t\t\t\t\t\t\tx = 0;\n-\t\t\t\t\t\t\ty += fontData.down;\n-\t\t\t\t\t\t\tlines++;\n-\t\t\t\t\t\t\tnext.x = 0;\n-\t\t\t\t\t\t\tnext.y = y;\n-\t\t\t\t\t\t\ti = -1;\n-\t\t\t\t\t\t\tn = next.xAdvances.size;\n-\t\t\t\t\t\t\txAdvances = next.xAdvances.items;\n-\t\t\t\t\t\t\trun = next;\n-\t\t\t\t\t\t} else\n-\t\t\t\t\t\t\trun.width += xAdvance;\n+\t\t\t\t\tif (run.glyphs.size == 0)\n+\t\t\t\t\t\tglyphRunPool.free(run);\n+\t\t\t\t\telse {\n+\t\t\t\t\t\truns.add(run);\n+\n+\t\t\t\t\t\t// Compute the run width, wrap if necessary, and position the run.\n+\t\t\t\t\t\tfloat[] xAdvances = run.xAdvances.items;\n+\t\t\t\t\t\tfor (int i = 0, n = run.xAdvances.size; i < n; i++) {\n+\t\t\t\t\t\t\tfloat xAdvance = xAdvances[i];\n+\t\t\t\t\t\t\tx += xAdvance;\n+\n+\t\t\t\t\t\t\t// Don't wrap if the glyph would fit with just its width (no xadvance or kerning).\n+\t\t\t\t\t\t\tif (wrap && x > targetWidth && i > 1\n+\t\t\t\t\t\t\t\t&& x - xAdvance + (run.glyphs.get(i - 1).xoffset + run.glyphs.get(i - 1).width) * fontData.scaleX\n+\t\t\t\t\t\t\t\t\t- 0.0001f > targetWidth) {\n+\n+\t\t\t\t\t\t\t\tif (truncate != null) {\n+\t\t\t\t\t\t\t\t\ttruncate(fontData, run, targetWidth, truncate, i, glyphRunPool);\n+\t\t\t\t\t\t\t\t\tx = run.x + run.width;\n+\t\t\t\t\t\t\t\t\tbreak outer;\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tint wrapIndex = fontData.getWrapIndex(run.glyphs, i);\n+\t\t\t\t\t\t\t\tif ((run.x == 0 && wrapIndex == 0) // Require at least one glyph per line.\n+\t\t\t\t\t\t\t\t\t|| wrapIndex >= run.glyphs.size) { // Wrap at least the glyph that didn't fit.\n+\t\t\t\t\t\t\t\t\twrapIndex = i - 1;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tGlyphRun next = wrap(fontData, run, glyphRunPool, wrapIndex, i);\n+\t\t\t\t\t\t\t\truns.add(next);\n+\n+\t\t\t\t\t\t\t\t// Start the loop over with the new run on the next line.\n+\t\t\t\t\t\t\t\twidth = Math.max(width, run.x + run.width);\n+\t\t\t\t\t\t\t\tx = 0;\n+\t\t\t\t\t\t\t\ty += fontData.down;\n+\t\t\t\t\t\t\t\tlines++;\n+\t\t\t\t\t\t\t\tnext.x = 0;\n+\t\t\t\t\t\t\t\tnext.y = y;\n+\t\t\t\t\t\t\t\ti = -1;\n+\t\t\t\t\t\t\t\tn = next.xAdvances.size;\n+\t\t\t\t\t\t\t\txAdvances = next.xAdvances.items;\n+\t\t\t\t\t\t\t\trun = next;\n+\t\t\t\t\t\t\t} else\n+\t\t\t\t\t\t\t\trun.width += xAdvance;\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n ",
      "parent_sha": "871e28a3be5fe72699953590c287b7a5ce0b32d5"
    }
  },
  {
    "oid": "80180dc6f9e4ea836d42794152d84f8f2aaad66a",
    "message": "iOS Music.getPosition() returns secs. Fixes #1952",
    "date": "2014-06-28T21:29:07Z",
    "url": "https://github.com/libgdx/libgdx/commit/80180dc6f9e4ea836d42794152d84f8f2aaad66a",
    "details": {
      "sha": "d6c20e3c4140b055a76f7162c12dea31be4aca8e",
      "filename": "backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSMusic.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/libgdx/libgdx/blob/80180dc6f9e4ea836d42794152d84f8f2aaad66a/backends%2Fgdx-backend-robovm%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fiosrobovm%2FIOSMusic.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/80180dc6f9e4ea836d42794152d84f8f2aaad66a/backends%2Fgdx-backend-robovm%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fiosrobovm%2FIOSMusic.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backend-robovm%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fiosrobovm%2FIOSMusic.java?ref=80180dc6f9e4ea836d42794152d84f8f2aaad66a",
      "patch": "@@ -93,7 +93,7 @@ public void setPosition (float position) {\n \n \t@Override\n \tpublic float getPosition () {\n-\t\treturn (float)(track.getCurrentTime() * 1000.0);\n+\t\treturn (float)(track.getCurrentTime());\n \t}\n \n \t@Override",
      "parent_sha": "fcb18ff6ae441da1003ef87e566e4aaf05782488"
    }
  },
  {
    "oid": "edb30eb5f4311338fec58f60102bd788a093e776",
    "message": "Fixed viewport checks.\n\ncloses #1250",
    "date": "2014-01-27T12:02:10Z",
    "url": "https://github.com/libgdx/libgdx/commit/edb30eb5f4311338fec58f60102bd788a093e776",
    "details": {
      "sha": "ccf865658e4a7e3172f44b11adf1a0696f70095e",
      "filename": "gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/libgdx/libgdx/blob/edb30eb5f4311338fec58f60102bd788a093e776/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2FStage.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/edb30eb5f4311338fec58f60102bd788a093e776/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2FStage.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2FStage.java?ref=edb30eb5f4311338fec58f60102bd788a093e776",
      "patch": "@@ -255,7 +255,8 @@ private Actor fireEnterAndExit (Actor overLast, int screenX, int screenY, int po\n \t/** Applies a touch down event to the stage and returns true if an actor in the scene {@link Event#handle() handled} the event. */\r\n \tpublic boolean touchDown (int screenX, int screenY, int pointer, int button) {\r\n \t\tif (screenX < viewportX || screenX >= viewportX + viewportWidth) return false;\r\n-\t\tif (screenY < viewportY || screenY >= viewportY + viewportHeight) return false;\r\n+\t\tif (Gdx.graphics.getHeight() - screenY < viewportY || Gdx.graphics.getHeight() - screenY >= viewportY + viewportHeight)\r\n+\t\t\treturn false;\r\n \r\n \t\tpointerTouched[pointer] = true;\r\n \t\tpointerScreenX[pointer] = screenX;\r\n@@ -356,7 +357,8 @@ public boolean touchUp (int screenX, int screenY, int pointer, int button) {\n \t * This event only occurs on the desktop. */\r\n \tpublic boolean mouseMoved (int screenX, int screenY) {\r\n \t\tif (screenX < viewportX || screenX >= viewportX + viewportWidth) return false;\r\n-\t\tif (screenY < viewportY || screenY >= viewportY + viewportHeight) return false;\r\n+\t\tif (Gdx.graphics.getHeight() - screenY < viewportY || Gdx.graphics.getHeight() - screenY >= viewportY + viewportHeight)\r\n+\t\t\treturn false;\r\n \r\n \t\tmouseScreenX = screenX;\r\n \t\tmouseScreenY = screenY;\r",
      "parent_sha": "13279d52132482444f15ae6ac4f55ce30e9f8c77"
    }
  },
  {
    "oid": "45d0fc6fdf1d2da6df06178f5b40ccabe0e9bed3",
    "message": "Warnings",
    "date": "2013-10-08T22:07:14Z",
    "url": "https://github.com/libgdx/libgdx/commit/45d0fc6fdf1d2da6df06178f5b40ccabe0e9bed3",
    "details": {
      "sha": "641478237f64389ca5f55b58da107ecd26e57a3b",
      "filename": "tests/gdx-tests/src/com/badlogic/gdx/tests/ScrollPaneScrollBarsTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/libgdx/libgdx/blob/45d0fc6fdf1d2da6df06178f5b40ccabe0e9bed3/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2FScrollPaneScrollBarsTest.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/45d0fc6fdf1d2da6df06178f5b40ccabe0e9bed3/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2FScrollPaneScrollBarsTest.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2FScrollPaneScrollBarsTest.java?ref=45d0fc6fdf1d2da6df06178f5b40ccabe0e9bed3",
      "patch": "@@ -32,9 +32,9 @@\n /** Test switch of scroll bars + knobs from right to left, and bottom to top */\r\n public class ScrollPaneScrollBarsTest extends GdxTest {\r\n \tprivate Stage stage;\r\n-\tprivate Array<ScrollPane> scrollPanes = new Array<ScrollPane>();\r\n-\tprivate boolean doFade = true;\r\n-\tprivate boolean doOnTop = true;\r\n+\tArray<ScrollPane> scrollPanes = new Array<ScrollPane>();\r\n+\tboolean doFade = true;\r\n+\tboolean doOnTop = true;\r\n \tprivate Table bottomLeft, bottomRight, topLeft, topRight, horizOnlyTop, horizOnlyBottom, vertOnlyLeft, vertOnlyRight;\r\n \r\n \tpublic void create () {\r",
      "parent_sha": "124c778b821841e98977a4abdad1dfcc1b737f3a"
    }
  },
  {
    "oid": "1398712685f9bdf8e8a6469ae9fcd5d5b3716341",
    "message": "forgot to replace english names with actual characters",
    "date": "2013-12-03T00:31:42Z",
    "url": "https://github.com/libgdx/libgdx/commit/1398712685f9bdf8e8a6469ae9fcd5d5b3716341",
    "details": {
      "sha": "2767aa0f5300bac13166821ddc966e87738b1db7",
      "filename": "gdx/src/com/badlogic/gdx/Input.java",
      "status": "modified",
      "additions": 25,
      "deletions": 25,
      "changes": 50,
      "blob_url": "https://github.com/libgdx/libgdx/blob/1398712685f9bdf8e8a6469ae9fcd5d5b3716341/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2FInput.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/1398712685f9bdf8e8a6469ae9fcd5d5b3716341/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2FInput.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2FInput.java?ref=1398712685f9bdf8e8a6469ae9fcd5d5b3716341",
      "patch": "@@ -268,29 +268,29 @@ public static String toString(int keycode) {\n \t\t\t\tcase ENDCALL:\r\n \t\t\t\t\treturn \"End Call\";\r\n \t\t\t\tcase NUM_0:\r\n-\t\t\t\t\treturn \"Num 0\";\r\n+\t\t\t\t\treturn \"0\";\r\n \t\t\t\tcase NUM_1:\r\n-\t\t\t\t\treturn \"Num 1\";\r\n+\t\t\t\t\treturn \"1\";\r\n \t\t\t\tcase NUM_2:\r\n-\t\t\t\t\treturn \"Num 2\";\r\n+\t\t\t\t\treturn \"2\";\r\n \t\t\t\tcase NUM_3:\r\n-\t\t\t\t\treturn \"Num 3\";\r\n+\t\t\t\t\treturn \"3\";\r\n \t\t\t\tcase NUM_4:\r\n-\t\t\t\t\treturn \"Num 4\";\r\n+\t\t\t\t\treturn \"4\";\r\n \t\t\t\tcase NUM_5:\r\n-\t\t\t\t\treturn \"Num 5\";\r\n+\t\t\t\t\treturn \"5\";\r\n \t\t\t\tcase NUM_6:\r\n-\t\t\t\t\treturn \"Num 6\";\r\n+\t\t\t\t\treturn \"6\";\r\n \t\t\t\tcase NUM_7:\r\n-\t\t\t\t\treturn \"Num 7\";\r\n+\t\t\t\t\treturn \"7\";\r\n \t\t\t\tcase NUM_8:\r\n-\t\t\t\t\treturn \"Num 8\";\r\n+\t\t\t\t\treturn \"8\";\r\n \t\t\t\tcase NUM_9:\r\n-\t\t\t\t\treturn \"Num 9\";\r\n+\t\t\t\t\treturn \"9\";\r\n \t\t\t\tcase STAR:\r\n-\t\t\t\t\treturn \"Star\";\r\n+\t\t\t\t\treturn \"*\";\r\n \t\t\t\tcase POUND:\r\n-\t\t\t\t\treturn \"Pound\";\r\n+\t\t\t\t\treturn \"#\";\r\n \t\t\t\tcase UP:\r\n \t\t\t\t\treturn \"Up\";\r\n \t\t\t\tcase DOWN:\r\n@@ -364,9 +364,9 @@ public static String toString(int keycode) {\n \t\t\t\tcase Z:\r\n \t\t\t\t\treturn \"Z\";\r\n \t\t\t\tcase COMMA:\r\n-\t\t\t\t\treturn \"Comma\";\r\n+\t\t\t\t\treturn \",\";\r\n \t\t\t\tcase PERIOD:\r\n-\t\t\t\t\treturn \"Period\";\r\n+\t\t\t\t\treturn \".\";\r\n \t\t\t\tcase ALT_LEFT:\r\n \t\t\t\t\treturn \"L-Alt\";\r\n \t\t\t\tcase ALT_RIGHT:\r\n@@ -390,29 +390,29 @@ public static String toString(int keycode) {\n \t\t\t\tcase DEL:\r\n \t\t\t\t\treturn \"Delete\";  // also BACKSPACE\r\n \t\t\t\tcase GRAVE:\r\n-\t\t\t\t\treturn \"Grave\";\r\n+\t\t\t\t\treturn \"`\";\r\n \t\t\t\tcase MINUS:\r\n-\t\t\t\t\treturn \"Minus\";\r\n+\t\t\t\t\treturn \"-\";\r\n \t\t\t\tcase EQUALS:\r\n-\t\t\t\t\treturn \"Equals\";\r\n+\t\t\t\t\treturn \"=\";\r\n \t\t\t\tcase LEFT_BRACKET:\r\n-\t\t\t\t\treturn \"Left Bracket\";\r\n+\t\t\t\t\treturn \"[\";\r\n \t\t\t\tcase RIGHT_BRACKET:\r\n-\t\t\t\t\treturn \"Right Bracket\";\r\n+\t\t\t\t\treturn \"]\";\r\n \t\t\t\tcase BACKSLASH:\r\n-\t\t\t\t\treturn \"Backslash\";\r\n+\t\t\t\t\treturn \"\\\\\";\r\n \t\t\t\tcase SEMICOLON:\r\n-\t\t\t\t\treturn \"Semicolon\";\r\n+\t\t\t\t\treturn \";\";\r\n \t\t\t\tcase APOSTROPHE:\r\n-\t\t\t\t\treturn \"Apostrophe\";\r\n+\t\t\t\t\treturn \"'\";\r\n \t\t\t\tcase SLASH:\r\n-\t\t\t\t\treturn \"Slash\";\r\n+\t\t\t\t\treturn \"/\";\r\n \t\t\t\tcase AT:\r\n \t\t\t\t\treturn \"@\";\r\n \t\t\t\tcase NUM:\r\n \t\t\t\t\treturn \"Num\";\r\n \t\t\t\tcase HEADSETHOOK:\r\n-\t\t\t\t\treturn \"HEADSETHOOK\";\r\n+\t\t\t\t\treturn \"Headset Hook\";\r\n \t\t\t\tcase FOCUS:\r\n \t\t\t\t\treturn \"Focus\";\r\n \t\t\t\tcase PLUS:\r\n@@ -508,7 +508,7 @@ public static String toString(int keycode) {\n \t\t\t\tcase NUMPAD_9:\r\n \t\t\t\t\treturn \"Numpad 9\";\r\n \t\t\t\tcase COLON:\r\n-\t\t\t\t\treturn \"Colon\";\r\n+\t\t\t\t\treturn \":\";\r\n \t\t\t\tcase F1:\r\n \t\t\t\t\treturn \"F1\";\r\n \t\t\t\tcase F2:\r",
      "parent_sha": "ce7eda8dcfdec88fb8cec1e34e38f0405c7f1334"
    }
  },
  {
    "oid": "e45805718bb5c9febdb139f82b4639eb732959dd",
    "message": "Fix asset clear deadlock (#6536)",
    "date": "2021-06-02T15:15:01Z",
    "url": "https://github.com/libgdx/libgdx/commit/e45805718bb5c9febdb139f82b4639eb732959dd",
    "details": {
      "sha": "eab491848ba672ced040d6fbded3069ababbd053",
      "filename": "gdx/src/com/badlogic/gdx/assets/AssetManager.java",
      "status": "modified",
      "additions": 33,
      "deletions": 26,
      "changes": 59,
      "blob_url": "https://github.com/libgdx/libgdx/blob/e45805718bb5c9febdb139f82b4639eb732959dd/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fassets%2FAssetManager.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/e45805718bb5c9febdb139f82b4639eb732959dd/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fassets%2FAssetManager.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fassets%2FAssetManager.java?ref=e45805718bb5c9febdb139f82b4639eb732959dd",
      "patch": "@@ -699,43 +699,50 @@ public synchronized void setErrorListener (AssetErrorListener listener) {\n \n \t/** Disposes all assets in the manager and stops all asynchronous loading. */\n \t@Override\n-\tpublic synchronized void dispose () {\n+\tpublic void dispose () {\n \t\tlog.debug(\"Disposing.\");\n \t\tclear();\n \t\texecutor.dispose();\n \t}\n \n \t/** Clears and disposes all assets and the preloading queue. */\n-\tpublic synchronized void clear () {\n-\t\tloadQueue.clear();\n-\t\twhile (!update()) {\n+\tpublic void clear () {\n+\t\tsynchronized (this) {\n+\t\t\tloadQueue.clear();\n \t\t}\n \n-\t\tObjectIntMap<String> dependencyCount = new ObjectIntMap<String>();\n-\t\twhile (assetTypes.size > 0) {\n-\t\t\t// for each asset, figure out how often it was referenced\n-\t\t\tdependencyCount.clear();\n-\t\t\tArray<String> assets = assetTypes.keys().toArray();\n-\t\t\tfor (String asset : assets) {\n-\t\t\t\tArray<String> dependencies = assetDependencies.get(asset);\n-\t\t\t\tif (dependencies == null) continue;\n-\t\t\t\tfor (String dependency : dependencies)\n-\t\t\t\t\tdependencyCount.getAndIncrement(dependency, 0, 1);\n+\t\t// Lock is temporarily released to yield to blocked executor threads\n+\t\t// A pending async task can cause a deadlock if we do not release\n+\n+\t\tfinishLoading();\n+\n+\t\tsynchronized (this) {\n+\t\t\tObjectIntMap<String> dependencyCount = new ObjectIntMap<String>();\n+\t\t\twhile (assetTypes.size > 0) {\n+\t\t\t\t// for each asset, figure out how often it was referenced\n+\t\t\t\tdependencyCount.clear();\n+\t\t\t\tArray<String> assets = assetTypes.keys().toArray();\n+\t\t\t\tfor (String asset : assets) {\n+\t\t\t\t\tArray<String> dependencies = assetDependencies.get(asset);\n+\t\t\t\t\tif (dependencies == null) continue;\n+\t\t\t\t\tfor (String dependency : dependencies)\n+\t\t\t\t\t\tdependencyCount.getAndIncrement(dependency, 0, 1);\n+\t\t\t\t}\n+\n+\t\t\t\t// only dispose of assets that are root assets (not referenced)\n+\t\t\t\tfor (String asset : assets)\n+\t\t\t\t\tif (dependencyCount.get(asset, 0) == 0) unload(asset);\n \t\t\t}\n \n-\t\t\t// only dispose of assets that are root assets (not referenced)\n-\t\t\tfor (String asset : assets)\n-\t\t\t\tif (dependencyCount.get(asset, 0) == 0) unload(asset);\n+\t\t\tthis.assets.clear();\n+\t\t\tthis.assetTypes.clear();\n+\t\t\tthis.assetDependencies.clear();\n+\t\t\tthis.loaded = 0;\n+\t\t\tthis.toLoad = 0;\n+\t\t\tthis.peakTasks = 0;\n+\t\t\tthis.loadQueue.clear();\n+\t\t\tthis.tasks.clear();\n \t\t}\n-\n-\t\tthis.assets.clear();\n-\t\tthis.assetTypes.clear();\n-\t\tthis.assetDependencies.clear();\n-\t\tthis.loaded = 0;\n-\t\tthis.toLoad = 0;\n-\t\tthis.peakTasks = 0;\n-\t\tthis.loadQueue.clear();\n-\t\tthis.tasks.clear();\n \t}\n \n \t/** @return the {@link Logger} used by the {@link AssetManager} */",
      "parent_sha": "81c17f4671a5b41ad343e68fdaf5862192f8cff2"
    }
  },
  {
    "oid": "8d478f03bd6c7bc08e82e76b0248a34dcd80226b",
    "message": "[changed] random tiles are used in TileTest now",
    "date": "2010-12-03T05:12:52Z",
    "url": "https://github.com/libgdx/libgdx/commit/8d478f03bd6c7bc08e82e76b0248a34dcd80226b",
    "details": {
      "sha": "ed9b8ad85e7f80b464368d89520fc3c1c23cf4b8",
      "filename": "tests/gdx-tests/src/com/badlogic/gdx/tests/TileTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/libgdx/libgdx/blob/8d478f03bd6c7bc08e82e76b0248a34dcd80226b/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2FTileTest.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/8d478f03bd6c7bc08e82e76b0248a34dcd80226b/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2FTileTest.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2FTileTest.java?ref=8d478f03bd6c7bc08e82e76b0248a34dcd80226b",
      "patch": "@@ -12,6 +12,8 @@\n  */\r\n package com.badlogic.gdx.tests;\r\n \r\n+import java.util.Random;\r\n+\r\n import com.badlogic.gdx.Gdx;\r\n import com.badlogic.gdx.graphics.Color;\r\n import com.badlogic.gdx.graphics.GL10;\r\n@@ -41,13 +43,16 @@ public void create() {\n \t\tcam.getPosition().set(WIDTH*32/2, HEIGHT*32/2,0);\t\t\r\n \t\ttexture = Gdx.graphics.newTexture(Gdx.files.internal(\"data/tiles.png\"), TextureFilter.Nearest, TextureFilter.Nearest, TextureWrap.ClampToEdge, TextureWrap.ClampToEdge);\r\n \t\t\r\n+\t\tRandom rand = new Random();\r\n \t\tfor(int i = 0; i < LAYERS; i++) {\r\n \t\t\tcaches[i] = new SpriteCache();\r\n \t\t\tSpriteCache cache = caches[i];\r\n \t\t\tcache.beginCache();\r\n \t\t\tfor(int y = 0; y < HEIGHT; y++) {\r\n \t\t\t\tfor(int x = 0; x < WIDTH; x++) {\r\n-\t\t\t\t\tcache.add(texture, x << 5, y << 5, 1, 1, 32, 32, Color.WHITE);\r\n+\t\t\t\t\tint tileX = rand.nextInt(5);\r\n+\t\t\t\t\tint tileY = rand.nextInt(5);\r\n+\t\t\t\t\tcache.add(texture, x << 5, y << 5, 1 + tileX * 33, 1 + tileY * 33, 32, 32, Color.WHITE);\r\n \t\t\t\t}\r\n \t\t\t}\t\r\n \t\t\tlayers[i] = cache.endCache();\r",
      "parent_sha": "464f6caf86eb77fba0db4b2c46eec0a22108e8bd"
    }
  },
  {
    "oid": "80b9694e38e1809c845698d6204c95f204c24112",
    "message": "Fixed textureatlas split support. Durr\nFixed AtlasSprite rotate90. Again/more. Hate it!",
    "date": "2012-07-01T09:50:15Z",
    "url": "https://github.com/libgdx/libgdx/commit/80b9694e38e1809c845698d6204c95f204c24112",
    "details": {
      "sha": "34ddc067967c20845f985f2bf2ac6a6b766a0f95",
      "filename": "gdx/src/com/badlogic/gdx/graphics/g2d/TextureAtlas.java",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/libgdx/libgdx/blob/80b9694e38e1809c845698d6204c95f204c24112/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2FTextureAtlas.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/80b9694e38e1809c845698d6204c95f204c24112/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2FTextureAtlas.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg2d%2FTextureAtlas.java?ref=80b9694e38e1809c845698d6204c95f204c24112",
      "patch": "@@ -153,9 +153,9 @@ else if (direction.equals(\"xy\")) {\n \t\t\t\t\t\tif (readTuple(reader) == 4) { // split is optional\r\n \t\t\t\t\t\t\tregion.splits = new int[] {Integer.parseInt(tuple[0]), Integer.parseInt(tuple[1]),\r\n \t\t\t\t\t\t\t\tInteger.parseInt(tuple[2]), Integer.parseInt(tuple[3])};\r\n+\t\t\t\t\t\t\treadTuple(reader);\r\n \t\t\t\t\t\t}\r\n \r\n-\t\t\t\t\t\treadTuple(reader);\r\n \t\t\t\t\t\tregion.originalWidth = Integer.parseInt(tuple[0]);\r\n \t\t\t\t\t\tregion.originalHeight = Integer.parseInt(tuple[1]);\r\n \r\n@@ -170,8 +170,8 @@ else if (direction.equals(\"xy\")) {\n \t\t\t\t\t\tsortedRegions.add(region);\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n-\t\t\t} catch (IOException ex) {\r\n-\t\t\t\tthrow new GdxRuntimeException(\"Error reading pack file: \" + packFile);\r\n+\t\t\t} catch (Exception ex) {\r\n+\t\t\t\tthrow new GdxRuntimeException(\"Error reading pack file: \" + packFile, ex);\r\n \t\t\t} finally {\r\n \t\t\t\ttry {\r\n \t\t\t\t\treader.close();\r\n@@ -589,11 +589,14 @@ public void rotate90 (boolean clockwise) {\n \t\t\tfloat oldOffsetX = region.offsetX;\r\n \t\t\tfloat oldOffsetY = region.offsetY;\r\n \r\n+\t\t\tfloat widthRatio = getWidth() / region.originalWidth;\r\n+\t\t\tfloat heightRatio = getHeight() / region.originalHeight;\r\n+\r\n \t\t\tif (clockwise) {\r\n \t\t\t\tregion.offsetX = oldOffsetY;\r\n-\t\t\t\tregion.offsetY = region.originalHeight - oldOffsetX - region.packedWidth;\r\n+\t\t\t\tregion.offsetY = region.originalHeight * heightRatio - oldOffsetX - region.packedWidth * widthRatio;\r\n \t\t\t} else {\r\n-\t\t\t\tregion.offsetX = region.originalWidth - oldOffsetY - region.packedHeight;\r\n+\t\t\t\tregion.offsetX = region.originalWidth * widthRatio - oldOffsetY - region.packedHeight * heightRatio;\r\n \t\t\t\tregion.offsetY = oldOffsetX;\r\n \t\t\t}\r\n \r",
      "parent_sha": "ff82fe3779b88c48a5288229f3f7cf0b3cb369e3"
    }
  },
  {
    "oid": "dfaa35111695effea64ef7510281478c2102abda",
    "message": "Fix issue where Android wouldn't detect bluetooth (#5081)\n\n* Fix issue where Android wouldn't detect bluetooth\r\n\r\n keyboard connected before app launch\r\n\r\n* Converted CR/LF to LF",
    "date": "2018-02-11T16:50:02Z",
    "url": "https://github.com/libgdx/libgdx/commit/dfaa35111695effea64ef7510281478c2102abda",
    "details": {
      "sha": "f12d8d2a35bcb2aa91365837492ef49c9f960503",
      "filename": "backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/libgdx/libgdx/blob/dfaa35111695effea64ef7510281478c2102abda/backends%2Fgdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidApplication.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/dfaa35111695effea64ef7510281478c2102abda/backends%2Fgdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidApplication.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidApplication.java?ref=dfaa35111695effea64ef7510281478c2102abda",
      "patch": "@@ -25,7 +25,6 @@\n import android.os.Bundle;\n import android.os.Debug;\n import android.os.Handler;\n-import android.util.Log;\n import android.view.Gravity;\n import android.view.View;\n import android.view.Window;\n@@ -39,7 +38,6 @@\n import com.badlogic.gdx.Files;\n import com.badlogic.gdx.Gdx;\n import com.badlogic.gdx.Graphics;\n-import com.badlogic.gdx.Input;\n import com.badlogic.gdx.LifecycleListener;\n import com.badlogic.gdx.Net;\n import com.badlogic.gdx.Preferences;\n@@ -51,7 +49,6 @@\n import com.badlogic.gdx.utils.SnapshotArray;\n \n import java.lang.reflect.Method;\n-import java.util.Arrays;\n \n /** An implementation of the {@link Application} interface for Android. Create an {@link Activity} that derives from this class. In\n  * the {@link Activity#onCreate(Bundle)} method call the {@link #initialize(ApplicationListener)} method specifying the\n@@ -198,6 +195,10 @@ public void dispose () {\n \t\t\t\tlog(\"AndroidApplication\", \"Failed to create AndroidVisibilityListener\", e);\n \t\t\t}\n \t\t}\n+\t\t\n+\t\t// detect an already connected bluetooth keyboardAvailable\n+\t\tif (getResources().getConfiguration().keyboard != Configuration.KEYBOARD_NOKEYS)\n+\t\t\tthis.getInput().keyboardAvailable = true;\n \t}\n \n \tprotected FrameLayout.LayoutParams createLayoutParams () {",
      "parent_sha": "da754d096365aaab25055d78ed4f07e55a15daca"
    }
  },
  {
    "oid": "4bbd778f2b32c39e6f141485b1ca8294390d7046",
    "message": "[todo] fix World.beginContact and endContact. Takes a shitload of time at the moment.",
    "date": "2010-05-12T13:45:10Z",
    "url": "https://github.com/libgdx/libgdx/commit/4bbd778f2b32c39e6f141485b1ca8294390d7046",
    "details": {
      "sha": "7aa07164f458aa73f054a29bbeb4919379ca0088",
      "filename": "gdx-tests/src/com/badlogic/gdx/tests/Box2DTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/libgdx/libgdx/blob/4bbd778f2b32c39e6f141485b1ca8294390d7046/gdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2FBox2DTest.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/4bbd778f2b32c39e6f141485b1ca8294390d7046/gdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2FBox2DTest.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2FBox2DTest.java?ref=4bbd778f2b32c39e6f141485b1ca8294390d7046",
      "patch": "@@ -54,7 +54,7 @@ public void render(Application app)\n \t\tcam.setMatrices(app.getGraphics());\t\r\n \t\t\t\t\r\n \t\tlong s = System.nanoTime();\r\n-\t\tworld.step( app.getGraphics().getDeltaTime(), 8, 3 );\r\n+\t\tworld.step( app.getGraphics().getDeltaTime(), 1, 1 );\r\n \t\tfloat updateTime = (System.nanoTime()-s)/1000000000.0f;\r\n \t\t\r\n \t\tfor( int i = 0; i < boxes.size(); i++ )\t\t\t\t\r\n@@ -122,7 +122,7 @@ private void createWorld( )\n \t\tground.createFixture( groundBox, 1 );\r\n \t\tgroundBox.dispose();\r\n \t\t\r\n-\t\tfor( int i = 0; i < 20; i++ )\r\n+\t\tfor( int i = 0; i < 100; i++ )\r\n \t\t{\t\t\t\r\n \t\t\tboxes.add(createBox( ));\r\n \t\t}\t\t\t\r",
      "parent_sha": "7f206d650b8f5e2b3e6742a328b06f99abf23d59"
    }
  },
  {
    "oid": "5295e0843b2eb545eaa0d948f758f434678e891d",
    "message": "[added] bach's action",
    "date": "2011-03-12T10:26:02Z",
    "url": "https://github.com/libgdx/libgdx/commit/5295e0843b2eb545eaa0d948f758f434678e891d",
    "details": {
      "sha": "e2eeeea4dc8181a250fa9f91ab04779d4f2e08d4",
      "filename": "tests/gdx-tests/src/com/badlogic/gdx/tests/ActionTest.java",
      "status": "modified",
      "additions": 21,
      "deletions": 16,
      "changes": 37,
      "blob_url": "https://github.com/libgdx/libgdx/blob/5295e0843b2eb545eaa0d948f758f434678e891d/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2FActionTest.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/5295e0843b2eb545eaa0d948f758f434678e891d/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2FActionTest.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2FActionTest.java?ref=5295e0843b2eb545eaa0d948f758f434678e891d",
      "patch": "@@ -7,14 +7,10 @@\n import com.badlogic.gdx.scenes.scene2d.Action;\r\n import com.badlogic.gdx.scenes.scene2d.OnActionCompleted;\r\n import com.badlogic.gdx.scenes.scene2d.Stage;\r\n-import com.badlogic.gdx.scenes.scene2d.actions.Delay;\r\n-import com.badlogic.gdx.scenes.scene2d.actions.FadeIn;\r\n-import com.badlogic.gdx.scenes.scene2d.actions.FadeOut;\r\n-import com.badlogic.gdx.scenes.scene2d.actions.MoveBy;\r\n-import com.badlogic.gdx.scenes.scene2d.actions.MoveTo;\r\n+import com.badlogic.gdx.scenes.scene2d.actions.FadeTo;\r\n+import com.badlogic.gdx.scenes.scene2d.actions.Forever;\r\n import com.badlogic.gdx.scenes.scene2d.actions.Parallel;\r\n-import com.badlogic.gdx.scenes.scene2d.actions.Repeat;\r\n-import com.badlogic.gdx.scenes.scene2d.actions.RotateTo;\r\n+import com.badlogic.gdx.scenes.scene2d.actions.RotateBy;\r\n import com.badlogic.gdx.scenes.scene2d.actions.ScaleTo;\r\n import com.badlogic.gdx.scenes.scene2d.actions.Sequence;\r\n import com.badlogic.gdx.scenes.scene2d.actors.Image;\r\n@@ -74,16 +70,25 @@ public void create() {\n //\t\t\t                   Delay.$(Parallel.$( RotateTo.$(360, 1), \r\n //\t\t\t                  \t \t\t\t\t\t\tFadeIn.$(1), \r\n //\t\t\t                  \t \t\t\t\t\t\tScaleTo.$(1, 1, 1)), 1)));\r\n-\t\tOnActionCompleted listener = new OnActionCompleted() {\t\t\t\r\n-\t\t\t@Override public void completed (Action action) {\r\n-\t\t\t\timg.action(Parallel.$(Sequence.$(FadeOut.$(2), FadeIn.$(2)),\r\n-\t\t\t\t\tSequence.$(ScaleTo.$(0.1f, 0.1f, 1.5f), ScaleTo.$(1.0f, 1.0f, 1.5f))).setCompletionListener(this));\t\t\t\t\r\n-\t\t\t}\r\n-\t\t};\r\n-\t\t\r\n-\t\timg.action(Parallel.$(Sequence.$(FadeOut.$(2), FadeIn.$(2)),\r\n-\t\t\tSequence.$(ScaleTo.$(0.1f, 0.1f, 1.5f), ScaleTo.$(1.0f, 1.0f, 1.5f))).setCompletionListener(listener));\r\n+//\t\tOnActionCompleted listener = new OnActionCompleted() {\t\t\t\r\n+//\t\t\t@Override public void completed (Action action) {\r\n+//\t\t\t\timg.action(Parallel.$(Sequence.$(FadeOut.$(2), FadeIn.$(2)),\r\n+//\t\t\t\t\tSequence.$(ScaleTo.$(0.1f, 0.1f, 1.5f), ScaleTo.$(1.0f, 1.0f, 1.5f))).setCompletionListener(this));\t\t\t\t\r\n+//\t\t\t}\r\n+//\t\t};\r\n+//\t\t\r\n+//\t\timg.action(Parallel.$(Sequence.$(FadeOut.$(2), FadeIn.$(2)),\r\n+//\t\t\tSequence.$(ScaleTo.$(0.1f, 0.1f, 1.5f), ScaleTo.$(1.0f, 1.0f, 1.5f))).setCompletionListener(listener));\r\n \t\t\r\n+\t\timg.action(\r\n+         Forever.$(\r\n+            Sequence.$(\r\n+                     Parallel.$(RotateBy.$(180, 2), ScaleTo.$(1.4f, 1.4f, 2), FadeTo.$(0.7f, 2)), \r\n+                     Parallel.$(RotateBy.$(180, 2), ScaleTo.$(1.0f, 1.0f, 2), FadeTo.$(1.0f, 2))\r\n+                  )\r\n+               )\r\n+        );\r\n+\t\r\n \t\tstage.addActor(img);\r\n \t}\r\n \r",
      "parent_sha": "ffeae83ba4f8284f714459e58f26cb25eb419834"
    }
  },
  {
    "oid": "10704fa2b9040e5490a994b1f6b1a833f8dbb9e6",
    "message": "Fix bug, now also works with RGBA8888",
    "date": "2015-12-24T01:15:14Z",
    "url": "https://github.com/libgdx/libgdx/commit/10704fa2b9040e5490a994b1f6b1a833f8dbb9e6",
    "details": {
      "sha": "32b10afac2e20efc41b039e6852c8d2127ce809e",
      "filename": "tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/HeightField.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/libgdx/libgdx/blob/10704fa2b9040e5490a994b1f6b1a833f8dbb9e6/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2Fg3d%2FHeightField.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/10704fa2b9040e5490a994b1f6b1a833f8dbb9e6/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2Fg3d%2FHeightField.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2Fg3d%2FHeightField.java?ref=10704fa2b9040e5490a994b1f6b1a833f8dbb9e6",
      "patch": "@@ -365,7 +365,7 @@ public static float[] heightColorsToMap (final ByteBuffer data, final Pixmap.For\n \n \t\tfloat[] dest = new float[width * height];\n \t\tfor (int i = 0; i < dest.length; ++i) {\n-\t\t\tint v = source[sourceOffset + i * 3];\n+\t\t\tint v = source[sourceOffset + i * bytesPerColor];\n \t\t\tv = v < 0 ? 256 + v : v;\n \t\t\tdest[i] = (float)v / 255f;\n \t\t}",
      "parent_sha": "29dda0880843ab9d3ea3c441d111a10fa54e96f1"
    }
  },
  {
    "oid": "5f0a2ac5835678773e2e204526dd583fc17f0042",
    "message": "Fix float precision issues and mixed usage of Math.sin, MathUtils.sin\n\nThe mixed usage of both the high-precision and the faster trig functions\ncan leads to very different results and problems due to the nature of the\nfaster methods.\n\nAlso, the MathUtils implementation produces some slightly different results\nwhen, for example, rotating a matrix on an arbitrary axis.",
    "date": "2013-03-17T17:34:37Z",
    "url": "https://github.com/libgdx/libgdx/commit/5f0a2ac5835678773e2e204526dd583fc17f0042",
    "details": {
      "sha": "757510dd0d670350b83dd088653a99b8e5124501",
      "filename": "gdx/src/com/badlogic/gdx/math/Quaternion.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/libgdx/libgdx/blob/5f0a2ac5835678773e2e204526dd583fc17f0042/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2FQuaternion.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/5f0a2ac5835678773e2e204526dd583fc17f0042/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2FQuaternion.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2FQuaternion.java?ref=5f0a2ac5835678773e2e204526dd583fc17f0042",
      "patch": "@@ -276,8 +276,8 @@ public Quaternion setFromAxis (final float x, final float y, final float z, fina\n \t\t\treturn idt();\r\n \t\td = 1f /d;\r\n \t\tfloat l_ang = angle * MathUtils.degreesToRadians;\r\n-\t\tfloat l_sin = MathUtils.sin(l_ang / 2);\r\n-\t\tfloat l_cos = MathUtils.cos(l_ang / 2);\r\n+\t\tfloat l_sin = (float)Math.sin(l_ang / 2);\r\n+\t\tfloat l_cos = (float)Math.cos(l_ang / 2);\r\n \t\treturn this.set(d * x * l_sin, d * y * l_sin, d * z * l_sin, l_cos).nor();\r\n \t}\r\n \r",
      "parent_sha": "6807f577418a46f4ec299ccc1f3d86998976f7a0"
    }
  },
  {
    "oid": "ff63cc965b1111792cf3dbd9758ccd9bfb197aca",
    "message": "Bugfix for iOS File.exists().",
    "date": "2012-10-09T15:11:21Z",
    "url": "https://github.com/libgdx/libgdx/commit/ff63cc965b1111792cf3dbd9758ccd9bfb197aca",
    "details": {
      "sha": "d6919436a7664bfc7bb1e4d1b70035976fdc3f2e",
      "filename": "backends/gdx-backend-iosmonotouch/src/com/badlogic/gdx/backends/ios/IOSFileHandle.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/libgdx/libgdx/blob/ff63cc965b1111792cf3dbd9758ccd9bfb197aca/backends%2Fgdx-backend-iosmonotouch%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fios%2FIOSFileHandle.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/ff63cc965b1111792cf3dbd9758ccd9bfb197aca/backends%2Fgdx-backend-iosmonotouch%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fios%2FIOSFileHandle.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backend-iosmonotouch%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fios%2FIOSFileHandle.java?ref=ff63cc965b1111792cf3dbd9758ccd9bfb197aca",
      "patch": "@@ -54,7 +54,7 @@ public FileHandle parent () {\n \t */\r\n \t@Override\r\n \tpublic boolean exists () {\r\n-\t\treturn file.exists();\r\n+\t\treturn file().exists();\r\n \t}\r\n \r\n \tpublic File file () {\r",
      "parent_sha": "1054dc4b8138de48f4c3ba8695891e8221faee42"
    }
  },
  {
    "oid": "237077eab63408604da084d7133a7bcf7ad4f38d",
    "message": "Fix merge problems for commit \"Fix problem with running already finished actions by ParallelAction\"",
    "date": "2015-06-04T18:39:04Z",
    "url": "https://github.com/libgdx/libgdx/commit/237077eab63408604da084d7133a7bcf7ad4f38d",
    "details": {
      "sha": "04eaa53c928a8d354f46e60a52ec4ecf1ce76c2d",
      "filename": "gdx/src/com/badlogic/gdx/scenes/scene2d/actions/ParallelAction.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/libgdx/libgdx/blob/237077eab63408604da084d7133a7bcf7ad4f38d/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Factions%2FParallelAction.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/237077eab63408604da084d7133a7bcf7ad4f38d/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Factions%2FParallelAction.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Factions%2FParallelAction.java?ref=237077eab63408604da084d7133a7bcf7ad4f38d",
      "patch": "@@ -68,10 +68,10 @@ public boolean act (float delta) {\n \t\ttry {\r\n \t\t\tArray<Action> actions = this.actions;\r\n \t\t\tfor (int i = 0, n = actions.size; i < n && actor != null; i++) {\r\n+\t\t\t\tAction currentAction = actions.get(i);\r\n \t\t\t\tif (currentAction.getActor()!=null && !currentAction.act(delta))\r\n \t\t\t\t\tcomplete = false;\r\n \t\t\t\tif (actor == null) return true; // This action was removed.\r\n-\t\t\t\tif (actor == null) return true; // This action was removed.\r\n \t\t\t}\r\n \t\t\treturn complete;\r\n \t\t} finally {\r",
      "parent_sha": "ab35384b7cb4bf6157b217f47fe93410857bf9d0"
    }
  },
  {
    "oid": "0e23b3aa425b99bdb61d0df8988cd604f3a6af4c",
    "message": "getRotation for livewallpaper\n\nBut it's little bit buggy, don't know why.\r\nIf you place your device to 0 degrees position (portraite orientation) \r\nand rotate to 180 degrees, nothing be detected, or from 90 to 270 and \r\nversa. But if you rotate your device from 0 to 90 or 270, or from 90 \r\nto 180 and 0 and so on - all is fine (different orientations).",
    "date": "2012-11-07T10:07:38Z",
    "url": "https://github.com/libgdx/libgdx/commit/0e23b3aa425b99bdb61d0df8988cd604f3a6af4c",
    "details": {
      "sha": "b27cd0013a188089f122151066dab0ad6ecae2b2",
      "filename": "backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidInput.java",
      "status": "modified",
      "additions": 14,
      "deletions": 7,
      "changes": 21,
      "blob_url": "https://github.com/libgdx/libgdx/blob/0e23b3aa425b99bdb61d0df8988cd604f3a6af4c/backends%2Fgdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidInput.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/0e23b3aa425b99bdb61d0df8988cd604f3a6af4c/backends%2Fgdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidInput.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidInput.java?ref=0e23b3aa425b99bdb61d0df8988cd604f3a6af4c",
      "patch": "@@ -696,9 +696,20 @@ public int lookUpPointerIndex (int pointerId) {\n \r\n \t@Override\r\n \tpublic int getRotation () {\r\n-\t\tif(context instanceof Activity) {\r\n-\t\t\tint orientation = ((Activity)context).getWindowManager().getDefaultDisplay().getOrientation();\r\n-\t\t\tswitch (orientation) {\r\n+\t\tint orientation = 0;\r\n+\r\n+\t\tif (context instanceof Activity) {\r\n+\t\t\torientation = ((Activity) context).getWindowManager().getDefaultDisplay().getOrientation();\r\n+\t\t} else {\r\n+\t\t\tfinal DisplayMetrics metrics = new DisplayMetrics();\r\n+\t\t\tfinal Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();\r\n+\r\n+\t\t\tdisplay.getMetrics(metrics);\r\n+\r\n+\t\t\torientation = display.getOrientation();\r\n+\t\t}\r\n+\r\n+\t\tswitch (orientation) {\r\n \t\t\tcase Surface.ROTATION_0:\r\n \t\t\t\treturn 0;\r\n \t\t\tcase Surface.ROTATION_90:\r\n@@ -709,10 +720,6 @@ public int getRotation () {\n \t\t\t\treturn 270;\r\n \t\t\tdefault:\r\n \t\t\t\treturn 0;\r\n-\t\t\t}\r\n-\t\t} else {\r\n-\t\t\t// FIXME livewallpaper support\r\n-\t\t\treturn 0;\r\n \t\t}\r\n \t}\r\n \r",
      "parent_sha": "4e38150abda927710d7ee22bc952a8d8785db011"
    }
  },
  {
    "oid": "767e85919b3e67ccb15bd0fbbc79b9b7fbaf476f",
    "message": "The test also intercepts Gdx.gl now.",
    "date": "2014-06-15T18:20:23Z",
    "url": "https://github.com/libgdx/libgdx/commit/767e85919b3e67ccb15bd0fbbc79b9b7fbaf476f",
    "details": {
      "sha": "1c89f8939081d7837b0cfddb81385a68c93bbae7",
      "filename": "tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/Benchmark3DTest.java",
      "status": "modified",
      "additions": 16,
      "deletions": 11,
      "changes": 27,
      "blob_url": "https://github.com/libgdx/libgdx/blob/767e85919b3e67ccb15bd0fbbc79b9b7fbaf476f/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2Fg3d%2FBenchmark3DTest.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/767e85919b3e67ccb15bd0fbbc79b9b7fbaf476f/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2Fg3d%2FBenchmark3DTest.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2Fg3d%2FBenchmark3DTest.java?ref=767e85919b3e67ccb15bd0fbbc79b9b7fbaf476f",
      "patch": "@@ -66,6 +66,7 @@ public class Benchmark3DTest extends BaseG3dHudTest {\n \tpublic void create () {\n \t\tsuper.create();\n \n+\t\tGdx.gl = new GL20Benchmark(Gdx.gl);\n \t\tGdx.gl20 = new GL20Benchmark(Gdx.gl20);\n \t\tGdx.gl30 = new GL30Benchmark(Gdx.gl30);\n \n@@ -84,11 +85,11 @@ public void create () {\n \t\ttextureBindsLabel = new Label(\"Texture binds: 999\", skin);\n \t\ttextureBindsLabel.setPosition(0, trisCountLabel.getTop());\n \t\thud.addActor(textureBindsLabel);\n-\t\t\n+\n \t\tshaderSwitchesLabel = new Label(\"Shader switches: 999\", skin);\n \t\tshaderSwitchesLabel.setPosition(0, textureBindsLabel.getTop());\n \t\thud.addActor(shaderSwitchesLabel);\n-\t\t\n+\n \t\tdrawCallsLabel = new Label(\"Draw calls: 999\", skin);\n \t\tdrawCallsLabel.setPosition(0, shaderSwitchesLabel.getTop());\n \t\thud.addActor(drawCallsLabel);\n@@ -167,22 +168,25 @@ protected Vector3 randomPosition () {\n \tprotected void getStatus (final StringBuilder stringBuilder) {\n \t\tstringBuilder.setLength(0);\n \t\tstringBuilder.append(\"GL calls: \");\n-\t\tstringBuilder.append(((GL20Benchmark) Gdx.gl20).calls + ((GL30Benchmark) Gdx.gl30).calls);\n+\t\tstringBuilder.append(((GL20Benchmark)Gdx.gl).calls + ((GL20Benchmark)Gdx.gl20).calls + ((GL30Benchmark)Gdx.gl30).calls);\n \t\tglCallsLabel.setText(stringBuilder);\n \n \t\tstringBuilder.setLength(0);\n \t\tstringBuilder.append(\"Draw calls: \");\n-\t\tstringBuilder.append(((GL20Benchmark) Gdx.gl20).drawCalls + ((GL30Benchmark) Gdx.gl30).drawCalls);\n+\t\tstringBuilder.append(((GL20Benchmark)Gdx.gl).drawCalls + ((GL20Benchmark)Gdx.gl20).drawCalls\n+\t\t\t+ ((GL30Benchmark)Gdx.gl30).drawCalls);\n \t\tdrawCallsLabel.setText(stringBuilder);\n-\t\t\n+\n \t\tstringBuilder.setLength(0);\n \t\tstringBuilder.append(\"Shader switches: \");\n-\t\tstringBuilder.append(((GL20Benchmark) Gdx.gl20).shaderSwitches + ((GL30Benchmark) Gdx.gl30).shaderSwitches);\n+\t\tstringBuilder.append(((GL20Benchmark)Gdx.gl).shaderSwitches + ((GL20Benchmark)Gdx.gl20).shaderSwitches\n+\t\t\t+ ((GL30Benchmark)Gdx.gl30).shaderSwitches);\n \t\tshaderSwitchesLabel.setText(stringBuilder);\n-\t\t\n+\n \t\tstringBuilder.setLength(0);\n \t\tstringBuilder.append(\"Texture binds: \");\n-\t\tstringBuilder.append(((GL20Benchmark) Gdx.gl20).textureBinds + ((GL30Benchmark) Gdx.gl30).textureBinds);\n+\t\tstringBuilder.append(((GL20Benchmark)Gdx.gl).textureBinds + ((GL20Benchmark)Gdx.gl20).textureBinds\n+\t\t\t+ ((GL30Benchmark)Gdx.gl30).textureBinds);\n \t\ttextureBindsLabel.setText(stringBuilder);\n \n \t\tstringBuilder.setLength(0);\n@@ -198,10 +202,11 @@ protected void getStatus (final StringBuilder stringBuilder) {\n \t\tstringBuilder.append(\", Point: \");\n \t\tstringBuilder.append(environment.pointLights.size);\n \t\tlightsLabel.setText(stringBuilder);\n-\t\t\n+\n \t\t((BenchmarkModelBatch)modelBatch).reset();\n-\t\t((GL20Benchmark) Gdx.gl20).reset();\n-\t\t((GL30Benchmark) Gdx.gl30).reset();\n+\t\t((GL20Benchmark)Gdx.gl).reset();\n+\t\t((GL20Benchmark)Gdx.gl20).reset();\n+\t\t((GL30Benchmark)Gdx.gl30).reset();\n \n \t\tstringBuilder.setLength(0);\n \t\tsuper.getStatus(stringBuilder);",
      "parent_sha": "7183cc75485c7cda3bcfe0eb10b42df92bf03071"
    }
  },
  {
    "oid": "5c76a51aae9e99562f5fb5fe42203f00f1326542",
    "message": "MeshBuilder dont assume indices are consecutive",
    "date": "2013-12-06T16:50:10Z",
    "url": "https://github.com/libgdx/libgdx/commit/5c76a51aae9e99562f5fb5fe42203f00f1326542",
    "details": {
      "sha": "1f4b1e363d1e44e80f7f0478ae8478b01bf0cfeb",
      "filename": "gdx/src/com/badlogic/gdx/graphics/g3d/utils/MeshBuilder.java",
      "status": "modified",
      "additions": 57,
      "deletions": 27,
      "changes": 84,
      "blob_url": "https://github.com/libgdx/libgdx/blob/5c76a51aae9e99562f5fb5fe42203f00f1326542/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg3d%2Futils%2FMeshBuilder.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/5c76a51aae9e99562f5fb5fe42203f00f1326542/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg3d%2Futils%2FMeshBuilder.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fgraphics%2Fg3d%2Futils%2FMeshBuilder.java?ref=5c76a51aae9e99562f5fb5fe42203f00f1326542",
      "patch": "@@ -100,7 +100,7 @@ public class MeshBuilder implements MeshPartBuilder {\n \tprivate boolean colorSet;\r\n \t/** The current primitiveType */\r\n \tprivate int primitiveType;\r\n-\t// FIXME makes this configurable\r\n+\t/** The UV range used when building */\r\n \tprivate float uMin = 0, uMax = 1, vMin = 0, vMax = 1;\r\n \tprivate float[] vertex;\r\n \t\r\n@@ -356,6 +356,17 @@ public void ensureRectangles(int numRectangles) {\n \t\tensureRectangles(4 * numRectangles, numRectangles);\r\n \t}\r\n \t\r\n+\tprivate short lastIndex = -1;\r\n+\t@Override\r\n+\tpublic short lastIndex() {\r\n+\t\treturn lastIndex;\r\n+\t}\r\n+\r\n+\tprivate final void addVertex(final float[] values, final int offset) {\r\n+\t\tvertices.addAll(values, offset, stride);\r\n+\t\tlastIndex = (short)(vindex++);\r\n+\t}\r\n+\t\r\n \t@Override\r\n \tpublic short vertex(Vector3 pos, Vector3 nor, Color col, Vector2 uv) {\r\n \t\tif (vindex >= Short.MAX_VALUE)\r\n@@ -399,20 +410,16 @@ public short vertex(Vector3 pos, Vector3 nor, Color col, Vector2 uv) {\n \t\t\tvertex[uvOffset  ] = uv.x;\r\n \t\t\tvertex[uvOffset+1] = uv.y;\r\n \t\t}\r\n-\t\tvertices.addAll(vertex);\r\n-\t\treturn (short)(vindex++);\r\n+\t\taddVertex(vertex, 0);\r\n+\t\treturn lastIndex;\r\n \t}\r\n \t\r\n-\t@Override\r\n-\tpublic short lastIndex() {\r\n-\t\treturn (short)(vindex-1);\r\n-\t}\r\n-\r\n \t@Override\r\n \tpublic short vertex(final float... values) {\r\n-\t\tvertices.addAll(values);\r\n-\t\tvindex += values.length / stride;\r\n-\t\treturn (short)(vindex-1);\r\n+\t\tfinal int n = values.length - stride;\r\n+\t\tfor (int i = 0; i <= n; i += stride)\r\n+\t\t\taddVertex(values, i);\r\n+\t\treturn lastIndex;\r\n \t}\r\n \t\r\n \t@Override\r\n@@ -801,29 +808,35 @@ else if (innerWidth == width && innerHeight == height){\n \t\tfloat angle = 0f;\r\n \t\tfinal float us = 0.5f * (innerWidth / width);\r\n \t\tfinal float vs = 0.5f * (innerHeight / height);\r\n+\t\tshort i1, i2 = 0, i3 = 0, i4 = 0;\r\n \t\tfor (int i = 0; i <= divisions; i++) {\r\n \t\t\tangle = ao + step * i;\r\n \t\t\tfinal float x = MathUtils.cos(angle);\r\n \t\t\tfinal float y = MathUtils.sin(angle);\r\n \t\t\tcurrEx.position.set(centerX, centerY, centerZ).add(sxEx.x*x+syEx.x*y, sxEx.y*x+syEx.y*y, sxEx.z*x+syEx.z*y);\r\n \t\t\tcurrEx.uv.set(.5f + .5f * x, .5f + .5f * y);\t\t\t\t\r\n-\t\t\tvertex(currEx);\r\n+\t\t\ti1 = vertex(currEx);\r\n \t\t\t\r\n \t\t\tif(innerWidth <= 0f || innerHeight <= 0f)\t{\t\t\t\t\t\r\n \t\t\t\tif (i != 0)\r\n-\t\t\t\t\ttriangle((short)(vindex - 1), (short)(vindex - 2), center);\r\n+\t\t\t\t\ttriangle(i1, i2, center);\r\n+\t\t\t\ti2 = i1;\r\n \t\t\t}\r\n \t\t\telse if (innerWidth == width && innerHeight == height){\r\n \t\t\t\tif (i != 0)\r\n-\t\t\t\t\tline((short)(vindex - 1), (short)(vindex - 2));\r\n+\t\t\t\t\tline(i1, i2);\r\n+\t\t\t\ti2 = i1;\r\n \t\t\t}\r\n \t\t\telse {\r\n \t\t\t\tcurrIn.position.set(centerX, centerY, centerZ).add(sxIn.x*x+syIn.x*y, sxIn.y*x+syIn.y*y, sxIn.z*x+syIn.z*y);\r\n-\t\t\t\tcurrIn.uv.set(.5f + us * x, .5f + vs * y);\t\t\t\t\r\n-\t\t\t\tvertex(currIn);\r\n+\t\t\t\tcurrIn.uv.set(.5f + us * x, .5f + vs * y);\r\n+\t\t\t\ti2 = i1;\r\n+\t\t\t\ti1 = vertex(currIn);\r\n \t\t\t\t\r\n \t\t\t\tif( i != 0)\r\n-\t\t\t\t\trect((short)(vindex - 1), (short)(vindex - 2),(short)(vindex - 4), (short)(vindex - 3));\r\n+\t\t\t\t\trect(i1, i2, i4, i3);\r\n+\t\t\t\ti4 = i2;\r\n+\t\t\t\ti3 = i1;\r\n \t\t\t}\r\n \t\t}\r\n \t}\r\n@@ -853,6 +866,7 @@ public void cylinder(float width, float height, float depth, int divisions, floa\n \t\tcurr1.hasUV = curr1.hasPosition = curr1.hasNormal = true;\r\n \t\tVertexInfo curr2 = vertTmp4.set(null, null, null, null);\r\n \t\tcurr2.hasUV = curr2.hasPosition = curr2.hasNormal = true;\r\n+\t\tshort i1, i2, i3 = 0, i4 = 0;\r\n \t\t\r\n \t\tensureRectangles(2 * (divisions + 1), divisions);\r\n \t\tfor (int i = 0; i <= divisions; i++) {\r\n@@ -866,10 +880,12 @@ public void cylinder(float width, float height, float depth, int divisions, floa\n \t\t\tcurr2.normal.set(curr1.normal);\r\n \t\t\tcurr2.position.y = hh;\r\n \t\t\tcurr2.uv.set(u, 0);\r\n-\t\t\tvertex(curr1);\r\n-\t\t\tvertex(curr2);\r\n+\t\t\ti2 = vertex(curr1);\r\n+\t\t\ti1 = vertex(curr2);\r\n \t\t\tif (i != 0)\r\n-\t\t\t\trect((short)(vindex-3), (short)(vindex-1), (short)(vindex-2), (short)(vindex-4)); // FIXME don't duplicate lines and points\r\n+\t\t\t\trect(i3, i1, i2, i4); // FIXME don't duplicate lines and points\r\n+\t\t\ti4 = i2;\r\n+\t\t\ti3 = i1;\r\n \t\t}\r\n \t\tif (close) {\r\n \t\t\tellipse(width, depth, 0, 0, divisions, 0, hh, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, angleFrom, angleTo);\r\n@@ -898,18 +914,19 @@ public void cone(float width, float height, float depth, int divisions, float an\n \t\tVertexInfo curr1 = vertTmp3.set(null, null, null, null);\r\n \t\tcurr1.hasUV = curr1.hasPosition = curr1.hasNormal = true;\r\n \t\tVertexInfo curr2 = vertTmp4.set(null, null, null, null).setPos(0,hh,0).setNor(0,1,0).setUV(0.5f, 0);\r\n-\t\tfinal int base = vertex(curr2);\r\n+\t\tfinal short base = vertex(curr2);\r\n+\t\tshort i1, i2 = 0;\r\n \t\tfor (int i = 0; i <= divisions; i++) {\r\n \t\t\tangle = ao + step * i;\r\n \t\t\tu = 1f - us * i;\r\n \t\t\tcurr1.position.set(MathUtils.cos(angle) * hw, 0f, MathUtils.sin(angle) * hd);\r\n \t\t\tcurr1.normal.set(curr1.position).nor();\r\n \t\t\tcurr1.position.y = -hh;\r\n \t\t\tcurr1.uv.set(u, 1);\r\n-\t\t\tvertex(curr1);\r\n-\t\t\tif (i == 0)\r\n-\t\t\t\tcontinue;\r\n-\t\t\ttriangle((short)base, (short)(vindex-1), (short)(vindex-2)); // FIXME don't duplicate lines and points\r\n+\t\t\ti1 = vertex(curr1);\r\n+\t\t\tif (i != 0)\r\n+\t\t\t\ttriangle(base, i1, i2); // FIXME don't duplicate lines and points\r\n+\t\t\ti2 = i1;\r\n \t\t}\r\n \t\tellipse(width, depth, 0, 0, divisions, 0, -hh, 0, 0, -1, 0, -1, 0, 0, 0, 0, 1, 180f-angleTo, 180f-angleFrom);\r\n \t}\r\n@@ -929,6 +946,7 @@ public void sphere(float width, float height, float depth, int divisionsU, int d\n \t\tsphere(matTmp1.idt(), width, height, depth, divisionsU, divisionsV, angleUFrom, angleUTo, angleVFrom, angleVTo);\r\n \t}\r\n \r\n+\tprivate static ShortArray tmpIndices;\r\n \t@Override\r\n \tpublic void sphere(final Matrix4 transform, float width, float height, float depth, int divisionsU, int divisionsV, float angleUFrom, float angleUTo, float angleVFrom, float angleVTo) {\r\n \t\t// FIXME create better sphere method (- only one vertex for each pole, - position)\r\n@@ -948,6 +966,16 @@ public void sphere(final Matrix4 transform, float width, float height, float dep\n \t\tVertexInfo curr1 = vertTmp3.set(null, null, null, null);\r\n \t\tcurr1.hasUV = curr1.hasPosition = curr1.hasNormal = true;\r\n \t\t\r\n+\t\tif (tmpIndices == null)\r\n+\t\t\ttmpIndices = new ShortArray(divisionsU * 2);\r\n+\t\tfinal int s = divisionsU+3;\r\n+\t\ttmpIndices.ensureCapacity(s);\r\n+\t\twhile (tmpIndices.size > s)\r\n+\t\t\ttmpIndices.pop();\r\n+\t\twhile (tmpIndices.size < s)\r\n+\t\t\ttmpIndices.add(-1);\r\n+\t\tint tempOffset = 0;\r\n+\t\t\r\n \t\tensureRectangles((divisionsV + 1) * (divisionsU + 1), divisionsV * divisionsU);\r\n \t\tfor (int iv = 0; iv <= divisionsV; iv++) {\r\n \t\t\tangleV = avo + stepV * iv;\r\n@@ -960,9 +988,11 @@ public void sphere(final Matrix4 transform, float width, float height, float dep\n \t\t\t\tcurr1.position.set(MathUtils.cos(angleU) * hw * t, h, MathUtils.sin(angleU) * hd * t).mul(transform);\r\n \t\t\t\tcurr1.normal.set(curr1.position).nor();\r\n \t\t\t\tcurr1.uv.set(u, v);\r\n-\t\t\t\tvertex(curr1);\r\n+\t\t\t\ttmpIndices.set(tempOffset, vertex(curr1));\r\n+\t\t\t\tfinal int o = tempOffset+s;\r\n \t\t\t\tif ((iv > 0) && (iu > 0)) // FIXME don't duplicate lines and points\r\n-\t\t\t\t\trect((short)(vindex-1), (short)(vindex-2), (short)(vindex-(divisionsU+3)), (short)(vindex-(divisionsU+2))); \r\n+\t\t\t\t\trect(tmpIndices.get(tempOffset), tmpIndices.get((o-1)%s), tmpIndices.get((o-(divisionsU+2))%s), tmpIndices.get((o-(divisionsU+1))%s));\r\n+\t\t\t\ttempOffset = (tempOffset + 1) % tmpIndices.size;\r\n \t\t\t}\r\n \t\t}\r\n \t}\r",
      "parent_sha": "9eb6b0a07e57a09e110db7df20a7707d8efea7a3"
    }
  },
  {
    "oid": "56d482a0804e1c82ef5b0a3a5b6b899b4d04d044",
    "message": "Sync GWT emulation with changes in core",
    "date": "2013-05-19T16:43:47Z",
    "url": "https://github.com/libgdx/libgdx/commit/56d482a0804e1c82ef5b0a3a5b6b899b4d04d044",
    "details": {
      "sha": "83799d37d601928270b215bd77d5e1f9d29501bb",
      "filename": "backends/gdx-backends-gwt/src/com/badlogic/gdx/backends/gwt/emu/com/badlogic/gdx/scenes/scene2d/ui/Skin.java",
      "status": "modified",
      "additions": 80,
      "deletions": 39,
      "changes": 119,
      "blob_url": "https://github.com/libgdx/libgdx/blob/56d482a0804e1c82ef5b0a3a5b6b899b4d04d044/backends%2Fgdx-backends-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fgwt%2Femu%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FSkin.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/56d482a0804e1c82ef5b0a3a5b6b899b4d04d044/backends%2Fgdx-backends-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fgwt%2Femu%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FSkin.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backends-gwt%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fgwt%2Femu%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Fui%2FSkin.java?ref=56d482a0804e1c82ef5b0a3a5b6b899b4d04d044",
      "patch": "@@ -32,6 +32,7 @@\n import com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable;\r\n import com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable;\r\n import com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable;\r\n+import com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable;\r\n import com.badlogic.gdx.utils.Array;\r\n import com.badlogic.gdx.utils.Disposable;\r\n import com.badlogic.gdx.utils.GdxRuntimeException;\r\n@@ -43,29 +44,12 @@\n import com.badlogic.gdx.utils.SerializationException;\r\n import com.badlogic.gwtref.client.ReflectionCache;\r\n \r\n-/** A skin has a {@link TextureAtlas} and stores resources for UI widgets to use (texture regions, ninepatches, fonts, colors,\r\n- * etc). Resources are named and can be looked up by name and type. Skin provides useful conversions, such as allowing access to\r\n- * regions in the atlas as ninepatches, sprites, drawables, etc.\r\n+/** A skin stores resources for UI widgets to use (texture regions, ninepatches, fonts, colors, etc). Resources are named and can\r\n+ * be looked up by name and type. Resources can be described in JSON. Skin provides useful conversions, such as allowing access to\r\n+ * regions in the atlas as ninepatches, sprites, drawables, etc. The get* methods return an instance of the object in the skin.\r\n+ * The new* methods return a copy of an instance in the skin.\r\n  * <p>\r\n- * Resources can be added to a skin using code, or defined in JSON. Names can be used in JSON to reference already defined\r\n- * resources or regions in the atlas. The JSON format is:\r\n- * \r\n- * <pre>\r\n- * {\r\n- * \tclassName: {\r\n- * \t\tname: value,\r\n- * \t\t...\r\n- * \t},\r\n- * \tclassName: {\r\n- * \t\tname: value,\r\n- * \t\t...\r\n- * \t},\r\n- * \t...\r\n- * }\r\n- * </pre>\r\n- * \r\n- * The class name is the fully qualified Java class name for the type of resource. The name is the name of the resource for that\r\n- * class, and the value is the serialized resource or style.\r\n+ * See the <a href=\"https://code.google.com/p/libgdx/wiki/Skin\">documentation</a> for more.\r\n  * @author Nathan Sweet */\r\n public class Skin implements Disposable {\r\n \tObjectMap<Class, ObjectMap<String, Object>> resources = new ObjectMap();\r\n@@ -96,6 +80,13 @@ public Skin (FileHandle skinFile, TextureAtlas atlas) {\n \t\tload(skinFile);\r\n \t}\r\n \r\n+\t/** Creates a skin containing the texture regions from the specified atlas. The atlas is automatically disposed when the skin is\r\n+\t * disposed. */\r\n+\tpublic Skin (TextureAtlas atlas) {\r\n+\t\tthis.atlas = atlas;\r\n+\t\taddRegions(atlas);\r\n+\t}\r\n+\r\n \t/** Adds all resources in the specified skin JSON file. */\r\n \tpublic void load (FileHandle skinFile) {\r\n \t\ttry {\r\n@@ -114,14 +105,6 @@ public void addRegions (TextureAtlas atlas) {\n \t\t}\r\n \t}\r\n \r\n-\tprivate void add (TextureAtlas atlas) {\r\n-\t\tArray<AtlasRegion> regions = atlas.getRegions();\r\n-\t\tfor (int i = 0, n = regions.size; i < n; i++) {\r\n-\t\t\tAtlasRegion region = regions.get(i);\r\n-\t\t\tadd(region.name, region, TextureRegion.class);\r\n-\t\t}\r\n-\t}\r\n-\r\n \tpublic void add (String name, Object resource) {\r\n \t\tadd(name, resource, resource.getClass());\r\n \t}\r\n@@ -184,6 +167,8 @@ public BitmapFont getFont (String name) {\n \t\treturn get(name, BitmapFont.class);\r\n \t}\r\n \r\n+\t/** Returns a registered texture region. If no region is found but a texture exists with the name, a region is created from the\r\n+\t * texture and stored in the skin. */\r\n \tpublic TextureRegion getRegion (String name) {\r\n \t\tTextureRegion region = optional(name, TextureRegion.class);\r\n \t\tif (region != null) return region;\r\n@@ -195,6 +180,26 @@ public TextureRegion getRegion (String name) {\n \t\treturn region;\r\n \t}\r\n \r\n+\t/** Returns a registered tiled drawable. If no tiled drawable is found but a region exists with the name, a tiled drawable is\r\n+\t * created from the region and stored in the skin. */\r\n+\tpublic TiledDrawable getTiledDrawable (String name) {\r\n+\t\tTiledDrawable tiled = optional(name, TiledDrawable.class);\r\n+\t\tif (tiled != null) return tiled;\r\n+\r\n+\t\tDrawable drawable = optional(name, Drawable.class);\r\n+\t\tif (tiled != null) {\r\n+\t\t\tif (!(drawable instanceof TiledDrawable)) {\r\n+\t\t\t\tthrow new GdxRuntimeException(\"Drawable found but is not a TiledDrawable: \" + name + \", \"\r\n+\t\t\t\t\t+ drawable.getClass().getName());\r\n+\t\t\t}\r\n+\t\t\treturn tiled;\r\n+\t\t}\r\n+\r\n+\t\ttiled = new TiledDrawable(getRegion(name));\r\n+\t\tadd(name, tiled, TiledDrawable.class);\r\n+\t\treturn tiled;\r\n+\t}\r\n+\r\n \t/** Returns a registered ninepatch. If no ninepatch is found but a region exists with the name, a ninepatch is created from the\r\n \t * region and stored in the skin. If the region is an {@link AtlasRegion} then the {@link AtlasRegion#splits} are used,\r\n \t * otherwise the ninepatch will have the region as the center patch. */\r\n@@ -220,6 +225,9 @@ public NinePatch getPatch (String name) {\n \t\t}\r\n \t}\r\n \r\n+\t/** Returns a registered sprite. If no sprite is found but a region exists with the name, a sprite is created from the region\r\n+\t * and stored in the skin. If the region is an {@link AtlasRegion} then an {@link AtlasSprite} is used if the region has been\r\n+\t * whitespace stripped or packed rotated 90 degrees. */\r\n \tpublic Sprite getSprite (String name) {\r\n \t\tSprite sprite = optional(name, Sprite.class);\r\n \t\tif (sprite != null) return sprite;\r\n@@ -239,10 +247,15 @@ public Sprite getSprite (String name) {\n \t\t}\r\n \t}\r\n \r\n+\t/** Returns a registered drawable. If no drawable is found but a region, ninepatch, or sprite exists with the name, then the\r\n+\t * appropriate drawable is created and stored in the skin. */\r\n \tpublic Drawable getDrawable (String name) {\r\n \t\tDrawable drawable = optional(name, Drawable.class);\r\n \t\tif (drawable != null) return drawable;\r\n \r\n+\t\tdrawable = optional(name, TiledDrawable.class);\r\n+\t\tif (drawable != null) return drawable;\r\n+\r\n \t\t// Use texture or texture region. If it has splits, use ninepatch. If it has rotation or whitespace stripping, use sprite.\r\n \t\ttry {\r\n \t\t\tTextureRegion textureRegion = getRegion(name);\r\n@@ -257,7 +270,7 @@ else if (region.rotate || region.packedWidth != region.originalWidth || region.p\n \t\t} catch (GdxRuntimeException ignored) {\r\n \t\t}\r\n \r\n-\t\t// Check for explicit registration of ninepatch or sprite.\r\n+\t\t// Check for explicit registration of ninepatch, sprite, or tiled drawable.\r\n \t\tif (drawable == null) {\r\n \t\t\tNinePatch patch = optional(name, NinePatch.class);\r\n \t\t\tif (patch != null)\r\n@@ -285,18 +298,43 @@ public String find (Object resource) {\n \t\treturn typeResources.findKey(resource, true);\r\n \t}\r\n \r\n+\t/** Returns a copy of a drawable found in the skin via {@link #getDrawable(String)}. */\r\n \tpublic Drawable newDrawable (String name) {\r\n-\t\tDrawable drawable = getDrawable(name);\r\n+\t\treturn newDrawable(getDrawable(name));\r\n+\t}\r\n+\r\n+\t/** Returns a tinted copy of a drawable found in the skin via {@link #getDrawable(String)}. */\r\n+\tpublic Drawable newDrawable (String name, float r, float g, float b, float a) {\r\n+\t\treturn newDrawable(getDrawable(name), new Color(r, g, b, a));\r\n+\t}\r\n+\r\n+\t/** Returns a tinted copy of a drawable found in the skin via {@link #getDrawable(String)}. */\r\n+\tpublic Drawable newDrawable (String name, Color tint) {\r\n+\t\treturn newDrawable(getDrawable(name), tint);\r\n+\t}\r\n+\r\n+\t/** Returns a copy of the specified drawable. */\r\n+\tpublic Drawable newDrawable (Drawable drawable) {\r\n \t\tif (drawable instanceof TextureRegionDrawable) return new TextureRegionDrawable((TextureRegionDrawable)drawable);\r\n \t\tif (drawable instanceof NinePatchDrawable) return new NinePatchDrawable((NinePatchDrawable)drawable);\r\n \t\tif (drawable instanceof SpriteDrawable) return new SpriteDrawable((SpriteDrawable)drawable);\r\n \t\tthrow new GdxRuntimeException(\"Unable to copy, unknown drawable type: \" + drawable.getClass());\r\n \t}\r\n \r\n-\tpublic Drawable newDrawable (String name, Color tint) {\r\n-\t\tDrawable drawable = getDrawable(name);\r\n+\t/** Returns a tinted copy of a drawable found in the skin via {@link #getDrawable(String)}. */\r\n+\tpublic Drawable newDrawable (Drawable drawable, float r, float g, float b, float a) {\r\n+\t\treturn newDrawable(drawable, new Color(r, g, b, a));\r\n+\t}\r\n+\r\n+\t/** Returns a tinted copy of a drawable found in the skin via {@link #getDrawable(String)}. */\r\n+\tpublic Drawable newDrawable (Drawable drawable, Color tint) {\r\n \t\tif (drawable instanceof TextureRegionDrawable) {\r\n-\t\t\tSprite sprite = new Sprite(((TextureRegionDrawable)drawable).getRegion());\r\n+\t\t\tTextureRegion region = ((TextureRegionDrawable)drawable).getRegion();\r\n+\t\t\tSprite sprite;\r\n+\t\t\tif (region instanceof AtlasRegion)\r\n+\t\t\t\tsprite = new AtlasSprite((AtlasRegion)region);\r\n+\t\t\telse\r\n+\t\t\t\tsprite = new Sprite(region);\r\n \t\t\tsprite.setColor(tint);\r\n \t\t\treturn new SpriteDrawable(sprite);\r\n \t\t}\r\n@@ -307,7 +345,11 @@ public Drawable newDrawable (String name, Color tint) {\n \t\t}\r\n \t\tif (drawable instanceof SpriteDrawable) {\r\n \t\t\tSpriteDrawable spriteDrawable = new SpriteDrawable((SpriteDrawable)drawable);\r\n-\t\t\tSprite sprite = new Sprite(spriteDrawable.getSprite());\r\n+\t\t\tSprite sprite = spriteDrawable.getSprite();\r\n+\t\t\tif (sprite instanceof AtlasSprite)\r\n+\t\t\t\tsprite = new AtlasSprite((AtlasSprite)sprite);\r\n+\t\t\telse\r\n+\t\t\t\tsprite = new Sprite(sprite);\r\n \t\t\tsprite.setColor(tint);\r\n \t\t\tspriteDrawable.setSprite(sprite);\r\n \t\t\treturn spriteDrawable;\r\n@@ -343,14 +385,14 @@ public void setEnabled (Actor actor, boolean enabled) {\n \t\t}\r\n \t}\r\n \r\n-\t/** Returns the {@link TextureAtlas} that resources in this skin reference. */\r\n+\t/** Returns the {@link TextureAtlas} that resources in this skin reference, or null. */\r\n \tpublic TextureAtlas getAtlas () {\r\n \t\treturn atlas;\r\n \t}\r\n \r\n \t/** Disposes the {@link TextureAtlas} and all {@link Disposable} resources in the skin. */\r\n \tpublic void dispose () {\r\n-\t\tatlas.dispose();\r\n+\t\tif (atlas != null) atlas.dispose();\r\n \t\tfor (ObjectMap<String, Object> entry : resources.values()) {\r\n \t\t\tfor (Object resource : entry.values())\r\n \t\t\t\tif (resource instanceof Disposable) ((Disposable)resource).dispose();\r\n@@ -361,7 +403,6 @@ protected Json getJsonLoader (final FileHandle skinFile) {\n \t\tfinal Skin skin = this;\r\n \r\n \t\tfinal Json json = new Json() {\r\n-\t\t\t@Override\r\n \t\t\tpublic <T> T readValue (Class<T> type, Class elementType, JsonValue jsonData) {\r\n \t\t\t\t// If the JSON is a string but the type is not, look up the actual value by name.\r\n \t\t\t\tif (jsonData.isString()\r",
      "parent_sha": "90de73eaa1b837818a175874b358a6c13d6eb1af"
    }
  },
  {
    "oid": "849e37d3c51761b1053270941ca95d5df1f099c1",
    "message": "Javadocs.\n\nNot reliable behavior for edges!",
    "date": "2019-05-29T14:49:21Z",
    "url": "https://github.com/libgdx/libgdx/commit/849e37d3c51761b1053270941ca95d5df1f099c1",
    "details": {
      "sha": "467195c5a1c94152d1bf9968f123ee01eaa4661d",
      "filename": "gdx/src/com/badlogic/gdx/math/Intersector.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/libgdx/libgdx/blob/849e37d3c51761b1053270941ca95d5df1f099c1/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2FIntersector.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/849e37d3c51761b1053270941ca95d5df1f099c1/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2FIntersector.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fmath%2FIntersector.java?ref=849e37d3c51761b1053270941ca95d5df1f099c1",
      "patch": "@@ -106,7 +106,7 @@ public static int pointLineSide (float linePoint1X, float linePoint1Y, float lin\n \t\t\t.signum((linePoint2X - linePoint1X) * (pointY - linePoint1Y) - (linePoint2Y - linePoint1Y) * (pointX - linePoint1X));\n \t}\n \n-\t/** Checks whether the given point is in or on the edge of the polygon.\n+\t/** Checks whether the given point is in the polygon.\n \t * @param polygon The polygon vertices passed as an array\n \t * @param point The point\n \t * @return true if the point is in the polygon */\n@@ -126,7 +126,7 @@ public static boolean isPointInPolygon (Array<Vector2> polygon, Vector2 point) {\n \t\treturn oddNodes;\n \t}\n \n-\t/** Returns true if the specified point is in or on the edge of the polygon.\n+\t/** Returns true if the specified point is in the polygon.\n \t * @param offset Starting polygon index.\n \t * @param count Number of array indices to use after offset. */\n \tpublic static boolean isPointInPolygon (float[] polygon, int offset, int count, float x, float y) {\n@@ -218,14 +218,14 @@ public static boolean intersectPolygons (Polygon p1, Polygon p2, Polygon overlap\n \t\treturn false;\n \t}\n \n-\t/** Returns true if the specified poygons intersect. A vertex position on an edge is considered intersection. */\n+\t/** Returns true if the specified poygons intersect. */\n \tstatic public boolean intersectPolygons (FloatArray polygon1, FloatArray polygon2) {\n \t\tif (Intersector.isPointInPolygon(polygon1.items, 0, polygon1.size, polygon2.items[0], polygon2.items[1])) return true;\n \t\tif (Intersector.isPointInPolygon(polygon2.items, 0, polygon2.size, polygon1.items[0], polygon1.items[1])) return true;\n \t\treturn intersectPolygonEdges(polygon1, polygon2);\n \t}\n \n-\t/** Returns true if the lines of the specified poygons intersect. A vertex position on an edge is considered intersection. */\n+\t/** Returns true if the lines of the specified poygons intersect. */\n \tstatic public boolean intersectPolygonEdges (FloatArray polygon1, FloatArray polygon2) {\n \t\tint last1 = polygon1.size - 2, last2 = polygon2.size - 2;\n \t\tfloat[] p1 = polygon1.items, p2 = polygon2.items;",
      "parent_sha": "65cd315ebf1da1c5ab914ef6b7a13832f52eaf64"
    }
  },
  {
    "oid": "cf561c803b7e431654bacd7c2d0c139e926b80b1",
    "message": "Remove old test code",
    "date": "2014-04-01T12:52:30Z",
    "url": "https://github.com/libgdx/libgdx/commit/cf561c803b7e431654bacd7c2d0c139e926b80b1",
    "details": {
      "sha": "0b7d5ea52b247fb207506b72ecaa3f3a41e0ba9e",
      "filename": "tests/gdx-tests/src/com/badlogic/gdx/tests/g3d/ShaderCollectionTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/libgdx/libgdx/blob/cf561c803b7e431654bacd7c2d0c139e926b80b1/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2Fg3d%2FShaderCollectionTest.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/cf561c803b7e431654bacd7c2d0c139e926b80b1/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2Fg3d%2FShaderCollectionTest.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/tests%2Fgdx-tests%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Ftests%2Fg3d%2FShaderCollectionTest.java?ref=cf561c803b7e431654bacd7c2d0c139e926b80b1",
      "patch": "@@ -168,7 +168,7 @@ public void setEnvironment (String name) {\n \t\t\t}\r\n \t\t} else {\r\n \t\t\tFileHandle root = Gdx.files.internal(\"data/g3d/environment\");\r\n-\t\t\tcubemap = new Cubemap(root.child(name + \"_PX.png\"), null,// root.child(name+\"_NX.png\"),\r\n+\t\t\tcubemap = new Cubemap(root.child(name + \"_PX.png\"), root.child(name+\"_NX.png\"),\r\n \t\t\t\troot.child(name + \"_PY.png\"), root.child(name + \"_NY.png\"), root.child(name + \"_PZ.png\"),\r\n \t\t\t\troot.child(name + \"_NZ.png\"), false); // FIXME mipmapping on desktop\r\n \t\t\tcubemap.load(CubemapSide.NegativeX, root.child(name + \"_NX.png\"));\r",
      "parent_sha": "452fb9a5f059a929c4c20de5ca4698283d0343c2"
    }
  },
  {
    "oid": "09ac904593af5d47769fb23d08f8a095a67e1999",
    "message": "[fixed] Delay.getActor(). I'm an idiot :D",
    "date": "2011-05-29T12:39:27Z",
    "url": "https://github.com/libgdx/libgdx/commit/09ac904593af5d47769fb23d08f8a095a67e1999",
    "details": {
      "sha": "207b591bbb94a8bd74e0d3c5450ab00a29d1f258",
      "filename": "gdx/src/com/badlogic/gdx/scenes/scene2d/actions/Delay.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/libgdx/libgdx/blob/09ac904593af5d47769fb23d08f8a095a67e1999/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Factions%2FDelay.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/09ac904593af5d47769fb23d08f8a095a67e1999/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Factions%2FDelay.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/gdx%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fscenes%2Fscene2d%2Factions%2FDelay.java?ref=09ac904593af5d47769fb23d08f8a095a67e1999",
      "patch": "@@ -69,7 +69,6 @@ public class Delay extends Action {\n \t}\r\n \r\n \t@Override public Actor getTarget () {\r\n-\t\taction.getTarget();\r\n-\t\treturn null;\r\n+\t\treturn action.getTarget();\t\t\r\n \t}\r\n }\r",
      "parent_sha": "85029ad337a96dfa5fd136e3cd49e07705664f69"
    }
  },
  {
    "oid": "cb1f4a451368e10871cc932756537835398ba21c",
    "message": "Remove comments on issue number",
    "date": "2014-01-18T16:43:15Z",
    "url": "https://github.com/libgdx/libgdx/commit/cb1f4a451368e10871cc932756537835398ba21c",
    "details": {
      "sha": "9f0627a5eb64eadd697774b8492ce1eae6f383f4",
      "filename": "backends/gdx-backend-android/src/com/badlogic/gdx/backends/android/AndroidApplication.java",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/libgdx/libgdx/blob/cb1f4a451368e10871cc932756537835398ba21c/backends%2Fgdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidApplication.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/cb1f4a451368e10871cc932756537835398ba21c/backends%2Fgdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidApplication.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backend-android%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fandroid%2FAndroidApplication.java?ref=cb1f4a451368e10871cc932756537835398ba21c",
      "patch": "@@ -176,7 +176,6 @@ public void onWindowFocusChanged (boolean hasFocus) {\n \t\tsuper.onWindowFocusChanged(hasFocus);\r\n \t\tuseImmersiveMode(this.useImmersiveMode);\r\n \t\thideStatusBar(this.hideStatusBar);\r\n-\t\t// issue 912\r\n \t\tif (hasFocus) {\r\n \t\t\tthis.wasFocusChanged = 1;\r\n \t\t\tif (this.isWaitingForAudio) {\r\n@@ -323,7 +322,6 @@ protected void onResume () {\n \t\t} else\r\n \t\t\tfirstResume = false;\r\n \r\n-\t\t// issue 912\r\n \t\tthis.isWaitingForAudio = true;\r\n \t\tif (this.wasFocusChanged == 1 || this.wasFocusChanged == -1) {\r\n \t\t\tthis.audio.resume();\r\n@@ -485,4 +483,4 @@ public void removeLifecycleListener (LifecycleListener listener) {\n \t\t\tlifecycleListeners.removeValue(listener, true);\r\n \t\t}\r\n \t}\r\n-}\n\\ No newline at end of file\n+}\r",
      "parent_sha": "532b9f534da447e646288ba481d6b56a133f0210"
    }
  },
  {
    "oid": "db805953849780161df7c1fb96f81248c19cff44",
    "message": "Fixed IOSNet openURI (#4598)",
    "date": "2017-02-12T04:01:17Z",
    "url": "https://github.com/libgdx/libgdx/commit/db805953849780161df7c1fb96f81248c19cff44",
    "details": {
      "sha": "a701704db4988fc93bff8633836494b2bab3bbec",
      "filename": "backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosmoe/IOSNet.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/libgdx/libgdx/blob/db805953849780161df7c1fb96f81248c19cff44/backends%2Fgdx-backend-moe%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fiosmoe%2FIOSNet.java",
      "raw_url": "https://github.com/libgdx/libgdx/raw/db805953849780161df7c1fb96f81248c19cff44/backends%2Fgdx-backend-moe%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fiosmoe%2FIOSNet.java",
      "contents_url": "https://api.github.com/repos/libgdx/libgdx/contents/backends%2Fgdx-backend-moe%2Fsrc%2Fcom%2Fbadlogic%2Fgdx%2Fbackends%2Fiosmoe%2FIOSNet.java?ref=db805953849780161df7c1fb96f81248c19cff44",
      "patch": "@@ -63,6 +63,10 @@ public Socket newClientSocket (Protocol protocol, String host, int port, SocketH\n \r\n \t@Override\r\n \tpublic boolean openURI (String URI) {\r\n-\t\treturn uiApp.openURL(NSURL.fileURLWithPath(URI));\r\n+\t\tif (uiApp.canOpenURL(NSURL.URLWithString(URI))) {\r\n+\t\t\tuiApp.openURL(NSURL.URLWithString(URI));\r\n+\t\t\treturn true;\r\n+\t\t}\r\n+\t\treturn false;\r\n \t}\r\n }\r",
      "parent_sha": "cef498f67beedbe7eb7cf4e921c0b22f9d096fd4"
    }
  }
]