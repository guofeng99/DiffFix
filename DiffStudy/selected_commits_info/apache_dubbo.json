[
  {
    "oid": "044f620cc7e381c450a87fddf74f1ad8803583fd",
    "message": "optimized testExporterThreadpoolName by starting dispatcher thread directly (#15241)",
    "date": "2025-03-17T01:56:37Z",
    "url": "https://github.com/apache/dubbo/commit/044f620cc7e381c450a87fddf74f1ad8803583fd",
    "details": {
      "sha": "2727b349807f1d3585cd76ba7ddcd9bc6da1d767",
      "filename": "dubbo-metrics/dubbo-metrics-prometheus/src/test/java/org/apache/dubbo/metrics/prometheus/PrometheusMetricsThreadPoolTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/apache/dubbo/blob/044f620cc7e381c450a87fddf74f1ad8803583fd/dubbo-metrics%2Fdubbo-metrics-prometheus%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Fmetrics%2Fprometheus%2FPrometheusMetricsThreadPoolTest.java",
      "raw_url": "https://github.com/apache/dubbo/raw/044f620cc7e381c450a87fddf74f1ad8803583fd/dubbo-metrics%2Fdubbo-metrics-prometheus%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Fmetrics%2Fprometheus%2FPrometheusMetricsThreadPoolTest.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-metrics%2Fdubbo-metrics-prometheus%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Fmetrics%2Fprometheus%2FPrometheusMetricsThreadPoolTest.java?ref=044f620cc7e381c450a87fddf74f1ad8803583fd",
      "patch": "@@ -100,11 +100,6 @@ void testExporterThreadpoolName() {\n         PrometheusMetricsReporter reporter = new PrometheusMetricsReporter(metricsConfig.toUrl(), applicationModel);\n         reporter.init();\n         exportHttpServer(reporter, port);\n-        try {\n-            Thread.sleep(5000);\n-        } catch (InterruptedException e) {\n-            throw new RuntimeException(e);\n-        }\n         if (metricsConfig.getEnableThreadpool()) {\n             metricsCollector.registryDefaultSample();\n         }\n@@ -135,8 +130,8 @@ private void exportHttpServer(PrometheusMetricsReporter reporter, int port) {\n                     os.write(response.getBytes());\n                 }\n             });\n-            Thread httpServerThread = new Thread(prometheusExporterHttpServer::start);\n-            httpServerThread.start();\n+            // start ServerImpl dispatcher thread.\n+            prometheusExporterHttpServer.start();\n         } catch (IOException e) {\n             throw new RuntimeException(e);\n         }",
      "parent_sha": "a972d85d947389e104b91300a6de10cb3d7cef22"
    }
  },
  {
    "oid": "c33be998ed9486a7cec18b20b220eff44a8b975c",
    "message": "DUBBO-520 ExtensionLoader\u7684getExtension\u540d\u5b57\u8f6c\u5165true\u4e0d\u5e94\u8fd4\u56de\u7f3a\u7701\u6269\u5c55",
    "date": "2012-07-31T03:10:07Z",
    "url": "https://github.com/apache/dubbo/commit/c33be998ed9486a7cec18b20b220eff44a8b975c",
    "details": {
      "sha": "6755ad50da6ce0c815be067e1a96940944ee4116",
      "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/extension/ExtensionLoader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/apache/dubbo/blob/c33be998ed9486a7cec18b20b220eff44a8b975c/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2Fextension%2FExtensionLoader.java",
      "raw_url": "https://github.com/apache/dubbo/raw/c33be998ed9486a7cec18b20b220eff44a8b975c/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2Fextension%2FExtensionLoader.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2Fextension%2FExtensionLoader.java?ref=c33be998ed9486a7cec18b20b220eff44a8b975c",
      "patch": "@@ -303,9 +303,6 @@ public Set<String> getLoadedExtensions() {\n \tpublic T getExtension(String name) {\r\n \t\tif (name == null || name.length() == 0)\r\n \t\t    throw new IllegalArgumentException(\"Extension name == null\");\r\n-\t\tif (\"true\".equals(name)) {\r\n-\t\t    return getDefaultExtension();\r\n-\t\t}\r\n \t\tHolder<Object> holder = cachedInstances.get(name);\r\n \t\tif (holder == null) {\r\n \t\t    cachedInstances.putIfAbsent(name, new Holder<Object>());\r\n@@ -329,8 +326,7 @@ public T getExtension(String name) {\n \t */\r\n \tpublic T getDefaultExtension() {\r\n \t    getExtensionClasses();\r\n-        if(null == cachedDefaultName || cachedDefaultName.length() == 0\r\n-                || \"true\".equals(cachedDefaultName)) {\r\n+        if(null == cachedDefaultName || cachedDefaultName.length() == 0) {\r\n             return null;\r\n         }\r\n         return getExtension(cachedDefaultName);\r",
      "parent_sha": "6236f4cf6eb54865dad4e6a7102c9d86e694882a"
    }
  },
  {
    "oid": "9b474e8535c36b7bd536b06b0b3e5a89b9dc1458",
    "message": "DUBBO-394 \u589e\u52a0\u9ed1\u767d\u540d\u5355\u65e5\u5fd7\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@1869 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2012-05-29T12:51:28Z",
    "url": "https://github.com/apache/dubbo/commit/9b474e8535c36b7bd536b06b0b3e5a89b9dc1458",
    "details": {
      "sha": "92f11b12e0fe5ca5c9d86ea3fa2d5f9fce9dc19a",
      "filename": "dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/router/condition/ConditionRouter.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/apache/dubbo/blob/9b474e8535c36b7bd536b06b0b3e5a89b9dc1458/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fcluster%2Frouter%2Fcondition%2FConditionRouter.java",
      "raw_url": "https://github.com/apache/dubbo/raw/9b474e8535c36b7bd536b06b0b3e5a89b9dc1458/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fcluster%2Frouter%2Fcondition%2FConditionRouter.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fcluster%2Frouter%2Fcondition%2FConditionRouter.java?ref=9b474e8535c36b7bd536b06b0b3e5a89b9dc1458",
      "patch": "@@ -29,6 +29,7 @@\n import com.alibaba.dubbo.common.URL;\r\n import com.alibaba.dubbo.common.logger.Logger;\r\n import com.alibaba.dubbo.common.logger.LoggerFactory;\r\n+import com.alibaba.dubbo.common.utils.NetUtils;\r\n import com.alibaba.dubbo.common.utils.StringUtils;\r\n import com.alibaba.dubbo.common.utils.UrlUtils;\r\n import com.alibaba.dubbo.rpc.Invocation;\r\n@@ -95,15 +96,19 @@ public <T> List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation\n             }\r\n             List<Invoker<T>> result = new ArrayList<Invoker<T>>();\r\n             if (thenCondition == null) {\r\n+            \tlogger.warn(\"The current consumer in the service blacklist. consumer: \" + NetUtils.getLocalHost() + \", service: \" + url.getServiceKey());\r\n                 return result;\r\n             }\r\n             for (Invoker<T> invoker : invokers) {\r\n                 if (matchThen(invoker.getUrl(), url)) {\r\n                     result.add(invoker);\r\n                 }\r\n             }\r\n-            if (result.size() > 0 || force) {\r\n+            if (result.size() > 0) {\r\n                 return result;\r\n+            } else if (force) {\r\n+            \tlogger.warn(\"The route result is empty and force execute. consumer: \" + NetUtils.getLocalHost() + \", service: \" + url.getServiceKey() + \", router: \" + url.getParameterAndDecoded(Constants.RULE_KEY));\r\n+            \treturn result;\r\n             }\r\n         } catch (Throwable t) {\r\n             logger.error(\"Failed to execute condition router rule: \" + getUrl() + \", invokers: \" + invokers + \", cause: \" + t.getMessage(), t);\r",
      "parent_sha": "f5f4f5fbce87c3e56d2f9b692aed1c5613d31a2f"
    }
  },
  {
    "oid": "a45206c64f1e293bd164b4f489d9830e5b296112",
    "message": "Merge pull request #1811, fix unstable hessian protocol unit test by adding overload. \n\nFixed #1667, fixed #1727",
    "date": "2018-05-17T08:04:19Z",
    "url": "https://github.com/apache/dubbo/commit/a45206c64f1e293bd164b4f489d9830e5b296112",
    "details": {
      "sha": "6e8ab72e174f1d683c08be7a5d65b32aac4d249a",
      "filename": "dubbo-rpc/dubbo-rpc-hessian/src/test/java/com/alibaba/dubbo/rpc/protocol/hessian/HessianProtocolTest.java",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/apache/dubbo/blob/a45206c64f1e293bd164b4f489d9830e5b296112/dubbo-rpc%2Fdubbo-rpc-hessian%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fhessian%2FHessianProtocolTest.java",
      "raw_url": "https://github.com/apache/dubbo/raw/a45206c64f1e293bd164b4f489d9830e5b296112/dubbo-rpc%2Fdubbo-rpc-hessian%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fhessian%2FHessianProtocolTest.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc%2Fdubbo-rpc-hessian%2Fsrc%2Ftest%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fhessian%2FHessianProtocolTest.java?ref=a45206c64f1e293bd164b4f489d9830e5b296112",
      "patch": "@@ -25,7 +25,7 @@\n import com.alibaba.dubbo.rpc.RpcException;\r\n import com.alibaba.dubbo.rpc.protocol.hessian.HessianServiceImpl.MyException;\r\n \r\n-import junit.framework.Assert;\r\n+import org.junit.Assert;\r\n import org.junit.Test;\r\n \r\n import static org.junit.Assert.fail;\r\n@@ -41,7 +41,7 @@ public void testHessianProtocol() {\n         Assert.assertFalse(server.isCalled());\r\n         ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();\r\n         Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();\r\n-        URL url = URL.valueOf(\"hessian://127.0.0.1:5342/\" + HessianService.class.getName() + \"?version=1.0.0\");\r\n+        URL url = URL.valueOf(\"hessian://127.0.0.1:5342/\" + HessianService.class.getName() + \"?version=1.0.0&hessian.overload.method=true\");\r\n         Exporter<HessianService> exporter = protocol.export(proxyFactory.getInvoker(server, HessianService.class, url));\r\n         Invoker<HessianService> invoker = protocol.refer(HessianService.class, url);\r\n         HessianService client = proxyFactory.getProxy(invoker);\r\n@@ -76,7 +76,7 @@ public void testHttpClient() {\n         Assert.assertFalse(server.isCalled());\r\n         ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();\r\n         Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();\r\n-        URL url = URL.valueOf(\"hessian://127.0.0.1:5342/\" + HessianService.class.getName() + \"?version=1.0.0&client=httpclient\");\r\n+        URL url = URL.valueOf(\"hessian://127.0.0.1:5342/\" + HessianService.class.getName() + \"?version=1.0.0&client=httpclient&hessian.overload.method=true\");\r\n         Exporter<HessianService> exporter = protocol.export(proxyFactory.getInvoker(server, HessianService.class, url));\r\n         Invoker<HessianService> invoker = protocol.refer(HessianService.class, url);\r\n         HessianService client = proxyFactory.getProxy(invoker);\r\n@@ -100,7 +100,7 @@ public void testTimeOut() {\n             client.timeOut(6000);\r\n             fail();\r\n         } catch (RpcException expected) {\r\n-            Assert.assertEquals(true, expected.isTimeout());\r\n+            Assert.assertTrue(expected.isTimeout());\r\n         } finally {\r\n             invoker.destroy();\r\n             exporter.unexport();\r\n@@ -121,6 +121,7 @@ public void testCustomException() {\n             client.customException();\r\n             fail();\r\n         } catch (MyException expected) {\r\n+\r\n         }\r\n         invoker.destroy();\r\n         exporter.unexport();\r",
      "parent_sha": "e20618a66fbe8106e1f1c813dec7c09d11a1ebb7"
    }
  },
  {
    "oid": "1b5ff0fc9b68da5b27a955b66190d2f5ea7c5457",
    "message": "Fix invoker recovery (#12445)",
    "date": "2023-06-01T10:46:17Z",
    "url": "https://github.com/apache/dubbo/commit/1b5ff0fc9b68da5b27a955b66190d2f5ea7c5457",
    "details": {
      "sha": "89c58a6dc999aac4079bc577d87727396b6a4ef4",
      "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java",
      "status": "modified",
      "additions": 17,
      "deletions": 14,
      "changes": 31,
      "blob_url": "https://github.com/apache/dubbo/blob/1b5ff0fc9b68da5b27a955b66190d2f5ea7c5457/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fcluster%2Fsupport%2FAbstractClusterInvoker.java",
      "raw_url": "https://github.com/apache/dubbo/raw/1b5ff0fc9b68da5b27a955b66190d2f5ea7c5457/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fcluster%2Fsupport%2FAbstractClusterInvoker.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fcluster%2Fsupport%2FAbstractClusterInvoker.java?ref=1b5ff0fc9b68da5b27a955b66190d2f5ea7c5457",
      "patch": "@@ -16,11 +16,6 @@\n  */\n package org.apache.dubbo.rpc.cluster.support;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.ThreadLocalRandom;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n import org.apache.dubbo.common.URL;\n import org.apache.dubbo.common.Version;\n import org.apache.dubbo.common.config.Configuration;\n@@ -37,13 +32,19 @@\n import org.apache.dubbo.rpc.Result;\n import org.apache.dubbo.rpc.RpcContext;\n import org.apache.dubbo.rpc.RpcException;\n+import org.apache.dubbo.rpc.RpcServiceContext;\n import org.apache.dubbo.rpc.cluster.ClusterInvoker;\n import org.apache.dubbo.rpc.cluster.Directory;\n import org.apache.dubbo.rpc.cluster.LoadBalance;\n import org.apache.dubbo.rpc.model.ApplicationModel;\n import org.apache.dubbo.rpc.model.ScopeModelUtil;\n import org.apache.dubbo.rpc.support.RpcUtils;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_LOADBALANCE;\n import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_RESELECT_COUNT;\n import static org.apache.dubbo.common.constants.CommonConstants.ENABLE_CONNECTIVITY_VALIDATION;\n@@ -372,7 +373,7 @@ protected void checkInvokers(List<Invoker<T>> invokers, Invocation invocation) {\n     }\n \n     protected Result invokeWithContext(Invoker<T> invoker, Invocation invocation) {\n-        setContext(invoker);\n+        Invoker<T> originInvoker = setContext(invoker);\n         Result result;\n         try {\n             if (ProfilerSwitch.isEnableSimpleProfiler()) {\n@@ -381,7 +382,7 @@ protected Result invokeWithContext(Invoker<T> invoker, Invocation invocation) {\n             invocation.addInvokedInvoker(invoker);\n             result = invoker.invoke(invocation);\n         } finally {\n-            clearContext(invoker);\n+            clearContext(originInvoker);\n             InvocationProfilerUtils.releaseSimpleProfiler(invocation);\n         }\n         return result;\n@@ -394,12 +395,12 @@ protected Result invokeWithContext(Invoker<T> invoker, Invocation invocation) {\n      * @return\n      */\n     protected Result invokeWithContextAsync(Invoker<T> invoker, Invocation invocation, URL consumerUrl) {\n-        setContext(invoker, consumerUrl);\n+        Invoker<T> originInvoker = setContext(invoker, consumerUrl);\n         Result result;\n         try {\n             result = invoker.invoke(invocation);\n         } finally {\n-            clearContext(invoker);\n+            clearContext(originInvoker);\n         }\n         return result;\n     }\n@@ -436,19 +437,21 @@ protected LoadBalance initLoadBalance(List<Invoker<T>> invokers, Invocation invo\n     }\n \n \n-    private void setContext(Invoker<T> invoker) {\n-        setContext(invoker, null);\n+    private Invoker<T> setContext(Invoker<T> invoker) {\n+        return setContext(invoker, null);\n     }\n \n-    private void setContext(Invoker<T> invoker, URL consumerUrl) {\n-        RpcContext context = RpcContext.getServiceContext();\n+    private Invoker<T> setContext(Invoker<T> invoker, URL consumerUrl) {\n+        RpcServiceContext context = RpcContext.getServiceContext();\n+        Invoker<?> originInvoker = context.getInvoker();\n         context.setInvoker(invoker)\n             .setConsumerUrl(null != consumerUrl ? consumerUrl : RpcContext.getServiceContext().getConsumerUrl());\n+        return (Invoker<T>) originInvoker;\n     }\n \n     private void clearContext(Invoker<T> invoker) {\n         // do nothing\n         RpcContext context = RpcContext.getServiceContext();\n-        context.setInvoker(null);\n+        context.setInvoker(invoker);\n     }\n }",
      "parent_sha": "55a8940ad1a98d8ad78da67d8b73856768e09a53"
    }
  },
  {
    "oid": "82f9a6b583a91985eadff182f98778537becf979",
    "message": "[3.0] Statement lambda can be replaced with expression lambda (#8667)\n\n* Statement lambda can be replaced with expression lambda\r\n\r\n* format code",
    "date": "2021-09-03T13:17:23Z",
    "url": "https://github.com/apache/dubbo/commit/82f9a6b583a91985eadff182f98778537becf979",
    "details": {
      "sha": "21817dabbd9415b74c8c83b6099e480fbc768c39",
      "filename": "dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosServiceDiscovery.java",
      "status": "modified",
      "additions": 18,
      "deletions": 20,
      "changes": 38,
      "blob_url": "https://github.com/apache/dubbo/blob/82f9a6b583a91985eadff182f98778537becf979/dubbo-registry%2Fdubbo-registry-nacos%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fnacos%2FNacosServiceDiscovery.java",
      "raw_url": "https://github.com/apache/dubbo/raw/82f9a6b583a91985eadff182f98778537becf979/dubbo-registry%2Fdubbo-registry-nacos%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fnacos%2FNacosServiceDiscovery.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry%2Fdubbo-registry-nacos%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fnacos%2FNacosServiceDiscovery.java?ref=82f9a6b583a91985eadff182f98778537becf979",
      "patch": "@@ -111,28 +111,26 @@ public Set<String> getServices() {\n     public List<ServiceInstance> getInstances(String serviceName) throws NullPointerException {\n         return ThrowableFunction.execute(namingService, service ->\n             service.selectInstances(serviceName, Constants.DEFAULT_GROUP, true)\n-                .stream().map((i)->NacosNamingServiceUtils.toServiceInstance(registryURL, i))\n-                        .collect(Collectors.toList())\n+                .stream().map((i) -> NacosNamingServiceUtils.toServiceInstance(registryURL, i))\n+                .collect(Collectors.toList())\n         );\n     }\n \n     @Override\n     public void addServiceInstancesChangedListener(ServiceInstancesChangedListener listener)\n-            throws NullPointerException, IllegalArgumentException {\n-        execute(namingService, service -> {\n-            listener.getServiceNames().forEach(serviceName -> {\n-                try {\n-                    service.subscribe(serviceName, Constants.DEFAULT_GROUP, e -> { // Register Nacos EventListener\n-                        if (e instanceof NamingEvent) {\n-                            NamingEvent event = (NamingEvent) e;\n-                            handleEvent(event, listener);\n-                        }\n-                    });\n-                } catch (NacosException e) {\n-                    logger.error(\"add nacos service instances changed listener fail \", e);\n-                }\n-            });\n-        });\n+        throws NullPointerException, IllegalArgumentException {\n+        execute(namingService, service -> listener.getServiceNames().forEach(serviceName -> {\n+            try {\n+                service.subscribe(serviceName, Constants.DEFAULT_GROUP, e -> { // Register Nacos EventListener\n+                    if (e instanceof NamingEvent) {\n+                        NamingEvent event = (NamingEvent) e;\n+                        handleEvent(event, listener);\n+                    }\n+                });\n+            } catch (NacosException e) {\n+                logger.error(\"add nacos service instances changed listener fail \", e);\n+            }\n+        }));\n     }\n \n     @Override\n@@ -143,9 +141,9 @@ public URL getUrl() {\n     private void handleEvent(NamingEvent event, ServiceInstancesChangedListener listener) {\n         String serviceName = event.getServiceName();\n         List<ServiceInstance> serviceInstances = event.getInstances()\n-                .stream()\n-                .map((i)->NacosNamingServiceUtils.toServiceInstance(registryURL, i))\n-                .collect(Collectors.toList());\n+            .stream()\n+            .map((i) -> NacosNamingServiceUtils.toServiceInstance(registryURL, i))\n+            .collect(Collectors.toList());\n         listener.onEvent(new ServiceInstancesChangedEvent(serviceName, serviceInstances));\n     }\n }",
      "parent_sha": "b0468a04bfc103ac0d9e0ec1b3f510c0e8c8f6da"
    }
  },
  {
    "oid": "b9870ad5044e235932bf642b4bef6b84b44a25ee",
    "message": "DUBBO-371 NoNodeException\u68c0\u6d4b\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@1750 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2012-05-15T12:17:22Z",
    "url": "https://github.com/apache/dubbo/commit/b9870ad5044e235932bf642b4bef6b84b44a25ee",
    "details": {
      "sha": "6a231dc8cdf6b63c7839eda8b7009faa6852ebfc",
      "filename": "dubbo-registry/dubbo-registry-zookeeper/src/main/java/com/alibaba/dubbo/registry/zookeeper/ZookeeperRegistry.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/apache/dubbo/blob/b9870ad5044e235932bf642b4bef6b84b44a25ee/dubbo-registry%2Fdubbo-registry-zookeeper%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2Fzookeeper%2FZookeeperRegistry.java",
      "raw_url": "https://github.com/apache/dubbo/raw/b9870ad5044e235932bf642b4bef6b84b44a25ee/dubbo-registry%2Fdubbo-registry-zookeeper%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2Fzookeeper%2FZookeeperRegistry.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry%2Fdubbo-registry-zookeeper%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2Fzookeeper%2FZookeeperRegistry.java?ref=b9870ad5044e235932bf642b4bef6b84b44a25ee",
      "patch": "@@ -190,14 +190,16 @@ public List<URL> lookup(URL url) {\n         try {\r\n             List<String> providers = new ArrayList<String>();\r\n             for (String path : toCategoriesPath(url)) {\r\n-                List<String> children = zkClient.getChildren(path);\r\n-                if (children != null) {\r\n-                    providers.addAll(children);\r\n+                try {\r\n+                    List<String> children = zkClient.getChildren(path);\r\n+                    if (children != null) {\r\n+                        providers.addAll(children);\r\n+                    }\r\n+                } catch (ZkNoNodeException e) {\r\n+                    // ignore\r\n                 }\r\n             }\r\n             return toUrls(url, providers);\r\n-        } catch (ZkNoNodeException e) {\r\n-            return null;\r\n         } catch (Throwable e) {\r\n             throw new RpcException(\"Failed to lookup \" + url + \" from zookeeper \" + getUrl() + \", cause: \" + e.getMessage(), e);\r\n         }\r",
      "parent_sha": "d6c7073c8b2d7feaadfe74cc6260216e48b6bbba"
    }
  },
  {
    "oid": "10d9e9f37b9847a8f36c5a3e511d0e968d8f1eec",
    "message": "Fix FileTest seperator in Win (#10992)",
    "date": "2022-11-22T10:12:31Z",
    "url": "https://github.com/apache/dubbo/commit/10d9e9f37b9847a8f36c5a3e511d0e968d8f1eec",
    "details": {
      "sha": "4a69205f8532c82effc4f6896924d3eafe1513a4",
      "filename": "dubbo-test/dubbo-test-modules/src/test/java/org/apache/dubbo/dependency/FileTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/apache/dubbo/blob/10d9e9f37b9847a8f36c5a3e511d0e968d8f1eec/dubbo-test%2Fdubbo-test-modules%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Fdependency%2FFileTest.java",
      "raw_url": "https://github.com/apache/dubbo/raw/10d9e9f37b9847a8f36c5a3e511d0e968d8f1eec/dubbo-test%2Fdubbo-test-modules%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Fdependency%2FFileTest.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-test%2Fdubbo-test-modules%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Fdependency%2FFileTest.java?ref=10d9e9f37b9847a8f36c5a3e511d0e968d8f1eec",
      "patch": "@@ -33,6 +33,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n@@ -416,7 +417,7 @@ public void readSPI(File path, List<String> spis) {\n                     absolutePath = absolutePath.substring(absolutePath.lastIndexOf(\"src\" + File.separator + \"main\" + File.separator + \"java\" + File.separator)\n                         + (\"src\" + File.separator + \"main\" + File.separator + \"java\" + File.separator).length());\n                     absolutePath = absolutePath.substring(0, absolutePath.lastIndexOf(\".java\"));\n-                    absolutePath = absolutePath.replaceAll(File.separator, \".\");\n+                    absolutePath = absolutePath.replaceAll(Matcher.quoteReplacement(File.separator), \".\");\n                     spis.add(absolutePath);\n                 }\n             }\n@@ -439,7 +440,7 @@ public void readSPIResource(File path, Map<File, String> spis) {\n                 String absolutePath = path.getAbsolutePath();\n                 absolutePath = absolutePath.substring(absolutePath.lastIndexOf(\"src\" + File.separator + \"main\" + File.separator + \"resources\" + File.separator + \"META-INF\" + File.separator + \"dubbo\" + File.separator + \"internal\" + File.separator)\n                     + (\"src\" + File.separator + \"main\" + File.separator + \"resources\" + File.separator + \"META-INF\" + File.separator + \"dubbo\" + File.separator + \"internal\" + File.separator).length());\n-                absolutePath = absolutePath.replaceAll( File.separator, \".\");\n+                absolutePath = absolutePath.replaceAll(Matcher.quoteReplacement(File.separator), \".\");\n                 spis.put(path, absolutePath);\n             }\n         }",
      "parent_sha": "f074aec261cc8b794d06a3a5a0fe5842bbbeebf2"
    }
  },
  {
    "oid": "1900eafbbcd6846cc2d93bb645dd617a08c8a118",
    "message": "\u4fee\u6539\u6ce8\u91ca\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@1742 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2012-05-14T08:11:24Z",
    "url": "https://github.com/apache/dubbo/commit/1900eafbbcd6846cc2d93bb645dd617a08c8a118",
    "details": {
      "sha": "4f1a67e95f40be0ddcb604befedcdaddfe62482d",
      "filename": "dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/RegistryService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/1900eafbbcd6846cc2d93bb645dd617a08c8a118/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2FRegistryService.java",
      "raw_url": "https://github.com/apache/dubbo/raw/1900eafbbcd6846cc2d93bb645dd617a08c8a118/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2FRegistryService.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2FRegistryService.java?ref=1900eafbbcd6846cc2d93bb645dd617a08c8a118",
      "patch": "@@ -29,7 +29,7 @@\n public interface RegistryService {\r\n \r\n     /**\r\n-     * \u6ce8\u518c\u6570\u636e\uff0c\u6bd4\u5982\uff1a\u63d0\u4f9b\u8005\u5730\u5740\uff0c\u6d88\u8d39\u8005\uff0c\u8def\u7531\u89c4\u5219\uff0c\u8986\u76d6\u7b56\u7565\u89c4\u5219\uff0c\u7b49\u6570\u636e\u3002\r\n+     * \u6ce8\u518c\u6570\u636e\uff0c\u6bd4\u5982\uff1a\u63d0\u4f9b\u8005\u5730\u5740\uff0c\u6d88\u8d39\u8005\u5730\u5740\uff0c\u8def\u7531\u89c4\u5219\uff0c\u8986\u76d6\u89c4\u5219\uff0c\u7b49\u6570\u636e\u3002\r\n      * \r\n      * \u6ce8\u518c\u9700\u5904\u7406\u5951\u7ea6\uff1a<br>\r\n      * 1. \u5f53URL\u8bbe\u7f6e\u4e86check=false\u65f6\uff0c\u6ce8\u518c\u5931\u8d25\u540e\u4e0d\u62a5\u9519\uff0c\u5728\u540e\u53f0\u5b9a\u65f6\u91cd\u8bd5\uff0c\u5426\u5219\u629b\u51fa\u5f02\u5e38\u3002<br>\r",
      "parent_sha": "07adb2389b721af48c36053855318780c795d8fb"
    }
  },
  {
    "oid": "049f0cff60a2d4dd974fea2915a1850cb301430b",
    "message": "DUBBO-357 \u4fee\u6539Merger\u7684\u67e5\u627e\u65b9\u5f0f\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@1628 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2012-05-04T05:39:40Z",
    "url": "https://github.com/apache/dubbo/commit/049f0cff60a2d4dd974fea2915a1850cb301430b",
    "details": {
      "sha": "0256eb8a8ec921d40abf02f4c9c576fc2462aae0",
      "filename": "dubbo-cluster/dubbo-cluster-api/src/main/java/com/alibaba/dubbo/rpc/cluster/support/MergeableClusterInvoker.java",
      "status": "modified",
      "additions": 101,
      "deletions": 76,
      "changes": 177,
      "blob_url": "https://github.com/apache/dubbo/blob/049f0cff60a2d4dd974fea2915a1850cb301430b/dubbo-cluster%2Fdubbo-cluster-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fcluster%2Fsupport%2FMergeableClusterInvoker.java",
      "raw_url": "https://github.com/apache/dubbo/raw/049f0cff60a2d4dd974fea2915a1850cb301430b/dubbo-cluster%2Fdubbo-cluster-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fcluster%2Fsupport%2FMergeableClusterInvoker.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster%2Fdubbo-cluster-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fcluster%2Fsupport%2FMergeableClusterInvoker.java?ref=049f0cff60a2d4dd974fea2915a1850cb301430b",
      "patch": "@@ -15,19 +15,6 @@\n  */\n package com.alibaba.dubbo.rpc.cluster.support;\n \n-import com.alibaba.dubbo.common.Constants;\n-import com.alibaba.dubbo.common.URL;\n-import com.alibaba.dubbo.common.utils.NamedThreadFactory;\n-import com.alibaba.dubbo.rpc.Invocation;\n-import com.alibaba.dubbo.rpc.Invoker;\n-import com.alibaba.dubbo.rpc.Result;\n-import com.alibaba.dubbo.rpc.RpcException;\n-import com.alibaba.dubbo.rpc.RpcInvocation;\n-import com.alibaba.dubbo.rpc.RpcResult;\n-import com.alibaba.dubbo.rpc.cluster.Directory;\n-import com.alibaba.dubbo.rpc.cluster.Merger;\n-import com.alibaba.dubbo.rpc.cluster.merger.MergerFactory;\n-\n import java.lang.reflect.Array;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n@@ -41,6 +28,21 @@\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n \n+import com.alibaba.dubbo.common.Constants;\n+import com.alibaba.dubbo.common.URL;\n+import com.alibaba.dubbo.common.extension.ExtensionLoader;\n+import com.alibaba.dubbo.common.utils.ConfigUtils;\n+import com.alibaba.dubbo.common.utils.NamedThreadFactory;\n+import com.alibaba.dubbo.rpc.Invocation;\n+import com.alibaba.dubbo.rpc.Invoker;\n+import com.alibaba.dubbo.rpc.Result;\n+import com.alibaba.dubbo.rpc.RpcException;\n+import com.alibaba.dubbo.rpc.RpcInvocation;\n+import com.alibaba.dubbo.rpc.RpcResult;\n+import com.alibaba.dubbo.rpc.cluster.Directory;\n+import com.alibaba.dubbo.rpc.cluster.Merger;\n+import com.alibaba.dubbo.rpc.cluster.merger.MergerFactory;\n+\n /**\n  * @author <a href=\"mailto:gang.lvg@alibaba-inc.com\">kimi</a>\n  */\n@@ -56,9 +58,26 @@ public MergeableClusterInvoker(Directory<T> directory) {\n     }\n \n     public Result invoke(final Invocation invocation) throws RpcException {\n-        int timeout = getUrl().getMethodParameter( invocation.getMethodName(), Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT );\n         List<Invoker<T>> invokers = directory.list(invocation);\n         \n+        String merger = getUrl().getMethodParameter( invocation.getMethodName(), Constants.MERGER_KEY );\n+        if ( ConfigUtils.isEmpty(merger) ) { // \u5982\u679c\u65b9\u6cd5\u4e0d\u9700\u8981Merge\uff0c\u9000\u5316\u4e3a\u53ea\u8c03\u4e00\u4e2aGroup\n+            for(final Invoker<T> invoker : invokers ) {\n+                if (invoker.isAvailable()) {\n+                    return invoker.invoke(invocation);\n+                }\n+            }\n+            return invokers.iterator().next().invoke(invocation);\n+        }\n+        \n+        Class<?> returnType;\n+        try {\n+            returnType = getInterface().getMethod(\n+                    invocation.getMethodName(), invocation.getParameterTypes() ).getReturnType();\n+        } catch ( NoSuchMethodException e ) {\n+            returnType = null;\n+        }\n+        \n         Map<String, Future<Result>> results = new HashMap<String, Future<Result>>();\n         for( final Invoker<T> invoker : invokers ) {\n             Future<Result> future = executor.submit( new Callable<Result>() {\n@@ -70,16 +89,10 @@ public Result call() throws Exception {\n         }\n \n         Object result = null;\n-        Class<?> returnType;\n-        try {\n-            returnType = getInterface().getMethod(\n-                    invocation.getMethodName(), invocation.getParameterTypes() ).getReturnType();\n-        } catch ( NoSuchMethodException e ) {\n-            throw new RpcException( e.getMessage(), e );\n-        }\n-\n+        \n         List<Result> resultList = new ArrayList<Result>( results.size() );\n         \n+        int timeout = getUrl().getMethodParameter( invocation.getMethodName(), Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT );\n         for ( Map.Entry<String, Future<Result>> entry : results.entrySet() ) {\n             Future<Result> future = entry.getValue();\n             try {\n@@ -93,70 +106,82 @@ public Result call() throws Exception {\n                                         e );\n             }\n         }\n+        \n+        if (resultList.size() == 0) {\n+            return new RpcResult((Object)null);\n+        } else if (resultList.size() == 1) {\n+            return resultList.iterator().next();\n+        }\n \n-        if ( returnType != void.class && resultList.size() > 0 ) {\n-            String merger = getUrl().getMethodParameter( invocation.getMethodName(), Constants.MERGER_KEY );\n-            if ( merger != null && !\"\".equals( merger.trim() ) ) {\n-                Method method;\n-                try {\n-                    method = returnType.getMethod( merger, returnType );\n-                } catch ( NoSuchMethodException e ) {\n-                    throw new RpcException( new StringBuilder( 32 )\n-                                                    .append( \"Can not merge result because missing method [ \" )\n-                                                    .append( merger )\n-                                                    .append( \" ] in class [ \" )\n-                                                    .append( returnType.getClass().getName() )\n-                                                    .append( \" ]\" )\n-                                                    .toString() );\n+        if (returnType == void.class) {\n+            return new RpcResult((Object)null);\n+        }\n+\n+        if ( merger.startsWith(\".\") ) {\n+            merger = merger.substring(1);\n+            Method method;\n+            try {\n+                method = returnType.getMethod( merger, returnType );\n+            } catch ( NoSuchMethodException e ) {\n+                throw new RpcException( new StringBuilder( 32 )\n+                                                .append( \"Can not merge result because missing method [ \" )\n+                                                .append( merger )\n+                                                .append( \" ] in class [ \" )\n+                                                .append( returnType.getClass().getName() )\n+                                                .append( \" ]\" )\n+                                                .toString() );\n+            }\n+            if ( method != null ) {\n+                if ( !Modifier.isPublic( method.getModifiers() ) ) {\n+                    method.setAccessible( true );\n                 }\n-                if ( method != null ) {\n-                    if ( !Modifier.isPublic( method.getModifiers() ) ) {\n-                        method.setAccessible( true );\n-                    }\n-                    result = resultList.remove( 0 ).getValue();\n-                    try {\n-                        if ( method.getReturnType() != void.class\n-                                && method.getReturnType().isAssignableFrom( result.getClass() ) ) {\n-                            for ( Result r : resultList ) {\n-                                result = method.invoke( result, r.getValue() );\n-                            }\n-                        } else {\n-                            for ( Result r : resultList ) {\n-                                method.invoke( result, r.getValue() );\n-                            }\n+                result = resultList.remove( 0 ).getValue();\n+                try {\n+                    if ( method.getReturnType() != void.class\n+                            && method.getReturnType().isAssignableFrom( result.getClass() ) ) {\n+                        for ( Result r : resultList ) {\n+                            result = method.invoke( result, r.getValue() );\n+                        }\n+                    } else {\n+                        for ( Result r : resultList ) {\n+                            method.invoke( result, r.getValue() );\n                         }\n-                    } catch ( Exception e ) {\n-                        throw new RpcException( \n-                                new StringBuilder( 32 )\n-                                        .append( \"Can not merge result: \" )\n-                                        .append( e.getMessage() ).toString(), \n-                                e );\n                     }\n-                } else {\n-                    throw new RpcException(\n+                } catch ( Exception e ) {\n+                    throw new RpcException( \n                             new StringBuilder( 32 )\n-                                    .append( \"Can not merge result because missing method [ \" )\n-                                    .append( merger )\n-                                    .append( \" ] in class [ \" )\n-                                    .append( returnType.getClass().getName() )\n-                                    .append( \" ]\" )\n-                                    .toString() );\n+                                    .append( \"Can not merge result: \" )\n+                                    .append( e.getMessage() ).toString(), \n+                            e );\n                 }\n             } else {\n-                Merger resultMerger = MergerFactory.getMerger(returnType);\n-                if (resultMerger != null) {\n-                    List args = new ArrayList(resultList.size());\n-                    for(Result r : resultList) {\n-                        args.add(r.getValue());\n-                    }\n-                    result = resultMerger.merge(\n-                            args.toArray((Object[])Array.newInstance(returnType, 0)));\n-                } else {\n-                    throw new RpcException( \"There is no merger to merge result.\" );\n+                throw new RpcException(\n+                        new StringBuilder( 32 )\n+                                .append( \"Can not merge result because missing method [ \" )\n+                                .append( merger )\n+                                .append( \" ] in class [ \" )\n+                                .append( returnType.getClass().getName() )\n+                                .append( \" ]\" )\n+                                .toString() );\n+            }\n+        } else {\n+            Merger resultMerger;\n+            if (ConfigUtils.isDefault(merger)) {\n+                resultMerger = MergerFactory.getMerger(returnType);\n+            } else {\n+                resultMerger = ExtensionLoader.getExtensionLoader(Merger.class).getExtension(merger);\n+            }\n+            if (resultMerger != null) {\n+                List<Object> rets = new ArrayList<Object>(resultList.size());\n+                for(Result r : resultList) {\n+                    rets.add(r.getValue());\n                 }\n+                result = resultMerger.merge(\n+                        rets.toArray((Object[])Array.newInstance(returnType, 0)));\n+            } else {\n+                throw new RpcException( \"There is no merger to merge result.\" );\n             }\n         }\n-\n         return new RpcResult( result );\n     }\n ",
      "parent_sha": "ac614d872bee6a1e5f567a397a90e46e8a8b9719"
    }
  },
  {
    "oid": "e9fc4932bb7dadf60fbc130a52566aebce2c57c6",
    "message": "\u4fee\u6539\u534f\u8bae\u63a5\u53e3\u6ce8\u91ca\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@1704 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2012-05-09T16:46:25Z",
    "url": "https://github.com/apache/dubbo/commit/e9fc4932bb7dadf60fbc130a52566aebce2c57c6",
    "details": {
      "sha": "bc10c5e8086e2307a6119aa37adc2dc226d6dded",
      "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/Protocol.java",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/apache/dubbo/blob/e9fc4932bb7dadf60fbc130a52566aebce2c57c6/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2FProtocol.java",
      "raw_url": "https://github.com/apache/dubbo/raw/e9fc4932bb7dadf60fbc130a52566aebce2c57c6/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2FProtocol.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2FProtocol.java?ref=e9fc4932bb7dadf60fbc130a52566aebce2c57c6",
      "patch": "@@ -64,11 +64,10 @@ public interface Protocol {\n     <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException;\r\n \n     /**\r\n-     * \u91ca\u653e\u534f\u8bae\u3002\r\n-     * \r\n-     * 1. \u53d6\u6d88\u8be5\u534f\u8bae\u6240\u6709\u5df2\u7ecf\u66b4\u9732\u548c\u5f15\u7528\u7684\u670d\u52a1\u3002\n-     * 2. \u91ca\u653e\u534f\u8bae\u6240\u5360\u7528\u7684\u6240\u6709\u8d44\u6e90\uff0c\u6bd4\u5982\u8fde\u63a5\u548c\u7aef\u53e3\u3002\r\n-     * 3. \u534f\u8bae\u5728\u91ca\u653e\u540e\uff0c\u4f9d\u7136\u80fd\u66b4\u9732\u548c\u5f15\u7528\u65b0\u7684\u670d\u52a1\u3002\n+     * \u91ca\u653e\u534f\u8bae\uff1a\r\n+     * 1. \u53d6\u6d88\u8be5\u534f\u8bae\u6240\u6709\u5df2\u7ecf\u66b4\u9732\u548c\u5f15\u7528\u7684\u670d\u52a1\u3002<br>\n+     * 2. \u91ca\u653e\u534f\u8bae\u6240\u5360\u7528\u7684\u6240\u6709\u8d44\u6e90\uff0c\u6bd4\u5982\u8fde\u63a5\u548c\u7aef\u53e3\u3002<br>\r\n+     * 3. \u534f\u8bae\u5728\u91ca\u653e\u540e\uff0c\u4f9d\u7136\u80fd\u66b4\u9732\u548c\u5f15\u7528\u65b0\u7684\u670d\u52a1\u3002<br>\n      */\n     void destroy();\n ",
      "parent_sha": "a3994f4fab0a7c4a92174ae8b4b9a77043c5afca"
    }
  },
  {
    "oid": "d30d5a5a69cc6cd12d16c43467f768f68f56757c",
    "message": "DUBBO-117 \tregistry notify \u9632\u5fa1\u6027\u5bb9\u9519:\u5982\u679c\u4e0b\u53d1\u7684url\u4e2d\u53ea\u6709routers \uff0c\u9700\u8981\u4fdd\u8bc1routers\u80fd\u591f\u6b63\u5e38\u66ff\u6362.\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@521 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2011-12-05T08:02:04Z",
    "url": "https://github.com/apache/dubbo/commit/d30d5a5a69cc6cd12d16c43467f768f68f56757c",
    "details": {
      "sha": "fdfb512decf690fd2f47648c3e358e395904f78d",
      "filename": "dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/apache/dubbo/blob/d30d5a5a69cc6cd12d16c43467f768f68f56757c/dubbo-registry%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2Fsupport%2FRegistryDirectory.java",
      "raw_url": "https://github.com/apache/dubbo/raw/d30d5a5a69cc6cd12d16c43467f768f68f56757c/dubbo-registry%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2Fsupport%2FRegistryDirectory.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2Fsupport%2FRegistryDirectory.java?ref=d30d5a5a69cc6cd12d16c43467f768f68f56757c",
      "patch": "@@ -155,16 +155,17 @@ public synchronized void notify(List<URL> urls) {\n             }\r\n             // state change\r\n             {\r\n+                if(routers != null){ // null - do nothing\r\n+                    setRouters(routers);\r\n+                }\r\n //                \u5982\u679c\u8ba1\u7b97\u9519\u8bef\uff0c\u5219\u4e0d\u8fdb\u884c\u5904\u7406.\r\n                 if (newUrlInvokerMap == null || newUrlInvokerMap.size() == 0 ){\r\n                     logger.error(new IllegalStateException(\"urls to invokers error .urls.size :\"+urls.size() + \", invoker.size :0\"));\r\n                     return ;\r\n                 }\r\n                 this.methodInvokerMap = newMethodInvokerMap;\r\n                 this.urlInvokerMap = newUrlInvokerMap;\r\n-                if(routers != null){ // null - do nothing\r\n-                    setRouters(routers);\r\n-                }\r\n+                \r\n                 try{\r\n                     destroyUnusedInvokers(oldUrlInvokerMap,newUrlInvokerMap); // \u5173\u95ed\u672a\u4f7f\u7528\u7684Invoker\r\n                 }catch (Exception e) {\r",
      "parent_sha": "5287735185b67d68d62ea851621767f0eb718806"
    }
  },
  {
    "oid": "3945b83956debcf2127606ef6d88a6d29a080094",
    "message": "Solve the conflict between @Service and @Transactional",
    "date": "2017-04-24T03:08:35Z",
    "url": "https://github.com/apache/dubbo/commit/3945b83956debcf2127606ef6d88a6d29a080094",
    "details": {
      "sha": "701418a489a0c18d19fb621bb9d8e66ca9164d9e",
      "filename": "dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/annotation/Service.java",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/apache/dubbo/blob/3945b83956debcf2127606ef6d88a6d29a080094/dubbo-config%2Fdubbo-config-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fconfig%2Fannotation%2FService.java",
      "raw_url": "https://github.com/apache/dubbo/raw/3945b83956debcf2127606ef6d88a6d29a080094/dubbo-config%2Fdubbo-config-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fconfig%2Fannotation%2FService.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config%2Fdubbo-config-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fconfig%2Fannotation%2FService.java?ref=3945b83956debcf2127606ef6d88a6d29a080094",
      "patch": "@@ -15,11 +15,7 @@\n  */\r\n package com.alibaba.dubbo.config.annotation;\r\n \r\n-import java.lang.annotation.Documented;\r\n-import java.lang.annotation.ElementType;\r\n-import java.lang.annotation.Retention;\r\n-import java.lang.annotation.RetentionPolicy;\r\n-import java.lang.annotation.Target;\r\n+import java.lang.annotation.*;\r\n \r\n /**\r\n  * Service\r\n@@ -30,6 +26,7 @@\n @Documented\r\n @Retention(RetentionPolicy.RUNTIME)\r\n @Target({ElementType.TYPE})\r\n+@Inherited\r\n public @interface Service {\r\n \r\n     Class<?> interfaceClass() default void.class;\r",
      "parent_sha": "80113d215ba4d842bd5906cf71ed05ef36f1ff80"
    }
  },
  {
    "oid": "7f86a8cc564323bf4e398db2c739fe3e152bde7d",
    "message": "fix: fix inappropriate invoke in unsubscribe retry task (#12235)",
    "date": "2023-05-07T12:32:50Z",
    "url": "https://github.com/apache/dubbo/commit/7f86a8cc564323bf4e398db2c739fe3e152bde7d",
    "details": {
      "sha": "4b873f71b80aa944441dde1bf93a36cab3dc84ce",
      "filename": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedUnsubscribedTask.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/7f86a8cc564323bf4e398db2c739fe3e152bde7d/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fretry%2FFailedUnsubscribedTask.java",
      "raw_url": "https://github.com/apache/dubbo/raw/7f86a8cc564323bf4e398db2c739fe3e152bde7d/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fretry%2FFailedUnsubscribedTask.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fretry%2FFailedUnsubscribedTask.java?ref=7f86a8cc564323bf4e398db2c739fe3e152bde7d",
      "patch": "@@ -41,7 +41,7 @@ public FailedUnsubscribedTask(URL url, FailbackRegistry registry, NotifyListener\n \n     @Override\n     protected void doRetry(URL url, FailbackRegistry registry, Timeout timeout) {\n-        registry.unsubscribe(url, listener);\n+        registry.doUnsubscribe(url, listener);\n         registry.removeFailedUnsubscribedTask(url, listener);\n     }\n }",
      "parent_sha": "0a7a960f39c13ec8658ebc388ee782648b136b1b"
    }
  },
  {
    "oid": "87a776aa43cde816453af165ddd851843368bbff",
    "message": "Update DEFAULT_ISTIO_META_CLUSTER_ID (#10420)",
    "date": "2022-08-09T02:07:34Z",
    "url": "https://github.com/apache/dubbo/commit/87a776aa43cde816453af165ddd851843368bbff",
    "details": {
      "sha": "d14aca014284da9bcaceddef225f0de60c38475b",
      "filename": "dubbo-xds/src/main/java/org/apache/dubbo/registry/xds/istio/IstioConstant.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/87a776aa43cde816453af165ddd851843368bbff/dubbo-xds%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fxds%2Fistio%2FIstioConstant.java",
      "raw_url": "https://github.com/apache/dubbo/raw/87a776aa43cde816453af165ddd851843368bbff/dubbo-xds%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fxds%2Fistio%2FIstioConstant.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-xds%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fxds%2Fistio%2FIstioConstant.java?ref=87a776aa43cde816453af165ddd851843368bbff",
      "patch": "@@ -83,7 +83,7 @@ public class IstioConstant {\n \n     public final static String ISTIO_META_CLUSTER_ID_KEY = \"ISTIO_META_CLUSTER_ID\";\n \n-    public final static String DEFAULT_ISTIO_META_CLUSTER_ID = \"kubernetes\";\n+    public final static String DEFAULT_ISTIO_META_CLUSTER_ID = \"Kubernetes\";\n \n     public final static String SPIFFE = \"spiffe://\";\n ",
      "parent_sha": "61d73896039a97074a893303ace428d087aa0016"
    }
  },
  {
    "oid": "3de0ec03db4e0794100f840b3f354ef7d6d838bc",
    "message": "Restore the previous behaviour",
    "date": "2018-11-15T11:26:54Z",
    "url": "https://github.com/apache/dubbo/commit/3de0ec03db4e0794100f840b3f354ef7d6d838bc",
    "details": {
      "sha": "1e9c53859635eb733e3ea87a9dc0812126212020",
      "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 8,
      "changes": 9,
      "blob_url": "https://github.com/apache/dubbo/blob/3de0ec03db4e0794100f840b3f354ef7d6d838bc/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fextension%2FExtensionLoader.java",
      "raw_url": "https://github.com/apache/dubbo/raw/3de0ec03db4e0794100f840b3f354ef7d6d838bc/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fextension%2FExtensionLoader.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fextension%2FExtensionLoader.java?ref=3de0ec03db4e0794100f840b3f354ef7d6d838bc",
      "patch": "@@ -806,9 +806,6 @@ private String createAdaptiveExtensionClassCode() {\n         codeBuilder.append(\"\\nimport \").append(ExtensionLoader.class.getName()).append(\";\");\r\n         codeBuilder.append(\"\\npublic class \").append(type.getSimpleName()).append(\"$Adaptive\").append(\" implements \").append(type.getCanonicalName()).append(\" {\");\r\n \r\n-        codeBuilder.append(\"\\nprivate static final org.apache.dubbo.common.logger.Logger logger = org.apache.dubbo.common.logger.LoggerFactory.getLogger(ExtensionLoader.class);\");\r\n-        codeBuilder.append(\"\\nprivate java.util.concurrent.atomic.AtomicInteger count = new java.util.concurrent.atomic.AtomicInteger(0);\\n\");\r\n-\r\n         for (Method method : methods) {\r\n             Class<?> rt = method.getReturnType();\r\n             Class<?>[] pts = method.getParameterTypes();\r\n@@ -940,12 +937,8 @@ private String createAdaptiveExtensionClassCode() {\n                         type.getName(), Arrays.toString(value));\r\n                 code.append(s);\r\n \r\n-                s = String.format(\"\\n%s extension = null;\\n try {\\nextension = (%<s)%s.getExtensionLoader(%s.class).getExtension(extName);\\n}catch(Exception e){\\n\",\r\n+                s = String.format(\"\\n%s extension = (%<s)%s.getExtensionLoader(%s.class).getExtension(extName);\",\r\n                         type.getName(), ExtensionLoader.class.getSimpleName(), type.getName());\r\n-                s += String.format(\"if (count.incrementAndGet() == 1) {\\nlogger.warn(\\\"Failed to find extension named \\\" + extName + \\\" for type %s, will use default extension %s instead.\\\", e);\\n}\\n\",\r\n-                        type.getName(), defaultExtName);\r\n-                s += String.format(\"extension = (%s)%s.getExtensionLoader(%s.class).getExtension(\\\"%s\\\");\\n}\",\r\n-                        type.getName(), ExtensionLoader.class.getSimpleName(), type.getName(), defaultExtName);\r\n                 code.append(s);\r\n \r\n                 // return statement\r",
      "parent_sha": "92e88251061863cda2606c7495d20fa44c8c6a32"
    }
  },
  {
    "oid": "2174bfdea1e2c089a9a1220e6b30bc7178af8f93",
    "message": "\u5408\u5e76\u53d8\u66f4\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@49 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2011-10-26T01:45:38Z",
    "url": "https://github.com/apache/dubbo/commit/2174bfdea1e2c089a9a1220e6b30bc7178af8f93",
    "details": {
      "sha": "aeb5fe03cc0fd11e3f7741579e815b63c8fafbcf",
      "filename": "dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/LazyConnectExchangeClient.java",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/apache/dubbo/blob/2174bfdea1e2c089a9a1220e6b30bc7178af8f93/dubbo-rpc%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fdubbo%2FLazyConnectExchangeClient.java",
      "raw_url": "https://github.com/apache/dubbo/raw/2174bfdea1e2c089a9a1220e6b30bc7178af8f93/dubbo-rpc%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fdubbo%2FLazyConnectExchangeClient.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fdubbo%2FLazyConnectExchangeClient.java?ref=2174bfdea1e2c089a9a1220e6b30bc7178af8f93",
      "patch": "@@ -29,7 +29,6 @@\n import com.alibaba.dubbo.remoting.exchange.ExchangeHandler;\n import com.alibaba.dubbo.remoting.exchange.Exchangers;\n import com.alibaba.dubbo.remoting.exchange.ResponseFuture;\n-import com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient;\n import com.alibaba.dubbo.rpc.RpcConstants;\n \n /**\n@@ -43,7 +42,7 @@ final class LazyConnectExchangeClient implements ExchangeClient {\n \n     private final URL                     url;\n     private final ExchangeHandler         requestHandler;\n-    private volatile HeaderExchangeClient client;\n+    private volatile ExchangeClient       client;\n     private final Lock                    connectLock = new ReentrantLock();\n     //lazy connect \u5982\u679c\u6ca1\u6709\u521d\u59cb\u5316\u65f6\u7684\u8fde\u63a5\u72b6\u6001\n     private final boolean                 initialState ;\n@@ -65,8 +64,7 @@ private void initClient() throws RemotingException {\n         try {\n             if (client != null)\n                 return;\n-            this.client = new HeaderExchangeClient(Exchangers.connect(url, requestHandler));\n-//            if (client == )\n+            this.client = Exchangers.connect(url, requestHandler);\n         } finally {\n             connectLock.unlock();\n         }",
      "parent_sha": "65bcf574641c1b191e684ba3d9e20ed82b9297e7"
    }
  },
  {
    "oid": "54b624bc92e2f0bc1631f9e89513d12e4c49c1c6",
    "message": "Fixed #1186, change the default ZK client from `zkclient` to `curator`",
    "date": "2018-01-16T07:33:21Z",
    "url": "https://github.com/apache/dubbo/commit/54b624bc92e2f0bc1631f9e89513d12e4c49c1c6",
    "details": {
      "sha": "bbddd8ceeafab4ab04455272a1f0cd84a70cd90f",
      "filename": "dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/com/alibaba/dubbo/remoting/zookeeper/ZookeeperTransporter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/54b624bc92e2f0bc1631f9e89513d12e4c49c1c6/dubbo-remoting%2Fdubbo-remoting-zookeeper%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fremoting%2Fzookeeper%2FZookeeperTransporter.java",
      "raw_url": "https://github.com/apache/dubbo/raw/54b624bc92e2f0bc1631f9e89513d12e4c49c1c6/dubbo-remoting%2Fdubbo-remoting-zookeeper%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fremoting%2Fzookeeper%2FZookeeperTransporter.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting%2Fdubbo-remoting-zookeeper%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fremoting%2Fzookeeper%2FZookeeperTransporter.java?ref=54b624bc92e2f0bc1631f9e89513d12e4c49c1c6",
      "patch": "@@ -21,7 +21,7 @@\n import com.alibaba.dubbo.common.extension.Adaptive;\n import com.alibaba.dubbo.common.extension.SPI;\n \n-@SPI(\"zkclient\")\n+@SPI(\"curator\")\n public interface ZookeeperTransporter {\n \n     @Adaptive({Constants.CLIENT_KEY, Constants.TRANSPORTER_KEY})",
      "parent_sha": "c2cc20cff49980fbe530fa9ce70049299a861266"
    }
  },
  {
    "oid": "f4bd1b5f2cd54a7fd4944944f94d38bc5a2b1730",
    "message": "supplementary change for pull request#1388",
    "date": "2018-04-08T02:30:00Z",
    "url": "https://github.com/apache/dubbo/commit/f4bd1b5f2cd54a7fd4944944f94d38bc5a2b1730",
    "details": {
      "sha": "e75adcaac435041865e9ad55b23738a05e21136a",
      "filename": "dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/merger/ArrayMerger.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/f4bd1b5f2cd54a7fd4944944f94d38bc5a2b1730/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fcluster%2Fmerger%2FArrayMerger.java",
      "raw_url": "https://github.com/apache/dubbo/raw/f4bd1b5f2cd54a7fd4944944f94d38bc5a2b1730/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fcluster%2Fmerger%2FArrayMerger.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fcluster%2Fmerger%2FArrayMerger.java?ref=f4bd1b5f2cd54a7fd4944944f94d38bc5a2b1730",
      "patch": "@@ -34,7 +34,7 @@ public Object[] merge(Object[]... others) {\n             if (item != null && item.getClass().isArray()) {\n                 totalLen += Array.getLength(item);\n             } else {\n-                throw new IllegalArgumentException(i + 1 + \"th argument is not an array\");\n+                throw new IllegalArgumentException((i + 1) + \"th argument is not an array\");\n             }\n         }\n ",
      "parent_sha": "92fa9afe2760feb28833c09215e76a981ddcd9c7"
    }
  },
  {
    "oid": "33931247ec3a3efea73e224cc9446b0269f16549",
    "message": "DUBBO-289 URL\u7edf\u4e00\u7528\u5206\u53f7\u9694\u5f00\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@1293 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2012-03-20T13:55:03Z",
    "url": "https://github.com/apache/dubbo/commit/33931247ec3a3efea73e224cc9446b0269f16549",
    "details": {
      "sha": "faa2cc370a75010d198336447c0f5b4e9116c26d",
      "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/Constants.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/33931247ec3a3efea73e224cc9446b0269f16549/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2FConstants.java",
      "raw_url": "https://github.com/apache/dubbo/raw/33931247ec3a3efea73e224cc9446b0269f16549/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2FConstants.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2FConstants.java?ref=33931247ec3a3efea73e224cc9446b0269f16549",
      "patch": "@@ -304,7 +304,7 @@ public class Constants {\n     public static final String  REGISTRY_SEPARATOR                 = \"|\";\r\n \r\n     public static final Pattern REGISTRY_SPLIT_PATTERN             = Pattern\r\n-                                                                           .compile(\"\\\\s*[|]+\\\\s*\");\r\n+                                                                           .compile(\"\\\\s*[|;]+\\\\s*\");\r\n \r\n     public static final String  SEMICOLON_SEPARATOR                = \";\";\r\n \r",
      "parent_sha": "36b6734e74bf5fcfa87049798f42ce86dca9d43e"
    }
  },
  {
    "oid": "1acdd1e766f7b88098c17a19aa147f2383bc88db",
    "message": "fix wrong comments (#5677)",
    "date": "2020-01-17T08:19:03Z",
    "url": "https://github.com/apache/dubbo/commit/1acdd1e766f7b88098c17a19aa147f2383bc88db",
    "details": {
      "sha": "73790a1bbc405b834fabb8130a2099d18329283f",
      "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/AdaptiveClassCodeGenerator.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/1acdd1e766f7b88098c17a19aa147f2383bc88db/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fextension%2FAdaptiveClassCodeGenerator.java",
      "raw_url": "https://github.com/apache/dubbo/raw/1acdd1e766f7b88098c17a19aa147f2383bc88db/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fextension%2FAdaptiveClassCodeGenerator.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fextension%2FAdaptiveClassCodeGenerator.java?ref=1acdd1e766f7b88098c17a19aa147f2383bc88db",
      "patch": "@@ -75,7 +75,7 @@ public AdaptiveClassCodeGenerator(Class<?> type, String defaultExtName) {\n     }\n \n     /**\n-     * test if given type has at least one method annotated with <code>SPI</code>\n+     * test if given type has at least one method annotated with <code>Adaptive</code>\n      */\n     private boolean hasAdaptiveMethod() {\n         return Arrays.stream(type.getMethods()).anyMatch(m -> m.isAnnotationPresent(Adaptive.class));",
      "parent_sha": "0f99cb65c3f2d679be9452747ff2833faff4df5f"
    }
  },
  {
    "oid": "c4f11fc25e7e11b29ca543cf691e4d084bb76cd5",
    "message": "[Dubbo-6340]fix application cannot exit when use consul registry (#6341)\n\n* fix application cannot exit when use consul registry",
    "date": "2020-06-18T12:36:40Z",
    "url": "https://github.com/apache/dubbo/commit/c4f11fc25e7e11b29ca543cf691e4d084bb76cd5",
    "details": {
      "sha": "9593172eeb58318a0af21b1f42789f8d0e3895aa",
      "filename": "dubbo-registry/dubbo-registry-consul/src/main/java/org/apache/dubbo/registry/consul/ConsulRegistry.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/dubbo/blob/c4f11fc25e7e11b29ca543cf691e4d084bb76cd5/dubbo-registry%2Fdubbo-registry-consul%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fconsul%2FConsulRegistry.java",
      "raw_url": "https://github.com/apache/dubbo/raw/c4f11fc25e7e11b29ca543cf691e4d084bb76cd5/dubbo-registry%2Fdubbo-registry-consul%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fconsul%2FConsulRegistry.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry%2Fdubbo-registry-consul%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fconsul%2FConsulRegistry.java?ref=c4f11fc25e7e11b29ca543cf691e4d084bb76cd5",
      "patch": "@@ -45,8 +45,8 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n \n@@ -86,7 +86,7 @@ public ConsulRegistry(URL url) {\n         int port = url.getPort() != 0 ? url.getPort() : DEFAULT_PORT;\n         client = new ConsulClient(host, port);\n         checkPassInterval = url.getParameter(CHECK_PASS_INTERVAL, DEFAULT_CHECK_PASS_INTERVAL);\n-        ttlConsulCheckExecutor = Executors.newSingleThreadScheduledExecutor();\n+        ttlConsulCheckExecutor = new ScheduledThreadPoolExecutor(1, new NamedThreadFactory(\"Ttl-Consul-Check-Executor\", true));\n         ttlConsulCheckExecutor.scheduleAtFixedRate(this::checkPass, checkPassInterval / 8,\n                 checkPassInterval / 8, TimeUnit.MILLISECONDS);\n     }",
      "parent_sha": "3ef35a1c0d98b27f05051442176e2536a9ca352a"
    }
  },
  {
    "oid": "3a5c8727580b30a5f234e3028b3b07e3f4998127",
    "message": "DUBBO-285 \u5f53\u670d\u52a1\u63a5\u53e3\u4e2d\u6709\u65b9\u6cd5\u91cd\u8f7d\u65f6\uff0ctelnet \u65e0\u6cd5\u6b63\u786e\u8c03\u7528\u6240\u6709\u65b9\u6cd5\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@1294 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2012-03-20T14:29:02Z",
    "url": "https://github.com/apache/dubbo/commit/3a5c8727580b30a5f234e3028b3b07e3f4998127",
    "details": {
      "sha": "4bd16895815f6009dcdf82fdd7421ae0b64b0bbe",
      "filename": "dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/telnet/InvokeTelnetHandler.java",
      "status": "modified",
      "additions": 66,
      "deletions": 24,
      "changes": 90,
      "blob_url": "https://github.com/apache/dubbo/blob/3a5c8727580b30a5f234e3028b3b07e3f4998127/dubbo-rpc-default%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fdubbo%2Ftelnet%2FInvokeTelnetHandler.java",
      "raw_url": "https://github.com/apache/dubbo/raw/3a5c8727580b30a5f234e3028b3b07e3f4998127/dubbo-rpc-default%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fdubbo%2Ftelnet%2FInvokeTelnetHandler.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc-default%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fdubbo%2Ftelnet%2FInvokeTelnetHandler.java?ref=3a5c8727580b30a5f234e3028b3b07e3f4998127",
      "patch": "@@ -16,7 +16,9 @@\n package com.alibaba.dubbo.rpc.protocol.dubbo.telnet;\r\n \r\n import java.lang.reflect.Method;\r\n+import java.util.Collection;\r\n import java.util.List;\r\n+import java.util.Map;\r\n \r\n import com.alibaba.dubbo.common.extension.Activate;\r\n import com.alibaba.dubbo.common.json.JSON;\r\n@@ -40,7 +42,7 @@\n @Activate\r\n @Help(parameter = \"[service.]method(args)\", summary = \"Invoke the service method.\", detail = \"Invoke the service method.\")\r\n public class InvokeTelnetHandler implements TelnetHandler {\r\n-\r\n+    \r\n     @SuppressWarnings(\"unchecked\")\r\n     public String telnet(Channel channel, String message) {\r\n         if (message == null || message.length() == 0) {\r\n@@ -62,46 +64,33 @@ public String telnet(Channel channel, String message) {\n             service = method.substring(0, i).trim();\r\n             method = method.substring(i + 1).trim();\r\n         }\r\n+        List<Object> list;\r\n+        try {\r\n+            list = (List<Object>) JSON.parse(\"[\" + args + \"]\", List.class);\r\n+        } catch (Throwable t) {\r\n+            return \"Invalid json argument, cause: \" + t.getMessage();\r\n+        }\r\n         Invoker<?> invoker = null;\r\n         Method invokeMethod = null;\r\n         for (Exporter<?> exporter : DubboProtocol.getDubboProtocol().getExporters()) {\r\n             if (service == null || service.length() == 0) {\r\n-                Method[] methods = exporter.getInvoker().getInterface().getMethods();\r\n-                for (Method m : methods) {\r\n-                    if (m.getName().equals(method)\r\n-                            || ReflectUtils.getSignature(m.getName(), m.getParameterTypes()).equals(method)) {\r\n-                        invoker = exporter.getInvoker();\r\n-                        invokeMethod = m;\r\n-                        break;\r\n-                    }\r\n-                }\r\n-                if (invoker != null) {\r\n+                invokeMethod = findMethod(exporter, method, list);\r\n+                if (invokeMethod != null) {\r\n+                    invoker = exporter.getInvoker();\r\n                     break;\r\n                 }\r\n             } else {\r\n                 if (service.equals(exporter.getInvoker().getInterface().getSimpleName())\r\n                         || service.equals(exporter.getInvoker().getInterface().getName())\r\n                         || service.equals(exporter.getInvoker().getUrl().getPath())) {\r\n+                    invokeMethod = findMethod(exporter, method, list);\r\n                     invoker = exporter.getInvoker();\r\n-                    Method[] methods = invoker.getInterface().getMethods();\r\n-                    for (Method m : methods) {\r\n-                        if (m.getName().equals(method)\r\n-                                || ReflectUtils.getSignature(m.getName(), m.getParameterTypes()).equals(method)) {\r\n-                            invokeMethod = m;\r\n-                        }\r\n-                    }\r\n                     break;\r\n                 }\r\n             }\r\n         }\r\n         if (invoker != null) {\r\n             if (invokeMethod != null) {\r\n-                List<Object> list;\r\n-                try {\r\n-                    list = (List<Object>) JSON.parse(\"[\" + args + \"]\", List.class);\r\n-                } catch (Throwable t) {\r\n-                    return \"Invalid json argument, cause: \" + t.getMessage();\r\n-                }\r\n                 try {\r\n                     Object[] array = PojoUtils.realize(list.toArray(), invokeMethod.getParameterTypes());\r\n                     RpcContext.getContext().setLocalAddress(channel.getLocalAddress()).setRemoteAddress(channel.getRemoteAddress());\r\n@@ -124,4 +113,57 @@ public String telnet(Channel channel, String message) {\n         return buf.toString();\r\n     }\r\n \r\n+    private static Method findMethod(Exporter<?> exporter, String method, List<Object> args) {\r\n+        Invoker<?> invoker = exporter.getInvoker();\r\n+        Method[] methods = invoker.getInterface().getMethods();\r\n+        Method invokeMethod = null;\r\n+        for (Method m : methods) {\r\n+            if (m.getName().equals(method) && m.getParameterTypes().length == args.size()) {\r\n+                if (invokeMethod != null) { // \u91cd\u8f7d\r\n+                    if (isMatch(invokeMethod.getParameterTypes(), args)) {\r\n+                        invokeMethod = m;\r\n+                        break;\r\n+                    }\r\n+                } else {\r\n+                    invokeMethod = m;\r\n+                }\r\n+                invoker = exporter.getInvoker();\r\n+            }\r\n+        }\r\n+        return invokeMethod;\r\n+    }\r\n+    \r\n+    private static boolean isMatch(Class<?>[] types, List<Object> args) {\r\n+        if (types.length != args.size()) {\r\n+            return false;\r\n+        }\r\n+        for (int i = 0; i < types.length; i ++) {\r\n+            Class<?> type = types[i];\r\n+            Object arg = args.get(i);\r\n+            if (ReflectUtils.isPrimitive(arg.getClass())) {\r\n+                if (! ReflectUtils.isPrimitive(type)) {\r\n+                    return false;\r\n+                }\r\n+            } else if (arg instanceof Map) {\r\n+                String name = (String) ((Map<?, ?>)arg).get(\"class\");\r\n+                Class<?> cls = arg.getClass();\r\n+                if (name != null && name.length() > 0) {\r\n+                    cls = ReflectUtils.forName(name);\r\n+                }\r\n+                if (! type.isAssignableFrom(cls)) {\r\n+                    return false;\r\n+                }\r\n+            } else if (arg instanceof Collection) {\r\n+                if (! type.isArray() && ! type.isAssignableFrom(arg.getClass())) {\r\n+                    return false;\r\n+                }\r\n+            } else {\r\n+                if (! type.isAssignableFrom(arg.getClass())) {\r\n+                    return false;\r\n+                }\r\n+            }\r\n+        }\r\n+        return true;\r\n+    }\r\n+\r\n }\n\\ No newline at end of file",
      "parent_sha": "33931247ec3a3efea73e224cc9446b0269f16549"
    }
  },
  {
    "oid": "4037b5d33e572b5c2904c469a04c62ca878bfaea",
    "message": "fix typo (#5834)",
    "date": "2020-03-08T07:29:52Z",
    "url": "https://github.com/apache/dubbo/commit/4037b5d33e572b5c2904c469a04c62ca878bfaea",
    "details": {
      "sha": "0da56fa5a8f99586c6c2b25e6d77200091e201d4",
      "filename": "dubbo-remoting/dubbo-remoting-etcd3/src/main/java/org/apache/dubbo/remoting/etcd/jetcd/JEtcdClient.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/4037b5d33e572b5c2904c469a04c62ca878bfaea/dubbo-remoting%2Fdubbo-remoting-etcd3%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fremoting%2Fetcd%2Fjetcd%2FJEtcdClient.java",
      "raw_url": "https://github.com/apache/dubbo/raw/4037b5d33e572b5c2904c469a04c62ca878bfaea/dubbo-remoting%2Fdubbo-remoting-etcd3%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fremoting%2Fetcd%2Fjetcd%2FJEtcdClient.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting%2Fdubbo-remoting-etcd3%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fremoting%2Fetcd%2Fjetcd%2FJEtcdClient.java?ref=4037b5d33e572b5c2904c469a04c62ca878bfaea",
      "patch": "@@ -70,7 +70,7 @@\n import static org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper.UTF_8;\n \n /**\n- * etct3 client.\n+ * etcd3 client.\n  */\n public class JEtcdClient extends AbstractEtcdClient<JEtcdClient.EtcdWatcher> {\n ",
      "parent_sha": "9fb69a5c078064c76640735afb86148eaabace5c"
    }
  },
  {
    "oid": "1038a11dada985bd2d08bcd8d65aecb248780dcf",
    "message": "DUBBO-71 Graceful shutdown-\u534a\u5173\u95ed\u72b6\u6001\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@335 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2011-11-16T02:31:02Z",
    "url": "https://github.com/apache/dubbo/commit/1038a11dada985bd2d08bcd8d65aecb248780dcf",
    "details": {
      "sha": "e3a4c01e9fb99e692860a64bb42d5ff5acfd10bb",
      "filename": "dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/DubboInvoker.java",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/apache/dubbo/blob/1038a11dada985bd2d08bcd8d65aecb248780dcf/dubbo-rpc-default%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fdubbo%2FDubboInvoker.java",
      "raw_url": "https://github.com/apache/dubbo/raw/1038a11dada985bd2d08bcd8d65aecb248780dcf/dubbo-rpc-default%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fdubbo%2FDubboInvoker.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc-default%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fdubbo%2FDubboInvoker.java?ref=1038a11dada985bd2d08bcd8d65aecb248780dcf",
      "patch": "@@ -103,13 +103,10 @@ protected Result doInvoke(final Invocation invocation) throws Throwable {\n     public boolean isAvailable() {\r\n         if (!super.isAvailable())\r\n             return false;\r\n-        if (clients.length ==1){\r\n-            return clients[0].isConnected();\r\n-        } else {\r\n-            for (ExchangeClient client : clients){\r\n-                if (client.isConnected()){\r\n-                    return true;\r\n-                }\r\n+        for (ExchangeClient client : clients){\r\n+            //cannot write == not Available ?\r\n+            if (client.isConnected() && !client.hasAttribute(Constants.CHANNEL_CANNOTWRITE_KEY)){\r\n+                return true;\r\n             }\r\n         }\r\n         return false;\r",
      "parent_sha": "49831bdf4cc8aeeeff9aba855831344318694155"
    }
  },
  {
    "oid": "ad126d53bb220dc8c46fbf40cf763afa65c5145b",
    "message": "fix unit test failure (#2097)",
    "date": "2018-07-18T09:17:40Z",
    "url": "https://github.com/apache/dubbo/commit/ad126d53bb220dc8c46fbf40cf763afa65c5145b",
    "details": {
      "sha": "ac231cbad72489261ec38b2ee175f58ad2418b6d",
      "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/apache/dubbo/blob/ad126d53bb220dc8c46fbf40cf763afa65c5145b/dubbo-config%2Fdubbo-config-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2FAbstractConfigTest.java",
      "raw_url": "https://github.com/apache/dubbo/raw/ad126d53bb220dc8c46fbf40cf763afa65c5145b/dubbo-config%2Fdubbo-config-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2FAbstractConfigTest.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config%2Fdubbo-config-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2FAbstractConfigTest.java?ref=ad126d53bb220dc8c46fbf40cf763afa65c5145b",
      "patch": "@@ -16,11 +16,12 @@\n  */\n package org.apache.dubbo.config;\n \n+import junit.framework.TestCase;\n import org.apache.dubbo.common.Constants;\n import org.apache.dubbo.common.utils.ConfigUtils;\n import org.apache.dubbo.config.api.Greeting;\n import org.apache.dubbo.config.support.Parameter;\n-import junit.framework.TestCase;\n+import org.hamcrest.Matchers;\n import org.junit.Test;\n \n import java.lang.annotation.ElementType;\n@@ -32,6 +33,8 @@\n import java.util.Map;\n import java.util.Properties;\n \n+import static org.junit.Assert.assertThat;\n+\n public class AbstractConfigTest {\n \n     @Test\n@@ -267,8 +270,8 @@ public void appendAnnotation() throws Exception {\n         TestCase.assertEquals(2, annotationConfig.getParameters().size());\n         TestCase.assertEquals(\"v1\", annotationConfig.getParameters().get(\"k1\"));\n         TestCase.assertEquals(\"v2\", annotationConfig.getParameters().get(\"k2\"));\n-        TestCase.assertEquals(\"<dubbo:annotation filter=\\\"f1, f2\\\" listener=\\\"l1, l2\\\" />\",\n-                annotationConfig.toString());\n+        assertThat(annotationConfig.toString(), Matchers.containsString(\"filter=\\\"f1, f2\\\" \"));\n+        assertThat(annotationConfig.toString(), Matchers.containsString(\"listener=\\\"l1, l2\\\" \"));\n     }\n \n     private static class PropertiesConfig extends AbstractConfig {",
      "parent_sha": "040be91d3a35d713d4c8f6348555601761450f39"
    }
  },
  {
    "oid": "af041d321f50f1c6ceba693090d843dffab8ec95",
    "message": "add default interval for retries of saving properties (#10412)",
    "date": "2022-08-15T01:59:32Z",
    "url": "https://github.com/apache/dubbo/commit/af041d321f50f1c6ceba693090d843dffab8ec95",
    "details": {
      "sha": "516a974945e298693473d231f2ba3e3c88220263",
      "filename": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistry.java",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/apache/dubbo/blob/af041d321f50f1c6ceba693090d843dffab8ec95/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fsupport%2FAbstractRegistry.java",
      "raw_url": "https://github.com/apache/dubbo/raw/af041d321f50f1c6ceba693090d843dffab8ec95/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fsupport%2FAbstractRegistry.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fsupport%2FAbstractRegistry.java?ref=af041d321f50f1c6ceba693090d843dffab8ec95",
      "patch": "@@ -49,7 +49,8 @@\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n-import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicReference;\n@@ -79,12 +80,15 @@ public abstract class AbstractRegistry implements Registry {\n     private static final String URL_SPLIT = \"\\\\s+\";\n     // Max times to retry to save properties to local cache file\n     private static final int MAX_RETRY_TIMES_SAVE_PROPERTIES = 3;\n+    // Default interval in millisecond for saving properties to local cache file\n+    private static final long DEFAULT_INTERVAL_SAVE_PROPERTIES = 500L;\n+\n     // Log output\n     protected final Logger logger = LoggerFactory.getLogger(getClass());\n     // Local disk cache, where the special key value.registries records the list of registry centers, and the others are the list of notified service providers\n     private final Properties properties = new Properties();\n     // File cache timing writing\n-    private final ExecutorService registryCacheExecutor;\n+    private final ScheduledExecutorService registryCacheExecutor;\n     private final AtomicLong lastCacheChanged = new AtomicLong();\n     private final AtomicInteger savePropertiesRetryTimes = new AtomicInteger();\n     private final Set<URL> registered = new ConcurrentHashSet<>();\n@@ -104,7 +108,7 @@ public AbstractRegistry(URL url) {\n         registryManager = url.getOrDefaultApplicationModel().getBeanFactory().getBean(RegistryManager.class);\n         localCacheEnabled = url.getParameter(REGISTRY_LOCAL_FILE_CACHE_ENABLED, true);\n         registryCacheExecutor = url.getOrDefaultFrameworkModel().getBeanFactory()\n-            .getBean(FrameworkExecutorRepository.class).getSharedExecutor();\n+            .getBean(FrameworkExecutorRepository.class).getSharedScheduledExecutor();\n         if (localCacheEnabled) {\n             // Start file save timer\n             syncSaveFile = url.getParameter(REGISTRY_FILESAVE_SYNC_KEY, false);\n@@ -238,7 +242,7 @@ public void doSaveProperties(long version) {\n                 savePropertiesRetryTimes.set(0);\n                 return;\n             } else {\n-                registryCacheExecutor.execute(() -> doSaveProperties(lastCacheChanged.incrementAndGet()));\n+                registryCacheExecutor.schedule(() -> doSaveProperties(lastCacheChanged.incrementAndGet()), DEFAULT_INTERVAL_SAVE_PROPERTIES, TimeUnit.MILLISECONDS);\n             }\n             if (!(e instanceof OverlappingFileLockException)) {\n                 logger.warn(\"Failed to save registry cache file, will retry, cause: \" + e.getMessage(), e);\n@@ -495,7 +499,7 @@ private void saveProperties(URL url) {\n             if (syncSaveFile) {\n                 doSaveProperties(version);\n             } else {\n-                registryCacheExecutor.execute(() -> doSaveProperties(version));\n+                registryCacheExecutor.schedule(() -> doSaveProperties(version), DEFAULT_INTERVAL_SAVE_PROPERTIES, TimeUnit.MILLISECONDS);\n             }\n         } catch (Throwable t) {\n             logger.warn(t.getMessage(), t);",
      "parent_sha": "9b6c463598474e40bf0aec89e9a1c38ae14f83dd"
    }
  },
  {
    "oid": "49af203aa20667a0568a19566c1e9892166435ae",
    "message": "Fixed #520 change Main.class wait/notify to lock/condition",
    "date": "2017-09-26T11:01:35Z",
    "url": "https://github.com/apache/dubbo/commit/49af203aa20667a0568a19566c1e9892166435ae",
    "details": {
      "sha": "833c8d528f33c13ea5329b729e6166abd99a8aad",
      "filename": "dubbo-container/dubbo-container-api/src/main/java/com/alibaba/dubbo/container/Main.java",
      "status": "modified",
      "additions": 17,
      "deletions": 11,
      "changes": 28,
      "blob_url": "https://github.com/apache/dubbo/blob/49af203aa20667a0568a19566c1e9892166435ae/dubbo-container%2Fdubbo-container-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcontainer%2FMain.java",
      "raw_url": "https://github.com/apache/dubbo/raw/49af203aa20667a0568a19566c1e9892166435ae/dubbo-container%2Fdubbo-container-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcontainer%2FMain.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-container%2Fdubbo-container-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcontainer%2FMain.java?ref=49af203aa20667a0568a19566c1e9892166435ae",
      "patch": "@@ -26,6 +26,8 @@\n import java.util.Arrays;\r\n import java.util.Date;\r\n import java.util.List;\r\n+import java.util.concurrent.locks.Condition;\r\n+import java.util.concurrent.locks.ReentrantLock;\r\n \r\n /**\r\n  * Main. (API, Static, ThreadSafe)\r\n@@ -42,7 +44,9 @@ public class Main {\n \r\n     private static final ExtensionLoader<Container> loader = ExtensionLoader.getExtensionLoader(Container.class);\r\n \r\n-    private static volatile boolean running = true;\r\n+    private static final ReentrantLock LOCK = new ReentrantLock();\r\n+\r\n+    private static final Condition STOP = LOCK.newCondition();\r\n \r\n     public static void main(String[] args) {\r\n         try {\r\n@@ -67,9 +71,11 @@ public void run() {\n                             } catch (Throwable t) {\r\n                                 logger.error(t.getMessage(), t);\r\n                             }\r\n-                            synchronized (Main.class) {\r\n-                                running = false;\r\n-                                Main.class.notify();\r\n+                            try {\r\n+                                LOCK.lock();\r\n+                                STOP.signal();\r\n+                            } finally {\r\n+                                LOCK.unlock();\r\n                             }\r\n                         }\r\n                     }\r\n@@ -86,13 +92,13 @@ public void run() {\n             logger.error(e.getMessage(), e);\r\n             System.exit(1);\r\n         }\r\n-        synchronized (Main.class) {\r\n-            while (running) {\r\n-                try {\r\n-                    Main.class.wait();\r\n-                } catch (Throwable e) {\r\n-                }\r\n-            }\r\n+        try {\r\n+            LOCK.lock();\r\n+            STOP.await();\r\n+        } catch (InterruptedException e) {\r\n+            logger.warn(\"Dubbo service server stopped, interrupted by other thread!\", e);\r\n+        } finally {\r\n+            LOCK.unlock();\r\n         }\r\n     }\r\n \r",
      "parent_sha": "a40e498e966e6f87078442e88a0033c20df47855"
    }
  },
  {
    "oid": "cf9228195454879aef1a174c9bda8bd22d89c495",
    "message": "\u4fee\u6539zookeeper\u5f02\u5e38\u4fe1\u606f\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@522 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2011-12-05T08:19:39Z",
    "url": "https://github.com/apache/dubbo/commit/cf9228195454879aef1a174c9bda8bd22d89c495",
    "details": {
      "sha": "39d34f5253d7a9ec33a2c202351aa44671fe6dba",
      "filename": "dubbo-registry-zookeeper/src/main/java/com/alibaba/dubbo/registry/zookeeper/ZookeeperRegistry.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/cf9228195454879aef1a174c9bda8bd22d89c495/dubbo-registry-zookeeper%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2Fzookeeper%2FZookeeperRegistry.java",
      "raw_url": "https://github.com/apache/dubbo/raw/cf9228195454879aef1a174c9bda8bd22d89c495/dubbo-registry-zookeeper%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2Fzookeeper%2FZookeeperRegistry.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry-zookeeper%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2Fzookeeper%2FZookeeperRegistry.java?ref=cf9228195454879aef1a174c9bda8bd22d89c495",
      "patch": "@@ -142,7 +142,7 @@ private void initZookeeper() {\n                     zk.close();\r\n                 }\r\n             } catch (Exception e) {\r\n-                throw new IllegalStateException(e.getMessage(), e);\r\n+                throw new IllegalStateException(\"Can not connect to zookeeper \" + getUrl() + \", cause: \" + e.getMessage(), e);\r\n             } finally {\r\n                 zookeeperLock.unlock();\r\n             }\r",
      "parent_sha": "d30d5a5a69cc6cd12d16c43467f768f68f56757c"
    }
  },
  {
    "oid": "8534f48f61bfa0134a0eacf042a4f3269f779f0e",
    "message": "Observation of performance degradation when running under JDK 8 (#4381)",
    "date": "2019-06-26T03:37:58Z",
    "url": "https://github.com/apache/dubbo/commit/8534f48f61bfa0134a0eacf042a4f3269f779f0e",
    "details": {
      "sha": "93fb5d88a78b52c68053f3c77bce440557d5138c",
      "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AsyncToSyncInvoker.java",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/apache/dubbo/blob/8534f48f61bfa0134a0eacf042a4f3269f779f0e/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fprotocol%2FAsyncToSyncInvoker.java",
      "raw_url": "https://github.com/apache/dubbo/raw/8534f48f61bfa0134a0eacf042a4f3269f779f0e/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fprotocol%2FAsyncToSyncInvoker.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fprotocol%2FAsyncToSyncInvoker.java?ref=8534f48f61bfa0134a0eacf042a4f3269f779f0e",
      "patch": "@@ -27,6 +27,10 @@\n import org.apache.dubbo.rpc.RpcInvocation;\n \n import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_TIMEOUT;\n+import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;\n \n /**\n  * This class will work as a wrapper wrapping outside of each protocol invoker.\n@@ -51,7 +55,7 @@ public Result invoke(Invocation invocation) throws RpcException {\n \n         try {\n             if (InvokeMode.SYNC == ((RpcInvocation)invocation).getInvokeMode()) {\n-                asyncResult.get();\n+                asyncResult.get(getUrl().getParameter(TIMEOUT_KEY, DEFAULT_TIMEOUT), TimeUnit.MILLISECONDS);\n             }\n         } catch (InterruptedException e) {\n             throw new RpcException(\"Interrupted unexpectedly while waiting for remoting result to return!  method: \" + invocation.getMethodName() + \", provider: \" + getUrl() + \", cause: \" + e.getMessage(), e);",
      "parent_sha": "6b7d11837a1e28f7c6e537d046778ffaf1c4ea95"
    }
  },
  {
    "oid": "e68d89e00d64c2e1448ed4684e2b2f94078ee376",
    "message": "[3.0] socks proxy filtering local address (#8876)",
    "date": "2021-09-24T06:32:04Z",
    "url": "https://github.com/apache/dubbo/commit/e68d89e00d64c2e1448ed4684e2b2f94078ee376",
    "details": {
      "sha": "5d7fb3ecd59fdc7eaa686af030d91b903dafc61d",
      "filename": "dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/apache/dubbo/blob/e68d89e00d64c2e1448ed4684e2b2f94078ee376/dubbo-remoting%2Fdubbo-remoting-netty4%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fremoting%2Ftransport%2Fnetty4%2FNettyClient.java",
      "raw_url": "https://github.com/apache/dubbo/raw/e68d89e00d64c2e1448ed4684e2b2f94078ee376/dubbo-remoting%2Fdubbo-remoting-netty4%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fremoting%2Ftransport%2Fnetty4%2FNettyClient.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting%2Fdubbo-remoting-netty4%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fremoting%2Ftransport%2Fnetty4%2FNettyClient.java?ref=e68d89e00d64c2e1448ed4684e2b2f94078ee376",
      "patch": "@@ -32,6 +32,7 @@\n import org.apache.dubbo.common.logger.Logger;\n import org.apache.dubbo.common.logger.LoggerFactory;\n import org.apache.dubbo.common.utils.NetUtils;\n+import org.apache.dubbo.common.utils.StringUtils;\n import org.apache.dubbo.remoting.ChannelHandler;\n import org.apache.dubbo.remoting.Constants;\n import org.apache.dubbo.remoting.RemotingException;\n@@ -118,7 +119,7 @@ protected void initChannel(SocketChannel ch) throws Exception {\n                         .addLast(\"handler\", nettyClientHandler);\n \n                 String socksProxyHost = ConfigurationUtils.getProperty(getUrl().getOrDefaultApplicationModel(), SOCKS_PROXY_HOST);\n-                if(socksProxyHost != null) {\n+                if(socksProxyHost != null && !isFilteredAddress(getUrl().getHost())) {\n                     int socksProxyPort = Integer.parseInt(ConfigurationUtils.getProperty(getUrl().getOrDefaultApplicationModel(), SOCKS_PROXY_PORT, DEFAULT_SOCKS_PROXY_PORT));\n                     Socks5ProxyHandler socks5ProxyHandler = new Socks5ProxyHandler(new InetSocketAddress(socksProxyHost, socksProxyPort));\n                     ch.pipeline().addFirst(socks5ProxyHandler);\n@@ -127,6 +128,14 @@ protected void initChannel(SocketChannel ch) throws Exception {\n         });\n     }\n \n+    private boolean isFilteredAddress(String host) {\n+        // filter local address\n+        if (StringUtils.isEquals(NetUtils.getLocalHost(), host) || NetUtils.isLocalHost(host)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     @Override\n     protected void doConnect() throws Throwable {\n         long start = System.currentTimeMillis();",
      "parent_sha": "8891dd0982ab7603fcec6f443f88100ff543c64a"
    }
  },
  {
    "oid": "b2fc28a67a12d3beea70e5d5c4f8b1b9d54350c3",
    "message": "resolve idea warning no beans of type found (#8396)",
    "date": "2021-08-03T04:01:25Z",
    "url": "https://github.com/apache/dubbo/commit/b2fc28a67a12d3beea70e5d5c4f8b1b9d54350c3",
    "details": {
      "sha": "d07128e0f7ec80c68318aab7ea62ea991a05d203",
      "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ReferenceBean.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apache/dubbo/blob/b2fc28a67a12d3beea70e5d5c4f8b1b9d54350c3/dubbo-config%2Fdubbo-config-spring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2Fspring%2FReferenceBean.java",
      "raw_url": "https://github.com/apache/dubbo/raw/b2fc28a67a12d3beea70e5d5c4f8b1b9d54350c3/dubbo-config%2Fdubbo-config-spring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2Fspring%2FReferenceBean.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config%2Fdubbo-config-spring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2Fspring%2FReferenceBean.java?ref=b2fc28a67a12d3beea70e5d5c4f8b1b9d54350c3",
      "patch": "@@ -94,7 +94,7 @@\n  * @see org.apache.dubbo.config.annotation.DubboReference\n  * @see org.apache.dubbo.config.spring.reference.ReferenceBeanBuilder\n  */\n-public class ReferenceBean<T> implements FactoryBean,\n+public class ReferenceBean<T> implements FactoryBean<T>,\n         ApplicationContextAware, BeanClassLoaderAware, BeanNameAware, InitializingBean, DisposableBean {\n \n     private transient ApplicationContext applicationContext;\n@@ -181,11 +181,11 @@ public void setBeanName(String name) {\n      * @see org.apache.dubbo.config.bootstrap.DubboBootstrap\n      */\n     @Override\n-    public Object getObject() {\n+    public T getObject() {\n         if (lazyProxy == null) {\n             createLazyProxy();\n         }\n-        return lazyProxy;\n+        return (T) lazyProxy;\n     }\n \n     @Override",
      "parent_sha": "94110c0e65f685af0e88b07f9587bca03b64cf9b"
    }
  },
  {
    "oid": "e0bd630e8adb61a9085a2cc3eb1302fcba9a47fd",
    "message": "fix unit test",
    "date": "2018-12-05T11:10:59Z",
    "url": "https://github.com/apache/dubbo/commit/e0bd630e8adb61a9085a2cc3eb1302fcba9a47fd",
    "details": {
      "sha": "ffd35d037cee168b00eee7f6c2318b007dca3766",
      "filename": "dubbo-metadata-report/dubbo-metadata-report-api/src/test/java/org/apache/dubbo/metadata/integration/MetadataReportServiceTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/dubbo/blob/e0bd630e8adb61a9085a2cc3eb1302fcba9a47fd/dubbo-metadata-report%2Fdubbo-metadata-report-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Fmetadata%2Fintegration%2FMetadataReportServiceTest.java",
      "raw_url": "https://github.com/apache/dubbo/raw/e0bd630e8adb61a9085a2cc3eb1302fcba9a47fd/dubbo-metadata-report%2Fdubbo-metadata-report-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Fmetadata%2Fintegration%2FMetadataReportServiceTest.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-metadata-report%2Fdubbo-metadata-report-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Fmetadata%2Fintegration%2FMetadataReportServiceTest.java?ref=e0bd630e8adb61a9085a2cc3eb1302fcba9a47fd",
      "patch": "@@ -78,7 +78,7 @@ public void testPublishProviderContainInterface() throws InterruptedException {\n \n         URL publishUrl = URL.valueOf(\"dubbo://\" + NetUtils.getLocalAddress().getHostName() + \":4444/org.apache.dubbo.TestService?version=1.0.3&application=vicpubp&interface=org.apache.dubbo.metadata.integration.InterfaceNameTestService\");\n         metadataReportService1.publishProvider(publishUrl);\n-        Thread.sleep(100);\n+        Thread.sleep(300);\n \n         Assert.assertTrue(metadataReportService1.metadataReport instanceof JTestMetadataReport4Test);\n \n@@ -98,7 +98,7 @@ public void testPublishConsumer() throws InterruptedException {\n \n         URL publishUrl = URL.valueOf(\"dubbo://\" + NetUtils.getLocalAddress().getHostName() + \":4444/org.apache.dubbo.TestService?version=1.0.x&application=vicpubconsumer&side=consumer\");\n         metadataReportService1.publishConsumer(publishUrl);\n-        Thread.sleep(100);\n+        Thread.sleep(300);\n \n         Assert.assertTrue(metadataReportService1.metadataReport instanceof JTestMetadataReport4Test);\n ",
      "parent_sha": "85eb412d86166f21b59b5a308f521f5aa5bc9991"
    }
  },
  {
    "oid": "c076890107db1e20cc1be49dd939a8f46cacb3dd",
    "message": "keep both old and new key (#9401)",
    "date": "2021-12-13T13:58:51Z",
    "url": "https://github.com/apache/dubbo/commit/c076890107db1e20cc1be49dd939a8f46cacb3dd",
    "details": {
      "sha": "427473c7387326dcef660fe5ae228f9ee76297f1",
      "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/config/ConfigurationUtils.java",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/apache/dubbo/blob/c076890107db1e20cc1be49dd939a8f46cacb3dd/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fconfig%2FConfigurationUtils.java",
      "raw_url": "https://github.com/apache/dubbo/raw/c076890107db1e20cc1be49dd939a8f46cacb3dd/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fconfig%2FConfigurationUtils.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fconfig%2FConfigurationUtils.java?ref=c076890107db1e20cc1be49dd939a8f46cacb3dd",
      "patch": "@@ -35,6 +35,7 @@\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Properties;\n import java.util.Set;\n \n@@ -238,8 +239,11 @@ private static <V extends Object> Map<String, V> getSubProperties(Map<String, V>\n \n                     String k = key.substring(prefix.length());\n                     // convert camelCase/snake_case to kebab-case\n-                    k = StringUtils.convertToSplitName(k, \"-\");\n-                    resultMap.putIfAbsent(k, val);\n+                    String newK = StringUtils.convertToSplitName(k, \"-\");\n+                    resultMap.putIfAbsent(newK, val);\n+                    if (!Objects.equals(k, newK)) {\n+                        resultMap.putIfAbsent(k, val);\n+                    }\n                 }\n             }\n         }",
      "parent_sha": "afa506f72cee192b9dd1388525aaf3a9cf0f0826"
    }
  },
  {
    "oid": "8ad5f78af199d3094c693feee436e70b649e7f7d",
    "message": "\u4fee\u590d\u521b\u5efaAdaptiveExtensionClass\u65f6\u65b9\u6cd5\u5f02\u5e38\u7b7e\u540d\u95ee\u9898",
    "date": "2015-02-12T02:48:26Z",
    "url": "https://github.com/apache/dubbo/commit/8ad5f78af199d3094c693feee436e70b649e7f7d",
    "details": {
      "sha": "982ab819eba5e0ed5ebc570004457b3e7cd99819",
      "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/extension/ExtensionLoader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/8ad5f78af199d3094c693feee436e70b649e7f7d/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2Fextension%2FExtensionLoader.java",
      "raw_url": "https://github.com/apache/dubbo/raw/8ad5f78af199d3094c693feee436e70b649e7f7d/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2Fextension%2FExtensionLoader.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2Fextension%2FExtensionLoader.java?ref=8ad5f78af199d3094c693feee436e70b649e7f7d",
      "patch": "@@ -931,7 +931,7 @@ private String createAdaptiveExtensionClassCode() {\n                     if (i > 0) {\r\n                         codeBuidler.append(\", \");\r\n                     }\r\n-                    codeBuidler.append(pts[i].getCanonicalName());\r\n+                    codeBuidler.append(ets[i].getCanonicalName());\r\n                 }\r\n             }\r\n             codeBuidler.append(\" {\");\r",
      "parent_sha": "17becc2d6676be84b01c0d15a81c5f33f85d21d6"
    }
  },
  {
    "oid": "4c49d48949ad19fe335bec07d3cd62fa620cd399",
    "message": "\u4fee\u6539rmi\u7684codec\u7f3a\u7701\u503c\u4e3aspring\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@210 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2011-11-08T07:41:52Z",
    "url": "https://github.com/apache/dubbo/commit/4c49d48949ad19fe335bec07d3cd62fa620cd399",
    "details": {
      "sha": "fecb0e2b5d99086497c2c02e8e24bd8c8221f6ac",
      "filename": "dubbo-rpc-rmi/src/main/java/com/alibaba/dubbo/rpc/protocol/rmi/RmiProtocol.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/dubbo/blob/4c49d48949ad19fe335bec07d3cd62fa620cd399/dubbo-rpc-rmi%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Frmi%2FRmiProtocol.java",
      "raw_url": "https://github.com/apache/dubbo/raw/4c49d48949ad19fe335bec07d3cd62fa620cd399/dubbo-rpc-rmi%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Frmi%2FRmiProtocol.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc-rmi%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Frmi%2FRmiProtocol.java?ref=4c49d48949ad19fe335bec07d3cd62fa620cd399",
      "patch": "@@ -122,8 +122,8 @@ public void destroy() {\n     private <T> Remote getRemote(final Invoker<T> invoker) {\r\n         final Class<T> serviceType = invoker.getInterface();\r\n         final URL url = invoker.getUrl();\r\n-        String codec = url.getParameter(Constants.CODEC_KEY, \"default\");\r\n-        if (! \"spring\".equals(codec) && ! \"default\".equals(codec) && ! \"dubbo\".equals(codec) && ! \"dubbo2\".equals(codec)) {\r\n+        String codec = url.getParameter(Constants.CODEC_KEY, \"spring\");\r\n+        if (! \"spring\".equals(codec) && ! \"dubbo\".equals(codec) && ! \"dubbo2\".equals(codec)) {\r\n             throw new IllegalArgumentException(\"Unsupported protocol codec \" + codec\r\n                     + \" for protocol RMI, Only support \\\"default\\\", \\\"spring\\\" codec.\");\r\n         }\r",
      "parent_sha": "bc68ad7cb0f5135887e171eb0a9d20d1de69721c"
    }
  },
  {
    "oid": "ff373a7db7645ea1b55bf84150d0326d1e999b78",
    "message": "New ascii logo. (#2395)",
    "date": "2018-08-28T10:06:49Z",
    "url": "https://github.com/apache/dubbo/commit/ff373a7db7645ea1b55bf84150d0326d1e999b78",
    "details": {
      "sha": "b504cbf335bbeb0717e33d98c0c61267873e287d",
      "filename": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/DubboLogo.java",
      "status": "modified",
      "additions": 5,
      "deletions": 11,
      "changes": 16,
      "blob_url": "https://github.com/apache/dubbo/blob/ff373a7db7645ea1b55bf84150d0326d1e999b78/dubbo-plugin%2Fdubbo-qos%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fqos%2Fserver%2FDubboLogo.java",
      "raw_url": "https://github.com/apache/dubbo/raw/ff373a7db7645ea1b55bf84150d0326d1e999b78/dubbo-plugin%2Fdubbo-qos%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fqos%2Fserver%2FDubboLogo.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-plugin%2Fdubbo-qos%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fqos%2Fserver%2FDubboLogo.java?ref=ff373a7db7645ea1b55bf84150d0326d1e999b78",
      "patch": "@@ -17,15 +17,9 @@\n package org.apache.dubbo.qos.server;\n \n public class DubboLogo {\n-    public static String dubbo =\n-                    \"  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584  \u2588\u2588\u2588    \u2588\u2584  \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584  \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584  \\n\" +\n-                    \"  \u2588\u2588\u2588   \u2580\u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n\" +\n-                    \"  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n\" +\n-                    \"  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588  \u2584\u2588\u2588\u2588\u2584\u2584\u2584\u2588\u2588\u2580   \u2584\u2588\u2588\u2588\u2584\u2584\u2584\u2588\u2588\u2580  \u2588\u2588\u2588    \u2588\u2588\u2588 \\n\" +\n-                    \"  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2584  \u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2584  \u2588\u2588\u2588    \u2588\u2588\u2588 \\n\" +\n-                    \"  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2584   \u2588\u2588\u2588    \u2588\u2588\u2584 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n\" +\n-                    \"  \u2588\u2588\u2588   \u2584\u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n\" +\n-                    \"  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \\n\" +\n-                    \"                                                             \\n\" +\n-                    \"\\n\";\n+    public static final String dubbo =\n+                    \"   ___   __  __ ___   ___   ____     \\n\" +\n+                    \"  / _ \\\\ / / / // _ ) / _ ) / __ \\\\  \\n\" +\n+                    \" / // // /_/ // _  |/ _  |/ /_/ /    \\n\" +\n+                    \"/____/ \\\\____//____//____/ \\\\____/   \\n\";\n }",
      "parent_sha": "86d734722d7309fca22499a7b7ccd2a42570d3e2"
    }
  },
  {
    "oid": "4737eafcb47a9b35c9f28845c47438428d667284",
    "message": "Fix SpringMvcRestProtocolTest\n\nSigned-off-by: crazyhzm <crazyhzm@gmail.com>",
    "date": "2023-12-04T12:16:44Z",
    "url": "https://github.com/apache/dubbo/commit/4737eafcb47a9b35c9f28845c47438428d667284",
    "details": {
      "sha": "0c80b818e1679baafe2448eefa9d42a30911024a",
      "filename": "dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/SpringMvcRestProtocolTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/4737eafcb47a9b35c9f28845c47438428d667284/dubbo-rpc%2Fdubbo-rpc-rest%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fprotocol%2Frest%2FSpringMvcRestProtocolTest.java",
      "raw_url": "https://github.com/apache/dubbo/raw/4737eafcb47a9b35c9f28845c47438428d667284/dubbo-rpc%2Fdubbo-rpc-rest%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fprotocol%2Frest%2FSpringMvcRestProtocolTest.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc%2Fdubbo-rpc-rest%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fprotocol%2Frest%2FSpringMvcRestProtocolTest.java?ref=4737eafcb47a9b35c9f28845c47438428d667284",
      "patch": "@@ -411,7 +411,7 @@ void testProxyDoubleCheck() {\n         Object proxy = aopProxy.getProxy();\n         SpringRestDemoService server = (SpringRestDemoService) proxy;\n \n-        URL nettyUrl = this.registerProvider(exportUrl, server, SpringRestDemoService.class);\n+        URL nettyUrl = this.registerProvider(getUrl(), server, SpringRestDemoService.class);\n \n         Exporter<SpringRestDemoService> exporter = getExport(nettyUrl, server);\n ",
      "parent_sha": "5cf765889e024b68afdd09745322abc7fa48fcc7"
    }
  },
  {
    "oid": "12c9791259cb959ef541a44073ce46bd3be39847",
    "message": "DUBBO-234 \u76d1\u63a7\u4e2d\u5fc3\u8d1f\u8d23\u6e05\u7406redis\u810f\u6570\u636e\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@1242 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2012-03-10T18:59:58Z",
    "url": "https://github.com/apache/dubbo/commit/12c9791259cb959ef541a44073ce46bd3be39847",
    "details": {
      "sha": "e99eec677c3cb887178561e5408fce91bfa1346f",
      "filename": "dubbo-registry-redis/src/main/java/com/alibaba/dubbo/registry/redis/RedisRegistry.java",
      "status": "modified",
      "additions": 27,
      "deletions": 11,
      "changes": 38,
      "blob_url": "https://github.com/apache/dubbo/blob/12c9791259cb959ef541a44073ce46bd3be39847/dubbo-registry-redis%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2Fredis%2FRedisRegistry.java",
      "raw_url": "https://github.com/apache/dubbo/raw/12c9791259cb959ef541a44073ce46bd3be39847/dubbo-registry-redis%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2Fredis%2FRedisRegistry.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry-redis%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2Fredis%2FRedisRegistry.java?ref=12c9791259cb959ef541a44073ce46bd3be39847",
      "patch": "@@ -75,6 +75,8 @@ public class RedisRegistry extends FailbackRegistry {\n     private final int reconnectPeriod;\r\n \r\n     private final int expirePeriod;\r\n+    \r\n+    private volatile boolean admin = false;\r\n \r\n     public RedisRegistry(URL url) {\r\n         super(url);\r\n@@ -128,10 +130,34 @@ private void deferExpired() {\n             for (String provider : new HashSet<String>(getRegistered())) {\r\n                 jedis.hset(toProviderPath(URL.valueOf(provider)), provider, String.valueOf(System.currentTimeMillis() + expirePeriod));\r\n             }\r\n+            if (admin) {\r\n+                clean(jedis);\r\n+            }\r\n         } finally {\r\n             jedisPool.returnResource(jedis);\r\n         }\r\n     }\r\n+    \r\n+    // \u76d1\u63a7\u4e2d\u5fc3\u8d1f\u8d23\u5220\u9664\u8fc7\u671f\u810f\u6570\u636e\r\n+    private void clean(Jedis jedis) {\r\n+        Set<String> keys = jedis.keys(root + Constants.ANY_VALUE);\r\n+        if (keys != null && keys.size() > 0) {\r\n+            for (String key : keys) {\r\n+                Map<String, String> values = jedis.hgetAll(key);\r\n+                if (values != null && values.size() > 0) {\r\n+                    for (Map.Entry<String, String> entry : values.entrySet()) {\r\n+                        String url = entry.getKey();\r\n+                        jedis.hdel(key, url);\r\n+                    }\r\n+                    if (key.endsWith(Constants.CONSUMERS)) {\r\n+                        jedis.publish(key, Constants.UNSUBSCRIBE);\r\n+                    } else {\r\n+                        jedis.publish(key, Constants.UNREGISTER);\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n \r\n     public boolean isAvailable() {\r\n         try {\r\n@@ -210,6 +236,7 @@ public void doSubscribe(final URL url, final NotifyListener listener) {\n         Jedis jedis = jedisPool.getResource();\r\n         try {\r\n             if (service.endsWith(Constants.ANY_VALUE)) {\r\n+                admin = true;\r\n                 for (String s : getServices(jedis, service)) {\r\n                     doNotify(jedis, s, url, listener);\r\n                 }\r\n@@ -278,17 +305,6 @@ private void doNotify(Jedis jedis, String service, URL url, Collection<NotifyLis\n                     if (UrlUtils.isMatch(url, u)) {\r\n                         urls.add(u);\r\n                     }\r\n-                } else if (url.getParameter(Constants.ADMIN_KEY, false)) {\r\n-                    // \u76d1\u63a7\u4e2d\u5fc3\u8d1f\u8d23\u5220\u9664\u8fc7\u671f\u810f\u6570\u636e\r\n-                    if (Constants.SUBSCRIBE_PROTOCOL.equals(u.getProtocol())) {\r\n-                        String key = toConsumerPath(u);\r\n-                        jedis.hdel(key, u.toFullString());\r\n-                        jedis.publish(key, Constants.UNSUBSCRIBE);\r\n-                    } else {\r\n-                        String key = toProviderPath(u);\r\n-                        jedis.hdel(key, u.toFullString());\r\n-                        jedis.publish(key, Constants.UNREGISTER);\r\n-                    }\r\n                 }\r\n             }\r\n         }\r",
      "parent_sha": "9d2e60fdc6185801ab98dfe92beefaf408aa426c"
    }
  },
  {
    "oid": "7ddef5ab61dfb868e9d0c683b44f2effaca24df0",
    "message": "DUBBO-625 \u4e1a\u52a1\u5bf9\u8c61\u7684toString\u65b9\u6cd5\u5f02\u5e38\u4f1a\u5bfc\u81f4RemotingInvocationTimeoutScan\u5931\u6548",
    "date": "2013-03-17T09:44:06Z",
    "url": "https://github.com/apache/dubbo/commit/7ddef5ab61dfb868e9d0c683b44f2effaca24df0",
    "details": {
      "sha": "33c0072f2876e7210e50ac0e3c3fddb07e6b2359",
      "filename": "dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/exchange/Request.java",
      "status": "modified",
      "additions": 57,
      "deletions": 44,
      "changes": 101,
      "blob_url": "https://github.com/apache/dubbo/blob/7ddef5ab61dfb868e9d0c683b44f2effaca24df0/dubbo-remoting%2Fdubbo-remoting-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fremoting%2Fexchange%2FRequest.java",
      "raw_url": "https://github.com/apache/dubbo/raw/7ddef5ab61dfb868e9d0c683b44f2effaca24df0/dubbo-remoting%2Fdubbo-remoting-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fremoting%2Fexchange%2FRequest.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting%2Fdubbo-remoting-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fremoting%2Fexchange%2FRequest.java?ref=7ddef5ab61dfb868e9d0c683b44f2effaca24df0",
      "patch": "@@ -1,42 +1,44 @@\n-/*\r\n- * Copyright 1999-2011 Alibaba Group.\r\n- *  \r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *  \r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- *  \r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n+/*\n+ * Copyright 1999-2011 Alibaba Group.\n+ *  \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *  \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *  \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package com.alibaba.dubbo.remoting.exchange;\n \n import java.util.concurrent.atomic.AtomicLong;\n \n+import com.alibaba.dubbo.common.utils.StringUtils;\n+\n /**\n  * Request.\n  * \n  * @author qian.lei\n  * @author william.liangf\n  */\n-public class Request {\r\n-    \r\n-    public static final String HEARTBEAT_EVENT = null;\r\n-    \r\n-    public static final String READONLY_EVENT = \"R\";\r\n-    \r\n+public class Request {\n+    \n+    public static final String HEARTBEAT_EVENT = null;\n+    \n+    public static final String READONLY_EVENT = \"R\";\n+    \n     private static final AtomicLong INVOKE_ID = new AtomicLong(0);\n \n     private final long    mId;\n \n     private String  mVersion;\n \n-    private boolean mTwoWay   = true;\r\n-    \r\n+    private boolean mTwoWay   = true;\n+    \n     private boolean mEvent = false;\n \n     private boolean mBroken   = false;\n@@ -70,15 +72,15 @@ public boolean isTwoWay() {\n     public void setTwoWay(boolean twoWay) {\n         mTwoWay = twoWay;\n     }\n-\r\n-    public boolean isEvent() {\r\n-        return mEvent;\r\n-    }\r\n-\r\n-    public void setEvent(String event) {\r\n-        mEvent = true;\r\n-        mData = event;\r\n-    }\r\n+\n+    public boolean isEvent() {\n+        return mEvent;\n+    }\n+\n+    public void setEvent(String event) {\n+        mEvent = true;\n+        mData = event;\n+    }\n \n     public boolean isBroken() {\n         return mBroken;\n@@ -95,16 +97,16 @@ public Object getData() {\n     public void setData(Object msg) {\n         mData = msg;\n     }\n-\r\n-    public boolean isHeartbeat() {\r\n-        return mEvent && HEARTBEAT_EVENT == mData;\r\n-    }\r\n-\r\n-    public void setHeartbeat(boolean isHeartbeat) {\r\n-        if (isHeartbeat) {\r\n-            setEvent(HEARTBEAT_EVENT);\r\n-        }\r\n-    }\r\n+\n+    public boolean isHeartbeat() {\n+        return mEvent && HEARTBEAT_EVENT == mData;\n+    }\n+\n+    public void setHeartbeat(boolean isHeartbeat) {\n+        if (isHeartbeat) {\n+            setEvent(HEARTBEAT_EVENT);\n+        }\n+    }\n \n     private static long newId() {\n         // getAndIncrement()\u589e\u957f\u5230MAX_VALUE\u65f6\uff0c\u518d\u589e\u957f\u4f1a\u53d8\u4e3aMIN_VALUE\uff0c\u8d1f\u6570\u4e5f\u53ef\u4ee5\u505a\u4e3aID\n@@ -114,7 +116,18 @@ private static long newId() {\n     @Override\n     public String toString() {\n         return \"Request [id=\" + mId + \", version=\" + mVersion + \", twoway=\" + mTwoWay + \", event=\" + mEvent\n-               + \", broken=\" + mBroken + \", data=\" + (mData == this ? \"this\" : mData) + \"]\";\n+               + \", broken=\" + mBroken + \", data=\" + (mData == this ? \"this\" : safeToString(mData)) + \"]\";\n     }\n \n-}\n\\ No newline at end of file\n+    private static String safeToString(Object data) {\n+        if (data == null) return null;\n+        String dataStr;\n+        try {\n+            dataStr = data.toString();\n+        } catch (Throwable e) {\n+            dataStr = \"<Fail toString of \" + data.getClass() + \", cause: \" +\n+                    StringUtils.toString(e) + \">\";\n+        }\n+        return dataStr;\n+    }\n+}",
      "parent_sha": "e4dea029546efe9e7a6184ad528560e62303ce02"
    }
  },
  {
    "oid": "0b3f1f22573041ae8061bde2d44fd3437ff26c3d",
    "message": "[3.0] mapping report log optimization. (#9828)\n\nfixes #9742",
    "date": "2022-03-23T02:41:46Z",
    "url": "https://github.com/apache/dubbo/commit/0b3f1f22573041ae8061bde2d44fd3437ff26c3d",
    "details": {
      "sha": "2850faa7d3ddffed1bca6c6e570d465708080737",
      "filename": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/MetadataServiceNameMapping.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/dubbo/blob/0b3f1f22573041ae8061bde2d44fd3437ff26c3d/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fclient%2Fmetadata%2FMetadataServiceNameMapping.java",
      "raw_url": "https://github.com/apache/dubbo/raw/0b3f1f22573041ae8061bde2d44fd3437ff26c3d/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fclient%2Fmetadata%2FMetadataServiceNameMapping.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fclient%2Fmetadata%2FMetadataServiceNameMapping.java?ref=0b3f1f22573041ae8061bde2d44fd3437ff26c3d",
      "patch": "@@ -58,11 +58,12 @@ public MetadataServiceNameMapping(ApplicationModel applicationModel) {\n     @Override\n     public boolean map(URL url) {\n         if (CollectionUtils.isEmpty(applicationModel.getApplicationConfigManager().getMetadataConfigs())) {\n+            logger.warn(\"No valid metadata config center found for mapping report.\");\n             return false;\n         }\n         String serviceInterface = url.getServiceInterface();\n         if (IGNORED_SERVICE_INTERFACES.contains(serviceInterface)) {\n-            return false;\n+            return true;\n         }\n \n         boolean result = true;",
      "parent_sha": "6041cc11a0301cabbd627a4aadc0d65267f0d67e"
    }
  },
  {
    "oid": "0b2a8f0396fd0826357caa7c82069261d60d4122",
    "message": "Correct the logger's error statement to info. (#11165)",
    "date": "2022-12-20T14:29:11Z",
    "url": "https://github.com/apache/dubbo/commit/0b2a8f0396fd0826357caa7c82069261d60d4122",
    "details": {
      "sha": "275b4dbd5fc5c8c6d16b7db91b2ef8cb91a39a38",
      "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/resource/GlobalResourcesRepository.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/0b2a8f0396fd0826357caa7c82069261d60d4122/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fresource%2FGlobalResourcesRepository.java",
      "raw_url": "https://github.com/apache/dubbo/raw/0b2a8f0396fd0826357caa7c82069261d60d4122/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fresource%2FGlobalResourcesRepository.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fresource%2FGlobalResourcesRepository.java?ref=0b2a8f0396fd0826357caa7c82069261d60d4122",
      "patch": "@@ -90,7 +90,7 @@ public ExecutorService getExecutorService() {\n             synchronized (this) {\n                 if (executorService == null || executorService.isShutdown()) {\n                     if (logger.isInfoEnabled()) {\n-                        logger.error(\"Creating global shared handler ...\");\n+                        logger.info(\"Creating global shared handler ...\");\n                     }\n                     executorService = Executors.newCachedThreadPool(new NamedThreadFactory(\"Dubbo-global-shared-handler\", true));\n                 }",
      "parent_sha": "e7146d73ad3cae8facd64afc2438a68e526b9c45"
    }
  },
  {
    "oid": "f81c3f3a44d3bd634f4f63fce83b0bcbaae86040",
    "message": "Cache interfaceClass in advance to prevent IndexOutOfBoundsException (#12567)",
    "date": "2023-06-19T10:56:01Z",
    "url": "https://github.com/apache/dubbo/commit/f81c3f3a44d3bd634f4f63fce83b0bcbaae86040",
    "details": {
      "sha": "36e3d3eb59b1383d594a1631177ff47ccb7ae83a",
      "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/dubbo/blob/f81c3f3a44d3bd634f4f63fce83b0bcbaae86040/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fcluster%2Fdirectory%2FStaticDirectory.java",
      "raw_url": "https://github.com/apache/dubbo/raw/f81c3f3a44d3bd634f4f63fce83b0bcbaae86040/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fcluster%2Fdirectory%2FStaticDirectory.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fcluster%2Fdirectory%2FStaticDirectory.java?ref=f81c3f3a44d3bd634f4f63fce83b0bcbaae86040",
      "patch": "@@ -36,6 +36,7 @@\n  */\n public class StaticDirectory<T> extends AbstractDirectory<T> {\n     private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(StaticDirectory.class);\n+    private final Class<T> interfaceClass;\n \n     public StaticDirectory(List<Invoker<T>> invokers) {\n         this(null, invokers, null);\n@@ -55,11 +56,12 @@ public StaticDirectory(URL url, List<Invoker<T>> invokers, RouterChain<T> router\n             throw new IllegalArgumentException(\"invokers == null\");\n         }\n         this.setInvokers(new BitList<>(invokers));\n+        this.interfaceClass = invokers.get(0).getInterface();\n     }\n \n     @Override\n     public Class<T> getInterface() {\n-        return getInvokers().get(0).getInterface();\n+        return interfaceClass;\n     }\n \n     @Override",
      "parent_sha": "33edc4f17084c222368ac97761c07cf0d9d16948"
    }
  },
  {
    "oid": "50b124f6fdb2cfa496501781fa905b200bcb59c5",
    "message": "ignore unstable test test_normal_channel_close_wait_gracefully",
    "date": "2018-07-26T09:30:12Z",
    "url": "https://github.com/apache/dubbo/commit/50b124f6fdb2cfa496501781fa905b200bcb59c5",
    "details": {
      "sha": "892a45d70277f4f36905d005d596bf248c0bfff8",
      "filename": "dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvokerAvilableTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/dubbo/blob/50b124f6fdb2cfa496501781fa905b200bcb59c5/dubbo-rpc%2Fdubbo-rpc-dubbo%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fprotocol%2Fdubbo%2FDubboInvokerAvilableTest.java",
      "raw_url": "https://github.com/apache/dubbo/raw/50b124f6fdb2cfa496501781fa905b200bcb59c5/dubbo-rpc%2Fdubbo-rpc-dubbo%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fprotocol%2Fdubbo%2FDubboInvokerAvilableTest.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc%2Fdubbo-rpc-dubbo%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fprotocol%2Fdubbo%2FDubboInvokerAvilableTest.java?ref=50b124f6fdb2cfa496501781fa905b200bcb59c5",
      "patch": "@@ -29,6 +29,7 @@\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.BeforeClass;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n import java.lang.reflect.Field;\n@@ -77,7 +78,7 @@ public void test_Normal_ChannelReadOnly() throws Exception {\n         getClients(invoker)[0].removeAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY);\n     }\n \n-    @Test\n+    @Ignore\n     public void test_normal_channel_close_wait_gracefully() throws Exception {\n         int testPort = NetUtils.getAvailablePort();\n         URL url = URL.valueOf(\"dubbo://127.0.0.1:\" + testPort + \"/org.apache.dubbo.rpc.protocol.dubbo.IDemoService?scope=true&lazy=false\");",
      "parent_sha": "d0e628eb32e4f38ca10b0148de59ac8c587fceb7"
    }
  },
  {
    "oid": "b8c3e8445524a78fda3e7823893a4ef8415d7fa3",
    "message": "fix issue-2948:spring boot external config invalid (#2950)",
    "date": "2018-12-13T08:49:06Z",
    "url": "https://github.com/apache/dubbo/commit/b8c3e8445524a78fda3e7823893a4ef8415d7fa3",
    "details": {
      "sha": "28d43fc2179501f93974bc8be05a97241c91fdde",
      "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/util/PropertySourcesUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/b8c3e8445524a78fda3e7823893a4ef8415d7fa3/dubbo-config%2Fdubbo-config-spring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2Fspring%2Futil%2FPropertySourcesUtils.java",
      "raw_url": "https://github.com/apache/dubbo/raw/b8c3e8445524a78fda3e7823893a4ef8415d7fa3/dubbo-config%2Fdubbo-config-spring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2Fspring%2Futil%2FPropertySourcesUtils.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config%2Fdubbo-config-spring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2Fspring%2Futil%2FPropertySourcesUtils.java?ref=b8c3e8445524a78fda3e7823893a4ef8415d7fa3",
      "patch": "@@ -55,7 +55,7 @@ public static Map<String, String> getSubProperties(Iterable<PropertySource<?>> p\n                     if (name.startsWith(normalizedPrefix)) {\n                         String subName = name.substring(normalizedPrefix.length());\n                         String value = propertyResolver.getProperty(name);\n-                        subProperties.put(subName, value);\n+                        subProperties.putIfAbsent(subName, value);\n                     }\n                 }\n             }",
      "parent_sha": "227a1699ac041b9e99e31ba3dfcff5d2307ee77b"
    }
  },
  {
    "oid": "7faa3f025e61508079e803af6a909896e3d67d2a",
    "message": "Merge pull request #1391, fix typo of method name in qos module.",
    "date": "2018-02-26T08:23:11Z",
    "url": "https://github.com/apache/dubbo/commit/7faa3f025e61508079e803af6a909896e3d67d2a",
    "details": {
      "sha": "5a9a69b0af3fd437e9fed579bb82ed20565d39ea",
      "filename": "dubbo-plugin/dubbo-qos/src/main/java/com/alibaba/dubbo/qos/command/impl/Ls.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/dubbo/blob/7faa3f025e61508079e803af6a909896e3d67d2a/dubbo-plugin%2Fdubbo-qos%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fqos%2Fcommand%2Fimpl%2FLs.java",
      "raw_url": "https://github.com/apache/dubbo/raw/7faa3f025e61508079e803af6a909896e3d67d2a/dubbo-plugin%2Fdubbo-qos%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fqos%2Fcommand%2Fimpl%2FLs.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-plugin%2Fdubbo-qos%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fqos%2Fcommand%2Fimpl%2FLs.java?ref=7faa3f025e61508079e803af6a909896e3d67d2a",
      "patch": "@@ -37,13 +37,13 @@ public class Ls implements BaseCommand {\n     @Override\n     public String execute(CommandContext commandContext, String[] args) {\n         StringBuilder result = new StringBuilder();\n-        result.append(listProvier());\n+        result.append(listProvider());\n         result.append(listConsumer());\n \n         return result.toString();\n     }\n \n-    public String listProvier() {\n+    public String listProvider() {\n         StringBuilder stringBuilder = new StringBuilder();\n         stringBuilder.append(\"As Provider side:\\n\");\n         Collection<ProviderModel> ProviderModelList = ApplicationModel.allProviderModels();",
      "parent_sha": "d47d22bca7190554ab9ce427aead42287f11e19f"
    }
  },
  {
    "oid": "5dfe6fa771e47cc0c9af2a17f06cb0b5bac29b9e",
    "message": "\u4fee\u6539zookeeper\u5b9e\u73b0\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@68 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2011-10-26T05:17:00Z",
    "url": "https://github.com/apache/dubbo/commit/5dfe6fa771e47cc0c9af2a17f06cb0b5bac29b9e",
    "details": {
      "sha": "ef602366ad2908fda880cdf5727a07b4c88cec6b",
      "filename": "dubbo-registry-zookeeper/src/main/java/com/alibaba/dubbo/registry/zookeeper/ZookeeperRegistry.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/5dfe6fa771e47cc0c9af2a17f06cb0b5bac29b9e/dubbo-registry-zookeeper%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2Fzookeeper%2FZookeeperRegistry.java",
      "raw_url": "https://github.com/apache/dubbo/raw/5dfe6fa771e47cc0c9af2a17f06cb0b5bac29b9e/dubbo-registry-zookeeper%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2Fzookeeper%2FZookeeperRegistry.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry-zookeeper%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2Fzookeeper%2FZookeeperRegistry.java?ref=5dfe6fa771e47cc0c9af2a17f06cb0b5bac29b9e",
      "patch": "@@ -82,7 +82,7 @@ public void register(URL url) {\n         try {\r\n             String service = \"/\" + URL.encode(url.getServiceKey());\r\n             if (zookeeper.exists(service, false) == null) {\r\n-                zookeeper.create(service, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\r\n+                zookeeper.create(service, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\r\n             }\r\n             String provider = service + \"/\" + URL.encode(url.toIdentityString());\r\n             if (zookeeper.exists(provider, false) == null) {\r",
      "parent_sha": "2e9a1b4f852293370535c15b1e0dc48ca3562a51"
    }
  },
  {
    "oid": "a894213c7e7fa17f3c10fba7f7171c12521fc6a1",
    "message": "check null for path before call rest server (#3665)",
    "date": "2019-03-15T07:48:15Z",
    "url": "https://github.com/apache/dubbo/commit/a894213c7e7fa17f3c10fba7f7171c12521fc6a1",
    "details": {
      "sha": "6265254d4c6f69f60fc2d521cd3311a6d4ca5f2c",
      "filename": "dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/apache/dubbo/blob/a894213c7e7fa17f3c10fba7f7171c12521fc6a1/dubbo-rpc%2Fdubbo-rpc-rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fprotocol%2Frest%2FRestProtocol.java",
      "raw_url": "https://github.com/apache/dubbo/raw/a894213c7e7fa17f3c10fba7f7171c12521fc6a1/dubbo-rpc%2Fdubbo-rpc-rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fprotocol%2Frest%2FRestProtocol.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc%2Fdubbo-rpc-rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fprotocol%2Frest%2FRestProtocol.java?ref=a894213c7e7fa17f3c10fba7f7171c12521fc6a1",
      "patch": "@@ -237,13 +237,17 @@ public void destroy() {\n      */\n     protected String getContextPath(URL url) {\n         String contextPath = url.getPath();\n-        if (contextPath.equalsIgnoreCase(url.getParameter(Constants.INTERFACE_KEY))) {\n+        if (contextPath != null) {\n+            if (contextPath.equalsIgnoreCase(url.getParameter(Constants.INTERFACE_KEY))) {\n+                return \"\";\n+            }\n+            if (contextPath.endsWith(url.getParameter(Constants.INTERFACE_KEY))) {\n+                contextPath = contextPath.substring(0, contextPath.lastIndexOf(url.getParameter(Constants.INTERFACE_KEY)));\n+            }\n+            return contextPath.endsWith(\"/\") ? contextPath.substring(0, contextPath.length() - 1) : contextPath;\n+        } else {\n             return \"\";\n         }\n-        if (contextPath.endsWith(url.getParameter(Constants.INTERFACE_KEY))) {\n-            contextPath = contextPath.substring(0, contextPath.lastIndexOf(url.getParameter(Constants.INTERFACE_KEY)));\n-        }\n-        return contextPath.endsWith(\"/\") ? contextPath.substring(0, contextPath.length() - 1) : contextPath;\n     }\n \n     protected class ConnectionMonitor extends Thread {",
      "parent_sha": "b0c713384333c3e49cde3c08df7550a5f49a961e"
    }
  },
  {
    "oid": "a1d05505086ee1a937a552f7831e1445dd26f9d7",
    "message": "Update DubboConfigBindingBeanPostProcessor.java (#4778)\n\n\u4fee\u590d https://github.com/apache/dubbo/issues/4772",
    "date": "2019-08-10T12:22:03Z",
    "url": "https://github.com/apache/dubbo/commit/a1d05505086ee1a937a552f7831e1445dd26f9d7",
    "details": {
      "sha": "64327b72b702d30be6c7a775c93675cdf8510e10",
      "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/DubboConfigBindingBeanPostProcessor.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/dubbo/blob/a1d05505086ee1a937a552f7831e1445dd26f9d7/dubbo-config%2Fdubbo-config-spring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2Fspring%2Fbeans%2Ffactory%2Fannotation%2FDubboConfigBindingBeanPostProcessor.java",
      "raw_url": "https://github.com/apache/dubbo/raw/a1d05505086ee1a937a552f7831e1445dd26f9d7/dubbo-config%2Fdubbo-config-spring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2Fspring%2Fbeans%2Ffactory%2Fannotation%2FDubboConfigBindingBeanPostProcessor.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config%2Fdubbo-config-spring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2Fspring%2Fbeans%2Ffactory%2Fannotation%2FDubboConfigBindingBeanPostProcessor.java?ref=a1d05505086ee1a937a552f7831e1445dd26f9d7",
      "patch": "@@ -87,7 +87,7 @@ public DubboConfigBindingBeanPostProcessor(String prefix, String beanName) {\n     @Override\n     public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n \n-        if (beanName.equals(this.beanName) && bean instanceof AbstractConfig) {\n+        if (this.beanName.equals(beanName) && bean instanceof AbstractConfig) {\n \n             AbstractConfig dubboConfig = (AbstractConfig) bean;\n \n@@ -203,4 +203,4 @@ protected DubboConfigBinder createDubboConfigBinder(Environment environment) {\n         return defaultDubboConfigBinder;\n     }\n \n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "165d975dec620516768832e883b99bd3ce87d17a"
    }
  },
  {
    "oid": "5de8a78598fea47fd2699b377a4881d4eb7d8c14",
    "message": "Fix State Router Throw Exception when Address is Empty (#8951)",
    "date": "2021-09-30T01:53:21Z",
    "url": "https://github.com/apache/dubbo/commit/5de8a78598fea47fd2699b377a4881d4eb7d8c14",
    "details": {
      "sha": "dc09a33a788300b2fa5820563a34fde143b9672e",
      "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
      "status": "modified",
      "additions": 14,
      "deletions": 20,
      "changes": 34,
      "blob_url": "https://github.com/apache/dubbo/blob/5de8a78598fea47fd2699b377a4881d4eb7d8c14/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fcluster%2FRouterChain.java",
      "raw_url": "https://github.com/apache/dubbo/raw/5de8a78598fea47fd2699b377a4881d4eb7d8c14/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fcluster%2FRouterChain.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fcluster%2FRouterChain.java?ref=5de8a78598fea47fd2699b377a4881d4eb7d8c14",
      "patch": "@@ -17,15 +17,12 @@\n package org.apache.dubbo.rpc.cluster;\n \n import org.apache.dubbo.common.URL;\n-import org.apache.dubbo.common.Version;\n import org.apache.dubbo.common.logger.Logger;\n import org.apache.dubbo.common.logger.LoggerFactory;\n import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;\n import org.apache.dubbo.common.utils.CollectionUtils;\n-import org.apache.dubbo.common.utils.NetUtils;\n import org.apache.dubbo.rpc.Invocation;\n import org.apache.dubbo.rpc.Invoker;\n-import org.apache.dubbo.rpc.RpcException;\n import org.apache.dubbo.rpc.cluster.router.state.AddrCache;\n import org.apache.dubbo.rpc.cluster.router.state.BitList;\n import org.apache.dubbo.rpc.cluster.router.state.RouterCache;\n@@ -169,26 +166,23 @@ public List<StateRouter> getStateRouters() {\n     public List<Invoker<T>> route(URL url, Invocation invocation) {\n \n         AddrCache<T> cache = this.cache.get();\n-        if (cache == null) {\n-            throw new RpcException(RpcException.ROUTER_CACHE_NOT_BUILD, \"Failed to invoke the method \"\n-                + invocation.getMethodName() + \" in the service \" + url.getServiceInterface()\n-                + \". address cache not build \"\n-                + \" on the consumer \" + NetUtils.getLocalHost()\n-                + \" using the dubbo version \" + Version.getVersion()\n-                + \".\");\n-        }\n-        BitList<Invoker<T>> finalBitListInvokers = new BitList<>(invokers, false);\n-        for (StateRouter stateRouter : stateRouters) {\n-            if (stateRouter.isEnable()) {\n-                RouterCache<T> routerCache = cache.getCache().get(stateRouter.getName());\n-                finalBitListInvokers = stateRouter.route(finalBitListInvokers, routerCache, url, invocation);\n+        List<Invoker<T>> finalInvokers = null;\n+\n+        if (cache != null) {\n+            BitList<Invoker<T>> finalBitListInvokers = new BitList<>(invokers, false);\n+            for (StateRouter stateRouter : stateRouters) {\n+                if (stateRouter.isEnable()) {\n+                    RouterCache<T> routerCache = cache.getCache().get(stateRouter.getName());\n+                    finalBitListInvokers = stateRouter.route(finalBitListInvokers, routerCache, url, invocation);\n+                }\n             }\n-        }\n+            finalInvokers = new ArrayList<>(finalBitListInvokers.size());\n \n-        List<Invoker<T>> finalInvokers = new ArrayList<>(finalBitListInvokers.size());\n+            finalInvokers.addAll(finalBitListInvokers);\n+        }\n \n-        for(Invoker<T> invoker: finalBitListInvokers) {\n-            finalInvokers.add(invoker);\n+        if (finalInvokers == null) {\n+            finalInvokers = new ArrayList<>(invokers);\n         }\n \n         for (Router router : routers) {",
      "parent_sha": "401e6ebbadeb0cfef1da767e57d4745054527908"
    }
  },
  {
    "oid": "18357d68559abf8557da42ab3c73e8add60161ef",
    "message": "1. remove getExecutorService method cexecutor local variables (#4319)",
    "date": "2019-07-17T07:34:04Z",
    "url": "https://github.com/apache/dubbo/commit/18357d68559abf8557da42ab3c73e8add60161ef",
    "details": {
      "sha": "cdf020a9eb2775c32417c807011bf61c485e015e",
      "filename": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/dispatcher/WrappedChannelHandler.java",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/apache/dubbo/blob/18357d68559abf8557da42ab3c73e8add60161ef/dubbo-remoting%2Fdubbo-remoting-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fremoting%2Ftransport%2Fdispatcher%2FWrappedChannelHandler.java",
      "raw_url": "https://github.com/apache/dubbo/raw/18357d68559abf8557da42ab3c73e8add60161ef/dubbo-remoting%2Fdubbo-remoting-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fremoting%2Ftransport%2Fdispatcher%2FWrappedChannelHandler.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting%2Fdubbo-remoting-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fremoting%2Ftransport%2Fdispatcher%2FWrappedChannelHandler.java?ref=18357d68559abf8557da42ab3c73e8add60161ef",
      "patch": "@@ -113,11 +113,8 @@ public URL getUrl() {\n     }\n \n     public ExecutorService getExecutorService() {\n-        ExecutorService cexecutor = executor;\n-        if (cexecutor == null || cexecutor.isShutdown()) {\n-            cexecutor = SHARED_EXECUTOR;\n-        }\n-        return cexecutor;\n+        return executor == null || executor.isShutdown() ? SHARED_EXECUTOR : executor;\n     }\n \n+\n }",
      "parent_sha": "5c88dcb229d3de614dc8b508168bbbff1e5ab7f6"
    }
  },
  {
    "oid": "feceeca631106803d767945a9b05e07b69541f4d",
    "message": "NPE will occur when consumer lazy init and the consumer thread contextClassLoader is null (#14478)\n\n* hessian2 readObject NPE bugfix\r\n\r\n* format the code\r\n\r\n---------\r\n\r\nCo-authored-by: wiam <xiaqh@tuya.com>",
    "date": "2024-08-02T05:32:18Z",
    "url": "https://github.com/apache/dubbo/commit/feceeca631106803d767945a9b05e07b69541f4d",
    "details": {
      "sha": "8bb224d5452e6a080c78f5cc47a9f8dbbc87195f",
      "filename": "dubbo-serialization/dubbo-serialization-hessian2/src/main/java/org/apache/dubbo/common/serialize/hessian2/Hessian2ObjectInput.java",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/apache/dubbo/blob/feceeca631106803d767945a9b05e07b69541f4d/dubbo-serialization%2Fdubbo-serialization-hessian2%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fserialize%2Fhessian2%2FHessian2ObjectInput.java",
      "raw_url": "https://github.com/apache/dubbo/raw/feceeca631106803d767945a9b05e07b69541f4d/dubbo-serialization%2Fdubbo-serialization-hessian2%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fserialize%2Fhessian2%2FHessian2ObjectInput.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-serialization%2Fdubbo-serialization-hessian2%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fserialize%2Fhessian2%2FHessian2ObjectInput.java?ref=feceeca631106803d767945a9b05e07b69541f4d",
      "patch": "@@ -23,6 +23,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.lang.reflect.Type;\n+import java.util.Objects;\n \n import com.alibaba.com.caucho.hessian.io.Hessian2Input;\n \n@@ -96,9 +97,9 @@ public String readUTF() throws IOException {\n \n     @Override\n     public Object readObject() throws IOException {\n-        if (!mH2i.getSerializerFactory()\n-                .getClassLoader()\n-                .equals(Thread.currentThread().getContextClassLoader())) {\n+        if (!Objects.equals(\n+                mH2i.getSerializerFactory().getClassLoader(),\n+                Thread.currentThread().getContextClassLoader())) {\n             mH2i.setSerializerFactory(hessian2FactoryManager.getSerializerFactory(\n                     Thread.currentThread().getContextClassLoader()));\n         }\n@@ -108,9 +109,9 @@ public Object readObject() throws IOException {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T> T readObject(Class<T> cls) throws IOException, ClassNotFoundException {\n-        if (!mH2i.getSerializerFactory()\n-                .getClassLoader()\n-                .equals(Thread.currentThread().getContextClassLoader())) {\n+        if (!Objects.equals(\n+                mH2i.getSerializerFactory().getClassLoader(),\n+                Thread.currentThread().getContextClassLoader())) {\n             mH2i.setSerializerFactory(hessian2FactoryManager.getSerializerFactory(\n                     Thread.currentThread().getContextClassLoader()));\n         }\n@@ -119,9 +120,9 @@ public <T> T readObject(Class<T> cls) throws IOException, ClassNotFoundException\n \n     @Override\n     public <T> T readObject(Class<T> cls, Type type) throws IOException, ClassNotFoundException {\n-        if (!mH2i.getSerializerFactory()\n-                .getClassLoader()\n-                .equals(Thread.currentThread().getContextClassLoader())) {\n+        if (!Objects.equals(\n+                mH2i.getSerializerFactory().getClassLoader(),\n+                Thread.currentThread().getContextClassLoader())) {\n             mH2i.setSerializerFactory(hessian2FactoryManager.getSerializerFactory(\n                     Thread.currentThread().getContextClassLoader()));\n         }",
      "parent_sha": "cec1643ce37ae13b7f95709f07e2a818398f1eb3"
    }
  },
  {
    "oid": "761db2cfed2d506b390e5f7b86d405073871e4f2",
    "message": "DUBBO-354 API\u65b9\u5f0f\u6307\u5b9a\u65b9\u6cd5\u8c03\u7528\u4e3a\u5f02\u6b65\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@1642 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2012-05-07T02:28:27Z",
    "url": "https://github.com/apache/dubbo/commit/761db2cfed2d506b390e5f7b86d405073871e4f2",
    "details": {
      "sha": "92eb8392a296750c8766c1cb9047e3e673a1c420",
      "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/support/RpcUtils.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/761db2cfed2d506b390e5f7b86d405073871e4f2/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fsupport%2FRpcUtils.java",
      "raw_url": "https://github.com/apache/dubbo/raw/761db2cfed2d506b390e5f7b86d405073871e4f2/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fsupport%2FRpcUtils.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fsupport%2FRpcUtils.java?ref=761db2cfed2d506b390e5f7b86d405073871e4f2",
      "patch": "@@ -101,7 +101,7 @@ private static boolean isAttachInvocationId(URL url , Invocation invocation) {\n     \tString value = url.getMethodParameter(invocation.getMethodName(), Constants.AUTO_ATTACH_INVOCATIONID_KEY);\r\n     \tif ( value == null ) {\r\n     \t\t//\u5f02\u6b65\u64cd\u4f5c\u9ed8\u8ba4\u6dfb\u52a0invocationid\r\n-    \t\treturn url.getMethodParameter(invocation.getMethodName(), Constants.ASYNC_KEY, false);\r\n+    \t\treturn isAsync(url,invocation) ;\r\n     \t} else if (Boolean.TRUE.toString().equalsIgnoreCase(value)) {\r\n     \t\t//\u8bbe\u7f6e\u4e3a\u6dfb\u52a0\uff0c\u5219\u4e00\u5b9a\u6dfb\u52a0\r\n     \t\treturn true;\r",
      "parent_sha": "0d4d61854d6bcddadeb6dadd25e28bc9c7e00224"
    }
  },
  {
    "oid": "108fe0f72f57a4e137c5203e293dc05d7a90d4dd",
    "message": "Fixes #1289, use bind_port as mapping key",
    "date": "2018-02-05T07:19:22Z",
    "url": "https://github.com/apache/dubbo/commit/108fe0f72f57a4e137c5203e293dc05d7a90d4dd",
    "details": {
      "sha": "1dc01faa13a809a758491ccc8426d612a41450ed",
      "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/protocol/AbstractProtocol.java",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/apache/dubbo/blob/108fe0f72f57a4e137c5203e293dc05d7a90d4dd/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2FAbstractProtocol.java",
      "raw_url": "https://github.com/apache/dubbo/raw/108fe0f72f57a4e137c5203e293dc05d7a90d4dd/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2FAbstractProtocol.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2FAbstractProtocol.java?ref=108fe0f72f57a4e137c5203e293dc05d7a90d4dd",
      "patch": "@@ -16,6 +16,7 @@\n  */\n package com.alibaba.dubbo.rpc.protocol;\n \n+import com.alibaba.dubbo.common.Constants;\n import com.alibaba.dubbo.common.URL;\n import com.alibaba.dubbo.common.logger.Logger;\n import com.alibaba.dubbo.common.logger.LoggerFactory;\n@@ -43,7 +44,9 @@ public abstract class AbstractProtocol implements Protocol {\n     protected final Set<Invoker<?>> invokers = new ConcurrentHashSet<Invoker<?>>();\n \n     protected static String serviceKey(URL url) {\n-        return ProtocolUtils.serviceKey(url);\n+        int port = url.getParameter(Constants.BIND_PORT_KEY, url.getPort());\n+        return serviceKey(port, url.getPath(), url.getParameter(Constants.VERSION_KEY),\n+                url.getParameter(Constants.GROUP_KEY));\n     }\n \n     protected static String serviceKey(int port, String serviceName, String serviceVersion, String serviceGroup) {",
      "parent_sha": "c74ec13e2741d85ea66f43239c19b0103b7938f0"
    }
  },
  {
    "oid": "0ae2ccc99c7a185ff873f6832ad22f99ed87b389",
    "message": "optimization MigrationInvoker promotion (#9270) (#9271)",
    "date": "2021-11-18T12:27:22Z",
    "url": "https://github.com/apache/dubbo/commit/0ae2ccc99c7a185ff873f6832ad22f99ed87b389",
    "details": {
      "sha": "6a72c521f13ff8fce54fe2fb3569036e5eaa59b6",
      "filename": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/MigrationInvoker.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/0ae2ccc99c7a185ff873f6832ad22f99ed87b389/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fclient%2Fmigration%2FMigrationInvoker.java",
      "raw_url": "https://github.com/apache/dubbo/raw/0ae2ccc99c7a185ff873f6832ad22f99ed87b389/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fclient%2Fmigration%2FMigrationInvoker.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fclient%2Fmigration%2FMigrationInvoker.java?ref=0ae2ccc99c7a185ff873f6832ad22f99ed87b389",
      "patch": "@@ -269,7 +269,7 @@ public Result invoke(Invocation invocation) throws RpcException {\n         if (currentAvailableInvoker != null) {\n             if (step == APPLICATION_FIRST) {\n                 // call ratio calculation based on random value\n-                if (ThreadLocalRandom.current().nextDouble(100) > promotion) {\n+                if (promotion < 100 && ThreadLocalRandom.current().nextDouble(100) > promotion) {\n                     return invoker.invoke(invocation);\n                 }\n             }",
      "parent_sha": "a1742da837d41366036afab5ae5a962eaf6de97c"
    }
  },
  {
    "oid": "9ca9bb04b926ba33c6755aff8373314e60f2be89",
    "message": "Fix typo #1260",
    "date": "2018-01-25T11:24:48Z",
    "url": "https://github.com/apache/dubbo/commit/9ca9bb04b926ba33c6755aff8373314e60f2be89",
    "details": {
      "sha": "791feea3d17593c6518e61a849c3eeb95852ccec",
      "filename": "dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ReferenceConfig.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apache/dubbo/blob/9ca9bb04b926ba33c6755aff8373314e60f2be89/dubbo-config%2Fdubbo-config-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fconfig%2FReferenceConfig.java",
      "raw_url": "https://github.com/apache/dubbo/raw/9ca9bb04b926ba33c6755aff8373314e60f2be89/dubbo-config%2Fdubbo-config-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fconfig%2FReferenceConfig.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config%2Fdubbo-config-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fconfig%2FReferenceConfig.java?ref=9ca9bb04b926ba33c6755aff8373314e60f2be89",
      "patch": "@@ -304,7 +304,7 @@ private void init() {\n         appendParameters(map, module);\r\n         appendParameters(map, consumer, Constants.DEFAULT_KEY);\r\n         appendParameters(map, this);\r\n-        String prifix = StringUtils.getServiceKey(map);\r\n+        String prefix = StringUtils.getServiceKey(map);\r\n         if (methods != null && methods.size() > 0) {\r\n             for (MethodConfig method : methods) {\r\n                 appendParameters(map, method, method.getName());\r\n@@ -315,7 +315,7 @@ private void init() {\n                         map.put(method.getName() + \".retries\", \"0\");\r\n                     }\r\n                 }\r\n-                appendAttributes(attributes, method, prifix + \".\" + method.getName());\r\n+                appendAttributes(attributes, method, prefix + \".\" + method.getName());\r\n                 checkAndConvertImplicitConfig(method, map, attributes);\r\n             }\r\n         }\r\n@@ -473,7 +473,7 @@ public void setInterface(Class<?> interfaceClass) {\n             throw new IllegalStateException(\"The interface class \" + interfaceClass + \" is not a interface!\");\r\n         }\r\n         this.interfaceClass = interfaceClass;\r\n-        setInterface(interfaceClass == null ? (String) null : interfaceClass.getName());\r\n+        setInterface(interfaceClass == null ? null : interfaceClass.getName());\r\n     }\r\n \r\n     public void setInterface(String interfaceName) {\r",
      "parent_sha": "2f7f91ceff52ae885b68aff59a8fde5173b2aff3"
    }
  },
  {
    "oid": "e6a6ba890db6e3be9751abaedb6631fbc3e9a443",
    "message": "style: Eliminate some IDE warnings (#10626)",
    "date": "2022-09-16T03:29:30Z",
    "url": "https://github.com/apache/dubbo/commit/e6a6ba890db6e3be9751abaedb6631fbc3e9a443",
    "details": {
      "sha": "9d73843279f043b4c29dd2b24ae9d582a8f51eb1",
      "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/beans/support/InstantiationStrategy.java",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/apache/dubbo/blob/e6a6ba890db6e3be9751abaedb6631fbc3e9a443/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fbeans%2Fsupport%2FInstantiationStrategy.java",
      "raw_url": "https://github.com/apache/dubbo/raw/e6a6ba890db6e3be9751abaedb6631fbc3e9a443/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fbeans%2Fsupport%2FInstantiationStrategy.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fbeans%2Fsupport%2FInstantiationStrategy.java?ref=e6a6ba890db6e3be9751abaedb6631fbc3e9a443",
      "patch": "@@ -33,7 +33,7 @@\n  */\n public class InstantiationStrategy {\n \n-    private ScopeModelAccessor scopeModelAccessor;\n+    private final ScopeModelAccessor scopeModelAccessor;\n \n     public InstantiationStrategy() {\n         this(null);\n@@ -43,6 +43,7 @@ public InstantiationStrategy(ScopeModelAccessor scopeModelAccessor) {\n         this.scopeModelAccessor = scopeModelAccessor;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public <T> T instantiate(Class<T> type) throws ReflectiveOperationException {\n \n         // should not use default constructor directly, maybe also has another constructor matched scope model arguments\n@@ -55,7 +56,7 @@ public <T> T instantiate(Class<T> type) throws ReflectiveOperationException {\n         }\n \n         // 2. use matched constructor if found\n-        List<Constructor> matchedConstructors = new ArrayList<>();\n+        List<Constructor<?>> matchedConstructors = new ArrayList<>();\n         Constructor<?>[] declaredConstructors = type.getConstructors();\n         for (Constructor<?> constructor : declaredConstructors) {\n             if (isMatched(constructor)) {\n@@ -71,7 +72,7 @@ public <T> T instantiate(Class<T> type) throws ReflectiveOperationException {\n         // 1. the only matched constructor with parameters\n         // 2. default constructor if absent\n \n-        Constructor targetConstructor;\n+        Constructor<?> targetConstructor;\n         if (matchedConstructors.size() > 1) {\n             throw new IllegalArgumentException(\"Expect only one but found \" +\n                 matchedConstructors.size() + \" matched constructors for type: \" + type.getName() +\n@@ -85,7 +86,7 @@ public <T> T instantiate(Class<T> type) throws ReflectiveOperationException {\n         }\n \n         // create instance with arguments\n-        Class[] parameterTypes = targetConstructor.getParameterTypes();\n+        Class<?>[] parameterTypes = targetConstructor.getParameterTypes();\n         Object[] args = new Object[parameterTypes.length];\n         for (int i = 0; i < parameterTypes.length; i++) {\n             args[i] = getArgumentValueForType(parameterTypes[i]);\n@@ -106,7 +107,7 @@ private boolean isSupportedConstructorParameterType(Class<?> parameterType) {\n         return ScopeModel.class.isAssignableFrom(parameterType);\n     }\n \n-    private Object getArgumentValueForType(Class parameterType) {\n+    private Object getArgumentValueForType(Class<?> parameterType) {\n         // get scope mode value\n         if (scopeModelAccessor != null) {\n             if (parameterType == ScopeModel.class) {",
      "parent_sha": "da5b3559b1576da5d5e41bd8402514e1057cf81d"
    }
  },
  {
    "oid": "64465e22109fb06dc53c8cc543e70e483960024e",
    "message": "DUBBO-400 \u4fee\u6539redis\u534f\u8bae\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@1824 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2012-05-18T11:47:34Z",
    "url": "https://github.com/apache/dubbo/commit/64465e22109fb06dc53c8cc543e70e483960024e",
    "details": {
      "sha": "c51d56576efba6de510f084b8ffa78340f2b2889",
      "filename": "dubbo-rpc/dubbo-rpc-redis/src/main/java/com/alibaba/dubbo/rpc/protocol/redis/RedisProtocol.java",
      "status": "modified",
      "additions": 15,
      "deletions": 3,
      "changes": 18,
      "blob_url": "https://github.com/apache/dubbo/blob/64465e22109fb06dc53c8cc543e70e483960024e/dubbo-rpc%2Fdubbo-rpc-redis%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fredis%2FRedisProtocol.java",
      "raw_url": "https://github.com/apache/dubbo/raw/64465e22109fb06dc53c8cc543e70e483960024e/dubbo-rpc%2Fdubbo-rpc-redis%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fredis%2FRedisProtocol.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc%2Fdubbo-rpc-redis%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fredis%2FRedisProtocol.java?ref=64465e22109fb06dc53c8cc543e70e483960024e",
      "patch": "@@ -15,6 +15,7 @@\n  */\r\n package com.alibaba.dubbo.rpc.protocol.redis;\r\n \r\n+import java.io.ByteArrayInputStream;\r\n import java.io.ByteArrayOutputStream;\r\n import java.io.IOException;\r\n import java.net.SocketTimeoutException;\r\n@@ -30,6 +31,8 @@\n import com.alibaba.dubbo.common.Constants;\r\n import com.alibaba.dubbo.common.URL;\r\n import com.alibaba.dubbo.common.extension.ExtensionLoader;\r\n+import com.alibaba.dubbo.common.serialize.ObjectInput;\r\n+import com.alibaba.dubbo.common.serialize.ObjectOutput;\r\n import com.alibaba.dubbo.common.serialize.Serialization;\r\n import com.alibaba.dubbo.rpc.Exporter;\r\n import com.alibaba.dubbo.rpc.Invocation;\r\n@@ -40,6 +43,7 @@\n import com.alibaba.dubbo.rpc.protocol.AbstractInvoker;\r\n import com.alibaba.dubbo.rpc.protocol.AbstractProtocol;\r\n \r\n+\r\n /**\r\n  * RedisProtocol\r\n  * \r\n@@ -56,6 +60,10 @@ public int getDefaultPort() {\n     public <T> Exporter<T> export(final Invoker<T> invoker) throws RpcException {\r\n         throw new UnsupportedOperationException(\"Unsupported export redis service. url: \" + invoker.getUrl());\r\n     }\r\n+    \r\n+    private Serialization getSerialization(URL url) {\r\n+        return ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(url.getParameter(Constants.SERIALIZATION_KEY, \"java\"));\r\n+    }\r\n \r\n     public <T> Invoker<T> refer(final Class<T> type, final URL url) throws RpcException {\r\n         try {\r\n@@ -90,15 +98,19 @@ protected Result doInvoke(Invocation invocation) throws Throwable {\n                             if (invocation.getArguments().length != 1) {\r\n                                 throw new IllegalArgumentException(\"The redis get method arguments mismatch, must only one arguments. interface: \" + type.getName() + \", method: \" + invocation.getMethodName() + \", url: \" + url);\r\n                             }\r\n-                            return new RpcResult(jedisPool.getResource().get(String.valueOf(invocation.getArguments()[0]).getBytes()));\r\n+                            byte[] value = jedisPool.getResource().get(String.valueOf(invocation.getArguments()[0]).getBytes());\r\n+                            if (value == null) {\r\n+                                return new RpcResult();\r\n+                            }\r\n+                            ObjectInput oin = getSerialization(url).deserialize(url, new ByteArrayInputStream(value));\r\n+                            return new RpcResult(oin.readObject());\r\n                         } else if (set.equals(invocation.getMethodName())) {\r\n                             if (invocation.getArguments().length != 2) {\r\n                                 throw new IllegalArgumentException(\"The redis set method arguments mismatch, must be two arguments. interface: \" + type.getName() + \", method: \" + invocation.getMethodName() + \", url: \" + url);\r\n                             }\r\n                             byte[] key = String.valueOf(invocation.getArguments()[0]).getBytes();\r\n                             ByteArrayOutputStream output = new ByteArrayOutputStream();\r\n-                            Serialization serialization = ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(url.getParameter(Constants.SERIALIZATION_KEY, \"java\"));\r\n-                            com.alibaba.dubbo.common.serialize.ObjectOutput value = serialization.serialize(url, output);\r\n+                            ObjectOutput value = getSerialization(url).serialize(url, output);\r\n                             value.writeObject(invocation.getArguments()[1]);\r\n                             jedisPool.getResource().set(key, output.toByteArray());\r\n                             if (expiry > 1000) {\r",
      "parent_sha": "96993cea95b7807532978126a3ae8a52ee27a9b6"
    }
  },
  {
    "oid": "940e3553b0b94c1df23b79a2f523293251b20d6f",
    "message": "fix name (#2189)",
    "date": "2018-08-06T06:19:57Z",
    "url": "https://github.com/apache/dubbo/commit/940e3553b0b94c1df23b79a2f523293251b20d6f",
    "details": {
      "sha": "52f581127749d7b45aad609b6803a27ac835a30d",
      "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apache/dubbo/blob/940e3553b0b94c1df23b79a2f523293251b20d6f/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fcluster%2Fdirectory%2FAbstractDirectory.java",
      "raw_url": "https://github.com/apache/dubbo/raw/940e3553b0b94c1df23b79a2f523293251b20d6f/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fcluster%2Fdirectory%2FAbstractDirectory.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fcluster%2Fdirectory%2FAbstractDirectory.java?ref=940e3553b0b94c1df23b79a2f523293251b20d6f",
      "patch": "@@ -100,9 +100,9 @@ protected void setRouters(List<Router> routers) {\n         // copy list\n         routers = routers == null ? new ArrayList<Router>() : new ArrayList<Router>(routers);\n         // append url router\n-        String routerkey = url.getParameter(Constants.ROUTER_KEY);\n-        if (routerkey != null && routerkey.length() > 0) {\n-            RouterFactory routerFactory = ExtensionLoader.getExtensionLoader(RouterFactory.class).getExtension(routerkey);\n+        String routerKey = url.getParameter(Constants.ROUTER_KEY);\n+        if (routerKey != null && routerKey.length() > 0) {\n+            RouterFactory routerFactory = ExtensionLoader.getExtensionLoader(RouterFactory.class).getExtension(routerKey);\n             routers.add(routerFactory.getRouter(url));\n         }\n         // append mock invoker selector",
      "parent_sha": "5de6c76f063195dabd037601c158c533d0356582"
    }
  },
  {
    "oid": "fcfb71b80e109648d23fc3d59633cf75737bc17f",
    "message": "\u4fee\u6539Main\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@460 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2011-11-30T08:44:30Z",
    "url": "https://github.com/apache/dubbo/commit/fcfb71b80e109648d23fc3d59633cf75737bc17f",
    "details": {
      "sha": "c92fcd95354bf0629ff41a2a7154453acae3b8ec",
      "filename": "dubbo-container/src/main/java/com/alibaba/dubbo/container/Main.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/apache/dubbo/blob/fcfb71b80e109648d23fc3d59633cf75737bc17f/dubbo-container%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcontainer%2FMain.java",
      "raw_url": "https://github.com/apache/dubbo/raw/fcfb71b80e109648d23fc3d59633cf75737bc17f/dubbo-container%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcontainer%2FMain.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-container%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcontainer%2FMain.java?ref=fcfb71b80e109648d23fc3d59633cf75737bc17f",
      "patch": "@@ -32,7 +32,7 @@ public class Main {\n \r\n     private static final Logger logger    = LoggerFactory.getLogger(Main.class);\r\n \r\n-    public static void main(String[] args) throws Throwable {\r\n+    public static void main(String[] args) {\r\n         try {\r\n             ExtensionLoader<Container> loader = ExtensionLoader.getExtensionLoader(Container.class);\r\n             final Container[] containers;\r\n@@ -64,10 +64,10 @@ public void run() {\n                 logger.info(\"Dubbo \" + container.getClass().getSimpleName() + \" started!\");\r\n             }\r\n             System.out.println(new SimpleDateFormat(\"[yyyy-MM-dd HH:mm:ss]\").format(new Date()) + \" Dubbo service server started!\");\r\n-        } catch (Throwable t) {\r\n-            t.printStackTrace();\r\n-            logger.error(t.getMessage(), t);\r\n-            throw t;\r\n+        } catch (RuntimeException e) {\r\n+            e.printStackTrace();\r\n+            logger.error(e.getMessage(), e);\r\n+            throw e;\r\n         }\r\n         synchronized (Main.class) {\r\n             for (;;) {\r",
      "parent_sha": "9f5fbef168b165bd7721e9160e2f8a61b86d1f44"
    }
  },
  {
    "oid": "2f099bddd19b2cd887c15ee0ac2cba98cda837bf",
    "message": "Compact with filed change declaration override for Javaassist (#8434)\n\n* Compact with filed change declaration override for Javaassist\r\n\r\n* skip final field",
    "date": "2021-08-06T10:36:10Z",
    "url": "https://github.com/apache/dubbo/commit/2f099bddd19b2cd887c15ee0ac2cba98cda837bf",
    "details": {
      "sha": "37ff70c194a09153e6de49251e2948365f4b2fca",
      "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/apache/dubbo/blob/2f099bddd19b2cd887c15ee0ac2cba98cda837bf/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fbytecode%2FWrapper.java",
      "raw_url": "https://github.com/apache/dubbo/raw/2f099bddd19b2cd887c15ee0ac2cba98cda837bf/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fbytecode%2FWrapper.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Fbytecode%2FWrapper.java?ref=2f099bddd19b2cd887c15ee0ac2cba98cda837bf",
      "patch": "@@ -146,12 +146,12 @@ private static Wrapper makeWrapper(Class<?> c) {\n         for (Field f : c.getFields()) {\n             String fn = f.getName();\n             Class<?> ft = f.getType();\n-            if (Modifier.isStatic(f.getModifiers()) || Modifier.isTransient(f.getModifiers())) {\n+            if (Modifier.isStatic(f.getModifiers()) || Modifier.isTransient(f.getModifiers()) || Modifier.isFinal(f.getModifiers())) {\n                 continue;\n             }\n \n-            c1.append(\" if( $2.equals(\\\"\").append(fn).append(\"\\\") ){ w.\").append(fn).append('=').append(arg(ft, \"$3\")).append(\"; return; }\");\n-            c2.append(\" if( $2.equals(\\\"\").append(fn).append(\"\\\") ){ return ($w)w.\").append(fn).append(\"; }\");\n+            c1.append(\" if( $2.equals(\\\"\").append(fn).append(\"\\\") ){ ((\" + f.getDeclaringClass().getName() + \")w).\").append(fn).append('=').append(arg(ft, \"$3\")).append(\"; return; }\");\n+            c2.append(\" if( $2.equals(\\\"\").append(fn).append(\"\\\") ){ return ($w)((\" + f.getDeclaringClass().getName() + \")w).\").append(fn).append(\"; }\");\n             pts.put(fn, ft);\n         }\n ",
      "parent_sha": "75443e1c8e842c2ce700e7dd4d01a16921edd278"
    }
  },
  {
    "oid": "505178dc7787a63b722eb669932c45e28a69e25e",
    "message": "DUBBO-791 \u8f6c\u6362\u6210\u9ad8\u5c42\u5f02\u5e38\u65f6\uff0c\u52a0\u4e0a\u9ad8\u5c42\u7684\u4fe1\u606f\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@221 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2011-11-09T12:50:57Z",
    "url": "https://github.com/apache/dubbo/commit/505178dc7787a63b722eb669932c45e28a69e25e",
    "details": {
      "sha": "401d34742668209b245b9beecaf7a42d456a5b41",
      "filename": "dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/DubboProtocol.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/dubbo/blob/505178dc7787a63b722eb669932c45e28a69e25e/dubbo-rpc-default%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fdubbo%2FDubboProtocol.java",
      "raw_url": "https://github.com/apache/dubbo/raw/505178dc7787a63b722eb669932c45e28a69e25e/dubbo-rpc-default%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fdubbo%2FDubboProtocol.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc-default%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fdubbo%2FDubboProtocol.java?ref=505178dc7787a63b722eb669932c45e28a69e25e",
      "patch": "@@ -295,9 +295,9 @@ private ExchangeClient initClient(URL url) {\n         }\n         try {\n             return Exchangers.connect(url ,requestHandler);\n-            \n         } catch (RemotingException e) {\n-            throw new RpcException(e.getMessage(), e);\n+            throw new RpcException(\"Fail to create remoting client for service(\" + url\r\n+            \t\t+ \"):\" + e.getMessage(), e);\n         }\n     }\n ",
      "parent_sha": "cb73a3a271b8f77c86b8b42eec417278642e7d1c"
    }
  },
  {
    "oid": "fddedf66608e99f29ad5cf71d36ff8c04ba63b43",
    "message": "Merge pull request #1378, replace StringBuider with simple string concatenation in log.",
    "date": "2018-02-24T05:52:53Z",
    "url": "https://github.com/apache/dubbo/commit/fddedf66608e99f29ad5cf71d36ff8c04ba63b43",
    "details": {
      "sha": "fb46f0a70afe233b1fb307e1a3a17c69b258a631",
      "filename": "dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/transport/DecodeHandler.java",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/apache/dubbo/blob/fddedf66608e99f29ad5cf71d36ff8c04ba63b43/dubbo-remoting%2Fdubbo-remoting-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fremoting%2Ftransport%2FDecodeHandler.java",
      "raw_url": "https://github.com/apache/dubbo/raw/fddedf66608e99f29ad5cf71d36ff8c04ba63b43/dubbo-remoting%2Fdubbo-remoting-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fremoting%2Ftransport%2FDecodeHandler.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting%2Fdubbo-remoting-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fremoting%2Ftransport%2FDecodeHandler.java?ref=fddedf66608e99f29ad5cf71d36ff8c04ba63b43",
      "patch": "@@ -55,16 +55,11 @@ private void decode(Object message) {\n             try {\n                 ((Decodeable) message).decode();\n                 if (log.isDebugEnabled()) {\n-                    log.debug(new StringBuilder(32).append(\"Decode decodeable message \")\n-                            .append(message.getClass().getName()).toString());\n+                    log.debug(\"Decode decodeable message \" + message.getClass().getName());\n                 }\n             } catch (Throwable e) {\n                 if (log.isWarnEnabled()) {\n-                    log.warn(\n-                            new StringBuilder(32)\n-                                    .append(\"Call Decodeable.decode failed: \")\n-                                    .append(e.getMessage()).toString(),\n-                            e);\n+                    log.warn(\"Call Decodeable.decode failed: \" + e.getMessage(), e);\n                 }\n             } // ~ end of catch\n         } // ~ end of if",
      "parent_sha": "59ca32a8262df81b60e131a784f240832ca52b6d"
    }
  },
  {
    "oid": "96680ddb4a74324ecd449393b9a2a0b3526cb3a3",
    "message": "add cache for scan result. (#8049)\n\n* add cache for scan result. (#7477)\r\n\r\n* remove unused method and delete Unused import. (#8049)\r\n\r\n* delete checkCandidate method.\r\n\r\n* Please remove redundant comments.\r\n\r\nCo-authored-by: zhang.jie <zhangjie@rivamed.cn>",
    "date": "2021-06-21T02:21:15Z",
    "url": "https://github.com/apache/dubbo/commit/96680ddb4a74324ecd449393b9a2a0b3526cb3a3",
    "details": {
      "sha": "fc8953bab546e992a7071d987398788659bce7c1",
      "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboClassPathBeanDefinitionScanner.java",
      "status": "modified",
      "additions": 16,
      "deletions": 9,
      "changes": 25,
      "blob_url": "https://github.com/apache/dubbo/blob/96680ddb4a74324ecd449393b9a2a0b3526cb3a3/dubbo-config%2Fdubbo-config-spring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2Fspring%2Fcontext%2Fannotation%2FDubboClassPathBeanDefinitionScanner.java",
      "raw_url": "https://github.com/apache/dubbo/raw/96680ddb4a74324ecd449393b9a2a0b3526cb3a3/dubbo-config%2Fdubbo-config-spring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2Fspring%2Fcontext%2Fannotation%2FDubboClassPathBeanDefinitionScanner.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config%2Fdubbo-config-spring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2Fspring%2Fcontext%2Fannotation%2FDubboClassPathBeanDefinitionScanner.java?ref=96680ddb4a74324ecd449393b9a2a0b3526cb3a3",
      "patch": "@@ -17,13 +17,15 @@\n package org.apache.dubbo.config.spring.context.annotation;\n \n import org.springframework.beans.factory.config.BeanDefinition;\n-import org.springframework.beans.factory.config.BeanDefinitionHolder;\n import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n import org.springframework.context.annotation.ClassPathBeanDefinitionScanner;\n import org.springframework.core.env.Environment;\n import org.springframework.core.io.ResourceLoader;\n \n+import java.util.Objects;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n \n import static org.springframework.context.annotation.AnnotationConfigUtils.registerAnnotationConfigProcessors;\n \n@@ -36,6 +38,11 @@\n  */\n public class DubboClassPathBeanDefinitionScanner extends ClassPathBeanDefinitionScanner {\n \n+    /**\n+     * key is package to scan, value is BeanDefinition\n+     */\n+    private final ConcurrentMap<String, Set<BeanDefinition>> beanDefinitionMap = new ConcurrentHashMap<>();\n+\n \n     public DubboClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters, Environment environment,\n                                                ResourceLoader resourceLoader) {\n@@ -58,13 +65,13 @@ public DubboClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, Envi\n     }\n \n     @Override\n-    public Set<BeanDefinitionHolder> doScan(String... basePackages) {\n-        return super.doScan(basePackages);\n+    public Set<BeanDefinition> findCandidateComponents(String basePackage) {\n+        Set<BeanDefinition> beanDefinitions = beanDefinitionMap.get(basePackage);\n+        // if beanDefinitions size is null => scan\n+        if (Objects.isNull(beanDefinitions)) {\n+            beanDefinitions = super.findCandidateComponents(basePackage);\n+            beanDefinitionMap.put(basePackage, beanDefinitions);\n+        }\n+        return beanDefinitions;\n     }\n-\n-    @Override\n-    public boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException {\n-        return super.checkCandidate(beanName, beanDefinition);\n-    }\n-\n }",
      "parent_sha": "f00464324398a401afa4f1cc9628224d970a1983"
    }
  },
  {
    "oid": "13ddecba0e4d7546591b9d93479dc7e58895d2ac",
    "message": "Apollo config center optimization, use 'dubbo.properties' as default namespace for properties. (#5105)",
    "date": "2019-09-24T09:27:24Z",
    "url": "https://github.com/apache/dubbo/commit/13ddecba0e4d7546591b9d93479dc7e58895d2ac",
    "details": {
      "sha": "c668746bd7d704ea1b28675958fc5e22b27275c3",
      "filename": "dubbo-configcenter/dubbo-configcenter-apollo/src/main/java/org/apache/dubbo/configcenter/support/apollo/ApolloDynamicConfiguration.java",
      "status": "modified",
      "additions": 8,
      "deletions": 11,
      "changes": 19,
      "blob_url": "https://github.com/apache/dubbo/blob/13ddecba0e4d7546591b9d93479dc7e58895d2ac/dubbo-configcenter%2Fdubbo-configcenter-apollo%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfigcenter%2Fsupport%2Fapollo%2FApolloDynamicConfiguration.java",
      "raw_url": "https://github.com/apache/dubbo/raw/13ddecba0e4d7546591b9d93479dc7e58895d2ac/dubbo-configcenter%2Fdubbo-configcenter-apollo%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfigcenter%2Fsupport%2Fapollo%2FApolloDynamicConfiguration.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-configcenter%2Fdubbo-configcenter-apollo%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfigcenter%2Fsupport%2Fapollo%2FApolloDynamicConfiguration.java?ref=13ddecba0e4d7546591b9d93479dc7e58895d2ac",
      "patch": "@@ -48,6 +48,7 @@\n import static org.apache.dubbo.common.constants.CommonConstants.CLUSTER_KEY;\n import static org.apache.dubbo.common.constants.CommonConstants.COMMA_SPLIT_PATTERN;\n import static org.apache.dubbo.common.constants.CommonConstants.CONFIG_NAMESPACE_KEY;\n+import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;\n \n /**\n  * Apollo implementation, https://github.com/ctripcorp/apollo\n@@ -81,8 +82,11 @@ public class ApolloDynamicConfiguration implements DynamicConfiguration {\n             System.setProperty(APOLLO_CLUSTER_KEY, configCluster);\n         }\n \n-        dubboConfig = ConfigService.getConfig(url.getParameter(CONFIG_NAMESPACE_KEY, DEFAULT_GROUP));\n-        dubboConfigFile = ConfigService.getConfigFile(url.getParameter(CONFIG_NAMESPACE_KEY, DEFAULT_GROUP), ConfigFileFormat.Properties);\n+        String namespace = url.getParameter(CONFIG_NAMESPACE_KEY, DEFAULT_GROUP);\n+        String apolloNamespace = StringUtils.isEmpty(namespace) ? url.getParameter(GROUP_KEY, DEFAULT_GROUP) : namespace;\n+        dubboConfig = ConfigService.getConfig(apolloNamespace);\n+        dubboConfigFile = ConfigService.getConfigFile(apolloNamespace, ConfigFileFormat.Properties);\n+\n         // Decide to fail or to continue when failed to connect to remote server.\n         boolean check = url.getParameter(CHECK_KEY, true);\n         if (dubboConfig.getSourceType() != ConfigSourceType.REMOTE) {\n@@ -148,16 +152,9 @@ public String getRule(String key, String group, long timeout) throws IllegalStat\n \n     @Override\n     public String getProperties(String key, String group, long timeout) throws IllegalStateException {\n-        if (StringUtils.isEmpty(group)) {\n-            return dubboConfigFile.getContent();\n-        }\n-        if (group.equals(url.getParameter(APPLICATION_KEY))) {\n-            return ConfigService.getConfigFile(APOLLO_APPLICATION_KEY, ConfigFileFormat.Properties).getContent();\n-        }\n-\n-        ConfigFile configFile = ConfigService.getConfigFile(group, ConfigFileFormat.Properties);\n+        ConfigFile configFile = ConfigService.getConfigFile(key, ConfigFileFormat.Properties);\n         if (configFile == null) {\n-            throw new IllegalStateException(\"There is no namespace named \" + group + \" in Apollo.\");\n+            throw new IllegalStateException(\"There is no namespace named \" + key + \" in Apollo.\");\n         }\n         return configFile.getContent();\n     }",
      "parent_sha": "96e7c65e70d0dc4cf09cf05a3eb337c406e5929e"
    }
  },
  {
    "oid": "63d319b60ec8962e7f82df77405866309c42da41",
    "message": "make method and methodName first set. (#7786)",
    "date": "2021-05-19T14:11:49Z",
    "url": "https://github.com/apache/dubbo/commit/63d319b60ec8962e7f82df77405866309c42da41",
    "details": {
      "sha": "f394ed6627b31bb9e492a02b236536f3c83cd419",
      "filename": "dubbo-common/src/main/java/org/apache/dubbo/rpc/model/MethodDescriptor.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/63d319b60ec8962e7f82df77405866309c42da41/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fmodel%2FMethodDescriptor.java",
      "raw_url": "https://github.com/apache/dubbo/raw/63d319b60ec8962e7f82df77405866309c42da41/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fmodel%2FMethodDescriptor.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fmodel%2FMethodDescriptor.java?ref=63d319b60ec8962e7f82df77405866309c42da41",
      "patch": "@@ -53,6 +53,7 @@ public class MethodDescriptor {\n \n     public MethodDescriptor(Method method) {\n         this.method = method;\n+        this.methodName = method.getName();\n         Class<?>[] parameterTypes = method.getParameterTypes();\n         if (parameterTypes.length == 1 && isStreamType(parameterTypes[0])) {\n             this.parameterClasses = new Class<?>[]{\n@@ -78,7 +79,6 @@ public MethodDescriptor(Method method) {\n         this.compatibleParamSignatures = Stream.of(parameterClasses)\n                 .map(Class::getName)\n                 .toArray(String[]::new);\n-        this.methodName = method.getName();\n         this.generic = (methodName.equals($INVOKE) || methodName.equals($INVOKE_ASYNC)) && parameterClasses.length == 3;\n     }\n ",
      "parent_sha": "4bfeeb2b47284ae04f1fe340ac4c29c096dfb260"
    }
  },
  {
    "oid": "243da4d818846c3387fcc5564a67ed1c2a1b2191",
    "message": "Retry connect to provider server by catching ClosedChannelException (#15209)",
    "date": "2025-03-12T01:46:12Z",
    "url": "https://github.com/apache/dubbo/commit/243da4d818846c3387fcc5564a67ed1c2a1b2191",
    "details": {
      "sha": "cb6763e3040db67e1504f96df706c996e22b4ac8",
      "filename": "dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyClient.java",
      "status": "modified",
      "additions": 89,
      "deletions": 66,
      "changes": 155,
      "blob_url": "https://github.com/apache/dubbo/blob/243da4d818846c3387fcc5564a67ed1c2a1b2191/dubbo-remoting%2Fdubbo-remoting-netty%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fremoting%2Ftransport%2Fnetty%2FNettyClient.java",
      "raw_url": "https://github.com/apache/dubbo/raw/243da4d818846c3387fcc5564a67ed1c2a1b2191/dubbo-remoting%2Fdubbo-remoting-netty%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fremoting%2Ftransport%2Fnetty%2FNettyClient.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting%2Fdubbo-remoting-netty%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fremoting%2Ftransport%2Fnetty%2FNettyClient.java?ref=243da4d818846c3387fcc5564a67ed1c2a1b2191",
      "patch": "@@ -25,6 +25,8 @@\n import org.apache.dubbo.remoting.RemotingException;\n import org.apache.dubbo.remoting.transport.AbstractClient;\n \n+import java.net.InetSocketAddress;\n+import java.nio.channels.ClosedChannelException;\n import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n \n@@ -86,79 +88,100 @@ public ChannelPipeline getPipeline() {\n     @Override\n     protected void doConnect() throws Throwable {\n         long start = System.currentTimeMillis();\n-        ChannelFuture future = bootstrap.connect(getConnectAddress());\n+        InetSocketAddress connectAddress = getConnectAddress();\n+        ChannelFuture future = bootstrap.connect(connectAddress);\n+        long connectTimeout = getConnectTimeout();\n+        long deadline = start + connectTimeout;\n         try {\n-            boolean ret = future.awaitUninterruptibly(getConnectTimeout(), TimeUnit.MILLISECONDS);\n-\n-            if (ret && future.isSuccess()) {\n-                Channel newChannel = future.getChannel();\n-                newChannel.setInterestOps(Channel.OP_READ_WRITE);\n-                try {\n-                    // Close old channel\n-                    Channel oldChannel = NettyClient.this.channel; // copy reference\n-                    if (oldChannel != null) {\n-                        try {\n-                            if (logger.isInfoEnabled()) {\n-                                logger.info(\"Close old netty channel \" + oldChannel + \" on create new netty channel \"\n-                                        + newChannel);\n+            while (true) {\n+                boolean ret = future.awaitUninterruptibly(connectTimeout, TimeUnit.MILLISECONDS);\n+\n+                if (ret && future.isSuccess()) {\n+                    Channel newChannel = future.getChannel();\n+                    newChannel.setInterestOps(Channel.OP_READ_WRITE);\n+                    try {\n+                        // copy reference\n+                        Channel oldChannel = NettyClient.this.channel;\n+                        if (oldChannel != null) {\n+                            try {\n+                                if (logger.isInfoEnabled()) {\n+                                    logger.info(\"Close old netty channel \" + oldChannel\n+                                            + \" on create new netty channel \" + newChannel);\n+                                }\n+                                // Close old channel\n+                                oldChannel.close();\n+                            } finally {\n+                                NettyChannel.removeChannelIfDisconnected(oldChannel);\n                             }\n-                            oldChannel.close();\n-                        } finally {\n-                            NettyChannel.removeChannelIfDisconnected(oldChannel);\n                         }\n-                    }\n-                } finally {\n-                    if (NettyClient.this.isClosed()) {\n-                        try {\n-                            if (logger.isInfoEnabled()) {\n-                                logger.info(\"Close new netty channel \" + newChannel + \", because the client closed.\");\n+                    } finally {\n+                        if (NettyClient.this.isClosed()) {\n+                            try {\n+                                if (logger.isInfoEnabled()) {\n+                                    logger.info(\n+                                            \"Close new netty channel \" + newChannel + \", because the client closed.\");\n+                                }\n+                                newChannel.close();\n+                            } finally {\n+                                NettyClient.this.channel = null;\n+                                NettyChannel.removeChannelIfDisconnected(newChannel);\n                             }\n-                            newChannel.close();\n-                        } finally {\n-                            NettyClient.this.channel = null;\n-                            NettyChannel.removeChannelIfDisconnected(newChannel);\n+                        } else {\n+                            NettyClient.this.channel = newChannel;\n+                        }\n+                    }\n+                    break;\n+                } else if (future.getCause() != null) {\n+                    Throwable cause = future.getCause();\n+\n+                    if (cause instanceof ClosedChannelException) {\n+                        // Netty3.2.10 ClosedChannelException issue, see https://github.com/netty/netty/issues/138\n+                        connectTimeout = deadline - System.currentTimeMillis();\n+                        if (connectTimeout > 0) {\n+                            // 6-1 - Retry connect to provider server by Netty3.2.10 ClosedChannelException issue#138.\n+                            logger.warn(\n+                                    TRANSPORT_FAILED_CONNECT_PROVIDER,\n+                                    \"Netty3.2.10 ClosedChannelException issue#138\",\n+                                    \"\",\n+                                    \"Retry connect to provider server.\");\n+                            future = bootstrap.connect(connectAddress);\n+                            continue;\n                         }\n-                    } else {\n-                        NettyClient.this.channel = newChannel;\n                     }\n+                    RemotingException remotingException = new RemotingException(\n+                            this,\n+                            \"client(url: \" + getUrl() + \") failed to connect to server \" + getRemoteAddress()\n+                                    + \", error message is:\" + cause.getMessage(),\n+                            cause);\n+\n+                    // 6-1 - Failed to connect to provider server by other reason.\n+                    logger.error(\n+                            TRANSPORT_FAILED_CONNECT_PROVIDER,\n+                            \"network disconnected\",\n+                            \"\",\n+                            \"Failed to connect to provider server by other reason.\",\n+                            cause);\n+\n+                    throw remotingException;\n+                } else {\n+\n+                    RemotingException remotingException = new RemotingException(\n+                            this,\n+                            \"client(url: \" + getUrl() + \") failed to connect to server \" + getRemoteAddress()\n+                                    + \" client-side timeout \" + getConnectTimeout() + \"ms (elapsed: \"\n+                                    + (System.currentTimeMillis() - start) + \"ms) from netty client \"\n+                                    + NetUtils.getLocalHost() + \" using dubbo version \" + Version.getVersion());\n+\n+                    // 6-2 - Client-side timeout.\n+                    logger.error(\n+                            TRANSPORT_CLIENT_CONNECT_TIMEOUT,\n+                            \"provider crash\",\n+                            \"\",\n+                            \"Client-side timeout.\",\n+                            remotingException);\n+\n+                    throw remotingException;\n                 }\n-            } else if (future.getCause() != null) {\n-                Throwable cause = future.getCause();\n-\n-                RemotingException remotingException = new RemotingException(\n-                        this,\n-                        \"client(url: \" + getUrl() + \") failed to connect to server \" + getRemoteAddress()\n-                                + \", error message is:\" + cause.getMessage(),\n-                        cause);\n-\n-                // 6-1 - Failed to connect to provider server by other reason.\n-                logger.error(\n-                        TRANSPORT_FAILED_CONNECT_PROVIDER,\n-                        \"network disconnected\",\n-                        \"\",\n-                        \"Failed to connect to provider server by other reason.\",\n-                        cause);\n-\n-                throw remotingException;\n-            } else {\n-\n-                RemotingException remotingException = new RemotingException(\n-                        this,\n-                        \"client(url: \" + getUrl() + \") failed to connect to server \"\n-                                + getRemoteAddress() + \" client-side timeout \"\n-                                + getConnectTimeout() + \"ms (elapsed: \" + (System.currentTimeMillis() - start)\n-                                + \"ms) from netty client \"\n-                                + NetUtils.getLocalHost() + \" using dubbo version \" + Version.getVersion());\n-\n-                // 6-2 - Client-side timeout.\n-                logger.error(\n-                        TRANSPORT_CLIENT_CONNECT_TIMEOUT,\n-                        \"provider crash\",\n-                        \"\",\n-                        \"Client-side timeout.\",\n-                        remotingException);\n-\n-                throw remotingException;\n             }\n         } finally {\n             if (!isConnected()) {",
      "parent_sha": "5f04865a213e3a107edbd4a46e3e863e06855273"
    }
  },
  {
    "oid": "4307c2b2fab47e7bbcb78c254cfe07c921c98f16",
    "message": "Add test cases for NacosMetadataReport (#5776)\n\n* Add more test case for NacosMetadataReport\r\n\r\n* Modify codes\r\n\r\n* Modify comments\r\n\r\n* Add more test case and modify codes\r\n\r\n* Modify codes",
    "date": "2020-03-06T07:35:07Z",
    "url": "https://github.com/apache/dubbo/commit/4307c2b2fab47e7bbcb78c254cfe07c921c98f16",
    "details": {
      "sha": "88fc75ab5a43bed05697c62f08256aa1d82e5489",
      "filename": "dubbo-metadata/dubbo-metadata-report-nacos/src/test/java/org/apache/dubbo/metadata/store/nacos/NacosMetadataReportTest.java",
      "status": "modified",
      "additions": 143,
      "deletions": 15,
      "changes": 158,
      "blob_url": "https://github.com/apache/dubbo/blob/4307c2b2fab47e7bbcb78c254cfe07c921c98f16/dubbo-metadata%2Fdubbo-metadata-report-nacos%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Fmetadata%2Fstore%2Fnacos%2FNacosMetadataReportTest.java",
      "raw_url": "https://github.com/apache/dubbo/raw/4307c2b2fab47e7bbcb78c254cfe07c921c98f16/dubbo-metadata%2Fdubbo-metadata-report-nacos%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Fmetadata%2Fstore%2Fnacos%2FNacosMetadataReportTest.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-metadata%2Fdubbo-metadata-report-nacos%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Fmetadata%2Fstore%2Fnacos%2FNacosMetadataReportTest.java?ref=4307c2b2fab47e7bbcb78c254cfe07c921c98f16",
      "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.dubbo.metadata.store.nacos;\n \n+import com.alibaba.nacos.api.exception.NacosException;\n import org.apache.dubbo.common.URL;\n import org.apache.dubbo.common.utils.NetUtils;\n import org.apache.dubbo.metadata.definition.ServiceDefinitionBuilder;\n@@ -25,13 +26,17 @@\n \n import com.alibaba.nacos.api.config.ConfigService;\n import com.google.gson.Gson;\n+import org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier;\n+import org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n+import java.util.Arrays;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n import static org.apache.dubbo.common.constants.CommonConstants.CONSUMER_SIDE;\n@@ -40,19 +45,63 @@\n //FIXME: waiting for embedded Nacos suport, then we can open the switch.\n @Disabled(\"https://github.com/alibaba/nacos/issues/1188\")\n public class NacosMetadataReportTest {\n+\n     private static final String SESSION_TIMEOUT_KEY = \"session\";\n+\n     private static final String TEST_SERVICE = \"org.apache.dubbo.metadata.store.nacos.NacosMetadata4TstService\";\n+\n     private NacosMetadataReport nacosMetadataReport;\n+\n     private NacosMetadataReportFactory nacosMetadataReportFactory;\n+\n     private ConfigService configService;\n \n-    private static final String NACOS_GROUP = \"zzz\";\n+    private static final String NACOS_GROUP = \"metadata_test\";\n+\n+    /**\n+     * timeout(ms) for nacos session\n+     */\n+    private static final int SESSION_TIMEOUT = 15 * 1000;\n+\n+    /**\n+     * timeout(ms) for query operation on nacos\n+     */\n+    private static final int NACOS_READ_TIMEOUT = 5 * 1000;\n+\n+    /**\n+     * interval(ms) to make nacos cache refresh\n+     */\n+    private static final int INTERVAL_TO_MAKE_NACOS_REFRESH = 1000;\n+\n+    /**\n+     * version for test\n+     */\n+    private static final String VERSION = \"1.0.0\";\n+\n+    /**\n+     * group for test\n+     */\n+    private static final String METADATA_GROUP = null;\n+\n+    /**\n+     * application name for test\n+     */\n+    private static final String APPLICATION_NAME = \"nacos-metdata-report-test\";\n+\n+    /**\n+     * revision for test\n+     */\n+    private static final String REVISION = \"90980\";\n+\n+    /**\n+     * protocol for test\n+     */\n+    private static final String PROTOCOL = \"xxx\";\n \n     @BeforeEach\n     public void setUp() {\n-        // timeout in 15 seconds.\n         URL url = URL.valueOf(\"nacos://127.0.0.1:8848?group=\" + NACOS_GROUP)\n-                .addParameter(SESSION_TIMEOUT_KEY, 15000);\n+                .addParameter(SESSION_TIMEOUT_KEY, SESSION_TIMEOUT);\n         nacosMetadataReportFactory = new NacosMetadataReportFactory();\n         this.nacosMetadataReport = (NacosMetadataReport) nacosMetadataReportFactory.createMetadataReport(url);\n         this.configService = nacosMetadataReport.buildConfigService(url);\n@@ -62,31 +111,109 @@ public void setUp() {\n     public void tearDown() throws Exception {\n     }\n \n+\n     @Test\n     public void testStoreProvider() throws Exception {\n-        String version = \"1.0.0\";\n-        String group = null;\n-        String application = \"nacos-metdata-report-test\";\n         MetadataIdentifier providerIdentifier =\n-                storeProvider(nacosMetadataReport, TEST_SERVICE, version, group, application);\n-        String serverContent = configService.getConfig(providerIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP, 5000L);\n+                storeProvider(nacosMetadataReport, TEST_SERVICE, VERSION, METADATA_GROUP, APPLICATION_NAME);\n+        String serverContent = configService.getConfig(providerIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP, NACOS_READ_TIMEOUT);\n         Assertions.assertNotNull(serverContent);\n \n         Gson gson = new Gson();\n         FullServiceDefinition fullServiceDefinition = gson.fromJson(serverContent, FullServiceDefinition.class);\n         Assertions.assertEquals(fullServiceDefinition.getParameters().get(\"paramTest\"), \"nacosTest\");\n+\n+        //Clear test data\n+        configService.removeConfig(providerIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP);\n     }\n \n     @Test\n     public void testStoreConsumer() throws Exception {\n-        String version = \"1.0.0\";\n-        String group = null;\n-        String application = \"nacos-metadata-report-consumer-test\";\n-        MetadataIdentifier consumerIdentifier = storeConsumer(nacosMetadataReport, TEST_SERVICE, version, group, application);\n+        MetadataIdentifier consumerIdentifier = storeConsumer(nacosMetadataReport, TEST_SERVICE, VERSION, METADATA_GROUP, APPLICATION_NAME);\n \n-        String serverContent = configService.getConfig(consumerIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP, 5000L);\n+        String serverContent = configService.getConfig(consumerIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP, NACOS_READ_TIMEOUT);\n         Assertions.assertNotNull(serverContent);\n         Assertions.assertEquals(serverContent, \"{\\\"paramConsumerTest\\\":\\\"nacosConsumer\\\"}\");\n+\n+        //clear test data\n+        configService.removeConfig(consumerIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP);\n+    }\n+\n+    @Test\n+    public void testDoSaveServiceMetadata() throws Exception {\n+        URL url = URL.valueOf(\"xxx://\" + NetUtils.getLocalAddress().getHostName() + \":4444/\" + TEST_SERVICE +\n+                \"?paramTest=nacosTest&version=\" + VERSION + \"&application=\"\n+                + APPLICATION_NAME + (METADATA_GROUP == null ? \"\" : \"&group=\" + METADATA_GROUP));\n+        ServiceMetadataIdentifier serviceMetadataIdentifier = new ServiceMetadataIdentifier(TEST_SERVICE, VERSION,\n+                METADATA_GROUP, \"provider\", REVISION, PROTOCOL);\n+        nacosMetadataReport.doSaveMetadata(serviceMetadataIdentifier, url);\n+        Thread.sleep(INTERVAL_TO_MAKE_NACOS_REFRESH);\n+        String serviceMetaData = configService.getConfig(serviceMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP, NACOS_READ_TIMEOUT);\n+        Assertions.assertNotNull(serviceMetaData);\n+        Assertions.assertEquals(serviceMetaData, URL.encode(url.toFullString()));\n+\n+        //clear test data\n+        configService.removeConfig(serviceMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP);\n+    }\n+\n+    @Test\n+    public void testDoRemoveServiceMetadata() throws Exception {\n+        URL url = URL.valueOf(\"xxx://\" + NetUtils.getLocalAddress().getHostName() + \":4444/\" + TEST_SERVICE +\n+                \"?paramTest=nacosTest&version=\" + VERSION + \"&application=\"\n+                + APPLICATION_NAME + (METADATA_GROUP == null ? \"\" : \"&group=\" + METADATA_GROUP));\n+        ServiceMetadataIdentifier serviceMetadataIdentifier = new ServiceMetadataIdentifier(TEST_SERVICE, VERSION,\n+                METADATA_GROUP, \"provider\", REVISION, PROTOCOL);\n+        nacosMetadataReport.doSaveMetadata(serviceMetadataIdentifier, url);\n+        Thread.sleep(INTERVAL_TO_MAKE_NACOS_REFRESH);\n+        String serviceMetaData = configService.getConfig(serviceMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP, NACOS_READ_TIMEOUT);\n+        Assertions.assertNotNull(serviceMetaData);\n+\n+        nacosMetadataReport.doRemoveMetadata(serviceMetadataIdentifier);\n+        Thread.sleep(INTERVAL_TO_MAKE_NACOS_REFRESH);\n+        serviceMetaData = configService.getConfig(serviceMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP, NACOS_READ_TIMEOUT);\n+        Assertions.assertNull(serviceMetaData);\n+    }\n+\n+    @Test\n+    public void testDoGetExportedURLs() throws InterruptedException, NacosException {\n+        URL url = URL.valueOf(\"xxx://\" + NetUtils.getLocalAddress().getHostName() + \":4444/\" + TEST_SERVICE +\n+                \"?paramTest=nacosTest&version=\" + VERSION + \"&application=\"\n+                + APPLICATION_NAME + (METADATA_GROUP == null ? \"\" : \"&group=\" + METADATA_GROUP));\n+        ServiceMetadataIdentifier serviceMetadataIdentifier = new ServiceMetadataIdentifier(TEST_SERVICE, VERSION,\n+                METADATA_GROUP, \"provider\", REVISION, PROTOCOL);\n+\n+        nacosMetadataReport.doSaveMetadata(serviceMetadataIdentifier, url);\n+        Thread.sleep(INTERVAL_TO_MAKE_NACOS_REFRESH);\n+\n+        List<String> exportedURLs = nacosMetadataReport.doGetExportedURLs(serviceMetadataIdentifier);\n+        Assertions.assertTrue(exportedURLs.size() == 1);\n+\n+        String exportedUrl = exportedURLs.get(0);\n+        Assertions.assertNotNull(exportedUrl);\n+        Assertions.assertEquals(exportedUrl, url.toFullString());\n+\n+        //clear test data\n+        configService.removeConfig(serviceMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP);\n+    }\n+\n+    @Test\n+    public void testDoSaveSubscriberData() throws InterruptedException, NacosException {\n+        URL url = URL.valueOf(\"xxx://\" + NetUtils.getLocalAddress().getHostName() + \":4444/\" + TEST_SERVICE +\n+                \"?paramTest=nacosTest&version=\" + VERSION + \"&application=\"\n+                + APPLICATION_NAME + (METADATA_GROUP == null ? \"\" : \"&group=\" + METADATA_GROUP));\n+        SubscriberMetadataIdentifier subscriberMetadataIdentifier = new SubscriberMetadataIdentifier(APPLICATION_NAME, REVISION);\n+        Gson gson = new Gson();\n+        String urlListJsonString = gson.toJson(Arrays.asList(url));\n+        nacosMetadataReport.doSaveSubscriberData(subscriberMetadataIdentifier, urlListJsonString);\n+        Thread.sleep(INTERVAL_TO_MAKE_NACOS_REFRESH);\n+\n+        String subscriberMetadata = configService.getConfig(subscriberMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP, NACOS_READ_TIMEOUT);\n+        Assertions.assertNotNull(subscriberMetadata);\n+        Assertions.assertEquals(subscriberMetadata, urlListJsonString);\n+\n+        //clear test data\n+        configService.removeConfig(subscriberMetadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), NACOS_GROUP);\n+\n     }\n \n     private MetadataIdentifier storeProvider(NacosMetadataReport nacosMetadataReport, String interfaceName, String version,\n@@ -103,7 +230,7 @@ private MetadataIdentifier storeProvider(NacosMetadataReport nacosMetadataReport\n                 ServiceDefinitionBuilder.buildFullDefinition(interfaceClass, url.getParameters());\n \n         nacosMetadataReport.storeProviderMetadata(providerMetadataIdentifier, fullServiceDefinition);\n-        Thread.sleep(1000);\n+        Thread.sleep(INTERVAL_TO_MAKE_NACOS_REFRESH);\n         return providerMetadataIdentifier;\n     }\n \n@@ -113,7 +240,8 @@ private MetadataIdentifier storeConsumer(NacosMetadataReport nacosMetadataReport\n         Map<String, String> tmp = new HashMap<>();\n         tmp.put(\"paramConsumerTest\", \"nacosConsumer\");\n         nacosMetadataReport.storeConsumerMetadata(consumerIdentifier, tmp);\n-        Thread.sleep(1000);\n+        Thread.sleep(INTERVAL_TO_MAKE_NACOS_REFRESH);\n         return consumerIdentifier;\n     }\n+\n }",
      "parent_sha": "7b92414ef3707d2cd4a69ec6131cc03fd8eed8ab"
    }
  },
  {
    "oid": "5d044c7530bf4fd5351ec1a278bf725f37d32121",
    "message": "Fix the issue that providerUrl could not be registered in the application-level registry when simplified is set to true (#9671)",
    "date": "2022-02-25T08:47:27Z",
    "url": "https://github.com/apache/dubbo/commit/5d044c7530bf4fd5351ec1a278bf725f37d32121",
    "details": {
      "sha": "b8b905d857e59d31806672798413f17d766e1109",
      "filename": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/dubbo/blob/5d044c7530bf4fd5351ec1a278bf725f37d32121/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fintegration%2FRegistryProtocol.java",
      "raw_url": "https://github.com/apache/dubbo/raw/5d044c7530bf4fd5351ec1a278bf725f37d32121/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fintegration%2FRegistryProtocol.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fintegration%2FRegistryProtocol.java?ref=5d044c7530bf4fd5351ec1a278bf725f37d32121",
      "patch": "@@ -85,6 +85,7 @@\n import static org.apache.dubbo.common.constants.CommonConstants.PROTOCOL_KEY;\n import static org.apache.dubbo.common.constants.CommonConstants.REGISTRY_PROTOCOL_LISTENER_KEY;\n import static org.apache.dubbo.common.constants.CommonConstants.RELEASE_KEY;\n+import static org.apache.dubbo.common.constants.CommonConstants.SIDE_KEY;\n import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;\n import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;\n import static org.apache.dubbo.common.constants.FilterConstants.VALIDATION_KEY;\n@@ -135,7 +136,7 @@ public class RegistryProtocol implements Protocol, ScopeModelAware {\n     public static final String[] DEFAULT_REGISTER_PROVIDER_KEYS = {\n         APPLICATION_KEY, CODEC_KEY, EXCHANGER_KEY, SERIALIZATION_KEY, CLUSTER_KEY, CONNECTIONS_KEY, DEPRECATED_KEY,\n         GROUP_KEY, LOADBALANCE_KEY, MOCK_KEY, PATH_KEY, TIMEOUT_KEY, TOKEN_KEY, VERSION_KEY, WARMUP_KEY,\n-        WEIGHT_KEY, DUBBO_VERSION_KEY, RELEASE_KEY\n+        WEIGHT_KEY, DUBBO_VERSION_KEY, RELEASE_KEY, SIDE_KEY\n     };\n \n     public static final String[] DEFAULT_REGISTER_CONSUMER_KEYS = {",
      "parent_sha": "5216214a077de14e84637e9ec65d5341c7f75138"
    }
  },
  {
    "oid": "9c1879b27e70b075d8acfc5cf4e04fab34dbe768",
    "message": "\u4fee\u6539dubbo.properties\u52a0\u8f7d\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@652 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2011-12-13T05:00:46Z",
    "url": "https://github.com/apache/dubbo/commit/9c1879b27e70b075d8acfc5cf4e04fab34dbe768",
    "details": {
      "sha": "bb22d23d5987573d84172f2700473beb549fe3da",
      "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/utils/ConfigUtils.java",
      "status": "modified",
      "additions": 16,
      "deletions": 8,
      "changes": 24,
      "blob_url": "https://github.com/apache/dubbo/blob/9c1879b27e70b075d8acfc5cf4e04fab34dbe768/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2Futils%2FConfigUtils.java",
      "raw_url": "https://github.com/apache/dubbo/raw/9c1879b27e70b075d8acfc5cf4e04fab34dbe768/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2Futils%2FConfigUtils.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2Futils%2FConfigUtils.java?ref=9c1879b27e70b075d8acfc5cf4e04fab34dbe768",
      "patch": "@@ -164,24 +164,32 @@ public static Properties loadProperties(String fileName, boolean allowMultiFile)\n             while (urls.hasMoreElements()) {\r\n                 list.add(urls.nextElement());\r\n             }\r\n-        }\r\n-        catch (Throwable t) {\r\n+        } catch (Throwable t) {\r\n             logger.warn(\"Fail to load \" + fileName + \" file: \" + t.getMessage(), t);\r\n         }\r\n         \r\n         if(list.size() == 0) {\r\n             logger.warn(\"No \" + fileName + \" found on the class path.\");\r\n             return properties;\r\n         }\r\n-        if(!allowMultiFile && list.size() > 1) {\r\n-            String errMsg = String.format(\"only 1 %s file is expected, but %d dubbo.properties files found on class path: %s\",\r\n-                    fileName, list.size(), list.toString());\r\n-            logger.error(errMsg);\r\n-            throw new IllegalStateException(errMsg);\r\n+        \r\n+        if(! allowMultiFile) {\r\n+            if (list.size() > 1) {\r\n+                String errMsg = String.format(\"only 1 %s file is expected, but %d dubbo.properties files found on class path: %s\",\r\n+                        fileName, list.size(), list.toString());\r\n+                logger.error(errMsg);\r\n+                //throw new IllegalStateException(errMsg);\r\n+            }\r\n+            try {\r\n+                properties.load(ClassHelper.getClassLoader().getResourceAsStream(fileName));\r\n+            } catch (Throwable e) {\r\n+                logger.warn(\"Failed to load \" + fileName + \" file from \" + fileName + \"(ingore this file): \" + e.getMessage(), e);\r\n+            }\r\n+            return properties;\r\n         }\r\n         \r\n         logger.info(\"load \" + fileName + \" properties file from \" + list);\r\n-\r\n+        \r\n         for(java.net.URL url : list) {\r\n             try {\r\n                 Properties p = new Properties();\r",
      "parent_sha": "0951715746cf460fcb55648e5bfe86abade6ba6c"
    }
  },
  {
    "oid": "2a0755c279f3924d83eec25f591ff6347a1c3f51",
    "message": "Check if protocol already found before going through ConsumerConfig. (#13510)\n\n* Check if protocol already found before going through ConsumerConfig.\r\n\r\n* fix spotless issue",
    "date": "2023-12-26T11:49:01Z",
    "url": "https://github.com/apache/dubbo/commit/2a0755c279f3924d83eec25f591ff6347a1c3f51",
    "details": {
      "sha": "e53490979d4b91da2148f25ea01672ebaa0d8c50",
      "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/builders/InternalServiceConfigBuilder.java",
      "status": "modified",
      "additions": 12,
      "deletions": 10,
      "changes": 22,
      "blob_url": "https://github.com/apache/dubbo/blob/2a0755c279f3924d83eec25f591ff6347a1c3f51/dubbo-config%2Fdubbo-config-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2Fbootstrap%2Fbuilders%2FInternalServiceConfigBuilder.java",
      "raw_url": "https://github.com/apache/dubbo/raw/2a0755c279f3924d83eec25f591ff6347a1c3f51/dubbo-config%2Fdubbo-config-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2Fbootstrap%2Fbuilders%2FInternalServiceConfigBuilder.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config%2Fdubbo-config-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2Fbootstrap%2Fbuilders%2FInternalServiceConfigBuilder.java?ref=2a0755c279f3924d83eec25f591ff6347a1c3f51",
      "patch": "@@ -163,16 +163,18 @@ private String getRelatedOrDefaultProtocol() {\n             }\n         }\n         // <dubbo:consumer/>\n-        protocol = moduleModels.stream()\n-                .map(ModuleModel::getConfigManager)\n-                .map(ModuleConfigManager::getConsumers)\n-                .filter(CollectionUtils::isNotEmpty)\n-                .flatMap(Collection::stream)\n-                .map(ConsumerConfig::getProtocol)\n-                .filter(StringUtils::isNotEmpty)\n-                .filter(p -> ACCEPTABLE_PROTOCOL.contains(p))\n-                .findFirst()\n-                .orElse(\"\");\n+        if (StringUtils.isEmpty(protocol)) {\n+            protocol = moduleModels.stream()\n+                    .map(ModuleModel::getConfigManager)\n+                    .map(ModuleConfigManager::getConsumers)\n+                    .filter(CollectionUtils::isNotEmpty)\n+                    .flatMap(Collection::stream)\n+                    .map(ConsumerConfig::getProtocol)\n+                    .filter(StringUtils::isNotEmpty)\n+                    .filter(p -> ACCEPTABLE_PROTOCOL.contains(p))\n+                    .findFirst()\n+                    .orElse(\"\");\n+        }\n         return StringUtils.isNotEmpty(protocol) && ACCEPTABLE_PROTOCOL.contains(protocol) ? protocol : DUBBO_PROTOCOL;\n     }\n ",
      "parent_sha": "cb5ff2aace600817868b238da048c85f66e837bb"
    }
  },
  {
    "oid": "cd582c5c036a92296b5fbf844f44c1c67ae26e76",
    "message": "[Performance tuning] improve InvokerInvocationHandler#invoke (#5403)",
    "date": "2019-12-03T03:15:53Z",
    "url": "https://github.com/apache/dubbo/commit/cd582c5c036a92296b5fbf844f44c1c67ae26e76",
    "details": {
      "sha": "c10369c7aff0a1d107cde6f3fbdf1b388d449a58",
      "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java",
      "status": "modified",
      "additions": 12,
      "deletions": 14,
      "changes": 26,
      "blob_url": "https://github.com/apache/dubbo/blob/cd582c5c036a92296b5fbf844f44c1c67ae26e76/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fproxy%2FInvokerInvocationHandler.java",
      "raw_url": "https://github.com/apache/dubbo/raw/cd582c5c036a92296b5fbf844f44c1c67ae26e76/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fproxy%2FInvokerInvocationHandler.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fproxy%2FInvokerInvocationHandler.java?ref=cd582c5c036a92296b5fbf844f44c1c67ae26e76",
      "patch": "@@ -37,25 +37,23 @@ public InvokerInvocationHandler(Invoker<?> handler) {\n \n     @Override\n     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n-        String methodName = method.getName();\n-        Class<?>[] parameterTypes = method.getParameterTypes();\n         if (method.getDeclaringClass() == Object.class) {\n             return method.invoke(invoker, args);\n         }\n-        if (\"toString\".equals(methodName) && parameterTypes.length == 0) {\n-            return invoker.toString();\n-        }\n-        if (\"hashCode\".equals(methodName) && parameterTypes.length == 0) {\n-            return invoker.hashCode();\n-        }\n-        if (\"equals\".equals(methodName) && parameterTypes.length == 1) {\n+        String methodName = method.getName();\n+        Class<?>[] parameterTypes = method.getParameterTypes();\n+        if (parameterTypes.length == 0) {\n+            if (\"toString\".equals(methodName)) {\n+                return invoker.toString();\n+            } else if (\"$destroy\".equals(methodName)) {\n+                invoker.destroy();\n+                return null;\n+            } else if (\"hashCode\".equals(methodName)) {\n+                return invoker.hashCode();\n+            }\n+        } else if (parameterTypes.length == 1 && \"equals\".equals(methodName)) {\n             return invoker.equals(args[0]);\n         }\n-        if (\"$destroy\".equals(methodName) && parameterTypes.length == 0) {\n-            invoker.destroy();\n-            return null;\n-        }\n-\n         RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), args);\n         rpcInvocation.setTargetServiceUniqueName(invoker.getUrl().getServiceKey());\n ",
      "parent_sha": "a9746a0ae4f35948442b7d4de889ed3b91e339fe"
    }
  },
  {
    "oid": "10f3cc8d8869974d50808e3527c91d2110a4e31e",
    "message": "Fix monitor bug.\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@20 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2011-10-20T19:04:50Z",
    "url": "https://github.com/apache/dubbo/commit/10f3cc8d8869974d50808e3527c91d2110a4e31e",
    "details": {
      "sha": "188a8632e631c20374f7c2fb9a360b54c1800414",
      "filename": "dubbo-monitor/src/main/java/com/alibaba/dubbo/monitor/support/dubbo/DubboMonitor.java",
      "status": "modified",
      "additions": 11,
      "deletions": 12,
      "changes": 23,
      "blob_url": "https://github.com/apache/dubbo/blob/10f3cc8d8869974d50808e3527c91d2110a4e31e/dubbo-monitor%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fmonitor%2Fsupport%2Fdubbo%2FDubboMonitor.java",
      "raw_url": "https://github.com/apache/dubbo/raw/10f3cc8d8869974d50808e3527c91d2110a4e31e/dubbo-monitor%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fmonitor%2Fsupport%2Fdubbo%2FDubboMonitor.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-monitor%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fmonitor%2Fsupport%2Fdubbo%2FDubboMonitor.java?ref=10f3cc8d8869974d50808e3527c91d2110a4e31e",
      "patch": "@@ -1,5 +1,5 @@\n /*\r\n- * Copyright 1999-2011 Alibaba Group.\r\n+ * Copyright 1999-2101 Alibaba Group.\r\n  *  \r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n@@ -96,17 +96,16 @@ public void send() {\n             long maxConcurrent = numbers[9];\r\n              \r\n             // \u53d1\u9001\u6c47\u603b\u4fe1\u606f\r\n-            URL url = statistics.getUrl();\r\n-            url.addParameter(MonitorService.SUCCESS, success);\r\n-            url.addParameter(MonitorService.FAILURE, failure);\r\n-            url.addParameter(MonitorService.INPUT, input);\r\n-            url.addParameter(MonitorService.OUTPUT, output);\r\n-            url.addParameter(MonitorService.ELAPSED, elapsed);\r\n-            url.addParameter(MonitorService.CONCURRENT, concurrent);\r\n-            url.addParameter(MonitorService.MAX_INPUT, maxInput);\r\n-            url.addParameter(MonitorService.MAX_OUTPUT, maxOutput);\r\n-            url.addParameter(MonitorService.MAX_ELAPSED, maxElapsed);\r\n-            url.addParameter(MonitorService.MAX_CONCURRENT, maxConcurrent);\r\n+            URL url = statistics.getUrl().addParameter(MonitorService.SUCCESS, success)\r\n+                    .addParameter(MonitorService.FAILURE, failure)\r\n+                    .addParameter(MonitorService.INPUT, input)\r\n+                    .addParameter(MonitorService.OUTPUT, output)\r\n+                    .addParameter(MonitorService.ELAPSED, elapsed)\r\n+                    .addParameter(MonitorService.CONCURRENT, concurrent)\r\n+                    .addParameter(MonitorService.MAX_INPUT, maxInput)\r\n+                    .addParameter(MonitorService.MAX_OUTPUT, maxOutput)\r\n+                    .addParameter(MonitorService.MAX_ELAPSED, maxElapsed)\r\n+                    .addParameter(MonitorService.MAX_CONCURRENT, maxConcurrent);\r\n             monitorService.count(url);\r\n             \r\n             // \u51cf\u6389\u5df2\u7edf\u8ba1\u6570\u636e\r",
      "parent_sha": "1352d4688d17c003434a5200db8cfd9693d61a41"
    }
  },
  {
    "oid": "368a59ed8560e36de7255231297a39fc194b60bf",
    "message": "Release resource after use in ConfigParserTest (#2905)",
    "date": "2018-12-10T09:44:03Z",
    "url": "https://github.com/apache/dubbo/commit/368a59ed8560e36de7255231297a39fc194b60bf",
    "details": {
      "sha": "e84136e36ece39e5a462f66149d9ce078b639b2b",
      "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/configurator/parser/ConfigParserTest.java",
      "status": "modified",
      "additions": 96,
      "deletions": 86,
      "changes": 182,
      "blob_url": "https://github.com/apache/dubbo/blob/368a59ed8560e36de7255231297a39fc194b60bf/dubbo-cluster%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fcluster%2Fconfigurator%2Fparser%2FConfigParserTest.java",
      "raw_url": "https://github.com/apache/dubbo/raw/368a59ed8560e36de7255231297a39fc194b60bf/dubbo-cluster%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fcluster%2Fconfigurator%2Fparser%2FConfigParserTest.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fcluster%2Fconfigurator%2Fparser%2FConfigParserTest.java?ref=368a59ed8560e36de7255231297a39fc194b60bf",
      "patch": "@@ -27,6 +27,7 @@\n import org.yaml.snakeyaml.Yaml;\n import org.yaml.snakeyaml.constructor.Constructor;\n \n+import java.io.IOException;\n import java.io.InputStream;\n import java.util.List;\n \n@@ -47,121 +48,130 @@ private String streamToString(InputStream stream) {\n     }\n \n     @Test\n-    public void snakeYamlBasicTest() {\n-        InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceNoApp.yml\");\n+    public void snakeYamlBasicTest() throws IOException {\n+        try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceNoApp.yml\")) {\n \n-        Constructor constructor = new Constructor(ConfiguratorConfig.class);\n-        TypeDescription carDescription = new TypeDescription(ConfiguratorConfig.class);\n-        carDescription.addPropertyParameters(\"items\", ConfigItem.class);\n-        constructor.addTypeDescription(carDescription);\n+            Constructor constructor = new Constructor(ConfiguratorConfig.class);\n+            TypeDescription carDescription = new TypeDescription(ConfiguratorConfig.class);\n+            carDescription.addPropertyParameters(\"items\", ConfigItem.class);\n+            constructor.addTypeDescription(carDescription);\n \n-        Yaml yaml = new Yaml(constructor);\n-        ConfiguratorConfig config = yaml.load(yamlStream);\n-        System.out.println(config);\n+            Yaml yaml = new Yaml(constructor);\n+            ConfiguratorConfig config = yaml.load(yamlStream);\n+            System.out.println(config);\n+        }\n     }\n \n     @Test\n     public void parseConfiguratorsServiceNoAppTest() throws Exception {\n-        InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceNoApp.yml\");\n-        List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream), \"serviceKey\");\n-        Assert.assertNotNull(urls);\n-        Assert.assertEquals(2, urls.size());\n-        URL url = urls.get(0);\n-        Assert.assertEquals(url.getAddress(), \"127.0.0.1:20880\");\n-        Assert.assertEquals(url.getParameter(Constants.WEIGHT_KEY, 0), 222);\n+        try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceNoApp.yml\")) {\n+            List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream), \"serviceKey\");\n+            Assert.assertNotNull(urls);\n+            Assert.assertEquals(2, urls.size());\n+            URL url = urls.get(0);\n+            Assert.assertEquals(url.getAddress(), \"127.0.0.1:20880\");\n+            Assert.assertEquals(url.getParameter(Constants.WEIGHT_KEY, 0), 222);\n+        }\n     }\n \n     @Test\n     public void parseConfiguratorsServiceGroupVersionTest() throws Exception {\n-        InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceGroupVersion.yml\");\n-        List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream), \"testgroup/servicekey:1.0.0\");\n-        Assert.assertNotNull(urls);\n-        Assert.assertEquals(1, urls.size());\n-        URL url = urls.get(0);\n-        Assert.assertEquals(\"testgroup\", url.getParameter(Constants.GROUP_KEY));\n-        Assert.assertEquals(\"1.0.0\", url.getParameter(Constants.VERSION_KEY));\n+        try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceGroupVersion.yml\")) {\n+            List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream), \"testgroup/servicekey:1.0.0\");\n+            Assert.assertNotNull(urls);\n+            Assert.assertEquals(1, urls.size());\n+            URL url = urls.get(0);\n+            Assert.assertEquals(\"testgroup\", url.getParameter(Constants.GROUP_KEY));\n+            Assert.assertEquals(\"1.0.0\", url.getParameter(Constants.VERSION_KEY));\n+        }\n     }\n \n     @Test\n-    public void parseConfiguratorsServiceMultiAppsTest() {\n-        InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceMultiApps.yml\");\n-        List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream), \"serviceKey\");\n-        Assert.assertNotNull(urls);\n-        Assert.assertEquals(4, urls.size());\n-        URL url = urls.get(0);\n-        Assert.assertEquals(\"127.0.0.1\", url.getAddress());\n-        Assert.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n-        Assert.assertNotNull(url.getParameter(Constants.APPLICATION_KEY));\n+    public void parseConfiguratorsServiceMultiAppsTest() throws IOException {\n+        try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceMultiApps.yml\")) {\n+            List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream), \"serviceKey\");\n+            Assert.assertNotNull(urls);\n+            Assert.assertEquals(4, urls.size());\n+            URL url = urls.get(0);\n+            Assert.assertEquals(\"127.0.0.1\", url.getAddress());\n+            Assert.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n+            Assert.assertNotNull(url.getParameter(Constants.APPLICATION_KEY));\n+        }\n     }\n \n     @Test(expected = IllegalStateException.class)\n-    public void parseConfiguratorsServiceNoRuleTest() {\n-        InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceNoRule.yml\");\n-        ConfigParser.parseConfigurators(streamToString(yamlStream), \"serviceKey\");\n-        Assert.fail();\n+    public void parseConfiguratorsServiceNoRuleTest() throws IOException {\n+        try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceNoRule.yml\")) {\n+            ConfigParser.parseConfigurators(streamToString(yamlStream), \"serviceKey\");\n+            Assert.fail();\n+        }\n     }\n \n     @Test\n-    public void parseConfiguratorsAppMultiServicesTest() {\n-        InputStream yamlStream = this.getClass().getResourceAsStream(\"/AppMultiServices.yml\");\n-        String yamlFile = streamToString(yamlStream);\n-        List<URL> urls = ConfigParser.parseConfigurators(yamlFile, \"service1\");\n-        Assert.assertNotNull(urls);\n-        Assert.assertEquals(2, urls.size());\n-        URL url = urls.get(0);\n-        Assert.assertEquals(\"127.0.0.1\", url.getAddress());\n-        Assert.assertEquals(\"service1\", url.getServiceInterface());\n-        Assert.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n-        Assert.assertEquals(\"random\", url.getParameter(Constants.LOADBALANCE_KEY));\n-        Assert.assertEquals(url.getParameter(Constants.APPLICATION_KEY), \"demo-consumer\");\n-\n-        List<URL> urls2 = ConfigParser.parseConfigurators(yamlFile, \"service-not-exist\");\n-        Assert.assertNotNull(urls2);\n-        Assert.assertEquals(0, urls2.size());\n+    public void parseConfiguratorsAppMultiServicesTest() throws IOException {\n+        try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/AppMultiServices.yml\")) {\n+            String yamlFile = streamToString(yamlStream);\n+            List<URL> urls = ConfigParser.parseConfigurators(yamlFile, \"service1\");\n+            Assert.assertNotNull(urls);\n+            Assert.assertEquals(2, urls.size());\n+            URL url = urls.get(0);\n+            Assert.assertEquals(\"127.0.0.1\", url.getAddress());\n+            Assert.assertEquals(\"service1\", url.getServiceInterface());\n+            Assert.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n+            Assert.assertEquals(\"random\", url.getParameter(Constants.LOADBALANCE_KEY));\n+            Assert.assertEquals(url.getParameter(Constants.APPLICATION_KEY), \"demo-consumer\");\n+\n+            List<URL> urls2 = ConfigParser.parseConfigurators(yamlFile, \"service-not-exist\");\n+            Assert.assertNotNull(urls2);\n+            Assert.assertEquals(0, urls2.size());\n+        }\n     }\n \n \n     @Test\n-    public void parseConfiguratorsAppAnyServicesTest() {\n-        InputStream yamlStream = this.getClass().getResourceAsStream(\"/AppAnyServices.yml\");\n-        List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream), \"service1\");\n-        Assert.assertNotNull(urls);\n-        Assert.assertEquals(2, urls.size());\n-        URL url = urls.get(0);\n-        Assert.assertEquals(\"127.0.0.1\", url.getAddress());\n-        Assert.assertEquals(\"*\", url.getServiceInterface());\n-        Assert.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n-        Assert.assertEquals(\"random\", url.getParameter(Constants.LOADBALANCE_KEY));\n-        Assert.assertEquals(url.getParameter(Constants.APPLICATION_KEY), \"demo-consumer\");\n+    public void parseConfiguratorsAppAnyServicesTest() throws IOException {\n+        try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/AppAnyServices.yml\")) {\n+            List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream), \"service1\");\n+            Assert.assertNotNull(urls);\n+            Assert.assertEquals(2, urls.size());\n+            URL url = urls.get(0);\n+            Assert.assertEquals(\"127.0.0.1\", url.getAddress());\n+            Assert.assertEquals(\"*\", url.getServiceInterface());\n+            Assert.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n+            Assert.assertEquals(\"random\", url.getParameter(Constants.LOADBALANCE_KEY));\n+            Assert.assertEquals(url.getParameter(Constants.APPLICATION_KEY), \"demo-consumer\");\n+        }\n     }\n \n     @Test\n-    public void parseConfiguratorsAppNoServiceTest() {\n-        InputStream yamlStream = this.getClass().getResourceAsStream(\"/AppNoService.yml\");\n-        List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream), \"service1\");\n-        Assert.assertNotNull(urls);\n-        Assert.assertEquals(1, urls.size());\n-        URL url = urls.get(0);\n-        Assert.assertEquals(\"127.0.0.1\", url.getAddress());\n-        Assert.assertEquals(\"*\", url.getServiceInterface());\n-        Assert.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n-        Assert.assertEquals(\"random\", url.getParameter(Constants.LOADBALANCE_KEY));\n-        Assert.assertEquals(url.getParameter(Constants.APPLICATION_KEY), \"demo-consumer\");\n+    public void parseConfiguratorsAppNoServiceTest() throws IOException {\n+        try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/AppNoService.yml\")) {\n+            List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream), \"service1\");\n+            Assert.assertNotNull(urls);\n+            Assert.assertEquals(1, urls.size());\n+            URL url = urls.get(0);\n+            Assert.assertEquals(\"127.0.0.1\", url.getAddress());\n+            Assert.assertEquals(\"*\", url.getServiceInterface());\n+            Assert.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n+            Assert.assertEquals(\"random\", url.getParameter(Constants.LOADBALANCE_KEY));\n+            Assert.assertEquals(url.getParameter(Constants.APPLICATION_KEY), \"demo-consumer\");\n+        }\n     }\n \n     @Test\n-    public void parseConsumerSpecificProvidersTest() {\n-        InputStream yamlStream = this.getClass().getResourceAsStream(\"/ConsumerSpecificProviders.yml\");\n-        List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream), \"service1\");\n-        Assert.assertNotNull(urls);\n-        Assert.assertEquals(1, urls.size());\n-        URL url = urls.get(0);\n-        Assert.assertEquals(\"127.0.0.1\", url.getAddress());\n-        Assert.assertEquals(\"*\", url.getServiceInterface());\n-        Assert.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n-        Assert.assertEquals(\"random\", url.getParameter(Constants.LOADBALANCE_KEY));\n-        Assert.assertEquals(\"127.0.0.1:20880\", url.getParameter(Constants.OVERRIDE_PROVIDERS_KEY));\n-        Assert.assertEquals(url.getParameter(Constants.APPLICATION_KEY), \"demo-consumer\");\n+    public void parseConsumerSpecificProvidersTest() throws IOException {\n+        try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/ConsumerSpecificProviders.yml\")) {\n+            List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream), \"service1\");\n+            Assert.assertNotNull(urls);\n+            Assert.assertEquals(1, urls.size());\n+            URL url = urls.get(0);\n+            Assert.assertEquals(\"127.0.0.1\", url.getAddress());\n+            Assert.assertEquals(\"*\", url.getServiceInterface());\n+            Assert.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n+            Assert.assertEquals(\"random\", url.getParameter(Constants.LOADBALANCE_KEY));\n+            Assert.assertEquals(\"127.0.0.1:20880\", url.getParameter(Constants.OVERRIDE_PROVIDERS_KEY));\n+            Assert.assertEquals(url.getParameter(Constants.APPLICATION_KEY), \"demo-consumer\");\n+        }\n     }\n \n }",
      "parent_sha": "d4d827e11c7ac832ec60e087f92f30f93fa1d478"
    }
  },
  {
    "oid": "240c1dc61fe3f36164f3eaba6efe40b5825da1d2",
    "message": "Fix DubboTestChecker NPE (#9081)",
    "date": "2021-10-21T03:25:31Z",
    "url": "https://github.com/apache/dubbo/commit/240c1dc61fe3f36164f3eaba6efe40b5825da1d2",
    "details": {
      "sha": "4ced951df5f8eb1acfbba04bb954082489efeaa9",
      "filename": "dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/DubboTestChecker.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/dubbo/blob/240c1dc61fe3f36164f3eaba6efe40b5825da1d2/dubbo-test%2Fdubbo-test-check%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Ftest%2Fcheck%2FDubboTestChecker.java",
      "raw_url": "https://github.com/apache/dubbo/raw/240c1dc61fe3f36164f3eaba6efe40b5825da1d2/dubbo-test%2Fdubbo-test-check%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Ftest%2Fcheck%2FDubboTestChecker.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-test%2Fdubbo-test-check%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Ftest%2Fcheck%2FDubboTestChecker.java?ref=240c1dc61fe3f36164f3eaba6efe40b5825da1d2",
      "patch": "@@ -179,7 +179,9 @@ private void printThreadCheckingSummaryReport() {\n \n     private void flushReportFile() {\n         try {\n-            reportWriter.flush();\n+            if (reportWriter != null) {\n+                reportWriter.flush();\n+            }\n             if (reportFileOut != null) {\n                 reportFileOut.getFD().sync();\n             }",
      "parent_sha": "3df4f588b9084a33334d0b7822c18feeac5149cc"
    }
  },
  {
    "oid": "f3e78c2e37091a99a5696bc450f49178d87b6fe2",
    "message": "fix variable name typo in ServiceConfig.java (#5840)",
    "date": "2020-03-10T12:56:13Z",
    "url": "https://github.com/apache/dubbo/commit/f3e78c2e37091a99a5696bc450f49178d87b6fe2",
    "details": {
      "sha": "0792d12957dfd90d50b093fd79c40dfd7803ada3",
      "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/apache/dubbo/blob/f3e78c2e37091a99a5696bc450f49178d87b6fe2/dubbo-config%2Fdubbo-config-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2FServiceConfig.java",
      "raw_url": "https://github.com/apache/dubbo/raw/f3e78c2e37091a99a5696bc450f49178d87b6fe2/dubbo-config%2Fdubbo-config-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2FServiceConfig.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config%2Fdubbo-config-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fconfig%2FServiceConfig.java?ref=f3e78c2e37091a99a5696bc450f49178d87b6fe2",
      "patch": "@@ -685,11 +685,11 @@ private Integer parsePort(String configPort) {\n \n     private String getValueFromConfig(ProtocolConfig protocolConfig, String key) {\n         String protocolPrefix = protocolConfig.getName().toUpperCase() + \"_\";\n-        String port = ConfigUtils.getSystemProperty(protocolPrefix + key);\n-        if (StringUtils.isEmpty(port)) {\n-            port = ConfigUtils.getSystemProperty(key);\n+        String value = ConfigUtils.getSystemProperty(protocolPrefix + key);\n+        if (StringUtils.isEmpty(value)) {\n+            value = ConfigUtils.getSystemProperty(key);\n         }\n-        return port;\n+        return value;\n     }\n \n     private Integer getRandomPort(String protocol) {",
      "parent_sha": "37d7fc123d4bdbb0847b1f91dd776191b79ac420"
    }
  },
  {
    "oid": "78bb3dc0496fa149d0317f667c859a6f7e1448fd",
    "message": "Update EchoFilterTest.java (#13215)",
    "date": "2023-10-17T08:55:42Z",
    "url": "https://github.com/apache/dubbo/commit/78bb3dc0496fa149d0317f667c859a6f7e1448fd",
    "details": {
      "sha": "3408b2ebc5a67da5035e581de99d9ed4cf730475",
      "filename": "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/EchoFilterTest.java",
      "status": "modified",
      "additions": 16,
      "deletions": 18,
      "changes": 34,
      "blob_url": "https://github.com/apache/dubbo/blob/78bb3dc0496fa149d0317f667c859a6f7e1448fd/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Ffilter%2FEchoFilterTest.java",
      "raw_url": "https://github.com/apache/dubbo/raw/78bb3dc0496fa149d0317f667c859a6f7e1448fd/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Ffilter%2FEchoFilterTest.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Ffilter%2FEchoFilterTest.java?ref=78bb3dc0496fa149d0317f667c859a6f7e1448fd",
      "patch": "@@ -38,20 +38,9 @@ class EchoFilterTest {\n     @SuppressWarnings(\"unchecked\")\n     @Test\n     void testEcho() {\n-        Invocation invocation = mock(RpcInvocation.class);\n+        Invocation invocation = createMockRpcInvocation();\n+        Invoker<DemoService> invoker = createMockInvoker(invocation);\n         given(invocation.getMethodName()).willReturn(\"$echo\");\n-        given(invocation.getParameterTypes()).willReturn(new Class<?>[]{Enum.class});\n-        given(invocation.getArguments()).willReturn(new Object[]{\"hello\"});\n-        given(invocation.getObjectAttachments()).willReturn(null);\n-\n-        Invoker<DemoService> invoker = mock(Invoker.class);\n-        given(invoker.isAvailable()).willReturn(true);\n-        given(invoker.getInterface()).willReturn(DemoService.class);\n-        AppResponse result = new AppResponse();\n-        result.setValue(\"High\");\n-        given(invoker.invoke(invocation)).willReturn(result);\n-        URL url = URL.valueOf(\"test://test:11/test?group=dubbo&version=1.1\");\n-        given(invoker.getUrl()).willReturn(url);\n \n         Result filterResult = echoFilter.invoke(invoker, invocation);\n         assertEquals(\"hello\", filterResult.getValue());\n@@ -60,22 +49,31 @@ void testEcho() {\n     @SuppressWarnings(\"unchecked\")\n     @Test\n     void testNonEcho() {\n-        Invocation invocation = mock(Invocation.class);\n+        Invocation invocation = createMockRpcInvocation();\n+        Invoker<DemoService> invoker = createMockInvoker(invocation);\n         given(invocation.getMethodName()).willReturn(\"echo\");\n+\n+        Result filterResult = echoFilter.invoke(invoker, invocation);\n+        assertEquals(\"High\", filterResult.getValue());\n+    }\n+\n+    Invocation createMockRpcInvocation() {\n+        Invocation invocation = mock(RpcInvocation.class);\n         given(invocation.getParameterTypes()).willReturn(new Class<?>[]{Enum.class});\n         given(invocation.getArguments()).willReturn(new Object[]{\"hello\"});\n         given(invocation.getObjectAttachments()).willReturn(null);\n-\n+        return invocation;\n+    }\n+    Invoker<DemoService> createMockInvoker(Invocation invocation){\n         Invoker<DemoService> invoker = mock(Invoker.class);\n         given(invoker.isAvailable()).willReturn(true);\n         given(invoker.getInterface()).willReturn(DemoService.class);\n+\n         AppResponse result = new AppResponse();\n         result.setValue(\"High\");\n         given(invoker.invoke(invocation)).willReturn(result);\n         URL url = URL.valueOf(\"test://test:11/test?group=dubbo&version=1.1\");\n         given(invoker.getUrl()).willReturn(url);\n-\n-        Result filterResult = echoFilter.invoke(invoker, invocation);\n-        assertEquals(\"High\", filterResult.getValue());\n+        return invoker;\n     }\n }",
      "parent_sha": "bf0522d7e017a5b6d1acc3c1cf1ec6351e3fd86f"
    }
  },
  {
    "oid": "b149378a212c72867afe10684c1505305103f5cb",
    "message": "a more elegant way (#3567)",
    "date": "2019-02-26T06:11:54Z",
    "url": "https://github.com/apache/dubbo/commit/b149378a212c72867afe10684c1505305103f5cb",
    "details": {
      "sha": "3abeb660a6464b6cdd4d7627ec9607fc89412d8e",
      "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/timer/HashedWheelTimer.java",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/apache/dubbo/blob/b149378a212c72867afe10684c1505305103f5cb/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Ftimer%2FHashedWheelTimer.java",
      "raw_url": "https://github.com/apache/dubbo/raw/b149378a212c72867afe10684c1505305103f5cb/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Ftimer%2FHashedWheelTimer.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fcommon%2Ftimer%2FHashedWheelTimer.java?ref=b149378a212c72867afe10684c1505305103f5cb",
      "patch": "@@ -290,11 +290,13 @@ private static HashedWheelBucket[] createWheel(int ticksPerWheel) {\n     }\n \n     private static int normalizeTicksPerWheel(int ticksPerWheel) {\n-        int normalizedTicksPerWheel = 1;\n-        while (normalizedTicksPerWheel < ticksPerWheel) {\n-            normalizedTicksPerWheel <<= 1;\n-        }\n-        return normalizedTicksPerWheel;\n+        int normalizedTicksPerWheel = ticksPerWheel - 1;\n+        normalizedTicksPerWheel |= normalizedTicksPerWheel >>> 1;\n+        normalizedTicksPerWheel |= normalizedTicksPerWheel >>> 2;\n+        normalizedTicksPerWheel |= normalizedTicksPerWheel >>> 4;\n+        normalizedTicksPerWheel |= normalizedTicksPerWheel >>> 8;\n+        normalizedTicksPerWheel |= normalizedTicksPerWheel >>> 16;\n+        return normalizedTicksPerWheel + 1;\n     }\n \n     /**",
      "parent_sha": "5434ab74c724e4ed0f4b7dab11e6758a0a9c48d8"
    }
  },
  {
    "oid": "d07d6ba02a7eeaafb696a7069be6dea277955cc7",
    "message": "\u4fee\u6539\u6587\u672c\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@445 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2011-11-30T06:14:17Z",
    "url": "https://github.com/apache/dubbo/commit/d07d6ba02a7eeaafb696a7069be6dea277955cc7",
    "details": {
      "sha": "a424d15248c33439041c839673638fc64673e1fd",
      "filename": "dubbo-monitor-simple/src/main/java/com/alibaba/dubbo/monitor/simple/SimpleMonitorService.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/dubbo/blob/d07d6ba02a7eeaafb696a7069be6dea277955cc7/dubbo-monitor-simple%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fmonitor%2Fsimple%2FSimpleMonitorService.java",
      "raw_url": "https://github.com/apache/dubbo/raw/d07d6ba02a7eeaafb696a7069be6dea277955cc7/dubbo-monitor-simple%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fmonitor%2Fsimple%2FSimpleMonitorService.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-monitor-simple%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fmonitor%2Fsimple%2FSimpleMonitorService.java?ref=d07d6ba02a7eeaafb696a7069be6dea277955cc7",
      "patch": "@@ -23,6 +23,7 @@\n import java.io.FileReader;\r\n import java.io.FileWriter;\r\n import java.io.IOException;\r\n+import java.text.DecimalFormat;\r\n import java.text.ParseException;\r\n import java.text.SimpleDateFormat;\r\n import java.util.Date;\r\n@@ -253,7 +254,7 @@ private static void createChart(String key, String date, String[] types, Map<Str\n             xydataset.addSeries(timeseries);\r\n         }\r\n         JFreeChart jfreechart = ChartFactory.createTimeSeriesChart(\r\n-                \"max: \" + summary[0] + (summary[1] >=0 ? \", min: \" + summary[1] : \"\") + \", avg: \" + summary[2] + (summary[3] >=0 ? \", sum: \" + summary[3] : \"\"), toDisplayDate(date), key, xydataset, true, true, false);\r\n+                \"max: \" + summary[0] + (summary[1] >=0 ? \" min: \" + summary[1] : \"\") + \" avg: \" + summary[2] + (summary[3] >=0 ? \" sum: \" + new DecimalFormat(\"###,##0\").format(summary[3]) : \"\"), toDisplayDate(date), key, xydataset, true, true, false);\r\n         jfreechart.setBackgroundPaint(Color.WHITE);\r\n         XYPlot xyplot = (XYPlot) jfreechart.getPlot();\r\n         xyplot.setBackgroundPaint(Color.WHITE);\r",
      "parent_sha": "2f390bcef77c7ea3494ff881a776239df08ce686"
    }
  },
  {
    "oid": "b3305e30228263f9af0880db4cb1efe35c45ae45",
    "message": "DUBBO-128 \u4fee\u590d\u57df\u540d\u8bbf\u95eeBUG\uff0c\u539f\u56e0\u662f\u62ffurl.host\u53bb\u548csocket.address\u5bf9\u6bd4\u9519\u8bef\u3002\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@649 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2011-12-12T08:20:48Z",
    "url": "https://github.com/apache/dubbo/commit/b3305e30228263f9af0880db4cb1efe35c45ae45",
    "details": {
      "sha": "60639e6b7fb8d2d45fccdd2e3f7fd5c8c57caaa8",
      "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
      "status": "modified",
      "additions": 21,
      "deletions": 1,
      "changes": 22,
      "blob_url": "https://github.com/apache/dubbo/blob/b3305e30228263f9af0880db4cb1efe35c45ae45/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2FURL.java",
      "raw_url": "https://github.com/apache/dubbo/raw/b3305e30228263f9af0880db4cb1efe35c45ae45/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2FURL.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2FURL.java?ref=b3305e30228263f9af0880db4cb1efe35c45ae45",
      "patch": "@@ -86,6 +86,8 @@ public final class URL implements Serializable {\n \r\n     private final Map<String, String> parameters;\r\n     \r\n+    private volatile transient String ip;\r\n+    \r\n     private final transient Map<String, Number> numbers = new ConcurrentHashMap<String, Number>();\r\n     \r\n     protected URL() {\r\n@@ -238,7 +240,25 @@ public String getPassword() {\n \tpublic String getHost() {\r\n \t\treturn host;\r\n \t}\r\n-\r\n+\t\r\n+\t/**\r\n+\t * \u83b7\u53d6IP\u5730\u5740.\r\n+\t * \r\n+\t * \u8bf7\u6ce8\u610f\uff1a\r\n+\t * \u5982\u679c\u548cSocket\u7684\u5730\u5740\u5bf9\u6bd4\uff0c\r\n+\t * \u6216\u7528\u5730\u5740\u4f5c\u4e3aMap\u7684Key\u67e5\u627e\uff0c\r\n+\t * \u8bf7\u4f7f\u7528IP\u800c\u4e0d\u662fHost\uff0c\r\n+\t * \u5426\u5219\u914d\u7f6e\u57df\u540d\u4f1a\u6709\u95ee\u9898\r\n+\t * \r\n+\t * @return ip\r\n+\t */\r\n+\tpublic String getIp() {\r\n+\t    if (ip == null) {\r\n+\t        ip = NetUtils.getIpByHost(host);\r\n+\t    }\r\n+\t    return ip;\r\n+\t}\r\n+\t\r\n \tpublic int getPort() {\r\n \t\treturn port;\r\n \t}\r",
      "parent_sha": "685b948e9689257724c479ec043964d5fb2e8b0c"
    }
  },
  {
    "oid": "1c39a5704199fb122896bd8bf6df0892ba5c0355",
    "message": "\u51cf\u5c11RpcException\u5d4c\u5957\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@992 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2012-02-20T17:45:11Z",
    "url": "https://github.com/apache/dubbo/commit/1c39a5704199fb122896bd8bf6df0892ba5c0355",
    "details": {
      "sha": "1ee93ec827a0176c3e041fe5e63dc1a60c0bb995",
      "filename": "dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/support/ForkingClusterInvoker.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/1c39a5704199fb122896bd8bf6df0892ba5c0355/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fcluster%2Fsupport%2FForkingClusterInvoker.java",
      "raw_url": "https://github.com/apache/dubbo/raw/1c39a5704199fb122896bd8bf6df0892ba5c0355/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fcluster%2Fsupport%2FForkingClusterInvoker.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fcluster%2Fsupport%2FForkingClusterInvoker.java?ref=1c39a5704199fb122896bd8bf6df0892ba5c0355",
      "patch": "@@ -89,7 +89,7 @@ public void run() {\n             Object ret = ref.poll(timeout, TimeUnit.MILLISECONDS);\r\n             if (ret instanceof Throwable) {\r\n                 Throwable e = (Throwable) ret;\r\n-                throw new RpcException(e instanceof RpcException ? ((RpcException)e).getCode() : 0, \"Failed to forking invoke provider \" + selected + \", but no luck to perform the invocation. Last error is: \" + e.getMessage(), e);\r\n+                throw new RpcException(e instanceof RpcException ? ((RpcException)e).getCode() : 0, \"Failed to forking invoke provider \" + selected + \", but no luck to perform the invocation. Last error is: \" + e.getMessage(), e.getCause() != null ? e.getCause() : e);\r\n             }\r\n             return (Result) ret;\n         } catch (InterruptedException e) {",
      "parent_sha": "ea7b42bdf0d40f2b458c6601d8080fcd1d37fb62"
    }
  },
  {
    "oid": "e6b85fd2410aaba8a501306cf1af0726de4694f5",
    "message": "    #1731: checkMultiExtension in com.alibaba.dubbo.config.AbstractInterfaceConfig should be in setter instead of getter (#1732)",
    "date": "2018-05-04T02:53:03Z",
    "url": "https://github.com/apache/dubbo/commit/e6b85fd2410aaba8a501306cf1af0726de4694f5",
    "details": {
      "sha": "fd3000e70674f5de604a05271c5e7986d981ce68",
      "filename": "dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractInterfaceConfig.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/e6b85fd2410aaba8a501306cf1af0726de4694f5/dubbo-config%2Fdubbo-config-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fconfig%2FAbstractInterfaceConfig.java",
      "raw_url": "https://github.com/apache/dubbo/raw/e6b85fd2410aaba8a501306cf1af0726de4694f5/dubbo-config%2Fdubbo-config-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fconfig%2FAbstractInterfaceConfig.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config%2Fdubbo-config-api%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fconfig%2FAbstractInterfaceConfig.java?ref=e6b85fd2410aaba8a501306cf1af0726de4694f5",
      "patch": "@@ -410,11 +410,11 @@ public void setFilter(String filter) {\n \r\n     @Parameter(key = Constants.INVOKER_LISTENER_KEY, append = true)\r\n     public String getListener() {\r\n-        checkMultiExtension(InvokerListener.class, \"listener\", listener);\r\n         return listener;\r\n     }\r\n \r\n     public void setListener(String listener) {\r\n+        checkMultiExtension(InvokerListener.class, \"listener\", listener);\r\n         this.listener = listener;\r\n     }\r\n \r",
      "parent_sha": "04ffae08869dec8a69977c47ec78f778dcb03649"
    }
  },
  {
    "oid": "ed68823da46569b406b11f01df5c60d8c0ac3e9c",
    "message": "I18N code, change to apache license, and remove author info",
    "date": "2017-12-18T06:27:26Z",
    "url": "https://github.com/apache/dubbo/commit/ed68823da46569b406b11f01df5c60d8c0ac3e9c",
    "details": {
      "sha": "ae3552af0ec73e913c0e429c87bd0bb9a59a2875",
      "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/Constants.java",
      "status": "modified",
      "additions": 41,
      "deletions": 28,
      "changes": 69,
      "blob_url": "https://github.com/apache/dubbo/blob/ed68823da46569b406b11f01df5c60d8c0ac3e9c/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2FConstants.java",
      "raw_url": "https://github.com/apache/dubbo/raw/ed68823da46569b406b11f01df5c60d8c0ac3e9c/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2FConstants.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2FConstants.java?ref=ed68823da46569b406b11f01df5c60d8c0ac3e9c",
      "patch": "@@ -1,27 +1,27 @@\n /*\n- * Copyright 1999-2011 Alibaba Group.\n- *  \n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *  \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *  \n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.alibaba.dubbo.common;\n \n import java.util.concurrent.ExecutorService;\n import java.util.regex.Pattern;\n \n /**\n  * Constants\n- *\n- * @author william.liangf\n  */\n public class Constants {\n \n@@ -401,56 +401,63 @@ public class Constants {\n     public static final String MERGER_KEY = \"merger\";\n \n     /**\n-     * \u96c6\u7fa4\u65f6\u662f\u5426\u6392\u9664\u975eavailable\u7684invoker\n+     * To decide whether to exclude unavailable invoker from the cluster\n      */\n     public static final String CLUSTER_AVAILABLE_CHECK_KEY = \"cluster.availablecheck\";\n \n     /**\n+     * The default value of cluster.availablecheck\n+     *\n+     * @see #CLUSTER_AVAILABLE_CHECK_KEY\n      */\n     public static final boolean DEFAULT_CLUSTER_AVAILABLE_CHECK = true;\n \n     /**\n-     * \u96c6\u7fa4\u65f6\u662f\u5426\u542f\u7528sticky\u7b56\u7565\n+     * To decide whether to enable sticky strategy for cluster\n      */\n     public static final String CLUSTER_STICKY_KEY = \"sticky\";\n \n     /**\n-     * sticky\u9ed8\u8ba4\u503c.\n+     * The default value of sticky\n+     *\n+     * @see #CLUSTER_STICKY_KEY\n      */\n     public static final boolean DEFAULT_CLUSTER_STICKY = false;\n \n     /**\n-     * \u521b\u5efaclient\u65f6\uff0c\u662f\u5426\u5148\u8981\u5efa\u7acb\u8fde\u63a5\u3002\n+     * To decide whether to make connection when the client is created\n      */\n     public static final String LAZY_CONNECT_KEY = \"lazy\";\n \n     /**\n-     * lazy\u8fde\u63a5\u7684\u521d\u59cb\u72b6\u6001\u662f\u8fde\u63a5\u72b6\u6001\u8fd8\u662f\u975e\u8fde\u63a5\u72b6\u6001\uff1f\n+     * The initial state for lazy connection\n      */\n     public static final String LAZY_CONNECT_INITIAL_STATE_KEY = \"connect.lazy.initial.state\";\n \n     /**\n-     * lazy\u8fde\u63a5\u7684\u521d\u59cb\u72b6\u6001\u9ed8\u8ba4\u662f\u8fde\u63a5\u72b6\u6001.\n+     * The default value of lazy connection's initial state: true\n+     *\n+     * @see #LAZY_CONNECT_INITIAL_STATE_KEY\n      */\n     public static final boolean DEFAULT_LAZY_CONNECT_INITIAL_STATE = true;\n \n     /**\n-     * \u6ce8\u518c\u4e2d\u5fc3\u662f\u5426\u540c\u6b65\u5b58\u50a8\u6587\u4ef6\uff0c\u9ed8\u8ba4\u5f02\u6b65\n+     * To decide whether register center saves file synchronously, the default value is asynchronously\n      */\n     public static final String REGISTRY_FILESAVE_SYNC_KEY = \"save.file\";\n \n     /**\n-     * \u6ce8\u518c\u4e2d\u5fc3\u5931\u8d25\u4e8b\u4ef6\u91cd\u8bd5\u4e8b\u4ef6\n+     * Period of registry center's retry interval\n      */\n     public static final String REGISTRY_RETRY_PERIOD_KEY = \"retry.period\";\n \n     /**\n-     * \u91cd\u8bd5\u5468\u671f\n+     * Default value for the period of retry interval in milliseconds: 5000\n      */\n     public static final int DEFAULT_REGISTRY_RETRY_PERIOD = 5 * 1000;\n \n     /**\n-     * \u6ce8\u518c\u4e2d\u5fc3\u81ea\u52a8\u91cd\u8fde\u65f6\u95f4\n+     * Reconnection period in milliseconds for register center\n      */\n     public static final String REGISTRY_RECONNECT_PERIOD_KEY = \"reconnect.period\";\n \n@@ -461,12 +468,12 @@ public class Constants {\n     public static final int DEFAULT_SESSION_TIMEOUT = 60 * 1000;\n \n     /**\n-     * \u6ce8\u518c\u4e2d\u5fc3\u5bfc\u51faURL\u53c2\u6570\u7684KEY\n+     * The key name for export URL in register center\n      */\n     public static final String EXPORT_KEY = \"export\";\n \n     /**\n-     * \u6ce8\u518c\u4e2d\u5fc3\u5f15\u7528URL\u53c2\u6570\u7684KEY\n+     * The key name for reference URL in register center\n      */\n     public static final String REFER_KEY = \"refer\";\n \n@@ -476,12 +483,14 @@ public class Constants {\n     public static final String CALLBACK_SERVICE_KEY = \"callback.service.instid\";\n \n     /**\n-     * \u6bcf\u4e2a\u5ba2\u6237\u7aef\u540c\u4e00\u4e2a\u63a5\u53e3 callback\u670d\u52a1\u5b9e\u4f8b\u7684\u9650\u5236\n+     * The limit of callback service instances for one interface on every client\n      */\n     public static final String CALLBACK_INSTANCES_LIMIT_KEY = \"callbacks\";\n \n     /**\n-     * \u6bcf\u4e2a\u5ba2\u6237\u7aef\u540c\u4e00\u4e2a\u63a5\u53e3 callback\u670d\u52a1\u5b9e\u4f8b\u7684\u9650\u5236\n+     * The default limit number for callback service instances\n+     *\n+     * @see #CALLBACK_INSTANCES_LIMIT_KEY\n      */\n     public static final int DEFAULT_CALLBACK_INSTANCES = 1;\n \n@@ -490,7 +499,7 @@ public class Constants {\n     public static final String IS_CALLBACK_SERVICE = \"is_callback_service\";\n \n     /**\n-     * channel\u4e2dcallback\u7684invokers\n+     * Invokers in channel's callback\n      */\n     public static final String CHANNEL_CALLBACK_KEY = \"channel.callback.invokers.key\";\n \n@@ -502,7 +511,7 @@ public class Constants {\n     public static final String IS_SERVER_KEY = \"isserver\";\n \n     /**\n-     * \u9ed8\u8ba4\u503c\u6beb\u79d2\uff0c\u907f\u514d\u91cd\u65b0\u8ba1\u7b97.\n+     * Default timeout value in milliseconds for server shutdown\n      */\n     public static final int DEFAULT_SERVER_SHUTDOWN_TIMEOUT = 10000;\n \n@@ -532,7 +541,9 @@ public class Constants {\n \n     public static final String RUNTIME_KEY = \"runtime\";\n \n-    // when ROUTER_KEY's value is set to ROUTER_TYPE_CLEAR, RegistryDirectory will clean all current routers\n+    /**\n+     * when ROUTER_KEY's value is set to ROUTER_TYPE_CLEAR, RegistryDirectory will clean all current routers\n+     */\n     public static final String ROUTER_TYPE_CLEAR = \"clean\";\n \n     public static final String DEFAULT_SCRIPT_TYPE_KEY = \"javascript\";\n@@ -543,7 +554,9 @@ public class Constants {\n \n     public static final String STUB_EVENT_METHODS_KEY = \"dubbo.stub.event.methods\";\n \n-    //invocation attachment\u5c5e\u6027\u4e2d\u5982\u679c\u6709\u6b64\u503c\uff0c\u5219\u9009\u62e9mock invoker\n+    /**\n+     * When this attribute appears in invocation's attachment, mock invoker will be used\n+     */\n     public static final String INVOCATION_NEED_MOCK = \"invocation.need.mock\";\n \n     public static final String LOCAL_PROTOCOL = \"injvm\";",
      "parent_sha": "c774436e602af8510ea24078803a8a26de32f4e2"
    }
  },
  {
    "oid": "6cf5d6ff4c3fae4650e2b0ac612c99d309c64ea2",
    "message": "\u4fee\u6539CallbackCodec\u7684\u65e5\u5fd7\u7ea7\u522b\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@1210 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2012-03-08T08:18:30Z",
    "url": "https://github.com/apache/dubbo/commit/6cf5d6ff4c3fae4650e2b0ac612c99d309c64ea2",
    "details": {
      "sha": "4b6895635bb4c72b2556a1e6ef96aa2fce03ae04",
      "filename": "dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/dubbo/blob/6cf5d6ff4c3fae4650e2b0ac612c99d309c64ea2/dubbo-rpc-default%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fdubbo%2FCallbackServiceCodec.java",
      "raw_url": "https://github.com/apache/dubbo/raw/6cf5d6ff4c3fae4650e2b0ac612c99d309c64ea2/dubbo-rpc-default%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fdubbo%2FCallbackServiceCodec.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc-default%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2Fprotocol%2Fdubbo%2FCallbackServiceCodec.java?ref=6cf5d6ff4c3fae4650e2b0ac612c99d309c64ea2",
      "patch": "@@ -259,7 +259,9 @@ public static Object decodeInvocationArgument(Channel channel, RpcInvocation inv\n         try {\r\n             url = DubboProtocol.getDubboProtocol().getInvoker(channel, inv).getUrl();\r\n         } catch (RemotingException e) {\r\n-            logger.info(e.getMessage(), e);\r\n+            if (logger.isInfoEnabled()) {\r\n+                logger.info(e.getMessage(), e);\r\n+            }\r\n             return inObject;\r\n         }\n         byte callbackstatus = isCallBack(url, inv.getMethodName(), paraIndex);",
      "parent_sha": "b86fc4194624e78f70b60b389a4831871ef1829b"
    }
  },
  {
    "oid": "d2c0d1b1a66bb6512f8b30c397f3219f4843d738",
    "message": "\u4fee\u6539\u5b9a\u65f6\u65f6\u95f4\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@468 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2011-11-30T11:04:18Z",
    "url": "https://github.com/apache/dubbo/commit/d2c0d1b1a66bb6512f8b30c397f3219f4843d738",
    "details": {
      "sha": "823eec063f293b42a8bf792e16d979ce36942354",
      "filename": "dubbo-monitor-simple/src/main/java/com/alibaba/dubbo/monitor/simple/SimpleMonitorService.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/d2c0d1b1a66bb6512f8b30c397f3219f4843d738/dubbo-monitor-simple%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fmonitor%2Fsimple%2FSimpleMonitorService.java",
      "raw_url": "https://github.com/apache/dubbo/raw/d2c0d1b1a66bb6512f8b30c397f3219f4843d738/dubbo-monitor-simple%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fmonitor%2Fsimple%2FSimpleMonitorService.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-monitor-simple%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fmonitor%2Fsimple%2FSimpleMonitorService.java?ref=d2c0d1b1a66bb6512f8b30c397f3219f4843d738",
      "patch": "@@ -105,7 +105,7 @@ public void run() {\n                     logger.error(\"Unexpected error occur at reconnect, cause: \" + t.getMessage(), t);\r\n                 }\r\n             }\r\n-        }, 1, 1, TimeUnit.MINUTES);\r\n+        }, 1, 5, TimeUnit.MINUTES);\r\n         INSTANCE = this;\r\n     }\r\n \r",
      "parent_sha": "c8c9d32969349ac00a719323796f71440ebb53c6"
    }
  },
  {
    "oid": "4619aab86910c40d3192fef655972ef40858d136",
    "message": "to meet new onResponse signature: return directly",
    "date": "2019-09-09T06:47:42Z",
    "url": "https://github.com/apache/dubbo/commit/4619aab86910c40d3192fef655972ef40858d136",
    "details": {
      "sha": "c2d13d6fa4105bf0b8b0d866a2fa7f270f604594",
      "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericFilter.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/4619aab86910c40d3192fef655972ef40858d136/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Ffilter%2FGenericFilter.java",
      "raw_url": "https://github.com/apache/dubbo/raw/4619aab86910c40d3192fef655972ef40858d136/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Ffilter%2FGenericFilter.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Ffilter%2FGenericFilter.java?ref=4619aab86910c40d3192fef655972ef40858d136",
      "patch": "@@ -192,7 +192,7 @@ public void onResponse(Result appResponse, Invoker<?> invoker, Invocation inv) {\n                                 \"] serialize result failed.\", e);\n                     }\n                 } else if(ProtocolUtils.isGenericReturnRawResult(generic)) {\n-                    return result;\n+                    return;\n                 } else {\n                     appResponse.setValue(PojoUtils.generalize(appResponse.getValue()));\n                 }",
      "parent_sha": "69d984e90c03e1653248364c6ee984d656c61a8d"
    }
  },
  {
    "oid": "5aa660ce1d5e4663494f0fddc15544369a22c93e",
    "message": "Fix duplicate ssl init (#9959)",
    "date": "2022-04-22T14:20:32Z",
    "url": "https://github.com/apache/dubbo/commit/5aa660ce1d5e4663494f0fddc15544369a22c93e",
    "details": {
      "sha": "51125bda346358f73241f6b7107f5baaf315420c",
      "filename": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/api/PortUnificationServer.java",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/apache/dubbo/blob/5aa660ce1d5e4663494f0fddc15544369a22c93e/dubbo-remoting%2Fdubbo-remoting-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fremoting%2Fapi%2FPortUnificationServer.java",
      "raw_url": "https://github.com/apache/dubbo/raw/5aa660ce1d5e4663494f0fddc15544369a22c93e/dubbo-remoting%2Fdubbo-remoting-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fremoting%2Fapi%2FPortUnificationServer.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting%2Fdubbo-remoting-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fremoting%2Fapi%2FPortUnificationServer.java?ref=5aa660ce1d5e4663494f0fddc15544369a22c93e",
      "patch": "@@ -35,6 +35,7 @@\n import io.netty.channel.EventLoopGroup;\n import io.netty.channel.group.DefaultChannelGroup;\n import io.netty.channel.socket.SocketChannel;\n+import io.netty.handler.ssl.SslContext;\n import io.netty.util.concurrent.Future;\n import io.netty.util.concurrent.GlobalEventExecutor;\n \n@@ -111,6 +112,13 @@ protected void doOpen() {\n             getUrl().getPositiveParameter(IO_THREADS_KEY, Constants.DEFAULT_IO_THREADS),\n             EVENT_LOOP_WORKER_POOL_NAME);\n \n+        final boolean enableSsl = getUrl().getParameter(SSL_ENABLED_KEY, false);\n+        final SslContext sslContext;\n+        if (enableSsl) {\n+            sslContext = SslContexts.buildServerSslContext(url);\n+        } else {\n+            sslContext = null;\n+        }\n         bootstrap.group(bossGroup, workerGroup)\n             .channel(NettyEventLoopFactory.serverSocketChannelClass())\n             .option(ChannelOption.SO_REUSEADDR, Boolean.TRUE)\n@@ -121,15 +129,9 @@ protected void doOpen() {\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     // Do not add idle state handler here, because it should be added in the protocol handler.\n                     final ChannelPipeline p = ch.pipeline();\n-                    final boolean enableSsl = getUrl().getParameter(SSL_ENABLED_KEY, false);\n                     final PortUnificationServerHandler puHandler;\n-                    if (enableSsl) {\n-                        puHandler = new PortUnificationServerHandler(url,\n-                            SslContexts.buildServerSslContext(url), true, protocols, channels);\n-                    } else {\n-                        puHandler = new PortUnificationServerHandler(url, null, false, protocols,\n-                            channels);\n-                    }\n+                    puHandler = new PortUnificationServerHandler(url, sslContext, true, protocols,\n+                        channels);\n                     p.addLast(\"negotiation-protocol\", puHandler);\n                 }\n             });",
      "parent_sha": "3b7cb280e744d25c350e93831705e46d74ef445c"
    }
  },
  {
    "oid": "15ed9f85929a30aaba0b02d23a00d4339f67dad3",
    "message": "extract duplicate code to a method (#5541)",
    "date": "2019-12-27T05:27:18Z",
    "url": "https://github.com/apache/dubbo/commit/15ed9f85929a30aaba0b02d23a00d4339f67dad3",
    "details": {
      "sha": "7d4a1ab3cd982c37c7fd766bcc3e05e05450697f",
      "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/RpcUtils.java",
      "status": "modified",
      "additions": 13,
      "deletions": 14,
      "changes": 27,
      "blob_url": "https://github.com/apache/dubbo/blob/15ed9f85929a30aaba0b02d23a00d4339f67dad3/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fsupport%2FRpcUtils.java",
      "raw_url": "https://github.com/apache/dubbo/raw/15ed9f85929a30aaba0b02d23a00d4339f67dad3/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fsupport%2FRpcUtils.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc%2Fdubbo-rpc-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fsupport%2FRpcUtils.java?ref=15ed9f85929a30aaba0b02d23a00d4339f67dad3",
      "patch": "@@ -57,13 +57,7 @@ public static Class<?> getReturnType(Invocation invocation) {\n                     && !invocation.getMethodName().startsWith(\"$\")) {\n                 String service = invocation.getInvoker().getUrl().getServiceInterface();\n                 if (StringUtils.isNotEmpty(service)) {\n-                    Class<?> invokerInterface = invocation.getInvoker().getInterface();\n-                    Class<?> cls = invokerInterface != null ? ReflectUtils.forName(invokerInterface.getClassLoader(), service)\n-                            : ReflectUtils.forName(service);\n-                    Method method = cls.getMethod(invocation.getMethodName(), invocation.getParameterTypes());\n-                    if (method.getReturnType() == void.class) {\n-                        return null;\n-                    }\n+                    Method method = getMethodByService(invocation, service);\n                     return method.getReturnType();\n                 }\n             }\n@@ -81,13 +75,7 @@ public static Type[] getReturnTypes(Invocation invocation) {\n                     && !invocation.getMethodName().startsWith(\"$\")) {\n                 String service = invocation.getInvoker().getUrl().getServiceInterface();\n                 if (StringUtils.isNotEmpty(service)) {\n-                    Class<?> invokerInterface = invocation.getInvoker().getInterface();\n-                    Class<?> cls = invokerInterface != null ? ReflectUtils.forName(invokerInterface.getClassLoader(), service)\n-                            : ReflectUtils.forName(service);\n-                    Method method = cls.getMethod(invocation.getMethodName(), invocation.getParameterTypes());\n-                    if (method.getReturnType() == void.class) {\n-                        return null;\n-                    }\n+                    Method method = getMethodByService(invocation, service);\n                     return ReflectUtils.getReturnTypes(method);\n                 }\n             }\n@@ -226,4 +214,15 @@ public static Map<String, Object> sieveUnnecessaryAttachments(Invocation invocat\n         }\n         return attachmentsToPass;\n     }\n+\n+    private static Method getMethodByService(Invocation invocation, String service) throws NoSuchMethodException {\n+        Class<?> invokerInterface = invocation.getInvoker().getInterface();\n+        Class<?> cls = invokerInterface != null ? ReflectUtils.forName(invokerInterface.getClassLoader(), service)\n+                : ReflectUtils.forName(service);\n+        Method method = cls.getMethod(invocation.getMethodName(), invocation.getParameterTypes());\n+        if (method.getReturnType() == void.class) {\n+            return null;\n+        }\n+        return method;\n+    }\n }",
      "parent_sha": "cc28365f87aa45c9ccb0de467ee2213da7e4837b"
    }
  },
  {
    "oid": "b80a247ce28a389c7c2cd9a894afbfbbe64ed9ac",
    "message": "unit test",
    "date": "2019-09-05T07:06:48Z",
    "url": "https://github.com/apache/dubbo/commit/b80a247ce28a389c7c2cd9a894afbfbbe64ed9ac",
    "details": {
      "sha": "6422f022eea2bc0ec2ab75deefcf2aee6ef9bd7d",
      "filename": "dubbo-registry/dubbo-registry-etcd3/src/test/java/org/apache/dubbo/registry/etcd/EtcdServiceDiscoveryTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/b80a247ce28a389c7c2cd9a894afbfbbe64ed9ac/dubbo-registry%2Fdubbo-registry-etcd3%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fetcd%2FEtcdServiceDiscoveryTest.java",
      "raw_url": "https://github.com/apache/dubbo/raw/b80a247ce28a389c7c2cd9a894afbfbbe64ed9ac/dubbo-registry%2Fdubbo-registry-etcd3%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fetcd%2FEtcdServiceDiscoveryTest.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry%2Fdubbo-registry-etcd3%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fetcd%2FEtcdServiceDiscoveryTest.java?ref=b80a247ce28a389c7c2cd9a894afbfbbe64ed9ac",
      "patch": "@@ -72,7 +72,7 @@ public void testUnRegistry() throws Exception {\n \n     @Test\n     public void testUpdate() throws Exception {\n-        DefaultServiceInstance serviceInstance = new DefaultServiceInstance(valueOf(System.nanoTime()), \"EtcdTest2Service\", \"127.0.0.1\", 8080);\n+        DefaultServiceInstance serviceInstance = new DefaultServiceInstance(valueOf(System.nanoTime()), \"EtcdTest34Service\", \"127.0.0.1\", 8080);\n         Assertions.assertNull(etcdServiceDiscovery.etcdClient.getKVValue(etcdServiceDiscovery.toPath(serviceInstance)));\n         etcdServiceDiscovery.register(serviceInstance);\n         Assertions.assertNotNull(etcdServiceDiscovery.etcdClient.getKVValue(etcdServiceDiscovery.toPath(serviceInstance)));",
      "parent_sha": "5dcf3017ddff65664ff430ebffdf51f61ba84142"
    }
  },
  {
    "oid": "f6bb5d1c90d44ddf3f7330398cadc5f6b45e99b0",
    "message": "fix: get weightedRoundRobin from map after putIfAbsent (#5663)",
    "date": "2020-01-31T07:28:44Z",
    "url": "https://github.com/apache/dubbo/commit/f6bb5d1c90d44ddf3f7330398cadc5f6b45e99b0",
    "details": {
      "sha": "39a7177f0823e4441c552f312e05c678eccae31b",
      "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/RoundRobinLoadBalance.java",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/apache/dubbo/blob/f6bb5d1c90d44ddf3f7330398cadc5f6b45e99b0/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fcluster%2Floadbalance%2FRoundRobinLoadBalance.java",
      "raw_url": "https://github.com/apache/dubbo/raw/f6bb5d1c90d44ddf3f7330398cadc5f6b45e99b0/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fcluster%2Floadbalance%2FRoundRobinLoadBalance.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Frpc%2Fcluster%2Floadbalance%2FRoundRobinLoadBalance.java?ref=f6bb5d1c90d44ddf3f7330398cadc5f6b45e99b0",
      "patch": "@@ -93,13 +93,14 @@ protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation\n         WeightedRoundRobin selectedWRR = null;\r\n         for (Invoker<T> invoker : invokers) {\r\n             String identifyString = invoker.getUrl().toIdentityString();\r\n-            WeightedRoundRobin weightedRoundRobin = map.get(identifyString);\r\n             int weight = getWeight(invoker, invocation);\r\n+            WeightedRoundRobin weightedRoundRobin = map.get(identifyString);\r\n \r\n             if (weightedRoundRobin == null) {\r\n                 weightedRoundRobin = new WeightedRoundRobin();\r\n                 weightedRoundRobin.setWeight(weight);\r\n                 map.putIfAbsent(identifyString, weightedRoundRobin);\r\n+                weightedRoundRobin = map.get(identifyString);\r\n             }\r\n             if (weight != weightedRoundRobin.getWeight()) {\r\n                 //weight changed\r",
      "parent_sha": "b7cb918ab021a0b7efc27f9e89458e914e9c3584"
    }
  },
  {
    "oid": "a1fec6eb9e96ee3679542f013407ada2b21f7266",
    "message": "\u4fee\u6539\u6587\u672c\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@604 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2011-12-08T12:35:52Z",
    "url": "https://github.com/apache/dubbo/commit/a1fec6eb9e96ee3679542f013407ada2b21f7266",
    "details": {
      "sha": "b8948321caaa5b0a2d4c9529d737f0d428e3ef80",
      "filename": "dubbo-registry/src/main/java/com/alibaba/dubbo/registry/pages/RegistriesPageHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/a1fec6eb9e96ee3679542f013407ada2b21f7266/dubbo-registry%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2Fpages%2FRegistriesPageHandler.java",
      "raw_url": "https://github.com/apache/dubbo/raw/a1fec6eb9e96ee3679542f013407ada2b21f7266/dubbo-registry%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2Fpages%2FRegistriesPageHandler.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fregistry%2Fpages%2FRegistriesPageHandler.java?ref=a1fec6eb9e96ee3679542f013407ada2b21f7266",
      "patch": "@@ -67,7 +67,7 @@ public Page handle(URL url) {\n             }\r\n         }\r\n         return new Page(\"Registries\", \"Registries (\" + rows.size() + \")\",\r\n-                new String[] { \"Registry Address:\", \"Ststus\", \"Registered(\" + registeredCount + \")\", \"Subscribed(\" + subscribedCount + \")\" }, rows);\r\n+                new String[] { \"Registry Address:\", \"Status\", \"Registered(\" + registeredCount + \")\", \"Subscribed(\" + subscribedCount + \")\" }, rows);\r\n     }\r\n \r\n }\n\\ No newline at end of file",
      "parent_sha": "b5a6735c95885d578d1a650cff26bd84683a1eb5"
    }
  },
  {
    "oid": "09ba93e937c952af6897e482446ee9793e1e5f75",
    "message": "fix memory leak of waitForRemove attribute (#7119)\n\nfix #7118",
    "date": "2021-01-23T07:42:21Z",
    "url": "https://github.com/apache/dubbo/commit/09ba93e937c952af6897e482446ee9793e1e5f75",
    "details": {
      "sha": "ace03c2f7770429b0a26a50d2e8841a8fcf8c3ba",
      "filename": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/CacheableFailbackRegistry.java",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/apache/dubbo/blob/09ba93e937c952af6897e482446ee9793e1e5f75/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fsupport%2FCacheableFailbackRegistry.java",
      "raw_url": "https://github.com/apache/dubbo/raw/09ba93e937c952af6897e482446ee9793e1e5f75/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fsupport%2FCacheableFailbackRegistry.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fsupport%2FCacheableFailbackRegistry.java?ref=09ba93e937c952af6897e482446ee9793e1e5f75",
      "patch": "@@ -306,8 +306,11 @@ public void run() {\n                 }\n             }\n \n-            if (semaphore.tryAcquire() && CollectionUtils.isNotEmptyMap(waitForRemove)) {//move to next schedule\n-                cacheRemovalScheduler.schedule(new RemovalTask(), cacheRemovalTaskIntervalInMillis, TimeUnit.MILLISECONDS);\n+            if (CollectionUtils.isNotEmptyMap(waitForRemove)) {\n+                // move to next schedule\n+                if (semaphore.tryAcquire()) {\n+                    cacheRemovalScheduler.schedule(new RemovalTask(), cacheRemovalTaskIntervalInMillis, TimeUnit.MILLISECONDS);\n+                }\n             }\n         }\n     }",
      "parent_sha": "33e39a137938a3e47de6b0a427b79763ae6a462d"
    }
  },
  {
    "oid": "4b1b56312afafb4c32cdf1e65fa02af4af5a09d1",
    "message": "fix compilation error",
    "date": "2020-08-04T06:49:28Z",
    "url": "https://github.com/apache/dubbo/commit/4b1b56312afafb4c32cdf1e65fa02af4af5a09d1",
    "details": {
      "sha": "44c6bbcc1bfab4ded6eb4397d733786863a14657",
      "filename": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/metadata/store/InMemoryWritableMetadataService.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/apache/dubbo/blob/4b1b56312afafb4c32cdf1e65fa02af4af5a09d1/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fclient%2Fmetadata%2Fstore%2FInMemoryWritableMetadataService.java",
      "raw_url": "https://github.com/apache/dubbo/raw/4b1b56312afafb4c32cdf1e65fa02af4af5a09d1/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fclient%2Fmetadata%2Fstore%2FInMemoryWritableMetadataService.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry%2Fdubbo-registry-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fregistry%2Fclient%2Fmetadata%2Fstore%2FInMemoryWritableMetadataService.java?ref=4b1b56312afafb4c32cdf1e65fa02af4af5a09d1",
      "patch": "@@ -125,7 +125,7 @@ public SortedSet<String> getExportedURLs(String serviceInterface, String group,\n \n     @Override\n     public boolean exportURL(URL url) {\n-        String registryCluster = RegistryClusterIdentifier.getExtension().providerKey(url);\n+        String registryCluster = RegistryClusterIdentifier.getExtension(url).providerKey(url);\n         String[] clusters = registryCluster.split(\",\");\n         for (String cluster : clusters) {\n             MetadataInfo metadataInfo = metadataInfos.computeIfAbsent(cluster, k -> {\n@@ -139,7 +139,7 @@ public boolean exportURL(URL url) {\n \n     @Override\n     public boolean unexportURL(URL url) {\n-        String registryCluster = RegistryClusterIdentifier.getExtension().providerKey(url);\n+        String registryCluster = RegistryClusterIdentifier.getExtension(url).providerKey(url);\n         String[] clusters = registryCluster.split(\",\");\n         for (String cluster : clusters) {\n             MetadataInfo metadataInfo = metadataInfos.get(cluster);",
      "parent_sha": "540f4959fd7a6df4cc9c0b49ec277c0eae5887a2"
    }
  },
  {
    "oid": "1b9ce656e1b6c38efa337fac505a086a4bda70a3",
    "message": "\u4fee\u6539\u6587\u672c\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@588 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2011-12-08T08:08:40Z",
    "url": "https://github.com/apache/dubbo/commit/1b9ce656e1b6c38efa337fac505a086a4bda70a3",
    "details": {
      "sha": "6895d8e7059e0b3b9db5d868f399b987ff952392",
      "filename": "dubbo-monitor-simple/src/main/java/com/alibaba/dubbo/monitor/simple/pages/DependenciesPageHandler.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/1b9ce656e1b6c38efa337fac505a086a4bda70a3/dubbo-monitor-simple%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fmonitor%2Fsimple%2Fpages%2FDependenciesPageHandler.java",
      "raw_url": "https://github.com/apache/dubbo/raw/1b9ce656e1b6c38efa337fac505a086a4bda70a3/dubbo-monitor-simple%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fmonitor%2Fsimple%2Fpages%2FDependenciesPageHandler.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-monitor-simple%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fmonitor%2Fsimple%2Fpages%2FDependenciesPageHandler.java?ref=1b9ce656e1b6c38efa337fac505a086a4bda70a3",
      "patch": "@@ -52,7 +52,7 @@ private void appendDependency(List<List<String>> rows, boolean afferent, String\n         StringBuilder buf = new StringBuilder();\r\n         if (level > 0) {\r\n             for (int i = 0; i < level; i ++) {\r\n-                buf.append(\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\");\r\n+                buf.append(\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|\");\r\n             }\r\n             buf.append(afferent ? \"&lt;-- \" : \"--&gt; \");\r\n         }\r",
      "parent_sha": "e9ccc85f429f9bf6d428d4199deb2dc46fdbb374"
    }
  },
  {
    "oid": "89faf3c6e627eb44b2765637c12b0144a5987d49",
    "message": "DUBBO-211 \u8bfb\u53d6jvalidation\u53c2\u6570\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@1175 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2012-03-07T08:23:40Z",
    "url": "https://github.com/apache/dubbo/commit/89faf3c6e627eb44b2765637c12b0144a5987d49",
    "details": {
      "sha": "e9df114ad4055b415d92f8f8180903e244a91e31",
      "filename": "dubbo-validation/src/main/java/com/alibaba/dubbo/validation/support/jvalidation/JValidator.java",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/apache/dubbo/blob/89faf3c6e627eb44b2765637c12b0144a5987d49/dubbo-validation%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fvalidation%2Fsupport%2Fjvalidation%2FJValidator.java",
      "raw_url": "https://github.com/apache/dubbo/raw/89faf3c6e627eb44b2765637c12b0144a5987d49/dubbo-validation%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fvalidation%2Fsupport%2Fjvalidation%2FJValidator.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-validation%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fvalidation%2Fsupport%2Fjvalidation%2FJValidator.java?ref=89faf3c6e627eb44b2765637c12b0144a5987d49",
      "patch": "@@ -53,6 +53,7 @@\n import javax.validation.ConstraintViolation;\r\n import javax.validation.ConstraintViolationException;\r\n import javax.validation.Validation;\r\n+import javax.validation.ValidatorFactory;\r\n import javax.validation.groups.Default;\r\n \r\n import com.alibaba.dubbo.common.URL;\r\n@@ -76,9 +77,17 @@ public class JValidator implements Validator {\n     \r\n     private final javax.validation.Validator validator;\r\n \r\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n     public JValidator(URL url) {\r\n         this.clazz = ReflectUtils.forName(url.getServiceName());\r\n-        this.validator = Validation.buildDefaultValidatorFactory().getValidator();\r\n+        String jvalidation = url.getParameter(\"jvalidation\");\r\n+        ValidatorFactory factory;\r\n+        if (jvalidation != null && jvalidation.length() > 0) {\r\n+            factory = Validation.byProvider((Class)ReflectUtils.forName(jvalidation)).configure().buildValidatorFactory();\r\n+        } else {\r\n+            factory = Validation.buildDefaultValidatorFactory();\r\n+        }\r\n+        this.validator = factory.getValidator();\r\n     }\r\n \r\n     public void validate(Invocation invocation) throws Exception {\r",
      "parent_sha": "eb1927a95a5b504e554831a7eacaf48c4cdd7bdd"
    }
  },
  {
    "oid": "7d10400511ecb47707c95ab072bbf68937da239c",
    "message": "DUBBO-304 \u589e\u52a0\u6a21\u5757\u4fe1\u606f\u7684\u914d\u7f6exsd\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@1477 1a56cb94-b969-4eaa-88fa-be21384802f2",
    "date": "2012-03-26T13:03:56Z",
    "url": "https://github.com/apache/dubbo/commit/7d10400511ecb47707c95ab072bbf68937da239c",
    "details": {
      "sha": "f9535ec56d53dfce6eaf1edecc674240456a4688",
      "filename": "dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/schema/DubboNamespaceHandler.java",
      "status": "modified",
      "additions": 13,
      "deletions": 11,
      "changes": 24,
      "blob_url": "https://github.com/apache/dubbo/blob/7d10400511ecb47707c95ab072bbf68937da239c/dubbo-config%2Fdubbo-config-spring%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fconfig%2Fspring%2Fschema%2FDubboNamespaceHandler.java",
      "raw_url": "https://github.com/apache/dubbo/raw/7d10400511ecb47707c95ab072bbf68937da239c/dubbo-config%2Fdubbo-config-spring%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fconfig%2Fspring%2Fschema%2FDubboNamespaceHandler.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config%2Fdubbo-config-spring%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fconfig%2Fspring%2Fschema%2FDubboNamespaceHandler.java?ref=7d10400511ecb47707c95ab072bbf68937da239c",
      "patch": "@@ -15,17 +15,18 @@\n  */\r\n package com.alibaba.dubbo.config.spring.schema;\n \n-import org.springframework.beans.factory.xml.NamespaceHandlerSupport;\n-\n-import com.alibaba.dubbo.common.Version;\n-import com.alibaba.dubbo.config.ApplicationConfig;\n-import com.alibaba.dubbo.config.ConsumerConfig;\n-import com.alibaba.dubbo.config.MonitorConfig;\n-import com.alibaba.dubbo.config.ProtocolConfig;\n-import com.alibaba.dubbo.config.ProviderConfig;\n-import com.alibaba.dubbo.config.RegistryConfig;\n-import com.alibaba.dubbo.config.spring.ReferenceBean;\n-import com.alibaba.dubbo.config.spring.ServiceBean;\n+import org.springframework.beans.factory.xml.NamespaceHandlerSupport;\r\n+\r\n+import com.alibaba.dubbo.common.Version;\r\n+import com.alibaba.dubbo.config.ApplicationConfig;\r\n+import com.alibaba.dubbo.config.ConsumerConfig;\r\n+import com.alibaba.dubbo.config.ModuleConfig;\r\n+import com.alibaba.dubbo.config.MonitorConfig;\r\n+import com.alibaba.dubbo.config.ProtocolConfig;\r\n+import com.alibaba.dubbo.config.ProviderConfig;\r\n+import com.alibaba.dubbo.config.RegistryConfig;\r\n+import com.alibaba.dubbo.config.spring.ReferenceBean;\r\n+import com.alibaba.dubbo.config.spring.ServiceBean;\r\n \n /**\n  * DubboNamespaceHandler\n@@ -40,6 +41,7 @@ public class DubboNamespaceHandler extends NamespaceHandlerSupport {\n \n     public void init() {\n         registerBeanDefinitionParser(\"application\", new DubboBeanDefinitionParser(ApplicationConfig.class, true));\n+        registerBeanDefinitionParser(\"module\", new DubboBeanDefinitionParser(ModuleConfig.class, true));\r\n         registerBeanDefinitionParser(\"registry\", new DubboBeanDefinitionParser(RegistryConfig.class, true));\n         registerBeanDefinitionParser(\"monitor\", new DubboBeanDefinitionParser(MonitorConfig.class, true));\n         registerBeanDefinitionParser(\"provider\", new DubboBeanDefinitionParser(ProviderConfig.class, true));",
      "parent_sha": "bfe4aed1fcb6a63ece32e11544af45df1daa6c4a"
    }
  },
  {
    "oid": "1a6dbbe2ca3ddf3aa156016f2f734c10eb281f00",
    "message": "Judging qos is in started state when stopping qos (#13271)",
    "date": "2023-11-01T12:04:31Z",
    "url": "https://github.com/apache/dubbo/commit/1a6dbbe2ca3ddf3aa156016f2f734c10eb281f00",
    "details": {
      "sha": "a39e5557064497b27a3e6fa717b624cfc56d796b",
      "filename": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/protocol/QosProtocolWrapper.java",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/apache/dubbo/blob/1a6dbbe2ca3ddf3aa156016f2f734c10eb281f00/dubbo-plugin%2Fdubbo-qos%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fqos%2Fprotocol%2FQosProtocolWrapper.java",
      "raw_url": "https://github.com/apache/dubbo/raw/1a6dbbe2ca3ddf3aa156016f2f734c10eb281f00/dubbo-plugin%2Fdubbo-qos%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fqos%2Fprotocol%2FQosProtocolWrapper.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-plugin%2Fdubbo-qos%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fqos%2Fprotocol%2FQosProtocolWrapper.java?ref=1a6dbbe2ca3ddf3aa156016f2f734c10eb281f00",
      "patch": "@@ -153,7 +153,9 @@ private void startQosServer(URL url, boolean isServer) throws RpcException {\n     /*package*/ void stopServer() {\n         if (hasStarted.compareAndSet(true, false)) {\n             Server server = frameworkModel.getBeanFactory().getBean(Server.class);\n-            server.stop();\n+            if (server.isStarted()) {\n+                server.stop();\n+            }\n         }\n     }\n }",
      "parent_sha": "34fda039b9ebd2a2649ff5aab5eff658b2039e63"
    }
  },
  {
    "oid": "4eb0bde42dcb65fea5f54ed54769713433c279c4",
    "message": "update javadoc",
    "date": "2012-07-24T06:08:15Z",
    "url": "https://github.com/apache/dubbo/commit/4eb0bde42dcb65fea5f54ed54769713433c279c4",
    "details": {
      "sha": "71cbef7033511941311cff0e7ffdb3f84beef4e2",
      "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/extension/ExtensionLoader.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/apache/dubbo/blob/4eb0bde42dcb65fea5f54ed54769713433c279c4/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2Fextension%2FExtensionLoader.java",
      "raw_url": "https://github.com/apache/dubbo/raw/4eb0bde42dcb65fea5f54ed54769713433c279c4/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2Fextension%2FExtensionLoader.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Fcommon%2Fextension%2FExtensionLoader.java?ref=4eb0bde42dcb65fea5f54ed54769713433c279c4",
      "patch": "@@ -136,10 +136,10 @@ public String getExtensionName(Class<?> extensionClass) {\n      *     getActivateExtension(url, key, null);\r\n      * </pre>\r\n      *\r\n-     * @see #getActivateExtension(com.alibaba.dubbo.common.URL, String, String)\r\n      * @param url url\r\n      * @param key url parameter key which used to get extension point names\r\n      * @return extension list which are activated.\r\n+     * @see #getActivateExtension(com.alibaba.dubbo.common.URL, String, String)\r\n      */\r\n     public List<T> getActivateExtension(URL url, String key) {\r\n         return getActivateExtension(url, key, null);\r",
      "parent_sha": "f32e7c5557bc14ee5892cb3bd4693456c8503c3a"
    }
  },
  {
    "oid": "85dd59cd7323160169634ca86708fc3cd9dbea1e",
    "message": "Remove duplicate @Override (#4228)",
    "date": "2019-05-31T11:28:40Z",
    "url": "https://github.com/apache/dubbo/commit/85dd59cd7323160169634ca86708fc3cd9dbea1e",
    "details": {
      "sha": "0ee9156584e7b2fc653d6fb392baf6d05231e226",
      "filename": "dubbo-rpc/dubbo-rpc-xml/src/main/java/org/apache/dubbo/xml/rpc/protocol/xmlrpc/XmlRpcProtocol.java",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/apache/dubbo/blob/85dd59cd7323160169634ca86708fc3cd9dbea1e/dubbo-rpc%2Fdubbo-rpc-xml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fxml%2Frpc%2Fprotocol%2Fxmlrpc%2FXmlRpcProtocol.java",
      "raw_url": "https://github.com/apache/dubbo/raw/85dd59cd7323160169634ca86708fc3cd9dbea1e/dubbo-rpc%2Fdubbo-rpc-xml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fxml%2Frpc%2Fprotocol%2Fxmlrpc%2FXmlRpcProtocol.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc%2Fdubbo-rpc-xml%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdubbo%2Fxml%2Frpc%2Fprotocol%2Fxmlrpc%2FXmlRpcProtocol.java?ref=85dd59cd7323160169634ca86708fc3cd9dbea1e",
      "patch": "@@ -151,7 +151,6 @@ public void run() {\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    @Override\n     protected <T> T doRefer(final Class<T> serviceType, URL url) throws RpcException {\n         XmlRpcProxyFactoryBean xmlRpcProxyFactoryBean = new XmlRpcProxyFactoryBean();\n         xmlRpcProxyFactoryBean.setServiceUrl(url.setProtocol(\"http\").toIdentityString());\n@@ -195,4 +194,4 @@ public void destroy() {\n             }\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
      "parent_sha": "7f7a28987853aa511ba18ab3647c34187e88230f"
    }
  },
  {
    "oid": "292f861f90f14ea7df3adc6a121e64f0b3127e90",
    "message": "fix alibaba RpcContext setAttachment(String,String)",
    "date": "2020-04-24T07:54:46Z",
    "url": "https://github.com/apache/dubbo/commit/292f861f90f14ea7df3adc6a121e64f0b3127e90",
    "details": {
      "sha": "08cc64760a51b17192b42d5bc96919ce6e2f58b9",
      "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/RpcContext.java",
      "status": "modified",
      "additions": 348,
      "deletions": 23,
      "changes": 371,
      "blob_url": "https://github.com/apache/dubbo/blob/292f861f90f14ea7df3adc6a121e64f0b3127e90/dubbo-compatible%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2FRpcContext.java",
      "raw_url": "https://github.com/apache/dubbo/raw/292f861f90f14ea7df3adc6a121e64f0b3127e90/dubbo-compatible%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2FRpcContext.java",
      "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Fdubbo%2Frpc%2FRpcContext.java?ref=292f861f90f14ea7df3adc6a121e64f0b3127e90",
      "patch": "@@ -17,45 +17,371 @@\n \n package com.alibaba.dubbo.rpc;\n \n+import org.apache.dubbo.common.utils.CollectionUtils;\n import org.apache.dubbo.rpc.FutureContext;\n \n+import com.alibaba.dubbo.common.Constants;\n+import com.alibaba.dubbo.common.URL;\n import com.alibaba.dubbo.rpc.protocol.dubbo.FutureAdapter;\n \n+import java.net.InetSocketAddress;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Future;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n \n @Deprecated\n-public class RpcContext extends org.apache.dubbo.rpc.RpcContext {\n+public class RpcContext {\n \n     public static RpcContext getContext() {\n-        return newInstance(org.apache.dubbo.rpc.RpcContext.getContext());\n+        return new RpcContext(org.apache.dubbo.rpc.RpcContext.getContext());\n     }\n \n-    private static RpcContext newInstance(org.apache.dubbo.rpc.RpcContext rpcContext) {\n-        RpcContext copy = new RpcContext();\n-        copy.getAttachments().putAll(rpcContext.getAttachments());\n-        copy.get().putAll(rpcContext.get());\n+    public static RpcContext getServerContext() {\n+        return new RpcContext(org.apache.dubbo.rpc.RpcContext.getServerContext());\n+    }\n+\n+    public static void removeServerContext() {\n+        org.apache.dubbo.rpc.RpcContext.removeServerContext();\n+    }\n+\n+    public static void removeContext() {\n+        org.apache.dubbo.rpc.RpcContext.removeContext();\n+    }\n+\n+    private org.apache.dubbo.rpc.RpcContext newRpcContext;\n+\n+    public RpcContext(org.apache.dubbo.rpc.RpcContext newRpcContext) {\n+        this.newRpcContext = newRpcContext;\n+    }\n+\n+    public Object getRequest() {\n+        return newRpcContext.getRequest();\n+    }\n+\n+    public <T> T getRequest(Class<T> clazz) {\n+        return newRpcContext.getRequest(clazz);\n+    }\n+\n+\n+    public void setRequest(Object request) {\n+        newRpcContext.setRequest(request);\n+    }\n+\n+    /**\n+     * Get the response object of the underlying RPC protocol, e.g. HttpServletResponse\n+     *\n+     * @return null if the underlying protocol doesn't provide support for getting response\n+     */\n+    public Object getResponse() {\n+        return newRpcContext.getResponse();\n+    }\n+\n+    /**\n+     * Get the response object of the underlying RPC protocol, e.g. HttpServletResponse\n+     *\n+     * @return null if the underlying protocol doesn't provide support for getting response or the response is not of the specified type\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T getResponse(Class<T> clazz) {\n+        return newRpcContext.getResponse(clazz);\n+    }\n+\n+    public void setResponse(Object response) {\n+        newRpcContext.setResponse(response);\n+    }\n+\n+    /**\n+     * is provider side.\n+     *\n+     * @return provider side.\n+     */\n+    public boolean isProviderSide() {\n+        return newRpcContext.isProviderSide();\n+    }\n+\n+    /**\n+     * is consumer side.\n+     *\n+     * @return consumer side.\n+     */\n+    public boolean isConsumerSide() {\n+        return newRpcContext.isConsumerSide();\n+    }\n+\n+    public List<URL> getUrls() {\n+        List<org.apache.dubbo.common.URL> newUrls = newRpcContext.getUrls();\n+        if (CollectionUtils.isNotEmpty(newUrls)) {\n+            List<URL> urls = new ArrayList<>(newUrls.size());\n+            for (org.apache.dubbo.common.URL newUrl : newUrls) {\n+                urls.add(new URL(newUrl));\n+            }\n+            return urls;\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public void setUrls(List<URL> urls) {\n+        if (CollectionUtils.isNotEmpty(urls)) {\n+            List<org.apache.dubbo.common.URL> newUrls = new ArrayList<>(urls.size());\n+            for (URL url : urls) {\n+                newUrls.add(url.getOriginalURL());\n+            }\n+            newRpcContext.setUrls(newUrls);\n+        }\n+    }\n+\n+    public URL getUrl() {\n+        return new URL(newRpcContext.getUrl());\n+    }\n+\n+    public void setUrl(URL url) {\n+        newRpcContext.setUrl(url.getOriginalURL());\n+    }\n+\n+    public String getMethodName() {\n+        return newRpcContext.getMethodName();\n+    }\n+\n+    public void setMethodName(String methodName) {\n+        newRpcContext.setMethodName(methodName);\n+    }\n+\n+    public Class<?>[] getParameterTypes() {\n+        return newRpcContext.getParameterTypes();\n+    }\n+\n+    public void setParameterTypes(Class<?>[] parameterTypes) {\n+        newRpcContext.setParameterTypes(parameterTypes);\n+    }\n+\n+    public Object[] getArguments() {\n+        return newRpcContext.getArguments();\n+    }\n+\n+    public void setArguments(Object[] arguments) {\n+        newRpcContext.setArguments(arguments);\n+    }\n+\n+    public RpcContext setLocalAddress(String host, int port) {\n+        newRpcContext.setLocalAddress(host, port);\n+        return this;\n+    }\n+\n+    /**\n+     * get local address.\n+     *\n+     * @return local address\n+     */\n+    public InetSocketAddress getLocalAddress() {\n+        return newRpcContext.getLocalAddress();\n+    }\n+\n+    public RpcContext setLocalAddress(InetSocketAddress address) {\n+        newRpcContext.setLocalAddress(address);\n+        return this;\n+    }\n \n-        copy.setUrls(rpcContext.getUrls());\n-        copy.setUrl(rpcContext.getUrl());\n-        copy.setMethodName(rpcContext.getMethodName());\n-        copy.setParameterTypes(rpcContext.getParameterTypes());\n-        copy.setArguments(rpcContext.getArguments());\n-        copy.setLocalAddress(rpcContext.getLocalAddress());\n-        copy.setRemoteAddress(rpcContext.getRemoteAddress());\n-        copy.setRemoteApplicationName(rpcContext.getRemoteApplicationName());\n-        copy.setInvokers(rpcContext.getInvokers());\n-        copy.setInvoker(rpcContext.getInvoker());\n-        copy.setInvocation(rpcContext.getInvocation());\n+    public String getLocalAddressString() {\n+        return newRpcContext.getLocalAddressString();\n+    }\n+\n+    public String getLocalHostName() {\n+        return newRpcContext.getLocalHostName();\n+    }\n+\n+    public RpcContext setRemoteAddress(String host, int port) {\n+        newRpcContext.setRemoteAddress(host, port);\n+        return this;\n+    }\n+\n+    public InetSocketAddress getRemoteAddress() {\n+        return newRpcContext.getRemoteAddress();\n+    }\n \n-        copy.setRequest(rpcContext.getRequest());\n-        copy.setResponse(rpcContext.getResponse());\n-        copy.setAsyncContext(rpcContext.getAsyncContext());\n+    public RpcContext setRemoteAddress(InetSocketAddress address) {\n+        newRpcContext.setRemoteAddress(address);\n+        return this;\n+    }\n+\n+    public String getRemoteAddressString() {\n+        return newRpcContext.getRemoteAddressString();\n+    }\n+\n+    public String getRemoteHostName() {\n+        return newRpcContext.getRemoteHostName();\n+    }\n+\n+    public String getLocalHost() {\n+        return newRpcContext.getLocalHost();\n+    }\n \n-        return copy;\n+    public int getLocalPort() {\n+        return newRpcContext.getLocalPort();\n+    }\n+\n+    public String getRemoteHost() {\n+        return newRpcContext.getRemoteHost();\n+    }\n+\n+    public int getRemotePort() {\n+        return newRpcContext.getRemotePort();\n+    }\n+\n+    public String getAttachment(String key) {\n+        return newRpcContext.getAttachment(key);\n+    }\n+\n+    public RpcContext setAttachment(String key, String value) {\n+        newRpcContext.setAttachment(key, value);\n+        return this;\n+    }\n+\n+    public RpcContext removeAttachment(String key) {\n+        newRpcContext.removeAttachment(key);\n+        return this;\n+    }\n+\n+    public Map<String, String> getAttachments() {\n+        return newRpcContext.getAttachments();\n+    }\n+\n+    public RpcContext setAttachments(Map<String, String> attachment) {\n+        newRpcContext.setAttachments(attachment);\n+        return this;\n+    }\n+\n+    public void clearAttachments() {\n+        newRpcContext.clearAttachments();\n+    }\n+\n+    /**\n+     * get values.\n+     *\n+     * @return values\n+     */\n+    public Map<String, Object> get() {\n+        return newRpcContext.get();\n+    }\n+\n+    /**\n+     * set value.\n+     *\n+     * @param key\n+     * @param value\n+     * @return context\n+     */\n+    public RpcContext set(String key, Object value) {\n+        newRpcContext.set(key, value);\n+        return this;\n+    }\n+\n+    public RpcContext remove(String key) {\n+        newRpcContext.remove(key);\n+        return this;\n+    }\n+\n+    public Object get(String key) {\n+        return newRpcContext.get(key);\n+    }\n+\n+    @Deprecated\n+    public boolean isServerSide() {\n+        return isProviderSide();\n+    }\n+\n+    @Deprecated\n+    public boolean isClientSide() {\n+        return isConsumerSide();\n+    }\n+\n+    /**\n+     * Async invocation. Timeout will be handled even if <code>Future.get()</code> is not called.\n+     *\n+     * @param callable\n+     * @return get the return result from <code>future.get()</code>\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Future<T> asyncCall(Callable<T> callable) {\n+        try {\n+            try {\n+                setAttachment(Constants.ASYNC_KEY, Boolean.TRUE.toString());\n+                final T o = callable.call();\n+                //local invoke will return directly\n+                if (o != null) {\n+                    FutureTask<T> f = new FutureTask<T>(new Callable<T>() {\n+                        @Override\n+                        public T call() throws Exception {\n+                            return o;\n+                        }\n+                    });\n+                    f.run();\n+                    return f;\n+                } else {\n+\n+                }\n+            } catch (Exception e) {\n+                throw new RpcException(e);\n+            } finally {\n+                removeAttachment(Constants.ASYNC_KEY);\n+            }\n+        } catch (final RpcException e) {\n+            return new Future<T>() {\n+                @Override\n+                public boolean cancel(boolean mayInterruptIfRunning) {\n+                    return false;\n+                }\n+\n+                @Override\n+                public boolean isCancelled() {\n+                    return false;\n+                }\n+\n+                @Override\n+                public boolean isDone() {\n+                    return true;\n+                }\n+\n+                @Override\n+                public T get() throws InterruptedException, ExecutionException {\n+                    throw new ExecutionException(e.getCause());\n+                }\n+\n+                @Override\n+                public T get(long timeout, TimeUnit unit)\n+                        throws InterruptedException, ExecutionException,\n+                        TimeoutException {\n+                    return get();\n+                }\n+            };\n+        }\n+        return ((Future<T>) getContext().getFuture());\n+    }\n+\n+    /**\n+     * one way async call, send request only, and result is not required\n+     *\n+     * @param runnable\n+     */\n+    public void asyncCall(Runnable runnable) {\n+        try {\n+            setAttachment(Constants.RETURN_KEY, Boolean.FALSE.toString());\n+            runnable.run();\n+        } catch (Throwable e) {\n+            // FIXME should put exception in future?\n+            throw new RpcException(\"oneway call error .\" + e.getMessage(), e);\n+        } finally {\n+            removeAttachment(Constants.RETURN_KEY);\n+        }\n     }\n \n-    @Override\n     public <T> Future<T> getFuture() {\n         CompletableFuture completableFuture = FutureContext.getContext().getCompatibleCompletableFuture();\n         if (completableFuture == null) {\n@@ -64,7 +390,6 @@ public <T> Future<T> getFuture() {\n         return new FutureAdapter(completableFuture);\n     }\n \n-    @Override\n     public void setFuture(CompletableFuture<?> future) {\n         FutureContext.getContext().setCompatibleFuture(future);\n     }",
      "parent_sha": "dbda44995c86b2a8b91f342885af3a07fe36828a"
    }
  }
]